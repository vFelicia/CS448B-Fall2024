With timestamps:

00:09 - In a previous video, we explored
the concept of procedures
00:12 - and created our own 
custom “My Block.”
00:14 - Now, let's explore 
the difference
00:16 - between creating a 
“My Block” custom block
00:18 - and using a “Broadcast” block.
00:21 - Both can store sequences of code
as separate procedures.
00:24 - But one may be better to use in 
a certain context than another.
00:28 - We'll also explore
some additional tips and tricks
00:30 - for using “My Blocks” 
successfully.
00:32 - And we'll discuss that option to
“run without screen refresh.”
00:36 - If you have a long, 
complex sequence
00:38 - that performs a 
particular action,
00:40 - you may want to define it
as a custom block, 
00:42 - so you can more easily identify 
00:44 - all the steps involved 
and edit it later.
00:50 - If you've used a 
broadcast block before, 
00:52 - you've already practiced
00:53 - writing a procedure
outside the main program.
00:56 - When the sprite or backdrop 
receives a broadcast, 
00:59 - it can run a series of code
01:01 - that you've defined under the 
“when I receive” hat block.
01:04 - So what's the difference
01:05 - between using a broadcast and
writing your own custom block?
01:08 - Well, there are 
a few differences,
01:10 - but a main one is how the
program handles the code.
01:13 - When you use a custom block in 
your program, the program pauses
01:17 - and runs through all the steps 
01:18 - under the custom block 
before proceeding.
01:21 - Let's use this simple example 
to see what I mean.
01:27 - Notice the program played 
the entire sound
01:29 - before moving on to the spin.
01:31 - Since the program pauses to 
perform all the code 
01:33 - defined under a custom block
01:35 - before moving on, 
01:36 - if you put a forever block 
under a custom block,
01:39 - it will never get to the next 
code blocks in the main program.
01:44 - As you can see,
it never got to the next step.
01:46 - When you use broadcasts 
in your program, 
01:48 - the program sends the message
01:50 - and then proceeds with the 
next steps in the program.
01:52 - So code sequences may 
run simultaneously.
01:55 - Let's see the difference
when I use broadcast.
02:01 - Notice the spin 
is happening 
02:02 - while the code to play 
the sound is running.
02:05 - Because the program sent
the message and moved on.
02:07 - When choosing whether to 
use a custom “My Blocks” block 
02:10 - or a broadcast,
02:11 - think about if you want to run 
through each step 
02:13 - in the procedure before moving 
on or if you want the code
02:16 - to run simultaneously
as your program moves ahead.
02:19 - It's also important to note 
that custom blocks are specific 
02:22 - to the sprite 
where it was defined.
02:24 - When I move to a second sprite,
you'll see my custom block
02:26 - isn't there in 
the blocks palette.
02:28 - If I want to use the same code
for additional sprites,
02:31 - I'll have to copy my definition
to each sprite.
02:34 - Unlike a broadcast block,
that can send messages globally 
02:37 - between all sprites
and backdrops, 
02:39 - a custom “My Blocks” 
block is local, 
02:41 - usable only by the sprite 
it's defined on.
02:44 - The call for 
the custom block 
02:45 - isn't received by 
any other sprites,
02:48 - even if their custom
block has the same name.
02:51 - You may be wondering
02:52 - what is 
“Run without screen refresh”?
02:55 - When you are viewing a Scratch 
program run on the stage,
02:58 - you may not realize that the 
screen is constantly refreshing,
03:01 - redrawing the scene
at a certain frame rate.
03:04 - If the refresh is happening
at the right speed, 
03:06 - your eyes should
perceive continuous motion
03:09 - and you can see all 
the intermediate steps 
03:11 - as the program progresses.
03:14 - But if the sequence runs quickly
between refreshes, 
03:17 - your eyes will not be able to 
perceive the action 
03:19 - and you'll only see 
the finished product.
03:22 - Sometimes we may want to see 
the action, and sometimes
03:25 - we may just want to 
see the result.
03:27 - Take this code that draws a 
wall of bricks on the stage.
03:30 - If I set up this custom block 
and do not check off 
03:33 - “Run without screen refresh”
03:35 - when I run the procedure, I see 
each brick being put in place.
03:39 - Now let's edit this custom block
by right-clicking on it 
03:42 - and choosing “edit.”
03:44 - This time I'll check off 
“Run without screen refresh.”
03:47 - This means it will attempt
to run the script as fast
03:50 - as possible in one frame
and will not refresh the screen
03:53 - until it has finished executing
all the steps in the procedure.
03:57 - When I run the 
custom block now,
03:59 - all the bricks appear 
together at once.
04:01 - If you've used turbo mode 
before in Scratch, 
04:04 - it's a similar concept.
04:06 - But turbo mode applies 
to the entire program, 
04:08 - while this 
“Run without screen refresh” 
04:10 - only applies to the procedure 
in your custom block.
04:14 - One important note is that 
if any of the blocks 
04:16 - in your custom block
involve time, 
04:18 - you should not use 
“Run without screen refresh.”
04:22 - Because the program 
needs to honor the time,
04:24 - trying to run the code
without refreshing could 
04:26 - cause a lag, screen freezes, 
or even program crashes.
04:31 - In another video,  
we’ll explore 
04:33 - creating more complex 
custom blocks using inputs.

Cleaned transcript:

In a previous video, we explored the concept of procedures and created our own custom “My Block.” Now, let's explore the difference between creating a “My Block” custom block and using a “Broadcast” block. Both can store sequences of code as separate procedures. But one may be better to use in a certain context than another. We'll also explore some additional tips and tricks for using “My Blocks” successfully. And we'll discuss that option to “run without screen refresh.” If you have a long, complex sequence that performs a particular action, you may want to define it as a custom block, so you can more easily identify all the steps involved and edit it later. If you've used a broadcast block before, you've already practiced writing a procedure outside the main program. When the sprite or backdrop receives a broadcast, it can run a series of code that you've defined under the “when I receive” hat block. So what's the difference between using a broadcast and writing your own custom block? Well, there are a few differences, but a main one is how the program handles the code. When you use a custom block in your program, the program pauses and runs through all the steps under the custom block before proceeding. Let's use this simple example to see what I mean. Notice the program played the entire sound before moving on to the spin. Since the program pauses to perform all the code defined under a custom block before moving on, if you put a forever block under a custom block, it will never get to the next code blocks in the main program. As you can see, it never got to the next step. When you use broadcasts in your program, the program sends the message and then proceeds with the next steps in the program. So code sequences may run simultaneously. Let's see the difference when I use broadcast. Notice the spin is happening while the code to play the sound is running. Because the program sent the message and moved on. When choosing whether to use a custom “My Blocks” block or a broadcast, think about if you want to run through each step in the procedure before moving on or if you want the code to run simultaneously as your program moves ahead. It's also important to note that custom blocks are specific to the sprite where it was defined. When I move to a second sprite, you'll see my custom block isn't there in the blocks palette. If I want to use the same code for additional sprites, I'll have to copy my definition to each sprite. Unlike a broadcast block, that can send messages globally between all sprites and backdrops, a custom “My Blocks” block is local, usable only by the sprite it's defined on. The call for the custom block isn't received by any other sprites, even if their custom block has the same name. You may be wondering what is “Run without screen refresh”? When you are viewing a Scratch program run on the stage, you may not realize that the screen is constantly refreshing, redrawing the scene at a certain frame rate. If the refresh is happening at the right speed, your eyes should perceive continuous motion and you can see all the intermediate steps as the program progresses. But if the sequence runs quickly between refreshes, your eyes will not be able to perceive the action and you'll only see the finished product. Sometimes we may want to see the action, and sometimes we may just want to see the result. Take this code that draws a wall of bricks on the stage. If I set up this custom block and do not check off “Run without screen refresh” when I run the procedure, I see each brick being put in place. Now let's edit this custom block by rightclicking on it and choosing “edit.” This time I'll check off “Run without screen refresh.” This means it will attempt to run the script as fast as possible in one frame and will not refresh the screen until it has finished executing all the steps in the procedure. When I run the custom block now, all the bricks appear together at once. If you've used turbo mode before in Scratch, it's a similar concept. But turbo mode applies to the entire program, while this “Run without screen refresh” only applies to the procedure in your custom block. One important note is that if any of the blocks in your custom block involve time, you should not use “Run without screen refresh.” Because the program needs to honor the time, trying to run the code without refreshing could cause a lag, screen freezes, or even program crashes. In another video, we’ll explore creating more complex custom blocks using inputs.
