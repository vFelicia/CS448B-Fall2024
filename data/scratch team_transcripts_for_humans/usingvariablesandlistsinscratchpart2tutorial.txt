With timestamps:

00:10 - In our previous
video on variables and lists,
00:12 - we learned variables and lists
00:14 - hold information
you can use in your program.
00:16 - Now, let's see some examples
of using a custom variable,
00:20 - as well as creating
and using a list.
00:23 - Let's create a variable 
00:24 - that stores the 
brightness of the sprite.
00:26 - You'll see there’s no reporter
block for brightness 
00:28 - available in the block palette.
00:31 - I'm going to check 
the box next to 
00:32 - my custom “brightness” 
variable in the block palette,
00:35 - so it will be shown
on the stage.
00:38 - Now, I can right-click
on its stage monitor
00:41 - and I'll see I have
a few options: 
00:43 - “normal readout,”
00:44 - “large readout,”
00:46 - and “slider.”
00:48 - Let's make this a slider
00:49 - so the user can control
the sprite’s brightness.
00:52 - To test this, I'm
going to create a quick script
00:54 - that says when the 
green flag is clicked,
00:57 - the “brightness” variable
should be set to zero.
01:00 - Then, forever, the program
should set the brightness effect
01:04 - to the number
in the variable “brightness.”
01:14 - Let's test this.
01:22 - Pretty cool.
01:23 - And what if we want to have 
the background’s brightness
01:25 - be the opposite of my sprite’s?
01:28 - I'm going to make a black box
as my background
01:31 - and then create a script
01:32 - that says the background
01:33 - should forever set the
brightness effect 
01:35 - to 100 minus what is in 
the “brightness” variable.
01:48 - Let's test this again.
01:53 - The brightness of the background
01:54 - and the sprite 
should be opposite.
02:03 - Sliders can be handy
for other things, too,
02:05 - like speed or volume.
02:06 - And if you want to set 
limits on the 
02:08 - range of numbers
available in the slider,
02:10 - you can right-click on the 
variable’s stage monitor
02:13 - to set a minimum and maximum.
02:15 - For instance, here's a project
where the slider controls
02:18 - the speed of the spin
by setting the “spin” variable
02:21 - as the number 
of degrees to turn.
02:23 - When it spins too fast,
I get dizzy,
02:25 - so I may want to set a lower
maximum number for the slider.
02:40 - You could play with code 
to show or hide the variables
02:43 - on the stage, 
via a stage monitor, 
02:45 - based on something
like mouse placement
02:48 - or reaching a certain point
in a program.
02:50 - In this project, for example,
by using the 
02:52 - “show variable” and 
“hide variable” blocks,
02:55 - the volume slider is only shown
02:57 - when the mouse is in
a certain position on the stage,
03:00 - so it doesn't clutter the screen
03:02 - until the user
wants to change it.
03:16 - You can pass information
to a variable or list 
03:18 - by clicking
or moving a sprite,
03:20 - adjusting a slider, via
code blocks, and more.
03:23 - You can also pass information
from one reporter block, 
03:26 - variable, or list 
to another.
03:29 - This could be helpful because
variables and reporter blocks
03:32 - can only hold one piece
of information at a time.
03:36 - To store
multiple pieces of information,
03:38 - you’ll need to create 
multiple variables
03:40 - to store
different pieces of data in.
03:42 - And then, use the 
“set variable to” block
03:45 - to pass information
from one to another.
03:48 - Or, you may want to consider
storing the data in a list.
03:52 - To create a list, select
the Variables category
03:55 - from the block palette
and click the “Make a List” box.
03:58 - This project, for example,
04:00 - is collecting
the user's answers to questions
04:02 - about their superhero
name, power, and weakness.
04:06 - Each answer could be passed and
stored in individual variables
04:09 - by setting those variables
to “answer”
04:11 - after each related
question is asked.
04:14 - Or, each answer
could be added to a list
04:17 - by using the “add thing to list”
block where “thing” is “answer.”
04:21 - With a list, new information
is simply added to the list,
04:25 - rather than previous data
being overwritten.
04:27 - And then, the list gets 
longer and longer
04:29 - until you tell it
to delete some, or all, 
04:31 - of the information.
04:43 - A list, also known as 
an “array” 
04:45 - in other programing languages,
04:47 - consists of numbers
paired with items.
04:49 - Information from lists
can be requested
04:52 - based on their placement
within the list
04:54 - using the “item of list” 
reporter block.
04:57 - If you look at the “say” block
in this example program,
04:59 - you can see how the information
is being added to a sentence
05:03 - to make a customized message
for each user
05:05 - based on their answers.
05:13 - There are a variety of simple 
and complex uses for lists,
05:16 - such as using a pre-defined list
05:19 - to determine animation,
like in a melody project.
05:23 - Performing calculations, 
05:25 - like determining 
the sum of numbers in a list.
05:36 - Storing inventories and games,
so you can check
05:38 - what items have been collected
or what can be collected.
05:46 - Encoding and decoding 
messages/strings,
05:49 - like an alphabet to 
binary code converter.
05:55 - Recording multiple values
like the movement of a mouse
05:58 - or sprite around the stage,
like in a fruit slicer game
06:02 - or in a position 
recorder project.
06:06 - Creating a system for users
to type letters
06:09 - or display words/
close captions on the stage,
06:12 - like in a Mad Libs project.
06:17 - [Program reading:] 
“One day, a dog
06:18 - by the name of Catty Kittendom
06:20 - was running along the polka dot
bird in Denver.”
06:23 - Or programing a randomized 
prompt idea generator 
06:25 - that utilizes multiple lists 
full of adjectives
06:28 - or categories,
for when you need ideas
06:30 - about what kinds of projects
to create.
06:33 - These are just
a few of the possibilities.
06:36 - The state of your project
is preserved when you save it,
06:39 - meaning if there's 
information in your list,
06:42 - you do not need to 
tell the program 
06:43 - to add those same items 
to your list
06:46 - each time the program is run,
06:48 - unless you have deleted them
from the list
06:50 - and they need to be re-added.
06:52 - Look through all the blocks
available for lists.
06:55 - What do you think each does?
06:56 - How might you use some of the
blocks in a program 
06:59 - to add, edit or reset 
the data in a list?
07:02 - Experiment!
07:04 - How will you use 
variables and lists
07:06 - to create your own 
customized program?

Cleaned transcript:

In our previous video on variables and lists, we learned variables and lists hold information you can use in your program. Now, let's see some examples of using a custom variable, as well as creating and using a list. Let's create a variable that stores the brightness of the sprite. You'll see there’s no reporter block for brightness available in the block palette. I'm going to check the box next to my custom “brightness” variable in the block palette, so it will be shown on the stage. Now, I can rightclick on its stage monitor and I'll see I have a few options “normal readout,” “large readout,” and “slider.” Let's make this a slider so the user can control the sprite’s brightness. To test this, I'm going to create a quick script that says when the green flag is clicked, the “brightness” variable should be set to zero. Then, forever, the program should set the brightness effect to the number in the variable “brightness.” Let's test this. Pretty cool. And what if we want to have the background’s brightness be the opposite of my sprite’s? I'm going to make a black box as my background and then create a script that says the background should forever set the brightness effect to 100 minus what is in the “brightness” variable. Let's test this again. The brightness of the background and the sprite should be opposite. Sliders can be handy for other things, too, like speed or volume. And if you want to set limits on the range of numbers available in the slider, you can rightclick on the variable’s stage monitor to set a minimum and maximum. For instance, here's a project where the slider controls the speed of the spin by setting the “spin” variable as the number of degrees to turn. When it spins too fast, I get dizzy, so I may want to set a lower maximum number for the slider. You could play with code to show or hide the variables on the stage, via a stage monitor, based on something like mouse placement or reaching a certain point in a program. In this project, for example, by using the “show variable” and “hide variable” blocks, the volume slider is only shown when the mouse is in a certain position on the stage, so it doesn't clutter the screen until the user wants to change it. You can pass information to a variable or list by clicking or moving a sprite, adjusting a slider, via code blocks, and more. You can also pass information from one reporter block, variable, or list to another. This could be helpful because variables and reporter blocks can only hold one piece of information at a time. To store multiple pieces of information, you’ll need to create multiple variables to store different pieces of data in. And then, use the “set variable to” block to pass information from one to another. Or, you may want to consider storing the data in a list. To create a list, select the Variables category from the block palette and click the “Make a List” box. This project, for example, is collecting the user's answers to questions about their superhero name, power, and weakness. Each answer could be passed and stored in individual variables by setting those variables to “answer” after each related question is asked. Or, each answer could be added to a list by using the “add thing to list” block where “thing” is “answer.” With a list, new information is simply added to the list, rather than previous data being overwritten. And then, the list gets longer and longer until you tell it to delete some, or all, of the information. A list, also known as an “array” in other programing languages, consists of numbers paired with items. Information from lists can be requested based on their placement within the list using the “item of list” reporter block. If you look at the “say” block in this example program, you can see how the information is being added to a sentence to make a customized message for each user based on their answers. There are a variety of simple and complex uses for lists, such as using a predefined list to determine animation, like in a melody project. Performing calculations, like determining the sum of numbers in a list. Storing inventories and games, so you can check what items have been collected or what can be collected. Encoding and decoding messages/strings, like an alphabet to binary code converter. Recording multiple values like the movement of a mouse or sprite around the stage, like in a fruit slicer game or in a position recorder project. Creating a system for users to type letters or display words/ close captions on the stage, like in a Mad Libs project. [Program reading] “One day, a dog by the name of Catty Kittendom was running along the polka dot bird in Denver.” Or programing a randomized prompt idea generator that utilizes multiple lists full of adjectives or categories, for when you need ideas about what kinds of projects to create. These are just a few of the possibilities. The state of your project is preserved when you save it, meaning if there's information in your list, you do not need to tell the program to add those same items to your list each time the program is run, unless you have deleted them from the list and they need to be readded. Look through all the blocks available for lists. What do you think each does? How might you use some of the blocks in a program to add, edit or reset the data in a list? Experiment! How will you use variables and lists to create your own customized program?
