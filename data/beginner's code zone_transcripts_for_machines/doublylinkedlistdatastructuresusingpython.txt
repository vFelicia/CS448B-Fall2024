in the previous part we covered singly linguished and now we are going to cover the blue linked list in Python so what's our doubly linked list uh doubly linked list is a linear data structure that consists of nodes where each node contains two pointers one pointing to the next node and the another pointing to the previous node structure allows traversal in both direction making it better prints in doubling English we have two pointers one is this one previous it's pointing to the previous node and this one is bonding to the next node this is our head part in as you can see in similar English we just have next filter but in W link list we have previous pointer also and by adding this previous pointer it allows us to Traverse the link list in both Direction since we can Traverse in the Left Right Manner and also in this right to left manner using this previous pointer here is an example of RW English from scalar this part is a part and this one is next pointer which is pointing to this node and in the next node we can see here we have the previous pointer which is pointing to the previous node and its data part and the pointer for the next node which is this one and next bundle of last node is pointing to the null so without wasting time let's get started recording part let's start first of all we have to create a new file you can reference this linked list only you list also for creating our adability so let me just selected Okay so NW link list famous we have to first create a class node and previous point also or just write simple vertical and assign it value To None initially okay after this we are going to create our WL English class I will just naming it D Link list inside our class we have to image Define an init method and pass the cell to head value will run initially okay now let's come to the functions as you can see here list we have inserted start so we can do the same for public English we can also create this for term in English let me just copy paste entire now what we did is first of all we created a new node and after that we are assigning the new nodes next to self loot head you know that self doot head is will point to the start of node and if we have to insert um node here like before it then what we can do is we have to assign the next of our new node to self.net which is the current number so our new node will be inserted here and it's next will be this one after that we can just do start dot radical you know prints us ask the head to the created node and also we have to check one more thing in case of w link please like if our self dot head is not none then what we have to do we also have to assign the previous pointer of our node which is present at head to point our newly created node since we have some node present here then we have to assign the previous pointer of that node which is this one to our newly created node which we created just now after that we have a function inserted and more legally linguished you can do the same for probably English okay so here what we are doing is we are just creating a new node and if our linked list is empty or head is at none then just set the head to new node and otherwise what we have to do is we are creating a temporary variable current head which self dot head value and we are iterating we are iterating through our linked list using this current and equal current head dot next until we reach the current hand dot next value equal to none wins until we reach the end of uh and last note of our link list so after reaching the last node what we are doing is we are just passing the current head dot next one to Value to newly created node and as it's we also have to select the previous pointer of our new node to this current head which is which is the last node initially let's see by example so if this was our last node and we are creating a new node at the end then we also have to assign the previous pointer of this node to the previously considered last node this will complete the linking for our doubling list and after what we what we did here is when we created a new node here and we have to pass the previous pointer of this new liquidity not to the last node that we considered earlier and after doing that this will complete the linking for our W link list after that we have insert after so operating insert after this Define insert after friends we need data and a previous node also why we needed this previous node because in doubling list let's say if I know the value of the previous node let's say I want to create a new node between these two nodes and if I know the previous node value then I can simply insert a new node here by just setting the next point of this linked list to our new node and the previous pointer for new liquidity node to this this previous node also if we have more values like if we have the next of this previous node not equal to none means we have some node after this previous node then we also have to set the previous of this next node to our newly created node so to do this first of all similar to the English link list you have to check whether the previous node is present or note in our linked list and if it's not then we are going to return from here itself otherwise we have to create a new node and after creating the new node we are setting the new nodes next to the previous node.net pass the previous node value here and after the new node after new noise new node is created we have to pass the new nodes next to this previous nodes next it should be previous new notes next pointing pointer is set to previous nodes next we'll see we are creating a memorial then it's this previous mods next which is 1004 in this case will be set to the next of nucleated node new node snap we will do this step later first of all what we have to do is we also have to assign the previous pointer of newly created node 2. the previous node and when it's done we have to check if the if there is a node after the previous note so we can check it by passing if previous mod.net we have to set the previous notes next dot Ram it's the this value this previous notes next dot preview we have to set this value to our new node after that we just have to set the previous nodes next to our newly created node so that's all for insertion and after so our insertion methods are complete now let's try to run them and to our linked list values so first of all just use this print function to print the values of our linked list let's create a new linked list I'm naming it as l feeling at least after that save it and run it so we can see that uh first of all we created a linked list and after doing inserted star start its creating a new node at this start and its value is 10 after that we are inserting at the end after that we are inserting after here we are inserting after the second node so this one is first second and after that we inserted our new node here then we are inserting it start 60 70 80 so 64 17 and uh and then we are inserting a t at end 30 minute time our methods are working fine till now let's add some more thoughts and also and usually as I told that we can reverse the link list in forward manner also and in backward manner also here in W linked list we can also create a method just name it and let's say print backward this method is going to print our notes value in Reverse manner means the last one will be printed first and fill the first node in this one pointer to do that we are similar to here we are eating a temporary variable whose values are selfported so in case of w linked list or linked list you know that our head is always at start you know we can't just Traverse the linked list randomly so first of all we have to create a temporary variable forehead and we will have to reach the end of linked list initially and after that for printing we will be printing the data value one by one and we will be coming to the previous node and then print its data and so on until we reach this null value so this is the way how backward reversal is done in Wing list so the first step for traversing till the end will remain same so let me just copy and paste it down here and as we are not going to print anything while traversing from left to right or while reaching the last note so just cut this out after we reached the last node what we can do is just use while current and means while content is not none we just have to print our value for current heads data and just iterate backwards so in case of iterating in forward we are using the next pointer here you might have guessed that we have to use the previous pointer upload reversing backward and that's it for our great backward function let's try it out save it and run it oh it's showing none so what did I do wrong here oh okay I got it so here you can see they are checking if current head is not equal to none and if it's not let's say in the case of a last node we reached our current had reached the last node then we are we know that its value is not none so we will enter this while loop and we are setting our current thread value to the next so if it's our last plot then the current head value will be set to none and while we are checking current head so this Loop this while loop will not gonna run fix it we just have to say that while current dot next not equal to none and we also have to check whether the current head is planned on Terminal so just do while current ad and current Red Dot next or you can just say while current head and current head dot next since these two are known and if I save it and now run it okay yeah you can see that it's printing in backward first of all it's gonna print this last notes value then 40 20 10 60 70 and none so it's working perfectly now we are remaining with one more important method for Wing list which is the delete method so to delete similar to linked list we can delete the node by checking its key or its data value and we have to create a temporary variable for self.that after creating this temporary variable we have to check if the current hand Dot data is equal to the key which you want to delete then but since we found the nodes that we want to delete by checking its key now for deleting what we have to do is first of all we will be chatting that whether this current Lord is having any previous value node also so if we in current and Dot previous why we are doing it let's say we want to delete this node so how we can relate it we will be assigning this next founder of this previous node to the next node which is this one so we will be setting this next pointer of this previous node to this next node and the previous Wonder of this next node to this previous node so our new linked list will have only these nodes this one this one and this one so if we have a previous slope we are just passing the previous mode next pointer value to value as the current cats next so we don't have a previous note or it's previous value is none then then just assign the self pad to current threads dot next why we did this one because let's say we are going to delete this first node uh starting node then we don't have any previous node for this node and if we want to delete this one then we have to pass this head value to here so our link list will be starting from here that's what we did with this line and this is for previous node apps similarly we have to check whether our current head has a next node also if that's true then we have to pass the previous monitor of current threads next not to parent notes previous value after that we can just and just return from here currently its data value is not equal to key then just increase the current head or assigned to next that's straight for brilliant method let's try it out so just remove delete and let's say I want to delete this pen Delta value let's do it and then print the linked list after running you can see that this node with 10 value or deleted from a link list we can also check if the data of the node which we want to delete is not present in our linked list then we can just see that and that's also let's try this one also just pass some random value which is not present in the in English I'm passing 100 and trying to delete it okay so it's same that node with the data key you give is no fun and it's just ending the link list here so let's all for the W link list we had already covered the main functions for w linked list you can also try other functions like taking the length of the linked list and checking if it's empty or not or some other functions so that's it for this video I hope you learned the concept of doubly linked list and if you like the video please give it a like And subscribe to the channel to put your doubts in the comment box