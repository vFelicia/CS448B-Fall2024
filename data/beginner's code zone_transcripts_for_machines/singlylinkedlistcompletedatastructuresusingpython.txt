hello in this video we are going to learn about an important data structure in Python named later place so it is a linked list a link list is a fundamental data structure in computer science that consists of a sequence of elements or nodes where each node points to the next node in the sequence these boxes represents a node where this front bar first part of a node is called Data part and the other part is for next pointer which points to the next node in the linked list and the end of a link responds to null pointer so what's the difference between arrays and Link list so you can see this is the representation for an array and this one is for Linked list where this is head or you can say start pointer which tells us where the link list starts so in this case it's starting from address 103 and these are the addresses for other nodes in linked list so let's see the main differences between them on the basis of memory allocation you can see arrays uses contiguous memory allocation and linked list known continuous so what's continuous memory allocation here you can see that the first address for this array is 200 and the next value is stored at address 204 and then similarly to 0 8 and 212. the gap of 4 bytes for this store in this data value this is continuous here in linked list our first node is presented this address 103 and the next node is presented address 2000 so it's a huge black so it's not necessary that you have to directly allocate the next node after this address pointer or to the next address window you can allocate it anyway but you have to make sure that you are storing the address of the next node in the next pointer of the previous node like here the data this data 35 is stored and this data pointer of this node and then next notes address is stored in its next pointer which is Thousand Years similarly for this address is storing it in this next folder and this one here and at last we have none which represents that this is the end of name list so as you can see these address locations are not continuous means in our memory we might have a location uh 3004 and we might have stored something else there so it's not necessary that we have to allocate the memory locations contagious in English but it's mandatory in arrays now coming to the next difference bits for size so arrays have fixed size but little List have a dynamic size means let's say in this example um we have the size of we have four elements so its size is four so while creating this array we have to initially tell that our array is going to be of sized phone but it's not necessary in English as you can see we just need the next pointer so you can choose any random location and then add it to your linked list so there's no need to have a fixed size for Linked list now the next difference is the time complexity for Random Access so arrays has arrays have faster Random Access its time complexity is bigger of 1 whereas the linear starts low its time complexity is Big of n let's say you want to access this element then in arrays we just need its index it's it's present it is present at index number two zero one and two so we can directly access it from here but if we want to access let's say in linked list then we have to first go iterate through each node and then check whether the element is present or node so this its average time complexity is we go and after that insertion and deletion so arrays insertion and deletion is slow it take big of end time and English takes only we go one time so when you want to let's say add a element to array let's say at the beginning then you have to shift all the elements after it when at plus one index means shift them towards right so it's taking it's gonna take we both end time for each average insertion and similarly for deletion you will have to let's see if you want to delete this element then you have to shoot the others words left so that's why it's consumed time but in linked list we if you wanna insert a new element anywhere then you can you just have to change the next pointer of one or two notes and similarly for deletion you just have to let's say you want to delete this element we want to delete this node then just allocate the next pointer of this load do this one means you will store this 3000 value at its next window and this node will be deleted so you don't have to pick any of this or other nodes of Link list will be kept unchanged after that iteration in Array it's fast but it's slow and memory head overhead is higher in arrays but it's lower in linked list and these are the use cases so if you want to create a user data structure where you can access elements faster then you should use arrays but if you want a dynamic but if you want to enter the structure with Dynamic data elevation and with frequent insertions and deletions then you must use linked list so that's the theoretical part for Linked list now let's see its implementation in Python for Linked list we require nodes so first of all we are going to create a nodes node class in the node class we have to define the function for the initialization of node and pass the self and data parameter here though a node consists of a data part and a next next node address in case of simple linked list so here we have to note so here we have to assign our data and the next node address to assign the data we will use self.data is equal to data and the next will be set to none initially what this will do when whenever we are we want to use this node class we have to pass this data parameter for initialization and this data will be assigned to this self took data and then so for next node is will be set to none initially so this was for node class now we'll create our LinkedIn linked list class so to do that simply write class then give the name for class in this case linked list after that similar to this node we have to pass a Phoenix method here because the parameter self and in case of linked list initially when a linked list is called then we have to create a selfdrot head and initially its value will be set to none so this is the code for doing that and if you are getting confused with this class and these methods then I would recommend you to learn the oops concepts of python and then you want to be getting confused in this so now our initialization method is defined here after that in our linked list class we have to add methods that we use like insertion methods deletion and method to print our linked list so we will be adding them one by one first of all let's start with insertion and insertion can also be done in many ways like we can insert the new node at the beginning of the linked list so it's insertion at start similarly we can do at the end or we can do it in Middle also so first of all let's create a method for inserting a node at start of linked list for that we have to define a method and give it a name I'm saying insert at start after that we have to pass the self parameter and for insertion at starting we require the data for our node so data is a must parameter here and so initially what we have is we have uh right at none so what we have to do is we have to create a node and then assign its next to none and set our head to this node this will be the case whenever linked list is empty or none if our linked list has other nodes Also let's say like this one node one and no two and then and let's say if our link this link List look like this so what we can do is we have to create a new node and insert it at this start so this is start or you can also say it ahead so to do this we will create a new node first and after creating that note we are going to assign the next of this new node as this node one which was the start node initially where the start was initially and to implement this functionality what we will be doing is the first step is to create a new node and to create a new node let's give it some name and it's a new node and we will be using this node class and for this data we are going to pass this data parameter so what this line will do is it will create a new node with the data which we passed to this method and it will assign this data here to this let's do data and our self dot next will be set to none initially we can change it also now our new node is created after that we have to link this new node to this linked list so we can do this by setting the next by assigning the next of this node to this node so for doing this what we are going to do we are assigning the new nodes next to the head so initially head you can say it had or start initially head was at this node so we have the address of this node in our inside our head so I can pass the cell phone add here we also have to assign the head to this newly created node so that our head will be at this one starting let's start so to do this we can simply write self don't help is equal to this new move so let's try running our program first of all we have to initialize this class so I'm creating a variable l and now this L is a linked list so let's try inserting first L doubt insert the start and give some data for over node let's say 15 and if I run it then it is not showing any errors means everything is working fine and if I try printing this link list then it's showing main link list object at this address and to see the content of our linked list we can create a new function let's say activate and pass this self here we don't need this data parameter here is we are already having the contents of our link list so we just have to print them and to print the content of our English what we can do is create a temporary variable let's say 10 or just say uh current head give the self to add value with this current head now our current head is present at this start or this cell Dot add of our link list and number four getting the data of all these nodes we have to iterate one by one until we reach this none value so what we can do is just simply say while current head is not equal to none simply print the current head dot data and after building the data let's say now initially granted is it starting the data for this node is printed now we have to go to next node so for going to next node we can just say current head is equal to current thread dot next so it will keep moving to the next node for the next address let's use this print method of our linked list so just write l dot ring and let's see okay so it's showing the plus 15 so this is the content of our node as we have only created a single node here it's showing the content of this let's try creating some more notes and give them some random values now let's print it okay so it's printing the values correctly we we are inserting 15 at start so first of all 15 go to inserted at start then 785 comes at start not then 255 and after that after this last command 55 got so it's insertion at start is working perfectly and our print function is also showing the contents correctly now just for better view we can write this so this will insert this string in between these node values so it will be easier to see the outputs and also we can just print none at the end of string yes it's now more clearly visible so we have created these two basic methods for the linked list now after that we can try out more methods like insertion insert at the end of linked list so that the order will be like this one 15 then 75 to 555 not this one in Reverse so to do that let's create a new method give it a name I'm giving insert at end and as we are going to insert it and so we already know the position where our download is going to be added we just need the data for creating our node and just like we created a new note here we are going to create a new node for inserting at the end and now as we are going to insert at the end we have to check if this linked list is empty then we just have to create a new node and assign it as the head so we'll check that we can write if self dot had is equals to none then simply say self door head equal to you know it means head is at this new node and we don't have to assign the none for next because calculating the new node we are already assigning it it's next to none so we don't have to change anything here after that if that's not the case then else condition so our head is not none means it's a linguished containing some nodes like this one and here what we have to do is we have to insert our node in between this none and this last node today this first of all we can create a temporary variable current head and assign that float head to this variable and what we can do is we will just uh initially our head will be at this location so we will iterate one by one until the next of our current node is not none so if we reached this last node then when we perform current head dot next then its value would be equal to 1 so we'll get to know that this is the location where we will be inserting our new node and to do this we can simply write while current add dot next not equal to none we will just keep assigning our current hat to the next location and after the record current and Dot next is equal to none you can just assign the next of this node to our new newly created node like this one current head rope neck would be equal to new node so the next of this node will be pointing to our newly created node and the new node will be pointing to this none as we initialized it here so this will do the task for us let's first try Force this function let's say insert that hand and I am inserting some random values and now into the data for Linked list when I run it okay so this was for our inserted start and this one is same fill here and after that when I perform insert at end and add it to 30 so it added 230 after this last node and before this none and after and similarly with this commands it's it keep adding the new nodes at the end of the link list and the last node is pointing to none so this is working perfectly after that we also have a one more basic function for Linked list that is deletion of the notes so to delete we also we have some other ways like we can delete the notes by its key value or its data so like let's say this node has 255 data and I want to delete the node with this 255 value and we can also delete the nodes based on the position like the index like the index of the known just like in this example in this link list this one is at index 0 index one so if you want to delete the this one this node I can just delete it by passing its index that is one so first of all we are going to create a method which deletes the nodes based on the data of node so to do that just Define a method I'm naming let us delete node pass this self and we are going to delete on based off data so we need data parameter here and to delete nodes in linguished what we how are we linking these notes so we are linking these nodes based on the next value of these nodes so this node one is linked to this node too because the address the next of this node is pointing to this node and let's say I want to remove this Node 1 from here so what I can do is I can just assign the next of the previous node in this case this one two its next node which is this one so I can just assign the new node.next to so this node one will be removed and this will be pointing towards is not so let's use this concept and just assign a temporary variable this is not had so deletion also uh we might encounter a case where our linked list is none for that we will just write if current head so if current had what this objects is whether this value is not assigned to none so if that's the case and our current head dot data matches this data let's say it's uh so that you don't get confused so this e is the data which we are going to delete so if the that of node is equal to this key then what we have to do is simply set the self Dot add to the current head dot next sorry sport eight at first note so our start is our head is this at this first node and the data of this node matches our key so what we have to do is we have to now assign This Thread to the next of this node which is none in this case so this is the code for doing that after that hit the key or the data to be deleted is presented some other notes rather than the first one or it's not present in the link list then for that we have to titrate through all the nodes we can use this current head so data is not equal to the key and our current add is not equal to none so if that's the case we will be just incrementing or we will be just iterating through the nodes by going to the next mode one by one and we I missed one more thing that while in the case of a link list having multiple nodes when we are deleting a note let's say we are deleting this this node so we also have to keep note of the previous node and for previous notes we will be just keep storing the previous node in this variable for the pre node and pass the current thread here so when I first go to this node when current head is at this node our previous node value is equal to this node and now I incremented our current head to its next the current head got here and previous node values still this one and if our e matches this notion data which is this case so we have the previous node value as this one and we also have the current head we just have to uh take the next of this previous node to the next stop this current heads node which we want to delete so this will just do this thing so the node between them will be deleted so this will be directly linked to this node okay after all the traversing first of all we have to get one I forgot to assign this previous node here so first just assign it send it snap value we will be checking if our current head is none means after iterating we reached this none so means the key which we are finding which we want to delete this is not present at any of these nodes so we can just simply say written or say something like the key or the data you want to delete this account at any node and otherwise if that's not the case then what we have to do is that our previous nodes next value to the next of our current head and also make our current head or current node equal to none and we are doing this step because our deletion is already completed here and we are doing this step so that the base used by this node will we get everything so the data present here at this node will also get deleted so this is all we have to do for deletion now let's try it out let's say I want to delete the node having data is equal to 255 and after that printing our linked list running it okay so this also linked list and after I perform the delete operator operation you can see this node having 255 data got deleted so it's working perfectly you can try them out and also I'm not going to explain other methods you can try them out on your own like delete in the node you can also perform tasks like deleting the node based on the position or index for that you will first get a index value from user let's say index number one two three like this and didn't just keep iterating to our nodes until we will also be keeping a counter like increment will increment it each time we iterate through a node and when the counter then the count variable matches the index of the node to be deleted then we will simply perform this delete action so we will be giving note of this previous node for that case also for donating so you should try you can try it out on your own and ask your doubts if you have any so that's all for this video I guess of it with uh I missed one more let me also teach you how to insert at Mid or insert a specific position that's also an important function so let's say insert together means we have some English with some notes and we want to add a new node in between this node of English for doing that we must know the previous notes address and for assigning creating a new node we need data just pass the parameters here previous node which will be stored in the address for previous mode and after previous node after which data our new node has to be inserted and the data for creating new node so similarly for creating new not just use this and before that I'll say for this function we are going to insert the node after some already created node in the link list we must check if there is a node present or not in all English to do that we can just simply check if previous node is none now this is check if our linked list if the previous node value is equal to none and if it's equal to none then we can just show some message like this the previous node is not valid or something like that and we can just return from there no need to create a new node and if that's not the case then we have to create a new node just be done next of the new node let's say I am I want to insert a node name Node 1 here to do this I already know the address of previous node but to add this node to link this linked list I also have to assign the next of this node new liquid edit node to this node you can get this node's address from this node so this node is stored at the next of this one so I can simply assign the next of this node as an actual this notes the new nodes next will be equal to the previous nodes next and we also have to create this link here between these previous node and new nodes so to do that we just have to assign this node to this nodes next so this is one is previous node so just do previous notes next is equal to new node and that's it and let me show you an example let's say I want to insert that node after this node so I can just something like that and don't insert after and pass the previous node which is this one in our case and it set the head is right now here so it's at head dot next you can access it using head dot next so I can just write n dot add dot next so this our previous node is this one and let's say new data equal to 300. and after that I also want to print my name list after running that as you can see uh new node with 300 data it is added to the linked list after this node which we passed yes so this is also working perfectly and that's all for this video and its method like that you can try out more methods like I said delete no with some specific position or methods like to check the length of linked list and to search a data and some index something like that you can try them out and you can ask your doubts in the comment section thank you