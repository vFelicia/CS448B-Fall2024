now this code that we wrote in the last lecture it works what we could do better what I don't like about this implementation is passing this email parameter or argument around in objectoriented languages where we have the concept of objects we shouldn't really pass parameters around because an object encapsulate some data and some behavior so if an object or a class have all the data it needs we don't have to pass parameters around this kind of code we have here is what we refer to as procedural programming if the kind of code we used to write 30 years ago before we had objectoriented programming languages so imagine if we had a field here called email then we wouldn't have to pass this email around and here we could simply log this good email so you can see our metal has no parameters and this is cleaner easier to read easier to understand and easier to maintain also going back to the definition of a component in angular remember a component encapsulate the data the logic and the HTML markup behind a view here the email field is used to encapsulate the data and the on key op method represents the behavior or the logic behind this view and of course here is our HTML template now how do we get here well first of all we don't need this template variable anymore so delete also we're not going to pass that here so our code is a little bit cleaner now now earlier you learn about property binding so we can bind the value property of this input object in the Dom so this email field right and now if I initialize this let's say me at example.com let me load this page the input field should be populated with this email address so look we've got me at example.com however if I change this to domain comm and press enter now in the console look we got me at example.com so how come didn't get me at domain.com because with property binding the direction of binding is from the component to the view so if the value of this email field changes at some point in the future the view will be notified and this input field will be automatically updated now what we need here is a slightly different kind of binding we want a binding that works in two ways from component to the view and from the view to the component so if you type something in the input box we want this email field to be updated let me show you one way to implement this and of course this is not the best way but I'm going to show you a better way in just a few seconds so with this value property binding we have one direction from component to the view for the other direction we can modify this expression here so instead of directly calling the unque up method first we can set email to dollar event dot target dot value then semicolon and then call the unque up method so what I want you to pay attention to here is that for the value of event binding you can write any expression so here we have two statements one for setting the email field and the other to call the uncute method now let's try this code SAVE back in the browser so we've got me at example.com and I'm going to change this to domain comm now enter look in the console we got me at domain.com beautiful so with this implementation we have twoway binding but as you can imagine this is the kind of feature that we may need frequently in a lot of application we don't want to write all this repetitive code is there a better way of course there is in angular we have a special syntax for implementing twoway binding so let me duplicate this line so you can see the difference instead of using property binding on the value of property we use the twoway binding syntax which includes square brackets and parentheses now if this syntax is complicated or you may forget it I give you a tip this is called banana in a box so this is a banana and this is a box so banana in a box now instead of value you bind to ngmodel what is this well our Dom objects are input gum object doesn't have a property called ng model so this is something that angular adds to this Dom object earlier you saw ng for remember ng for is a directive and we use directives to manipulate the Dom so in angular we have another builtin directive called ng model that is used for implementing twoway binding so this implementation we have here is encapsulated in a generic way inside a directive called ng model and with this we don't have to repeat this code every time so then we can simplify this expression we can delete this statement and in key opted enter we simply call the on key op method now look the second line is obviously cleaner shorter and easier to understand so here's the lesson whenever you want to use twoway binding use the banana in a box in tags and bind to the ng model property now let's try this save all right we got this error can't bind to engine model since it is an unknown property of input that's a familiar error isn't it so basically our input object doesn't have a property called ng model it's something that angular adds here but why are we getting this error angular framework consists of several different modules in every module you have a bunch of building blocks that are highly related you have components directives and pipes and these are highly related now not every application needs all the modules in angular because when you bring all these modules you increase the code size so this engine model directive is defined in one of the modules called forms and by default this is not imported into your application so if you want to use engine model or if you want to build any kind of form you need to explicitly import this module how do we do that very easy so let's go to app module with command and P or control P we go to app code module now look at this ng module decorator here we have a property called import that is set to an array in this array we have browser module browser module is one of the builtin modules of angular and it brings some features that almost every browser application needs and here we need to add another module the forms module so on the top so look this is where we are importing the browser module let's import forms module from add angular / forms so let's define in this library and then we can import it into our main app module so forms module save back in the browser all right we've got me at example.com and then I'm going to change this to domain comm enter look at the console and here's me at domain calm beautiful