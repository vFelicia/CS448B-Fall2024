okay access modifiers so far you have seen me declaring classes and their members with the public keyword public is what we call an access modifier in csharp we have totally five access modifiers public private protected internal and protected internal in this lecture I'm gonna talk about public and private and we leave the rest to when we get to the lecture about inheritance so what is an access modifier an access modifier is a way to control access to a class and/or its members now you may wonder why do we need to control access to a class or its members the reason is to create some kind of safety or guard in our applications to improve the robustness in the lecture about fields I explained how we can use the readonly modifier to make sure that a field is assigned only once and this way we developers will not accidentally create bugs in our code take a look at this example here I've declared a customer class with a name field that is declared as private with this code when we declare an instance of the customer we cannot access the name field so we cannot go John dot name that will not compile now you may wonder why do we need something like that well that's the beginning of objectoriented programming an objectoriented programming which is actually one of my absolute favorite topics we have three major concepts encapsulation which is also referred to as information hiding inheritance and polymorphism in this lecture we are going to learn about encapsulation and throughout this course we'll see more examples of achieving encapsulation we're going to leave inheritance and polymorphism to the later section in this course let's start with encapsulation I want to use an analogy think of a restaurant in a restaurant we have several roles we have a cashier we have a manager we have a chef we have one or more kitchen hands we have one or more waiters or waitresses and all these roles collaborate together to provide an amazing experience for you well hopefully because sometimes we go to a restaurant and we come back very disappointed but anyway think of the interaction between a waitress and a chef a waitress takes the order and passes it to the kitchen then the chef looks at the order and does his job and when it's ready he notifies the waitress so that chef is responsible or a few things which is outside the responsibility of the waitress a waitress is not gonna go to the kitchen tell the chef how to chop the vegetables and how to cook the meat and I don't know about different spices each of these roles are responsible for their own things they have some knowledge and some capabilities they perform some functions software should be the same in software we don't have a chef or a waitress but we have classes and these classes collaborate to perform the functionality required from the application now we want to design our classes such that each class is responsible for one thing it does only one job and does it perfectly we want our classes to hide some of the information about how they do the things they are responsible for we don't want other classes to know about the details of other classes and this is what we call encapsulation so we want to encapsulate some data in terms of fields as well as some behavior or functionality in terms of methods in classes and we want to hide the details from the outside so when it comes to field you want to declare them as private and provide methods that would give access to his fields we call these methods getters and setters and these methods are going to be public so we think of fields as the implementation detail which should be invisible from the outside it's how a class stores something in memory we don't want any other classes to know anything about that so to show you an example here we have a person class that has a name field that is declared as private so with this code if we create an instance of the person class we can have access the name field of that object instead we need to call one of the methods here set name or get knee look at the setname method here the interesting thing about this method is that it does a check before assigning the name field of the person so if the value that is passed to this method as the argument is null or empty it's not going to set the name field and this one of the advantages of providing setters and getters we cannot achieve the same thing with a field a field is purely a storage in the memory it doesn't have logic with a sitter or a getter we can have some logic when accessing that field okay before we start coding I just need to emphasize something here in terms of naming convention in csharp we have two naming conventions one is called Pascal case the other is called camel case with Pascal case the first letter of every word should be uppercase like the person here or name or setting note that the first letter of every word is uppercase with camelcase the first letter of only the first word is going to be lowercase but the first letter of every word after that is going to be uppercase example of camel case is the name parameter here so the first letter is lowercase now when it comes to classes we need to use the Pasco case our naming the class or any of its methods four fields the convention is to use the camelcase prefix with an underline so we need to change the name field here to something like this so private fields should start with an underline and they should follow the camelcase okay I think that's enough theory let's start coding and see all these concepts in action okay let's declare a class called person and now we can declare a field called birthdate which should be of type take time but we no longer are going to declare a field as public instead we're going to use private so private date time birthday note that I have used an underline here and camelcase so the first letter of the first word is lowercase now with this code we cannot access the birth date field outside the person class so if we go to the main method here and create a person object person dot see we don't see the birth date field it's hidden from the outside and that's what we mean by information hiding an objectoriented programming okay then how do we set a birth date for that to happen we need a method so let me remove this for now like in the person class I define two methods public void set birth date and this method takes a parameter of type daytime and we call it birth date at this point if there are any logics around birth date we can implement them here in this case we're going to keep things simple we don't necessarily need a logic around birth date at this point so what we need to do is simply set the birth date to the value passed to this method and we declare another method public date/time get birth date and this believe returns that birthday feel now with these two methods we can go back to the main method here as a person that set birthdate you can say new day time 1982 1 1 and of course we can read the birth date so console.writeline person that gets birth date we can run this application and we got the birth date on the console okay I know what you're thinking you probably are confused why we change the access modifier for birth date to private but then gave two methods here that directly modify their field or return this value how is it different from directly going to that field well if that's what you're thinking it's in fact a good question that's one of the questions I also had when I started with objectoriented programming the answer is objects are about behavior about what they do their fields is primarily their internals their implementation detail which should be hidden from the outside world even though in this example it doesn't really make a difference whether we had a public field or a private field with two methods but from an objectoriented perspective we want to follow the principle of encapsulation which suggests that objects should hide their implementation detail and reveal what they can do as opposed to how they do what they're supposed to do with the examples I will show you throughout this course you will realize the importance of this concept more and more well that's it for this lecture what I want you to take away from this lecture is we are going to declare our fields as private and the naming convention is underlined and camelcase in the real world applications we are not going to define two methods like the ones you see here this was purely for demonstration and because I want to take things in a stepbystep fashion in the next lecture I will show you an easier way to achieve the same functionality and that's what we call properties I hope you enjoyed this lecture and thank you for watching hi guys ma chere I hope you're having a fantastic day or night wherever you are in the world this tutorial you have been watching is actually part of one of my C sharp courses where you will learn everything about classes interfaces and objectoriented programming in case you're interested to enroll in the full course I've put the link for you in the video description and if not that's perfectly fine have a great day