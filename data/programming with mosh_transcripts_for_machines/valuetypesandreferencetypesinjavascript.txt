all right in this lecture I'm going to talk about value and reference types in JavaScript now if you're familiar with this concept or your csharp developer feel free to skip this lecture and move on to the next lecture so in JavaScript we have two types of variables we have value types like strings numbers billions null and undefined and reference types which include objects arrays and functions so here is an example when we declare a variable like X and set it to a string like Apple the part of computer's memory is allocated for X variable let's imagine the address of this location in memory is 1 1 1 so X will be a label for this memory location and at that location we have to string Apple now let's see how many where allocation is different for reference types so here we set X to an object instead of a string an object of reference types when this line is executed similar as before a part of computer's memory is allocated for the X variable and let's imagine the address of this memory location is 1 1 1 but our object is not stored in this memory location it's stored somewhere else and let's imagine the address of this target memory location is 2 2 2 so our X variable which is a label for memory location 1 1 1 will hold the address of the target memory location so X is pointing or referencing a different memory location and that's why we call them reference types now in case you're curious why memory allocation is different between value and reference types the reason is that we use value types for simple values like numbers strings boolean's and so on we don't need much memory for this kind of values in contrast we use objects and arrays for storing complex values we need more memory that's why in terms of memory allocation we have two different types of memory we have stack memory which is used for storing simple values or value types heap memory she's used for storing larger complex objects now there are three facts you need to know about value types and reference types the first one is that value types are immutable which means you cannot mutate them you cannot change them once you initialize them they're always the same here is an example so let's declare X and set it to Apple now if we call one of these string methods like to uppercase this method will return a new string which is completely different from our original string so here's our uppercase Apple but if we print X we still have the original lowercase Apple so the original value is not modified that's why we call value types immutable in contrast if X was an object with the title property Apple now we can directly modify this title property here and make it uppercase now if it print X on the console you can see the original object is modified so we no longer have the lowercase Apple in other words we can mutate or change reference types now the second fact about value types is that they're compared by value what do I mean by that well let's imagine X is Apple and I also have Y which is Apple now if we compare x and y the result is true so even though x and y are in two different parts of the memory because their value types they're compared by the value they're holding in this case Apple in contrast reference types are compared by their references and that means if X is an object with title property set to Apple and Y is also another object with the exact same property if we compare them we get false because x and y are reference types and when we compare them the references are compared in other words x is referencing this object at this location two to two whereas Y is referencing this other object at location 3 3 3 so when we compare an X on Y it's like we're comparing 2 to 2 with 3 3 3 and of course they're different so this is the second fact about value types on reference types and the third one is that value types are copied by value what do I mean by that well one more time let's imagine X is Apple now if we declare Y and set it to X because X is a value type a copy of X's value is taken and stored in Y so now x and y are two independent variables in the memory in contrast if X is an object with the title property set to Apple and Y is another variable and we set this to X now both x and y are referencing or pointing to the same object in memory and that means if I change this object via X reference so X dot title let's update this now this change is visible through the other reference so if I print Y look have an object with title set to orange so a value type is copied by its value whereas a reference type is copied by its reference hey thank you for watching my youtube video my name is Mohammad Ani and I'm a fullstack developer applause I know sir and in udemy instructor with about 14 courses at the time of recording this video so I've got lots of courses on both front end and back end development including C sharp and ADA framework a splendid MVC angular architecture unit testing and so on this video watch is actually part of my angular course on udemy that you can get with a discount using the link in the video description and if you want to see my other courses simply head over to program with mass comm slash courses you can also subscribe to my youtube channel to get free videos every week have a great day and I'll be back soon