in the last lecture you learned how to have the view subscribe to events raised by the model in this lecture we're gonna explore how to listen to collection events this is often useful when models are added to or removed from a collection in situations like this you will like the view to reflect the changes automatically a good realworld example of this is the conversation exchange between you and another Facebook user as you type a message and press the enter the message appears on the page immediately I don't know how Facebook has implemented this but if you want to implement something like this with backbone you need a collection of messages every time you post a message the message is added to the collection the view is listening to the changes and is notified that there is a new message in the collection so it appends the message to the conversation or think of tweets as another example you post a tweet and you immediately see that appearing in the list of tweets alright now that you have an understanding of why and when we need to listen to collection events let's see how we can implement it with pack form here is the code we wrote earlier in the lecture passing data to views we are simply passing a song's collection to our view which renders each song separately so here's our song model along with the songs collection here's a song view which renders one song as an li element and here's the songs view which basically authorized the collection and wraps each model with a song view renders it and then appends it to its dom element and finally here's the instantiation of our collection and the view let's try it is in Chrome first okay nothing special here yet let's see what happens if I add a new song to this collection you see the view is not refreshed and that's because it's not listening to the advance published by the collection so let's go ahead and fix this you so here we're using the initialized method to register a handler for the add event of our collection this is similar to what you learned in the last lecture about responding to events raised by a model all backbone connections trigger events when items are added to or remove from them so when a song is added to our collection this method is called which simply logs a message let's see if the plumbing code is working first just baby steps this is a great way to increase your productivity and write code fast instead of doing too many things at once and facing an application that's not working for a million reasons just write a little bit of code test it and make sure it works if it doesn't there is only one reason which hopefully you can identify immediately if you do too much at once it would be hard and timeconsuming to identify what is not working okay let's add a new song to the collection note the message in the console this verifies that the event handling code is working so let's move on to the next step now instead of login a message we would like to append the song to the list of songs this is similar to a conversation exchange on Facebook that I mentioned in their introduction you when an object is added to a collection the ativan is triggered the handler for this event gets an argument which is the object that was just added in this case it refers to a song model so we simply pass it to our song view which is responsible for rendering a song and then we use the jQuery append method to append it to our list now let's try it out so I'm gonna add a song to our collection there you go the song was successfully rendered on the page now let's take this to the next level and make it a bit more challenging we have implemented handling of the add event but how about the remove event if we remove a song from the collection the view should be notified and respond accordingly so let's register a handler for the remove event first you nothing new yet let's make sure that our plumbing code is working and gain baby steps there you go so I removed the first song from the collection and we got the song removed message in the console but the view is not refreshed now we need to write some code to remove the corresponding Dom element from the page there is just one problem here there is no way for us to identify which Dom element to remove let's inspect the list for each song we have an Li but there is no association between these lis and the songs they represent we need to give each Li and ID so we can later use jQuery to select a given Ally and remove it from the Dom so let's go ahead and implement this you here we are using the jQuery attribute function to set the ID attribute of this Dom element there is just one problem here in the section on models I told you that the ID property of a model represents its persistent ID which is generated by the server in this example we don't have a persistent ID because we didn't fetch our songs from a REST API all our songs are manually created on the client what we can resolve this by manually assigning each model and ID as if it was generated by the server you okay now let's test this bit before moving to the next step so I'm gonna inspect the element note that now each Li has an ID which is the idea of the song it refers to okay now we need to modify our code such that when a song is removed we find the Associated li and remove it from the DOM you this code should be pretty familiar to you we use dollar L to get the top Dom element of the view then we use the jQuery find method to find an Li with the given ID and finally remove it there is also a shorter way to write this code every view has a dollar property which allows us to select elements scoped to the view okay now let's test the result so I'm gonna remove a song there you go the first song was removed from the page so to handle collection events we use the on method to register handlers for them banking on collections raise an add event when a model is added to them and you remove event when a model is removed in the next lecture we will see how we can use templates to simplify rendering of the views thank you for watching