the second builtin object we're gonna look at is the string object so I'm gonna define a constant message and set it to a string now look at this message dot what's going on here it looks like we have a bunch of properties and methods but earlier in the course I told you that string is a primitive type primitive types don't have properties and methods only objects do so why is it that we see these properties and methods in this string well the reason for this is because in JavaScript we have two kinds of strings so this is what we call a string primitive but we also have a string object so we have this constructor function string and we can use that to create a new string object so we can pass the same string here now because this is a constructor function we need to apply the new operator and now we have another string now let's take a look at the type of each of these constants so type of message that's a string but type of another is an object so the first constant is a string primitive the second one is an object however when we use the dot notation with a string primitive JavaScript engine internally wraps this with a string object we don't see that but we can work with this like a string object now just like the math object if you want to learn about all these methods it's best to look at the documentation so simply search for a JavaScript string once again on developer mozilla.org on this page you can see all the properties and methods of the string object in this lecture I'm going to show you a few of these methods but I strongly recommend you to look at the documentation once just have a quick look to see what methods are there in case you need them so back to our code let's change this string to this is my first message here we have the length property which returns the number of characters in a string this is particularly useful in situations where you want to make sure the user types at least certain number of characters in an input field or maybe you want to put a limit you don't want the user to type in more than 100 characters now if you want to access a character and a given index you can use square brackets so message of 0 returns T message of 1 returns H if you want to see this string has a special word you can use the includes method so does the string have my yes it does but it doesn't have not we also have another method starts with so this string starts with this but if you pass a capital T here we get false so note that these Searchers are case sensitive we have a similar method ends with so message that ends with E so you can see the last character here is e if you want to find the index of a given character or a given string inside this string you can use the index of method so let's see what is the index of my so my start at index 8 we can also replace a part of a string so replace let's say you want to replace first ways second pretty easy note that this returns a new string and does not modify the original one so if you log the original one we still have this is my first message we also have a couple useful methods to uppercase once again this returns a new string where all characters are uppercase similar to this method we have two lower case and another useful method is trim so let me have a couple of white spaces here before and after our message now if we call the trim method it gets rid of all the white space before and after our message and of course this method has variations for example we have trim left which only removes the whitespace at the beginning of the string we have trim bright and so on another important concept you need to know in JavaScript is escape notation so if you look at the documentation for the string object you can see in this table under escape notation we've got these special characters so if you want to use these you need to encode them using the escape notation for example let's say you want to have a single quote in your string now in this example we have defined this string with a single code so if you want to have a single code inside of the string look our JavaScript engine gets confused because it thinks this second single code represents the end of the string to fix this we need to prefix this with a backslash and now this character is escaped it's encoded so when we log the message you can see the single code is actually part of the string another useful escape character is backslash n which represents a newline so back here if we add a backslash n after my this will add a new line so save the changes let's look at message on the console you can see we have a new line here another very useful method is the split method so message dot split with this we can split a string based on a given character so here I'm gonna pass a whitespace and see what we get we get an array of 5 items and each either in this array is a word in our message next we're going to look at template literals hi guys thank you for watching my javascript tutorial this tutorial is part of my JavaScript course where you learn all the essential JavaScript features that every web and mobile application developer must know if you're an absolute beginner or have some experience in JavaScript and are looking for a fun and indepth course that teaches you the fundamentals of JavaScript this course is for you this course is also packed with tons of exercises that help you master what you learned in the course in fact many of these exercises are questions that come up in technical programming interviews so if you're pursuing a job as a frontend or a backend developer or if you simply want to have a more indepth understanding of JavaScript I highly encourage you to enroll in the course for a limited time you can get this course with a discount using the link in the video description click the link to find out more about the course and enroll