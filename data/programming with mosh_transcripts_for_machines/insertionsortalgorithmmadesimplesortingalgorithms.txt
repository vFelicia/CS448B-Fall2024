hey guys maj here today we're going to talk about insertion sort insertion sort is one of the many sorting algorithms that come up in coding interviews all the time in fact these days more and more companies ask data structure and algorithm questions in their interviews to see if you can think like a programmer in this video I'm going to show you how insertion sort works and how you can implement it in Java if you don't know Java that's perfectly fine you can still follow along and implement the insertion sort algorithm in your favorite programming language also if you want to learn Java I have a comprehensive to our tutorial for you here on my channel the link is below this video so let's jump in and get started the third sorting algorithm we're going to talk about is the insertion sort algorithm a good way to understand insertion sort is to think of playing a card game so imagine each item in this array represents a card the dealer gives you one item or one card at a time every time you get a card you insert it in the right position first you get 8 you keep it then you get 2 you insert it before 8 next you get 4 you insert it between 8 & 2 then you get 1 you insert it before all the items finally get 3 and insert it after 2 so every time you get an item you insert it in the correct position that's why we call this algorithm insertion sort now let's see this in action so we get 8 and should find its correct position amongst the items or cards we have taken so far 8 is the only item we have seen so we assume it's in the correct position next we we should insert it before 8 but how unlike the previous algorithms we're not going to do a swap here instead we're gonna look at all the items we have seen so far if they're greater than 2 we should shift them to the right to open space to insert this is a key distinction between insertion sort and other algorithms we have talked about instead of swapping items with shift them to the right you'll see why in a second so 8 is greater than 2 and we should shift it to the right to open space for 2 to do this first we store two in a separate variable called current next we shift 8 to the right well more accurately we copied to the right so it overrides two that's why you had to store two in a separate variable so we don't lose it now technically we have stored 8 in two places in this array but conceptually we can assume that we shift an 8 to the right so now the item at index 0 is empty so we store the value of the current variable here okay so we inserted 2 in the correct position amongst the items we have seen so far this is the sorted part of the array in every step we pick one item from the unsorted part and insert it at the correct position in the sorted part so next we read for now we look at the items we have seen so far if they're greater than 4 or shift them to the right to open space to insert 4 so here we shift 8 to the right now what about should we shift it to the right no because 2 is smaller than 4 and it should stay where it is so we have found the right place to insert 4 all the items we have seen so far are in the correct position so next we read 1 again we should shift all the greater items to the right to open space for 1 here we should shift 8 4 and 2 to the right because they're all greater than 1 now we insert 1 in the correct position we're almost done one more time you read 3 and shift all the larger items that we have seen to the right now we insert 3 at the correct position and we can see our array is fully sorted so this is insertion sort now let's do time complexity analysis here we need to iterate over the input array and read one item at a time that's an OL of an operation in each step of the iteration we need to iterate over the items we have seen so far and shift them if required in the bestcase scenario if the array is sorted the current item is already in the correct position so we don't need to shift any items that's an O of one operation in the worst case scenario where the array is sorted in descending order we need to shift all the items we have seen to the right because the current item is smaller than all those items that's an O of n operation so the time complexity of insertion sort is all of n for a bestcase scenario and om n squared for the worstcase scenario is the same as bubble sort now spend 20 minutes and implement this algorithm on your own then come back see my solution you just like before let's add a new class called insertion sort in this class we need one method public void sort which takes an integer array now here we need to iterate over this array and insert each item in the correct position so we need a for loop we start from index one because as you saw in the previous video let me read the first item we assume it's in the correct position because there are no other items that we can compare this item to okay so we start at the second index as long as I is less than array that length we increment I now here we store the current item in a variable called current so we set this to array of I then we need another loop to look at all the previous items and if they're greater we need to shift them to the right we can use a for loop or a while loop in my opinion a while loop looks better here so let's say our loop variable is J we set it to I minus 1 we start from the previous item now as long as J is greater than or equal to 0 and the item that we have at this index is greater than the current then we need to shift this item to the right so we set array of J plus 1 to array of J so we copy the item at the same Dex to the right side okay and then we decrement J so after this while loop all the greater items have me shifted to the right finally we can store the current item at index J plus 1 so array of J plus 1 equals current now let's test our implementation so back in the main class I'm gonna replace selection sort with insertion sort we have an empty array let's see if everything works no problem what if you have a single item so far so good what if you have two items they're sorted beautiful what if you have a few more items with some duplicates our array is sorted in ascending order beautiful hey guys Marcia I wanted to let you know that this video is actually part of my ultimate data structures and algorithms course the complete course is 13 hours long and I've divided it into three parts so you can take and complete each part easily if you're serious about learning data structures and algorithms I highly encourage you to take this course and learn all the essential data structures and algorithms from scratch it's much easier and faster than jumping from one tutorial to another we'll be talking about various types of data structures such as linked lists stacks queues hash tables binary trees AVL trees heaps tries graphs and various types of sorting searching and string manipulation algorithms the course is packed with almost 100 interview questions these are the interview questions that get asked that companies like Google Microsoft and Amazon you can watch the course online or offline anytime anywhere as many times as you want and you would also get a certificate of completion and a 30day moneyback guarantee it's exactly like this tutorial it just has more content if you're interested click on the link below this video to enroll in the course thank you and have a great day