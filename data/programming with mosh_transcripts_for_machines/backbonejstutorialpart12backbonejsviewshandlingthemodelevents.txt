in realworld applications you find many instances of a muddled state changing in real time take Facebook for example have you noticed that when someone comments on your post or likes it you would immediately see the result you don't have to refresh the page to see the changes so how does this work there are two common ways to implement something like this one way is to repeatedly ask the server if the state of a model is changed but this can be costly as the application grows there is another way which is called push or push notifications in which the server notifies every client that's interested to know about the changes either way the model that's residing on the client inside the user's browser is updated at this point we need to refresh the view based on the content of the model let's see this in action here I've got a basic view that renders the title of a song as well as the number of users listening to it now let's say this in Chrome so no one is currently listening to this song now I'm going to use the console to simulate a situation where the number of listeners changes so I'm going to update the state of the model by setting the listeners attribute note that the view is not refreshed so we need to make the view listen to the changes in the model and update itself accordingly so let's go ahead and implement this you you have already seen the initialized method before it's called when we instantiate a backbone object here we are using the on method to register a handler for the change event of the model all backbone models publish a change event whenever one of their attributes is changed earlier I told you that backbone models store attributes in a hash which is the reason why we have to use the get and set methods to work with the attributes of models backbone developers have used this technique so that they can keep track of changes in the attributes and publish events if you set the attributes directly on a model keeping track of changes would be hard or impossible so here we are registering the render method as the callback when the change event is triggered the third parameter is to set the context we need to set the context to the view itself when the render method is called otherwise the context would be set to the model now let's see if it's working so currently no one is listening to this song now is set the number of listeners behind scene there you go the view updated immediately now food for thought you don't always have to call the render method when the model state changes even though this is quite common sometimes you may want to display a message somewhere else or apply some CSS class to an element to highlight some fact to the user in that case you would create a separate callback function like unmodeled change you so to handle model events we use the on method to register handlers for them backbone models raise a change event when the state of a model is changed in the next lecture will cover how to respond to the events raised by backbone collections thank you for watching