okay we got two interfaces which is one of my absolute favorite topics in this section I'm going to talk about what is an interface how to declare and implement interfaces and then I will explain how interfaces improve the testability and extensibility of your application so what is an interface an interface is a language construct that is similar to class in terms of syntax but it's fundamentally different let's take a look at the syntax first so here is how we can declare an interface instead of using the class keyword we use the interface keyword and note that in dotnet all interfaces start with the letter I so wherever you see a type that starts with I that represents an interface it's a convention but unlike classes interfaces do not have implementation so you see here we have a method called calculate that is simply a declaration it doesn't have a body it doesn't have curly braces also note that interface members do not have access modifiers so here we don't have public private protected whatever now you may wonder why do we need to construct like that well in simple terms interfaces are used to build loosely coupled applications that is an application whose components are not tightly related to each other which means making a change in one of these components is easier and has less or zero impact on other components let me use an analogy think of the concept of a restaurant and a chef we can say a restaurant needs a chef with certain capabilities by that definition we can fill that role with anyone anyone who has those capabilities can fill the role of the chef for that restaurant so the dependency between the restaurant and the chef is loose if something happens to that chef like he gets seek or it decides to move on to a different job we can fill that role with someone else now in contrary if we said a restaurant needs John as a chef that means we are very dependent on John if something happens to John if he decides to not to come to work and the restaurant is in trouble so this is a definition of a tightly coupled dependency the restaurant is tightly coupled tightly related tightly dependent on John now I use this analogy to explain that when building software we want for classes or our components to be loosely related or dependent on each other so if we decide to make a change in one of these classes it has minimal or zero impact in other classes take a look at this picture here we have two classes order processor and tax calculator in this UML diagram you see a dependency as demonstrated here between order processor and tax calculator in csharp terms that means order processor has a filled or a property that is of type tax calculator now this is an example of tight coupling between oral processor and tax calculator if we make it change to these tax calculator here it may affect order processor and subsequently any of the classes that depend on order processor now we use interfaces to reduce this coupling how well we can change this picture to something like this so instead of order processor being dependent on tax calculator is going to be dependent on an interface that is I tax calculator an interface as you saw earlier is simply a declaration it's not a concrete class it doesn't have code its methods do not have a body so as long as we keep that interface the way it is as in like we are not gonna remove any of its methods or change its parameters it's not going to have any impact on the order processor now if we decide to change the algorithm for calculation of tax we can create different classes that implement this interface here and that would have absolutely no impact on order processor if that concept is new to you don't worry about it I'm going to show you exactly how it works in code interfaces are extremely powerful and once you really understand them you're gonna fall in love with them of this section I'm going to explain how interfaces help improving the testability and extensibility of your application so thank you for watching and I'll see you in the next lecture hi guys Marsh here I hope you're having a fantastic day or night wherever you are in the world this tutorial you have been watching is actually part of one of my C sharp courses where you will learn everything about classes interfaces and objectoriented programming in case you're interested to enroll in the full course I've put the link for you in the video description and if not that's perfectly fine have a great day