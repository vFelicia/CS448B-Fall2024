finally the last group of operators we're going to look at is bitwise operators now this really requires me to go beyond the scope of this course I have to talk about some computer science stuff and honestly I don't really want to bore you because these stuff don't really have that much of practical users in the real world I'm not saying they're useless they definitely have their own use but there are more on this theoretical side and it's not something that you will use on a daily basis however if you're really enthusiastic I'm gonna explain what these bitwise operators are and how they work but feel free to skip this lecture if you just want to focus on the practicality so you know that we humans use the decimal system to represent numbers so 1 2 3 4 5 but in computers these numbers are stored in the binary format which is a combination of zeros and ones so let's take a look at a few examples the number one in the decimal system is represented as seven zeros 1 2 3 4 5 6 7 and and 1 so we have 8 digits each digit is what we call a bit so here we have 8 bits which represents one byte of information in a computer here's another example number 2 in the decimal system equals to 6 zeros and then 1 0 there are mathematical formulas behind this for converting numbers between decimal and binary systems if you don't want to learn the mathematics you can simply Google decimal to binary converter now bitwise operators in JavaScript or any other programming languages are similar to logical operators but they work on the individual bits of a number let me show you what I mean by this so I'm gonna do a console the log 1 or 2 note that here we have a single vertical line that represents a bitwise or so bitwise or logical ORS have double vertical line okay so when we applied the bitwise or between 1 and 2 this is what's going to happen so I had R as the result here now this operator is going to look at each of these beats like this in a vertical way if either of these bits is one the result will be 1 otherwise it will be 0 so here in both these numbers the first 6 bits are 0 so in the result will also have 6 zeros now the 7 bits will be 1 because here we have 1 at this position right and similarly the 8 bit will be 1 because here we have a 1 now if we convert this binary number to a decimal number the result would be 3 so let's save the changes and you can see on the console we have 3 bitwise and is similar so let's duplicate this bitwise and we'll use a single and % for that now the result is going to be something like this so if both numbers are 1 1 will be returned otherwise the result will be 0 so in this case all the bits will end up being 0 because if you look at these 2 first numbers 1 & 2 their first 6 bits are 0 and here in the second number we have this bit that is 1 but the bit at the equivalent position here is 0 so if we applied the bitwise and between these 2 bits the result will be 0 okay so this binary number equals 0 in the decimal system let's save the changes and see this on the console save here it is this is the fundamental of bitwise operators now in JavaScript we have a few more bitwise operators but in the real word they're not that common now let me give you a real world example of when we can use these bitwise operators so at least they make sense to you imagine you want to implement an access control system so the user can have these permissions read write and execute now we can use one byte of information or 8 bits to determine the kind of permission a user can have for example we can use five zeros one two three four five we don't care about the first five bits but for the other three bits if the user has a permission we will use one otherwise we'll use zero so if the user has only the read permission we will use one for the read and four write and execute we'll use zero similarly if the user has read and write permissions we can represent these permission using this binary number and finally if the user has all these permissions we can represent that like this now this is where we use bitwise operators so I'm gonna delete these two lines as well as these few lines on the top let's see how we can implement this access control system using bitwise operators so I'm gonna define a constant called read permission now I need to set this to a decimal number that is equivalent to this binary number that decimal number is four again you can use an online converter to get this similarly I'm gonna define another constant write permission now what I want now is the decimal representation of this binary number so all these bits or flags are off only the right flag is on okay so this binary number 10 is equivalent to 2 in the decimal system and finally execute permission so what we want is the decimal presentation of this binary number all these flags are zero only the execute flag or the execute bit is one and that number is one now I can declare a variable like my permission initially set back to zero now I can give myself extra permissions so I can update my permission like this my permission here we applied the bitwise or to add a permission like read permission as well as the write permission okay now let's take a look at the value of my permission on the console so we get six now we don't care about this decimal number we can use the bitwise and operator to see if I have a given permission so here's an example I'm gonna declare a variable let's call that message now here I'm gonna use the ternary operator the conditional operator remember so we start with a condition we take my permission and use the bitwise and operator along with the read permission now if this evaluates to true that means I have the read permission so let's say we want to display a message like yes otherwise we want to display no let me break this up into multiple lines so you can see clearly so here's our ternary operator we have a condition if that evaluates to true this value will be used otherwise this other value will be used finally let's log this message on the console so I have the read permission but if I remove this read permission here and save the changes now you can see my read permission is gone so here's what I want you to take away with the bitwise or operator we can add permissions and with the bitwise and operator we can check to see if we have a given permission of course this is just one realworld use case for using the bitwise operators there are other use cases but as I told you before there are really not that common so if this lecture was confusing don't worry about it hi guys thank you for watching my javascript tutorial this tutorial is part of my JavaScript course where you learn all the essential JavaScript features that every web and mobile application developer must know if you're an absolute beginner or have some experience in JavaScript and are looking for a fun and indepth course that teaches you the fundamentals of JavaScript this course is for you this course is also packed with tons of exercises that help you master what you learned in the course in fact many of these exercises are questions that come up in technical programming interviews so if you're pursuing a job as a frontend or a backend developer or if you simply want to have a more indepth understanding of JavaScript I highly encourage you to enroll in the course for a limited time you can get this course with a discount using the link in the video description click the link to find out more about the course and enroll