so what is zamarin forms zamarin forms is a library that enables you to build native apps for iOS Android and Windows using a single C code base if you have any experience with Windows presentation Foundation or silver light zamer informs will be very familiar to you so we have this XML based language called zaml which stands for extensible application markup language and we use this to define the user interface of our applications for example we can Define what elements we have on a page where they are located and what do they look like behind every examl file we have what we call a code behind which is basically a class that implements the behavior for that page for example what should happen when we click a button or select an item from a list so these are the responsibilities of the code behind now in terms of architecture Zam informs is built on top of two existing libraries zamarin Android and xamarin.ios so with zamarin forms we work with a single unified API for creating user interfaces and zamine forms will internally map these user interface elements to their corresponding native equivalent and this makes our applications completely native so we don't have user interface elements that look the same across different platforms if you use a button that button looks different depending on where you run your application also because zamin forms is built on top of z. Android and xamarin.ios you can write platform specific code that uses the API exposed by any of these libraries so you're not limited to a common set of features that are available across all these platforms now the first question that a lot of beginners ask me is Mos do I need to know about z. Android or z. iOS in order to learn zamarin forms not at all the only exception is if you want to write something specific for Android or iOS otherwise for the most part you can learn zamarin forms on its own the second beginner's question is how do I know which zamarin product should I use should I use zamin forms or one of the more specific libraries the answer is it depends what makes zamarin forms powerful is the ability to share most if not all your code across these platforms so you code that application once and then build it for different platforms this building is nothing more than just a compile in Visual Studio that's all you have to do so if you don't need to use much of the platform specific functionality and code reuse is more important to you then go for zamin forms otherwise if you're going to do a lot of customization and have quite a few use cases for working with platform specific API then it's better to use z. Android or z. iOS in terms of tooling you have a few options here if you have a Windows machine you can build and deploy apps to Android and Windows but not iOS for that you need a Mac either a MacBook Pro or an iMac on the other side if you're a Mac User you can build apps for Android and iOS but not for Windows so if you want to Target all platforms you need both a Windows and a Mac machine but this is not a requirement to take this course or to learn Zarin forms in general it's all about where you want to deploy your application you can start with a Windows machine and use Visual Studio to build apps for Android and Windows if in the future you want to build your app for iOS you just add a Mac to your setup and you're pretty much done you don't need to write any new code you just build your project for iOS all right next I'm going to show you how to set up your development environment in this video I'm going to show you how to sell zaring on a Windows and a Mac machine I'm going to start off by setting up on Windows and then I will get to Mac whether you're a Windows or a Mac User be sure to watch this video thoroughly so if you're a Windows user you probably have visual studio so you can install zaring and that will install all the required sdks as well as project templates in visual studio so simply head over to zin.com download fill out this form and be sure to set the answer of this question I already have Visual Studio installed to yes so you don't get Visual Studio you only get zamine installer once you run it you're going to see a dialog box like this be sure to select the following items under crossplatform mobile development so the latest version of c.net zamarin So You see I've currently installed version 4.0.3 but there is a newer version so I'm going to tick that and then under common tools and software development kits select Android native development kit you see I've installed both the 32bit and 64bit versions you also need to install Android SDK and then you need to install at least one of Android SDK setups the difference between these items are their version number so you see the first item is API level 19 and 21 and the last one is API level 23 you can go for the last version or if you have enough space on your machine you can install all of them a patchy ant is not really necessary but I have installed it anyway and finally you need to select Java SE development kit now if you have a typical machine and are not part of a network with a proxy server this installation process goes very smoothly but it may fail if you're behind a proxy server or if you're running Windows in a virtual machine on a Mac this happens mainly because zarine installer cannot download some of the required resources so at this point you need to manually install some of these components I've attached a PDF to this lecture with more details about manual installation so hopefully you won't have any problems during the installation but if you encounter any issues you really need to troubleshoot them yourself because every machine is different in terms of the hardware and software and I really cannot help you with that so just Google the exact error message you get and you will definitely find a solution I just want to emphasize do not get discouraged if you get any errors you only need to spend a bit of time to travel through these issues and then everything is going to be fine also it would be really helpful if you post the errors you get and the solutions you find in the discussion board because I can get all these various errors and compile them into a PDF and that would be very valuable resource for future students of this course now what if you're a Mac User you have two options you can either use zamarin Studio on a Mac which is a lightweight IDE similar to visual studio or you can use Visual Studio but this requires a Windows machine in my setup I'm running Windows as a virtual machine using VMware which option is better zamarin studio is the fastest option you simply head over to zar.com download and get zamarin studio and you're good to go you can build apps for IOS and Android but not for Windows if you want to Target Windows you need a Windows machine so you can either get a physical machine or use a virtual machine like me then you need to follow the same steps to install zamarin on your Windows machine in this video I'm going to show you how to create a zamin forms app in Visual Studio whether you're a Windows or a Mac User watch this video thoroughly so here I'm using visual studio 2015 let's create a new project under visual C templates select crossplatform for zamarin form zaps we have two options here portable class library or shared assets the preferred way and the best practice recommended by zamarin is a portable class Library if you want to understand the differences between these two project types I've attached a PDF for you for further reading but read it after watching this video so let's go ahead with this portable class library and I'm going to call our application hello world okay now this process is going to take a few seconds so I'm going to pause the recording okay next you're going to see this dialogue where we select the Target and minimum version for Universal Windows apps a universal windows app can run under Windows 10 or Windows 10 mobile without the need to be written for each I'm going to accept the default here okay our solution is ready now before looking at the structure of this solution as a best practice whenever you create a new zamin forms app right click the solution and go to manage new get packages for solution then go to the updates Tab and make sure to select all packages and update them because zamarin frequently releases new libraries okay as part of this update process one of the older packages is going to be uninstalled and for that you need to restart visual studio so we yes okay all the packages are updated properly now let's see what we got here so in this solution we have six projects the first one is our portable class library and this is where we're going to do most of the work so all the code that should be shared across different platforms should be written here and if you look inside we only have one class app which is the starting point of our application next we have five platform specific projects one for Android one for iOS one for Universal Windows apps which can run on Windows 10 or Windows 10 mobile and one for Windows 8.1 and the last one for Windows Phone 8.1 so anytime you want to write platform specific code we'll write it in these projects now as I explained before the whole idea about zamarin forms is about code reuse we want to write code that can run across different platforms that's why we do most of our work in the portable class Library all these projects you see here have a reference to this class library now if you don't have a Mac you're not going to see this iOS project Here Also let's say you only want to build an app for Android and don't care about other platforms you can simply delete these projects here and if in the future you decide to support them you can simply right click the solution add a new project let's say you want to Target iOS then under iOS expand it Universal and here is the blank app template so you just add a project to your solution and you're good to go okay now let's run this app you can see that currently hello world. Droid is set as the startup project so if I press contrl and F5 it's going to be loaded in an Android emulator here on the toolbar we can see the list of emulators installed on my machine these emulators come as part of installing zamarin so if everything goes well during the installation you should see quite a few emulators here but in my case because I'm running Windows in a virtual machine on a ma I had to manually install Android emulators if you want to deploy and debugger your application on a real device you need to set it up for development first and then you can see it listed here so you simply select it and then press contrl F5 to deploy and run the app on your device or F5 to debug it and these are the shortcuts that we always used in C Development I've attached a PDF to this lecture with additional details about setting up your Android or iOS device for development now let's run this app contrl F5 now the first time you launch Android emulator you got to wait quite a few minutes even up to 10 or 15 minutes depending on your Hardware so please be patient and here is my Android emulator and you can see our first zarins app is running successfully so this app is just a single page with a label in the middle of the screen now your emulator may look different in terms of its size and the controls you have here but all these are settings that can be changed when creating an emulator manually now let's say we want to run this app in an iOS simulator so we right click the iOS project and set it as start a project then on the toolbar I can ED a deploy to my device because I have an iPhone or use one of these simulators iPhone 4 5 6 iPad and so on now this simulator actually runs on my Mac not on the windows and here on the toolbar bar we have this icon zarine Mac agent if you don't see this toolbar go to the view menu under toolbars select iOS we also have a toolbar for Android but I have disabled it for now so with this zarine Mac agent we can select the Mac on our Network that is responsible for launching the simulator so visual studio talks to a zarine agent on Mac in order to launch a simulator in most cases your Mac should be automatically detected but if not you can simply click add a Mac add the IP address here and you're good to go just remember you need to install zarine both on your windows and on your Mac machine now I can press crl F5 and this will launch my iPhone simulator on my Mac okay and here's the same app running in an iOS simulator next I'm going to show you how to create a zamarin forms app using zamarin Studio all right now I'm going to show you how to create a zamarin forms app in zamarin studio on a Mac if you're a Windows user you can skip this video but I encourage you to watch it just to get familiar with what your development environment on a Mac would look like so here I'm using zamarin studio version 6 and I've changed my theme to dark let me show you how to do it so on the top zarine Studio preferences under visual style set the interface theme to dark all right now let's create a new solution under multiplatform category select app and then forms app next I'm going to call this hello world you can see both Android and iOS are checked but we don't have a check box for Windows because in zamarin studio you cannot Target windows and for that you need visual studio now in terms of the shared code the default setting is on use portable class Library the other option is use shared Library which is not something I would recommend again if you want to know the differences between a portable class library and shared assets look at the PDF I have attached to this lecture next I'm going to accept the defaults here which are about location Version Control and test Cloud so nothing important at this point create okay our project is ready and this is much faster than visual studio now as I told you in the last video as a best practice whenever you create a new zamar forms app make sure to update all the packages so right click the solution and go to update new get packages you can see zamarin studio is updating the packages and this is going to take a little while okay all packages are successfully updated now similar to visual studio you can see that the iOS project is set as the startup project because it's Bal and here on the toolbar we can select a simulator so we've got various versions of iPhone and iPad or we can deploy to a real device now to run this application you press command alt and enter and then iOS simulator launches and loads our application if you want to try the Android app right click this project and set it as startup project now you see all the Android emulators here so throughout this course I'll be using zamarin Studio to do my development because it's much faster and more lightweight if you want to use Visual Studio that's perfectly fine all the code I'm going to write in this course is exactly the same and it doesn't matter which IDE you use it's entirely your personal choice all right next we're going to explore this appli in more detail and add a bit of functionality so you will see both zaml and code behind inaction all right this is what I'm going to build now I want to add a new page to our app with a button in the middle of the screen in iOS buttons don't have a border they look like labels so when we click this button we get an alert so let's go ahead and implement this all right as I explained in the last lecture I'm going to use zamarin studio in this course to doing my development if you want to use Visual Studio that's perfectly fine all the code I'm going to write is exactly the same so as I told you earlier in zarine forms we use zaml which is an XML based language to define the visual appearance of our app and we use code behind to implement how the user interface behaves so I'm going to rightclick our portable class library and add a new file on the left side select forms and on the right side select forms content page zaml and now we give this a name greet page if you're using visual studio again right click the portable class library and a new item in the list of templates select cross PL form and here select forms zaml page and call it greet page so this will add two new files to our project one is GD page. zaml and if you expand it here's the code behind which is just a simple C class and we have the same scenario in zammer in studio so here's our code behind and here's our zaml file as you can see zaml is based on XML the root element here content page represents the type of our page in Zam forms we have a few page types we have content page master detail page navigation page Carousel page and so on we use content page to present some content to the user whether that being text images or the combination of the two now let me break up this line so you can see more clearly in our content page element we have a couple of XML namespace declarations the first one is owned by zamarin and this namespace is for elements that have no prefix like this content page element so this element belongs to zamarin to zamarin forms we have another namespace declaration which identifies a prefix so this colon X syntax is used to declare a prefix and if you look at the URI assigned to this X ml namespace you can see that this namespace is owned by Microsoft which represents the standard zaml that Microsoft introduced in year 2009 now what is this colon X here that means any elements or any attributes that is prefixed with an X belongs to this name space look at this attribute the class attribute it's prefixed with an X and we call it X class so this attribute belongs to the Microsoft namespace now look at the value assigned to this attribute it's hello world. greet page which is the fully qualified name of our code behind class so if we switch to the other tab look the name of our class is greet page and it's placed in hello world namespace so using xclass attribute we establish a link between the zaml file and the code behind file now remove the content of this content page element and instead let's add a button so button I want to put this button in the middle of the screen so we set horizontal options to Center and vertical options to Center next we set the text attribute click me so this way with zaml we're defining the visual appearance of our page now what about the behavior when we click this button I want to display an alert in zammer inform ter buttons have an event called clicked so we set clicked to a string and this identifies the name of the method in the code behind that should be called when this event is raised you can see zaran Studio or Visual Studio is suggesting a name for this method handle underline clicked so we press enter that brings us to the code behind press enter again and that generates our event handler so this event handler as you see it's a private method because it doesn't have an access modifier like public it has two arguments one is an object which is the cender or source of the event and the second one is event arcs which brings additional details about an event if this method looks strange or unfamiliar to you I highly recommend you to watch my C Advanced course because there I have a complete lecture on events and handlers now I want to change the implementation of this method to display an alert we call display alert method we inherit this method from content page class which is the base class for our greed page so the arguments we Supply here is the title of the dialog box the message we want to display like hello world and a label for the cancel button let's just call this okay potentially we could Supply another argument if you want to have two buttons like okay and cancel or yes and no but for this video we don't have to worry about it now in terms of clean coding we should keep the Constructor of our classes on the top so I want to move this method down okay we're done with this new page now we want to make sure that this page is displayed when our app is started so back to our solution view in the portable class Library you see we have a file called app. zaml let's expand this here's our code behind you can see here main page property is set to a new instance of hello world page main page is a property that is defined in the base application class and we use that to set the starting page of our application so I'm going to change this to new greed page now let's run this in zamer in studio I'm going to press command alt and enter in Visual Studio you press control and F5 but before doing so make sure in the solution Explorer set one of these platform specific projects as the startup project I'm going to use iOS you can use whatever you want so let's run the application okay here's our button so now you have an idea of what it's like to build crossplatform apps using zamarin forms so you have seen zamarin forms in action and you know that with zamarin forms you can build native apps for different platforms but you might be curious how zarine actually achieves this so let me give you a bit of background all zarine products like zamarin Android xamarin.ios and zamarin forms are built on top of mono which is an open Source version of net that runs on various non Windows platforms like Linux Unix and and OSX mono is a project that has been around since pretty much as long as net itself but it wasn't very popular until recent years in the mono world we had two releases one was called Mono for Android which was later renamed to z. Android and the other release was monotouch which is now what we call xamarin.ios both these libraries give you access to the net Base Class Library so you have the same name spaces your familiar with you got the same classes with the same interfaces but they also give you access to the native API under platform so you have access to additional assemblies and name spaces that mimic the ones that come natively with Android and iOS these are the classes that Objective C or Java developers work with when they build native apps for Android and iOS when using z. Android or z. iOS we work with classes just like standard C classes in net and these libraries will internally call the corresponding API on the target platform now how that happens it's pretty complex and it's not something we need to worry about that's something that developers at zamarin have to deal with now that you have an understanding of zamarin Android and xamarin.ios let's get a little bit more specific here when you build an application with zarine Android zamarin C compiler compiles down your C code to Intermediate Language or ilil it also EDS the monorun time with your application this monor run time is similar to CLR that you should probably be familiar with so when you launch an Android app this runtime is loaded into the memory and then it gets your IL code and compiles it to the native code for Android and this process is what we call Just in Time compilation or jit this is the same mechanism that is in place when you build a regular net application with C when you build a console desktop or web application the same magic happens now with iOS we have a different story apple does not allow jitting so when you build your iOS application zarine C compiler first compiles your C code down to Il and then it uses Apple compiler to compile it to native code and that's why you need an apple machine so the output is native code that iOS can understand and there's no jitting involved here in other words when you ship your application there is no monor runtime embedded in your application so this is how z. Android and xamarin.ios work but what about zamin fors well zamin forms is built on top of these two libraries so we have this assembly called z. forms. core and here we have classes that Define a common unified API to work with different platforms for example we have a class called bun and this is the bun that we reference in zaml or in code behind now we have another bunch of platform specific assemblies that map these common objects in zamin forms to their corresponding native equivalent let me show you so here in this blank solution let's expand this portable class library now under references under from packages look we've got zamarin forms. core and this is the assembly that defines that common API that we work with so here we've got classes like Buton label list view page and so on now if you look at one of the platform specific projects like the Android one again under references from packages now here we have an assembly called zamarin forms. platform. Android and this is the assembly that is responsible for mapping those common controls we have in zamarin forms. core into their corresponding Android equivalent and in this assembly we have a bunch of what we call renderers so these are the classes that know how to render for example a label or a button now we have the same architecture in other projects projects so let's expand the iOS project references from packages now look we've got zamarin forms. platform. iOS so this is how zamarin forms works all right let me quickly give you an overview of how I have structured this course and where you will find the content you're looking for in the next section you're going to learn the basics of zaml and this gives you a good found to progress through the rest of the course next we're going to look at layouts which we use for arranging visual elements on screen so you will learn how to build user interfaces like these next you're going to learn about images you will learn about downloading images from the Internet or embedding them in your applications you will also learn about icons after that we're going to look at lists so you will learn how to present data in beautiful intera active lists following that we're going to look at navigation you will learn how to navigate users from one page to another how to implement Master detail how to implement tabs how to display popups and so on next you're going to learn how to accept input from the user and this will help you build forms and setting pages but we're not going to talk about saving or loading settings in this section that's the topic for the following section so in data access section you will learn various ways you can store application data you will learn about application properties you will learn about file system you'll learn about storing structured data in a SQL light database and finally you will learn about consuming restful Services now if you don't know what restful is all about don't worry I've got some PDFs for you so you're in good hands next we're going to look at mvvm architecture pattern I will explain what mvvm is when you should use it and why and how to implement it but briefly we use mvvm for decoupling our application from a presentation framework like zamine and we do this for testability so at the end of this section I've got a short video where I show you how to unit test your view models more on this later and finally in the last section we're going to look at some more practices and features that are useful in building larger complex applications and in this section I will show you some of the useful plugins that you can use to access common device functionality like using the camera GPS checking the status of the battery detecting motion accessing contact book and so on so there is a lot to cover over the next 7 hours and I hope by the end of watching this course you will have a very solid foundation to build crossplatform mobile apps using zamin forms well hello it's Marsh here I hope you've been enjoying watching my Z forms tutorial in case you didn't know this tutorial is the first hour of my comprehensive 7 and 1 half hour course on uny in this course you will learn how to build native mobile apps for Android iOS and windows with C if you're interested to have this course you can get it with a big discount using the link in the video description and if not that's perfectly fine continue watching as the next section is coming up so as I explained in the last section zaml is an XML based language that we use to define the visual appearance of our applications we're going to use zaml a lot throughout this course so in this section you're going to learn zaml in more detail and by the end of this section you will have a good foundation that will help you progress through the rest of the course so let's get started okay continuing from the project we created in the last section in our greed page first I'm going to delete this button and then in the code behind I'm also going to remove this event handler now back in the zaml file I want to put a label on the page so label I want to put it in the middle of the screen so horizontal options Center vertical options Center and text hello world now we can create the same UI using Code instead of zaml let me show you how so back in the code behind in the Constructor after the call to initialize component we can set the content property of our page this property is derived from content page which is the base class for our greed page now we can set this to a new label and set its properties here so horizontal options we set this to layout options which is an enumeration do Center similarly for vertical options do Center and finally text now don't worry about this red line under initial component I think there's something wrong with my Zam in studio now that aside we can see that we can create user interfaces using Code as well in this case I'm sending the content property to a new label and this is exactly equivalent to what we put between opening and closing tags of content page element now you might ask msh what do we want to create user interfaces in the code as opposed to zaml well in more than 90% of the cases you would use ZL you would use code only if you want to add elements on a page dynamically for example depending on different circumstances you may want to add a label or a button or a slider or whatnot and all this can happen dynamically but as I said this is the kind of behavior that most applications don't exhibit so all I want you to take away here is that if you want to put elements on a page dynamically you can do it in the code now why is zaml better than the code because it's cleaner and less noisy look at these properties here horizontal options and vertical options we're simply setting them to your string Value Center now look at the equivalent in the code we have to prefix this value with layout options the name of the enumeration so there is a little bit of noise in the code and this can get worse when you're dealing with complex hierarchical structures in those situations zaml is a definite ER because XML is naturally hierarchical now the reality is even when we use zaml at run time we have a zaml parser that reads this zaml file and it will instantiate objects just like the code we have written here so the exact same code will be executed by the zaml parser let me show you when it happens so in the solution I'm going to right click the solution and set display options to show off all files if you look at the object folder under debug we have a file here hello world. greet page. zaml dog which stands for generated. CS so this class is automatically generated for us you can see it's a partial class so part of that is here and the other part is in the code behind you can see here we have a call to initialize component method now you might think this method is inherited from content page but no it's not there it's defined in this generated code look it's here and inside this method we have a call to load from zaml so when we compile our application our zaml files are embedded in our assembly and at runtime when initialized component is called this zaml file is extracted from the assem and pass to the zaml parser then zaml parser will take that zaml and generate a user interface like this all right so for now I'm going to delete this code here and we're just going to stick to zaml for creating user interfaces next I'm going to talk about content property all right now let me show you something I want to put a slider below this label slider but if I run this application now we only see the label not the slider but why is that all right let's have a look at zaring documentation to figure out why so I'm going to search for zamarin Content page class all right look at the Declaration of content page class this class is decorated with an attribute called content property and in this attribute we have a string which specifies one of the properties of content page in this case the name of that property is content and you saw that in the last lecture we set the content property to a new label remember now let's look at the Declaration of the content property look here's the content property it's type is a view view is the base class for all our visual elements like buttons labels sliders and so on so because the type of content is view we can set it to an instance of a single view not multiple views that's why we cannot have multiple children or multiple widgets or multiple views inside content page element so what's the solution let me introduce you to a new element stag layout and then I'm going to move these two widgets inside stack layout with stack layout we can stack multiple widgets horizontally or vertically now I want to make sure both the label and the slider are in the middle of the screen so I'm going to grab these two properties horizontal and vertical options and apply them to slack layout now let me run the application again and here's the result so here's our label and here's the slider now let's inspect stack layout class so we search for zamon stack layout class look this class deres from layout of view now if you look at the Declaration of layout class you can see the content property attribute the game and look the name of the content property for the layout is children so let's look at the children property now if you scroll down you're not going to see that children property you have to navigate up the hierarchy so we go to the layout class and layout class implements I layout controller let's look at this interface now look at the children property it's of type I read only list so this children property because it's a kind of list it can contain multiple widgets and that's the reason we can use a stack layout to stack multiple widgets on the screen all right next we want to take this application to the next level so we want to add this Behavior such that when we move this slider the label is updated to show the current value of the slider all right now we want to take this application a little bit further so we want to add this Behavior such that when we move the slider the label is updated to show the current value of the slider to implement this we need to handle the value change event of the slider and then in our event handler we can get the current value and then set the label so pretty basic in the first section you saw an example of handling the click event of a button in zamin forms so the technique we're going to use here is exactly the same for the slider we handle the value changed event and set this to the name of a method in our code behind so enter enter now I'm going to move this down okay inside our event handler we can use this e argument pass to this method to get the new value of the slider but we need a reference to the label so we can set its text how do we do it well back in our examl I'm going to give this label a name or an ID so we use one of the attributes defined in Microsoft namespace so X colon name this x is a prefix which is declared in the XML namespace declaration for Microsoft namespace so this name attribute belongs to the standard Zam that Microsoft introduced in 2009 and it's applicable in other Frameworks that use ZL like silver light or Windows presentation Foundation or zammer in forms now we set this name to an identifier like label now when I save this file and go back to the code behind I can type label Dot and here we have access to our label so we can set the text property I'm going to use string. format value is provide an argument here and then set it to e do new value now the value we get here is a floating Point number between 0 to one and there are a lot of digits after decimal point so I would like to format this value to a fixed point with two digits after the decimal point so let's run the application okay now if I move this slider look the value is updated and this is a pattern that you see in a lot of real world applications but the value may be displayed as percentage now there is just one tiny problem with this application let me restart it the label is displaying hello world instead of the current value of the slider to fix this in the Constructor after the call to initialize component we can explicitly set the value of the slider so again we need a reference to this slider object so back in our examl file we use x name attribute and give it an identifier slider save now back in the code behind we can type slider. value we can say it to zero or 0.5 whatever let's run the application again okay that's much better now let me give you a bit more insight about this x name attribute so under the object folder debug open up hello world. greet page. zl. g. CS look we have two private Fields here one is a label the other is a slider and in initialized component method after the call to load from zaml these private fields are initialized so we have this method find by name which is inherited from content page The Base Class of our greed page and we give this method an argument which specifies the name or the identifier for our widget with this after initialized component we can access this private field like in this case the slider just remember if you put this line before initialized component you're going to get a null reference exception because that private field is not initialized at that point so in this lecture you learn how to access elements in code behind using xname attribute now even though our application is fully functioning but there is a simpler and cleaner way to implement the exact same functionality and that's called Data binding which I'm going to show you in the next lecture all right now let's see how we can use data binding to implement the same behavior data binding is a concept that you see in a lot of UI Frameworks like WPF and silver light and even in web applications we have Frameworks like angular and knockout and many others that provide this concept of data binding basically what it means is that we bind a property of a user interface element to a property of another object in this case we want to bind the text property of the label to the value property of the slider so when the value of the slider changes the text property of the label is automatically updated with this we don't have to manually handle the value change event of a slider which means we don't need to create this event handler either so our code would be cleaner and more maintainable internally the framework itself will create this event handler based on our binding expression so let's see how we can do this first of all I'm going to remove this event handler and back in zaml I'm also going to remove the value changed attribute of slider now we want to bind the text property of the label to the value property of the slider so we need to use a special Syntax for this so far all the attribute values you have seen have been strings at run time these strings are converted to a primitive type or an object using a type converter in case of data binding we cannot conver convert a string value to a binding expression that's why we need a special syntax and in zaml this is called zaml markup extensions so we use curly braces to instruct zaml parser that this is not a string literal and it's a markup extension there are many different markup extensions available in zaml and in this video you're going to learn two of them the first one is binding so curly braces binding now to set up binding we need to specify what object we want to bind the text property to so we set source to now here we want a reference to the slider object that's when we use another Mark of extension so again curly braces now this Mark of extension is called X reference so X colon reference and we use that to ref refence another object in this zaml file not that is prefixed with X which means this belongs to the standard zaml that Microsoft introduced in year 2009 if you work with other zaml based Frameworks like WPF or silver light you would see this now after X reference space we need to specify the name of the target element in this case slider and this is based on the value of x name add attribute all right so here's the source object now what property of this object are we interested in the value property which represents the current value so after Source comma path equals value we call this path instead of property because that property itself may be an object and we may want to use the dot notation to access another property like a b do c that's why it's it's called path all right that's pretty much all we have to write now if we run this app this is what we get note the label previously we formatted this number with two digits after the decimal point so let's go ahead and do this back here so in our binding expression we have set up Source path and now the third property string format equal and we use single quotes to differentiate from double quotes for the value of the text attribute now here we Supply a standard C string format so value is Curly braces zero represents the first argument colon F2 for formatting now let me break this up into multiple lines okay this is clear cleaner and more maintainable now let's run the application again okay that's exactly like before now let's take this to the next level what if we also want to bind the opacity property of the label to the value of the slider so let's try another binding expression opacity we use curly braces for markup extens extensions the first Mark of extension is binding now here we need to specify the source object equals another markup extension we use x reference to reference the slider then we set the path to the value property of the slider now we don't need a string format because opacity is just a number between 0 to one now let me run this application and here's the result note that the label is a little bit grayed out and if we move the slider to the left it becomes transparent or if you go to the right it becomes opaque but look at our binding expression these bindings are a little bit noisy in both cases we are using the slider as the source object so let me show you how to remove this noise and make this code a little bit cleaner and more maintainable we can set the binding context attribute of the label to our slider so again we use markup extension X reference slider now slider will be the source object for any properties of the label which means in our binding expressions for the text and opacity properties we don't need to repeat this line remove remove also we can take this to the next level and remove path equals value and just add value like this so we can put this on the same line binding to value and same here that's definitely cleaner now let's take this to the next level I want to add a box view a box view is a box filled with a color so a of the label I'm going to add a box view set its color to let's say green and again I want to bind its opacity property to the value of the slider so opacity equals markup extension binding we set the source another binary expression X reference slider and pass equal value let's run this application okay here's the result again you see there is a little bit of duplication in this code both the Box View and the label are referencing the slider as their binding context so we can basically move this binding context setup from the label to our stack layout the container for box View and the label and this will be inherited by all the elements inside stack layout which means we can simplify this binding expression for the opacity of the Box view remove the source and the path so this is how we set up data binding now finally we don't really need this X name for the label because we have not referenced it anywhere so we can delete it all right next I'm going to show you how to deal with Device differences all right now let me show you something don't type anything just watch for the stack layout I'm going to remove vertical options attribute let's run this application in Android and see what happens okay this is what we get note that the Box view is on top of the page just below the blue bar now I'm going to run the same app in iOS okay and this is what we get again note where the Box view is located in Android our page started right below the blue bar but in iOS our page starts right from top of the screen so if you had some text here instead of box view that text would Clash with the current time so this is one of the key differences between Android and iOS in this video I'm going to show you how to add some padding to top of the page but only in iOS so back in zamarin studio in this video I'm going to show you how to do this in code behind and then in the next video I'll teach you how to achieve the same thing in zaml the reason I want to introduce you to code behind is so that you have better understanding of what happens under the hood so we have this class called device and this has a static property called OS which is an enumeration of type Target platform so we can check if Target platform is IOS then we set padding of the page which we inherit from content page class to a new thickness object thickness has a few different Constructors and the one I'm going to use now takes four arguments left top right and bottom it's good to remember this order because you're going to use this a lot so left zero top 20 zero and zero so with iOS we always want to add 20 pixels on top of our page so the content of the page does not clash with the standard bar on top of the screen now even though this code is perfectly fine let's let's just assume we want to have different paddings for Android and Windows so if you want to use the same Technique we would end writing code like this else if device. OS equals Target platform. Android something like this now don't worry about these numbers these are just arbitrary now I want to show you a cleaner way to write the exact same code this device class has a method called on platform and this method has two overloads one that is generic as you see here and the other that takes actions I'm going to start with the generic one because it's easier to understand so we Supply the generic parameter in this case I want different thickness objects for different platforms so the generic parameter is thickness now we can supply different thickness objects for different platforms and to make make the code cleaner we can use name parameters in C so iOS new thickness also you can see that thickness here is great out so we can refactor this code and remove it now compare this code with what we wrote earlier we don't have all this if else if else if the code is cleaner and more focused so internally in this method on platform we actually going to have code like what you see on the top so this method takes care of all these conditional statements and Returns the proper thickness object based on the current operating system so then we can get the result from this method and assign it to padding we can use this on platform method with pretty much any objects in this case we interested in thess in your applications you might be interested on an integer being different across different platforms then you would supply three integer arguments now as I explained earlier this on platform method also has a nongeneric overload let me show you how that one works so device. on platform I'm going to use the nongeneric overload you can see here we have four parameters and they all are optional because they are set to null so let's say I want to execute some code only on iOS then I can supply the name parameter here iOS and here I need to specify an action so I'm going to use a Lambda expression for that like this now if you're not sure what this all means you really need to watch my C Advanced course because I've talked a lot about Lambda expressions and actions there so here in this block we can write the code that we want to be executed on iOS for example we can set padding to thickness object this is another way to set the padding property also for discussion sake let's say we want to have a different piece of code to be executed on Android then we set the name parameter action we use a Lambda expression and here we write the Android specific code so this is how we use device.on platform method whether the generic overload or the nongeneric one now as I explained before we aim to use zaml to define the visual appearance of our applications so in the next lecture I'm going to show you how to use on platform in zaml all right now let's see how we can set padding using zaml so in the last lecture you learned that padding is a property of the page and we can set it to a thickness object like this and obviously this applies to all platforms now if you want to apply this padding using zaml we can easily do so like this so for our content page element we set the padding attribute to a string literal now at run time zaml parser will get this string and give it to a type converter which will parse this into a thickness object and again this will apply to all platforms now what if you want to apply this only to iOS then we need to use an element called on platform on platform and this element has attributes like iOS Android and so on but the problem is we cannot use this element as the value of the padding attribute because these values as you have seen so far are either simple strings or zaml markup extensions but they cannot be an XML element that's when we use a special syntax in examl called property element syntax let me show you how it works so first I'm going to remove this attribute now inside content page element I'm going to add another element content page do padding so I'm using an XML element instead of an XML attribute to set the padding property and that's the reason this syntax is called property element syntax because we said c properties using XML elements not attributes now inside this element I can either add a simple string or I can add another element to represent a complex object in this case I want to use on platform element so I can take this here and move it right here now this on platform element maps to a C class let me show you so back in code behind I'm just going to declare a temporary variable new on platform so this is a generic class and here we need to supply the generic parameter so I'm going to use thickness here now this class has properties like Android iOS and so on now I can get this on platform object and assign it to padding there will be an implicit conversion between on platform object and thickness object okay so we want to achieve the same thing in zaml when creating this on platform object we need to specify the generic argument so we use another attribute here X Type arguments and we set this to thickness again to emphasize because this is prefixed with X it belongs to Microsoft namespace and is part of the standard zaml that was first introduced in year 2009 so this line in zaml is exactly like this line in C okay now we need to set properties of our on platform object so back in examle for iOS I'm going to use 020 0 0 and to refresh your memory these numbers represent left top right and bottom in the last video I referred to these numbers as pixels but the reality is it's not a pixel for now for Simplicity imagine these are pixels so now using this technique I can apply various paddings on different platforms I can apply another padding for Android and similarly for Windows if you ever need to so to recap this video we use property element syntax when we are dealing with complex objects that cannot be represented using simple strings all right in this video I'm going to show you how to catch and prevent zaml errors so as an example I want to remove this s here now let's run this application and see what happens so the application launches and it terminates immediately and currently I have no idea what's going on here in situations like this the first thing you should look at is application output tab in zamine studio I believe in Visual Studio this tab is called output now if you look at this tab you see we have have a zaml parts exception the exception says type on platform not found so basically What's Happening Here is we don't have an on platform type that is not generic so this is one way to find the exception another way is to run the application in debug mode in Visual Studio you press F5 instead of control and F5 in zamarin studio you press command and enter instead of command alt and enter another option is to press this play icon on the toolbar so let's run this okay we got the exception so we got a zaml parse exception and the exception message is type on platform not found now the problem we currently have is that we will not know these exceptions until runtime and as we're typing zaml it's quite possible that we may make a few mistakes here and there so is there a better way to catch these errors yes there is we can include our zaml files as part of compilation so they will be compiled into Intermediate Language or ilil and this has a number of benefits the first one is that we can catch errors at compile time instead of runtime the second benefit is that because zaml files are compiled into IL the size of final assembly will be reduced because these zaml files will not be embedded in the final assembly and finally compilation of zaml files will slightly optimize the load and instantiation time for zaml elements now compilation is disabled by default and we need to enable it but that's pretty easy let's go to the solution under properties you find assembly info and here we have attributes that apply to the assembly as a whole like the title The version copyright information and so on we can include another attribute here brackets assembly colon and this prefix means this attribute is applied to the whole assembly zaml compilation now we get a red underline here because we need to resolve the name space so on top of the file using zamarin forms zaml now the parameter to this attribute is an enumeration called zaml compilation options the default value is Skip so I want to set this to compile and that's all we have to do now if I build the application again look we got an error and here's the exact same error we got at runtime but now we're catching it at compile time so this is a pretty good attribute to always include in your assemblies but just in case you need to disable it on a particular zaml file we can simply go to the code behind for that zaml file for example let's say we want to disable this on Greed page so we go to the code behind import the namespace using zamarin forms zaml and then apply the attribute to the class zaml compilation compilation options skip all right we're done with the basics of zaml now it's your turn so in the next I'm going to give you some exercises all right now it's your turn I want you to use what you have learned in this section and build a simple application like this so this is a quote application we've got this button on the top to navigate through different quotes and these are the quotes by Einstein now when building this application you don't necessarily have to use the quotes I've used here you can use Simple string values like quote 1 quote 2 quote 3 the point here is that you have limited number of quotes in your application and as you click next when you get to the end of the list then you start over we also have this slider for changing the size of the text so before you get started look at the PDF I've attached to this lecture all the best and I'll will see you in the next section okay you seem to be very enthusiastic about learning Zin forms so once again if you're interested to take my 7 and 1/2 hour course with a discount click the link in the video description I hope to see you in the course