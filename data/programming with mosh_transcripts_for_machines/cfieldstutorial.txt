okay we got two fields at the beginning of this section I gave you a brief explanation of fields a film is like variable that we declare at the class level and we use that to store data about the class so in this lecture I'm gonna talk about a couple of different ways to initialize fields and then I'll talk about the concept of readonly fields so in the last lecture you saw me declaring a class called customer which had a list of orders and you also saw how I initialize that field using the default or the parameterless constructor while this approach is perfectly fine there is also another school of thought when it comes to initializing fields some developers believe we should use constructors only when we need to initialize our fields based on the values passed from the outside so in this case we are initializing the orders field without any external values the constructor as you see here has no parameters so in situations like that there is another way to initialize the orders field and that looks like the code you see here so we can directly initialize the orders field without the need to create a constructor this approach has an extra benefit and that is we can have multiple constructors and no matter which one is called the orders field will always be initialized to an empty list we'll explore that later when you start coding okay now let's take a look at readonly fields we can declare a field with the readonly modifier to make sure that that field is only assigned once so in that case that fill has to be initialized either directly like the slide you see here or in one of the constructors of the class you might wonder why do we need something like that the reason is to create some kind of safety in our application to improve robustness for example take a look at this customer class here by declaring the orders field as readonly I'll make sure that we'll only have one list where we will keep the list of orders if I accidentally as a developer try to reinitialize this field in another method the data that we had in the field will not be lost it's easier to explain that using an example so let's start coding and see this concepts in action okay let's start by creating a customer class so public class customer a couple of fields so public and ID public string name we can also create an order class public class order I'm gonna leave the implementation of this class for now we don't really need it for this example all we need to do is to create a list of orders and the customer so public list of order now let's declare a couple of instructors for this class so see tour make it just an ID so these that ID equals ID the second one is gonna get an ID and a name and just to recap what we learned in the Constructors lecture we can use it this keyword here and instead of repeating the initialization of the ID like the code you see here we can delegate the control to this constructor here so I'm just gonna use that this keyword has to ID at this point this constructor will be called so the ID will be initialized based on what we get here and then here I can say this name a cause name now if you remember from the lecture about constructors explained why we need to initialize these orders to an empty list just to recap whenever you have a class like customer and inside that class you have a list you should always initialize that list to an empty list now the technique I showed you in that lecture was to create a default constructor like the one here and set the orderers to an empty list like here this approach is perfectly fine but there is a slight problem with that and that is if you use any of these constructors here so this one or this one we have to make sure that the default constructor is always called first so the orders field will be initialized some developers argue and say no we shouldn't initialize feels like the orders here because orders is not dependent on any parameters from the outside so what we can do is we can get rid of this constructor and initialize the orders field here this way no matter which constructor is going to be called the orders field will always be initialized an empty list some developers do not like this approach because they don't like the idea of initializing some of the fields here while declaring them versus initializing the others in the Constructors it's entirely up to you it's more a personal taste I wanted to show you both approaches so you know what is possible they approach you choose is up to you but what I want to emphasize to you is to be consistent with your approach make sure you use the same approach everywhere this way your code would be cleaner okay now let's move on and look at readonly modifier so here I want to declare a method let's call it promote and the intention is this method will promote this customer to a gold customer I'm gonna leave the implementation here let's just put some comment but I want to show you a mistake that I as a developer and accidentally make let's say if I accidentally reinitialize these orders here what would happen so what I'm gonna do is to clean up our code I'm gonna put this customer class and a separate file so cursor here I explained this earlier so with resharper Alt + Enter and enter again now this class ended up in a separate file so that file is customer that's yes now we go back to program we can do the same with the order class back to the program now the code is cleaner let's create a customer object so if our customer equals new customer we're expected to supply an ID and/or a name because we don't have a default or parameterless constructor so look here we've got two constructors I'm gonna use the first one doesn't really matter I'm gonna add two orders to this customer so customer dot orders add new order and let's just copy paste this line so at this point if I display the number of orders the customer has we should see two on the console so let's quickly do that customer that orders that count let's run the application so we got two on the console now let me show you something imagine here we make a call to the promote method this method because of a bug accidentally reinitialized the orders field so now if you run the application all the data that we had in the orders field is lost we have zero this is where you use the readonly modifier go back to the customer there are situations where you know that this field should be initialized only once that's where you decorate that with the readonly modifier this way if you accidentally reset that field in the code you're gonna get a compile time error first of all we can immediately see this error here by the red underline it says readonly field cannot be used as an assignment target so if you don't see the red error when you compile the application you're definitely gonna see that so a readonly field cannot be assigned except in a constructor or a variable initializer so what this means is this line is not acceptable we can only initialize a readonly field either here directly when we are declaring that or in the constructor so really is one of the ways that you can improve the robustness of your application that's it for this lecture I hope you enjoyed it and thank you for watching hi guys ma chere I hope you're having a fantastic day or night wherever you are in the world this tutorial you have been watching is actually part of one of my C sharp courses where you will learn everything about classes interfaces and objectoriented programming in case you're interested to enroll in the full course I've put the link for you in the video description and if not that's perfectly fine have a great day