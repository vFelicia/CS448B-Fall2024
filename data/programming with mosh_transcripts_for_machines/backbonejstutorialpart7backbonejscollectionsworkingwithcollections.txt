in the last lecture you'll learn some basic underscore methods that are supported by backbone collections in this lecture we're going to extend this topic with more here you see an example of using the add method that you learned in the last lecture the add method by default adds the given model at the end of the collection but you can use its second argument to specify the index at which you would like to insert the model this technique is useful if you want to insert a model at the beginning of a collection note that we are not simply passing an index we're passing a json object with a property called at which specifies the index apart from the add method underscore also provides another method to add models to a collection if you're wondering about the difference between the add and push methods basically the push method comes from working with stacks if you're familiar with stacks you know that stacks support two basic operations push and pop push always inserts an object on top of a stack and pop takes out the object on the top so the push and add methods behave exactly the same by default but with the add method you can specify an index at which you would like to insert an object okay now let's see how we can search for models in a collection underscore provides two useful and simple methods for searching collections where and find where both the wear and find where methods take a hash of attributes you would like to filter the collection by they check these attributes against the attributes of the models inside the collection for equality note that in case of strings the comparison is case sensitive the difference between the where and findware methods is that the where method returns an array whereas the findware returns only the first instance i know the naming is a bit confusing and i wish underscore developers called this method first instead of findware okay now let's see the result in chrome there you go note that the result is an array let's expand it we can also add multiple filters in the where method for example we can search for any songs with the genre of jazz whose title is song 2. what if we want to find the songs with the number of downloads greater than 100 we can't use the where method for that the where method simply does an equality check between the attributes you pass and the attributes of the models inside the collection so to filter the collection by some custom logic we should use the filter method the argument to the filter method is interesting this is what we call a predicate when we call the filter method underscore iterates the collection and for every model in the collection it executes this predicate function the job of this function is to check if the given model has the criteria we're looking for in this case we're checking if the number of downloads is greater than a hundred the return value of this function should be a true or false if it's true underscore adds this model in the list of filtered models one more useful underscore method that is available in collections is the each method which is used for iterating collections let's iterate our songs collection and log every model to the console similar to the filter method the each method expects a callback function that will be executed at each iteration this function receives the model in the current iteration so the add method allows us to specify the index at which we would like to insert a model inside a collection we can also use the push method to insert a model at the end of a collection the pop method removes and returns the model at the end of the collection we can search collections by attributes using the where or find where methods both these methods check the attributes we pass against the attributes of the models inside the collection for equality for more complicated filtering we can use the filter method and finally we can use the each method to iterate collections underscore has a few more methods to work with collections and arrays and covering them all is beyond the scope of this course you can always check the underscore documentation at underscorejs.org in the next lecture we'll cover how to get collections from a restful api on the server