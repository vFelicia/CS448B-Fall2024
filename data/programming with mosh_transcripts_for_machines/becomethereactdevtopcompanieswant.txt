hey friends in today's video we're going to talk about a skill that can seriously boost your resume and that's automated testing you might have heard of unit testing integration testing end to end testing these are all various types of automated testing automated testing means we write code to test our code this way every time we make changes to our app we can run hundreds or thousands of tests in seconds to quickly find out if you have accidentally broken anything this is much faster than manually testing every feature every time we update our code that's why Tech Giants pay big bucks for engineers who know automated testing in this video I'm going to show you the basics but if you want to learn more I have a 1hour tutorial on my YouTube channel the link is below this video all right here we have a simple react project for rendering a welcome message this component has a name prop which is optional if we provide a name we see welcome back followed by the name otherwise we see a login button this is a very common pattern we have in our navigation bars now imagine if you want to test this manually every time we have to log in which often takes a few seconds and this is not the only feature in a real application in real applications we often have hundreds or thousands of features testing each feature manually often takes a long time so as our application gets more complex we need more time for manually testing each feature this is where we can use automated testing in this video I'm going to show you how we can rate a couple of unit tests for this component and test it it in just a few milliseconds instead of a few seconds now for testing react applications we need a bunch of tools first we need a testing framework for writing and executing tests in this lesson I'm going to use v test now we also need react testing library for rendering our component and interacting with it now in this project I've installed all these tools so we're not going to spend our time on the setup but if you want to learn this in detail I have a complete 1hour tutorial on this channel so back to our project here in the root we add a new folder called tests and here we add a new file for testing our welcome message component Now by convention we should also add the test keyword in the file name so our test framework picks up this test file now because we're going to write some typescript and jsx code in this file the extension should be TSX if you don't use typescript you have to use the jsx extension okay now in this test file first we have to import a few functions from vest now I have installed a very useful extension in vs code here's the extension I've installed vest Snippets from Dean software I also have another useful extension that is testing Library Snippets again from the same developer Dean software now with this extensions installed we can type IV and press enter to import a bunch of functions from vest with describe we can define a group of related tests with it we can define a test case and with expect we can make an assertion we can verify that our code behaves correctly now next we type ITR press enter and here we import a couple of objects from testing Library we have the render function for rendering our component and the screen object for looking up elements in the Dom so let's start by creating a test Suite we type D and press enter and here we have a test Suite or a group of related tests so we call the describe function first we give it a name for our test Suite in this case welcome message and as a second argument we give it a function this function gets executed by our test framework which is v test in this case now inside this test read we type I here we have a few options we select the one with this Square icon and with this we can quickly create a test case now the it function also has two arguments the first argument is the name of our test by convention we start with should for example here we can say should would render the welcome message if name is provided now the second argument is a function that gets executed by our test framework now similarly we can create another test case so I enter and here we can say should render the login button if name is not provided now in our first test first we render our component so we call render and pass the welcome message component now here we should set the name to whatever doesn't matter next we need to make an assertion let's go to our welcome message component look if name is provided we get welcome back followed by the name so here we can call screen now this object has a bunch of methods for looking up elements in the do we can look them by their role by their text by their test ID and so on in this lesson we're only going to look at one of these methods and that is get by text now here we can type the exact text like welcome back msh but the problem with this is that if we change our wording in the future our test is going to fail so instead of using a string literal it's better to use a regular expression to look for a specific keyword to do that we replace this string literal with two forward slashes which represents a regular expression and here we add our keyword that is MH now we get an element and then we call expect give it our element now this expect object has a bunch of matchers that all start with two for example we have to B to be called to be falsy and so on now when testing react applications we need to bring in some additional matchers from react testing Library so on the top we add another import statement and import at testing Library slj dd/ vest with this when we call the expect function we get additional matchers one of them is to be in the document now to run this test we bring up the terminal window and type npm test all right we have two passing tests now let's go back to our welcome message component and deliberately create a book let's say as part of changing this component we accidentally remove this piece of code so the name is not rendered in the do now we have one failing test now look at how much time was spent on running this test 86 milliseconds if you wanted to test this manually we would have to log in and that would take a few seconds right this is the benefit of automated testing or unit testing in this case so let's bring back the name good now let's move on to our second test so to save time I'm going to copy these few lines and put them in our second test in this scenario we don't want to provide a name now here we should look for a login button so we're going to use a different method and that is get by roll as the first argument we pass button we're looking for a button now as the second argument we pass an object and here we set the name to login so we're looking for the login button look again we have two passing tests now if we go back to our welcome message component and accidentally change log into log out one of our tests fail so again with automated testing we get immediate feedback if we have broken anything now let's change this back to login now here I'm using a string literal but string literals are not great for writing tests because our tests can get very fragile and easily break so to make this test more robust we're going to replace this string literal with a regular expression so we look for the presence of the login keyword now to make this case insensitive we type an i at the end and with this our test will pass whether we have login in Pascal case or in uppercase or lowercase it doesn't really matter our test still passes so this was unit testing in action see that wasn't so bad right now if you're ready to level up I've got a full 1hour tutorial on my channel totally free we'll dive deeper so you'll be writing tests like a pro in no time and if you're serious about automated testing and want to increase your job opportunities I also have a complete course on my website the links are in the description box