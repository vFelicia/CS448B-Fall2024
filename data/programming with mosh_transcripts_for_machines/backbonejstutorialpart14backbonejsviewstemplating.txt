in the examples we've covered so far I implemented the rendering logic by using the jorea HTML method this works fine for simple cases but can get ugly if the view has a lot of details what if our view looked like this Twitter feed in such cases we have a lot of domb elements with various IDs and classes and putting all that markup inside the render function is not a clean and elegant way we can use templates to resolve this issue underscore has a simple templating solution which we can use in our backbone views there are other templating Solutions out there like mustache.js and handlebars.js in this lecture I'm going to introduce you to underscores templating solution so here we've got a simple model and a view as you have seen in the earlier examples nothing fancy here our view simply run ERS the title of a song along with a button to listen to it now let's see how we can use a template to define the markup outside this render function first we go to our index.html and create the template we Define the template using a script element with a type set to text/html we also need to give our template an ID it's a good convention to end the ID with the word template note this syntax here this is for rendering values dynamically whatever we play between these angle brackets will be evaluated at runtime and inserted into the markup as a string in this case this is to render the title of a song now let's go to our main.js and modify the render method let me explain what's happening here first we use jQuery selectors to get the script element that contains the template we use the HTML method to get the template mark up then we pass this HTML to underscore template method which compiles the markup into a template this template is a function that we can call and Supply data to it so in the second line we call the template function and pass a Json representation of Our Song model note that underscore doesn't know about backbone models and expects a Json when evaluating a template that's the reason we need to convert our model into a Json object underscores template function then returns an HTML mark up which be passed to the HTML function of jQuery here okay let's try this in Chrome cool so with templates we can Define any complex markup and this does not affect our views plus it provides better separation of concerns now let's take this to the next level let's say we want to display a tag called Popular if the song has been played more than a thousand times to do this we need to add a conditional statement in our template note the difference between the Syntax for conditional statements and the one we use for rendering the title if we use an equal sign anything between the angle brackets will be rendered on the page without an equal sign the code will be evaluated and we can use this to implement Logics okay now let's set the number of plays when instantiating our model so with 10 plays we shouldn't see the popular tag let's verify this nothing is here now we can change the number of plays to 1100 there you go so we can use templates to render more complex marops underscore has templating support out of the box which we can use by calling the template method the template method gets to markup and compiles it into a template function we call this function and pass the data to get the final result templates should be wrapped with a script element with the type text/html we should give our script elements an ID to look them up during rendering thank you for watching