as I explained in the introduction lecture in this section backbone videos have two major responsibilities they render the content and respond to events raised by the Dom element or the model so far you have seen how we can render content using backbone views in this lecture I'm going to show you how to respond to advanced raised by the Dom elements here we've got a basic view called song view with the render method that simply writes the title of the song on the page let's say we would like to add a bottom next to each song to give the user the ability to listen to that song we're going to call this listen button so let's go ahead and make this change in our render method you now let's create a handler for the click event of this button you to handle events raised by the Dom elements we use the events property which is a hash of event names and their associated handlers this is a clean and declarative way to register handlers for events here I'm telling backbone that if something is click inside this view the unclick method should be called which currently logs a message to the console ok now let's try it out you so this was the simplest way to handle Dom events now let's take these to the next level let's add another button next to the listen button you I gave this part in a class because I want to distinguish the click event raised by the listen button from the bookmark button so now we can declare a click event specific for any element with the bookmark class note that we can use jQuery selectors to filter elements that trigger the event we could use an ID or attribute selector here as well basically any selector that you use when handling events with jQuery works here okay now let's see what happens you see what happened when I click the bookmark button both are click handlers were executed didn't we assign a separate handler to the bookmark button yes but this is completely expected behavior let me explain what happened here in our event hash both these click events apply to the bookmark button the first one is generic and applies to any elements inside the views Dom element the second one is specific to the bookmark button so what happened here is that both these event handlers were attached to our bookmark button this is one of the issues that you often encounter when building realworld applications there are two ways to resolve this one is we can give our generic click event a class to make it specific to the listen button just like how we did with the bookmark button this is actually a good practice because your code will end up being more consistent and maintainable but there are times that you would need a generic handler for some reason in situations like this we would like the event to be only handled by one specific handler and not propagated to other handlers so let me show you how we can fix this you the ER argument is a standard jQuery event which has a method called stop propagation which we can use to stop the event from being dispatched to any other handlers in the chain okay now let's try it again so everything is working now as expected so to handle dummy events we register handlers for them in the events hash of the view we can use jQuery selectors to filter the elements that trigger the given event in the next lecture we will see how we can listen to the changes in the model state this is useful when you would like to refresh the view when the model state changes thank you for watching