you all right so I've got the project open envious code I've also got the terminal running here so our lightweight web server is in the background plus our typescript compiler is in the watch mode is looking for changes and when it observes a change in a file it will transpile it into JavaScript and then the browser sync will kick in and automatically refresh the browser you're going to see this in a second so back to vs code in angular 2 each of the building blocks I talked about like component directives and routers are plane type script classes and that's one thing that I love about angular 2 the API is much simpler and cleaner so I'm going to start by creating a class so right click app new file I'm going to call it courses Docs component dot T s note the naming convention so we start with the name of the component like courses then dot component then TS okay so to create a class we start by export class courses component what is this export here in typescript each file is considered a module in each module we often export one or more things like a class a function or a variable in this case I'm exporting courses component class so it will be available to other modules in my application later when I need this class I can import it as you will see shortly alright so we have a class now how does angular know that this class is going to be a component it looks for specific attributes or metadata on your classes for example to make this a component we need to apply the component decorator to this class a decorator in typescript is like an attribute in csharp or an annotation in Java many other languages have similar concepts so first I need to import the component decorator from the core angular module import curly braces component from here is a string that specifies the name of the module angular 2 slash core so in angular 2 slash core module we have a decorator called component and here I'm importing it so if you look at the source code for that module you will see that they have exported this component there so we can import it here that's the idea now these decorators are functions so we need to call them at sign component all decorators need to be prefixed with an ADD sign I know this is a function we just call it like this look at the intellisense it's telling me that this function takes an object so here's my object and you can see the list of attributes that we can add in this object in this video we're gonna look at two basic attributes one is selector which is a string as you can see in the intellisense I'm going to call it courses so this selector field here specifies a CSS selector for a host HTML element when angular sees an element that matches this CSS selector it will create an instance of our component in the host element so here I'm assuming the host element is an element with the tag courses the next attribute is template and this template specifies the HTML that will be inserted into the Dom when the components view is rendered we can either write the template here in line or put it in a separate file I'll get to that later in this section about components so let's just display something very simple courses so that's all we have built our first component as easy as that now we need to add this courses element here somewhere so first save this file and then go to app that component es if you're using vs code or sublime text you can first ctrl P on Windows or command + P on Mac and here you can type the name of the file in your project so app dot component dot TS if you're using a different editor and you don't have this shortcut just go to the app folder and you will see app dot component the TS there all right look at this component it looks familiar doesn't it so first we're importing the component decorator from angular here we're calling it so it's a function that takes an object and this object we have two fields selector and a template just like our other component and finally we've got export class app component so this app component is the root of your application it's a view component that takes control of the entire app or the entire page and here's a template for this view component I'm gonna change this and add courses element here now if we run applicationnow you're not going to see the courses component why because angular sees this courses tag but it doesn't know which component is responsible for that even though we define a component in our application know where we have referenced it so angular does not scan all your files to discover your components it will only recognize the components that you have explicitly referenced so here we need to add a reference to courses component so it can be discovered by angular so we supply a new field here called directives which is an array inside this array we specify any directives or components we have used inside the template for this component just to refresh your memory we use directives to extend our control document object model we can define custom attributes or custom elements that are not part of standard HTML in this case we used our courses component to define a new element so every component is technically a directive the difference is that a component has a template and a directive dozen so back to app we need to reference our component here courses component the read online cannot find name courses component and that's what it love about typescript compile time checking so we need to import this courses component import curlybraces courses component from what is the name of our module for the custom modules that we define we need to specify their path in the file system so this file app that component the TS is in the folder app look app folder and here's app that component TS and here is our courses component so they're both in the same folder so back in app that component of TS here I type dot slash which means start searching from the current folder and then the name of the module so courses dot component without TS extension save now let's look at our terminal ok typescript compiler detected a change so it transpiled or TS files into javascript files and now if you go to Chrome look our courses component is successfully rendered on the page let's inspect the elements so in the HTML we have this my app element which is the host element for our app component let's have another look at our app component look the selector is my app so when angular sees my app is going to put this template there an h1 with the courses element so I can chrome inside my app you see h1 and courses and courses is the host element for our courses component and inside that you see h2 but where is this root my app defined it's in our HTML so that can be as code open the project folder laughs app open index dot HTML scroll down in the body we have referenced my dash app so angular saw this and it rendered app component well hello it's Maj here your angular 2 instructor thanks for watching my youtube channel this video you just watched is actually part of my comprehensive angular 2 course for beginners in this course I'll walk you through all the core concepts of angular 2 in a stepbystep and pragmatic way by the end of watching this course you will have all the necessary skills to build realworld applications with angular if you want to find out more about this course and the content I've covered click on the link in the video description with this link you can get the course with a discount hope to see you in the course