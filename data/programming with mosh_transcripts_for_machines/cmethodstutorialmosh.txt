okay we got two methods at this point you should know what a method is so I'm not gonna review that a game but in this lecture I'm gonna cover some additional details about methods I'm gonna start by explaining the concept of signature for methods then I'm gonna talk about method overloading which you should already be familiar with because I already talked about in the lecture about constructors but here you're gonna see another example of overloading methods which can be useful then I'm gonna talk about three modifiers that we can apply to method parameters and there are params ref and out out of the three modifiers params is the only one that I consider useful in my opinion ref and out are bad decisions made when designing the csharp language there are code smells and a lot of developers have the same opinion initially I didn't want to include them in this course because I don't want to teach you bad things but because I wanted my course to be comprehensive I decided to include them here plus there are areas in the Dartmouth framework where you have to use the alt modifier so I want you to know how to use them even though I'm not gonna advise you to use alt modifier when designing your classes and methods we'll see the reasons later in this lecture so let's get started what is the signature of a method a signature of method consists of its name and the number and type of its parameters so in this example you see we have a point class that has a method called move I have highlighted the areas where make up the signature of this move method with yellow so the name and the type and number of parameters a concept that goes hand in hand with the signature of a method is overloading so basically overloading means having a method with the same name but different signatures look at this example here we have a point class with three move methods imagine this point represents a point on the screen and we would like to move this to a different location so we can have three overloads of the move method one that takes two parameters of type integer which represent an x and y another overload can take a point parameter and with this technique we makes it easier for the consumer of this class to choose the right overload maybe sometimes we have two integers and it's more handy to call the first metal here in other times we might have a point object and it would be easier to use the second overload and also here we have a third overload that takes a point and a speed which can create some kind of animation while moving the point from one location to another you don't always have to overload your methods but if there are cases where you see you can improve your code and make it easier for the consumer of your method overloading is a technique in your toolbox okay now that you understand the concept of method overloading take a look at this calculator class here this class has at least three overloads for the add method the first one takes two parameters the second one takes three parameters and the third one takes four but as you see this is not an efficient way to overload the add method what if you wanted to add ten numbers together then we would have to overload the add method ten times and that's a code smell is there a better way to achieve this of course there is the first step to make this go better is to use an array so instead of overloading the add method ten times we can declare it only once and have it receive a parameter of type integer array with this declaration we can use the add method like the example you see here while this works perfectly fine there is just a slight problem here and the problem is every time we want to pass a number of arguments to this add method we have to create and initialize an array we have to use the new operator and the int array notation it's not a big deal but there is a simpler way to do that and that's when we use the params modifier so we can change the raishin of our add method to include the params keyboard here just before the integer array with that we can call this method in a couple of ways we can use it in the traditional form so we pass an integer array or we can simply pass a varying number of arguments here we don't need to create and initialize an array and that's simpler again this is not something that you use all the time but if you have situations where your method might need a varying number of parameters you can use the params modifier to make it easier for the consumer of that method to call that method okay now let's take a look at the ref modifier this is probably the only example in this course where I'm going to use names like my class and my method because I really don't like this kind of teaching if you have noticed I try to use realworld examples that make sense as opposed to abstract names like my method my class one two it just doesn't make sense anyway because the ref and out modifiers are what I call a code smell I couldn't think of a realworld example to demonstrate this concept here so let's just imagine this my method here takes an integer and whatever we pass it adds two to that integer now take a look at this example here as what we would write to call that method I have a question for you here we have set a to 1 we call my method and pass a what do you think would be the result of a after returning from this method is it going to be 3 no it's going to be 1 because a is a value type and that means when we pass a to a method like the one you see here its value is being copied so they ain't a that we have here is a local copy of a that will be relevant to this metal here it will not affect the original a that we had here we can change this code by including a ref modifier to our method and note that here I change the name of the class and its method from my class on my method to weirdo and do a weird thing because it just is weird so with this change if we call this method and also include the ref modifier here the original a that we have here will be passed to this method and its value will be modified so after we return from this method value of a is going to be 3 I'm completely against this concept I think it's a coat smell and I want to make sure that you're never gonna use this but if there are classes written by other people or perhaps somewhere in dotnet framework where a parameter is defined with the ref modifier I want you to know that in order to call it method you need to specify the ref modifier here honestly I can't remember on top of my head whether we have places in the dotnet framework where methods are defined with the ref modifier but that's all I want you to know now let's take a look at the out modifier now else modifier is slightly similar to the ref modifier in the sense that if a parameter is declared with the out modifier as you see here then in order for you to call that method you also need to specify out when calling that method but out is conceptually a little bit different from ref what does it mean that means with the out this method can return a value to the caller now you might be wondering couldn't me just return a value here instead of using void absolutely yes but without keyword we can have multiple parameters here and they all can return a value to the caller and that's exactly where I say this is a code smell or this is a design smell of the C sharp language because if a method is going to return multiple values to the caller it's better to encapsulate all these values into a separate class which could be the return type of that method so again I want to emphasize do not ever use the Ouse modifier when designing your methods but I included the out modifier here because there is one place in dotnet framework that you might be using sometimes and that's where you have to use the out modifier even though it's not a good choice but I want you to be aware of that okay enough theory let's start coding and see all these concepts in action okay let's start by creating a point class so public class point this point represents a point on the screen so it needs two fields an X and a Y and they both have to be an integer so public int X public int Y and here we should create a constructor to initialize these fields so seat or tab you get two parameters into x and y and this that x equals x is that y equals y pretty simple now let's put this class in a separate file to clean up our code so the cursor is here with resharper we press alt' + enter' and enter again now point is in a separate file now let's add a method to move this point to a different location so public void move when the two parameters and x and a y and we simply change the value of our fields using these arguments so these that x equals x is that y equals y now we can overload this method by creating another version of that that takes a different signature maybe the other one takes a point object let's see how it works so a public void move here we pass a point object that is a new location and we use this object to change the value of our field so this that x equals new location dot X is that y equals new location that Y now let's go to our program class so we simply press ctrl + tab to switch between open windows there you go let's create a point object bar point equals new point and I give it an x and y so 10 and say 20 now if we call the move method points don't move look we've got two versions of this method so there are two overloads the first one takes a point object the second one takes an X on Y sometimes in our program you might just have two numbers whereas other times you might have a point object so by overloading this method we make it easier or the color of this method to pass arguments to this method so let's try both versions first I pass a point object let's move it to 40 and 60 now to ensure that everything is working let's put the value of x on y on the console so CW tab again this is a code snippet if you want to learn more of this fast coding techniques I have a course called double your coding speed on udemy where I teach you lots of techniques to write code fast so here in console the right line we can say point is add and here we pass the location so point dot X point y let's run the application with ctrl + f5 okay point is at location 40 and 60 so our move metal is working properly now let's extend this example and this time use the other overload of the move method so point that move this time I want to move it 200 and 200 so I use the second overload again let's copypaste this line here and make sure everything is working application point is moved twice and now it's at the location 100 and 200 so this is how overloading works but I want to show you that there is a problem with this code in terms of best practices let's get back to the point class okay here we are duplicating the concept of setting X&Y now this is a very simple example and we are just setting two fields but sometimes in more complicated scenarios it's not a good idea to repeat the same concept in two places so what we can do is to make this move method call the other move method this way we set x and y in only one place so if there is a bug in our program there's one place that we have to fix let's see how we can implement this so here I simply call the other move method I passed new location that X a new location that why and we can get rid of two lines here looks better doesn't it but there's still one more problem with this code can you spot it and to give you a hint it's here there is one tiny problem here the problem is if we pass a null object here this method is gonna throw an exception let me show you what I mean by that so we go to program I'm going to change this line so instead of passing a point object a pass no let's run the application there you go the application crashed and be God a null reference exception you are not familiar with the exceptions exceptions are darknets way of error reporting I've covered exceptions in full detail in my csharp advanced course that you can find on udemy so let's move on for now we go back to the point class to validate the argument that is passing so we make sure that it's not known otherwise if we go north eggs or not that why we're gonna get a null reference exception we go if new location is null we throw an argument null exception and pass the name of the parameter what does this mean first of all throwing an exception is a way to report errors to the caller so here I use the throw keyword and here I create a new exception object an exception is just a class and here we just instantiate in that class and in the constructor here I simply pass the name of the parameter that was null in this case new location with this code if new location is known we're never gonna get here so the state of our class which means that x and y is not going to be changed so this way our point object will always stay in a valid state the Technica have used here as in validating this argument here is called defensive programming which is actually beyond the scope of this course but basically a defensive programming improves the robustness of your code okay now let's run the application and see what happens look the application crashed again but the difference is it's time we got an argument null exception as opposed to a null reference exception so you may argue how is it different well it's better to get an argument not exception than null reference exception why first of all your application will always have a global error handling mechanism the reason our application crash here is because we don't have a global error handling or exception handling mechanism I will show you how we can add that in a few seconds but the point here is when we get an argument null exception we are immediately telling the color of this method that is its move method that the value they have passed in is not a valid value and as a result no further actions will happen that's the idea of writing robust code if you get some invalid value whether it's not or some value that is out of range or maybe somewhere you don't expect a zero or an empty string then if you get that value and do operations on that value you're taking your program to an unexpected State which means some weird things may happen down the track so the idea of defensive programming is to stop the program from getting into that weird or invalid state ok now let me show you how we can improve this code by adding a global exception handling mechanism so the application won't crash let's get back to our program so simply I add a try block here you simply type try and press tap let me show you again try tap so again this is a cold snippet we immediately get a try and catch block the code that may throw an exception should be placed in the try block and if an exception is thrown then this cache block will be executed don't worry about this throw keyword here just remove it again I have covered the exception handling in more detail in my csharp advanced course but just to give you some tips here what we need to do is we simply put the message on the console saying an unexpected error occurred if you run this application occation doesn't crash and baguette a friendly error message this is better in terms of the user experience you don't want to write an application that crashes no one likes that okay I'm gonna move all this code into a separate method so studying void use points and I take everything here and pass it here okay now let's go and create a calculator class so public class calculator we want to create a method called add that takes a varying number of arguments so public int add here we add the params keyword params and then an integer array and the name of the parameter is gonna be numbers now inside this method numbers is an integer array so let's say we have an integer array and we want to add all the numbers in that array together and return the result first we create a variable called sum set it to zero and now we use a for each block to I trade over the numbers and simply add every number to the sum and finally we return sum when you get to the advanced level there is a better way to write this code and that involves using link or language integrated query it's one of the powerful features of csharp again and have covered it in my sushar Batman scores so for now let's just keep the code the way it is now we put this class in a separate file so alt and enter and enter now we back to the program let's create an instance of the calculator or calculator now we can call the add method like passing two numbers simply display the result on the console or we can pass three parameters or four or whatever it's up to you it can pass a varying number of parameters and that's the effect of the params keyword we can also call this method using an array notation so let me paste that again here instead I can pass a new integer array and put all numbers here but as you see it's easier to simply pass all the parameters without the need to create an integer array and that's why we use the parameter keyword okay let's put this code in a separate method and move to our third example so I'm going to create another static method here use params let's move everything here right the third example involves using that out modifier I told you do not use the alt modifier when declaring your methods but there are cases in the data framework where you may have to use the help modifier so let's see an example of that let's say we have a string and we would like to convert it to a number we can use the parse method of the integer class so type int dot parse and pass an invalid string here that cannot be converted to a number let's store the result in the number variable and run the application look application crashed we got exception a format exception input ring was not in a correct format okay now let's take a look at the tryparse method so ain't that tryparse look it has two overloads the first one takes a few parameters the second one takes only two parameters so I'm going to use the second one it's easier it takes a string and that is the string we would like to convert it takes an integer that is decorated with the out modifier which will have the result of conversion if successful and finally it returns a pool which indicates whether the conversion was successful or not so let's pass the string here ABC and here we need to pass an integer so int number and because it's declared with the alt modifier we need to use the health keyword here so number and it returns in pool so our result so if conversion is successful result will be true and you can check that and display the number on the console otherwise we can say conversion failed application so look we got a message called conversion failed now how is it different from the parse method the difference is try parse does not throw an exception and that's the reason it returns a boolean to indicate whether the conversion was successful or not the downside is that you have to declare this integer separately and then use the out modifier some people don't like the try parse method and they prefer to use parse but then you have to handle exception using a trycatch block as we learned a little bit earlier something like this so here we would say conversion failed these two pieces of code are kind of equivalent now this number is not somewhere else so let me change it to just numb there you go so here are two examples I hope you enjoyed this lecture and thank you for watching hi guys ma chere I hope you're having a fantastic day or night wherever you are in the world this tutorial you have been watching is actually part of one of my C sharp courses where you will learn everything about classes interfaces and objectoriented programming in case you're interested to enroll in the full course I've put the link for you in the video description and if not that's perfectly fine have a great day