hi guys and welcome to my new series where we are going to talk about C++ stdl uh or C++ standard template Library this video is going to be a brief overview so introduction video where we are going to see what is STL why we need it and what are some of its most important components and then in the future I'm going to publish more videos where we will cover each individual component in more detail so let's go straight to the point the first first question is what is STL STL is a library and you can imagine it as a big box of tools so a toolbox and this toolbox contains a lot of useful and helpful tools that we can use when we are building programs with C++ programming language as I said STL stands for standard template library and it contains different tools that are very helpful when we are working with different kinds of data so now let's break down what is inside this STL toolbox what is inside this STL Library the first important part of STL are containers and you can understand containers as these boxes where you can store the data that requires some processing and in STL we have many different types of containers some of them are vectors lists maps and so on and all of these containers have different purposes and different capabilities and we are going to cover each one of them in the separate video in more detail now one important thing that I want you to remember is I said that we use containers as a way to store the data that requires some processing so in order to process that data we use algorithms and algorithms are another important part of STL and you can understand an algorithm as a set of instructions so as a recipe that will help you to perform specific data processing for example we have algorithms that can help us to sort the data or to compare the data or to find a specific data in your container so for this for data processing we use algorithms and in STL we have many predefined so already written algorithms that we can use but we can also write our own algorithms and for that we use something called function objects which are also known as functors so functors give us the option to write our own custom algorithms or to customize existing algorithms what do I mean by this well in STL you already have algorithms to sort numbers let's say to sort integer numbers numbers from smallest to the biggest one but let's say that you want to sort students well in that case you would have to write your own functor because sorting students is not as easy as sorting numbers because you need to provide additional information related to how should students be sorted is it by age or by grade by gender name or something else and for that we use function objects which are also known as functors and please don't be afraid if you don't understand these immediately because we will cover each one of these in a separate video and I'm going to show you practical examples of each one of these so containers algorithms function objects and all of the other important STL Concepts every algorithm that is processing the data needs a way to navigate through that data and for that we use iterators so you can think of iterators as pointers that we use in order to navigate through the data inside our containers the same way that for example we use a mouse cursor inside our text document in order to help us to navigate through that text document so when you are reading the text for example your mouse cursor helps you to navigate through that text and the same way iterators help us to navigate through our data inside containers and again please don't be afraid if you don't understand this immediately because in a separate video we are going to see practical application and how we use iterators in C++ programming language the concepts that I've mentioned so far are containers algorithms function objects and iterators so once more containers are used in order to store the data algorithms are used in order to process that data function objects or functors are used in order to write our own custom algorithms and iterators help us to navigate through the data inside our containers and all of them are part of C++ STL so now the question is why do we need STL the main reason is for its efficiency so how and why is STL so efficient well it is so efficient because it is entirely based B on templates as the name itself implies so standard template Library so what are templates templates are part of generic code which allows us to work with many different data types while using the same code what do I mean by this well let's say that you want to create a function in order to print a string so for that your function needs to receive a string parameter okay now let's say that you also want to create another function that will print integer so that function needs to receive an integer parameter so basically both of these functions do the same thing which is they print something but because they are printing different data type you need to create two functions one that receives string and one that receives int so with templates what we can do is we can write just one function and it is going to work with both in and string and also many other data types so with using templates we can reduce our code we can write much less code our code is going to be more optimized easier to maintain easier to understand it is going to be much less bug Pro so we will have a lot less bugs in our code and also our code will be easier to scale in the future uh and that is why we use templates so all of these components that I mentioned are are part of C++ STL Library so containers algorithms functors iterators templates they all belong to C++ STL library and if you want to write the code that is clean easy to understand easy to maintain code that is fast and efficient then you have to understand and learn how to use STL library and in the future I'm going to publish more videos where we are going to cover each one of these Concepts individually and I'm going to show you on practical examples how you can use each one of these so I believe that will be enough Theory and in my next video we will jump into practical usage of these STL Concepts and we will write some code also if you're interested to learn practical programming then I would like to invite you to join my practical programming course where we will together build an entire application a huge big application where you will have the opportunity to learn to see and to apply all of the important programming Concepts both beginner Concepts like objectoriented programming data structures algorithms multi threading asynchronous programming and so on as well as advanced concepts like design patterns and solid principles so in this application that we are going to build together you will have HandsOn approach and you will have lessons and tasks that you can do in order to obtain problem solving skills the language that we will write in this course is C but here is the key the goal of this course is not simply to teach you C the goal is for you to be able to solve problems independently regardless of the programming language that you want to use or type of application that you want to build so in this course I will teach you problem solving skills I will teach you how to be an engineer and how to solve problems and all of the skills that you get in this course will be absolutely transferable to any other oop language including C++ Java JavaScript Python and all of the other oop languages so as I said this entire course we will be building just one application but we will make it big and complex so that you can really see in practice all of these Advanced programming Concepts that you would never see in small projects and small applications and that is because the goal of this course is to give you career ready skills and once you build a huge big application then building these small applications and small projects is not going to be a problem so if you want to start learning practical programming and if you want to get career ready skills then I will leave a link in the description that you can use in order to join my practical programming course and currently there is a special discount but the number of people who can get this discount is limited so if you want to learn then definitely make sure to secure your place on time also when you join the course you will get access to an exclusive community of developers where you can uh ask questions share experiences and collaborate with other people so if you want to start learning practical programming today then click the link in the description and I will see you in a minute thank you very very much for watching and I will see you in another video bye