hi everyone and welcome to my channel in this video i want to talk about two topics the first one is linked lists so i want to explain what are linked lists how are they used i want to give you some important advantages and disadvantages of linked lists and i will also show you how you can implement your own linked list using c plus programming language and i will cover some very important differences between arrays and linked lists so this video is going to be some sort of introduction into linked lists and if you have more specific questions related to this topic please put those in the comments down below and i will make more videos related to linked lists so what is a linked list a linked list is a data structure which means that it is used to store and organize data but unlike arrays which we already have talked about and i will link that video here so unlike arrays which store data one after the other in memory a linked list is a noncontinuous collection which means that it does not store data one after the other but the elements of a linked list are randomly positioned in your memory so all over the place now your question might be okay saldina but considering that array stores elements one after the other it's pretty easy to access those elements but how do you access elements of a linked list well the answer is that you need to link the elements of a list in order to be able to access all of the elements so in order to explain this let's use the example of a linked list that has four elements for example now this here is going to be our first element and that element is also known as head now this element here stores two things the first thing is going to be the value of that element so let's say for example that will be a value of number one and then second thing that this head element stores is going to be the address of the next element so it has a pointer to the second element and it says hey in case that you are looking for the second element of this list here is a pointer here is the address of that element so here is our second element now that second element also stores two things the first one is going to be the value so let's say that will be number two and then the second one will be the address of the third element so it has a pointer to the next element so here is the third element and then third element towards the value which is for example number three and then it has the address of the next element so a pointer to the element number four which is here for example and then this fourth element will also store the value which is number four for example and then instead of having pointer to the fifth element it stores the value of null because there is no fifth element because this one is the last one so the idea behind linked list is that each element stores two things the first one is going to be the value of that element and then second thing is the pointer to the next element and then the last element stores the value and then instead of storing pointer to the next element it stores null because there is no next element because that one is the last one so what are some advantages and disadvantages of linked lists when compared with arrays the biggest advantage is that arrays have fixed size and linked lists don't link lists have dynamic size which means when you create an array when you allocate memory for your array it stays that size forever which means that you cannot add new elements nor remove existing elements and change the size of that array but in case of linked lists you can always add new elements and remove existing elements so that is the biggest advantage of linked lists when compared with arrays now with this being said there are some disadvantages as well the first disadvantage is that random access to the elements of a linked list is not allowed what does this mean well how will you access forward element of your linked list for example can you do that directly the answer to that question is no why because you don't know where your fourth element is because it can be anywhere in your memory because elements are randomly positioned in your memory so who knows where the fourth element is the answer is third element because it stores a pointer to the fourth element and then who knows where the third element is the second element who knows where the second element is the first one and you only know where your first element is so you only know where your head element is and then your head element has the pointer to the second one and second one has the pointer to the third one and third one to the fourth one and so on so in case that you want to access the fourth element you need to traverse this path and in case that you want to access the 400 element or 4 thousandth element you need to traverse very very very long path so that is one disadvantage of linked lists whereas an array that has a fixed size and every array has a fixed size the access to the elements can be direct because you already know hey this is my array and in order to access a fifth element for example i can use the name of the array and then the index of that fifth element which is very very quick so that is going to be one disadvantage of linked lists and then second disadvantage is that linked lists need more memory why well as you already know the element of an array stores only one thing which is the value of that element but the element of a linked list needs to store two things the value of the element and then a pointer to the next element so that is going to take more space inside your memory so you need to do that for each element of your linked list and that is going to consume a lot more memory than if you stored that data inside your array now does this mean that arrays are better than linked lists the answer is absolutely not why well because there is no such thing as better in general you will need to choose what is better for each specific situation so you will need to choose what is more important for your program what is more important for the problem that you are trying to solve is it more important for that collection to be able to access elements very fast or will you be constantly adding new elements and removing existing elements and you need to take that decision and decide which one you will use either linked lists or arrays another thing that i promised is that i will teach you how to implement a linked list using c plus programming language and here i will implement a simple linked list that has only three elements but that is going to be enough to demonstrate how linked lists work and then in the future i will be making more videos related to linked lists so make sure to put all your questions in the comments down below so that i can read those questions by the time that i make my next video about linked lists now another thing that i want to explain and remind you is that we said that each element of a linked list is going to consist of two parts the first part is going to be the value of that element and then the second part is going to be a pointer to the next element so this means that you cannot represent an element of a linked list with a builtin data type but you need to create your own userdefined data type in order to represent an element of a linked list now i already made videos related to classes and structures and i will link a video related to classes here so make sure to watch that video in case that you don't understand what are userdefined data types and then as well in the description i will link both videos about classes and structures so here we will be using a class which is a userdefined data type in order to represent one element of a linked list so in order to name this class you can use the name element but what is used more often is the name node so node is an element of a linked list so that is exactly what i'm going to do i'm going to create a class which i will call node so let's do that so here i am going to say class and then let's name my class node as i said okay and here inside this class i want to put two parts of each node which are the value of the node and then a pointer to the next node so a pointer to the next element so let's say for example that each element so each node of our linked list will store an integer value and a pointer to the next element so i'm going to say int value so this is going to be the first part and then the second part will be a pointer to the next node so node pointer and let's call it next like this now one very important thing that you will not know if you are not familiar with classes is that all of the members of a class are private by default which means that you will not be able to access them outside of your class and in order to solve that problem you need to use public access modifier so i'm going to say here public like this now these elements after adding this public access modifier will be public which means they will be accessible outside of this class here and again if you are not familiar with this make sure to watch my uh full course my playlist related to objectoriented programming where i talk about classes and access modifiers and many more things and i will link that playlist here and in the description of this video as well so with this we have created a class called node which is a user defined type which is called node and that represents one element of a linked list so what i want to do now is i want to create three elements because we said that our linked list will have three elements so let's do that here in our main function i want to create a pointer to the first element which is going to be node pointer and i'm going to call that element head like this you can use the name first if you want but this is pretty standard naming convention uh so i'm going to use the name had because if another developer comes and tries to read your code and he sees the name head he will know hey this is the first element of a linked list so this is why you should also try to use these standardized naming conventions so i'm going to say that my head will be equal to new node like this and i still have not assigned any values i have just allocated the space for my first node and then considering that this list will have two more elements let's create those two so i'm going to copy this line of code and then my second node will be called second like this and then let's call the third node third like this perfect so with this i have created three pointers to three nodes head second and third and i still have not assigned any value so i still have not initialized the values of the value of each node and then pointer to the next node so now i'm going to do that but first i won't say if you are not familiar with pointers and if you don't understand what are pointers i have a full playlist where i explain what our pointers and how to work with pointers and i will link that playlist here and in the description of this video in case that you want to watch that and understand this in more detail so what i want to do next is i want to assign for each one of these nodes i want to assign the value and the pointer to the next element so here i'm going to say that my head node will inside its value property it will store the value of 1 so the value of our first node will will be 1 and this symbol is used when you are trying to access members of your class in case that you are using pointers like we are here so you use this symbol instead of dot symbol so i'm going to return it to this symbol okay and then let's do this same thing for our second and third element so i'm going to say that the second element value will be equal to two and then third element the value of that element will be equal to three for example now with this we have only assigned the values to these three elements but we have still not linked the elements of our list and that is very important step so it is very important each time that you are creating a linked list to link all of the elements of that list so how do you do that well let's do that first for our head element so here i'm going to say that my head element the value of its next property is going to be this second element of the linked list like this so now what i'm saying is for this head element the value of this next pointer here will be this pointer here so our head element will point to the second element so first points to the second and then second needs to point to the third and then third considering that it is going to be the last will point to null so let's do that remaining part so now i'm going to say second next will be third so now my second element is pointing to the third one and then third element considering that it is the last as i already said the value of its next pointer will be equal to null okay and now with this here we have successfully initialized the values of each element and then we have also linked our list so that the first element points to the second and then second points to the third and then third points to null because it is the last element of this linked list so now your question might be okay salina but how can i access the elements of this list here how can i print for example the elements of this list to my user well let's do that next let me show you how you can access and write out all of the elements of your list and let's also create a function to do that because i want to show you how you can pass a linked list to a function so let's do that here i am going to create a function of return type void and let's call that function print list like this okay now what this function here needs to receive in order to be able to access and print all of the elements of this list that is a question for you and that is a logical question so make sure to pause the video and think about it and then write your answer in the comments section uh before you listen to my answer so the answer is that it needs to receive the head element which is the first element why well because the first element has a pointer to the second element and then second element has a pointer to the third element and then third considering that it is the last it will not point to the next element because there is no next but it will point to null and when we come to null we will know hey this is the last element so by passing the first element to this function here we will be able to access all of the other elements of that list no matter how many elements that list contains in this situation it is 3 but you can have uh 300 elements or 3 000 or 300 000 depending on what kind of program you are building so the invocation of this function here will look like this so you will say print list and then you will pass to this function your head element like this and then considering here that you are passing a node pointer that means that here you need to receive a node pointer as well so i'm going to say node pointer and i'm going to call this parameter and okay now what this function here needs to do is it needs to access all of the elements of the list starting from this element here and to print the values of those elements to write those values out to our user so in order to do that i'm going to use a while loop so i'm going to say while like this and then inside this while loop i will do two things the first thing is going to be to print the value of the current element and then the second thing will be to move to the next element so let's do that let's say c out n dot value okay and let's add n line and again you use this symbol here to access elements of your class when you are using pointers so this symbol is used instead of dot even though i sometimes say dot it is still this symbol here and then the second part is going to be to move our node to the next node so i'm going to say that now my n will be equal to whatever our m dot next is like this so we are going to do this while our n is not equal to null perfect now how this while loop is going to behave in this situation here in the situation of a list that has three elements well when we invoke this print list function when we invoke it here we are going to pass our head node to this print list function which means that it will receive this element here so we enter inside this function here and the first thing that happens is it tries to go into a while loop so it checks is n different than null now what is n it is this head element so is this different than null the answer is yes so we can enter inside this while loop so we then print out n value which is one and then we perform this second line of code here which says now i'm going to move or to change the value of my end to whatever and next is holding and in this situation any next or head next is second element so it is this one here so it tries to go into a while loop again and then it checks is n different than null the answer is yes this here is different than null so we can go into our while loop again so we write out again n value which is two as you can see here and then we do this second line of code which says now n is going to be whatever and next is and that is third element which is this one here and then it comes here and tries to enter in this while loop again so it checks is n different than null is this here different than null the answer is yes this third element is legit element which has the value of three and it has this pointer to null so we can enter inside this while loop again so we print out the value of three here and then we move to this second line and this second line of code does the following it says now my n will be whatever n next is and in this situation third next is null so that means that in this line of code our n becomes null so when we try to enter this while loop again it checks is null different than null and the answer to that is no they are equal so that means that now we cannot enter inside this loop anymore so at that point we finished executing this while loop and we are going to leave this print list function which means that we have successfully print out all of the elements of this linked list here and in order to prove what i just explained i am going to run my program and as you can see indeed we have successfully printed out all of the elements of this linked list here just by passing the head element to this print list function okay so i hope that this video was helpful and i will make more videos related to linked lists and data structures in the future so if you want to watch those videos make sure to subscribe to my channel and then if you want to get a notification from me each time that i publish a new video you can click the bell icon and then the most important thing for the youtube algorithm is to give this video a thumbs up so that we can grow this channel and reach more people and then i also wouldn't mind if you decided to share this video with your friends or your colleagues so thank you very much for watching and i am going to see you in my next video bye