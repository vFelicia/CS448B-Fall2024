hi guys and welcome to my channel in this video we are going to talk about STL containers more specifically about list container because it is one of the most important and most commonly used types of containers in programming so in this video you will learn what is list how to use it in your programs what are its advantages and disadvantages so that you know when to use it and when not to use it and also I'm going to show you a real world example of how lists are used in programming so in this video we will also build that real example of player matchmaking in some popular games like fortnite war zone pubg and so on so we will see all of that in this video and before we start I have something very important to tell you so if you're watching programming tutorials and lessons but you struggle to apply that knowledge and you don't know how to use that knowledge in order to build real world applications that can be used in everyday life then I have a solution for you so if you enjoy my YouTube videos and if they help you then you will be more than happy to know that I also have a practical programming course where I will teach you all of the skills that you need in order to build those applications that you want in this course you will learn transferable skills that you can apply across all programming languages you will get the experience of working on real world projects solving real problems implementing functionalities fixing bugs optimizing your code there will be a lot of exercises for you to practice and you will also have a lot of fun we have a great supportive Community where we all hang out and collaborate together and it was very important for me to create this community because I know that learning programming can be quite scary especially if you are alone you can often feel lost and confused so in this case you always have someone to help you you can always ask a question and someone will jump in and offer you help very very fast fast so this way you can progress in the most optimal way so if you want to learn practical programming and get career ready skills then this course is the only one that you will need because everything is on one place step by step from beginner to expert and currently there is even a special discount that you can use in order to save money so if you decide that you want to learn programming and start with my practical programming course then click the link in the description and I will see you in a minute so with that being said let's continue with the topic of today's video which is STL lists so let's first explain what are containers and you can understand a container as a box in everyday life that you use to store and organize different items for example you might have a box to store shoes or a box for clothes or for makeup for shoes that are out of fashion or a box for tools now I've never actually seen one in my life but it's just an example to help you visualize and if you're wondering how I live without a toolbox I'm cute I get by okay so most likely all of these boxes are different because they serve different purpose and we use them to store and organize different items now the same way in programming we want to store and organize different kinds of data and for that we use containers okay so some of the most commonly used containers in programming are list map Q DQ stack vector and so on and we are going to talk about each one of these in a specific video and in today's video we are learning about list I have already covered custom implementation of a link list in one of my previous videos which I will link here and also put it in the description so if you want to learn how to implement a linked list from scratch then you can watch those videos to get a better understand understanding because in this video we will not do it manually but we will be using a list from STL library and we will see real examples of how you can use lists in your programs so to start working with the list you first need to include it so here you need to say include list like this and now what I can do is I can create a list so let's say that I want to create a list of integers and I will call it my list like this so with this I have created a list where I can store integer numbers and it is called my list now one very important thing that I want you to notice is that I did not specify any size for this list and that is because list is dynamic type of container which means that it will automatically expand when I add new elements and it will shrink when I remove existing elements so if you're wondering how many elements can you add you can add as as many as you want as long as you have free memory in your computer so let's add some elements into our list to see how we can do that there are two methods that are used very often for inserting elements into the list and those are push back and push front and as the name itself implies push back is used to add an element at the end of the list and push front is used to add an element in the beginning of the list so let's see how we can use them you simply say my list do push back and here you provide the element that you want to push at the back of your list okay let's add another one again my list push back and then the element that you want to add let's say 20 okay and then if you want to insert an element at the beginning you use function called push front and here let's add number 30 for example and as I already explained list is dynamic type of contain container which means that you don't have to specify the size it will automatically resize itself so that it can fit all of the elements that you are adding okay so this is how we can insert elements into our list and now we need a way to print our list to print this data to see how our list looks like so let's do that next in order to print the data that is stored in our list what we need to do is we need to iterate through our list so what that means is that we will start at at the beginning of the list and then we will visit each element of the list which is called node so we will visit each node and we will print the value of that node now for that we use iterators and you can understand an iterator as a pointer to a specific node to a specific element of the list and I'm going to create a dedicated video where we will talk about iterators in more detail but for now let's just see how we can use iterators in order to go from the beginning till the end of the list and print each element of our list so let's do that next so what I will do is I will write a for Loop and inside this for Loop we will have an iterator that will start at the beginning of our list and it will go until the end of the list which means that it will visit every element of our list so we will simply print the value of that element so let's initialize our iterator to point at the beginning of the list let's see how we can do that you first say list of in iterator because we are going to use this iterator in order to iterate through the list of this type okay and don't forget these two column signs okay so the name of my iterator will be it and I will initialize this iterator to point at the beginning of my list like this okay so this is where my iterator starts now here I will say that my iterator will iterate until it is not equal to my list. end and then I will say that in each iteration I will simply increment the value of my iterator which means please go to the next node okay so with this for Loop we are creating an iterator that starts at the beginning of the list it goes until the end of the list and in each iteration it increments by one which means that it goes to the next node so now what I can do inside this for Loop is I can simply say see out it and let's add an end line like this now there is something interesting that I want to explain here and that is the fact that it itself is an iterator which means that it points to an address but what we need to print is we need to print the value that is on that address so in order to do that we will dreference this iterator and you dfference it by using this little asteris this star symbol okay so with this we will iterate from the beginning until the end of our list and we will print each element of the list so let's start the program okay and as you can see here are the elements of the list and if you're wondering why are they in this order and not in this order here the reason for that is because we first added 10 at the back of the list and then we added 20 after that so again at the back and then we inserted 30 at the front of the list which means that it will be the first element of the list so that is the reason why elements are in this order and not in this order here so that is how you can print the elements of the list using iterators if you want to know how we can delete an element from our list it's actually very easy to do that for that we use method called erray so let's see how to do it I'll do it here so you say my list do erase and here inside these parentheses you need to provide a pointer to the element that you want to delete so for now we only know how to get a pointer to the beginning of of the list and a pointer to the end of the list so this here will give us the address of the first element and this here will give us the address of the last element so let's say that we want to delete first so I will copy this code here okay so now what this line here will do is it will simply erase the element from the beginning of the list from this list here so now if I run the program let's see what is going to be the result Okay so the element that we pushed at the front was 30 and it was later removed so now we don't see that element inside our list okay so that is how you can delete or erase an element from the list you simply put the name of the list and then you say erase and here you provide a pointer to the element that you want to delete okay all that we have learned so far are basics of lists and you need to know these basics in order to be able to use lists in your real programs so what I want to do now is I want to show you how you would use a list in a real program so let's say that we are building a game now in real life this game would be played by people who are beginners as well as by people who are Pros so in order to make this game realistic and fair you cannot put all of them to play together because Pros will always win and and beginners will never win so what you need to do is you need to write you need to create some sort of matchmaking system that will group beginners together and that will group Pros together and this type of matchmaking system is the one that you would often see in most modern Battle Royale games like pubg fortnite war zone and so on so that is exactly what we are going to make now so let's see how we can make this simple matchmaking system so I will delete this code we will not need it anymore now let's see what we will need so first I will create a list of integers and I will call this list all players like this now what I want to store inside this list will be experiences or ratings of all of the players that are waiting in the lobby of the game which means that they are waiting for us to match them with people of similar experience so that they can play the game now in a realistic scenario here you would not have a list of integers but you would have a list of players that have a lot more characteristics besides just ranking or experience you would have a lot of other characteristics but because we want to make this program simple inside this list I will just store their rating so here I will say that I want to initialize this list and here I will put the experience or the rating of each player so let's say that ratings will go from 1 to 10 okay so the first one will have rating of two okay and then the second one we'll have N9 and then 6 7 3 1 4 8 3 again and then let's say two and N again okay so these are all of the players and these are their respective ratings now what I want to do next is I want to create two lists so the first one will be list of integer and I will call it beginners like this and for now it will be empty list just like this and then I want to create another list of integers and I will call it Pros so now what we need to do is we want to create a matchmaking system that will group all of these players that are waiting to play the game into one of these two lists so beginners will play with beginners and Pros will play with Pros so let's set up some rules let's say that beginners will be all of the people with rating one to five okay so those are beginners and then Pros will be people with rating from six to 10 so so we should group them to play together so let's see how we can do that so what I will do is again I will have to iterate through this entire list of all of the players and we will check what is the rating of each player and then we will put him into one of these two categories so he is either a beginner or a pro so let's see how we can do that we already saw how we can iterate through our list so let's write that code one more time I will say for and then I will create a list of int iterator like this I will call it it and I will initialize it to point at the beginning of this list here okay and we need parentheses here okay and then I will say please iterate the list until you come at the end of the list so all players. end like this and then in each iteration you simply increment by one which means you go to the next node like this okay so here we will put the logic that will push the player into one of these two categories so here we will create a variable of type int call it rating okay and what I want to store inside this variable will be the reference value of our iterator so this is how we access each specific rating in our list because again iterator itself is an address it is a pointer and then when you dreference it you get the value that is stored at that address meaning the rating from this list here okay so when we get the rating what we need to do is we need to check if that rating is greater than or equal to one and at the same time if the rating is less less than or equal to five because if it is that means that we are talking about beginner player so we will put him into beginners list so I will say beginners. pushback okay and here we will put the player with this rating okay and then I will check else if rating is greater than or equal to six and at the same time if rating is less than or equal to 10 in this case I will say Pros do push back and I will push the player with this rating into category of pro players like this so this is how we can group all of our players together so that beginners play with beginners and pros play with Pros so with this we have grouped our players so that beginners are with beginners and Pros are with Pros so now in order to test this code and to see if it works as it should we need a way to display this data we need a way to display this list here and this list here so let's create a function here it will be of return type void and I will call it display ratings so display ratings okay and this function will receive a list of integers as a parameter and I will call it players ratings okay so into this function we will pass beginners or Pros list and the job of this function will be to print the ratings of the list that it receives so what I will do is I will copy this code here and then we will adjust it a little bit so this part I don't need the only part that we need is this for Loop which creates an iterator and it iterates from the beginning of let's say this list here until the end of the same list and in each iteration it increments by one so what we will do here is we will simply print the rating of each player so I will say see out player rating like this and let's print the reference value of our iterator and let's put an end line okay so this is how you can create a function that will print all of the elements of the list now this code here will work but there are some small modifications and optimizations that I want to make and they are regarding this parameter here so in some of my previous videos we talked about different ways to pass parameters to function and we said that one way is to pass by value and another way is to pass by reference if you are passing an element by value then the function will make its own copy and it will work on that copy on the other hand if you're passing an element by reference what you need to do is you need to put this little symbol here this end symbol and in this case you are passing the original which means that whatever this function here does does it will work on the original itself so what is the difference the difference is if you pass a parameter by value that means that the function needs to create its own copy and then it will work on that copy now that copying process takes time it makes your application slower it takes your computer resources especially if you're copying a list of elements and even more if you're copying a big list of elements so in order to avoid that what we can do is we can pass the original like we are doing here and we do that with the help of this little end symbol like this and in this case we are passing the original so whatever this function here does it will do it on the original itself now here we are in danger that this function will change the original but it should not do that because the job of this function is simply to display rating so it must not change anything and in order to explicitly forbid this function to change anything what we can do is we can put here const which means hey I am passing the original but I will make it constant which means that you cannot change it but once we do this as you can notice here we get a problem and the reason for this problem is because we are using iterator there is another type that is used in this case and that is const iterator so you simply say hey I'm using constant iterator which means that I will just read the data and I will not change anything so those are small little modifications that we made to this function it does absolutely the same thing as the previous function but it is just more secure so now what we can do is we can invoke this function so I will do that here I will say display ratings and I will pass list of beginners like this okay and then let's also invoke it and pass list of Pros like this and here I will very quickly say see out beginners and then let's put an end line and then before we print Pros let's also say Pros like this okay so let's run our program okay and here are beginners and here are Pros with their rating now there is one small thing that I want to do and that is to remove this s here so I will simply go to my function and here I will remove the S and if I restart the program okay now we don't have any more grammatical errors Okay so this is how you can group beginner players together and pro players together now there are even more improvements that you can do to this code here so that for example your beginners are ordered from the smaller to the bigger rating and also Pro players are ordered from smallest to biggest rating so let's do that next what I will do is I will create a function that will order the players and then I will come back and explain that function so here I have created a function called insert player into ordered list and the job of this function will be to take a rating of a new player and to insert it into a list of already ordered players so the function receives two parameters the first parameter is the rating of a new player and the second parameter is is a list of all of the other players that are ordered by rating and as I said the job is to put that new player in a place where it corresponds so this is what the function does so let's go through this code very quickly so we are using for Loop in order to iterate through this entire list from the beginning until the end and then what we do here is the following we check if the value of each specific iterator is greater than the value that we are trying to add because if it is then we are inserting an element at that position so on real example what this code here will do is the following imagine that you have a list whose elements are 1 two and five and the new element that you want to insert is three so logically three should come between two and five so how this code will behave is as follows so here you start iterating at the beginning which means at the element one and here you check is one greater than three which is the element that you want to insert and the answer is no so you skip this part of the code and then you go to the next element which is two so you check again is two greater than three and the answer is again no so you go go to the next element which is five that is the next element of your list so then you check is five greater than three and the answer is yes so then you execute this code and you say hey into this list here please insert into current position the position of current iterator this new player and then return which means you're done you inserted the player there is nothing else that you should do so simply return from this function now if you iterate through this entire list and you don't find any element in the list which is greater than the element that you are trying to add that means that the element that you are trying to add is the biggest one so then what you will do is at the end you will simply say hey push back push at the end of the list this new element because it is the biggest so it should be at the end so that is how this function here will behave and how it will add new element into a list of already ordered elements and if you are wondering why we are passing this list by reference and we don't have con like we did here the answer is because the job of this function is to change the original because it should add new elements to the original list whereas the job of this function was simply to print the element so this function must not change the elements and this one should change them so that is the reason why we cannot have const here so now if you're wondering where do we invoke this function well let's copy its name and let's go to this code here where we are grouping our players into beginners and Pros so here instead of saying beginners. push back what I will do is I will use this newly added method so I will say in insert player into ordered list and here I need to pass two parameters rating of a player that I want to add okay and then I want to pass the name of the list where the player should be added and that is beginners okay and then let's do the same here but this time I will say please insert rating but into the list of Pros like this so if I save these changes and run the program let's see the result okay and as you can see now the players inside each list are ordered from smallest to the biggest and then Pros as well okay so that is how you use lists in real programs and I will pin this code in a comment so that you can copy it if you need it and now I will explain what are main advantages and disadvantages of lists so so that you know when to use lists and when not to use lists so the main advantage of a list is that inserting new elements and deleting existing elements from a list is very fast on the other hand traversing the list and um searching through your data in the list is very slow so you should have this in consideration if you're creating a program that will insert elements and delete elements very often then using a list is a great option but if you're creating a program that will search through the data a lot you want to perform a lot of searching operations then using list is not a good option you can imagine a list as a group of friends that are on the playground and they are holding each other's hand so each friend represents a node in the list and each friend holds the hand of the person who is in front of him and also of the person who is behind him the same way that nodes have a pointer to the node that is before them and the node that is after them so if you want to become part of that list you would simply come between two friends and you would separate them and take their hands so with your left arm you are holding the friend in front of you and with your right arm you are holding the friend that is after you and then if you want to leave you just leave and the two friends that you are holding they take each other's hand and that is how list automatically resizes it will grow or Shrink itself to fit the elements that are inside that list and because of that inserting elements and removing elements from the list is very fast on the other hand searching through the list is very slow because let's imagine that you want to find your friend Joe in a list of 100 people so what you would have to do is you would have to start at the beginning and you would have to ask the first person hey what is your name so he tells you your name and he is not Joe so then the only thing that he can tell you is where is the next friend so then you go to the next friend and you ask for the name again and if that person is also not Joe the only thing that person can tell you is where is the third person and so you would have to visit each single person in order to find Joe and if Joe is the last person in that list then you would simply have to Traverse the entire list in order to find Joe and all of these friends all of these people are scattered randomly in your memory and they are just connected by these links so the first person knows where the second person is the second person knows where is the first person and the third person and then the third person knows where is the second person and the fourth person and so on so again if Joe is the last you would have to go through the entire list in order to find Joe and because of that searching through the list list is very very slow now there is another type of container which is very fast for searching elements but it is also very slow for adding new elements and that is Vector now I have a separate video where I explain everything that you need to know about Vector so I will put it here and also in the description so you can watch that video next after this one so to understand why Vector is very fast for searching but also very slow for adding and removing elements you can imagine a vector as a classroom now this classroom has a limited number of places let's say that it is a classroom for 20 students and each Place each student has an index and these indexes start from zero so 0 1 2 3 4 5 and so on if it is a classroom for 20 students then indexes go from 0 to 19 and if you want to find Joe you already already know what is the index of Joe what is the place where Joe sits so you would simply refer to Joe with his index and because of that searching elements will be very easy but if you want to add new elements if you want to add new students what you would have to do is you would have to go and find a bigger classroom where you can put more students and then you would have to reallocate all of the existing students and then you would have a few more places left to put new students the same way if you are removing students then you would have to find a smaller classroom because you don't want to waste space so you find smaller classroom you reallocate all of your students so that they fit that smaller classroom if some students were removed of course so because of that adding new students adding new elements to vector and removing elements from Vector is actually very slow because each time you have to reallocate all of the exist existing students into either bigger or smaller vector and because of that if you are going to perform a lot of searching operations but not very much adding and deleting then you would use a vector but if you're going to perform a lot of adding and removing but you will not be searching a lot then you would use a list so I hope this video was helpful if you have any questions you can put them in the comment section and I will try to reply as many as possible or create a new video in the future to reply to your questions um also if you want to learn practical programming and if you want to see how all of these different types of containers different types of data structures and algorithms work together in order to create real applications then I will leave a link to my practical programming course in the description you can use it in order to join the course and learn how to create real applications and get career ready skills and as I said we currently have a special discount that you can use in order to save some money so if you're decided and if you want to learn programming so that you can finally start creating applications that you want and stop watching programming tutorials and programming lessons then definitely click the link in the description and I will see you in my course in a minute so thank you very much for watching and I'll see you in another video bye