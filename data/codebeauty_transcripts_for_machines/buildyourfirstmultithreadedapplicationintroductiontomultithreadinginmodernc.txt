hello guys and welcome to my channel in this video i will teach you about multithreading in modern c plus plus so i will explain what is multithreading why is it important how it works in modern c plus i will give you a reallife example of when i use multithreading for work when i'm coding and i will also explain the difference between multithreading and multitasking because that is something that confuses many people so if you want to learn about multithreading in modern c plus this is the right video for you and you will find everything that you need in this video even if you are a complete beginner so let's talk about multithreading if you are a beginner and if you want to understand multithreading you are going to find a bunch of very complex definitions on the internet that are very hard to comprehend but it doesn't have to be like that and in this video i will give you a simple and easy explanation oh so an interesting fact is that multithreading was introduced with c plus 11 and prior to that if you wanted to work with threats it was much harder and there were several issues and problems but now in modern c plus there is a very easy way to work with threads and i will show you that in a moment because the first thing that i want to explain is what is multithreading and the most general definition is that multithreading is the ability of multiple parts of one program to be executed at the same time and there are two ways to achieve this the first way is multitasking so how do i explain multitasking imagine a situation where you are doing your homework and texting with your friend so you are doing two things at the same time or not if you really think about this you are not doing two tasks at the same time you are just switching between the first task and the second task and computers can do this as well with one very important difference which is that computers can switch between these two tasks so fast that it becomes unnoticeable to human eye so it really seems like a parallel execution but this is not real multithreading this is multitasking the second way is real multithreading and real multitrading means that you write and divide your program in such way that individual parts of that program can be executed at the same time an example of this multithreading in real life is let's say for example that you and your girlfriend or boyfriend whichever you have you decide to prepare the lunch together so that is the problem that you need to solve prepare the lunch and you decide to split that job in such way that both of you can perform your part of the job at the same time so for example the job of your girlfriend is to to clean vegetables to peel them slice them and add them to the pot and then your part of the job is to um to stir the mixture all the time okay so you are two threads who are performing their part of the job and both of you can be executed at the same time and that is how real multithreading works so now your question might be how does this work in computers well if your pc has two cores the first score is going to take the first thread the second quarter is going to take the second thread and both of them can work at the same time simple as that so let's now switch to visual studio in order to see how this works in code so in order to understand how multithreading works let's create two simple functions i will create them here i will say void function 1 and the job of this function will be to write out plus symbol 200 times very simple so i will say 4 and i is equal to 0 i is less than 200 i plus plus and here i will just say std c out and then i will print this symbol here okay so that is the job of the first function and then let's create a second function it will be called function 2 and its job will be to write out minus symbol 200 times so if i invoke these two functions so function 1 and function2 and if i run this program we get this behavior here so every time that i run this program we will get this very predictable behavior which is 200 of these plus symbols and then 200 of minus symbols so what is going to happen if i now make this program a multithreaded application so what is going to happen if i say hey this function will be executed in one thread and this second function will be executed in the second thread let's do that so what are steps to make this application a multithreaded application the first step is if you want to work with threads you need to include thread header files so i will say include thread okay and now what we are going to do is we are going to create a thread i will delete this i don't need it anymore so i will create a thread std thread okay so this is the type and then i will give the name to my thread i will call it worker 1 like this and here inside these parentheses i need to pass a function a task that this worker thread will perform so my worker one will perform function one that is going to be its task and then i also want to create another thread called worker two and its job will be to execute function two okay so now my question for you is what is going to happen if i run my program again so let's run the program and this is the result what the heck what is this and there is one more thing that i want to show you so let's take a screenshot of this console and i will save this as an image and it is opening it on my second monitor let me fix this and i will be back so here is the result that we had the first time that we ran our application and what i want to do now is i want to run it again okay and let's compare this second and the first result and as you can see they are quite different so now your question might be what the heck is happening and wait wait wait wait it's not what it looks like i can explain this every time that you run your application you are going to get 200 plus symbols and 200 minus symbols that is something that you can predict but what you cannot predict is how the output is going to look like because that does not depend on you that depends on how fast those two threads are working so the thread that is faster will output first and then the thread that is slower will output second another thing that you cannot predict is for how long that faster thread will be able to write its data before that second thread jumps in and starts writing its data so that is why it is very important to divide your program in such way that each thread knows what is its job because if you don't believe me you can have major problems that are extremely hard to fix you can have situations like race conditions and thread locks and those are problems that can give you a headache but it is still too early to talk about those problems i will leave that for some other video because i want to teach you everything step by step and there are many more things that you need to learn before we start talking about those things there is another important thing that i want to show you and that is the following question can this worker thread execute a function that receives a parameter and the answer to that question is yes of course it can so let me show you how you can pass a parameter to a function that is executed by a thread so i will use this function here so i will pass a parameter of type char and i will call it symbol so instead of writing this plus symbol i will print this symbol that i received as parameter okay so what is going to happen if i run my program now let's see okay we have an error and if you read the description of that error it's very confusing especially for beginners and if you all of a sudden get this error and you are not familiar with it it will be very hard to fix it so the problem here is that our function one is receiving a parameter and then here when we are passing that function to our worker thread we are not specifying this parameter here so we need to pass this char symbol as well inside this worker thread so how do you do that it's actually very simple so you just add a comma sign and then you pass your parameters and here i will pass let's say for example i will pass letter o like this and if i run my program now as you can see everything works as expected one thing that i promised at the beginning is that i will demonstrate a real life example of when you would want to use multithreading in order to solve a programming problem so let's do that now imagine the following situation you are building a weather forecast application and the data that you need the data about weather is on an api and also imagine that the api is far from you like very very far on the other end of the world so every time that you ask your api hey how's the weather it takes a couple of seconds for that information to come back and it might not seem like much a couple of seconds but in programming and i'm sure that you have experienced this yourself when you click on something and you wait for a couple of seconds for that operation to happen it can be quite frustrating so that is a problem that can be fixed using multithreading a solution with threads is to create a thread that will work in the background and the job of that thread will be to get the data from the api and store it in your computer memory so it will create a cache and then its job will be also to refresh that data every couple of minutes or every couple of seconds that depends on what kind of data you are working with since we are working with weather data that is something that does not change every few seconds so you can refresh it every two minutes or every five minutes it depends so the job of that thread will be to refresh the data and then when your user asks hey how is the weather you are not going to send that request to the api but you will take that information from the data that is already available in your cache and that is going to happen instantly so there will be no that delay of a few seconds that is very very frustrating and that is how you can solve that problem using multithreading so now i'm going to delete this code so that i can demonstrate how this would work in code so one more time we are going to create a thread and its job will be to refresh a weather forecast's data every two minutes or let's say two seconds it's too long to wait for two minutes in the video so it will refresh a weather forecast data every two seconds so the first thing that we need is we need that weather forecast data and since i don't have an api to work with right now we are going to create our own dummy data so let's do that so i will create a collection that will map the name of the city with the temperature in that city and the name of that collection is map and if you want to use it you need to say here include map and now you can create map collection so i will say std map so please create a map collection that will map the name of the city with the temperature so it will map std string type with inch type and one more thing that we need is we need to say include string as well okay so this here is the type and the name of this collection will be forecast map like this and the next step is to initialize the data so we are going to create some dummy data for our forecast map so how do you do that well you open these curly brackets and put semicolon at the end and then here we are going to create our city temperature pairs so i will open new curly brackets and inside these curly brackets i will create my city let's say for example new york like this and then the second is the temperature so let's say 15 which i'm probably wrong let me know what is current temperature where you live i live in mostad and it is currently six degrees celsius and it is four a.m okay so this is the first pair you put comma sign and then let's create the second pair so let's say for example mumbai and the temperature is 20 degrees and let's create third pair let's say for example berlin and the temperature is 18 degrees okay so this is our forecast map and this is dummy data that we created for it so let's now create a function that will perform this refreshing of the data every two seconds i'll create it here it will be of return type void and i will call it refresh forecast like this and this function will receive a parameter that parameter is going to be our forecast map so it is going to be this okay i'll just copy it so it is going to be a map of string and int and i will call that parameter forecast map okay so what is going to happen inside this function so since we don't have an api that we can work with we will have to simulate the behavior so inside this function i will go through all of the items of this forecast map and i will increment the temperature of every city so let's do that let's say for auto item so for every item from this forecast map what i want to do is i want to increment the temperature so i will say item dot second and item.second is the temperature item.first is the name of the city so item.second plus plus please increment the temperature and then another thing that i want to do is i want to write out the information about the city and the temperature in that city so i will say std c out so please write out item dot first okay and then let's separate it and then write out item dot second and i will add std end line at the end of each output like this okay the second step is as we said after we finish this increment so the update of our data we are going to sleep this thread for two minutes two seconds actually so here after this for loop finishes incrementing all of the data so updating all of the data i will say std this thread so it is the thread that we are currently working with please sleep this thread for 2 000 milliseconds which is two seconds okay and if you want to be able to use this ms milliseconds lateral what you have to do is you have to either say using namespace std and the error will disappear but a better approach would be to include just what you need for this literal here because this using namespace std will include the entire std namespace and what we need in this situation is the following so i will say include chrono that is the first thing and then i will also say using namespace oh what is this so using namespace it is here and the name of the namespace is std chrono literals something like this chrono literals is it chrono literal oh chrono literals like this okay perfect and now the error has disappeared the third step is to say to this refresh forecast function hey when i run my program and i start this refresh forecast that should happen every two seconds infinitely so while my program is running and in order to achieve that i will put this part of the code into an infinite loop okay so i will say while so while true which means forever while this program is running and i will put everything inside these curly brackets okay so i created an infinite loop and all of this code is inside that infinite loop so the next step which is fourth step i believe is to create a thread and then to start this function in a new thread so i will go to my main function and here i will create a new thread so i will say std thread and let's call that thread background worker so bg worker like this and the function that this background worker thread will execute is this function here refresh forecast like this and since this function here receives a parameter we need to pass that parameter here so i'll put comma sign and then i will pass this forecast map to my function like this okay so let's run our program and let's see what we are going to get so here is the first update and then the second and the third and fourth and so on as you can see the data is updating every two seconds but the temperatures are not changing so we have a bug let me check very quickly what is happening inside this function so the problem that we have is in this for loop here because here we are taking an item and creating a copy and if you want to change the item that is inside this forecast map so the original you need to take it by a reference like this so if you add this ampersand symbol it should work as expected so let's run it again okay and as you can see now temperatures are rising global warming is real and our program works as expected great hello beautiful people this is saldina from the edit and i'm currently in my pajamas and i just remembered something very important that i want to share with you so while we are watching these temperatures rise and after you have seen the solution and hopefully understood i wouldn't be me if i didn't also share some potential problems with this solution and i'm not telling you this to say that the solution is wrong it is just to teach you that in programming there is no such thing as one solution fits all and there is no the best solution solution that doesn't contain any bugs because there is no application that doesn't contain at least one bug except for very simple applications which are not even useful let's be honest so there will always be that one small edge case where your program will not behave the way that you think it will so the problem is following what is going to happen if you use this same approach for a mobile application so you decide to refresh the data every two seconds on your mobile phone well there are two potential scenarios the first one is that your mobile phone is connected to a wifi so most likely there will be no problem but what if your mobile user is not on the wifi and he's using his credit he's gigabytes which means he's paying with his money for the amount of gigabytes that he spends and you are doing that refreshing in the background and spending his money well in that situation when the user figures that out he will uninstall your application and give you a bad review so that is one potential problem that you need to think about as a programmer and don't be hard on yourself if you cannot do it right now and if you cannot recognize the problems that can happen in your application because that is something that comes with experience and time and please let me know if it is useful for you that i explain and mention these problems as well because it takes me more time but i'm doing it because i believe that you should as a programmer or as a future programmer be aware of these things and you should learn to think as a programmer so when you are writing your code you should think about the potential problems that can emerge in that code in the future because there is no such thing as perfect code it is always a compromise so give a little bit of something in order to get more of something else so i really wanted to jump in while editing to share this information with you because i think that it is very important that you see this side of programming as well it will develop your programming logic because the more problems that you see and the more problems that you solve the better programmer that you will become and this will transfer to solving problems in your real life as well so i would love to share more tips and info like this in the future if you want of course so let me know give this video a thumbs up if you want more information like this and then give it a thumbs down if you don't so that i know for the future videos so thank you very much for watching and i'm going to see you in some other video bye