hi guys and welcome to my channel in this video i'm going to teach you about regular expressions and ways to validate user input with the help of regular expressions so i received many comments and questions where you tell me that you were asking the user to enter a number for example but he enters a letter or a string and then you get an error or you are asking the user to enter email address but he enters phone number so your program crashes so in this video i decided to teach you how to solve those type of problems with the help of regular expressions also known as regex so in this video i will use c plus builder because i want to build this little form that has email and password input fields and as you already know simple plus builder is the best choice to build user interface applications with c plus so in this video i will teach you how to validate email and password because those two are a little bit more complex and then i will leave to you to validate first name last name age and things like that if you want to add additional fields to this form here so let's see how this form behaves so if i enter here for example saldina at gmail.com like this and i click validate as you can see email is not valid because the format should be firstname.lastname at something.com so if i say saldena dot nurak and then i click validate now email is valid and then for password let's say that password is selena123 and if i click validate again it says that password is not valid and the rule is that it should contain at least one lowercase letter one capital letter one number and one special sign so here we are missing capital letter so let's change that and then also a special sign so let's add that as well okay so if i click on validate now as you can see now our password is valid so this is the program that we will build in this video and i will show you how to validate these inputs from our user with the help of regular expressions and before we start building this application for all my viewers who were asking about databases or sql course i have a great database to recommend it is called interbase and it is a lightweight sql database that doesn't take much space in memory or your disk um and then it is also fast and easy to install and it is multiplatform so it can run on windows and linux and mac and also on ios and android and then probably my favorite characteristic is that it is admin free so the company that i'm currently working for we are processing a lot of transactions probably more than 10 000 transactions in a second so with interbase it can run literally for years without you needing to do backup and restore and i also read that the rover that is currently exploring mars is actually running a copy of interbase on mars so that is because it was too far to send db admin and also because it is very safe and resilient and effective uh so i will put a link in the description so that you can download it and try it out and then also please let me know if i should make an sql course i don't know maybe i should do that let me know in the comments so let's return to regular expressions i showed you the application that we are going to build and here i created a new multiadvice application with c plus builder it is completely empty so the first step that i want to do is i want to build user interface for our app and if you're not familiar with building user interface with c plus builder please make sure to watch this video first and then you can come back so let's do email first so i will need one edit one label and then a button so here i will find edit and then drag and drop it okay and then let's do label t label so this is going to be our is valid label and then button so this is going to be validate button okay and let's change the name of these controls so this edit will be called uh let's call it user input so here i will say user input like this and then this label it will be called is valid label so i'll say is valid label and then this button will be called validate button okay so that is all that we will need for now and now i will teach you about regular expressions so the goal of this video is not to teach you everything about regular expressions nor any video on youtube can do that because it is very broad topic but the good news is that you don't need to know everything in order to be able to use them successfully and i personally don't know everything and i've been using regular expressions for years without any problems so the goal of this video is to teach you that first of all they exist because as a developer you should be familiar with regular expressions and then second reason is i want to prepare you for a real life code i want to prepare you for a situation where you are reading real code and then you come across this regular expression code so you should have at least an idea of what it is doing and then when you find yourself in a situation where you need to solve your problem with regular expressions in most cases you are going to google and find something that is similar and then modify it a little bit in order to fit your problem and in order to be able to do that you should watch this entire video so what is regex what is regular expression the most understandable way to explain it is that a regex is a rule that you can use in order to check if a certain text matches that rule so you already saw at the beginning of the video when i showed you how we validated email and password and the process of that goes like this you first write a regular expression rule and then you use that rule in order to check if the email that your user has entered matches that rule which means if it is valid or not so that is one purpose of regular expressions and then second purpose is you can use regular expressions in order to search for specific characters or words or part of a word or even a sentence in a text and in this video we are going to see both of these uses of regular expressions and they are called regex match and regex search so here we have a site called regex storm which will help us to learn about regular expressions i will put a link in the description so basically here you can enter a regular expression rule and then you can test different inputs to see if they match the rule so let's say for example that we want lowercase letters so i would write a rule like this i would say a to z lowercase and then let's test this input string so if i say salvina all lowercase we get seven matches okay and then if i change this to uppercase letter now we have six matches okay so if i wanted to change this rule to accept also lowercase and uppercase letters i would say a to z lowercase and then also a to z uppercase and as you can see now we again have seven matches okay so how can we say for example that we want numbers well you can probably guess correctly we would say that we want zero to 9 like this but we get 0 matches because inside this input string we don't have any numbers so if i say for example salvina123 now we are going to get three matches okay so what else can i show you let's say for example that we want exactly three numbers so i would write a rule like this i would say zero to nine exactly three times and inside this input string we have one match and that is this part here so one two three okay and then if i delete one number now we have zero matches because here i'm saying that i want exactly three numbers and then what else you can do is you can say that you want a minimum of one number and then a maximum of three numbers and then as you can see here this is matched so now we have one mesh because here we have two numbers so these are the basics let's see what else we can do let's say that i want to find a part of this input where we have a number that appears minimum one time maximum three times and then i also want it to end with a specific letter let's say for example letter m okay and now we get zero matches because there is no such thing inside this input part here but if i add letter m here as you can see now we get a match for this part of our input so now we have a number that appears minimum one time maximum three times here we have two so that's a match and then it also ends with letter m as we said here okay and then let's also say that we want this to start with letter a like this with capital letter a and then again here we don't have a match for that but if i say here for example a as you can see now we do have a match and that is okay and that is this part here another important thing that you should know are special characters in regular expressions now there are many special characters and here we are going to see three and then we are going to see a few more by the end of the video so the three that i want to teach you about are question mark plus sign and then asterisk symbol that little star symbol so if you ever worked with wild cards these special symbols in regex are very similar to wild cards and if you haven't doesn't matter because i'm going to explain them anyway so um so let's see how they work the first one that i will explain is question mark so let's delete this interval here so now it says that we are looking for part of the input that starts with letter a and then it has a number and then it has letter m we don't have that interval anymore but if i add a question mark here this rule here means that now we are looking for part of this input which starts with letter a ends with letter m and then it has a number here which can appear one time or zero times so this question mark means that this part here can appear once or not at all okay so here we have no matches because here we have letter a and then we have two numbers and then letter m so if i delete this number two now we should get one match okay and then if i delete this one as well we have a match because as i said this question mark means once or zero times so that is the meaning of question mark let's see the second special symbol the second special symbol is plus sign okay and plus sign means that this part here that comes before it needs to appear at least once but it can also appear multiple times and as you can see here we don't have any matches inside our input okay but if i add here one for example now we do have a match and then if i say one two three again we have a match because plus sign once more means that this part that comes before it needs to appear at least once but it can also appear multiple times and then the third special character that i want to show you is asterix symbol like this and asterisk symbol means that this part that comes before it can appear multiple times it can appear once but it doesn't have to appear at all so this here is valid and then this is valid and then this is valid as well so multiple times once or zero times so those are three special characters that i wanted to show you again we have a question mark which means once or not at all and then plus sign which means at least once but it can also appear multiple times and then we have this asterisk symbol which means that it can appear multiple times once or not at all so i believe those are all basics that you need to know in order to be able to write a regex rule for email address and many more things because email address is pretty hard when compared to some other uh things so here i have an email address in the format of firstname.lastname.gmail.com and this should be valid format of a email address so firstname.lastname.something.com so how can we write a rule that will say that this format is valid this email address is valid and then other formats are invalid well let's take care first of the first name part so here we have multiple lower characters so how would we write a rule for that well you would say that you want lower character that appears let's say at least once but it can also appear multiple times okay so with this we took care of the first name part so now let's see how we are going to cover this dot part now if i say just dot like this it is not going to work as expected because dot is also a special character in regular expressions and dot means literally any character so if you want to say dot literal like specifically dot character you need to put backslash in front of it like this okay so now we have covered this part and then for family name i will also say that i want lowercase letters that can appear at least once or multiple times okay and then let's take care of this at gmail.com so i will say at gmail.com and again here in front of this dot i want to put backslash okay so as you can see now we have one match found okay now one problem that i see with this is that now only gmail addresses will work so if i say here for example hotmail.com we get zero matches so what i should do here instead of at gmail.com is i would say instead of this gmail i also want a lowercase letter to appear at least once or multiple times okay so now hotmail is valid and then windows live is valid and then gmail as well is valid now let's see what is going to happen if i say for example that here we will have a capital letter a we will get zero matches okay because here we have allowed only lowercase letters so let's allow capital letters as well both here and here and also here so i will say a to z lowercase and then a to z uppercase as well and then let's copy this here and then here as well and as you can see now we get one match found and then also if i say k capital again we have a match and then another thing that i want to do is i also want to say that let's say salina dot nurak95 gmail.com should also be valid or if i decide to enter here saldena95.norak gmail.com that should also be valid so i want to add numbers here and here and here as well so i will say a to z and then a to z capital and then zero to nine and then let's copy this part here paste it here and then here as well so why am i doing this why am i allowing numbers in first name and second name well because of the name that elon musk decided to give to his son which i'm not even going to try to pronounce but i believe that in the future we will see more people deciding to give to their babies names that have numbers or even special characters elon musk started that trend and a fun fact is that his boy's name is going to break every single validation form for first name because as far as i know first names traditionally contained only lowercase and uppercase letters so now they have 18 years until he's of age in order to fix their uh regex rules before he's able to register anywhere and try to enter his first name so yeah that's a fun fact and that's the reason why i'm allowing also numbers as part of first name and second name and then also as part of this domain why not and since we already did this let me also show you a shorter way to write this part so there is a shortcut for this and that is backslash w and that means all uppercase lowercase and numbers and also underscore i believe so we can use this backslash w instead of this part here and then also let's paste it here like this so this is regex that we will use in order to validate email and when you see a code like this it looks pretty bizarre but if you go step by step then it really makes sense so if you need to rewatch the previous part of the video please do that now because now i'm going to move to c plus code and see how we can use this regex in order to validate user's email address so let's copy this pattern and move to our rad studio so the whole process of validation is going to happen when the user clicks on this validate button so let's create that event handler i will double click on it and here we have a function where we will write our validation code so let's create std string a variable called regex pattern so i'll call it regex pattern like this and here i will paste the pattern that we wrote okay now one important thing that you may or may not know about c plus is that this backslash is a special character in c plus so if you don't want to use it as a special character but you want to use it as character literal so backslash itself which we do want in this situation then you need to add another backslash in front of it so i will add another backslash here and then here and here and then this last place like this okay so the second step is to create regex rule so i will say std regex and i will call this variable regex rule like this and here i will pass this regex pattern and with this we created a regex rule and also in order to be able to use this regex and string you need to say here include string and also include regex like this okay so the next step is to take the text from this input field called user input i believe that's the name that we gave it where is it okay you can check it here it says user input that is the name of this control so i'll go back to my cpp file and here i will say nc string and let's call it email text so i will say user input i want to take text from a control that is called user input and that text is of ansi string type now in order to be able to validate it we need to convert it into c string so i will say std string and i will call it email string okay and i will use this email text and convert it to c string format like this and then one more thing that remains is to check if this email string matches with this regex rule so i will say regex match so please check if this email string matches with this regex rule like this and i want to assign the result of this here into a variable that is going to be of type bool and i will call it is valid okay so i will use this variable in order to set the value for this is valid label so let's go back to cpp file okay and here i will say if is valid what i want to do is i want to say is valid label its text property will be equal to it is valid or email is valid like this okay and then else so if it is not valid then i want to set a different message so i will say that email is not valid like this so let's test this program now let's run it so if i try salvinac gmail.com and i click on validate we will get this message which says that email is not valid because we are missing a dot separator between first name and last name okay so if i click on validate now now it says that email is valid and this should also be valid salvina95.murak.gmail.com should also be valid okay and then we can put also capital letters that should also be valid but if we are missing this dot symbol or if we are missing for example at here then email is not going to be valid so that is how you validate email now let me show you how you can validate password so let's comment this email validation part because i want to reuse the same controls that i used for email because this video is getting too long so i don't want to make it any longer than it needs to be and these controls already have generic names so this edit is called it is called user input not email user input and then this is also is valid label but if you want to add new controls then you should give them a specific name so password user input and then password valid label and so on but i will use these existing ones so let's go back to cpp file okay and here i will write regex for password now the rule for password is that it needs to contain at least one lowercase letter one uppercase letter and then one special character and one number so that is the regex rule that we will write so i will divide this into four rules so that it is easier to understand and let's start with lowercase letters so let's say std string and let's say lowercase okay so here will be the rule for at least one lowercase letter now let's put here question mark and then equal to now this combination here means that whatever i put after it needs to be fulfilled somewhere in the password so i don't care about the exact order i just need for this which is lowercase letter to appear somewhere in the password okay and then another thing that i want to add is i want to say that before this lowercase letter we can have another character and that can be any character and if you remember when we talked about dot symbol we said that it is a special character in regular expressions and the purpose of dot is to say any character so in front of a lowercase letter can appear any character and that character can appear one time it can appeal appear multiple times or it doesn't have to appear at all and that is when our password starts with lowercase letter so which one of those three special wildcard symbols represents zero one or multiple times well that is the star symbol right so here is the lowercase part of our password which says the following i need whatever comes after this to appear somewhere in my password i don't care about the exact position i just need for this part here to be fulfilled somewhere in the password and this part here says that we need to have at least one lowercase letter and then in front of that lowercase letter we can have any character and that character can appear one time it can appear multiple times or it doesn't have to appear at all and that is the situation where our password starts with lowercase letter so that is what this rule here says so let's do the same for uppercase letters numbers and special characters so i will just copy this rule and then paste it and here i will say uppercase okay and then i will change it to say uppercase letters like this and then let's do numbers and here i will adjust it to say 0 to 9 like this and then also let's cover special characters like this and here i will manually put special characters that can appear so i will say for example um dollar symbol underscore and at symbol you can add more if you want so that is a rule for lowercase letters uppercase numbers and special characters and let's add one extra rule which will say that we need to have at least six characters inside our password we can have minimum of six and then we are not going to define maximum so i will say std string and let's call this rule min characters like this and i will say that this rule needs to be fulfilled somewhere in our password and that is that any symbol needs to appear at least six times that is the minimum and then we are not going to define maximum okay so this is how you how you use the interval that i showed you at the beginning of the video so these are all individual rules that we need to fulfill for a password to be valid so now let's combine all of these rules into one so i will say std string and let's call it full pattern like this and i will say lowercase plus uppercase and then i will also say plus numbers plus special characters and also plus minimum number of characters okay let's format this a little bit like this okay so this is going to be full rule and since we are combining multiple rules what i need to do is i need to put them into parentheses so all of these individual rules need to be in parentheses like this so i will put parentheses here and then also here let me do this very quickly and then i will be back okay so i put these individual rules all five of them into parentheses because here we are combining them and then the next step is this step that we did here so to create a regex rule like this and to this rugex rule i will pass this full pattern like this okay and then the next step is we will take the password that our user has entered so i will copy this part here so i will take the password text let's just change the name of the variable and then the name of our input stayed the same so i will take from user's input i will take text of that input and i will store it into password text variable and then here i will need to convert it into c string format in order to be able to validate it so i will create a variable of type string i will call it password string like this and i will convert this password text into c string format okay and then i will again copy this part that we used for email paste it here and then one important difference is that for validating password we are not going to use regex match but we are going to use regex search because there is no exact pattern that a password should match but rather there are five individual rules that every password should fulfill and those are that it contains at least one lowercase one uppercase and then one number special character and then that minimum number of characters is six so here as i said i will not use regex match but i will use regex search okay and i will say that i want to search for this password string inside our regex rule object that contains our full pattern okay so let's change also this validation message to say that password is valid and then here in case that it is not valid i will say password is not valid so let's start our program and test the code that we have written okay so here i will let me just move it here so that you can see code as well so here i will try password salvina123 and if i click validate it says that password is not valid so we are missing capital letter we are also missing a special symbol and if i click on validate now now it says that password is valid and also if you try to enter less than six characters password should not be valid so let's try s and then special symbol and then lowercase letter and let's enter a number so here we have four characters so we have fulfilled four of the five rules so if i click on validate now it says again that password is not valid because this last part says that password should contain at least six characters so if i add two three now the password should be valid okay so that will be all for this video if you enjoyed it please give it a big thumbs up because that is really important for the youtube algorithm and then also share it with someone who needs to see this video and learn about regular expressions and ways to validate user input with regular expressions so thank you very much for watching and i will see you in some other video bye