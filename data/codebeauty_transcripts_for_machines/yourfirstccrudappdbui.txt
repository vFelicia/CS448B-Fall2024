hi guys and welcome to my channel in this video I'm going to teach you how to build an entire application with user interface and database from scratch so it is going to be fully functional application that can be used for some real life problems so if you watch this video Until the End you are going to learn how to build applications with user interface and database that you can use for your job or to help you with productivity with some everyday tasks and so on I will show you how to build gym application and then after you watch this video when you learn all the steps and logic you can use those and modify them a little bit in order to build an application that you need and before I show you the application that we are going to build many of you ask me for some additional resources to learn programming so I am going to pin in the comments some great resources for beginners to help you learn programming faster so make sure to check those out also all the tools that we will use for this video will be linked in the description so that you can download them but maybe watch this video first so that you can get a general idea of how we will do things and then you can rewatch the video and code along with me so here is the application that we are going to build as you can see here we have a list of all gem users as you can see and then membership types and what you can do here is you can filter users by membership type so when you click on a specific membership type you get the list of all the users who are subscribed to that membership type another thing that you can do you can also add new users so let's say ID 10 membership type let's say two and then first name is going to be Steve jobs and let's confirm this transaction so now if I click on membership type 2 as you can see here we have Steve Jobs so you can add new users you can remove existing users let's remove me let's remove something and Iraq delete record okay and let's try to find Selena norak okay I don't exist in this database anymore and you can also edit existing records so you can say Stevie jobs okay and if I select this again as you can see it's now Stevie drops okay so let's now see how we can build this application so we will divide this into two steps the first step is to create a database the second step is to create application and then we are going to connect those two so please if you need help with installing and setting up the database or if you are experiencing some problems that are not happening to me in this video please make sure to watch the video that I will link here I'll also put it in the description I explain everything step by step there so the first step is to start interbase server so open interbase server manager and start the server okay and then you can run your IV console and here you should be able to connect to your look to your local server you should see this screen check mark and here are the list of all of your databases I'm going to create a new database so right click on databases and create database and we are going to create a new database on desktop so I will call it Jim DB and click save and then click OK and you should be able to see your database here okay and here the default password is master key I'm going to put that on the screen so default username and password I will type it here and click connect and as you can see we have successfully connected to our gym DB and that database is currently empty so let's proceed with the next step so before we proceed and create tables for the database and enter data let's do a little bit of planning let me open paint so the application that we are going to build is Gem application and the reason why I picked this example is because it has use in real world so if you think about that you will notice that there are two important entities that we need to represent in our database and those two are gym users and their membership types so we will have two tables the first one will be gem users and the second one will be membership types so let's draw those two okay so this is going to be users and then this is going to be membership types let's add text here let's say gym users okay and I will just make this text a little bit bigger I'll make it bigger like this okay so this is Gem users and then let's also add another one let's say membership types okay great now let's see how these two tables are going to be connected so let's say that you're signing up to the gym for the first time so you don't know if you will like it if you will see any results and you decide to get a monthly membership so try it out for a month only after that month maybe you have lost some weight you have put on some muscle and you have seen the first results of your training so you decide that you like it and that you want to continue so you want to get a longer membership maybe for a year so if you look at this relationship you will notice that every user at a given moment can have only one membership type so that can be weekly monthly yearly six months doesn't really matter but every user can have only one membership type but if you look at the same situation from different perspective from the perspective of membership type stable then you will notice that every membership type can be assigned to multiple users maybe there are are 10 users who have monthly membership and then 100 users who have yearly membership so this is a typical example of onetomany relationship so every gym user can have only one membership but every membership type can have multiple users that use that membership that are subscribed to that membership so and representing multiple and this is an example of onetomany relationship so now that we have explained this let's head back to our IB console and let's create these two tables with SQL and the first table that needs to be created is the table that has this many part of the relationship meaning membership types and the reason is because that is the independent table so it is independent in a way that when you want to create a gym user you need to have a membership type to assign to that user so that means that membership types needs to be created first so let's go to our IB console and I'm going to select my gym DB and click on this SQL in order to be able to write SQL queries okay so here is my SQL code in order to create these two tables and I'm going to paste it here and let's explain what this code here does so you say create table and then you give the name to your table in this case it's membership types again we are creating independent table first and then inside these parentheses you will specify The Columns of your table so the attributes okay and we have two we have membership ID and membership name so membership ID is going to be of type integer and it cannot be now and then membership name is going to be a string in the situation in SQL it's called varchar and it can have up to 50 characters and again it also cannot be now and then here we are creating something called primary key which means that a field that is a primary key will be used in order to uniquely identify every row every record inside this table and in this situation we are saying that membership ID so this property here this attribute will be used as a primary key meaning it will be used in order to uniquely identify every single record inside this table and whatever we specify as primary key inside this table that will be used as a foreign key inside another table in order to connect affect those two tables so that is how we create our membership types table and then if you want to create gym users table again we say create table and give the name to that table gym users and inside these parentheses again you specify The Columns of that table and in this situation we have four columns those are these four this is something else which I will explain in a minute so we have four columns the first one is use gym user ID which is again it is a unique way to identify every single gym user because two users can have the same name they can even have the same last name but their user ID needs to be unique so for every single gym user he needs to have a unique ID okay so that is the First Column and then we have column first name and last name and those two are strings of up to 30 characters that string type in databases is called varchar and then you specify how many characters it will have this is the maximum number characters that it can have and then we have membership ID and this membership ID is going to be a membership from this table that is assigned to our user so every single user is going to have a membership ID of a membership type that he is subscribed to and this membership ID you specified here as a foreign key to this table so here you say we have a foreign key inside our gym users and that is going to be a field called membership ID which is this field here and it references a table called membership type so this table here and inside that table we are using this field here this membership ID as our foreign key so that is what this line here means so it is going to be a membership type that our user is subscribed to and then here we are saying that a primary key for this table is going to be this field here gym user ID okay so now that I have copied this to our SQL query I am going to execute these two again please keep in mind that first you need to create independent table so you need to select this membership types table and click on this here so execute query or press F5 on your keyboard okay and then create this second table select it and press F5 or this execute query there are a few very important tips related to this and the first one is if you get any sort of error when you are trying to execute these queries or upon insertion of the data what you need to do is you need to go to transaction and then options and you need to set this access mode to right and you are not going to get any errors that is the first tip and then the second tip is that SQL is not case sensitive which means that if you write this create table with capital letters is the same as if you wrote it with lowercase like this okay so it is absolutely the same this approach and this approach but one important thing that you do need to keep in mind is that you cannot use keywords in SQL as names for your tables so you cannot name this table for example user because that is a keyword and if you can see it has even been bolded so this is a keyword in SQL so you cannot use it as a name for your table or attribute attribute or something like that so here I will change it back to gym users so now that we have created these two tables we should be able to see them here but since that did not refresh automatically I'm just going to close this and open it again okay and as you can see here are our two tables and when you select a specific table here you can see all the columns of that table if you find another way a better way to refresh this that is not closing it and opening it again let me know in the comments so let's insert a couple of Records to our tables and again the first table that I want to insert records into is going to be membership types because we don't have any membership type so that means that we if we try to create a gym user we will not have a membership type to assign to that user Okay so let's say insert into membership types okay and here I'm going to specify the columns that I want to insert into so The Columns of this table we have that here so the first one is membership ID okay and then the second one is membership name and here I want to specify values so inside parentheses I will specify values in this order so the first is membership ID let's say that membership ID is going to be one and then membership name let's say that membership name will be weekly please keep in mind that this here is an integer so we don't need any quotation marks but since this is a string or VAR chart type we are specifying this inside these single quotation marks okay so select this query and execute it and here we have the error that I mentioned so let's very quickly fix this error let's go to transactions options and let's set this access mode to right okay okay so if I try to execute this query again it has successfully been executed and one more thing that you need to do is you need to commit this transaction so go to transactions and then commit or press F9 okay and with this we have successfully inserted data into our membership types table so let's check out what data we have inside this table we should have only one record so I'm going to say select all from this table here okay and if I press F5 we are going to see that we have only one row and that is this one that we have just inserted so let's insert two more I'm just going to copy this paste it two times so let's change the values here I'm going to say 2 and then membership name is monthly okay and then let's say three and membership type will be called yearly and I'm going to insert these two so let's insert this one and then this one and I will commit these two transactions so if I try to select everything from my membership types table again you can see that now we have three records and those are these three that we have just inserted and please please change the ID of every record that you are inserting because as we said id needs to be unique so you cannot have two records with the same ID because if you do that you are going to get an error let's now add a couple of gem users here I have typed already a code in order to select all records from gym users table and to insert a couple of Records into our gem users table and again the approach is absolutely the same you say insert into and then the name of your table and here you specify all of the column names you can see them here okay and then you say that the values that you want to insert are following and you specify those values in this order here so first is gym user ID second is first name and then last name and here is membership ID and here you can see all the membership names and their belonging IDs okay so I'm going to insert these records okay and I need to commit this transaction and now I can select everything from my gym users and as you can see here inside gym users table we have four gem users so that would be all for the SQL part let's now see how we can show this data inside our C plus plus app delete it update filter and so on so I am going to open my red studio and the first step is to create a blank c plus application so click on file new and then MultiDevice application with CClass plus Builder again if you are absolutely new to C plus plus Builder and you need help to introduce you to C plus Builder or some simpler application to build first make sure to watch this video I will link it on the top of the screen and also I will leave a link in the description so I explain everything step by step here and in this course we are going to continue from that so here you are going to select blank application and click OK and now it is creating a blank application let's wait a couple of seconds okay so here is our application now I'm going to show you how easy it is to connect our database with C plus plus app so go to this data Explorer Tab and here under Fire DAC you are going to notice a different types of databases that you can connect with this C plus application and the database that we are using is called interbase so open it here and here you will notice something called employee that is default connection so the first thing please don't delete this connection if you don't like the name if you want to change it to something else you can simply rename it but don't delete it because you get only one connection and if you delete it you will have a problem so okay now what I want to do here is I want to modify this connection and specify the D specify the details of our database so three are able to connect to the database that we just created so here we will have to change two things the first one is this database so click on this folder here and find the database that we have just created mine was on desktop I'm going to click on desktop and it was this gym DB okay so I'm going to open that database that is the first part that I have to change and then the second part is to change this TCP IP to local okay that is default so if I click OK here and if I double click here now you should be able to see the tables of your database if you are not able to see these tables there are two steps that you can do in order to fix it first one is you need to have your server running if it is not running then please start your interbase server through your interbase manager okay and then the second step is again you can right click on this employee and click on modify and here you are going to change your server to the text that I'm going to put here on the screen so it is localhost slash GDs underscore DB okay and click OK and then it should work and you should be able to see the tables of your database so now that we have specified all the data necessary for our connection so we have said that we want to connect to a database that is local so it is on our computer it is called jimdb and now what I want to do is I want to use this connection for the applications we are currently building and that is very easy to do so in order to use this connection with our c plus application that we are currently building just drag and drop it to this form here okay and then one more thing that you need to do is inside this object inspector you need to say that connected is true okay because by default it is not connected that is all now how can we show the data from these tables that we created again it's extremely easy just drag and drop the table that you want okay and here again you need to set the connected or active active property to True okay and in order to show the data in order to see the data you will need to have some sort of grid where the data from that table is going to be shown so I'm going to find a grid inside this palette so I will call it E string grid okay that is the name of the control that we need okay and what I want to do is I want to say that this grid will show the data from this table here how do you do that just right click on the table and click on bind visually okay and here you have your gym users table and you have your string grid and to connect them just do this and as you can see here we have all the data from our table shown inside this grid and again if you don't see the data please make sure that your active state of your gym user stable is set on true because if it is false you will not be able to see the data let's just make this a little bit bigger so that we can see all the data on the screen okay and I will do the same for membership types table so just drag and drop table on your form and I will add a new D string Grid in order to be able to show the data from my table inside this grid and I want to connect these two so here is my membership table and here is my string grid and I will just connect them like this okay and the reason why we are not seeing the data here is because our membership type stable is not connected so you need to set its active state to true and you will be able to see the data from your table now this that I have just demonstrated is a very cool feature that c plus Builder has and it is called live binding and it enables us to see this data from the database while we are working and developing our app so if I run this program let's see what we will get we should have an application that shows gym users and membership types and I'm running it for the first time so it's going to take a little bit longer okay so here is our gym users and here is our memberships table now what I would like to do is I would like to be able to add new records add new gym users and maybe edit existing ones delete and so on so now I'm going to show you how you can do that close this application and there is a control called Navigator you can find it inside this palette so I'll find Navigator so T bind Navigator and I will put it here we will use it for this gym users table and in order to connect these two you just do again this okay so now if I run this application let's see what we can do with this Navigator we can use it in order to add new users delete existing users or update them navigate through pages if we have a lot of users and so on so let's try that out let's add a new user I will give him id5 and let's say that he has membership type two and his first name is Mark Zuckerberg Mark Zuck okay and I will just click on this check mark in order to confirm my transaction and with that we have successfully added new user now if I close this application and open it again you should see that now we have Mark Zuckerberg as the fifth user so that data has been stored to our database and it doesn't matter if you close your application or you turn off your PC you will have that data permanently stored in your database until you delete it from the database which you can do and you can do that by selecting the record that you want to delete and then clicking on this minus sign okay and it says delete record I say okay and the record has been deleted okay and what else you can do you can also edit existing data so let's say Elon Ilona musk okay and I'm going to confirm that and that should be also stored in my database now let's also create this navigator for our membership types because I want to show you something else which is very important so I'm going to close the application I will add another Navigator okay I will put it here okay and I will just connect my membership types table with this Navigator and if I run this application now we should be able to use that second Navigator in order to add new records to our membership types delete existing or update existing records inside this table so what is going to happen if I try to delete this yearly membership so I'm going to select yearly membership and then click on this minus and if I try to delete record we are going to get an error now the reason why we are getting this error it says violation of foreign key constraint on table gym users this error here means that you are trying to delete a record from this membership type stable that is used as a foreign key inside another table and that is gym user stable so let's see what I'm talking about so we try to delete this record three so yearly membership type but we cannot do that as long as we have users inside this gym users table which are using that membership so here I have saldina and Jeff and Ilona using yearly membership type so we cannot delete that membership type because that would cause a problem inside this gym users table so in order to be able to delete this record you will first need to delete all the users that are using that membership type and then you will be able to delete that membership so I am going to do that now I will delete Selena then Jeff okay and Ilona I'm deleting Ilona mask okay and now if I try to delete this yearly membership as you can see it has been removed without any problems and if I close this application and open it again and as you can see our database is almost empty we have only one gem user and only two memberships which means that I will have to readd those users that we just deleted so I'm going to show you how you can add one user and one membership type and then you can use the same logic in order to add as many records as you want and I'll also pause the video and add a couple of records off camera so let's return membership type yearly membership type that we've just deleted so I will say plus and here I will say that membership ID is going to be three please make sure that you are using a unique ID that does not exist already okay and here membership name is going to be yearly okay and I will just confirm that transaction okay and now I want to add a user for that membership type let's say to add gym user with id1 he is going to use membership type 3 and his name or her name is going to be seldina last name is going to be murak and I'm going to confirm that transaction and now I'm going to add a couple of more users and then I will be back so I have added a couple of Records here and I have also moved these tables around a little bit so that I have enough space to show you something else that we are going to do with this app but basically so far we have built an entire crowd application meaning create read update and delete those are all things that we can now perform with this application and we have done that in just a couple of minutes thanks to the C plus Builder right studio and that is the reason why I like it so much because it is extremely easy to build fully functional applications in just a couple of minutes that can be used immediately basically so again links all the links for the tools that I'm using in this video will be linked in the description so let's see what else we can do with this application let's see for example that we are the owner of this gym so what I want to do as an owner I want to be able to for example click on a specific membership type and I want to be able to see all the users that are subscribed to that membership type so let's see how we are going to implement that so in order to do that we will need to write a query that is going to select all of gym users who have membership type which we have clicked on so let's add a query I'm going to search inside this palette for FD query okay and I am going to put it here and here we need to write a query so I'm going to double click here and I will write a query inside this console so here is the query that I want to paste inside this SQL command window okay now if I try to execute this query we are not going to get anything and the reason for that is because here we are seeing the following please select everything from gym users table where membership ID of that user is equal to this input parameter this cosine and then the name means hey I'm going to pass you this as an input parameter and that input parameter is going to be passed by clicking on our memberships as I explained but in this situation we don't have anything to pass so in order to test this query I'm going to manually hard code membership ID let's say three and if I execute it now you can see that we have all of the users with membership ID3 if I change this to 2 and I execute it again again we have users with membership ID too different users but those are users with membership ID too so that is hard coding membership ID but what I want to do is I want for that membership ID to be passed dynamically when we click on the membership that we desire so in order to say that again you put common sign and then membership ID and again if I execute this we are not going to get anything any records because we need to pass this as a parameter so now let's see how we are going to do that click ok to save this query and now let's see how we can pass a parameter to this query so for this we need a control called data source and you can find it inside this palette so data source t data source and I will drag and drop it here okay and to this data source I will tell that this data source that it is going to draw data from this table memberships table so you set its data set property to membership types table okay and now what you are going to do is you are going to tell your FD query hey you will use this data source one this data set so here you need to find a property called Master Source okay and you will set its Master source to data source one which is the one that we've just added and then here for master Fields what you need to do is you need to say let's just return this back okay so here you need to say that you want to include this membership ID field okay so you need to move it to this included fields and what this will do is that every time that you click on a specific membership type it is going to trigger the execute solution of this query and pass that selected membership type as a input parameter and then we are going to get all of the users that use that membership type okay now one last step in order to be able to see those users that we get as a result of the execution of this query we need to have some sort of grid to show those users so again I'm going to use tstring grid okay and I will drag and drop it here make it a little bit bigger okay and I want to connect this T string grid with this query so here is my FD query one and here is my D string grid so I'll just connect those two like this okay and one more thing in order to be able to see the data here what you need to do is the same that you did with tables you need to set the state of the query connection to active so select your FD query and tell it that it is now active Okay and now you will be able to see your data so now let's test our application I'm going to run this application and let's see if we have built everything correctly okay we have one error and that error is that the program is still running so I'm going to close it from the previous time that we have started it so let's run it again okay and now as you can see if I select weekly membership we have only one user Satoshi Nakamoto okay and then if I select two we have multiple users and then for a yearly membership again we have four users so this is a fully functional application that we have built in however long this video is I'm going to see that after edit and let's see if it has bugs let's delete for example Bill Gates his membership type is two so if I delete bill okay let's now select membership id2 to see if we are going to see Bill no Bill Bill left the chat Bill left the gym actually so while we have this application I'm going to show you one more thing and that is how you can style it a little bit I'm going to show you a couple of things and then I will leave the rest to you because it would probably take an entire video to teach you everything about styling and if you want me to make that video let me know in the comment section and now I'm going to show you two different ways that you can style this application this form so let's close the app and here in this object inspector you can do uh styling of some properties so for example if I select this first grid that we added and I navigate to text settings there is property called text settings here you can change the font you can change uh its color alignment and so on so let's change the color for example to be um let's see let's say brown okay and then for font I am going to set this bolded font semibolded font okay and as you can see that has changed so here in this object inspector you can find many different properties that you can play with in order to change the style of your controls and then another way to do the styling is go to this unit1.cpp and there you can write C plus plus code in order to change the style of your controls so one thing that I want to change are the names of the headers of these controls so gym user membership type first name last name and so on so in order to do that I will need to access this grid so I will have to check what is the name of this grid because that is the property that we use in order to access every single control from C plus code we use its name so I will have to access it through this form and then this grid and then I can change its style so the name of the form that property is here inside object is packed inspector so name is form one and then the name of this grid is string grid1 you can change that name let's change it to be called gym users grid like this okay and I'm going to copy that name because we will need it okay so now if I navigate to unit one.cbp that is where we write our C plus plus code here I'm going to say form one and then I use this symbol because we are working with pointers in the situation and I will say that I want to access my gym users grid and I want to access its columns so I will say column and I want to access the first one that is going to be the one with the index 0 and what I want to do is I want to text I want to set its header so I will say header is equal to and here I will specify the text for the header and if you remember the First Column is this one it is gym user ID so I will change that to say only ID like this okay and we have an error here so the name of the property is not column it's columns like this okay so with this we have changed the header of the First Column we have three more columns I'm going to type that code very quickly and I will be back okay so with this we have changed the headers of every column inside our grid so if I run my application let's see what we are going to get and as you can see here it says ID membership T membership type first name last name so this bothers me so what I want to do is I want to make this column a little bit bigger this one a little bit smaller this one also smaller and then this one is also going to be smaller so that it fits the text that is inside it so I will copy this part here paste it and instead of setting the header what I want to set is width and let's say that width of the First Column is going to be equal to 20 that should be enough for ID and then let's also copy this three more times for the remaining three columns so column one is going to be let's say 120 and then column 2 which is first name let's say 80 and then column three last name that should be 80 as well so if I run the program let's see what we have okay and as you can see here we have these columns with the changed width and one more thing that I want to do is I want to change the width of the entire grid so let's do that as well let's say form One Gym user's grid and its width is going to be some of these four and that is 300 I believe okay so if I run the app again we should see that change applied okay and as you can see here are changed sizes of all of these columns okay so now I will do the rest of the styling for this form and then I will be back to show you the final result uh and also all the codes from the studio is going to be pinned in the comment that is because many people don't know how to use git and if you want me to film a video about GitHub and teach you everything that you need to know in order to use GitHub and work with it let me know in the comment section so here is the final result you can see the code that I have changed here and I have also added a couple of labels to make it more understandable to the user and changed a few colors and fonts through object inspector and it works as it should okay so I hope that you enjoyed this video if you did please give it a big thumbs up because that way you tell to the YouTube algorithm to recommend this video to other people who are also learning programming and by sharing knowledge you are helping other people so that in the future when you don't understand something and you need help other people are encouraged to share their knowledge with you so that way we can all learn from each other and grow together so thank you very much for watching and I am going to see you in some other video bye foreign