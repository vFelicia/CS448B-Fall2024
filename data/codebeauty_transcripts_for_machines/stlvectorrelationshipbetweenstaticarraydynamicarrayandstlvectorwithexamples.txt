hi guys and welcome back to my channel in this video i'm going to teach you everything about stl vector we are going to talk about arrays dynamic arrays and vectors and i'm going to explain the differences advantages and disadvantages as well as examples of when to use each one so if you came here to learn exclusively about how to use stl vector then you can navigate directly to that part there is contents in the description but i advise you to watch the entire video because you are going to learn about differences between arrays dynamic arrays and vectors and i'm also going to show you understandable examples of when to use each one and before i start with this topic i want to say that today's video is made available freely for you to watch by visual assist which i have been using for a long time because it helps me to write cleaner code faster some of my favorite features are refactoring which means that it reduces the complexity of your code it makes it more understandable and readable so you can refactor some old legacy code or the first version of your own code and make it cleaner and then it also provides code inspection and correction so it analyzes your code as you write it and it fixes common bugs and errors so when i use visual assist i feel like i'm not coding alone and like i have an additional pair of eyes that checks my code and then i also love fast navigation because if you ever worked on large projects you know that this is very common problem so visual assist helps you to navigate to any part of the code that you want very fast and if you want to learn about all the cool features that even beginners can use as well as how to install it download it and use it you can watch the video that will be linked here and also in the description so how can you get it well as a code beauty viewer you can use the link in the description right now to get one month free trial of visual assist so definitely check it out and reduce the stress of learning programming and get yourself assistance so to return to the topic of this video i first want to share some very important information about arrays and dynamic arrays and after understanding those two it will be very easy for you to know and understand how and when to use vectors so when i talked about arrays in this video i said that arrays are a type of collection that stores elements in a continuous memory which means one element after the other i also said that arrays have fixed size which means that if you declare an array of 10 elements you can store only 10 elements or less into that array but not a single element more so now i'm going to give you an example of when using arrays would be good idea and then i'm also going to give you an example of when using arrays would be a potential problem as well as how to solve that situation so imagine the following situation you are building an application that shows top 100 best cryptocurrencies to invest in together with their prices now these things change very quickly due to the market activity so you want to keep your users updated you want to update the prices sometimes you even want to remove one cryptocurrency and add another cryptocurrency into top 100 so in this situation using arrays would be ideal solution why well because you would be able to make those updates and those changes very quickly because you would be able to access every single element of that array directly how come well because you can access elements of arrays directly by using the name of the array and the index or the position of that element and also because you always want to display and show top 100 cryptocurrencies so not 101 or 99 but always 100 then in that situation using arrays would be ideal solution but let's imagine a different problem let's say that you have built your own programming course and you want people to enroll into that course so you decide okay i am not really popular not many people know about me so i expect 100 people to enroll into that course not more not less so with that in mind you decide that you are going to create an array of 100 students in your application and that is where you are going to store your students but what happens down the line is that people realize that your course is very good so they start sharing it with their friends and soon before you realize it 1000 people want to enroll in your course but that is just not possible because you hard coded the array to 100 students so you cannot store any more students so that is one potential problem that can happen and another potential problem that can happen is that let's say someone else creates even better course than you so only 10 people decide to enroll in your course so what happens in this situation is that 90 of the space that you created for that array is going to be empty but it will still hold that memory so that other applications cannot use it so you have the array for 100 students but you have only 10 students inside that array but again it is taking that memory and other applications cannot use it so this means that for this specific situation using arrays is not a good solution and it is not good because of two reasons first reason is if you want to fix this problem if 1000 people want to all of a sudden enroll in your course in order to fix this problem you need to rewrite your code and you need to fix that bug in your code which later requires you to rebuild your application and redeploy it and that takes time and the second reason is that during that time other students will not be able to enroll into your course so that means that you are effectively losing money while your application is unavailable for more students so with this in mind we can conclude that using arrays for solving this type of problem is not an ideal solution it's actually terrible solution so now i'm going to explain how you can approach this problem and solve it in a better way a better solution for this problem would be using dynamic arrays and this is because dynamic arrays have the ability to resize themselves when something happens and that something is usually adding new elements or removing existing elements so let's say that you have a dynamic array that has 100 elements so it can store 100 elements so currently you have 99 students and at the moment that you are adding 100 student your dynamic array says hey i see that this array has the potential to grow even more so what i'm going to do now is i am going to resize myself so how does it do that well it allocates space for bigger array that can store for example 105 elements or 110 elements and then it copies the old smaller array into that bigger array that it has allocated and then it deletes the allocates that old array so now you have a bigger array you have all of your elements and you have some additional space to add more elements so that is how dynamic arrays work and then also if you have let's say only 10 elements inside your dynamic array there is no need to have an array of 100 elements you can have a dynamic array of 15 elements for example so that you don't waste all of that memory that you are not currently using so that is how dynamic arrays work and if you want to learn more about dynamic arrays as well as how to implement them and understand them in more detail you can watch the video that will be linked here and i will also link it in the description and now i'm going to talk about an even better solution which is stl vector so stl vector is something that has all the benefits of dynamic arrays but with much less work so now i'm going to explain what is stl vector and i will show you the examples of how to use stlvector and then after you see those examples at the end of this video i will come back to this topic once more and explain the difference between vector and dynamic array so that you can know when to use each one and what are advantages and disadvantages of both okay so a vector is a type of collection that behaves like a dynamic array it is an array because it stores elements in a continuous memory which means one after the other like an array does rather than randomly in your memory like some other collections do for example a linked list and then it is also dynamic because it has the ability to resize itself when you are adding new elements or removing existing elements so when you add new elements into your vector it is going to increase in size and then when you remove existing elements it will decrease in size so that it doesn't take unnecessary space in memory so how do you create a vector well it's very easy you need two things first you need to include vector here so include vector like this and then second thing is you just create a vector so you say please create a vector of in this situation vector of integers and then you give it a name so let's say numbers okay so with this i have created a vector of integers that is called numbers one important thing that you can notice here is that you don't specify the size for your vector like you would specify the size for an array and this is because vector resizes itself automatically okay so in this video i'm going to show you all the important functionalities that you need to know about and understand how to use that are related to vector collection so the first thing that you need to know is how to insert elements into this vector so in order to do that you would say numbers dot push back and then here you put the element that you want to insert into your vector so this is how you insert elements into vector and then let's add a couple of more let's say 4 inch i is equal to 1 i is less than or equal to 10 and then i plus plus okay and then here i'm going to say numbers push back i like this so with this for loop i have added 10 elements into this vector here so now the question is how can we access and print these elements well i'm going to show you two ways to do this the first one is going to be a quick and easy way and then the second one will be using iterators which is an important topic related to vectors which i'm going to explain later so let's see the quick way first so you say 4 and number of numbers vector and then here c out number and then let's put an end line okay so this here is a quick and easy way to print the elements of a vector so you use for each loop and you iterate through your numbers vector that numbers vector contains integers and you give the name to every single element of that vector and then here i am just printing that element in the current iteration so if i run this program let's see what we will get and we get the first element that we added here and then we also get the remaining 10 elements that we added using our for loop another way to do this thing here is with the help of iterators and iterators are important topic related to vectors so what are iterators iterators are like special functions that point to some important locations in your vector two most important locations in your vector are its beginning and end so we have two iterators called begin and end so let's see how we can do this thing here with the help of iterators so i'm going to say for auto i t so iterator is equal to numbers begin okay this has been automatically generated for me so please start at numbers begin iterator and then go until numbers end iterator and then please increment the iterator in each iteration by one like this okay and what i want to do inside here is i want to say see out iterator and then let's also add end line okay let's make a quick pause here so that i can explain a couple of things first thing is this auto part here what does this mean well it means the following please check which type this part here will return and then automatically assign that type to this it iterator so that is all that it means please do that automatically so that i as a programmer developer don't have to do that myself okay and then second thing that i want to explain is this error here in c plus plus in programming you cannot actually print the iterator itself so this part here is not allowed but you can do one of following options so what you can do is you can print the value of the element of that iterator like this and then another thing that you can do is you can print the address of the iterator like this and then the third option that you have is you can print the address of the element like this okay so those are three options the value of the element the address of the iterator and then the address of the element so if i run the program let's see what we will get okay so we get this for all the elements inside our numbers vector so here is the value of the first element and then the address of the iterator and then the address of the first element itself and then the value for the second element the address of its iterator and then the address of the second element and so on and so on for every single element inside our numbers vector so one more time these are four options you cannot do this so you cannot print the iterator itself what you can do are these three options so you can print the value of the element you can print the address of the iterator and you can print the address of the element itself now let's delete this part here because i want to show you some more interesting things that you can do with vectors so what you can do is you can perform arithmetic operations on vectors so how would you do that so again let's say auto i t so auto iterator will be equal to numbers begin so please assign it to the beginning of my vector and then what i want to do is i want to say c out please print the value that is stored on this i t plus five so this is perfectly valid and you can do this so if i run this program what do you expect to get can someone please explain this in the comments okay so let's run the program and we get the value of 5 and the reason is we have 11 elements inside our vector so we start at zero and then we add five more elements to that so we get the value of five but if i removed this part here i'm just going to comment it and if i run the program again now we are going to get the value of 6 because we start at the iterator position 1 and then we add 5 more elements as we have specified here so that means that we are going to move five more spaces which furthermore means that we have moved to the element six now let's see a couple of more interesting things that we can do with iterators and vectors so let me return that for loop that we had before so here is our for loop and here are the iterators that return the beginning of the vector and end of the vector now an interesting thing is that there are two more iterators that are used very often in programming with vectors and those are c begin and c end so what is the difference between these two and the two that we had previously so the ones without c well let me show you that on an example what is going to happen if i say something like please dereference the value of this iterator and assign it the value of 20. so if i run the program every single element of this vector should have the value of 20. okay so that is what we have achieved by assigning the value of 20 to every single element inside this for loop but what is going to happen if i decide to use c begin and c and iterators well immediately we are going to get an error and that error says that expression must be a modifiable value that means that c begin and c and are constant iterators which means that if you declare an iterator as a constant so c begin and c and constant begin and constant n you will not be able to change its value and we can clearly see that part here so we are not able to do this anymore because our iterators are made constant so when would you use constant iterators you would use constant iterators when you create a functionality that only needs to for example print the data but not change it so chances are that you are going to work with other developers as well so if you don't want another developer to do something like this by accident in order to prevent him to do that and change the data again accidentally and cause a bug in that way you can prevent him by using constant iterators like i did here so let's see what are some other important functionalities of vector i'm going to put all of the functionalities that you should know about here on the screen and then i will be back to explain them so here are some interesting functionalities that you are going to see and use very often when you are working with vectors and here i also have the results for these functionalities so let's start with the first one okay so the first one is size and size tells you what is the current size of your vector and as you can see initially the size of your vector is 10 because at the beginning we have added 10 elements to our numbers vector okay and then the second functionality is max size max size tells you what is the maximum number of elements that you can add to your vector and that is this number here which i'm not even going to try to pronounce okay and then capacity this one is very interesting and capacity tells you how many elements you can add to your vector before resizing it so here it says that capacity is 13 and we already have 10 elements inside our vector which means that we can add three more elements before resizing this numbers vector so that is what capacity functionality tells you and then vector dot resize will resize your vector to the size that you specify here so here i have resized my numbers vector to the size of five so if i try to print the size of that vector after resizing it here you can see that the new size is 5. so now we have only five elements inside our numbers vector okay and then this part here will check if vector is empty or not so if this vector here is empty it will print that the vector is empty else it will print that vector is not empty so since we currently have five elements inside our vector that means that the vector is not empty which you can see here okay and then we have two ways to access elements of a vector directly besides the one that i have showed you with using arithmetic operations we have two more ways and that is with these squared brackets so you specify the name of your vector and then you specify the index or the position of the element that you want to access and here you can see that element at position zero is one that is the first way and then the second way is with this at functionality and it works absolutely the same so you say numbers dot at and then you specify the position and as you can see here the element at position 0 is 1 and that is because the indexing of vectors the same as arrays starts with zero and then another functionality is front and front will tell you which is the front element of your vector and in this situation the front or the first element is number one and then back will tell you what is the last element of your vector so that is element five as you can see here and then another thing that i want to show you is how you can clear your vector and that is with the help of functionality called clear it is going to delete all elements so if i try to check for the size of my vector after i have cleared it here you can see that the new size will be equal to zero okay so let's clear this code very quickly because i want to show you a couple of more interesting functionalities that you should know about so there are two more functionalities that are very important for you to know related to vectors and those are how you can insert an element at a specific position inside your vector and then how you can remove an element from a specific position inside your vector so for that you use functions called insert and erase so let's first see how this insert functionality works so here you specify the name of your vector and then you say insert and then here you will specify the position at which you want to insert this element here so number 88 and the position is beginning of the vector plus five so that means the element with index five so with this part here i'm going to print the elements of the vector so let's see what is going to be the result okay so as you can see the number 88 appears at the position five so again the indexation of vectors starts at zero the same as array so this is element zero element 1 2 3 4 and then element 5 which has this value that we have specified here and then if i want to remove an element from a specific position i would use function called erase and then specify the position that i want to remove the element from so when i uncomment this line here it will remove the element from position five so if i run the program again as you can see this 88 has disappeared because that was the element on position five and then another interesting functionality that you can do is you can also say numbers dot pop back and this functionality is going to remove an element from the back of your vector so if i start the program once more as you can see the last element which was number 10 now has been popped which means that it was removed so those were some functionalities that you should know about and i'm going to print all of this code in a comment so that you can use it and now we have come to the final question which is what is the difference between dynamic array and vector and which one you should use a vector is a class which means that it is like a container that completely hides memory management from the programmer and it also provides you with useful functionalities that are very easy to use as you could see already in the examples that i have shown a dynamic array on the other hand is like an oldfashioned way to do this same thing so in dynamic arrays every time that you want to either increase or decrease the size of your array you need to work with raw pointers and you need to use new and delete keywords in order to allocate and deallocate memory and if you want to learn how to do this you can watch the video that will be linked in the description so now the question is what is better vector or dynamic array and the answer is that vector will be better for 99 of situations why well because vector is standardized everyone knows how to use it and millions of developers have already used it and tested it so it is not errorprone it doesn't have errors on the other hand if you decide to manage memory on your own and use dynamic arrays you could get slightly better time or memory performance but you risk to make so many bucks at that process that it is probably not even worth it so my recommendation is to use vectors always and only if you have performance or memory issues with that approach only then you should consider to use dynamic arrays and handle the memory yourself and again this is because vector is very very thin wrapper around dynamic array that provides you with all the functionalities that i've shown you and many more those functionalities are already tested they don't have errors and in 99 of situations using vector is going to be the fastest the most understandable and the cleanest solution and very very rarely and under some very specific circumstances it can happen that switching to dynamic arrays can provide you with some performance benefits but even then you would have to test both solutions and perform multiple tests do a lot of analyzing and profiling just to see if you will even get that performance improvement by switching to dynamic arrays so again you should be aware that both exist you should know what is dynamic array and what is vector you should also know what are the differences and pros and cons but again my recommendation is to always use vector so that would be all for this video if you enjoyed it please give it a big thumbs up because that means a lot to the youtube algorithm and then also share this video with other people who are struggling with programming and who need to learn about this topic and if you have any questions make sure to put them in the comment section so that i can reply and so that other people who are wondering about the same things can read those answers so again thank you very much for watching and i'm going to see you in some other video bye