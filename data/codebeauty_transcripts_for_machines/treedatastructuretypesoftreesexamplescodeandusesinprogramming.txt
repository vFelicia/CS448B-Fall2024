hi guys and welcome to my channel in this video you will learn about tree data structure so you are probably using and seeing tree data structure every day without even recognizing it so in this video you will learn what it is when it is used in programming i will show you real life examples and purposes of true data structures in programming and teach you all the important concepts that is in the first part of the video and then in the second part of the video i will show you the code so let's return to tree data structures and as you already know all programming concepts were drawn from real life so let me show you where tree data structure is used in real life so here i have a picture from children's book and it is a picture of family tree we have grandparents parents and then kids and when these kids grow up and get married and have their own kids this tree will grow even more so this is a perfect example of hierarchy of parentchild relationship and that is exactly what tree data structure is used for it is used to represent that hierarchy so what is an example of this in programming well a perfect example is the way that you structure and organize folders in your computer so for example here i have a folder called menu that is root folder and then inside it i have drinks and food so if i open this food folder we get more subfolders which are children of food folder so desserts pasta pizza snacks and then let's open desserts for example and as you can see we get more folders cheesecake chocolate cake fruit cake and so on so why are we doing this well there are multiple reasons but the main one is that you can organize your data better this way and it is easier to search later so it is easier to find a specific recipe or a picture of a food or whatever you want to store inside these folders so this is very common use of trees in programming and in computers so your operating system uses tree data structure in order to organize files and folders in your file system in your computer um and that they are also used in databases and the most common use that i have seen of tree data structure in programming is for different searching and sorting algorithms and we will learn about these later after you learn all of the basics so let's see what are some other basic things that you should know about trees so a singular entity of a tree is called node it is basically a building block of a tree so let's say that this is a node and then multiple nodes build a tree data structure so if i do this this here becomes a tree data structure so this is parent node these are child nodes and then these lines that connect the parent with the child are called edges and this here is a tree data structure now something that is not allowed in tree data structure is for the children to be interconnected like this so this is not allowed because this would be incest actually that is not the reason the reason is that this here is not tree data structure anymore this is something else completely and if you know how this structure is called let me know in the comments and then if you don't know how this structure is called check the comments and um i might answer to your comment if you ask me and if you really cannot find the information on the internet so again this here is not allowed for three data structures the children cannot be interconnected and then these children can have their own children so what you can do is you can add a note here and then let's say two child nodes here like this and again this is tree data structure and inside these nodes you can store any data that you need you can store numbers or strings or books food recipes anything that you want so what are some other concepts that you should be familiar with well this here this first node is called root node so a root node is a node that does not have a parent and it is this node here and then another concept that you should be familiar with is a leaf node so can you guess what is a leaf node so this is a leaf node and then this is a leaf node and this is a leaf node as well so a leaf node is a node that does not have any children and in any tree data structure you can have multiple leaf nodes but only one root node so now that you understand the basic terminology let's talk about different types of trees so the first one is a regular tree and it can look like this for example so it has a parentchild relationship and it has a fluctuating amount of children in this situation it has three but it can have more or less than that so this is a regular tree another type of tree is binary tree and here is an example of binary tree so what does that mean well like a regular tree it also defines a parentchild relationship but there is one more rule and that is that each parent cannot have more than two child nodes so it can have zero or one or two child nodes and not more than that so here we have a root node it has two child nodes and then this left child node has one child node and the right node has two child nodes and then these are leaf nodes and they don't have any child nodes so now that you know what a binary tree is let's explain what is a binary search tree also known as bst and because i'm very lazy person i'll just call it best okay so a bust is exactly the same as binary tree except that its data is organized in a very specific way so the values of nodes are organized in a specific way so here is an example of a best please don't call it best why am i doing this to myself so let's say that the root note has the value of 30. so the rule is that its left child should have the value that is lower than that and then its right child should have the value that is higher than that and then the same rule applies here so the left child should have a lower value than its parent and then the right child should have the value that is higher than its parent and then here again but since we have only the left child that left child should have the value that is lower than its parent okay so this is an example of binary search tree and an important thing that i want to mention is that these boosts are used to facilitate the search of elements as the name itself implies so binary search tree so now that you understand all of this let's jump to coding part and the first thing that i want to do is i want to represent a single node in code so i want to represent a building block of tree data structure and as you could already see each node consists of three parts so each node has data that is number one and then number two is left child pointer and then third part is right child pointer so how can we represent this node in code well it's actually pretty easy so i will say struct node like this and i will create these three parts of each node so i will say int data like this so we are creating a binary tree whose nodes are storing integer data type okay and then the second part is node pointer called left this is left child and then node pointer called right and this is right child now let's see how we can create a new node so i will add a function here that returns a node pointer i will call it create node like this and this function will receive an integer parameter called data like this so the job of this function will be to create a new node and to return the reference to that node so that if we want to add left or right child to that node we have that reference so there will be four steps inside this function step number one will be to create a new node step number two is to set the data for that node and then step number three is to take care of left and right child nodes which will initially be null because we don't have child nodes when we create the parent node and then step number four and i cannot draw it but please keep in mind that from this function here we need to return a reference to the node that we added in case that we want to add its children later we need to have a reference to that node so let's now translate this in code so step number one we create a new node like this and then we set the value for that node like this and then we say new node its left child will be equal to new node right child and that will be equal to now ptr because because initially when we create a new node it doesn't have left or right child and then fourth and final step is to say return new node so that we have a reference to the node that we just added outside of this function so whoever invokes this function will receive a reference to newly added node so now that you know how a node looks like in c plus code and also how you can create a new node let's see how we can represent a tree data structure in c plus code so let's represent a tree that looks like this so the first thing that i will do in order to represent this tree in c plus code is i will create a root node so i will say node pointer called root and i will invoke this function here that we just created so i will say create node and here i will pass the value of the root node and this picture here says that it is the value of one so with this we created a root node now the question is how can we add left and right child to this root node let me know in the comments if you have any idea before i answer this question okay so in order to add this left child number two we need to say root left and then again we invoke this same function called create node but this time we will pass the value of two okay it's pretty easy and then in order to add this right child we say root right and then create node and we pass the value for that node and then in order to add this node here we need to say root left left okay so i will say root left and then left again will be equal to create node and then the value for that node and with this code we have represented this tree data structure and let's do another tree but this time a bigger one so let me paint it and i will put it on the screen together with the code so here is the tree it has nine elements and i divided it in four levels so that you can understand better and then here is the code for that tree so for example if you want to add this element here you would go root left right left and there is number nine so let's check root left right left and then number nine okay and then if you want for example to add this element here you would go root right right left and there is 15. so root right right left and there is node 15. and now you can pause the video and analyze this tree and compare it with the code so that you can get a better understanding so that would be all for this video it is already becoming too long and i know that it is hard for you to focus for a long period of time the same way that it is harder for me to film a very long video in one sitting so we will continue in the next video and talk about um different algorithms traversing the tree and searching the tree so make sure to watch that video it will be linked on the screen and if you want homework and to practice after this video the best would be for you to find a study partner so you would draw a tree for him or her and vice versa and then both of you would translate that tree into c plus code so share this video with someone who needs to learn about data structures and with someone who can benefit from it so thank you very much for watching and i will see you in the next video and um by the way i will pin the code from this video in the comments in case that you need to use it bye