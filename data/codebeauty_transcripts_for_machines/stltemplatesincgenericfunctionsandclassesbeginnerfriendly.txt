hi guys and welcome back to my series about C++ standard template library in this video you are going to learn about the most important Concept in STL which is templates so you are going to learn what are templates I will teach you about template functions and template classes what are they what is their purpose and how to work with them and we are also going to write some code in order to practice working with STL templates and before we start there is something very important that I want to tell you so if you're watching a lot of tutorials about programming a lot of lessons and you understand programming a little bit here and there but you struggle to apply that knowledge in practice and you don't know how to build real applications that can be used in everyday life for example maybe you are going to the gym and you like working out and you would want to create an application that will help you to track your progress to track your workouts your calories and so on or maybe you like Gam games or fashion or Sports and you want to create applications about that well in that case I have a perfect practical programming course where I'm going to teach you how to create those real world applications and most importantly this course is going to teach you transferable skills that you can apply to any programming language so you will get the experience of working on a real project so implementing real functionalities fixing bugs optimizing your code a lot of tasks for you to practice and also it will be fun I will be your Mentor through the entire course and I'm a fun person so you will not want to sleep during my classes we have a great Discord Community where we all hang out and it is very supportive so you will not feel alone lost or confused when you are learning programming because you can always ask a question and someone will jump in and help you very fast so if you want to learn practical programming and get career ready skills then this is is the only course that you will ever need because everything is on one place beginner to expert and currently there is even a special discount that you can use in order to save some cash so click the link in the description and I will see you in a minute so with that being said let's continue with the topic of today's video so what are templates let me give you a real world example let's say that you are making cookies and you want to make cookies in different shapes you want cookies in a shape of heart Star Circle Square and so on so for that you would need to have many different cookie cutters so all of those shapes of cookie cutters now that is not really optimal what would be so much better is if you could have one magical cookie cutter so you say for example oh magical cookie cutter cut me a cookie in a shape of heart and it does that or you say cut me a cookie in a shape of circle and it does that also and so on now this is not a cooking class and as far as I know in cooking that is not possible but in programming it is possible and this magical cookie cutter is exactly what templates are so with templates you write the code once and then that code is able to work with different data types so now I'm going to show you on practical example what this means and first I'm going to show you the problem first I'm to show you how you can do it in a wrong way and then I will teach you how you can solve that problem and do it right with the help of templates now let's create a simple function whose job is going to be to add two integer numbers so here I will say that return type of the function will be int and I will call it add int and it will receive two parameters of type int so int a and int B like this and as I said it will simply return a + b okay so nothing new here now if you want to invoke this function you simply say see out add in and here you pass two integers let's say for example five and seven and let's put an end line like this so if I run this code we will get 12 because that is what 5 + 7 results in okay now if I want to pass floating Point number numbers here for example 5.3 and let's say 7.7 what do you expect to get if I run this program let's see okay we get 12 again but this here actually should be 13 so why are we getting the result of 12 well the answer is very simple because here we are receiving integers so this part behind the decimal point doesn't really matter this function here will still take only this integer part of the number so if you want to work with decimal numbers you need to create another function so let's do that I am simply going to copy this function here and I will change this to be float and then here as well and here as well and then the name will be add float like this so now if I want to invoke my my function I will say add float and here I can pass floating Point numbers and then when I'm invoking add int I should pass only integer numbers like this so now if I run my program as you can see we get 12 for this function here and then for add float we get 13 which is the correct result so as you could see this code works but this code is not really optimal because for each new type we need to add a new function and that is not optimal wouldn't it be much better if we could write just one function and then use that function for every data type that we want to add so with templates that is possible what we can do is we can write one template function that is going to work with any data type that you want so how do you do that so let's copy this function and what I would like to do is the following instead of having float hardcoded like we have it here I would like to have a generic data type let's call it t Okay so I would like to have type T and the name of this function I will also change it it will be called add so the goal of this function will be to add any two numbers of any type and then also the return type of the function will be of that same type which these two numbers have so this makes sense but it is not clear for your compiler what this t means so now what you need to do is you need to tell to your compiler that here you are declaring something called template and this template will have a new type name like this and that type name will be called T so now all of a sudden then this T becomes a generic type which means that when you run your program and you pass parameters to this function it will be determined which type these parameters are they can be float or int or double or short and so on so any type that you pass here this T becomes that type so let's test this let's invoke this function I will say C out add and here I can pass any two types that I want let's say for example five and seven and here I will put end line okay and then let's also invoke it for floating Point numbers so 5.4 and then 7.6 okay so now if I run this program okay this here is the result of these two functions and then this here is the result of our template function function and this template function which is just one function is now working with two different data types so now we have replaced these two functions with just one function so now what I can do is I can completely delete these two and I will not be able to invoke them anymore because now we have the option to add any two numbers with the help of just one template function and then that is the power of templates so once more this here is called template function and this T is a type that we have declared and this T is just like a placeholder and it can be substituted with any data type it can be substituted with int with float with double with short integer unsigned integer and so on and you can use this same function to work with all of those types now let's practice template functions some more and let's write another function that will subtract two numbers so I will copy all of this code paste it here so again we are declaring template function it will have new type called T so here the return type will be T I will call the function subtract okay it will also receive two parameters of type T and it will return a minus B like this okay so now let's test this function let's say C out and I will invoke subtract so let let's pass for example five and seven again and let's add end line okay and then let's also invoke it for float numbers so let's say subtract and then here I will say 6.6 and then let's say for example 3.4 and I will add end line okay so now if I run this program as you can see our subtract template function works with both integer and floating Point number or decimal point number okay now let's talk about another important concept what are template classes a template class is a generic class that can hold any data type now what is the benefit of this well the real benefit benefit and the real power of template classes you are going to learn later in this course when we learn more about STL containers and different algorithms but what you can do with template classes is you can have a template class that holds any data type that you want and then you can write an algorithm that works with that class so instead of writing an algorithm for each specific data type that you want to work with what you can do is you can write just one algorithm that works with the generic class and that generic class holds any type that you want and as I said we are going to learn how to do this and we are going to learn how to use the full power of template classes later in this course in the upcoming videos but for now I'm going to show you a simple example because we are just at the beginning so let's see a simple example of template class so how do you create a template class it's actually very similar to template function so I will copy this part here because again we need to say that we are creating a template and we need to specify the name of the generic type that we want to use okay and then after this instead of creating a function what we want to create is we want to create a class and here I will give the name to my class so let's call it box like this and inside this box we can put any data type that we want so now your question might be okay Selina I understand that this here is a template class and it can hold any data type but how do I apply this in practice because this box is very abstract for me so can you give me a practical example yes so how about changing the name of this class so instead of calling it box let's call it calculator okay okay so what will be the job of a calculator class it will be to perform different calculations adding subtracting multiplying dividing and so on so now what I can do is I can move all of these generic functions inside this class okay and then subtract as well and paste it here and I will remove these okay and now we have a generic class called calculator which can perform all of the calculator operations on any data type that you want actually currently it can perform only two adding and subtracting but you can write more functions in order to be able to perform all of the calculator operations and one very important thing here is all of the members of a class are private by default and if you want to be able to access them publicly you need to make them public like this okay so now we will be able to use these calculator methods outside of the class and we will be able to invoke them inside our main function so now let's test this so let's delete this code here and now as I said a template class can hold any data type that you want so for example if you want to create a calculator that will work with inte you do it like this you say calculator and then inside these angled brackets you put the type so it will be calculator of int and I will call it int calculator like this so now I can simply invoke all of these methods and pass them integers and they will work so I can say see out int calculator. add and let's pass two integer numbers let's say five and eight okay and let's also invoke subtract so int calculator do subtract and let's also pass five and eight and add an end line okay so this here is going to work with integers and now if you want to work for example with floats you can create a calculator that will work with float type so you simply say calculator again you put the type like this and let's call it float calculator like this okay and then see out so float calculator do add and here I'm passing decimal numbers so 5.2 and then 7.84 okay end line and then let's also test subtract functionality like this so now if I run this code as you can see we are able to work with different data types with the help of just one template function and we are able to create calculators that will work with different data types so let's practice some more writing generic code and let's add multiply and divide functionalities to our calculator as well so I will copy this function paste it here I will change its name to be multiply okay it will receive two parameters of type T and it will simply multiply them and return that result okay and then if I want to create divide function let's say divide and again we we have two parameters and we simply divide A and B now one very important lesson from mathematics is that it is forbidden to divide by zero so here if B is zero then we will get an error so in order to prevent it we are going to check if B is equal to zero and if it is I will print error message so I will say error division by zero and let's see simply return zero like this so we will not even try to divide by zero okay so now let's test these two newly added functionalities so here I will say float calculator. multiply okay and then float calculator dot divide so if I start my application as you can see here is the result of multiplication and here is the result of division okay so I believe that is going to be enough for this video and to make a short summary in this video you learned what are STL templates and how to work with template functions and template classes which are a way for us to write generic code that can work with any data type and in my upcoming videos we are going to learn a lot more about STL so stay tuned and if you would like to learn practical programming get career ready skills and learn how to build real world applications and also if you enjoy my teaching style and would like me to be your Mentor from beginning to experience developer level then definitely check out my practical programming course the link is in the description and currently there is even a special discount that you can use in order to save some cash so I would love to see you join my practical programming course and if you decide to join uh just click the link in the description and you will see me in a minute so thank you very much for watching and I'll see you in another video bye