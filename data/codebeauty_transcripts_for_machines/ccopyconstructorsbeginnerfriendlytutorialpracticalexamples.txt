hi guys and welcome to my channel in this video I want to teach you about copy Constructors which is very important but very confusing topic for most beginners so before watching this video please make sure to watch my video about different types of Constructors where we talked about default and parametrized Constructors I will link that video in the description and also make sure to watch my video about these structures it will also be linked in the description and I will put it here you need to understand those two topics before you are able to understand this video so as I said in this video I will teach you everything that you need to know about copy Constructors which is very confusing for beginners from my experience beginners don't have the problem with understanding the idea behind copy Constructors but they do have the problem to understand when copy Constructors are used all of the situations and also different types of bugs and errors that you can get when you are using copy Constructor so all of that we are going to explain in this video step by step so here I have the code that I have written in my previous video so let's first explain this and then we will see how copy Constructor works with this example by the way I am going to pin this code in a comment so that you can copy paste it and code along with me okay so here I have created a class called book and it has these properties it has title author and then it has a pointer called rates and I intended for this to be dynamic array where users are going to put their ratings for this book and then here I have rates counter which is going to serve as the size for this Dynamic array if you're not familiar with the topic of pointers and dynamic arrays make sure to watch this video it will be also in the description so these are the properties and then here I have created parameterized Constructor for my book it is these two parameters it receives title and author and here I create that book based on these two parameters so I assign title and author and here I just hard coded two race for my book just so that we have some data to work with okay and then here we have a Destructor it is very important to create custom Destructor whenever you are working with pointers and whenever you allocate new memory in your Constructor then you should have a Destructor where you are going to deallocate or release that memory so that other applications can reuse it most beginners don't understand this and because of it they get different memory leaks and errors in their code and because of that it is very important to use a good code analyzer that is going to analyze your code and tell you if you have any hidden errors or weaknesses in your code I personally like to use PBS Studio because it is very smart to find errors in the code and it also suggests ways on how you can fix those errors as a student you can get it for free and I am going to leave a link in the description that you can use to download it it is very easy to integrate with Visual Studio you just go to their page and you download it you can use it for c plus c sharpsy and Java programming language so after you download and install it then you will come to your visual studio and click on extensions PBS studio and here you would click on options registration and you would put in license key that you received in your email and you are done with integration and now you can analyze your code for example let's comment this code in the destructor and let's run a check for this current file to see if we have any errors or weaknesses so here you have this previous Studio window and as you can see it says the raids pointer was not released in the destructor a memory leak is possible so just by running a simple analysis you can find errors in your code before you spend hours on actually debugging your code and finding them and especially it's important to catch those errors before they go into production and lose money for you or your company so let's minimize this and now I'm going to uncomment this code that previous Studio suggested and let's see what else we have in this application so here I have created two books millionaire fastly which is a great book for anyone who wants to start their own business I definitely recommend you to read this one and then C plus plus Lambda story which is a great book for people who want to learn C plus plus you can find this book on Amazon for 10 to 15 dollars but I have a link in the description that you can use to download it for free and learn C plus plus for free so um this is what we have done so far we have used this parametrized Constructor we have passed title and author in order to create these two books now what I would like to be able to do is something like this I would like to be able to say book and then book three and here instead of passing title and author I would like to be able to pass one of these two previously created books like this so that now I can create book tree based on this book one so I simply want to copy anything that is inside this book one and based on that I want to create a book three and this is the exact purpose of copy Constructor you use copy Constructor anytime that you want to create a new object based on an already existing object so basically you want to copy that object one very important thing to keep in mind is that the same way that we have default Constructor and default Destructor that we get from our c plus compiler we also have default copy Constructor but as soon as you start working with pointers you need to provide your own custom copy Constructor or else you are going to have an error so in this situation we we are working with pointers so if I run this program and we don't have a copy Constructor let's see what's going to happen so here my program started and if I press enter as you can see we get an exception we get an error here and the reason for that is as I said we are working with pointers and we don't have custom copy Constructor so in order to prove that let's comment all of the code that is working with pointers so I'll comment this and also Destructor and if I run my program again let's see what's going to happen Okay the program has started I press enter and enter once more to close it and nothing happened there is no error in our code so this is one way to fix the problem that you have but as you already know deleting the code is not the fix for the error so what we should do instead is we should create custom copy Constructor for our application so let's return this part that we commented and this here as well and now we are going to create a copy Constructor now there are a couple of rules when creating copy Constructors first of all a copy Constructor needs to be in the public area of your class so it needs to be here second thing is that it doesn't have any return type not even void third thing is that it will have the same name as the class that it belongs to so it will be called book okay also as a parameter this copy Constructor will receive an object of type book and that is going to be original okay so copy Constructor receives one parameter and that parameter has the same type as the class that it belongs to so now we will use this original that was passed into our copy Constructor in order to create or to construct a new object so let's create this Constructor the way that most beginners would probably do so inside it I will say that title is equal to original dot title and then author is equal to original dot author and then rates is original raids and rates counter is equal to original dot rates counter like this so this is the way that most beginners would create a copy Constructor and if you don't understand this in depth then this code could look logical to you because what we are doing here is we are receiving an object of type book it is our original object and based on that object we are simply copying all of its properties in order to construct a new object but but but but there are two very sneaky errors in this code here especially for beginners so if I try to run this application we will immediately get an error so let's see what does our compiler say it says copy Constructor for class book may not have a parameter of that book blah blah blah nothing really helpful especially for beginners who have never seen this era before and who have never faced this issue so let's close this and let's explain what is actually going on here I want to focus on this part here book original for those of you who have watched my videos before and who have watched the video where I talked about different ways to pass an object to a function you remember that I said that there are two ways you can pass an object by a reference and you can pass it by value if you're not familiar with this please make sure to watch this video it will also be linked in the description so as I said you can pass an object by reference and you can pass it by value if you are passing an object by a reference you have this little Ampersand symbol and symbol and it means that you are passing the original so basically your compiler is going to take the original object and pass it to another function but if you are passing an object by a value then you don't have that Ampersand symbol and what your compiler does is that it makes a copy of that object and then it passes that copy to your function so what are we doing here are we passing by value or by reference here we are passing by value which means that your compiler is going to take this book here it is going to copy it and it will pass it into this copy Constructor but one very important thing to keep in mind is that in order to copy the book your compiler needs to have copy Constructor because that is what is used in order to copy objects but here we are creating the copy Constructor itself which creates a logical error which means that in order to pass this book to our copy Constructor we need to have copy Constructor but in order to create a copy Constructor we need to pass this book as a parameter and that is going to create a logical error where you cannot create a copy Constructor before you can copy this object but you can also not copy the object before you have a copy Constructor so in order to fix this problem what we we need to do is we need to Simply pass this by reference and as you can see immediately our error disappears now one thing that we have potentially done by doing this is we have created a possibility for someone inside this function to change our original so some other developer tomorrow can come and change the values of the original object which should not be done in copy Constructor because its purpose is just to copy that object so in order to prevent that error what I will do here is I will say const so by doing this we have said that inside this function here inside this copy Constructor our original object is a constant which means that this function here cannot change it it cannot change any of the properties that it has so let's start our application again and I will press enter and as you can see we still have the error that we previously had so let's see what else is going on in this code here and the best way to understand it is to literally draw it so now I'm going to do that and I will be back so here is the visual representation of our code here we have the original object it has title author and then it has the address of dynamic array where we keep our rates it is this array here we have two raids and it also has rates counter so now if I use this logic of our copy Constructor in order to create a copy of this original what it will do is the following it will simply assign these values of the original to our copy and it will do that like this so title is going to be this and then author will be this and then raids will be the address of this array that keeps our rates and then rates counter will be this so where is the problem the problem comes when D structure is invoked so at the end of the scope of each object you invoke the structure in order to release all of the memory that it was using so that other applications can reuse that memory so when the destructor is invoked for the original what is going to happen is it will delete this and then this and this we don't need Destructor for this part because it has nothing to do with pointers but we do need Destructor when it comes to pointers and let's see what our Destructor says it says delete the array of rates which means delete this and then it says please make our rates point to null PTR so it basically does oh it basically does this now a time comes to destroy this object so to destroy the copy so what is going to happen here is it will delete this and this and this this is not in dynamic memory so it knows how to do that but then it will invoke this Destructor in order to deallocate all of the memory that was dynamically allocated so here it says again delete the array of rates it says where is my array of rates it's on this address here so it goes here and it tries to delete this but that is the problem because this memory was previously released and it does not belong to our application anymore as I said the main purpose of releasing that memory is so that other applications can reuse it so at this point this memory does not belong to our application anymore and we are trying to access someone else's memory and at that point our operating system says please stop this is an error you cannot do that and that is when we get the error that you could previously see in our application so let's return this code to what we already had and then I'm going to show you the correct way to create a copy Constructor so let's start again but this time let's see how we can create a copy Constructor in a proper way so here I am going to copy the title as we already did I'm going to copy author as well and I will copy rates counter because those things do not work with pointers and we will not have a problem if we do it like this but when it comes the time to copy rates array instead of Simply copying it like this what we should do is the following we should go to dynamic memory again and we will create a new array that has two spaces because we have two rates okay and this new array will have another address because it's completely new memory like this so inside this new array I am going to copy the first element and the second element like this and my rates will hold the address of this new array so in the future when the time comes to destroy the original what will happen is this and then when the time comes to destroy the copy we will not have the error because the copy has all of its own elements and we can simply do this without having any problems so now let's see how we can replicate this logic in our code so let's maximize this and here I will keep this part and this part I will remove this part because that's the problematic part because it works with pointers and this part as well is okay so now I will copy rates so the way that we did it is we said rates is equal to new float array that has this many elements okay and then what we need to do is we need to use for Loop so int I is equal to zero I is less than rates counter I plus plus and inside this for Loop we are going to copy all of the elements from this original rates into our rates of the copied object so here I will say rates of I is equal original rates of I like this and this is the proper way to copy all of the elements of the array so you should not hard code it to two elements that we have here because your array potentially can have a lot more elements than that so this here is the proper way to create a copy Constructor so now if I run my program let's see what's going to happen okay and then I press enter and close my program and we don't have that error anymore so now that we have understood how to create a copy Constructor let's see when a copy Constructor is invoked there are three potential situations when a copy Constructor is invoked the first one is whenever you are creating a new object based on an already existing object like we are doing here so we are creating book three which is a new object and for that we are using book one so we are creating a copy of book one and we are we are calling it book three okay now one very very important thing to keep in mind that confuses many beginners is that there is no difference between this line here that I will comment and this line here now many beginners will be confused by this because this here looks like assignment operator and many beginners think that this one here is using assignment operator but it is not this here is still using a copy Constructor even though you have this assignment sign here and if you want to learn more about assignment operators and the difference between assignment operators and copy Constructors let me know in the comments and if you want if I make that video I will definitely link it in the description so again one very important thing to keep in mind is that this line here is invoking copy Constructor and this line here as well is invoking copy Constructor and the way that you will know when a copy Constructor is invoked is whatever a new object is created based on an existing object you are invoking copy Constructor doesn't matter if it looks like this or like this and in this situation we are clearly creating a new object based on an already existing object on the other hand assignment operator will be invoked when you are trying to reassign new values to an already existing object for example if I now did this if I said book three is now equal to book two and this line here we are invoking assignment operator but here when we are first creating the book and assigning it its first value then we are invoking copy Constructor so that is an important difference so let's delete this part and again let me know if you want to learn more about assignment operators so that is the first use of copy Constructors whenever you are creating a new object based on an already existing object the second use of a copy Constructor is when your compiler is creating a temporary object so what does that mean for example when you are passing an object as a parameter to a function but you are passing it by value not by reference in that case your compiler is going to make copy of that object and for that it will copy Constructor so let's demonstrate how this works on an example let's create a function here let's say void print book and here I will pass a parameter to my function and it will be of type book and I will call it book so here I will say C out title and let's say book dot title and let's add end line let's do the same for author okay copy it paste it here and let's also print the average rate I will create float variable call it sum and I will assign it value of 0 and then I will use for Loop in order to iterate through all of the rates of this book like this and here what I will do is I will say sum plus equals to book dot rates of I like this so here I will have the sum of all of the rates and now in order to get the average rate I will divide the sum by book dot rates counter like this and let's call it average rate okay so now what I can do is I can simply say print book and I can pass it book one like this so now if you try to run your program copy Constructor will be invoked on this line here so let's put a breakpoint to demonstrate that and run our program so the execution of our code was passed here and if I press f11 as you can see it is going to our copy Constructor before invoking this print book function okay so let's stop the program and one more thing that I want to do here let's remove this here I want to print details about all of these three books so book one and then book two and book three just to demonstrate that our copy Constructor works as it should in this case book 1 should be the same as book 3 because that is how we created book three we literally copied book one so let's run the program and as you can see first book Is millionaire Fastlane second book is C plus plus Lambda story and then third book is millionaire Fastlane again okay so that is the second use of a copy Constructor so when you are passing an object to a function by value and then the third use is when you are returning an object from a function but only if you're returning that object by value as well so if you're returning it by a reference which means if you are returning the address in that case copy Constructor will not be invoked but if you are returning it by value your compiler again is going to create a temporary object which means that it will copy your object and it will invoke copy Constructor so those are all of the uses of copy Constructors and all of those places are places where you can get potential errors if you don't Implement copy Constructor properly like we did here so thank you very much for watching and for those of you who watch my videos until the end I have a special bonus if you enjoyed my teaching style you will be delighted to know that my practical programming course will soon be out I will share my decadelong experience and help you secure a job as a software developer there will be a link down below where you can leave me your email and I will send you a special discount once the course launches but make sure to sign up now because the number of places is limited so thank you again for watching leave all the questions that you have in the comment section and I will see you in some other video bye