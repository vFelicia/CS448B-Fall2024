hi guys and welcome to my channel this video is part of the series where we learn about arrays of objects and in this particular part we are going to talk about Dynamic arrays of objects so in this video you will learn about dynamic memory and arrays of objects so these are the topics that we are going to cover in today's video so we will talk about difference between static and dynamic arrays we are going to talk about how you can allocate memory for dynamic arrays and deallocate memory that you've been using for your Dynamic arrays also I will show you a real world example of how you can work with Dynamic arrays of objects and what are the benefits of using them and then we will see some of the most common errors that happen especially to beginners but even to experience developers and then at the end I have a task for you that you can use in order to practice so that you can expand your knowledge on your own and before we start with the video as many of you already know for the past year over a year I've been working on a practical programming course that is going to teach you how to think as a software engineer and help you build strong indepth understanding of programming regardless of the language technology or type of application that you want to use in the future this is going to be a complete Journey from beginner to expert and I'm going to be your Mentor I will guide you step by step and systematically through the entire process until you become an expert in programming and if you learn everything that I will teach you in this course it is guaranteed that you will get a better job as a software developer or your first job as a software developer if you don't already have one because in this course we are going to solve so many real world problems with code and I will pass on you all of the experience that I have acquired in the past 10 years since I started coding so from my first day of University up to this point after you finish this course you will continue learning learning because if you truly want to be the best and stay the best then you will never stop learning in this career but you will be able to do it on your own so you will be able to continue expanding your knowledge on your own in any direction that you want also since this community means a lot to me and because you have been supporting me for a long time I feel like you deserve a special discount when compared to other people so I will have a link in the description that you can use to sign up and I will send you a special discount once the course launches but make sure to do it right now because the number of people that can get this discount is limited so if you are interested use the link in the description and sign up right now so with that being said let's continue with our today's video so here I have a class called student and here are the properties of students so we will have name age gender and programming grade and all of these properties are public so that they are accessible outside of this class and also make sure to put semicolon at the end because otherwise you are going to have an error so this is the object that we are going to use for this video we are going to create Dynamic arrays of students so with that being said let's first create a static array of students and then we are going to see the difference between static and dynamic and you will see when the need for dynamic arrays of object arises and why do we even have them so to create a static array of objects you simply put the type so I say student and then give the name to my array let's say students and here I will Define the size of my array let's say three so with this I have created an array that will have three elements and it is array of students so it will have three students and it is called students okay so with this we can enter only three students in this array but what happens if we are building an application for let's say for teachers and not every teacher has the same number of students some have five some have 500 so what is going to happen if every teacher wants to enter the number of students that he has we cannot always hard code the number of elements that our array is going to have so for that situation we need to understand what our Dynamic arrays so now let's see how we could let our user Define this number of elements for our array so we will do something like this probably we would say int size and then we would say C out for example enter size okay and then see in size actually it's better here to say um number of students that is more user friendly okay so now that we have allowed our user to enter the size for our ra we would do something like this so instead of creating array of three students we would create an array but this is going to be its size but as you can see here we have a problem immediately we have an error here and that error says expression must have a constant value so size must be constant that means that if we want to do it like this if we want to set the size through a variable that variable needs to be a constant so a constant variable or a constant number like we previously had so that means this but in this situation we are not able to enter the size for a variable that is constant and we have here a lot of Errors so now let's see how would we be able to do something like this with Dynamic arrays so let me delete this const and here I will simply create a variable of type in to call it size and I will allow my user to enter the size but here instead of creating an array like this which is static array instead of doing that I want to create a dynamic array so here I will say that I want to have a pointer to student and then that pointer is going to point to new array of students that will have this many elements like this so this is how you can create a dynamic array you set the type for your Dynamic array and then you see that it is going to be a pointer and then you give the name to your array and then you say this pointer is going to point to the new array that has this many elements and it is going to be an array that stores students so what this code here does is it allocates new memory for your array but it does that in dynamic memory and that brings us to the main difference between static arrays and dynamic arrays so static arrays allocate their memory in compile time that means before you even start your application they allocate memory for them because of that the application may run a little bit faster because it is not allocating memory while it's running but at the same time the downside is that the efficiency of how you use that memory is not the greatest because in that situation you might have an array that is too big or too small meaning you might have an array that is half empty or you might have an array that is already full and you want to add new elements but you can't because you cannot change the size of static array during runtime of your application so you would literally have to turn off your application and then change the size and then start it again which is not possible in production so that is about static arrays on the other hand Dynamic arrays allocate memory in runtime that means while your application is running you can allocate new memory for your array which means that you can make your array either bigger or smaller while the user is using your application that means that your application is going to be a little bit slower because it's allocating memory during runtime but at the same time the efficiency of how you use that memory is going to be bigger because you will allow to your user to Define how big of an array he wants so if he needs to store more elements you will allocate bigger array and if he needs to store just a small number of elements you will allocate a smaller array so you will not have a situation where half of your array is empty or you cannot make it bigger but you need to add new elements so that is the main difference between static and dynamic arrays and before we continue any further one very very extremely important thing is whenever you are allocating new dynamic memory you have to deallocate that memory as well you yourself are responsible for freeing that memory so what does that mean well dynamic memory is memory that is used by all of your applications if you currently have five applications that are running all of them are using that memory and as you already know you have a limited amount of memory so if you keep allocating or taking new memory by your application and you forget or you don't know how to deallocate it which means free it or give it to your operating system so that it it can assign it to some other application to use then you will run out of your dynamic memory so it is extremely important that whenever you have new which means allocate new memory you need to have delete that will do allocate that memory so let's see how to do that here we have allocated a new array that has this size it's called students so that means that we need to delete students at the end of our program so before this last line of our program we will need to deallocate that memory we will basically tell to our operating system hey I use this student's array but now I'm stopping the application is stopping so I don't need this memory anymore so please free it and give it to some other application that needs it so that is the way to deallocate but here I have made a big mistake purposefully because this is very common mistake that most beginners make and that is the following here I have allocated a new array that has this size but here I am just deleting a pointer to students so what does this mean let me show you on Excel so when I created this array of students I basically said hey there is this variable called students and this variable called students is going to allocate an array in dynamic memory let's say array that has four elements okay and these are going to be addresses so zero zero one one a a and then let's say zero zero one one b b and let's copy this so here I will set have CC and then here I will have DD okay so this is my array that I allocated in dynamic memory and here I will store let's say student one and then student two three and four and this pointer called students which points to my array it just holds the address of my array and as we already learned in previous videos the address of the array is the address of its first element okay so this is basically what we have done in this line of code here where we have allocated new array but here when we are deleting students we are just deleting this part so we are not actually deleting this entire array that is taking in our dynamic memory so when your application stops it is just going to delete this and this will still stay in your dynamic memory this memory will still be used and your operating system will not be able to reuse it so what you should do instead is you should delete this entire array so you should say here please delete array of students like this there are many tools that you can use in order to analyze your code and to tell you if you have any memory leaks like we just demonstrated so that you don't have to think about it all the time yourself one of them that I really love to use is called PBS Studio I used to work with them and I used to have a link where you could download it for free as a student I'm going to check if that link still works and if it does I am going to put it in the description so that you can try it out it's a code analyzer that will run through your code analyze it and it will tell you if you have any errors or memory leaks and things like that so if that link still works I am going to put it in the description so now that we have created an array here we have allocated memory for it and then here we have D allocated or deleted memory that our array was using here in between we are going to write some code to work with this array so what I want to do is I want to allow my user to enter all the data for my array so I want him I want to allow him to enter students that we will store into this array and in the previous video which I will link in the description we talked about using Loops in order to access elements of the array and to enter elements so make sure to watch that video If you're not familiar with that because that is exactly what we are going to do right now so here I will write for Loop and inside this for Loop I'll say int I is equal to zero so we start at the first element and then we say I is less than the size that our user has entered here and then I plus plus so here we are going to iterate through every single element of our array however many our users decided that he wants and then here inside this for loop I will enter every single element so here I will say C out and let's say student of I like this and then here I will create a student I will call it s and here I will say C out and then let's say please enter name like this and then user will enter student dot name like this and then let's do this same for age gender and programming grade okay so name and then age and put it here and then here gender and also put it here and here I need programming grade and I will write message to my user like this so we have created a student and then we have entered all of the values for its properties and now we are going to put that student in our array I will say students array of I is equal to the student that our user just has entered so with this we will be able to enter as many students as our user defines here so if I start the program here it asks for the number of students let's say three students the name of student zero this should be student one so here you can change it to it it says student I plus one we are going to do that after I stop the application so student zero it's his name or her name will be Saldana okay and then age will be let's say 28 gender female programming grade let's say nine and then student one let's say Mark Mark Zuckerberg age will be maybe 35 I don't know uh gender is male and programming grade is 10 and then student two or actually student three will be let's say Bill and then age is 60 gender is male and programming grade is 8.5 okay and as you can see here we have entered one two and three students which is the number that we have defined up front and we have allocated the memory for these students during the runtime of our application so now I want to show you the relationship between Dynamic arrays and functions to be more specific I want to show you how you can pass a dynamic array into a function for example we are going to build a function to print all of our students to print our Dynamic array of students so let's do that next so let's create a function called print students here I will say void print students okay so this is going to be our function it is going to be of return type void and here we need to pass two arguments to our function two parameters the first one is going to be the address of the first element of the array so that we know where does our array start so that will be pointer of type student okay and I will call that pointer students because it will be pointer to our array like this and then the second parameter will be size of the array why well because here we are passing the address of the array and the address of the array is the address of its first element so in order to know how many elements after that first our array contains we need to know the size of the array okay so these are two parameters that the function will receive and then here inside the function we are going to print information about every student so here I will say for INT I is equal to zero so so start at the first element the one that has index 0 because indexation of the array starts with zero and then go until I is less than size of the array and in each iteration increase I by One and here I will print the details of each student so I will say C out and then let's say student let's say student of I plus one because even though indexation of arrays starts with zero for us Developers for any normal user he wants to see counting start with one so for him it will be student one and two and three and for us it will be student of zero and student of 1 and student of two and so on so because of that I am trying to make this more user friendly by adding one here after that let's add couple of spaces or one tab like this and then let's print all of the details about our students let's say see out students f i dot name and then let's add tab as well here and then I will do the same thing for age and then gender and here will be programming grade and then at the end after I print an entire student I will put a new line instead of tab okay so now let's invoke this function here I will say print students it receives pointer to your students array that will be this okay so the name of the array is the address of the first element and the address of the first element is at the same time the address of the entire array that is the first parameter that we are passing here and then the second parameter will be the size that our user has defined here so the size of our array okay so let's start the program and let's see if we did everything correctly okay so please define number of students let's say three students I will fast forward this part foreign okay and as you can see here we have the info about all of our students so we decided to create Dynamic array of three students we entered information for three students and here we tested how this print students function works and here you could see example of how to use functions with Dynamic arrays of objects and one thing that is not very user friendly is this part here it says student zero and then student one and student two so we should do the same that we did here so we should start at student one for our user at least so I am going to modify this part of the code when our user is entering students here I will say I plus one so let's close our application and now I want to show you something else so as we already learned the main advantage of dynamic arrays over static arrays is that you can Define their size at runtime and that also means that you can change their size at runtime which means you can make them bigger or smaller but that is not maybe as simple as you imagine it if you never worked with Dynamic arrays before so now I'm going to show you how we can make a bigger array of students than our user initially defined so here I will say for example let's ask our user first if he wants a bigger array so I will say char choice okay and I will say C out do you want a bigger array okay and then see in choice so if choice is equal to n or choice is equal to capital letter N that means that our user does not want a bigger array so here I will simply say return 0 which means that here I will end my program but before doing that I need to delete this existing array of students so deleting our existing array of students and then our application will stop here so here I have deleted or deallocated all of the memory that our application has been using so far and here I will simply stop my application so that is if user's choice is n or capital letter N but if user enters anything else then I will proceed and create a bigger array with the new size that user defines okay so let's say int new size and here I will ask him see out enter new size okay see in new size like this so now the question is how we can make this array of students bigger and this is actually very tricky question so let's first open Excel and here I will explain to you everything that needs to happen all of the steps and then we will translate all of those steps into our code so so far we had an array of students and let's say that we had array of two students so student one and student two this is going to be all of their data and those two elements were stored one after the other in memory and each of them has its own memory location so the first one zero zero one one a a and then zero zero one one BB and our students pointer is pointing to the first element of our array which is zero zero one one a a so that is everything that your students pointer is holding just the address of the first element now how can we add more elements to this array well actually we will have to create a new array so let's create new students and that array should be big enough so that we can store all of the existing elements and then all of the new elements that we want to add so let's say that we want to store four elements in total here I will allocate space for four elements like this and here will be the addresses of these four elements so this is another consecutive block of memory so another four elements that are stored one after the other in memory and these are their addresses and then what we need to do now is we need to copy all of the elements from our old array paste them into our new array and then we have this remaining space to add more elements so here I can add student three and then student four so that is how you expand your students array you basically create a new array and then you copy old array and then you have remaining space left to add new elements now this is not all another thing that we need to do is now that I have copied this old array into my new array what I need to do is I need to deallocate this memory so I need to delete this array here and then another thing that we need to do and that we want to do is since this student is now pointing to zero zero one one a a which was our previous array that is now deallocated it does not belong to us any longer now we need to say hey students array now you are going to point to the new array and that is going to be this address here so that is how you expand your array basically you create a new array that is bigger and then you copy all of the elements from your old array into the new array and you have that remaining empty space so that you can add new elements and then after you have done that you need to deallocate or free the memory that your old array was using because you don't want to keep it any longer than it's Siri so that operating system can take it and give it to some other application to reuse so after you have deallocated that memory that memory does not belong to your application anymore so you should not keep addresses of the memory that does not belong to you so at that point you change the address that your students variable student's pointer is holding so that it points to your new array okay so now let's translate these steps into code so now immediately after our user defines the size of the new array what we are going to do is we are going to create that new array we are going to allocate memory for it but before we do that I just want to give you a small reminder and that is here user can enter a negative number or a letter or anything that he wants we don't have any sort of validation or exception handling because if the user enters a negative number here or a letter you are going to get an exception a bug in your program so if you don't know how to handle that make sure to watch the video that I will link here and also I will put it in the description it's about exception handling and we are not going to do that in this video because I don't want it to be uh too long but make sure that when you are testing that you enter valid numbers here that make sense and then if you are going to give this to someone else then make sure to prevent any possible exceptions that can happen in this entire program okay so here I will suppose that user will enter a value number new size that is bigger than the size of our old array so after he enters the new size for our array here I will create a new array that has that size so I will say student pointer I will call it new students okay so I am creating a pointer to my new array and here I will say that I want to allocate a new array of students that has this many elements like this okay so with this we have allocated memory for the new array now the next step is to copy elements from our old array into this new array and there are two ways to do that and I am going to show you both so the first way to copy elements from our old array into our new array is with the help of function that is called mem copy so let's invoke it let's say mem c p y like this okay and this function receives three parameters the first one is the destination array so the bigger array in our case the array where we want to copy elements to the second parameter is going to be the old array the array that we want to use to copy elements from and then the third is the size so so the first is destination where we want to store elements and then the second is our old array like this and then the size is the amount of memory that we want to copy because this function here it basically copies memory so what is going to be the size of memory that we want to copy well we can get the size by multiplying the size of the array with the size of one element so we can get size of one element by using size of operator and considering the fact that the element of our array is student then we can say size of student and then multiply that by the size of our old array okay so this is how you use mem copy function again it receives three parameters the first one is destination array so that is our new array the second one is old array so the one where we want to copy elements from and then third is size of memory that you want to copy and you get the size by multiplying the size of one element by the number of elements that the array has so size of one student multiplied the number of students that the old array contains and this is one way to copy elements from the old array into the new array now later I will show you why this may cause problems and now I will show you the second approach so let's comment this code and let's see what is the second approach so the second approach is to copy all of the elements manually that means that you would use a loop in order to iterate through all of the elements and you would take each element from the old array and then copy it to your new array and do that for every single element so let's do that approach now so I will say four inch I is equal to zero and then I is less than size this is the size of our old array because that is the one that we are copying and then I plus plus okay so here I will say that my new students array of I will be equal to students array this is our old array of I so basically what this function will do is it will iterate through all of the elements of our old array and it will take each element and copy it to the appropriate position into our new array so now the remaining steps are to delete our old array of students and then to make our students pointer which we have declared it as pointer as you can see here now we should make it point to the same address that our new student's pointer is pointing to okay so these are two very important steps at the end so now that we have expanded our array that means that we can enter more elements so let's do that let's copy this code here this was code that we used to enter elements into our students array and then we are going to adjust it a little bit so here we started entering elements from zero up to the size of the array so this was the counter of the old array the counter of elements but in this situation what we should do is we should start at the size of our old array because we already have those elements inside our new array we we have copied them and then we should go to the new size so we should enter elements only in those remaining free spaces of our new array okay and here I'm creating a new student I'm allowing my user to enter all of the data for that student and I am storing that new student on the appropriate position inside my new array so after our user enters the remaining elements for our new array we should print students so here I'm passing students but here instead of passing size I want to pass new size because we don't want to print only the old elements we want to print the entire new array so here you should Pass New size so now if I start the program let's see what's going to happen so it asks me to enter the number of students that I want and this is for our first array this is for our old array so let's say two okay student one will be Selena age 28 gender female and then programming grade is going to be 10 okay and then second student will be Mark age will be 40. gender will be male and programming grade will be eight okay and now it asks me if I want a bigger array now if I press lowercase letter N or up or capital letter N that will end my program and nothing more will happen but if I press anything else for example letter Y that will give me the opportunity to enter the size for the new array now this new array should be bigger than our previous array here we had two elements so let's say that the new array will have three elements so these two that we already have and we should be able to add one more so when I press enter I will get the opportunity to enter one more student student three so his name will be Bill age will be 60 gender will be email and programming grade will be 10 as well okay so now when I press enter all of these three students are printed with this print students function which means that indeed our array has been dynamically created and then later expanded so there are a few things that I want to explain now the first one is this part of the code here as you can see this part of the code is used in order to enter elements for the new array so it starts entering at the size of the previous array and then it stops at the size of the new array but basically we have copied this almost the same code from this part here so here we are entering elements for the old array and the only difference between these two functions is that this one starts entering elements at zero and goes to size and then this one that enters elements for the new array starts at size and it goes until the new size okay so what I want you to do is I want you to extract this code into one function that you can invoke both here and here and you can use that function in order to enter elements for your array for both of these arrays both old and new array now there are a couple of things that I want you to keep in mind here we have already demonstrated how you can work with arrays of objects and functions here so I have shown you how you can use a function in order to print elements of a dynamic array and the same way you are going to create a function to enter elements for a dynamic array now this function here received the pointer to the first element and the size of the array and that was enough for you to print all of the elements of the array but when we are talking about entering the elements for the array you need to receive the pointer to the first element and then position at which you want to start entering elements and then the size so how many elements after that position you want to enter so for this situation here when we are entering our old array we would receive zero at the start position and then we would receive size as the end position but in this situation here we would have size at as start position and then new size as input position so we would receive three parameters and then also this function here does not return anything because it's just printing students and its job is done but the function whose job is to enter new students should return an array of students it should return a pointer to your array where the user has entered elements so I want you to do that as your homework as a task to practice and if you have any questions if you have anything that you need a tip a hint or an explanation let me know in the comment section and then also if you write that function you can leave it in the comment section so that other people can see it and use it or review it and so on so that was a task for you and that was the first thing that I wanted to explain the second thing that I wanted to show you is this part of the code here that we have commented this mem cpy memory copy function we said that this function can also be used in order to copy elements and then we have commented it and we have done this manual approach where we have copied each element one by one from our old array into our new array so now what I want to do is I want to demonstrate what this function here will do so I'm going to comment this part okay and I will uncomment this mem copy function so now I will start my program but before starting my program I want to put breakpoint here and later you will understand why so let's start the program and we are entering number of students for our old array let's say two so southina 28 and then gender female programming grade will be 10 second student will be mark 40 male programming grade will be 10 also and then do you want bigger array yes I want bigger array the size for a new array will be three okay and the third student will be let's say Elon age will be 50 gender will be male and grade will be seven okay so now if I press enter we should get all three students that are new array contains those are these three but if I press continue now let's see what's going to happen first please notice that the application execution was paused at this line 85. so before we are deleting or deallocating our array of students before the application stops so now if I press continue as you can see here we get an exception and the exception says read access violation so what is exactly happening here so this problem that you can see here is the most common error that happens not only to beginners but also to more experienced developers and this read access violation means that now you are trying to access your program is trying to access memory locations that do not belong to it anymore what does that mean well let's take a look at the code that we have changed because that was the thing that caused this exception so we change this part here we have commented the part where we manually copy elements from the old array into the new array and we have uncommented this mem copy function that is used for copying memory now what is the difference why this worked and we didn't have exception and now this doesn't work but it is inbuilt function that C plus plus offers so it should work right well the difference is that this part here the one where we were manually copying each element was doing something called Deep copy and this part here this mem copy function is doing something called shallow copy so what is the difference between deep copy and shallow copy and what does it even mean here I will give you a shorter explanation because I already have a video where I explained this topic in depth so you can watch that video it will be linked here and also in the description it is video about copy Constructors and assignment operators and if you don't understand this topic in depth then definitely make sure to watch these videos because you will get great value and indepth understanding of what is going on here so basically the difference between D copy and travel copy is the following this approach here that we wrote manually where we manually copied each comment from the old array into our new array was performing something called Deep copy on the other hand this function here this mem copy function is performing something called shallow copy now shallow copying can be used when you are copying um primitive data types primitive data types are integer chart double float pool and so on also shallow copying can be used when you're copying arrays of primitive data types also shallow copying can be used when you are copying structures that contain only primitive data types but as soon as you start working with pointers then you need to create your own way to deep copy any object or arrays of objects or anything like that so here we are working with class called student and that student has string name now this string name internally works as a pointer to array of characters and because of that we cannot perform shallow copy of this student class of any object that is of type student that is defined like this so because of that we need to have our own way of deep copying that object so if you want to understand this topic in depth I recommend you to watch the video about copy Constructor and assignment operator that I already have on my channel they will be linked in the description so far I already gave you one task that you can do as homework and that you can use to practice on your own and that was the following so this code here where we enter a new array and then this code here when we enter old array you should extract those two into a function so that you can reuse that function instead of repeating the code like we did here so that was your first task and now I want to give you another task but before I do that I want to tell you the following it is perfectly normal if you want to rewatch this video so that you can remind yourself of something that you have skipped or something that you have missed also if you just want to remember better all the things that we have learned in this video it is perfectly normal to watch this video again or even rewatch it a couple of times before you start solving tasks on your own I would say that it is even recommended to do that so that is one very very important thing uh that is normal part of learning so the second task um that you can do once you have understood everything that I've explained in this video is the following you are going to take your students array that contains both boys and girls males and females and you are going to divide that array into two smaller arrays array of males and array of females and you are going to take all of the males from your big array and put them into your smaller array array of males and then you are going to take all the females and put them into the array of females so you should have two smaller arrays after that you should deallocate the big array where both genders were kept together and avoiding potential errors and exceptions that can happen in that case is going to be very tricky and it is going to require the complete understanding of everything that we have learned so far so let me know if you have any questions about that in the comment section and then of course in order to test if everything works correctly you should print both the array of males and array of female and of course at the end don't remember to deallocate array of males and array of females so all the memory that was allocated you will have to deallocate it or free it delete it okay so that will be the task for you to practice on your own so thank you very much for watching and if you enjoyed this video please give it a big thumbs up because preparing and filming and editing videos like this one requires a lot of time and for whatever reason YouTube kind of prefers and promotes short videos of someone dancing and lip syncing to a trending song So videos of 10 seconds that are very easy to make so if you personally prefer videos like this one and if you get value from videos like this one then definitely give it a thumbs up and tell to the YouTube algorithm hey I want to see more videos like this one also if you have any questions feel free to leave them in the comment section and I will reply them either in text format or in a new video so again thank thank you very much for watching and I will see you in another video bye