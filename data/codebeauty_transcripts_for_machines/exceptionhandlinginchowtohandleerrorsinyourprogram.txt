hi everyone and welcome to my channel in this video i want to talk about exceptions and exception handling in c plus so i am going to show you how you can work with exceptions on a real life problem so we use exceptions in order to handle different types of errors that can happen during the execution of our program there are three most important keywords that you must know and understand if you want to work with exceptions and those are try catch and throw and in this video i am going to explain all three and in this video we are going to simulate the work of a printer and we are going to see what are some potential issues and errors that can happen during the execution of that program and then we are going to see how we can handle those errors by using exceptions but before i start explaining exceptions i want to introduce you with a tool that i personally use in order to develop c plus applications faster i am going to put it in the background it's called c plus plus builder and you can use it in order to develop modern multiplatform applications with less code because it has a lot of the components already available so you can just use them and you don't have to write all of the code yourself so if you have a great idea for an application that could make a lot of money or that could help to a lot of people but you don't have time you can use c plus builder in order to help you to design a modern user interface and build that application much faster so if you want to try it out i am going to share my link in the description which you can use in order to get 30 days free trial of c plus builder and i will even link a few videos with some of my ideas of the applications that you can build so with that being said now i'm going to return to explaining exceptions because errors can happen in any type of application and you should know how to handle them and that is exactly what i'm going to teach you in this video so as i already said we use exceptions in order to handle different types of errors that can happen during the execution of our program so let's create a program that is going to simulate the work of a printer and then we are going to see what kind of errors and exceptions can happen during the execution of that program and how we should handle those exceptions so the first thing that i want to do is i want to create a class called printer but if you are not familiar with classes and objectoriented programming i am going to link a playlist here and also in the description so make sure to watch that first and then you can come back to this video because you should definitely understand and learn about oop if you want to learn c plus so make sure to watch that and then you can come back to this video so let's create a class called printer i will say class printer like this and this class will have two private members the first is going to be the name of the printer and then second is going to be available paper so how much paper there is inside this printer so let's create those let's say string name and then let's say int available paper like this okay so these two members are private because members of a class are private by default and then i also want to create public members for this class so the first thing that i want to be public is constructor of this class so let's create a public constructor let's say public and then printer okay so this is going to be the constructor of our printer class and this printer constructor will receive two parameters so name and available paper so that we can construct a printer object let's do that let's say string name and then int paper so what i'm going to do inside our constructor is i will say that the name of my printer will be equal to the name that we received in our constructor and then available paper will be equal to paper like this so with this i have created a constructor for my printer class and this is of course a very simple example of how a printer class should look like you can of course add more properties and methods to this class here if you want it to be a representation of a real life printer so one more thing that i want to add to this class here will be a method called print so let's do that let's create a method of return type void and let's call it print okay and what this method here should receive is a text document that it should print so i will say string and let's say txt doc so text document okay and what i want to do inside this print method is i want to print this text document so i am going to say c out and then let's say printing and let's write the text of this document here and i'm also going to add an end line like this okay so in order to test this method let's create an object of printer class and then we are going to construct that object and then we will be able to invoke this method for the object of printer class so i am going to say printer and let's call it my printer and here i am going to construct that object let's call it hp desk jet one two three four for example and then let's say that it has ten papers inside it okay so after i have created my printer object what i can do is i can invoke this method so i'm going to say my printer dot print and what i want this printer to print is the following text so i will say hello my name is saldina let's say i am a software engineer okay and this should be tactile letter s and then here capital letter e like this so if i run this program let's see what is going to happen okay as you can see it says printing and then this is the text that it has printed so my name is saldina and then i am a software engineer okay perfect one thing that i would like to do in order to improve this method here is i would like to check how much paper is required in order for this text document to be printed and then i also want to check if there is enough paper available so let's do that let's make that calculation i am going to create a variable of type int and i will call it required paper like this and i will say for example that on one sheet of paper you can print 10 letters for example so i'm going to say txt document dot length like this and then i will divide that by 10 okay so what this calculation here will do is the following so if this text document has 40 characters for example and if we divide that by 10 we are going to get four which means that it is required to use four sheets of paper in order to print this text document okay so what i want to do now is before i try to print this document i want to check if there is enough paper available and i am going to do that here i will say if required paper is greater than available paper what i'm going to do in this situation is i will throw an exception so if we need more paper than we have we are going to throw an exception and in order to do that we use throw keyword and here i will throw a text exception which says no paper like this so if this here results as true if there is not enough paper available we are going to throw an exception but if this here results as false we are just going to print this document and then what we should also do is we should subtract so we should say that now available paper minus equals to required paper so i am going to subtract required paper that we just used in order to print this document from the paper that is available inside our printer so that when we come to this function next time we have less paper okay now one thing that many beginners do is they do the following so they say if required paper is greater than available paper so if we don't have enough paper please throw an exception and then return like this and this is actually redundant because if this exception here is thrown it is not going to continue the execution of the function so this return is redundant because this throw is going to break the execution of the function so i'm going to remove it okay and this here is enough in order to throw the exception and break the execution of the function so if i try to test this method now let's see what is going to happen but instead of testing it once let's invoke it three times for example so if i run this program as you can see inside our console we have printed the document two times instead of three and then we have this exception which says unhandled exception at this location in exception cpp.exe and so on so by doing this we have crashed our application and now i'm going to show you how you can handle this exception that we have thrown from our print function so let's stop our application and in order to handle this exception here what we need to do is we need to put the code that we expect to throw an exception inside a try catch block so i am going to put this inside a try block so i will say try like this and i will move all of the code inside this try block so i will say please try to execute this code here but if you get an exception you are going to catch that exception and you are going to handle it inside this block of code here so inside this sketch we are going to catch a specific type of exception and since we are throwing a text exception here we need to handle that same type of exception here and that type is const char pointer so i'm going to say const char pointer and i will call it txt exception like this so what i want to do inside this catch block is i will write out that an exception has happened so i will say exception like this and then i want to write out the text of that exception like this so we have thrown this exception in the situation when we need more paper than we have available and then we are going to handle that exception in this block here okay so if i run this program as you can see our document has been printed two times because we have enough paper for that but if we try to print it third time we are going to get an exception which says no paper okay now this exception here can be of any data type that you want and here i'm throwing a text exception and then also handling that same type but you can also throw an integer exception for example so let's do that let's say that if this error here happens i am going to throw an integer number of 101. so 101 and then in order to handle this exception we will need to write a different catch block so if i leave it like this and if i try to handle this integer exception using this type of catch block we will get the same error that we had previously so if i run this program as you can see we get unhandled exception because here we are throwing an integer exception and here we are trying to handle only a const char pointer exception so again in order to handle this type of exception we will need to write a different catch block so let's stop our application and let's write another catch block and yes you can write multiple catch blocks for one try block so now i have one try block and then one catch block and then i'm going to add another catch block so i will say catch and this time what i want to do is i want to handle a different type of exception which will be integer exception and let's call it e x code so exception code and what i want to do inside this catch block is i want to write out that code so i will say exception and then ex code like this so in this situation you are going to just give the code of the exception to your user and then you can write out the message that he should for example call support center or that he should check out the documentation in order to understand what this exception code means so if i run my program now as you can see here we have exception 101 so since we have thrown an integer exception we have handled that exception in this integer catch block there is also one very specific type of catch handler which is called default handler and that means that it is going to handle any type of exception so the same way that this catch handler is going to handle only integer exceptions and then this one is going to handle only const char pointer exceptions we can use default handler in order to handle any type of exception so how would you use a default handler well you would say catch and then here inside these parentheses instead of putting a type like here and then here i am going to put three dots like this okay and this here means that this catch handler will handle any type of exception so i am going to write a message here which will say c out and then let's say exception happened like this okay so this catch block is going to handle every single type of exception in the same way which means that it doesn't really matter which type of exception we throw we are going to come here and then we are going to handle it in the same way but since we have two catch blocks before this default handler that means that we are first going to try to execute this handler and then if this type of exception is not thrown we are going to continue and then try to execute this handler and then if this type of exception is not thrown then we are going to proceed and execute a default handler so in this situation we are throwing an integer exception which means that this catch block will handle that exception first so we are not going to be able to execute our default handler so in order to test this default handler what i have to do is i have to comment this integer handler first so after i have commented this handler if i run my program let's see what is going to happen okay as you can see it says that exception happened so we have handled an integer exception using this default catch handler okay so let's close this application and if i try to throw a text exception here which says for example no paper like this when this exception is thrown we are going to come to this first catch block and then we are going to try to compare the data type that was shown with this data type that is handled here and if they match we are going to use that handler in order to handle that exception so since we are throwing a const jar exception we are going to handle it here and if we want to test this default handler we will have to comment this as well so if i run my program now as you can see we are again handling that exception using this default handler and this time we are handling a different type of exception which means that indeed we can use a default handler to handle any type of exception now there is one very important thing that i want to mention related to this default handler and that is following so if i uncomment this handler and then this handler here and if i try to move this default handler to be at the beginning we are going to get an error which says that handler is masked by default handler which means that if you put a default handler at the beginning that default handler is going to handle every single error every single exception that happens and then neither one of these two catch blocks is ever going to be executed so you cannot do that if you want to have a specific handlers for specific data types those would come first and then a default handler would be last like this so one more time you put specific handlers first like we did here and then a default handler comes last so if we try to run this program now as you can see we are handling this text exception using this cons char pointer handler okay and then if we try to throw an exception that is not handled here nor here then this default handler is going to jump in and handle that exception so let's go through this example one more time here i have created a class called printer that has a name and available paper and then i have created a constructor for that class and then here i have a method which is called print that receives a text document that it should print and then here i have a calculation that tells me how much paper i need in order to print this text document and i have hard coded that on each sheet of paper we can put only 10 characters and you can of course increase this to 100 or 1000 or 10 000 but then you will have to pass more text to this print method in order to get the exception okay so after i have calculated how much paper we need in order to print this text document then i will check if we have enough paper available so if we don't have enough paper available i'm going to throw an exception so here the execution of print function is going to end and we are going to come to the handler that can handle that specific type of exception and as you can see in this situation that is a const char pointer so this type of exception is going to be handled here so when it happens we are going to write out this message to our user okay and then if this here results as false then the exception is not going to be thrown so if we have enough paper we are not going to throw the exception but in that situation we are going to print the document and then we are going to decrease the amount of paper that we have available inside our printer okay now inside our main function i am creating a printer which is hp deskjet1234 and it has initially 10 sheets of paper and then since i know that this print method can throw an exception i will put invocations of that method inside try block which means that i will try to execute that code but if it throws an exception i will catch that exception and handle it in one of these three handlers and here i have written a catch handler for a const char pointer exception and then here i have handler for integer exceptions and then here at the end i have written a default handler which will handle any type of exception so i hope that now you understand what are exceptions and how to work with exceptions in c plus so if you enjoyed this video please give it a thumbs up because that helps me a lot to reach more people and teach them programming and also if you have friends that would like to learn programming share this video with them because this is very important topic and not many beginners and not many people understand this about programming so you can be the one who is going to make the difference and teach someone programming uh and then also if you have any questions or if you have any topics that you would like to see in the future or if you make any upgrades to this program that i have written you can put those in the comments section so thank you very much for watching and i am going to see you in some other video bye