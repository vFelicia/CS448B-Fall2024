hi everyone and welcome to my channel in this video i want to talk about header files in c plus so i will explain what are header files what is their purpose i will show you how you can create your own header files include them and use them in c plus programs and i also want to see that this is very important topic in c plus plus this is very important lesson that you should not skip because if you want to become a developer you will work with header files very very often so make sure to watch the entire video so that you can get a really good understanding of heather files and then also if you have any questions you can leave those in the comments section because i read all the comments and if i see that there is a need to make a specific video that you have problems with understanding certain topics and that you need help i will definitely make that video and then also for those of you who are having problems with finding bugs and fixing those bugs and with improving your code in general i want to say that there are tools that you can use for that and those are code analyzers now the one that i would recommend is called pvs studio and i'm going to find it and then i will show you so it is this one here and i will put the link in the description but as i said pbs studio is a code analyzer which means that it will help you to find bugs and to fix those bugs and it will also help you to improve the quality of your code in general and i made a video related to pvs studio a few months ago in that video i explained how you can use it how you can install it which is very simple i will put the link to that video here i will put it in the description as well so make sure to check it out but basically when i made that video i didn't have many subscribers so i believe that most of my new viewers are actually not familiar with this tool at all so since i made that video i still have a coupon code that you can use in order to get one month free trial of pbs studio so that you can test it and see how it can help you to become a better programmer so i will leave that link that you need to follow in order to get one month free trial in the description and also i will put more details in the description of this video so if you're struggling with finding bugs with fixing those bugs and if you need help to improve your code make sure to check out pvs studio because there is no need to waste so much time doing that manually when you can do it in just a couple of seconds with the tools like pbs studio so um all the details will be in the description and now i will return to visual studio and i will explain heather files because that is the topic of this video so in order to understand heather files you will need to understand the following example everything that you want to use in c plus first has to be declared so if you want to use a variable you first need to declare that variable so you first need to say for example int age and then you can assign the value to this variable so then you can say either here that age is equal to 25 or you can assign it in the next line so you can say age is equal to 25 here like this but first you need to declare that variable so first you need to say to your compiler hey there will be this variable called age and it will be of type int now the same goes for functions as well if you want to use a function you first need to declare and define that function in order to be able to use it and if you are not familiar with functions at all make sure to watch my video related functions actually i have full playlist that i will link here and in the description as well because you first need to watch that in order to be able to understand this video uh so the rule is that if you want to use a function you need to make declaration and definition of that function and the declaration of that function goes before your main function and then definition goes after your main function so what i want to do now is i want to create a function that will be called for example recommend me a food and that function will receive one letter and the goal of that function is to return the name of the food that starts with that letter so to recommend you a food that starts with that letter so in order to do that i will put declaration of that function here so i will say the function name will be recommend me a food like this and then the function will receive one letter so it will be one character which i will call first letter and the goal is that this function returns the word the name of the food that starts with this letter so this function will return a const char pointer like this so this here is declaration of this function and it goes before main function and then definition goes after our main function so now i'm going to define this function so i'm going to implement it and describe what this function here is doing so i will say that inside these curly brackets here will be the implementation of this function here and what this function here will do is the following so i will say if first letter is equal to for example letter a or first letter is equal to capital letter a what i want to do is i want to return um food that is called apple okay and then if this here is not the case i'm going to check for something else so i'm going to say else if first letter is equal to b or first letter is equal to capital letter b i will return banana like this and then let me copy this one more time and here we will say else if first letter is equal to letter c or capital letter c in that case i want to recommend a food that is chocolate cake for example like this and then i will add one last else which will return pizza like this okay so this here is a default scenario in case that none of these other if else's result as true so now what i can do is i can invoke this function here so inside my main function i will delete this age variable i don't need it anymore and i will say std see out and then today i will eat and then let's use this recommend me a food function in order to see what we will eat today so recommend me a food that starts with letter c for example okay now if i run this program let's see what will happen okay as you can see it says that today i will eat chocolate cake so it works as it should but now i have one very important question for you and my question is following here we have only one cpp file which is called main.cpp but what would happen if we had more than one file if we had two or three or 100 cpp files and then another part of that question is what would happen if more than one file wanted to use this function here this recommend me a food function so should we copy this declaration and then this definition on more than one place so should we copy this declaration and this definition in every cpp file that wants to use this function here the answer is no and in order to be able to understand this you will first need to understand a little bit about how compilation of program works so now i am going to explain that so when a program is compiled every single cpp file will be compiled into an independent compilation unit and this is how object files are made so for each cpp file your compiler will generate an obj file and one very important thing to keep in mind is that these compilation units are independent so these cpp files are independent which means that one cpp file has absolutely no idea what kind of code is declared in another cpp file they are independent now after your compiler has generated all of these obj files the job of your linker will be to link all of those obj files together so now your linker will combine all of the obj files into one which will be your application so that is usually the file that has extension dot exe which means executable which is your application or your program so this process is very simple again you write cpp files which are source code files after that your compiler is going to take those cpp files and generate obj files so object files and then after that your linker will take those obj files and combine them into one which will be your application very simple now one very important thing that i said is that those compilation units are independent which means that if you wanted to use this recommend me a food function in more than one cpp file you would have to copy this declaration in that file as well so if you wanted to use it in 10 different cpp files you would have to copy the declaration in 10 different cpp files but if you try to copy this definition in more than one cpp file in your program you will get an error why the answer is following when your linker tries to link all of those obj files together it will say oh my god i have more than one implementation for the same function so i have implementation in this file and then in this file here as well so now when someone tries to invoke this recommend me a food function which one of these two will be invoked this one or this one so that is not allowed and i will demonstrate that on the example that we have in our visual studio so if you try to make multiple definitions that will cause an error you will get a duplicate error or you will get redefinition error of this function here so as i said if you want to use this recommend me a food function in another cpp file then you need to copy its declaration in that cpp file as well and then if you want to use it in 100 cpp files you will have to copy this line in 100 cpp files now it's not a problem when it is one function but if you have 10 functions or 100 functions you would have to copy 100 declarations that is one thing and then another thing if you try to copy this definition and all of those files actually if you try to copy it more than once you will get a problem so let's demonstrate that i am going to copy this function and if i try to run my program as you can see we get an error and that error says let's see it says function recommend me a food already has a body which means that this is not allowed so you are trying to create another implementation of this function here that already has been implemented so i am going to remove this and now i'm going to explain you the way that is often used for this in c plus so what c plus plus programmers came up with is to create a separate file which is called header file and inside that header file you put all of the declarations so is it one declaration or 10 declarations or 100 declarations you put them all in your header file and then you make another file which is called implementation and inside that implementation file you put definitions so you put implementations and now whenever you want to use the functions that are declared in that header file you just include that header file if you want to use those functions in one cpp file you include the header file in one cpp file if you want to use them in 100 cpp files you are going to just include that header file in 100 cpp files instead of copying 100 declarations in 100 cpp files which can be very tedious and also it can be very error prone it can cause many bugs and errors if you are not very very careful so i'm going to show you now how you can create your own header file and implementation file in visual studio so i will create this header file inside this folder here called header files so that it is well organized so right click on it and then add new item and then here you will select header file and if you are not able to see and select this header file make sure that visual c plus is selected on this left menu so visual c plus plus and then header file and here as you can see by default header files have dot h extension so the name of my header file will be food dot h for example and i will click add and as you can see it has been created successfully and here we have this pragma once and i'm going to explain this in a couple of minutes uh no need to worry about it now so now i want to create another file which will be implementation file and i will create it here so i'm going to say right click add new item and then here i will create a cpp file that has the same name so food but it has different extensions so food dot cpp and that will be our implementation file so as you can see it has been created successfully okay now what i want to do is i want to copy all of the declarations inside my food.h so inside my header file so i'm going to return to my main.cpp and i'm going to delete this declaration and then i'm going to paste it here so now this declaration has been moved to our header file and the next step is to move all of the definitions inside our implementation file so here inside this implementation file i will say hey you will be implementation file for this food dot age header file so please include all of the declarations that it contains so i will say include and then in these quotation marks i will say food dot h like this so after i have imported all of the declarations what i want to do now is i want to provide definitions for the declarations that are available in this header file here so i will go into my main.cpp and i will delete this definition from main.cpp and i will move it inside my food.cpp so inside my implementation file okay now if i go back to my main.cpp as you can see we have an error here which says hey what is this recommend me a food i don't have the declaration for this function anymore so now what we have to do is just include this food.h header file wherever we want to use this function here so now i'm going to do that so here i'm going to say include again and then i will use these double quotation marks and i will include this food.h header file that we just created and now if i try to run this program okay as you can see the error has disappeared and our program works as it should now one very important thing that i want you to notice is this include iostream so is this iostream also a header file the answer is yes but this is preexisting header file which means that this header file is available with your compiler whereas this header file here is the one that we created so this is user defined header file now the difference is that this iostream header file can be included using these angled brackets and then you can also use these double quotation marks whereas for your own header files you always need to use these double quotation marks in order to include them okay now your question might be what is this io stream used for so let's delete it and see what will happen okay as you can see immediately we get an error with this c out command and if i try to build my program program if i try to run it we have error so that is because iostream provides us with standard input and output services and those are commands like c out and c in that we have been using very very often so in order to use this command i will need to return include iostream and as you can see immediately that error disappears okay so again the benefit of creating your own header file is that now if you want to use this recommend me a food function in more than one cpp file all you need to do is just include this header file in 10 files in 100 files in 1000 files doesn't really matter so just include header file okay and then one more thing is that this include is called preprocessor directive which means that uh it will tell to your compiler before you try to process that see this cpp file here please include this food header file so that is what this include does so now if i wanted to add another function inside my header file what i would do is i would add declaration here so let's say for example void um get pizza recipe um and i have no idea how recipe is spelled so let me check it out on google translate so it's get pizza recipe like this and inside our header file i will just put declaration so inside my food dot age we have declaration and then the implementation will go inside this food dot cpp file so here i will implement this function i will say that whenever someone is looking for pizza recipe i will just write out the recipe of pizza so i will say std.c out and then i will say to make pizza you need and then here you can write out the full recipe okay but here we have an error and that error is the same error that we had in our main.cpp when we removed this io stream so that means that if we want to use this c out command inside our food.cpp we need to include iostream header file here as well so i am going to copy it from here and then i will include it here and this error should disappear as you can see so now we have successfully added another function to our food dot h header file so here is declaration it's get pizza recipe and then inside our food.cpp implementation file we have the implementation of that function so it is get pizza recipe and then here is the implementation of that function now whenever we want to use this function all we need to do is we need to include this food.h heather file and we already have that header file inside our main dot cpp which means that now i can invoke get pizza recipe inside my main dot cpp okay so i will add a line here like this so that the text is nicely formatted and then if i try to run this program as you can see it says first today i will eat chocolate cake chocolate cake and then to make pizza you need and then the recipe should follow okay so that is exactly what we have achieved using this header file and an implementation file so now wherever you want to use this function or this function you just include your food.h header file one more thing that i promise to explain is what is this line of code here so what is this pragma was inside food.h heather file and the answer is that this serves as a guard to ensure that you will not include this header file more than once in a single cpp file so now your question might be selena why would i do that why would i even try to include the same header file more than once in a single cpp file and the answer is first of all you will probably not do it purposefully and then second thing is that you will not do it in a program that has 10 lines of code or 20 lines of code because it is very easy to manage that program but if you are working on a very complex program that has hundreds and thousands different files what happens very often is that this chain of includes is formed so what happens very often is the following situation so you have file two that includes file one and then you have file tree that includes file two and then you have file four that includes file tree and you decide also to include file two and there you have a problem where you are trying to include duplicate header files so that is exactly why this pragma once is used to ensure that you will not include this header file more than once in a specific cpp file so i hope that this video was helpful and that you understood what our header files and how to use header files in c plus and if you have any questions feel free to leave those in the comment section i read all of my comments and even if i don't manage to answer to all of them um if i see that there are certain topics that you are really struggling with and that you need help with i will make video related to that topic and then also if you have suggestions for my future videos feel free to put those in the comment section as well and if you like this video please give it a thumbs up because that helps me a lot to reach more people and help them to learn programming and then if you want to watch more videos like this one subscribe click the bell icon and you will get a notification from me every time that i publish a new video so thank you very much for watching and i will see you in some other video bye