hi guys welcome to my channel welcome to another C++ for beginners tutorial and I'm really excited for making this video because this video is going to be a milestone and in this video I'm going to show you how you can build your own calculator application so if you have watched my previous videos and you are also watching this one and you build this application together with me you should really feel proud of yourself because you have made a great progress so let's build that application now here I have opened my visual studio and let's very quickly explain what we want to do before we start write code so I want my user to enter two numbers and also operation sign and then depending on those two numbers and that operation we want to calculate the result and then write that result to our user so the first thing that we need to do is we need to declare variables that are going to hold those numbers and that operation sign and since we want our user to be able to enter decimal point numbers so not only integers but decimal point numbers as well we are going to declare variables that can hold decimal point numbers and those can be float and double so let's declare float for example now let's call it num1 which is we call our first number and also another one which is going to be called number two and hold our second number and after we have declared these two let's also declare a variable that is going to hold our operation sign and since that is a character we need to use a character type for that variable so let's say char and let's call that variable operation like this okay and now after we have created these three variables we can really allow our user to enter his numbers and his operation and we want to do that in the following order so we want to say cm and then first our user has to enter the first number and then after that we want our user to enter the operation sign so let's say operate operation like this and after that our user has to enter the second number and this window here guys this is called intellisense and it really makes your code writing easier so you can navigate this list here using your arrows and then you can also use tab key so that it finishes your variable name for you if you want that okay so now we have entered our first number our operation and then our second number as well like this and another thing that I want to write out to my user because this is going to be the best calculator ever that's right that title for user so let's write here before he enters anything a quick title so let's say C out and then let's say that it's going to be called code beauty calculator you can call yours whatever you want so like this and let's add these here so that it looks prettier okay and now if I run my program well you see that it really looks like this and now we are able to enter one number after that we want our user to enter operation like this and then we want to enter the second number like this and then after we press enter our program should really calculate the result of this operation in this current situation it is not really doing anything else because we haven't written code for a dot okay so now let's solve this problem that we have here so at this point you should really have an idea yourself on how to solve this problem using ifelse statements and also nested ifelse statements so if you are not familiar with those I'm going to link one of my previous videos here so make sure to watch that video as well but in this video I won't show you the more appropriate way for solving this particular problem and that is going to be using switch case statement so a switch case statement well switch case statement is as well as ifelse statement used when you want to execute a block of code depending on a certain condition so depending on a value of a certain variable but switch case statement is particularly used in a situation where that variable can potentially hold a lot of different values and if you look at our operation variable here you should really notice that this variable can hold six different values and what are those six well our user can decide to enter operation for adding subtracting multiplying dividing modulating and then what if our user does not really want to use our application but he wants to hack it so if he decides that he doesn't want to enter one of these five but he really enters some non valid automatic operation we should also cover that case so we should really as programmers protect all these six situations and cover all these six cases I'm going to add one end line here so if my text is I'm at it nicely and then let's really show how this switch case statement is used so the first thing that I want to write is switch like this and then if you press tab you see that you are getting some default syntax for this switch case for now I'm going to delete that and I want to show you how you can really write that yourself and inside these parentheses here I want to write out the name of my variable that I want to switch through or switch on and that is going to be my operation variable because depending on the value of this operation variable we are going to perform a different calculation on these two number variables so I'm going to say here operation and then in these curly brackets here we really want to cover all our cases so the first case let's say that our our first case is going to be situation where our user enters operator so I'm going to use these single quotes and then inside these single quotes I am putting the value that our variable can potentially hold and that is this operator here and after that I'm going to add this column sign here like this and that after this column sign I really want to put out whatever code I need to execute in the case that our operation corresponds to this sign here and what I want to execute in this case is I want to say C out and let's row write out our first number and then let's write out our operation and then let's write out our second number so that our user really gets a night nicely for a method text and after that I'm going to add this is equal to sign and here we are going to put really our result and that result is going to be our first number because our user has entered this so our first number our second number so let's break out number one number number two like this and after we have covered this first case we need to add one more keyword and that is going to be break and this break keyword is really used so that our switch case statement knows where our first case ends so I'm saying here whenever my operation is equal to this sign here you are going to execute this code and you should really stop executing this case that case when you come to this break statement okay so this is going to be our first case our second case is going to be situation where our user let's say enters this plus sign and in that situation we really want to write out to our user this text here so the same text we want to really write out our first number plus in this case our second number and that is equal to and then we are going to add really this calculation here so number one plus number two like this and in this situation as well we want to add this break statement at the end like this okay so these are two potential cases and now I'm going to really write out the rest of them so I have written out these remaining cases and in each of these cases we really want to write out our user his first number after that his operation second number and then this equal sign and then in each of these cases we are performing adequate calculation so we are performing that operation that our user has entered and writing that result out to our user and after each of these cases we really need to put this break statement and you really have to put this break statement because if you don't you are going to get your program to behave as you don't want it to and as you can see in this situation here so in this situation where we are trying to modulate two numbers we are getting an error and if we hover over this number here you can see that our error says expression must have integral or unscoped enum type what does that mean well if you haven't watched my video on operators I suggest you to do so I'm going to link it here and here I'm quickly going to explain what is happening so this operation here this modulo operation is operation that is really going to give you a remainder after dividing two whole numbers and since this number here and this number here are of type float we really cannot perform this calculation on these two variables so what we have to do is we first have to check whether this number is really integer number it's a whole number and this number as well and since our float can hold decimal point numbers and integers as well we really in certain situations only can perform this modulating operation and let me explain what I mean by this that our float could hold can hold decimal point numbers and integers as well well this variable here this number variable can really have a value of 5.5 for example but it can hold as well value of 5.0 which is really integer value so it's five only so now what we have to do is following I'm going to delete this line here and we first have to check whether both of these numbers are integers and in that situation only we can perform this calculation but in a situation where one of these two or both of them are not integers we are going to write out or a user that that operation is not valid so I'm deleting this code here and then what's great to variables so let's create a variable of type bool and let's call it is num1 integer so this variable is going to hold a value that is going to tell us is our number one integer value and let's also create another variable that is going to be cold is num2 int and as well this variable is going to tell us whether our number two is integer and let's develop now an algorithm so that we can know whether our number one or number two is integer number and I'm going to ask you to write your solutions in the comments down below so pause the video think about it and then write your solution and without using any alreadymade functions as programmers as engineers you should really be able to figure out the solution on your own so applying the knowledge that you have gotten from my previous videos or this one but I'm going to say from my previous videos so pause video and write your solution so this question is not really a question of programming is more of a question of thinking in a logical way and if you remember when we were talking about casting operators we said that a casting operator is used to convert one data type into the other and I'm going to link that video here if you haven't watched that make sure to do so and here we are going to try to convert our floating point number so our number one and our number two into integer datatype so into integer number and how we are going to do that well we are really going to say and so this here is going to cast whatever we put after it into int type and we are going to say please try to convert my number one into integer and how does this work well for example if you have a number one that holds value of five point seven when you try to convert that value into integer what it does really it says that five point seven so that point seven part really byebye I'm going to take only this five part so only this whole part of a number so in that situation we are really going to get only five from this five point seven floating point number so what I'm going to say now is I'm going to say whatever this expression here this casting operation results with I'm going to really try to compare that with the initial value of my number one variable so I'm going to say num1 is my converted number one so converted to integer equal to number one like this and how does this calculation here work well as I said for example if you have a number one that holds a value of five point zero so 5 point 0 this part here is really going to take this point zero part of a number and delete it it's going to keep only this five so only this whole part of a number and after that we have this is equal to operator and then we are trying to really trying to really check whether debt is equal to 5.0 and the result of this is going to be true so we with this here we have checked really whether our number is going to be equal to our floating point number so this result here we are going to assign this value to our is number one integer variable so here I'm going to say please assign the result of this operation to our is number one integer variable like this and let's put this expression here so this whole expression inside these parentheses so that we really can see that this is an expression and the result of this expression should be assigned to this is number one int variable and now we are going to do the same for our is number number two so I'm going to say is number two integer and we are going to say that that is equal to I'm trying to convert my number two to end and then compare that to my float number two and after this we really can now do our algorithm to perform this modulo where it is this modulo operation on our two numbers in the case where both of them are integers so here I'm going to say if it is my number one int and that also is my number two int like this in this situation here I'm going to perform this modulo operation and as you can see here I have used only these two boolean values here in this expression so I didn't say please check is my number one int equal to true like this nor I have said please check is my number two equal to true like this because this here this part here and this part here are really redundant and what this expression here translates in it translates in is true equal to true and that is really redundant so I'm going to remove this part here and this part here and it should work fine like this for boolean value so boolean variables and in this situation here where both of these are integers we really can perform this modulo operation so in this situation here I'm going to take this code and I'm going to copy it like this and I'm going to say please write out my number 1 then my operation then my number 2 is equal to sign and then here I'm going to put adequate calculation so I'm going to say take my number 1 convert it to to int and then modulate that with my number 2 that is as well converted to end like this ok so in this situation we're bored both of these are integers we are going to really write out the result of modulating operation to our user let's add empty space here and here as well but in the situation where one of these two is not integer or both of them are not integers I'm going to say else and in that situation I really going to write out my user that this operation is not valid so let's say just not valid like this so in any of these two situations whether we write out this line of code here or this line of code here after that we are going to come here and here we have to put our break statement like this so after each case comes break and now we can really test this part of code here that we have written it so if I run my program the first thing that I want to test is let's say five point five plus two point two and we get the expected result so seven point seven let's run our program again and this time I want to check whether my modulo operation is working as it should because this code here is really specific so let's say five modulo two like this and as well we have gotten correct result and let's run our program one more time and here I really want to trick my program and try to make it to modulate two numbers that are not whole numbers so 5.2 modulated by 2 and as well our program works as it should so it says not valid operation ok so if you have noticed in this current situation I really have to run my program each time that I want to perform a calculation and that is because we haven't learned anything about iteration or loops so far and those videos are coming so make sure to subscribe to my channel and also click the power icon so that you are notified when I publish those videos and in that situation where we learn iteration and loops we are really going to be able to run our programs indefinitely which means to run our calculator application until we really decide to stop it ok so after we have covered these 5 cases here there is only one situation left to cover and then a situation where our user and there's any other side that is not one of these five here and that situation we are really going to write like this so we are going to take default so in the case where our user enters operation that is not going to correspond to any of these five signs we are going to execute our default situation and here we really want to write out a message to the user that is trying to hack our program so you can write whatever method you want to the user that is trying to hack the program that you have worked so hard to build and I'm going to put here [Laughter] okay you really can write out whatever you want to that type of fusers like this so in the case where our user has not entered this nor destroy death nor death nor death which means our user has entered some other side we really want to write out not valid operation and let's test now our default case so I'm going to run the program and I'm going to take the role of a malicious user that is going to try to hack your application and I'm going to say let me try to perform this calculation here so 5 z 9 not really you have been smart enough to predict his malicious behavior and you have said if you haven't put here a valid and Phatak operation then no I cannot help you this is not a valid operation and there is really one thing that you have been wondering about for the most part of this video and that is this break statement here so why I have said it after each case you have to put break and now you want me to explain that do you do you really wouldn't that be a spoiler for a situation where you decide on your own to believe this break statement here and then run your program even though I have said not to and you enter some calculation and you remember that I have said that you are going to get unexpected behavior but what she lying was she not and then you decide to execute this calculation and boom here is your unexpected behavior so what has happened here well your program is really recognized that this operation here that you have entered is this operation and after that is it has written out this number one so seven and that operation and then this number to five is equal to and then it has calculated number one number two which is 7 minus five and that is equal to two and after that it has really continued executing other cases which means it has come to this line here and then it has written one more time you're number one number two so seven minus five is equal to and then it has performed this number one plus number two calculation and seven plus five is going to be equal to 12 and then it has come to this first break command and it has has stopped the execution of your switch case so why has this happened it has happened because you haven't put this break command here and in that case your program is really going to be executing your cases until it comes to the first break command and if you have noticed here and that's the default situation I haven't really put any breaks you can as well put your break statement here you can say break here but even if you don't if you even if you didn't put your break here and your program really tries to execute something after it is fine here there is really nothing to execute so you are not going to get a problem in this situation here I hope that you like this video and that you have build your own calculator application and if you did make sure to subscribe to my channel and click the bell icon as well share this video with anyone who would like to learn programming and I'm going to in my next video bye