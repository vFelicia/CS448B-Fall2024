hi everyone and welcome to my channel in this video i will teach you about smart pointers in c plus but first i want to say hi to everyone who's watching this video as a premiere and if you're not make sure to subscribe and click the bell icon because we are always hanging out in the chat section and i answer your questions during the premiere of the video uh and also you can follow me on instagram it will be here i post when something interesting happens in my life and something interesting did happen a few days ago which is that i fell and i almost broke my arm as you can see so i am 26 years old and somehow i managed to be clumsier than a sixyearold so let's talk about smart pointers in c plus plus and the first thing that i want to explain is what are smart pointers a smart pointer is a container or a wrapper for a raw pointer and if you're not familiar with raw pointers make sure to watch my c plus pointers playlist i explain everything that you need to know there and one advantage that smart pointers have is that they deallocate memory automatically which means that you don't have to worry about potential memory leaks in your program there are three different types of smart pointers in c plus plus unique pointer shared pointer and weak pointer and in this video i'm going to teach you about every single one so in order to use any one of these three the first thing that you need to do is you need to include memory so i will say include memory like this and the first type of smart pointers that i want to talk about are unique pointers so um the syntax of creating a unique pointer is a little bit different if you are used to raw pointers so i'm going to show you now how you can create a unique pointer so you say unique ptr and then you specify the type so what kind of data type is going to be stored on the address that you want to point to so let's say for example integer so please make a unique pointer to integer and let's call that pointer u n p t r one so unique pointer one okay and then there are a few different ways to create a unique pointer and the one that i use most often is make unique methods so i'm going to say make unique so please make a unique pointer of integer type and to that address i want to store a value of 25 for example okay so with this i have successfully created a unique pointer to an integer and i have assigned the value of 25 to that address that my unique pointer 1 is pointing to so now the question is how do you use this pointer and as you already know pointers store address and in order to access the value that is stored on that address you need to dereference that pointer so how do you dereference a smart pointer the answer is by using asterix symbol or that little star symbol let me show you so if i say c out and then u n p t r one like this so if i write out this unique pointer one let's see what is going to happen okay as you can see we have an address because pointers store addresses now in order to access the value that is stored on this address you need to dereference that pointer so let's do that and in order to dereference this pointer you put asterisk symbol before it okay so if i run my program now as you can see here we have the address that our pointer is pointing to and then this is the value stored on that address there is one very important thing related to unique pointers and that is that they cannot be shared so in order to demonstrate what i'm talking about let's delete this code here and let's create another unique pointer let's say unique ptr of int like this and let's call it unique ptr two like this okay so what is going to happen if i try to assign to this unique pointer to the same location that my unique pointer one is storing so if i do that as you can see we get an error and that means that you cannot share unique pointers okay now one thing that you can do is you can move the ownership of a unique pointer so what you can do is you can say that your unique pointer two is equal to please move the ownership of my unique ptr one like this and now our unique pointer two becomes the owner of this memory address here so if i try to write out the value that is stored on this address here let's see what we are going to get okay so i am writing out the referenced unique pointer to let's run our program okay as you can see we get the value of 25. okay now one very important thing is that once you move the ownership of a pointer the previous owner which is this one becomes null pointer and that means if you try to access the value of your pointer that was previous owner you are going to get now pointer exception so let's demonstrate that let's say please write out the referenced value of my unique pointer 1 and let's see what is going to happen and as you can see we get an exception because now our unique pointer one is empty it is no pointer and if you are not familiar with exceptions if you don't know how to work with exceptions you can watch the video that i will link here and i will also link it in the description it's called exception handling and there i explain everything that you need to know in order to work with exceptions in c plus another important thing that i mentioned about smart pointers is that the memory is deallocated automatically which means that you don't have to worry about the allocating the memory or causing memory leaks and what i want to do now is i want to demonstrate that so basically i want to create a class and inside that class i want to create a constructor and destructor if you don't know a constructor is a special type of method that is invoked when an object is constructed or created and then a destructor is also a special type of method that is invoked when an object is being destroyed so if you are not familiar with the concept of objects classes constructors destructors and so on i am going to link a playlist here which is c plus plus object oriented programming and i will also put it in the description so c plus plus oop or c plus plus object oriented programming you can watch that playlist in order to understand in more detail what i'm talking about so as i said what i want to do now is i want to create a class um let's call that class my class okay and inside this class i will create a constructor and destructor so let's first create a public constructor so i will say public and then my class okay this is a constructor and inside constructor the only thing that i want to do is i just want to say constructor invoked so i will say see out and let's say constructor invoked like this okay and i also want to create a destructor so i will copy my constructor i will put squiggly before it i believe this is called squiggly or tilde sign um and i will write out here that the structure is invoked okay i hope that i didn't make any typo here okay so i have created a class called my class and inside it i have a constructor which as i already said will be invoked when an object is created and then i also have a destructor which will be invoked at the end of the life of that object which means when that object is being destroyed so what i want to do now is let's delete everything from our main function because we don't need it and what i want to do is i want to create a pointer to an object of this class here so let's create a unique pointer like this of my class and let's again call it unique ptr1 and i will make unique pointer of my class like this okay so let's see what is going to happen if i run my program now as you know already constructor is invoked when an object of this type is created and then this structure will be invoked when that object is being destroyed so if i run this program let's see what is going to happen okay as you can see we only have this constructor invoked so when is this pointer here being destroyed the answer is that this unique pointer will be destroyed at the end of the scope and the scope of this pointer here begins at this curly bracket and then it ends at this curly bracket here so at this curly bracket here this unique pointer will be destroyed and since this is the end of our program we don't see that destructor is invoked so what i can do to demonstrate that is i can create an additional scope so let's do that let's create an additional scope like this okay so now this is another scope and if i run my program now let's see what is going to happen as you can see now we have constructor invoked and then destructor invoked which means that here at this 18th line of code our constructor was invoked for my class object and then at this 19th line of code so at the end of its scope the structure has been invoked which means that our unique pointer has been deallocated so we don't have memory leak so one more time this unique pointer will be destroyed it will be deallocated at the end of its scope which is here okay so that is related to unique pointers and now i want to explain what are shared pointers so as the name itself says a shared pointer can be shared unlike unique pointer a shared pointer can be shared between multiple owners and that means that you can assign one raw pointer to multiple owners so let's demonstrate how that works so let's delete everything from our main function because i don't need it anymore and the first thing that i want to show you is how to create a shared pointer so let's say shared ptr that is the keyword and then you specify the type so the type will be my class so the class that we created here and then let's give the name to our shared pointer let's call it shptr1 so sharedpointer1 and now i want to use a method called make shared in order to make a shared pointer so i will say make shared of my class like this okay so with this we have created a shared pointer now one very interesting thing related to shared pointers is that since you can share a shared pointer it has the count of all of the owners so it has the count of all of the references to that pointer so how can you access that count well there is a method called use count so what i want to do now is i will show you that so i want to write out the number of owners of this pointer here so i'm going to say c out and then let's say shared count like this and let's say shptr1 and then i will use a method called use count like this and this use count method as i already said will give me the number of owners of this location here so if i run my program let's see what is going to happen okay as you can see constructor has been invoked and then the number of owners of this memory location is one because we have only one pointer pointing to that memory location okay let's close this and what i want to do now is i want to share this pointer so i want to create an additional owner to that same memory location so let's create another shared pointer of my class and let's call it shptr2 okay and what i want to do now is i want to assign to this shared pointer to the same memory location that this shared pointer one is holding like this and i also want to write out the number of owners of that memory location after i have shared that pointer so if i run my program now as you can see in this first line it says that the number of owners is one and then in this second line the number of owners or shared count is two okay one question that you might have now is when will this memory location automatically be deallocated and the answer to that question is the memory location will automatically be deallocated when there are no more pointers pointing to that memory location now since that memory location has multiple owners every single owner will be destroyed at the end of its scope and when there are no more owners the memory location itself will be deallocated which means that that memory will be free for other programs and other applications to use so let's demonstrate that as well what i want to do now is i want to put this here into an additional scope so let's do that let's create an additional scope like this and what i want to do now is after this scope i want to write out the count of the owners of this memory location so let's run our program and let's see what is going to happen uh let me know what you expect to happen in the comment section before i run the program okay so as you can see this first line says that there is one owner of this memory location and then we entered inside this scope here and it says that there are two owners and then after we have left this scope this third line this third print says that there is again only one owner of this memory location which means that this shared pointer so this owner has been destroyed at the end of its scope which is this line here now another thing that i said is that the memory location itself is going to be d allocated when there are no more pointers pointing to that location so in order to demonstrate that let's put all of this code inside a scope so i will put the beginning of that scope here and then the scope will end here and what i expect to happen is that this memory location is going to be destroyed at the end of the scope of its last owner so if i run my program as you can see okay let's move this as you can see our constructor has been invoked and that happened in this line of code here so the line where we made our pointer and then the first output says that there is only one owner and that is this 19th line which says shared count and then we have written out the count and then when we entered inside this scope we created an additional owner so this second output here says that there are now two owners and then when we left that scope and we printed the output for the third time we get this line here which says that again we have only one owner of that memory location and then when we left this scope here which is the scope of that last owner we are going to destroy that memory location which means that we are going to deallocate that memory so that other programs and other applications can use it so that was related to shared pointers in c plus and now i'm going to teach you about weak pointers so the main difference between a weak pointer and a shared pointer is the following as you already saw when you assign a specific memory location to a shared pointer that is going to increase the number of owners of that memory location but if you assign that same memory location to a weak pointer that will not increase the number of its owners and that means that we use weak pointers in order to observe objects in memory but a weak pointer will not keep that object alive so we use weak pointers in order to locate a specific object in memory but a weak pointer will not keep that object alive if nothing else needs it whereas a shared pointer will keep that object alive so let's demonstrate what i just explained so let's delete all of this code i don't need it anymore by the way the leading code is my favorite part of coding so the first thing that i want to do is let's create a weak pointer let's say week ptr of let's say for example end so let's create a weak pointer to integer and let's call it we ptr1 wii ptr okay so another thing that i want to do is i want to create an additional scope like this and inside this scope i will create a shared pointer so let's say shared ptr of int and let's call it shptr1 so shared pointer one and let's make one shared pointer so i'm going to use method make shared so please make shared pointer of int and let's assign the value of 25 again okay so after i have created a shared pointer what i want to do is i want to assign this same memory location to my weak pointer so let's do that let's say that week pointer one is equal to shared pointer one like this okay so let's see what is going to happen if i run this program i'm going to put a break point here so at the first line of my main function and if i run this program let's see what is going to happen so now we are debugging this program okay so in this first line we are going to create a weak pointer and it is still not pointing to anything as you can see it is empty we just created it we didn't assign any location to that pointer okay and then after we have created that weak pointer we are going to enter into this scope here and inside this scope the first thing that happens is we create a shared pointer and then we assign the number 25 to that memory location that our shared pointer is holding so let's do that okay and if i hover over my shared pointer as you can see it is pointing to a memory location that has one strong reference and on that memory location we are storing the value of 25. okay now in this second line of code we will assign this shared pointer to our weak pointer so if i execute that line of code let's hover over our weak pointer and as you can see now our weak pointer as well is also pointing to the same memory location and that memory location stores the value of 25 and it has one strong reference but one thing that will happen when i leave this scope here is following please write me in the comment section what do you expect to happen after i leave this scope here so if i press f10 and leave this scope and if i hover over my weak pointer here or here there are two things that you can notice the first thing is that it says that there is only one weak reference to this memory location so there are no more strong references and then another thing is that it has expired so all of the owners all of these strong references to this memory location have been destroyed and now we have just a reference we just have the address of a memory location that has been deallocated and that is exactly what i've been talking about which is that a weak pointer will not keep an object alive whereas a shared pointer will so this memory location has expired it was deallocated when its last strong reference so when its last shared pointer or when its last owner left its scope and that happened on this line of code here so i hope that this video was helpful if it was please give it a thumbs up for the youtube algorithm and also share it with someone who would like to learn programming because many people would like to learn programming but they just don't know where to start so you can be the one who helps them and makes the difference and also if you have any questions you can leave those in the comments section and please let me know what kind of videos you would like to see in the future so thank you very much for watching and i am going to see you in some other video bye