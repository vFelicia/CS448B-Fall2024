hi and welcome back in this video i want to teach you about i would say the most important skill that you need to have if you want to be a programmer and that is debugging so the shortest way to explain it is that debugging is a process of detecting and removing errors from your code and in programming those errors are also known as bugs so related to this let me share a little history lesson with you so according to the legend some 80 years ago a scientist at harvard university was testing an electromechanical computer that was used for the navy at the time and he found an actual mod stuck between the contacts of the electromechanical relay and at that moment grace hopper who was one of the pioneers of computer science and programming she pronounced the word bug which later became term that is used in order to describe a computer error so that extracted insect was passed into a technical dictionary with the accompanying inscription that said something like first known case of computer error being found and this fun fact gave rise to the use of the word bug to describe a computer error so that is why we nowadays call that process of discovering and fixing those bugs or computer errors debugging so as i said debugging is a process of discovering and removing bugs from your code and nowadays those are not actual bugs but in most cases those are logical errors that we have made while writing our code so if you like this fun fact please give this video a thumbs up and then also consider donating using the link in the description or in a pinned comment because that supports the channel and it helps me a lot to create more educational videos like this one and share more fun facts in the future so let's now see how debugging works in practice and for that i'm going to use red studio and c builder and red stands for rapid application development which means that it is used in order to create user interface c plus applications very fast and i will leave a link so that you can download it in the description so let's create a new project and then we will purposefully make a box so that i can show you how you can use debugging in order to find that bug and fix it so click on create a new multidevice application with c builder and then blank application okay and you should get this window so here is our form and what i want to do is i just want to add a label on this form okay i will put it here make it a little bit bigger and i will just make this form smaller and i want to change the name property of this label so i will find it here in this object inspector so select your label and then find name property and let's call this label result label because we are going to show the result of our program inside this label so what i want to do now is i will switch to my unit one dot cpp and here inside this function i will do the following let's create a bool variable and let's call it is rainy and i will assign the value of false to this variable like this and then what i want to do is i want to check i want to say if is rainy is equal to true what i want to do is i want to use my label called result label and inside its text property i want to write out text which says take an umbrella like this okay so if i run my program let's see what is going to happen and as you can see it says take an umbrella which is an unexpected behavior because clearly here we have assigned the value of false to our variable called is rainy so we should not get a message that says take an umbrella because it is not raining so what i want to do now is i want to debug this program in order to see what is going on what is happening and why we are getting this message so let's stop our program and the first thing that you need to do is put a break point so click somewhere on this line where you want to put your break point i'll do it here and as you can see you will get this red circle and this here is called a breakpoint which means that once you start debugging your program the execution of your program will be paused at this line here and you will be able to resume the execution of your program manually you will be able to execute it line by line and track what is happening during that execution so the next step is to start debugging and how do you do that well look on this menu here for an option that is called either run or debug i currently use rad studio so it has option that says run i'm going to select that and then here you will have two ways to run your application run without debugging and then run with debugging or just run depending on the id that you are using so in order to debug your application you will have to select the option that says run with debugging or just run so let's click that okay and as you can see we have now this little arrow here on our breakpoint which says that the execution of our program has been paused on this line here and in order to move to the next line you can on this menu select the option that says step over so click on step over or use f8 and as you can see the execution of our program has moved to the next line which is this condition here and another useful thing that you can do is you can hover over these variables in order to check their value and if i hover over this is rainy variable you can see that its value is equal to false now you can also use this window here which says local variables in order to see the values of all of your local variables and if you cannot see this window here please click on view and then debug windows and here you will find the option of local variables so enable that and you should be able to see this window here okay so to return to our debugging if i hover over this variable it says that is rainy is equal to false so let's move to the next line and let's see what is happening so if i press f8 as you can see it has entered into this line here which is under our if block now one question that i have is why is it executing this line under our if condition if this variable had the value of false so if this variable here is false it should clearly skip that part of the code so if i hover over that variable as you can see we can notice that its value has been changed to true so why has that happened if we review this if condition here you will notice that by accident we have used an assignment operator instead of equality operator which means that instead of comparing these two values we have accidentally assigned the value of true to our variable and that is why we are getting the error so i'm going to stop the execution of my program and i will change this to is equal to operator and then if i run my program again i will run it without debugging this time okay as you can see it says results label which is default text that was stored inside our label but this time we are not getting this take an umbrella if it is not raining and then one more thing that i want you to notice is that even though we have this breakpoint here the execution of your program will not be paused at any breakpoints if you use the option of run without debugging so as you can see this program is behaving as expected so now i can close it and another thing that i want to show you is this option here which says run the cursor so what i'm going to do is i will put a breakpoint here and i'm going to run my application again in a debug mode okay and the execution has been paused on this line here as you can notice this little arrow symbol so instead of pressing f8 and moving to the next line what you can do is you can click on run and then you can say run the cursor or you can use f4 as a shortcut so i will press that and as you can notice the execution has been moved to our next break point so what you can do is you can use this run to cursor option if you don't want to debug a specific part of code so if you believe that a specific block of code or part of the code does not have any errors and you don't want to go over it line by line what you can do is you can put a new breakpoint and then use this option called run the cursor in order to skip part of the code and go directly to that line that you do want to inspect and a common question is how many break points can you have the answer to that question is as many as you want as many as you need this program is very simple and very small so it does not make sense to have more break points but in large programs in big applications you can use as many breakpoints as you need in order to find out what is the problem and what is the error in your application and that's something that i'm not sure if i already told you but if you decide to run your program without debugging it is going to run a little bit faster and then if you decide to run your program with debugging it's going to be a little bit slower but this is the only way that you can debug your program so the only way to put breakpoints and to go line by line through your program is to run it with debugging so i stopped my program and i deleted the code because now i want to show you something else by the way i also removed the breakpoints that we had and a quick tip if you want to remove a break point you just click on it again and it is going to be removed so the next thing that i want to show you is this interesting option here that says trace into so this trace into option is used in order to debug inside a function so if you want to go inside a function and inspect what is happening inside that function you use this option here so in order to demonstrate that let's create two functions i will create those two functions before this t form constructor so here i will say that i want to create a function of return type void and i will call it celebrate birthday okay and actually i will call it celebrate birthday one because we are going to create two functions that will be very similar so this celebrate birthday one will receive a parameter of type in and it will be called age okay and the job of this function will be just to increment this parameter so this is our celebrate birthday one and then i want to create a second function which will be very similar so i will say celebrate birthday too but here instead of receiving this parameter like this i will receive a reference to this parameter so what i want to do now is i want to test these two functions and see how our program is going to behave when we invoke this one and then how it is going to behave when we invoke this one so let's say that i want to create a variable called my age and i will assign it the value of 25 like this and then i will invoke this second function for example so i will say celebrate birthday 2 and i will pass this variable called my page like this and then after i have invoked this function i will just write out this variable here inside my results label so here we still have this results label so i will return to unit 1.cpp and i will say result label its text property will be equal to my age please just use capital letter t like this so if i run my program and this time i'm running it without debugging okay it says that age is 26. so that happens when we invoke this second function so now let's see what is going to happen if we invoke this celebrate birthday one because these two functions are very similar but the result is going to be very different as you will see so if i run this program as you can see the value shown here is 25. so why is this happening we are going to discover what is happening here by using debugging so let's close our program and what i want to do next is i will put a breakpoint i'll put it here so this is the line where i want to pause the execution of my program and i will run my application in a debugging mode so i'll click here okay and as you can see the execution has been paused here okay so if i press f8 it is going to navigate me to the next line and then if i press f8 again as you can see we have skipped this function here so we have not entered into the function to see what is happening inside it so that is what you are going to achieve if you press f8 but i'm going to stop my program now and show you how you can enter into that function so i will click again run and again the execution has been paused on this line here so now i will press f8 and i am on this line which invokes our function so in order to enter into this function you use a different option so you use this option called trace into or f7 shortcut so if i press that as you can see the execution moved to our celebrate birthday 1 function so if i press f8 here inside this function what i can do is i can hover over this age variable and as you can notice its value is 25 which is the value that we have passed into the function it's 25 here as well and then after i execute this line of code here so i press f8 again and if i hover over this variable its value is going to be 26 and then the value of this variable here is still 25 so once i go out of this function and return to this line of code here if i inspect my age variable its value still has not changed its value is 25 and that is the value that will be shown inside our results label text so when i run my program until the end and if i inspect the result as you can see the result is 25 so that is what is happening with this first function and what i want to do is i want to invoke the second function in order to see what is happening there so i will say celebrate birthday 2 and i will oh i have not still stopped my program okay so please stop your program and then run it again in a debugging mode and as you can see the execution has been paused on this line again so i'll press f8 to move to the next line and then f7 in order to enter into this function okay and then if i press f8 again let's see what is going to happen so the value of this variable here that we have received is 25 and then if i hover over my age its value is 25 as well but if i execute this line here so if i press f8 and then i hover over this variable you will notice that its value changed to 26 and then if i hover over my age you will notice that its value as well changed to 26. so when i leave this function and show the value that is stored inside my age variable that value is going to be the value of 26 as you can see in our application here so what is happening here let's stop our program okay so in this first situation when we passed the value without reference what this function here did is it made its own copy of this parameter and then all the changes that were performed those changes were performed on this copy and they were not applied to this variable here but in this situation here so when we invoke this celebrate birthday 2 method here we are passing a parameter by a reference which means that we are passing the original so all the changes that are performed on this parameter here those changes will also be applied on this variable here and you could clearly see that while we were debugging that at the moment when this variable's value changed this variable's value changed as well something else that i want to show you because it might happen to you alone while you're practicing so i don't want you to wonder what is happening is the following situation so please run your program with debugging again and i will skip this line by pressing f8 f8 again and when i come to this line here let's press f7 to see what is going to happen okay and as you can see we have been switched to some part of the code that we have not written so what is happening here well you have actually stepped into a u string.h header file which is the code that someone else has written and it is already available in c plus plus so now we are able to debug that part as well so i'm just going to close this and i wanted to share that in case that it happens to you when you are practicing on your own so that you don't think that you messed something up or that something weird is going on if you all of a sudden see a code that you don't understand and that you have not written that is the code that is available in the framework itself or in the language but in most situations the code that you want to debug and the code that contains the errors is going to be your own code the code that you have written or your team depending on how many people are working on that application so if you enjoyed this video please give it a thumbs up for the youtube algorithm and something else that i want to share with you is a book that i will link in a description and you can use it in order to upgrade and build your knowledge and improve your c plus programming skills so make sure to check that out as well so now that you have watched this video and learned about debugging i'm going to link a playlist here and also in the description and that playlist contains a lot of different c plus user interface application videos that i built for you so now you can use your new debugging skill in order to discover errors and fix them and at the end of each one of those videos i have a part where i give you a few tips on how you can improve and upgrade that application as well as how you can fix some potential bugs that the application contains and then one more tip is that if you're a beginner please start watching that playlist from the first video because the first video is the introduction and then as you learn over time you can move to the next video and the next and the next which are more advanced so thank you very much for watching and i will see you in some other video bye