hi everyone and welcome to my channel in this video i want to teach you about function pointers in c plus plus many beginners think that function pointers are extremely hard to understand and to be honest um the syntax is one of the ugliest things that you are going to see in c plus plus language but in this video i decided to simplify it and to make it understandable for every single beginner so in this video you are going to learn how to use function pointers and why they exist what is their purpose but before i start i want to answer a question that i get very often and that is related to building user interface applications in c plus plus so in my last video which i will link here i decided to show you how you can use c plus plus builder in order to build user interface application in less than 10 minutes so c plus plus builder is a tool used to build modern multiplatform applications fast because it has a palette of components that you can just drag and drop without having to write a lot of the code yourself so if you are interested in building user interface applications i'm going to leave that video that you can use as a tutorial and then i will also leave a link to c plus builder so that you can download it and try it out for free so again if you want to build user interface applications make sure to check out the description of the video the first thing that i want to explain related to function pointers is what are function pointers and then later in the video i'm going to explain what is their purpose why do they exist and i'm also going to leave timestamps in the description that you can use in order to navigate yourself to the desired part of the video but i highly recommend you to watch the entire video if you really want to understand what are function pointers so um in order to understand what are function pointers you first need to understand what is a pointer and in the beginning of this playlist in the first video we already said that a pointer is a special type of variable that is used in order to store the address of another variable now a function pointer is very similar but instead of storing the address of a variable a function pointer stores the address of a function so let's demonstrate how that works in visual studio so let's create a function of return type int let's call it get number and from this function i just want to return number five like this and it is very easy to predict what is going to happen if i say get number and then i run my program okay we get the value of five written in our console okay now one question that i have for you is what is going to happen if i remove these parentheses so what kind of output do you expect to get in the console write me in the comments so if i run my program now as you can see we get an address so what kind of address this is this is the address of our function and now that we learned that the name of the function will give you its address what we can do is we can create a function pointer and then we can assign the address of that function to a function pointer so let's stop our program and let's do that i am going to remove this line of code i don't need it anymore and now i'm going to show you how you can create a function pointer the syntax is pretty hard so pay attention the first thing that you need to do in order to create a function pointer is use these parentheses and then inside parentheses you will put asterix symbol and you will give the name to your function pointer so let's call it func ptr so function pointer that is the first part the second part is to put the return type of your function in front of the name so here since i want to point to this function here the return type is int so i'm going to put int here and then the third part is to put the parameters that your function receives after the name of your function pointer and that is here so you are going to put parentheses and inside these parentheses you would put the list of parameters that your function receives but since this function here does not receive any parameter these parentheses are going to be empty okay and with this we have successfully created a function pointer that can point to any function that returns int and it does not receive any parameter and that is for example this function here so what i can do now is i can say that my function pointer will point to get number function and as we already saw this getnumber function will give us the address of this function here so what i can do now is i can use this function pointer in order to invoke this function so i can say c out func ptr like this so the approach is absolutely the same as invoking that function directly but instead of using the name of the function you just use the name of the function pointer so if i run the program as you can see we are going to get the value of five but we have invoked this getnumber function by using a function pointer okay so let me show you one more time how you can create a function pointer but this time i want to show you how you can do that for a function that actually receives parameters so let's delete all of this code like this and let's create another function so let's create a function that returns int let's call it add and this function will receive int a and then int b and the task of this function will be to sum these two numbers and then to return the results so i'm going to say return a plus b like this so how can we invoke this function by using a function pointer well let's again repeat how we can create a function pointer so one more time you use parentheses and then inside parentheses you are going to put asterisk symbol to indicate that you want to create a pointer and then you will give a name to your pointer you will call it func ptr for example and then two more things the first one is to put the return type of your function in front so end because we want to point to this function here and then the second part is to put parameters after the name of your function pointer so here and here inside these parentheses i will put int and then int because this add function receives two parameters and those are integer and integer so now we have created a function pointer that can point to any function that returns integer and receives two integers and that is this function here so i can now say that my function pointer will hold the address of add function and if i want to invoke this function there are two ways to do that so i can either say c out add and then let's pass two numbers let's say for example two and three let's add end line and then second way to invoke this same function is by using this function pointer so i can say c out and then func ptr and here i'm going to use the same approach of passing parameters like i did here so i'm going to say for example three and four and let's add end line here as well so if i run my program let's see what is going to happen okay for this first line we get the result of five so two plus three is five and then for this second line we get the result of seven so three plus four is seven so this is how you can create a function pointer and then this is how you can invoke that function by using its function pointer okay now that you have seen and understood what i just explained your question might be saldina why would anyone want to create a function pointer just to be able to invoke that function because it is so much easier to do that directly and the answer to your question is you are absolutely right but this is not the purpose of function pointers this is not the reason why function pointers exist so let's talk about the real purpose of function pointers why they exist and when we can use function pointers one of the most common uses of function pointers is we use a function pointer in order to be able to pass a function as an argument or as a parameter to another function and we do this in order to optimize our code so in order to make our code reusable so what i want to do now is i will delete all of this code and then i'm going to type a code that i want to show you in order to demonstrate something amazing that we can do with function pointers so after i type that code i will be back so here i have created a couple of functions and let's now explain what every single one of these is doing so the first one is ascending compare and it is very simple function that just compares two numbers so that the first one is smaller than the second one and then it returns if that is true or not and then descending compare again very simple function and again it compares two numbers but in this situation the first number needs to be greater than the second number okay these two are very simple let's see what is happening inside this sort ascending function so if i open that function you will notice that this here is a sorting algorithm now the goal of this video is not for you to understand how this sorting algorithm works we are going to explain that in a whole another video of c plus plus sorting algorithms which i'm going to make in the future but for now the goal is that you understand that the job of this function here is to sort a vector of numbers in an ascending order and one very important thing is that since we are using a vector you will need to include that vector because otherwise you are going to get an error so that is the job of sort ascending now if we take a look at sort descending let me move this code okay you will notice that sort descending function is almost identical to sort ascending function and the only thing that is different is this part here and this part here so our sort ascending which is sorting numbers in an ascending order is invoking ascending compare function and then our sort descending is invoking descending compare function and those are the functions that i explained in the beginning okay so the next thing that i want to do is i just want to demonstrate how these two functions work i want to test these two functions and then i am going to show you how we can optimize this code here so what i want to do is i want to create a vector of integers and let's call it my numbers like this and i want to assign numbers of two and then five one three six and four okay and what i want to do now is i want to invoke sort ascending and then i will print those numbers in order to be able to see if those numbers have been sorted in an ascending order and for printing numbers we will use this function here which is very simple function that will just iterate through this numbers vector and write out every single number of that vector so let's do what i just explained let's invoke sort ascending like this and let's pass my numbers vector to that function and after i have sorted those numbers in an ascending order let's say print numbers and i will pass my numbers vector like this so if i run my program let's see what is going to happen as you can see this vector here has been sorted in an ascending order so one two three four five six okay so that means that our sword ascending function works as it should and let's now test this sort descending so here i'm going to invoke sort descending function everything else stays the same so let's run our program again okay so six five four three two one which means that our sword descending works as it should as well okay perfect again all of this code will be in the description for those of you who want to analyze how this sort descending and then sort ascending functions work but for now it's enough for you to understand that this one is sorting numbers in an ascending order and then this one in descending order and that the only difference between these two functions is in this part here so this one is invoking ascending compare and then this one is invoking the sending compare so the next thing that i want to show you is how we can optimize this code here so that we can create one function that will be called custom sort and we can use that function in order to sort numbers in both ascending and descending order and the general idea is for that function to receive numbers vector and then we are going to pass another function to our custom sort and that function can be either this one or this one because that is the only difference between these two functions so let me show you how we can do that the first thing that i want to do is i want to change the name of this function here so instead of calling it sort ascending let's call it custom sort like this and that custom sort function as i already said will receive numbers vector and then it will receive a function pointer so it will receive a function pointer to one of these two functions so let's add that function pointer here as a parameter one more time how can we create a function pointer well inside these parentheses you are going to put asterix symbol and then you will give the name to your function pointer let's call it um compare func ptr so compare function pointer let's just call it func instead of fun okay so that is the first part the second part is to put the return type of your function in front so here i will say bool because that is the return type of both this function and this function here and then the last step is to put parameters that the function receives inside parentheses after the name of your function pointer so here and the parameters that these two functions receive are int and in so two integers so here i'm going to put int and then int okay so with this we have created a function pointer called compare func ptr which can point to either this function here or this function here so it can point to any function that returns bool and receives two integers so what we can do with our compare function pointer is we can use it to pass either this function or this function to our custom sort so since this part here was the only difference between sort ascending and sword descending if i change this with my compare function pointer that means that whichever one of these two is passed as argument to our custom sort that one is going to be invoked here so that means that now we can use custom sort in order to do both ascending and descending sort of this vector here so that means as well that now we can delete sort descending so let's test this function here so i am going to delete this part here and what i want to do first is i want to create this function pointer in my main function so i will do it here again inside parentheses you put asterisk symbol and then you give the name to your function pointer let's call it func ptr and then you put the return type of that function here since we want to point to one of these two functions the return type is bull and then they receive two integers so the return type goes here bull and then the parameters go here inside parentheses and those are two integers like this so we have created a function pointer that can point to any function that returns bull and receives two integers so the first one that i want to assign here will be ascending compare like this so now i'm going to invoke my custom sort function here and i am going to pass two parameters to that function the first parameter is numbers vector so my numbers okay and then the second parameter is a function pointer to a function that returns bull and receives two integers and that will be this function pointer here okay perfect so now if i run my program what do you expect to happen write me in the comment section so let's run the program okay and as you can see the numbers of my vector have been sorted in the ascending order so 1 2 3 4 5 6. and for that we have used custom sort function and we have passed our vector and a function pointer so we have passed ascending compared to our custom sort so we have basically used a function pointer in order to pass one function as an argument to another function and let's now test this with descending compare so i'm going to say descending compare here and that is the only thing that you need to change and now this descending compare will be passed as an argument to our custom sort so if i run my program now let's see what is going to happen perfect now our numbers have been sorted in the descending order so six five four three two one and we have achieved that by using a by using a function pointer okay so i hope that this video was helpful i hope that you understood what is the purpose of function pointers and how you can create and use function pointers all of this code will be in the description again you don't really have to bother with understanding what these functions are doing except for the part of how you can use a function pointer in order to pass one function as an argument to another function so i hope that you enjoyed this video if you did please give it a thumbs up for the youtube algorithm that helps me a lot to reach more people and then share it with someone else who would also like to learn programming because the topic of function pointers is not very beginner friendly so if you found this video helpful you might make a very big difference in someone else's life and you might help that person to learn programming much faster so thank you very much for watching and i am going to see you in some other video bye