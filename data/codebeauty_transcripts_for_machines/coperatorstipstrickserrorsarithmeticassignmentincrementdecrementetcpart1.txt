hi guys and welcome to my channel in this video you are going to learn about operators in programming so what are operators operators are characters meaning symbols that we use in order to perform different operations for example if you want to add two numbers you use plus operator if you want to subtract them you use minus operator and so on so there are many different operators and different types of operators in programming and in this video we are going to cover arithmetic operators assignment operators increment decrement and we are also going to learn about some of uh very sneaky and very important bugs and errors that happen to beginners but also to some more experienced developers so I'm going to explain everything that you need to know about this topic and before we continue with this video there is something very important that I want to tell you so if you want to learn practical programming and you want to start creating real applications as fast as possible and you want to get a job as a software developer then you should definitely join my practical programming course I have created entire plan for you everything is step by step all of the lessons that you need to watch all of the exercises that you need to do everything is on one place and the only thing that you need to do is to follow that plan that I have created if you're a beginner there are a lot of things that you need to learn a lot of exercises that you need to do but if you start today and follow the plan that I have created in 6 months you will be prepared to start a successful career as a software developer as a programmer you will have the option to work anytime you want any place you want so you will be able to work on a beach by the pool on a mountain also you will get the opportunity to meet some great people and you will be able to work on great projects that are shaping our future and all of that while earning a lot of money so if this sounds like something that is interesting to you then click the link in the description because I have made entire plan that you need to follow until you achieve this and there is even a special discount that you can get so more details are going to be in the description and now let's continue with the topic of today's video so let's first talk about arithmetic operators there are five arithmetic operators those are plus used to add numbers and then minus which we use to subtract numbers and then we have division operator multiplication operator and then we have this operator here which is called modulo and we are going to see how this one is used later okay so let me put this here like this so arithmetic operators and then we have these five so now let's see how each one of these 5 is used let's start with plus operator so how do you use it as we already explained it is used to add two numbers for example I can say int result is equal to let's say 13 + 12 so this here is plus operator and it is used to add these two numbers so if I print this result variable here we should get 20 5 so let's check that okay as you can see 13 + 12 is equal to 25 so that is how you use plus operator now this plus operator has another interesting use and that is concatenation for example what I can do is I can say result is equal to and then I can say here plus and then this variable so in this case because I'm using this plus operator with a number and a string what this plus operator will do is it will just concatenate those two together because it does not make sense to add a number and a text so what it will do is this so now we have result is equal to and then it simply adds this result so that is another usage of this plus operator now let's see what are some common errors that can happen for example what is going to happen if I say 13.5 + 123 as you can see immediately we get this red squiggly and it says cannot implicitly convert type double to int the reason is because here we are trying to add decimal numbers but we are trying to store that result into an integer variable and that cannot be done so even if I do something like this 13.5 + 12.5 the result is going to be an integer number but we still cannot do this so if you want to perform operations on decimal numbers you need to use correct data type in this case that can be double so as you can see now we don't have error anymore if we are working with decimal numbers then we should use decimal data type which means float double or decimal in order to store the result of that operation and if you don't know about data types then please watch this video there I explained all of the important data types that you need to know about and it will also be linked in the description so now if I run this program we get 26 which is the correct result of this operation so that is how you use plus operator minus operator is very similar so if I say 13.5 minus 12.5 and I run this program as you can see we get one which is the correct result but what do you expect to happen if I do something like this if I say for example 13.5 minus 12.3 so what do you expect to get as a result of this operation let's find out let's run this program and as you can see we get this result here so we get 1.1 1999999 and so on but as you already know from the regular mathematics the result should be 1.2 so now the question is why do we get this number here it's very weird well the answer to that question is because you have learned mathematics wrong and this here is the correct result I'm just kidding that's not the reason here is the explanation of why are we getting this result as you already know everything that your computer does it does that in binary numbers so only ones and zeros now some decimal numbers are extremely hard to represent in binary format examples of those numbers are 13.5 12.3 and 1.2 and many other numbers as well so just to demonstrate that let me find a b binary calculator on the internet and then I'm going to show you what I'm talking about so here is a binary calculator and what I want to do is I want to try and convert 1.2 into binary number because that is what your computer works with so if I say convert this is the number that we are going to get this is 1.2 in binary format it has 21 digits whereas in decimal format we need only two digits to represent this number so let's copy this number okay and then I'm going to delete this and let's try to convert it back so from binary to decimal so this is the result that your computer got and now it is trying to show it to you because you understand decimal so this is what you will see so this is not 1.2 this is as close as your computer can get to 1.2 and for that it is already using 20 one digits so if you want even higher Precision if you want to get even closer to 1.2 what you can do is here you can add more digits so if I say convert we get even closer and then I can add even more digits and this will take us even closer to 1.2 so if you really want to represent 1.2 then you would have infinite number of digits in binary format that you need in order to represent that number and it is really not possible to store infinite number of digits in any variable so the only thing that your computer can do is it can get as close as possible which is this number here or this number here or this number here and so on but the more digits that you take the more memory you are taking so I would say that this number here is close enough so now that you understand why this is happening let's see how we can show this number in a format that is normal and understandable for us humans because we don't really want to see 16 or 20 digits we simply want to see two digits that's what we are working with most of the time so what you can do is here for this result that you get is you can use math. round this is a function that will round the number that you give to that function to as many decimals as you want and here I will say please round it to two decimals or even one decimal so if I run this code as you can see now we get the normal result the one that we expect and the one that is understandable and natural for us so that is how you use minus operator now let's talk about about division operator division operator is very interesting and it's also very tricky so let's delete this and let's simply say result and here I will say for example 15 ided by 5 so if I run this the result that we are getting is three which is the correct result nothing wrong here but let's stop the program and let me show you something else if we say for example 15 / by six what do you expect to get let's see and we get the result of two but we know that the result is not two it is 2.5 so why are we getting two here as the result well something interesting is happening here I believe that most beginners would first check if this variable here has the correct type because if this variable here was an integer variable it would be understandable why we are getting this error but this variable here is of type double so we still have a question why is this here two and not 2.5 well the answer is very interesting if you are dividing two integers or performing any operations on two integers the result of that operation is going to be an integer but if one of these two is a decimal number like this for for example then the result will be of more precise type which means this here is integer this here is double so the result will be double the same would be if you did something like this or if both of these were decimal numbers so the result will be of more precise type and if both are int then result will also be int so in this case or in this case or even in this case we are going to get the correct result but in this case we will not get correct result so let me prove that if I start the program as you can see now we get 2.5 which is the correct result okay so what is the general rule that you should remember here whenever you are dividing two numbers even if they are integers like five and two for example the the result still can be decimal number so you should keep two things in mind the first thing is that resulting variable should be of decimal float or double type so some data type that can store decimal numbers that is the first thing and the second thing is that one of those two numbers one of those two operant should be with decimal point as well like we have here so instead of 15 and six we have 15 and 6.0 okay so those are two very important things to keep in mind to avoid any errors that can happen now there are some more interesting things when it comes to this division operator and that is for example this so what do you expect to happen if I say this 15 divided by 0 what is going to be the result of this operation as you can see immediately our compiler gives us this little red squiggly and it says division by zero that is for bden and this does not have anything to do with computers and programming this is just mathematics so in mathematics dividing by zero is forbidden so in computers in Computing and programming it is forbidden as well but there are ways to trick your computer and to still make it divide by zero so let me show you that so instead of doing it directly like this what I can do is I can say for example double number one is equal to 15 okay and then double number two is equal to zero so then what I can do is I can say number one divided by number two so now your computer does not really know which numbers you are dividing so it cannot give you that red squiggly but you will get an error in runtime so when I run my application as you can see result is and then question mark I have no idea what the result is again because it is forbidden to divide by zero and in your computer you maybe get that little um infinity symbol and that is absolutely the same it's just a way for your computer to tell you hey I have absolutely no idea how to divide these two numbers because it is forbidden to divide by zero so always remember that when you are using this division operator so let's talk about the next operator and that is multiplication operator I am going to delete all of this code we don't need it multiplication operator is very simple so 12 multiplied by 13 and we get a simple result nothing really special here so 1 5 6 and if you want to multiply decimal numbers 12.4 multiplied by 13 again the result needs to be of type float or double or decimal so you cannot store the result of this in an integer variable that is just one important thing to keep in mind but if I run this we get the result that we want and again because it is very hard to represent decimal numbers in binary format we still have this little Precision error but if you want to represent this in a format that is understandable to us humans without this many decimals what you can do is again you can say math Dot round and then this result that you want to round you put that inside parentheses and then you say how many decimals you want to have if you say for example two or one decimal that is going to be the format that is understandable to us humans and then you are going to get the correct result okay now let's talk about this operator here it looks like percentage symbol but it is called modulo operator and in real life it's not used that much but in programming it is used very very often so this modulo operator is used to give you the remainer after you divide two integer numbers so when you divide two integers what remains after that division so let's delete this let's return just result like we had previously and here I'm going to say int result because we are dividing two integer numbers so the result is also going to be integer and to demonstrate this let's say for example 10 modulated by 3 so what this here means is let's say that you have 10 apples and you want to divide them equally among your three friends so how many apples will remain that is the result of this modulo operation so if I run this as you can see result is going to be one so if you have 10 apples you divide them equally among your three friends what remains is one apple and that will be the result of this operation okay let's stop my program now when is this modulo operator used because I said that in programming it is used very often but in real life not so much so the situation when you use this modulo operator most often is to check if a number is even or odd how do you do that well if you divide any even number with two the remainder is going to be zero but if you divide any odd or uneven number with two the remainder is going to be one so by using this modulo operator you can easily check if the number that you are working with is even or odd and this is used in many different calculations formulas and so on so just to prove this if I run my program here we get the result of one which means that five is an oddd number but if I put an even number here for example six and I run my program we are going to get the result of zero which means that six is an even number okay so with this we have covered all of the arithmetic operators and now let's talk about something very important and that is operator priority so what is going to be the result of this 3 + 9 divided by three what is going to be the result of this operation let me know down in the comments so if I run the program the result is going to be six so let's explain why is the result six well this operator here division operator is older meaning it has priority it is executed first and then we execute this plus operators so the calculation goes like this 9 / 3 the result of that is three and then we add three to that so that is the correct order that is the correct priority and not 3 + 9 is equal to 12 and then divided by 3 so that is how some people will get the result of four but four is not correct result so we first perform this operation and then this operation here the same as in mathematics so that is when it comes to operator priority these three operators have priority over these two operators here so now I have a question for you and that is following what will be the result of this operation 5 + 7 modulated by 3 let me know down in the comments okay so if I run the program as you can see the result is six and the reason for that is because we first performed this operation so 7 modulated by 3 is 1 and then we add five more so that is six now if you want to change priority of these two you would do it the same way as in mathematics so you can simply put these two inside parentheses which means hey do this part first this here results in one number and then modulate that by three so now let me know what is going to be the result in the comments if I run it as you can see we get a different result because 5 + 7 is 12 12 and when we modulate that by three we get zero because 12 ided by 3 is four and we have zero remainder okay so with that we have covered everything about arithmetic operators so now let's talk about another interesting type of operator and that is this operator here you have seen it this entire time but maybe you did not think about this as an operator as well but it is and it is called assignment operator so let's put it here here let's say assignment so assignment operator and that is this operator here so assignment operator is used to assign values to variables like here for example so here we are saying hey perform this entire calculation and then you are going to assign the result of that to this variable here so whatever this here results in that will be assigned to our variable okay so with this being said You can conclude that this assignment operator has the smallest the least priority which means that all of these operations on the right side will be performed first and then once you get one result just one value then this assignment operator will assign that to our variable so it has the least priority now there are some more interesting things that I want to show you some things that really make sense in programming and programmers use them very often but they absolutely don't make sense in real life and in mathematics one of those things is the following in programming you can say in result is equal to five okay and then you can say result is equal to result + 1 for example now this formula here does not make any sense not at all in mathematics and this would be forbidden in mathematics but in programming it really makes sense so what this here does is it simply says Hey perform this calculation here this operation and once that is performed assign that again to the same variable so now if I run this code what do you expect to get so we get six as a result we start started with five and then we simply said hey add one to that and assign it to the same variable and then print the result so we get the result of six and this makes perfect sense in programming in mathematics not at all but in programming it's used very very often so the same way you can do this for plus operation you can also do it for minus operation and then division multiplication or modulo just make make sure that when you are dividing two numbers or multiplying two numbers or if you're working with decimal numbers the type also needs to be float or decimal or double so some type that can store decimal point number okay now let's return to this example here I had this situation result is equal to result + one now because programmers are extremely extremely lazy they found even shorter way to write this same thing and that is like this so they would simply say result plus equals to one and it does absolutely the same thing if I start the program as you can see again we get the result of six so now your question might be Salina why would anyone use this weird looking formula here why don't you simply write results equals to result + one well again programmers are extremely lazy and I was wondering the same question what I started learning programming but then 7 Days 10 days a month in I was using this same approach here and probably it's going to be the same thing with you so if you continue programming please come back to this video one month from now and then tell me if this here is better or if it is better to write result equals to result plus one and so on so I prefer this option here okay and this operator here is another assignment operator that performs both adding operation and assigning operation so whatever is on this right side it will add that and assign it to this result here so I'm going to add here plus equals now the same way that we have plus equals we also have minus equals and then we have divide equals and multiply equals as well and as you might guess it result minus equals one will simply subtract one from this result here so if I run the program as you can see we get four okay and then if I say for example result multiplied equals by two and I run the program as you can see we get the result of 10 and then if I say result divides equals two what do you expect to get Let's see we get the result of two so can you remember those two important rules that we were talking about when we were talking about dividing numbers well we said that the variable needs to be of type double so something that can store a decimal point number so now if I run this code we get the result of 2.5 another important rule was that at least one of the two operant needs to be of type double as well and in this case it is because one operant is resoled it is of type double and then another operant is two and that is integer so at least one is of type double so that is the reason why we are getting correct result here okay and then also not to forget here we have modulo equals as well so these are assignment operators and they are just just a shorter way to write these arithmetic operators plus assignment operation as well now let's see more things that programmers do because we are lazy I'm going to show you increment and decrement operators so let's put those here we have increment and decrement so increment is Plus+ and then decrement is minus minus so how these two work well here we have have a variable called result so what I can do is I can simply say result Plus+ and then if I print result let's see what are we going to get so we are going to get six because what this increment operator does it it simply increases this variable by one and then if I say result minus minus that decreases this value here by one so now I will get the value of four so those are increment and decrement operators plus plus and minus minus plus plus to increase the value by one and minus minus to decrease the value by one so now your question might be Salina why why are programmers so lazy why do you have to have an entire Operator just to increment value by one or decrement it by one why do you need all of that I'm sorry I did not invent this but it is pretty useful I have to say why well because now what you can do is instead of writing this an entire line of code you can simply say this so in the same line of code you perform some operation okay so now if I run the program what do you expect to get let's check hm something weird is going on here we still get the result of five but we have decreed incremented this variable shouldn't it be four well there is something tricky going on here and that is the difference between this which is called post decrement and this here which is called pre decrement so what is the difference well it has to do with priority of execution this here will be executed first and then it will print this entire value but in this situation we will first print this value and then we are going to post decrement which means that in this situation if I run the program I get the value of five but if I copy this line of code one more time and I remove this decrement operator and I run my program again as you can see in the first line we get five and then we at four the reason for that is because we first print this and then we decrement so when we print for the second time we get this value of four so that is the difference between post decrement and predecrement okay and then the same applies for pre increment and then post increment Okay so so that is how increment and decrement operators work they simply increase the value by one or decrease the value by one and then depending on where you put them if you put them after the variable they have smaller priority and if you put them before the variable they have bigger priority which means that they will be either be executed before or after you do whatever you want to do with that variable now a tip that I would give you and something that is practic in programming is that these increment and decrement operators are most commonly used with integer variables as you could see it can still work with decimal numbers but most often it is used with integer variables and just to make sure that you avoid any Precision errors that I already demonstrated ones where we have a lot of decimals make sure that you are using these operators with integer numbers so both preincrement and predecrement as well as post increment and post decrement So to avoid any Precision errors or computation mistakes like I demonstrated previously make sure to use them with integer numbers also these increment and decrement operators can be performed only on variables you cannot say five ++ or five minus minus these don't work with constants as you can see we get this red squiggly okay okay so increment and decrement operations can be used only with variables not with number constants like I have demonstrated here so now I want to talk about another very important topic and very sneaky bug that happens to a lot of beginners and also to some experienced developers and that is Overflow and underflow so what are overflow and underflow let me explain let's create a variable here and let's call it int Max and inside this variable what I want to store is going to be maximum value of an integer number so this here will give us the maximum integer number that can be stored inside this variable here the same way we have int Min so here I can say please give me the minimum value the smallest value that an integer can have and that I can store inside this variable here so now let's print these two let's say int Max is equal to and let's print this variable okay and then let's also say int Min is equal to and let's print the other variable so int Min so now if I run this program as you can see int Max is this value and then in Min is this value I'm not going to try to read either one but it's too billion and something okay so what is going to happen if I do something like this if I say hey please preincrement this in Max so increment it and then write it or if I say something like this hey please predecrement this minimum value what do you expect to get I don't know let's run the program okay and something very weird is going on here so for inmac we get this really small number and then for INT Min we get this really big number this does not make sense so why are we getting these two values the answer is underflow and overflow so here we previously had the biggest value that an integer can hold and then we added one more to that so the behavior is like a clock you go from 1 2 3 4 5 and so on until you come to 12 that is the biggest value and then if you add one more to that it will simply overflow and go to one again so that is exactly what happened in this situation and then in this situation here we had the biggest value and then we added one more to that so it simply went to the smallest value and then here we had the smallest value and we tried to decrease that by one so it went to the biggest value just like clock and clock in reversed order so that is what overflow and underflow are and this here is not the only way to get these overflow and underflow errors these are very sneaky bugs that you can get in many different situations for example if you are trying to um add two numbers that are very big the result is going to be even bigger so that can overflow or if you are trying to multiply two numbers it's even easier to get an overflow or if you are trying to subtract two numbers that are very small so uh very big negative numbers uh the result of that is going to be even smaller so that can underflow and so on so you should be very very careful in these situations because these types of bugs your compiler is not going to tell you about these bugs but you will get logical errors and logical errors are more uh serious they are much more dangerous if you have them in your program than compile time errors because compile time errors can be fixed you cannot even run your program before you fix them but logical errors usually in programs result in money loss or client loss and very very serious problems just to give you an idea of this in real life imagine the following situation let's say that you are writing a program for a bank and you decided to represent the account balance of some person with an integer number for whatever reason so that person is very rich so he ends up adding more and more and more money so at one point that value is going to overflow and all of a sudden he's going to be in negative he's going to have negative amount of money which is a big problem but I believe that even bigger problem is if some person has very big debt so his money is in minus and then he takes more debt and then all of a sudden his money underflows so all of a sudden he has a lot of money even though previously he was in debt so I believe that is even bigger problem for a bank uh so you should be very very careful when you are deciding which data type to use my suggestion is if you suspect that the number is going to be either too big or too small then please use more precise bigger data types like double or decimal and then there are even bigger data types that you can use but for all of the calculations that you are using as a beginner these data types should be enough so decimal should be enough to store any number that you want any number that you need for any application that you are making so I believe that is going to be enough for this video in the next video we are going to continue talking about different types of operators because there are many more operators uh also if you want to learn about different data types that I mentioned then I'm going to link that video in the description make sure to watch it and then if if you want to learn practical programming if you want to learn how to build real applications and if you want to get career ready skills so that you can start a successful developer career and if you want me to be your Mentor in that process and to prepare you and to help you to achieve your goals then enroll in my practical programming course the link is going to be in the description and currently there is even a special discount if you decide to enroll now so with that being said thank you very much for watching and I am going to see you in some other video bye