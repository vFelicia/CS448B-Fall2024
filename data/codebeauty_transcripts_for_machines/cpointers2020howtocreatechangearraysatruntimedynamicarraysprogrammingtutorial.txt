hi everyone welcome to my channel my name is saldina and i make i.t and programming related videos so if that is something that is of interest to you consider subscribing to my channel and give this video a thumbs up as well and in this video i want to talk about dynamic arrays so you should already be familiar with the idea of arrays and the concept of fixed arrays from my previous videos but for those of you that really want to understand the need for dynamic arrays i will go through some of the advantages and disadvantages of fixed arrays so that you can really understand where the need for dynamic arrays arised so we said that an array is type of collection which stores elements in continuous memory now that means that it stores elements one after the other so if i do this for example if i say let's create an integer array of five elements and let's call that array my array like this your computer in the background will do the following it will give to this array here five containers of type int and those containers will be one after the other in memory so that means because the array stores data in a continuous memory so one after the other accessing that data will be very very fast so because the name of the array is the address of the first element of that array when you specify the name of the array and then you give it the index of the element that you want to access it is going to be very fast to move from that first element until that position that you specified so until the element that has that index whereas if you use some other collection type like linked list for example which stores data in noncontinuous memory which means in a random places in memory and then each element contains a pointer to the previous one and to the next one accessing elements in those type of collections would be much slower so if you wanted to access fifth element of linked list you would have to traverse the first four elements and then get to the fifth one because they are stored in noncontinuous memory meaning they are randomly in your memory so as i already said accessing elements of an array is a very very fast operation but because your array stores data in continuous memory this has certain disadvantages as well so what happens if you want to insert or delete an element in the middle of the array for example so how can you insert or delete an element in the middle of the array without breaking that continuousness if i can say it like that so you get the point that means that the operation of inserting and deleting elements in an array is going to be much slower than inserting elements in a linked list for example and if you want me to do a video which is related to differences between linked lists and arrays for example write it in the comments down below and i will make it in the future when i find time so again if you are not familiar with the basics of arrays i recommend you to watch my first video which is related to arrays and pointers which i will link here and then you come back to this one so those were some advantages and disadvantages of arrays and it will be up to you to decide which collection you want to use however here i want to give you the biggest disadvantage or the biggest obstacle that we encountered so far when working with arrays and that is the following so the size of the array had to be constant which means that the size of the array had to be known before we even started our program so we always kind of wanted to do this so we wanted to say int size and then we wanted to ask our user to enter the size so please enter the size for the array and then after our user enters the size for the array we wanted to create the array that is of that size that our user specified however we get the error as you can see here it says expression must have a constant value which confirms what i just said which is that the size of the array had to be known at compile time so the size of the array could not be changed once we declare it and we had to declare it before we even started our program so this problem was without solution so far but surprise surprise if you know how to work with dynamic arrays and dynamic memory you can very easily create an array and runtime so in c plus there are two keywords or two commands which allow you to allocate and deallocate dynamic memory which means to get yourself dynamic memory when you need it and then free that memory once you don't so that it can be reused that is what allocate and deallocate means and those two commands are new and delete so new allocates memory as you may guess and then delete deallocates that memory or freeze it once you don't need it so let's see how we can use this information that i just gave you on our example so instead of doing this here i will comment it because we do not need it instead of doing this what i will do is i will create a pointer like this and let's call that pointer my array and what i want to assign to this pointer will be the following i will say please make this pointer point to new integer array and the size of that array will be the size that our user entered like this okay and as you can see our compiler is fine with this expression here we do not have an error so this new keyword has allocated an array of this size that our user has specified and that array the address of the first element of that array is stored in this my array pointer so if i build this code as you can see we do not have compile time errors so what i want to show you now is how we can enter elements for this array and then how we can write them out and this is array again this is array which is created at runtime so our user will specify the size of this array which is something that we were not able to do before we learned how to use dynamic arrays so uh in order to enter elements for this array here as we already know we will be using for loops so i will say four please iterate from the element which has index zero until you come to the element that has the index of this size okay and then in each iteration increase our counter by one and what i want to do is i want to write out a message for my user so i will say array and then let's add index of the current element index that our user is entering so i like this okay and then what i want to do is i just want to enter an element on that position that we are currently iterating so i will say my array of i like this so using this code here we should be able to enter elements in this array here and then in order to write these elements out what i will do is i will use another for loop so i will just copy this one and then paste it here and in this particular situation i just want to write out so i will use c out command and then these other redirection signs so i just want to write out all the elements of the array and i will add a few empty spaces after each element so that we have a nicely formatted output so this loop here should write out the elements of our array and if i start this program now as you can see it asks us to enter the size of the array so let's say 5 for example and now we are we are entering element with index 0 so let's say 2 5 7 9 and let's say 11 okay and as you can see here we have the elements of our array written out and we wouldn't be able to do this if we didn't know how to work with dynamic arrays so let's stop this program and there is one more thing that i want to mention and that is following these square brackets here are only one way to dereference your array another way to dereference the array or to to access the element on a specific position is the following so so the other way to access the element on a specific position would be using this asterisk symbol and then here you say my array plus i now because the name of the array is the address of the first element here you have the address of the first element and then when you add a certain number to that it will move that many spaces in memory and then access the element on that position and when you dereference that you will get the value of that element instead of its address so here is one way to dereference your array and then here is another way to dereference your array and you can use whichever one you prefer and if i run this program again just to demonstrate that it works the same let's say three and then one five ten okay we get 1 5 10 as the elements of our array one very important thing that i mentioned at the beginning is that we have two commands for working with dynamic memory and one of those two commands is new so we said that new is a command which will allocate memory for us when we need it and then another one is going to be delete and delete is a command which will deallocate that memory when we do not need it so that it can be reused now using dynamic memory comes with a responsibility and that responsibility is the following each time that you allocate memory when you need it you will have to deallocate that memory once you don't so that that memory can be reused so that means that each time that you write new command you will have to write delete command once you don't need that memory anymore so i will demonstrate how can you deallocate the memory that we have allocated for this my array so let's say that here in this line of code we do not need our array anymore so how can i deallocate the memory that i allocated for this array well using delete keyword and i will say please delete the memory that i allocated for my array which is called my array like this and you have to specify these square brackets because that is the way that you allocated memory so here you said i want new array and then here you have to say please delete that array and a good practice is to do the following as well so you can say my array is equal to null like this and let me collapse this so this here is going to assign the value of null to your array so your array will not point to anything to any address at this line of code so why do we do this because in the previous line of code we have deallocated this array here and now in this line of code here your array will point to a location in memory which does not belong to you so it does not belong to your program and because of that because we do not want to cause some accidental crashes or problems in our program by having this array pointing to memory locations which are not ours anymore it is a good practice to say that our array is now equal to null which means that it is not pointing to anything so as i already said and i repeat again when you use dynamic memory each time that you write new you will have to write delete that corresponds to that new so here i have allocated an array and here i am deallocating that array so i hope that this video was helpful and that this video helped you understand what our dynamic arrays and how they work and now that i have explained this it opened the whole world of new possibilities and new things that you can do with dynamic arrays and i will leave to you to play and discover those new things until my next video of course so thank you for watching this video give it a thumbs up if you liked it subscribe to my channel click the bell icon as well and i'm going to see you in my next video bye