hi everyone welcome to another video of C++ for beginners in this video I wanted to talk about operators in C++ and we are going to cover the ones that are used most at the time but I'm also going to make a separate video for certain operators that have specific use at C++ so in this video we will talk about the ones that are used most of the time and that you really need to know and understand and also make sure to watch the entire video because I do have some important tips to give you when it comes to this that you really need to understand that you will find handy for your future progress and learning of programming the first thing that I wanted to explain is what are operators you can understand operators a special type of functions that are used to perform certain calculations on arguments or operands and then based on those arguments and on that calculation they give you a new value so the first type of operators that I want to talk about are arithmetic operators and you are probably familiar with most of these so there is operator of adding and subtracting multiplying dividing and also one more operator that you may not be familiar with which is the modulo operator so all of these are automatic operators and let me give you an example of how these are used so I'm going to say C out and then let's write out the result of 5 plus 2 now let's add one end line ok so this here is the operator of adding and then these two are operands or arguments and this here is going to perform certain calculation and then write that out to my console so if I run my program we get the expected result which is 7 so these really behave as you would expect them to behave in maths but there are certain rules that are specific to programming and that I want to mention so this operator here operator of dividing let me give you a simple example if I say see out and then 5 divided by 2 and I add n line what do you expect to see in this line here write it in a comment down below now I'm going to run my program and you see that the result that I've gotten from this line here is 2 but why has that happened we know that 5 divided by 2 is 2 point 5 well there is a certain rule in programming that says that the result of dividing 2 whole numbers like this so 5 is whole number and then 2 is also whole number is also going to be represented as whole number so even though the result of dividing ds2 is 2 point 5 that point 5 cannot really be put inside integer variable so it cannot be put inside integer container so just two can can be put here and that point 2 is really lost if you want to show the real result of dividing these two what you have to do is you have to make one of these two or both of them off a different type and that type is going to be decimal point number so float or double so if you put here 2.0 or you put here 5.0 then in this case you are going to get the result represented as decimal point number so you can use it like this or you can make just one of these of a floating point type so you can say also like this and then if I run my program now you see that now I have got the expected result so two point five that is one rule that you really need to know when it comes to this division operator and another tip that I want surely is this operator of modulo so how do we use this modulo operator this example here that I've just shown you shown you let me return this to death situation where when dividing two whole numbers and we've just seen that five divided by two is going to result as 2 and that one that remains we can get that one really with this operator here so if you say see out and then 5 modulo to add my this operator here is going to give you the remainder of dividing 2 whole numbers which are these two so the result of this operation is going to be that one so let me run my program and you see that we have gotten that expected result so 5 divided by 2 when it comes to full numbers if you're dividing whole numbers the result is also going to be whole number and in this situation it's going to be 2 and then that remainder after dividing 2 whole numbers you can get with this modulo operator and the remainder of the after dividing 5 with 2 is 1 and you get it with this operator here so these 5 are really our metic operators and these are these are also called binary arithmetic operators why binary well because they are all used with two operands they perform their calculation on two operands there is also another type of arithmetic operators in C++ there are used or the perform calculations on only one operand and those are unary operators the examples of unary operators in C++ are this operator here which is operator of increment and then this operator here which is the operator of decrement so how these are used let me give you an example so let's create a variable of type int and let's call it counter and I'm going to assign to that variable a value of 7 for example so how this operator of increment works is it really increases the value of your variable by 1 so if I say counter counter plus plus what this operator is going to do it's really going to add +1 to my counter variable so 7 plus 1 it should in this line here increase value of my counter variable to 8 and let's prove that see out counter and then let's add 1 and 1 ok if I run my program you see that we've got expected result so 8 we've declared a variable of type int called counter we've given it a value of 7 and then in the next one we applied this increment operator to it which had increased its value plus 1 so 8 and then as we write out that value of that variable we get our result so that is how this increment operator is used this decrement operator so counter this decrement operator here works reverse so it really subtracts 1 from this variable here and if I copy this line here and that based it after this line here our counter should be decreased by 1 so the value of our counter should really again be 7 and if I run my program like this you see that we've gotten our 7 so we've gotten the expected result however there are specific rules when it comes to these increment and decrement operators and let me explain what I mean on another example so I'm going to create another variable of type ill int call it counter and let's assign it also a value of 7 and what I want to do with this variable here is I want to write out its value but I want to write out and increment its value in a single line so I want to do this so see out counter 2 plus plus and I'm missing this redirection sign here okay so what are you expecting to see in this line here we've seen that this line here has resulted with 8 and this line here should also result in eight let's see okay run my program and it didn't in this line here we have written out seven but why does that happened well this operator here is increment operator but it is really post increment operator and what that means is that whatever operation needs to be performed on this variable is going to happen first and then this increment operation is going to happen so that is called post increment another type of increment is pre increment and it is used like this okay and this pre increment means that whatever operation needs to happen on this variable here first I'm going to increment it and then I'm going to perform that operation so if I run my program now you see that we now get our eight same as here and that is because we have used this pre increment which first has increased our variable and then our variable is written out okay and the same is applied for decrement operator so for example if I say see out counter and then oh my god again okay and then if I run my program do you see that we have gotten the same value for this line in this line so hey and why that has happened is because we have used this post decrement here so first our variable has been written out and after that the value of that variable has been decreased so just to prove that I'm going to say one more time see out and then counter without any increment or decrement just to prove that the value of this variable has been decremented after it has been written out so if I run my program again you see that this line here has resulted in eight and then this line here has resulted in seven okay so you see that our console now is full of some random numbers and it's really making it hard to read so what I want to do is I want to clear out my console but without deleting this code here so how I'm going to do that I'm going to use a command that is called system and then inside these parentheses I'm going to say CLS which really is going to clear my screen so if I run my program you see that all of our code is still here but console has been cleared so that's because of this command here that's a quick tip if you need to clear your console another type of operators that I want to talk about our relational operators and these are really used to compare the value of two operands so two arguments and relational operators in C++ are following so we have less than and then we have greater them and then less than or equal to and then greater than or equal to then we have just is equal to operator and then we have not equal to so these six are relational operators in C++ and how these are used to let me show you in an example so let's say that I'm going to create a variable of type int call it a yeah let's assign it the value of five and also create another variable that is called B and assign it a value of five so now if I say C out and then inside these parentheses I'm going to say please write out if my my variable a is greater than my variable B so if if my five is greater than this another five okay and I'm using these parentheses because I want my C out command to know that this here is one expression the first should be calculated and then whatever this expression here results in I'm going to write that out in my see out command so if I run my program now you see that we have gotten zero and if you know about how computers work you know that they work on zeros and ones meaning that zero represents false and then one represents true so in this situation we have gotten a result of false so when I ask my computer is my hey greater than might be so is 5 greater than five it says false no it is not okay and the same is going to happen if I put here this other operator of less than like this but if I for example put less than or equal to so this operator here and I run my program again you see that now we have gotten a result of one so that is true that is what our computers computer considers as true so our 5 is less than or equal to 5 which is correct and even better would be if we say just is equal to and in this situation also we are going to get true as a result like this because 5 is equal to 5 and then how we use this operator here is like this so you can say is my a not equal to my B and your computer really hears is my 5 not equal to my 5 and the response to that is going to be no it is false because these two are equal it's the same number even though it's held by two different variables ok I hope you understood these relational operators and there is also one tip that I want to give you here and that is you see this comma sign here this is also operator in C++ and it is not relational operator but it is binary operator and how this operator is really used because we have seen it before without knowing that it was an operator it is used as follows so in this line here we have said please create a variable of type int call it a and assign it value of 5 and then also so that is the purpose of my comma so also create another variable of type int call it B and assign it value of five so my comma in this situation is operator and separator as well so it is pretty intuitive so before we continue let's add one more of these clear screen commands here and the next type of operators that I want to talk about are logical operators and there are three of those so we have logical and and then logical or and then also not operator so these three are logical operators and they are usually used to combine two or more conditions into one single condition and I'm going to show you that on an example and let's use for that example these variables here let's just change the value of our B to 8 for example so what I want to do is I want to write out following so is my age is my a equal to 5 and then also is my B equal to Phi I want to write out the result of this expression here and you see that we have used our end operator to combine these two expressions so if I run my program you see that the result of this is false so that is the nature of our end operator it really works like this it says please check is my a equal to 5 yes it is and then also check is my B equal to 5 no it is not it is 8 so then this operator says ok whatever then this whole expression is going to be false because this operator here needs both of its operands so this here and then this here also both of these need to be true in order for this whole expression to result as true expression that's the nature of this and operator however there is one more forgiving operator in C++ and that is this operator here so this or operator and if I face that here instead of our end operator and I run my program again you see that this time we get different result now we have true and that is nature of our or operator so it says please check if this is true or this here is true whichever of these results is true that I'm going to be true expression only in the situation where this here is false and also this here is false I'm going to result as false in any other situation this here is going to be true so that is the nature of or operator and then we have also this not operator which really negates whatever comes after it so if I put it here for example you see that you've seen that previously this expression here has resulted as true expression now that I indicate it we are going to get false so that is our not operator here okay and there is all also one more thing that I want to explain when it comes to the Proceedings of these operators which means priority of these operators so which operator types have the biggest priority the biggest priority have arith metic operators after that come these relational operators and then the smallest priority have these logical operators so let me show you that on an example let's just comment this very quickly and let's add another line but the previous one that we had so this here like this that is the operation that has resulted as false so is my a equal to 5 and then it might be also equal to 5 and this has resulted as false but if we for example say it like this what do you think that this expression here is going to write out so if I run it you see that we have gotten one why is that so well as I've said the biggest priority have arithmetic operators so this expression here is going to be executed first so five plus three after that I already have these relational operators so this operator here and this operator here so after that comes logical operation so this expression here is going to be really is my a equal to five yes it is and then also is my B equal to eight and the answer to that is also yes so now both of these operands are true and our end operator is satisfied now and it's going to result as true operation this whole expression so you need to remember that the biggest priority have arithmetic operators so these here so these here binary and unary arithmetic operators after that we have our relational operators and then the least priority have these logical operators here let's add one more of these clear screen commands before we talk about the last type of operators that I want to cover in this video and those are operators of assignment and there are six of those and there are as follows so operator the just assigns value and then operator it adds and assigns and then upgraded it subtracts and assigns multiplies and assigns divides in a size and modulates and a size so these six are operators of assignment and let me show you how they work so first I'm going to create a variable of type and now let's call it Excel let's assign it a value of for example five okay so this here is example of this assignment operator here and that is how it works it assigns whatever is on the right to your variable on the left so that is the direction of Association it really says whatever on my right side please assign that to my left side and let me show you now how D is here work because they're a bit more complex so if I say for example X plus equals seven like this what this expression here is going to do well let me write out one more expression and that is X equal to X plus seven so this expression here and this expression here are just the same this is just shorter way to write this here and what this here does well this is expression that is not valid in mathematics but in programming it is and it does following so it says please whatever is on my right side assigned that to my left side and why it does that well because this arithmetic operator here has priority over this assignment operator so if you remember when we were talking about priority these assignment operators have the lowest priority of all so whatever is on my right side that is X plus 7 is going to be assigned to my X variable so 5 plus 7 is going to be equal to 12 and then that is going to be assigned to your X variable in this line here and this expression here is really a short way to write this here okay so I'm going to comment this out and if I write the value of my X now we are expecting to see 12 and it is the result that we have gotten so this X plus equals 7 is just going to do this so this expression here so it's going to add to my X this number here and the same applies to these operators here so this one that subtracts and then assigns or multiplies MSI's divides and modulate so if you say for example X minus equal to 7 then that is really going to result as X is equal to X seven and then that right side is going to be assigned to your left variable because our automatic operators have priority over these operators of assignment and if I run my program again it really sees five minus seven and that is minus two so I hope that you have understood these examples that I've just given you and I'm also going to include some more examples at the end of this video but the tricky was so that you can be sure that you have really understood these operators in C++ because they are used very often and you have to understand them in order to continue with your progress on a programming pad so make sure to do those examples on your own and if you come across any problems or you have any questions that are related to this video radios in the comments down below and I'm going to answer them I'm going to help you and if you liked this video make sure to subscribe to my channel and also click the bell I consider to our first be notified when I publish my next video and I'm going to see you in my next video bye