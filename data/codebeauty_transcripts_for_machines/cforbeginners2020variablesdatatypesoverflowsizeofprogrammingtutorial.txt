hi guys I hope you are all well and welcome to the second video of C++ for beginners in this video we are going to talk about variables data types and also I'm going to explain how you can enter data in your program and how that data is encoded into numbers using something called ASCII table so here I have opened Visual Studio and if you are not familiar with Visual Studio or there is some code that you see here but you don't understand it I would recommend you to watch my first video of this course the link is going to be in the description of this video and then come back to this video so let's talk about variables now what is variable well I like to explain it to a reallife example for example you see this glass here well what I can say about this glass is that it is a container for a certain type of liquid so it can hold water milk tea juice whatever you want really and the same way a variable is a container but for a certain data type so you can put whole number inside that you can put character or a decimal point number or a boolean value meaning true or false value so they are the same in this aspect another thing that I can say about this glass is that it defines a maximum amount of liquid that it can hold so it has a max limit and if you put too much it will overflow the same way with variables variables also define a maximum amount of data that they can hold for example if you have a whole number variable well there is a max number limit for that variable that it can hold and also if you put too much it is going to overflow it is literally called data type overflow so it is a container the same as variable and also it defines a maximum amount of data that it can hold but how much data you really put inside that variables so the same way would with the water inside this class if you decide to put 1/3 or 1/2 or 2/3 of this glass the same way is fit variables you can put however much you want as long as you don't put too much because then it's going to overflow one thing that is different though between variables and this glass is that you can put one day inside this glass you can put water the next thing you can put juice the next day you can put milk vanity or even you can mix two liquids but with variables you cannot do that at least not with once in c++ there are certain languages that you can do that with and there is also advantages and disadvantages when it comes to that but in C++ you cannot put two different data types inside one variables and you can also not change a data type of variables once you create it so let me show you what I'm talking about on a practical example let's say that you want to create a variable that is going to hold your annual salary well that variable is definitely going to be a decimal point number or also floatingpoint number that's how it's called in C++ and the type that is used for that is called float so I'm going to say float and then I'm going to give a name to that variable since we said that is going to hold our annual salary we are going to call it annual salary okay and then we are going to assign it a value and that value is going to be let's say 50,000 point 99 so now what I have done here is I have created a variable called annual salary I have said that that variable is going to be of type floating point number and then I have put inside that variable 50000 point 99 so now let's see how we can based on this variable based on our annual salary how much our user is earning every month so what we are going to do is we are going to create another variable we are going to call it monthly salary and we are going to assign that variable a result of dividing this annual salary with twelve months so we are creating a variable of type float also since the result of division usually can be also floatingpoint number or a decimal number and because of that we are using also float type for our monthly salary variable so I'm creating monthly salary variable and I'm going to say that that variable is going to hold result of this expression annual salary divided by twelve months and now we have result of this division inside this variable and what we are left to do is to write that result out to our user so I'm going to say C out since that's the command that we use to output data to console and I'm going to say your monthly salary is and I'm going to say monthly salary so one thing to notice here is that when you are writing out strings or when you're writing out data like this you use quotation marks but when you want to write out value that you are holding inside a variable well then you just put the name of your variable you don't use any quotation marks then and now we can run our program and let's see what's the result that we got you see here your monthly salary is four thousand one hundred sixty six point 75 so if you want to check that out you can you can calculate it in your calculator one thing that that bothers me in this program is that we have hardcoded this value here so we have hardcoded coded this 50,000 point 99 not every one salary is 50000 point 99 and what if we wanted our user to enter what his salary is during the execution of our program so when he runs our program our program should ask him what is your annual salary and then he enters that salary and then we calculate his monthly salary based on the number that he has entered so I would like to upgrade this program now to work like I just explained and how we are going to do that well first I'm going to delete these 50,000 point 99 ok and then we are left with this situation here so it says float annual salary that means that I have just created a variable called annual salary and I have said I'm going to put a floatingpoint number inside that variable but I have not assigned any value to it yet so here we have a container for our annual salary and that container doesn't hold any value and if we try to run our program now what do you think that we are going to get write that in a comments before I run this program and now I'm going to so pause the video and think about it and then write write your answer in the comments and now I'm going to run the program and you can see that we have some build errors as this here this window here says so let's see if we open this part here it says we have one error and that error is uninitialized local variable annual salary used what that means is that this expression is expression here if you see this green underline it also says using an initialized memory annual salary well that means that this expression here our computer doesn't know how to do this expression since we haven't assigned any value to our annual salary variables so it doesn't know how to divide that that with well since there is no value inside that container inside that variable so this causes a compiler error and whoever has written that compiler error is going to cure he was right so how we have to what we have to do to correct this is we have to ask our user to enter his annual salary so what we are going to do now is let's see first command that we use to output data from our program into our console is C out so console output and the command that we use to input data is console input or C in so I'm going to say C in and then we use these other redirection sides and then we say what is the variable that we want to store what our user has entered and I'm going to say annual salary so what I have set here is our user is going to console inputs the data and then whatever he has imported you have to redirect that inside our annual salary variable so now if I run my program now you see that our program runs now so there is no compile time error and also our cursor is blinking well it is blinking because it expects here our user to enter annual salary but this is not really clear to someone who has not made this program so what we have to do if I enter some value now well it is going to calculate it correctly but this is not really user friendly so what we have to do is we have to write a message to our user before he enters anything so that he knows what he should enter so before this C in command I'm going to say C out and I'm going to say please and turn your annual celery okay and now if I run my program you are going to see please enter your annual salary and the cursor is blinking waiting for you to enter the value and if I say for example 40,000 you see that your monthly salary is 3 3 3 3 3 so the program has calculated your monthly salary and the number is based on whatever our user decides to input so we have upgraded our program and there is also one more thing that I would like to show you when we are doing this example and then is let's say that we want to calculate how much money our user is going to earn in 10 years so let's say see out in 10 years you will earn and now we have to put a value of how much money he is going to earn and if you look at this situation here we first created our monthly salary variable and we then assigned it a value of annual salary divided by 12 but there is another way that we can write out results of expla expressions without creating any variables if that is what we need and that is just here so in this line in 10 years you will earn you are DS redirection size and then you see expression that you want your computer to calculate and what we want to calculate is how much our user is going to earn in 10 years so that is annual salary times 10 and if you do it this way so if you don't decide to create a variable then you will not be able to use the result of this expression later in your program so you don't have a container that holds this 10 year salary but you have a container holds annual salary and monthly salaries so each time that you want to to write out or do something with your tenyear salary you will have to write this expression while if you want to do something with your monthly for you have a container that is holding that value directly for you and you can access it so if we run our program now you see it expects us to enter our annual salary let's say 50,000 and you see here your monthly salary is four thousand one hundred sixty six point sixty seven and then in ten years you will earn what is this half a million so okay one thing that we are missing here at them and that you can add is end line or backslash n so you can add it here and your program is going to format your text nicely so this line should go here like this if I add here one more end line and if I run my program again you see after 50,000 and now we have our text formatted nicely because of this n line that I have just added let's now create another variable and this time we are going to create a variable of type character so char that is the type that is used for character variables in C++ it's called char and let's name our variable character and when you want to assign a value to a character variable and C++ what you use is these single quotes like this if you see this example here when we are writing out text so string of text we use these double quotation marks but when you want to assign character value of character variable we use these single quotations like here and there are also some more when it comes to naming your variables and the most important one in my opinion and the most important one to make it easier to you is to name your variables according to their purpose so give meaningful names to your variables that is really really important for example you see this monthly salary variable here we could have as well name this variable blah blah blah and copy it here also because we are having compiler error right now because our compiler does not know what this variable really is you see it says identifier is undefined because you have not created this variable here because it supposes that it is a variable but it has not been created before so it does not recognize what this variable is so we have to copy the new name here also and now our compile time error disappears and this here this name does not represent anything to your computer's so your computer is now going to run your program and your program is going to work just the same as it did before but this is really making it hard for you to understand what your code is doing and especially if you come to this for example in ten days or someone else tries to understand your program this is really hard to read and he will just try to uncover really what your program is doing without understanding it because you have used these bla bla bla names for your variables the same situation would be if you for example have three boxes inside your kitchen and you use one for storing sugar and flour and salt and instead of naming those sugar flour salt respectively you decide to name them red box green box and blue box and then and someone else comes to how someone else comes to your program he does not really know where to find sugar because red does not mean that that box is storing sugar so you should name that box sugar box because imagine how three is easily easy to remember but having ten boxes or ten variables or a hundred of them or even a thousand which is very common inside large programs so what you should do and I am going to do is return that previous name so monthly salary and here also so you should give meaningful names to your variables that is very important and that is the first rule the second rule is that well the second and third and fourth are the rules that you will have to obey in most cases because if you don't then you are just going to get a compiletime error in 99% of the cases let's say and I'm not going to say what that 1% is because I want you to obey these rules so when it comes to naming your variables another thing is that your variable names cannot contain any special characters except underscore so like this this here is valid name to our variable but if you try for example to name your variable like this so you say plus character you see that here in this error window it says expected an identifier so you cannot use this to name your variable or this you cannot say character with this inside it so character sir so these signs these special signs are used for something else there are operators inside C++ and you are not supposed to use those inside your variable names if you really want to use some special signs what you should and can use is underscore like this so this is the only sign that is allowed and that I recommend for you to use for naming your variables that's the second rule the third rule is that your variable names cannot begin with numbers like this so you cannot say eight character for example it also says expected and identifiers but what you can do is you can say for example character eight that is a valid name so a number can be on any other position except on their first position so this is a valid name for a variable so you can put also number here so you can say for example C 12 character 8 but again what does that really mean that is not a meaningful name for a variable so again we come to the first rule so you should name your variables according to their purpose so I'm going to return this to character name again and then we have our third rule I guess which is you cannot use space inside your variable names so for example this this is not valid and your compiler says it here so it gives you an error it does not know what this really is so you cannot use space blank spaces inside your variable names because you are going to get a compile time error and if I try to do that and I try to run my program I get the window so it says you cannot run this program you have some tax against what you should do is you should correct those errors and then you can really run your program like this okay so let's repeat these rules one more time the first rule is that you should give meaningful names to your variables so name them according to their purpose the second rule is that your variables cannot contain any special characters except underscore the third rule is that your variables cannot start with numbers you can't put number on any other position but not on the first one and third rule is that a no rule actually is that your variables cannot contain blank spaces so empty spaces no no in a variable name what you should do is you should name your variables according to their purpose so meaningfully and you should also you something called camel casing what is camel casing you see how I have named this annual salary here you see that the first letter of my variable name is small water and then the next word starts with capital letter and that is called camel casing so for example you would name your variable like this first second third so like this you see that this first second third these are words inside your variable name and this F is lowercase letter that's the start letter of your variable and then each next word begins with capital letter and all the rest is lowercase letters that is called camel casing and that is something that is usually used with C++ let's talk about datatypes now I am going to delete this code so if you need this code for a bit longer you can pause the video here so what kind of data can we store in our variables well for now we are going to cover only the most basic ones the ones that we are going to use frequently and you should know that there are a lot more data types besides from these that we are going to mention here and more complex ones that we are going to cover later in these videos in this tutorial so the first one that I would like to mention is a whole number data type so integer a data type that can hold negative whole numbers 0 and positive whole numbers so the type that is used for that and C++ is called int and good example for int variable is what's a year of birth so that is an example of a whole number variable and let's say that that variable is going to hold 1995 okay so that would be an integer variable after that we have already seen this so it is a character variable so let's say char and an example of a char variable could gender for example let's call it gender and you can store F for female or M for male for example so the chart variable can store one character then the next one is boolean value meaning true or false value this is the simplest one and the type that is used to store boolean is called bull and a good example for a bull value could be for example if you want to hold in your program a variable that tells you whether your user is older or younger than 18 years 18 years old so let's call our variable is older than 18 and we can assign to that variable either value of true or false so I'm going to put true true here another variable another data type is decimal point number also called floating point number which we have mentioned before and let's create a variable of type float and let's say that that variable is going to hold our average grade so average grade and this average grade can also be a whole number but since it has potential to be also floatingpoint number or a decimal point number we are going to use a float data type for this average grade and another data type that I would like to mention for also storing decimal numbers is called double and the difference between double and float is that double is double size of float so if you remember when we talked previously about take memory space that variables take so float is taking four bytes and double is taking double of that so eight bytes so you can put much more data inside your double data type than inside float and let's say for example that if you have the credit card and you had a lot of money a lot a lot a lot of money and you want to store that value inside a variable you would use double data type so let's say double balance equals to this large number here which I'm not going to even try to read okay so these are the most common data types that we are going to use in this tutorial I have said earlier that each data type takes a certain space in memory but let's see exactly how much each of these take for that we are going to use something called sizeof operator and let's see how we use it so see out size of int is and then we write this size of so sizeof and in parentheses we pass to it data type that we want to check how much memory it is using so int and if I run my program now you see that it says that int takes four bytes of memory and if you've ever actually studied binary algebra you would know that four bytes of memory is actually 32 bits since each byte has 8 bits and as we said our int can store both positive and negative numbers and 0 also remember that so the first of these 32 bits is used to determine whether the number has plus sign or minus sign so whether it's a positive or a negative number and then remaining 31 bits are used for this value itself so let's check what is min value for our end let's write that out let's write C out int min value yes and we have reserved word for a minimal amount for INT and c++ and that is int underscore min and if I run my program now you see that it says this minus 2 billion extremely hard to read this number but you see that this is the minimal amount of inte so this number is actually 2 to the power of 31 well just quickly write these so minus 1 minus 2 minus 3 and then minus this number here so this number as I said is 2 to the power of 31 why not 32 because this onebite is used to represent this minus prefix now we should check a positive number range so we also can write int max value yes and then there is another key word in C++ 4 into X which is int underscore Max and are you expecting to see this same interval but just with plus sign so write in the comments what are you expecting to see and if I run my program you see that that did not happen and if some of you know why it did not happen I would also like to hear what you think why we have this number here and then this number here for our negative and for our positive range so different ending number and I'm going to explain why because this positive range here we have to include 0 also so in order to include one number here just let's just copy this and paste that so our positive range is going to from 1 up to let's say that it is this number but since it is including 0 also in order to include one number here so 0 you have to take one number here so this here is not eight anymore but is seven so that is why we got let's a different number for our positive and negative range because this here includes 0 also one thing that I have to mention though is that if you want to use only positive integer numbers there is a data type for that as well and data type that is yours for that is called unsigned int and it's size is the same as of int so 4 bytes or 32 bits but since it is unsigned that means that it does not use one bit for sign because the sign is by default plus but it uses all 32 bits to represent value and those values go from 0 to let's see exactly how big of a number four billion and something so see out size of unsigned int is and let's the size of unsigned in this is the data type and let's also write out what is the max value of unseasoned so let's say C out you int max value is and there is there is also a reserved word for that and that is you int underscore max so if I run my program now you see that we got four billion and something numbers so double the size of this and this is actually two to the power of 32 but minus one because we are also including zero in this range so let's check these remaining datatypes I'm going to write those out quickly and I will be back so I have written here the rest of these data types and as you can see since our bull is only true or false value one bite is enough for bull our chart is using also one byte float is using four bytes double is using eight and I'm also going to include a table with some more data types which we haven't mentioned here so if you need to check those out please pause the video one thing that I promise to show you is datatype overflow let's see what that is so let's create a variable of type int and call it int Max and let's say that I want to store inside that variable maximum amount of int so int underscore Max and I'm going to write that variable out now just to see how big a value that really is so C out in Max and if I run my program now you see that I have gotten here this to Billy and very large number actually so that is the max amount of int now my question for you is what is going to happen in this situation so C out int max plus 1 what is going to be the result of our program now if I run it so some of you may know this already some of you may not but I am very interested in reading your answers so make sure to write your answers before watching my explanation on this write those in the comments down below and if I run my program now well our number has not increased by 1 but it has went to the minimal amount of int and why has that happened well that is the data type overflow that I was talking about and how this works actually is it works the same as your clock works so it goes 9 10 11 12 and then from 12 since that is the max value on your clock it does not go to 13 but it goes back to min so 1 12 and then 1 and that is applicable here it went from the max value to men value just by adding 1 and that is called datatype overflow I already can see that this video is pretty long and I'm currently having problems uploading very long videos to YouTube so I'm going to leave for the next video explanation of ASCII table and we are also going to do some more examples and practice C++ some or so make sure to subscribe to my channel and also click the bell icon so that you are first to be notified when I upload my next video and also like it and share it with anyone who do you think could benefit from this video and I will see you in the next one