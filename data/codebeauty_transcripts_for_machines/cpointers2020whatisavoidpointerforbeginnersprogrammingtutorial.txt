hi everyone welcome to my channel in this video i want to talk about void pointers now in the previous video of this playlist i introduced you to pointers in general so i explained what our pointers and how you can create your own pointers and i said that a pointer is a special variable that can hold an address and i said as well that a pointer can hold only the address of a variable that is of the same type as that pointer which means an integer pointer can hold the address of an integer variable and then a character pointer holds the address of a character variable flow pointer of a float variable and so on but there is an exception to that rule and that is a void pointer and a void pointer is a special type of pointer that can hold the address of a variable of any other data type so a void pointer can hold the address of a float variable or an int variable or a char bool struct whichever one you pass to that void pointer but avoid pointer has a limitation as well and that limitation is that you cannot directly dereference a void pointer so in order to demonstrate this i'm going to create an example with the knowledge that we already have so using only integer and character and float pointers that we are already familiar with and then i want to introduce a void pointer in order to solve that problem so that you can see how void pointers are used so let's jump into our visual studio here i want to create a variable um and let's make it of int data type so i'm going to say int and let's call it number like this and i'm going to assign it a value of 5 for example now what i want to do with this number variable is i just want to write it out and because we are working with pointers let's play with pointers some more so i want to write out this variable using a function that receives a pointer let's do that so that function is going to be of return type void and let's call it print number like this and then here this function is going to receive an integer pointer and we are going to call it uh number ptr so number pointer okay now what this function here should do is it should just print out the value that this number pointer is storing so actually the value that is stored on the address that this number pointer is holding so in order to do that we have to dereference this pointer so i'm going to say star symbol and then put the name of this number pointer and let's add an end line as well now this function is finished and it is writing out the value that is stored on the address that we passed to it and we have to pass it the address of an integer variable so if i invoke this print number function let's say print number as i said since it is receiving a pointer we have to pass it an address and that is going to be the address of this number variable so let's say ampersand number so this here is going to give us the address of this number variable okay and now if i run this program as you can see this function here has printed out value of 5 which is the value of our number okay now what happens if i want to create a character variable and then print out a character variable as well so let's do that i'm going to say char let's call it letter and let's assign it a value of letter a okay and now in order to print out this character using this same approach i will have to create another function because this one here receives an integer pointer and in order to print out a character we would have to create a function that receives a character pointer so let's copy this function here and i'm going to call it print letter like this and then this function is going to receive a character pointer okay and that pointer is going to be called char ptr and then here i just want to write out the reference value of that char ptr so let's invoke this print letter function let's pass it the address of this letter variable that we have created here and now if i run this program as you can see we have 5 for this first function and then a for this second function which means that these two functions are doing its job but what happens if i want to print out a floating point number and then a double and then a boolean value and a struct value in order to do each one of those i would have to create a function that receives that specific data type pointer but we can solve that same problem using a void pointer because as we already said a void pointer can point to a variable of any data type so let's do that let's create a function that is going to print out any data type so that function is going to be of return type void and let's give it a name print because it is generic it is going to work with all data types i'm going to give it name of print and as we said that function is going to receive void pointer and let's call that pointer ptr okay now because this void pointer can point to a variable of any data type we will have to keep track of which data type we have passed inside this void pointer and in order to do that i'm going to use another parameter here and that parameter is going to be of type char and i'm going to call it type so how this type parameter is going to be used well in a situation where we pass an integer pointer to this print function here this type parameter is going to have a value of i in a situation when we pass a character pointer to this void pointer here in this type parameter we are going to pass a value of c and then if we pass a float pointer here here we are going to store an f and then if we pass a double pointer here this type variable should store a letter d so that we can know how we are going to dereference this ptr pointer so the first thing that we have to do is we have to check what this type variable is holding so in order to do that i'm going to use switch case like this you can use if else as well if you want so here i'm going to switch on this type variable like this and what i want to do here is i want to say in the case that this type variable is holding the value of i that means that this here is an integer pointer so here i'm just going to leave a comment for now so i'm going to say handle int pointer like this and then the other situation is going to be indicates that this type variable is holding the value of c that means that here we have passed a character pointer so i'm going to leave another comment as well so here i want i'm going to say handle char pointer okay now let's explain how we are going to handle this integer pointer and then this character pointer as well well as we already said since avoid pointer cannot be dereferenced directly but we first have to cast it into a specific data type so into an integer pointer or into a character pointer in this particular situation i'm going to do that so here i'm going to say in the case that our user has passed an integer pointer here i will have to cast this void pointer into an integer pointer first so how do you do that well you say please this pointer here so this ptr casts that into an integer pointer so this expression here is going to cast this void pointer into an integer pointer so in these parentheses here we are going to have an integer pointer and in order to access to the address that an integer pointer is storing and write out the value that is stored on that address we dereference that pointer and for that we use this star symbol so now here we have the value that is stored on this integer pointer and i'm going to write out that value like this and let's add and line as well so this here writes out the value of an integer pointer so let's copy that and then paste it here and here what i want to do in this c situation is i want to cast this void pointer into a character pointer so char pointer and then after i have character pointer here id reference that and then this line is going to write out the value of our character okay so now if i invoke this print function i should get the value of this number and then of this letter as well using only this print function so let's comment these two for now and let's invoke our print function so i'm going to say print and then the first thing that it receives is going to be the address and in this particular situation considering that this is a void pointer we can pass it the address of any data type so we can pass it the address of a integer variable or of a character variable or of a floating point variable and in this situation we have integer variable and then character variable so let's use these two so let's pass here the address of our number that oh that is going to be the first parameter and then the second parameter is going to be the type and considering that we have passed the address of an integer let's pass the value of i as our second parameter here okay and then i'm going to copy this function one more time and this time i want to pass it the address of our letter variable and considering that that is a character here as a second parameter i'm going to pass c now i've just noticed that something is missing from our switch case and before i say what it is please write your idea write your answer in the comments down below so what we are missing in these two cases is break at the end so here i'm missing a break like this and then here as well okay so now we have completed our switch case and if i run my program now as you can see for this first line we get the value of 5 which is our integer so this print function has printed the value of our integer and then in this second line we have printed out the value of a character and we have done that using this print function which receives a void pointer and then it receives a char variable which is called type and we use that char variable in order to differentiate which data type we are storing inside this void pointer because as i already said a void pointer can point to a variable of any data type but it cannot be dereferenced directly so for that we are using this type parameter to check which data type is stored inside this pointer here so now you have an idea on how to use void pointers but i would actually advise you to be very careful when using void pointers why because your compiler in this particular situation does not have a way to tell you hey you are trying to cast a void pointer which is actually an end pointer into a character or vice versa if you're doing that your compiler in this situation here does not have a way to know if you are making an error or not because inside avoid pointer you can store the address of any variable so of a variable of any data type and then you can try to cast that void pointer into a pointer of any other data type which means for example in this particular situation here we are passing an integer so this number here is an integer which means that here for this line of code we are receiving an integer pointer okay and then in this case here we are trying to cast that into an integer pointer and that is okay but if we accidentally make a mistake here and we try to cast that into a character pointer for example like this our compiler now does not have a way to know that we are making a mistake here and if we run our program look at this we get this undefined symbol here which is what is this you know this is not the expected behavior of our program and we did not get a compiletime error which means that this here is completely valid so your compiler is not going to tell you that this here is an error but it actually is a logical error and those type of errors so logical errors are much harder to find inside programs and this here is a small program and it is kind of easy to find an error in a program that has 20 lines of code but if you had a logical error in a program that has 20 000 lies of lines of code for example you would have a very very big problem so again i strongly advise you to be very careful when you are using void pointers because as you see compiler is not reporting an error for this situation here but but this actually is an error so i'm going to return this to an integer pointer okay so i hope that you enjoyed this video and uh that you learned something new and if you did give it a thumbs up subscribe to my channel and thank you for watching i'm going to see you in my next video bye