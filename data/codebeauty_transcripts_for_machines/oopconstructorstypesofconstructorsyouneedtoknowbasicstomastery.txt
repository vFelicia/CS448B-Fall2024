hi guys and welcome to my channel in this video we are going to talk about different types of Constructors and I'm going to explain what our Constructors when do we use them and why do we need Constructors in programming and you will also learn everything that happens in the background and I will show you examples of when to use different types of Constructors but before we start with this video I want to recommend you a tool that I have been using for years now previous studio and if you're wondering why you need it let me ask you a question are you tired of tracking down bugs and issues in your code because if you are then you are going to absolutely love PBS Studio it is very powerful static code analyzer that will analyze your code and help you fix bugs that you have in your code I personally use it when I'm preparing videos for you guys because it suggests best practices and it helps me keep my code clean without bugs and I also love to use it on big projects to analyze them and to prevent any bugs from going into production it is easy to integrate with visual studio and other Ides and you can use it for C C plus plus C sharp and Java I will put a link down below that you can use to download it and start a free trial but make sure to read on their page because there are ways to get it completely free if you are a student for example so definitely try it out and you will see for yourself how you will start writing other code without bugs and now let's get back to the video so let's create a class called user I'll say plus user and inside this class I will create a couple of public members so I will say public and then let's say string first name and then let's copy this let's say also last name and then let's add int age and let's say string email so every time that I want to create an object of type user I need to do following so and it's a user and then let's say user one so now I have to manually assign the values for these four properties of my user so I need to do something like this user1 Dot first name is equal to Selena and then let's assign values to the other properties let's say last name is equal to nurak and then age it is an integer so 27 and then email let's say Selena norak at mail.com okay and here I noticed a typo so I'm going to fix it very quickly okay so with this I created only one user and if I wanted to create another user I need to copy this and then paste it here and I will change this so that it says user two and then also change it here so I'm going to use a shortcut for changing multiple rows and the shortcut is alt and shift so you press alt and shift and then right into multiple rows like this so let's change the values let's say Anna let's say Lopez and then age is 28 and here it will be Anna Lopez at mail.com okay so with this we have created two users and it is pretty time consuming for Just Two users and imagine the situation if we had like 100 users or 1000 or even 1 million users which is very realistic so this is not the way that things are done in programming and now I'm going to show you a better way and the way that we use Constructors in order to construct objects because that is the use of Constructor so now I'm going to show you what happens in the background and how Constructors really work so the way that I want to explain this is I want to show you some examples and I want to lead you to those examples so that you can draw conclusions about Constructors on your own and then we are going to discuss those conclusions so let's delete this second user because I want to have all the code visible on the screen so we are left with just one user and what I want to do now is I want to print the information about this user so I'll just use C out and I will say user1 dot first name and let's add end line and then let's copy this couple more times let's say last name and then age and email like this so if I start the program it's pretty much common sense to know that we are going to get the information from this part here okay now a question for you is following what is going to happen if I delete this part here so write me in the comment section what do you expect to happen if I run the program now do you expect an error and what kind of error or do you expect this program to run perfectly fine without any errors or do you expect some specific output or whatever write me in the comment section so I am going to run the program and here is the output that we have now something that I want to do before explaining this part here is just to make it a little bit more clear with the description so here I will say first name okay and then let's add descriptions for these remaining three again alt and shift together and then you can write into multiple rows so let's say last name and then okay I can copy this actually age and email like this and let's also do this and then last name and first name so if I run the program now let's see what's going to happen Okay so we have the same output as before but we have these additional descriptions so first name and then nothing and then last name and nothing and then age and then we have some number that is really big or really small depending on how you look at it and then email and nothing so can someone please explain why do we have this output and why don't we have any sort of error in console why are we even able to run the program and an even more important question is this part here so I have a variable called age which is of type int it is inside my class okay I never assigned any value to this age variable but when I try to print that variable here it says that its value is minus and then this number here so that must mean that what I can do is I can create another variable of type int and call it test for example and if I try to print this test variable I should get or at least I should expect the same result right so do you expect to see the same result as here when I try to print this variable here please explain that also in the comments so if I run the program very clearly you can see that we are not even able to build this program because we have an error and that error is here it says something like uninitialized local variable test used which means that here it says hey I cannot print this variable because it has not been initialized but here we also have not initialized the age variable which is also of type int and we didn't have any problems so how does that make sense what does that even mean that means that something else is initializing this variable here so this age variable which is inside our class that has been initialized by a default Constructor so a default Constructor is a type of Constructor that we get by default from C plus plus so we don't have to create it ourselves C plus plus is going to provide it for us now a default Constructor initializes the properties of an object with default values and it only happens to be that the huge number that we saw minus 8 billion something for this age property that is default value for an integer okay so that is the reason why we saw this oh okay we still have this error here I'm going to comment this part of the code and then run the program again okay so this here is default value for integers and then even these strings here they are initialized it's only that they have been initialized with an empty string that's why we don't see anything here okay and then in this situation here we are just creating a simple data type so we are creating an integer variable and we don't have default Constructor for simple types we get a default Constructor only for classes so when you create an instance of a Class A Default constructor's job is to assign default values to the properties of that instance so how does a default Constructor look like well it looks something like this actually my bad it looks exactly like this so this here is a default Constructor for class called user so here we can notice a couple of important characteristics of Constructors there are six that I want to mention so the first one is that Constructors look very similar to functions with one very important difference and that is that first of all Constructors need to have the same name as the class that they belong to so the name of the class is user and that means that its Constructor needs to be called user as well that's the first thing and then the second thing is that they don't have a return type so if you watch my videos about functions you already know that every function needs to have a return type even if that return type is void which means no type we still have to write that specifically we need to say that function is not returning anything or the function is returning void but Constructors don't even have a void return type so no return type at all that is second important characteristic of Constructors and then third characteristic is that Constructors need to be placed in the public area of the class now there are some examples where you would put a Constructor inside a private area but if you know about access modifiers meaning private public and protected you know that public means that whatever is public it's accessible outside of the class and whatever is private that is accessible only within that class so what we want to do is we want to make that Constructor to be accessible outside of the class because we want to create instances we want to construct instances of that class now there is an exception to that rule where we would on purpose make the Constructor to be private like in the situation of a Singleton pattern but if you just started learning about Constructors then there is no need to think about those exceptions so again third rule is that Constructor needs to be placed inside the public area of a class because if you put it inside private or protected area you will not be able to access that Constructor from your main function or outside of your function okay so here I will explicitly put it inside this public area rule number four is that default Constructor does not have any parameters so as you can see here no arguments for default Constructor again it looks very similar to a function with the exception that it doesn't have a return type it needs to have the same name as the class that it belongs to and default Constructor cannot have parameters rule number five is that if you don't create a default Constructor on your own C plus plus is going to automatically generate one for you and that is something that we could saw on this example here and then rule number six is that default Constructor is invoked when you create an object of that class and I can demonstrate that so I can put a breakpoint here and then also here on my Constructor line and here where I'm creating user object so if I run this program okay we still have this error which I'm going to remove so test variable so if I run the program okay as you can see the execution of the program was stopped in this line here and what I can do is I can go on debug and then play and then press step into or f11 on my keyboard okay and we go to this line here which means that it invokes our default Constructor now that means that what we can do is we can write our own code inside this default Constructor okay so let's do that now I'm going to comment out this here and I will create another one that has some code inside it so here what I want to do is I want to assign my own default values for these properties here so I will say that first name by default will be equal to NN so no name and then let's say last name let's also say nln so no last name and then let's say that age is going to be equal to 20 no age is going to be equal to zero that's default and then email will be equal to let's say not set okay so now if I remove these breakpoints and if I run the program let's see what are going to be the default values so here we have the values that we have assigned as default values for our users so whenever you create a user this default Constructor will be invoked because now we have created our own default Constructor okay it is this one here so these are the values that will be assigned by default to the properties of our user okay so when I print them here we get this output okay so that was the first type of Constructor default Constructor and we said that there are six important characteristics first it has the same name as the class itself second it does not have a return type third default Constructor does not receive parameters fourth it needs to be placed in a public part in a public section of your class and then what was fifth so if you don't create default Constructor on your own C plus is going to automatically generate one for you and then rule number six was that a Constructor default Constructor is invoked automatically every time that you create an object of a class so a default Constructor of that class is invoked in that situation the second type of Constructor that I want to show you is called parametrized Constructor and the only difference between pyramidroid Constructor and default Constructor is that parameterized Constructor receives certain values it receives those values as arguments or parameters and then it uses those values in order to instantiate the properties of that object right so let me show you an example I will say here that this is default Constructor okay and then let's say here that this is empty default Constructor like this and then let's create another one I'm just going to copy this code here and let's call it perhaps Constructor so parameterized Constructor and as I said it will receive certain parameters so let's say for example that it receives string F name that's first name and then string L name and then let's say int h okay so what it should do is it should set this F name as the value for first name and then it will set the L name as the value for last name and then here it's going to set this age parameter okay and then for email let's say that we are going to generate the email ourselves so let's say fname plus dot Plus L name plus and then let's say at mail.com like this okay so this is an example of parametrized Constructor so how do we invoke or use this Constructor because one important thing to keep in mind is that for every object that you create for every instance of a class only one Constructor is going to be invoked because that object that instance is going to be constructed only once the first time that it is created so you can either use this Constructor default Constructor to create it or you can use parameterize Constructor so let's see how we can use this one because here we saw example of how this default Constructor without any parameters is used so you just say user and then you give the name to your variable but this one is a little bit different and it is different because it expects to receive these values okay so here I'm going to say parentheses and then inside these parentheses I will pass these values and intellisense should even offer us all the constructors that we have and as you can see here we have four Constructors that we can choose from this is our default Constructor and it says default Constructor and then this one we didn't talk about neither did we about this one and here is our params Constructor meaning parametrized Constructor which we just created so this is the one that I want to invoke and it expects to receive first name last name and age so here I will say that first name is sandina and then last name is norak and then age is 27 right so this is how you use or how you invoke parametrized Constructor and when you do this this part of the code here is going to be executed so if I run the program okay as you can see first name last name age those are these three values that we have passed to our Constructor and then this email address has been created here so we have generated the email address based on these parameters that we have received as parameters to our parametrized Constructor and now what we can do is we can create or construct another user very easily so I will just copy this line I will say user 2 and here let's say Anna and then Lopez and 28. okay so if I want to print the data about this user I will have to change it here so I'll say user 2 and then user 2 user 2.age and user2. email like this and with this we should get the output about our second user okay this part of the code here bothers me a little bit because this is not the way that we do things in programming because here you need to manually change the name of your user every time that you want to print the data about that user so what you can do is you can make a function that you can reuse or invoke every time that you want to get the information or print the data about the user so I'm going to do that right now and I'm going to create a nonmember function called get user info okay and that function is going to receive a parameter of type user I will call it U okay and I will just cut this code from here and then paste it inside this function and here I will say instead of user 2. first name I will use this parameter here that I have received I'm going to paste it here and then here and also here and U dot email okay and this is just a nonmember function that we can now reuse like this so get user info for user one okay and then get user info for user two okay so now our code looks much cleaner and this here has nothing to do with Constructors it is just a better way to reuse code okay so now if I run the program again what is happening oh we need a return type here for our function okay so return type for this function is going to be void okay so if I run the program again okay and here we can see the info about the first user and that info about our second user okay and also a quick tip there are two more ways to do this same thing the second approach would be to create a class member function which means that it's going to be very similar function but it is going to be part of this user class okay so it's going to be inside this class that's going to be its second approach and then the third approach is by using operator overloading so you would overload this operator and you would use that to print your user like this so you would say something like see out user one and then see out user two and that is another topic completely and if you want to learn about that if you want to learn about operator overloading make sure to watch the video that will be linked here and also in the description that is just a quick tip now let's remove this part of the code here because it has nothing to do with Constructors um and I want to share a couple of more useful informations and I think that will be it for this video and I will continue then in the next video talking about copy Constructors and about these structures and things like that an important thing to keep in mind is that once you create your own Constructor any type of Constructor you lose the default Constructor that is automatically generated by C plus for you so remember the one that we talked about first the one that c plus generates for you well at the moment when you create any type of your own Constructor you lose that one and we can prove that in a following way so let's comment out this default Constructor okay and here I have a parameterized Constructor only that so if I run this program this is going to work as expected we are not going to get any sort of error or anything like that even though I commented out this default Constructor and you might think that everything is okay but the problem that you will get will manifest itself it will appear only in a situation where you try to do something like this so where you try to say user and then let's say user three this is not going to work any longer okay because as I said this here expects a default Constructor because it doesn't have any parameters like these other two objects have so user one has parameters that is passing to its parameterized Constructor user 2 as well but user3 does not have any parameters and it expects a default Constructor to construct that object but as you can see here it says no default Constructor exists for class user and the reason for that is at the moment that we created this parametrized Constructor we lost the automatically generated default Constructor so the one that C plus plus gave us so there are two ways to fix this the first way is to completely remove any sort of Constructor like this okay so we are not going to have a problem here anymore but we will have two problems here because these two expect parametrized Constructors so that is not a solution so let's return this pyramid pyramid rice Constructor okay and then the solution that is a solution is to create our own default Constructor which is this one here okay or you could also use this one here but you cannot have both because then again you will have a problem because at the situation where you want to invoke default Constructor if you have two default Constructors they don't receive any parameters any arguments your compiler will not know which one to invoke because again you can have only one default Constructor and I'm going to comment out this one and now we expect this part here to work and just to prove that I will say get user info and here I'll put user three so if I run the program here we have user one and then user two and then here is our user tree that was constructed by default Constructor so no name no last name h0 and email is not set okay and again just repeat it one more time because it's very important to remember that when you create any sort of your own Constructor for a specific class you are going to lose the automatically generated Constructor that C plus plus gives you you will not be able to use or access that Constructor anymore as long as you have other Constructors so I think it's going to be enough for this video I'm going to film a separate video where I want to talk about copy Constructor because it's a little bit more complex topic than what we have seen here and I want to show you that with enough examples and with more details so that you can really understand what copy Constructor is and as soon as I filmed that video it is going to be linked here on the screen so you can watch it and you can watch also videos about these structure is that will also be linked in the description as I promised at the beginning I have a surprise for you I'm so excited are you ready to take your programming skills to the next level and finally learn programming because my programming course is going to be available very soon and it's unlike anything you've ever seen before we will dive deep into programming and I will teach you all of the programming Concepts but not on small individual examples I will teach you how to use them and apply them to create big complex projects so that you can start working for a real company or if you have your own idea so that you can create that idea and make it into an app and so that you can finally start working on meaningful applications that inspire you in this course I will take you from beginner to advanced level of programming knowledge and I will teach you things that you cannot find anywhere else on the internet also for people who watch my videos on YouTube I want to give you a special discount and there will be a link in the description of this video that you can use to sign up but make sure to do it right now because the number of people that can get this discount is limited so thank you very much for watching and I will see you in some other video bye