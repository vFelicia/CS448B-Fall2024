hi everyone and welcome to my channel in this video i want to talk about stack data structure so in this video you will learn what is stack what is it used for and how to work with stack in c plus programming language so after watching this video you will understand stack data structure and you will feel very comfortable working with it so what is stack stack is type of data collection which uses lifo technique in order to store elements and lifo stands for last in first out and in order to explain this imagine your stack as stack of plates now if you want to add a plate to this stack you are going to add it on top and then if you want to take a plate out you will take the one from the top so the last plate that was added is going to be the first one that you will take out so that is what last in first out means and then another synonym for lifo is fillo which means first in last out so the first element that is at the bottom of your stack is going to be the last one that you will take out because in order to access it and in order to take it out you first need to take out all of the elements that are on top of it so that is another synonym for lifo and then you will also hear some people say last come first served and this last come first served principle is not exactly fair way to access your data but there are situations where this can be useful and the example of this is for example those undo and redo options that you have on your word document or on your excel or even visual studio so i'm going to show you how that works in visual studio for example if i type out c out hello like this and if i copy this line of code let's say four times now if i click on this undo option the first line that is going to be removed is going to be the last one that we added and that is this line here so if i click undo the first one to be removed is the last one that was added and then again and again and then this first line it's even removing almost letter by letter so that is an example of stack and then another example are those back and forward buttons on your browser so you can test that after watching this video it'll do it right now but if you click on that back button of your browser it is going to navigate you one step back so it's going to take one element one page out so it is going to take your current page out and navigate you to the page that you were previously on so that is exactly how stack works last in first out or last come first served now i want to explain five most important functions that are associated with stack and that you need to understand in order to work with stack collections and those five functions are following the function that is going to tell you if your stack is empty or not that function is called empty and then the function that will tell you the size of your stack so how many elements your stack contains and that function is called size and then the function that will give you the top element of your stack and that function is called top and then the function to add an element into the stack it's called push and then the function to remove an element from the stack and that function is called pop so empty size top push and pop and here i want to demonstrate how you can use those five functions in order to work with stl stack in order to use stack collection you first need to include stack here so i will say include stack like this and now i can create stacks in my program so i can say stack and then here in these angle brackets i will define the type of elements that i will store in my stack so i want to store integer numbers inside my stack so i will say that it is going to be stack of integers like this and i will call it numbers stack okay and let me very quickly type out those five functions that i mentioned that we will use in order to work with this stack here so here are those five functions so the function called empty size push pop and top and the first one that i want to show you will be this empty function and we already said that this function here is used to check if the stack is empty or not so let's use it here let's say if numbers stack dot empty so i am invoking this empty function on my stack and here i will say if this function here returns true i will write out that my stack is empty so i will say stack is empty like this okay stack with k and then else so if this function here returns false i will write out something else so i will say that stack is not empty now this is newly created stack so we just created it and it is expected for it to be empty but let's check that out in our console okay and as you can see it says that stack is empty so that is how this empty function works and then there is another function that you can use in order to check the size of your stack and that is this function here so you can say here c out stack size is and then let's use our numbers stack here and let's invoke size function on it okay and i'm just going to add couple end lines so that our output is nicely formatted like this so i'm going to add it here and then here and here as well okay so now if i run my program let's check out the output and here it says that stack is empty and then it also says that stack size is zero which means that our stack this stack here contains zero elements so that is how empty and size functions work and then in order to add elements in your stack we use push functions so let's demonstrate how this function here works and then let's check out the output that these two functions will give us after adding an element into our stack so here i will say number stack dot push okay and this push function here receives one parameter and that parameter will be the element that we want to add at the top of our stack now considering that this number stack is stack of integers that means that here we need to push an integer into our stack so here i will put an integer number for example number one like this so i have just inserted an element into my stack using this push function here and this is the element that i want to push in my stack so if i run this program now as you can see now it says that stack is not empty and the size of this stack is one element so this stack contains one element now if i want to add more elements i will use again this push function and let's say for example that i want to add element number two an element that is number three and then again if i run this program it says that stack is not empty and the size of the stack is three elements okay so that is how this push function works and then the next one that i want to show you will be this pop function now the same way that this push function adds an element at the top of the stack this pop function removes an element from the top of your stack so if i say for example number stack dot pop it is expected that this pop function will remove the first element from the top of our stack so if i run my program now as you can see now it says that size of the stack is two elements so we added three elements and then we removed one so that is why the size of our stack is two and then if i want to remove all the elements from this stack i will copy this line of code two more times so i added three elements and then i removed three elements so it is expected that our stack is empty again so if i run this program again as you can see it says that stack now is empty and the size of the stack is zero elements okay so that is how these two functions work push adds an element into the stack and then pop removes an element from the top of the stack another very important thing that i want to show you is how you can write out the elements of your stack and there i will demonstrate how this top function works so what i want to do is i want to create a function that is going to be used to write out the elements of the stack so i will create it here it's going to be of return type void and i will call it for example print stack elements like this so print stack elements and then considering that we want to use this function in order to print the elements of this stack here that means that this function needs to receive a parameter which is going to be this stack so it needs to receive a stack of integers and i will call that parameter stack like this okay now what this function here is going to do this function here is going to ask for the top element of the stack and then it is going to write it out and then pop it which means remove it and then it is going to again ask for top element write it out and then pop it again and then it is going to do that for the next and the next and the next while the size of our stack is greater than zero or while our stack is not empty so that is exactly what i am going to write out in c plus code so i will say while like this so while our stack dot empty like this so while our stack is not empty so here you need to add negation okay and then here inside my while function what i want to do is i want to write out the top element of my stack and then pop it which means remove it so i will say c out stack dot top okay let's add and line and then after i have written out the top element of my stack what i want to do is i want to pop it so i will say stack dot pop like this okay so now this function here is going to write out the elements of the stack that has been passed to it okay so in order to test this function here i will comment these lines of code because i don't need it and then i am going to invoke the function which is called print stack elements and that function receives a stack of integers which is going to be this stack here so i will pass it as parameter like this now if i run this function it is expected for our stack to be empty because we added three elements and then we removed three elements so let's check that out okay as you can see there is nothing inside our stack so i am going to remove these three lines of code and then i will test my print stack elements now so after i have added three elements to my stack so here are three elements that our stack contains those are numbers three two and one and now i have a question for you what is going to happen if i say number stack dot pop so the question is which elements are going to remain inside our stack after i have added these three elements and then i removed one element from my stack so pause the video and then write your answer in the comments and then continue watching the video so which elements will remain in this stack here so if i run my program as you can see these are two elements that our stack contains so number one and number two and as you can see number 3 was popped out of our stack which means that it was removed and the reason for that is because stack is litho collection which means last in first out so 3 was last one that was added and it is going to be the first one that will be removed as you can see here okay so that is how you work with stack collections using these five functions empty size push pop and top so i hope that you enjoyed this video if you did give it a thumbs up and then also if you want to learn more about programming and if you want to watch more videos like this one subscribe to my channel and click the bell icon and you will get a notification from me every time that i publish a new video and then also if you have any questions or if you have suggestions for my future videos feel free to leave those in the comments section thank you very much for watching and i will see you in some other video bye