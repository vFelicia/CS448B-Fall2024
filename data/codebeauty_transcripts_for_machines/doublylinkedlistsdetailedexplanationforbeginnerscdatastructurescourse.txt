hi everyone and welcome to my channel in this video i will teach you about doubly linked lists now a recommendation for you in case that you are not familiar with singly linked lists please make sure to watch these videos i'm going to link them in the description in the exact order they should be watched and then in this video we will go straight to doubly linked lists so if you remember when we talked about singly linked lists we said that this is how they look like so we have a node and each node consists of two parts value and a pointer to the next node and then the last node points to null that is how we know that it is the last because it doesn't have a successor it doesn't point to anything so that is singly linked list and then doubly linked list looks like this so a doubly linked list has two pointers it has a pointer to the next node and then a pointer to the previous node and also the value itself so now the question is why do we need doubly linked lists when we already had singly linked lists well there are both advantages and disadvantages for both of these so let's now talk about that the first advantage is that doubly linked lists can be traversed in two directions so forward and backward whereas singly linked lists can only go forward okay and then another advantage is that in doubly linked lists we can add new nodes and four places in the beginning at the end and then after a given node and also before a given node whereas in singly linked lists we only have three places so beginning and and then after a given node because here we don't have a pointer to the previous so this means that we can add new nodes and delete existing nodes in doubly linked lists faster than with singly linked lists but there are also some disadvantages and the main disadvantage of doubly linked lists is that they take more space because now every node requires extra space for this additional pointer to the previous node that we don't have in singly linked lists so that is one disadvantage and another disadvantage is that now we need to take care of both of these pointers so both next and previous every time that you are adding new node or deleting existing node you need to take care of both next and previous pointer whereas in singly linked lists we only had to take care of next pointer so now that you know this the conclusion is that you should prefer singly linked lists when you have memory limitations so you don't have much memory and you will also not perform a lot of inserting deleting and searching notes in your list whereas you should prefer doubly linked lists when you don't have memory limitations and when you will also perform a lot of inserting deleting or searching nodes in your list so the time has come for me to show you how this looks like in code and the first thing that we will do is we will create node and as you could see every node consists of three parts it has value it has pointer to the next node and then a pointer to the previous node so let's do that let's say class i'll call it node okay and i will say public like this so let's say that we are going to create a list of integers so i will say int value so the values are going to be integers and then let's also create a node pointer called next and then also a node pointer called previous okay a quick tip is that you can also use struct here and if you decided to use structures instead of classes that means that you don't need this public access modifier because elements of a structure are public by default whereas elements of a class are private by default so in this situation we need public in order to be able to access these outside of this class here so so that is a quick tip so let's now see how we can create the first node of doubly linked list there are four steps to do that and the first step is to create a new node so you need to allocate space for a new node okay and then the second step is we need to set the value of that node let's say that the value is going to be number four okay because we have the list of integers that's the second step third step is that we need to set values for next pointer and previous pointer now since this node here is the only node inside our list we will say that next is pointing to null okay and previous is also pointing to null so i'll put null here as well that is step number three and then step number four is that since this element here is the only element which means the first and the last we need to say that this element is both head and tail of our list which means first and last so i will put here with red color h and t so head and tail so this is visual representation let's now translate this into code okay so the first step was to create a new node allocate space for a new node so i will say node okay this code appearing by magic this is tab 9 actually doing for me and if you still have not installed it you will have to do this manually i'm sorry but there's still link in the description that you can use in order to download it okay so i allocated a space for a new node and very important question i know that i will get this question why is this here a node pointer and not just node like this well please keep in mind that linked lists doubly linked lists are implemented with pointers because we are dynamically changing the size of a list which means that we are allocating new space when we create new elements and add them to our list and then we are also deleting and deallocating that space when we want to remove an element from our list so in order to be able to do that in order to be able to dynamically change the size of our list we need to use pointers so that is the reason why this here is a pointer like this and not just node like this okay so this was the first step the second step is to set the value for this node so i will say node value is equal to four again i'm using table line to complete these okay and then step number three is to set next and previous pointers in this situation we are setting them to null so i will say node next is equal to null ptr so null pointer and then node previous is also equal to null ptr that's the step number three and then step number four is to say that this note here is head and tail of our list so we still have not created our list so we still don't have head and tail so i will do that first i will say here node pointer and i will call it head and then i also need node pointer called tail okay like this let's just okay and then i will say that head is equal to this node here and then also tail is equal to this node here so i will say here head is equal to node and then tail is equal to node as well so that is how we create the first node of a doubly linked list let me now show you how we can add second node to doubly linked list because adding second node is a little bit more complex than adding the first one and this has five steps so let's switch to paint so that we can first visualize this process so as i said there are five steps to do this step number one is to create a new node like this okay step number two is to set the value for this node so i will take the pen and i will say that the value is five okay and then step number three is to take care of next pointer and previous pointer so next pointer will point to null okay and then previous pointer will point to this node here which is currently the tail of our list so before we add this node here okay so that is step number three step number four is to say to this node here hey now you have a successor so you are no longer going to point to null now you need to point to this node here so let me delete this null part okay and now i will say that this node here points to this node here okay that is step number four and then step number five is to say to this note here again hey you previously were the one and the only element of this list so you were both head and tail but you are no longer tail because now new tail is this element here so now i also need to delete this okay and this here is the new tail of our list so those are five steps that we will now translate into code okay so the first step is to allocate space for a new node and for that i will use this same variable because we already added this node into our list and we don't need this variable to point to it any longer so i will say here node is equal to new node like this that is step number one step number two is to set the value for this node so i will say that the value is five okay and then step number three is to take care of next and previous pointers so i will say node next is equal to null pointer but node previous will now be equal to tail of our list like this okay that is step number three step number four is now we need to say to our current tale of the list hey now you have a successor which is this node here so now i will say tail next which previously was pointing to null now it needs to point to this node here like this so that is step number four and then the last step is to say that now this node here is the tail so now i will say tail is equal to node okay so that is how you add second element to w linked list by the way i'm going to pin this code in a comment so that you can use it if you want so let's describe these two so that you know later what each part is doing so here i will say add first node and then this part here is add second node okay so now the question is how can you add third and fourth and fifth and so on element to doubly linked list well an interesting fact is that you can copy this code here because the process the steps are the same to add third element as to add second and then fourth and fifth and sixth and so on so let's say here that i want to add third node so i allocate a new node i set its value let's say that the value is six and then i take care of next and previous pointers and then i say to current tail of the list hey now you have a successor and that is this note here and then i also say to my list hey now you have a new tail which is this newly added node so with this we added third node and then also if you want to add node number four here you say add fourth node like this and then the value is going to be seven and all other steps are going to be absolutely the same okay so there is one more thing that i want to show you and that will be it for this video because i don't want to make it too long and we will continue in the next video let me know in the comments if you would like to see part two for doubly linked lists and if you have any questions so the next thing that i want to show you is how you can traverse this list in both forward and backward direction and print these elements these nodes that we just added so let's create a function called print forward i'll do it here so i'll say void print forward okay and the name itself says that this function will print elements of doubly linked lists starting from the head and then go forward so we are going to receive that head node here as parameter i will say node head like this so how is this function going to work well the first thing that i want to do is i want to create a new node called traverser so i will say node traverser okay and i'm not sure if this is a legit word in english language but i couldn't come up with a better name to describe the purpose and the purpose of this traverser node is going to be to go from the first to the second and then the third fourth fifth and so on so go to the next node and then the next and the next until it comes to the end of the list and in each iteration we are going to print the value of that current node so we will start from the head so i will say that traverser is equal to head like this and then i will use while loop so i will say while so while traverser is not equal to null ptr what i want to do is i want to print the value of traverser so i will say c out traverser dot value and then let's also add endline and then what i want to do after that is i want to move to the next node so i will say traverser is equal to traverser next so please move to your successor okay so this is the logic of printforward function and i will copy this logic because now i want to show you how print backwards works and the logic of print backwards is the same there will only be two small but very important differences and let me know in the comments if you can guess one or both of those differences so i will paste the code here and i will rename this second function to say print backwards so print backward okay and as i said there will be two small but very important differences the first difference is that print backwards doesn't start from the head but it rather starts from the tail so here i will receive tail like this and this traverser is going to start from the tail so that is difference number one and the difference number two is that now traverser will not move to the next node it will move to the previous node so here i will say traverser previous like this okay so this is the code for print forward and then print backward and now we are going to test these two functions so at the end of our main function i will say print forward and to print forward we need to pass head node like this and if i run the program let's see what's going to happen and as you can see four five six seven this is the correct order of notes okay so that was print forward and then let's also test print backward okay and to print backward we need to pass tail node okay and again if i run the program now we should get descending order and as you can see this is the correct result for print backwards function so that is everything that i wanted to show you in this video i don't want to make it too long so we will continue in the next video and if you have any questions you can leave those in the comments section um also if you enjoyed this video please give it a big thumbs up that is really important for the youtube algorithm and also share it with someone who needs to see this and learn about data structures so thank you very much for watching and i will see you in the next video bye