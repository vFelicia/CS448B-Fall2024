hi everyone welcome to my channel my name is saldina and i make i.t and programming related videos so if you're interested in those please subscribe to my channel and give this video a thumbs up and in this video i want to talk about a topic that confuses many students and that is the topic of multidimensional dynamic arrays and the topics like this one are the reason why many people step away from learning c plus and they believe that learning c plus plus is hard but what i think is that many of those people never actually had the opportunity to have this explained in a very simple way so that is what i will try to do in this video so with the help of excel i will try to draw what are multidimensional dynamic arrays and how they work and i hope that at the end of this video you will have it pretty clear and you will be able to create and work with your own multidimensional dynamic arrays so what a multidimensional array is in simple words it is array of arrays and in this video you will learn how to create twodimensional dynamic arrays and in order to be able to understand this topic you should be familiar with the topic of dynamic arrays which is a video that i already did on my channel and i will link it here so make sure to watch that video before watching this one so i will very quickly remind us all of how dynamic arrays work and then we will see how we can use that knowledge to understand multidimensional dynamic arrays so let's create a visual representation of a dynamic array in our excel sheet so let's say that it will be array of four elements like this this is our array and the indexes of these elements start with zero and then one two three so these are the indexes and then the address of this first element will be for example 0 0 0 0 a a like this and this address here it is the address of the first element but it is the address of the array itself as well and you should be familiar with that so this here is our dynamic memory and then on our stack which will be here let's create our stack so this here will be our static memory here we will have to create a pointer variable which will hold the address to this element here or actually the address to the array itself so i will create a variable let's call it ptr1 so this is going going to be our pointer one and as we already said that pointer will hold the address of the first element of this array let's copy that address like this and then we will store that address in our ptr one now if we wanted to create more arrays by the knowledge that we have so far we would have to copy this and then let's paste it here and let's create one more array like this so now we have three dynamic arrays and the first element of the first array has the address of 0 0 0 0 a a and then this one here let's say that it has the address of bb for example and then this one here has the address of zero zero zero zero cc and to be able to access these arrays we would have to create on our stack two more pointers so let's do that okay so our pointer two will hold the address of the second array which is zero zero zero zero bb and then our pointer three would hold the address of our third array which is zero zero zero zero cc like this now with this we have created three dynamic arrays and in order to create those three dynamic arrays we had to create three pointers so those are these three here and this is something that you should already be familiar with so you should already know from my previous video how to create a dynamic array now one thing that i see here and that is a problem is that if we wanted to create four or five or a hundred of these dynamic arrays we would have to create that number of pointers on our stack which means that this part here is not dynamic only this part here is dynamic because here our user determines how many elements this dynamic array will have but for each of these dynamic arrays we have to manually create a pointer on our stack which will hold the address of that array okay now what happens if i want to move this part here to our dynamic memory as well so let's do that let me cut it from here and then i will paste it here for example so now i have moved this part to dynamic memory as well and as you can see here this kind of looks like an array as well so that means that this first element if we look at this as an array the first element will have index of zero and then second will have index of one and then third will have oh this won't move third will have index of two okay so this is an array that has three elements and the first element for example has the address of 0 0 e e e e like this so now this part here is dynamic and then this part here is dynamic and in order to be able to access this array here what we have to do is on our stack which is this part here we will have to create a pointer which will hold the address of this first element so let's do that let me just okay now as i already said on our stack we will have to create a pointer which will hold the address of this first element so let's call that pointer table for example and this table will hold the address of this element here which is 0 0 ee and this table because it holds the address it should be a pointer but one thing to keep in mind is that this variable here is not a simple variable but this here is a pointer as well which means that this table will not be a simple pointer but it will be a pointer to a pointer and you indicate that using two asterisk symbols because one is just a pointer and then two mean a pointer to a pointer why because this table holds the address of the element which is this one here and that element is pointer as well okay now if we look at this here as you can see we have one array that represents the number of rows that our table will have okay so one two three and then for each one of the elements of this array here we create a separate dynamic array like this so this here will be our table that has the number of rows that our user defines and then however many columns our user defines as well and in this particular situation it is a table that has three rows so these are three rows and then four columns so let's now translate this to our c plus code and because we said that now our user defines how many rows this table will have and then how many columns as well that is the first thing that i will do so i will create two variables let's call them inch rows and columns and then i will ask my user to enter how many rows and how many columns he wants this table to have so let's do that see in rows o and then columns like this okay now after our user has entered how many rows and columns he wants what i want to do now is this part here so this part here this is our first step and then this here is going to be our second step and this part here will be the third step so this part here will be the following when translated to c plus plus code so here as i already said i create a pointer to a pointer which i will call table so i will say please create an integer pointer to a pointer because here we will store integer values you can create a character or double or float whichever one you want i want to create integer pointer to a pointer and call that table like this okay so we are done with this first part here and then what this table pointer to a pointer will point to is going to be this array here so i will say please create a new integer array that has this many elements so the number that our user has entered for this rows variable because this rows variable holds how many elements this array here will have but as you can see here we have an error and that error is happening because this here which is this array here is not just a simple integer array but it is array of pointers so here you will have to indicate that so you will have to say please create an integer array of pointers and as you can see now our error has disappeared and with this line of code here we have created this array here now our third step is going to be that for each element of this array here we would have to create a separate dynamic array so this first element will hold the address of this dynamic array and then the second element holds the address of this array and then disturbed the address of this array here so what i will have to do is i will have to iterate through all the elements of this array and for each one i will have to create a separate dynamic array so let's do that so i will say four and i is equal to zero and then i is less than the number of rows that our user entered and in each iteration increment i so in this particular situation our number of rows is equal to three but you can have as many as you want so what i want to do in each of these iterations is i want to create for each one of these elements a separate dynamic array so i will say table of i is equal to new integer array that has this many elements and that is the number that we stored in our columns variable like this and with this code here we have successfully created these dynamic arrays now how do you access elements on a specific position of this table here for example this one or this one or this one so in order to do that let's say for example table of row 1 and then column 2 will have the value of 88. now what this code here what this line here will do is the following so this part here it says please give me the table variable which is this one here and it is a pointer to a pointer which holds this address here so 0 0 ee and that address is the address of this element here so the address of this array and here we say please give me the element of that array that has index one which is this element here so it is the element that stores the address of zero zero zero zero bb which is the address of this array here and this second part says please give me the element of that array that has the index of 2 which is this element here so here we will store the value of 88 so that is what this line of code here will do it will store number 88 to this position here so this line of code here will store this number at the element that has row index 1 and column index 2 of this table so this here is a row with index 0 this here is 0 with index 1 and then 2 so we are storing at this row and then column index 2 is this one here so here we store a number 88. one thing that we said as well in my previous video is that each time that you allocate dynamic memory you have the responsibility to deallocate that memory when you don't need it which means each time that you use new keyword you will have to use delete keyword when you don't need that memory anymore so now is the question how do we deallocate all of this memory that we have taken so in order to do that what i want to do is i want to show you something if for some reason we lose this address here so the value that is stored in this table pointer to a pointer we will never be able to access all of these elements that we have created in our dynamic memory so that means that we will not be deallocating this first and then if we for some reason lost this the value of our zero zero zero zero a a for example that means that we would never be able to access this array here so we would never be able to deallocate this memory so that means that this is not going to be deallocated first as well now a location of this memory here went as follows this was the first step so this was the first thing that we allocated and it is this code here and then we allocated this so that corresponds to this part here and then the last thing to allocate was these arrays here and that corresponds to this part of the code and the allocation of this memory will go the other way around which means that first we will deallocate this and then we will deallocate this and then this will be the last thing that we will have to worry about now in order to deallocate this the process will be almost the same as the one when we allocated it so i will copy this for loop and then paste it here but what i want to do in this particular situation so when d allocating is instead of creating a new dynamic array for each table of i is i want to delete that array so for each element of this array here i want to delete the corresponding dynamic array so i want to delete these three arrays and in order to do that i will say please delete the array that my table of i is pointing to now what this code here will do is for this element here it will deallocate this array here so let's delete that and then for this element here it will deallocate this array and then for this one it will deallocate this array here so now we have successfully freed this memory that we have taken here now after we have done this after we have successfully deallocated our first step which was here this part here will be our second thing to deallocate so here i will say please delete the array that my table variable is pointing to so this line of code here will deallocate this part here so i will say please delete that we do not need it anymore okay and then our third step which is the last one will be to null this value here why because we have just freed the memory that was here so we have deallocated that now someone else might be using this memory here and we really shouldn't keep the address of someone else's memory so we should make this a null value like this and in order to do this in our code i will just say now my table will hold the value of no like this and this will prevent some potential crashes and problems in your application so i hope that this video helped you understand multidimensional dynamic arrays a bit better and if it did please give it a thumbs up and subscribe to my channel because that helps me to reach more people and hopefully make programming a little bit easier for them as well thank you very much for watching and i'm going to see you in my next video bye