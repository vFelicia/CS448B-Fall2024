hi guys and welcome to my channel in this video i'm going to teach you about variable scopes so if you pay good attention by the end of this video you will learn everything that you need to know about scopes in programming and this is also a knowledge that is applicable to any programming language and also at the end i'm going to show you some very tricky examples so make sure to watch the entire video so that you can learn and understand everything that you need to know about the topic of scopes in programming so the first thing that you need to understand is what is scope in programming in programming a scope is an area of code where you can access a certain variable so that you can read it change its value and work with that variable in programming there are three types of scopes and then there is also a fourth type which is kind of special so the first type is known as local scope which is also called function scope the second type is global scope and then the third is block scope now the fourth type of scope is not an official scope but you will see it very often when you read the code and it can be kind of tricky for most beginners so i will explain that at the end as well so the fourth type is called nested scope so again local scope global scope block scope and then nested scope so let me show you the example of these scopes in code and for writing the code we will be using visual studio and i'm also currently using an extension called visual assist i personally use it to help me write better code and avoid errors because that is very important while filming the video and you can use it also to help you with writing and reading the code it has great features that can help you with refactoring navigation and it also can generate c plus code and also c and c sharp many senior developers like to use it and also if your plan is to make games with c plus plus it has great support for unreal engine so you should definitely try it out i'm going to leave the link to download it in the description and then if you're interested to learn more to know how to install it and what are some very cool features that you have to know about you can watch the video that will be linked here and i will also put it in the description so make sure to watch that if you want to learn more so the first type of scope that i mentioned is local scope which is also known as function scope and that means that a variable that is declared in a function scope will be accessible only inside that function so let me show you that on an example let's create a function of return type void let's call it function1 like this and inside this function i want to declare a variable so i will say int number one and let's assign it a value of ten now since i have declared a variable called number one inside this function here that means that we can access this variable only inside this scope here so only inside this block of code so here i can access variable called number one and i can for example print its value okay and this code will work without any problems but if i try to access this variable from another function then we will get a problem so let's create another function let's say void function 2 okay so this is the scope of function two and if i try to access the variable number one inside this scope as you can see we are getting an error which says identifier number one is undefined which means that this variable doesn't exist inside the scope that we are trying to access it from so in order to fix this error what i need to do is i need to declare this variable inside this scope here as well so let's copy this code and then paste it here and let's change the value for example so that it has the value of 20 inside this scope and one thing that you should notice is that our error has disappeared now something interesting for you to know is that now these two variables so number one inside function2 and number one inside function one are completely different variables for your computer so it doesn't matter that they have the same name and that you logically might think that they are the same thing they are not so even if i if i double click on this variable you will see that your computer has marked this variable only on two places and then if i double click on this one your computer says hey this variable appears only on two places here and here so that is because even though these variables have the same name they belong to different scope and that is the answer to a common question that i get which is can two variables have the same name so the answer is yes they can as long as they belong to different scopes or to different namespaces and namespaces are a topic for another video which i already filmed and you can watch it here but in this video we are talking about scopes so again variables can have the same name but if they belong to different scopes so that means that inside my scope of main function i can also declare a variable of type in called number 1 and let's assign it a value of 30 for example and now this is going to be a third completely different variable from these two so this is an example of local scope also known as function scope and again very quickly please don't get confused because these have the same name because they are completely different things for your computer and that is because they belong to different scopes so it is absolutely the same as if they had completely different names so as if this for example was number one and then this was number two and this was number three so with this being said now we can talk about advantages and disadvantages of local slash function scope so its main characteristic which is that the variable declared inside one function is accessible only inside that function is its biggest advantage and disadvantage it is an advantage because when you declare a variable inside one function and you can access it only inside that function that means that your code will be cleaner it will be localized and that will make it a lot easier for you in the future to read that code to maintain it and fix different bugs that appear in your code so that is an advantage but at the same time it is a disadvantage because there are certain problems in programming that are easier to solve when you can share the data between different functions and if you are using local variables that means that you cannot access those variables from different functions they are accessible only inside one function so now i'm going to show you an example of a problem in programming that is much easier to solve when you have access to a certain variable from different functions which means when you have a global variable so now i'm going to show you an example of global scope so let's delete all of this code and i am going to declare a global variable which means that it is a variable that is outside of any function so it is in this global area here so let's create a variable of type float and let's call it current credit and i will assign it the value of 0 so the fact that this variable has been declared as a global variable means that you can access it inside every function so what i want to do now is i want to create two functions one for depositing money and another for withdrawing money so let's say void deposit money like this and this function will have a parameter of type float called amount and what i want to do inside this function i would say that current credit plus equals to amount like this so this function will be used to increase current credit by the amount that has been deposited to your account so we can access this variable inside this function because it is a variable that has been declared in a global scope and another thing that i want to do is i want to create another function i will call it withdraw money okay it will also have a parameter called amount but in this situation i am going to subtract that amount from my current credit and again you can see that we can access this variable inside this function as well without any problems and even if i double click on this variable you can see that it appears on three places so here and here and here it's the same variable because it has global scope so what i want to do now is i want to invoke deposit money and i will pass it the value of five so i want to deposit five dollars to my account and then i want to withdraw two dollars from my account okay and at the end i want to say your credit is and then even here inside main function you can access this variable called current credit without any problems so let's run the program to see what we are going to get and it says your credit is three because we have deposited five dollars and then we drawn two so our current credit is equal to three so this is an example of global scope and this is why i said that certain problems are much easier to solve when you can access the same variable from different functions so when that variable has global scope and something that you can do as part of homework is you can try to solve this same problem without using global scope and you will see that it is much more logical and much easier to solve it like this which means by using global scope variables so now that you have seen an example of global scope which is a variable that is declared in global scope is accessible everywhere now i expect to get a question that says something like salina which one is better what should i use local scope or global scope and the answer to that question is it depends it really depends on what kind of problem you are trying to solve that is because local scope variables are accessible only inside one function and each function is like a different story a different task that has variables which are like characters in that story so once you start accessing different variables from different functions it's like all of these stories combining and mixing together which makes it a lot harder to know what is going on and what is happening in your program so a general recommendation for most beginners is to try to stick to local scopes as much as possible and use local variables as much as possible unless you have planned out the solution and absolutely know what you are doing and know that using a global scope is a better solution for your problem so that would be my recommendation stick to local scope variables as much as possible and then if you have a very specific problem that you know is better to be solved by using global scope variables then you can use that the third type of scope in programming is block scope so a variable that is declared inside one block is accessible only inside that block now a legit question is saldina what is a block well an example of a block in programming is for loop or while loop or do while loop or if statement else statement switch case and so on so let me show you how that works on an example let's create a for loop let's say 4 and i is equal to 1 i is less than 10 and then i plus plus and i'm going to put curly brackets here okay so this is an example of a block and this variable here called i has been declared inside for loop which means that this variable will be accessible only inside this for loop block which means from this curly bracket here until this curly bracket here so if i try to say c out i as you can see we can do that without any errors without any problems but if i try to do that same thing outside of this for loop so outside of this block for example here we are going to get an error it is underlined here and it says identifier i is undefined and that is because this variable here belongs to this block and it is not accessible outside of that block okay so let's delete this part here and something interesting that i want to show you is that sometimes you are going to see that these curly brackets are omitted so there are no curly brackets and this code still works that is because in programming you can still write it like this and this code will work only in a situation where this for loop has only one command so here we have only one command and it belongs to this for loop here but if you try to write another command then you would get an error which again says identifier i is undefined because this here in order to do this it requires you to write these curly brackets again like this and now the error would disappear so the rule is that you can omit these curly brackets only if you have one command that belongs to that block and in this situation it is for loop block and it is the same case for ifelse command so only in a situation where you have one command that belongs to that block you can omit the curly brackets if you have two or more then curly brackets are necessary for you to define where the block begins and where it ends fourth type of scope in programming is nested scope and this means when one scope is nested inside another scope now i know that this might sound a little bit tricky but don't try to learn it by heart just try to understand it because it's very logical when you think about it and after i give you the example of a nested scope i will put a picture on the screen so that you can pause the video and analyze that picture and really understand how nested scopes work because sometimes we can have scopes that are nested inside other nested scopes so again please don't be scared by this because once i show you the example you will understand everything and it will be very very easy i promise so let's delete this part of code here and what i want to do is i want to iterate through the numbers between 1 and 10 and i want to print which numbers are even and which numbers are odd so let's put curly brackets here and in order to do this i need to say if i is divisible by 2 so if i modulated by 2 gives you the result of 0 that means that i is even number so i will print c out i is even oh like this else so if this here results as false that means that i is odd number so our print i is odd like this okay so let's run this program just to make sure that it works as it should okay so 1 is odd 2 is even 4 is even okay the program works as it should but we don't have 10 here because we are going to i less than 10 not i less than or equal to 10. okay this is okay it doesn't matter so something that you need to notice here is that i is a variable that has been declared inside for loop scope but we can still access that variable inside this scope here and this scope here so that is the rule the variable that has been declared in a higher scope can be accessed inside deeper scopes but for example if you try to declare another variable here so let's say int let's say if block variable and let's assign it the value of 10 so i declared a variable inside if block and if i try to access this variable here for example let's say that if block variable is equal to 20 we are going to get an error which says if block variable is undefined so this variable that has been declared in deeper scope cannot be accessed inside higher scope and it cannot also be accessed inside this scope here so again the rule is that variables that have been declared on higher levels which means higher scopes can be accessed inside deeper scopes so deeper levels but not vice versa so a variable that has been declared in deeper scope cannot be accessed inside higher scope as you could see with this example here so that would be all for this video if you enjoyed it give it a thumbs up so that i know to make more videos like this one in the future and then if you have any questions or topics that you would like to see in the future videos feel free to let me know in the comment section and if this video was helpful for you make sure to share it with other people and your friends who would also like to learn programming also i will put on the screen videos that i handpicked for you so that you can continue upgrading your programming knowledge thank you very much for watching and i will see you in some other video bye