hi everyone welcome to my channel welcome to another c plus functions video and in this video i want to talk about concept that is related to functions which is function overloading so i want to first explain what function overloading is it means that you can create multiple functions with the same name but those functions are going to have different parameters so here i have opened my visual studio and let's create a function which is going to be called for example sum and i'm going to put the return type of that function to be and so integer if you're not familiar with function return types i'm going to link that video here so make sure to watch it so first thing we write the return type of our function and then we write the name of our function and as i said our function is going to be called sum and then i want to pass parameters to this function so i really want to declare which parameters this function is going to receive and those are going to be two parameters the first one is going to be integer and i'm going to call it a and then the second one is also going to be integer and i'm going to call it b like this so this is going to be our first function and let's also say that we want to create another function which is also going to be called sum but this time it is going to be of return type double like this and then i'm going to call it sum as i already said and this function is going to receive two parameters as well but those are going to be of type double so i'm going to say double a and then double b like this okay and as you can see these functions are underlined because it says function definition for some not found meaning we have declared our functions here but these functions are missing the the definition so definition is missing for this function and then this function as well and let's also create one more function so i'm going to say for example float and then i'm also going to call it sum and let's say that this time i'm going to give it um three parameters so i'm going to say float let's say float a and then float b and then float c like this okay and then what i want to do is i want to create definitions for these functions which i'm going to do here so the first one that i want to define is going to be this one here so i'm going to copy its declaration and then i'm going to add these curly brackets and here i'm going to put a definition for this function so let's say that i'm going to create a variable of type and and i'm going to call that variable result like this and i'm going to assign it the result of a plus b like this and then what i want to do is return this result from my function so here i'm going to say return result like this so this would be one way of returning the result from your function and then another way to do the same thing is going to be to say really return here so instead of creating a variable that is going to hold this result you can really return this result itself from your function so you can say here return a plus b and now we can delete this line and as you can see this function became shorter and more readable so now i want to define this function here so i'm going to say double okay i should have copied this and then double b as well like this so here i want to put the definition for this function here and this function oh i'm missing the name for my function it is called sum so this is return type this is the name of our function and then these are parameters of our function and here i want to say return a plus b as well but this time our a and our b are going to be of type double so in this situation there were integers and then in this situation there are decimal numbers okay and let's also create a definition for this function here so this float function and this time i'm going to copy it okay and i'm going to add these curly brackets and here i want to write return and then a plus b plus c like this okay so now how we are going to test this we can call these functions we can invoke these functions here in our main function and the first one that i want to invoke is going to be our end function so i'm going to say c out and then this line of code is going to really write out whatever our function returns so i'm going to say please write out whatever my sum function returns and then i want to pass to my sum function two numbers and those two numbers are going to be two integers and as you can see here we have really help from our intellisense which says you have three possible functions that you can call so you have overloaded three functions and you can navigate through these using your arrows so the first one is going to be our function that has float return type and that function return that function receives three parameters of type float and then the second one is going to be the one that has return type double and that function receives two double parameters and then the third one is going to be the one that returns integer and that function receives two integer values so here i want to call our integer function and i want to pass to that function four and three for example and let's also add and line like this and now if i run my program we can expect to see the result of this line of code here and as you can see the result is seven meaning that our function has been invoked and then this line of code has received the result of summing these two numbers and that has been written out in our console and the result of summing four and three is seven okay so now i'm going to stop this console and i want to test these other two functions so i'm going to say c out and let's test our sum function that receives two double parameters so it is going to be this one here so i'm going to say 4.4 and then 3.3 for example and i'm going to add end line at the end as well okay and now if i run this program you can see that our second line is 7.7 meaning 4.4 plus 3.3 is going to be 7.7 which is correct so we have successfully tested this function here so this double function that returns double and receives also two double parameters and then let's also test this third function so here i want to say c out sum and then here i want to pass three parameters the first one is going to be let's say 4.4 and then the second one is going to be 3.3 and then oh three decimal point 3.3 and then the third one is going to be 2.2 for example okay now this invocation should invoke this float function so when i run my program as you can see here this third line contains the result of summing these three numbers and you can check this out using a calculator but this is the correct result so as i already explained this represents function overloading and we have created three functions the first one is the one that receives in types and returns and type as well then the second one receives double so two double variables two double parameters and returns double as well and then the third one really contains three arguments so three parameter parameters but it has the same name as these previous two and then it returns float type as well and then now when we call when we invoke those functions we can really pass different data types and depending on those data types we are going to call adequate functions so in this first line we are going to invoke this and then in this second line we are going to invoke this and then in our turn line we are going to invoke this okay so i hope that you understood what function overloading is and also i hope that you have understood that you don't have to create functions with different names when they are doing uh almost the same thing so these three functions these three are doing the same thing they are summing the numbers that we pass to them only in this particular situation the first one is summing integers the second one is summing decimal point numbers and then this third one really sums three numbers and we have overloaded this sum function and we didn't have to create functions that are for example some inch and then some double oh double and then some float like this so we didn't have to name these like some in some double and some float but we can use the same name as long as we have different parameters different number of parameters different return type or something similar in that particular situation our compiler is going to decide on its own which function it should call i hope that you have understood what function overloading is and how you can use that and also make sure to watch other videos from this playlist i'm going to link that in the description of this video so if you enjoyed this video and if you want to see more videos like this please subscribe to my channel and click the bell icon so that you are notified when i publish my next video and also you can follow me on my other social media platforms the link for those is going to be in the description thanks for watching and i'm going to see you in my next video bye