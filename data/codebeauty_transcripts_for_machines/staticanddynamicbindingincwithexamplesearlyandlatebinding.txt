hi everyone i am finally filming a new video and i am so excited yesterday i created a poll and i asked you which topic would you like to see in my next video and majority of you voted for static versus dynamic binding in c plus so that is what i'm going to cover in this video and i also plan to make more of these votings in the future so if you want to participate in the decision making you can vote here or on my instagram account as well i take in consideration both and i am going to link my instagram in the description of this video so the topic of static versus dynamic binding in c plus is actually very easy to understand if you already understand some of the topics that we covered in my previous videos and i am going to link all of those videos in the description and i will link them in the exact order they need to be watched so that it is easier for you to learn and so that you can get that knowledge step by step so if at any point during this video you feel like you don't understand something or you feel like you have a knowledge gap make sure to visit the description and there you will find all the help and all the details that you need so let's return to explaining differences between static and dynamic binding in c plus and the first thing that i want to explain is what is binding so in order to understand this you need to be familiar with functions in c plus and in case that you are not or if you need a little reminder i'm going to link a playlist here so what is binding in c plus binding means associating the call of a function with the definition of that function now in c plus we have two different types of binding static binding and dynamic binding in static binding all of the information necessary in order to perform that association is available at compile time so that association is happening at compile time and another name for static binding in c plus plus is also compile time binding or early binding now on the other hand dynamic binding is performed during runtime because all of the information necessary to perform that binding is not available at compile time but it is available at run time so another name for dynamic binding is late binding or runtime binding now if you are wondering about which one is better the answer is that both have some advantages and disadvantages in static binding as i already said the process of associating the call of a function with its definition is happening during the compile time which means that it is not happening during the runtime which furthermore will make our program run faster on the other hand in dynamic binding that process of association is happening during the runtime which will make our program a little bit slower so now your question might be saldena why don't we always use static binding then well the answer is because dynamic binding also has its own advantages and the main advantage of dynamic binding is it is very flexible and it allows us to decide which function definition we want to invoke at runtime so we make that decision at runtime based on the data and i am going to show you how that works on the example later in this video so how can we achieve static binding and dynamic binding you need to know that static binding happens by default so by using a normal function call or by using function overloading or operator overloading that is how we achieve static binding on the other hand dynamic binding happens when we use virtual functions or function overriding now please don't confuse these two please don't confuse function overloading and function overriding function overloading is used with static binding and function overloading means creating multiple functions that have the same name but they have different parameters that is function overloading on the other hand function overriding is used with dynamic binding and it is achieved when we create inside child class a newer version of a function that already exists inside parent class now if you are confused about any of these things that i mentioned you can find all of these topics covered in individual videos which i will link in the description and now i'm going to show you how we can achieve static and dynamic binding in code so the first one that i want to demonstrate is static binding and as i already said it is achieved by normal function calls or by using function overloading or operator overloading so let's create two functions called sum numbers and the first function will receive two numbers and then the second function will receive three numbers and let's explain then how static binding works so let's create a function that returns float let's call it some numbers okay and it will receive two float parameters so number a and number b and the job of this function will be to return the result of a plus b okay so that is the first function and the second function will be very similar but instead of receiving two parameters it will receive three parameters so i will say float a float b and then float c and its job will be to return the result of a plus b plus c like this so what i want to do now is i want to invoke these two functions so i will say c out some numbers and i will pass number one and number two add end line and then in the second line again i will invoke some numbers but this time i will pass three parameters like this so if i run my program now you will probably guess correctly what is going to happen okay so for this first some numbers function we get the result of three and then for this second we get the result of six so let's close this program and let's explain what is happening here so even though this function here and this function here have the same name it is still possible to decide at compile time which one of the two will be invoked at this line here and then which one will be invoked at this line here so how can we decide that at compile time the answer is by looking at the parameters of these two functions so the first one receives two parameters and the second one receives three parameters so when we try to invoke some numbers and we pass two parameters at compile time we are already associating this function call here with this definition here and then in this second line when we try to invoke a function that is also called sum numbers but this time we pass three numbers so three parameters we are again at compile time associating this function call with this function definition and as i already said all of that is happening at compile time because all of the information is already available at compile time so that is how we achieve static binding in c plus so let's delete all of this code i don't need it anymore because i want to explain how dynamic binding works in c plus and in order to understand dynamic binding you need to be familiar with inheritance in c plus plus and with virtual functions and i will link those videos in the description so what i want to do is i want to create two classes the first one which will be base class is called user and then the second one which will be child class or derived class is called super user so let's do that i will say class user okay and then as i said the second class will be super user like this okay and this super user will be a child class of user class that we created here so i will say that it inherits publicly from user class like this okay now what i want to do is i want to create a method inside this user class and then i will create a method with the same name and same parameters inside this super user class so i will say public because all of the members of a class are private by default and unless we say public explicitly those members will not be available outside of that class that is why i'm putting this access modifier so let's create a method called get permissions i will say void get permissions like this and it will not receive any parameters and inside this method i will just say see out users can see limited info like this okay now what i want to do is i want to create this method inside my super user class but here i will say that super users can see all the info so we have the same method here and here and both of these methods have the same parameter list which is zero parameters but they have different implementation this one says user can see limited info and then this one says super users can see all of the info now in order to achieve dynamic binding we are missing one more thing and that is virtual keyword here so here i will say virtual like this and again if you are not familiar with virtual functions check out that video in the description okay now what i want to do inside my main function is i want to create a user and a super user so i will say user and i will call it you so we created a user and let's now create a super user as well so i will say super user and let's call it s okay what i want to do with these two is i want to create a list of pointers of type user and inside that list i will push both this user and this super user and that will be possible because super user deep down is still user because it inherits from user class so let's create that list let's say list of user pointers like this and in order to be able to use list collection you need to include it here you need to say include list like this and as you can see now the error has disappeared so i am creating a list of user pointers and i will call it users like this and as i already said inside this users list i will push boot the address of this user and this super user so i will say users dot push back and here i will put the address of my user and then i will do the same for my super user and a quick tip if you are wondering why i'm using this ampersand symbol here it is because i want to add the address of my user to this list here and then the address of a super user to this list here so why am i doing that well because this here is a list of user pointers which means that here we need to add addresses and if i try to remove this ampersand symbol from here or from here as you can see we will get errors because as i already said this here is a list of user pointers so here we need to add addresses so i will return this ampersand symbol and then here as well okay so what i want to do now is i want to iterate through the list of my users and for each user inside that list whether it is user or super user i will invoke a function called get permissions and it should dynamically bind appropriate function with that call so for super user this function here should be invoked and then for user this function here should be invoked so let's demonstrate how that works i will create for each loop here so i will say 4 so for every user pointer which i will call user ptr inside my users list what i want to do is i want to say user pointer please invoke function called get permissions and keep in mind that here i need to use this symbol instead of dot because this here is a pointer so let's return that symbol okay so if i run my program let's see what is going to happen okay and as you can see it says users can see limited information and then super users can see all of the information so for our user we invoke this implementation here and then for super user we invoke this implementation here and that decision is made at runtime because it is based on the value that we will find inside this variable here and that value that data is not available at compile time but that data can only be available at runtime so that is how we achieve dynamic binding in c plus so i hope that this video was helpful if it was please give it a thumbs up for the youtube algorithm and also comment about the topics that you would like to see in the future and i am going to create more polls where we will decide together about the topics for my next videos and you can vote both here on youtube and on my instagram account as well but if you want to increase the chances of your topic appearing in the next video make sure to vote both on instagram and on youtube so i believe that is all for this video thank you very much for watching and i'm going to see you in some other video bye