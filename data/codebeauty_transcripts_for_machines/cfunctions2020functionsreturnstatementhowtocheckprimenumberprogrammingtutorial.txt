hi everyone welcome to my channel walk up to another video of C++ functions and this video I wanted to talk about return statements and return types of a function and also if you're a beginner and C++ make sure to check out my C++ for beginners course there you can find very useful examples in order to start learning C++ and also subscribe to my channel and click that I can so that you're notified when I publish new video and if you want to become a developer and you really want to get a perspective into what is the job of a developer and how developer life looks like make sure it follow me on my other social media platforms so Instagram and Twitter accounts at true code beauty and I'm going to put those in the description of this video so without further ado let's start with today's video so as I said in this video I want to talk about return types of a function so what is a return type of a function well a return type of a function can be any data type that can be used in order to declare variable so it can be inflow to boo char double it could be any user created data type and it can be void as well which means that that function is not going to return anything and as we explained in one of my previous videos function is a block of code it is a code that is grouped together and that code is going to perform a specific task and here I want to make a difference between functions that return value and functions that don't return value and functions that don't return value can be for example an example of a function that does not return a value it can be a function that writes out a menu to your user so you call that function that function writes out a menu to your user and the job of that function is done there so you are not expecting any value to be returned from that function but an example of a function that returns a value can be a function that performs a specific calculation let's say on arguments that you pass to that function and after that calculation is performed you are expecting a certain value so result of that color halation to be returned from that function and an important thing is that function can return only one value so only one return statement inside your function function is going to be executed and I'm going to show that on the example that we are going to do in this video and now I'm going to show you really how functions make your code easier to read easier to understand and how they make your code reusable so we are going to show that on an example which we are going to first make without using functions so we are going to make a program that is going to determine whether a number is prime number or not and we are going to do that first without using functions and then I'm going to refactor that program so that uses functions and then I'm going to show you how that program becomes instantly more readable more understandable and also how that makes your code reusable so as I said we are going to create a program that is going to determine whether our number is prime number or not and the definition of a prime number is a number that is divisible only by itself and by one so if that number is divisible by any other number so not one and not itself but any other number that means that that number is not prime number so the first thing that I'm going to do here is I'm going to declare a variable of type int call it number and then I'm going to let my user enter that number so I'm going to write out the message to my user and then use the C in command in order to get that number and store it in my number variable and then let's explain the algorithm that we are going to use in order to determine whether that number is prime number or not the definition of a prime number is a number that is divisible only by one and by itself which means that if you can find any other number besides one and that number itself that you can use to divide it by this number that our user has entered and get the remainder of zero that means that this number is not prime number so how we are going to solve this well we are going to iterate through all the numbers between 2 and this number minus 1 and then we are going to check whether this number is divisible by that counter value so I'm going to write out for int I is equal to 2 and then ice west death number and in each iteration I want to increase the value of my I counter so why haven't I used 1 here and why haven't I said here that this I is less than or equal to the number because every number can be divided by 1 so we do not need really to check that and also every number can be divided by itself and we do not need to check that as well so here we are going to enter iterate through this control so between 2 and while I is less than that number that our user has entered and here we are going to check whether this number that our user has entered can be divided by any value of our eyes so in any iteration which we are going to go through and in the situation where it can be divided we are going to use a flag which I'm going to declare here and that flag is going to be of type bool and let's call it is Prime flag like this okay and this flag is initially going to be assigned a value of true so we are going to initially say that all the numbers are prime numbers and then we want to prove that wrong for the numbers that are not so we are going to use this flag in a following way here I'm going to check in each iteration if our number that our user has entered can be divided by that current counter so by the current value of I so I'm going to use this modulo operation and I'm going to say if this number modulated by I is going to give us the result of 0 so when you divide this number by I do you get the remainder of zero and if this operation here results as true we are going to say that our s Prime flag is going to be false so we are going to assign the false value to our s Prime flag because we have clearly found one number which is not one and that number itself that can be used in order to make this condition true so here I'm going to write out is prime flag and then I'm going to assign it a value of false and then another thing is going to be really if we find one number so even one number is enough to find that that really fulfills this condition here in order to say that our number is not prime number and in that situation we do not really need to check any more numbers because we have determined that our number is not prime number so here I can use break statement so I can't see if you find only one number please do not iterate through this for loop anymore because we do not need to find any more numbers so in this situation here we have iterated through all the numbers between two and that number that our user has entered we have checked whether that number can be divided by any value of our I counter and if it can be divided meaning that it gives the remainder of zero after that division we are going to set our prime flag to false and we are going to break from our for loop and after we have successfully fulfilled this so after we have successfully iterated through this for loop or we have fulfilled this condition in one iteration we are going to leave our for loop and we are going to come to this line of code here and here I want to check what has happened with my is prime flag meaning I want to check whether this is prime flag has stayed true which means that our for loop has executed all of its iterations and it has not find any number that can be really used to fulfill this condition here and in that particular situation that flag is going to stay and that is going to mean that our number is prime number so here I'm going to write out if yes Prime flag meaning if this value here if this variable here holds the value of true we are going to write out C out like this and we are going to write out prime number like this okay and let's also add a line here but in a situation where this here does not hold a value of true that means that in one iteration so it can be the first one it can be the last one it can be any in between we have really found at least one number that can be used to fulfill this condition and that has set our is prime flag to false and in that situation we are going to use our else statement and we are going to copy this and we are going to really modify it to say not prime number like this okay so now if I run this program you can see that it asks us to enter a number I'm going to enter a number let's say five for example and it says that five is prime number which is correct five is a prime number and let's run it one more time and let's say that we want to check six this time and as you can see our program has written out that 6 is not a prime number and six really is not prime number because it is divisible by two and by three besides from 1 and itself ok so now you have seen how we can really solve this problem and let's try to refactor this program here in order to use functions so how we are going to do that well the first thing that we need to do is we need to create function and I'm going to do that here and says this part of code here this is the part of code that we are going to move to our function and since this part of part of code here determines really whether our number is from or not and then sets this flag to true or false let's say that we are going to create a function which is going to check as well whether the number is prime number or not and then it is going to return a value true or false meaning the number is prime number or the number is not prime number and that we are going to write here so here I'm going to put the return type of my function and that is need to be bold so that is the return type of my function and then the name for my function is going to be is prime number like this and then let's say that we want to pass an argument to that function and that argument is going to be of type int and that argument is going to be really the number that we want to the number that we want to check so we are going to pass the number to our function that function is going to in this body here check whether that number is prime number or not and then it is going to return bul value meaning true or false so if the number is prime number it is going to return true and if the number is not prime number it is going to return the value of false and how we are going to do that very simple so you see this code here I'm going to comment this code here and I'm going to really know I should have copied it before so I'm going to copy this code here and I'm going to move it to my function okay and we have previously explained this code here so we do not need to explain it again but what I'm going to see here is after this algorithm is done so after we have really stored the value of true or false so we have stored the value of false in our S prime flag or we have really kept this true value inside our S Prime like what we need to do is we really just need to say return is prime oh it's prime flag like this so after we have checked whether our number is prime or not that we can really just return that value from our function okay so we can now after we have moved this code to our function we can delete it from here like this okay and then as you can see we have been left with this is prime flag which is not declared now so identifier is prime flag is undefined meaning that now we have to really declare it and we have to assign it a value so I'm going to say here bull is prime flag like this and then the value that I'm going to assign to my is prime flag variable is going to be whatever value our function returns so here I'm going to say please call my function is prime number oh this prime number like this okay and then passed that function this argument here so our function expects a value and that is going to be this number that we want to check whether it's prime or not and then after this function here is done it is going to return a value of either true or false and that value is going to be stored inside our s prime flag variable okay so now if I run my program you can see that it asks us again to enter a number so I'm going to say let's check number nine for example and it says that number nine is not prime number which is not because it is divisible by three and let's check number 13 for example and 13 is prime number okay so after we have really used this function in order to perform this particular task I want to show you one more thing and there is going to be how we can refactor this function here in order to make it even more simple and if you look at this function here you can see you can see that this is prime flag is set to true here and then in this situation where we find number that can be used to fulfill this condition here we set that is prime factor Falls and then we use this break statement in order to break our for loop so we are not going to iterate anymore true our for loop when we come to this break statement and then we really go here and then we return that is prime flag but we can do that in a more simple manner and that is going to be really here so here in a situation where we find number that is really fulfilling this condition here we can see at this very line of code we can see return false like this because this and this code of this code here we can delete and why I can use this return statement because this return statement is going to really break our for loop and it is going to return the value from our is prime number function meaning it is going to do two things so we do not really need to set the flag and then return the value of that flag at the end but we can really see if you find any number that can fulfill this condition return false immediately so break for a loop and also return the value from our function meaning and the execution of that function because we have found our result and then here as well we do not really need to declare this is prime flag to true and then return it because it is clearly true so we can say here return true and then remove this flag from here like this and then as well I can remove these curly brackets and make my code even more readable so now I want to explain what we have done so here we are passing a number to our s prime number function then we are iterating through all the numbers between 2 and that number we have skipped one and that number itself because all the numbers are divisible by one and by that by that number itself and then we are checking whether any of these I values between 2 and number fulfill this condition here that would mean that that number is the by that current value of I and that would mean that our number is not prime number so at that very moment we can say please return false because this number is clearly not prime number but in a situation where this for a loop has really iterated through all of its iterations and it has not found any number that fulfills this condition here that means that this return false statement has not been executed and then it does in that particular situation this return statement here is going to be executed and this return statement here says return true ok so this part of code here has not changed nor it is going to change and if I run it again you can see it asks me to enter a number I'm going to enter number seven then it is going to check whether that number is prime number so it is going to call our function and assign the result of that to our is Prime's like variable and I press ENTER here you can see that we get result prime number because seven is prime number okay and that is really making your code much more readable and reusable as well so this main function here is much more clean than it was before and now I want to show you the most beautiful thing and that is going to be how we can make this is prime number of function reusable so let's say that I am going to delete all of this code here so I'm going to delete it and now I have I know that I have written out this is prime number function and I know that I can really invoke this function and use it whenever I need to determine whether some number is prime number or not so let's say that now we want to check all the prime numbers between one and a thousand for example so how we are going to do that well we are going to iterate through all the numbers between one so I is equal to one and then I is less than or equal to a thousand and increase RI in each duration by one like this and then in each iteration I really am going to just send this I to my function and I'm going to really get the results from this function so this function is going to tell me whether that I is prime number or not so here I'm going to declare a variable of type bool and I'm going to call it is prime and I'm going to assign to that variable a value of its prime number when I pass it the value of I so whatever this function here returns whatever it is function here results in I'm going to assign that result to my is Prime variable okay and now what I want to write out is all the numbers that I put are prime numbers between 1 and this thousand value so I'm going to say if is Prime like this I'm going to write out C out and then I want to write out the current value of my I counter because that is a number that we are talking about so I is prime number number like this okay I'm going to add a new line at the end so this code here is really going to check all the prime numbers between 1 and a thousand and it is going to write out all the prime numbers in that interval and for solving this particular problem so whether the number is prime number or not we could used this is prime number function which we have written once and we have really tested it once we know that it works as it should and now we can really close it we do not need to really think about how we are going to perform this task never again so we have written it we have oh we have tested it and now we have this algorithm stored in our s prime number function and we know that this function works in a following way so we pass it a value and then this function return returns us true or false variable meaning that the number is prime number or not so once more if I run my program you can see that we have gotten the expected results so we have gotten all the prime numbers between one and a thousand okay and there are a lot of numbers okay so you can check these numbers on your calculator if you want and let's say now that we really want to check all the numbers between not just one and a thousand but let's say one and ten thousand or hundred thousand okay we can call just this is prime number function test the value of our I and then check the value that this function has returned and this function has really told us whether the number is prime number or not and if the number is prime number we just want to write that number out to our user so if I run this function again you can see that it is writing out all the prime numbers between one and hundred thousand and there there is a lot of numbers again so you can even count how many prime numbers there are in this interval so between 1 and hundred thousand and let's say that I'm going to leave that part to use so if you want to really upgrade this program so that it counts how many prime numbers there are in this interval you can write that code in comments down below and I'm going to check it and as well you can leave it for other people to see and use if they need it so I hope that you have understood this return type of a function and in this particular situation it was bulltype but you can have as a return type from your function you can have any other data type so you can have flowchart and string whichever data type you can really use in order to create a variable you can use that data type in order to be a return type of your function so in this particular situation I wanted to show you an example of a bit of a more complex function let's say that is going to determine whether your number is prime number or not and it is going to really receive that number that want to check as an argument as parameter and then it is going to return only true or false meaning that number is prime number or that number is not prime number and once you have written this code and once you have tested it you do not really need to bother with this function anymore you do not need to remember this code nor read it nor even understand it in order to use this function only in a situation where you have a bug and that bug is in this particular function only in that situation you are going to need to really reread this function and fix that bug in any other situation you can really just use this is prime number function and as well we could have made other functions with other return types we could have created for example a function that is going to to sum two numbers so you are going to pass to a function two numbers let's say number a and number B which your user enters and then that function is going to sum of those two numbers and it is going to return the result to your main function from where you are going to invoke that function and as well I can leave that to you so you can really practice writing functions on that example for example and you can put the code for that exercise in the comments down below as well and I'm going to check it and in this particular example as I said I wanted to show you a bit more complex example so that you can really understand why we need functions and why they make our code understandable and reusable and if someone else comes to your code now and he sees that he has his prime number function he does not really need to open this function and read how this function works it is pretty clear from this this declaration itself that this function receives a number and determines whether that number is prime number or not and returns that true or false back to the invoker back to the function that called that invoke this is primed is prime number okay so I hope that you like this video I hope that you enjoyed watching this video if you did make sure to like it and also subscribe to my channel and follow me on my other social media so Instagram Twitter account at Tru code Beauty the link is going to be in the description and I'm going to see you in my next video bye