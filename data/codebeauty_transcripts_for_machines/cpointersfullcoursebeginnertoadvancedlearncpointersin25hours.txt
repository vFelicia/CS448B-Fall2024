hi and welcome to my channel this video is beginner to advanced c plus pointers course so in this video you are going to learn about all of the important topics related to pointers but before i start with the lessons i want to give you a few tips so if you need captions or subtitles for this video i want to say that youtube sometimes does not allow captions on videos that are very long but if you really need them i'm going to link here and in the description a playlist that contains all of the individual lessons from this video and those lessons contain captions so if you really need them make sure to check that out tip number two is that all of the chapters will also be linked in the description so that you can navigate yourself through the lessons but my recommendation is to watch the entire video because it is going to be much easier and better for you if you don't skip anything and learn step by step and if you want to learn about other topics like object oriented programming data structures algorithms or programming in general i have a lot more tutorials for you and i will also link them in the description and one of the most important topics that you should definitely check out is creating graphical user interface applications with c plus one of my most popular videos is this one where i explain the fastest and the easiest way to build user interface applications i will link that video in the description and i will also link a tool that i use in order to create ui applications it is called c plus builder and you can download it and try it out for free using the link in the description and please follow that tutorial in order to learn more about building your own ui applications and in that tutorial you will see how c plus builder makes it very easy to create user interfaces so after you watch that tutorial you will understand how to create your own user interface applications so that any idea that you have you will be able to translate that idea into an app very fast so those are the topics that i covered so far on my channel and if you have any other topics that you would like to see in the future feel free to write me in the comment section and before i start i also want to ask you to please give this video a thumbs up for the youtube algorithm and also if you want to support me and my channel and all of the hard work that i put in in order to make these videos and thank you very much if you do that so now i'm going to start with the lessons good luck with learning and feel free to let me know how it goes in the comments in this video i want to talk about pointers so i will go straight to the point pointers are very important concept in c plus and they have many uses in z plus plus now pointers are not limited only to c plus they exist in other programming languages as well but in most of those programming languages they are really hidden they work behind the scenes so you cannot see them and you cannot use them yourself but at c plus you can use them and you can create your own pointers and they can be pretty powerful if you know how to use them but they can get quite confusing as well if you don't understand them well so the first thing that i want to explain is what are pointers so we already have explained the concept of a variable and you should be familiar with that so we said that a variable is just a container so a container that stores certain value now a pointer is container as well but instead of storing value pointer stores an address so a memory location and let me show you how pointers work in visual studio let's create a variable of type int and i'm going to call it n and assign it a value of 5 and let's write out this n like this so nothing new here we are already familiar with this and if i run my program as you can see we get this value of 5. so that was expected now as i already said this n is a variable and that means that it is a container which is storing certain value now because it is a container that means that it has its address inside memory so it has its physical location so how can we get that location how can how can we check which address this n has so in order to do that you use this ampersand symbol like this so you put it before your variable name and that should give you the address of that variable so if i run my program now as you can see now we have an address um and this is the address of our n variable so this is its physical address where this value of five is stored and because this is pretty hard for humans to remember this is just a random numbers and characters because of that we use meaningful names and we access these values that we store in our memory using these meaningful names which are our variables so i'm going to close this now and what i want to show you here is i want to show you how can you create a pointer that is going to hold this address of our n variable so in order to create a pointer you give it a type first so you say int and then in order to indicate that you are creating a pointer you use this star symbol and then you give it a name so let's call it ptr pointer and i'm going to assign it the address of our n variable so i'm going to copy this and paste it here okay now our pointer is holding the address of our n variable and in order to prove that i'm going to write out the value of my pointer like this so as expected we have this first line here which is writing out the address of our n variable and then this second line of code is this line here and as you can see we have written out the value of our pointer and that is the same address as this one here which means that our pointer really is storing the address of our n variable now you may ask how can i access or can i access the value that is stored on that address using pointers and the answer to that question is yes you can and in order to do that in order to access the value that is stored on this address that your pointer is holding you have to dereference your pointer so how do you do that well let me copy this so as you already have seen this line of code here is going to write out the address and in order to write out the value on that address you dereference the pointer and in order to do that you add this star symbol before your pointer's name so if i run my program now as you can see in this last line of code we have the value of 5 which is actually the value that is stored on this address here so let me show you one more thing what i want to do is i want to change the value that is stored on this ptr address so on this address that our ptr pointer is storing so how am i going to do that i'm going to say again star symbol and then ptr and this here means please access this memory location so whatever i'm going to assign here is going to be stored on that memory location and what i want to assign is for example value of 10 like this so now if i copy this line of code and then paste it here and if i run my program again we have this value of 10 stored on this address here and one interesting thing as well is that if we try to write out the value that our n holds now like this if i run my program as you can see our n holds the value of 10 as well even though we have never said that n has the value of 10 but we have stored the address of our n in our pointer and then we have dereferenced our pointer meaning we have changed the value on that address here in this 11th line of code here so that's why our n holds value of 10 now one very important thing to keep in mind is that your pointer has to be of the same type like the variable that it is pointing to so let's close this so as i said this integer pointer is pointing to an integer variable so rn is of int type and the same way would be if we created a float pointer it would have to point to a float variable and then char pointer can point only to a char variable double bool uh and so on so pointer and the variable that that pointer is pointing to have to be of the same type okay so that means that if i try to change the type of this n variable to float for example like this so if i say float immediately we get an error here and the error says a value of type float pointer cannot be used to initialize an entity of type endpointer meaning you cannot assign address of a float type to pointer of int type okay so that is the error that we have here and i'm going to return this to int okay and as you can see that error has disappeared because now our pointer is pointing to the same type so to the variable of the same type that that pointer has so int pointer pointing to an int variable one thing that beginners very often try to do is the following so they say okay let's create a pointer so int let's give it a name ptr2 so pointer like this so i have created a pointer right so let's dereference this pointer and assign it a value so i'm going to say please dereference ptr 2 and assign it a value of 7 for example now this code here has a problem problem and if i run it if i say build solution actually as you can see it says uninitialized local variable ptr2 used this means that this ptr2 so this pointer 2 does not have an address so where should it store this value of 7 if it does not have an address and the easiest way right now to solve this problem is going to be to create a variable and to give the address of that variable to our ptr2 pointer so i'm going to say int v this variable has to be of the same type as our pointer as we already said and then i'm going to say here our ptr2 is going to hold the address of our v variable like this and now we shouldn't have this problem anymore so if i build my code again as you can see one succeeded so the problem has disappeared and let me write out the value of this v variable so i'm going to say v is equal to and then let's write out the value of this v and if i run my program as you can see it says that v has the value of 7 because we have assigned it here by dereferencing our pointer that is holding the address of our v so you may say now okay salina i understand this but this seems a little bit too much why would i create a pointer just to assign a value to a variable and the answer to that question is you don't this is not the type of problem for which pointers were created in c plus plus so there are different problems that pointers solve in c plus plus and this here is just a demonstration of what are pointers and how can you create your own pointers now examples of some of these other problems that pointers solve is you can use pointers in order to pass values by a reference to a function and then you can use them to return multiple values from a function which is an interesting one you can use pointers in combination with arrays as well you can use them for dynamic memory allocation and then if you're familiar with oop objectoriented programming you can use a pointer of a base class in order to access a object of derived class and then there is this concept of smart pointers which we are going to cover in the future so stay tuned subscribe to my channel um hit that bell icon as well so that you are notified when i publish my next video and if you like this one give it a thumbs up thank you for watching and i'm going to see you in my next video where we will be talking about pointers bye in this video i want to talk about void pointers now in the previous video of this playlist i introduced you to pointers in general so i explained what are pointers and how you can create your own pointers and i said that a pointer is a special variable that can hold an address and i said as well that a pointer can hold only the address of a variable that is of the same type as that pointer which means an integer pointer can hold the address of an integer variable and then a character pointer holds the address of a character variable flow pointer of a float variable and so on but there is an exception to that rule and that is a void pointer and a void pointer is a special type of pointer that can hold the address of a variable of any other data type so avoid pointer can hold the address of a float variable or an end variable or a char bool struct whichever one you pass to that void pointer but a void pointer has a limitation as well and that limitation is that you cannot directly dereference a void pointer so in order to demonstrate this i'm going to create an example with the knowledge that we already have so using only integer and character and float pointers that we are already familiar with and then i want to introduce a void pointer in order to solve that problem so that you can see how void pointers are used so let's jump into our visual studio here i want to create a variable um and let's make it of int data type so i'm going to say int and let's call it number like this and i'm going to assign it a value of 5 for example now what i want to do with this number variable is i just want to write it out and because we are working with pointers let's play with pointers some more so i want to write out this variable using a function that receives a pointer let's do that so that function is going to be of return type void and let's call it print number like this and then here this function is going to receive an integer pointer and we are going to call it uh number ptr so number pointer okay now what this function here should do is it should just print out the value that this number pointer is storing so actually the value that is stored on the address that this number pointer is holding so in order to do that we have to dereference this pointer so i'm going to say star symbol and then put the name of this number pointer and let's add an end line as well now this function is finished and it is writing out the value that is stored on the address that we passed to it and we have to pass it the address of an integer variable so if i invoke this print number function let's say print number as i said since it is receiving a pointer we have to pass it an address and that is going to be the address of this number variable so let's say ampersand number so this here is going to give us the address of this number variable okay and now if i run this program as you can see this function here has printed out value of 5 which is the value of our number okay now what happens if i want to create a character variable and then print out a character variable as well so let's do that i'm going to say char let's call it letter and let's assign it a value of letter a okay and now in order to print out this character using this same approach i will have to create another function because this one here receives an integer pointer and in order to print out a character we would have to create a function that receives a character pointer so let's copy this function here and i'm going to call it print letter like this and then this function is going to receive a character pointer okay and that pointer is going to be called char ptr and then here i just want to write out the reference value of that char ptr so let's invoke this print letter function let's pass it the address of this letter variable that we have created here and now if i run this program as you can see we have 5 for this first function and then a for this second function which means that these two functions are doing its job but what happens if i want to print out a floating point number and then a double and then a boolean value and a struct value in order to do each one of those i would have to create a function that receives that specific data type pointer but we can solve that same problem using a void pointer because as we already said a void pointer can point to a variable of any data type so let's do that let's create a function that is going to print out any data type so that function is going to be of return type void and let's give it a name print because it is generic it is going to work with all data types i'm going to give it name of print and as we said that function is going to receive void pointer and let's call that pointer ptr okay now because this void pointer can point to a variable of any data type we will have to keep track of which data type we have passed inside this void pointer and in order to do that i'm going to use another parameter here and that parameter is going to be of type char and i'm going to call it type so how this type parameter is going to be used well in a situation where we pass an integer pointer to this print function here this type parameter is going to have a value of i in a situation when we pass a character pointer to this void pointer here in this type parameter we are going to pass a value of c and then if we pass a float pointer here here we are going to store an f and then if we pass a double pointer here this type variable should store a letter d so that we can know how we are going to dereference this ptr pointer so the first thing that we have to do is we have to check what this type variable is holding so in order to do that i'm going to use switch case like this you can use if else as well if you want so here i'm going to switch on this type variable like this and what i want to do here is i want to say indicates that this type variable is holding the value of i that means that this here is an integer pointer so here i'm just going to leave a comment for now so i'm going to say handle int pointer like this and then the other situation is going to be indicates that this type variable is holding the value of c that means that here we have passed a character pointer so i'm going to leave another comment as well so here i i'm going to say handle char pointer okay now let's explain how we are going to handle this integer pointer and then this character pointer as well well as we already said since avoid pointer cannot be dereferenced directly but we first have to cast it into a specific data type so into an integer pointer or into a character pointer in this particular situation i'm going to do that so here i'm going to say in the case that our user has passed an integer pointer here i will have to cast this void pointer into an integer pointer first so how do you do that well you say please this pointer here so this ptr casts that into an integer pointer so this expression here is going to cast this void pointer into an integer pointer so in these parentheses here we are going to have an integer pointer and in order to access to the address that an integer pointer is storing and write out the value that is stored on that address we dereference that pointer and for that we use this star symbol so now here we have the value that is stored on this integer pointer and i'm going to write out that value like this and let's add end line as well so this here writes out the value of an integer pointer so let's copy that and then paste it here and here what i want to do in this c situation is i want to cast this void pointer into a character pointer so char pointer and then after i have character pointer here id reference and then this line is going to write out the value of our character okay so now if i invoke this print function i should get the value of this number and then of this letter as well using only this print function so let's comment these two for now and let's invoke our print function so i'm going to say print and then the first thing that it receives is going to be the address and in this particular situation considering that this is a void pointer we can pass it the address of any data type so we can pass it the address of a integer variable or of a character variable or of a floating point variable and in this situation we have integer variable and then character variable so let's use these two so let's pass here the address of our number that oh that is going to be the first parameter and then the second parameter is going to be the type and considering that we have passed the address of an integer let's pass the value of i as our second parameter here okay and then i'm going to copy this function one more time and this time i want to pass it the address of our letter variable and considering that that is a character here as a second parameter i'm going to pass c now i've just noticed that something is missing from our switch case and before i say what it is please write your idea write your answer in the comments down below so what we are missing in these two cases is break at the end so here i'm missing a break like this and then here as well okay so now we have completed our switch case and if i run my program now as you can see for this first line we get the value of 5 which is our integer so this print function has printed the value of our integer and then in this second line we have printed out the value of a character and we have done that using this print function which receives a void pointer and then it receives a char variable which is called type and we use that char variable in order to differentiate which data type we are storing inside this void pointer because as i already said a void pointer can point to a variable of any data type but it cannot be dereferenced directly so for that we are using this type parameter to check which data type is stored inside this pointer here so now you have an idea on how to use void pointers but i would actually advise you to be very careful when using void pointers why because your compiler in this particular situation does not have a way to tell you hey you are trying to cast a void pointer which is actually an end pointer into a character or vice versa if you are doing that your compiler in this situation here does not have a way to know if you are making an error or not because inside a void pointer you can store the address of any variable so of a variable of any data type and then you can try to cast that void pointer into a pointer of any other data type which means for example in this particular situation here we are passing an integer so this number here is an integer which means that here for this line of code we are receiving an integer pointer okay and then in this case here we are trying to cast that into an integer pointer and that is okay but if we accidentally make a mistake here and we try to cast that into a character pointer for example like this our compiler now does not have a way to know that we are making a mistake here and if we run our program look at this we get this undefined symbol here which is what is this you know this is not the expected behavior of our program and we did not get a compiletime error which means that this here is completely valid so your compiler is not going to tell you that this here is an error but it actually is a logical error and those type of errors so logical errors are much harder to find inside programs and this here is a small program and it is kind of easy to find an error in a program that has 20 lines of code but if you had a logical error in a program that has 20 000 lies of lines of code for example you would have a very very big problem so again i strongly advise you to be very careful when you are using void pointers because as you see compiler is not uh reporting an error for this situation here but but this actually is an error so i'm going to return this to an integer pointer okay so i hope that you enjoyed this video and uh that you learned something new and if you did give it a thumbs up subscribe to my channel and thank you for watching i'm going to see you in my next video bye hi everyone welcome to my channel in this video i want to talk about pointers and arrays and if you watched the first video of this playlist you remember that i said that one of the common uses of pointers is using them with arrays so in this video i want to demonstrate how that works so let's jump straight to our visual studio and let's create an array of type end and i'm going to call that array lucky numbers like this and let's say that i have five lucky numbers for example and those are two three five seven nine oh that's five numbers already okay so these here are my lucky numbers and now i want to show you one thing so what is going to happen if i say for example c out lucky numbers and let's add a line so what is going to be written out if i write out just the name of my array let's check that if i run this program as you can see we get an address but what is this address this address here so the name of our array is actually the address of the first element of that array and in order to prove that let's write out the address of the first element of this array to check if these two are going to be the same so here i want to write out the address of the first element which is the element with index 0. so now if i'm telling the truth these two should be the same so if i run my program as you can see indeed we get the same address which means again the name of the array is the address of the first element of that array now that means that this lucky number's name behaves as a pointer and these square brackets here are behaving as a operator for dereferencing so if i say for example c out lucky numbers of 2 i'm going to get the element that has index 2. so this here is going to be the first address and then it is going to add two more addresses to that element and we are going to get the value that is stored there so lucky numbers name is the address of the first element it is going to add two more addresses to that so one two so this line of code here is going to give us the value of five let's add end line and run our program in order to demonstrate that and as you can see indeed we get the value of five now there is another way to do this same thing here and that is going to be the following way so i can say c out please write out this lucky numbers which as we already demonstrated is the address of this first element so i'm going to put that here and then i can use arithmetic operators on this so i can say please add to this lucky numbers two more address spaces and then dereference this so we use star symbol for that and then i'm going to add a line and these two lines of code so this one here and this one here should behave the same so if i run my program now as you can see we get the same value so these two lines of code are doing the same thing which means that this line of code here is using these square brackets in order to dereferentiate the element with that index which is index 2 and we know that the indexing starts with 0 so 0 1 2 and we get the value of 5 and then this second line of code here uses this star symbol in order to dereferentiate this expression here and what this expression here says it says lucky numbers which is the address of the first element as we demonstrated here so please use the address of the first element and then add two more address spaces to that so the address of the first element if i add two more to that it's going to be the address of one two so the address of this one here and then if i dereferentiate that i get this value which is stored on that address so these two lines of code are writing out the same thing so let me very quickly show you how you can enter the values for this array and then write them out because here we have hardcoded values so i'm going to delete this and i'm going to comment these two lines of code as well no actually i'm going to comment all of these because we don't need them anymore but i'm going to leave them for you so that you can see how these are used in order to dereferentiate your array so as i said we want to enter values for our array now so in order to do that i'm going to use for loop so i will say and then our for loop starts with i equal to 0 because that is the index of our first element and then considering that our array has 5 elements and the last one has index of 4 we are going to run our for loop while i is less than or equal to four and in each iteration we are going to increment the value of our i okay and in order to enter values for our array let's write out a message so i'm going to say see out number so please enter a number that is going to be the message for our user and then i'm going to input a value from my console into lucky numbers of i so this here means please enter the value into our lucky numbers array to element that has the same index that our i holds in that iteration so in the first iteration index 0 in the second iteration index 1 and then in the third iteration index 2 and so on so this for loop here is going to help us to enter the values into our lucky numbers array and in order to show that i'm going to put here a breakpoint and that means that our program is going to stop its execution when it comes to this line here so if i run my program as you can see it asks me to enter a number so i'm going to say 2 5 7 9 and 13. so those were five numbers that we had to enter for our lucky numbers array and if i press enter one more time as you can see our program has been stopped in this line of code here and if i hover over my lucky numbers here we have values that we have entered for our array so value of 2 5 7 9 and 13 which are the values that we have entered here so i'm going to stop my program now please stop okay and now what i want to do is i want to use this other approach to write out the numbers that this lucky numbers array is holding so let's use another for loop i'm going to copy this one okay and then what this second for loop is going to do it is just going to write out these numbers but okay let's use this approach for now so i'm going to just change this to c out and then use these other redirection signs and after each number i'm going to add an empty space okay like this and instead of using this approach here so instead of using these square brackets in order to differentiate the element on that position let's use this approach here so i'm going to say please use lucky numbers so which is the address of the first element and then to that i want to add the value of my i so plus i like this and this is going to move okay so this expression here is going to help us to access all of the elements of this lucky numbers array so from the one that has index 0 until we come to the one that has index four and because we don't want to write out addresses because this here is going to give us the address but we want to write out the values that are stored on those addresses we will have to dereference this expression here so for that i will use star symbol and i'm going to remove this breakpoint now and i'm going to start my program to see what is going to happen okay and let's enter 2 3 5 7 19 and as you can see we get values of 2 3 5 7 and 19 which we have entered okay let's stop this program now and there is one more thing that i want to show you what is going to happen if i change this max value from 4 to 5 like this so what is going to happen in this particular situation let's run our program and enter numbers again so 2 5 7 13 15. okay as you can see now here we have these five numbers that we have entered so 2 5 7 13 15 those are the ones here and then the last one is something that we do not recognize what is this this is some junk number that we definitely have not entered here so this number here is something that does not belong to our lucky numbers array and here we have accessed someone else's memory space so we have this result because we change the max value from 4 to 5 here and as we already know our lucky numbers has five elements the last one having the index of four which is this one here and then here we added one more iteration so now we are trying to access the element with index five and that element with index 5 does not belong or does not exist in our lucky numbers array so this element here this is memory location that belongs to someone else and we accessed that trying to dereferentiate the pointer to the element that is sixth element so we have five elements in our lucky numbers array and then if we add one more address space to that we get this here which is memory location that belongs to someone else and if we just randomly change and access memory locations that do not belong to us we can cause very very big problems so i advise you to be very careful when iterating through your arrays and to access only memory locations that belong to that array that you are iterating so indicates that your array has five elements that those are going to be from zero to four so indexes from zero to four in the case that your array has ten elements for example those are going to be indexes zero to nine and so on so again be very very careful to not access memory locations that do not belong to you so i hope that now you have an idea on how pointers and arrays go together and as well we have seen some of the potential problems that can happen if you are not careful enough when working with pointers and arrays so again i advise you to be very careful uh when working with pointers and arrays and not access memory locations memory addresses that do not belong to you so thank you for watching and i'm going to see you in my next video bye in this video i want to explain how you can use pointers in order to return multiple values from a function so i said in the first video of this playlist that using pointers to return multiple values from a function is a very common use for pointers so in this video i want to demonstrate how that works so here we are going to create an array of numbers and then first i want to create two functions and one of those two is going to return me the smallest number in that array and then the other one is going to return me the largest number in that array and then in the second part of this video i want to show you how you can use pointers in order to get both smallest and largest number using one function only so you can return both of these numbers so min number and max number using only one function and that is going to be with the help of pointers so let's start with this example as i already said i'm going to create an array of numbers so um those are going to be numbers of type int and let's call this array numbers like this and it is going to be array of five numbers and let's assign them values of for example 5 4 minus 2 29 and 6 for example so those are going to be my numbers okay and now let's create a function that is going to return the smallest number of this array so i'm going to create that function here and let's give it the return type of end and i'm going to call it get min like this and what i will need to pass to this function is going to be array so this array here so i'm going to say int numbers array so this is going to be the first argument and then the second one is going to be the size of this array so i'm going to say int size and we will use this second parameter here so that we know how many iterations we have to make in order to go through all of the elements of this array so let's define this function the first thing that i want to do is i want to create a variable of type int and that variable is going to be called min so this is going to be the variable that is going to hold the minimal value so the smallest number in this array and initially i want to assign to this variable the first element of this array so i'm going to say that the smallest element initially is going to be the first one so i'm going to say numbers of zero and then we are going to iterate through all of the other elements and each time that we find an element that is smaller than the current value of our min we are going to store that value in our min so let's do that so i'm going to say 4 and since we have already stored the value of our first element in our min we do not need to iterate through that so i'm going to say that my int initially has the value of one okay oh and i is equal to one like this and then our for loop is going to iterate while our i is less than the size of this array so in this particular situation while our i is less than 5 and in each iteration we want to increment our i like this so as i already said if we find a number on a specific position which is in this current situation uh the position with the index of i if we determine that that number is smaller than our min number like this we are going to store that number in our min variable so i'm going to say min is equal to numbers of i so that at the end of this for loop in our min variable is going to be the smallest number of this array so at the end of this for loop here we can return our min like this okay so now in order to test this function here i'm going to invoke it let's say get actually i'm going to write it out i'm going to say see out min is like this and then let's invoke it let's say get min like this and this get main function receives array so let's pass it numbers array and then it receives the size of this array and this array has one two three four five elements and you can check that here as well so we are going to pass five here okay and if i run this program as you can see it says min is minus two which really is the smallest number in our array so that is going to be the first function and then the second function that i want to create is going to be the one that is going to return the largest number in our array so let's copy this function i'm going to copy it and then just modify it a little bit so the name of that other function is going to be get max like this and then that function as well will receive numbers array and the size but here we are going to have variable which is called max instead of min and again we will assign it the value of our first element so then we iterate through all of these elements so starting with the second element because first the value of the first one we already have inside this variable so we do not need to check that but if we find in these remaining elements if we find element that is larger so bigger than our max let's copy this here we are going to store the value of that element in our max variable like this and then at the end we will return our max variable okay so now in order to test this function i will invoke it as we did with this previous one i'm i will just say max is and then invoke get max like this and i'm going to add two end lines here so that we have output which is formatted nicely and if i run my program now as you can see it says min is minus 2 and then max is 29 which is correct so let's explain one more time the algorithm that we are using here in order to determine the biggest number of our array so here in this first line i say that the biggest number is the one with the index zero so the first one and then here we iterate through all of the remaining elements and that is from the one with index one until the last one and if we find that any of those remaining numbers is greater than our max number then we say that our max number is equal to that number so at the end of this for loop we will have in our max variable the largest number of this array here okay and we have accomplished to get our min number and then our max number using these two functions oh i'm sorry so using this get min and then get max function as well so now what i want to show you is how you can use one function only to get both min and max number so let's do that let's create a function which we will name void get min and max like this and this function is going to receive like these two previous functions our numbers array and the size of the array and then considering that we want to return two values from our function we will have to pass those two values by a reference which means we will have to pass the addresses of the two values and then this function here is going to change the value that is stored on those two addresses and this function here our main function is going to have the access to those two addresses as well so once this function here assigns the value of min and max numbers to those two addresses our main function is going to be able to access those values so as i said let's pass to this function as well int min like this and then int max so we are receiving here pointer to a min number and then pointer to a max number okay so the job of this function will be very similar to the jobs of the two functions that we just created so i will just copy this and then paste it here and once more we are iterating through all of the numbers of our numbers array and then here we say if you find any number which is greater than our max number and here we have an error which says operand types are incompatible so int and int pointer which means that here we have to dereference this pointer using the star symbol so if you find any number which is greater than our current max please store that number inside our max like this and then i'm going to copy this code one more time for our min number so i will say if you find any number which is smaller than our min number like this please assign that number to my min number like this so this is going to be the work that this function will do and considering that this function is receiving these two so min and max as pointers this means that this function is directly going to modify the values that are stored on these addresses and those same addresses are going to be available in our main function which means that once this function changes the values that are stored on our max and our min address this main function here will be able to access those changed values and using pointers in that way we have achieved to return multiple values from our function so let's invoke this get min and max in order to test what i just said so i'm going to comment these two lines of code because we do not need them anymore and because here we have to pass min and max we will have to create those two variables here as well so i will say int min and as we did before i'm going to assign to this min the value of my first element like this okay and then i will create max variable as well and assign to my max variable value of my first element as well and now let's invoke this get min and max function so let's say get min and max and let's pass it parameters that it needs so the first one is numbers array so i will say numbers and then second parameter is size of that array so five and then it expects to receive two pointers so min and max and we will have to pass addresses of our main and then address of our max as well like this and this here is called passing a parameter using a reference so that means pass an address of a variable to your function rather than passing variable itself because then if you don't pass an address your function is going to create a copy and whatever changes your function makes with that copy you will not be able to see those changes in your main function so in this way we are passing addresses which means that this function here is operating on the original addresses which this function here is accessing as well so when this function here changes the values that are stored on those addresses this function here will know so that means that now if i try to write out oh i will need to add semicolumn here at the end okay so that means now if we try to write out our min like this min is and then min and then if we try to write out our max as well max we will get values of 2 and 29 at least we expect to get those two values if this function is working correctly so if i run my program as you can see we really have values of minus two let me just um collapse this so we really have values of 2 and 29 as the smallest and the largest number in our array and we have achieved that using this pass by a reference so by passing addresses of our variables to our function which our function then changes the values that are stored on those addresses and since this main function as well has the access to those same addresses that means that our main function can see the changes that have been made on those addresses so i hope that now you have an idea how to return multiple values from a function using pointers so if you enjoyed this video if you learned something new give it a thumbs up and also subscribe to my channel press the bell icon as well thank you for watching and i'm going to see you in my next video bye in this video i want to talk about dynamic arrays so you should already be familiar with the idea of arrays and the concept of fixed arrays from my previous videos but for those of you that really want to understand the need for dynamic arrays i will go through some of the advantages and disadvantages of fixed arrays so that you can really understand where the need for dynamic arrays arised so we said that an array is type of collection which stores elements in continuous memory now that means that it stores elements one after the other so if i do this for example if i say let's create an integer array of five elements and let's call that array my array like this your computer in the background will do the following it will give to this array here five containers of type int and those containers will be one after the other in memory so that means because the array stores data in a continuous memory so one after the other accessing that data will be very very fast so because the name of the array is the address of the first element of that array when you specify the name of the array and then you give it the index of the element that you want to access it is going to be very fast to move from that first element until that position they choose specified so until the element that has a debt index whereas if you use some other collection type like linked list for example which stores data in noncontinuous memory which means in a random places and memory and then each element contains a pointer to the previous one and to the next one accessing elements in those type of collections would be much slower so if you wanted to access fifth element of linked list you would have to traverse the first four elements and then get to the fifth one because they are stored in noncontinuous memory meaning they are randomly in your memory so as i already said accessing elements of an array is a very very fast operation but because your array stores data in continuous memory this has certain disadvantages as well so what happens if you want to insert or delete an element in the middle of the array for example so how can you insert or delete an element in the middle of the array without breaking that continuousness if i can say it like that so you get a point that means that the operation of inserting and deleting elements in an array is going to be much slower than inserting elements in a linked list for example and if you want me to do a video which is related to differences between linked lists and arrays for example write it in the comments down below and i will make it in the future when i find time so again if you are not familiar with the basics of arrays i recommend you to watch my first video which is related to arrays and pointers which i will link here and then you come back to this one so those were some advantages and disadvantages of arrays and it will be up to you to decide which collection you want to use however here i want to give you the biggest disadvantage or the biggest obstacle that we encountered so far when working with arrays and that is the following so the size of the array had to be constant which means that the size of the array had to be known before we even started our program so we always kind of wanted to do this so we wanted to say int size and then we wanted to ask our user to enter the size so please enter the size for the array and then after our user enters the size for the array we wanted to create the array that is of that size that our user specified however we get the error as you can see here it says expression must have a constant value which confirms what i just said which is that the size of the array had to be known at compile time so the size of the array could not be changed once we declared and we had to declare it before we even started our program so this problem was without solution so far but surprise surprise if you know how to work with dynamic arrays and dynamic memory you can very easily create an array and runtime so in c plus plus there are two keywords or two commands which allow you to allocate and deallocate dynamic memory which means to get yourself dynamic memory when you need it and then free that memory once you don't so that it can be reused that is what allocate and deallocate means and those two commands are new and delete so new allocates memory as you may guess and then delete deallocates that memory or freeze it once you don't need it so let's see how we can use this information that i just gave you on our example so instead of doing this here i will comment it because we do not need it instead of doing this what i will do is i will create a pointer like this and let's call that pointer my array and what i want to assign to this pointer will be the following i will say please make this pointer point to new integer array and the size of that array will be the size that our user entered like this okay and as you can see our compiler is fine with this expression here we do not have an error so this new keyword has allocated an array of this size that our user has specified and that array the address of the first element of that array is stored in this my array pointer so if i build this code as you can see we do not have compile time errors so what i want to show you now is how we can enter elements for this array and then how we can write them out and this is array again this is array which is created at runtime so our user will specify the size of this array which is something that we were not able to do before we learned how to use dynamic arrays so in order to enter elements for this array here as we already know we will be using for loop so i will say four please iterate from the element which has index zero until you come to the element that has the index of this size okay and then in each iteration increase our counter by one and what i want to do is i want to write out a message for my user so i will say array and then let's add index of the current element index that our user is entering so i like this okay and then what i want to do is i just want to enter an element on that position that we are currently iterating so i will say my array of i like this so using this code here we should be able to enter elements in this array here and then in order to write these elements out what i will do is i will use another for loop so i will just copy this one and then paste it here and in this particular situation i just want to write out so i will use c out command and then these other redirection signs so i just want to write out all the elements of the array and i will add a few empty spaces after each element so that we have a nicely formatted output so this loop here should write out the elements of our array and if i start this program now as you can see it asks us to enter the size of the array so let's say 5 for example and now we are we are entering element with index 0 so let's say 2 5 7 9 and let's say 11 okay and as you can see here we have the elements of our array written out and we wouldn't be able to do this if we didn't know how to work with dynamic arrays so let's stop this program and there is one more thing that i want to mention and that is following these square brackets here are only one way to dereference your array another way to dereference the array or to to access the element on a specific position is the following so so the other way to access the element on a specific position would be using this asterisk symbol and then here you say my array plus i now because the name of the array is the address of the first element here you have the address of the first element and then when you add a certain number to that it will move that many spaces in memory and then access the element on that position and when you dereference that you will get the value of that element instead of its address so here is one way to dereference your array and then here is another way to dereference your array and you can use whichever one you prefer and if i run this program again just to demonstrate that it works the same let's say three and then one five ten okay we get one five ten as the elements of our array one very important thing that i mentioned at the beginning is that we have two commands for working with dynamic memory and one of those two commands is new so we said that new is a command which will allocate memory for us when we need it and then another one is going to be delete and delete is a command which will deallocate that memory when we do not need it so that it can be reused now using dynamic memory comes with a responsibility and that responsibility is the following each time that you allocate memory when you need it you will have to deallocate that memory once you don't so that that memory can be reused so that means that each time that you write new command you will have to write the lead command once you don't need that memory anymore so i will demonstrate how can you deallocate the memory that we have allocated for this my array so let's say that here in this line of code we do not need our array anymore so how can i deallocate the memory that i allocated for this array while using delete keyword and i will say please delete the memory that i allocated for my array which is called my array like this and you have to specify these square brackets because that is the way that you allocated memory so here you said i want new array and then here you have to say please delete that array and a good practice is to do the following as well so you can say my array is equal to null like this and let me collapse this so this here is going to assign the value of null to your array so your array will not point to anything to any address at this line of code so why do we do this because in the previous line of code we have deallocated this array here and now in this line of code here your array will point to a location in memory which does not belong to you so it does not belong to your program and because of that because we do not want to cause some accidental crashes or problems in our program by having this array pointing to memory locations which are not ours anymore it is a good practice to say that our array is now equal to null which means that it is not pointing to anything so as i already said and i repeat again when you use dynamic memory each time that you write new you will have to write delete that corresponds to that new so here i have allocated an array and here i am deallocating that array so i hope that this video was helpful and that this video helped you understand what are dynamic arrays and how they work and now that i have explained this it opened the whole world of new possibilities and new things that you can do with dynamic arrays and i will leave to you to play and discover those new things until my next video of course so thank you for watching this video give it a thumbs up if you liked it subscribe to my channel click the bell icon as well and i'm going to see you in my next video bye in this video i want to talk about a topic that confuses many students and that is the topic of multidimensional dynamic arrays and the topics like this one are the reason why many people step away from learning c plus and they believe that learning c plus plus is hard but what i think is that many of those people never actually had the opportunity to have this explained in a very simple way so that is what i will try to do in this video so with the help of excel i will try to draw what are multidimensional dynamic arrays and how they work and i hope that at the end of this video you will have it pretty clear and you will be able to create and work with your own multidimensional dynamic arrays so what a multidimensional array is in simple words it is array of arrays and in this video you will learn how to create twodimensional dynamic arrays and in order to be able to understand this topic you should be familiar with the topic of dynamic arrays which is a video that i already did on my channel and i will link it here so make sure to watch that video before watching this one so i will very quickly remind us all of how dynamic arrays work and then we will see how we can use that knowledge to understand multidimensional dynamic arrays so let's create a visual representation of a dynamic array in our excel sheet so let's say that it will be array of four elements like this this is our array and the indexes of these elements start with zero and then one two three so these are the indexes and then the address of this first element will be for example 0 0 0 0 a a like this and this address here it is the address of the first element but it is the address of the array itself as well and you should be familiar with that so this here is our dynamic memory and then on our stack which will be here let's create our stack so this here will be our static memory here we will have to create a pointer variable which will hold the address to this element here or actually the address to the array itself so i will create a variable let's call it ptr1 so this is going going to be our pointer one and as we already said that pointer will hold the address of the first element of this array let's copy that address like this and then we will store that address in our ptr one now if we wanted to create more arrays by the knowledge that we have so far we would have to copy this and then let's paste it here and let's create one more array like this so now we have three dynamic arrays and the first element of the first array has the address of 0 0 0 0 a a and then this one here let's say that it has the address of bb for example and then this one here has the address of 0 0 0 0 cc and to be able to access these arrays we would have to create on our stack two more pointers so let's do that okay so our pointer two will hold the address of the second array which is zero zero zero zero db and then our pointer three would hold the address of our third array which is 0 0 0 0 cc like this now with this we have created three dynamic arrays and in order to create those three dynamic arrays we had to create three pointers so those are these three here and this is something that you should already be familiar with so you should already know from my previous video how to create a dynamic array now one thing that i see here and that is a problem is that if we wanted to create four or five or a hundred of these dynamic arrays we would have to create that number of pointers on our stack which means that this part here is not dynamic only this part here is dynamic because here our user determines how many elements this dynamic array will have but for each of these dynamic arrays we have to manually create a pointer on our stack which will hold the address of that array okay now what happens if i want to move this part here to our dynamic memory as well so let's do that let me cut it from here and then i will paste it here for example so now i have moved this part to dynamic memory as well and as you can see here this kind of looks like an array as well so that means that this first element if we look at this as an array the first element will have index of zero and then second we'll have index of one and then third will have oh this won't move third we'll have index of two okay so this is an array that has three elements and the first element for example has the address of 0 0 e e e e like this so now this part here is dynamic and then this part here is dynamic and in order to be able to access this array here what we have to do is on our stack which is this part here we will have to create a pointer which will hold the address of this first element so let's do that let me just okay now as i already said on our stack we will have to create a pointer which will hold the address of this first element so let's call that pointer table for example and this table will hold the address of this element here which is 0 0 ee and this table because it holds the address it should be a pointer but one thing to keep in mind is that this variable here is not a simple variable but this here is a pointer as well which means that this table will not be a simple pointer but it will be a pointer to a pointer and you indicate that using two asterisk symbols because one is just a pointer and then two mean a pointer to a pointer why because this table holds the address of the element which is this one here and that element is pointer as well okay now if we look at this here as you can see we have one array that represents the number of rows that our table will have okay so one two three and then for each one of the elements of this array here we create a separate dynamic array like this so this here will be our table that has the number of rows that our user defines and then however many columns our user defines as well and in this particular situation it is a table that has three rows so these are three rows and then four columns so let's now translate this to our c plus plus code and because we said that now our user defines how many rows this table will have and then how many columns as well that is the first thing that i will do so i will create two variables let's call them inch rows and columns and then i will ask my user to enter how many rows and how many columns he wants this table to have so let's do that see in rows o and then columns like this okay now after our user has entered how many rows and columns he wants what i want to do now is this part here so this part here this is our first step and then this here is going to be our second step and this part here will be the third step so this part here will be the following when translated to c plus code so here as i already said i create a pointer to a pointer which i will call table so i will say please create an integer pointer to a pointer because here we will store integer values you can create a character or double or float whichever one you want i want to create integer pointer to a pointer and call that table like this okay so we are done with this first part here and then what this table pointer to a pointer will point to is going to be this array here so i will say please create a new integer array that has this many elements so the number that our user has entered for this rows variable because this rows variable holds how many elements this array here will have but as you can see here we have an error and that error is happening because this here which is this array here is not just a simple integer array but it is array of pointers so here you will have to indicate that so you will have to say please create an integer array of pointers and as you can see now our error has disappeared and with this line of code here we have created this array here now our third step is going to be that for each element of this array here we would have to create a separate dynamic array so this first element will hold the address of this dynamic array and then the second element holds the address of this array and then disturbed the address of this array here so what i will have to do is i will have to iterate through all the elements of this array and for each one i will have to create a separate dynamic array so let's do that so i will say 4 and i is equal to 0 and then i is less than the number of rows that our user entered and in each iteration increment i so in this particular situation our number of rows is equal to three but you can have as many as you want so what i want to do in each of these iterations is i want to create for each one of these elements a separate dynamic array so i will say table of i is equal to new integer array that has this many elements and that is the number that we stored in our columns variable like this and with this code here we have successfully created these dynamic arrays now how do you access elements on a specific position of this table here for example this one or this one or this one so in order to do that let's say for example table of row one and then column two will have the value of 88. now what this code here what this line here will do is the following so this part here it says please give me the table variable which is this one here and it is a pointer to a pointer which holds this address here so 0 0 e e e and that address is the address of this element here so the address of this array and here we say please give me the element of that array that has index 1 which is this element here so it is the element that stores the address of 0 0 0 0 bb which is the address of this array here and this second part says please give me the element of that array that has the index of 2 which is this element here so here we will store the value of 88 so that is what this line of code here will do it will store number 88 to this position here so this line of code here will store this number at the element that has row index 1 and column index 2 of this table so this here is a row with index 0 this here 0 with index 1 and then 2 so we are storing at this row and then column index 2 is this one here so here we store number 88 one thing that we said as well in my previous video is that each time that you allocate dynamic memory you have the responsibility to deallocate that memory when you don't need it which means each time that you use new keyword you will have to use delete keyword when you don't need that memory anymore so now is the question how do we deallocate all of this memory that we have taken so in order to do that what i want to do is i want to show you something if for some reason we lose this address here so the value that is stored in this table pointer to a pointer we will never be able to access all of these elements that we have created in our dynamic memory so that means that we will not be deallocating this first and then if we for some reason lost this the value of our zero zero zero zero a a for example that means that we would never be able to access this array here so we would never be able to deallocate this memory so that means that this is not going to be deallocated first as well now a location of this memory here went as follows this was the first step so this was the first thing that we allocated and it is this code here and then we allocated this so that corresponds to this part here and then the last thing to allocate was these arrays here and that corresponds to this part of the code and the allocation of this memory will go the other way around which means that first we will deallocate this and then we will deallocate this and then this will be the last thing that we will have to worry about now in order to deallocate this the process will be almost the same as the one when we allocated it so i will copy this for loop and then paste it here but what i want to do in this particular situation so when d allocating is instead of creating a new dynamic array for each table of i is i want to delete that array so for each element of this array here i want to delete the corresponding dynamic array so i want to delete these three arrays and in order to do that i will say please delete the array that my table of i is pointing to now what this code here will do is for this element here it will deallocate this array here so let's delete that and then for this element here it will deallocate this array and then for this one it will be allocate this array here so now we have successfully freed this memory that we have taken here now after we have done this after we have successfully deallocated our first step which was here this part here will be our second thing to deallocate so here i will say please delete the array that my table variable is pointing to so this line of code here will deallocate this part here so i will say please delete that we do not need it anymore okay and then our third step which is the last one will be to null this value here why because we have just freed the memory that was here so we have deallocated that now someone else might be using this memory here and we really shouldn't keep the address of someone else's memory so we should make this a null value like this and in order to do this in our code i will just say now my table will hold the value of null like this and this will prevent some potential crashes and problems in your application so i hope that this video helped you understand multidimensional dynamic arrays a bit better and if it did please give it a thumbs up and subscribe to my channel because that helps me to reach more people and hopefully make programming a little bit easier for them as well thank you very much for watching and i'm going to see you in my next video bye so i get a lot of messages a lot of questions on my instagram on twitter and then here on youtube as well in the comments where you ask me for an opinion or for advice on certain errors that happen to you in programming and i try to answer as many of those as possible but it's just not possible to answer to all of you and i'm very very sorry but i thought that it would be a good idea to make a video related to that so that all of you can see it so here i am i'm making that video right now so in this video i will be reviewing some code and we will see some errors that can happen and that do happen very often and i'm going to do that both manually and then i want to show you a very cool tool which is called pvs studio i'm going to leave details in the description down below so that you can check it out for yourself but what pvs studio is it is static code analyzer so it is basically a tool that reviews your code and helps you detect bugs and errors and security weaknesses in your code so in the case that you need another pair of eyes to look at your code and give you a few tips and recommendations it is a great tool to use and you can get it as a team license for teams up to nine people or you can get an enterprise license for bigger companies bigger departments or you can even request a free license if you are a student if you are working on some private projects or on some open source projects and then one very cool thing is that it is not only used to analyze c plus code but you can use it for c and then c sharp and java as well uh and i am wondering guys which team are you in are you team c plus plus or are you team c sharp or java or c um i'm very curious to read your answers so please write me in the comments down below and if you ask me i'm definitely team c plus plus and then team c sharp those are just two of my favorite languages ever but i am very curious to read what you will answer to this question so um i'm going to leave all the details about pvstudio in the description of this video so that you can check it out for yourself and let's jump into the coding part right now because i am very very excited to do this here i have created a new project and i have this program that does basically nothing so what i want to do is i want to check if everything is okay with this code so far so if we have made any errors so far so i'm going to click on extensions and then pvstudio and here you have multiple options you can check your current file you can check open files or you can check your project selected items solution i'm going to select this first option so i'm going to check this current file and you get this window here and as you can see we have one error and that error is that my license will expire in five days okay so that is not here which is related to our code so we are just going to ignore it so we don't have code errors so far and let me show you how you can install this tool very quickly so you click on extensions and then manage extensions okay and then here you can search for pvs studio like this okay great it is this one here so pbs studio is a tool for detecting bugs and security weaknesses and so on okay so you will click download here and your download should begin i'm not going to do that right now because i already have it but once it is downloaded the installation is pretty simple so it's basically next next next finish installation so that should be simple okay now let's close this window here and as you could see we don't have any errors with this code so far so let's write some code and let's create some errors now so let's create an array of type int and i will call it saved money and that will be array of five elements and i want to initialize those elements here so the purpose of this array is following let's say that i want to save some money each month and i want to store that data in this array here so i'm going to save money for five months and i will store how much money i have saved each month inside this array here so for example the first month i have saved 100 or euros or whatever and then second month i have saved 200 and then 300 and 400 and 500 fifth month okay so this is our array now what i want to do with this data here is i want to sum it after five months i want to know how much money i have saved in total so i'm going to create a variable of type int and i will call it total like this and i will initially give it a value of 0 and then i will iterate through this array here so i will say 4 and i is equal to 0 and then i is less than or equal to 5 and then i plus plus and what i will do inside this for loop is i will say that my total will hold whatever my total was previously holding plus current value of how much money i have saved in that month so save money off i okay now after i have done this i will just write out how much money i have in total so i will say total and then this value that is stored inside this variable here okay now if i run this program let's see what will happen well it says that in total i have minus 8 billion something very very big number so i have tried to save each month and then at the end i have minus 8 billion dollars you know so that does not make any sense so here we have a logical error okay so let's see what is this error that is happening so let's click on extensions and pvs studio check current file to see what kind of error pvstudio sees and it says array over run as possible the value of i index could reach five and if i double click on that it will take me here and this part of code here is underlined and this is actually our compiler our compiler is underlying this and it says that okay it says index five is out of valid index range of zero to four so this here this situation here says that this i is out of range of valid indexes that this array here can have and if you are familiar with arrays you know that indexing of an array starts with zero so the first element has index of zero and then one two three and four so valid indexes for this array here are from 0 to 4 and here we have accidentally written that this i is less than or equal to 5 and that is making a problem so if i delete this part here so if i say that my i is just less than 5 this error should disappear so if i click on pvs studio and then check current file the error should disappear okay it has disappeared now so if i run my program this program is behaving as expected so this is one thing that very often happens you can accidentally write less than or equal to and then you can get a very very big logical error another thing that can happen is if you are typing very quickly and if you lose concentration for a moment and here instead of incrementing you decrement this counter so you say i minus minus you should get an error as well so if i try to build this program let's see what our compiler will tell us so here in this error list it says ill defined for loop counts down from minimum so that's kind of helpful information and then another let's read this other warning it says reading invalid data from saved memory the readable size is 20 bytes but minus 4 bytes maybe a read so this is not really helpful for someone who is just starting and then this third message it says index minus 2 billion something is out of valid index range 0 to 4. again this is not really helpful for someone who is just starting so let's see what our pvs studio has to say so i'm going to click extensions pbs studio check current file okay and this first error here says the condition i less than 5 of for loop is always true so this is actually a helpful message and if i click on this i will be taken here and it says that this condition here i is less than five is always true but why is it always true because we have started counting at zero and then we try to decrement that value in each iteration and uh doing that we can never reach this condition here this condition here will never become false so that means that here we have created an infinite loop and here our previous studio says consider inspecting this for operators so consider inspecting this for loop here because it will not be executed at all or it can be executed incorrectly and in this particular situation it is going to be executed incorrectly so it is going to be an infinite loop which we don't want in this particular situation so i'm going to correct this error here so i'm going to return it to i plus plus but that is sort of a help that you can get from pvs studio and this here is a pretty simple program because it has just a few lines of code where all the bugs can potentially happen but imagine working on a very very big project and then something like this happens so imagine something like this happening on a program that a bank uses so you are trying to save money for a couple of months and then the program says that you are in debt that your balance is minus 2 000 or 20 000 or something like this so this can create very very big issues and in this particular situation if you have a bug like this you will want to have all the help that you can get and sometimes that can be just the help that you get from your compiler or if you have a very very big problem you will definitely benefit from tools like pvs studio which will give you some additional information on that situation that is happening and on that problem that you are having and then there are other situations where you can have very very big problems but your compiler will not be helpful at all because your compiler will not be able to see those potential bugs that you are creating inside your code so in order to demonstrate that let's delete all of this code here because i will not need it anymore and what i do need is to create a function here so let's create a function of return type void and i'm going to call it my function like this okay and what i want to do inside this function is i want to create an integer pointer ptr so if you are not familiar with the topic of pointers make sure to watch the playlist that i will link here it is a playlist where i explain pointers in c plus because it is one of the most important topics in c plus plus and it is the example that i will be using here so i have created an integer pointer and i'm going to say now you will point to a new array of integers and that array will have five elements like this now what do i want to do with this array well let's do something very simple let's say ptr of 2 will hold the value okay it will hold the value of 10 like this and then let's just write out something let's say hi i am equal to and then ptr of two okay so this here is pretty simple example that does basically nothing important nothing useful but i will use it to demonstrate a very very big issue that can happen in this situation so i'm going to invoke this function here so i'm going to say my function like this and i have successfully invoked this function so if i run this program it says hi i am 10. so nothing unexpected happened or did it okay if i inspect my errors list it says that i don't have any errors so if you ask a compiler it will tell you that everything is perfectly fine so let's now ask pbs studio here it has already detected two potential issues but you can click pdf studio and then check current file just to be sure okay and it says visibility scope of the ptr pointer was exited without releasing the memory a memory leak is possible so what we have done here in this program is we have created memory leak where here so here we have said please give me in my dynamic memory give me array of five integers and this is going to be done in dynamic memory so once this function is finished once this function ends we are going to lose this ptr so we are going to lose the address of the first element of this array here so here if i try to do something like ptr i cannot access this variable here anymore this variable has its scope and that scope is inside this function here and once this function exits we are going to lose the address of this array here which means that we will not be able to deallocate this memory here now let's delete this okay here as you can see this memory leak is not a big memory leak here we are leaking five integers so we are leaking an array of five integers and that is not very big problem but usually what happens in real life is that you are not creating an array of five integers usually you are creating things that require much more memory than just an integer array of five elements so here as i said we are leaking five integers but imagine a situation where you're creating an array of 5000 or 50 000 and not integers but objects of type user like this and this user has some pretty heavy data in it for example it has some images and things like that so here you are creating 50 000 users and to make things worse imagine not invoking this function only once but imagine invoking this function in a for loop for example so invoking it 100 times or 1000 times or 100 000 times that is going to be a huge memory leak so what this line of code here does is it asks your operating system for dynamic memory so it says please can you give me new memory so can you give me dynamic memory that i need to store this data here and your operating system gives that memory to your program so it allocates that memory for your program and then once this function here finishes you will lose all the variables that you have created inside that function and that is this ptr variable here so that means that the address of this array here which was stored inside this ptr variable is lost now and now you will not be able to deallocate this memory here which means that you will not be able to say okay now i am done with this memory which is a lot of memory and now i'm going to return that back to my operating system because i don't have unlimited amounts of memory and my operating system maybe would like to give that memory to some other program so once this function here ends and you don't deallocate this memory here you are leaking that memory and that is exactly the error that you have here it says a memory leak is possible whereas your compiler here said expected a type specifier which is uh error that we have here because it does not know what is this user so i'm going to return this back to int okay now that error has disappeared but your compiler does not know that you are leaking memory here whereas your previous studio analyzer here says that a memory leak is happening so how do you fix this error here well for each new you need to have delete again you need to watch my c plus pointers playlist in order to understand pointers if you don't understand this already so as i said for each new you need to have delete so i'm going to say delete and let's delete this ptr let's see what is going to happen now so if i click extensions and then pvstudio check current file it says the memory was allocated using new array type operator but it was released using delete operator and then it gives you a recommendation here it says use delete array pointer etc instead so here we are trying to allocate memory for an array but we are not deleting that entire array so here we are leaking memory again so here i'm going to use these square brackets in order to indicate that i want to delete this entire array that i have allocated in this line of code here so now we shouldn't be leaking memory anymore so let's check that out i'm going to say pbs studio chat current file and let's see we have that error that we previously had which is your license will expire in five days but we do not have memory leaks anymore which is great so errors like this memory leaks are very common when you work with pointers in c plus and these memory leaks can create huge problems if you have them in your code and as you could already see in most cases you cannot really count on your compiler to tell you that you are leaking memory because in most cases it will not even be able to see that so tools like pvs studio can be very helpful in those situations you could see all those little tips and recommendations that we had from pvstudio that helped us to fix issues that we had related to leaking memory so those were some topics that i wanted to address in this video because many people when working with pointers will come across problems that they will not be able to fix or they will not even be aware that they have those problems that they have memory leaks until it gets to the point where it is unmanageable and they have very big problem they have huge problem so if you have any more questions that you would like me to make video on please leave those in the comments down below and if you like this type of video please give this video a thumbs up so that i can know and i will make more videos like this in the future if you want me to so thank you very much for watching this video and i am going to see you in my next video bye hi everyone and welcome to my channel in this video i want to teach you about function pointers in c plus plus many beginners think that function pointers are extremely hard to understand and to be honest um the syntax is one of the ugliest things that you are going to see in c plus language but in this video i decided to simplify it and to make it understandable for every single beginner so in this video you are going to learn how to use function pointers and why they exist what is their purpose the first thing that i want to explain related to function pointers is what are function pointers and then later in the video i'm going to explain what is their purpose why do they exist and i'm also going to leave timestamps in the description that you can use in order to navigate yourself to the desired part of the video but i highly recommend you to watch the entire video if you really want to understand what are function pointers so um in order to understand what are function pointers you first need to understand what is a pointer and in the beginning of this playlist in the first video we already said that a pointer is a special type of variable that is used in order to store the address of another variable now a function pointer is very similar but instead of storing the address of a variable a function pointer stores the address of a function so let's demonstrate how that works in visual studio so let's create a function of return type int let's call it get number and from this function i just want to return number five like this and it is very easy to predict what is going to happen if i say get number and then i run my program okay we get the value of five written in our console okay now one question that i have for you is what is going to happen if i remove these parentheses so what kind of output do you expect to get in the console write me in the comments so if i run my program now as you can see we get an address so what kind of address this is this is the address of our function and now that we learned that the name of the function will give you its address what we can do is we can create a function pointer and then we can assign the address of that function to a function pointer so let's stop our program and let's do that i am going to remove this line of code i don't need it anymore and now i'm going to show you how you can create a function pointer the syntax is pretty hard so pay attention the first thing that you need to do in order to create a function pointer is use these parentheses and then inside parentheses you will put asterix symbol and you will give the name to your function pointer so let's call it func ptr so function pointer that is the first part the second part is to put the return type of your function in front of the name so here since i want to point to this function here the return type is int so i'm going to put int here and then the third part is to put the parameters that your function receives after the name of your function pointer and that is here so you are going to put parentheses and inside these parentheses you would put the list of parameters that your function receives but since this function here does not receive any parameter these parentheses are going to be empty okay and with this we have successfully created a function pointer that can point to any function that returns int and it does not receive any parameter and that is for example this function here so what i can do now is i can say that my function pointer will point to get number function and as we already saw this getnumber function will give us the address of this function here so what i can do now is i can use this function pointer in order to invoke this function so i can say c out func ptr like this so the approach is absolutely the same as invoking that function directly but instead of using the name of the function you just use the name of the function pointer so if i run the program as you can see we are going to get the value of five but we have invoked this getnumber function by using a function pointer okay so let me show you one more time how you can create a function pointer but this time i want to show you how you can do that for a function that actually receives parameters so let's delete all of this code like this and let's create another function so let's create a function that returns int let's call it add and this function will receive int a and then int b and the task of this function will be to sum these two numbers and then to return the result so i'm going to say return a plus b like this so how can we invoke this function by using a function pointer well let's again repeat how we can create a function pointer so one more time you use parentheses and then inside parentheses you are going to put asterisk symbol to indicate that you want to create a pointer and then you will give a name to your pointer you will call it func ptr for example and then two more things the first one is to put the return type of your function in front so end because we want to point to this function here and then the second part is to put parameters after the name of your function pointer so here and here inside these parentheses i will put int and then int because this add function receives two parameters and those are integer and integer so now we have created a function pointer that can point to any function that returns integer and receives two integers and that is this function here so i can now say that my function pointer will hold the address of add function and if i want to invoke this function there are two ways to do that so i can either say c out add and then let's pass two numbers let's say for example two and three let's add end line and then second way to invoke this same function is by using this function pointer so i can say c out and then func ptr and here i'm going to use the same approach of passing parameters like i did here so i'm going to say for example three and four and let's add end line here as well so if i run my program let's see what is going to happen okay for this first line we get the result of five so two plus three is five and then for this second line we get the result of seven so three plus four is seven so this is how you can create a function pointer and then this is how you can invoke that function by using its function pointer okay now that you have seen and understood what i just explained your question might be salvina why would anyone want to create a function pointer just to be able to invoke that function because it is so much easier to do that directly and the answer to your question is you are absolutely right but this is not the purpose of function pointers this is not the reason why function pointers exist so let's talk about the real purpose of function pointers why they exist and when we can use function pointers one of the most common uses of function pointers is we use a function pointer in order to be able to pass a function as an argument or as a parameter to another function and we do this in order to optimize our code so in order to make our code reusable so what i want to do now is i will delete all of this code and then i'm going to type a code that i want to show you in order to demonstrate something amazing that we can do with function pointers so after i type that code i will be back so here i have created a couple of functions and let's now explain what every single one of these is doing so the first one is ascending compare and it is very simple function that just compares two numbers so that the first one is smaller than the second one and then it returns if that is true or not and then descending compare again very simple function and again it compares two numbers but in this situation the first number needs to be greater than the second number okay these two are very simple let's see what is happening inside this sort ascending function so if i open that function you will notice that this here is a sorting algorithm now the goal of this video is not for you to understand how this sorting algorithm works we are going to explain that in a whole another video of c plus sorting algorithms which i'm going to make in the future but for now the goal is that you understand that the job of this function here is to sort a vector of numbers in an ascending order and one very important thing is that since we are using vector you will need to include that vector because otherwise you are going to get an error so that is the job of sort ascending now if we take a look at sort descending let me move this code okay you will notice that sort descending function is almost identical to sort ascending function and the only thing that is different is this part here and this part here so our sort ascending which is sorting numbers in an ascending order is invoking ascending compare function and then our sort descending is invoking descending compare function and those are the functions that i explained in the beginning okay so the next thing that i want to do is i just want to demonstrate how these two functions work i want to test these two functions and then i am going to show you how we can optimize this code here so what i want to do is i want to create a vector of integers and let's call it my numbers like this and i want to assign numbers of two and then five one three six and four okay and what i want to do now is i want to invoke sort ascending and then i will print those numbers in order to be able to see if those numbers have been sorted in an ascending order and for printing numbers we will use this function here which is very simple function that will just iterate through this numbers vector and write out every single number of that vector so let's do what i just explained let's invoke sort ascending like this and let's pass my numbers vector to that function and after i have sorted those numbers in an ascending order let's say print numbers and i will pass my numbers vector like this so if i run my program let's see what is going to happen as you can see this vector here has been sorted in an ascending order so one two three four five six okay so that means that our sword ascending function works as it should and let's now test this sort descending so here i'm going to invoke sort descending function everything else stays the same so let's run our program again okay so six five four three two one which means that our sword descending works as it should as well okay perfect again all of this code will be in the description for those of you who want to analyze how this sort descending and then sort ascending functions work but for now it's enough for you to understand that this one is sorting numbers in an ascending order and then this one in descending order and that the only difference between these two functions is in this part here so this one is invoking ascending compare and then this one is invoking the sending compare so the next thing that i want to show you is how we can optimize this code here so that we can create one function that will be called custom sort and we can use that function in order to sort numbers in both ascending and descending order and the general idea is for that function to receive numbers vector and then we are going to pass another function to our custom sort and that function can be either this one or this one because that is the only difference between these two functions so let me show you how we can do that the first thing that i want to do is i want to change the name of this function here so instead of calling it sort ascending let's call it custom sort like this and that custom sort function as i already said will receive numbers vector and then it will receive a function pointer so it will receive a function pointer to one of these two functions so let's add that function pointer here as a parameter one more time how can we create a function pointer well inside these parentheses you are going to put asterix symbol and then you will give the name to your function pointer let's call it um compare func ptr so compare function pointer let's just call it func instead of fun okay so that is the first part the second part is to put the return type of your function in front so here i will say bool because that is the return type of both this function and this function here and then the last step is to put parameters that the function receives inside parentheses after the name of your function pointer so here and the parameters that these two functions receive are int and in so two integers so here i'm going to put int and then int okay so with this we have created a function pointer called compare func ptr which can point to either this function here or this function here so it can point to any function that returns bool and receives two integers so what we can do with our compare function pointer is we can use it to pass either this function or this function to our custom sort so since this part here was the only difference between sort ascending and sort descending if i change this with my compare function pointer that means that whichever one of these two is passed as argument to our custom sort that one is going to be invoked here so that means that now we can use custom sword in order to do both ascending and descending sort of this vector here so that means as well that now we can delete sort descending so let's test this function here so i am going to delete this part here and what i want to do first is i want to create this function pointer in my main function so i will do it here again inside parentheses you put asterisk symbol and then you give the name to your function pointer let's call it func ptr and then you put the return type of that function here since we want to point to one of these two functions the return type is bull and then they receive two integers so the return type goes here bull and then the parameters go here inside parentheses and those are two integers like this so we have created a function pointer that can point to any function that returns bull and receives two integers so the first one that i want to assign here will be ascending compare like this so now i'm going to invoke my custom sort function here and i am going to pass two parameters to that function the first parameter is numbers vector so my numbers okay and then the second parameter is a function pointer to a function that returns bull and receives two integers and that will be this function pointer here okay perfect so now if i run my program what do you expect to happen write me in the comment section so let's run the program okay and as you can see the numbers of my vector have been sorted in the ascending order so one two three four five six and for that we have used custom sort function and we have passed our vector and a function pointer so we have passed ascending compare to our custom sort so we have basically used a function pointer in order to pass one function as an argument to another function and let's now test this with descending compare so i'm going to say descending compare here and that is the only thing that you need to change and now this descending compare will be passed as an argument to our custom sort so if i run my program now let's see what is going to happen perfect now our numbers have been sorted in the descending order so six five four three two one and we have achieved that by using a by using a function pointer okay so i hope that this video was helpful i hope that you understood what is the purpose of function pointers and how you can create and use function pointers all of this code will be in the description again you don't really have to bother with understanding what these functions are doing except for the part of how you can use a function pointer in order to pass one function as an argument to another function so i hope that you enjoyed this video if you did please give it a thumbs up for the youtube algorithm that helps me a lot to reach more people and then share it with someone else who would also like to learn programming because the topic of function pointers is not very beginner friendly so if you found this video helpful you might make a very big difference in someone else's life and you might help that person to learn programming much faster so thank you very much for watching and i am going to see you in some other video bye hi everyone and welcome to my channel in this video i will teach you about smart pointers in c plus and the first thing that i want to explain is what are smart pointers a smart pointer is a container or a wrapper for a raw pointer and one advantage that smart pointers have is that they deallocate memory automatically which means that you don't have to worry about potential memory leaks in your program there are three different types of smart pointers in c plus unique pointer shared pointer and weak pointer and in this video i'm going to teach you about every single one so in order to use any one of these three the first thing that you need to do is you need to include memory so i will say include memory like this and the first type of smart pointers that i want to talk about are unique pointers so the syntax of creating a unique pointer is a little bit different if you are used to raw pointers so i'm going to show you now how you can create a unique pointer so you say unique ptr and then you specify the type so what kind of data type is going to be stored on the address that you want to point to so let's say for example integer so please make a unique pointer to integer and let's call that pointer u n p t r one so unique pointer one okay and then there are few different ways to create a unique pointer and the one that i use most often is make unique method so i'm going to say make unique so please make a unique pointer of integer type and to that address i want to store a value of 25 for example okay so with this i have successfully created a unique pointer to an integer and i have assigned the value of 25 to that address that my unique pointer 1 is pointing to so now the question is how do you use this pointer and as you already know pointers store address and in order to access the value that is stored on that address you need to dereference that pointer so how do you dereference a smart pointer the answer is by using asterix symbol or that little star symbol let me show you so if i say c out and then u n p t r one like this so if i write out this unique pointer one let's see what is going to happen okay as you can see we have an address because pointers store addresses now in order to access the value that is stored on this address you need to dereference that pointer so let's do that and in order to dereference this pointer you put asterisk symbol before it okay so if i run my program now as you can see here we have the address that our pointer is pointing to and then this is the value stored on that address there is one very important thing related to unique pointers and that is that they cannot be shared so in order to demonstrate what i'm talking about let's delete this code here and let's create another unique pointer let's say unique ptr of int like this and let's call it unique ptr 2 like this okay so what is going to happen if i try to assign to this unique pointer to the same location that my unique pointer one is storing so if i do that as you can see we get an error and that means that you cannot share unique pointers okay now one thing that you can do is you can move the ownership of a unique pointer so what you can do is you can say that your unique pointer two is equal to please move the ownership of my unique ptr one like this and now our unique pointer 2 becomes the owner of this memory address here so if i try to write out the value that is stored on this address here let's see what we are going to get okay so i am writing out the referenced unique pointer to let's run our program okay as you can see we get the value of 25. okay now one very important thing is that once you move the ownership of a pointer the previous owner which is this one becomes null pointer and that means if you try to access the value of your pointer that was previous owner you are going to get null pointer exception so let's demonstrate that let's say please write out the referenced value of my unique pointer one and let's see what is going to happen and as you can see we get an exception because now our unique pointer one is empty it is no pointer and if you are not familiar with exceptions if you don't know how to work with exceptions you can watch the video that i will link here and i will also link it in the description it's called exception handling and there i explain everything that you need to know in order to work with exceptions in c plus another important thing that i mentioned about smart pointers is that the memory is deallocated automatically which means that you don't have to worry about the allocating the memory or causing memory leaks and what i want to do now is i want to demonstrate that so basically i want to create a class and inside that class i want to create a constructor and destructor if you don't know a constructor is a special type of method that is invoked when an object is constructed or created and then a destructor is also a special type of method that is invoked when an object is being destroyed so if you are not familiar with the concept of objects classes constructors destructors and so on i am going to link a playlist here which is c plus plus object oriented programming and i will also put it in the description so c plus plus oop or c plus plus objectoriented programming you can watch that playlist in order to understand in more detail what i'm talking about so as i said what i want to do now is i want to create a class let's call that class my class okay and inside this class i will create a constructor and destructor so let's first create a public constructor so i will say public and then my class okay this is a constructor and inside constructor the only thing that i want to do is i just want to say constructor invoked so i will say see out and let's say constructor invoked like this okay and i also want to create a destructor so i will copy my constructor i will put squiggly before it i believe this is called squiggly or tilde sign and i will write out here that the structure is invoked okay i hope that i didn't make any typo here okay so i have created a class called my class and inside it i have a constructor which as i already said will be invoked when an object is created and then i also have a destructor which will be invoked at the end of the life of that object which means uh when that object is being destroyed so what i want to do now is let's delete everything from our main function because we don't need it and what i want to do is i want to create a pointer to an object of this class here so let's create a unique pointer like this of my class and let's again call it unique ptr1 and i will make unique pointer of my class like this okay so let's see what is going to happen if i run my program now as you know already constructor is invoked when an object of this type is created and then the structure will be invoked when that object is being destroyed so if i run this program let's see what is going to happen okay as you can see we only have this constructor invoked so when is this pointer here being destroyed the answer is that this unique pointer will be destroyed at the end of the scope and the scope of this pointer here begins at this curly bracket and then it ends at this curly bracket here so at this curly bracket here this unique pointer will be destroyed and since this is the end of our program we don't see that destructor is invoked so what i can do to demonstrate that is i can create an additional scope so let's do that let's create an additional scope like this okay so now this is another scope and if i run my program now let's see what is going to happen as you can see now we have constructor invoked and then destructor invoked which means that here at this 18th line of code our constructor was invoked for myclass object and then at this 19th line of code so at the end of its scope the structure has been invoked which means that our unique pointer has been deallocated so we don't have memory leak so one more time this unique pointer will be destroyed it will be d allocated at the end of its scope which is here okay so that is related to unique pointers and now i want to explain what are shared pointers so as the name itself says a shared pointer can be shared unlike unique pointer a shared pointer can be shared between multiple owners and that means that you can assign one raw pointer to multiple owners so let's demonstrate how that works so let's delete everything from our main function because i don't need it anymore and the first thing that i want to show you is how to create a shared pointer so let's say shared ptr that is the keyword and then you specify the type so the type will be my class so the class that we created here and then let's give the name to our shared pointer let's call it shptr1 so sharedpointer1 and now i want to use a method called make shared in order to make a shared pointer so i will say make shared of my class like this okay so with this we have created a shared pointer now one very interesting thing related to shared pointers is that since you can share a shared pointer it has the count of all of the owners so it has the count of all of the references to that pointer so how can you access that count well there is a method called use count so what i want to do now is i will show you that so i want to write out the number of owners of this pointer here so i'm going to say see out and then let's say shared count like this and let's say shptr1 and then i will use a method called use count like this and this use count method as i already said will give me the number of owners of this location here so if i run my program let's see what is going to happen okay as you can see constructor has been invoked and then the number of owners of this memory location is one because we have only one pointer pointing to that memory location okay let's close this and what i want to do now is i want to share this pointer so i want to create an additional owner to that same memory location so let's create another shared pointer of my class and let's call it shptr2 okay and what i want to do now is i want to assign to this shared pointer to the same memory location that this shared pointer one is holding like this and i also want to write out the number of owners of that memory location after i have shared that pointer so if i run my program now as you can see in this first line it says that the number of owners is one and then in this second line the number of owners or shared count is two okay one question that you might have now is when will this memory location automatically be deallocated and the answer to that question is the memory location will automatically be deallocated when there are no more pointers pointing to that memory location now since that memory location has multiple owners every single owner will be destroyed at the end of its scope and when there are no more owners the memory location itself will be deallocated which means that that memory will be free for other programs and other applications to use so let's demonstrate that as well what i want to do now is i want to put this here into an additional scope so let's do that let's create an additional scope like this and what i want to do now is after this scope i want to write out the count of the owners of this memory location so let's run our program and let's see what is going to happen let me know what you expect to happen in the comment section before i run the program okay so as you can see this first line says that there is one owner of this memory location and then we entered inside this scope here and it says that there are two owners and then after we have left this scope this third line this third print says that there is again only one owner of this memory location which means that this shared pointer so this owner has been destroyed at the end of its scope which is this line here now another thing that i said is that the memory location itself is going to be deallocated when there are no more pointers pointing to that location so in order to demonstrate that let's put all of this code inside a scope so i will put the beginning of that scope here and then the scope will end here and what i expect to happen is that this memory location is going to be destroyed at the end of the scope of its last owner so if i run my program as you can see okay let's move this as you can see our constructor has been invoked and that happened in this line of code here so the line where we made our pointer and then the first output says that there is only one owner and that is this 19th line which says shared count and then we have written out the count and then when we entered inside disco we created an additional owner so this second output here says that there are now two owners and then when we left that scope and we printed the output for the third time we get this line here which says that again we have only one owner of that memory location and then when we left this scope here which is the scope of that last owner we are going to destroy that memory location which means that we are going to deallocate that memory so that other programs and other applications can use it so that was related to shared pointers in c plus plus and now i'm going to teach you about weak pointers so the main difference between a weak pointer and a shared pointer is the following as you already saw when you assign a specific memory location to a shared pointer that is going to increase the number of owners of that memory location but if you assign that same memory location to a weak pointer that will not increase the number of its owners and that means that we use weak pointers in order to observe objects in memory but a weak pointer will not keep that object alive so we use weak pointers in order to locate a specific object in memory but a weak pointer will not keep that object alive if nothing else needs it whereas a shared pointer will keep that object alive so let's demonstrate what i just explained so let's delete all of this code i don't need it anymore by the way the leading code is my favorite part of coding so the first thing that i want to do is let's create a weak pointer let's say week ptr of let's say for example end so let's create a weak pointer to integer and let's call it we ptr1 wii ptr okay so another thing that i want to do is i want to create an additional scope like this and inside this scope i will create a shared pointer so let's say shared ptr of int and let's call it shptr one so shared pointer one and let's make one shared pointer so i'm going to use method make shared so please make sure pointer of int and let's assign the value of 25 again okay so after i have created a shared pointer what i want to do is i want to assign this same memory location to my weak pointer so let's do that let's say that week pointer one is equal to shared pointer one like this okay so let's see what is going to happen if i run this program i'm going to put a break point here so at the first line of my main function and if i run this program let's see what is going to happen so now we are debugging this program okay so in this first line we are going to create a weak pointer and it is still not pointing to anything as you can see it is empty we just created it we didn't assign any location to that pointer okay and then after we have created that weak pointer we are going to enter into this scope here and inside this scope the first thing that happens is we create a shared pointer and then we assign the number 25 to that memory location that our shared pointer is holding so let's do that okay and if i hover over my shared pointer as you can see it is pointing to a memory location that has one strong reference and on that memory location we are storing the value of 25 okay now in this second line of code we will assign this shared pointer to our weak pointer so if i execute that line of code let's hover over our weak pointer and as you can see now our weak pointer as well is also pointing to the same memory location and that memory location stores the value of 25 and it has one strong reference but one thing that will happen when i leave this scope here is following please write me in the comment section what do you expect to happen after i leave this scope here so if i press f10 and leave this scope and if i hover over my weak pointer here or here there are two things that you can notice the first thing is that it says that there is only one weak reference to this memory location so there are no more strong references and then another thing is that it has expired so all of the owners all of these strong references to this memory location have been destroyed and now we have just a reference we just have the address of a memory location that has been deallocated and that is exactly what i've been talking about which is that a weak pointer will not keep an object alive whereas a shared pointer will so this memory location has expired it was deallocated when its last strong reference so when its last shared pointer or when its last owner left its scope and that happened on this line of code here so i hope that this video was helpful if it was please give it a thumbs up for the youtube algorithm and also share it with someone who would like to learn programming because many people would like to learn programming but they just don't know where to start so you can be the one who helps them and makes the difference and also if you have any questions you can leave those in the comments section and please let me know what kind of videos you would like to see in the future so thank you very much for watching and i am going to see you in some other video bye