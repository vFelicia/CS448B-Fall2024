With timestamps:

00:00 - hello and welcome to the next kubernetes
00:02 - tutorial video so in this video I want
00:04 - to give you an overview of the most
00:06 - basic fundamental components of
00:08 - kubernetes but just enough to actually
00:11 - get you started using kubernetes in
00:14 - practice either as a DevOps engineer or
00:17 - a software developer
00:19 - now kubernetes has tons of components
00:21 - but most of the time you are going to be
00:23 - working with just a handful of them so
00:26 - if you have just 30 to 40 minutes and
00:28 - you want to get started with kubernetes
00:30 - as fast as possible this video can
00:32 - actually be the perfect fit for you so
00:35 - [Music]
00:40 - I'm gonna build a case of a simple
00:43 - JavaScript application with a simple
00:46 - database and I'm gonna show you step by
00:48 - step how each component of kubernetes
00:51 - actually helps you to deploy your
00:53 - application and what is the role of each
00:57 - of those components
01:01 - so let's start with the basic setup of a
01:03 - worker node or in kubernetes terms a
01:07 - node which is a simple server a physical
01:10 - or virtual machine and the basic
01:13 - component or the smallest unit of
01:15 - kubernetes is a pot so what pot is is
01:19 - basically an abstraction over a
01:21 - container so if you're familiar with
01:23 - docker containers or container images so
01:27 - basically what pod does is it creates
01:29 - this running environment or a layer on
01:32 - top of the container and the reason is
01:35 - because kubernetes wants to abstract
01:37 - away the container runtime or container
01:40 - technologies so that you can replace
01:43 - them if you want to and also because you
01:45 - don't have to directly work with docker
01:48 - or whatever the container technology you
01:52 - use in a kubernetes so you only interact
01:54 - with the kubernetes layer so we have an
01:56 - application pod which is our own
01:58 - application and that will maybe use a
02:00 - database pod with its own container and
02:03 - this is also an important concept here
02:05 - pod is usually meant to run one
02:09 - application container inside of it you
02:12 - can run multiple containers inside one
02:14 - pod but usually it's only the case if
02:16 - you have one main application container
02:18 - and a helper container or some side
02:22 - service that has to run inside of that
02:24 - pod and you say this is nothing special
02:27 - you just have one server and two
02:29 - containers running on it with a
02:31 - abstraction layer on top of it so now
02:33 - let's see how they communicate with each
02:35 - other in kubernetes world so kubernetes
02:37 - offers out-of-the-box a virtual network
02:39 - which means that each pod gets its own
02:43 - IP address not the container the pod
02:46 - gets the IP address and each pod can
02:49 - communicate with each other using that
02:51 - IP address which is an internal IP
02:53 - address obviously it's not the public
02:56 - one
02:56 - so my application container can
02:59 - communicate with database using the IP
03:01 - address however pod components in
03:04 - kubernetes also an important concept are
03:07 - ephemeral which means that they can die
03:09 - very easily and when that happens for
03:13 - example if I lose a day
03:14 - a base container because the container
03:17 - crashed because the application crashed
03:20 - inside or because the notes the server
03:23 - that I'm running them on ran out
03:26 - resources the pod will die and a new one
03:29 - will get created in its place and when
03:32 - that happens it will get assigned a new
03:34 - IP address which obviously is
03:37 - inconvenient if you are communicating
03:38 - with the database using the IP address
03:41 - because now you have to adjust it every
03:43 - time pod restarts and because of that
03:45 - another component of kubernetes called
03:48 - service is used
03:51 - so service is basically a static IP
03:54 - address or permanent IP address that can
03:57 - be attached so to say to each hot so my
04:01 - app will have its own service and
04:03 - database part will have its own service
04:05 - and the good thing here is that the life
04:08 - cycles of service and the pod are not
04:11 - connected so even if the pod dies the
04:15 - service and its IP address will stay so
04:19 - you don't have to change that endpoints
04:22 - anymore so now obviously you would want
04:25 - your application to be accessible
04:27 - through a browser right and for this you
04:29 - would have to create an external service
04:31 - so external service is a service that
04:34 - opens the communication from external
04:37 - sources but obviously you wouldn't want
04:39 - your database to be open to the public
04:42 - requests and for that you would create
04:45 - something called an internal service so
04:47 - this is a type of a service that you
04:50 - specify when creating one however if you
04:53 - notice the URL of the external service
04:58 - is not very practical so basically what
05:01 - you have is an HTTP protocol with a node
05:05 - IP address so of the node not the
05:08 - service and the port number of the
05:11 - service which is good for test purposes
05:14 - if you want to test something very fast
05:15 - but not for the end product so usually
05:18 - you will want your URL to look like this
05:20 - if you want to talk to your application
05:23 - with a secure protocol and a domain name
05:26 - and for that there is another component
05:29 - of kubernetes called ingress so instead
05:32 - of service the request goes first to
05:34 - ingress and it does the forwarding then
05:36 - to the service so now we saw some of the
05:39 - very basic components of kubernetes and
05:43 - as you see this is a very simple set up
05:45 - we just have a one server and a couple
05:48 - of containers running and some services
05:52 - nothing really special where kubernetes
05:55 - advantages or the actual cool features
05:57 - really come forward but we're gonna get
06:01 - there step-by-step so let's continue
06:05 - so as we said pots communicate with each
06:08 - other using a service so my application
06:11 - will have a database end point let's say
06:14 - called MongoDB service that it uses to
06:17 - communicate with the database but where
06:20 - do you configure usually this database
06:22 - URL or endpoints usually you would do it
06:25 - in application properties file or as
06:29 - some kind of external environmental
06:31 - variable but usually it's inside of the
06:34 - built image of the application so for
06:37 - example if the endpoint of the service
06:40 - or service name in this case changed to
06:43 - MongoDB you would have to adjust that
06:45 - URL in the application so usually you'd
06:48 - have to rebuild the application with a
06:50 - new version and you have to push it to
06:53 - the repository and now you'll have to
06:55 - pull that new image in your pod and
06:59 - restart the whole thing so a little bit
07:01 - tedious for a small change like database
07:04 - URL so for that purpose kubernetes has a
07:08 - component called config map so what it
07:11 - does is it's basically your external
07:13 - configuration to your application so
07:16 - config map would usually contain
07:18 - configuration data like URLs of database
07:21 - or some other services that use and in
07:24 - kubernetes you just connect it to the
07:27 - pot so that pot actually gets the data
07:30 - that config map contains and now if you
07:33 - change the name of the service the
07:35 - endpoint of the service you just adjust
07:37 - the config map and that's it you don't
07:39 - have to build a new image and have to go
07:41 - through this whole cycle now part of the
07:44 - external configuration can also be
07:47 - database username and password right
07:50 - which may also change in the application
07:53 - deployment process but putting a
07:55 - password or other credentials in a
07:57 - config map in a plain text format would
08:00 - be insecure even though it's an external
08:02 - configuration so for this purpose
08:05 - kubernetes has another component called
08:08 - secret so secret is just like config map
08:11 - but the difference is that it's used to
08:14 - store secret data credentials for
08:17 - example and it's stored not
08:19 - a plain text format of course but in
08:21 - base64 encoded format so secret would
08:25 - contain things like credentials and of
08:28 - course I mean database user you could
08:30 - also put in config map but what's
08:32 - important is the passwords certificates
08:35 - things that you don't want other people
08:37 - to have access to would go in the secret
08:40 - and just like config map you just
08:42 - connect it to your pot so that pod can
08:45 - actually see those data and read from
08:47 - the secret you can actually use the data
08:49 - from config map or secret inside of your
08:52 - application pod using for example
08:55 - environmental variables or even as a
08:57 - properties file so now to review we've
09:00 - actually looked at almost all mostly
09:03 - used kubernetes basic components we've
09:06 - looked at the pod we've seen how
09:10 - services are used what is ingress
09:12 - component useful for and we've also seen
09:15 - external configuration using config map
09:18 - and secrets
09:22 - so now let's see another very important
09:24 - concept generally which is data storage
09:28 - and how it works in kubernetes so we
09:31 - have this database pod that our
09:32 - application uses and it has some data or
09:35 - it generates some data with this set up
09:37 - that you see now if the database
09:39 - container or the pod gets restarted the
09:43 - data would be gone and that's
09:45 - problematic and inconvenient obviously
09:48 - because you want your database data or
09:51 - log data to be persisted reliably
09:54 - long-term and the way you can do it in
09:57 - kubernetes
09:57 - is using another component of kubernetes
10:00 - called volumes and how it works is that
10:03 - it basically attaches a physical storage
10:07 - on a hard drive to your pot and that
10:10 - storage could be either on a local
10:12 - machine meaning on the same server node
10:14 - where the pod is running or it could be
10:17 - on a remote storage meaning outside of
10:19 - the kubernetes cluster it could be a
10:21 - cloud storage or it could be your own
10:23 - premise storage which is not part of the
10:27 - kubernetes cluster so you just have an
10:29 - external reference on it so now when the
10:32 - database pod or container gets restarted
10:34 - all the data will be there persisted and
10:37 - because data storage and volumes is a
10:39 - very important topic I'm gonna make its
10:42 - own tutorial video about volumes but now
10:45 - it's important to understand the
10:46 - distinction between the kubernetes
10:48 - cluster and all of its components and
10:51 - the storage regardless of whether it's a
10:54 - local or remote storage think of a
10:56 - storage as an external hard drive plug
10:59 - in into the kubernetes cluster because
11:02 - the point is Kunitz clustered explicitly
11:06 - doesn't manage any data persistence
11:08 - which means that you as a community's
11:10 - user or an administrator are responsible
11:13 - for backing up the data replicating and
11:16 - managing it and making sure that it's
11:18 - kept on a proper Hardware etc because
11:22 - it's not taking care of kubernetes
11:28 - so now let's see everything is running
11:30 - perfectly and a user can access our
11:32 - application through a browser and when
11:35 - they set up what happens if my
11:37 - application pod dies right crushes or I
11:42 - have to restart the pod because I built
11:45 - a new container image basically I would
11:49 - have a downtime where a user can reach
11:52 - my application which is obviously a very
11:55 - bad thing if it happens in production
11:58 - and this is exactly the advantage of
12:00 - distributed systems and containers so
12:03 - instead of relying on just one
12:05 - application pod and one database pod etc
12:09 - we are replicating everything on
12:12 - multiple servers so we would have
12:15 - another node where a replica or clone of
12:19 - our application would run which will
12:21 - also be connected to the service so
12:24 - remember previously we said the service
12:26 - is like an persistent static IP address
12:29 - with a DNS name so that you don't have
12:32 - to constantly adjust the end point when
12:35 - pod dies the service is also a load
12:39 - balancer which means that the service
12:40 - will actually catch the request and
12:43 - forward it to whichever part is least
12:45 - busy so it has both of these
12:47 - functionalities but in order to create
12:49 - the the second replica of the my
12:51 - application pod you wouldn't create a
12:54 - second part but instead you would define
12:56 - a blueprint for in my application part
12:59 - and specify how many replicas of that
13:02 - pod you would like to run and that
13:04 - component or that blueprint is called
13:07 - deployment which is another component of
13:09 - kubernetes and in practice you would not
13:13 - be working with pause or you will not be
13:15 - creating pods you would be creating
13:17 - deployments because there you can
13:19 - specify how many replicas and you can
13:22 - also scale up or scale down number of
13:25 - replicas of pods that you need
13:27 - so with pod we said that part is a layer
13:30 - of abstraction on top of containers and
13:33 - deployment is another abstraction on top
13:36 - of pods which makes it more convenient
13:38 - to interact with the pods replicate them
13:41 - and do some other configuration so in
13:44 - practice you would mostly work with
13:46 - deployments and not with pots so now if
13:50 - one of the replicas of your replication
13:52 - pod would die the service will forward
13:54 - the requests to another one so your
13:57 - application would still be accessible
13:59 - for the user so now you're probably
14:01 - wondering what about the database pot
14:03 - because if the database pot died your
14:06 - application also wouldn't be accessible
14:08 - so we need database replicas as well
14:11 - however we can't replicate database
14:14 - using a deployment and the reason for
14:17 - that is because database has a state
14:20 - which is its data meaning that if we
14:23 - have closed a replicas of the database
14:26 - they would all need to access the same
14:29 - shared data storage and there you would
14:33 - need some kind of mechanism that manages
14:35 - which parts are currently writing to
14:38 - that storage or which parts are reading
14:41 - from that storage in order to avoid data
14:44 - inconsistencies and that mechanism in
14:48 - addition to replicating feature is
14:51 - offered by another kubernetes component
14:54 - called stateful set so this component is
14:57 - meant specifically for applications like
15:00 - databases so my sequel MongoDB
15:04 - elasticsearch or any other state full
15:07 - applications or databases should be
15:10 - created using stateful sets and not
15:13 - deployments it's a very important
15:15 - distinction and stateful said just like
15:18 - deployment would take care of
15:20 - replicating the pods and scaling them up
15:23 - or scaling them down but making sure
15:26 - that database reads and writes are
15:28 - synchronized so that no database
15:31 - inconsistencies are offered however I
15:34 - must mention here that deploying
15:36 - database applications using stateful
15:39 - sets in kubernetes cluster can be
15:42 - somewhat tedious so it's definitely more
15:45 - difficult than working with deployments
15:48 - where you don't have all these
15:49 - challenges that's why it's also a common
15:52 - practice to host database
15:55 - applications outside of the kubernetes
15:57 - cluster and just have the deployments or
16:00 - stateless applications that replicate
16:03 - and scale with no problem inside of the
16:05 - kubernetes cluster and communicate with
16:08 - the external database so I'm gonna make
16:10 - another video in order to show specific
16:12 - comparison between deployment and
16:14 - stateful set and how to actually deploy
16:16 - database applications properly in a
16:19 - communities cluster so now that we have
16:22 - two replicas of my application pod and
16:24 - two replicas of the database and they're
16:26 - both load balanced our setup is more
16:29 - robust which means that now even if node
16:32 - one the whole note server was actually
16:35 - rebooted or crashed and nothing could
16:38 - run on it we will still have a second
16:41 - note with application and database pods
16:43 - running on it and the application would
16:46 - still be accessible by the user until
16:48 - these two replicas get recreated so you
16:52 - can avoid downtime so to summarize we
16:55 - have looked at the most used kubernetes
16:58 - components we start with the pods and
17:00 - the services in order to communicate
17:02 - between the pots and the ingress
17:04 - component which is used to route traffic
17:07 - into the cluster we've also looked at
17:10 - external configuration using config maps
17:12 - and secrets and data persistence using
17:15 - volumes and finally we've looked at pod
17:19 - blueprints with replicating mechanisms
17:22 - like deployments and stateful sets where
17:25 - stateful set is used specifically for
17:28 - stateful applications like databases and
17:30 - yes there are a lot more components that
17:33 - communities offers but these are really
17:36 - the core the basic ones just using these
17:39 - core components you can actually build
17:41 - pretty powerful kubernetes clusters
17:44 - thanks for watching the video I hope it
17:46 - was helpful and if it was don't forget
17:48 - to like it this is a video series so I
17:51 - will create a new one every week so if
17:53 - you want to be notified whenever a new
17:55 - video comes out then subscribe to my
17:57 - channel if you have any questions if
18:00 - something wasn't clear in the video
18:01 - please post them in a comment section
18:03 - below and I will try to answer them so
18:06 - thank you and see
18:07 - in the next video

Cleaned transcript:

hello and welcome to the next kubernetes tutorial video so in this video I want to give you an overview of the most basic fundamental components of kubernetes but just enough to actually get you started using kubernetes in practice either as a DevOps engineer or a software developer now kubernetes has tons of components but most of the time you are going to be working with just a handful of them so if you have just 30 to 40 minutes and you want to get started with kubernetes as fast as possible this video can actually be the perfect fit for you so I'm gonna build a case of a simple JavaScript application with a simple database and I'm gonna show you step by step how each component of kubernetes actually helps you to deploy your application and what is the role of each of those components so let's start with the basic setup of a worker node or in kubernetes terms a node which is a simple server a physical or virtual machine and the basic component or the smallest unit of kubernetes is a pot so what pot is is basically an abstraction over a container so if you're familiar with docker containers or container images so basically what pod does is it creates this running environment or a layer on top of the container and the reason is because kubernetes wants to abstract away the container runtime or container technologies so that you can replace them if you want to and also because you don't have to directly work with docker or whatever the container technology you use in a kubernetes so you only interact with the kubernetes layer so we have an application pod which is our own application and that will maybe use a database pod with its own container and this is also an important concept here pod is usually meant to run one application container inside of it you can run multiple containers inside one pod but usually it's only the case if you have one main application container and a helper container or some side service that has to run inside of that pod and you say this is nothing special you just have one server and two containers running on it with a abstraction layer on top of it so now let's see how they communicate with each other in kubernetes world so kubernetes offers outofthebox a virtual network which means that each pod gets its own IP address not the container the pod gets the IP address and each pod can communicate with each other using that IP address which is an internal IP address obviously it's not the public one so my application container can communicate with database using the IP address however pod components in kubernetes also an important concept are ephemeral which means that they can die very easily and when that happens for example if I lose a day a base container because the container crashed because the application crashed inside or because the notes the server that I'm running them on ran out resources the pod will die and a new one will get created in its place and when that happens it will get assigned a new IP address which obviously is inconvenient if you are communicating with the database using the IP address because now you have to adjust it every time pod restarts and because of that another component of kubernetes called service is used so service is basically a static IP address or permanent IP address that can be attached so to say to each hot so my app will have its own service and database part will have its own service and the good thing here is that the life cycles of service and the pod are not connected so even if the pod dies the service and its IP address will stay so you don't have to change that endpoints anymore so now obviously you would want your application to be accessible through a browser right and for this you would have to create an external service so external service is a service that opens the communication from external sources but obviously you wouldn't want your database to be open to the public requests and for that you would create something called an internal service so this is a type of a service that you specify when creating one however if you notice the URL of the external service is not very practical so basically what you have is an HTTP protocol with a node IP address so of the node not the service and the port number of the service which is good for test purposes if you want to test something very fast but not for the end product so usually you will want your URL to look like this if you want to talk to your application with a secure protocol and a domain name and for that there is another component of kubernetes called ingress so instead of service the request goes first to ingress and it does the forwarding then to the service so now we saw some of the very basic components of kubernetes and as you see this is a very simple set up we just have a one server and a couple of containers running and some services nothing really special where kubernetes advantages or the actual cool features really come forward but we're gonna get there stepbystep so let's continue so as we said pots communicate with each other using a service so my application will have a database end point let's say called MongoDB service that it uses to communicate with the database but where do you configure usually this database URL or endpoints usually you would do it in application properties file or as some kind of external environmental variable but usually it's inside of the built image of the application so for example if the endpoint of the service or service name in this case changed to MongoDB you would have to adjust that URL in the application so usually you'd have to rebuild the application with a new version and you have to push it to the repository and now you'll have to pull that new image in your pod and restart the whole thing so a little bit tedious for a small change like database URL so for that purpose kubernetes has a component called config map so what it does is it's basically your external configuration to your application so config map would usually contain configuration data like URLs of database or some other services that use and in kubernetes you just connect it to the pot so that pot actually gets the data that config map contains and now if you change the name of the service the endpoint of the service you just adjust the config map and that's it you don't have to build a new image and have to go through this whole cycle now part of the external configuration can also be database username and password right which may also change in the application deployment process but putting a password or other credentials in a config map in a plain text format would be insecure even though it's an external configuration so for this purpose kubernetes has another component called secret so secret is just like config map but the difference is that it's used to store secret data credentials for example and it's stored not a plain text format of course but in base64 encoded format so secret would contain things like credentials and of course I mean database user you could also put in config map but what's important is the passwords certificates things that you don't want other people to have access to would go in the secret and just like config map you just connect it to your pot so that pod can actually see those data and read from the secret you can actually use the data from config map or secret inside of your application pod using for example environmental variables or even as a properties file so now to review we've actually looked at almost all mostly used kubernetes basic components we've looked at the pod we've seen how services are used what is ingress component useful for and we've also seen external configuration using config map and secrets so now let's see another very important concept generally which is data storage and how it works in kubernetes so we have this database pod that our application uses and it has some data or it generates some data with this set up that you see now if the database container or the pod gets restarted the data would be gone and that's problematic and inconvenient obviously because you want your database data or log data to be persisted reliably longterm and the way you can do it in kubernetes is using another component of kubernetes called volumes and how it works is that it basically attaches a physical storage on a hard drive to your pot and that storage could be either on a local machine meaning on the same server node where the pod is running or it could be on a remote storage meaning outside of the kubernetes cluster it could be a cloud storage or it could be your own premise storage which is not part of the kubernetes cluster so you just have an external reference on it so now when the database pod or container gets restarted all the data will be there persisted and because data storage and volumes is a very important topic I'm gonna make its own tutorial video about volumes but now it's important to understand the distinction between the kubernetes cluster and all of its components and the storage regardless of whether it's a local or remote storage think of a storage as an external hard drive plug in into the kubernetes cluster because the point is Kunitz clustered explicitly doesn't manage any data persistence which means that you as a community's user or an administrator are responsible for backing up the data replicating and managing it and making sure that it's kept on a proper Hardware etc because it's not taking care of kubernetes so now let's see everything is running perfectly and a user can access our application through a browser and when they set up what happens if my application pod dies right crushes or I have to restart the pod because I built a new container image basically I would have a downtime where a user can reach my application which is obviously a very bad thing if it happens in production and this is exactly the advantage of distributed systems and containers so instead of relying on just one application pod and one database pod etc we are replicating everything on multiple servers so we would have another node where a replica or clone of our application would run which will also be connected to the service so remember previously we said the service is like an persistent static IP address with a DNS name so that you don't have to constantly adjust the end point when pod dies the service is also a load balancer which means that the service will actually catch the request and forward it to whichever part is least busy so it has both of these functionalities but in order to create the the second replica of the my application pod you wouldn't create a second part but instead you would define a blueprint for in my application part and specify how many replicas of that pod you would like to run and that component or that blueprint is called deployment which is another component of kubernetes and in practice you would not be working with pause or you will not be creating pods you would be creating deployments because there you can specify how many replicas and you can also scale up or scale down number of replicas of pods that you need so with pod we said that part is a layer of abstraction on top of containers and deployment is another abstraction on top of pods which makes it more convenient to interact with the pods replicate them and do some other configuration so in practice you would mostly work with deployments and not with pots so now if one of the replicas of your replication pod would die the service will forward the requests to another one so your application would still be accessible for the user so now you're probably wondering what about the database pot because if the database pot died your application also wouldn't be accessible so we need database replicas as well however we can't replicate database using a deployment and the reason for that is because database has a state which is its data meaning that if we have closed a replicas of the database they would all need to access the same shared data storage and there you would need some kind of mechanism that manages which parts are currently writing to that storage or which parts are reading from that storage in order to avoid data inconsistencies and that mechanism in addition to replicating feature is offered by another kubernetes component called stateful set so this component is meant specifically for applications like databases so my sequel MongoDB elasticsearch or any other state full applications or databases should be created using stateful sets and not deployments it's a very important distinction and stateful said just like deployment would take care of replicating the pods and scaling them up or scaling them down but making sure that database reads and writes are synchronized so that no database inconsistencies are offered however I must mention here that deploying database applications using stateful sets in kubernetes cluster can be somewhat tedious so it's definitely more difficult than working with deployments where you don't have all these challenges that's why it's also a common practice to host database applications outside of the kubernetes cluster and just have the deployments or stateless applications that replicate and scale with no problem inside of the kubernetes cluster and communicate with the external database so I'm gonna make another video in order to show specific comparison between deployment and stateful set and how to actually deploy database applications properly in a communities cluster so now that we have two replicas of my application pod and two replicas of the database and they're both load balanced our setup is more robust which means that now even if node one the whole note server was actually rebooted or crashed and nothing could run on it we will still have a second note with application and database pods running on it and the application would still be accessible by the user until these two replicas get recreated so you can avoid downtime so to summarize we have looked at the most used kubernetes components we start with the pods and the services in order to communicate between the pots and the ingress component which is used to route traffic into the cluster we've also looked at external configuration using config maps and secrets and data persistence using volumes and finally we've looked at pod blueprints with replicating mechanisms like deployments and stateful sets where stateful set is used specifically for stateful applications like databases and yes there are a lot more components that communities offers but these are really the core the basic ones just using these core components you can actually build pretty powerful kubernetes clusters thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see in the next video
