With timestamps:

00:00 - in this video we're going to talk about
00:02 - an infrastructure as
00:03 - code tool which is gaining popularity in
00:06 - the devops world
00:07 - and that is pollumi first we will see
00:09 - what is polumi and what makes it
00:11 - different from
00:12 - other popular infrastructures code tools
00:15 - also what are
00:16 - its main benefits and characteristics
00:19 - and then we will see how polymer
00:20 - actually works in practice
00:22 - by writing a simple pull me project to
00:25 - first create
00:26 - an s3 bucket in an aws account
00:29 - and then a more realistic example of
00:31 - provisioning an
00:32 - eks cluster
00:36 - when writing infrastructure as code
00:38 - scripts using all these other tools
00:40 - you usually have to use a domain
00:42 - specific language
00:44 - of that tool or yemo or json format
00:47 - which is something that a lot of tools
00:49 - use and that is great because it's easy
00:51 - to read
00:52 - and easy to define resources you want to
00:54 - create etc
00:56 - but what if you need to add some more
00:58 - logic in there like
00:59 - conditionals for example saying create
01:02 - these ec2 instance
01:03 - if this condition is met or use loops
01:06 - like i want to create 20
01:08 - ec2 instances with the same
01:10 - configuration or what about reusing the
01:12 - logic like
01:13 - all 20 instances with this shared
01:16 - configuration
01:17 - plus some specific configuration for
01:19 - each one of them
01:21 - so if you want to use this kind of logic
01:23 - it gets actually pretty complex
01:26 - in such formats now all these logical
01:28 - operations
01:29 - and loops reusing blocks of code etc
01:32 - is a natural part of any programming
01:35 - language right
01:36 - so writing the same infrastructure as
01:38 - code logic in a programming language
01:41 - would obviously make writing more
01:43 - complex code easier
01:44 - and cleaner and that's exactly what
01:47 - pollumi did
01:47 - polomi allows you to write
01:49 - infrastructure's code in a programming
01:51 - language
01:52 - now which programming language is that
01:54 - well you can actually choose whichever
01:56 - language you want to use with polumi
01:59 - you can write it in node.js in
02:01 - python.net etc
02:03 - so instead of having to learn a new
02:05 - syntax or a dsl
02:07 - or new language you can use the language
02:09 - you are most
02:10 - proficient in and use it to also write
02:13 - infrastructure as code okay now you may
02:16 - be thinking
02:17 - cool i can use a programming language to
02:19 - write infrastructures code
02:21 - but what other clear advantages do you
02:24 - actually get
02:25 - by being able to write infrastructures
02:27 - code in a programming language of your
02:29 - choice
02:30 - well if you are a python developer for
02:32 - example
02:33 - you're probably already using the most
02:36 - fitting
02:37 - ide for python like pycharm maybe you
02:40 - have installed all the plugins for that
02:42 - language that makes it easier for you to
02:44 - write python code
02:45 - you have configured linters that tell
02:47 - you immediately if you have
02:49 - errors in your code or give you warnings
02:51 - about your code quality
02:52 - plus you know all the main libraries you
02:54 - can use in your code
02:56 - from python so basically you know the
02:58 - whole ecosystem of that language
03:01 - and the tools that you can use with it
03:03 - and that means
03:04 - you can use all that same ecosystem and
03:07 - the tool set
03:08 - as well as your expertise in that
03:10 - language to now
03:12 - write infrastructure as code and this
03:14 - can make you work
03:15 - much more efficient another thing that
03:18 - we see
03:19 - emerging and becoming a standard in
03:21 - devops is treating our
03:23 - infrastructure's code exactly the same
03:25 - way as our application code
03:27 - and that includes testing the
03:29 - configuration code
03:30 - having unit tests integration tests etc
03:34 - so with yaml and json format or a domain
03:36 - specific
03:37 - language like hcl that terraform uses
03:40 - it's pretty difficult to write tests for
03:42 - these scripts
03:43 - with polomi obviously you have the
03:45 - advantage of simply writing tests
03:48 - for your infrastructure as code as for
03:51 - your application code
03:52 - using the same test libraries same
03:54 - programming language same editor
03:56 - and so on now this shift of
04:00 - using programming languages instead of
04:02 - yaml
04:03 - or json format allows developers
04:06 - to now also write infrastructures code
04:09 - which usually is seen as primarily a
04:11 - devops or operations team task
04:14 - so it results in operations and
04:15 - developers working more closely together
04:18 - where the operations team brings the
04:20 - know-how
04:21 - on the infrastructure specifics and what
04:23 - needs to be configured
04:25 - in terms of infrastructure components
04:27 - while developers bring know-how
04:29 - on how to write the code most
04:31 - efficiently
04:32 - to configure the infrastructure in the
04:34 - desired way
04:35 - while also being able to properly test
04:38 - the code
04:38 - and use the existing tools for writing
04:41 - and managing this code
04:43 - now that you know what differentiates
04:45 - polumi from
04:46 - other infrastructures code tools let's
04:48 - actually see how it works in practice
04:51 - so in this part of the video we're gonna
04:53 - create a simple
04:54 - plumi project in node.js that provisions
04:58 - resources
04:59 - in our aws account first we're going to
05:01 - create an
05:02 - s3 bucket as a simple example and then
05:05 - we will provision an eks cluster using
05:08 - polumi
05:09 - as a more realistic use case so let's
05:12 - get into it
05:12 - first we need to install polo me which
05:15 - is super easy
05:16 - you have detailed guides here for each
05:18 - environment
05:19 - so on mac i'm just gonna do brew install
05:22 - polomi
05:26 - once polami is installed we'll create a
05:28 - new folder
05:34 - in this folder we're going to create a
05:35 - plumi project and to bootstrap the
05:37 - project plummy actually gives us
05:39 - a boilerplate code to get started with
05:42 - and we can do that using simple
05:44 - polumi new command so if i execute this
05:48 - in this new folder that we created i
05:50 - have
05:51 - a choice of technology or programming
05:54 - language
05:55 - and platform combination right so we
05:58 - have the platforms
06:00 - like aws azure google cloud kubernetes
06:03 - and then we have
06:04 - different programming languages that you
06:05 - can choose from since we're
06:07 - going to be creating resources on aws
06:10 - using node.js or javascript i'm going to
06:13 - go with
06:14 - this option here and enter
06:17 - some project information project name
06:23 - description stack name
06:26 - aws region this is important because
06:28 - we're going to be creating
06:29 - resources in a specific region i'm going
06:32 - to
06:32 - choose my region in europe
06:38 - and our project is ready to go now if i
06:41 - do ls here
06:42 - this folder was empty and now i see a
06:44 - lot of files that pull me actually
06:46 - generated
06:46 - and if i open the project in visual
06:48 - studio code
06:51 - you see that polumi initiated a node.js
06:53 - project
06:54 - so we have package.json with polumi
06:57 - libraries as dependencies
06:59 - and they have been automatically
07:01 - downloaded into
07:02 - node modules folder and you have
07:05 - index.js
07:06 - the starting code where all libraries
07:09 - are imported already
07:11 - we have polumi core code
07:14 - as well as aws libraries since that's
07:17 - what we selected
07:19 - and you already have a simple example
07:21 - code that creates an
07:22 - s3 bucket in an aws account
07:26 - and as you see this is simple node.js
07:28 - syntax or javascript syntax
07:31 - we are creating an object this is the
07:33 - name we can reference it with
07:35 - in polumi and then saving a resulting
07:37 - bucket id
07:39 - which is the bucket name that we will
07:41 - see in aws
07:43 - and we can actually execute this code
07:46 - just as it is
07:47 - and this will create a bucket in our aws
07:49 - account
07:50 - now how does polomi know how to connect
07:54 - to the aws account
07:55 - or which region to create resources in
07:58 - well plummy takes the aws credentials
08:01 - from the default
08:02 - dot aws folder in your users directory
08:07 - so if you have that set already you
08:09 - don't need to do anything
08:11 - but alternatively you can also set them
08:13 - as environment variables
08:15 - or configure them using polymer itself
08:17 - and that will work too
08:19 - and you can actually check the plumi
08:20 - documentation for all the different ways
08:23 - for setting up the platform
08:25 - configuration that polumi connects to
08:27 - and this one is specifically for aws so
08:30 - in my case i have this dot aws folder
08:33 - already configured
08:34 - and that means that we're actually all
08:36 - set and ready to execute this
08:39 - now to execute polami project
08:42 - we're going to need a simple polumi
08:45 - up command so if i run this
08:52 - first of all you see that we get a
08:53 - preview so nothing gets executed
08:56 - automatically
08:57 - it actually just gives us a preview of
08:59 - what's going to
09:00 - happen and then we have to confirm that
09:03 - we want that change to happen
09:05 - either saying yes or no or asking polomi
09:09 - to give
09:09 - some more details so we can make a
09:11 - decision and the preview before
09:13 - executing it is actually important
09:15 - so that you don't accidentally destroy
09:18 - the existing
09:18 - infrastructure so i'm gonna confirm
09:25 - we see a successful result and right
09:27 - here we have
09:29 - output the bucket name that we exported
09:32 - right here and this is a convenient way
09:35 - of
09:36 - exporting all the outputs that we want
09:38 - to see in the console
09:40 - right after the execution now obviously
09:42 - that's a super simple use case
09:44 - so let's do some more stuff with it like
09:46 - creating multiple buckets
09:48 - in a loop
09:53 - so i'm going to define three bucket
09:55 - names and then for each bucket name
10:02 - i want to create a new bucket with
10:05 - that specific name and again a simple
10:09 - javascript syntax for creating loops and
10:11 - executing loops
10:13 - and we can also export the bucket name
10:16 - for each of the buckets
10:25 - simply like this using our familiar
10:28 - javascript array and then just export
10:32 - the whole array here instead of just one
10:35 - id
10:35 - and now this will give us three buckets
10:38 - with three different names
10:43 - and we're gonna do polo me up
10:48 - and in preview we see again polomi's
10:50 - plan
10:51 - of what needs to happen in the
10:53 - infrastructure
10:54 - when we execute the program so the way
10:57 - it works is that polomi has a concept of
10:59 - state
11:00 - plummy stores the up-to-date information
11:03 - about your infrastructure
11:05 - in a state file in a simple json format
11:08 - and using that state plummy knows what
11:11 - needs to be created deleted or
11:13 - changed in your infrastructure so on
11:16 - every change in the infrastructure the
11:17 - state
11:18 - will get updated by default that state
11:21 - file is managed by pollumi itself
11:23 - it is stored on a hosted polumi service
11:26 - so it's completely managed for you
11:28 - but you can configure polomi to store
11:30 - this data file in a different location
11:32 - if you want to
11:33 - like s3 bucket or google cloud storage
11:36 - or also on your local file system
11:39 - and then you have to manage it yourself
11:41 - so using that state polomi decided
11:44 - what changes need to be made in the
11:46 - infrastructure
11:47 - by comparing that current state the most
11:50 - up-to-date state of the infrastructure
11:52 - with the desired state that we define
11:55 - in our program or in our script and
11:58 - plans how to get us from the current
12:00 - state
12:01 - to the desired state and this is
12:03 - basically the plan
12:04 - so we're going to confirm this
12:10 - the old bucket will be deleted and three
12:13 - new buckets will be
12:14 - created and you see the output now is an
12:17 - array
12:18 - of the bucket names that were created
12:22 - you can also print the output separately
12:24 - with pollumi
12:26 - stack output command
12:29 - like this now another cool thing that
12:32 - polumi gives you
12:33 - is polymer console so at the beginning
12:36 - of each execution
12:38 - you have this link here and
12:41 - if we open that link it will show you
12:44 - the overview of that specific execution
12:47 - in
12:48 - this nice ui and you see it's hosted
12:51 - by polum itself on your account and you
12:54 - have these activities as
12:55 - a list here as a history and for each
12:58 - activity you have the changes in your
13:00 - infrastructure
13:01 - as well as changes in your code
13:05 - that updated the infrastructure so you
13:08 - have this super nice overview of history
13:10 - of your infrastructure changes
13:12 - so you can track exactly what changes
13:14 - happened when
13:15 - and by which team member now this is
13:18 - obviously a
13:19 - simple s3 bucket infrastructure
13:22 - so let's do something more useful and
13:24 - create an eks cluster with polumi
13:27 - so first of all i'm going to delete all
13:28 - this code and
13:30 - do pull me up
13:38 - and plummy will clean up everything so
13:40 - as you see polymer is
13:42 - declarative which means we just say
13:45 - what we want as a result which in our
13:48 - case is
13:49 - we want no buckets instead of telling
13:52 - pulumi
13:53 - what to do which in this case would be
13:55 - please delete
13:56 - three buckets so clear advantage of that
13:59 - is that we don't have to keep track of
14:01 - the infrastructure
14:02 - state to be able to tell polumi what
14:04 - needs to be done or changed in the
14:06 - infrastructure
14:07 - because pollumi does all that for us so
14:11 - i'm going to confirm
14:12 - and now that buckets are gone let's
14:14 - create an eks cluster
14:16 - and first we would need an eks
14:19 - polomi library for that and we're going
14:22 - to define that in package.json as a
14:24 - dependency
14:25 - and as you see again advantage of using
14:28 - the
14:29 - ecosystem of a programming language in
14:31 - this case editor is auto suggesting the
14:34 - version
14:35 - of this eks library without having to
14:37 - look it up
14:38 - so i'm going to select it do npm
14:42 - install to download the library
14:46 - and we can now use it in our code
14:52 - now to create an eks resource we first
14:55 - need to create a vpc for it which is
14:58 - pretty easy we just
15:00 - say
15:04 - new vpc and the name of that vpc
15:07 - and you see an other suggestion here as
15:10 - we know them from programming languages
15:12 - which i personally think is so helpful
15:14 - when writing code
15:16 - because you don't have to remember all
15:17 - those function names attribute names etc
15:24 - so that's a simple vpc constructor and
15:27 - we need to set
15:28 - a cider block here like this
15:34 - which is going to be an ip address
15:37 - range for that vpc so vpc definition is
15:40 - done now let's create
15:42 - an eks cluster that uses
15:45 - that vpc
15:48 - so we have the cluster name let's call
15:50 - it cluster
15:53 - and referencing other resources is super
15:56 - easy
15:56 - just like we know it from programming
15:58 - languages name of the object and
16:00 - attribute
16:01 - vpc id let's also
16:05 - set the subnet ids from the vpc
16:10 - and set the instance type to t2
16:14 - medium so generally as you see
16:17 - for each resource we want to create
16:20 - after the resource name we can pass
16:23 - these
16:23 - configuration options to override the
16:26 - defaults
16:28 - like ciderblock vpc id instance type etc
16:32 - and finally define the output we would
16:35 - need
16:35 - from the eks which is the cubeconfig
16:38 - file to connect to the cluster
16:40 - so exports
16:44 - and we can call it cubeconfig and this
16:46 - will be
16:47 - the cluster dot cube config attribute
16:52 - and this should actually be called
16:53 - cluster that's our cluster
16:55 - variable name and now this simple
16:57 - program is actually ready to be executed
17:00 - and with polumi up
17:04 - we'll get a preview of all the resources
17:07 - that this program will create let's
17:10 - confirm
17:11 - and we'll have a fresh new eks cluster
17:14 - in about
17:14 - 10 minutes
17:19 - eks cluster was created now going back
17:22 - to
17:22 - the polumi console
17:26 - if you click in the resources tab here
17:30 - you will see a list of resources in your
17:33 - infrastructure
17:34 - so that's your current infrastructure
17:36 - state
17:37 - and with the prefixes you can
17:39 - differentiate actually
17:40 - which platform or which infrastructure
17:43 - part
17:44 - these individual resources belong to
17:47 - so we have polomi resources here we have
17:49 - aws
17:51 - and then sub resources like ec2
17:54 - or iam and then you also have these
17:57 - kubernetes resources and next to some of
18:00 - the resources
18:01 - you have these convenient links directly
18:03 - to that resource
18:05 - in aws console so you can view them
18:09 - in aws directly
18:13 - and next to the list view of resources
18:16 - you have a graph view
18:18 - that will show you the connections
18:20 - between those resources as well as
18:23 - which components actually belong to or
18:26 - depend on
18:27 - the others which is super cool because
18:29 - in our program
18:31 - in our code we just have these high
18:32 - level components that we created
18:35 - like vpc and cluster and then all the
18:38 - stuff that gets created
18:39 - in the background underneath the vpc and
18:42 - eks cluster is displayed in this
18:45 - overview
18:46 - so you can see all the components that
18:48 - were actually created in the background
18:50 - in this hierarchical view so as you see
18:54 - polumi console gives you this simple ui
18:57 - with the history of your infrastructure
18:59 - changes as well as
19:00 - a nice overview of your current
19:02 - infrastructure state
19:04 - and finally to clean all these up to
19:07 - delete all the resources that you
19:08 - created
19:09 - you can actually execute polumi destroy
19:11 - command
19:13 - and it will basically just reverse the
19:16 - pollumi
19:17 - up execution by destroying and cleaning
19:19 - up all the resources
19:27 - so i hope you learned a lot in this
19:28 - video let me know in the comments
19:30 - what you think about polumi and
19:32 - generally what is your experience with
19:34 - infrastructure as code tools and with
19:37 - that thank you for watching and see you
19:39 - in the next video

Cleaned transcript:

in this video we're going to talk about an infrastructure as code tool which is gaining popularity in the devops world and that is pollumi first we will see what is polumi and what makes it different from other popular infrastructures code tools also what are its main benefits and characteristics and then we will see how polymer actually works in practice by writing a simple pull me project to first create an s3 bucket in an aws account and then a more realistic example of provisioning an eks cluster when writing infrastructure as code scripts using all these other tools you usually have to use a domain specific language of that tool or yemo or json format which is something that a lot of tools use and that is great because it's easy to read and easy to define resources you want to create etc but what if you need to add some more logic in there like conditionals for example saying create these ec2 instance if this condition is met or use loops like i want to create 20 ec2 instances with the same configuration or what about reusing the logic like all 20 instances with this shared configuration plus some specific configuration for each one of them so if you want to use this kind of logic it gets actually pretty complex in such formats now all these logical operations and loops reusing blocks of code etc is a natural part of any programming language right so writing the same infrastructure as code logic in a programming language would obviously make writing more complex code easier and cleaner and that's exactly what pollumi did polomi allows you to write infrastructure's code in a programming language now which programming language is that well you can actually choose whichever language you want to use with polumi you can write it in node.js in python.net etc so instead of having to learn a new syntax or a dsl or new language you can use the language you are most proficient in and use it to also write infrastructure as code okay now you may be thinking cool i can use a programming language to write infrastructures code but what other clear advantages do you actually get by being able to write infrastructures code in a programming language of your choice well if you are a python developer for example you're probably already using the most fitting ide for python like pycharm maybe you have installed all the plugins for that language that makes it easier for you to write python code you have configured linters that tell you immediately if you have errors in your code or give you warnings about your code quality plus you know all the main libraries you can use in your code from python so basically you know the whole ecosystem of that language and the tools that you can use with it and that means you can use all that same ecosystem and the tool set as well as your expertise in that language to now write infrastructure as code and this can make you work much more efficient another thing that we see emerging and becoming a standard in devops is treating our infrastructure's code exactly the same way as our application code and that includes testing the configuration code having unit tests integration tests etc so with yaml and json format or a domain specific language like hcl that terraform uses it's pretty difficult to write tests for these scripts with polomi obviously you have the advantage of simply writing tests for your infrastructure as code as for your application code using the same test libraries same programming language same editor and so on now this shift of using programming languages instead of yaml or json format allows developers to now also write infrastructures code which usually is seen as primarily a devops or operations team task so it results in operations and developers working more closely together where the operations team brings the knowhow on the infrastructure specifics and what needs to be configured in terms of infrastructure components while developers bring knowhow on how to write the code most efficiently to configure the infrastructure in the desired way while also being able to properly test the code and use the existing tools for writing and managing this code now that you know what differentiates polumi from other infrastructures code tools let's actually see how it works in practice so in this part of the video we're gonna create a simple plumi project in node.js that provisions resources in our aws account first we're going to create an s3 bucket as a simple example and then we will provision an eks cluster using polumi as a more realistic use case so let's get into it first we need to install polo me which is super easy you have detailed guides here for each environment so on mac i'm just gonna do brew install polomi once polami is installed we'll create a new folder in this folder we're going to create a plumi project and to bootstrap the project plummy actually gives us a boilerplate code to get started with and we can do that using simple polumi new command so if i execute this in this new folder that we created i have a choice of technology or programming language and platform combination right so we have the platforms like aws azure google cloud kubernetes and then we have different programming languages that you can choose from since we're going to be creating resources on aws using node.js or javascript i'm going to go with this option here and enter some project information project name description stack name aws region this is important because we're going to be creating resources in a specific region i'm going to choose my region in europe and our project is ready to go now if i do ls here this folder was empty and now i see a lot of files that pull me actually generated and if i open the project in visual studio code you see that polumi initiated a node.js project so we have package.json with polumi libraries as dependencies and they have been automatically downloaded into node modules folder and you have index.js the starting code where all libraries are imported already we have polumi core code as well as aws libraries since that's what we selected and you already have a simple example code that creates an s3 bucket in an aws account and as you see this is simple node.js syntax or javascript syntax we are creating an object this is the name we can reference it with in polumi and then saving a resulting bucket id which is the bucket name that we will see in aws and we can actually execute this code just as it is and this will create a bucket in our aws account now how does polomi know how to connect to the aws account or which region to create resources in well plummy takes the aws credentials from the default dot aws folder in your users directory so if you have that set already you don't need to do anything but alternatively you can also set them as environment variables or configure them using polymer itself and that will work too and you can actually check the plumi documentation for all the different ways for setting up the platform configuration that polumi connects to and this one is specifically for aws so in my case i have this dot aws folder already configured and that means that we're actually all set and ready to execute this now to execute polami project we're going to need a simple polumi up command so if i run this first of all you see that we get a preview so nothing gets executed automatically it actually just gives us a preview of what's going to happen and then we have to confirm that we want that change to happen either saying yes or no or asking polomi to give some more details so we can make a decision and the preview before executing it is actually important so that you don't accidentally destroy the existing infrastructure so i'm gonna confirm we see a successful result and right here we have output the bucket name that we exported right here and this is a convenient way of exporting all the outputs that we want to see in the console right after the execution now obviously that's a super simple use case so let's do some more stuff with it like creating multiple buckets in a loop so i'm going to define three bucket names and then for each bucket name i want to create a new bucket with that specific name and again a simple javascript syntax for creating loops and executing loops and we can also export the bucket name for each of the buckets simply like this using our familiar javascript array and then just export the whole array here instead of just one id and now this will give us three buckets with three different names and we're gonna do polo me up and in preview we see again polomi's plan of what needs to happen in the infrastructure when we execute the program so the way it works is that polomi has a concept of state plummy stores the uptodate information about your infrastructure in a state file in a simple json format and using that state plummy knows what needs to be created deleted or changed in your infrastructure so on every change in the infrastructure the state will get updated by default that state file is managed by pollumi itself it is stored on a hosted polumi service so it's completely managed for you but you can configure polomi to store this data file in a different location if you want to like s3 bucket or google cloud storage or also on your local file system and then you have to manage it yourself so using that state polomi decided what changes need to be made in the infrastructure by comparing that current state the most uptodate state of the infrastructure with the desired state that we define in our program or in our script and plans how to get us from the current state to the desired state and this is basically the plan so we're going to confirm this the old bucket will be deleted and three new buckets will be created and you see the output now is an array of the bucket names that were created you can also print the output separately with pollumi stack output command like this now another cool thing that polumi gives you is polymer console so at the beginning of each execution you have this link here and if we open that link it will show you the overview of that specific execution in this nice ui and you see it's hosted by polum itself on your account and you have these activities as a list here as a history and for each activity you have the changes in your infrastructure as well as changes in your code that updated the infrastructure so you have this super nice overview of history of your infrastructure changes so you can track exactly what changes happened when and by which team member now this is obviously a simple s3 bucket infrastructure so let's do something more useful and create an eks cluster with polumi so first of all i'm going to delete all this code and do pull me up and plummy will clean up everything so as you see polymer is declarative which means we just say what we want as a result which in our case is we want no buckets instead of telling pulumi what to do which in this case would be please delete three buckets so clear advantage of that is that we don't have to keep track of the infrastructure state to be able to tell polumi what needs to be done or changed in the infrastructure because pollumi does all that for us so i'm going to confirm and now that buckets are gone let's create an eks cluster and first we would need an eks polomi library for that and we're going to define that in package.json as a dependency and as you see again advantage of using the ecosystem of a programming language in this case editor is auto suggesting the version of this eks library without having to look it up so i'm going to select it do npm install to download the library and we can now use it in our code now to create an eks resource we first need to create a vpc for it which is pretty easy we just say new vpc and the name of that vpc and you see an other suggestion here as we know them from programming languages which i personally think is so helpful when writing code because you don't have to remember all those function names attribute names etc so that's a simple vpc constructor and we need to set a cider block here like this which is going to be an ip address range for that vpc so vpc definition is done now let's create an eks cluster that uses that vpc so we have the cluster name let's call it cluster and referencing other resources is super easy just like we know it from programming languages name of the object and attribute vpc id let's also set the subnet ids from the vpc and set the instance type to t2 medium so generally as you see for each resource we want to create after the resource name we can pass these configuration options to override the defaults like ciderblock vpc id instance type etc and finally define the output we would need from the eks which is the cubeconfig file to connect to the cluster so exports and we can call it cubeconfig and this will be the cluster dot cube config attribute and this should actually be called cluster that's our cluster variable name and now this simple program is actually ready to be executed and with polumi up we'll get a preview of all the resources that this program will create let's confirm and we'll have a fresh new eks cluster in about 10 minutes eks cluster was created now going back to the polumi console if you click in the resources tab here you will see a list of resources in your infrastructure so that's your current infrastructure state and with the prefixes you can differentiate actually which platform or which infrastructure part these individual resources belong to so we have polomi resources here we have aws and then sub resources like ec2 or iam and then you also have these kubernetes resources and next to some of the resources you have these convenient links directly to that resource in aws console so you can view them in aws directly and next to the list view of resources you have a graph view that will show you the connections between those resources as well as which components actually belong to or depend on the others which is super cool because in our program in our code we just have these high level components that we created like vpc and cluster and then all the stuff that gets created in the background underneath the vpc and eks cluster is displayed in this overview so you can see all the components that were actually created in the background in this hierarchical view so as you see polumi console gives you this simple ui with the history of your infrastructure changes as well as a nice overview of your current infrastructure state and finally to clean all these up to delete all the resources that you created you can actually execute polumi destroy command and it will basically just reverse the pollumi up execution by destroying and cleaning up all the resources so i hope you learned a lot in this video let me know in the comments what you think about polumi and generally what is your experience with infrastructure as code tools and with that thank you for watching and see you in the next video
