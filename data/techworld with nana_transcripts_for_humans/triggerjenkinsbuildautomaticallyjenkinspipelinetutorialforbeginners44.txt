With timestamps:

00:00 - so till now you saw that every time I
00:03 - made changes in the repository
00:06 - I had to manually scan the pipeline so
00:09 - that the changes could be built but
00:12 - obviously that's not very practical
00:14 - because usually you would want this
00:17 - whole process to work automatically so
00:19 - whenever there is a change or a new
00:21 - commit into the git repository you want
00:24 - Jenkins to be notified in the whole
00:25 - process to be triggered and changes
00:28 - builds so how do you configure all of
00:32 - this now there are two ways that the
00:36 - changes in a git repository can trigger
00:38 - Jenkins built job pipeline etc so one
00:44 - way is through push notifications
00:46 - meaning that a source code management
00:48 - system detects the changes and whenever
00:51 - a new commit comes in it notifies
00:54 - Jenkins about those changes a second way
00:59 - is where Jenkins itself pulls this
01:02 - information in regular intervals
01:05 - so it basically checks itself is their
01:07 - new change is their new change from the
01:09 - repository itself and in Jenkins you can
01:12 - configure both ways so push
01:15 - notifications is actually more efficient
01:19 - because the communication happens only
01:21 - when there is a relevant change that
01:24 - needs to be built but also there's a
01:25 - common practice to configure a built-in
01:29 - jenkins to pull the changes so how do
01:31 - you configure each one of those to
01:33 - configure the push notifications from a
01:36 - git repository you would need to
01:39 - configure both jenkins in your source
01:42 - code management so that they can
01:44 - communicate with each other and
01:46 - depending on which source code
01:48 - management's you use and I use git lab
01:52 - here depending on that you would have to
01:55 - install a respective plug-in in Jenkins
01:58 - you just have to write the repository
02:01 - server hostname and the access token or
02:06 - credentials to access the source code
02:09 - management host so not the repository
02:12 - itself not the
02:13 - project that you want to build but the
02:15 - actual host and you should give Jenkins
02:19 - access token of a gitlab user or your
02:23 - source code management user and that
02:26 - configuration is done here in system
02:29 - configuration and for example I have get
02:34 - lab one here and I have github here so
02:38 - I'm not going to do it because it will
02:40 - depend on which ever source code
02:42 - management you have but here you can
02:44 - figure how to connect to that repository
02:48 - host in the same way in your source code
02:52 - management if you go to settings and
02:56 - integration or is it here you see have
02:59 - web hooks project hooks right so you
03:04 - basically say that this is gonna be
03:06 - Jenkins URL but not just the host but a
03:10 - web hook URL of Jenkins so I can show
03:14 - you on let's here for example this is
03:19 - for github and here you can see the
03:25 - Jenkins URL for github webhook so to say
03:31 - so basically this is a URL where Jenkins
03:34 - will listen to code changes in github
03:38 - repository and this will be obviously
03:40 - different forked lab or bitbucket or
03:43 - whatever and this is the URL you're
03:47 - gonna point here but since I have my
03:50 - Jenkins running on localhost it won't
03:53 - work actually because I can't refer to
03:56 - localhost plus some web book URL here
04:00 - because it doesn't accept localhost it
04:03 - needs a proper domain but this is how
04:05 - you configure it you just say by default
04:08 - that you want to listen to all the push
04:11 - events and whenever gitlab in this case
04:15 - has new changes like a new commit is
04:18 - made to a project it's gonna push that
04:21 - change notification to web hook URL of
04:25 - Jenkins
04:26 - so Jenkins will now know
04:27 - okay there has been a change made in the
04:29 - repository let me trigger that built so
04:32 - this is how the whole process works and
04:34 - a polling request it can be configured
04:37 - inside of that drinking shop so if I go
04:41 - here in my pipeline there is a
04:45 - configuration option which which is
04:47 - called skin multi branch pipeline
04:49 - triggers and if I click here I can
04:54 - configure how often Jenkins should pull
04:58 - the changes so this is an alternative to
05:00 - what I show previously so if I configure
05:05 - one minute interval this will basically
05:07 - mean that Jenkins will check itself if
05:13 - there has been any changes in a git
05:15 - repository of the project every one
05:18 - minutes so if I save this go back and if
05:23 - I go to dev branch let's say I make a
05:31 - change to Jenkins file some change and
05:47 - commit the changes now I don't have to
05:49 - manually scan the build again I just
05:52 - wait for maximum one minute and it
05:57 - should automatically trigger the skin so
06:00 - let's see how this can work so here say
06:03 - I didn't do anything and it's scanned
06:06 - the project itself it was automatically
06:11 - triggered and the change I made is here
06:14 - so if I see the logs I see filling the
06:18 - application application built but of
06:22 - course having it at one minute interval
06:25 - is too much so it's it's too much load
06:29 - on Jenkins so usually you would have you
06:33 - would set it at 15 minutes or maybe half
06:36 - an hour or an hour and also what
06:40 - what's a common practice is that
06:42 - sometimes those webhooks or those push
06:45 - notifications can be unreliable when
06:48 - does this happen for example when
06:51 - Jenkins survey is not available when a
06:53 - source code management system pushes a
06:55 - notification or it could be that that
06:58 - notification gets blocked by a Jenkins
07:01 - firewall like in case something happens
07:04 - in that notification doesn't go through
07:05 - basically Jenkins doesn't know that it
07:08 - should trigger a build so as a sort of a
07:12 - back-up plan for that it's a common
07:15 - practice to use both and set the
07:19 - interval it's a couple of hours maybe
07:21 - one hour so that Jenkins would itself
07:26 - scan the project again and this is what
07:29 - I personally would use I would actually
07:31 - configure both and set the interval at
07:34 - one or two hours thanks for watching the
07:38 - video I hope it was helpful and if it
07:39 - was don't forget to like it if you want
07:42 - to be notified whenever a new video
07:44 - comes out then subscribe to my channel
07:46 - if you have any questions if something
07:49 - wasn't clear in the video please post
07:50 - them in a comment section below and I
07:52 - will try to answer them so thank you and
07:55 - see you in the next video

Cleaned transcript:

so till now you saw that every time I made changes in the repository I had to manually scan the pipeline so that the changes could be built but obviously that's not very practical because usually you would want this whole process to work automatically so whenever there is a change or a new commit into the git repository you want Jenkins to be notified in the whole process to be triggered and changes builds so how do you configure all of this now there are two ways that the changes in a git repository can trigger Jenkins built job pipeline etc so one way is through push notifications meaning that a source code management system detects the changes and whenever a new commit comes in it notifies Jenkins about those changes a second way is where Jenkins itself pulls this information in regular intervals so it basically checks itself is their new change is their new change from the repository itself and in Jenkins you can configure both ways so push notifications is actually more efficient because the communication happens only when there is a relevant change that needs to be built but also there's a common practice to configure a builtin jenkins to pull the changes so how do you configure each one of those to configure the push notifications from a git repository you would need to configure both jenkins in your source code management so that they can communicate with each other and depending on which source code management's you use and I use git lab here depending on that you would have to install a respective plugin in Jenkins you just have to write the repository server hostname and the access token or credentials to access the source code management host so not the repository itself not the project that you want to build but the actual host and you should give Jenkins access token of a gitlab user or your source code management user and that configuration is done here in system configuration and for example I have get lab one here and I have github here so I'm not going to do it because it will depend on which ever source code management you have but here you can figure how to connect to that repository host in the same way in your source code management if you go to settings and integration or is it here you see have web hooks project hooks right so you basically say that this is gonna be Jenkins URL but not just the host but a web hook URL of Jenkins so I can show you on let's here for example this is for github and here you can see the Jenkins URL for github webhook so to say so basically this is a URL where Jenkins will listen to code changes in github repository and this will be obviously different forked lab or bitbucket or whatever and this is the URL you're gonna point here but since I have my Jenkins running on localhost it won't work actually because I can't refer to localhost plus some web book URL here because it doesn't accept localhost it needs a proper domain but this is how you configure it you just say by default that you want to listen to all the push events and whenever gitlab in this case has new changes like a new commit is made to a project it's gonna push that change notification to web hook URL of Jenkins so Jenkins will now know okay there has been a change made in the repository let me trigger that built so this is how the whole process works and a polling request it can be configured inside of that drinking shop so if I go here in my pipeline there is a configuration option which which is called skin multi branch pipeline triggers and if I click here I can configure how often Jenkins should pull the changes so this is an alternative to what I show previously so if I configure one minute interval this will basically mean that Jenkins will check itself if there has been any changes in a git repository of the project every one minutes so if I save this go back and if I go to dev branch let's say I make a change to Jenkins file some change and commit the changes now I don't have to manually scan the build again I just wait for maximum one minute and it should automatically trigger the skin so let's see how this can work so here say I didn't do anything and it's scanned the project itself it was automatically triggered and the change I made is here so if I see the logs I see filling the application application built but of course having it at one minute interval is too much so it's it's too much load on Jenkins so usually you would have you would set it at 15 minutes or maybe half an hour or an hour and also what what's a common practice is that sometimes those webhooks or those push notifications can be unreliable when does this happen for example when Jenkins survey is not available when a source code management system pushes a notification or it could be that that notification gets blocked by a Jenkins firewall like in case something happens in that notification doesn't go through basically Jenkins doesn't know that it should trigger a build so as a sort of a backup plan for that it's a common practice to use both and set the interval it's a couple of hours maybe one hour so that Jenkins would itself scan the project again and this is what I personally would use I would actually configure both and set the interval at one or two hours thanks for watching the video I hope it was helpful and if it was don't forget to like it if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video
