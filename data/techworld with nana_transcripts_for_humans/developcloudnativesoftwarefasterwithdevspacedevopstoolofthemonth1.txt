With timestamps:

00:01 - in this video we're gonna look at a tool
00:03 - which makes it easier for software
00:05 - developers to develop
00:07 - and deploy to kubernetes which is called
00:09 - devspace
00:10 - this is the first video of the new
00:12 - series called devops tool
00:14 - of the month each month you will get to
00:17 - know
00:17 - one new useful tool in devops space so
00:20 - first
00:21 - i will explain what problem devspace
00:23 - solves how it works and then we will see
00:26 - it
00:26 - in action with a simple demo
00:31 - imagine you are in a developer team
00:34 - working on a simple microservices
00:37 - application
00:38 - and maybe you have one devops guy in the
00:40 - team or maybe a separate devops team
00:42 - who knows kubernetes and helps everyone
00:44 - in the team to
00:45 - write the kubernetes yml config files
00:48 - configures the cluster deploys database
00:50 - applications in it
00:51 - and so on so you create a bug fix
00:54 - branch for one of the microservices and
00:57 - start making
00:58 - changes while you are making these
01:00 - changes
01:01 - you want to test in combination with
01:04 - other microservices
01:05 - but you want to test them on the real
01:08 - kubernetes development environment
01:11 - instead of just
01:12 - locally using docker compose or mini
01:14 - cube so that you don't have any
01:16 - surprises
01:17 - once you deploy that on the kubernetes
01:19 - environment because these are two
01:21 - different environments
01:23 - so normal workflow for you would be you
01:26 - test it locally
01:27 - with docker compose or minicube make
01:29 - sure it works
01:30 - create a pull request your branch then
01:33 - is merged into master
01:35 - a ci cd pipeline is triggered that tests
01:38 - the changes
01:39 - builds the new image and deploys it into
01:41 - kubernetes cluster
01:43 - on dev environment now you can test it
01:45 - on dev
01:46 - to make sure it works there the same way
01:48 - it worked locally
01:50 - and this is a long process to be able to
01:52 - test your changes
01:54 - on kubernetes dev environment so what if
01:57 - instead
01:58 - every change you make locally would be
02:01 - immediately deployed into kubernetes
02:04 - cluster
02:05 - so you can test your changes without
02:07 - having to know kubernetes or
02:09 - cube ctl or needing help from the devops
02:12 - team
02:13 - and the tool that lets you do exactly
02:15 - that is
02:16 - dev space so how does dev space work
02:20 - using a simple devspace configuration
02:22 - file in your application code
02:25 - devspace will automatically build your
02:27 - application
02:28 - into an image using your docker file
02:31 - and deploy it into the cluster but on
02:34 - top of that
02:35 - every time you make changes devspace
02:38 - will hot reload them by
02:39 - automatically recreating and restarting
02:42 - the container within the pod
02:45 - so basically syncing the changes you
02:47 - have locally
02:48 - with the container that is running
02:50 - inside kubernetes
02:52 - so this will be a development mode in
02:54 - which you can test
02:56 - every code change immediately but
02:58 - devspace has
02:59 - other use cases and features when for
03:02 - example you just want to deploy
03:04 - the application without the sync and
03:06 - push the image to your private docker
03:08 - repository etc
03:10 - what's also great about devspace is that
03:12 - it gives you shortcut commands
03:14 - to get the container terminal or logs
03:17 - without
03:18 - checking the pot id and namespace etc
03:24 - so let's jump into a demo to show you
03:26 - how to set up the development mode
03:28 - with hot reloading in four simple steps
03:31 - and
03:32 - also show you how this can make the
03:34 - development process
03:35 - much more efficient when working with
03:37 - kubernetes
03:38 - i have a small java project you can find
03:40 - the link in the video description
03:42 - and an empty kubernetes cluster with
03:45 - cubectl
03:46 - already connected for this demo i'm
03:48 - going to use minicube but it could be
03:50 - any kubernetes cluster on aws or any
03:52 - other platform
03:54 - so our steps will be to install devspace
03:57 - we're going to create a docker file
03:59 - initiate our project with devspace
04:01 - and finally start the dev mode so first
04:04 - of all we're gonna install
04:05 - devspace locally installation is very
04:07 - simple you have multiple
04:08 - options described in the official guide
04:11 - i will install it
04:12 - globally using npm so with npm
04:16 - install minus g for global
04:19 - and dev space
04:26 - and when i execute devspace command it
04:28 - will finish the installation
04:29 - and i have devspace available
04:33 - as a comment now the second step
04:36 - is to create a docker file in our
04:38 - project that devspace will use
04:41 - so i'm going to open my project which is
04:43 - in visual studio code
04:46 - and this is a very simple java
04:49 - application basically i just have one
04:52 - application.java file
04:54 - which just basically starts the
04:56 - application
04:57 - and i have one index.html so that we can
05:00 - see
05:01 - a ui to it when we deploy it so these
05:04 - are the two files that i have in here
05:06 - again you can find the link in the
05:08 - description and
05:10 - this is our docker file now usually when
05:13 - you build
05:14 - image from java you want your jar to be
05:17 - inside the image which you can then
05:19 - execute now how dev space works is that
05:22 - it syncs your local code and code inside
05:25 - the container image
05:27 - and checks for any code changes so that
05:30 - it can perform the hot reload
05:31 - so devspace will build the image with
05:34 - all our code
05:35 - inside and sync it and this will happen
05:38 - out of the box without any additional
05:40 - configuration from our site
05:42 - however some of these folders and files
05:45 - here are actually not
05:47 - really part of the code itself like the
05:50 - application code itself
05:51 - so we can easily just exclude them using
05:54 - docker ignore file so let's create a
05:57 - docker ignore file
05:58 - which is actually very similar to git
06:01 - ignore
06:03 - where we can just list all the folders
06:05 - and all the
06:06 - files that we want to exclude when we're
06:09 - building
06:09 - a docker image i'm gonna include dot
06:13 - idea which is
06:14 - actually from intellij because i had
06:16 - this project open intellij
06:18 - so we're gonna exclude that could be
06:21 - also any other
06:22 - editor-specific folder that gets
06:25 - generated
06:26 - we can also ignore the ignore files
06:28 - themselves
06:33 - so this will basically exclude all the
06:35 - unnecessary stuff which are not part of
06:38 - the
06:39 - application code itself from the build
06:42 - docker image so let's save that
06:45 - and we have our project ready for dev
06:47 - space
06:49 - so now we can actually initiate the
06:50 - project using simple devspace init
06:53 - command
06:54 - so first of all let's open a terminal
06:57 - window
07:01 - and execute dev space in it here and
07:04 - let's see what happens
07:06 - the first one is the docker file that
07:07 - devspace will use
07:09 - it has detected that our project has
07:11 - already a docker file and
07:13 - suggests to use it so we're going to go
07:15 - with this option
07:16 - as a next step it asks us to choose
07:19 - container image repository
07:21 - i'm already logged into docker hub where
07:23 - i have my private
07:25 - docker repository so i can basically
07:28 - just choose that because as i mentioned
07:30 - with dev space you can actually push the
07:32 - images also to the repository
07:34 - as part of the process of rebuilding the
07:36 - docker image when you make changes
07:38 - so i'm going to choose that one
07:41 - i can also choose image name on
07:43 - dockerhub let's actually leave it as is
07:45 - and finally devspace is giving us an
07:48 - option to configure
07:49 - how our application will be deployed
07:52 - inside the kubernetes cluster
07:55 - and we have four options here it could
07:57 - be deployed as
07:58 - helm chart so if you have helm chart in
08:01 - the project
08:02 - that your application is uses you can
08:04 - configure that or if you have a remote
08:06 - help chart
08:07 - we can also specify that one as well as
08:10 - just kubernetes yaml files configuration
08:13 - files like deployment.yml
08:15 - however if you do not have any
08:18 - kubernetes yaml files
08:19 - or helm charts for your project inside
08:21 - your application you can actually
08:23 - go with the first one which is component
08:25 - chart and this means that devspace will
08:28 - actually
08:28 - create a helm chart for your application
08:32 - and deploy it inside kubernetes cluster
08:34 - as a helm chart
08:35 - so basically you don't have to write any
08:37 - configuration files or helm charts all
08:40 - these will be taken care of by
08:41 - dev space so we're going to go with this
08:43 - easy option
08:45 - and choose it and we have initialized
08:48 - dev space in our project
08:51 - so let's actually see what happened or
08:53 - what devspace did in our project
08:55 - and as you see devspace automatically
08:57 - generated a devspace.eml file
09:00 - based on our docker file that we
09:03 - provided
09:04 - and note that if this was a
09:05 - microservices repository with
09:08 - multiple applications inside then
09:10 - devspace will generate
09:12 - a configuration file for all those
09:14 - applications
09:15 - based on their dockerfiles so here at
09:17 - the top you see the list of the images
09:19 - we just have one in this case and these
09:21 - are just
09:22 - configuration for that one specific
09:25 - image
09:26 - and we also have some other
09:27 - configuration which we're gonna see
09:29 - in a bit devspace also included the dev
09:33 - space yaml
09:33 - in docker ignore because this is also
09:36 - not part of the application code itself
09:38 - so we don't want changes in this file to
09:40 - be synced
09:41 - and as well as git ignore
09:45 - dot devspace folder is ignored
09:49 - so all this was done automatically now
09:52 - we can actually
09:53 - build and deploy our application so
09:56 - first of all let's actually
09:57 - build our jar file because that's what
10:00 - we are going to execute inside the
10:02 - container
10:03 - so we have a maven project so i'm going
10:06 - to do
10:06 - maven package
10:11 - and there you go we have target folder
10:14 - with
10:15 - the jar file inside if i go back to
10:17 - terminal
10:18 - i have a mini cube cluster running
10:24 - and my cluster is currently completely
10:27 - empty
10:28 - so now we're ready to actually deploy
10:30 - our application
10:31 - however in reality when you're deploying
10:33 - your application
10:34 - you don't want to deploy your stuff in
10:36 - default namespace or maybe mess with
10:38 - namespaces
10:39 - of other teams we want to create our own
10:42 - namespace
10:43 - to test with instead of using an
10:46 - existing one
10:47 - so with devspace we can actually set so
10:50 - we can tell devspace
10:51 - hey when you deploy the application
10:53 - please use this namespace
10:55 - we can do devspace use namespace
10:59 - and let's call it my app
11:02 - and if the namespace isn't there
11:04 - devspace will actually create it
11:06 - so let's set it so basically this is
11:10 - just
11:10 - informing devspace when we deploy our
11:12 - application please create and use that
11:14 - namespace
11:16 - so now everything is configured
11:20 - and set let's finally execute devspace
11:25 - dev comment so now this is an
11:27 - interesting part
11:28 - how does dev space actually connect to
11:31 - kubernetes cluster
11:32 - to deploy stuff in it because we didn't
11:35 - define
11:36 - any configuration for connecting dev
11:38 - space to our cluster
11:40 - well dev space uses the current cube
11:42 - context
11:43 - which is the same as the one configured
11:46 - currently for cube ctl
11:48 - so right now our cube ctl is pointing to
11:50 - the mini cube
11:51 - so that's exactly where devspace will
11:53 - deploy our application
11:55 - so no additional configuration needed
11:57 - for that so let's execute this command
12:00 - and see what it will do great so let's
12:10 - see what just happened
12:12 - so first of all right here you see the
12:15 - cube context was used
12:17 - the namespace was created in the cluster
12:20 - then the image was built these are all
12:23 - the steps
12:25 - and our application was actually
12:27 - deployed as a helm
12:28 - chart into the cluster and after that
12:32 - a port forwarding was configured
12:34 - automatically
12:36 - for the application service so that we
12:38 - can access the application
12:40 - on localhost so all that was done
12:43 - automatically that's why we see the
12:46 - application on localhost 8080
12:48 - and finally devspace actually started
12:52 - syncing the local code with the code in
12:55 - the container
12:56 - and it also started streaming the logs
12:59 - from the container
13:01 - so right here we see actually the logs
13:03 - that
13:04 - container in kubernetes pod is actually
13:07 - logging
13:08 - so if the deployment didn't succeed if
13:11 - there was some error
13:12 - we would see that immediately in that
13:14 - stream so all the following logs we will
13:17 - basically be seeing them
13:18 - right here in our terminal without even
13:21 - having to go
13:22 - over to kubernetes and execute cube ctl
13:25 - commands
13:26 - so let's actually check out what got
13:28 - deployed and created
13:30 - in the cluster so first of all let's do
13:33 - cube ctl
13:34 - get namespace and right here you see
13:37 - that my
13:38 - app namespace was created and
13:41 - devspace actually sets the context
13:44 - to that namespace and this means that we
13:48 - don't have to
13:49 - add a namespace when we do getpod
13:51 - because it executes immediately
13:53 - in this my app namespace so this is our
13:57 - java application
13:58 - running we can also check the deployment
14:04 - which is right here i'll check the
14:07 - service
14:09 - my java app and now let's also check
14:13 - helm chart and this is my java app helm
14:17 - chart with the version one because this
14:18 - was the first
14:19 - deployment so to say so our application
14:22 - was deployed as a helm chart
14:24 - because as i said devspace configures
14:26 - that automatically
14:28 - so you don't need to write any
14:29 - kubernetes configuration files yourself
14:32 - and that configuration is actually right
14:35 - here
14:36 - deployment part using the information
14:39 - from docker file and right here it says
14:42 - helm
14:43 - so here you can define some other values
14:45 - if you want to
14:46 - configure additional stuff for
14:47 - application like volumes
14:49 - config map environmental variables and
14:52 - so on for example we could also set
14:54 - replicas here if we wanted to run
14:57 - multiple replicas of our application
14:59 - and so on however if you do have your
15:02 - own helm chart
15:04 - created for application or your own
15:06 - kubernetes yaml files
15:08 - you can specify them in this devspace
15:11 - yemo file instead and use them to deploy
15:14 - your application
15:15 - and this deployment is also at least
15:17 - just like the images here
15:19 - so you can configure multiple
15:21 - deployments here for additional
15:22 - containers
15:24 - again for other microservices or even
15:26 - some third-party helm charts
15:28 - databases or whatever you want to deploy
15:31 - together with your own application
15:33 - so as you see you can configure the
15:35 - whole environment
15:36 - for application to start in a fresh new
15:39 - namespace
15:40 - all in one devspace.yaml configuration
15:43 - file
15:44 - great so we have streamlined our app
15:46 - deployment from the local setup
15:49 - now let's see what happens if we change
15:51 - our code right now this is our
15:54 - application looks like
15:56 - so i'm gonna go and change
16:00 - index.html so right here let's say
16:04 - the new version of the app
16:07 - deployed and i'm going to save it and
16:11 - as soon as i saved you saw that
16:13 - container was
16:14 - restarted right here and
16:17 - the application reloaded so if i go back
16:20 - to
16:20 - the browser and refresh there you go
16:24 - you see the new version of the
16:26 - application
16:27 - so basically every time we make changes
16:30 - to
16:30 - any of the files that we copied into the
16:33 - container that we didn't exclude
16:35 - from the code the container will reload
16:38 - inside the pod
16:39 - right here you see the pod wasn't
16:41 - actually recreated
16:43 - it's the same pod but the container
16:45 - inside got
16:46 - restarted so within seconds we basically
16:50 - have our changes
16:51 - propagated inside kubernetes without
16:54 - going through the whole
16:55 - pipeline and building process which can
16:58 - really make your development process
17:00 - efficient especially when you're trying
17:03 - to test
17:04 - small minor changes in your application
17:07 - in the same way we can also
17:08 - change java code
17:12 - add another lock here for example then
17:14 - rebuild the jar file because that's how
17:16 - java code is packaged
17:22 - and there you go you see that container
17:24 - got restarted again
17:25 - and right here we have the new logline
17:28 - if you want to save yourself rebuilding
17:30 - the jar file you can also configure
17:32 - devspace
17:33 - to auto-rebuild the jar file whenever
17:35 - you make
17:36 - changes in your java code and one more
17:39 - thing that devspace
17:40 - gives us in addition to all of this is
17:43 - if i
17:44 - scroll all the way up right here you see
17:46 - that dev space
17:47 - ui actually also started in the
17:49 - background
17:50 - and this is the address that we can
17:53 - check out right now
17:55 - so here we see my java app and here you
17:58 - have
17:58 - cube context so if you had multiple
18:02 - kubernetes clusters that you were
18:04 - deploying your application to
18:05 - basically you can choose between them
18:07 - and for that
18:09 - cube context then you have the name
18:10 - spaces we are in my app currently
18:13 - and here you also have the list of all
18:15 - the applications that are deployed
18:17 - and managed by devspace so if i click
18:20 - inside here this is the pod name
18:22 - actually
18:23 - i can also see all the logs
18:26 - right here
18:30 - so as you see this tool basically makes
18:34 - the development process
18:35 - more efficient but also gives you easy
18:38 - ways
18:39 - to interact with the deployed container
18:42 - or pod inside kubernetes
18:44 - with shortcut commands for example so
18:47 - that's basically how devspace works now
18:50 - you may be wondering
18:51 - what about the cluster state itself what
18:54 - happens if every developer
18:56 - would push their changes and stuff into
18:58 - it all the time
18:59 - to test their changes developers would
19:02 - mess up the cluster
19:03 - or interfere with other resources
19:06 - running on the cluster
19:07 - or how do you manage permissions that
19:09 - you give to developers
19:10 - to actually test this in kubernetes
19:12 - cluster now they're actually
19:15 - really good solutions for that specific
19:18 - problem
19:19 - and this will be the topic of our next
19:21 - video
19:22 - in the devops tool of the month series
19:25 - so make sure to subscribe and stay tuned
19:28 - if you want to learn more about that too
19:31 - as always
19:32 - thanks for watching and see you in the
19:34 - next video

Cleaned transcript:

in this video we're gonna look at a tool which makes it easier for software developers to develop and deploy to kubernetes which is called devspace this is the first video of the new series called devops tool of the month each month you will get to know one new useful tool in devops space so first i will explain what problem devspace solves how it works and then we will see it in action with a simple demo imagine you are in a developer team working on a simple microservices application and maybe you have one devops guy in the team or maybe a separate devops team who knows kubernetes and helps everyone in the team to write the kubernetes yml config files configures the cluster deploys database applications in it and so on so you create a bug fix branch for one of the microservices and start making changes while you are making these changes you want to test in combination with other microservices but you want to test them on the real kubernetes development environment instead of just locally using docker compose or mini cube so that you don't have any surprises once you deploy that on the kubernetes environment because these are two different environments so normal workflow for you would be you test it locally with docker compose or minicube make sure it works create a pull request your branch then is merged into master a ci cd pipeline is triggered that tests the changes builds the new image and deploys it into kubernetes cluster on dev environment now you can test it on dev to make sure it works there the same way it worked locally and this is a long process to be able to test your changes on kubernetes dev environment so what if instead every change you make locally would be immediately deployed into kubernetes cluster so you can test your changes without having to know kubernetes or cube ctl or needing help from the devops team and the tool that lets you do exactly that is dev space so how does dev space work using a simple devspace configuration file in your application code devspace will automatically build your application into an image using your docker file and deploy it into the cluster but on top of that every time you make changes devspace will hot reload them by automatically recreating and restarting the container within the pod so basically syncing the changes you have locally with the container that is running inside kubernetes so this will be a development mode in which you can test every code change immediately but devspace has other use cases and features when for example you just want to deploy the application without the sync and push the image to your private docker repository etc what's also great about devspace is that it gives you shortcut commands to get the container terminal or logs without checking the pot id and namespace etc so let's jump into a demo to show you how to set up the development mode with hot reloading in four simple steps and also show you how this can make the development process much more efficient when working with kubernetes i have a small java project you can find the link in the video description and an empty kubernetes cluster with cubectl already connected for this demo i'm going to use minicube but it could be any kubernetes cluster on aws or any other platform so our steps will be to install devspace we're going to create a docker file initiate our project with devspace and finally start the dev mode so first of all we're gonna install devspace locally installation is very simple you have multiple options described in the official guide i will install it globally using npm so with npm install minus g for global and dev space and when i execute devspace command it will finish the installation and i have devspace available as a comment now the second step is to create a docker file in our project that devspace will use so i'm going to open my project which is in visual studio code and this is a very simple java application basically i just have one application.java file which just basically starts the application and i have one index.html so that we can see a ui to it when we deploy it so these are the two files that i have in here again you can find the link in the description and this is our docker file now usually when you build image from java you want your jar to be inside the image which you can then execute now how dev space works is that it syncs your local code and code inside the container image and checks for any code changes so that it can perform the hot reload so devspace will build the image with all our code inside and sync it and this will happen out of the box without any additional configuration from our site however some of these folders and files here are actually not really part of the code itself like the application code itself so we can easily just exclude them using docker ignore file so let's create a docker ignore file which is actually very similar to git ignore where we can just list all the folders and all the files that we want to exclude when we're building a docker image i'm gonna include dot idea which is actually from intellij because i had this project open intellij so we're gonna exclude that could be also any other editorspecific folder that gets generated we can also ignore the ignore files themselves so this will basically exclude all the unnecessary stuff which are not part of the application code itself from the build docker image so let's save that and we have our project ready for dev space so now we can actually initiate the project using simple devspace init command so first of all let's open a terminal window and execute dev space in it here and let's see what happens the first one is the docker file that devspace will use it has detected that our project has already a docker file and suggests to use it so we're going to go with this option as a next step it asks us to choose container image repository i'm already logged into docker hub where i have my private docker repository so i can basically just choose that because as i mentioned with dev space you can actually push the images also to the repository as part of the process of rebuilding the docker image when you make changes so i'm going to choose that one i can also choose image name on dockerhub let's actually leave it as is and finally devspace is giving us an option to configure how our application will be deployed inside the kubernetes cluster and we have four options here it could be deployed as helm chart so if you have helm chart in the project that your application is uses you can configure that or if you have a remote help chart we can also specify that one as well as just kubernetes yaml files configuration files like deployment.yml however if you do not have any kubernetes yaml files or helm charts for your project inside your application you can actually go with the first one which is component chart and this means that devspace will actually create a helm chart for your application and deploy it inside kubernetes cluster as a helm chart so basically you don't have to write any configuration files or helm charts all these will be taken care of by dev space so we're going to go with this easy option and choose it and we have initialized dev space in our project so let's actually see what happened or what devspace did in our project and as you see devspace automatically generated a devspace.eml file based on our docker file that we provided and note that if this was a microservices repository with multiple applications inside then devspace will generate a configuration file for all those applications based on their dockerfiles so here at the top you see the list of the images we just have one in this case and these are just configuration for that one specific image and we also have some other configuration which we're gonna see in a bit devspace also included the dev space yaml in docker ignore because this is also not part of the application code itself so we don't want changes in this file to be synced and as well as git ignore dot devspace folder is ignored so all this was done automatically now we can actually build and deploy our application so first of all let's actually build our jar file because that's what we are going to execute inside the container so we have a maven project so i'm going to do maven package and there you go we have target folder with the jar file inside if i go back to terminal i have a mini cube cluster running and my cluster is currently completely empty so now we're ready to actually deploy our application however in reality when you're deploying your application you don't want to deploy your stuff in default namespace or maybe mess with namespaces of other teams we want to create our own namespace to test with instead of using an existing one so with devspace we can actually set so we can tell devspace hey when you deploy the application please use this namespace we can do devspace use namespace and let's call it my app and if the namespace isn't there devspace will actually create it so let's set it so basically this is just informing devspace when we deploy our application please create and use that namespace so now everything is configured and set let's finally execute devspace dev comment so now this is an interesting part how does dev space actually connect to kubernetes cluster to deploy stuff in it because we didn't define any configuration for connecting dev space to our cluster well dev space uses the current cube context which is the same as the one configured currently for cube ctl so right now our cube ctl is pointing to the mini cube so that's exactly where devspace will deploy our application so no additional configuration needed for that so let's execute this command and see what it will do great so let's see what just happened so first of all right here you see the cube context was used the namespace was created in the cluster then the image was built these are all the steps and our application was actually deployed as a helm chart into the cluster and after that a port forwarding was configured automatically for the application service so that we can access the application on localhost so all that was done automatically that's why we see the application on localhost 8080 and finally devspace actually started syncing the local code with the code in the container and it also started streaming the logs from the container so right here we see actually the logs that container in kubernetes pod is actually logging so if the deployment didn't succeed if there was some error we would see that immediately in that stream so all the following logs we will basically be seeing them right here in our terminal without even having to go over to kubernetes and execute cube ctl commands so let's actually check out what got deployed and created in the cluster so first of all let's do cube ctl get namespace and right here you see that my app namespace was created and devspace actually sets the context to that namespace and this means that we don't have to add a namespace when we do getpod because it executes immediately in this my app namespace so this is our java application running we can also check the deployment which is right here i'll check the service my java app and now let's also check helm chart and this is my java app helm chart with the version one because this was the first deployment so to say so our application was deployed as a helm chart because as i said devspace configures that automatically so you don't need to write any kubernetes configuration files yourself and that configuration is actually right here deployment part using the information from docker file and right here it says helm so here you can define some other values if you want to configure additional stuff for application like volumes config map environmental variables and so on for example we could also set replicas here if we wanted to run multiple replicas of our application and so on however if you do have your own helm chart created for application or your own kubernetes yaml files you can specify them in this devspace yemo file instead and use them to deploy your application and this deployment is also at least just like the images here so you can configure multiple deployments here for additional containers again for other microservices or even some thirdparty helm charts databases or whatever you want to deploy together with your own application so as you see you can configure the whole environment for application to start in a fresh new namespace all in one devspace.yaml configuration file great so we have streamlined our app deployment from the local setup now let's see what happens if we change our code right now this is our application looks like so i'm gonna go and change index.html so right here let's say the new version of the app deployed and i'm going to save it and as soon as i saved you saw that container was restarted right here and the application reloaded so if i go back to the browser and refresh there you go you see the new version of the application so basically every time we make changes to any of the files that we copied into the container that we didn't exclude from the code the container will reload inside the pod right here you see the pod wasn't actually recreated it's the same pod but the container inside got restarted so within seconds we basically have our changes propagated inside kubernetes without going through the whole pipeline and building process which can really make your development process efficient especially when you're trying to test small minor changes in your application in the same way we can also change java code add another lock here for example then rebuild the jar file because that's how java code is packaged and there you go you see that container got restarted again and right here we have the new logline if you want to save yourself rebuilding the jar file you can also configure devspace to autorebuild the jar file whenever you make changes in your java code and one more thing that devspace gives us in addition to all of this is if i scroll all the way up right here you see that dev space ui actually also started in the background and this is the address that we can check out right now so here we see my java app and here you have cube context so if you had multiple kubernetes clusters that you were deploying your application to basically you can choose between them and for that cube context then you have the name spaces we are in my app currently and here you also have the list of all the applications that are deployed and managed by devspace so if i click inside here this is the pod name actually i can also see all the logs right here so as you see this tool basically makes the development process more efficient but also gives you easy ways to interact with the deployed container or pod inside kubernetes with shortcut commands for example so that's basically how devspace works now you may be wondering what about the cluster state itself what happens if every developer would push their changes and stuff into it all the time to test their changes developers would mess up the cluster or interfere with other resources running on the cluster or how do you manage permissions that you give to developers to actually test this in kubernetes cluster now they're actually really good solutions for that specific problem and this will be the topic of our next video in the devops tool of the month series so make sure to subscribe and stay tuned if you want to learn more about that too as always thanks for watching and see you in the next video
