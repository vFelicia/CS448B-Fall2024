With timestamps:

00:00 - In this video we're going to talk about two 
popular roles in software engineering: "DevOps"  
00:06 - and "Cloud Engineer". Now there is a lot of mix up 
of these two roles and many people, many companies  
00:12 - often use them interchangeably. They mix the tasks 
and responsibilities of these two very often.  
00:18 - There are for example plenty of job descriptions 
for DevOps Cloud Engineer or Cloud DevOps  
00:24 - Engineer, which would naturally make you think 
that they are the same role. But then why would  
00:29 - you have two names for the same role? And that's 
exactly what I'm going to discuss and clarify  
00:34 - in this video. So first of all, let's start by 
saying that DevOps in Cloud Engineer are actually  
00:40 - two different roles with different purposes and 
objectives. But the reason why people mix them  
00:47 - up and even use them interchangeably is, because 
they often have many overlapping responsibilities  
00:53 - and skills and also because for relatively 
new roles, companies sometimes have hard time  
01:00 - defining the boundaries between roles. Like when 
a software developer should program full stack web  
01:05 - application, do operations, monitoring, build the 
whole CI/CD pipeline, fix the company's Wi-Fi and  
01:11 - change the light bulbs in the office. So basically 
just putting anything and everything on one person  
01:17 - or one job description. So in this video we're 
gonna define those boundaries and see what a  
01:22 - Cloud engineer does, what DevOps engineer does, 
what are the tasks they both do, so the overlaps  
01:29 - between these roles and what is, that really 
differentiates them and draws a clear line between  
01:35 - the two. And of course since we are on TechWorld 
with Nana channel we're gonna see all of that with  
01:42 - actual practical examples, not just some generic 
explanations. But first let me get one thing out  
01:49 - of the way, which is that DevOps engineer was 
actually not meant as a separate role originally.  
01:54 - DevOps is a concept and a set of principles and 
different engineer roles like software developer,  
02:01 - IT operation, server administrator and so on were 
supposed to implement those DevOps practices and  
02:08 - principles. So that was the original idea of 
DevOps. However the reality now looks different  
02:13 - with hundreds of thousands of DevOps Engineer 
jobs, which means it actually evolved into its  
02:20 - own engineering role, which I personally think 
makes total sense. If you want to know why and  
02:26 - all the details around it, you can watch my videos 
on DevOps engineering specifically where I explain  
02:31 - all this with the whole evolution of this role 
and so on. Okay now that we've established that  
02:38 - DevOps engineer is its own role, let's compare 
the two and let's start with the objectives.
02:48 - DevOps Engineer's main objective is to make the 
process of releasing software fast, efficient,  
02:55 - without bugs or issues and they achieve 
that by automating this whole process. So  
03:02 - instead of manual steps of approving the 
release, testing the application changes,  
03:06 - validating that everything works or 
making sure the security is configured  
03:11 - etc. So the DevOps engineers automate this whole 
process so that it's faster without manual human  
03:19 - interaction points. And I actually have a detailed 
video on that if you want to see exactly what  
03:25 - DevOps Engineers tasks and responsibilities are, 
which I will also link in this video. But in a  
03:33 - nutshell that's an objective of a DevOps Engineer. 
On the other hand, the cloud engineer's main  
03:39 - objective is to create and manage infrastructure 
on cloud, so that applications that companies  
03:47 - developing can run on it. Now you're probably 
thinking create and manage cloud infrastructure  
03:55 - that sounds very vague and not really clear and 
specific. So let's start from the very beginning.
04:05 - First of all we have hundreds of cloud platforms 
which are basically companies who went and bought  
04:12 - a whole bunch of computers, server machines, wired 
up the whole thing, configured the networking  
04:18 - etc., built the data centers with all those 
machines in different locations and other  
04:23 - companies can now rent those servers for the 
fraction of the cost. At least that's how it  
04:29 - started, with a simple use case to be able to 
rent a server without having to do the whole  
04:36 - infrastructure setup yourself, which is a huge 
overhead if you only need just a few servers.  
04:42 - But over time that evolved into something much 
more powerful and much more complex. Now we  
04:48 - have Cloud platforms that offer way more than 
just compute resources, like renting a server.  
04:54 - You can now get not only your whole infrastructure 
on cloud, but also a bunch of services on  
05:00 - top of that. Like your application needs 
database services, cache storage backup,  
05:05 - maybe you want to run the whole application setup 
in a kubernetes cluster, you want to store the  
05:11 - docker images on cloud, build the whole CI/CD 
pipeline even and you want to do it in multiple  
05:17 - geographic regions. And when you have hundreds 
of employees you also want to manage access to  
05:23 - your cloud resources users and permissions and 
so on. In cloud platforms now offer all that  
05:30 - through their cloud services and we have tons 
of small local cloud platforms with maybe one,  
05:36 - two data centers, who only operate in one country 
or region, then we have some larger ones and the  
05:42 - gigantic ones like AWS, Google Cloud, Azure. These 
three are currently the biggest cloud platforms,  
05:50 - with AWS being by far the most highly used one. 
So now whether you are a small startup or a large  
05:58 - company, you can create your entire setup on 
a cloud platform, without having to own any  
06:04 - infrastructure and often without having to install 
and configure things from scratch, like set up a  
06:10 - Docker image registry or installing a kubernetes 
cluster on servers, because this type of things  
06:16 - are often provided as managed ready services for 
you to use by those cloud providers. So let's take  
06:25 - AWS as an example. So with AWS you get tons of 
services that are already configured on top of the  
06:32 - actual underlying physical infrastructure. AWS has 
services not only for software development, but  
06:40 - also for machine learning, big data processing, 
mobile development. It has many types of storage  
06:45 - services based on speed, size, durability. So 
you have literally everything on there. But  
06:52 - not only that, you also have an option to create 
and manage your own virtual servers and install  
06:58 - things on that yourself or you can let AWS manage 
the underlying infrastructure completely for you,  
07:05 - by using their higher level managed services. 
Or even the combination of both. So you have  
07:12 - all these options, which is very powerful and it 
makes the cloud platforms much more than just a  
07:18 - place where you can rent your infrastructure. 
But with so many options and so many services  
07:24 - also comes the complexity, which means, sure, now 
you don't have to know how to set up an entire  
07:31 - registry and set up database with backups 
from scratch or manager storage yourself,  
07:36 - you can use the cloud services directly for those 
things. But now you need to learn how to use those  
07:43 - services and integrate them or plug them in into 
your applications. And those services are specific  
07:49 - to the cloud platform that provides them. So 
you need to learn how to use Kubernetes cluster  
07:54 - service on AWS which is called EKS. Or you have 
to learn how to use and manage an image registry  
08:01 - on AWS called ECR. If you instead go for Azure or 
Google cloud or you move away from AWS to one of  
08:09 - those platforms, now you have to learn how to use 
the equivalent service on Azure or Google Cloud,  
08:14 - because they work a little bit differently. 
And these platforms provide the same services,  
08:19 - but they work differently and have different 
configuration options. So you have to learn  
08:24 - all that specific to the platform. The same way 
you need to set up the underlying infrastructure,  
08:30 - servers, firewall configuration, proxies for 
your application, security within your network,  
08:36 - etc. So you need to learn AWS services, 
that allow all this configuration.
08:45 - And when you use those services, you don't just 
configure them so that your application runs on  
08:51 - it, everything works and that's it. That's 
actually not enough. You need to actually  
08:55 - configure it reliably and securely, 
because everything may be working fine,  
09:00 - but you get millions of users visiting your 
application and now your whole setup crashes,  
09:06 - because your application setup was not designed 
for such a high load. Or even more important,  
09:12 - someone hacks into your setup, wiping out your 
data or completely messing up your whole setup.  
09:18 - Or a new developer accidentally misconfigures 
something and ruins your AWS infrastructure  
09:25 - setup. So knowing this cloud specific services 
and how to configure them reliably, securely,  
09:31 - in a proper way for your applications to 
run smoothly, these are exactly the tasks  
09:38 - and responsibilities of a Cloud 
Engineer. Now before moving on,  
09:42 - I want to give a shout out to JetBrains Space 
and TeamCity, who is a sponsor of this video.  
09:47 - While Space is a complete software development 
platform, containing git hosting, code reviews,  
09:53 - CI/CD issues and more, TeamCity offers a flexible 
build pipeline. Using Git flow and code reviews  
10:01 - together with Space and TeamCity means changes to 
your application code base are always reviewed.  
10:08 - And thanks to Safe Merge, you'll always have a 
main branch that compiles and can be deployed.  
10:13 - So the combination of these tools is powerful 
and the native integration will save you time  
10:19 - and effort by ensuring you have a complete 
and well integrated flow, with a unified UI.  
10:24 - Getting started is easy and free so be sure 
to check it out in more detail. As always,  
10:30 - I'll put the links in the video description. 
And now let's continue with the video.  
10:36 - I mentioned that cloud platforms are different and 
their services need to be configured differently.  
10:42 - So you need a specific knowledge of that specific 
cloud provider to properly configure your  
10:48 - infrastructure setup there. This means as a Cloud 
Engineer, you usually specialize in one cloud  
10:54 - platform and learn how to use their services. So 
you're kind of an expert in that cloud platform.  
11:01 - That's why we usually have AWS Cloud Engineer, 
Azure Cloud Engineer specializations. Now going  
11:09 - back to the initial definition of creating and 
managing cloud infrastructure, what would be some  
11:15 - example tasks of an AWS Cloud Engineer, as part 
of creating and managing AWS cloud infrastructure.  
11:23 - Well let's say a company is developing an 
application or multiple applications, which  
11:28 - should run on cloud. So AWS Cloud Engineer's job 
is to decide, how to create an AWS infrastructure  
11:35 - to run those applications, which AWS services 
to use, should they rent servers and directly  
11:42 - configure stuff on them or use managed services 
instead, which cost more but are easier to  
11:48 - configure and manage. Like install and configure 
cluster database on servers or use the RDS service  
11:55 - from AWS where all of that is already configured. 
Then we have questions like, which storage to use  
12:01 - and how to configure that. Maybe your application 
needs different types of storages, so how to map  
12:06 - those needs to AWS storage types. How to do 
data backups, so in case of disaster data can  
12:14 - be restored. Make sure the applications and access 
to the whole AWS infrastructure is secure. Because  
12:20 - of the complexity of such large cloud platforms 
and so many options, it's powerful, but complex.  
12:27 - So there are lots of ways of misconfiguring 
things, so it's not that straightforward. That's  
12:33 - why good Cloud Engineers who are able to configure 
things correctly with best practices, security,  
12:40 - etc. are so valuable. And since Cloud 
Engineer has knowledge of all AWS Services,  
12:45 - they know how to configure what company needs 
with those services. So they can directly map  
12:52 - the company's business needs and requirements 
to the cloud setup. Like if a company needs  
12:58 - geographical distribution all over the world, 
because they have users all over the globe,  
13:03 - Cloud Engineer would help configure that by using 
the right services and configuring them correctly.  
13:10 - Another example would be, if a company has a 
microservices application to deploy on cloud.  
13:15 - Of course you need expertise in how to configure 
the cloud infrastructure to make sure a complex  
13:22 - microservices application can run on it with 
production best practices, like redundancy,  
13:28 - reliability security, data backup and 
restore mechanism. Again that's where the  
13:33 - Cloud Engineering skills and expertise is needed. 
Another interesting use case is as we all know  
13:40 - more and more companies are moving to cloud, 
but many of them aren't starting from scratch,  
13:45 - but rather they have an existing on-premise 
infrastructure and services so they want to  
13:51 - migrate that to cloud. And building something 
from scratch on cloud is often way easier,  
13:57 - than migrating an existing infrastructure 
to it. Many companies are also using hybrid  
14:02 - cloud. So they want to migrate only parts 
of their local infrastructure to cloud,  
14:07 - which means they need integrations between local 
and the cloud infrastructure. Many companies also  
14:13 - do multi-cloud, which means they want to use 
AWS and Azure, maybe for redundancy like if  
14:18 - something happens to one AWS data center you have 
a fallback. Or just in order to take advantage  
14:24 - of strength of different cloud providers and 
what they are good at, like they want to use  
14:30 - AWS computing resources, but company has 
lots of internal Microsoft applications,  
14:35 - so they want to leverage Azure Cloud for that. So 
with multi-cloud again services and applications  
14:41 - need to be connected across cloud platforms 
and those are all very challenging tasks. So  
14:49 - in those cases Cloud Engineer would develop the 
strategy for migrating and help successfully  
14:54 - migrate to cloud and create integrations in hybrid 
or multi-cloud environments, where services need  
15:01 - to communicate securely and reliably across those 
environments. Another example is cost tracking,  
15:08 - because when you use many resources, many cloud 
services, combine them in various ways, you need  
15:15 - to watch out for the cost or at least be able to 
predict, how much it will cost. And when you have  
15:22 - complex setup with geographic distributions using 
many cloud provided services for convenience, it  
15:29 - can get pretty expensive. And that's again where 
Cloud Engineers tasks and responsibilities are,  
15:35 - to make sure that company doesn't have huge 
cost overruns on their cloud infrastructure.  
15:41 - Cloud Engineers would also monitor the configured 
infrastructure, to detect any attempts of hacking  
15:48 - into the systems. Maybe the cost is spiking 
because some resources were misconfigured.  
15:52 - Are service running fine, do they have enough 
resources to handle the traffic and so on.
16:00 - And finally cloud services and infrastructure 
can get very complex, very fast. Which means  
16:07 - you don't want to be managing and configuring 
or creating things in a complex cloud setup  
16:11 - manually. You don't want people joining 
your company or your cloud team wondering,  
16:16 - how the whole infrastructure was created, 
how it's configured, what's configured,  
16:20 - where and why. So you need some transparency 
of your infrastructure setups as well. And also  
16:26 - making sure when someone joins in the cloud 
engineering team they can easily get on board  
16:31 - and not accidentally misconfigure stuff or ruin 
the existing setup and so on. And in case things  
16:37 - break, in a cloud setup you want to be able to 
replicate the same cloud configuration again  
16:42 - and recover the setup quickly without having to 
remember exactly what you did to configure the  
16:48 - current setup and what exactly needs to be done. 
And that's where infrastructure as code comes in.  
16:53 - So Cloud Engineers would automate a lot of 
their own tasks for infrastructure creation  
16:59 - and maintenance using infrastructure as code. 
Because when you have really complex setups,  
17:05 - after some point you can't possibly manually 
manage that anymore. So you will 100 percent  
17:11 - need to have some automation. Now going back to 
the original comparison between DevOps Engineer  
17:17 - and Cloud Engineer to summarize the differences, 
DevOps Engineers automate software release  
17:23 - process to make it faster, while Cloud Engineers 
automate cloud infrastructure and management to  
17:30 - make companies cloud infrastructure reliable, 
fast and secure easily recoverable and so on.  
17:36 - So obviously two very different objectives. But 
here is the overlap. Part of software release is  
17:44 - its deployment on servers, on infrastructure. So 
if companies deploying its applications to cloud,  
17:51 - DevOps Engineers responsibility naturally 
becomes to make sure the cloud infrastructure  
17:57 - is configured and managed properly to allow 
for fast deployment, for automated testing,  
18:03 - validating whether deployment works with blue 
green or canary deployment strategies and so  
18:09 - on. So DevOps Engineer's job would extend 
to managing the underlying infrastructure,  
18:14 - monitoring that is working fine so the 
applications can be deployed and run successfully,  
18:20 - making sure that it's secure, it's not running 
out of resources, that it's geographically  
18:24 - distributed and so on If application is 
running in Kubernetes cluster managed by AWS,  
18:30 - DevOps engineer would make sure the cluster is 
running fine, it's correctly configured with  
18:36 - security in place and so on. And again DevOps is 
about automating things to be fast and efficient,  
18:42 - so DevOps Engineers would also use infrastructures 
code tools to automate infrastructure management  
18:48 - monitoring etc., but only the parts that directly 
affect the release process of the application.  
18:55 - So as you see the cloud infrastructure management 
that directly affects how fast the application can  
19:02 - be released, deployed, recovered and so on is also 
part of DevOps Engineers tasks. And that's where  
19:09 - the main overlap happens. So from this perspective 
it seems like DevOps kind of includes some of the  
19:15 - Cloud Engineers tasks. So companies usually just 
hire DevOps Cloud Engineer who does everything.  
19:21 - But logically it's not possible for one role 
to do everything from release management,  
19:26 - to infrastructure management, to backup and 
restore management, cost oversight and so on.  
19:32 - So we have additional Cloud Engineer role, that is 
dedicated to cloud services and managing them and  
19:39 - should actually be a help for DevOps Engineer 
to help each other in their own objectives.  
19:45 - So the objective of Cloud Engineer, which is 
reliable secure infrastructure also affects  
19:51 - the DevOps Engineer's objective 
of releasing applications fast,  
19:55 - because they have to run on that infrastructure. 
Which means Cloud Engineer takes care of managing  
20:02 - infrastructure and makes sure it runs reliably, 
so DevOps engineer can build automated processes  
20:08 - on top of that to release the applications and 
run them on that reliable properly configured  
20:14 - cloud infrastructure. And you can even use 
the controls that Cloud Engineer configured  
20:19 - to monitor the application to do the automated 
validation, implement deployment strategies  
20:24 - and so on. So that's basically the comparison 
between the two. I hope I was able to give you  
20:30 - some clarity around these two roles and was 
able to answer your questions around them.  
20:34 - Let me know in the comments whether you work 
in any of these two roles and whether you see  
20:39 - the confusion and the mix-up of those two and 
in which form. I'm sure the other viewers will  
20:44 - also be interested to know. And with that thank 
you for watching and see you in the next video!

Cleaned transcript:

In this video we're going to talk about two popular roles in software engineering "DevOps" and "Cloud Engineer". Now there is a lot of mix up of these two roles and many people, many companies often use them interchangeably. They mix the tasks and responsibilities of these two very often. There are for example plenty of job descriptions for DevOps Cloud Engineer or Cloud DevOps Engineer, which would naturally make you think that they are the same role. But then why would you have two names for the same role? And that's exactly what I'm going to discuss and clarify in this video. So first of all, let's start by saying that DevOps in Cloud Engineer are actually two different roles with different purposes and objectives. But the reason why people mix them up and even use them interchangeably is, because they often have many overlapping responsibilities and skills and also because for relatively new roles, companies sometimes have hard time defining the boundaries between roles. Like when a software developer should program full stack web application, do operations, monitoring, build the whole CI/CD pipeline, fix the company's WiFi and change the light bulbs in the office. So basically just putting anything and everything on one person or one job description. So in this video we're gonna define those boundaries and see what a Cloud engineer does, what DevOps engineer does, what are the tasks they both do, so the overlaps between these roles and what is, that really differentiates them and draws a clear line between the two. And of course since we are on TechWorld with Nana channel we're gonna see all of that with actual practical examples, not just some generic explanations. But first let me get one thing out of the way, which is that DevOps engineer was actually not meant as a separate role originally. DevOps is a concept and a set of principles and different engineer roles like software developer, IT operation, server administrator and so on were supposed to implement those DevOps practices and principles. So that was the original idea of DevOps. However the reality now looks different with hundreds of thousands of DevOps Engineer jobs, which means it actually evolved into its own engineering role, which I personally think makes total sense. If you want to know why and all the details around it, you can watch my videos on DevOps engineering specifically where I explain all this with the whole evolution of this role and so on. Okay now that we've established that DevOps engineer is its own role, let's compare the two and let's start with the objectives. DevOps Engineer's main objective is to make the process of releasing software fast, efficient, without bugs or issues and they achieve that by automating this whole process. So instead of manual steps of approving the release, testing the application changes, validating that everything works or making sure the security is configured etc. So the DevOps engineers automate this whole process so that it's faster without manual human interaction points. And I actually have a detailed video on that if you want to see exactly what DevOps Engineers tasks and responsibilities are, which I will also link in this video. But in a nutshell that's an objective of a DevOps Engineer. On the other hand, the cloud engineer's main objective is to create and manage infrastructure on cloud, so that applications that companies developing can run on it. Now you're probably thinking create and manage cloud infrastructure that sounds very vague and not really clear and specific. So let's start from the very beginning. First of all we have hundreds of cloud platforms which are basically companies who went and bought a whole bunch of computers, server machines, wired up the whole thing, configured the networking etc., built the data centers with all those machines in different locations and other companies can now rent those servers for the fraction of the cost. At least that's how it started, with a simple use case to be able to rent a server without having to do the whole infrastructure setup yourself, which is a huge overhead if you only need just a few servers. But over time that evolved into something much more powerful and much more complex. Now we have Cloud platforms that offer way more than just compute resources, like renting a server. You can now get not only your whole infrastructure on cloud, but also a bunch of services on top of that. Like your application needs database services, cache storage backup, maybe you want to run the whole application setup in a kubernetes cluster, you want to store the docker images on cloud, build the whole CI/CD pipeline even and you want to do it in multiple geographic regions. And when you have hundreds of employees you also want to manage access to your cloud resources users and permissions and so on. In cloud platforms now offer all that through their cloud services and we have tons of small local cloud platforms with maybe one, two data centers, who only operate in one country or region, then we have some larger ones and the gigantic ones like AWS, Google Cloud, Azure. These three are currently the biggest cloud platforms, with AWS being by far the most highly used one. So now whether you are a small startup or a large company, you can create your entire setup on a cloud platform, without having to own any infrastructure and often without having to install and configure things from scratch, like set up a Docker image registry or installing a kubernetes cluster on servers, because this type of things are often provided as managed ready services for you to use by those cloud providers. So let's take AWS as an example. So with AWS you get tons of services that are already configured on top of the actual underlying physical infrastructure. AWS has services not only for software development, but also for machine learning, big data processing, mobile development. It has many types of storage services based on speed, size, durability. So you have literally everything on there. But not only that, you also have an option to create and manage your own virtual servers and install things on that yourself or you can let AWS manage the underlying infrastructure completely for you, by using their higher level managed services. Or even the combination of both. So you have all these options, which is very powerful and it makes the cloud platforms much more than just a place where you can rent your infrastructure. But with so many options and so many services also comes the complexity, which means, sure, now you don't have to know how to set up an entire registry and set up database with backups from scratch or manager storage yourself, you can use the cloud services directly for those things. But now you need to learn how to use those services and integrate them or plug them in into your applications. And those services are specific to the cloud platform that provides them. So you need to learn how to use Kubernetes cluster service on AWS which is called EKS. Or you have to learn how to use and manage an image registry on AWS called ECR. If you instead go for Azure or Google cloud or you move away from AWS to one of those platforms, now you have to learn how to use the equivalent service on Azure or Google Cloud, because they work a little bit differently. And these platforms provide the same services, but they work differently and have different configuration options. So you have to learn all that specific to the platform. The same way you need to set up the underlying infrastructure, servers, firewall configuration, proxies for your application, security within your network, etc. So you need to learn AWS services, that allow all this configuration. And when you use those services, you don't just configure them so that your application runs on it, everything works and that's it. That's actually not enough. You need to actually configure it reliably and securely, because everything may be working fine, but you get millions of users visiting your application and now your whole setup crashes, because your application setup was not designed for such a high load. Or even more important, someone hacks into your setup, wiping out your data or completely messing up your whole setup. Or a new developer accidentally misconfigures something and ruins your AWS infrastructure setup. So knowing this cloud specific services and how to configure them reliably, securely, in a proper way for your applications to run smoothly, these are exactly the tasks and responsibilities of a Cloud Engineer. Now before moving on, I want to give a shout out to JetBrains Space and TeamCity, who is a sponsor of this video. While Space is a complete software development platform, containing git hosting, code reviews, CI/CD issues and more, TeamCity offers a flexible build pipeline. Using Git flow and code reviews together with Space and TeamCity means changes to your application code base are always reviewed. And thanks to Safe Merge, you'll always have a main branch that compiles and can be deployed. So the combination of these tools is powerful and the native integration will save you time and effort by ensuring you have a complete and well integrated flow, with a unified UI. Getting started is easy and free so be sure to check it out in more detail. As always, I'll put the links in the video description. And now let's continue with the video. I mentioned that cloud platforms are different and their services need to be configured differently. So you need a specific knowledge of that specific cloud provider to properly configure your infrastructure setup there. This means as a Cloud Engineer, you usually specialize in one cloud platform and learn how to use their services. So you're kind of an expert in that cloud platform. That's why we usually have AWS Cloud Engineer, Azure Cloud Engineer specializations. Now going back to the initial definition of creating and managing cloud infrastructure, what would be some example tasks of an AWS Cloud Engineer, as part of creating and managing AWS cloud infrastructure. Well let's say a company is developing an application or multiple applications, which should run on cloud. So AWS Cloud Engineer's job is to decide, how to create an AWS infrastructure to run those applications, which AWS services to use, should they rent servers and directly configure stuff on them or use managed services instead, which cost more but are easier to configure and manage. Like install and configure cluster database on servers or use the RDS service from AWS where all of that is already configured. Then we have questions like, which storage to use and how to configure that. Maybe your application needs different types of storages, so how to map those needs to AWS storage types. How to do data backups, so in case of disaster data can be restored. Make sure the applications and access to the whole AWS infrastructure is secure. Because of the complexity of such large cloud platforms and so many options, it's powerful, but complex. So there are lots of ways of misconfiguring things, so it's not that straightforward. That's why good Cloud Engineers who are able to configure things correctly with best practices, security, etc. are so valuable. And since Cloud Engineer has knowledge of all AWS Services, they know how to configure what company needs with those services. So they can directly map the company's business needs and requirements to the cloud setup. Like if a company needs geographical distribution all over the world, because they have users all over the globe, Cloud Engineer would help configure that by using the right services and configuring them correctly. Another example would be, if a company has a microservices application to deploy on cloud. Of course you need expertise in how to configure the cloud infrastructure to make sure a complex microservices application can run on it with production best practices, like redundancy, reliability security, data backup and restore mechanism. Again that's where the Cloud Engineering skills and expertise is needed. Another interesting use case is as we all know more and more companies are moving to cloud, but many of them aren't starting from scratch, but rather they have an existing onpremise infrastructure and services so they want to migrate that to cloud. And building something from scratch on cloud is often way easier, than migrating an existing infrastructure to it. Many companies are also using hybrid cloud. So they want to migrate only parts of their local infrastructure to cloud, which means they need integrations between local and the cloud infrastructure. Many companies also do multicloud, which means they want to use AWS and Azure, maybe for redundancy like if something happens to one AWS data center you have a fallback. Or just in order to take advantage of strength of different cloud providers and what they are good at, like they want to use AWS computing resources, but company has lots of internal Microsoft applications, so they want to leverage Azure Cloud for that. So with multicloud again services and applications need to be connected across cloud platforms and those are all very challenging tasks. So in those cases Cloud Engineer would develop the strategy for migrating and help successfully migrate to cloud and create integrations in hybrid or multicloud environments, where services need to communicate securely and reliably across those environments. Another example is cost tracking, because when you use many resources, many cloud services, combine them in various ways, you need to watch out for the cost or at least be able to predict, how much it will cost. And when you have complex setup with geographic distributions using many cloud provided services for convenience, it can get pretty expensive. And that's again where Cloud Engineers tasks and responsibilities are, to make sure that company doesn't have huge cost overruns on their cloud infrastructure. Cloud Engineers would also monitor the configured infrastructure, to detect any attempts of hacking into the systems. Maybe the cost is spiking because some resources were misconfigured. Are service running fine, do they have enough resources to handle the traffic and so on. And finally cloud services and infrastructure can get very complex, very fast. Which means you don't want to be managing and configuring or creating things in a complex cloud setup manually. You don't want people joining your company or your cloud team wondering, how the whole infrastructure was created, how it's configured, what's configured, where and why. So you need some transparency of your infrastructure setups as well. And also making sure when someone joins in the cloud engineering team they can easily get on board and not accidentally misconfigure stuff or ruin the existing setup and so on. And in case things break, in a cloud setup you want to be able to replicate the same cloud configuration again and recover the setup quickly without having to remember exactly what you did to configure the current setup and what exactly needs to be done. And that's where infrastructure as code comes in. So Cloud Engineers would automate a lot of their own tasks for infrastructure creation and maintenance using infrastructure as code. Because when you have really complex setups, after some point you can't possibly manually manage that anymore. So you will 100 percent need to have some automation. Now going back to the original comparison between DevOps Engineer and Cloud Engineer to summarize the differences, DevOps Engineers automate software release process to make it faster, while Cloud Engineers automate cloud infrastructure and management to make companies cloud infrastructure reliable, fast and secure easily recoverable and so on. So obviously two very different objectives. But here is the overlap. Part of software release is its deployment on servers, on infrastructure. So if companies deploying its applications to cloud, DevOps Engineers responsibility naturally becomes to make sure the cloud infrastructure is configured and managed properly to allow for fast deployment, for automated testing, validating whether deployment works with blue green or canary deployment strategies and so on. So DevOps Engineer's job would extend to managing the underlying infrastructure, monitoring that is working fine so the applications can be deployed and run successfully, making sure that it's secure, it's not running out of resources, that it's geographically distributed and so on If application is running in Kubernetes cluster managed by AWS, DevOps engineer would make sure the cluster is running fine, it's correctly configured with security in place and so on. And again DevOps is about automating things to be fast and efficient, so DevOps Engineers would also use infrastructures code tools to automate infrastructure management monitoring etc., but only the parts that directly affect the release process of the application. So as you see the cloud infrastructure management that directly affects how fast the application can be released, deployed, recovered and so on is also part of DevOps Engineers tasks. And that's where the main overlap happens. So from this perspective it seems like DevOps kind of includes some of the Cloud Engineers tasks. So companies usually just hire DevOps Cloud Engineer who does everything. But logically it's not possible for one role to do everything from release management, to infrastructure management, to backup and restore management, cost oversight and so on. So we have additional Cloud Engineer role, that is dedicated to cloud services and managing them and should actually be a help for DevOps Engineer to help each other in their own objectives. So the objective of Cloud Engineer, which is reliable secure infrastructure also affects the DevOps Engineer's objective of releasing applications fast, because they have to run on that infrastructure. Which means Cloud Engineer takes care of managing infrastructure and makes sure it runs reliably, so DevOps engineer can build automated processes on top of that to release the applications and run them on that reliable properly configured cloud infrastructure. And you can even use the controls that Cloud Engineer configured to monitor the application to do the automated validation, implement deployment strategies and so on. So that's basically the comparison between the two. I hope I was able to give you some clarity around these two roles and was able to answer your questions around them. Let me know in the comments whether you work in any of these two roles and whether you see the confusion and the mixup of those two and in which form. I'm sure the other viewers will also be interested to know. And with that thank you for watching and see you in the next video!
