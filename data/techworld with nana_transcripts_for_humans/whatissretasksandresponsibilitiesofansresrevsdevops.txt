With timestamps:

00:00 - in this video we're going to talk about
00:02 - sre or site reliability engineering
00:06 - which is becoming a very popular term in
00:09 - the devops and generally the software
00:11 - development world and i'm sure many of
00:13 - you are interested to know what it is
00:15 - exactly so first we will see how sre
00:18 - emerged and why was there even a need
00:21 - for sre
00:22 - then we will see what sre definition is
00:25 - what system reliability means exactly
00:28 - and how sre actually works in practice
00:32 - like measuring reliability with slas and
00:35 - so on after which we will go into detail
00:37 - and see exactly what are the tasks and
00:40 - responsibilities of an sre role this
00:43 - will make it clear how the work process
00:45 - of an sre team
00:47 - looks like and what are their daily
00:49 - activities
00:50 - and finally we will talk about how sre
00:53 - compares to devops which is a commonly
00:55 - discussed question nowadays so i
00:58 - recommend that you watch my recent
01:00 - devops video first where i explain
01:02 - devops in detail because this will make
01:04 - it definitely easier to understand the
01:07 - topics in this video so let's get
01:10 - started in a traditional software
01:13 - development process we have developers
01:16 - and operations as two separate teams
01:19 - each of them with their own goal while
01:22 - developers want to push out application
01:24 - changes as fast as possible to the end
01:27 - users
01:28 - operations want to keep the application
01:30 - stable
01:31 - so they are very careful about each and
01:34 - every change
01:35 - and this causes a conflict of interest
01:38 - between these two rows forcing them to
01:41 - work against each other instead of
01:42 - collaborate and devops was actually
01:45 - introduced to help fix exactly this
01:48 - issue again as you learned in my what is
01:51 - devops video however while devos made
01:53 - release process faster
01:56 - these releases were not as stable as
01:59 - ideally wished by devops principles
02:02 - plus in devops team there was no
02:04 - dedicated role or person that actually
02:07 - focused full time on keeping systems
02:10 - reliable and that's how the need for sre
02:14 - and a site reliability engineer as a
02:17 - separate role emerged
02:22 - specifically sre was conceptualized at
02:25 - google by ben traynor a software
02:28 - engineer who was given a task to run a
02:31 - small team of other software engineers
02:34 - to do what used to be operations work
02:36 - and according to his own definition
02:39 - sre is what happens when you treat
02:42 - operations as a software problem and
02:44 - stuff it with a bunch of software
02:47 - engineers
02:48 - and at its core sre teams are made up of
02:52 - software engineers who build and
02:54 - implement software to improve the
02:57 - reliability of their systems
02:59 - but this definition is of course too
03:02 - vague and high level to really
03:04 - understand how it's implemented in
03:06 - practice so let's break it down and
03:08 - analyze each part of this definition
03:11 - step by step
03:15 - so first of all what is a system that we
03:19 - want to keep reliable or what does a
03:21 - system even mean in this definition well
03:24 - the system is the server's
03:26 - infrastructure the platform so the whole
03:29 - deployment environment where the
03:31 - application
03:32 - runs now what exactly is reliability and
03:36 - why is it so important to keep our
03:39 - systems reliable imagine you work with
03:42 - emails daily and your email provider is
03:44 - down once a week
03:46 - or your online banking application is
03:48 - down and not accessible regularly this
03:51 - would be unreliable services you can
03:54 - rely that it's available when you need
03:56 - it on the other hand many popular
03:58 - services like gmail twitter youtube etc
04:02 - are rarely inaccessible so these systems
04:05 - are pretty reliable
04:08 - but the thing is
04:09 - users usually do not notice reliability
04:13 - of the system
04:14 - it only becomes visible when something
04:16 - goes wrong and the services are down do
04:19 - you remember the recent outage of
04:20 - facebook instagram and other related
04:23 - services that made huge news what about
04:26 - aws server
04:28 - outages that also affected other
04:30 - applications that were hosted on aws of
04:33 - course everybody noticed and knew about
04:36 - it when it happened so the more popular
04:38 - and bigger the product or service and
04:41 - the more used the more impact it will
04:43 - have if the service had an outage which
04:46 - means
04:47 - more their team should worry about its
04:50 - reliability now what are the effects or
04:53 - impact of outages or system
04:56 - unreliability well for most of the
04:58 - services this is a lot of unhappy
05:01 - customers and
05:02 - lots of lost revenue like imagine online
05:06 - shop is down on a holiday or online bank
05:09 - is not working because of traffic
05:11 - overload this means lots of lost
05:13 - business because people cannot order
05:15 - anything on that shop so system
05:17 - reliability is very important for
05:19 - business
05:23 - okay so we understood that systems need
05:26 - to be reliable but how do we make a
05:28 - system reliable
05:30 - or
05:31 - ask differently what makes system
05:33 - unreliable what affects its reliability
05:37 - well the main cause of system becoming
05:39 - unreliable is when you make changes to
05:42 - your system like change something in the
05:44 - infrastructure the platform where the
05:46 - application is running the application
05:49 - itself and its services and so on and
05:51 - this may cause a disruption and break
05:54 - something in the whole setup well as a
05:56 - solution we can say no changes allowed
05:59 - or limit the amount of changes to keep
06:01 - systems reliable but that really limits
06:04 - the business we want to make changes and
06:07 - improvements to our application to make
06:09 - it better and increase its business
06:11 - value and stay competitive etc because
06:13 - if our competitor is bringing out new
06:16 - features we need to keep up and that's
06:18 - the main focus of software developers
06:21 - to make those changes and improvements
06:24 - but on the other hand if the application
06:26 - is not accessible that's also bad for
06:28 - business
06:29 - because you may have awesome features
06:31 - but nobody can use it because
06:32 - application is down
06:34 - and it's the operations job to take care
06:37 - of that and make sure the application is
06:39 - accessible this means devs want to
06:42 - release fast and ops want to keep
06:45 - stability so traditionally devs would
06:47 - make a change and ops would analyze with
06:50 - hundreds of checklists and mechanisms to
06:53 - make sure the change would not affect
06:55 - the system and this whole analysis and
06:57 - evaluations slows down the release
07:00 - process
07:01 - and that's been the major challenge of
07:04 - the traditional way of software
07:05 - development and that's exactly what
07:08 - devops and sre try to solve
07:11 - so what's the specific solution of sre
07:14 - here well sre tries to automate the
07:16 - process of analyzing and evaluating
07:20 - the effects the change will have on our
07:23 - system reliability automation means no
07:26 - checklists or discussions of operations
07:28 - team whether to release the change or
07:30 - not or what threats and risks are
07:33 - involved instead the evaluation is based
07:36 - on automated process and this makes
07:39 - releasing changes fast and safe at the
07:42 - same time now before moving on i want to
07:44 - give a shout out to our sponsor loft
07:47 - loft is actually the first platform for
07:50 - platform engineers it lets teams build a
07:53 - self-service kubernetes platform in days
07:56 - rather than years so how it works is
07:59 - that platform teams usually sit in the
08:01 - intersection between
08:03 - sre teams and engineering teams they
08:05 - build self-service systems for the
08:08 - engineering teams to be able to get
08:10 - access to cloud computing resources that
08:13 - usually only sres have access to the
08:16 - goal is a better developer experience
08:18 - and that developers can build more
08:21 - resilient applications and test
08:23 - distributed systems more realistically
08:26 - early on in the development process
08:29 - locked is actually also the creator of
08:31 - the cluster which is an open source
08:33 - project for creating virtual kubernetes
08:36 - clusters v-cluster is the first
08:39 - certified kubernetes distribution for
08:41 - virtual clusters and it allows to spin
08:44 - up lightweight clusters inside the
08:46 - namespaces of kubernetes clusters which
08:49 - is a great way for securing
08:51 - multi-tenancy in shared clusters for my
08:55 - followers loft actually provides six
08:57 - months free for their paid subscription
09:00 - for the first 500 people so if you want
09:03 - to try it out check out my special link
09:05 - and use my promo code for that and now
09:07 - let's continue with our video
09:10 - now how is that automated evaluation
09:13 - done
09:13 - the way it works is using what's called
09:16 - slas
09:17 - so what is an sla
09:19 - sla is basically how reliable a system
09:22 - is going to be to its end users
09:25 - so how often it's going to be up and how
09:28 - often it's going to be down and it's
09:29 - expressed in percentage a service that
09:32 - works all the time is never down has a
09:35 - hundred percent sla now you may be
09:37 - thinking of course any service should be
09:40 - 100 reliable right isn't that a natural
09:43 - goal
09:43 - well not really first of all it's very
09:46 - hard to achieve 100
09:48 - reliability however there are very few
09:51 - things in the world that actually need a
09:54 - hundred percent sla so for example if
09:56 - your internet provider or the customer's
09:59 - device itself is 100 reliable which is
10:02 - the case with most laptops mobile phones
10:05 - and so on then your service does not
10:08 - need to be either it can be available
10:10 - maximum at the same rate as the
10:13 - underlying network or device
10:15 - and in those cases a reliability of
10:18 - three nines or four five nines may be
10:20 - enough so that users don't even notice
10:23 - that there is an issue and the more
10:25 - closer you try to get to hundred percent
10:28 - the more effort it is which as you see
10:31 - is an unneeded effort because you don't
10:33 - need 100 sla for most applications
10:36 - now what is an example of an sla you
10:39 - define a service level agreement about
10:42 - the accessibility of your application so
10:44 - for example a 99
10:46 - sla for application accessibility would
10:49 - mean that the system can be down maximum
10:53 - 3.65 days in a year
10:56 - an sla with 5 9 or 99.99
11:02 - allows an application to be unaccessible
11:05 - maximum five minutes a year so the rest
11:08 - of the time it should work and you can
11:10 - actually define multiple such agreements
11:12 - or slas not just the accessibility or
11:15 - availability of the system but also
11:18 - things like application response time or
11:20 - an error rate and so on for example if
11:22 - you have an application that serves a
11:24 - million requests a week with 99
11:28 - sla you define that
11:30 - 990 000 of those requests will be
11:34 - successful
11:35 - okay now you may be wondering who
11:37 - defines these slas
11:39 - so basically who decides how many
11:41 - requests must be successful out of these
11:44 - million requests or how much downtime is
11:46 - allowed for the application who makes
11:48 - this kind of decisions well this
11:50 - decision affects the end users and their
11:52 - user experience so naturally business
11:55 - people are also involved in this process
11:58 - so basically business people together
12:01 - with the engineers like sre and devos
12:04 - engineers decide together
12:06 - what service level agreements they want
12:08 - to define for their application and
12:11 - based on the industry benchmarks
12:13 - competition user feedback and so on
12:16 - business people will define the desired
12:19 - slas on a higher level and the engineers
12:22 - will then define them on a technical
12:24 - level and also make sure to integrate
12:26 - them into their devops and sre processes
12:30 - as i said sla for availability defines
12:34 - how long the service should be available
12:36 - or how much downtime is allowed for that
12:39 - service
12:40 - and that allowed downtime is also what's
12:43 - called an error budget in sre and a team
12:46 - can quote unquote spend that error
12:49 - budget on making unreliable changes
12:52 - so basically that error budget says that
12:55 - we're allowed to have that much downtime
12:58 - in our system without losing business
13:01 - making customers unhappy etc so sla is
13:04 - like a barometer you can turn it up or
13:07 - down based on how reliable your system
13:09 - needs to be and of course the closer to
13:12 - 100
13:13 - the more effort you need to put in to
13:15 - guarantee the reliability of your
13:18 - systems now once the sla is defined the
13:21 - system performance can be measured
13:23 - against this number if systems are more
13:26 - unreliable than the sla allows then more
13:29 - resources from the sre team will be put
13:32 - to make the systems reliable again
13:34 - because we have exceeded that allowed
13:37 - amount of downtime and until the system
13:39 - is recovered to be within the defined
13:41 - sla fewer changes will be allowed on the
13:44 - other hand if the system is performing
13:47 - well beyond the defined sla developers
13:49 - in the sre team can release more changes
13:52 - so it's a simple way to regulate the
13:54 - release speed of developers if we turn
13:57 - up the sla releases will slow down and
13:59 - vice versa
14:02 - and the sre or the site reliability
14:05 - engineer is the one who creates
14:07 - automated processes to calculate and
14:10 - evaluate whether the service is within
14:13 - the sla or not so now the policy for
14:16 - launching is not the endless
14:18 - checklist that operations
14:20 - use to decide whether to launch or not
14:23 - instead an sre helped design processes
14:26 - that can automatically evaluate an sla
14:30 - now of course to measure the performance
14:32 - of our systems and whether services are
14:34 - within the sla we need proper monitoring
14:38 - of our systems so as another big part of
14:41 - sre tasks and responsibilities is to
14:43 - configure proper
14:45 - monitoring and logging of the systems to
14:48 - get visibility of what's going on inside
14:51 - now we said that for most applications
14:53 - sla is not a hundred percent which means
14:56 - we accept that it won't work 100 of the
15:00 - time so at some point we will have an
15:02 - outage now the question is what do we do
15:05 - when an outage happens
15:08 - or how do we prepare for it and that's
15:10 - where another big part of sre tasks and
15:13 - responsibilities comes in the first one
15:16 - is monitoring and alerting which i
15:19 - already mentioned so in addition to
15:21 - giving you a visibility to measure your
15:24 - system's performance but more
15:26 - importantly it helps you detect any
15:28 - indications for issues before they
15:31 - happen or very early
15:34 - when they happen and then alert the
15:35 - teams about it now another important
15:38 - part of this whole configuration is that
15:41 - when the issue is alerted and ideally
15:44 - the right person in the team gets the
15:46 - message
15:47 - the alert message should contain all the
15:50 - needed information to identify and fix
15:53 - the issue fast
15:55 - so instead of something is wrong in the
15:57 - cluster
15:58 - a more detailed message like surveys a
16:01 - in cluster b is throwing 500 error for
16:05 - example so know exactly which service is
16:08 - having a problem in which cluster and
16:12 - what that problem exactly is so more
16:14 - detail the alert message the better in
16:17 - many cases sres will develop
16:20 - their own custom services to achieve
16:24 - this proper monitoring alerting and
16:26 - login configuration for their systems
16:29 - another thing that sres do is on-call
16:32 - support so basically when things go
16:35 - wrong and users need real-time support
16:38 - somebody is responsible for doing that
16:40 - and that is on-call support team
16:43 - and putting sres on this support team
16:46 - helps them really see and understand
16:49 - what issues to expect how the support
16:52 - deals with the issues and what
16:54 - improvements can be made to make the
16:56 - support process more efficient such as
17:00 - do alert messages and logs have enough
17:02 - information to quickly identify the
17:04 - issue and the cause where issues
17:07 - identified too late etc so overall the
17:11 - main goal of sre is to make sure the
17:14 - scope of outage is small when it happens
17:17 - which means the outage doesn't last long
17:20 - and is fixed very quickly and less
17:23 - people and few services are affected by
17:25 - that outage now there is one challenge
17:28 - about detecting the issues that you may
17:30 - not think about immediately
17:32 - and one reason why it's important to
17:34 - prevent issues or identify them as early
17:37 - as possible in practice when the system
17:41 - is configured properly you usually have
17:43 - multiple mechanisms for high
17:46 - availability reliability self-healing
17:48 - etc so one small bug in such systems
17:52 - will not cause an outage because you
17:54 - have protection mechanisms for that and
17:56 - this means that multiple things must go
17:59 - wrong before system becomes unreliable
18:02 - and before you actually have an outage
18:04 - so when an outage does happen you don't
18:07 - have one thing that you need to fix but
18:09 - rather
18:10 - multiple issues or a chain of issues on
18:13 - multiple levels that you need to fix
18:16 - so fixing that array of issues is more
18:18 - complicated and takes more time before
18:21 - the system has recovered and is back
18:23 - available for users so this additional
18:25 - protection mechanisms do protect the
18:28 - system and make it more reliable but
18:30 - they also make it more challenging to
18:32 - detect the issues early so in this case
18:35 - it's even more important to configure a
18:37 - proper monitoring logging and alerting
18:39 - configuration to overcome this challenge
18:42 - now fixing an issue or an outage is not
18:45 - the end of the sre team's work we want
18:48 - to use that outage as a chance for
18:51 - lessons learned and of course avoid that
18:53 - this happens in the future so as a
18:55 - principle of sre team is to do what's
18:58 - called post mortem which is latin for
19:01 - after death so in sre terms after issue
19:04 - or after outage analysis and this
19:07 - includes a thorough analysis meaning
19:10 - taking time to really go deeper and
19:12 - understand the issues what caused this
19:15 - outage go through the whole chain of who
19:18 - did what who fixed what how you were
19:20 - able to deal with it etc
19:22 - but of course during this analysis it's
19:24 - super important to stay blameless
19:27 - which is one of the major points of this
19:29 - post-mortem analysis in order to
19:32 - encourage people to admit and learn from
19:34 - their and other people's mistakes and
19:37 - finally it's important to document
19:39 - everything for future reference
19:44 - now you may be thinking how much more
19:46 - should software developers learn they
19:49 - already have to know all these software
19:50 - development technologies
19:52 - now they also have to take over the
19:54 - operations tasks and learn all these
19:56 - operations tools and that's why we have
19:59 - sre as its own role so a dedicated
20:02 - person whose full-time responsibility is
20:04 - to work on keeping systems reliable so
20:07 - in many projects
20:09 - along with developers you have sre teams
20:13 - which are the new ops team basically a
20:16 - team that does the operations where both
20:18 - teams work for the same goal of keeping
20:21 - the systems within the defined slas so
20:24 - the sre team maintains and takes care of
20:27 - the automated delivery operations and
20:29 - all sorts of automation that will help
20:32 - developers release their changes
20:34 - safely and fast however it's also common
20:38 - to have one team of srs and software
20:40 - developers where sres also do the
20:43 - software development job and this means
20:45 - that sr engineers
20:47 - must know software development as well
20:49 - unlike devops engineers but in both
20:52 - cases as you see we started off with a
20:55 - traditional way of software development
20:57 - with separate dev and ops with opposing
21:00 - incentives and with sre we gave devs and
21:04 - ops the same incentives and put them on
21:06 - the same side and finally one of the
21:09 - majorly discussed questions in this area
21:12 - is what is the difference between sre
21:14 - and devops engineer
21:16 - or generally between these two concepts
21:19 - if you already watched my what is devops
21:22 - video you know that there are two
21:23 - definitions of devops the original
21:26 - definition which is more high level and
21:28 - more broad and doesn't specify how
21:31 - exactly devops should be implemented and
21:34 - a more practical one
21:36 - which evolved over time with its own
21:38 - devops engineer role
21:40 - so when we compare devops with sre it's
21:43 - important to know
21:44 - which definition of devops we're using
21:46 - for this comparison so with the first
21:49 - broader definition of devops
21:51 - devops is a more high level concept that
21:53 - defines
21:54 - what needs to be done to achieve the
21:57 - automated streamlined release process
22:00 - while sre is more specific about
22:03 - how to exactly implement this process
22:06 - and how to implement devops principles
22:10 - so many people would say that sre is a
22:12 - specific implementation of the devops
22:14 - concepts
22:15 - but as you saw in my what is devops
22:18 - video devops itself also became more
22:20 - practical with its own role and specific
22:23 - technologies and ways to implement it
22:26 - so what's the comparison here well in
22:29 - many companies
22:30 - devops implementation
22:32 - this practical devops implementation
22:35 - became more focused and concentrated on
22:38 - the speed of delivery for the
22:40 - application changes and of course even
22:42 - though
22:43 - it's part of the devops principles to
22:45 - not only release fast but release
22:48 - quality code
22:49 - many devops teams in practice again
22:52 - seemed to optimize more for the speed
22:55 - than reliability so as a great
22:57 - complementary part of devops
23:00 - sre emerged with the same principles and
23:03 - goals in mind which is release quality
23:06 - code fast but as the name suggests more
23:09 - focused on reliability and keeping
23:12 - systems stable
23:14 - while allowing for fast changes so sre
23:17 - is its own role with its own set of
23:20 - tools
23:21 - for making systems reliable so these two
23:24 - were kind of parallel developments and
23:26 - are now often seen as two sides of the
23:29 - same coin
23:30 - and it's not uncommon for teams to have
23:32 - both
23:33 - devops engineer and sre
23:36 - helping implement the devops principles
23:39 - now i hope you learned a lot in this
23:41 - video and that i was able to answer all
23:43 - of your questions about sre now if you
23:46 - have work or are currently working as an
23:48 - sre please share your experience in the
23:51 - comments because i'm sure it will be
23:53 - very interesting for others one thing i
23:56 - also want to mention is to be sure to
23:58 - check out our course roadmap for this
24:00 - year because based on your feedback we
24:03 - have planned to create a few courses we
24:05 - may not be able to create all of them
24:07 - this year because we try to create the
24:09 - courses with a super high quality
24:12 - content instead of creating as many as
24:14 - possible so the process takes longer so
24:17 - sign up to get notified when we release
24:20 - the courses and with that thank you for
24:22 - watching and see you in the next video

Cleaned transcript:

in this video we're going to talk about sre or site reliability engineering which is becoming a very popular term in the devops and generally the software development world and i'm sure many of you are interested to know what it is exactly so first we will see how sre emerged and why was there even a need for sre then we will see what sre definition is what system reliability means exactly and how sre actually works in practice like measuring reliability with slas and so on after which we will go into detail and see exactly what are the tasks and responsibilities of an sre role this will make it clear how the work process of an sre team looks like and what are their daily activities and finally we will talk about how sre compares to devops which is a commonly discussed question nowadays so i recommend that you watch my recent devops video first where i explain devops in detail because this will make it definitely easier to understand the topics in this video so let's get started in a traditional software development process we have developers and operations as two separate teams each of them with their own goal while developers want to push out application changes as fast as possible to the end users operations want to keep the application stable so they are very careful about each and every change and this causes a conflict of interest between these two rows forcing them to work against each other instead of collaborate and devops was actually introduced to help fix exactly this issue again as you learned in my what is devops video however while devos made release process faster these releases were not as stable as ideally wished by devops principles plus in devops team there was no dedicated role or person that actually focused full time on keeping systems reliable and that's how the need for sre and a site reliability engineer as a separate role emerged specifically sre was conceptualized at google by ben traynor a software engineer who was given a task to run a small team of other software engineers to do what used to be operations work and according to his own definition sre is what happens when you treat operations as a software problem and stuff it with a bunch of software engineers and at its core sre teams are made up of software engineers who build and implement software to improve the reliability of their systems but this definition is of course too vague and high level to really understand how it's implemented in practice so let's break it down and analyze each part of this definition step by step so first of all what is a system that we want to keep reliable or what does a system even mean in this definition well the system is the server's infrastructure the platform so the whole deployment environment where the application runs now what exactly is reliability and why is it so important to keep our systems reliable imagine you work with emails daily and your email provider is down once a week or your online banking application is down and not accessible regularly this would be unreliable services you can rely that it's available when you need it on the other hand many popular services like gmail twitter youtube etc are rarely inaccessible so these systems are pretty reliable but the thing is users usually do not notice reliability of the system it only becomes visible when something goes wrong and the services are down do you remember the recent outage of facebook instagram and other related services that made huge news what about aws server outages that also affected other applications that were hosted on aws of course everybody noticed and knew about it when it happened so the more popular and bigger the product or service and the more used the more impact it will have if the service had an outage which means more their team should worry about its reliability now what are the effects or impact of outages or system unreliability well for most of the services this is a lot of unhappy customers and lots of lost revenue like imagine online shop is down on a holiday or online bank is not working because of traffic overload this means lots of lost business because people cannot order anything on that shop so system reliability is very important for business okay so we understood that systems need to be reliable but how do we make a system reliable or ask differently what makes system unreliable what affects its reliability well the main cause of system becoming unreliable is when you make changes to your system like change something in the infrastructure the platform where the application is running the application itself and its services and so on and this may cause a disruption and break something in the whole setup well as a solution we can say no changes allowed or limit the amount of changes to keep systems reliable but that really limits the business we want to make changes and improvements to our application to make it better and increase its business value and stay competitive etc because if our competitor is bringing out new features we need to keep up and that's the main focus of software developers to make those changes and improvements but on the other hand if the application is not accessible that's also bad for business because you may have awesome features but nobody can use it because application is down and it's the operations job to take care of that and make sure the application is accessible this means devs want to release fast and ops want to keep stability so traditionally devs would make a change and ops would analyze with hundreds of checklists and mechanisms to make sure the change would not affect the system and this whole analysis and evaluations slows down the release process and that's been the major challenge of the traditional way of software development and that's exactly what devops and sre try to solve so what's the specific solution of sre here well sre tries to automate the process of analyzing and evaluating the effects the change will have on our system reliability automation means no checklists or discussions of operations team whether to release the change or not or what threats and risks are involved instead the evaluation is based on automated process and this makes releasing changes fast and safe at the same time now before moving on i want to give a shout out to our sponsor loft loft is actually the first platform for platform engineers it lets teams build a selfservice kubernetes platform in days rather than years so how it works is that platform teams usually sit in the intersection between sre teams and engineering teams they build selfservice systems for the engineering teams to be able to get access to cloud computing resources that usually only sres have access to the goal is a better developer experience and that developers can build more resilient applications and test distributed systems more realistically early on in the development process locked is actually also the creator of the cluster which is an open source project for creating virtual kubernetes clusters vcluster is the first certified kubernetes distribution for virtual clusters and it allows to spin up lightweight clusters inside the namespaces of kubernetes clusters which is a great way for securing multitenancy in shared clusters for my followers loft actually provides six months free for their paid subscription for the first 500 people so if you want to try it out check out my special link and use my promo code for that and now let's continue with our video now how is that automated evaluation done the way it works is using what's called slas so what is an sla sla is basically how reliable a system is going to be to its end users so how often it's going to be up and how often it's going to be down and it's expressed in percentage a service that works all the time is never down has a hundred percent sla now you may be thinking of course any service should be 100 reliable right isn't that a natural goal well not really first of all it's very hard to achieve 100 reliability however there are very few things in the world that actually need a hundred percent sla so for example if your internet provider or the customer's device itself is 100 reliable which is the case with most laptops mobile phones and so on then your service does not need to be either it can be available maximum at the same rate as the underlying network or device and in those cases a reliability of three nines or four five nines may be enough so that users don't even notice that there is an issue and the more closer you try to get to hundred percent the more effort it is which as you see is an unneeded effort because you don't need 100 sla for most applications now what is an example of an sla you define a service level agreement about the accessibility of your application so for example a 99 sla for application accessibility would mean that the system can be down maximum 3.65 days in a year an sla with 5 9 or 99.99 allows an application to be unaccessible maximum five minutes a year so the rest of the time it should work and you can actually define multiple such agreements or slas not just the accessibility or availability of the system but also things like application response time or an error rate and so on for example if you have an application that serves a million requests a week with 99 sla you define that 990 000 of those requests will be successful okay now you may be wondering who defines these slas so basically who decides how many requests must be successful out of these million requests or how much downtime is allowed for the application who makes this kind of decisions well this decision affects the end users and their user experience so naturally business people are also involved in this process so basically business people together with the engineers like sre and devos engineers decide together what service level agreements they want to define for their application and based on the industry benchmarks competition user feedback and so on business people will define the desired slas on a higher level and the engineers will then define them on a technical level and also make sure to integrate them into their devops and sre processes as i said sla for availability defines how long the service should be available or how much downtime is allowed for that service and that allowed downtime is also what's called an error budget in sre and a team can quote unquote spend that error budget on making unreliable changes so basically that error budget says that we're allowed to have that much downtime in our system without losing business making customers unhappy etc so sla is like a barometer you can turn it up or down based on how reliable your system needs to be and of course the closer to 100 the more effort you need to put in to guarantee the reliability of your systems now once the sla is defined the system performance can be measured against this number if systems are more unreliable than the sla allows then more resources from the sre team will be put to make the systems reliable again because we have exceeded that allowed amount of downtime and until the system is recovered to be within the defined sla fewer changes will be allowed on the other hand if the system is performing well beyond the defined sla developers in the sre team can release more changes so it's a simple way to regulate the release speed of developers if we turn up the sla releases will slow down and vice versa and the sre or the site reliability engineer is the one who creates automated processes to calculate and evaluate whether the service is within the sla or not so now the policy for launching is not the endless checklist that operations use to decide whether to launch or not instead an sre helped design processes that can automatically evaluate an sla now of course to measure the performance of our systems and whether services are within the sla we need proper monitoring of our systems so as another big part of sre tasks and responsibilities is to configure proper monitoring and logging of the systems to get visibility of what's going on inside now we said that for most applications sla is not a hundred percent which means we accept that it won't work 100 of the time so at some point we will have an outage now the question is what do we do when an outage happens or how do we prepare for it and that's where another big part of sre tasks and responsibilities comes in the first one is monitoring and alerting which i already mentioned so in addition to giving you a visibility to measure your system's performance but more importantly it helps you detect any indications for issues before they happen or very early when they happen and then alert the teams about it now another important part of this whole configuration is that when the issue is alerted and ideally the right person in the team gets the message the alert message should contain all the needed information to identify and fix the issue fast so instead of something is wrong in the cluster a more detailed message like surveys a in cluster b is throwing 500 error for example so know exactly which service is having a problem in which cluster and what that problem exactly is so more detail the alert message the better in many cases sres will develop their own custom services to achieve this proper monitoring alerting and login configuration for their systems another thing that sres do is oncall support so basically when things go wrong and users need realtime support somebody is responsible for doing that and that is oncall support team and putting sres on this support team helps them really see and understand what issues to expect how the support deals with the issues and what improvements can be made to make the support process more efficient such as do alert messages and logs have enough information to quickly identify the issue and the cause where issues identified too late etc so overall the main goal of sre is to make sure the scope of outage is small when it happens which means the outage doesn't last long and is fixed very quickly and less people and few services are affected by that outage now there is one challenge about detecting the issues that you may not think about immediately and one reason why it's important to prevent issues or identify them as early as possible in practice when the system is configured properly you usually have multiple mechanisms for high availability reliability selfhealing etc so one small bug in such systems will not cause an outage because you have protection mechanisms for that and this means that multiple things must go wrong before system becomes unreliable and before you actually have an outage so when an outage does happen you don't have one thing that you need to fix but rather multiple issues or a chain of issues on multiple levels that you need to fix so fixing that array of issues is more complicated and takes more time before the system has recovered and is back available for users so this additional protection mechanisms do protect the system and make it more reliable but they also make it more challenging to detect the issues early so in this case it's even more important to configure a proper monitoring logging and alerting configuration to overcome this challenge now fixing an issue or an outage is not the end of the sre team's work we want to use that outage as a chance for lessons learned and of course avoid that this happens in the future so as a principle of sre team is to do what's called post mortem which is latin for after death so in sre terms after issue or after outage analysis and this includes a thorough analysis meaning taking time to really go deeper and understand the issues what caused this outage go through the whole chain of who did what who fixed what how you were able to deal with it etc but of course during this analysis it's super important to stay blameless which is one of the major points of this postmortem analysis in order to encourage people to admit and learn from their and other people's mistakes and finally it's important to document everything for future reference now you may be thinking how much more should software developers learn they already have to know all these software development technologies now they also have to take over the operations tasks and learn all these operations tools and that's why we have sre as its own role so a dedicated person whose fulltime responsibility is to work on keeping systems reliable so in many projects along with developers you have sre teams which are the new ops team basically a team that does the operations where both teams work for the same goal of keeping the systems within the defined slas so the sre team maintains and takes care of the automated delivery operations and all sorts of automation that will help developers release their changes safely and fast however it's also common to have one team of srs and software developers where sres also do the software development job and this means that sr engineers must know software development as well unlike devops engineers but in both cases as you see we started off with a traditional way of software development with separate dev and ops with opposing incentives and with sre we gave devs and ops the same incentives and put them on the same side and finally one of the majorly discussed questions in this area is what is the difference between sre and devops engineer or generally between these two concepts if you already watched my what is devops video you know that there are two definitions of devops the original definition which is more high level and more broad and doesn't specify how exactly devops should be implemented and a more practical one which evolved over time with its own devops engineer role so when we compare devops with sre it's important to know which definition of devops we're using for this comparison so with the first broader definition of devops devops is a more high level concept that defines what needs to be done to achieve the automated streamlined release process while sre is more specific about how to exactly implement this process and how to implement devops principles so many people would say that sre is a specific implementation of the devops concepts but as you saw in my what is devops video devops itself also became more practical with its own role and specific technologies and ways to implement it so what's the comparison here well in many companies devops implementation this practical devops implementation became more focused and concentrated on the speed of delivery for the application changes and of course even though it's part of the devops principles to not only release fast but release quality code many devops teams in practice again seemed to optimize more for the speed than reliability so as a great complementary part of devops sre emerged with the same principles and goals in mind which is release quality code fast but as the name suggests more focused on reliability and keeping systems stable while allowing for fast changes so sre is its own role with its own set of tools for making systems reliable so these two were kind of parallel developments and are now often seen as two sides of the same coin and it's not uncommon for teams to have both devops engineer and sre helping implement the devops principles now i hope you learned a lot in this video and that i was able to answer all of your questions about sre now if you have work or are currently working as an sre please share your experience in the comments because i'm sure it will be very interesting for others one thing i also want to mention is to be sure to check out our course roadmap for this year because based on your feedback we have planned to create a few courses we may not be able to create all of them this year because we try to create the courses with a super high quality content instead of creating as many as possible so the process takes longer so sign up to get notified when we release the courses and with that thank you for watching and see you in the next video
