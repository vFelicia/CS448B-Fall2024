With timestamps:

00:00 - hello and welcome to the second devops
00:02 - tool of the month video with
00:03 - loft and the exciting topic of
00:06 - self-service virtual clusters for
00:08 - developers
00:09 - first i will explain what problem loft
00:11 - solves
00:12 - how it works and then we will see it in
00:14 - action with a simple
00:16 - demo let's say in your company there are
00:20 - 10 project teams
00:22 - all using kubernetes and each team would
00:24 - need
00:25 - three clusters for development staging
00:28 - and production
00:30 - now as you might think each team
00:32 - creating and managing their own
00:34 - kubernetes cluster is very inefficient
00:36 - especially because administration of
00:38 - kubernetes cluster is
00:40 - a lot of effort and you don't want to do
00:42 - it 30 times in a company because you
00:44 - have 10 kubernetes projects
00:46 - but it's also expensive because you need
00:48 - more servers
00:49 - for all those master nodes so you need
00:52 - more resources
00:53 - and a common approach of companies to
00:56 - solve this is to create
00:57 - a company-wide kubernetes cluster and a
01:01 - dedicated team
01:02 - managing this company-wide kubernetes
01:05 - cluster
01:05 - so now your company would only need to
01:08 - administer
01:09 - this one shared cluster and they can now
01:12 - give developers
01:14 - access to the shared cluster using
01:16 - isolation with
01:17 - namespaces so each team can deploy their
01:20 - applications
01:21 - however this comes with following
01:23 - challenges
01:25 - first of all how do you give different
01:27 - teams and
01:28 - individual developers access to this
01:31 - shared cluster or how do you restrict
01:33 - this access how do you make sure each
01:35 - team
01:36 - only gets access to their project
01:39 - resources
01:40 - to keep the cluster secure or even
01:42 - restrict the access within the team
01:44 - to define who has access to what based
01:47 - on their role
01:48 - and tasks in the team also how do you
01:51 - restrict
01:52 - how much cluster resources each team can
01:54 - use
01:55 - because you don't want one team using up
01:57 - most of the cluster resources
01:59 - and finally how do you isolate the
02:02 - resources and applications
02:04 - of each project from each other because
02:06 - obviously you don't want the project
02:08 - resources
02:08 - to be exceededly mixed up and all this
02:12 - is especially important in development
02:14 - environments where things will be tested
02:16 - and tried out
02:17 - but also in production environment where
02:19 - everything has to run
02:21 - smoothly
02:25 - and loft helps solve exactly those
02:28 - challenges
02:29 - using a concept of virtual clusters
02:32 - so what is a virtual cluster it's simply
02:35 - a cluster
02:36 - inside a cluster and the way loft
02:39 - implements
02:40 - virtual clusters is when user creates a
02:43 - virtual cluster
02:44 - in this shared company-wide kubernetes
02:47 - cluster
02:48 - loft creates a new namespace and
02:52 - deploys a lightweight kubernetes cluster
02:55 - based on k3s inside that new namespace
03:00 - so basically this lightweight virtual
03:03 - cluster has
03:04 - its own api server and controller which
03:07 - are
03:08 - two of the master processes and this way
03:11 - virtual clusters will be completely
03:13 - isolated from each other
03:18 - so now one developer can create a
03:20 - virtual cluster
03:21 - to test a new feature for example and
03:24 - even if he blows up and messes up his
03:27 - virtual cluster
03:28 - nothing else gets affected maybe a
03:30 - product manager wants to demo
03:32 - new feature to the potential application
03:35 - users
03:35 - so they can very easily spin up a
03:38 - virtual cluster to deploy the
03:39 - application
03:41 - and then just remove that virtual
03:42 - cluster when the demo is over
03:44 - so now let's see the complete flow to
03:48 - how you as a user can set it up and use
03:51 - it
03:51 - usually you already have existing
03:53 - kubernetes clusters
03:55 - in your company which may have been
03:58 - created using
03:59 - eks or openshift or wrencher
04:02 - and you already have ingress controller
04:04 - monitoring
04:05 - and some cluster-wide resources already
04:09 - configured
04:10 - now loft comes into the picture and
04:12 - usually devops engineers will install
04:14 - loft in one of the clusters and then
04:18 - start connecting all the other clusters
04:20 - to it basically creating one big
04:24 - self-service cluster for the whole
04:25 - company so now
04:27 - using loft ui or loft command line
04:29 - interface
04:30 - or even cube ctl cluster admins
04:33 - can create users for the teams or
04:36 - individual developers
04:38 - and give them permissions and access to
04:41 - create and use
04:42 - virtual clusters after that developers
04:46 - of different teams can basically start
04:48 - creating virtual clusters
04:50 - themselves and deploying applications
04:53 - inside so as you see loft solves
04:56 - quite a lot of challenges for managing
04:59 - and also
04:59 - using kubernetes clusters within the
05:02 - company and to see that
05:04 - let's jump right into a demo where we
05:06 - can see
05:07 - all these in action it's actually very
05:09 - easy to get started with
05:11 - loft and for the demo i'm gonna use my
05:14 - local
05:15 - mini cube cluster to install loft
05:18 - and then basically see some of its
05:20 - features
05:21 - so my cluster is already running
05:24 - and it is basically empty because i have
05:27 - no resources inside and the first step
05:30 - will be to install
05:31 - loft cli and on the loft documentation
05:35 - page basically you see the installation
05:37 - command for each operating system i'm
05:40 - just going to copy this
05:42 - very simple execute
05:45 - and loft is installed locally
05:50 - now as a next step we want to install
05:53 - loft
05:53 - in our mini cube cluster so basically
05:56 - loft has to
05:57 - start somewhere right it has to be
05:59 - installed somewhere and that is inside a
06:01 - kubernetes cluster
06:02 - and we can do that very easily using
06:04 - loft start command
06:06 - and let's execute and see what happens
06:09 - first of all
06:10 - love detected that i have a mini cube
06:12 - cluster running
06:14 - so it is asking me whether i want to use
06:16 - that
06:17 - let's do yes email address
06:20 - i'm just gonna tap in this
06:23 - and now as you see loft is getting
06:26 - installed
06:27 - inside our mini cube cluster using
06:31 - this command right here and as you see
06:33 - the installation was successful
06:35 - and we have a loft ui url
06:39 - that was exposed automatically at this
06:42 - address and we have
06:43 - username and password so let's go back
06:46 - to the browser
06:48 - and let's open loft ui
06:53 - and we're going to log in with this
06:55 - admin user
07:01 - and this is a loft ui and
07:04 - obviously in your real projects at work
07:08 - you would install loft in an existing
07:10 - remote kubernetes cluster it could be a
07:12 - cloud kubernetes cluster or
07:14 - on-premise and the admin user will
07:16 - basically have
07:17 - the whole management permissions for
07:21 - all the clusters that loft is basically
07:24 - managing right and the admin user also
07:27 - has this configuration
07:28 - tab here for administering all those
07:31 - clusters
07:32 - so usually it will work like this you as
07:35 - an admin user
07:36 - if you're a devops engineer for example
07:39 - you will basically
07:40 - connect all the clusters that your
07:43 - company has
07:44 - to this loft management cluster right
07:47 - so basically one cluster that you
07:49 - install the lofting automatically gets
07:51 - connected
07:52 - and that's why we see this loft cluster
07:54 - right here this is actually our mini
07:56 - cube cluster in which we installed
07:59 - loft so as a second step
08:02 - as the administrator of the clusters you
08:05 - will connect
08:06 - an additional cluster using loft in my
08:09 - case i have created
08:11 - a lino to kubernetes cluster because
08:13 - it's just very easy to get started with
08:15 - and i'm going to connect lke cluster
08:19 - in loft and this is my lenod cluster
08:22 - very simple i just have one node and
08:25 - here is my cubeconfig for connecting to
08:27 - the cluster
08:29 - so let's go back and see how easy it is
08:31 - to connect
08:32 - existing kubernetes clusters to loft and
08:35 - note that this could be
08:36 - any kubernetes cluster it doesn't really
08:38 - matter it will work for
08:40 - all the same connect cluster let's call
08:43 - it
08:44 - lke cluster
08:47 - now as a next step we basically just
08:49 - need to provide a cube config
08:51 - for the cluster i am simply just going
08:55 - to copy that
08:56 - from here
09:00 - and paste it in connect
09:04 - and now you see as a next step kiosk is
09:07 - being
09:07 - installed in this remote lynode cluster
09:11 - so i don't have to do anything
09:12 - as an admin basically loft takes care of
09:16 - it
09:16 - kiosk is basically an open source
09:18 - project that loft
09:19 - uses to manage those remote clusters
09:22 - that are connected
09:24 - to loft and that got installed and we
09:27 - have
09:27 - a new cluster connected that we can now
09:30 - use
09:33 - and if i click finish i am inside this
09:36 - lke cluster that we just
09:37 - edit and you see that kiosk was
09:40 - installed
09:41 - and loft also gives you very handy way
09:44 - of installing
09:45 - any additional helm charts basically
09:48 - in that remote cluster if you don't
09:50 - already have them
09:51 - like nginx ingress cert manager
09:54 - prometheus
09:55 - etc so you could actually install all
09:58 - those things
09:59 - in the remote clusters using loft very
10:02 - easily so i'm going to go back to the
10:04 - cluster so this is our lke
10:06 - this is our mini cube clusters so we are
10:09 - all set up
10:10 - to use them now who would use those
10:12 - clusters
10:13 - these are going to be developers maybe
10:15 - devops engineers or other team members
10:17 - right
10:18 - people who actually want to deploy
10:20 - applications or
10:21 - test out different stuff in those
10:23 - clusters and create virtual clusters
10:25 - basically right
10:26 - so that means that i as an admin should
10:29 - give
10:29 - people permission to create and use
10:32 - those
10:33 - virtual clusters so in user section
10:36 - basically i can add new users and let's
10:39 - say
10:40 - this is a new user let's call her nicole
10:46 - provide email address
10:50 - and as an admin user obviously you can
10:53 - limit permissions and access to that
10:57 - user right so you can basically decide
10:59 - which clusters they have access to
11:01 - and how much resources they can actually
11:04 - use
11:05 - and so on so in our case we're gonna use
11:07 - all the defaults basically that loft
11:09 - provides
11:10 - so this will be a users that doesn't
11:12 - have admin
11:13 - privileges but can use basically all the
11:16 - clusters that are connected
11:18 - so we're going to leave everything as is
11:20 - and create that user
11:23 - and we get a link that i could as an
11:25 - admin send that user
11:26 - and say hey you can log in with this url
11:30 - so that they can start basically using
11:33 - this self-managed
11:34 - cluster so now that my job as an admin
11:37 - is
11:38 - done here i can log out
11:42 - and open that url for the new user
11:46 - there you go and now i am logging in as
11:50 - this developer called nicole that
11:52 - basically
11:53 - has permission to create virtual
11:56 - clusters and start deploying her
11:57 - applications inside so i am a developer
12:01 - i'm a backend engineer
12:06 - and this is my account i don't see an
12:10 - admin tab here because it's not an admin
12:12 - user
12:13 - and if we go to clusters basically see
12:16 - both of these
12:17 - host clusters right the actual clusters
12:20 - that were connected here
12:21 - and right here i'm able to create
12:24 - virtual clusters
12:26 - let's actually do that create virtual
12:27 - cluster and here i can select
12:30 - which cluster which host cluster i
12:33 - should create the virtual cluster in
12:35 - let's actually choose lke and let's say
12:38 - i want to create this cluster to test my
12:40 - new feature
12:41 - payment so i'm going to call this
12:44 - cluster
12:45 - payment test again i'm going to leave
12:48 - all the defaults
12:49 - because we're doing a simple demo and
12:51 - create that virtual cluster
12:55 - and soon enough our virtual cluster is
12:59 - up and running and we actually created
13:02 - two things now
13:03 - one is space so space basically
13:07 - creates a namespace inside that lke
13:10 - cluster
13:11 - v cluster payment test so if i actually
13:14 - connect to my lk cluster and let's do
13:17 - cube ctl get
13:18 - namespace right here i have this v
13:21 - cluster
13:21 - payment test right so this namespace got
13:24 - created inside the lke cluster and
13:26 - inside the namespace
13:28 - a new virtual cluster got created
13:32 - now again i want to use this cluster to
13:35 - deploy my applications
13:36 - so how do i connect to the virtual
13:38 - cluster
13:39 - instead of the host cluster right
13:41 - because now i'm connected to
13:43 - lke and if i do cube ctl
13:47 - apply basically i will be creating stuff
13:49 - inside here
13:50 - but i want to connect to and use the
13:52 - virtual cluster
13:54 - inside that namespace let's actually see
13:58 - the parts that are running inside the
14:00 - namespace
14:03 - and here you see we have two pods
14:06 - running
14:06 - and these two parts are basically part
14:09 - of the virtual cluster right
14:11 - as i mentioned previously it's a
14:13 - lightweight k3s cluster
14:16 - that has its own api server that we can
14:18 - actually talk to
14:20 - so now how do we configure our cube
14:22 - context
14:23 - to talk to that virtual cluster instead
14:26 - of the host cluster
14:27 - in order to connect to this virtual
14:30 - cluster
14:31 - we can actually click on this button
14:33 - here connect
14:34 - and we will see loft command that will
14:36 - configure our local cube context
14:39 - to point to that virtual cluster so the
14:41 - way it works is that
14:43 - any user who has access to this virtual
14:46 - cluster and who has permission to use it
14:48 - can log in to loft using loft cli
14:56 - to this address in our case we're
14:58 - logging
14:59 - in as user recall because that's the
15:01 - developer
15:02 - who created the virtual cluster and
15:05 - provide the
15:05 - access key of that user so in profile
15:10 - access key i can create
15:13 - my access key
15:17 - and use it to login to loft
15:20 - and let's add an insecure
15:24 - flag here because it's complaining that
15:26 - we're logging into
15:27 - insecure instance and there you go
15:31 - and now because luckily i'm
15:33 - authenticated with loft
15:35 - i can actually execute this connect
15:39 - command because now loft knows that
15:42 - i as this user have a permission
15:45 - to use that virtual cluster
15:48 - so let's execute and there you go
15:52 - cube context changed so now
15:55 - let's do cube ctl get
15:59 - namespace first of all
16:02 - and we're seeing the namespaces of the
16:04 - virtual cluster
16:06 - and in addition we can do cluster info
16:09 - as well and here you see kubernetes
16:12 - master
16:13 - is pointing to api server
16:16 - of our virtual cluster vcluster payment
16:19 - test
16:19 - so this is the endpoint of the api
16:21 - server and here as you see
16:24 - we have some of the master processes
16:25 - running as well so
16:27 - now this developer backend engineer user
16:30 - can basically do anything in a virtual
16:32 - cluster
16:33 - without affecting anybody else within
16:35 - the resource
16:36 - limits and permission limits that this
16:38 - user was given
16:40 - by admin of the loft cluster and last
16:43 - but not least
16:44 - a very important feature of loft is a
16:47 - sleep mode
16:48 - which lets you save significantly on
16:50 - your infrastructure costs
16:52 - so when i'm done using the cluster or
16:54 - when i'm done testing basically and i
16:56 - don't need it for some time
16:58 - you can either manually trigger
17:01 - a sleep mode for a space so basically
17:04 - the virtual cluster in that namespace
17:07 - will scale down all the resources
17:10 - so nothing will run anymore however data
17:14 - and all the kubernetes components will
17:16 - be persisted
17:17 - or you can also configure spaces to go
17:19 - to sleep mode automatically after some
17:22 - period of time and then whenever you
17:24 - start using the cluster again
17:26 - for example if we do ctl get namespace
17:30 - command
17:30 - so basically with the first interaction
17:33 - with that space
17:34 - or with that virtual cluster the space
17:37 - becomes active again as you see
17:39 - and this is a very convenient way of
17:41 - using the sleep mode
17:43 - to save lots of infrastructure cost

Cleaned transcript:

hello and welcome to the second devops tool of the month video with loft and the exciting topic of selfservice virtual clusters for developers first i will explain what problem loft solves how it works and then we will see it in action with a simple demo let's say in your company there are 10 project teams all using kubernetes and each team would need three clusters for development staging and production now as you might think each team creating and managing their own kubernetes cluster is very inefficient especially because administration of kubernetes cluster is a lot of effort and you don't want to do it 30 times in a company because you have 10 kubernetes projects but it's also expensive because you need more servers for all those master nodes so you need more resources and a common approach of companies to solve this is to create a companywide kubernetes cluster and a dedicated team managing this companywide kubernetes cluster so now your company would only need to administer this one shared cluster and they can now give developers access to the shared cluster using isolation with namespaces so each team can deploy their applications however this comes with following challenges first of all how do you give different teams and individual developers access to this shared cluster or how do you restrict this access how do you make sure each team only gets access to their project resources to keep the cluster secure or even restrict the access within the team to define who has access to what based on their role and tasks in the team also how do you restrict how much cluster resources each team can use because you don't want one team using up most of the cluster resources and finally how do you isolate the resources and applications of each project from each other because obviously you don't want the project resources to be exceededly mixed up and all this is especially important in development environments where things will be tested and tried out but also in production environment where everything has to run smoothly and loft helps solve exactly those challenges using a concept of virtual clusters so what is a virtual cluster it's simply a cluster inside a cluster and the way loft implements virtual clusters is when user creates a virtual cluster in this shared companywide kubernetes cluster loft creates a new namespace and deploys a lightweight kubernetes cluster based on k3s inside that new namespace so basically this lightweight virtual cluster has its own api server and controller which are two of the master processes and this way virtual clusters will be completely isolated from each other so now one developer can create a virtual cluster to test a new feature for example and even if he blows up and messes up his virtual cluster nothing else gets affected maybe a product manager wants to demo new feature to the potential application users so they can very easily spin up a virtual cluster to deploy the application and then just remove that virtual cluster when the demo is over so now let's see the complete flow to how you as a user can set it up and use it usually you already have existing kubernetes clusters in your company which may have been created using eks or openshift or wrencher and you already have ingress controller monitoring and some clusterwide resources already configured now loft comes into the picture and usually devops engineers will install loft in one of the clusters and then start connecting all the other clusters to it basically creating one big selfservice cluster for the whole company so now using loft ui or loft command line interface or even cube ctl cluster admins can create users for the teams or individual developers and give them permissions and access to create and use virtual clusters after that developers of different teams can basically start creating virtual clusters themselves and deploying applications inside so as you see loft solves quite a lot of challenges for managing and also using kubernetes clusters within the company and to see that let's jump right into a demo where we can see all these in action it's actually very easy to get started with loft and for the demo i'm gonna use my local mini cube cluster to install loft and then basically see some of its features so my cluster is already running and it is basically empty because i have no resources inside and the first step will be to install loft cli and on the loft documentation page basically you see the installation command for each operating system i'm just going to copy this very simple execute and loft is installed locally now as a next step we want to install loft in our mini cube cluster so basically loft has to start somewhere right it has to be installed somewhere and that is inside a kubernetes cluster and we can do that very easily using loft start command and let's execute and see what happens first of all love detected that i have a mini cube cluster running so it is asking me whether i want to use that let's do yes email address i'm just gonna tap in this and now as you see loft is getting installed inside our mini cube cluster using this command right here and as you see the installation was successful and we have a loft ui url that was exposed automatically at this address and we have username and password so let's go back to the browser and let's open loft ui and we're going to log in with this admin user and this is a loft ui and obviously in your real projects at work you would install loft in an existing remote kubernetes cluster it could be a cloud kubernetes cluster or onpremise and the admin user will basically have the whole management permissions for all the clusters that loft is basically managing right and the admin user also has this configuration tab here for administering all those clusters so usually it will work like this you as an admin user if you're a devops engineer for example you will basically connect all the clusters that your company has to this loft management cluster right so basically one cluster that you install the lofting automatically gets connected and that's why we see this loft cluster right here this is actually our mini cube cluster in which we installed loft so as a second step as the administrator of the clusters you will connect an additional cluster using loft in my case i have created a lino to kubernetes cluster because it's just very easy to get started with and i'm going to connect lke cluster in loft and this is my lenod cluster very simple i just have one node and here is my cubeconfig for connecting to the cluster so let's go back and see how easy it is to connect existing kubernetes clusters to loft and note that this could be any kubernetes cluster it doesn't really matter it will work for all the same connect cluster let's call it lke cluster now as a next step we basically just need to provide a cube config for the cluster i am simply just going to copy that from here and paste it in connect and now you see as a next step kiosk is being installed in this remote lynode cluster so i don't have to do anything as an admin basically loft takes care of it kiosk is basically an open source project that loft uses to manage those remote clusters that are connected to loft and that got installed and we have a new cluster connected that we can now use and if i click finish i am inside this lke cluster that we just edit and you see that kiosk was installed and loft also gives you very handy way of installing any additional helm charts basically in that remote cluster if you don't already have them like nginx ingress cert manager prometheus etc so you could actually install all those things in the remote clusters using loft very easily so i'm going to go back to the cluster so this is our lke this is our mini cube clusters so we are all set up to use them now who would use those clusters these are going to be developers maybe devops engineers or other team members right people who actually want to deploy applications or test out different stuff in those clusters and create virtual clusters basically right so that means that i as an admin should give people permission to create and use those virtual clusters so in user section basically i can add new users and let's say this is a new user let's call her nicole provide email address and as an admin user obviously you can limit permissions and access to that user right so you can basically decide which clusters they have access to and how much resources they can actually use and so on so in our case we're gonna use all the defaults basically that loft provides so this will be a users that doesn't have admin privileges but can use basically all the clusters that are connected so we're going to leave everything as is and create that user and we get a link that i could as an admin send that user and say hey you can log in with this url so that they can start basically using this selfmanaged cluster so now that my job as an admin is done here i can log out and open that url for the new user there you go and now i am logging in as this developer called nicole that basically has permission to create virtual clusters and start deploying her applications inside so i am a developer i'm a backend engineer and this is my account i don't see an admin tab here because it's not an admin user and if we go to clusters basically see both of these host clusters right the actual clusters that were connected here and right here i'm able to create virtual clusters let's actually do that create virtual cluster and here i can select which cluster which host cluster i should create the virtual cluster in let's actually choose lke and let's say i want to create this cluster to test my new feature payment so i'm going to call this cluster payment test again i'm going to leave all the defaults because we're doing a simple demo and create that virtual cluster and soon enough our virtual cluster is up and running and we actually created two things now one is space so space basically creates a namespace inside that lke cluster v cluster payment test so if i actually connect to my lk cluster and let's do cube ctl get namespace right here i have this v cluster payment test right so this namespace got created inside the lke cluster and inside the namespace a new virtual cluster got created now again i want to use this cluster to deploy my applications so how do i connect to the virtual cluster instead of the host cluster right because now i'm connected to lke and if i do cube ctl apply basically i will be creating stuff inside here but i want to connect to and use the virtual cluster inside that namespace let's actually see the parts that are running inside the namespace and here you see we have two pods running and these two parts are basically part of the virtual cluster right as i mentioned previously it's a lightweight k3s cluster that has its own api server that we can actually talk to so now how do we configure our cube context to talk to that virtual cluster instead of the host cluster in order to connect to this virtual cluster we can actually click on this button here connect and we will see loft command that will configure our local cube context to point to that virtual cluster so the way it works is that any user who has access to this virtual cluster and who has permission to use it can log in to loft using loft cli to this address in our case we're logging in as user recall because that's the developer who created the virtual cluster and provide the access key of that user so in profile access key i can create my access key and use it to login to loft and let's add an insecure flag here because it's complaining that we're logging into insecure instance and there you go and now because luckily i'm authenticated with loft i can actually execute this connect command because now loft knows that i as this user have a permission to use that virtual cluster so let's execute and there you go cube context changed so now let's do cube ctl get namespace first of all and we're seeing the namespaces of the virtual cluster and in addition we can do cluster info as well and here you see kubernetes master is pointing to api server of our virtual cluster vcluster payment test so this is the endpoint of the api server and here as you see we have some of the master processes running as well so now this developer backend engineer user can basically do anything in a virtual cluster without affecting anybody else within the resource limits and permission limits that this user was given by admin of the loft cluster and last but not least a very important feature of loft is a sleep mode which lets you save significantly on your infrastructure costs so when i'm done using the cluster or when i'm done testing basically and i don't need it for some time you can either manually trigger a sleep mode for a space so basically the virtual cluster in that namespace will scale down all the resources so nothing will run anymore however data and all the kubernetes components will be persisted or you can also configure spaces to go to sleep mode automatically after some period of time and then whenever you start using the cluster again for example if we do ctl get namespace command so basically with the first interaction with that space or with that virtual cluster the space becomes active again as you see and this is a very convenient way of using the sleep mode to save lots of infrastructure cost
