With timestamps:

00:00 - [Music]
00:05 - hello and welcome to kubernetes tutorial
00:08 - kubernetes is an open source technology
00:11 - developed by google in order to make
00:14 - orchestrating containerized applications
00:16 - easier that's why an official definition
00:19 - of kubernetes is actually a container
00:21 - orchestration tool so as you can see
00:24 - containers are the base part of
00:26 - kubernetes technology so if you want to
00:28 - learn kubernetes you first have to
00:30 - understand what a container is and why
00:32 - we use them so in this video series
00:37 - we'll talk about container concepts and
00:39 - one of its most popular implementations
00:42 - which is Ducker so we'll talk about what
00:45 - a container is and what problems it
00:48 - solves we will also look at a container
00:50 - repository which is basically a storage
00:52 - for containers we'll see how container
00:55 - can actually make the development
00:57 - process much easier and more efficient
00:59 - and also how they solve some of the
01:01 - problems that we have in the deployment
01:03 - process of applications so let's dive
01:06 - right into it what a container is a
01:07 - container is a way to package
01:09 - applications with everything they need
01:11 - inside of that package including the
01:13 - dependencies and all the configuration
01:15 - necessary and that package is portable
01:18 - just like any other artifact is and that
01:21 - package can be easily shared and moved
01:23 - around between a development team or
01:25 - development and operations team and that
01:29 - portability of containers Plus
01:32 - everything packaged in one isolated
01:35 - environment gives it some of the
01:37 - advantages that makes development and
01:39 - deployment process more efficient and
01:42 - we'll see some of the examples of how
01:45 - that works in later slides so as I
01:48 - mentioned containers are portable so
01:50 - there must be some kind of a storage for
01:53 - those containers so that you can share
01:55 - them and move them around
01:56 - so containers leave in a container
01:59 - repository this is a specific this is a
02:02 - special type of storage for containers
02:05 - many companies have their own private
02:08 - repositories where they host or the way
02:11 - they store all the containers
02:13 - and this will look something like this
02:15 - where you you can push all of the
02:18 - containers that you have but there is
02:20 - also a public repository for docker
02:22 - containers where you can browse and
02:25 - probably find any application container
02:28 - that you want so let's head over to the
02:31 - browser and see how that looks like so
02:34 - if I here search for a docker hub which
02:36 - is the name of the public repository for
02:39 - Tucker I will see this official website
02:43 - so here if you scroll down you see that
02:46 - there are more than hundred thousand
02:49 - container images of different
02:51 - applications hosted or stored in this
02:54 - docker repository so here you see just
02:57 - some of the examples and for every
02:59 - application there is this official
03:01 - docker container container image but if
03:06 - you are looking for something else you
03:07 - can search it here and I see there's an
03:11 - official image for let's say Jenkins but
03:14 - there's also a lot of non official
03:17 - images or container images that
03:20 - developers or or even from Jenkins
03:24 - itself they actually store it here so
03:27 - public repository is where you usually
03:31 - get started when you're using or when
03:33 - you are starting to use the containers
03:35 - where you can find any application image
03:38 - so now let's see how containers improve
03:41 - the development process by specific
03:44 - examples how did we develop applications
03:47 - before the containers usually when you
03:51 - have a team of developers working on
03:54 - some application you would have to
03:57 - install most of the services on your
04:00 - operating system directly right for
04:03 - example you are developing developing
04:05 - some JavaScript application and you need
04:07 - a post Chris Kuehl and you need Redis
04:10 - for messaging and every developer in the
04:14 - team would then have to go and install
04:17 - the binaries of those services and
04:20 - configure them and run them on their
04:23 - local development environment
04:26 - and depending on which operating system
04:30 - they're using the installation process
04:32 - will look actually different also
04:36 - another thing with installing services
04:38 - like this is that you have multiple
04:41 - steps of installation so you have couple
04:44 - of commands that you have to execute and
04:46 - the chances of something going wrong and
04:50 - error happening is actually pretty high
04:52 - because because of the number of steps
04:56 - required to install each service and
04:59 - this and this approach or this process
05:05 - of setting up a new environment can
05:07 - actually be pretty tedious depending on
05:10 - how complex your application is for
05:12 - example if you have 10 services that
05:14 - your application is using and you would
05:16 - have to do that 10 times on each
05:19 - operating system environment so now
05:24 - let's see how containers solve some of
05:26 - these problems
05:27 - with containers you actually do not have
05:31 - to install any of the services directly
05:33 - on your operating system because the
05:36 - container is its own isolated operating
05:38 - system layer with Linux base image as we
05:42 - saw in the previous slides
05:43 - you have everything packaged in one
05:46 - isolated environment so you have the
05:48 - PostgreSQL with a specific version
05:51 - packaged with the configuration in the
05:54 - start script inside inside of one
05:58 - container so the developer you have to
06:00 - go and look for the binaries to download
06:03 - on your machine but rather you just go
06:05 - ahead and check out the container
06:09 - repository to find that specific
06:11 - container and download on your local
06:15 - machine and the Downloads step is just
06:19 - one docker command which fetches the
06:21 - container and starts it at the same time
06:24 - and regardless of which operating system
06:26 - you're on the command the docker command
06:29 - for starting the container will not be
06:31 - different it will be exactly the same so
06:34 - we have ten applications that your app
06:35 - that your JavaScript application you
06:40 - depends on you would just have to run
06:42 - $10 comments for each container and that
06:45 - will be it
06:48 - which makes the setting up your local
06:53 - development environment actually much
06:56 - easier and much more efficient than the
06:58 - previous version also as we saw in the
07:01 - demonstration before you can actually
07:03 - have different versions of the same
07:05 - application running on your local
07:09 - environment without having any conflict
07:14 - so now let's see how containers can
07:16 - improve the deployment process before
07:20 - the containers a traditional deployment
07:22 - process will look like this developer
07:25 - development team will produce artifacts
07:28 - together with set of instructions of how
07:30 - to actually install and configure those
07:33 - artifacts on the server so you would
07:36 - have a jar file or something similar for
07:39 - your application and in addition you
07:42 - would have some kind of a database
07:43 - service or some other service also with
07:47 - a set of instructions of how to
07:48 - configure and set it up on the server so
07:52 - development team would give those
07:54 - artifacts over to the operations team
07:56 - and the operation team will handle
07:58 - setting up the environments to deploy
08:01 - those applications now the problem with
08:03 - this kind of approach is that first of
08:06 - all you need to configure everything and
08:08 - install everything directly on the
08:10 - operating system which we saw in the
08:12 - previous example that could actually
08:14 - lead to conflicts with dependency
08:18 - versions and and the service is running
08:22 - on the same host another problem that
08:25 - could arise from this kind of process is
08:28 - when there is misunderstanding between
08:30 - the development team and operations
08:31 - because everything is in a textual guide
08:34 - there could be cases where developers
08:37 - miss to mention some important point
08:41 - about configuration and when that fails
08:43 - the operations team have to go back to
08:45 - the developers and ask for more details
08:48 - and this could lead to some
08:51 - back-and-forth communication and
08:53 - the application is successfully deployed
08:55 - on the server with containers this
08:59 - process is actually simplified because
09:01 - now you have the developers and
09:03 - operations working in one team to
09:05 - package the whole configuration
09:07 - dependencies inside the application just
09:10 - as we saw previously and since it's
09:14 - already encapsulated in one environment
09:18 - you don't have to configure any of this
09:19 - directly on the server so the only thing
09:22 - you need to do is run a docker command
09:27 - that pulls that container that you've
09:29 - stored somewhere in the repository and
09:31 - then runs it and that makes the process
09:34 - this is of course a simplify simplified
09:38 - version but then makes exactly the
09:40 - problem that we saw on the previous
09:42 - slide
09:43 - much more easier no environmental
09:46 - configuration needed on the server the
09:49 - only thing of course you need to do is
09:51 - you have to prepare you have to install
09:53 - the and set up the docker runtime on the
09:56 - server before you will be able to run
09:58 - containers there but that's just one
10:00 - time effort and later in this tutorial
10:03 - we will also see how kubernetes actually
10:06 - offers even more abstraction of the
10:08 - deployment environment to make the
10:10 - deploying of super complex applications
10:14 - much much easier than it was possible
10:16 - with the traditional approach thanks for
10:19 - watching the video I hope it was helpful
10:21 - and if it was don't forget to like it
10:23 - this is a video series so I will create
10:26 - a new one every week so if you want to
10:28 - be notified whenever a new video comes
10:30 - out then subscribe to my channel if you
10:33 - have any questions if something wasn't
10:35 - clear in the video please post them in a
10:37 - comment section below and I will try to
10:39 - answer them so thank you and see you in
10:42 - the next video

Cleaned transcript:

hello and welcome to kubernetes tutorial kubernetes is an open source technology developed by google in order to make orchestrating containerized applications easier that's why an official definition of kubernetes is actually a container orchestration tool so as you can see containers are the base part of kubernetes technology so if you want to learn kubernetes you first have to understand what a container is and why we use them so in this video series we'll talk about container concepts and one of its most popular implementations which is Ducker so we'll talk about what a container is and what problems it solves we will also look at a container repository which is basically a storage for containers we'll see how container can actually make the development process much easier and more efficient and also how they solve some of the problems that we have in the deployment process of applications so let's dive right into it what a container is a container is a way to package applications with everything they need inside of that package including the dependencies and all the configuration necessary and that package is portable just like any other artifact is and that package can be easily shared and moved around between a development team or development and operations team and that portability of containers Plus everything packaged in one isolated environment gives it some of the advantages that makes development and deployment process more efficient and we'll see some of the examples of how that works in later slides so as I mentioned containers are portable so there must be some kind of a storage for those containers so that you can share them and move them around so containers leave in a container repository this is a specific this is a special type of storage for containers many companies have their own private repositories where they host or the way they store all the containers and this will look something like this where you you can push all of the containers that you have but there is also a public repository for docker containers where you can browse and probably find any application container that you want so let's head over to the browser and see how that looks like so if I here search for a docker hub which is the name of the public repository for Tucker I will see this official website so here if you scroll down you see that there are more than hundred thousand container images of different applications hosted or stored in this docker repository so here you see just some of the examples and for every application there is this official docker container container image but if you are looking for something else you can search it here and I see there's an official image for let's say Jenkins but there's also a lot of non official images or container images that developers or or even from Jenkins itself they actually store it here so public repository is where you usually get started when you're using or when you are starting to use the containers where you can find any application image so now let's see how containers improve the development process by specific examples how did we develop applications before the containers usually when you have a team of developers working on some application you would have to install most of the services on your operating system directly right for example you are developing developing some JavaScript application and you need a post Chris Kuehl and you need Redis for messaging and every developer in the team would then have to go and install the binaries of those services and configure them and run them on their local development environment and depending on which operating system they're using the installation process will look actually different also another thing with installing services like this is that you have multiple steps of installation so you have couple of commands that you have to execute and the chances of something going wrong and error happening is actually pretty high because because of the number of steps required to install each service and this and this approach or this process of setting up a new environment can actually be pretty tedious depending on how complex your application is for example if you have 10 services that your application is using and you would have to do that 10 times on each operating system environment so now let's see how containers solve some of these problems with containers you actually do not have to install any of the services directly on your operating system because the container is its own isolated operating system layer with Linux base image as we saw in the previous slides you have everything packaged in one isolated environment so you have the PostgreSQL with a specific version packaged with the configuration in the start script inside inside of one container so the developer you have to go and look for the binaries to download on your machine but rather you just go ahead and check out the container repository to find that specific container and download on your local machine and the Downloads step is just one docker command which fetches the container and starts it at the same time and regardless of which operating system you're on the command the docker command for starting the container will not be different it will be exactly the same so we have ten applications that your app that your JavaScript application you depends on you would just have to run $10 comments for each container and that will be it which makes the setting up your local development environment actually much easier and much more efficient than the previous version also as we saw in the demonstration before you can actually have different versions of the same application running on your local environment without having any conflict so now let's see how containers can improve the deployment process before the containers a traditional deployment process will look like this developer development team will produce artifacts together with set of instructions of how to actually install and configure those artifacts on the server so you would have a jar file or something similar for your application and in addition you would have some kind of a database service or some other service also with a set of instructions of how to configure and set it up on the server so development team would give those artifacts over to the operations team and the operation team will handle setting up the environments to deploy those applications now the problem with this kind of approach is that first of all you need to configure everything and install everything directly on the operating system which we saw in the previous example that could actually lead to conflicts with dependency versions and and the service is running on the same host another problem that could arise from this kind of process is when there is misunderstanding between the development team and operations because everything is in a textual guide there could be cases where developers miss to mention some important point about configuration and when that fails the operations team have to go back to the developers and ask for more details and this could lead to some backandforth communication and the application is successfully deployed on the server with containers this process is actually simplified because now you have the developers and operations working in one team to package the whole configuration dependencies inside the application just as we saw previously and since it's already encapsulated in one environment you don't have to configure any of this directly on the server so the only thing you need to do is run a docker command that pulls that container that you've stored somewhere in the repository and then runs it and that makes the process this is of course a simplify simplified version but then makes exactly the problem that we saw on the previous slide much more easier no environmental configuration needed on the server the only thing of course you need to do is you have to prepare you have to install the and set up the docker runtime on the server before you will be able to run containers there but that's just one time effort and later in this tutorial we will also see how kubernetes actually offers even more abstraction of the deployment environment to make the deploying of super complex applications much much easier than it was possible with the traditional approach thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video
