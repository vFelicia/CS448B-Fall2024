With timestamps:

00:00 - Hi guys If you're watching this video it 
probably means that you want to start a  
00:05 - career in this highly demanded IT field maybe 
you want to get into DevOps and that's how you  
00:11 - came across my content maybe you want to get 
into software development or Cloud engineering  
00:17 - and you've seen our python course or Docker full 
course as your first step into it but whatever  
00:24 - field you choose this IT beginners course or 
kind of a mini bootcamp that we created will  
00:30 - be the foundation knowledge you need to enter this 
seemingly overwhelming Tech world I know that when  
00:38 - you're at the very beginning of an IT Journey it 
can be extremely overwhelming I receive questions  
00:43 - from many of you about not knowing where to start 
what to learn first there are so many options so  
00:49 - many IT fields and professions there is so much 
to learn and often you don't even know where to  
00:55 - start if you're transitioning from another career 
you may be even thinking will it pay off? am I too  
01:01 - late to start my it career? because there's so 
much to learn I can never catch up with those  
01:06 - who already started at an early age many of 
you have also asked me how to get into devops  
01:12 - field specifically without an IT background and 
I've explained in some of my other videos that  
01:18 - starting into devops without any it pre-knowledge 
is very difficult because you need to first learn  
01:25 - the fundamentals of the software development and 
release life cycle to even understand why devops  
01:31 - is relevant and why we want to use any of the 
devops concepts and tools in software development  
01:37 - projects and I understand all of these concerns 
the self-doubt the time pressure insecurity  
01:44 - Etc and that's exactly why I created this course 
I have structured and planned out this course  
01:50 - with the main goal to make your Learning Journey 
into IT easy and fun completely dissolve the fear  
01:57 - and insecurity of software development being 
so hard to understand I have structured it to  
02:03 - teach you exactly what you need to build a strong 
solid foundation and focus on the most important  
02:10 - Concepts understanding the complete process of 
software development life cycle and every step  
02:16 - of it which is something many Junior Engineers 
with a couple of years of work experience may not  
02:22 - even fully understand so I focus on giving you a 
lot of very important and sometimes even Advanced  
02:29 - knowledge but in a super easily digestible manner 
I have broken down every complex topic into simple  
02:37 - explanations so that at no point in the course 
you will feel overwhelmed by the content or have  
02:43 - trouble understanding something and that as I said 
was my absolute priority when creating this course  
02:50 - and if you follow the course without skipping 
any parts take time to do all the demo projects  
02:56 - along with me by end of the course you'll have 
an exceptional Foundation knowledge to build on  
03:02 - whatever IT specialization you choose to follow 
but if you choose to go into devops specifically  
03:08 - this course will actually be the perfect entry 
to get you prepared for transitioning into devops  
03:15 - since we made it as a perfect prerequisite course 
to our devops bootcamp so the combination of these  
03:23 - two programs will take you from literally zero 
IT experience or knowledge to your very first  
03:30 - devops engineer job and if you do choose this 
path I'll be very happy and honored to help you  
03:37 - and accompany you on this journey now let's see 
what we will actually learn throughout this course  
03:43 - for that you need to First understand that 
in IT there is something called a software  
03:49 - development life cycle it's basically the complete 
process of developing and releasing a software  
03:56 - all the way from planning to development testing 
packaging and running it on a configured server to  
04:03 - make it available for the end users each of these 
steps are done by various roles like a developer  
04:10 - tester systems administrator product owner Etc 
and we are simulating this entire process in an  
04:18 - example software development project covering 
various roles and going through what each role  
04:24 - does and how they work together so we will plan 
the project on a scrum board we'll create a Sprint  
04:30 - we will program the application as a full stack 
developer with front-end backend and database  
04:36 - for data persistence we will then write automated 
tests for our code we will then package it into an  
04:42 - application artifact and after that we will create 
a virtual server on a cloud platform and prepare  
04:49 - the server for running our application on it as 
a server administrator role and finally we deploy  
04:55 - the application artifact on that server and make 
our application available publicly from a browser  
05:02 - and of course along the way we'll learn all the 
relevant concepts and tools of each of those  
05:09 - tasks we took our time structuring this course 
perfectly to include exactly the right amount of  
05:16 - knowledge to pick the most important core concepts 
and explain them with engaging animations and  
05:22 - examples without rushing into things we'll be 
taking time to learn every important underlying  
05:28 - concept and more importantly understand all the 
whys in the process and of course the best way  
05:34 - to learn anything is by doing it yourself so we 
will practice all steps with Hands-On projects  
05:41 - and that's why I mentioned this is also kind of 
a mini boot camp considering the scope of things  
05:47 - you learn now what does this course give you that 
you can't get in other courses or even boot camps  
05:54 - well my goal with the course was to give you an 
equivalent of Junior developers work experience  
06:01 - now of course if we take Junior developer who 
has been programming for a year that's a lot of  
06:07 - coding practice so they will have more knowledge 
in coding specifically that you have to catch up  
06:13 - but here is where it gets really interesting very 
often Junior developers with even two years of  
06:20 - experience have knowledge gaps and miss knowledge 
in some parts of the software development life  
06:26 - cycle and this is true in most cases how do I 
know? because I was a junior software developer  
06:32 - myself once and I know many of my developer 
friends had the same issue so you know how  
06:37 - to program front-end how to program in backend 
you can make connections to database so you can  
06:43 - work with parts of things that have been set up 
already and basically do the small tasks in the  
06:49 - project but most Junior developers have not set up 
the project from scratch like front-end back-end  
06:56 - database they haven't learned the concepts of 
why we are using a JavaScript framework why are  
07:02 - we using libraries what's the comparison why are 
we using package Manager Tools what are the best  
07:08 - practices there what's the underlying concept of 
all of this how do I connect front and to backend  
07:14 - why do I have to connect my front end to backend 
and then database and what's even more how do I  
07:21 - take the application that I just developed package 
it and deployed on a remote server how do I even  
07:26 - create a virtual server what about installing 
packages on an operating system package manager  
07:31 - tools and operating systems what is all that why 
do we need them and how they work and finally why  
07:38 - do we use Jira boards what's scrum agile how the 
whole workflow actually works and why are software  
07:45 - development projects using it so these are all 
knowledge gaps and whys of every step of the  
07:53 - software development life cycle which really makes 
you understand the underlying Concepts because  
07:58 - when you start at a tool level or a technology 
level you know how to use the technology and  
08:04 - its features but you don't always know why you 
are using them you just join a project and start  
08:10 - working with what they have set up already but 
nobody explains to you really what the purpose  
08:15 - of each tool and technology used in the project is 
or the reason why they are using this workflow and  
08:23 - when you have a clear understanding of those whys 
and a big picture of the software development life  
08:29 - cycle trust me you have a solid foundation that 
many beginner Engineers will envy and when you  
08:35 - start working you will not feel like you need much 
hand holding from your team they will be actually  
08:40 - amazed to how good of an understanding you have 
of their processes for a beginner engineer now of  
08:47 - course you will have to learn new tools and 
practice programming learn new concepts Etc  
08:51 - because being in IT is an ongoing learning process 
but for each new concept or tool that you'll have  
08:59 - to learn you will have some kind of tie points and 
connections on your knowledge base so you will be  
09:06 - able to easily retain the knowledge because you 
have a point this new information can tie into  
09:12 - with knowledge gaps and holes you may miss much 
information and get overwhelmed because you don't  
09:18 - know where they fit as a junior I actually learned 
too many things things that I didn't necessarily  
09:24 - need but I didn't know exactly what was relevant 
and what wasn't and I didn't know in which order I  
09:30 - needed to learn those things either so it took me 
longer to learn certain things and understand the  
09:35 - big picture because I wasn't always learning 
the right things at the right time it's like  
09:40 - putting the puzzle pieces together without knowing 
what you're actually Building without having the  
09:46 - end picture so it takes you longer and only once 
you get close to completing the puzzle you start  
09:52 - actually understanding the picture oh that's 
what I've been building this whole time good  
09:55 - to know versus having the picture as a road 
map and guide from the very beginning plus by  
10:01 - learning the right things in right order will let 
you get the necessary knowledge in shorter period  
10:08 - because you learn exactly what you need in a 
compressed curriculum and you're not wasting  
10:14 - any time and that's exactly what we are achieving 
with this course so this all-around knowledge of  
10:20 - Concepts and roles that covers the entire software 
development life cycle is very rare because most  
10:27 - courses usually focus on one specific part of this 
life cycle and not the whole picture so it's very  
10:33 - rare but extremely valuable and this can actually 
put your head even a lot of Junior engineer who  
10:40 - have more work experience than you do so let's 
see in detail what you will learn in this course  
10:46 - we will start with the first part of the 
software development life cycle which is planning  
10:52 - first we start by setting up a Jira board for 
a scrum project and learn about concepts of  
10:58 - agile scrum and how to work on a scrum project 
with Jira and we will be developing and working  
11:05 - with a web application called Teamable as 
a practice project for the entire software  
11:11 - development lifecycle process once the first 
development tasks are planned in in the second  
11:17 - chapter we will start with the development part 
of the software development life cycle and learn  
11:23 - how to develop a web application first we'll learn 
JavaScript basics syntax and concepts of course we  
11:29 - will then learn HTML and CSS and create an example 
web application with HTML CSS and JavaScript to  
11:37 - practice using them together during this process 
we will learn about code editors how to use them  
11:43 - as well as how to make use of the browser's 
developer tools which help immensely when  
11:49 - creating web applications troubleshooting them etc 
so that's a very useful and valuable skill to have  
11:56 - equipped with this knowledge we will then create 
the first version of the Teamable application  
12:01 - front-end with HTML CSS and vanilla JavaScript 
after that we will learn about JavaScript  
12:08 - Frameworks and one popular JavaScript framework 
specifically called VueJS we will build an example  
12:15 - VueJS project and once we've learned how to use 
vue.js we will replace the vanilla JavaScript of  
12:23 - our Teamable application with vue.js framework and 
in the process we will see exactly why Frameworks  
12:30 - are good and what benefits they bring and in that 
process we'll also learn a very important concept  
12:36 - of versioning applications frameworks programming 
languages with that we will have the front end of  
12:43 - our web application developed with HTML CSS and 
vue.js now it's time to create a backend for  
12:51 - our front-end application so we'll learn why we 
need this construct of front-end and backend in  
12:57 - web applications at all how the communication 
and connection between those work on a high  
13:04 - level and all the concepts involved in this we'll 
start by learning a backhand JavaScript framework  
13:10 - called node.js and create an example web server 
application with it we will also learn about  
13:16 - libraries why we need them and how to use them we 
will learn about npm package repositories modules  
13:23 - how to install packages for an application etc 
we will also learn the core building blocks of  
13:31 - the web itself such as HTTP protocol https ports 
IP addresses URLs and how are they relevant in  
13:40 - the software development life cycle and once we've 
learned all these concepts as well as how to use  
13:46 - node.js to write web server applications we will 
implement the backend for our Teamable application  
13:53 - once we have front-end and backend we will connect 
our application to a database to persist data so  
14:02 - first we will learn generally about databases 
different types of databases and their usages and  
14:09 - for our application we will use mongodb database 
specifically so we'll learn how to install and  
14:16 - configure mongodb database and connect our backend 
application to it and with that we'll have a fully  
14:23 - functioning web application with front-end 
backend and database where users can now make  
14:30 - updates in our application that will be persisted 
in the database so this completes the development  
14:37 - part of the software development life cycle and 
brings us to the next section which is testing so  
14:45 - we will learn all about application testing and 
test automation different types of testing and  
14:51 - their purposes and for our Teamable application we 
will write unit tests and integration tests to see  
14:59 - how it actually works in practice then we move 
on to the next part of the software development  
15:04 - lifecycle which is application release in this 
scope we will learn how to package an application  
15:11 - and more importantly why we need to create a 
package or application artifact and then comes  
15:18 - an extremely important part of understanding the 
server Basics learning the concepts of servers  
15:24 - operating systems Cloud platforms how to create 
a virtual machine on a cloud platform and so on  
15:31 - as part of the operating system's Basics we will 
also learn about command line package managers how  
15:39 - to install packages and software on an operating 
system like Mac OS windows and Linux concept of  
15:47 - SSH and securing access to servers and I explain 
all of this by often giving comparisons between  
15:53 - Mac OS windows and Linux operating systems so you 
learn this on a high level not just specifically  
16:00 - for One OS equipped with this knowledge we will 
then go ahead and create a Linux Ubuntu Server  
16:07 - machine on a cloud platform we will learn how to 
connect to it install packages on it and so on so  
16:15 - basically preparing our server for the deployment 
we will then get our application package and run  
16:21 - it on our configured server in this scope we will 
also learn about firewalls securing our server  
16:28 - about the different deployment environments for 
an application like development testing staging  
16:33 - production and what is the purpose of each of 
these environments so this completes the whole  
16:41 - process of developing and deploying the first 
version of our application but we won't stop  
16:48 - there because the life cycle continues so we will 
simulate completing our first Sprint and planning  
16:54 - the next one in which we will learn how to secure 
a database and configure access to it in our  
17:01 - node.js application using environment variables 
this teaches you an important concept and skill of  
17:09 - configuring an application for multiple deployment 
environments with this new application changes we  
17:15 - will release the second version of our Teamable 
application on our deployment server and finally  
17:22 - in the last chapter we will learn the concept 
of collaborating on application development  
17:27 - and working on code using a version control system 
like Git first we will learn generally why Version  
17:35 - Control tools are needed and then we will of 
course learn using git in practice with our  
17:42 - Teamable project and this will fully complete your 
broad skill set of essential Concepts and tools in  
17:50 - the whole software development lifecycle here I 
want to point out one thing that's very important  
17:56 - to me throughout the course I teach you things to 
enable and empower you to then go and do similar  
18:03 - things independently so when we install things 
for example instead of giving you some commands  
18:09 - you just copy and execute blindly I teach you 
how to use and follow official documentations of  
18:16 - those tools to install them like I or any senior 
engineer would actually do in practice in their  
18:22 - regular job so I teach you the concepts as well 
so you can apply them to any other similar use  
18:28 - case and not just what we learn in this specific 
course and this should give you confidence and  
18:34 - dissolve the fear of doing such things in practice 
by yourself now if all this sounds a lot for you  
18:41 - don't worry because my team and I have put a lot 
of work and effort to make sure this course is the  
18:47 - most informative and valuable but also most fun 
and engaging course out there to get you started  
18:54 - in IT I have broken down every complex topic into 
simple explanations so that at no point in the  
19:01 - course you will feel overwhelmed by the content 
or have trouble understanding something so this  
19:07 - should make it very clear that this is not just 
a coding course or a coding bootcamp because they  
19:12 - are focusing on the programming part only because 
that's their main focus and objective to teach you  
19:18 - software development while we in this course are 
focusing on going through each part of the life  
19:24 - cycle understanding the process of complete 
software development and release life cycle
19:33 - now let's talk about what's included in the 
course first of all the core part is the videos  
19:38 - which are mostly hands-On demos often with 
accompanying explanations and whenever a new  
19:45 - concept is taught I break it down in a simple 
manner with lots of helpful animations we also  
19:52 - created human translated English subtitles for the 
entire course in each lecture we have also added  
19:58 - all the relevant links commands and repositories 
where you can access the code that I show in the  
20:05 - demos so every video will be accompanied with any 
relevant code from that video with all of this it  
20:12 - should make it very easy to follow the demos the 
course is carefully planned in a specific order to  
20:18 - give you the full understanding of different parts 
so to really make the most out of this course you  
20:24 - should actually follow it without skipping any 
parts even if you already have some pre-knowledge  
20:29 - in any of the areas you may still learn something 
new when I give some side notes or explain things  
20:35 - from a different perspective and you can even 
control if you want to speed up the videos if  
20:40 - you are a bit impatient like me you can also trick 
your progress like this which may be some extra  
20:45 - motivation in the learning process and last but 
not least a very important part of the course is  
20:52 - the accompanying group to the course where you get 
support from us if you have any questions during  
20:58 - the learning process but also a place where you 
can exchange with other students of the course  
21:04 - so with this I'm already super excited to 
welcome you in our it beginners course you  
21:10 - can check more details in the video description 
and of course you can write us anytime if you  
21:15 - have any questions that I haven't answered here so 
with that thank you and see you in the next video

Cleaned transcript:

Hi guys If you're watching this video it probably means that you want to start a career in this highly demanded IT field maybe you want to get into DevOps and that's how you came across my content maybe you want to get into software development or Cloud engineering and you've seen our python course or Docker full course as your first step into it but whatever field you choose this IT beginners course or kind of a mini bootcamp that we created will be the foundation knowledge you need to enter this seemingly overwhelming Tech world I know that when you're at the very beginning of an IT Journey it can be extremely overwhelming I receive questions from many of you about not knowing where to start what to learn first there are so many options so many IT fields and professions there is so much to learn and often you don't even know where to start if you're transitioning from another career you may be even thinking will it pay off? am I too late to start my it career? because there's so much to learn I can never catch up with those who already started at an early age many of you have also asked me how to get into devops field specifically without an IT background and I've explained in some of my other videos that starting into devops without any it preknowledge is very difficult because you need to first learn the fundamentals of the software development and release life cycle to even understand why devops is relevant and why we want to use any of the devops concepts and tools in software development projects and I understand all of these concerns the selfdoubt the time pressure insecurity Etc and that's exactly why I created this course I have structured and planned out this course with the main goal to make your Learning Journey into IT easy and fun completely dissolve the fear and insecurity of software development being so hard to understand I have structured it to teach you exactly what you need to build a strong solid foundation and focus on the most important Concepts understanding the complete process of software development life cycle and every step of it which is something many Junior Engineers with a couple of years of work experience may not even fully understand so I focus on giving you a lot of very important and sometimes even Advanced knowledge but in a super easily digestible manner I have broken down every complex topic into simple explanations so that at no point in the course you will feel overwhelmed by the content or have trouble understanding something and that as I said was my absolute priority when creating this course and if you follow the course without skipping any parts take time to do all the demo projects along with me by end of the course you'll have an exceptional Foundation knowledge to build on whatever IT specialization you choose to follow but if you choose to go into devops specifically this course will actually be the perfect entry to get you prepared for transitioning into devops since we made it as a perfect prerequisite course to our devops bootcamp so the combination of these two programs will take you from literally zero IT experience or knowledge to your very first devops engineer job and if you do choose this path I'll be very happy and honored to help you and accompany you on this journey now let's see what we will actually learn throughout this course for that you need to First understand that in IT there is something called a software development life cycle it's basically the complete process of developing and releasing a software all the way from planning to development testing packaging and running it on a configured server to make it available for the end users each of these steps are done by various roles like a developer tester systems administrator product owner Etc and we are simulating this entire process in an example software development project covering various roles and going through what each role does and how they work together so we will plan the project on a scrum board we'll create a Sprint we will program the application as a full stack developer with frontend backend and database for data persistence we will then write automated tests for our code we will then package it into an application artifact and after that we will create a virtual server on a cloud platform and prepare the server for running our application on it as a server administrator role and finally we deploy the application artifact on that server and make our application available publicly from a browser and of course along the way we'll learn all the relevant concepts and tools of each of those tasks we took our time structuring this course perfectly to include exactly the right amount of knowledge to pick the most important core concepts and explain them with engaging animations and examples without rushing into things we'll be taking time to learn every important underlying concept and more importantly understand all the whys in the process and of course the best way to learn anything is by doing it yourself so we will practice all steps with HandsOn projects and that's why I mentioned this is also kind of a mini boot camp considering the scope of things you learn now what does this course give you that you can't get in other courses or even boot camps well my goal with the course was to give you an equivalent of Junior developers work experience now of course if we take Junior developer who has been programming for a year that's a lot of coding practice so they will have more knowledge in coding specifically that you have to catch up but here is where it gets really interesting very often Junior developers with even two years of experience have knowledge gaps and miss knowledge in some parts of the software development life cycle and this is true in most cases how do I know? because I was a junior software developer myself once and I know many of my developer friends had the same issue so you know how to program frontend how to program in backend you can make connections to database so you can work with parts of things that have been set up already and basically do the small tasks in the project but most Junior developers have not set up the project from scratch like frontend backend database they haven't learned the concepts of why we are using a JavaScript framework why are we using libraries what's the comparison why are we using package Manager Tools what are the best practices there what's the underlying concept of all of this how do I connect front and to backend why do I have to connect my front end to backend and then database and what's even more how do I take the application that I just developed package it and deployed on a remote server how do I even create a virtual server what about installing packages on an operating system package manager tools and operating systems what is all that why do we need them and how they work and finally why do we use Jira boards what's scrum agile how the whole workflow actually works and why are software development projects using it so these are all knowledge gaps and whys of every step of the software development life cycle which really makes you understand the underlying Concepts because when you start at a tool level or a technology level you know how to use the technology and its features but you don't always know why you are using them you just join a project and start working with what they have set up already but nobody explains to you really what the purpose of each tool and technology used in the project is or the reason why they are using this workflow and when you have a clear understanding of those whys and a big picture of the software development life cycle trust me you have a solid foundation that many beginner Engineers will envy and when you start working you will not feel like you need much hand holding from your team they will be actually amazed to how good of an understanding you have of their processes for a beginner engineer now of course you will have to learn new tools and practice programming learn new concepts Etc because being in IT is an ongoing learning process but for each new concept or tool that you'll have to learn you will have some kind of tie points and connections on your knowledge base so you will be able to easily retain the knowledge because you have a point this new information can tie into with knowledge gaps and holes you may miss much information and get overwhelmed because you don't know where they fit as a junior I actually learned too many things things that I didn't necessarily need but I didn't know exactly what was relevant and what wasn't and I didn't know in which order I needed to learn those things either so it took me longer to learn certain things and understand the big picture because I wasn't always learning the right things at the right time it's like putting the puzzle pieces together without knowing what you're actually Building without having the end picture so it takes you longer and only once you get close to completing the puzzle you start actually understanding the picture oh that's what I've been building this whole time good to know versus having the picture as a road map and guide from the very beginning plus by learning the right things in right order will let you get the necessary knowledge in shorter period because you learn exactly what you need in a compressed curriculum and you're not wasting any time and that's exactly what we are achieving with this course so this allaround knowledge of Concepts and roles that covers the entire software development life cycle is very rare because most courses usually focus on one specific part of this life cycle and not the whole picture so it's very rare but extremely valuable and this can actually put your head even a lot of Junior engineer who have more work experience than you do so let's see in detail what you will learn in this course we will start with the first part of the software development life cycle which is planning first we start by setting up a Jira board for a scrum project and learn about concepts of agile scrum and how to work on a scrum project with Jira and we will be developing and working with a web application called Teamable as a practice project for the entire software development lifecycle process once the first development tasks are planned in in the second chapter we will start with the development part of the software development life cycle and learn how to develop a web application first we'll learn JavaScript basics syntax and concepts of course we will then learn HTML and CSS and create an example web application with HTML CSS and JavaScript to practice using them together during this process we will learn about code editors how to use them as well as how to make use of the browser's developer tools which help immensely when creating web applications troubleshooting them etc so that's a very useful and valuable skill to have equipped with this knowledge we will then create the first version of the Teamable application frontend with HTML CSS and vanilla JavaScript after that we will learn about JavaScript Frameworks and one popular JavaScript framework specifically called VueJS we will build an example VueJS project and once we've learned how to use vue.js we will replace the vanilla JavaScript of our Teamable application with vue.js framework and in the process we will see exactly why Frameworks are good and what benefits they bring and in that process we'll also learn a very important concept of versioning applications frameworks programming languages with that we will have the front end of our web application developed with HTML CSS and vue.js now it's time to create a backend for our frontend application so we'll learn why we need this construct of frontend and backend in web applications at all how the communication and connection between those work on a high level and all the concepts involved in this we'll start by learning a backhand JavaScript framework called node.js and create an example web server application with it we will also learn about libraries why we need them and how to use them we will learn about npm package repositories modules how to install packages for an application etc we will also learn the core building blocks of the web itself such as HTTP protocol https ports IP addresses URLs and how are they relevant in the software development life cycle and once we've learned all these concepts as well as how to use node.js to write web server applications we will implement the backend for our Teamable application once we have frontend and backend we will connect our application to a database to persist data so first we will learn generally about databases different types of databases and their usages and for our application we will use mongodb database specifically so we'll learn how to install and configure mongodb database and connect our backend application to it and with that we'll have a fully functioning web application with frontend backend and database where users can now make updates in our application that will be persisted in the database so this completes the development part of the software development life cycle and brings us to the next section which is testing so we will learn all about application testing and test automation different types of testing and their purposes and for our Teamable application we will write unit tests and integration tests to see how it actually works in practice then we move on to the next part of the software development lifecycle which is application release in this scope we will learn how to package an application and more importantly why we need to create a package or application artifact and then comes an extremely important part of understanding the server Basics learning the concepts of servers operating systems Cloud platforms how to create a virtual machine on a cloud platform and so on as part of the operating system's Basics we will also learn about command line package managers how to install packages and software on an operating system like Mac OS windows and Linux concept of SSH and securing access to servers and I explain all of this by often giving comparisons between Mac OS windows and Linux operating systems so you learn this on a high level not just specifically for One OS equipped with this knowledge we will then go ahead and create a Linux Ubuntu Server machine on a cloud platform we will learn how to connect to it install packages on it and so on so basically preparing our server for the deployment we will then get our application package and run it on our configured server in this scope we will also learn about firewalls securing our server about the different deployment environments for an application like development testing staging production and what is the purpose of each of these environments so this completes the whole process of developing and deploying the first version of our application but we won't stop there because the life cycle continues so we will simulate completing our first Sprint and planning the next one in which we will learn how to secure a database and configure access to it in our node.js application using environment variables this teaches you an important concept and skill of configuring an application for multiple deployment environments with this new application changes we will release the second version of our Teamable application on our deployment server and finally in the last chapter we will learn the concept of collaborating on application development and working on code using a version control system like Git first we will learn generally why Version Control tools are needed and then we will of course learn using git in practice with our Teamable project and this will fully complete your broad skill set of essential Concepts and tools in the whole software development lifecycle here I want to point out one thing that's very important to me throughout the course I teach you things to enable and empower you to then go and do similar things independently so when we install things for example instead of giving you some commands you just copy and execute blindly I teach you how to use and follow official documentations of those tools to install them like I or any senior engineer would actually do in practice in their regular job so I teach you the concepts as well so you can apply them to any other similar use case and not just what we learn in this specific course and this should give you confidence and dissolve the fear of doing such things in practice by yourself now if all this sounds a lot for you don't worry because my team and I have put a lot of work and effort to make sure this course is the most informative and valuable but also most fun and engaging course out there to get you started in IT I have broken down every complex topic into simple explanations so that at no point in the course you will feel overwhelmed by the content or have trouble understanding something so this should make it very clear that this is not just a coding course or a coding bootcamp because they are focusing on the programming part only because that's their main focus and objective to teach you software development while we in this course are focusing on going through each part of the life cycle understanding the process of complete software development and release life cycle now let's talk about what's included in the course first of all the core part is the videos which are mostly handsOn demos often with accompanying explanations and whenever a new concept is taught I break it down in a simple manner with lots of helpful animations we also created human translated English subtitles for the entire course in each lecture we have also added all the relevant links commands and repositories where you can access the code that I show in the demos so every video will be accompanied with any relevant code from that video with all of this it should make it very easy to follow the demos the course is carefully planned in a specific order to give you the full understanding of different parts so to really make the most out of this course you should actually follow it without skipping any parts even if you already have some preknowledge in any of the areas you may still learn something new when I give some side notes or explain things from a different perspective and you can even control if you want to speed up the videos if you are a bit impatient like me you can also trick your progress like this which may be some extra motivation in the learning process and last but not least a very important part of the course is the accompanying group to the course where you get support from us if you have any questions during the learning process but also a place where you can exchange with other students of the course so with this I'm already super excited to welcome you in our it beginners course you can check more details in the video description and of course you can write us anytime if you have any questions that I haven't answered here so with that thank you and see you in the next video
