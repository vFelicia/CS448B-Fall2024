With timestamps:

00:00 - let's go ahead and create a Jenkins file
00:02 - in dev branch and I'm gonna do that
00:05 - using the get UI so let's go to dev and
00:10 - I'm gonna create a new file and this is
00:15 - the most basic Jenkins file that
00:18 - basically does nothing but this is the
00:20 - basic syntax we're going to go through a
00:23 - Jenkins file syntax in more detail in a
00:27 - later section but here I'm gonna explain
00:29 - you the required attributes for Jenkins
00:31 - file so the first thing is that Jenkins
00:34 - file can be written as a scripted
00:36 - pipeline or a declarative pipeline so
00:40 - the scripted pipeline was the first
00:42 - syntax of Jenkins file so what it is is
00:45 - basically it allows to write the whole
00:47 - configuration of the Jenkins file using
00:50 - groovy script so the only structure that
00:54 - you have there is this here and inside
00:58 - of this is basically groovy scripts and
01:01 - you can write the whole configuration
01:03 - here in a flexible manner as you wish so
01:07 - there is no predefined structure there
01:10 - however for people who didn't know or
01:12 - doesn't know groovy syntax or who hasn't
01:16 - worked with groovy is little bit
01:18 - difficult to start with that's why as a
01:21 - recent addition they actually edit
01:23 - declarative pipeline syntax from Jenkins
01:26 - file which is easier to get started with
01:29 - it has of course it's not as powerful as
01:31 - the scripted pipeline because here
01:33 - you're not limited in any way but it's
01:36 - easier to get started with because you
01:39 - have a predefined structure so this what
01:42 - you see here is basically pre given
01:45 - structure that you have to follow but
01:47 - again you don't have to think about how
01:48 - to script all this so you just fill in
01:51 - the gaps so what we saw here the note
01:56 - definition is basically same as these
01:59 - two lines here so in a declarative
02:02 - pipeline you declare that you are
02:04 - writing a pipeline and agent any
02:06 - basically means that this build is gonna
02:09 - run on any available Jenkins agent and
02:13 - agent can be a note it could be
02:15 - executors on that note whatever and this
02:18 - is more relevant when you have a Jenkins
02:21 - cluster so to say with master and slaves
02:24 - where you have Windows nodes and Linux
02:27 - nodes etc but here for the beginning for
02:30 - base we just say agent any so we'll just
02:33 - run with the next available agent and as
02:36 - I said these two are equivalent to this
02:38 - one here and they are required
02:41 - attributes you always have to use them
02:43 - the next required attribute is stages
02:46 - and this is where the whole work
02:48 - actually happens so you have different
02:50 - stages of that pipeline and inside the
02:53 - stages you define stage name and you can
02:57 - define as many stages as you want
03:00 - usually you have something like this so
03:03 - you have a build stage let's get rid of
03:06 - this one actually have a build stage
03:08 - maybe you have a test stage and then you
03:10 - have a deploy stage like this you can
03:18 - have additional ones like for example
03:20 - you might have a check out stage stage
03:22 - here and I don't know cleanup stage
03:25 - afterwards whatever and as you see
03:29 - inside the stage you have the steps and
03:32 - here goes the script that actually
03:36 - executes some comment on the Jenkins
03:40 - server or Jenkins agent so for example
03:43 - if you're building a JavaScript
03:45 - application all the NPM install NPM
03:49 - build etc scripts will go here like this
03:55 - if you are you know running tests or for
03:59 - Java back-end all the text execution
04:02 - scripts will be here and the deployment
04:04 - script will be here so right now let's
04:07 - just write simple echo comments to kind
04:10 - of test this so here we're gonna say
04:13 - building the application
04:18 - and here we're gonna say testing the
04:22 - application in here we are deploying the
04:28 - application and this is a very Jenkins
04:32 - file and this should work already
04:34 - so let's actually now we committed it
04:43 - and let's go back to our pipeline and
04:47 - let's scan it again and see the locks
04:52 - and it's doing something so as you see
04:55 - here it found Jenkins file in dev and
04:59 - now it's actually executing the Jenkins
05:03 - file right here so if I go back to my
05:07 - pipeline view I already see the first
05:09 - branch was built and that's a dev branch
05:13 - let's go inside and see the first
05:16 - execution so what happened here the
05:20 - first step that you see is check out the
05:24 - code the second one was built test
05:29 - deploy and here you can see the logs and
05:32 - this is what we echoed in each stage
05:38 - testing the application etc so now the
05:41 - question is where did this come from
05:43 - so this stage is something we didn't
05:45 - define before and it basically checks
05:48 - out the code so how does this happen
05:51 - this actually comes from let's go back
05:54 - to my pipeline and configure this
05:57 - actually comes from this one right here
06:00 - so by defining or by configuring that we
06:03 - want git repository with this URL to be
06:06 - checked out
06:07 - we basically in UI declaring that we
06:11 - want that checkout stage to happen right
06:14 - so it automatically adds to the pipeline
06:17 - stage now you could do that in your
06:21 - Jenkins file instead of configuring it
06:24 - in the pipeline configuration but I
06:27 - actually prefer to have that step
06:29 - configured in the pipeline
06:31 - you eye configuration so this is the
06:34 - result of Jenkins file execution and
06:36 - here inside of that branch configuration
06:39 - you also have some options like where
06:42 - you can build the branch manually and
06:45 - see the configuration but at this point
06:47 - it's important to note that most of the
06:50 - configuration will be done in Jenkins
06:52 - file or on the pipeline level in the
06:55 - configure mask so right here and not on
06:59 - the individual branch level so you
07:03 - wouldn't be doing anything here that's
07:05 - why you can only see the configuration
07:07 - but not edit the configuration
07:10 - so now what if you want to test some
07:14 - stuff or some changes in a Jenkins file
07:17 - let's say add one of the steps you want
07:20 - to test some groovy expression and you
07:23 - are new to groovy so you're just
07:25 - learning and you just want to try this
07:27 - out and it will be more effort to you
07:30 - know adjust the Jenkins filed and commit
07:32 - it and you know it has to check out
07:34 - again the changes and rebuild it again
07:37 - etc so there is actually a handy way to
07:40 - do that in Jenkins so we can test and
07:44 - execute the Jenkins file changes without
07:48 - having to commit each change so the way
07:52 - to do that is go to one of the branches
07:55 - so let's say in the dev and here you
07:58 - have the history of the build and if you
08:01 - click inside one of those builds and
08:04 - here you have a bunch of options and one
08:07 - of them is replay and what replay does
08:10 - is basically allows you to adjust the
08:13 - last run jenkins file and rerun it again
08:17 - so here let's say i want to try some
08:20 - groovy expression so the thing is in
08:24 - this inside the steps you can only write
08:27 - the command line comments so if you want
08:30 - to try it or if you want to execute
08:32 - groovy script then you have to enclose
08:37 - it inside script so script will be one
08:41 - of the steps so here you can have echo I
08:45 - delete it again
08:46 - so building the application and inside
08:50 - script we can write some groovy
08:53 - expression so let's say let's just write
08:58 - something whatever so if this is true
09:02 - then we're gonna say cool if not no not
09:06 - cool and then I'm gonna echo this and
09:12 - let's run
09:18 - okay so it's building now and here if I
09:24 - open this I see filling the application
09:26 - and the new message so when now we
09:30 - tested the changes in the Jenkins file
09:32 - without having to actually commit it to
09:35 - the repository
09:39 - another thing that you can do with the
09:42 - specific build is also so if you click
09:45 - on this triangle you actually see all
09:47 - this commands as well replace there but
09:50 - you can also do restart from stage so if
09:54 - you click here you see a list a drop
09:56 - down list of all the stages that you
09:58 - have defined so if one of the stages
10:00 - fails or I don't know you need to repeat
10:02 - this stage again you can actually choose
10:05 - one of the stages without having to
10:07 - repeat all the other
10:08 - so let's actually choose the deploy and
10:11 - if I run in again you see you will skip
10:14 - the previous stages and just do the last
10:19 - one which also could be pretty handy
10:22 - sometimes

Cleaned transcript:

let's go ahead and create a Jenkins file in dev branch and I'm gonna do that using the get UI so let's go to dev and I'm gonna create a new file and this is the most basic Jenkins file that basically does nothing but this is the basic syntax we're going to go through a Jenkins file syntax in more detail in a later section but here I'm gonna explain you the required attributes for Jenkins file so the first thing is that Jenkins file can be written as a scripted pipeline or a declarative pipeline so the scripted pipeline was the first syntax of Jenkins file so what it is is basically it allows to write the whole configuration of the Jenkins file using groovy script so the only structure that you have there is this here and inside of this is basically groovy scripts and you can write the whole configuration here in a flexible manner as you wish so there is no predefined structure there however for people who didn't know or doesn't know groovy syntax or who hasn't worked with groovy is little bit difficult to start with that's why as a recent addition they actually edit declarative pipeline syntax from Jenkins file which is easier to get started with it has of course it's not as powerful as the scripted pipeline because here you're not limited in any way but it's easier to get started with because you have a predefined structure so this what you see here is basically pre given structure that you have to follow but again you don't have to think about how to script all this so you just fill in the gaps so what we saw here the note definition is basically same as these two lines here so in a declarative pipeline you declare that you are writing a pipeline and agent any basically means that this build is gonna run on any available Jenkins agent and agent can be a note it could be executors on that note whatever and this is more relevant when you have a Jenkins cluster so to say with master and slaves where you have Windows nodes and Linux nodes etc but here for the beginning for base we just say agent any so we'll just run with the next available agent and as I said these two are equivalent to this one here and they are required attributes you always have to use them the next required attribute is stages and this is where the whole work actually happens so you have different stages of that pipeline and inside the stages you define stage name and you can define as many stages as you want usually you have something like this so you have a build stage let's get rid of this one actually have a build stage maybe you have a test stage and then you have a deploy stage like this you can have additional ones like for example you might have a check out stage stage here and I don't know cleanup stage afterwards whatever and as you see inside the stage you have the steps and here goes the script that actually executes some comment on the Jenkins server or Jenkins agent so for example if you're building a JavaScript application all the NPM install NPM build etc scripts will go here like this if you are you know running tests or for Java backend all the text execution scripts will be here and the deployment script will be here so right now let's just write simple echo comments to kind of test this so here we're gonna say building the application and here we're gonna say testing the application in here we are deploying the application and this is a very Jenkins file and this should work already so let's actually now we committed it and let's go back to our pipeline and let's scan it again and see the locks and it's doing something so as you see here it found Jenkins file in dev and now it's actually executing the Jenkins file right here so if I go back to my pipeline view I already see the first branch was built and that's a dev branch let's go inside and see the first execution so what happened here the first step that you see is check out the code the second one was built test deploy and here you can see the logs and this is what we echoed in each stage testing the application etc so now the question is where did this come from so this stage is something we didn't define before and it basically checks out the code so how does this happen this actually comes from let's go back to my pipeline and configure this actually comes from this one right here so by defining or by configuring that we want git repository with this URL to be checked out we basically in UI declaring that we want that checkout stage to happen right so it automatically adds to the pipeline stage now you could do that in your Jenkins file instead of configuring it in the pipeline configuration but I actually prefer to have that step configured in the pipeline you eye configuration so this is the result of Jenkins file execution and here inside of that branch configuration you also have some options like where you can build the branch manually and see the configuration but at this point it's important to note that most of the configuration will be done in Jenkins file or on the pipeline level in the configure mask so right here and not on the individual branch level so you wouldn't be doing anything here that's why you can only see the configuration but not edit the configuration so now what if you want to test some stuff or some changes in a Jenkins file let's say add one of the steps you want to test some groovy expression and you are new to groovy so you're just learning and you just want to try this out and it will be more effort to you know adjust the Jenkins filed and commit it and you know it has to check out again the changes and rebuild it again etc so there is actually a handy way to do that in Jenkins so we can test and execute the Jenkins file changes without having to commit each change so the way to do that is go to one of the branches so let's say in the dev and here you have the history of the build and if you click inside one of those builds and here you have a bunch of options and one of them is replay and what replay does is basically allows you to adjust the last run jenkins file and rerun it again so here let's say i want to try some groovy expression so the thing is in this inside the steps you can only write the command line comments so if you want to try it or if you want to execute groovy script then you have to enclose it inside script so script will be one of the steps so here you can have echo I delete it again so building the application and inside script we can write some groovy expression so let's say let's just write something whatever so if this is true then we're gonna say cool if not no not cool and then I'm gonna echo this and let's run okay so it's building now and here if I open this I see filling the application and the new message so when now we tested the changes in the Jenkins file without having to actually commit it to the repository another thing that you can do with the specific build is also so if you click on this triangle you actually see all this commands as well replace there but you can also do restart from stage so if you click here you see a list a drop down list of all the stages that you have defined so if one of the stages fails or I don't know you need to repeat this stage again you can actually choose one of the stages without having to repeat all the other so let's actually choose the deploy and if I run in again you see you will skip the previous stages and just do the last one which also could be pretty handy sometimes
