With timestamps:

00:00 - let's talk about GitHub co-pilot is it
00:02 - really this super revolutionary tool
00:05 - that makes you work as a software
00:08 - engineer or Cloud devops engineer and so
00:10 - on way easier way faster or in some
00:14 - cases even replace the Need For
00:16 - Engineers is it really as good and what
00:19 - are some of the common use cases of
00:22 - using GitHub copilot and in this case
00:24 - we're going to be specifically focused
00:27 - on the work of cloud and devops
00:28 - engineers and even compare that to
00:31 - GitHub copilot's value and usage for
00:34 - software development so let's get
00:36 - started first of all what is GitHub
00:38 - copilot well in very simple words it's
00:41 - an AI assistant for coding that means
00:45 - giup copilot is used in a code editor or
00:49 - in an integrated development environment
00:51 - like Visual Studio code intellig so any
00:54 - kind of IDs where you integrate GitHub
00:56 - copilot and it helps you write the code
01:00 - within the editor so compared to cat GPT
01:02 - for example we have cgp in a browser so
01:05 - you have to switch from your code Editor
01:08 - to the browser to type in your request
01:11 - and it gives you some code with
01:14 - explanations in this case you have that
01:16 - AI tool integrated within the editor so
01:19 - you don't have to leave your Editor to
01:21 - get the replies and get the code
01:23 - suggestions and so on and the way GitHub
01:25 - copilot works is that it has way more
01:28 - context than ched GPT for example that
01:31 - means that it actually takes your code
01:35 - your existing code whatever you have
01:37 - written and whatever you're writing as a
01:39 - context to answer your questions and
01:43 - also very important to know that the
01:44 - context that gets uploaded and sent to
01:47 - GitHub co-pilot is not your entire
01:50 - workspace because you may have hundreds
01:52 - of code files that may not be relevant
01:55 - for whatever you're asking so usually
01:58 - whatever you have open in your editor
02:00 - currently so you may have 5 10 20 files
02:03 - that you're working on currently in the
02:05 - editor plus you have the file that is
02:07 - currently open where you're working
02:09 - inside so it takes all of that as a
02:12 - context assuming these files and the
02:15 - code inside are relevant for your
02:16 - current question because that's exactly
02:18 - what you're working on right now and
02:20 - this edit context is actually a huge
02:22 - Advantage because you don't need to
02:24 - provide the entire context to co-pilot
02:27 - you can just say give me whatever for
02:29 - this high Ed code or give me whatever
02:31 - for my entire workspace or code base so
02:34 - how does GitHub copilot work behind the
02:36 - scenes GitHub copilot actually uses an
02:39 - open AI large language model behind the
02:41 - scenes and it's been trained with
02:44 - billions of lines of code and text like
02:48 - code explanations that are publicly
02:50 - available so based on that large amount
02:53 - of data it can give you suggestions
02:55 - based on the best practices and so on in
02:57 - addition to just replying to your
02:59 - request when you explicitly ask
03:01 - something from GitHub copilot it
03:03 - actually gives you code suggestions
03:05 - itself so when you start typing out your
03:08 - code it actually gives you kind of auto
03:11 - complete Suggestions by trying to
03:13 - predict what you're going to write and
03:15 - again as I said because it has all the
03:17 - context if you already have an project
03:19 - that you are working on so you're not
03:21 - just starting from the blank page and
03:23 - the first file it actually takes
03:25 - whatever you have open as a context and
03:28 - based on that it will try to
03:30 - guess okay this is what you're trying to
03:32 - do next and it will give you code
03:34 - suggestions based on that it will even
03:36 - give you comment suggestions with the
03:38 - entire block of code for example if
03:40 - you're creating is2 instances and you
03:42 - have that configuration inside it may
03:44 - suggest you to create Security Group
03:47 - with firewall configuration for those E2
03:50 - instances for example if it detects that
03:52 - you don't have Security Group
03:53 - configuration yet so it tries to guiz
03:57 - and give you suggestions what you should
03:59 - write in the code now and this is a very
04:02 - important part there is one small
04:04 - problem with GitHub copilot which we're
04:07 - going to see later and that is that it's
04:09 - not up toate for coding or programming
04:12 - specifically GitHub copilot actually is
04:15 - way more helpful than for writing
04:17 - infrastructure as code however as I said
04:19 - there are still some use cases and some
04:21 - advantages of using GitHub copilot even
04:23 - for infrastructure as code scenarios and
04:26 - we're going to see both sides in the
04:28 - demo so we're going to see the usage how
04:30 - it helps and how it may help in writing
04:32 - code but also limitations of GitHub
04:36 - copilot so we're going to see kind of
04:38 - both sides in the demo so let's go
04:40 - directly to the demo and let's see how
04:42 - it all works and in the demo we're going
04:44 - to be using GitHub co-pilot obviously
04:47 - with Visual Studio code and for the
04:49 - infrastructure as code tool we're going
04:51 - to be using pumi with the Python
04:54 - language now if you're new to pumi or
04:57 - python I actually have very detailed
04:59 - tutorial on both of them separately so
05:02 - you can watch them first and then come
05:03 - back to this one so as a first step of
05:06 - course let's get our prerequisites right
05:09 - and let's do all the setup that we need
05:11 - in order to have everything installed
05:13 - everything up and running and ready for
05:16 - our demo projects and this is everything
05:19 - that we need for our demos first of all
05:21 - we need our AWS account I'm logged in as
05:25 - an admin user and I'm going to be
05:27 - creating infrastructure in in this
05:30 - specific region you can choose whatever
05:32 - region you want so we need AWS Cloud
05:34 - platform because we're going to be
05:36 - creating infrastructure here with our
05:38 - infrastructure as code project we also
05:40 - need pumi installed locally because
05:43 - we're going to be executing a pumi
05:44 - project with pomi commands and you can
05:47 - very easily install or download it by
05:50 - following their installation guide for
05:53 - whatever operating system you have I
05:54 - have mechos and I'm actually going to
05:56 - use the package manager to install it
05:58 - you can also downlo download a binary
06:00 - and just install it with a graphical
06:02 - user interface so whatever operating
06:05 - system you have whatever installation
06:07 - option you want you can use it to have
06:10 - pumi installed locally so I don't have
06:13 - pumi yet so I'm going to install
06:17 - it using Brew package
06:22 - manager and installation was successful
06:25 - let's validate it by executing a pumi
06:27 - command so let's do pumi version and
06:30 - this is the version that I have just
06:32 - installed as I mentioned with palumi you
06:35 - can actually choose whatever programming
06:36 - language you want to work with and in
06:38 - our case we're going to go with python
06:40 - and again if you're new to either plumi
06:42 - or python I have separate extensive
06:45 - videos on both topics so you can go
06:47 - ahead and watch those separately if you
06:50 - want to learn them properly first so
06:52 - since we're going to be using python for
06:54 - palumi we also need to have python
06:56 - installed locally and actually have
06:58 - python version 3 already
07:02 - available if you don't have it again
07:05 - just a simple install Python 3 search
07:07 - will give you the download guide on the
07:10 - official documentation for whatever
07:12 - operating system you have so you can
07:14 - download it as a binary and just install
07:16 - it easily like this we're also going to
07:18 - need Visual Studio code that's where
07:20 - we're going to be writing our code and
07:22 - this is where we're going to integrate
07:24 - GitHub co-pilot to actually help us in
07:27 - writing the code in our editor just
07:29 - search search for it here's a download
07:31 - guide and again choose a download for
07:33 - your operating system and install it
07:35 - locally and the final thing that we're
07:37 - going to need is of course the GitHub
07:39 - co-pilot itself so the way we're going
07:41 - to get this is first we're going to need
07:44 - a GitHub account so if you don't have
07:46 - one just sign up in GitHub it's free
07:49 - it's easy so just register and I'm
07:51 - actually going to look for GitHub
07:53 - co-pilot here so we're going to get to
07:55 - the link directly there you go and if I
07:58 - click on get started with
08:00 - co-pilot you see different payment
08:04 - options so of course as an individual
08:06 - engineer you don't need a business or
08:08 - Enterprise license so we can go for the
08:11 - individual one and this one actually has
08:13 - a 30-day free trial which is great
08:16 - because it gives you enough time to
08:18 - actually play around with the tool and
08:19 - decide if it's actually worth the
08:21 - investment if it really makes you
08:23 - productive in your work or not so that
08:26 - means you can follow this tutorial along
08:28 - completely free using a free trial so
08:30 - I'm going to choose this one as well and
08:33 - now we're going to sign into to our
08:35 - GitHub account I'm going to authenticate
08:38 - and there you go and here's an
08:39 - interesting note that GitHub copilot is
08:42 - actually completely free so you don't
08:44 - need to even pay the individual license
08:46 - if you are an open source maintainer
08:48 - teacher a student which they check on a
08:51 - monthly basis so if you are one of those
08:54 - you can actually use GitHub pilot for
08:56 - free so I'm going to click on get access
08:58 - to GitHub pilot
09:00 - and we're going to select a couple of
09:02 - options here regarding the policies so
09:05 - the first configuration option lets you
09:07 - control whether GitHub co-pilot can
09:10 - generate code suggestions that match
09:14 - code found in public repositories on
09:17 - GitHub so private repositories on GitHub
09:19 - or any other repositories outside of
09:21 - GitHub will not be considered here and
09:24 - if you allow this when copilot gives
09:26 - that code snippet that matches some code
09:29 - on the public repository on GitHub it
09:31 - will also provide you with details about
09:34 - the matching code like any license
09:36 - identified for the repository as well as
09:40 - the source for the code and so on in our
09:43 - case actually let's allow this one and
09:45 - the second option allows you to decide
09:49 - whether the prompts that you give GitHub
09:51 - copilot to generate code for you plus
09:55 - the context that GitHub copilot takes to
09:58 - reply to your question questions whether
10:00 - you want all of that to be collected and
10:02 - retained by GitHub and processed further
10:07 - as well as shared with Microsoft because
10:09 - as I mentioned the context is basically
10:12 - what gets sent up to GitHub server so
10:15 - that co-pilot can use that reach context
10:18 - to give you a better more precise repli
10:21 - and with this option you can decide
10:22 - whether GitHub can retain that context
10:24 - that was uploaded and process it to
10:27 - improve the co-pilot even more
10:29 - now this can be an important security
10:32 - consideration especially if you're
10:33 - developing an application which is
10:36 - private for your organization or maybe
10:39 - you have developers that are hardcoding
10:42 - some secret information or sensitive
10:44 - information in the code or you are
10:47 - basically testing out and adding the API
10:50 - keys or whatever sensitive information
10:51 - directly into the code maybe for local
10:54 - testing not even for pushing it to the
10:56 - remote repository so that may be send as
10:59 - part of the code Snippets So based on
11:02 - that you can decide whether you want to
11:04 - reject and make sure GitHub doesn't keep
11:07 - any of this data and doesn't process it
11:09 - or you can decide to allow it in my case
11:12 - I'm going to allow it because this is
11:13 - just a test project and all the codes
11:16 - inside can be sent and retained by
11:19 - GitHub save and complete setup and we
11:23 - have this confetti flowing down because
11:26 - we have successfully activated GitHub
11:28 - co-pilot how however we need to use
11:31 - GitHub co-pilot in our code editor
11:33 - because the co-pilot is going to help us
11:35 - write code right so we need it directly
11:38 - integrated in our IDE in this case
11:41 - Visual Studio code and we have these
11:43 - options that we can choose from so I'm
11:45 - going to choose this one and it jumps
11:47 - into the stepbystep guide of how to
11:51 - integrate it in Visual Studio code so
11:54 - all we need from this documentation is
11:56 - this section here so we have all the
11:58 - prerequisites
11:59 - everything is activated and in place so
12:02 - right now all it's left to do is to go
12:04 - to visual studio code find the GitHub
12:07 - compilot extension install it and we're
12:09 - going to be good to go so basically
12:11 - these six steps is all we need to
12:14 - activate GitHub copilot in Visual Studio
12:16 - code so I'm going to go to the
12:17 - extensions and look for GitHub
12:23 - co-pilot and there you go this is the
12:25 - official one from GitHub itself so let's
12:28 - install
12:30 - it we need to sign in GitHub co-pilot as
12:33 - is also mentioned in the documentation
12:35 - so let's do
12:38 - that we're going to authorize Visual
12:40 - Studio code to access our co-pilot and
12:44 - that's
12:46 - it our GitHub co-pilot extension is
12:50 - installed so now when we start writing
12:54 - our infrastructure as code for
12:56 - provisioning ad infrastructure we're
12:58 - going to have cop directly integrated
13:00 - into our editor so we can use it for our
13:03 - demos awesome so everything is set up
13:05 - for us to start the demo so as a first
13:08 - step let's create a new pumi project
13:10 - using pumi CLI so to initialize a new
13:15 - project in the co-pilot pumi folder
13:19 - we're going to execute pumi new and
13:23 - we're going to give pumi kind of a
13:24 - template or what we are trying to create
13:26 - here as we learned pumi supports multi
13:29 - multiple programming languages in our
13:30 - case we want to create a python project
13:33 - which is going to build infrastructure
13:35 - on AWS so the template name will be AWS
13:39 - Python and you can actually look up all
13:41 - the pumi
13:47 - templates when you're running pomi new
13:50 - Command right here in the GitHub
13:52 - repository so the one we're using is AWS
13:56 - python so let's go ahead and execute
13:59 - with
14:00 - this and this is actually a very
14:02 - convenient way to provision everything
14:04 - that pomi needs for the configuration
14:07 - instead of writing everything from
14:08 - scratch so the first thing we're going
14:10 - to do is an exess token from pumi so of
14:14 - course we need to authenticate that this
14:15 - is our palumi account that we're using
14:17 - and palumi also has a really nice UI
14:19 - where you can track all your projects
14:21 - and infrastructure configurations that
14:23 - you
14:25 - create that looks like this with the
14:28 - dashboard and project and STS and so on
14:31 - and in the personal exess tokens we're
14:33 - going to create a new token and we're
14:35 - going to call
14:37 - these also awf
14:44 - Python and we just provided here so now
14:48 - we're going to configure the project
14:50 - details let's call the project Co pilot
14:54 - palumi take the default project
14:57 - description stack name
14:59 - we can leave it at Dev and AWS region to
15:03 - deploy into I'm going to choose EU West
15:07 - 2 which is London region you can choose
15:10 - whatever is closest to
15:13 - you and as you see pumi is actually
15:16 - doing all the main configuration behind
15:19 - the scenes and let's see what we get as
15:21 - a
15:21 - result awesome so the project was
15:24 - initialized and because this is a python
15:27 - project it actually created a python
15:29 - virtual environment where all our
15:32 - libraries will
15:34 - be downloaded for the python project it
15:38 - also created this boilerplate python
15:41 - code for
15:42 - palumi it gave us the configuration for
15:45 - the dev stack or development environment
15:47 - basically and some other stuff plus
15:51 - because we specified that we want to
15:53 - provision infrastructure on the AWS
15:56 - Cloud platform it actually automatically
15:58 - included the plumi AWS Library which
16:01 - we're going to use to create different
16:03 - resources on AWS which we're using right
16:06 - here so all this boilerplate code
16:08 - basically that we need for the project
16:11 - was provisioned automatically which is
16:13 - pretty convenient and as I said the
16:16 - requirements.txt which is like a
16:17 - dependencies file for a python project
16:20 - so all of that was downloaded
16:22 - automatically cool so now we want to
16:25 - finally see GitHub copilot in action
16:27 - right so how do we use GitHub copilot
16:31 - well first of all if we create a new
16:33 - file in our
16:35 - project and let's call it test. python
16:40 - doesn't matter you see that immediately
16:41 - the first line is a prompt to ask GitHub
16:44 - compiler to help you write code and
16:47 - using this shortcut which is command
16:49 - shift I on Mech or whatever shortcut you
16:53 - get displayed in another operating
16:55 - system you can use this chat to ask
16:57 - GitHub copilot for something or you can
17:00 - use it inline using command I like this
17:04 - or if you don't like shortcuts you can
17:05 - just open GitHub copilot chat right here
17:08 - so you always have this on the left side
17:11 - to fix your code issues or explain the
17:14 - code that was written Maybe by other
17:15 - developer and so on so let's actually
17:19 - use GitHub copilot for some really
17:21 - simple examples let's remove this and
17:25 - this is a boiler plate that P generated
17:27 - which is just creating an est3 bucket so
17:29 - let's ask GitHub co-pilot to give us
17:32 - code that generates 10 buckets in a loop
17:35 - for
17:38 - example create 10 as3 buckets with
17:41 - unique names let's see what we
17:50 - get and it actually generated this code
17:53 - in a for Loop which is a python syntax
17:56 - to generate those buckets in in a loop
17:59 - and each one will get some unique name
18:01 - and let's say we want to replace this
18:04 - whole code block with this one you can
18:06 - just click here and here we have a new
18:08 - code block now let's say when you're
18:11 - coding and writing your infrastructure
18:13 - configuration file maybe you don't
18:15 - always want to go to the chat generate
18:18 - something copy that code paste it in a
18:21 - more convenient way to work in your code
18:24 - editor while you're writing code is
18:26 - actually to use inline GitHub copilot
18:29 - suggestions right and the most
18:31 - convenient option is actually code
18:33 - suggestions so if I clean all this up I
18:37 - can write a comment here just a simple
18:39 - comment that says create 10
18:44 - S3
18:45 - buckets with unique names and if I hit
18:50 - enter you see that it auto suggests the
18:55 - code and
18:57 - again
19:00 - which is pretty much same as here or
19:02 - similar and now let's say we want to
19:04 - keep writing configuration for other
19:07 - components of infrastructure let's say
19:08 - create five ec2 instances for my web
19:16 - application and we have the whole
19:18 - suggestion for that configuration
19:20 - sometimes you get multiple suggestions
19:21 - in this case both of them look pretty
19:23 - similar just a small difference and
19:26 - whichever one you like you click on
19:28 - accept right here or you can just hit on
19:30 - the tab and it fills in the entire
19:33 - configuration and let's say right here
19:35 - we want to use another instance type
19:38 - instead of T2
19:39 - micro use T2 small instance type and
19:44 - gives a new one here we have an Ami
19:47 - which is usually an ID that we need to
19:49 - go to AWS and look it up to define a
19:52 - value here so here again let's ask get
19:56 - up co-pilot to actually use an auntu
19:58 - operating system instead of the Amazon
20:00 - Linux Ami and we actually have two
20:03 - suggestions and if I switch the second
20:06 - one it says use Ubuntu
20:10 - 18.04 and if I delete that it will give
20:13 - me a suggestion for the Ubuntu Ami which
20:17 - would be very convenient because I don't
20:19 - have to look up Ami in the AWS console
20:22 - so as you see we can control the flow
20:25 - and what co-pilot suggests us using the
20:28 - comments let's do one more thing which
20:31 - is right here as you see it uses S3 from
20:34 - palumi AWS library but it didn't import
20:38 - ec2 so let's actually ask this to import
20:43 - S3 and ec2 modules from pulumi aw's
20:48 - package and if I delete that we get both
20:51 - and of course you can remove the
20:53 - comments that are kind of cluttering the
20:55 - code and only use them to get
20:57 - suggestions from GitHub copilot so as
21:00 - you see with the simple demonstration
21:02 - the main benefit or the use case of
21:04 - GitHub copilot just like any other AI
21:07 - code assistant is to let you program
21:11 - with a human language or in this case
21:13 - English language and let GTH up copilot
21:16 - give you the actual code for that
21:21 - logic now this may look really cool and
21:25 - it is in most cases however there is a
21:27 - huge drawback of GitHub copilot used in
21:32 - practice for writing infrastructure as
21:34 - code projects and that is that it's
21:37 - outdated so basically the latest state
21:40 - of giup co-pilot code for most of the
21:42 - languages most of the information that
21:44 - it knows about is from September 2021
21:48 - and that is a pretty old date
21:50 - considering the speed of technological
21:54 - developments every infrastructure as
21:56 - code language or tool develops really
21:59 - fast so you have new libraries
22:01 - improvements every couple of month that
22:03 - are being released so 2021 is actually a
22:06 - very old State and we can even ask
22:09 - co-pilot
22:18 - itself what the last date of its
22:21 - information is as you see this is
22:23 - September
22:24 - 2021 and the information since then has
22:28 - obvious L
22:29 - changed and because of that we're
22:31 - getting this older version of auntu as
22:33 - well as the older Ami image from Amazon
22:38 - right so if I check to versions
22:42 - obviously we have new versions here
22:45 - Ubuntu has released two major versions
22:47 - since then so this Ami will be outdated
22:51 - and of course in our infrastructure we
22:53 - don't want to be provisioning servers
22:56 - with outdated operating system
22:58 - versions and images that will be a very
23:01 - bad practice and I also want to mention
23:03 - one very important distinction between
23:06 - using GitHub copilot for programming as
23:08 - a software developer and using GitHub
23:11 - co-pilot for infrastructure provisioning
23:14 - because programming languages like
23:16 - python Java JavaScript whatever these
23:18 - programming languages are way more
23:20 - established and the functions and
23:22 - libraries and so on they don't change as
23:25 - much and as frequently compared to a
23:29 - relatively new infrastructure as code
23:31 - tools like palumi terraform obviously
23:34 - improvements are made way faster and a
23:36 - lot more is going on in that area and
23:39 - because of that it's way more
23:40 - challenging to use GitHub copilot for
23:42 - infrastructure as code projects because
23:45 - the chances of functions or attributes
23:48 - or libraries being outdated is way
23:50 - higher here so that is a very important
23:52 - distinction when analyzing GitHub
23:55 - co-pilot's value in each category and
23:58 - that means if you are devops engineer or
24:01 - Cloud engineer that is automating stuff
24:03 - you want to use GitHub cor pilot it
24:05 - definitely helps with spitting up the
24:08 - code however overall you will probably
24:11 - have to double check and reference the
24:13 - upto-date documentation for each
24:15 - configuration option so that is a huge
24:18 - disadvantage of GitHub copilot right now
24:20 - which is that it's outdated so now
24:23 - considering this limitation of GitHub
24:26 - co-pilot let's still see in what other
24:29 - use cases we can use GitHub compil to
24:31 - actually get some value out of it so I'm
24:34 - going to clean this up and let's do one
24:37 - more thing here so what I'm going to do
24:39 - is I'm going to create a temporary file
24:42 - here which is going to include terraform
24:46 - code which creates a VPC and eks cluster
24:50 - and let's say in our scenario we want to
24:53 - migrate a project from terraform to pumi
24:55 - we already have a project that
24:58 - Provisions configures infrastructure
25:00 - that is written in terraform but we want
25:02 - to migrate it to pumi so we can ask
25:05 - GitHub copilot to actually help us do
25:08 - the translation from terraform to pumi
25:11 - code so this is a simple script that
25:13 - basically creates a VPC for the cluster
25:16 - by defining the private subnet public
25:18 - subnet and so on and then it creates an
25:21 - eks module in that VPC with some simple
25:25 - configuration such as one node group
25:28 - with this instance type and so on so
25:32 - let's ask our GitHub co-pilot first of
25:35 - all to explain whatever is written right
25:41 - here so let's say we don't know
25:42 - terraform as well we are trying to
25:45 - migrate a project that somebody else
25:47 - wrote in the team to palomi so we want
25:49 - to ask GitHub copilot to explain that
25:51 - code first so we know exactly what it's
25:53 - doing and GitHub pilot we can use de and
25:58 - one of the commands basically that
26:01 - references the workspace that means it
26:05 - takes our entire workspace as a context
26:08 - for giving us the answer so we're going
26:11 - to ask it to explain the
26:15 - highlighted
26:17 - terraform
26:19 - code in
26:27 - detail
26:30 - and it gave us a breakdown of what we're
26:34 - provisioning we need to set this varable
26:36 - value somewhere they were retrieving the
26:39 - as's from the current
26:42 - region that in the eks configuration
26:45 - we're enabling public access to the
26:49 - cluster which is right here as well as
26:53 - disabling of cluster and node security
26:56 - groups so it will be using the default
26:58 - ones and again you can ask it to go into
27:01 - details and explain each and every
27:02 - attribute so you can understand the code
27:05 - which I believe is one of the really
27:08 - good use cases of co-pilot because very
27:10 - often you're going to be working with a
27:12 - code that looks very complex that has
27:14 - become complex over time but because you
27:17 - are seeing it for the first time and you
27:20 - didn't write it yourself it may be a
27:22 - huge help if you let G UPC pilot
27:25 - basically analyze the whole thing and
27:27 - tell you what's happening there so now
27:29 - we're going to ask co-pilot to
27:32 - translate this entire terraform
27:41 - code into pumi python code with the
27:46 - exact same
27:49 - configuration for creating VPC and eks
27:55 - cluster and let's see what we get
28:03 - and another very important note is that
28:06 - if you are following this demo and you
28:08 - ask co-pilot the same thing you will
28:11 - most probably get something completely
28:13 - different you will even get different
28:15 - answers every time you ask the same
28:17 - question so it basically comes up with a
28:19 - new answer on each question means you
28:22 - can't expect that kind of consistency
28:24 - which has both advantages and
28:26 - disadvantages obviously but let's see
28:29 - our pumi code and then we also have some
28:32 - explanation here that says it does the
28:34 - same thing as terraform code we provided
28:36 - we have the same instance type the
28:39 - capacities of the node somehow it took
28:42 - the cus version 1.21 because that's the
28:45 - last version that co-pilot actually
28:47 - knows of it doesn't know that kis
28:49 - cluster version is I believe at this
28:51 - point at 1.29 already so now we can
28:55 - actually move this code into the python
28:58 - file and also notice the follow-up
29:01 - question that it suggests itself so we
29:04 - notice that we're not creating security
29:06 - groups for VPC and E cluster and it
29:09 - suggests us to addit configuration so if
29:12 - I click on this it will actually give us
29:14 - the configuration for that as
29:26 - well that we can and add additionally in
29:29 - our configuration so let's see what it
29:31 - gave us it's creating a new Security
29:33 - Group in the VPC which is always a good
29:36 - practice to create new components
29:38 - because when you tear down your
29:40 - infrastructure using your infrastructure
29:42 - as code project you can cleanly delete
29:45 - everything basically and then it adds a
29:49 - rule to the security group it basically
29:51 - opens a incoming Port 80 and it
29:54 - references that Security Group in the
29:56 - cluster and it gives us uses another
29:58 - followup which is for configuring load
30:00 - balancers in the E cluster so basically
30:03 - it will give you more and more
30:05 - suggestions to try to be helpful but as
30:08 - I said you have to be aware that every
30:11 - configuration that you get here
30:13 - generated by co-pilot you will have to
30:16 - validate because as I said the huge
30:19 - drawback is that it's outdated and we
30:22 - obviously don't want to use outdated
30:24 - configuration plus when we execute it it
30:27 - may not actually work work because some
30:28 - attributes some libraries will be
30:30 - outdated Etc and one obvious one is the
30:33 - kubernetes version that it's using right
30:35 - here kubernetes 1.21 is probably not
30:38 - even supported on AKs anymore so very
30:42 - important to be aware of this and that
30:44 - also means that if you are a
30:47 - non-experienced engineer cloud or devops
30:49 - engineer co-pilot may help you in
30:52 - explaining some stuff and giving you a
30:54 - boiler plate but you will have to still
30:57 - do the work of
30:58 - understanding what the configuration
30:59 - does and actually going and validating
31:02 - against the official documentation to
31:03 - make sure that it's working another
31:06 - example is that GitHub copilot is
31:09 - actually using the eks module from the
31:11 - pumi AWS package however pumi has
31:14 - actually a new package called pumi EAS
31:17 - which is actually a preferred and also
31:20 - easier way of provisioning a cluster so
31:24 - GitHub copilot is not using this one so
31:27 - again as I said you need to be aware and
31:29 - you need to actually know the tool
31:32 - itself because GitHub copilot is not a
31:34 - replacement of your knowledge it's
31:36 - literally just to help you speed up your
31:39 - working process while you have all the
31:41 - knowledge and that's why it's also
31:43 - called co-pilot and not a pilot because
31:46 - you still are the pilot and you have to
31:48 - have the knowledge and know exactly what
31:51 - you're trying to achieve and use G up
31:53 - copilot in very specific area so it's
31:56 - not going to replace lot of your work it
31:59 - may just speed up some of the processes
32:02 - and I can also demonstrate that actually
32:04 - if we execute this code without making
32:07 - any changes and we're going to execute
32:09 - Puli up so as I explain in my separate
32:13 - pulumi tutorial pumi actually uses the
32:17 - AWS credential configured by default so
32:19 - either if you do AWS configure command
32:22 - or if you export the AWS environment
32:24 - variable for exess key and secret key I
32:26 - already have
32:29 - my AWS credentials configured here so
32:32 - that's what pumi will actually use when
32:35 - I execute POI up so let's see if this
32:39 - configuration is even working and if it
32:42 - will succeed to provision the cluster
32:45 - with this
32:46 - configuration so we got our first
32:49 - error now for working with pumi
32:52 - specifically there is actually another
32:54 - AI tool that will be more helpful in
32:57 - this this case then co-pilot which is
33:00 - palumi AI itself so palumi has this AI
33:03 - tool that you can use basically for the
33:06 - same purpose of asking it questions to
33:09 - give you a configuration a palumi
33:12 - configuration for a specific
33:14 - infrastructure provisioning need which
33:16 - is also very convenient because you
33:18 - don't have to dig in the official
33:19 - documentation to put together a more
33:22 - complex configuration and po UI actually
33:25 - has a more upto-date state of
33:28 - information then GitHub copilot I
33:30 - believe the latest state of pumi AI is
33:33 - the information from end of
33:35 - 2023 so it's definitely more up to dat
33:39 - so let's actually ask pomi AI to create
33:43 - eks cluster with let's do two node
33:49 - groups one node group with 3 T2
33:55 - micro type second node group with T2
34:00 - small type let's say instances and let's
34:06 - see what we get
34:14 - here and this actually looks better
34:17 - because as I mentioned palumi eks is a
34:19 - new or relatively new library that has
34:22 - better cluster defaults when creating
34:24 - any case cluster and we got our desired
34:28 - configuration code for Python language
34:30 - specifically with additional
34:32 - explanations so here we have three nodes
34:36 - of T2 micro it also just automatically
34:39 - set the minimum and maximum size of the
34:42 - instance within the node group for
34:45 - autoscaling basically and here it gave
34:47 - us two T2 small instances so as I said
34:51 - pumi AI is actually very good if you're
34:53 - working with pumi specifically to give
34:55 - you proper configuration very fast which
34:58 - is more up to date than
35:00 - co-pilot and here we got an error that
35:04 - VAR is not defined which is true because
35:07 - this was actually left over from
35:09 - terraform so let's actually
35:12 - ask co-pilot to give us proper tags like
35:18 - this
35:18 - one let's remove
35:25 - this so we can control these either with
35:28 - comment or we can just start typing and
35:30 - it tries to fill in the
35:34 - information so I'm going to remove this
35:37 - and there you go also you see that we
35:40 - have a couple of other issues here that
35:42 - it's just creating one subnet instead of
35:44 - multiple ones so
35:46 - again comparing these two configurations
35:50 - you see that this is actually pretty up
35:52 - to dat and I would probably have to
35:54 - rewrite the entire configuration to get
35:56 - it to work while one and also to be more
35:59 - upto-date like using the more upto-date
36:01 - library that configures all the defaults
36:04 - in the background automatically for me
36:06 - instead of using this configuration
36:08 - especially if I'm writing an
36:10 - infrastructure from scratch I would
36:12 - either reference an official
36:14 - documentation or for pumi specifically
36:17 - get some help from pumi AI as well and
36:19 - there is one last thing that I want to
36:22 - show you that you can do with GitHub
36:24 - copilot and visual studio code which is
36:28 - another type of use case for AI code
36:31 - assistants which is a voice assistant we
36:34 - can speak our Command into the editor
36:37 - and co-pilot will give us reply based on
36:40 - that and this probably is not the most
36:42 - common use case but I think it's a
36:44 - really cool one I can't imagine that you
36:46 - would use this at work if you're sitting
36:48 - with a bunch of other people just
36:50 - talking to your laptop and giving it
36:52 - commands so maybe use case for a home
36:55 - office however if you have a very Comm
36:57 - complex scenario or logic that you want
37:00 - to describe to your GitHub copilot and
37:03 - you don't want to type it out and you
37:06 - kind of want to explain it in a speech
37:08 - then this could be a really cool feature
37:11 - so let's try this out and I want to
37:13 - mentioned here that GitHub actually did
37:15 - create an extension for co-pilot using a
37:19 - voice command but they discontinued it
37:21 - recently so GitHub itself doesn't have
37:23 - that functionality however we can
37:26 - use any an extension called Visual
37:30 - Studio code
37:35 - speech this is the
37:37 - one from
37:40 - Microsoft so this was installed and now
37:44 - if I go back to the chat you will see
37:46 - this audio icon appeared or a microphone
37:50 - icon appeared inside the co-pilot chat
37:53 - so now I can use this to actually
37:56 - dictate my command to co-pilot so let's
37:59 - try this out for our last demo and I'm
38:01 - going to ask you to create an e cluster
38:03 - again with three node groups and I'm
38:05 - going to explain the configuration for
38:07 - each node group and let's see what we
38:09 - get create an eks cluster with three
38:12 - node groups the first node group should
38:14 - have two desired instances with T2 micro
38:17 - type and the second node group should
38:19 - have three instances with t small
38:23 - instance type the third node group
38:25 - should have four desired instances with
38:27 - t to medium instance
38:38 - type so let's see what we got we got our
38:41 - cluster again with an older version and
38:44 - we get three node group configurations
38:46 - with the desired attributes that I asked
38:49 - for and now I'm going to ask it the
38:51 - suggestion that I get here which is
38:54 - configure autoscaling for all three e
38:57 - node
39:03 - groups and again as I said the
39:06 - limitation of co-pilot of not having
39:09 - upto-date codee documentation is a big
39:12 - minus here however if you are an already
39:15 - experienced engineer there are
39:16 - definitely some use cases where you can
39:19 - use GitHub copilot to help you in
39:22 - writing your infrastructure code and
39:24 - finally to make sure that we at least
39:26 - have some configuration that's working
39:29 - I'm going to use the code from pumi Ai
39:33 - and as you see we don't have to create
39:34 - VPC or subnets here because this new pum
39:38 - e Library actually has the default
39:40 - configurations for the eeks that it
39:43 - creates automatically in the background
39:44 - so we could create a cluster without our
39:47 - own VPC configuration just to get a
39:49 - cluster up and running
39:53 - faster and let's save this and I will
39:59 - execute the code with pull me
40:02 - up and obviously we get an error because
40:05 - P case was not installed and there is
40:07 - also this feature in GitHub copilot that
40:11 - tells you or explains to you the output
40:14 - in the terminal so if I click on this it
40:17 - actually will tell me why this error
40:21 - happened and here is giving me an output
40:23 - to install plumi and this is not using
40:27 - the peep 3 the latest version again bit
40:30 - outdated so to install um pumi eks
40:33 - library in our virtual environment of
40:35 - course we're going to activate the
40:38 - virtual environment first and here we're
40:41 - going to use pep three and not peep to
40:46 - install pul case Library let's do
40:51 - that and run pumi up
40:56 - again so after executing pull me up
41:00 - command you see that our stack was
41:02 - created and then all the resources
41:05 - inside the stack like cluster resources
41:09 - behind the scenes like the cluster and
41:10 - node groups and as I said these pomi
41:13 - actually in the background creates all
41:15 - the necessary roles and permissions for
41:17 - the cluster as well as security groups
41:19 - and
41:21 - VPC Etc so we don't need to specify
41:23 - those here are our note groups
41:29 - both of them with T2 micro and T2 small
41:33 - and pumi doesn't execute or provision
41:36 - everything automatically instead it
41:38 - gives us a preview of what will get
41:40 - created which resources so you see this
41:43 - breakdown of infrastructure resources
41:46 - that will be created even though we have
41:48 - just defined the high level components
41:50 - so that's a good overview to have of
41:53 - what's going to happen on our AWS
41:55 - platform and also in case the
41:58 - configuration is wrong or some
42:00 - attributes are not defined properly of
42:03 - course it's going to give you an error
42:04 - instead of this successful preview so in
42:07 - our case we can either confirm and we
42:10 - can say yes please go ahead and create
42:12 - all this stuff listed in the preview or
42:15 - we can say no we just wanted to sit the
42:17 - preview so we don't want to actually
42:19 - provision anything on the infrastructure
42:21 - so I'm going to cancel it because we
42:22 - just confirmed that our configuration
42:24 - worked and this was our GitHub copilot d
42:27 - with palumi I can understand that it can
42:30 - be a little bit disappointing When
42:32 - You're Expecting this super powerful
42:34 - awesome AI assistant that's going to
42:36 - change your life as an engineer which in
42:39 - our case as you saw is not the case
42:42 - again specifically for tools that are
42:45 - being developed and improved very
42:48 - quickly so a state two or three years
42:51 - ago is already going to be super out of
42:54 - date but I hope that I was still able to
42:56 - give you some insight of the usability
42:59 - and value of GitHub co-pilots as well as
43:01 - kind of compare it to usage in different
43:03 - engineering roles and kind of give you
43:06 - an overview of its features that g
43:09 - copilot offers that you can use in your
43:11 - editor please let me know if you have
43:14 - worked with getup copilot or any other
43:16 - AI assistant tool what is your
43:18 - experience with it and have you been
43:20 - able to extract a real value out of
43:23 - using it or generally which AI tools are
43:26 - you using using in your projects please
43:28 - share it in the comments for me but also
43:30 - for other viewers because I'm sure that
43:33 - a lot of people will be interested to
43:34 - see various use cases from other
43:37 - Engineers as well and with that thank
43:39 - you for watching and see you in the next
43:41 - video

Cleaned transcript:

let's talk about GitHub copilot is it really this super revolutionary tool that makes you work as a software engineer or Cloud devops engineer and so on way easier way faster or in some cases even replace the Need For Engineers is it really as good and what are some of the common use cases of using GitHub copilot and in this case we're going to be specifically focused on the work of cloud and devops engineers and even compare that to GitHub copilot's value and usage for software development so let's get started first of all what is GitHub copilot well in very simple words it's an AI assistant for coding that means giup copilot is used in a code editor or in an integrated development environment like Visual Studio code intellig so any kind of IDs where you integrate GitHub copilot and it helps you write the code within the editor so compared to cat GPT for example we have cgp in a browser so you have to switch from your code Editor to the browser to type in your request and it gives you some code with explanations in this case you have that AI tool integrated within the editor so you don't have to leave your Editor to get the replies and get the code suggestions and so on and the way GitHub copilot works is that it has way more context than ched GPT for example that means that it actually takes your code your existing code whatever you have written and whatever you're writing as a context to answer your questions and also very important to know that the context that gets uploaded and sent to GitHub copilot is not your entire workspace because you may have hundreds of code files that may not be relevant for whatever you're asking so usually whatever you have open in your editor currently so you may have 5 10 20 files that you're working on currently in the editor plus you have the file that is currently open where you're working inside so it takes all of that as a context assuming these files and the code inside are relevant for your current question because that's exactly what you're working on right now and this edit context is actually a huge Advantage because you don't need to provide the entire context to copilot you can just say give me whatever for this high Ed code or give me whatever for my entire workspace or code base so how does GitHub copilot work behind the scenes GitHub copilot actually uses an open AI large language model behind the scenes and it's been trained with billions of lines of code and text like code explanations that are publicly available so based on that large amount of data it can give you suggestions based on the best practices and so on in addition to just replying to your request when you explicitly ask something from GitHub copilot it actually gives you code suggestions itself so when you start typing out your code it actually gives you kind of auto complete Suggestions by trying to predict what you're going to write and again as I said because it has all the context if you already have an project that you are working on so you're not just starting from the blank page and the first file it actually takes whatever you have open as a context and based on that it will try to guess okay this is what you're trying to do next and it will give you code suggestions based on that it will even give you comment suggestions with the entire block of code for example if you're creating is2 instances and you have that configuration inside it may suggest you to create Security Group with firewall configuration for those E2 instances for example if it detects that you don't have Security Group configuration yet so it tries to guiz and give you suggestions what you should write in the code now and this is a very important part there is one small problem with GitHub copilot which we're going to see later and that is that it's not up toate for coding or programming specifically GitHub copilot actually is way more helpful than for writing infrastructure as code however as I said there are still some use cases and some advantages of using GitHub copilot even for infrastructure as code scenarios and we're going to see both sides in the demo so we're going to see the usage how it helps and how it may help in writing code but also limitations of GitHub copilot so we're going to see kind of both sides in the demo so let's go directly to the demo and let's see how it all works and in the demo we're going to be using GitHub copilot obviously with Visual Studio code and for the infrastructure as code tool we're going to be using pumi with the Python language now if you're new to pumi or python I actually have very detailed tutorial on both of them separately so you can watch them first and then come back to this one so as a first step of course let's get our prerequisites right and let's do all the setup that we need in order to have everything installed everything up and running and ready for our demo projects and this is everything that we need for our demos first of all we need our AWS account I'm logged in as an admin user and I'm going to be creating infrastructure in in this specific region you can choose whatever region you want so we need AWS Cloud platform because we're going to be creating infrastructure here with our infrastructure as code project we also need pumi installed locally because we're going to be executing a pumi project with pomi commands and you can very easily install or download it by following their installation guide for whatever operating system you have I have mechos and I'm actually going to use the package manager to install it you can also downlo download a binary and just install it with a graphical user interface so whatever operating system you have whatever installation option you want you can use it to have pumi installed locally so I don't have pumi yet so I'm going to install it using Brew package manager and installation was successful let's validate it by executing a pumi command so let's do pumi version and this is the version that I have just installed as I mentioned with palumi you can actually choose whatever programming language you want to work with and in our case we're going to go with python and again if you're new to either plumi or python I have separate extensive videos on both topics so you can go ahead and watch those separately if you want to learn them properly first so since we're going to be using python for palumi we also need to have python installed locally and actually have python version 3 already available if you don't have it again just a simple install Python 3 search will give you the download guide on the official documentation for whatever operating system you have so you can download it as a binary and just install it easily like this we're also going to need Visual Studio code that's where we're going to be writing our code and this is where we're going to integrate GitHub copilot to actually help us in writing the code in our editor just search search for it here's a download guide and again choose a download for your operating system and install it locally and the final thing that we're going to need is of course the GitHub copilot itself so the way we're going to get this is first we're going to need a GitHub account so if you don't have one just sign up in GitHub it's free it's easy so just register and I'm actually going to look for GitHub copilot here so we're going to get to the link directly there you go and if I click on get started with copilot you see different payment options so of course as an individual engineer you don't need a business or Enterprise license so we can go for the individual one and this one actually has a 30day free trial which is great because it gives you enough time to actually play around with the tool and decide if it's actually worth the investment if it really makes you productive in your work or not so that means you can follow this tutorial along completely free using a free trial so I'm going to choose this one as well and now we're going to sign into to our GitHub account I'm going to authenticate and there you go and here's an interesting note that GitHub copilot is actually completely free so you don't need to even pay the individual license if you are an open source maintainer teacher a student which they check on a monthly basis so if you are one of those you can actually use GitHub pilot for free so I'm going to click on get access to GitHub pilot and we're going to select a couple of options here regarding the policies so the first configuration option lets you control whether GitHub copilot can generate code suggestions that match code found in public repositories on GitHub so private repositories on GitHub or any other repositories outside of GitHub will not be considered here and if you allow this when copilot gives that code snippet that matches some code on the public repository on GitHub it will also provide you with details about the matching code like any license identified for the repository as well as the source for the code and so on in our case actually let's allow this one and the second option allows you to decide whether the prompts that you give GitHub copilot to generate code for you plus the context that GitHub copilot takes to reply to your question questions whether you want all of that to be collected and retained by GitHub and processed further as well as shared with Microsoft because as I mentioned the context is basically what gets sent up to GitHub server so that copilot can use that reach context to give you a better more precise repli and with this option you can decide whether GitHub can retain that context that was uploaded and process it to improve the copilot even more now this can be an important security consideration especially if you're developing an application which is private for your organization or maybe you have developers that are hardcoding some secret information or sensitive information in the code or you are basically testing out and adding the API keys or whatever sensitive information directly into the code maybe for local testing not even for pushing it to the remote repository so that may be send as part of the code Snippets So based on that you can decide whether you want to reject and make sure GitHub doesn't keep any of this data and doesn't process it or you can decide to allow it in my case I'm going to allow it because this is just a test project and all the codes inside can be sent and retained by GitHub save and complete setup and we have this confetti flowing down because we have successfully activated GitHub copilot how however we need to use GitHub copilot in our code editor because the copilot is going to help us write code right so we need it directly integrated in our IDE in this case Visual Studio code and we have these options that we can choose from so I'm going to choose this one and it jumps into the stepbystep guide of how to integrate it in Visual Studio code so all we need from this documentation is this section here so we have all the prerequisites everything is activated and in place so right now all it's left to do is to go to visual studio code find the GitHub compilot extension install it and we're going to be good to go so basically these six steps is all we need to activate GitHub copilot in Visual Studio code so I'm going to go to the extensions and look for GitHub copilot and there you go this is the official one from GitHub itself so let's install it we need to sign in GitHub copilot as is also mentioned in the documentation so let's do that we're going to authorize Visual Studio code to access our copilot and that's it our GitHub copilot extension is installed so now when we start writing our infrastructure as code for provisioning ad infrastructure we're going to have cop directly integrated into our editor so we can use it for our demos awesome so everything is set up for us to start the demo so as a first step let's create a new pumi project using pumi CLI so to initialize a new project in the copilot pumi folder we're going to execute pumi new and we're going to give pumi kind of a template or what we are trying to create here as we learned pumi supports multi multiple programming languages in our case we want to create a python project which is going to build infrastructure on AWS so the template name will be AWS Python and you can actually look up all the pumi templates when you're running pomi new Command right here in the GitHub repository so the one we're using is AWS python so let's go ahead and execute with this and this is actually a very convenient way to provision everything that pomi needs for the configuration instead of writing everything from scratch so the first thing we're going to do is an exess token from pumi so of course we need to authenticate that this is our palumi account that we're using and palumi also has a really nice UI where you can track all your projects and infrastructure configurations that you create that looks like this with the dashboard and project and STS and so on and in the personal exess tokens we're going to create a new token and we're going to call these also awf Python and we just provided here so now we're going to configure the project details let's call the project Co pilot palumi take the default project description stack name we can leave it at Dev and AWS region to deploy into I'm going to choose EU West 2 which is London region you can choose whatever is closest to you and as you see pumi is actually doing all the main configuration behind the scenes and let's see what we get as a result awesome so the project was initialized and because this is a python project it actually created a python virtual environment where all our libraries will be downloaded for the python project it also created this boilerplate python code for palumi it gave us the configuration for the dev stack or development environment basically and some other stuff plus because we specified that we want to provision infrastructure on the AWS Cloud platform it actually automatically included the plumi AWS Library which we're going to use to create different resources on AWS which we're using right here so all this boilerplate code basically that we need for the project was provisioned automatically which is pretty convenient and as I said the requirements.txt which is like a dependencies file for a python project so all of that was downloaded automatically cool so now we want to finally see GitHub copilot in action right so how do we use GitHub copilot well first of all if we create a new file in our project and let's call it test. python doesn't matter you see that immediately the first line is a prompt to ask GitHub compiler to help you write code and using this shortcut which is command shift I on Mech or whatever shortcut you get displayed in another operating system you can use this chat to ask GitHub copilot for something or you can use it inline using command I like this or if you don't like shortcuts you can just open GitHub copilot chat right here so you always have this on the left side to fix your code issues or explain the code that was written Maybe by other developer and so on so let's actually use GitHub copilot for some really simple examples let's remove this and this is a boiler plate that P generated which is just creating an est3 bucket so let's ask GitHub copilot to give us code that generates 10 buckets in a loop for example create 10 as3 buckets with unique names let's see what we get and it actually generated this code in a for Loop which is a python syntax to generate those buckets in in a loop and each one will get some unique name and let's say we want to replace this whole code block with this one you can just click here and here we have a new code block now let's say when you're coding and writing your infrastructure configuration file maybe you don't always want to go to the chat generate something copy that code paste it in a more convenient way to work in your code editor while you're writing code is actually to use inline GitHub copilot suggestions right and the most convenient option is actually code suggestions so if I clean all this up I can write a comment here just a simple comment that says create 10 S3 buckets with unique names and if I hit enter you see that it auto suggests the code and again which is pretty much same as here or similar and now let's say we want to keep writing configuration for other components of infrastructure let's say create five ec2 instances for my web application and we have the whole suggestion for that configuration sometimes you get multiple suggestions in this case both of them look pretty similar just a small difference and whichever one you like you click on accept right here or you can just hit on the tab and it fills in the entire configuration and let's say right here we want to use another instance type instead of T2 micro use T2 small instance type and gives a new one here we have an Ami which is usually an ID that we need to go to AWS and look it up to define a value here so here again let's ask get up copilot to actually use an auntu operating system instead of the Amazon Linux Ami and we actually have two suggestions and if I switch the second one it says use Ubuntu 18.04 and if I delete that it will give me a suggestion for the Ubuntu Ami which would be very convenient because I don't have to look up Ami in the AWS console so as you see we can control the flow and what copilot suggests us using the comments let's do one more thing which is right here as you see it uses S3 from palumi AWS library but it didn't import ec2 so let's actually ask this to import S3 and ec2 modules from pulumi aw's package and if I delete that we get both and of course you can remove the comments that are kind of cluttering the code and only use them to get suggestions from GitHub copilot so as you see with the simple demonstration the main benefit or the use case of GitHub copilot just like any other AI code assistant is to let you program with a human language or in this case English language and let GTH up copilot give you the actual code for that logic now this may look really cool and it is in most cases however there is a huge drawback of GitHub copilot used in practice for writing infrastructure as code projects and that is that it's outdated so basically the latest state of giup copilot code for most of the languages most of the information that it knows about is from September 2021 and that is a pretty old date considering the speed of technological developments every infrastructure as code language or tool develops really fast so you have new libraries improvements every couple of month that are being released so 2021 is actually a very old State and we can even ask copilot itself what the last date of its information is as you see this is September 2021 and the information since then has obvious L changed and because of that we're getting this older version of auntu as well as the older Ami image from Amazon right so if I check to versions obviously we have new versions here Ubuntu has released two major versions since then so this Ami will be outdated and of course in our infrastructure we don't want to be provisioning servers with outdated operating system versions and images that will be a very bad practice and I also want to mention one very important distinction between using GitHub copilot for programming as a software developer and using GitHub copilot for infrastructure provisioning because programming languages like python Java JavaScript whatever these programming languages are way more established and the functions and libraries and so on they don't change as much and as frequently compared to a relatively new infrastructure as code tools like palumi terraform obviously improvements are made way faster and a lot more is going on in that area and because of that it's way more challenging to use GitHub copilot for infrastructure as code projects because the chances of functions or attributes or libraries being outdated is way higher here so that is a very important distinction when analyzing GitHub copilot's value in each category and that means if you are devops engineer or Cloud engineer that is automating stuff you want to use GitHub cor pilot it definitely helps with spitting up the code however overall you will probably have to double check and reference the uptodate documentation for each configuration option so that is a huge disadvantage of GitHub copilot right now which is that it's outdated so now considering this limitation of GitHub copilot let's still see in what other use cases we can use GitHub compil to actually get some value out of it so I'm going to clean this up and let's do one more thing here so what I'm going to do is I'm going to create a temporary file here which is going to include terraform code which creates a VPC and eks cluster and let's say in our scenario we want to migrate a project from terraform to pumi we already have a project that Provisions configures infrastructure that is written in terraform but we want to migrate it to pumi so we can ask GitHub copilot to actually help us do the translation from terraform to pumi code so this is a simple script that basically creates a VPC for the cluster by defining the private subnet public subnet and so on and then it creates an eks module in that VPC with some simple configuration such as one node group with this instance type and so on so let's ask our GitHub copilot first of all to explain whatever is written right here so let's say we don't know terraform as well we are trying to migrate a project that somebody else wrote in the team to palomi so we want to ask GitHub copilot to explain that code first so we know exactly what it's doing and GitHub pilot we can use de and one of the commands basically that references the workspace that means it takes our entire workspace as a context for giving us the answer so we're going to ask it to explain the highlighted terraform code in detail and it gave us a breakdown of what we're provisioning we need to set this varable value somewhere they were retrieving the as's from the current region that in the eks configuration we're enabling public access to the cluster which is right here as well as disabling of cluster and node security groups so it will be using the default ones and again you can ask it to go into details and explain each and every attribute so you can understand the code which I believe is one of the really good use cases of copilot because very often you're going to be working with a code that looks very complex that has become complex over time but because you are seeing it for the first time and you didn't write it yourself it may be a huge help if you let G UPC pilot basically analyze the whole thing and tell you what's happening there so now we're going to ask copilot to translate this entire terraform code into pumi python code with the exact same configuration for creating VPC and eks cluster and let's see what we get and another very important note is that if you are following this demo and you ask copilot the same thing you will most probably get something completely different you will even get different answers every time you ask the same question so it basically comes up with a new answer on each question means you can't expect that kind of consistency which has both advantages and disadvantages obviously but let's see our pumi code and then we also have some explanation here that says it does the same thing as terraform code we provided we have the same instance type the capacities of the node somehow it took the cus version 1.21 because that's the last version that copilot actually knows of it doesn't know that kis cluster version is I believe at this point at 1.29 already so now we can actually move this code into the python file and also notice the followup question that it suggests itself so we notice that we're not creating security groups for VPC and E cluster and it suggests us to addit configuration so if I click on this it will actually give us the configuration for that as well that we can and add additionally in our configuration so let's see what it gave us it's creating a new Security Group in the VPC which is always a good practice to create new components because when you tear down your infrastructure using your infrastructure as code project you can cleanly delete everything basically and then it adds a rule to the security group it basically opens a incoming Port 80 and it references that Security Group in the cluster and it gives us uses another followup which is for configuring load balancers in the E cluster so basically it will give you more and more suggestions to try to be helpful but as I said you have to be aware that every configuration that you get here generated by copilot you will have to validate because as I said the huge drawback is that it's outdated and we obviously don't want to use outdated configuration plus when we execute it it may not actually work work because some attributes some libraries will be outdated Etc and one obvious one is the kubernetes version that it's using right here kubernetes 1.21 is probably not even supported on AKs anymore so very important to be aware of this and that also means that if you are a nonexperienced engineer cloud or devops engineer copilot may help you in explaining some stuff and giving you a boiler plate but you will have to still do the work of understanding what the configuration does and actually going and validating against the official documentation to make sure that it's working another example is that GitHub copilot is actually using the eks module from the pumi AWS package however pumi has actually a new package called pumi EAS which is actually a preferred and also easier way of provisioning a cluster so GitHub copilot is not using this one so again as I said you need to be aware and you need to actually know the tool itself because GitHub copilot is not a replacement of your knowledge it's literally just to help you speed up your working process while you have all the knowledge and that's why it's also called copilot and not a pilot because you still are the pilot and you have to have the knowledge and know exactly what you're trying to achieve and use G up copilot in very specific area so it's not going to replace lot of your work it may just speed up some of the processes and I can also demonstrate that actually if we execute this code without making any changes and we're going to execute Puli up so as I explain in my separate pulumi tutorial pumi actually uses the AWS credential configured by default so either if you do AWS configure command or if you export the AWS environment variable for exess key and secret key I already have my AWS credentials configured here so that's what pumi will actually use when I execute POI up so let's see if this configuration is even working and if it will succeed to provision the cluster with this configuration so we got our first error now for working with pumi specifically there is actually another AI tool that will be more helpful in this this case then copilot which is palumi AI itself so palumi has this AI tool that you can use basically for the same purpose of asking it questions to give you a configuration a palumi configuration for a specific infrastructure provisioning need which is also very convenient because you don't have to dig in the official documentation to put together a more complex configuration and po UI actually has a more uptodate state of information then GitHub copilot I believe the latest state of pumi AI is the information from end of 2023 so it's definitely more up to dat so let's actually ask pomi AI to create eks cluster with let's do two node groups one node group with 3 T2 micro type second node group with T2 small type let's say instances and let's see what we get here and this actually looks better because as I mentioned palumi eks is a new or relatively new library that has better cluster defaults when creating any case cluster and we got our desired configuration code for Python language specifically with additional explanations so here we have three nodes of T2 micro it also just automatically set the minimum and maximum size of the instance within the node group for autoscaling basically and here it gave us two T2 small instances so as I said pumi AI is actually very good if you're working with pumi specifically to give you proper configuration very fast which is more up to date than copilot and here we got an error that VAR is not defined which is true because this was actually left over from terraform so let's actually ask copilot to give us proper tags like this one let's remove this so we can control these either with comment or we can just start typing and it tries to fill in the information so I'm going to remove this and there you go also you see that we have a couple of other issues here that it's just creating one subnet instead of multiple ones so again comparing these two configurations you see that this is actually pretty up to dat and I would probably have to rewrite the entire configuration to get it to work while one and also to be more uptodate like using the more uptodate library that configures all the defaults in the background automatically for me instead of using this configuration especially if I'm writing an infrastructure from scratch I would either reference an official documentation or for pumi specifically get some help from pumi AI as well and there is one last thing that I want to show you that you can do with GitHub copilot and visual studio code which is another type of use case for AI code assistants which is a voice assistant we can speak our Command into the editor and copilot will give us reply based on that and this probably is not the most common use case but I think it's a really cool one I can't imagine that you would use this at work if you're sitting with a bunch of other people just talking to your laptop and giving it commands so maybe use case for a home office however if you have a very Comm complex scenario or logic that you want to describe to your GitHub copilot and you don't want to type it out and you kind of want to explain it in a speech then this could be a really cool feature so let's try this out and I want to mentioned here that GitHub actually did create an extension for copilot using a voice command but they discontinued it recently so GitHub itself doesn't have that functionality however we can use any an extension called Visual Studio code speech this is the one from Microsoft so this was installed and now if I go back to the chat you will see this audio icon appeared or a microphone icon appeared inside the copilot chat so now I can use this to actually dictate my command to copilot so let's try this out for our last demo and I'm going to ask you to create an e cluster again with three node groups and I'm going to explain the configuration for each node group and let's see what we get create an eks cluster with three node groups the first node group should have two desired instances with T2 micro type and the second node group should have three instances with t small instance type the third node group should have four desired instances with t to medium instance type so let's see what we got we got our cluster again with an older version and we get three node group configurations with the desired attributes that I asked for and now I'm going to ask it the suggestion that I get here which is configure autoscaling for all three e node groups and again as I said the limitation of copilot of not having uptodate codee documentation is a big minus here however if you are an already experienced engineer there are definitely some use cases where you can use GitHub copilot to help you in writing your infrastructure code and finally to make sure that we at least have some configuration that's working I'm going to use the code from pumi Ai and as you see we don't have to create VPC or subnets here because this new pum e Library actually has the default configurations for the eeks that it creates automatically in the background so we could create a cluster without our own VPC configuration just to get a cluster up and running faster and let's save this and I will execute the code with pull me up and obviously we get an error because P case was not installed and there is also this feature in GitHub copilot that tells you or explains to you the output in the terminal so if I click on this it actually will tell me why this error happened and here is giving me an output to install plumi and this is not using the peep 3 the latest version again bit outdated so to install um pumi eks library in our virtual environment of course we're going to activate the virtual environment first and here we're going to use pep three and not peep to install pul case Library let's do that and run pumi up again so after executing pull me up command you see that our stack was created and then all the resources inside the stack like cluster resources behind the scenes like the cluster and node groups and as I said these pomi actually in the background creates all the necessary roles and permissions for the cluster as well as security groups and VPC Etc so we don't need to specify those here are our note groups both of them with T2 micro and T2 small and pumi doesn't execute or provision everything automatically instead it gives us a preview of what will get created which resources so you see this breakdown of infrastructure resources that will be created even though we have just defined the high level components so that's a good overview to have of what's going to happen on our AWS platform and also in case the configuration is wrong or some attributes are not defined properly of course it's going to give you an error instead of this successful preview so in our case we can either confirm and we can say yes please go ahead and create all this stuff listed in the preview or we can say no we just wanted to sit the preview so we don't want to actually provision anything on the infrastructure so I'm going to cancel it because we just confirmed that our configuration worked and this was our GitHub copilot d with palumi I can understand that it can be a little bit disappointing When You're Expecting this super powerful awesome AI assistant that's going to change your life as an engineer which in our case as you saw is not the case again specifically for tools that are being developed and improved very quickly so a state two or three years ago is already going to be super out of date but I hope that I was still able to give you some insight of the usability and value of GitHub copilots as well as kind of compare it to usage in different engineering roles and kind of give you an overview of its features that g copilot offers that you can use in your editor please let me know if you have worked with getup copilot or any other AI assistant tool what is your experience with it and have you been able to extract a real value out of using it or generally which AI tools are you using using in your projects please share it in the comments for me but also for other viewers because I'm sure that a lot of people will be interested to see various use cases from other Engineers as well and with that thank you for watching and see you in the next video
