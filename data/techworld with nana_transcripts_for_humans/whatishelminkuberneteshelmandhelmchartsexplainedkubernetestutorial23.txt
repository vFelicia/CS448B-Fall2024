With timestamps:

00:00 - in this video I'm gonna explain all the
00:02 - main concepts of helm so that you're
00:05 - able to use it in your own projects also
00:07 - helm changes a lot from version to
00:09 - version
00:10 - so understanding the basic common
00:12 - principles and more importantly its use
00:14 - cases to when and why we use helm
00:17 - will make it easier for you to use it in
00:19 - practice no matter which version you
00:22 - choose so the topics I'm gonna go
00:24 - through in this video are helm and helm
00:26 - charts what they are how to use them and
00:29 - in which scenarios they're used and also
00:32 - what is tiller
00:33 - and what part it plays in the helm
00:35 - architecture so what is helm helm has a
00:39 - couple of main features that it's useful
00:41 - the first one is as a package manager
00:45 - for kubernetes so you can think of it as
00:47 - apt yum or home brewer for kubernetes so
00:51 - it's a convenient way for packaging
00:54 - collections of kubernetes DML files and
00:57 - distributing them in public and private
00:59 - registry now these definitions may sound
01:02 - a bit abstract so let's break them down
01:04 - with specific examples so let's say you
01:09 - have deployed your application in
01:10 - kubernetes cluster and you want to
01:13 - deploy elasticsearch additionally a new
01:15 - cluster that your application will use
01:18 - to collect its logs in order to deploy
01:23 - elastic stick in your kubernetes cluster
01:27 - you will need a couple of commands
01:29 - components so you would need a stateful
01:31 - set which is for stateful applications
01:34 - like databases you will need a config
01:36 - map with external configuration you
01:39 - would need a secret where some
01:40 - credentials and secret data are stored
01:43 - you will need to create the current it's
01:45 - user with its respective permissions and
01:48 - also create a couple of services now if
01:52 - you were to create all of these files
01:54 - manually by searching for each one of
01:58 - them separately on internet be a tedious
02:01 - job and until you have all these yellow
02:03 - files collected and tested and try it
02:06 - out it might take some time
02:07 - and since elastic stack deployment is
02:10 - pretty much the standard across all
02:12 - clusters
02:14 - other people will probably have to go
02:15 - through the same so it made perfect
02:17 - sense that someone created this yellow
02:20 - files once and packaged them up and made
02:24 - it available somewhere so that other
02:27 - people who also use the same kind of
02:29 - deployment could use them in their
02:31 - communities cluster and that bundle of
02:34 - yellow files is called helm chart
02:37 - so using helm you can create your own
02:39 - helmet arts or bundles of those yellow
02:43 - files and push them to some helm
02:47 - repository to make it available for
02:49 - others or you can consume so you can use
02:52 - download and use existing helm charts
02:55 - that other people pushed and made
02:57 - available in different repositories so
03:00 - commonly use deployments like database
03:02 - applications elasticsearch MongoDB my
03:06 - sequel or monitoring applications like
03:08 - Prometheus that all have this kind of
03:11 - complex set up all have charts available
03:15 - in some helm repository so using a
03:19 - simple helm installed chart name command
03:22 - you can reuse the configuration that
03:24 - someone else has already made without
03:26 - additional effort and sometimes that
03:29 - someone is even the company that created
03:31 - the application and this functionality
03:33 - of sharing charts that became pretty
03:37 - widely used actually was one of the
03:39 - contributors to why helm became so
03:41 - popular compared to its alternative
03:44 - tools so now if you're if you have a
03:47 - cluster and you need some kind of
03:49 - deployment that you think should be
03:51 - available out there you can actually
03:53 - look it up either using command line so
03:56 - you can do helm search with a keyword or
03:58 - you can go to either Helms on public
04:02 - repository helm hub or on helm charts
04:05 - pages or other repositories that are
04:08 - available and I will put all the
04:11 - relevant links for this video in the
04:13 - description so you can check them out
04:14 - now apart from those public registries
04:17 - for helm charts there are also private
04:20 - registries because when companies start
04:23 - creating those charts they also started
04:26 - distributing them
04:27 - monk or internally in the organization
04:29 - so it made perfect sense to create
04:31 - registries to share those charts within
04:35 - the organization and not publicly so
04:38 - they're a couple of tools out there
04:39 - they're used as hell charts private
04:43 - repositories as well another
04:45 - functionality of helm is that it's a
04:48 - templating engine so what does that
04:51 - actually mean imagine you have an
04:53 - application that is made up of multiple
04:56 - micro services and you're deploying all
04:59 - of them in your convenience cluster and
05:02 - deployment and service of each of those
05:04 - micro services are pretty much the same
05:07 - with the only difference that the
05:09 - application name and version are
05:11 - different or the docker image name and
05:14 - version tags are different
05:16 - so without helm you would write separate
05:20 - EML files configuration files for each
05:22 - of those micro services so you would
05:24 - have multiple deployment service files
05:27 - where each one has its own application
05:31 - name and version defined but since the
05:34 - only difference between those llamo
05:37 - files are just couple of lines or a
05:39 - couple of values using helm what you can
05:42 - do is that you can define a common
05:44 - blueprint for all the micro services and
05:47 - the values that are dynamic or the
05:50 - values that are going to change replace
05:53 - by placeholders and that would be a
05:57 - template file so the template file would
05:59 - look something like this you would have
06:01 - a template file which is standard EML
06:03 - but instead of values in some places you
06:05 - would have the syntax which means that
06:08 - you're taking a value from external
06:11 - configuration and that external
06:13 - configuration if you see the syntax here
06:15 - dot values that external configuration
06:18 - comes from an additional llam√≥ file
06:21 - which is called
06:22 - values dot Yemen and here you can define
06:26 - all those values that you are going to
06:28 - use in that template file so for example
06:31 - here those 4 values are defined in an
06:34 - values yamo file and what dot values is
06:38 - it's an object that is being created
06:41 - it based on the values that are supplied
06:43 - via values EML file and also through
06:48 - command line using - - set flag so
06:52 - whichever way you define those
06:54 - additional values that are combined and
06:56 - put together in odd values object that
06:59 - you can then use in those template files
07:01 - to get the values out so now instead of
07:04 - having yellow files for each
07:06 - micro-service you just have one and you
07:09 - can simply replace those values
07:11 - dynamically and this is especially
07:14 - practical when you're using continuous
07:16 - delivery continuous integration for
07:19 - application because what you can do is
07:21 - that in your built pipeline you can use
07:23 - those template the ml files and replace
07:27 - the values on the fly before deploying
07:30 - them another use case where you can use
07:33 - the helm features of package manager and
07:37 - templating engine is when you deploy the
07:41 - same set of applications across
07:42 - different kubernetes clusters so
07:45 - consider use case where you have your
07:47 - micro service application that you want
07:51 - to deploy on development staging and
07:54 - production clusters so instead of
07:56 - deploying the individual DML files
07:58 - separately in each cluster you can
08:01 - package them up to make your own
08:03 - application chart that will have all the
08:06 - necessary ml files that that particular
08:10 - deployment needs and then you can use
08:13 - them to redeploy the same application in
08:17 - different communities cluster
08:19 - environments using one comment which can
08:21 - also make the whole deployment process
08:23 - easier so now that you know what helm
08:26 - charts are used for it let's actually
08:28 - look at an example helm chart structure
08:32 - to have a better understanding so
08:34 - typically chart is made up of such a
08:37 - directory structure
08:38 - so it have the top level will be the
08:41 - name of the chart and inside the
08:43 - director you would have following so
08:45 - chart that yamo is basically a file that
08:48 - contains all the meta information about
08:50 - the chart could be named and version may
08:53 - be list of dependencies etc
08:55 - values the demo that I mentioned before
08:57 - is place where all the values are
09:01 - configured for the template files and
09:05 - this will actually be the default values
09:07 - that you can override later the charts
09:11 - directory will have char dependencies
09:14 - inside meaning that if this chart
09:16 - depends on other charts then those chart
09:20 - dependencies will be stored here and
09:22 - templates folder is basically where the
09:25 - template files are stored so when you
09:28 - execute he'll install command to
09:31 - actually deploy those yellow files into
09:34 - kubernetes the template files from here
09:37 - will be filled with the values from
09:39 - value store demo producing valid
09:43 - kubernetes manifests that can then be
09:45 - deployed into kubernetes
09:47 - and optionally you can have some other
09:49 - files in this folder like readme or
09:53 - license file etc so to have a better
09:57 - understanding of how values are injected
10:00 - into helm templates
10:01 - consider that in values the demo which
10:04 - is a default value configuration you
10:06 - have following three values image name
10:09 - port and version and as I mentioned the
10:12 - default values that are defined here can
10:15 - be overridden in a couple of different
10:17 - ways one way is that when executing helm
10:21 - install command you can provide an
10:24 - alternative values yellow file using
10:27 - values flag so for example if values the
10:32 - mo file will have following three values
10:34 - which are image name port and version
10:36 - you can define your own values yellow
10:39 - file called my value study mo and you
10:42 - can override one of those values or you
10:45 - can even add some new attributes there
10:48 - and those two will be merged which will
10:51 - result into a dot values object that
10:54 - will look like this so would have image
10:57 - name and port from values or demo and
10:59 - the one that you overrode with your own
11:01 - values file alternatively you can also
11:05 - provide additional individual
11:08 - values using set flag where you can
11:12 - define the values directly on the
11:14 - command line but of course it's more
11:15 - organized and better manageable to have
11:19 - files where you store all those values
11:21 - instead of just providing them on a
11:22 - command line another feature of helm is
11:25 - release management which is provided
11:28 - based on its setup but it's important to
11:31 - note here the difference between helm
11:34 - versions 2 & 3 in version 2 of helm the
11:38 - helm installation comes in two parts
11:41 - you have helm client and the server and
11:43 - the server part is called tiller so
11:46 - whenever you deploy helm chart using
11:49 - helm install my chart helm client will
11:52 - send the yellow files to tiller that
11:55 - actually runs or has to run in a
11:57 - kubernetes cluster and tiller then will
12:00 - execute this request and create
12:02 - components from this yellow files inside
12:06 - the currents cluster and exactly this
12:08 - architecture offers additional valuable
12:11 - feature of helm which is release
12:13 - management so the way helm clients
12:16 - server setup works is that whenever you
12:19 - create or change deployment pillar will
12:22 - store a copy of each configuration
12:25 - clients and for future reference thus
12:28 - creating a history of chart executions
12:31 - so when you execute helm upgrade chart
12:36 - name the changes will be applied to the
12:39 - existing deployment instead of removing
12:41 - it and creating a new one and also in
12:44 - case the upgrades goes wrong for example
12:47 - some yellow files where falls or some
12:50 - configuration was wrong you can roll
12:52 - back that upgrade using helm robic chart
12:56 - name comment and all this is possible
12:58 - because of that chart execution history
13:02 - that tiller keeps whenever you send
13:04 - those requests from helm client to
13:07 - tiller however this setup has a big
13:10 - caveat which is that tiller has too much
13:13 - power inside the governance cluster it
13:16 - can create update delete components and
13:18 - it has too much permissions
13:21 - and this makes it actually a big
13:24 - security issue and this was one of the
13:26 - reasons why in helm 3 they actually
13:28 - removed the Tila part and it's just a
13:31 - simple helm binary now which was solving
13:34 - the security concern loses the release
13:37 - management feature of helm or makes it
13:39 - more challenging and it's important to
13:43 - mention here because a lot of people
13:46 - have heard of tiller and when you deploy
13:48 - a helm version 3 it shouldn't be
13:51 - confused that tiller isn't actually
13:53 - there anymore thanks for watching the
13:55 - video I hope it was helpful and if it
13:57 - was don't forget to like it if you want
14:00 - to be notified whenever a new video
14:01 - comes out then subscribe to my channel
14:04 - if you have any questions if something
14:07 - wasn't clear in the video please post
14:08 - them in a comment section below and I
14:10 - will try to answer them so thank you and
14:13 - see you in the next video

Cleaned transcript:

in this video I'm gonna explain all the main concepts of helm so that you're able to use it in your own projects also helm changes a lot from version to version so understanding the basic common principles and more importantly its use cases to when and why we use helm will make it easier for you to use it in practice no matter which version you choose so the topics I'm gonna go through in this video are helm and helm charts what they are how to use them and in which scenarios they're used and also what is tiller and what part it plays in the helm architecture so what is helm helm has a couple of main features that it's useful the first one is as a package manager for kubernetes so you can think of it as apt yum or home brewer for kubernetes so it's a convenient way for packaging collections of kubernetes DML files and distributing them in public and private registry now these definitions may sound a bit abstract so let's break them down with specific examples so let's say you have deployed your application in kubernetes cluster and you want to deploy elasticsearch additionally a new cluster that your application will use to collect its logs in order to deploy elastic stick in your kubernetes cluster you will need a couple of commands components so you would need a stateful set which is for stateful applications like databases you will need a config map with external configuration you would need a secret where some credentials and secret data are stored you will need to create the current it's user with its respective permissions and also create a couple of services now if you were to create all of these files manually by searching for each one of them separately on internet be a tedious job and until you have all these yellow files collected and tested and try it out it might take some time and since elastic stack deployment is pretty much the standard across all clusters other people will probably have to go through the same so it made perfect sense that someone created this yellow files once and packaged them up and made it available somewhere so that other people who also use the same kind of deployment could use them in their communities cluster and that bundle of yellow files is called helm chart so using helm you can create your own helmet arts or bundles of those yellow files and push them to some helm repository to make it available for others or you can consume so you can use download and use existing helm charts that other people pushed and made available in different repositories so commonly use deployments like database applications elasticsearch MongoDB my sequel or monitoring applications like Prometheus that all have this kind of complex set up all have charts available in some helm repository so using a simple helm installed chart name command you can reuse the configuration that someone else has already made without additional effort and sometimes that someone is even the company that created the application and this functionality of sharing charts that became pretty widely used actually was one of the contributors to why helm became so popular compared to its alternative tools so now if you're if you have a cluster and you need some kind of deployment that you think should be available out there you can actually look it up either using command line so you can do helm search with a keyword or you can go to either Helms on public repository helm hub or on helm charts pages or other repositories that are available and I will put all the relevant links for this video in the description so you can check them out now apart from those public registries for helm charts there are also private registries because when companies start creating those charts they also started distributing them monk or internally in the organization so it made perfect sense to create registries to share those charts within the organization and not publicly so they're a couple of tools out there they're used as hell charts private repositories as well another functionality of helm is that it's a templating engine so what does that actually mean imagine you have an application that is made up of multiple micro services and you're deploying all of them in your convenience cluster and deployment and service of each of those micro services are pretty much the same with the only difference that the application name and version are different or the docker image name and version tags are different so without helm you would write separate EML files configuration files for each of those micro services so you would have multiple deployment service files where each one has its own application name and version defined but since the only difference between those llamo files are just couple of lines or a couple of values using helm what you can do is that you can define a common blueprint for all the micro services and the values that are dynamic or the values that are going to change replace by placeholders and that would be a template file so the template file would look something like this you would have a template file which is standard EML but instead of values in some places you would have the syntax which means that you're taking a value from external configuration and that external configuration if you see the syntax here dot values that external configuration comes from an additional llam√≥ file which is called values dot Yemen and here you can define all those values that you are going to use in that template file so for example here those 4 values are defined in an values yamo file and what dot values is it's an object that is being created it based on the values that are supplied via values EML file and also through command line using set flag so whichever way you define those additional values that are combined and put together in odd values object that you can then use in those template files to get the values out so now instead of having yellow files for each microservice you just have one and you can simply replace those values dynamically and this is especially practical when you're using continuous delivery continuous integration for application because what you can do is that in your built pipeline you can use those template the ml files and replace the values on the fly before deploying them another use case where you can use the helm features of package manager and templating engine is when you deploy the same set of applications across different kubernetes clusters so consider use case where you have your micro service application that you want to deploy on development staging and production clusters so instead of deploying the individual DML files separately in each cluster you can package them up to make your own application chart that will have all the necessary ml files that that particular deployment needs and then you can use them to redeploy the same application in different communities cluster environments using one comment which can also make the whole deployment process easier so now that you know what helm charts are used for it let's actually look at an example helm chart structure to have a better understanding so typically chart is made up of such a directory structure so it have the top level will be the name of the chart and inside the director you would have following so chart that yamo is basically a file that contains all the meta information about the chart could be named and version may be list of dependencies etc values the demo that I mentioned before is place where all the values are configured for the template files and this will actually be the default values that you can override later the charts directory will have char dependencies inside meaning that if this chart depends on other charts then those chart dependencies will be stored here and templates folder is basically where the template files are stored so when you execute he'll install command to actually deploy those yellow files into kubernetes the template files from here will be filled with the values from value store demo producing valid kubernetes manifests that can then be deployed into kubernetes and optionally you can have some other files in this folder like readme or license file etc so to have a better understanding of how values are injected into helm templates consider that in values the demo which is a default value configuration you have following three values image name port and version and as I mentioned the default values that are defined here can be overridden in a couple of different ways one way is that when executing helm install command you can provide an alternative values yellow file using values flag so for example if values the mo file will have following three values which are image name port and version you can define your own values yellow file called my value study mo and you can override one of those values or you can even add some new attributes there and those two will be merged which will result into a dot values object that will look like this so would have image name and port from values or demo and the one that you overrode with your own values file alternatively you can also provide additional individual values using set flag where you can define the values directly on the command line but of course it's more organized and better manageable to have files where you store all those values instead of just providing them on a command line another feature of helm is release management which is provided based on its setup but it's important to note here the difference between helm versions 2 & 3 in version 2 of helm the helm installation comes in two parts you have helm client and the server and the server part is called tiller so whenever you deploy helm chart using helm install my chart helm client will send the yellow files to tiller that actually runs or has to run in a kubernetes cluster and tiller then will execute this request and create components from this yellow files inside the currents cluster and exactly this architecture offers additional valuable feature of helm which is release management so the way helm clients server setup works is that whenever you create or change deployment pillar will store a copy of each configuration clients and for future reference thus creating a history of chart executions so when you execute helm upgrade chart name the changes will be applied to the existing deployment instead of removing it and creating a new one and also in case the upgrades goes wrong for example some yellow files where falls or some configuration was wrong you can roll back that upgrade using helm robic chart name comment and all this is possible because of that chart execution history that tiller keeps whenever you send those requests from helm client to tiller however this setup has a big caveat which is that tiller has too much power inside the governance cluster it can create update delete components and it has too much permissions and this makes it actually a big security issue and this was one of the reasons why in helm 3 they actually removed the Tila part and it's just a simple helm binary now which was solving the security concern loses the release management feature of helm or makes it more challenging and it's important to mention here because a lot of people have heard of tiller and when you deploy a helm version 3 it shouldn't be confused that tiller isn't actually there anymore thanks for watching the video I hope it was helpful and if it was don't forget to like it if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video
