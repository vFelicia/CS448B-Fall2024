With timestamps:

00:00 - I've seen this question a lot and many
00:01 - of you have also asked what is the
00:04 - difference between docker and kubernetes
00:07 - because I guess it seems like they're
00:10 - competing technologies but the fact is
00:13 - they're not alternatives to each other
00:16 - in fact they go hand in hand together
00:19 - you could use this docker without
00:22 - kubernetes and you can use communities
00:24 - without docker however many projects in
00:28 - best practices actually combine those
00:30 - two technologies to get the best out of
00:32 - both so to demonstrate that docker and
00:41 - kubernetes go actually hand-in-hand here
00:44 - a couple of points for each technology
00:47 - so docker is a container technology
00:50 - which basically means that it creates an
00:53 - isolated environment for applications
00:55 - while kubernetes is an infrastructure
00:58 - for managing those containers where
01:01 - docker really shines is actually
01:03 - automating the building and deployment
01:06 - process of applications so it's actually
01:08 - widely used in the CI CD process while
01:13 - kubernetes comes into action after the
01:16 - application container has been deployed
01:18 - and it takes care of automating
01:21 - scheduling and management of that
01:23 - deployed application containers so
01:26 - overall docker is a container platform
01:29 - to configure build and distribute those
01:32 - build containers or kubernetes is an
01:35 - ecosystem for managing a cluster of
01:38 - multiple docker containers here's a
01:41 - diagram that shows exactly where docker
01:43 - and kubernetes fit in the whole process
01:45 - so docker is mainly used in the local
01:47 - development process so when you're
01:49 - developing a software application you
01:51 - would use docker containers for
01:53 - different services that your application
01:55 - depends on like databases message
01:57 - brokers etc and it's also used in the CI
02:00 - process to build your application and
02:04 - package it into an isolated container
02:07 - environment as we mentioned before once
02:10 - built that container gets stored or
02:12 - pushed
02:13 - into a private repository so now is
02:16 - where kubernetes actually comes into the
02:17 - game so if you have a development server
02:20 - that is made up of multiple virtual or
02:23 - physical servers you would basically
02:24 - install kubernetes on top of those
02:27 - servers and once kubernetes is running
02:30 - you will create a cluster that would
02:32 - actually run your docker containers on
02:34 - top of it and this diagram actually
02:37 - demonstrates how docker and kubernetes
02:39 - technologies can actually be used
02:40 - together so now in order to get a little
02:44 - bit more detailed view of how kubernetes
02:46 - cluster works so you have a kubernetes
02:48 - engine that spends multiple virtual
02:51 - physical servers to create one cluster
02:53 - where docker containers are actually
02:57 - running and you can distribute the
02:59 - number of doctor containers across those
03:01 - physical or virtual servers as you wish
03:04 - where each container will be its own
03:06 - application and the kubernetes service
03:09 - that actually enables docker to run in
03:13 - that cluster is cubelets so each node in
03:16 - the community's cluster will actually
03:17 - have one cubelet and the technology that
03:20 - is actually comparable with kubernetes
03:22 - is docker swarm so as we saw this is a
03:25 - kubernetes cluster set up and the docker
03:28 - swarm is basically an alternative to
03:31 - kubernetes which is a container
03:32 - orchestration tool so instead of
03:35 - cubelets you would have services called
03:38 - docker daemons that will run on each
03:40 - node and instead of the kubernetes
03:41 - engine you would just have docker that
03:44 - actually spends those multiple nodes
03:45 - that make up the cluster and the rest is
03:49 - the same so you have the same docker
03:51 - containers with the same applications
03:54 - running on that cluster set up so now
03:57 - that we saw that docker swarm is an
03:59 - alternative to kubernetes let's see how
04:01 - they actually compare what are the
04:03 - advantages and disadvantages of each
04:05 - technology so the first difference is
04:08 - that kubernetes is much more complex to
04:10 - install and set up then toku swarm and
04:13 - the reason for that is that kubernetes
04:15 - is actually more complex and has much
04:17 - more power but of course comes with a
04:19 - higher learning curve whereas docker
04:22 - swarm is more lightweight however is
04:24 - limited in its functionality
04:27 - so some of the powerful functionality
04:29 - that kubernetes offers in comparison is
04:31 - that it supports auto scaling where a
04:33 - stockist worm needs manual scaling to be
04:37 - configured it also has a built-in
04:39 - monitoring where as docker swarm depends
04:42 - on third-party tools for monitoring but
04:44 - also to talk about some advantages of
04:46 - docker swarm
04:47 - for example kubernetes doesn't support
04:49 - auto load balancing whereas docker swarm
04:52 - supports that feature and also with
04:54 - kubernetes you actually need to learn a
04:57 - new command-line tool which is the cube
04:59 - CTL for example whereas with docker
05:02 - swarm you actually have the same docker
05:04 - command line that you use with docker so
05:06 - you don't have a need for a separate
05:09 - command-line tool there thanks for
05:10 - watching the video
05:11 - I hope it was helpful and if it was
05:13 - don't forget to like it if you want to
05:15 - be notified whenever a new video comes
05:17 - out then subscribe to my channel if you
05:20 - have any questions if something wasn't
05:22 - clear in the video please post them in a
05:24 - comment section below and I will try to
05:26 - answer them so thank you and see you in
05:29 - the next video

Cleaned transcript:

I've seen this question a lot and many of you have also asked what is the difference between docker and kubernetes because I guess it seems like they're competing technologies but the fact is they're not alternatives to each other in fact they go hand in hand together you could use this docker without kubernetes and you can use communities without docker however many projects in best practices actually combine those two technologies to get the best out of both so to demonstrate that docker and kubernetes go actually handinhand here a couple of points for each technology so docker is a container technology which basically means that it creates an isolated environment for applications while kubernetes is an infrastructure for managing those containers where docker really shines is actually automating the building and deployment process of applications so it's actually widely used in the CI CD process while kubernetes comes into action after the application container has been deployed and it takes care of automating scheduling and management of that deployed application containers so overall docker is a container platform to configure build and distribute those build containers or kubernetes is an ecosystem for managing a cluster of multiple docker containers here's a diagram that shows exactly where docker and kubernetes fit in the whole process so docker is mainly used in the local development process so when you're developing a software application you would use docker containers for different services that your application depends on like databases message brokers etc and it's also used in the CI process to build your application and package it into an isolated container environment as we mentioned before once built that container gets stored or pushed into a private repository so now is where kubernetes actually comes into the game so if you have a development server that is made up of multiple virtual or physical servers you would basically install kubernetes on top of those servers and once kubernetes is running you will create a cluster that would actually run your docker containers on top of it and this diagram actually demonstrates how docker and kubernetes technologies can actually be used together so now in order to get a little bit more detailed view of how kubernetes cluster works so you have a kubernetes engine that spends multiple virtual physical servers to create one cluster where docker containers are actually running and you can distribute the number of doctor containers across those physical or virtual servers as you wish where each container will be its own application and the kubernetes service that actually enables docker to run in that cluster is cubelets so each node in the community's cluster will actually have one cubelet and the technology that is actually comparable with kubernetes is docker swarm so as we saw this is a kubernetes cluster set up and the docker swarm is basically an alternative to kubernetes which is a container orchestration tool so instead of cubelets you would have services called docker daemons that will run on each node and instead of the kubernetes engine you would just have docker that actually spends those multiple nodes that make up the cluster and the rest is the same so you have the same docker containers with the same applications running on that cluster set up so now that we saw that docker swarm is an alternative to kubernetes let's see how they actually compare what are the advantages and disadvantages of each technology so the first difference is that kubernetes is much more complex to install and set up then toku swarm and the reason for that is that kubernetes is actually more complex and has much more power but of course comes with a higher learning curve whereas docker swarm is more lightweight however is limited in its functionality so some of the powerful functionality that kubernetes offers in comparison is that it supports auto scaling where a stockist worm needs manual scaling to be configured it also has a builtin monitoring where as docker swarm depends on thirdparty tools for monitoring but also to talk about some advantages of docker swarm for example kubernetes doesn't support auto load balancing whereas docker swarm supports that feature and also with kubernetes you actually need to learn a new commandline tool which is the cube CTL for example whereas with docker swarm you actually have the same docker command line that you use with docker so you don't have a need for a separate commandline tool there thanks for watching the video I hope it was helpful and if it was don't forget to like it if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video
