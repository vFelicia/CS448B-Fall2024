With timestamps:

00:00 - in this GitHub actions tutorial we'll go
00:03 - through the following topics first I'm
00:05 - going to explain what GitHub actions
00:06 - actually is and we're going to look at
00:08 - specific developer workflow use cases
00:11 - that you can automate with GitHub
00:13 - actions after that I will explain the
00:16 - basic concepts of GitHub actions
00:18 - including the events and actions and
00:20 - workflow and how GitHub actions actually
00:23 - automates these workflows using these
00:25 - components having understood what GitHub
00:28 - action solves and how it makes it
00:30 - possible I will go through the most
00:33 - common workflow which is CI CD pipeline
00:35 - I will explain shortly why it's not just
00:38 - another CI CD tool or what are the
00:40 - benefits of GitHub actions CI CD
00:43 - pipeline finally we will go through a
00:46 - Hands-On demo where I explain the syntax
00:48 - of GitHub action's workflow file and
00:51 - then we will go through a complete CI
00:52 - pipeline setup with my example Java
00:55 - Gradle project which we will build into
00:58 - a Docker image and push to a private
01:01 - Docker repository on Docker hub
01:03 - so what is GitHub actions GitHub actions
01:07 - is a platform to automate developer
01:09 - workflows so software development
01:12 - workflows many of the tutorials that
01:14 - I've seen seem to convey that GitHub
01:17 - actions is a CI CD platform but as I
01:20 - said it's for automating developer
01:22 - workflows and CI CD pipeline is just one
01:25 - of the many workflows that you can
01:27 - automate with GitHub actions so now we
01:30 - need to understand what are those
01:32 - developer workflows in other words what
01:35 - is that the developers typically do that
01:39 - is so time consuming or air prone or
01:42 - just tedious that it needs automation
01:45 - so let's go through a couple of specific
01:47 - examples
01:48 - now as you probably already know GitHub
01:51 - is a platform for a lot of Open Source
01:54 - projects so a lot of developers who have
01:58 - developed their own libraries for Java
02:00 - or some other programming language they
02:03 - can host their projects on GitHub and
02:06 - make them publicly available is open
02:09 - source projects so that the community
02:11 - can use those projects but also to
02:14 - contribute to those projects so when a
02:16 - team or individual developers who manage
02:19 - those projects can new contributors or
02:22 - things happen inside the repository
02:25 - people creating pull requests people
02:27 - joining in as contributors and so on
02:30 - they have a lot of organizational tasks
02:34 - to manage let's see examples of such
02:36 - tasks let's say you have created a
02:39 - library that makes it easier to work
02:40 - with daytime in Java so it's a Java
02:43 - library that you created and you have
02:45 - some contributors and users of that
02:48 - library and whenever a use of the
02:51 - library sees that a new release of the
02:54 - library has a bug or something isn't
02:55 - more working they can create an issue
02:58 - that something is not working
03:00 - so you have to check that issue you have
03:02 - to sort it is it minor is it major is it
03:05 - something urgent is it something that
03:07 - others may have also reported is it
03:09 - reproducible for example maybe you
03:12 - assign it to one of the contributors or
03:14 - to yourself and so on let's say one of
03:16 - the contributors fixes the issue and
03:18 - creates a pull request so that you can
03:20 - merge it into the next release of that
03:23 - Library so you look at the pull request
03:25 - you review the code you make sure that
03:28 - the issue is not reproducible anymore
03:30 - with the fix and you merge it into the
03:33 - master node so this is going to be part
03:36 - of the next release so to say so you
03:39 - want to release the next version so the
03:41 - people who use the library can upgrade
03:43 - the version where the issue is fixed so
03:46 - after the pull request is merged into
03:48 - the master Branch you want to start a
03:50 - pipeline a build pipeline that will test
03:53 - your code build your artifact and so on
03:56 - you also want to maybe prepare some
03:57 - release notes where you document and
04:00 - what got added in the new version and
04:02 - maybe also adjust the version tag or the
04:05 - version number so all these things are
04:08 - workflow examples of what you have to do
04:11 - as a maintainer of such repository so
04:14 - you can imagine the bigger the project
04:17 - gets and the more contributors you get
04:19 - and the more features and issues they
04:21 - fix and more pull requests they create
04:23 - and the more people use your project the
04:26 - more organizational effort it is going
04:29 - to be so obviously as a developer you
04:31 - don't want to be sitting there doing all
04:33 - these tedious organizational stuff you
04:36 - want to automate as much as possible of
04:38 - those management tasks so that you can
04:41 - also concentrate on programming and
04:43 - developing new features and new
04:45 - functionalities in the project and for
04:48 - that purpose GitHub actions was created
04:51 - so with GitHub actions every time
04:53 - something happens in your repository or
04:56 - to your repository you can configure
04:58 - automatic actions to get executed in
05:01 - response
05:02 - and these things that are happening in
05:05 - your repository or to your repository
05:07 - are events in the GitHub space so
05:11 - someone creating a pull request is an
05:13 - event someone creating an issue is an
05:15 - event someone joining as a contributor
05:18 - is an event or you merging that pull
05:20 - request into the master branch is an
05:23 - event also note that other applications
05:26 - or tools that you may have integrated
05:29 - into your GitHub can also produce such
05:32 - events that you can respond to with
05:34 - automatic actions so when you automate
05:37 - these flows basically the concept is
05:39 - pretty simple you listen to any such
05:42 - events and depending on what event
05:44 - happens you want a certain workflow to
05:48 - execute automatically so every time
05:51 - someone creates an issue that's an event
05:53 - maybe you want to automatically sort
05:56 - that issue maybe label it assign it to
05:59 - respective contributor or maybe assign
06:01 - it to you per default maybe categorize
06:04 - it and also maybe write a script or a
06:07 - test that will try to automatically
06:10 - reproduce the issue and then add some
06:13 - status or comment or something that says
06:15 - reproducible or not reproducible so all
06:18 - these things can be automated with
06:21 - actions so each small task that you
06:23 - automatically trigger on an event
06:26 - is going to be a separate action so
06:29 - writing a comment putting a label on an
06:32 - issue assigning it to someone etc those
06:35 - are actions and this chain of actions or
06:38 - these combination of actions actually
06:40 - make up workflow so now that we
06:43 - understand the basic concepts of GitHub
06:45 - actions let's look at a specific
06:47 - workflow example so obviously not
06:50 - everybody has an open source project on
06:53 - GitHub you can have your own private
06:55 - projects of GitHub for the application
06:58 - that you're developing so the most
06:59 - common workflow you will think of for
07:02 - your repository would be CI CD pipeline
07:05 - you commit your code the build starts it
07:08 - tests your code builds it into an
07:10 - artifact then pushes the artifact in
07:13 - some storage and then deploys the
07:15 - application on a deployment server
07:18 - now why is it a big deal to have just
07:21 - another CI CD tool well the first and
07:25 - obvious Advantage is that if you're
07:27 - already hosting your code on GitHub now
07:30 - you can use the same tool for CI CD
07:33 - pipeline as well you don't have to set
07:35 - up another third-party tool and manage
07:38 - it separately you have the integrated
07:40 - into your code Repository
07:43 - another advantage of GitHub actions that
07:46 - I see is that it makes it really easy to
07:48 - build your pipeline so the setup process
07:50 - of the CI CD pipeline is really easy it
07:53 - is actually meant to be a tool for
07:55 - developers so they made it so that if
07:57 - you have a developers team you don't
07:59 - need an extra devops person who is
08:01 - dedicated to setting up and maintaining
08:04 - that CI CD pipeline in your project so
08:07 - now the question is how did they make it
08:09 - easy or how does it compare to other CI
08:13 - CD tools like Jenkins for example and
08:15 - why is it much easier to set up and
08:18 - manage
08:19 - so you know that when you think about CI
08:22 - CD pipeline one of the most important
08:24 - things is it's integration with
08:27 - different tools so what do I mean by
08:29 - that whether you are developing a
08:31 - node.js application which will be built
08:34 - into a Docker image and then pushed into
08:36 - a Nexus repository and deployed on
08:38 - digitalocean server or you're developing
08:41 - a Java application with Maven you have
08:44 - integration tests to test your
08:47 - application on Linux and windows servers
08:50 - then build it into a Docker image and
08:53 - push it to AWS container registry and
08:56 - deploy it on AWS eks so basically you
09:00 - can have many different combinations of
09:02 - tools that you're using in your
09:04 - development process
09:06 - so you don't want to be sitting there
09:08 - trying to configure your CI CD Pipeline
09:11 - with all these tools like installing
09:13 - Java and Maven and Docker and all these
09:16 - Integrations with Nexus and AWS and so
09:19 - on installing plugins and configuring
09:22 - them instead you want a simpler way of
09:25 - saying hey I need an environment which
09:27 - has node and Docker both available
09:30 - without me installing any of it with a
09:34 - version that I want and the same way I
09:37 - wanted to do the deployment part easily
09:39 - by simply connecting to the Target
09:41 - environment and deploying the
09:42 - application there and that's exactly the
09:45 - advantage that you have when you're
09:47 - using CI CD pipeline in GitHub actions
09:51 - and of course I will show you and
09:53 - explain how this works in the next demo
09:55 - part with my example Java Gradle project
09:58 - which we will build into a Docker image
10:01 - and push to our private Docker
10:03 - Repository
10:05 - so to see all this in action let's go to
10:07 - GitHub in here we can create a test
10:10 - repository call it my project
10:14 - public and that's it
10:16 - so this is my Mt project so to say so
10:20 - whenever you create a new project you
10:22 - have this actions tab integrated into
10:25 - the project that lets you get started
10:27 - with automating one of your workflows
10:31 - so now I can push my local code to the
10:35 - remote Repository
10:37 - so let's go back and refresh it
10:40 - and here I have my Java application
10:42 - which uses Gradle project so let's go to
10:45 - actions
10:46 - so here if we scroll down we see a big
10:49 - list of workflow templates which means
10:52 - you don't have to start writing your
10:54 - workflow file from scratch you can use
10:56 - one of the templates that matches
10:58 - technology your project uses
11:01 - and these are actually grouped in three
11:03 - main categories here we see the
11:05 - deployment workflows to deploy your code
11:08 - to cloud services or using some
11:11 - automation tools and here we have big
11:13 - section of continuous integration
11:15 - workflows and here if you look at the
11:18 - list a lot of options based on what
11:21 - programming language you're using what
11:24 - tools you're using and also combinations
11:26 - of such tools so for example you have
11:28 - Java with Gradle and you also have Java
11:31 - with Maven and so on so you have the
11:34 - build and test workflows as well as
11:36 - publish workflows where you publish your
11:39 - artifact to some repository and that's
11:42 - where I was talking about when I
11:43 - mentioned that different applications
11:45 - use different combination of tools and
11:48 - it's important for Sci CD tool to have
11:51 - an easy integration with many different
11:54 - tools so that it works for different
11:56 - projects all the way down these are the
11:59 - workflow examples that I mentioned at
12:00 - the beginning like greeting someone for
12:03 - example if a contributor joins your
12:05 - project you might want to send an
12:08 - automated greeting message to welcome or
12:12 - labeling your issues and so on and
12:14 - obviously you can make your own workflow
12:16 - with different combination and adjust it
12:18 - so let's create a build workflow for our
12:20 - Java Gradle application and obviously I
12:23 - will choose the Java Gradle workflow
12:25 - template and let's see what the workflow
12:27 - file looks like
12:29 - and see what happens it automatically
12:32 - creates this configuration view in my
12:35 - project or my repository it creates this
12:38 - path dot GitHub workflows and this is
12:42 - the file that basically holds my
12:45 - workflow logic it is written in yaml
12:47 - it's a yaml format and what's great with
12:50 - this list of workflow suggestions is
12:52 - that you get a pre-configured workflow
12:56 - that you may need to adjust just a
12:59 - little bit but most of the stuff is
13:01 - already here so you don't have to start
13:03 - from blank file so let's go through the
13:06 - syntax of this workflow file in detail
13:09 - so that we understand how to write our
13:12 - own workflows so I'm gonna copy this in
13:15 - my editor so we can see better so first
13:18 - of all we have the name of the workflow
13:21 - this is basically for you to describe
13:23 - what the workflow is doing these are the
13:27 - events that I mentioned so every time an
13:30 - event happens or events happen we can
13:33 - trigger a certain workflow so this is a
13:36 - section where we Define events that
13:38 - should trigger the following workflow
13:40 - and I think it's pretty intuitive every
13:43 - time someone pushes to master Branch we
13:47 - want to trigger this workflow or every
13:49 - time a pull request gets created with
13:51 - Master Branch as a Target
13:53 - this workflow will get executed which in
13:56 - this case makes sense because every time
13:57 - something gets pushed into a master or
14:01 - you want to merge something into Master
14:02 - it makes sense to run tests or to test
14:06 - our application to make sure that it's
14:09 - mergeable so to say or that we didn't
14:11 - break something in the master branch
14:14 - so that's pretty straightforward other
14:16 - examples that I mentioned could be
14:18 - creating an issue or a contributor
14:21 - joining this will be all events listed
14:24 - here you have a complete list of such
14:27 - events documented on this page so here
14:29 - you see the list and here you see some
14:31 - more detailed explanation and also the
14:34 - usage and as always I will put all the
14:37 - relevant links for this tutorial in the
14:39 - video description and this is a part
14:41 - that gets executed whenever these events
14:45 - happen
14:46 - so we have jobs these are the names of
14:49 - the job this could be arbitrary just
14:51 - like the name of the workflow so you can
14:53 - name it yourself and job basically
14:56 - groups a set of actions that will be
15:00 - executed right
15:02 - so as I mentioned events trigger a chain
15:04 - of actions or combination of actions and
15:07 - these are defined here so let's look at
15:10 - the first one pretty logical whenever we
15:13 - want to build application or run tests
15:16 - we need to check out the repository or
15:18 - the code first so how does this get
15:22 - executed or what is behind this syntax
15:24 - so the actions path in GitHub is where
15:28 - pre-created or predefined actions are
15:31 - hosted so basically you can assume that
15:34 - everybody who uses a CI CD pipeline in
15:37 - GitHub actions will need to use checkout
15:40 - Command right so instead of letting
15:42 - everybody do that on their own they're
15:44 - creating an action called checkout that
15:47 - people can use so if I go to GitHub
15:51 - slash actions
15:53 - I will see list of repositories that
15:56 - contain all those actions so let's look
16:00 - for our checkout
16:02 - action so these are all these actions
16:04 - are basically repositories let's go
16:06 - inside and here you have action yemo so
16:10 - this is a normal repository with some
16:13 - code in it and we have action EML file
16:16 - here this is basically what checkout
16:19 - action does in the background or the
16:22 - logic that people already wrote so you
16:24 - don't have to write it in your workflow
16:26 - and just reuse it and each action in the
16:30 - repository will have some sort of
16:33 - documentation where you see if you can
16:35 - configure some additional parameters for
16:38 - this checkout action and this here is
16:41 - version of that action so to say because
16:44 - as I said these are simple repositories
16:47 - that are built and released and have
16:50 - versioning
16:51 - so this is our checkout step
16:54 - and whenever you're using an action that
16:57 - is already available either at slash
16:59 - actions or maybe some other community or
17:02 - team has created one you can basically
17:05 - use any such action using the uses
17:08 - attribute so these are the official ones
17:10 - but whenever someone creates an action
17:13 - basically a repository with action yaml
17:16 - file you can use it here
17:19 - using the uses attribute
17:22 - so the second one second step is action
17:26 - called setup Java which is another
17:29 - repository in this actions list and what
17:32 - it does is basically prepares your
17:34 - environment with Java with a version
17:37 - that you defined here and this is the
17:40 - part where I mentioned that you don't
17:41 - have to install or configure anything
17:43 - like in Jenkins for example you would go
17:45 - and configure job version here you just
17:48 - Define that you want to use environment
17:52 - with Java on it so Java version 1.8 will
17:56 - be installed and available there the
17:59 - next one is a command so here you see
18:02 - the difference whenever we are referring
18:04 - to action in repository we use this
18:08 - attribute whenever we're running a
18:10 - command just like a Linux command for
18:12 - example command line command we are
18:14 - using run attribute so this basically
18:17 - just changes the permissions of Gradle
18:20 - file
18:21 - and the next step just calls Gradle
18:25 - build and all of this is done in the
18:27 - same environment so your code gets
18:29 - checked out Java version gets installed
18:31 - and then you call Gradle build in the
18:34 - same environment
18:35 - so obviously for this to work you have
18:38 - to have Java application that is built
18:40 - with cradle and now let's actually go
18:42 - ahead and execute this workflow for our
18:45 - Java project
18:46 - the name of the yaml file is also
18:49 - something that you can decide for
18:50 - yourself we can actually call it CI and
18:55 - start commit let's create a new branch
19:01 - and create a pull request that will be
19:03 - merged into Master branch
19:08 - and here you see that the workflow got
19:11 - triggered because our event matched to
19:16 - what just happened so we created a pull
19:17 - request against must branch and that
19:20 - triggered the workflow this is in
19:22 - progress and if I go into details we're
19:25 - gonna see what is actually happening
19:29 - so the bill completed so let's actually
19:31 - look at the steps that got executed
19:35 - setup job which basically prepares the
19:38 - job environment for executing the
19:40 - workflow here you see for example this
19:42 - action repositories got downloaded so
19:45 - that it can be used here you see the
19:47 - checkout action and you actually see
19:50 - pretty helpful information in all these
19:54 - steps and they also highlight the
19:56 - comment that gets executed so that you
19:58 - can easily see first of all the command
20:01 - and differentiate it from the logs and
20:03 - also see how they kind of interpret your
20:06 - comments for example with the options
20:08 - and flags and environmental variables
20:10 - and so on then we have the setup jdk
20:13 - again these are the commands that are
20:15 - got executed and some log files this is
20:18 - where the build the actual build
20:20 - happened build successful and then we
20:22 - have some post build actions which we
20:25 - didn't Define these are out of the box
20:27 - things get cleaned up so in my opinion
20:30 - for an initial setup of workflow or such
20:34 - a workflow it it's actually pretty
20:36 - straightforward and easy to set up and
20:38 - it's pretty difficult to mess this up
20:40 - so now you may be asking where do all
20:44 - these things get actually executed
20:46 - because you see that the code got
20:47 - checked out then you see some commands
20:49 - got executed Java version got installed
20:52 - and the Gradle build actually happened
20:55 - so where do all these things happen and
20:57 - how do they get executed so the way it
21:00 - works is that workflows on GitHub
21:03 - actions get executed on GitHub servers
21:06 - so it's managed by GitHub you don't need
21:09 - to set up some servers and configure
21:11 - your build tool install some plugins or
21:14 - whatever and prepare it for building the
21:16 - application so GitHub will manage all of
21:19 - this for you the servers will be
21:21 - configured and ready to execute your
21:24 - jobs an important to note here is that
21:26 - whenever you create a new job or
21:29 - whenever you create a new workflow with
21:31 - a set of jobs
21:32 - for every single job a fresh new GitHub
21:36 - server will be prepared or used to
21:41 - execute all those steps inside the job
21:43 - so one job will run on a single server
21:48 - at a time
21:49 - so for example if you have a list of
21:52 - jobs here maybe you have a job that
21:55 - builds the application and then you have
21:57 - another job that publishes Java artifact
22:01 - let's say to a repository
22:04 - so one job will run on one server
22:07 - another job will run on another server
22:09 - by default these jobs will run in
22:11 - parallel but of course in such a case
22:14 - you would want to wait until the first
22:17 - job was successful to execute the
22:19 - publish so here I could have a publish
22:23 - job of course in this case we want to
22:25 - wait for the build job to successfully
22:28 - execute before we publish the artifact
22:30 - so we can override this default parallel
22:33 - execution using needs
22:36 - and we can reference the
22:38 - build that it depends on and then we'll
22:40 - have a set of steps and actions here and
22:44 - another thing that should be noted here
22:46 - as well is this line here runs on so the
22:50 - servers that I mentioned that GitHub
22:52 - makes available for the workflows to run
22:55 - come in three categories so you can
22:58 - choose either Ubuntu Windows or Mac OS
23:01 - so for example if you have an
23:03 - application that you are shipping out to
23:06 - customers that have all three operating
23:10 - systems you can test each release for
23:14 - example or each commit to master you can
23:17 - test that on all three operating systems
23:21 - and the way we do that is using those
23:24 - attributes so we have a strategy a
23:27 - metrics metrics is used basically
23:29 - whenever you want to use multiple
23:31 - operating systems or maybe multiple
23:33 - versions of Java or whatever technology
23:37 - you're using for your application and
23:39 - here I'm going to Define OS options as
23:42 - an array so we have the Ubuntu latest we
23:46 - have Windows
23:49 - latest and we have Mac OS latest and
23:54 - here on runs on we're going to reference
23:56 - at least using metrics
23:59 - dot OS
24:01 - and let's actually try to apply this
24:03 - change so I have merged my pull request
24:06 - so here you see in the master Branch we
24:08 - have this dot GitHub workflows path with
24:12 - the CI EML file inside so now this has
24:15 - become part of the application code
24:18 - so I can adjust it here
24:20 - and let's actually commit straight to
24:23 - master branch
24:24 - and let's see our workflow and here you
24:28 - see three builds are getting executed in
24:32 - parallel on all three operating systems
24:36 - so as next steps we are gonna take that
24:39 - Java artifact file and we're gonna build
24:41 - a Docker image out of it because we live
24:44 - in world with containerization so jar
24:46 - file won't do it so once we have the
24:50 - docker image built we're gonna publish
24:52 - that to a Docker Hub private repository
24:54 - so let's do that first of all I have my
24:58 - Docker repository set up on Docker Hub
25:00 - it is super easy actually just create an
25:02 - account and you get one private
25:04 - repository for free
25:06 - so this is my private repository and I
25:09 - just have two images here of different
25:11 - application and this is where we're
25:13 - gonna push our Java demo image
25:17 - so what we're gonna do is uh let's go
25:20 - back to the editor so we can see the
25:21 - syntax highlighting better so here as a
25:24 - next step I will add a step and let's
25:27 - call it build and push Docker image
25:30 - because that's what we are doing
25:34 - and here we have a choice of either
25:37 - running the commands or using an action
25:40 - so of course we can write here all the
25:42 - commands we need for building and
25:44 - pushing Docker image this will be Docker
25:46 - login with credentials because first we
25:48 - need to log into the repository from
25:51 - GitHub so that it can push the image
25:54 - there
25:55 - um Docker build Docker tag and Docker
25:58 - push two nodes here whenever you want to
26:01 - execute a step with multiple commands so
26:04 - our own command line command so to say
26:06 - you can do that using the pipe syntax so
26:09 - this is a multi-line syntax in yeml so
26:12 - here we would have Docker login and some
26:15 - credentials here then we would have
26:17 - Docker builds
26:19 - Docker tag and so on and another point
26:22 - is that on a Linux Ubuntu machine so
26:26 - this one here we have Docker
26:28 - pre-installed so I don't have to set up
26:30 - environment I can execute Docker
26:33 - commands right away but as an
26:35 - alternative to command as I mentioned we
26:37 - can use an action and since building and
26:40 - pushing a Docker image is a pretty
26:43 - common step something that a lot of
26:46 - projects will be doing we can expect an
26:48 - action to exist or multiple such actions
26:51 - to already exist so what I'm going to do
26:53 - is I'm gonna go and find an action that
26:57 - does exactly that
26:58 - so we can Google
27:05 - and here you see we land on the
27:07 - marketplace of GitHub actions so if I go
27:11 - here I see a bunch of actions and here I
27:14 - can look for different functionalism I
27:17 - may need in my pipeline so we can go
27:20 - with this action and here you see the
27:22 - usage example so what's important with
27:25 - actions is that you have a possibility
27:27 - to pass in the parameters so it
27:29 - basically does all those Docker login
27:32 - Docker build Etc commands but obviously
27:35 - we want to set our own credentials we
27:37 - want to tell which Docker registry it
27:39 - should connect to in this case we have a
27:41 - Docker Hub registry and of course the
27:45 - image name so we can actually pass all
27:47 - those as parameters here you see it
27:49 - supports multiple Docker Registries here
27:51 - we have the docker Hub and here we have
27:54 - the example usage as well so I'm just
27:56 - going to copy that and we can paste it
27:58 - right here
28:02 - so this is the action with the version
28:05 - this has a version four right here
28:09 - and these are the parameters that we can
28:11 - overwrite you also have the description
28:13 - of the parameters and which one does
28:15 - what and what parameters you have
28:17 - available so let's see which ones we
28:19 - need to overwrite the docker registry
28:21 - name for Docker Hub is Docker dot IO we
28:25 - need to set the image repository name
28:28 - and image name so I'm going to go back
28:30 - to my Docker Hub and just copy that
28:37 - so this is the docker ID and this is the
28:42 - repository name and here you see
28:44 - credentials for username and password
28:46 - because as I mentioned GitHub needs to
28:49 - authenticate itself with the private
28:51 - Docker registry because it's obviously
28:53 - secured
28:54 - and we need to provide credentials here
28:56 - and since this yaml file this workflow
28:59 - yaml file is part of the code we can't
29:02 - just put plain text credentials here so
29:05 - we're using placeholders instead so
29:07 - these are referencing secret so where do
29:10 - those Secrets come from these ones
29:12 - actually can be created in the GitHub
29:14 - itself which is pretty convenient way to
29:17 - store all your secrets for your
29:19 - repository so if you go to settings
29:23 - and secrets
29:26 - here you can add secrets that your
29:29 - workflow uses
29:31 - so I'm gonna post my secrets in here so
29:34 - this is the username
29:41 - and this is a docus password the name
29:44 - should be of course what you're
29:45 - referencing here
29:47 - so I'm going to put in the password so
29:50 - these are the username and password that
29:52 - you use to log in in the docker Hub
29:55 - right here so I have my secrets here
29:57 - for my repository so now I can reference
30:00 - those secrets from my workflow files
30:02 - using secrets.the name of that secret
30:05 - and note that the syntax right here is
30:08 - the same as here this is basically yaml
30:10 - Syntax for referencing values and for
30:14 - this example we actually don't need all
30:17 - three operating systems let's go back to
30:20 - Ubuntu also as I mentioned Ubuntu is the
30:24 - one that has Docker pre-installed so
30:26 - this will be basically our step for
30:30 - building and pushing Docker image and I
30:33 - think this is more convenient because I
30:34 - don't have to write out all this Docker
30:36 - commands for building and pushing the
30:38 - image it all happens in the background
30:40 - you can also override the tag name here
30:43 - you can override the location of
30:45 - dockerfi but default is just the current
30:46 - directory we're going to leave this at
30:49 - defaults so let's actually go ahead and
30:51 - execute this step so I'm going to copy
30:54 - the whole file
30:56 - and let's
30:59 - place that
31:01 - and let's start our commit I'm just
31:03 - going to commit it straight to the
31:04 - master branch so here is our new file
31:07 - and if I go to actions
31:10 - here I see that the workflow ran and it
31:13 - completed so let's actually look inside
31:16 - the steps here we have built with Gradle
31:19 - and here we have built-in push Docker
31:20 - images let's actually open this one up
31:22 - seems like everything executed just fine
31:25 - it was successful so if I go to my
31:28 - Docker Hub repository and refresh
31:32 - here I have a new tag of my Java
31:35 - application and this is the default tag
31:38 - that this action gives my Docker image
31:41 - which has a branch name as a prefix and
31:43 - as you saw here in the parameters you
31:45 - can actually override that tag as well
31:46 - with the tech para so that was our
31:50 - continuous integration workflow we built
31:52 - Java artifact we built a Docker image
31:55 - and we pushed it to Docker repository I
31:57 - will make a full course on the GitHub
31:59 - actions for multiple other use cases
32:02 - including deploying the docker image on
32:05 - cloud or kubernetes environment testing
32:08 - and building with node.js application as
32:10 - well and also automating some other
32:12 - workflows so if you're interested stay
32:15 - tuned for that so hope you learned a lot
32:17 - in this video let me know your feedback
32:19 - also what else you would like to see and
32:21 - learn on this channel or if you have any
32:24 - questions in the comment section below
32:26 - thank you for watching and see you in
32:28 - the next video

Cleaned transcript:

in this GitHub actions tutorial we'll go through the following topics first I'm going to explain what GitHub actions actually is and we're going to look at specific developer workflow use cases that you can automate with GitHub actions after that I will explain the basic concepts of GitHub actions including the events and actions and workflow and how GitHub actions actually automates these workflows using these components having understood what GitHub action solves and how it makes it possible I will go through the most common workflow which is CI CD pipeline I will explain shortly why it's not just another CI CD tool or what are the benefits of GitHub actions CI CD pipeline finally we will go through a HandsOn demo where I explain the syntax of GitHub action's workflow file and then we will go through a complete CI pipeline setup with my example Java Gradle project which we will build into a Docker image and push to a private Docker repository on Docker hub so what is GitHub actions GitHub actions is a platform to automate developer workflows so software development workflows many of the tutorials that I've seen seem to convey that GitHub actions is a CI CD platform but as I said it's for automating developer workflows and CI CD pipeline is just one of the many workflows that you can automate with GitHub actions so now we need to understand what are those developer workflows in other words what is that the developers typically do that is so time consuming or air prone or just tedious that it needs automation so let's go through a couple of specific examples now as you probably already know GitHub is a platform for a lot of Open Source projects so a lot of developers who have developed their own libraries for Java or some other programming language they can host their projects on GitHub and make them publicly available is open source projects so that the community can use those projects but also to contribute to those projects so when a team or individual developers who manage those projects can new contributors or things happen inside the repository people creating pull requests people joining in as contributors and so on they have a lot of organizational tasks to manage let's see examples of such tasks let's say you have created a library that makes it easier to work with daytime in Java so it's a Java library that you created and you have some contributors and users of that library and whenever a use of the library sees that a new release of the library has a bug or something isn't more working they can create an issue that something is not working so you have to check that issue you have to sort it is it minor is it major is it something urgent is it something that others may have also reported is it reproducible for example maybe you assign it to one of the contributors or to yourself and so on let's say one of the contributors fixes the issue and creates a pull request so that you can merge it into the next release of that Library so you look at the pull request you review the code you make sure that the issue is not reproducible anymore with the fix and you merge it into the master node so this is going to be part of the next release so to say so you want to release the next version so the people who use the library can upgrade the version where the issue is fixed so after the pull request is merged into the master Branch you want to start a pipeline a build pipeline that will test your code build your artifact and so on you also want to maybe prepare some release notes where you document and what got added in the new version and maybe also adjust the version tag or the version number so all these things are workflow examples of what you have to do as a maintainer of such repository so you can imagine the bigger the project gets and the more contributors you get and the more features and issues they fix and more pull requests they create and the more people use your project the more organizational effort it is going to be so obviously as a developer you don't want to be sitting there doing all these tedious organizational stuff you want to automate as much as possible of those management tasks so that you can also concentrate on programming and developing new features and new functionalities in the project and for that purpose GitHub actions was created so with GitHub actions every time something happens in your repository or to your repository you can configure automatic actions to get executed in response and these things that are happening in your repository or to your repository are events in the GitHub space so someone creating a pull request is an event someone creating an issue is an event someone joining as a contributor is an event or you merging that pull request into the master branch is an event also note that other applications or tools that you may have integrated into your GitHub can also produce such events that you can respond to with automatic actions so when you automate these flows basically the concept is pretty simple you listen to any such events and depending on what event happens you want a certain workflow to execute automatically so every time someone creates an issue that's an event maybe you want to automatically sort that issue maybe label it assign it to respective contributor or maybe assign it to you per default maybe categorize it and also maybe write a script or a test that will try to automatically reproduce the issue and then add some status or comment or something that says reproducible or not reproducible so all these things can be automated with actions so each small task that you automatically trigger on an event is going to be a separate action so writing a comment putting a label on an issue assigning it to someone etc those are actions and this chain of actions or these combination of actions actually make up workflow so now that we understand the basic concepts of GitHub actions let's look at a specific workflow example so obviously not everybody has an open source project on GitHub you can have your own private projects of GitHub for the application that you're developing so the most common workflow you will think of for your repository would be CI CD pipeline you commit your code the build starts it tests your code builds it into an artifact then pushes the artifact in some storage and then deploys the application on a deployment server now why is it a big deal to have just another CI CD tool well the first and obvious Advantage is that if you're already hosting your code on GitHub now you can use the same tool for CI CD pipeline as well you don't have to set up another thirdparty tool and manage it separately you have the integrated into your code Repository another advantage of GitHub actions that I see is that it makes it really easy to build your pipeline so the setup process of the CI CD pipeline is really easy it is actually meant to be a tool for developers so they made it so that if you have a developers team you don't need an extra devops person who is dedicated to setting up and maintaining that CI CD pipeline in your project so now the question is how did they make it easy or how does it compare to other CI CD tools like Jenkins for example and why is it much easier to set up and manage so you know that when you think about CI CD pipeline one of the most important things is it's integration with different tools so what do I mean by that whether you are developing a node.js application which will be built into a Docker image and then pushed into a Nexus repository and deployed on digitalocean server or you're developing a Java application with Maven you have integration tests to test your application on Linux and windows servers then build it into a Docker image and push it to AWS container registry and deploy it on AWS eks so basically you can have many different combinations of tools that you're using in your development process so you don't want to be sitting there trying to configure your CI CD Pipeline with all these tools like installing Java and Maven and Docker and all these Integrations with Nexus and AWS and so on installing plugins and configuring them instead you want a simpler way of saying hey I need an environment which has node and Docker both available without me installing any of it with a version that I want and the same way I wanted to do the deployment part easily by simply connecting to the Target environment and deploying the application there and that's exactly the advantage that you have when you're using CI CD pipeline in GitHub actions and of course I will show you and explain how this works in the next demo part with my example Java Gradle project which we will build into a Docker image and push to our private Docker Repository so to see all this in action let's go to GitHub in here we can create a test repository call it my project public and that's it so this is my Mt project so to say so whenever you create a new project you have this actions tab integrated into the project that lets you get started with automating one of your workflows so now I can push my local code to the remote Repository so let's go back and refresh it and here I have my Java application which uses Gradle project so let's go to actions so here if we scroll down we see a big list of workflow templates which means you don't have to start writing your workflow file from scratch you can use one of the templates that matches technology your project uses and these are actually grouped in three main categories here we see the deployment workflows to deploy your code to cloud services or using some automation tools and here we have big section of continuous integration workflows and here if you look at the list a lot of options based on what programming language you're using what tools you're using and also combinations of such tools so for example you have Java with Gradle and you also have Java with Maven and so on so you have the build and test workflows as well as publish workflows where you publish your artifact to some repository and that's where I was talking about when I mentioned that different applications use different combination of tools and it's important for Sci CD tool to have an easy integration with many different tools so that it works for different projects all the way down these are the workflow examples that I mentioned at the beginning like greeting someone for example if a contributor joins your project you might want to send an automated greeting message to welcome or labeling your issues and so on and obviously you can make your own workflow with different combination and adjust it so let's create a build workflow for our Java Gradle application and obviously I will choose the Java Gradle workflow template and let's see what the workflow file looks like and see what happens it automatically creates this configuration view in my project or my repository it creates this path dot GitHub workflows and this is the file that basically holds my workflow logic it is written in yaml it's a yaml format and what's great with this list of workflow suggestions is that you get a preconfigured workflow that you may need to adjust just a little bit but most of the stuff is already here so you don't have to start from blank file so let's go through the syntax of this workflow file in detail so that we understand how to write our own workflows so I'm gonna copy this in my editor so we can see better so first of all we have the name of the workflow this is basically for you to describe what the workflow is doing these are the events that I mentioned so every time an event happens or events happen we can trigger a certain workflow so this is a section where we Define events that should trigger the following workflow and I think it's pretty intuitive every time someone pushes to master Branch we want to trigger this workflow or every time a pull request gets created with Master Branch as a Target this workflow will get executed which in this case makes sense because every time something gets pushed into a master or you want to merge something into Master it makes sense to run tests or to test our application to make sure that it's mergeable so to say or that we didn't break something in the master branch so that's pretty straightforward other examples that I mentioned could be creating an issue or a contributor joining this will be all events listed here you have a complete list of such events documented on this page so here you see the list and here you see some more detailed explanation and also the usage and as always I will put all the relevant links for this tutorial in the video description and this is a part that gets executed whenever these events happen so we have jobs these are the names of the job this could be arbitrary just like the name of the workflow so you can name it yourself and job basically groups a set of actions that will be executed right so as I mentioned events trigger a chain of actions or combination of actions and these are defined here so let's look at the first one pretty logical whenever we want to build application or run tests we need to check out the repository or the code first so how does this get executed or what is behind this syntax so the actions path in GitHub is where precreated or predefined actions are hosted so basically you can assume that everybody who uses a CI CD pipeline in GitHub actions will need to use checkout Command right so instead of letting everybody do that on their own they're creating an action called checkout that people can use so if I go to GitHub slash actions I will see list of repositories that contain all those actions so let's look for our checkout action so these are all these actions are basically repositories let's go inside and here you have action yemo so this is a normal repository with some code in it and we have action EML file here this is basically what checkout action does in the background or the logic that people already wrote so you don't have to write it in your workflow and just reuse it and each action in the repository will have some sort of documentation where you see if you can configure some additional parameters for this checkout action and this here is version of that action so to say because as I said these are simple repositories that are built and released and have versioning so this is our checkout step and whenever you're using an action that is already available either at slash actions or maybe some other community or team has created one you can basically use any such action using the uses attribute so these are the official ones but whenever someone creates an action basically a repository with action yaml file you can use it here using the uses attribute so the second one second step is action called setup Java which is another repository in this actions list and what it does is basically prepares your environment with Java with a version that you defined here and this is the part where I mentioned that you don't have to install or configure anything like in Jenkins for example you would go and configure job version here you just Define that you want to use environment with Java on it so Java version 1.8 will be installed and available there the next one is a command so here you see the difference whenever we are referring to action in repository we use this attribute whenever we're running a command just like a Linux command for example command line command we are using run attribute so this basically just changes the permissions of Gradle file and the next step just calls Gradle build and all of this is done in the same environment so your code gets checked out Java version gets installed and then you call Gradle build in the same environment so obviously for this to work you have to have Java application that is built with cradle and now let's actually go ahead and execute this workflow for our Java project the name of the yaml file is also something that you can decide for yourself we can actually call it CI and start commit let's create a new branch and create a pull request that will be merged into Master branch and here you see that the workflow got triggered because our event matched to what just happened so we created a pull request against must branch and that triggered the workflow this is in progress and if I go into details we're gonna see what is actually happening so the bill completed so let's actually look at the steps that got executed setup job which basically prepares the job environment for executing the workflow here you see for example this action repositories got downloaded so that it can be used here you see the checkout action and you actually see pretty helpful information in all these steps and they also highlight the comment that gets executed so that you can easily see first of all the command and differentiate it from the logs and also see how they kind of interpret your comments for example with the options and flags and environmental variables and so on then we have the setup jdk again these are the commands that are got executed and some log files this is where the build the actual build happened build successful and then we have some post build actions which we didn't Define these are out of the box things get cleaned up so in my opinion for an initial setup of workflow or such a workflow it it's actually pretty straightforward and easy to set up and it's pretty difficult to mess this up so now you may be asking where do all these things get actually executed because you see that the code got checked out then you see some commands got executed Java version got installed and the Gradle build actually happened so where do all these things happen and how do they get executed so the way it works is that workflows on GitHub actions get executed on GitHub servers so it's managed by GitHub you don't need to set up some servers and configure your build tool install some plugins or whatever and prepare it for building the application so GitHub will manage all of this for you the servers will be configured and ready to execute your jobs an important to note here is that whenever you create a new job or whenever you create a new workflow with a set of jobs for every single job a fresh new GitHub server will be prepared or used to execute all those steps inside the job so one job will run on a single server at a time so for example if you have a list of jobs here maybe you have a job that builds the application and then you have another job that publishes Java artifact let's say to a repository so one job will run on one server another job will run on another server by default these jobs will run in parallel but of course in such a case you would want to wait until the first job was successful to execute the publish so here I could have a publish job of course in this case we want to wait for the build job to successfully execute before we publish the artifact so we can override this default parallel execution using needs and we can reference the build that it depends on and then we'll have a set of steps and actions here and another thing that should be noted here as well is this line here runs on so the servers that I mentioned that GitHub makes available for the workflows to run come in three categories so you can choose either Ubuntu Windows or Mac OS so for example if you have an application that you are shipping out to customers that have all three operating systems you can test each release for example or each commit to master you can test that on all three operating systems and the way we do that is using those attributes so we have a strategy a metrics metrics is used basically whenever you want to use multiple operating systems or maybe multiple versions of Java or whatever technology you're using for your application and here I'm going to Define OS options as an array so we have the Ubuntu latest we have Windows latest and we have Mac OS latest and here on runs on we're going to reference at least using metrics dot OS and let's actually try to apply this change so I have merged my pull request so here you see in the master Branch we have this dot GitHub workflows path with the CI EML file inside so now this has become part of the application code so I can adjust it here and let's actually commit straight to master branch and let's see our workflow and here you see three builds are getting executed in parallel on all three operating systems so as next steps we are gonna take that Java artifact file and we're gonna build a Docker image out of it because we live in world with containerization so jar file won't do it so once we have the docker image built we're gonna publish that to a Docker Hub private repository so let's do that first of all I have my Docker repository set up on Docker Hub it is super easy actually just create an account and you get one private repository for free so this is my private repository and I just have two images here of different application and this is where we're gonna push our Java demo image so what we're gonna do is uh let's go back to the editor so we can see the syntax highlighting better so here as a next step I will add a step and let's call it build and push Docker image because that's what we are doing and here we have a choice of either running the commands or using an action so of course we can write here all the commands we need for building and pushing Docker image this will be Docker login with credentials because first we need to log into the repository from GitHub so that it can push the image there um Docker build Docker tag and Docker push two nodes here whenever you want to execute a step with multiple commands so our own command line command so to say you can do that using the pipe syntax so this is a multiline syntax in yeml so here we would have Docker login and some credentials here then we would have Docker builds Docker tag and so on and another point is that on a Linux Ubuntu machine so this one here we have Docker preinstalled so I don't have to set up environment I can execute Docker commands right away but as an alternative to command as I mentioned we can use an action and since building and pushing a Docker image is a pretty common step something that a lot of projects will be doing we can expect an action to exist or multiple such actions to already exist so what I'm going to do is I'm gonna go and find an action that does exactly that so we can Google and here you see we land on the marketplace of GitHub actions so if I go here I see a bunch of actions and here I can look for different functionalism I may need in my pipeline so we can go with this action and here you see the usage example so what's important with actions is that you have a possibility to pass in the parameters so it basically does all those Docker login Docker build Etc commands but obviously we want to set our own credentials we want to tell which Docker registry it should connect to in this case we have a Docker Hub registry and of course the image name so we can actually pass all those as parameters here you see it supports multiple Docker Registries here we have the docker Hub and here we have the example usage as well so I'm just going to copy that and we can paste it right here so this is the action with the version this has a version four right here and these are the parameters that we can overwrite you also have the description of the parameters and which one does what and what parameters you have available so let's see which ones we need to overwrite the docker registry name for Docker Hub is Docker dot IO we need to set the image repository name and image name so I'm going to go back to my Docker Hub and just copy that so this is the docker ID and this is the repository name and here you see credentials for username and password because as I mentioned GitHub needs to authenticate itself with the private Docker registry because it's obviously secured and we need to provide credentials here and since this yaml file this workflow yaml file is part of the code we can't just put plain text credentials here so we're using placeholders instead so these are referencing secret so where do those Secrets come from these ones actually can be created in the GitHub itself which is pretty convenient way to store all your secrets for your repository so if you go to settings and secrets here you can add secrets that your workflow uses so I'm gonna post my secrets in here so this is the username and this is a docus password the name should be of course what you're referencing here so I'm going to put in the password so these are the username and password that you use to log in in the docker Hub right here so I have my secrets here for my repository so now I can reference those secrets from my workflow files using secrets.the name of that secret and note that the syntax right here is the same as here this is basically yaml Syntax for referencing values and for this example we actually don't need all three operating systems let's go back to Ubuntu also as I mentioned Ubuntu is the one that has Docker preinstalled so this will be basically our step for building and pushing Docker image and I think this is more convenient because I don't have to write out all this Docker commands for building and pushing the image it all happens in the background you can also override the tag name here you can override the location of dockerfi but default is just the current directory we're going to leave this at defaults so let's actually go ahead and execute this step so I'm going to copy the whole file and let's place that and let's start our commit I'm just going to commit it straight to the master branch so here is our new file and if I go to actions here I see that the workflow ran and it completed so let's actually look inside the steps here we have built with Gradle and here we have builtin push Docker images let's actually open this one up seems like everything executed just fine it was successful so if I go to my Docker Hub repository and refresh here I have a new tag of my Java application and this is the default tag that this action gives my Docker image which has a branch name as a prefix and as you saw here in the parameters you can actually override that tag as well with the tech para so that was our continuous integration workflow we built Java artifact we built a Docker image and we pushed it to Docker repository I will make a full course on the GitHub actions for multiple other use cases including deploying the docker image on cloud or kubernetes environment testing and building with node.js application as well and also automating some other workflows so if you're interested stay tuned for that so hope you learned a lot in this video let me know your feedback also what else you would like to see and learn on this channel or if you have any questions in the comment section below thank you for watching and see you in the next video
