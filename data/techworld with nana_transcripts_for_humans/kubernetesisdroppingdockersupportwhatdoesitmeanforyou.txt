With timestamps:

00:00 - a couple of days ago an update was
00:02 - released that kubernetes
00:04 - will no longer support docker so what
00:07 - does that actually
00:08 - mean why did this change happen
00:11 - and how does that impact you as a
00:13 - developer
00:14 - or devops engineer who is working with
00:16 - docker and kubernetes
00:20 - as you probably already know kubernetes
00:22 - supports multiple container runtimes
00:25 - one of them being docker which is also
00:28 - one of the most
00:30 - popular container tools out there
00:33 - which is used in different projects and
00:35 - docker was also
00:36 - originally the container technology that
00:39 - made containers
00:40 - popular in the first place and also
00:42 - caused
00:43 - need for orchestration tools like
00:46 - kubernetes
00:46 - itself so let's say we deployed docker
00:50 - engine on a kubernetes worker node
00:52 - docker engine actually comes with three
00:54 - components you have
00:56 - docker server then you have the docker
00:58 - api which is basically
01:00 - for interacting with the server and we
01:02 - have the command line interface
01:04 - these are the docker commands that you
01:06 - can execute against the server
01:08 - and docker server component itself has a
01:11 - couple of components and features
01:13 - it has the container runtime which is
01:15 - responsible for
01:16 - starting and stopping containers
01:18 - basically managing the whole life cycle
01:20 - it has the volumes part which is for
01:23 - persisting data in docker
01:25 - it has the network interface for docker
01:28 - containers
01:28 - and also you can build images with
01:31 - docker
01:32 - and the fact is that the only part that
01:34 - kubernetes needs
01:35 - in order to run the containers inside
01:37 - the cluster
01:38 - is the container runtime of docker so
01:41 - kubernetes doesn't actually
01:42 - need all of those features that docker
01:45 - offers because
01:46 - either it has its own features for
01:48 - example for
01:49 - creating volumes or command line
01:52 - interface
01:53 - as well as container network interface
01:55 - or in case of
01:56 - docker feature of building images
01:59 - kubernetes doesn't actually need that
02:01 - because you're not building images
02:02 - inside kubernetes cluster
02:04 - or with kubernetes and for kubernetes to
02:07 - actually
02:08 - directly talk to and use this container
02:10 - runtime component
02:12 - it needs to interact with docker first
02:15 - and for this interaction with docker
02:17 - kubernetes uses docker shim
02:19 - and docker shim is basically part of or
02:21 - has been part of kubernetes code
02:24 - so kubernetes developers have been
02:26 - maintaining and updating
02:27 - dokashim till now and this docker shim
02:31 - this part of the code in kubernetes that
02:33 - talks to docker
02:34 - is actually what kubernetes is
02:37 - deprecating and eventually removing from
02:39 - code
02:40 - and as you see from this diagram it is
02:42 - logical not to deploy the whole docker
02:45 - with all the features that kubernetes
02:46 - doesn't need and instead have just the
02:49 - runtime component
02:50 - so that containers can run in kubernetes
02:53 - cluster
02:54 - this first of all will save a lot of
02:56 - resources like
02:57 - ram and cpu and storage because your
03:00 - installation is much
03:01 - smaller and also it will reduce the
03:03 - security risk
03:05 - because the less components you have the
03:07 - less security risk you are exposed to
03:10 - and the container runtime that docker
03:12 - uses is container d
03:14 - and container d component was actually
03:17 - originally part of the docker daemon
03:20 - code
03:20 - and docker has extracted it as a
03:23 - separate component
03:24 - so that it can be deployed as a
03:26 - standalone
03:27 - container runtime and used in kubernetes
03:31 - cluster
03:32 - and container d is actually now part of
03:34 - cncf
03:35 - and is being developed and maintained as
03:38 - a separate project
03:39 - and container d is the second most
03:42 - popular
03:43 - alternative to using docker as a runtime
03:46 - and in fact container d is already being
03:49 - used
03:50 - by major cloud platforms in kubernetes
03:53 - cluster
03:54 - for example aws eks or google cloud's
03:57 - kubernetes
03:58 - service all use container d already as a
04:01 - container runtime
04:02 - so container d is a mature and
04:06 - also very popular container runtime used
04:09 - in kubernetes clusters
04:10 - another alternative container runtime is
04:13 - cryo
04:14 - which is used by openshift so probably
04:17 - now the most
04:18 - interesting and important question is
04:20 - what does this change
04:22 - mean for you as a kubernetes user
04:25 - or kubernetes administrator now first
04:27 - let's start with kubernetes users
04:29 - and these are mostly developers maybe
04:32 - also devops engineers
04:33 - who are just installing resources on an
04:36 - already existing
04:38 - and configured kubernetes cluster so
04:40 - basically the cluster is running already
04:42 - and you're deploying your applications
04:44 - inside in this case the change or
04:47 - substituting
04:48 - the container runtime underneath
04:50 - kubernetes doesn't actually affect
04:53 - any of your workflows as kubernetes user
04:56 - because that layer is completely
04:58 - abstracted away from you're not
04:59 - interacting with containers
05:01 - so whatever container runtime is running
05:04 - underneath even if it changes
05:06 - you won't probably even notice that the
05:08 - second part is kubernetes administrators
05:11 - or
05:11 - operators and these are actually people
05:14 - who are setting up kubernetes cluster
05:16 - right they're creating them from scratch
05:19 - and maybe configuring
05:20 - some network configuration on kubernetes
05:23 - cluster etc
05:24 - and these are either devops engineers or
05:27 - system administrators or
05:29 - cloud engineers and as i mentioned if
05:31 - you have created your kubernetes cluster
05:33 - on cloud on one of those kubernetes
05:36 - services
05:36 - like on aws or google cloud etc
05:40 - you didn't actually have to install
05:43 - any binaries on the servers you didn't
05:46 - have to
05:46 - install and configure masternodes you
05:49 - didn't have to
05:50 - install container runtime and the
05:52 - kubernetes processes on worker nodes
05:54 - and that means that it is not your
05:57 - responsibility
05:59 - or worry what container runtime is
06:02 - running on those servers
06:03 - so basically the cloud providers who are
06:06 - managing your cluster for you
06:08 - are actually taking care of all that for
06:12 - you which is again
06:13 - one of the advantages of using managed
06:15 - community service
06:16 - because you don't have to worry about
06:18 - installing all these binaries and then
06:20 - updating the versions etc
06:22 - and as i said aws google cloud
06:25 - and many other platforms already use
06:29 - container d as a container runtime now
06:32 - there is
06:33 - one specific case where you as a
06:36 - kubernetes administrator
06:37 - have to take some action and that is if
06:40 - you have
06:41 - installed kubernetes maybe on bare metal
06:44 - or
06:45 - some just virtual machines using
06:48 - cube admin for example so you basically
06:51 - spin up
06:52 - some servers and you installed all those
06:54 - binaries the kubernetes processes
06:56 - container runtime the network interface
07:00 - one by one on those servers in order to
07:02 - create
07:03 - your own kubernetes cluster and this
07:06 - actually might be a case for companies
07:08 - that
07:09 - are using on-premise servers maybe
07:11 - because of some security
07:13 - issues and who are installing the whole
07:15 - kubernetes cluster
07:16 - on those servers from scratch including
07:19 - the container runtime
07:21 - and if it was docker then you have two
07:23 - alternatives
07:24 - first of all you can either substitute
07:27 - the container runtime
07:28 - and use container d or cryo or some
07:31 - other container runtime
07:33 - or as a second option if you for some
07:35 - reason
07:36 - still want to use docker as a container
07:38 - runtime in your cluster
07:40 - mirantis and docker actually announced
07:43 - that they will
07:44 - maintain and support dokoshim as a
07:46 - standalone
07:47 - open source component that you can
07:50 - install
07:51 - separately inside your kubernetes
07:53 - cluster to be able to run
07:55 - docker as a container runtime now in
07:58 - this case
07:59 - when do you need to make this change you
08:01 - won't have to
08:02 - do it immediately obviously because the
08:05 - first step is
08:06 - that docker support just got deprecated
08:10 - so you're just gonna have a warning if
08:12 - you update to the latest version of
08:14 - kubernetes
08:15 - and you will still have some time to
08:18 - make that
08:18 - change from docker to another container
08:21 - runtime
08:22 - so that means that even in this specific
08:25 - scenario there is basically
08:27 - not such a huge change and not an urgent
08:29 - one that you have to
08:31 - do inside your cluster and when
08:33 - kubernetes administrators
08:35 - actually substitute docker with another
08:37 - container runtime
08:38 - developers who are using kubernetes
08:41 - cluster and deploying applications
08:43 - inside probably won't even notice that
08:45 - change
08:46 - there's still two more questions that i
08:48 - want to address the first one being
08:50 - what about running kubernetes locally
08:52 - using mini cube or
08:54 - docker desktop do i have to
08:57 - change anything or does this change
09:00 - actually
09:00 - impact running mini cube cluster or
09:03 - running kubernetes cluster
09:04 - with docker desktop the answer to that
09:07 - is no it doesn't impact at all
09:09 - you as a community's user again will
09:12 - just install these tools
09:13 - and they actually already make the
09:16 - decision about
09:17 - which container runtime is used in the
09:20 - background
09:21 - because you don't have to install that
09:23 - separately it comes with the tool
09:25 - so in this case minicube has support for
09:27 - docker
09:28 - and container d so if it gets removed
09:31 - from mini cube as well
09:32 - you're just gonna install mini cube and
09:34 - you're gonna start using
09:35 - kubernetes cluster without even worrying
09:38 - or knowing what container runtime is
09:41 - running behind one of the frequent
09:44 - questions that i see
09:45 - is should i still learn docker
09:48 - if i'm gonna use kubernetes and what
09:51 - about building docker images in a cicd
09:53 - pipeline
09:54 - well one of the features of docker is
09:57 - actually building images
09:58 - so before the image can run as a
10:01 - container
10:02 - inside kubernetes cluster you first have
10:04 - to build that image
10:05 - right and this is where you will still
10:07 - be using docker
10:09 - in your cicd pipeline to build images
10:12 - from your application let's say we have
10:15 - this complete ci cd pipeline that builds
10:18 - docker images
10:19 - and then deploys to a kubernetes cluster
10:22 - how will this work because we're
10:23 - building docker images we're pushing
10:25 - them to docker repository
10:26 - and how are they going to run in
10:28 - kubernetes cluster
10:30 - where there's no docker installed and
10:32 - the answer to that
10:34 - is very simple every docker image
10:37 - can run in every container runtime
10:41 - so basically you can be building docker
10:43 - images pushing them to docker repository
10:45 - and deploying it to kubernetes cluster
10:47 - that runs
10:48 - container d as a container runtime and
10:51 - it will run perfectly
10:52 - in fact it is already happening if
10:54 - you're using eks
10:56 - and the reason for this compatibility
10:59 - and
10:59 - why all the docker images can run as
11:02 - containers
11:03 - in any container runtime is that
11:06 - these container tools are all compatible
11:08 - with each other because they're all
11:10 - using
11:11 - standards defined by open container
11:14 - initiative
11:15 - open container initiative or oci is
11:18 - basically a project
11:19 - of linux foundation that standardizes
11:23 - how container technologies should work
11:25 - and how they should be implemented
11:27 - and because docker and container d
11:30 - as well as cryo all comply to these
11:34 - open container initiative standards
11:37 - they're actually compatible with each
11:39 - other so you can run docker
11:40 - images on cryo runtime on
11:43 - container d runtime without any problem
11:46 - and that means you will not have to make
11:49 - any changes
11:50 - to your existing infrastructure to your
11:53 - existing
11:54 - ci cd setup even when kubernetes
11:57 - does not use docker as a container
12:00 - runtime
12:01 - so to wrap this up in most of the cases
12:03 - there's no action required
12:05 - especially if you're a kubernetes user
12:07 - as a kubernetes administrator if you
12:09 - have created
12:10 - cluster from scratch by installing
12:12 - everything yourself
12:13 - then either you can substitute docker
12:15 - with another container runtime
12:17 - or just use docker shim as a standalone
12:20 - component

Cleaned transcript:

a couple of days ago an update was released that kubernetes will no longer support docker so what does that actually mean why did this change happen and how does that impact you as a developer or devops engineer who is working with docker and kubernetes as you probably already know kubernetes supports multiple container runtimes one of them being docker which is also one of the most popular container tools out there which is used in different projects and docker was also originally the container technology that made containers popular in the first place and also caused need for orchestration tools like kubernetes itself so let's say we deployed docker engine on a kubernetes worker node docker engine actually comes with three components you have docker server then you have the docker api which is basically for interacting with the server and we have the command line interface these are the docker commands that you can execute against the server and docker server component itself has a couple of components and features it has the container runtime which is responsible for starting and stopping containers basically managing the whole life cycle it has the volumes part which is for persisting data in docker it has the network interface for docker containers and also you can build images with docker and the fact is that the only part that kubernetes needs in order to run the containers inside the cluster is the container runtime of docker so kubernetes doesn't actually need all of those features that docker offers because either it has its own features for example for creating volumes or command line interface as well as container network interface or in case of docker feature of building images kubernetes doesn't actually need that because you're not building images inside kubernetes cluster or with kubernetes and for kubernetes to actually directly talk to and use this container runtime component it needs to interact with docker first and for this interaction with docker kubernetes uses docker shim and docker shim is basically part of or has been part of kubernetes code so kubernetes developers have been maintaining and updating dokashim till now and this docker shim this part of the code in kubernetes that talks to docker is actually what kubernetes is deprecating and eventually removing from code and as you see from this diagram it is logical not to deploy the whole docker with all the features that kubernetes doesn't need and instead have just the runtime component so that containers can run in kubernetes cluster this first of all will save a lot of resources like ram and cpu and storage because your installation is much smaller and also it will reduce the security risk because the less components you have the less security risk you are exposed to and the container runtime that docker uses is container d and container d component was actually originally part of the docker daemon code and docker has extracted it as a separate component so that it can be deployed as a standalone container runtime and used in kubernetes cluster and container d is actually now part of cncf and is being developed and maintained as a separate project and container d is the second most popular alternative to using docker as a runtime and in fact container d is already being used by major cloud platforms in kubernetes cluster for example aws eks or google cloud's kubernetes service all use container d already as a container runtime so container d is a mature and also very popular container runtime used in kubernetes clusters another alternative container runtime is cryo which is used by openshift so probably now the most interesting and important question is what does this change mean for you as a kubernetes user or kubernetes administrator now first let's start with kubernetes users and these are mostly developers maybe also devops engineers who are just installing resources on an already existing and configured kubernetes cluster so basically the cluster is running already and you're deploying your applications inside in this case the change or substituting the container runtime underneath kubernetes doesn't actually affect any of your workflows as kubernetes user because that layer is completely abstracted away from you're not interacting with containers so whatever container runtime is running underneath even if it changes you won't probably even notice that the second part is kubernetes administrators or operators and these are actually people who are setting up kubernetes cluster right they're creating them from scratch and maybe configuring some network configuration on kubernetes cluster etc and these are either devops engineers or system administrators or cloud engineers and as i mentioned if you have created your kubernetes cluster on cloud on one of those kubernetes services like on aws or google cloud etc you didn't actually have to install any binaries on the servers you didn't have to install and configure masternodes you didn't have to install container runtime and the kubernetes processes on worker nodes and that means that it is not your responsibility or worry what container runtime is running on those servers so basically the cloud providers who are managing your cluster for you are actually taking care of all that for you which is again one of the advantages of using managed community service because you don't have to worry about installing all these binaries and then updating the versions etc and as i said aws google cloud and many other platforms already use container d as a container runtime now there is one specific case where you as a kubernetes administrator have to take some action and that is if you have installed kubernetes maybe on bare metal or some just virtual machines using cube admin for example so you basically spin up some servers and you installed all those binaries the kubernetes processes container runtime the network interface one by one on those servers in order to create your own kubernetes cluster and this actually might be a case for companies that are using onpremise servers maybe because of some security issues and who are installing the whole kubernetes cluster on those servers from scratch including the container runtime and if it was docker then you have two alternatives first of all you can either substitute the container runtime and use container d or cryo or some other container runtime or as a second option if you for some reason still want to use docker as a container runtime in your cluster mirantis and docker actually announced that they will maintain and support dokoshim as a standalone open source component that you can install separately inside your kubernetes cluster to be able to run docker as a container runtime now in this case when do you need to make this change you won't have to do it immediately obviously because the first step is that docker support just got deprecated so you're just gonna have a warning if you update to the latest version of kubernetes and you will still have some time to make that change from docker to another container runtime so that means that even in this specific scenario there is basically not such a huge change and not an urgent one that you have to do inside your cluster and when kubernetes administrators actually substitute docker with another container runtime developers who are using kubernetes cluster and deploying applications inside probably won't even notice that change there's still two more questions that i want to address the first one being what about running kubernetes locally using mini cube or docker desktop do i have to change anything or does this change actually impact running mini cube cluster or running kubernetes cluster with docker desktop the answer to that is no it doesn't impact at all you as a community's user again will just install these tools and they actually already make the decision about which container runtime is used in the background because you don't have to install that separately it comes with the tool so in this case minicube has support for docker and container d so if it gets removed from mini cube as well you're just gonna install mini cube and you're gonna start using kubernetes cluster without even worrying or knowing what container runtime is running behind one of the frequent questions that i see is should i still learn docker if i'm gonna use kubernetes and what about building docker images in a cicd pipeline well one of the features of docker is actually building images so before the image can run as a container inside kubernetes cluster you first have to build that image right and this is where you will still be using docker in your cicd pipeline to build images from your application let's say we have this complete ci cd pipeline that builds docker images and then deploys to a kubernetes cluster how will this work because we're building docker images we're pushing them to docker repository and how are they going to run in kubernetes cluster where there's no docker installed and the answer to that is very simple every docker image can run in every container runtime so basically you can be building docker images pushing them to docker repository and deploying it to kubernetes cluster that runs container d as a container runtime and it will run perfectly in fact it is already happening if you're using eks and the reason for this compatibility and why all the docker images can run as containers in any container runtime is that these container tools are all compatible with each other because they're all using standards defined by open container initiative open container initiative or oci is basically a project of linux foundation that standardizes how container technologies should work and how they should be implemented and because docker and container d as well as cryo all comply to these open container initiative standards they're actually compatible with each other so you can run docker images on cryo runtime on container d runtime without any problem and that means you will not have to make any changes to your existing infrastructure to your existing ci cd setup even when kubernetes does not use docker as a container runtime so to wrap this up in most of the cases there's no action required especially if you're a kubernetes user as a kubernetes administrator if you have created cluster from scratch by installing everything yourself then either you can substitute docker with another container runtime or just use docker shim as a standalone component
