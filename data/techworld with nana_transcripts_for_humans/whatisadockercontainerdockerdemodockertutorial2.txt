With timestamps:

00:00 - [Music]
00:05 - now that you know what a container
00:08 - concept is let's look at what a
00:10 - container is technically so technically
00:13 - container is made up of images so we
00:15 - have layers of stacked images on top of
00:17 - each other and at the base of most of
00:20 - the containers you would have a
00:21 - linux-based image which is either Alpine
00:24 - with a specific version or it could be
00:26 - some other Linux distribution and it's
00:28 - important for those base images to be
00:30 - small that's why most of them are
00:32 - actually Alpine because that will make
00:35 - sure that the containers stay small in
00:38 - size which is one of the advantages of
00:40 - using container so on top of the base
00:42 - image you would have application image
00:45 - and this is a simplified diagram usually
00:47 - you would have this intermediate images
00:49 - that will lead up to the actual
00:52 - application application image that is
00:54 - going to run in the container and of
00:56 - course on top of that you'll have all
00:58 - this configuration data so now I think
01:01 - it's time to dive into a practical
01:04 - example of how you can actually use a
01:07 - docker container and how it looks like
01:09 - when you install it and download it and
01:12 - run it on your local machine so to give
01:16 - you a bit of an idea of how this works
01:20 - let's head over to docker hub and search
01:24 - for PostgreSQL so here which is a docker
01:33 - official image I can see some of the
01:35 - versions and let's say I'm looking
01:37 - specifically for older version
01:41 - I don't know 96 something so I'm going
01:44 - to pull that one so this is a docker
01:47 - repository so that I can actually go
01:50 - ahead and pull the image pull the
01:52 - containers from the repository directly
01:55 - and because it's a public repository I
01:59 - don't have to login to it I don't have
02:01 - to provide any authentication
02:03 - credentials or anything I can just get
02:05 - started with a simple docker command
02:08 - without doing or configuring anything 2x
02:13 - stalker hub so on my terminal I can just
02:16 - do docker pull I can even do docker run
02:21 - and then just copy the the image name
02:26 - and if I don't specify any version it
02:30 - will just give me the latest but I want
02:32 - a specific version so I'm just I'm gonna
02:34 - go with 9.6 actually just to demonstrate
02:39 - so I can provide the version like this
02:43 - with a column and I can start run so as
02:48 - you see the first line says unable to
02:50 - find image locally so it knows that it
02:53 - has to go to docker hub and pull it from
02:55 - there and the next line says pulling
02:59 - from library Posterous and here you see
03:03 - a lot of hashes that says downloading
03:06 - and the this is what I mentioned earlier
03:09 - which is docker containers or any
03:12 - containers are made up of layers right
03:14 - you have the linux image layer you have
03:17 - the application layers and so on
03:18 - so what what you see here are actually
03:21 - all those layers that are separately
03:25 - downloading from the docker hub on my
03:27 - machine right and each one is the the
03:31 - advantage of splitting those
03:34 - applications and layers is that actually
03:36 - for example if the image changes or I
03:39 - have to download a newer version of
03:41 - Postgres what happens is that the layers
03:44 - they're the same between those two
03:47 - applications two versions of Posterous
03:50 - will not be downloaded again but only
03:54 - those layers that are different so for
03:57 - example now it's gonna take around 10 or
04:01 - 15 minutes to download this one image
04:04 - because I don't have any Postgres
04:06 - locally but if I were to download the
04:09 - next version I will it will take a
04:11 - little bit less time because some layers
04:14 - already exist on my local machine so now
04:18 - you see that it's already logging
04:20 - because if this command that I ran here
04:25 - the docker run we
04:26 - the container name inversion it fetches
04:30 - or it pulls the the container but it
04:32 - also starts it so it executes the start
04:35 - script right away as soon as it
04:38 - downloads it and here you see the output
04:40 - of the starting of the application so it
04:43 - just gives some output about starting
04:46 - the server and doing some configuration
04:48 - stuff and here you see database system
04:52 - is ready to accept connections and won't
04:55 - you start it so now let's open the new
04:59 - tab and see with dr. PS command you can
05:02 - actually see all the running containers
05:06 - so here you see that Postgres 9:6 is
05:11 - running and it actually says image so
05:14 - this is another important thing to
05:15 - understand when we're talking about
05:17 - containers there are two def two
05:19 - technical terms image and a container
05:22 - and a lot of people confuse those two I
05:24 - think and there is actually a very easy
05:27 - distinction between the two image is the
05:31 - actual packaging so actually saw one of
05:34 - the previous slides so image is the
05:38 - actual package that we saw in one of
05:40 - those previous slides so the application
05:43 - package together with the configuration
05:45 - and the dependencies and all these
05:47 - things this is actually the artifact
05:49 - that is movable around is actually the
05:52 - image container is when I pull that
05:57 - image on my local machine and I actually
06:00 - started so the application inside
06:02 - actually starts that creates the
06:05 - container environment so if it's not
06:07 - running basically it's an image it's
06:09 - just an artifact that's lying around if
06:12 - I start it and actually run it on my
06:14 - machine it is a container so that is the
06:18 - distinction so here it says the active
06:22 - running containers with a container ID
06:23 - image that it's running from and some
06:27 - entry comments that it executed and some
06:30 - other status information so this means
06:33 - that PostgreSQL is now running on my
06:36 - local machine simple as that if I were
06:40 - an out
06:40 - to need let's say another version of
06:43 - Posterous to run at the same time on my
06:45 - local machine I could just go ahead and
06:48 - say let's go back and let's say I want
06:52 - to have nine point six and ten point ten
06:56 - running at the same time on my local
06:59 - machine I would just to run Postgres and
07:10 - run again it doesn't find it locally so
07:14 - it pushes and this is what I actually
07:16 - explained to you earlier because it's
07:20 - the same application but with just a
07:23 - different version some of the layers of
07:25 - the image are the same so I don't have
07:29 - to fetch those again because they are
07:31 - already on my machine and it just
07:33 - fetches the layers that are different so
07:36 - that saves a little bit of time and I
07:39 - think it's it could be actually a good
07:42 - advantage
07:49 - so now we'll wait for other image image
07:53 - layers to load so that we have the
07:56 - second
07:58 - Postgres version running and now you see
08:01 - I have phosphorous 9.6 running in this
08:07 - command line tab and I have Postgres
08:11 - version 10 point and running in the next
08:13 - one so I have two post-crisis with
08:16 - different versions running and I can
08:17 - actually output them here if both of
08:20 - them running and there's no conflict
08:22 - between those two like I can actually
08:25 - run any number of applications with
08:29 - different versions maybe of the same
08:30 - application with no problem at all
08:33 - and we're going to go through the how to
08:37 - use those containers in your application
08:40 - and the port configuration in some of
08:42 - the other configuration stuff later in
08:44 - this tutorial when we do a deep dive but
08:46 - this is just for you to get the first
08:49 - visual image of how docker containers
08:53 - actually work
08:54 - how they look like and how easily you
08:56 - can actually start them on your local
08:58 - machine without having to implement a
09:01 - specific version of post-chorus
09:03 - application and do all the configuration
09:06 - yourself thanks for watching the video I
09:09 - hope it was helpful and if it was don't
09:11 - forget to like it this is a video series
09:13 - so I will create a new one every week so
09:16 - if you want to be notified whenever a
09:18 - new video comes out then subscribe to my
09:20 - channel if you have any questions if
09:23 - something wasn't clear in the video
09:25 - please post them in a comment section
09:26 - below and I will try to answer them so
09:29 - thank you and see you in the next video

Cleaned transcript:

now that you know what a container concept is let's look at what a container is technically so technically container is made up of images so we have layers of stacked images on top of each other and at the base of most of the containers you would have a linuxbased image which is either Alpine with a specific version or it could be some other Linux distribution and it's important for those base images to be small that's why most of them are actually Alpine because that will make sure that the containers stay small in size which is one of the advantages of using container so on top of the base image you would have application image and this is a simplified diagram usually you would have this intermediate images that will lead up to the actual application application image that is going to run in the container and of course on top of that you'll have all this configuration data so now I think it's time to dive into a practical example of how you can actually use a docker container and how it looks like when you install it and download it and run it on your local machine so to give you a bit of an idea of how this works let's head over to docker hub and search for PostgreSQL so here which is a docker official image I can see some of the versions and let's say I'm looking specifically for older version I don't know 96 something so I'm going to pull that one so this is a docker repository so that I can actually go ahead and pull the image pull the containers from the repository directly and because it's a public repository I don't have to login to it I don't have to provide any authentication credentials or anything I can just get started with a simple docker command without doing or configuring anything 2x stalker hub so on my terminal I can just do docker pull I can even do docker run and then just copy the the image name and if I don't specify any version it will just give me the latest but I want a specific version so I'm just I'm gonna go with 9.6 actually just to demonstrate so I can provide the version like this with a column and I can start run so as you see the first line says unable to find image locally so it knows that it has to go to docker hub and pull it from there and the next line says pulling from library Posterous and here you see a lot of hashes that says downloading and the this is what I mentioned earlier which is docker containers or any containers are made up of layers right you have the linux image layer you have the application layers and so on so what what you see here are actually all those layers that are separately downloading from the docker hub on my machine right and each one is the the advantage of splitting those applications and layers is that actually for example if the image changes or I have to download a newer version of Postgres what happens is that the layers they're the same between those two applications two versions of Posterous will not be downloaded again but only those layers that are different so for example now it's gonna take around 10 or 15 minutes to download this one image because I don't have any Postgres locally but if I were to download the next version I will it will take a little bit less time because some layers already exist on my local machine so now you see that it's already logging because if this command that I ran here the docker run we the container name inversion it fetches or it pulls the the container but it also starts it so it executes the start script right away as soon as it downloads it and here you see the output of the starting of the application so it just gives some output about starting the server and doing some configuration stuff and here you see database system is ready to accept connections and won't you start it so now let's open the new tab and see with dr. PS command you can actually see all the running containers so here you see that Postgres 96 is running and it actually says image so this is another important thing to understand when we're talking about containers there are two def two technical terms image and a container and a lot of people confuse those two I think and there is actually a very easy distinction between the two image is the actual packaging so actually saw one of the previous slides so image is the actual package that we saw in one of those previous slides so the application package together with the configuration and the dependencies and all these things this is actually the artifact that is movable around is actually the image container is when I pull that image on my local machine and I actually started so the application inside actually starts that creates the container environment so if it's not running basically it's an image it's just an artifact that's lying around if I start it and actually run it on my machine it is a container so that is the distinction so here it says the active running containers with a container ID image that it's running from and some entry comments that it executed and some other status information so this means that PostgreSQL is now running on my local machine simple as that if I were an out to need let's say another version of Posterous to run at the same time on my local machine I could just go ahead and say let's go back and let's say I want to have nine point six and ten point ten running at the same time on my local machine I would just to run Postgres and run again it doesn't find it locally so it pushes and this is what I actually explained to you earlier because it's the same application but with just a different version some of the layers of the image are the same so I don't have to fetch those again because they are already on my machine and it just fetches the layers that are different so that saves a little bit of time and I think it's it could be actually a good advantage so now we'll wait for other image image layers to load so that we have the second Postgres version running and now you see I have phosphorous 9.6 running in this command line tab and I have Postgres version 10 point and running in the next one so I have two postcrisis with different versions running and I can actually output them here if both of them running and there's no conflict between those two like I can actually run any number of applications with different versions maybe of the same application with no problem at all and we're going to go through the how to use those containers in your application and the port configuration in some of the other configuration stuff later in this tutorial when we do a deep dive but this is just for you to get the first visual image of how docker containers actually work how they look like and how easily you can actually start them on your local machine without having to implement a specific version of postchorus application and do all the configuration yourself thanks for watching the video I hope it was helpful and if it was don't forget to like it this is a video series so I will create a new one every week so if you want to be notified whenever a new video comes out then subscribe to my channel if you have any questions if something wasn't clear in the video please post them in a comment section below and I will try to answer them so thank you and see you in the next video
