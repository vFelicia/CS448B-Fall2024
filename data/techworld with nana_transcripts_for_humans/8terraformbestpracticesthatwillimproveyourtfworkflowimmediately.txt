With timestamps:

00:00 - terraform is one of the most popular
00:02 - infrastructure as code tools out there
00:05 - and if you have just started working
00:07 - with terraform you may be asking
00:09 - yourself whether you are doing things in
00:11 - the right way so in this video you will
00:14 - learn eight terraform best practices
00:17 - that will improve your terraform
00:18 - workflows immediately and make you feel
00:21 - more confident when using terraform in
00:24 - your projects
00:25 - now many of the best practices are
00:27 - around terraform state and state file so
00:31 - let's quickly understand what they are
00:33 - first
00:34 - terraform is a tool that automates
00:37 - creating infrastructure and then making
00:39 - changes and maintaining that
00:41 - infrastructure
00:43 - and to keep track of the current
00:44 - infrastructure state and what changes
00:47 - you want to make
00:49 - terraform uses state
00:52 - when you change configuration in
00:54 - terraform script
00:55 - it will compare your desired
00:58 - configuration with the current
01:00 - infrastructure state and figure out a
01:03 - plan to make those desired changes
01:06 - and state in terraform is a simple
01:09 - json file which looks like this and has
01:12 - a list of all the infrastructure
01:15 - resources that terraform manages for you
01:21 - because it's a simple json file
01:24 - technically you could make adjustments
01:27 - to the state file directly by manually
01:30 - changing stuff inside
01:32 - however the first best practice is only
01:35 - change the state file contents through
01:38 - terraform command execution
01:40 - do not manually manipulate it otherwise
01:43 - you may get some unexpected results
01:49 - now where does this state file actually
01:51 - come from
01:53 - when you first execute terraform apply
01:55 - command terraform will automatically
01:58 - create the state file locally but what
02:01 - if you're working in a team
02:03 - so other team members also need to
02:05 - execute terraform commands and they will
02:07 - also need the state file for that
02:10 - in fact every team member will need the
02:12 - latest state file before making their
02:15 - own updates
02:16 - so the second best practice is to
02:18 - configure a shared remote storage for
02:22 - the state file every team member can now
02:24 - execute terraform commands using this
02:27 - shared state file in practice remote
02:30 - storage backend for state file can be
02:33 - amazon's s3 bucket
02:35 - terraform cloud azure google cloud etc
02:39 - and you can configure terraform to use
02:41 - that remote storage as a state file
02:44 - location
02:47 - but what if two team members execute
02:50 - terraform commands at the same time what
02:53 - happens to the state file when you have
02:55 - concurrent changes
02:57 - you might get a conflict or mess up your
02:59 - state file
03:00 - to avoid changing terraform state at the
03:03 - same time
03:04 - we have the next best practice which is
03:07 - locking the state file until an update
03:10 - is fully completed and then unlock it
03:12 - for the next command
03:14 - this way you can prevent concurrent
03:16 - edits to your state file in practice you
03:19 - will have this configured in your
03:20 - storage backend in s3 bucket for example
03:24 - dynamodb service is automatically used
03:27 - for state file locking
03:29 - but note that not all storage back-ends
03:32 - support this
03:34 - so be aware of that when choosing a
03:36 - remote storage for the state file if
03:39 - supported terraform will lock your state
03:42 - file automatically
03:46 - now what happens if you lose your state
03:48 - file something may happen to your remote
03:50 - storage location or someone may
03:53 - accidentally override the data
03:55 - or it may get corrupted
03:58 - to avoid this the next best practice is
04:00 - to back up your state file
04:03 - in practice you can do this by enabling
04:06 - versioning for it and many storage
04:08 - backends will have such a feature like
04:10 - in s3 bucket for example you can simply
04:13 - turn on the versioning feature this also
04:16 - means that you have a nice history of
04:18 - state changes and you can reverse to any
04:21 - previous terraform state if you want to
04:26 - great so now you have your state file in
04:28 - a shared remote location
04:30 - with locking enabled and file versioning
04:33 - for backup so you have one state file
04:36 - for your infrastructure
04:38 - but usually you will have multiple
04:40 - environments like development testing
04:42 - and production
04:44 - so which environment does this state
04:46 - file belong to
04:47 - can you manage all the environments with
04:50 - one state file and this is the next best
04:53 - practice to use one dedicated state file
04:56 - per environment
04:58 - and each state file will have its own
05:00 - storage backend with locking and
05:02 - versioning configured these were best
05:04 - practices related to terraform state
05:08 - the next three best practices are about
05:10 - how to manage the terraform code itself
05:14 - and how to apply infrastructure changes
05:17 - these practices can be grouped into a
05:19 - relatively new trend that emerged in the
05:23 - infrastructure as code space which is
05:25 - called git ops if you want to know what
05:28 - git ups is i have a separate dedicated
05:31 - video on that which you can also check
05:33 - out
05:34 - so let's see the next best practices
05:39 - when you're working on terraform scripts
05:41 - in a team it's important to share the
05:44 - code in order to collaborate effectively
05:47 - so as the next best practice you should
05:49 - actually host terraform code in its own
05:52 - git repository just like your
05:55 - application code
05:56 - this is not only beneficial for
05:58 - effective collaboration in a team but
06:01 - you also get versioning for your
06:03 - infrastructure code changes
06:05 - so you can have a history of changes in
06:07 - your terraform code
06:09 - before moving on to the next best
06:11 - practice i want to give a shout out to
06:13 - n0 who made this video possible
06:17 - m0 automates and simplifies the
06:20 - terraform teragrand and git ops
06:23 - workflows for provisioning cloud
06:25 - deployments for example it gives you
06:28 - visibility of the infrastructure changes
06:31 - when creating the pull request and
06:33 - automatically deploys your changes after
06:35 - merging it into your git repository and
06:38 - with its self-service capabilities m0
06:41 - allows developers to spin up and destroy
06:44 - an environment with one click but also
06:46 - integrates policy is called guard rails
06:49 - to limit direct cloud access
06:52 - check out n0.com for all its use cases
06:55 - and capabilities now let's continue with
06:58 - the best practice number seven
07:00 - now who is allowed to make changes to
07:03 - terraform code can anyone just directly
07:06 - commit changes to the git repository the
07:09 - best practice is actually to treat your
07:12 - terraform code just like your
07:14 - application code this means you should
07:16 - have the same process of reviewing and
07:19 - testing the changes in your
07:21 - infrastructure code as you have for your
07:24 - application code
07:25 - with a continuous integration pipeline
07:28 - using merge requests to integrate code
07:31 - changes
07:32 - this will allow your team to collaborate
07:35 - and produce quality infrastructure code
07:38 - which is tested and reviewed
07:42 - great so you have tested and reviewed
07:45 - code changes in your git repository
07:47 - now how do you apply them to the actual
07:50 - infrastructure
07:51 - because eventually you want to update
07:53 - your infrastructure with those changes
07:55 - right
07:56 - the final best practice is to execute
07:58 - terraform commands
08:00 - to apply changes in a continuous
08:03 - deployment pipeline
08:04 - so instead of team members manually
08:07 - updating the infrastructure by executing
08:10 - terraform commands from their own
08:11 - computers it should happen only
08:15 - from an automated build
08:17 - this way you have a single location from
08:20 - which all infrastructure changes happen
08:23 - and you have a more streamlined process
08:25 - of updating your infrastructure
08:28 - these are the 8 terraform best practices
08:31 - you can apply today to make your
08:33 - terraform projects more robust and
08:35 - easier to work on as a team
08:38 - do you know some other best practices
08:40 - that i forgot about in my video please
08:42 - share them in the comments and finally
08:45 - if you want to learn more about
08:46 - terraform then check out my other
08:49 - terraform resources that i will link in
08:51 - the video description with that thank
08:54 - you for watching and see you in the next
08:55 - video

Cleaned transcript:

terraform is one of the most popular infrastructure as code tools out there and if you have just started working with terraform you may be asking yourself whether you are doing things in the right way so in this video you will learn eight terraform best practices that will improve your terraform workflows immediately and make you feel more confident when using terraform in your projects now many of the best practices are around terraform state and state file so let's quickly understand what they are first terraform is a tool that automates creating infrastructure and then making changes and maintaining that infrastructure and to keep track of the current infrastructure state and what changes you want to make terraform uses state when you change configuration in terraform script it will compare your desired configuration with the current infrastructure state and figure out a plan to make those desired changes and state in terraform is a simple json file which looks like this and has a list of all the infrastructure resources that terraform manages for you because it's a simple json file technically you could make adjustments to the state file directly by manually changing stuff inside however the first best practice is only change the state file contents through terraform command execution do not manually manipulate it otherwise you may get some unexpected results now where does this state file actually come from when you first execute terraform apply command terraform will automatically create the state file locally but what if you're working in a team so other team members also need to execute terraform commands and they will also need the state file for that in fact every team member will need the latest state file before making their own updates so the second best practice is to configure a shared remote storage for the state file every team member can now execute terraform commands using this shared state file in practice remote storage backend for state file can be amazon's s3 bucket terraform cloud azure google cloud etc and you can configure terraform to use that remote storage as a state file location but what if two team members execute terraform commands at the same time what happens to the state file when you have concurrent changes you might get a conflict or mess up your state file to avoid changing terraform state at the same time we have the next best practice which is locking the state file until an update is fully completed and then unlock it for the next command this way you can prevent concurrent edits to your state file in practice you will have this configured in your storage backend in s3 bucket for example dynamodb service is automatically used for state file locking but note that not all storage backends support this so be aware of that when choosing a remote storage for the state file if supported terraform will lock your state file automatically now what happens if you lose your state file something may happen to your remote storage location or someone may accidentally override the data or it may get corrupted to avoid this the next best practice is to back up your state file in practice you can do this by enabling versioning for it and many storage backends will have such a feature like in s3 bucket for example you can simply turn on the versioning feature this also means that you have a nice history of state changes and you can reverse to any previous terraform state if you want to great so now you have your state file in a shared remote location with locking enabled and file versioning for backup so you have one state file for your infrastructure but usually you will have multiple environments like development testing and production so which environment does this state file belong to can you manage all the environments with one state file and this is the next best practice to use one dedicated state file per environment and each state file will have its own storage backend with locking and versioning configured these were best practices related to terraform state the next three best practices are about how to manage the terraform code itself and how to apply infrastructure changes these practices can be grouped into a relatively new trend that emerged in the infrastructure as code space which is called git ops if you want to know what git ups is i have a separate dedicated video on that which you can also check out so let's see the next best practices when you're working on terraform scripts in a team it's important to share the code in order to collaborate effectively so as the next best practice you should actually host terraform code in its own git repository just like your application code this is not only beneficial for effective collaboration in a team but you also get versioning for your infrastructure code changes so you can have a history of changes in your terraform code before moving on to the next best practice i want to give a shout out to n0 who made this video possible m0 automates and simplifies the terraform teragrand and git ops workflows for provisioning cloud deployments for example it gives you visibility of the infrastructure changes when creating the pull request and automatically deploys your changes after merging it into your git repository and with its selfservice capabilities m0 allows developers to spin up and destroy an environment with one click but also integrates policy is called guard rails to limit direct cloud access check out n0.com for all its use cases and capabilities now let's continue with the best practice number seven now who is allowed to make changes to terraform code can anyone just directly commit changes to the git repository the best practice is actually to treat your terraform code just like your application code this means you should have the same process of reviewing and testing the changes in your infrastructure code as you have for your application code with a continuous integration pipeline using merge requests to integrate code changes this will allow your team to collaborate and produce quality infrastructure code which is tested and reviewed great so you have tested and reviewed code changes in your git repository now how do you apply them to the actual infrastructure because eventually you want to update your infrastructure with those changes right the final best practice is to execute terraform commands to apply changes in a continuous deployment pipeline so instead of team members manually updating the infrastructure by executing terraform commands from their own computers it should happen only from an automated build this way you have a single location from which all infrastructure changes happen and you have a more streamlined process of updating your infrastructure these are the 8 terraform best practices you can apply today to make your terraform projects more robust and easier to work on as a team do you know some other best practices that i forgot about in my video please share them in the comments and finally if you want to learn more about terraform then check out my other terraform resources that i will link in the video description with that thank you for watching and see you in the next video
