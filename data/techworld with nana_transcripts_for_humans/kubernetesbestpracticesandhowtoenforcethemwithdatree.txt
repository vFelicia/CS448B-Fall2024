With timestamps:

00:00 - In this video we're going to talk 
about a tool that helps you prevent  
00:04 - Kubernetes misconfigurations from reaching 
production and the tool is called Datree. Let's  
00:11 - say that your company has multiple project 
teams, where developers are deploying their  
00:16 - applications to Kubernetes. A DevOps engineer who 
is managing the kubernetes clusters in the company  
00:23 - wants every project team to follow certain rules 
and write kubernetes configuration files, which  
00:29 - follow the best practices. This way they want to 
prevent any misconfigurations or security issues  
00:37 - from ending up in the cluster when 
the applications are deployed.  
00:42 - So to avoid this, the kubernetes administrators 
will screen the configuration regularly and check  
00:48 - for any misconfigurations or security issues. 
Many developers are not kubernetes experts so very  
00:56 - often they end up creating manifests that do not 
follow the best practices. What are the examples  
01:03 - of these best practices you may be asking. Well 
this could be specifying a version on every  
01:10 - image used in the pod instead of the latest tag, 
which is a common mistake in configuration files  
01:16 - or sometimes developers would just copy and paste 
the kubernetes configuration files for a certain  
01:23 - application from internet without a proper 
check, whether there are any security issues  
01:29 - in this configuration or not. For example 
running a container with root privilege or using  
01:36 - deprecated kubernetes APIs for the components 
are some of the bad practice examples.
01:44 - So after the kubernetes administrators 
detect the issues in the configuration,  
01:49 - they would notify the teams about the issues which 
they need to fix and this needs to be done for all  
01:56 - the clusters across the company. Sometimes the 
teams may not prioritize the issues or delay  
02:02 - the fixes but also if this validation process 
is not automated, the admins may miss something  
02:09 - and the misconfigurations and security issues may 
actually end up all the way in the production. So  
02:16 - the question is: how can kubernetes administrators 
delegate kubernetes responsibilities to developers  
02:25 - without losing control. So basically letting them 
still create those manifests themselves but making  
02:33 - sure any configuration that ends up in the cluster 
is correct and follows the best practice rules  
02:39 - that administrators want. Well that's exactly the 
problem Datree solves. So what is Datree and how  
02:47 - does it solve this problem? It's actually very 
simple Datree lets the kubernetes administrators  
02:53 - create policies and best practices they want 
every team to follow and then run these policies  
03:00 - as automated checks as part of the CI/CD 
pipeline or even earlier in the development  
03:07 - workflow as a pre-commit hook for example. 
This moves the configuration checks to the left  
03:13 - preventing them from ending up in the cluster, 
but also letting developers fix them right away  
03:19 - without the need of back and forth communication 
from kubernetes admins explaining developers  
03:26 - why and what needs to be fixed. So Datree is a 
command line tool, which you can install with  
03:32 - a single command which means you can install it 
on any machine and integrate it into any tool  
03:40 - and trigger it whenever you want like every 
time developers commit changes or create a pull  
03:45 - request or merge a pull request etc. So basically 
kubernetes admins who actually know kubernetes and  
03:53 - how to properly configure kubernetes components 
will create policies with all the rules and best  
03:59 - practices once, then integrate them in all the 
teams development workflows and this way make the  
04:07 - company-wide consistent policies that all the 
projects will use. And to integrate it into  
04:14 - multiple ci cd pipelines you actually don't have 
to copy and paste the policies and include them  
04:20 - in every project. These policies are stored 
centrally in Datree and not in the project  
04:26 - as additional project file so you can reference 
the central policy and use them in all the cicd  
04:33 - pipelines. Also in addition to you being able to 
create policies Datree already gives you a list of  
04:40 - built-in policies, which covers all the 
kubernetes best practices of configuration  
04:46 - and this means once you set it up you can already 
start validating your kubernetes YAML files with  
04:52 - these built-in policies. Now in addition to 
kubernetes manifests files many people use  
04:58 - helm charts to create components in kubernetes. 
In this case along with the kubernetes YAML files  
05:04 - you will want to check the configuration files 
inside your helm charts right? Well Datree also  
05:09 - has a helm plugin, which you can use to check 
any misconfigurations inside your helm charts.  
05:15 - And now we're going to see how to easily set 
up Datree and start validating our kubernetes  
05:22 - configuration files right away. So let's jump into 
the demo! First we install Datree locally with  
05:30 - one single command which you can 
either grab on their official page  
05:35 - or in the getting started documentation 
as well. So just copying the curl command
05:44 - this will install Datree locally. Once we have 
Datree installed we can actually already start  
05:51 - validating our kubernetes configuration files.
05:56 - So I'm in a project, where I have one 
configuration file that basically just  
06:02 - creates an nginx deployment and a service to that 
deployment - so a very simple kubernetes yaml file  
06:12 - that I want to validate and to do that I can just 
execute "datree test" and the name of the file.  
06:21 - Datree will validate the kubernetes configuration 
file for the yaml format for the kubernetes schema  
06:30 - and finally all the policies, the built-in 
policies, that Datree provides you with based  
06:37 - on the best practices of kubernetes configuration. 
And it actually detected that we have five issues  
06:44 - in our configuration file and for each issue 
it also gives you a detailed explanation  
06:50 - what that issue is and why it's failing. So in 
our case we're missing a readiness and liveness  
06:56 - probes on our container, we haven't specified an 
image version here, we also just have one replica
07:05 - and we're exposing a node 
port through the service.  
07:09 - and these are all issues that are against 
kubernetes configuration best practices. So  
07:15 - all this needs to be fixed. But we actually have 
more than that. We have a link here to Datree UI.  
07:23 - So if I copy this we can log into Datree 
with a github account and in my account here,  
07:31 - which is now automatically connected to this 
command line execution, I actually have a list  
07:37 - of the built-in rules configured for my account 
and for each rule you have a toggle that lets you  
07:44 - enable or disable that rule. So for example we 
decide you know what we don't need to do any  
07:50 - liveness and readiness probes for our deployments 
so we're gonna disable this. So now if I run the  
07:57 - check again we see that those two are not marked 
as issues anymore. We can also change the text  
08:05 - of the message that is displayed in the issue 
whenever the policy is violated. So this will  
08:13 - be additional information for the developers 
whenever they violate this policy. So let's  
08:19 - say "incorrect value for key "replicas" - in our 
projects we always use at least three replicas"
08:33 - And now if i run the test again
08:38 - we have the changed message here. Also for each 
policy you can actually get more information to  
08:45 - really understand why this is a violation and 
why does it not follow the best practice. so for  
08:51 - example if you want to find out more about this 
issue here clicking on this information icon,  
08:58 - this will show you a page, where the policy is 
explained that exposing a node port is less secure  
09:07 - and forces you to create unnecessary coupling 
between services. And for each policy it also  
09:13 - shows you how to fix that. In most cases 
with an example of the yaml code itself.  
09:20 - So you don't need to search on internet to 
understand the policy and also find the fix,  
09:24 - you basically have it all in one place. 
So in our case let's actually fix  
09:30 - our issues, here we need to use a different type 
for a node port and let's use a load balancer
09:40 - let's also fixate the image version to 
1.21 and increase the replicas to 3. and  
09:51 - run the check again and this shows that we have no 
violations in our kubernetes configuration file.  
10:01 - Now we rendered Datree check a 
couple of times before the fixes  
10:05 - and after the fixes. I can actually see that 
history also in Datree UI in the history tab.  
10:13 - This is especially important if you use the 
same policies account for multiple pipelines.  
10:18 - In this case you will have all these invocations 
from different sources in one place right here. So  
10:24 - that you can see that the tool is used properly 
in your organization on the left you have the  
10:30 - list of invocations and if you click in one 
you will see the details of that invocation.  
10:36 - Now going back to the terminal as you see here 
it also checks the kubernetes schema validation,
10:45 - which means if I misspell an attribute 
name like container port for example
10:53 - it will catch that error as well and  
10:56 - give me an error that "containerPort is 
required" and that "property containerport  
11:02 - with lowercase "p" is not allowed". And same 
thing if I forget to use a required attribute like  
11:10 - "kind" for example. Now as you know kubernetes has 
different versions and different versions may have  
11:16 - different attributes or different api versions. 
Jere in Datree you can actually fixate or specify,  
11:24 - which kubernetes version you want to use to check 
those policies and you can do that in settings  
11:31 - default server version and you can 
choose the kubernetes version right here.
11:38 - And now it will validate the schema 
against this kubernetes version.  
11:42 - So as you see Datree is super easy to 
install and configure anywhere you want,  
11:47 - whether you want to run validations locally on 
a development machine or integrated into your ci  
11:53 - cd pipeline. And you can actually get started with 
Datree for free. And finally if you want to try it  
12:00 - out it actually has a great documentation, which 
you can use when setting it up and configuring it  
12:07 - in different environments. That was an overview 
of another great devops tool for kubernetes.  
12:14 - So let me know in the comments what you 
think about the tool or if you already  
12:19 - have any experience with it. With that, thank 
you for watching and see you in the next video!

Cleaned transcript:

In this video we're going to talk about a tool that helps you prevent Kubernetes misconfigurations from reaching production and the tool is called Datree. Let's say that your company has multiple project teams, where developers are deploying their applications to Kubernetes. A DevOps engineer who is managing the kubernetes clusters in the company wants every project team to follow certain rules and write kubernetes configuration files, which follow the best practices. This way they want to prevent any misconfigurations or security issues from ending up in the cluster when the applications are deployed. So to avoid this, the kubernetes administrators will screen the configuration regularly and check for any misconfigurations or security issues. Many developers are not kubernetes experts so very often they end up creating manifests that do not follow the best practices. What are the examples of these best practices you may be asking. Well this could be specifying a version on every image used in the pod instead of the latest tag, which is a common mistake in configuration files or sometimes developers would just copy and paste the kubernetes configuration files for a certain application from internet without a proper check, whether there are any security issues in this configuration or not. For example running a container with root privilege or using deprecated kubernetes APIs for the components are some of the bad practice examples. So after the kubernetes administrators detect the issues in the configuration, they would notify the teams about the issues which they need to fix and this needs to be done for all the clusters across the company. Sometimes the teams may not prioritize the issues or delay the fixes but also if this validation process is not automated, the admins may miss something and the misconfigurations and security issues may actually end up all the way in the production. So the question is how can kubernetes administrators delegate kubernetes responsibilities to developers without losing control. So basically letting them still create those manifests themselves but making sure any configuration that ends up in the cluster is correct and follows the best practice rules that administrators want. Well that's exactly the problem Datree solves. So what is Datree and how does it solve this problem? It's actually very simple Datree lets the kubernetes administrators create policies and best practices they want every team to follow and then run these policies as automated checks as part of the CI/CD pipeline or even earlier in the development workflow as a precommit hook for example. This moves the configuration checks to the left preventing them from ending up in the cluster, but also letting developers fix them right away without the need of back and forth communication from kubernetes admins explaining developers why and what needs to be fixed. So Datree is a command line tool, which you can install with a single command which means you can install it on any machine and integrate it into any tool and trigger it whenever you want like every time developers commit changes or create a pull request or merge a pull request etc. So basically kubernetes admins who actually know kubernetes and how to properly configure kubernetes components will create policies with all the rules and best practices once, then integrate them in all the teams development workflows and this way make the companywide consistent policies that all the projects will use. And to integrate it into multiple ci cd pipelines you actually don't have to copy and paste the policies and include them in every project. These policies are stored centrally in Datree and not in the project as additional project file so you can reference the central policy and use them in all the cicd pipelines. Also in addition to you being able to create policies Datree already gives you a list of builtin policies, which covers all the kubernetes best practices of configuration and this means once you set it up you can already start validating your kubernetes YAML files with these builtin policies. Now in addition to kubernetes manifests files many people use helm charts to create components in kubernetes. In this case along with the kubernetes YAML files you will want to check the configuration files inside your helm charts right? Well Datree also has a helm plugin, which you can use to check any misconfigurations inside your helm charts. And now we're going to see how to easily set up Datree and start validating our kubernetes configuration files right away. So let's jump into the demo! First we install Datree locally with one single command which you can either grab on their official page or in the getting started documentation as well. So just copying the curl command this will install Datree locally. Once we have Datree installed we can actually already start validating our kubernetes configuration files. So I'm in a project, where I have one configuration file that basically just creates an nginx deployment and a service to that deployment so a very simple kubernetes yaml file that I want to validate and to do that I can just execute "datree test" and the name of the file. Datree will validate the kubernetes configuration file for the yaml format for the kubernetes schema and finally all the policies, the builtin policies, that Datree provides you with based on the best practices of kubernetes configuration. And it actually detected that we have five issues in our configuration file and for each issue it also gives you a detailed explanation what that issue is and why it's failing. So in our case we're missing a readiness and liveness probes on our container, we haven't specified an image version here, we also just have one replica and we're exposing a node port through the service. and these are all issues that are against kubernetes configuration best practices. So all this needs to be fixed. But we actually have more than that. We have a link here to Datree UI. So if I copy this we can log into Datree with a github account and in my account here, which is now automatically connected to this command line execution, I actually have a list of the builtin rules configured for my account and for each rule you have a toggle that lets you enable or disable that rule. So for example we decide you know what we don't need to do any liveness and readiness probes for our deployments so we're gonna disable this. So now if I run the check again we see that those two are not marked as issues anymore. We can also change the text of the message that is displayed in the issue whenever the policy is violated. So this will be additional information for the developers whenever they violate this policy. So let's say "incorrect value for key "replicas" in our projects we always use at least three replicas" And now if i run the test again we have the changed message here. Also for each policy you can actually get more information to really understand why this is a violation and why does it not follow the best practice. so for example if you want to find out more about this issue here clicking on this information icon, this will show you a page, where the policy is explained that exposing a node port is less secure and forces you to create unnecessary coupling between services. And for each policy it also shows you how to fix that. In most cases with an example of the yaml code itself. So you don't need to search on internet to understand the policy and also find the fix, you basically have it all in one place. So in our case let's actually fix our issues, here we need to use a different type for a node port and let's use a load balancer let's also fixate the image version to 1.21 and increase the replicas to 3. and run the check again and this shows that we have no violations in our kubernetes configuration file. Now we rendered Datree check a couple of times before the fixes and after the fixes. I can actually see that history also in Datree UI in the history tab. This is especially important if you use the same policies account for multiple pipelines. In this case you will have all these invocations from different sources in one place right here. So that you can see that the tool is used properly in your organization on the left you have the list of invocations and if you click in one you will see the details of that invocation. Now going back to the terminal as you see here it also checks the kubernetes schema validation, which means if I misspell an attribute name like container port for example it will catch that error as well and give me an error that "containerPort is required" and that "property containerport with lowercase "p" is not allowed". And same thing if I forget to use a required attribute like "kind" for example. Now as you know kubernetes has different versions and different versions may have different attributes or different api versions. Jere in Datree you can actually fixate or specify, which kubernetes version you want to use to check those policies and you can do that in settings default server version and you can choose the kubernetes version right here. And now it will validate the schema against this kubernetes version. So as you see Datree is super easy to install and configure anywhere you want, whether you want to run validations locally on a development machine or integrated into your ci cd pipeline. And you can actually get started with Datree for free. And finally if you want to try it out it actually has a great documentation, which you can use when setting it up and configuring it in different environments. That was an overview of another great devops tool for kubernetes. So let me know in the comments what you think about the tool or if you already have any experience with it. With that, thank you for watching and see you in the next video!
