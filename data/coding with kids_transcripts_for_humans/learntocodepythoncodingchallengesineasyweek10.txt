With timestamps:

00:00 - welcome to coding with kids my name is
00:03 - Kalia my name is Andrew today I'm in
00:05 - edible so edibit is a coding platform
00:07 - where you can do all kinds of coding
00:10 - problems using different coding
00:12 - languages So today we're going to do
00:14 - three different easy coding challenges
00:16 - in edited so our first problem is called
00:19 - reverse psychology for this challenge
00:22 - you will not be given a string oh your
00:25 - task isn't to add the do not before the
00:27 - given stream
00:28 - if there is no given string you will not
00:30 - return do not do anything do not check
00:33 - the examples to know how to do this
00:34 - challenge there's a lot are available so
00:38 - this it says reverse psychology so
00:42 - this is also a really fun challenge
00:44 - because what it says you shouldn't do
00:47 - you you should do so for example here it
00:51 - says notes are available there are
00:53 - actually no notes so actually you will
00:55 - be given a string and your task is to
00:58 - add do not okay and if there is no given
01:01 - string you will return do not do
01:03 - anything so first when you have a
01:06 - function called reverse psychology with
01:09 - a variable called s so first we're going
01:11 - to do s equals do not do anything as a
01:14 - string because this will fix
01:17 - um if it gives you an empty string this
01:20 - that that will fix the problem so then
01:23 - if s is not do not do anything we're
01:27 - gonna return do not the string with a
01:30 - space plus s which is the string they
01:33 - gave us whatever task that is like then
01:35 - read yeah or like wash dishes dishes
01:38 - then we're going to add a period so we
01:41 - did s equals do not do anything because
01:44 - if you if they give you an empty string
01:46 - it will not change S equals do not do
01:49 - anything so here if it did change the S
01:52 - it will return do not whatever task then
01:55 - a period if it didn't change we're just
01:58 - going to return do not do anything
02:00 - because that is what we're supposed to
02:02 - return if there is if they don't give us
02:04 - a strict so for now we're going to check
02:07 - and see it test cases there's wash your
02:09 - dishes eat the lunch everybody should
02:11 - eat their lunch okay so we have a bug
02:17 - so we forgot to call and said we're just
02:19 - gonna add it and check it and see more
02:21 - test cases there's go to school do not
02:24 - go to school do not go to school
02:26 - okay if you want to be smart do not eat
02:28 - your lunch
02:31 - and then there is buy PC parts do not
02:37 - buy PC ports the computer is doing bad
02:40 - things yeah do not drink water we need
02:42 - water to live do your homework do not do
02:45 - your homework yes bad student so now we
02:49 - pass all the tests on to our next
02:51 - challenge so our next challenge is
02:53 - called say hello say bye write a
02:57 - function that takes a string name and a
02:59 - number num is which is which will be
03:02 - either zero or one and return hello plus
03:06 - the name if the number is one otherwise
03:08 - if the number is zero we're going to
03:11 - return buy plus the date so here will
03:13 - give us a name and then
03:15 - it'll also give us a number which is
03:17 - either one or zero and if it's a one
03:20 - we're gonna say we're gonna add hello if
03:23 - it's a zero we're gonna add a box so
03:25 - it's basically telling you hello or buy
03:27 - yeah so then notes the name you return
03:29 - must be capitalized where you see for
03:32 - you for example here it says Alon so
03:35 - here in the return string the a is
03:38 - capitalized so then we also have to
03:40 - capitalize it so it has right grammar so
03:43 - now we have a function called say Hello
03:45 - by we have two variables which is name
03:48 - and num so first we're going to do if
03:50 - number equals equals one so we need two
03:54 - equal signs because we're not assigning
03:57 - uh
03:58 - uh something to a variable so when you
04:02 - do two equal sides if number equals
04:04 - equals one which is hello we're going to
04:07 - do a variable called title equals name
04:09 - dot title to make to capitalize the
04:12 - first letter of the name so that's what
04:14 - the title function does
04:16 - then after we title the name just in
04:19 - case greeting equals hello so the string
04:22 - Hollow plus an empty space between the
04:25 - hollow and the name and then the name
04:28 - then uh else if the number is zero we're
04:33 - going to do titles equals new title so
04:35 - again we're going to title the name and
04:37 - then we're gonna do greeting equals by
04:38 - so we change it from Hello to buy and
04:41 - the space and then the name and then
04:43 - finally we're going to return the
04:44 - greetings so now we're in check it and
04:45 - see the test cases
04:47 - so here there's here's some uh names
04:51 - there's John John is out of H that's
04:54 - weird John bye John
04:56 - okay this is another by John oh that's
05:00 - the same except one of them the J is NOT
05:03 - capitalized yeah so you have to
05:05 - capitalize there's also Barry Jose and
05:08 - Matt okay so in now we passed all the
05:12 - tests onto our final coding challenge
05:14 - taxi Journey taxi Journey so this is
05:17 - actually a little hard for me so it says
05:19 - a taxi Journey costs three dollars for
05:22 - the cop for the first kilometer traveled
05:24 - however all kilometers traveled after
05:27 - that will cost two dollars each create a
05:30 - function which Returns the distance then
05:32 - the taxi must have traveled given the
05:34 - cost as a parameter so here you have to
05:37 - read the instructions really carefully
05:39 - return so our function needs to return
05:41 - the distance the taxi not the price
05:44 - so for example here it'll give us three
05:46 - which is three uh dollars that's only
05:50 - one mile uh one kilometer because the
05:53 - first kilometer is three dollars okay
05:56 - then here give us nine which is nine
05:58 - dollars which is four kilometers because
06:01 - the first one is three dollars then you
06:03 - have six dollars left and that's plus
06:05 - three then three plus one is four
06:07 - okay
06:10 - um okay code so we have a function
06:12 - called Journey distance with a variable
06:14 - called n which is the the price okay so
06:18 - first we do if n equals equals zero
06:21 - we're just going to return zero because
06:23 - in test cases the first one is zero so
06:26 - if they didn't if the
06:28 - um person didn't uh pay any money well
06:31 - not even a dollar then they didn't
06:34 - travel a kilometer okay yeah that means
06:37 - they might not have got the taxi or
06:39 - something yeah okay then
06:42 - uh if n has a number that is not zero
06:45 - then we're gonna do it we're gonna
06:47 - create a variable called some money
06:49 - equals n minus three so this is the
06:52 - price minus three because the first
06:54 - kilometer is three dollars
06:56 - okay then we're gonna do km which it
07:00 - stands for kilometer equals some money
07:03 - um divided by two so we're gonna add
07:06 - parentheses because we want to run this
07:07 - first
07:09 - okay so money some money that that's the
07:11 - money left divided by two and plus one
07:15 - so this some money divided by two will
07:17 - give us the amount of kilometers after
07:20 - the first kilometer then we're gonna do
07:22 - plus one because here in summary equals
07:25 - n minus three that's for the first
07:27 - kilometer because it's three dollars
07:29 - then finally we're going to return the
07:32 - number of kilometers the taxi must have
07:34 - traveled depending on the price
07:36 - now we're gonna go to tests so there is
07:40 - there is um 11 037 why would anybody pay
07:45 - that for a taxi Journey maybe because it
07:48 - must have been very long yes it's
07:51 - 5518 kilometers
07:54 - 99
07:56 - which is 49 kilometers okay so now we've
08:00 - tested passed all the tests well that
08:04 - was fun and that's it for today thank
08:07 - you for watching Remember to smash the
08:09 - like button and subscribe bye bye

Cleaned transcript:

welcome to coding with kids my name is Kalia my name is Andrew today I'm in edible so edibit is a coding platform where you can do all kinds of coding problems using different coding languages So today we're going to do three different easy coding challenges in edited so our first problem is called reverse psychology for this challenge you will not be given a string oh your task isn't to add the do not before the given stream if there is no given string you will not return do not do anything do not check the examples to know how to do this challenge there's a lot are available so this it says reverse psychology so this is also a really fun challenge because what it says you shouldn't do you you should do so for example here it says notes are available there are actually no notes so actually you will be given a string and your task is to add do not okay and if there is no given string you will return do not do anything so first when you have a function called reverse psychology with a variable called s so first we're going to do s equals do not do anything as a string because this will fix um if it gives you an empty string this that that will fix the problem so then if s is not do not do anything we're gonna return do not the string with a space plus s which is the string they gave us whatever task that is like then read yeah or like wash dishes dishes then we're going to add a period so we did s equals do not do anything because if you if they give you an empty string it will not change S equals do not do anything so here if it did change the S it will return do not whatever task then a period if it didn't change we're just going to return do not do anything because that is what we're supposed to return if there is if they don't give us a strict so for now we're going to check and see it test cases there's wash your dishes eat the lunch everybody should eat their lunch okay so we have a bug so we forgot to call and said we're just gonna add it and check it and see more test cases there's go to school do not go to school do not go to school okay if you want to be smart do not eat your lunch and then there is buy PC parts do not buy PC ports the computer is doing bad things yeah do not drink water we need water to live do your homework do not do your homework yes bad student so now we pass all the tests on to our next challenge so our next challenge is called say hello say bye write a function that takes a string name and a number num is which is which will be either zero or one and return hello plus the name if the number is one otherwise if the number is zero we're going to return buy plus the date so here will give us a name and then it'll also give us a number which is either one or zero and if it's a one we're gonna say we're gonna add hello if it's a zero we're gonna add a box so it's basically telling you hello or buy yeah so then notes the name you return must be capitalized where you see for you for example here it says Alon so here in the return string the a is capitalized so then we also have to capitalize it so it has right grammar so now we have a function called say Hello by we have two variables which is name and num so first we're going to do if number equals equals one so we need two equal signs because we're not assigning uh uh something to a variable so when you do two equal sides if number equals equals one which is hello we're going to do a variable called title equals name dot title to make to capitalize the first letter of the name so that's what the title function does then after we title the name just in case greeting equals hello so the string Hollow plus an empty space between the hollow and the name and then the name then uh else if the number is zero we're going to do titles equals new title so again we're going to title the name and then we're gonna do greeting equals by so we change it from Hello to buy and the space and then the name and then finally we're going to return the greetings so now we're in check it and see the test cases so here there's here's some uh names there's John John is out of H that's weird John bye John okay this is another by John oh that's the same except one of them the J is NOT capitalized yeah so you have to capitalize there's also Barry Jose and Matt okay so in now we passed all the tests onto our final coding challenge taxi Journey taxi Journey so this is actually a little hard for me so it says a taxi Journey costs three dollars for the cop for the first kilometer traveled however all kilometers traveled after that will cost two dollars each create a function which Returns the distance then the taxi must have traveled given the cost as a parameter so here you have to read the instructions really carefully return so our function needs to return the distance the taxi not the price so for example here it'll give us three which is three uh dollars that's only one mile uh one kilometer because the first kilometer is three dollars okay then here give us nine which is nine dollars which is four kilometers because the first one is three dollars then you have six dollars left and that's plus three then three plus one is four okay um okay code so we have a function called Journey distance with a variable called n which is the the price okay so first we do if n equals equals zero we're just going to return zero because in test cases the first one is zero so if they didn't if the um person didn't uh pay any money well not even a dollar then they didn't travel a kilometer okay yeah that means they might not have got the taxi or something yeah okay then uh if n has a number that is not zero then we're gonna do it we're gonna create a variable called some money equals n minus three so this is the price minus three because the first kilometer is three dollars okay then we're gonna do km which it stands for kilometer equals some money um divided by two so we're gonna add parentheses because we want to run this first okay so money some money that that's the money left divided by two and plus one so this some money divided by two will give us the amount of kilometers after the first kilometer then we're gonna do plus one because here in summary equals n minus three that's for the first kilometer because it's three dollars then finally we're going to return the number of kilometers the taxi must have traveled depending on the price now we're gonna go to tests so there is there is um 11 037 why would anybody pay that for a taxi Journey maybe because it must have been very long yes it's 5518 kilometers 99 which is 49 kilometers okay so now we've tested passed all the tests well that was fun and that's it for today thank you for watching Remember to smash the like button and subscribe bye bye
