With timestamps:

00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from kvar programming
00:20 - comm and this is a tutorial on
00:23 - inheritance in Java so the end of the
00:26 - last tutorial I said we look at the
00:28 - equals method in this tutorial but I
00:30 - realized that and there are some things
00:32 - about equals which to understand them it
00:35 - helps if you know a bit about
00:36 - inheritance I'm going to pospone the
00:39 - equals tutorial and we're going to look
00:42 - here at the very important topic of
00:43 - inheritance and I just want to take a
00:46 - little moment just to thank everyone
00:48 - who's left comments your comments really
00:51 - motivate me to create these free
00:53 - tutorials and they are very much
00:55 - appreciated so thanks very much
00:56 - okay so let's create a new class here I
01:01 - put my main method set up in this kind
01:05 - of class in Eclipse and so far in these
01:08 - tutorials I've been creating classes in
01:11 - the same file but I'm gonna switch now
01:14 - to creating classes and separate files
01:16 - which is what you will do most of the
01:18 - time in your programs so let's just
01:22 - expand this and I'm just creating
01:25 - everything in the default package here
01:27 - and we haven't covered packages yet so
01:30 - I'm going to right click actually the
01:31 - source folder or the project folder it
01:33 - doesn't matter and go to class an
01:36 - apologist for the background noise by
01:38 - the way because people are working on
01:40 - the flat opposite line and wherever I go
01:43 - there's always someone renovating an
01:45 - apartment nearby okay so let's create a
01:48 - class here called
01:50 - machine and click finish and now just
01:55 - because just just from saying public
01:58 - class machine in a file called machine
02:00 - Java I can already create objects from
02:02 - that machine I can create a variable of
02:05 - time machine so machine call it Mac one
02:10 - I can say new machine
02:13 - like this which actually allocates
02:16 - memory for my machine object and I can
02:20 - combine those also into one statement by
02:23 - saying machine maquon equals new machine
02:28 - which is what you do most of the time in
02:30 - Java and let's give this machine
02:34 - some methods so I'll give it a public
02:38 - void start method let's imagine that all
02:41 - machines can be started and I'll say sis
02:44 - out here and for some reason my sis out
02:48 - shortcuts not working so I'll say system
02:51 - to out of print I then I'll just copy
02:53 - that and some of these again later and
02:58 - let's say here a machine started like
03:02 - this and I'll also give it a public for
03:07 - it stopped like this and in there we can
03:13 - say machine machine stopped
03:21 - okay so I can now call those methods
03:24 - using this variable which I pointed at
03:26 - my machine object so I can say that Quan
03:30 - got started but start and Mak want stop
03:36 - and since those methods are just doing
03:38 - sis outs at the moment if I run that
03:41 - it's just gonna display some stuff in my
03:43 - console here which is coming from here
03:47 - so you need to have a good grasp of
03:49 - defining methods and calling them before
03:51 - you move on to inheritance really
03:52 - otherwise you'll get confused and what
03:55 - I'm going to do now is create a new
03:56 - class so that's right click the project
03:58 - folder again and go to new class now
04:01 - let's call this car and click finish
04:06 - now of course I can I can create
04:09 - variables of type car let's call his car
04:12 - one and I can point knows that car
04:14 - objects let's have one object here and
04:19 - car has no method if I do come on no
04:22 - methods well actually does have a few
04:25 - methods and these are actually inherited
04:27 - from a class called object which is
04:30 - actually the ultimate ancestor of all
04:33 - objects in Java but aside from knows
04:35 - there are no methods that I defined here
04:39 - but supposing I go to my car class now
04:42 - and I say car extends machine and what
04:48 - that means is that car is a child class
04:52 - of machine or machine is the parent of
04:54 - car we can say that car is derived from
04:58 - machine or a car is a machine or the car
05:02 - inherits from machine and this is all
05:04 - good terminology and what this means is
05:07 - that and now a car is already identical
05:10 - to a machine so now I can say car one
05:15 - top start and car one don't stop
05:19 - the fact that I've said public class car
05:22 - extends machine means car has now got
05:25 - all the methods that machine has now of
05:29 - course we can add new methods to car so
05:32 - got my car child class which which
05:36 - inherits all the methods of machine and
05:40 - I can add more methods to out and say
05:41 - for example public Floyd I don't know
05:45 - why wind white wind wind shield and
05:52 - let's give that some functionality I'll
05:55 - just put another sis out in there and
05:57 - I'll say wiping wind shield so now of
06:06 - course car is identical to machine it
06:09 - said it's got another method now that
06:11 - machine doesn't have so I can say let's
06:16 - put it between Stan stop Carlin wipe
06:19 - windshield lab so this is inheritance in
06:24 - action even if you're you've got a class
06:28 - which which you don't have the source
06:31 - code to usually is set for on the
06:35 - certain particular circumstances usually
06:38 - you can extend it to create your own
06:40 - version of it and then you can add new
06:42 - methods to it which is really useful you
06:45 - can't do that with some classes for
06:46 - example the string class is it's the
06:51 - final class and it can't be extended but
06:54 - most classes you can extend so lets
06:59 - another thing you can do is you can
07:01 - override methods I'm just going to touch
07:04 - on basics of this here but here for
07:07 - example we've got public void start
07:09 - method and let's copy that and go into
07:13 - car and paste it in and change this to
07:18 - car
07:19 - start it so what I've done here is I've
07:21 - got an a method in a parent class with
07:24 - this header public void start
07:26 - takes no parameters and returns only
07:29 - void and I've defined one exactly the
07:32 - same as that in car and it's important
07:34 - that the header part of the method
07:37 - should be the same if you want to
07:38 - override a method and now when I call
07:42 - start in car it's gonna call the car
07:46 - specific version model in a machine
07:48 - version so we say that this method has
07:51 - overridden the method in the parent
07:54 - class he's basically replaced it now
07:58 - there's there's quite a bit more to say
08:00 - about inheritance as you might imagine
08:01 - but I'm just gonna probably show you one
08:05 - of the thing here and before I do that
08:07 - actually I'm gonna delete that and show
08:09 - you a better way of overriding a method
08:11 - and this is Eclipse cific but there's
08:16 - similar techniques so you can use
08:17 - similar shortcuts in any decent IDE so
08:22 - NetBeans or IntelliJ IDEA possibly not
08:26 - bluej which some University students are
08:28 - forced to use and it's no offense to a
08:32 - great or it but as an IDE that's well
08:34 - out of date by now in my opinion anyway
08:38 - and I'm gonna right click here within
08:40 - the body of car and I'm gonna go to
08:43 - source override internet methods and I'm
08:47 - going to click so these are all the
08:49 - methods of machine and you can see
08:51 - methods of objects as well which is the
08:52 - secret Lille ultimate blurring class of
08:55 - both machine and car but I want to let's
08:59 - say I want to override the start method
09:01 - in machine I just click start and click
09:04 - OK and it fills in the method for me
09:07 - together with a stop this is actually
09:09 - calling the corresponding method in a
09:11 - parent class so this would mean that car
09:13 - still has a start method but it just
09:15 - does it just cause the parent class
09:18 - version basically saying machine started
09:22 - but if I get rid of this body now I can
09:24 - put my own stuff in there
09:26 - oops don't on that let's just copy this
09:29 - being as my sis out shortcuts
09:31 - mysteriously stopped working and PERTs
09:34 - in here car started
09:38 - so we over within this just as before so
09:41 - the shortcut flat is right click in the
09:43 - body to class go to source and override
09:46 - implement methods in Eclipse now you'll
09:50 - notice Eclipse puts this and it's called
09:52 - an annotation
09:53 - it's an act sign and the override and
09:56 - override well this is actually a class
09:59 - name here just why it's got a capital o
10:02 - but we're not going to worry about that
10:04 - now but the bottom line is if you put an
10:06 - out and silent override with a capital o
10:09 - before you're overridden method it will
10:12 - check that it really is an override so
10:15 - if I misspelled this now it will
10:17 - complain and say you know starter is is
10:21 - not in fact a method that exists in the
10:23 - parent class whereas without that
10:25 - override annotation of course it would
10:28 - just create a new method called
10:30 - with a different name which wouldn't do
10:33 - anything so I'm not calling it at the
10:34 - moment so if you want to override a
10:36 - method and you want to check that you
10:39 - really are overriding a method in the
10:41 - parent class and then putting this
10:44 - annotation in just helps you spot errors
10:47 - but it's not it's not necessary so one
10:50 - last thing for this tutorial I just want
10:53 - to say quickly a bit about variables
10:57 - because if we've got like a if I've got
11:01 - a private string name in machine and
11:06 - that set that to I don't know I am
11:12 - machine
11:14 - or maybe it'd be more appropriate say
11:21 - machine-type one there we go now because
11:27 - I declared it private
11:28 - this can only this variable could only
11:30 - be accessed within this machine class so
11:33 - if I went to car the child class and
11:35 - that sir created a method public void
11:37 - show info like this and then supposing I
11:43 - had a cyst out and I try to access name
11:47 - lenders let's say car name plus name
11:54 - it's going to give me an error there is
11:58 - saying the field machine dot name is not
12:00 - visible and that's because I declared it
12:01 - private and we're going to look at
12:03 - public private and protect it a little
12:05 - bit more in a future tutorial all of its
12:07 - own but if you declare something private
12:10 - it's only accessible within the class
12:11 - that means within these brackets the
12:14 - bracket opens here after the name of the
12:16 - class and it finishes here you can only
12:18 - access this name within here but if you
12:21 - get rid of private you can now access
12:25 - this anywhere within the package that
12:28 - machine is in and we haven't looked at
12:29 - packages explicitly yet but Koren a poor
12:32 - both within the default package here so
12:35 - you can now access it and if I run this
12:36 - well let's call that let's call that
12:38 - method let's say car one dot show info
12:42 - and run that then you'll see car can
12:45 - access it car name machine type one yeah
12:51 - did I yeah yeah I was wondering work car
12:54 - name came from because I tight it here
12:55 - okay and if you want to give this an
13:01 - access specifier which you really should
13:03 - ideally you can make it protected and
13:06 - protected means that you can access this
13:10 - anywhere within the package and also
13:12 - from any child class so this will still
13:16 - work so I just wanted to show you that
13:18 - quickly here I'm gonna touch on it more
13:21 - in future tutorials for sure
13:23 - and and don't be don't be tempted to try
13:27 - to override variables because and
13:30 - results will be horrible it's not a good
13:33 - idea
13:33 - you should only override methods okay so
13:36 - that's it for this tutorial and in the
13:38 - next tutorial we're going to take an
13:40 - initial look at interfaces in Java so
13:44 - there's a lot to say about interfaces
13:45 - but we're just going to make a start on
13:47 - them in the next tutorial so join me and
13:49 - then and until then happy coding
13:55 - [Music]
14:00 - you
14:01 - [Music]

Cleaned transcript:

hello this is John from kvar programming comm and this is a tutorial on inheritance in Java so the end of the last tutorial I said we look at the equals method in this tutorial but I realized that and there are some things about equals which to understand them it helps if you know a bit about inheritance I'm going to pospone the equals tutorial and we're going to look here at the very important topic of inheritance and I just want to take a little moment just to thank everyone who's left comments your comments really motivate me to create these free tutorials and they are very much appreciated so thanks very much okay so let's create a new class here I put my main method set up in this kind of class in Eclipse and so far in these tutorials I've been creating classes in the same file but I'm gonna switch now to creating classes and separate files which is what you will do most of the time in your programs so let's just expand this and I'm just creating everything in the default package here and we haven't covered packages yet so I'm going to right click actually the source folder or the project folder it doesn't matter and go to class an apologist for the background noise by the way because people are working on the flat opposite line and wherever I go there's always someone renovating an apartment nearby okay so let's create a class here called machine and click finish and now just because just just from saying public class machine in a file called machine Java I can already create objects from that machine I can create a variable of time machine so machine call it Mac one I can say new machine like this which actually allocates memory for my machine object and I can combine those also into one statement by saying machine maquon equals new machine which is what you do most of the time in Java and let's give this machine some methods so I'll give it a public void start method let's imagine that all machines can be started and I'll say sis out here and for some reason my sis out shortcuts not working so I'll say system to out of print I then I'll just copy that and some of these again later and let's say here a machine started like this and I'll also give it a public for it stopped like this and in there we can say machine machine stopped okay so I can now call those methods using this variable which I pointed at my machine object so I can say that Quan got started but start and Mak want stop and since those methods are just doing sis outs at the moment if I run that it's just gonna display some stuff in my console here which is coming from here so you need to have a good grasp of defining methods and calling them before you move on to inheritance really otherwise you'll get confused and what I'm going to do now is create a new class so that's right click the project folder again and go to new class now let's call this car and click finish now of course I can I can create variables of type car let's call his car one and I can point knows that car objects let's have one object here and car has no method if I do come on no methods well actually does have a few methods and these are actually inherited from a class called object which is actually the ultimate ancestor of all objects in Java but aside from knows there are no methods that I defined here but supposing I go to my car class now and I say car extends machine and what that means is that car is a child class of machine or machine is the parent of car we can say that car is derived from machine or a car is a machine or the car inherits from machine and this is all good terminology and what this means is that and now a car is already identical to a machine so now I can say car one top start and car one don't stop the fact that I've said public class car extends machine means car has now got all the methods that machine has now of course we can add new methods to car so got my car child class which which inherits all the methods of machine and I can add more methods to out and say for example public Floyd I don't know why wind white wind wind shield and let's give that some functionality I'll just put another sis out in there and I'll say wiping wind shield so now of course car is identical to machine it said it's got another method now that machine doesn't have so I can say let's put it between Stan stop Carlin wipe windshield lab so this is inheritance in action even if you're you've got a class which which you don't have the source code to usually is set for on the certain particular circumstances usually you can extend it to create your own version of it and then you can add new methods to it which is really useful you can't do that with some classes for example the string class is it's the final class and it can't be extended but most classes you can extend so lets another thing you can do is you can override methods I'm just going to touch on basics of this here but here for example we've got public void start method and let's copy that and go into car and paste it in and change this to car start it so what I've done here is I've got an a method in a parent class with this header public void start takes no parameters and returns only void and I've defined one exactly the same as that in car and it's important that the header part of the method should be the same if you want to override a method and now when I call start in car it's gonna call the car specific version model in a machine version so we say that this method has overridden the method in the parent class he's basically replaced it now there's there's quite a bit more to say about inheritance as you might imagine but I'm just gonna probably show you one of the thing here and before I do that actually I'm gonna delete that and show you a better way of overriding a method and this is Eclipse cific but there's similar techniques so you can use similar shortcuts in any decent IDE so NetBeans or IntelliJ IDEA possibly not bluej which some University students are forced to use and it's no offense to a great or it but as an IDE that's well out of date by now in my opinion anyway and I'm gonna right click here within the body of car and I'm gonna go to source override internet methods and I'm going to click so these are all the methods of machine and you can see methods of objects as well which is the secret Lille ultimate blurring class of both machine and car but I want to let's say I want to override the start method in machine I just click start and click OK and it fills in the method for me together with a stop this is actually calling the corresponding method in a parent class so this would mean that car still has a start method but it just does it just cause the parent class version basically saying machine started but if I get rid of this body now I can put my own stuff in there oops don't on that let's just copy this being as my sis out shortcuts mysteriously stopped working and PERTs in here car started so we over within this just as before so the shortcut flat is right click in the body to class go to source and override implement methods in Eclipse now you'll notice Eclipse puts this and it's called an annotation it's an act sign and the override and override well this is actually a class name here just why it's got a capital o but we're not going to worry about that now but the bottom line is if you put an out and silent override with a capital o before you're overridden method it will check that it really is an override so if I misspelled this now it will complain and say you know starter is is not in fact a method that exists in the parent class whereas without that override annotation of course it would just create a new method called with a different name which wouldn't do anything so I'm not calling it at the moment so if you want to override a method and you want to check that you really are overriding a method in the parent class and then putting this annotation in just helps you spot errors but it's not it's not necessary so one last thing for this tutorial I just want to say quickly a bit about variables because if we've got like a if I've got a private string name in machine and that set that to I don't know I am machine or maybe it'd be more appropriate say machinetype one there we go now because I declared it private this can only this variable could only be accessed within this machine class so if I went to car the child class and that sir created a method public void show info like this and then supposing I had a cyst out and I try to access name lenders let's say car name plus name it's going to give me an error there is saying the field machine dot name is not visible and that's because I declared it private and we're going to look at public private and protect it a little bit more in a future tutorial all of its own but if you declare something private it's only accessible within the class that means within these brackets the bracket opens here after the name of the class and it finishes here you can only access this name within here but if you get rid of private you can now access this anywhere within the package that machine is in and we haven't looked at packages explicitly yet but Koren a poor both within the default package here so you can now access it and if I run this well let's call that let's call that method let's say car one dot show info and run that then you'll see car can access it car name machine type one yeah did I yeah yeah I was wondering work car name came from because I tight it here okay and if you want to give this an access specifier which you really should ideally you can make it protected and protected means that you can access this anywhere within the package and also from any child class so this will still work so I just wanted to show you that quickly here I'm gonna touch on it more in future tutorials for sure and and don't be don't be tempted to try to override variables because and results will be horrible it's not a good idea you should only override methods okay so that's it for this tutorial and in the next tutorial we're going to take an initial look at interfaces in Java so there's a lot to say about interfaces but we're just going to make a start on them in the next tutorial so join me and then and until then happy coding you
