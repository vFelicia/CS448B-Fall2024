With timestamps:

00:00 - hello this is John from cave of
00:02 - programming calm continuing my free
00:05 - course on nodejs
00:06 - and JavaScript for complete beginners in
00:09 - this video we're going to take a look at
00:11 - control characters and we're going to
00:13 - see how we can write stuff to the
00:15 - console without creating new lines which
00:18 - is what happens when we use console.log
00:21 - and i'm inserting this at this point in
00:24 - the course because in the next video i
00:26 - want to give you an exercise that will
00:28 - bring together a fair bit of what we've
00:30 - seen so far in the course but to
00:34 - complete that exercise you're going to
00:35 - need a bit more information so let's
00:38 - take a look at it first of all I'm going
00:40 - to start all my scripts as usual with
00:42 - use.you strict now if I write
00:46 - console.log here and output for example
00:50 - hello what does this actually do it
00:54 - actually outputs hello and then
00:56 - afterwards it creates a newline
00:59 - character so if we run this let's run
01:04 - node control characteristic Jas which is
01:06 - my file try again I hit the wrong button
01:11 - there now now I've brought back the same
01:17 - command that was wrong what I want is
01:19 - this okay so if you look at what's
01:23 - happening here without putting the text
01:24 - hello and then you see that the prompt
01:28 - of my terminal appears again on the next
01:31 - line and that's because console dot log
01:33 - actually outputs what we call a newline
01:37 - character after any text that it outputs
01:40 - meaning the next stuff you output is
01:42 - going to appear on the next line we can
01:45 - maybe see that more clearly if we output
01:48 - two of them and if I run this script you
01:54 - can see they're coming out on separate
01:55 - lines and that's because we write hello
01:58 - and then there's an invisible non
02:00 - printing newline character after hello
02:04 - and that causes the next hello to come
02:07 - out on the next line and that has a
02:09 - newline character after it as well and
02:11 - that means that my
02:14 - character reappears on the next line
02:17 - after that so these new line characters
02:21 - they don't print they don't the
02:22 - non-printing characters they don't
02:24 - display a symbol to you but they cause
02:27 - the next stuff you output to appear on
02:29 - the next line and we can actually output
02:32 - those explicitly ourselves let's take a
02:35 - look
02:35 - so I'll maybe comment this out with a
02:38 - multi-line comment which is slice star
02:44 - and then star slash so that's a
02:51 - multi-line comment and it means that
02:53 - this is interpreted just as a comment
02:55 - and not as stuff to actually execute so
02:59 - that's right console dot log and we'll
03:03 - have a string that's right hi and then
03:09 - I'm gonna put backslash n hi again like
03:14 - this
03:16 - so backslash n is a non-printing
03:20 - character it gets translated to a
03:22 - newline character we have to have a
03:24 - backslash this is called this is called
03:26 - a backslash whereas this would be called
03:29 - a forward slash and it's important that
03:31 - we have a backslash here so this means
03:33 - output hi then create a new line
03:37 - character in other words go to the next
03:40 - line and then output hi again and then
03:44 - console dot log automatically outputs a
03:47 - new line anyway after the stuff is
03:49 - printed so it'll be another new line
03:51 - after this second hi let's try this and
03:59 - we get hi-hi on two different lines we
04:03 - can also use backslash T by the way I
04:06 - don't have a semicolon here javascript
04:10 - is designed to be pretty flexible in
04:12 - many ways it often lets you get away
04:14 - without putting semicolons at the ends
04:16 - of lines but you should put them in it's
04:18 - good practice I would say in other words
04:20 - it's best practice is what you should
04:22 - really do because sometimes your code
04:25 - won't work without these new lines
04:27 - let's try something else so this time
04:30 - I'm going to write that's right
04:33 - hello hello and this time I'll separate
04:36 - them with a tab character let's run this
04:41 - so a tab character is like a sort of
04:44 - long space basically and we've got a
04:49 - sort of gap between these two hellos
04:52 - that's been created by this non-printing
04:55 - tab character which we can create by
04:58 - using backslash T within a string and a
05:02 - good thing about tabs is that they help
05:05 - you line things up they sort of move
05:07 - things to the next tab position or
05:09 - that's often what they do other times
05:12 - they're basically equivalent to
05:13 - typically four spaces or sometimes two
05:16 - spaces or whatever so if I output
05:19 - console log and we have cat slash t-dog
05:25 - slash T Mouse and then on the next line
05:30 - we have maybe Apple and orange and
05:39 - banana then we can see our output is
05:48 - lined up as long as the strings aren't
05:49 - too long typically you'll get lined up
05:52 - output there's no real guarantee about
05:54 - it but in this case it's it's work so
05:57 - tabs are quite good
05:58 - often for lining things up like this now
06:02 - what if we want to output some text and
06:04 - we don't want a new line after it
06:06 - because console dot log will always add
06:09 - a new line after after we finished
06:12 - outputting our text whether it contains
06:15 - new lines or whatever itself or not so
06:19 - even just console dot log by itself will
06:23 - create a new line so let's write console
06:28 - dot log with empty brackets and you can
06:33 - see here that between after the last
06:35 - output and before my prompts is a blank
06:38 - line now and that's just been created by
06:41 - this
06:41 - console dialogue but sometimes we don't
06:44 - want that so if we don't want it we can
06:46 - use process as press s because otherwise
06:49 - I think my autocomplete is gonna
06:51 - unhelpfully mess this up
06:53 - this is Visual Studio code I'm using
06:56 - here so if you're right process dot
06:58 - standard out right and I write let's say
07:05 - that's right lion and then let's write
07:11 - something else with process that
07:13 - standard outdoor right like tiger and
07:17 - you'll be able to see the difference so
07:19 - this is this is again it's just a way of
07:21 - writing to the console but the results
07:24 - here are a bit different to consult our
07:26 - log so if I if I run this now we can see
07:30 - we've got lion and then tiger and
07:35 - process that standard outdoor right does
07:37 - not create any new line after it so the
07:40 - next output that I do will be coming out
07:44 - right after the last input and sometimes
07:47 - and that is very helpful console dot log
07:50 - is really intended for debugging so it
07:53 - was originally implemented in browsers
07:55 - and typically you have development tools
07:58 - in your browser you can activate somehow
08:01 - and those contain a JavaScript console
08:04 - and console dot log if you run
08:06 - JavaScript in a browser which we'll look
08:08 - at later in this course will output
08:11 - stuff to the develop the developer
08:14 - console to help you debug JavaScript
08:16 - that's running in browsers but here
08:18 - we're just using it on a command line
08:20 - with the node.js
08:21 - interpreter and there it works similarly
08:26 - to how it does in a browser and it
08:28 - outputs text and then a new line after
08:31 - it now process standard out dot right
08:35 - you don't need to know what this is in
08:38 - order to use it we're going to cover
08:39 - concepts that you need to know to
08:41 - understand this more later on but
08:43 - briefly so process and standard out are
08:46 - both objects we call them objects
08:48 - process is actually a I believe standard
08:53 - out is anyway
08:54 - the process is actually an implicit
08:56 - object so it's an object we say that's
09:00 - available to us when we write nodejs
09:03 - programs and again you don't need to
09:05 - know what that is but we call it an
09:07 - object basically right is a method in
09:12 - other words it's a functional subroutine
09:14 - a collection of statements that is
09:16 - attached to an object in this case the
09:18 - standardout object and its standard out
09:21 - object lets us write to what we call the
09:24 - standard output stream so we've got
09:27 - standard out and standard in and
09:29 - standard out typically kind of
09:33 - represents the console so we can call
09:36 - standard out a it's a kind of stream
09:40 - it's like an output stream
09:42 - so rather than rather than a stream of
09:44 - water let's say it's a stream of data
09:46 - and we can write things to it we can
09:48 - write data to it and then it will
09:50 - usually appear on the console so you
09:53 - don't need to know that to actually use
09:56 - it though that's just to begin to get
09:58 - used to some sort of ideas and
10:01 - terminology that we'll look at later so
10:04 - you can use control characters if you
10:07 - know in strings that you're going to
10:09 - write with processed or standard out as
10:11 - well like if I were to put for example
10:13 - /t your /n you'll see the results of it
10:16 - let's and put /t after lion and slash n
10:21 - after tiger and if we actually output
10:24 - this then we've got lion and then a tab
10:28 - character and then after Tiger is a new
10:31 - line so that my console prompt is
10:34 - reappearing on the next line now if you
10:37 - want to output numbers with process
10:40 - that's standard out right there's a bit
10:42 - of a twist so let's try that let's have
10:47 - a variable let's say so let's say let
10:50 - value equal 7 so we've got a I've
10:54 - declared a variable called value and
10:57 - I've initialized it to the value 7
10:59 - and I'll use process standard out dot
11:03 - right
11:04 - and we'll output value what does this do
11:08 - let's let's run it in fact it gives me a
11:12 - error trace or stack trace
11:15 - so console dot log because it's intended
11:19 - for debugging in many ways it's very
11:21 - flexible it will output numbers it will
11:23 - output all kinds of things process dot
11:25 - standard out dot write is in many ways
11:29 - less flexible it won't output numbers it
11:32 - will only output strings so this error
11:34 - here if we look at the top of it
11:36 - actually says the chunk argument must be
11:39 - one of type string or buffer it's not
11:43 - it's not liking the fact that this is a
11:45 - number but we can convert a variable
11:49 - that refers to a number we can convert
11:52 - it to a string using the to string
11:54 - method and that looks like this if I
11:57 - write value so still within within these
12:00 - round brackets of right if I write value
12:03 - dot 2.2 string and let's put empty round
12:09 - brackets in there because this is
12:12 - actually a method itself then that
12:14 - actually works let's try it and now it
12:20 - works we've got seven there if I wanted
12:23 - to get this single line to have a new
12:26 - line after in well I could just use
12:29 - console dot log but you can concatenate
12:32 - strings together as well so here I could
12:35 - write plus and I could have a string
12:37 - that only contains a new line for
12:39 - example and I will create a new line
12:42 - afterwards now you can see my prompt is
12:46 - now coming out on the line after that
12:49 - seven okay so we're going to be using
12:53 - these ideas or at least some of them
12:57 - probably all of what we've seen here in
12:59 - the exercise that'll give you in the
13:01 - next video so the thing to do if you are
13:03 - a beginner is practice this trial of
13:05 - this stuff try process standard out dot
13:08 - right try writing numbers with it as
13:10 - well as strings and try embedding
13:12 - control characters backslash T and
13:15 - backslash n within your strings and
13:17 - see what it does check there you get the
13:19 - idea of all this and you can use it to
13:21 - sort of a range text on the screen and
13:23 - I'll give you an exercise in the next
13:26 - video so until next time happy coding

Cleaned transcript:

hello this is John from cave of programming calm continuing my free course on nodejs and JavaScript for complete beginners in this video we're going to take a look at control characters and we're going to see how we can write stuff to the console without creating new lines which is what happens when we use console.log and i'm inserting this at this point in the course because in the next video i want to give you an exercise that will bring together a fair bit of what we've seen so far in the course but to complete that exercise you're going to need a bit more information so let's take a look at it first of all I'm going to start all my scripts as usual with use.you strict now if I write console.log here and output for example hello what does this actually do it actually outputs hello and then afterwards it creates a newline character so if we run this let's run node control characteristic Jas which is my file try again I hit the wrong button there now now I've brought back the same command that was wrong what I want is this okay so if you look at what's happening here without putting the text hello and then you see that the prompt of my terminal appears again on the next line and that's because console dot log actually outputs what we call a newline character after any text that it outputs meaning the next stuff you output is going to appear on the next line we can maybe see that more clearly if we output two of them and if I run this script you can see they're coming out on separate lines and that's because we write hello and then there's an invisible non printing newline character after hello and that causes the next hello to come out on the next line and that has a newline character after it as well and that means that my character reappears on the next line after that so these new line characters they don't print they don't the nonprinting characters they don't display a symbol to you but they cause the next stuff you output to appear on the next line and we can actually output those explicitly ourselves let's take a look so I'll maybe comment this out with a multiline comment which is slice star and then star slash so that's a multiline comment and it means that this is interpreted just as a comment and not as stuff to actually execute so that's right console dot log and we'll have a string that's right hi and then I'm gonna put backslash n hi again like this so backslash n is a nonprinting character it gets translated to a newline character we have to have a backslash this is called this is called a backslash whereas this would be called a forward slash and it's important that we have a backslash here so this means output hi then create a new line character in other words go to the next line and then output hi again and then console dot log automatically outputs a new line anyway after the stuff is printed so it'll be another new line after this second hi let's try this and we get hihi on two different lines we can also use backslash T by the way I don't have a semicolon here javascript is designed to be pretty flexible in many ways it often lets you get away without putting semicolons at the ends of lines but you should put them in it's good practice I would say in other words it's best practice is what you should really do because sometimes your code won't work without these new lines let's try something else so this time I'm going to write that's right hello hello and this time I'll separate them with a tab character let's run this so a tab character is like a sort of long space basically and we've got a sort of gap between these two hellos that's been created by this nonprinting tab character which we can create by using backslash T within a string and a good thing about tabs is that they help you line things up they sort of move things to the next tab position or that's often what they do other times they're basically equivalent to typically four spaces or sometimes two spaces or whatever so if I output console log and we have cat slash tdog slash T Mouse and then on the next line we have maybe Apple and orange and banana then we can see our output is lined up as long as the strings aren't too long typically you'll get lined up output there's no real guarantee about it but in this case it's it's work so tabs are quite good often for lining things up like this now what if we want to output some text and we don't want a new line after it because console dot log will always add a new line after after we finished outputting our text whether it contains new lines or whatever itself or not so even just console dot log by itself will create a new line so let's write console dot log with empty brackets and you can see here that between after the last output and before my prompts is a blank line now and that's just been created by this console dialogue but sometimes we don't want that so if we don't want it we can use process as press s because otherwise I think my autocomplete is gonna unhelpfully mess this up this is Visual Studio code I'm using here so if you're right process dot standard out right and I write let's say that's right lion and then let's write something else with process that standard outdoor right like tiger and you'll be able to see the difference so this is this is again it's just a way of writing to the console but the results here are a bit different to consult our log so if I if I run this now we can see we've got lion and then tiger and process that standard outdoor right does not create any new line after it so the next output that I do will be coming out right after the last input and sometimes and that is very helpful console dot log is really intended for debugging so it was originally implemented in browsers and typically you have development tools in your browser you can activate somehow and those contain a JavaScript console and console dot log if you run JavaScript in a browser which we'll look at later in this course will output stuff to the develop the developer console to help you debug JavaScript that's running in browsers but here we're just using it on a command line with the node.js interpreter and there it works similarly to how it does in a browser and it outputs text and then a new line after it now process standard out dot right you don't need to know what this is in order to use it we're going to cover concepts that you need to know to understand this more later on but briefly so process and standard out are both objects we call them objects process is actually a I believe standard out is anyway the process is actually an implicit object so it's an object we say that's available to us when we write nodejs programs and again you don't need to know what that is but we call it an object basically right is a method in other words it's a functional subroutine a collection of statements that is attached to an object in this case the standardout object and its standard out object lets us write to what we call the standard output stream so we've got standard out and standard in and standard out typically kind of represents the console so we can call standard out a it's a kind of stream it's like an output stream so rather than rather than a stream of water let's say it's a stream of data and we can write things to it we can write data to it and then it will usually appear on the console so you don't need to know that to actually use it though that's just to begin to get used to some sort of ideas and terminology that we'll look at later so you can use control characters if you know in strings that you're going to write with processed or standard out as well like if I were to put for example /t your /n you'll see the results of it let's and put /t after lion and slash n after tiger and if we actually output this then we've got lion and then a tab character and then after Tiger is a new line so that my console prompt is reappearing on the next line now if you want to output numbers with process that's standard out right there's a bit of a twist so let's try that let's have a variable let's say so let's say let value equal 7 so we've got a I've declared a variable called value and I've initialized it to the value 7 and I'll use process standard out dot right and we'll output value what does this do let's let's run it in fact it gives me a error trace or stack trace so console dot log because it's intended for debugging in many ways it's very flexible it will output numbers it will output all kinds of things process dot standard out dot write is in many ways less flexible it won't output numbers it will only output strings so this error here if we look at the top of it actually says the chunk argument must be one of type string or buffer it's not it's not liking the fact that this is a number but we can convert a variable that refers to a number we can convert it to a string using the to string method and that looks like this if I write value so still within within these round brackets of right if I write value dot 2.2 string and let's put empty round brackets in there because this is actually a method itself then that actually works let's try it and now it works we've got seven there if I wanted to get this single line to have a new line after in well I could just use console dot log but you can concatenate strings together as well so here I could write plus and I could have a string that only contains a new line for example and I will create a new line afterwards now you can see my prompt is now coming out on the line after that seven okay so we're going to be using these ideas or at least some of them probably all of what we've seen here in the exercise that'll give you in the next video so the thing to do if you are a beginner is practice this trial of this stuff try process standard out dot right try writing numbers with it as well as strings and try embedding control characters backslash T and backslash n within your strings and see what it does check there you get the idea of all this and you can use it to sort of a range text on the screen and I'll give you an exercise in the next video so until next time happy coding
