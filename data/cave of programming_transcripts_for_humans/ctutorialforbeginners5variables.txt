With timestamps:

00:17 - hello this is John from cave of
00:20 - programming calm in this tutorial this
00:23 - is another video from C++ for complete
00:26 - beginners I'm going to look at let's
00:28 - start looking at variables in this video
00:31 - so variables are one of the fundamental
00:33 - building blocks of programming languages
00:37 - and we're going to just start looking on
00:39 - them here so I'm going to create a new
00:41 - project and hopefully you typed in this
00:44 - for yourself
00:45 - and you tried about putting different
00:48 - bits of text in the ways I showed you in
00:50 - the last video because that's that will
00:52 - be great preparation if you've done that
00:54 - so let's go to project no sorry let's go
00:57 - to file new C++ project and let's give
01:01 - this a name of variables and click
01:04 - finish
01:04 - so we've got a new project here and
01:08 - actually what I meant to do was still
01:12 - eat that
01:12 - so I delete it I'll say I want to delete
01:14 - the project contents on disk as well
01:16 - because what I really wanted to do was
01:19 - use the basic project template so new
01:24 - C++ project HelloWorld C++ project
01:28 - variables click finish and there we go I
01:32 - used to record videos if I made a
01:35 - mistake but I realized that everyone's
01:37 - making the same mistakes so if I make a
01:39 - mistake sometimes people are sometimes
01:43 - happy because they made the same mistake
01:45 - ok so anyway so we've got this main
01:49 - program I'm going to delete this C
01:50 - outline here and just hit return a few
01:53 - times so we've got some blank lines
01:55 - we've got some space to work in here and
01:59 - so we've seen that you can type stuff
02:01 - like C out Chevron and in quotes hello
02:04 - and then after the double after the
02:08 - closing quote Chevron endler that's
02:10 - basically what we just had a minute ago
02:11 - and if I select the project go to
02:14 - project build project
02:17 - and click run and yes I want to say that
02:21 - and it says hello now this is a bit of
02:27 - text and in the programming lingo we
02:30 - call two bits of text strings so this is
02:33 - a string and we say this is a string
02:36 - literal meaning it's the actual value of
02:38 - a string it's not something that can
02:40 - change it's a it's an actual string a
02:44 - little literally a string a string
02:46 - literal and but often in programming we
02:49 - want values that can change that can be
02:51 - added together that can be used later in
02:53 - the program and so on and for this we
02:57 - need variables so I'm going to type
02:59 - something here and it's going to look if
03:01 - you've never seen it before a bit
03:03 - mystifying but I'm going to explain it
03:05 - so I'm going to type int number cats
03:09 - equals five semicolon and what this is
03:15 - doing is it's actually allocating a bit
03:18 - of the computer's memory is setting
03:20 - aside a bit of the computer's memory to
03:23 - store a value in to store actually an
03:25 - integer value an integer is a number
03:28 - that doesn't have a decimal point in it
03:30 - basically like five or 369 or whatever
03:34 - so I've written a keyword this is a
03:38 - keyword int and you know it's a keyword
03:40 - because your IDE will highlight it in a
03:44 - particular color so here in Eclipse sort
03:46 - of I don't know what is it mobile dot
03:49 - pink I'm not sure but it's highlighted
03:52 - in this brownish pinkish color along
03:55 - with things like this so these are all
03:57 - key words in the C++ language C++
04:02 - doesn't actually have all that many
04:03 - keywords you'll be pleased to know
04:05 - what's control said yep okay so I so int
04:11 - means allocate me some memory for
04:14 - storing an integer then we've got space
04:17 - and then we've got the variable name now
04:20 - this is something that I've made up as
04:22 - you might guess
04:23 - the cats and notice the way I've written
04:27 - it so there are two words in this
04:29 - variable and it's important to give
04:32 - variables descriptive names they won't
04:35 - always they won't always have multiple
04:38 - words in them but if they do you need to
04:41 - differentiate the words from each other
04:43 - somehow so one way that people often do
04:48 - this is they use underscores so I could
04:51 - could have type int number underscore
04:54 - cats equals five that's the same thing
04:58 - but what I've done instead is called
05:00 - camel casing for some reason where we
05:03 - made the first letter of each subsequent
05:06 - word after the first one uppercase and
05:09 - you have to choose one of these styles
05:11 - and it doesn't matter which one you
05:13 - choose for your variable names but stick
05:15 - to it consistently in your program
05:17 - whatever you do don't mix this kind of
05:19 - thing with this kind of things it looks
05:21 - really ugly so so your variables they if
05:27 - they have names of more than one word
05:28 - either uppercase subsequent words or
05:32 - separate the different words with
05:34 - underscores so I've just made this up
05:35 - it's just made up of normal letters and
05:38 - you can also use numbers in variable
05:40 - names you can't start them with a number
05:42 - so I can't put 6 there as an arrow you
05:45 - see there warning thing here but I can't
05:50 - put 6 at the end see you can use numbers
05:52 - in variables just not at the beginning
05:54 - so they should be made up of basically
05:56 - normal letters on the scores and numbers
06:00 - were necessary and so I've set aside and
06:05 - a bit of memory suitable for holding an
06:09 - integer I've labeled that bitter memory
06:11 - with the label number cats so it's just
06:14 - like going up to a bit of your
06:16 - computer's memory and sticking a
06:18 - physical bit of paper on it and writing
06:21 - number cats on that
06:24 - you labeled that bit of memory and that
06:27 - equals five here says and now put the
06:31 - value five into that memory and so
06:37 - that's that's what I'm doing there
06:39 - allocating a bit of memory giving it a
06:41 - label which I've made up and sticking
06:43 - the value five in it and this is called
06:46 - a variable because it can actually
06:47 - change so let's see what we can do with
06:50 - this between double quotes here with my
06:55 - C out I'm going to type number of cats
06:58 - semicolon space so this is all including
07:02 - space it's just some text there's
07:04 - nothing special about that I could type
07:07 - anything I wanted in there and then
07:09 - after that I'm going to put another
07:10 - Chevron and I'm going to put number cats
07:13 - in there and now so what we've got here
07:18 - if we break it down first were
07:20 - outputting this text number of cuts and
07:22 - colon space then we're out putting the
07:26 - value contained in this variable this
07:28 - bit of memory which is 5 and then we're
07:32 - outputting a new line character to two
07:36 - like make make them any any subsequent
07:39 - stuff that we output appear on a new
07:41 - line after this and we're also flushing
07:44 - the buffer so we're telling our
07:46 - operating system I'll put this text now
07:48 - don't save it up and do it later and no
07:52 - so I've got that the tub the tap here as
07:54 - well I've indented all these statements
07:56 - one tab which is really important so
07:59 - let's select the project here let's
08:01 - let's just run it and see what happens
08:04 - and it says number of cars
08:06 - 5 and we can have multiple variables in
08:11 - the program so on the next line here we
08:14 - could say int number dogs and there's
08:18 - nothing special about this text except
08:20 - that it followed the conventions that I
08:22 - explained earlier with regard to naming
08:24 - but we could call it anything I could
08:27 - you know call it that if I wanted but
08:29 - you've got to give your variables
08:30 - descriptive names so that you know what
08:32 - they are so I'm going to call this
08:33 - number dogs this is the number of dogs
08:35 - that I own I don't actually own any dogs
08:37 - but it you know just imagine I'm going
08:40 - to say equals seven so I've got five
08:43 - cats and seven dogs
08:45 - now let's pop underneath here see out
08:50 - number of dogs : and then a chevron and
08:57 - number dogs Chevron and endler and we
09:03 - should see exactly what you expect so
09:06 - let's run the program yes
09:07 - and here we are number of dog seven now
09:12 - we can also do stuff like adding these
09:14 - together so I could say here see out
09:18 - whoops we need a kind of chef on points
09:22 - towards the sea out if you like and
09:25 - let's say here between double quotes
09:27 - total number of animals : and then after
09:32 - the closing quote Chevron and let's say
09:35 - number cats plus number dogs and then
09:41 - let's put a chevron in and endler like
09:45 - that and let's run that so it's going to
09:49 - tell us it's gonna as you as you can
09:51 - guess it's going to add the number of
09:52 - cats the number of dogs and now we've
09:54 - got a total number of animals 12 so it
09:59 - pretty simple and but another thing that
10:01 - we can do in variables is we can
10:03 - reassign the value that they hold that's
10:06 - why we call them variables because they
10:07 - change they vary so let's uh put some
10:11 - text here see out new dog acquired quiet
10:18 - I dispel it quiet yeah it's like that
10:21 - new dog quiet and Chevron endler
10:26 - and let's stay here number of number
10:33 - dogs equals number dogs plus one I'm
10:41 - going to explain that in just a second
10:42 - and then its output see out new number
10:46 - of dogs a chevron and number dogs
10:53 - chevron if you feel that you're losing
10:56 - the plot a bit here it'll become a lot
10:59 - clearer when you type out yourself
11:00 - believe me we do need to practice this
11:02 - let's run this just see what happens
11:05 - firstly so it says now new number of
11:09 - dogs is eight so before it was seven and
11:11 - now it's eight and so what what happened
11:16 - here and what happened was this
11:20 - expression is read from from left to
11:26 - right
11:26 - no from right to left I suppose and so
11:31 - what we do yeah
11:32 - what we're doing is we we take the
11:35 - existing number of dogs and we add one
11:38 - to it and then we take that value so
11:42 - reading from right to left take that
11:45 - value and store it back in number of
11:47 - dogs so the equals sign here is kind of
11:49 - like an instruction that says store so
11:52 - and from from right to left we take
11:55 - number of dogs we add one to it and we
11:58 - store it back in the original bit of
12:02 - memory that we've labeled number dogs
12:05 - remember it's just a label bit of memory
12:07 - they can't that can contain the value
12:10 - and we then output that value down here
12:16 - you can add variables together too so
12:19 - like I could have added I could create
12:22 - one called number of animals int number
12:25 - animals let's say animals equals number
12:30 - cats plus number dogs and let's just
12:38 - change that number animals and I could
12:40 - output that I could say instead of
12:44 - putting the plus here directly in the
12:46 - see out statement I could say here
12:48 - number animals and that would also work
12:51 - let's run this so it says number of
12:56 - animals 12 so sewing here I've added two
13:00 - variables together I've added the value
13:02 - stored in the variables together so
13:05 - reading from right to left I've got the
13:08 - number of dogs so and this is the memory
13:10 - label number dogs and it's got the value
13:13 - 7 in it and I've added it and to the
13:17 - value in the memory location that I've
13:21 - labeled number of number cars and then
13:23 - I've stored that value the combined
13:27 - value here I've stored it in a bit of
13:30 - memory which I've allocated here
13:31 - suitable for storing an integer I've
13:34 - stored that combined value in a bit of
13:37 - memory which I've labeled number animals
13:39 - and here I'm outputting that value
13:41 - that's stored at that memory location so
13:47 - if this is the first time you've seen
13:49 - this and it's the first time you've
13:50 - thought about this it's going to seem
13:52 - pretty complicated all this talk of
13:54 - memory and you know adding value stored
13:59 - in memory locations and variables and
14:01 - stuff but programming is like learning a
14:05 - language like what a lot of people do
14:08 - when they start learning is they try to
14:09 - analyze everything in my need detail the
14:12 - write loads of notes they agonize over
14:14 - the precise meaning of everything but
14:17 - what you really need to do what's really
14:19 - more important is just to practice
14:21 - practice typing it because when you type
14:24 - the owl and somehow it's like learning a
14:27 - human language like learning Italian if
14:29 - you're not Italian or something as you
14:31 - practice speaking it and using it and
14:34 - you get to the point where when you need
14:38 - a particular bit of language it just
14:40 - comes out of your mouth you just know
14:42 - automatically what to use and like if
14:45 - you're if you're if you're Italian and
14:48 - you speak Italian you don't spend your
14:50 - time agonizing about Italian grammar you
14:53 - don't know the rules of Italian grammar
14:55 - even and necessarily you just speak it
14:57 - automatically and it's similar with
14:59 - programming it's really important now to
15:03 - go away and practice this type out a
15:05 - program like this one if you want start
15:08 - by typing this exact program but type it
15:10 - all out yourself and then try changing
15:13 - it great variables that you've named
15:15 - yourself put different values in them
15:17 - try adding them together try out putting
15:20 - them with C out see what happens so make
15:23 - up your own little program where you've
15:25 - got some variables and you've got
15:26 - variables that you're adding together
15:28 - and you're outputting them with C out
15:30 - it's really really important that you do
15:32 - that because just watching the video you
15:34 - won't learn C++ it's all about
15:36 - practicing it but and I hope you've
15:40 - basically understood roughly what's
15:41 - happening and when you type this out a
15:43 - few times you know typed out at least
15:47 - once and play around with it a little
15:49 - bit and when you keep doing it slowly
15:52 - this will start to seem intuitive and
15:54 - obvious even if it seems impenetrable
15:56 - now but it's vital that you do type it
15:59 - for yourself and get it working okay so
16:01 - that's it for this tutorial and until
16:04 - next time
16:05 - happy coding
16:14 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial this is another video from C++ for complete beginners I'm going to look at let's start looking at variables in this video so variables are one of the fundamental building blocks of programming languages and we're going to just start looking on them here so I'm going to create a new project and hopefully you typed in this for yourself and you tried about putting different bits of text in the ways I showed you in the last video because that's that will be great preparation if you've done that so let's go to project no sorry let's go to file new C++ project and let's give this a name of variables and click finish so we've got a new project here and actually what I meant to do was still eat that so I delete it I'll say I want to delete the project contents on disk as well because what I really wanted to do was use the basic project template so new C++ project HelloWorld C++ project variables click finish and there we go I used to record videos if I made a mistake but I realized that everyone's making the same mistakes so if I make a mistake sometimes people are sometimes happy because they made the same mistake ok so anyway so we've got this main program I'm going to delete this C outline here and just hit return a few times so we've got some blank lines we've got some space to work in here and so we've seen that you can type stuff like C out Chevron and in quotes hello and then after the double after the closing quote Chevron endler that's basically what we just had a minute ago and if I select the project go to project build project and click run and yes I want to say that and it says hello now this is a bit of text and in the programming lingo we call two bits of text strings so this is a string and we say this is a string literal meaning it's the actual value of a string it's not something that can change it's a it's an actual string a little literally a string a string literal and but often in programming we want values that can change that can be added together that can be used later in the program and so on and for this we need variables so I'm going to type something here and it's going to look if you've never seen it before a bit mystifying but I'm going to explain it so I'm going to type int number cats equals five semicolon and what this is doing is it's actually allocating a bit of the computer's memory is setting aside a bit of the computer's memory to store a value in to store actually an integer value an integer is a number that doesn't have a decimal point in it basically like five or 369 or whatever so I've written a keyword this is a keyword int and you know it's a keyword because your IDE will highlight it in a particular color so here in Eclipse sort of I don't know what is it mobile dot pink I'm not sure but it's highlighted in this brownish pinkish color along with things like this so these are all key words in the C++ language C++ doesn't actually have all that many keywords you'll be pleased to know what's control said yep okay so I so int means allocate me some memory for storing an integer then we've got space and then we've got the variable name now this is something that I've made up as you might guess the cats and notice the way I've written it so there are two words in this variable and it's important to give variables descriptive names they won't always they won't always have multiple words in them but if they do you need to differentiate the words from each other somehow so one way that people often do this is they use underscores so I could could have type int number underscore cats equals five that's the same thing but what I've done instead is called camel casing for some reason where we made the first letter of each subsequent word after the first one uppercase and you have to choose one of these styles and it doesn't matter which one you choose for your variable names but stick to it consistently in your program whatever you do don't mix this kind of thing with this kind of things it looks really ugly so so your variables they if they have names of more than one word either uppercase subsequent words or separate the different words with underscores so I've just made this up it's just made up of normal letters and you can also use numbers in variable names you can't start them with a number so I can't put 6 there as an arrow you see there warning thing here but I can't put 6 at the end see you can use numbers in variables just not at the beginning so they should be made up of basically normal letters on the scores and numbers were necessary and so I've set aside and a bit of memory suitable for holding an integer I've labeled that bitter memory with the label number cats so it's just like going up to a bit of your computer's memory and sticking a physical bit of paper on it and writing number cats on that you labeled that bit of memory and that equals five here says and now put the value five into that memory and so that's that's what I'm doing there allocating a bit of memory giving it a label which I've made up and sticking the value five in it and this is called a variable because it can actually change so let's see what we can do with this between double quotes here with my C out I'm going to type number of cats semicolon space so this is all including space it's just some text there's nothing special about that I could type anything I wanted in there and then after that I'm going to put another Chevron and I'm going to put number cats in there and now so what we've got here if we break it down first were outputting this text number of cuts and colon space then we're out putting the value contained in this variable this bit of memory which is 5 and then we're outputting a new line character to two like make make them any any subsequent stuff that we output appear on a new line after this and we're also flushing the buffer so we're telling our operating system I'll put this text now don't save it up and do it later and no so I've got that the tub the tap here as well I've indented all these statements one tab which is really important so let's select the project here let's let's just run it and see what happens and it says number of cars 5 and we can have multiple variables in the program so on the next line here we could say int number dogs and there's nothing special about this text except that it followed the conventions that I explained earlier with regard to naming but we could call it anything I could you know call it that if I wanted but you've got to give your variables descriptive names so that you know what they are so I'm going to call this number dogs this is the number of dogs that I own I don't actually own any dogs but it you know just imagine I'm going to say equals seven so I've got five cats and seven dogs now let's pop underneath here see out number of dogs and then a chevron and number dogs Chevron and endler and we should see exactly what you expect so let's run the program yes and here we are number of dog seven now we can also do stuff like adding these together so I could say here see out whoops we need a kind of chef on points towards the sea out if you like and let's say here between double quotes total number of animals and then after the closing quote Chevron and let's say number cats plus number dogs and then let's put a chevron in and endler like that and let's run that so it's going to tell us it's gonna as you as you can guess it's going to add the number of cats the number of dogs and now we've got a total number of animals 12 so it pretty simple and but another thing that we can do in variables is we can reassign the value that they hold that's why we call them variables because they change they vary so let's uh put some text here see out new dog acquired quiet I dispel it quiet yeah it's like that new dog quiet and Chevron endler and let's stay here number of number dogs equals number dogs plus one I'm going to explain that in just a second and then its output see out new number of dogs a chevron and number dogs chevron if you feel that you're losing the plot a bit here it'll become a lot clearer when you type out yourself believe me we do need to practice this let's run this just see what happens firstly so it says now new number of dogs is eight so before it was seven and now it's eight and so what what happened here and what happened was this expression is read from from left to right no from right to left I suppose and so what we do yeah what we're doing is we we take the existing number of dogs and we add one to it and then we take that value so reading from right to left take that value and store it back in number of dogs so the equals sign here is kind of like an instruction that says store so and from from right to left we take number of dogs we add one to it and we store it back in the original bit of memory that we've labeled number dogs remember it's just a label bit of memory they can't that can contain the value and we then output that value down here you can add variables together too so like I could have added I could create one called number of animals int number animals let's say animals equals number cats plus number dogs and let's just change that number animals and I could output that I could say instead of putting the plus here directly in the see out statement I could say here number animals and that would also work let's run this so it says number of animals 12 so sewing here I've added two variables together I've added the value stored in the variables together so reading from right to left I've got the number of dogs so and this is the memory label number dogs and it's got the value 7 in it and I've added it and to the value in the memory location that I've labeled number of number cars and then I've stored that value the combined value here I've stored it in a bit of memory which I've allocated here suitable for storing an integer I've stored that combined value in a bit of memory which I've labeled number animals and here I'm outputting that value that's stored at that memory location so if this is the first time you've seen this and it's the first time you've thought about this it's going to seem pretty complicated all this talk of memory and you know adding value stored in memory locations and variables and stuff but programming is like learning a language like what a lot of people do when they start learning is they try to analyze everything in my need detail the write loads of notes they agonize over the precise meaning of everything but what you really need to do what's really more important is just to practice practice typing it because when you type the owl and somehow it's like learning a human language like learning Italian if you're not Italian or something as you practice speaking it and using it and you get to the point where when you need a particular bit of language it just comes out of your mouth you just know automatically what to use and like if you're if you're if you're Italian and you speak Italian you don't spend your time agonizing about Italian grammar you don't know the rules of Italian grammar even and necessarily you just speak it automatically and it's similar with programming it's really important now to go away and practice this type out a program like this one if you want start by typing this exact program but type it all out yourself and then try changing it great variables that you've named yourself put different values in them try adding them together try out putting them with C out see what happens so make up your own little program where you've got some variables and you've got variables that you're adding together and you're outputting them with C out it's really really important that you do that because just watching the video you won't learn C++ it's all about practicing it but and I hope you've basically understood roughly what's happening and when you type this out a few times you know typed out at least once and play around with it a little bit and when you keep doing it slowly this will start to seem intuitive and obvious even if it seems impenetrable now but it's vital that you do type it for yourself and get it working okay so that's it for this tutorial and until next time happy coding you
