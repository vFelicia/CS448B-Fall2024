With timestamps:

00:00 - in this video we're going to take a look
00:02 - at numeric expressions in Python now
00:05 - here's an example where I think using
00:08 - the python console could actually be
00:13 - useful let's type python
00:16 - here and we get this python prompt in
00:20 - Python we can form arbitrarily
00:23 - complicated numerical
00:25 - expressions so for example we could do 7
00:29 - *
00:31 - 4 + 3 and that will be evaluated by the
00:37 - python interpreter and we could assign
00:39 - the value of that in a program to a
00:41 - variable or we could print it out
00:43 - directly or whatever of course we can
00:45 - use floating Point numbers so we can say
00:48 - 1 2 * 4 or
00:54 - 1.2 * 4.3 or whatever and the result is
00:59 - now a a float a floating Point type
01:03 - instead of an INT so it's a type that
01:05 - has a decimal point in
01:08 - it some parts of the world use a comma
01:11 - here instead of a point I think much of
01:14 - Europe here would use a comma but in the
01:16 - UK and in the USA for example we use a
01:20 - point there we can also do division so
01:23 - let's try 5 / 3 and we get
01:28 - that 1. 666 notice that the division
01:33 - operator is this forward
01:37 - slash and of course you can do
01:39 - subtraction let's try 4.2 minus
01:45 - 2 in some programming languages if you
01:48 - divide an integer by an integer the
01:50 - remainder by default will just get
01:53 - discarded so this would then give us one
01:56 - and it would discard the remainder of
01:58 - two you can see that python
02:00 - doesn't do
02:01 - that if you want integer division in
02:04 - Python you want the kind of division
02:06 - where you actually want to discard the
02:09 - remainder you have to use a double slash
02:11 - like this so 7 / 3 that gives us two and
02:16 - it just discards the remainder the
02:18 - ordinary kind of
02:21 - division works like You' expect now we
02:25 - can also use brackets so let's try doing
02:28 - 2 * 3
02:31 - +
02:33 - 2 that gives us 8 we could also try 2 +
02:37 - 2 * 3 which also gives us
02:40 - eight so these expressions are both
02:44 - seemingly ambiguous because this could
02:47 - mean 2 * 3 and then add on two it could
02:52 - also mean 2
02:55 - * 3 + 2 which would be well 3 + 2 is is
03:00 - 5 and 2 * 5 is 10 that would give us a
03:02 - different
03:03 - result however some operators have
03:07 - higher precedence in programming
03:10 - languages
03:11 - generally than other operators so this
03:15 - multiplication operator has a higher
03:18 - precedence than plus division also has a
03:22 - higher precedence than plus or
03:24 - minus and that means these Expressions
03:27 - actually aren't ambiguous because
03:29 - because in ambiguous looking expressions
03:32 - like this the higher precedence operator
03:36 - will be evaluated first so that means in
03:38 - these
03:39 - Expressions the multiplication gets
03:41 - evaluated before you do the
03:45 - addition however I would recommend
03:48 - trying not to create ambiguous
03:50 - Expressions it makes the code easier to
03:53 - read if you put brackets in so that it's
03:56 - really clear what you intended so
03:58 - instead of writing 2 plus 2 * 3 I could
04:02 - put brackets around the multiplication
04:05 - to show that that's actually what I
04:07 - intend they aren't
04:09 - necessary but they they can make
04:12 - Expressions easier to read especially
04:15 - for new
04:17 - programmers so you can see that if I put
04:19 - the brackets in a different place then
04:22 - of course I get a different result so if
04:25 - I put them around 2 + 2 I would get 12
04:28 - instead there are some more arithmetical
04:32 - operators and logical operators that we
04:35 - will see as we go through the course for
04:37 - the moment I would recommend just
04:38 - practicing this create some expressions
04:41 - using the two types of division operator
04:44 - subtraction multiplication and addition
04:48 - and try putting brackets into more
04:50 - complicated Expressions just to see what
04:52 - they do if you just try everything out
04:54 - once or twice that's enough practice of
04:57 - this for the moment I think and of
04:58 - course the point of this is that you can
05:00 - use these in actual programs you could
05:03 - set a variable equal to 2 + 2 * 3 for
05:08 - example and as we'll see these values
05:11 - could also be variables instead of
05:14 - numeric literals this is a free video
05:17 - from my Python and machine learning
05:19 - course I'm uploading some videos from
05:21 - the start of the course to get you
05:23 - started with python the full course is
05:25 - absolutely huge and teaches you python
05:28 - and a basics of machine learning and
05:30 - artificial intelligence with a ton of
05:32 - exercises and solutions please click the
05:35 - link in the description for the full
05:37 - course

Cleaned transcript:

in this video we're going to take a look at numeric expressions in Python now here's an example where I think using the python console could actually be useful let's type python here and we get this python prompt in Python we can form arbitrarily complicated numerical expressions so for example we could do 7 * 4 + 3 and that will be evaluated by the python interpreter and we could assign the value of that in a program to a variable or we could print it out directly or whatever of course we can use floating Point numbers so we can say 1 2 * 4 or 1.2 * 4.3 or whatever and the result is now a a float a floating Point type instead of an INT so it's a type that has a decimal point in it some parts of the world use a comma here instead of a point I think much of Europe here would use a comma but in the UK and in the USA for example we use a point there we can also do division so let's try 5 / 3 and we get that 1. 666 notice that the division operator is this forward slash and of course you can do subtraction let's try 4.2 minus 2 in some programming languages if you divide an integer by an integer the remainder by default will just get discarded so this would then give us one and it would discard the remainder of two you can see that python doesn't do that if you want integer division in Python you want the kind of division where you actually want to discard the remainder you have to use a double slash like this so 7 / 3 that gives us two and it just discards the remainder the ordinary kind of division works like You' expect now we can also use brackets so let's try doing 2 * 3 + 2 that gives us 8 we could also try 2 + 2 * 3 which also gives us eight so these expressions are both seemingly ambiguous because this could mean 2 * 3 and then add on two it could also mean 2 * 3 + 2 which would be well 3 + 2 is is 5 and 2 * 5 is 10 that would give us a different result however some operators have higher precedence in programming languages generally than other operators so this multiplication operator has a higher precedence than plus division also has a higher precedence than plus or minus and that means these Expressions actually aren't ambiguous because because in ambiguous looking expressions like this the higher precedence operator will be evaluated first so that means in these Expressions the multiplication gets evaluated before you do the addition however I would recommend trying not to create ambiguous Expressions it makes the code easier to read if you put brackets in so that it's really clear what you intended so instead of writing 2 plus 2 * 3 I could put brackets around the multiplication to show that that's actually what I intend they aren't necessary but they they can make Expressions easier to read especially for new programmers so you can see that if I put the brackets in a different place then of course I get a different result so if I put them around 2 + 2 I would get 12 instead there are some more arithmetical operators and logical operators that we will see as we go through the course for the moment I would recommend just practicing this create some expressions using the two types of division operator subtraction multiplication and addition and try putting brackets into more complicated Expressions just to see what they do if you just try everything out once or twice that's enough practice of this for the moment I think and of course the point of this is that you can use these in actual programs you could set a variable equal to 2 + 2 * 3 for example and as we'll see these values could also be variables instead of numeric literals this is a free video from my Python and machine learning course I'm uploading some videos from the start of the course to get you started with python the full course is absolutely huge and teaches you python and a basics of machine learning and artificial intelligence with a ton of exercises and solutions please click the link in the description for the full course
