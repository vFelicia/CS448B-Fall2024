With timestamps:

00:16 - hello this is John from cave bottle
00:20 - programming : in this tutorial we're
00:23 - going to talk a bit about libraries and
00:25 - C++ because in the next program
00:29 - hopefully in the next tutorial and I
00:32 - want to show you how to set up a program
00:38 - that that can work with graphics and C++
00:41 - but first we need to understand what we
00:44 - need to actually obtain in order to get
00:48 - that to work and we need to understand a
00:49 - bit about libraries in C++ so in C++ you
00:56 - can if you create a bunch of code you
01:00 - don't have you don't have to create a
01:01 - program with that code you can also
01:04 - create a library if you create an ally
01:09 - brer e you can then give that code as a
01:12 - compiled binary library to other
01:15 - developers together with the header
01:16 - files and they can then link that code
01:21 - with their program and use it so I've
01:26 - kind of touched on it before although I
01:28 - am gone into compilation and explicit
01:31 - detail but when you compile a C++
01:34 - program first the preprocessor runs and
01:38 - that processes your in your anything it
01:41 - begins with a hash basically so your
01:43 - include statements your if deaths you
01:46 - can also define statement in there which
01:49 - we will be having used and so on after
01:52 - the preprocessor you then have
01:56 - compilation which produces object files
02:01 - so your source files your CPP files are
02:05 - compiled into object files which
02:08 - produces files that usually have the dot
02:13 - o suffix I'm trying to think if that's
02:17 - the same for every every platform I
02:20 - think is so if if we look at let's just
02:24 - look at a program
02:25 - so if I get the location of this program
02:29 - that I've got here and then we just go
02:34 - to that in the terminal here so I'm on a
02:36 - Mac here but doesn't matter let's take a
02:39 - look so I do CD and I'm going to have to
02:45 - put this in double quotes if we go to
02:50 - the debug folder the folder for ladybug
02:54 - target here and we go to that's got a
02:58 - source subfolder we see that we've got
03:01 - we've got a bunch of dot o files here
03:04 - we've also got these debug files but the
03:07 - most important thing are these dot o
03:09 - files which as far as I can think is
03:11 - also the same on Windows so when you
03:15 - compile your program you produce a bunch
03:17 - of diode files and enter the final stage
03:20 - of compilation it's that you link your
03:22 - program and linking means you combine
03:27 - all of your all of your dough files
03:31 - together with any libraries that you
03:33 - have into an executable which could have
03:37 - suffix texture on Windows or no suffix
03:41 - on for example UNIX platforms there's no
03:44 - particular executable suffix so when you
03:49 - when you link your programs when you
03:50 - link those object files together
03:52 - containing your code you can also link
03:54 - them with external libraries that you've
03:57 - used to develop your program and if you
03:59 - think about it even if you create a
04:01 - hello world program let's say you're
04:04 - using more code then you've actually
04:06 - written yourself there you're using for
04:08 - example the code associated with C out
04:10 - and that has to be contained somewhere
04:13 - on your system in order to be able to
04:16 - run it it has to be code that actually
04:19 - deals with the the console and outputs
04:21 - your text and a C++ program will
04:27 - actually use libraries which we call
04:29 - dynamic libraries that contain that code
04:31 - so let's let's take a look at how this
04:33 - works when you compile a program you
04:37 - choice between using static libraries
04:40 - and dynamic libraries and you'll be
04:42 - using some dynamic libraries kind of
04:46 - implicitly anyway so static libraries of
04:51 - static link libraries if you like they
04:55 - they are files contain C++ code which
04:59 - are actually compiled into your program
05:04 - with it with a important caveat which
05:06 - we'll go into so static library is a
05:09 - bunch of is a bunch of C++ files that
05:11 - have been compiled the codes been
05:13 - compiled into a binary file which we
05:16 - call a static library and the idea is
05:18 - you give that binary file to other
05:20 - computer programmers they can then link
05:22 - their program with it to create their
05:24 - executable and then use the code that
05:27 - was compiled into that static library we
05:31 - can also have dynamic libraries so we
05:36 - can have libraries that contain code
05:40 - which the program finds when actually
05:43 - runs so not when it links but when
05:45 - actually runs and if you see out your
05:50 - program is going to use code in a
05:52 - standard dynamic library that's already
05:54 - going to be present on usually at least
05:57 - on any systems whether well that program
06:00 - is capable of running so in this case
06:05 - with dynamic libraries program your
06:07 - program will find the relevant code at
06:11 - runtime to regalo
06:14 - two kinds of libraries now with static
06:18 - libraries the actual files containing
06:20 - that C++ code so the actual libraries
06:23 - will have a suffix of on on Windows
06:29 - live so we have for example X X Y Z dot
06:35 - lib that would be an example of a window
06:37 - static library and you can create those
06:40 - yourself if you want to it's not at all
06:42 - difficult to do but I won't go into that
06:45 - in this tutorial and on UNIX type system
06:50 - so on UNIX or Linux they they have a
06:55 - suffix a usually and they also start
06:59 - with the prefix Lib usually so we'll
07:02 - have for example X Y Z dot a so that's a
07:06 - UNIX or Linux static library containing
07:10 - actual C++ code which you can compile
07:13 - into your program and use it's also the
07:18 - same same on the map I'm actually
07:20 - although I'm developing I'm going to
07:22 - develop this program that I'm going to
07:24 - show you on a Mac I'm actually going to
07:26 - use the UNIX stroke Linux type system
07:29 - because I couldn't get the kind of Mac
07:32 - we're doing things to work with SDL but
07:35 - Mac is a the Mac Mac system OS Mac OS is
07:40 - based on UNIX in any case now so we can
07:44 - use a UNIX or Linux type system to
07:47 - develop programs with it which makes
07:49 - things a bit easier but as far as I know
07:51 - on in the map static libraries all have
07:55 - a also have a die suffix or at least you
07:59 - can use that kind of library on the Mac
08:02 - anyway now dynamic libraries dynamic so
08:07 - dynamic on Windows
08:13 - - India for consistency there we go so
08:17 - on Windows they have the suffix DLL so
08:20 - you'll have X Y Z dot DLL I don't use
08:25 - Windows anymore but in the past my
08:26 - program windows at least it used to be
08:29 - the case that you have a lot of dll's in
08:31 - your Windows system or system32 folder
08:33 - and they are standard libraries
08:37 - either that or either that or libraries
08:40 - copied by an installer which multiple
08:43 - programs can use so programs can load
08:46 - libraries from that location dynamically
08:49 - when they run and it's also the case
08:52 - that if you put a dll file in the same
08:54 - folder as your program in Windows
08:56 - Windows will find that dll file there on
09:02 - UNIX or Linux or Linux or Mac as well
09:14 - dynamic libraries they have and they
09:18 - have a suffix usually a dot s oh and
09:22 - they also start with Lib usually so have
09:25 - lived XYZ dot s so and finally on only
09:30 - the Mac a dynamic libraries can have the
09:34 - suffix dot eyelid so I guess that would
09:39 - be X Y Z dot I Lib I don't think there's
09:44 - any lip suffix there for remember
09:46 - rightly that prefix sorry so we've got
09:50 - DLL and on windows and dire so basically
09:54 - on UNIX or all Mac and on the map is
09:58 - also this die Lib and suffix for dynamic
10:02 - library that's also possible
10:05 - so and the upshot of this is is that
10:09 - we're going to be using an API called
10:12 - STL and you can use other api's which
10:14 - I'll talk about a bit in the next
10:15 - tutorial to follow this these tutorials
10:18 - if you want to but we're going to need
10:22 - an external API to provide us with some
10:24 - graphics facilities and depending on
10:28 - your system you're going to have to
10:29 - locate the right kind of file to compile
10:32 - into your program so one thing I should
10:34 - mention is that it's possible although I
10:39 - said that static libraries contain
10:42 - actual code that's actually linked with
10:44 - your program it's also possible for them
10:47 - to contain kind of stubs that just tell
10:50 - your program to load code from a dynamic
10:53 - library so a common thing to do is to
10:57 - link your program with a static library
11:00 - which basically instructs your program
11:03 - to find go from a dynamic library so
11:06 - that when you distribute it you have to
11:08 - distribute a dynamic library with it
11:10 - even though you've linked it with a
11:11 - static library so the static libraries
11:13 - they don't necessarily have to contain
11:16 - code themselves they can't just contain
11:19 - information about where to find code
11:22 - basically for the program so the next
11:26 - tutorial we're going to start taking a
11:27 - look at STL and with this information in
11:30 - mind I'm going to explain what you need
11:33 - to find to compile a basic STL program
11:37 - so that's it for this tutorial and until
11:40 - next time happy coding
11:49 - you

Cleaned transcript:

hello this is John from cave bottle programming in this tutorial we're going to talk a bit about libraries and C++ because in the next program hopefully in the next tutorial and I want to show you how to set up a program that that can work with graphics and C++ but first we need to understand what we need to actually obtain in order to get that to work and we need to understand a bit about libraries in C++ so in C++ you can if you create a bunch of code you don't have you don't have to create a program with that code you can also create a library if you create an ally brer e you can then give that code as a compiled binary library to other developers together with the header files and they can then link that code with their program and use it so I've kind of touched on it before although I am gone into compilation and explicit detail but when you compile a C++ program first the preprocessor runs and that processes your in your anything it begins with a hash basically so your include statements your if deaths you can also define statement in there which we will be having used and so on after the preprocessor you then have compilation which produces object files so your source files your CPP files are compiled into object files which produces files that usually have the dot o suffix I'm trying to think if that's the same for every every platform I think is so if if we look at let's just look at a program so if I get the location of this program that I've got here and then we just go to that in the terminal here so I'm on a Mac here but doesn't matter let's take a look so I do CD and I'm going to have to put this in double quotes if we go to the debug folder the folder for ladybug target here and we go to that's got a source subfolder we see that we've got we've got a bunch of dot o files here we've also got these debug files but the most important thing are these dot o files which as far as I can think is also the same on Windows so when you compile your program you produce a bunch of diode files and enter the final stage of compilation it's that you link your program and linking means you combine all of your all of your dough files together with any libraries that you have into an executable which could have suffix texture on Windows or no suffix on for example UNIX platforms there's no particular executable suffix so when you when you link your programs when you link those object files together containing your code you can also link them with external libraries that you've used to develop your program and if you think about it even if you create a hello world program let's say you're using more code then you've actually written yourself there you're using for example the code associated with C out and that has to be contained somewhere on your system in order to be able to run it it has to be code that actually deals with the the console and outputs your text and a C++ program will actually use libraries which we call dynamic libraries that contain that code so let's let's take a look at how this works when you compile a program you choice between using static libraries and dynamic libraries and you'll be using some dynamic libraries kind of implicitly anyway so static libraries of static link libraries if you like they they are files contain C++ code which are actually compiled into your program with it with a important caveat which we'll go into so static library is a bunch of is a bunch of C++ files that have been compiled the codes been compiled into a binary file which we call a static library and the idea is you give that binary file to other computer programmers they can then link their program with it to create their executable and then use the code that was compiled into that static library we can also have dynamic libraries so we can have libraries that contain code which the program finds when actually runs so not when it links but when actually runs and if you see out your program is going to use code in a standard dynamic library that's already going to be present on usually at least on any systems whether well that program is capable of running so in this case with dynamic libraries program your program will find the relevant code at runtime to regalo two kinds of libraries now with static libraries the actual files containing that C++ code so the actual libraries will have a suffix of on on Windows live so we have for example X X Y Z dot lib that would be an example of a window static library and you can create those yourself if you want to it's not at all difficult to do but I won't go into that in this tutorial and on UNIX type system so on UNIX or Linux they they have a suffix a usually and they also start with the prefix Lib usually so we'll have for example X Y Z dot a so that's a UNIX or Linux static library containing actual C++ code which you can compile into your program and use it's also the same same on the map I'm actually although I'm developing I'm going to develop this program that I'm going to show you on a Mac I'm actually going to use the UNIX stroke Linux type system because I couldn't get the kind of Mac we're doing things to work with SDL but Mac is a the Mac Mac system OS Mac OS is based on UNIX in any case now so we can use a UNIX or Linux type system to develop programs with it which makes things a bit easier but as far as I know on in the map static libraries all have a also have a die suffix or at least you can use that kind of library on the Mac anyway now dynamic libraries dynamic so dynamic on Windows India for consistency there we go so on Windows they have the suffix DLL so you'll have X Y Z dot DLL I don't use Windows anymore but in the past my program windows at least it used to be the case that you have a lot of dll's in your Windows system or system32 folder and they are standard libraries either that or either that or libraries copied by an installer which multiple programs can use so programs can load libraries from that location dynamically when they run and it's also the case that if you put a dll file in the same folder as your program in Windows Windows will find that dll file there on UNIX or Linux or Linux or Mac as well dynamic libraries they have and they have a suffix usually a dot s oh and they also start with Lib usually so have lived XYZ dot s so and finally on only the Mac a dynamic libraries can have the suffix dot eyelid so I guess that would be X Y Z dot I Lib I don't think there's any lip suffix there for remember rightly that prefix sorry so we've got DLL and on windows and dire so basically on UNIX or all Mac and on the map is also this die Lib and suffix for dynamic library that's also possible so and the upshot of this is is that we're going to be using an API called STL and you can use other api's which I'll talk about a bit in the next tutorial to follow this these tutorials if you want to but we're going to need an external API to provide us with some graphics facilities and depending on your system you're going to have to locate the right kind of file to compile into your program so one thing I should mention is that it's possible although I said that static libraries contain actual code that's actually linked with your program it's also possible for them to contain kind of stubs that just tell your program to load code from a dynamic library so a common thing to do is to link your program with a static library which basically instructs your program to find go from a dynamic library so that when you distribute it you have to distribute a dynamic library with it even though you've linked it with a static library so the static libraries they don't necessarily have to contain code themselves they can't just contain information about where to find code basically for the program so the next tutorial we're going to start taking a look at STL and with this information in mind I'm going to explain what you need to find to compile a basic STL program so that's it for this tutorial and until next time happy coding you
