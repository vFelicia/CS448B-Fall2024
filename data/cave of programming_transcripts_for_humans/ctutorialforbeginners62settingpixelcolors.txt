With timestamps:

00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from Cave of
00:20 - programming. comom in this tutorial
00:21 - we're going to take a look at setting
00:24 - colors of pixels in our program so in
00:27 - the in the last program that we created
00:29 - in the last tutorial we turn the entire
00:32 - screen white um just by doing a mem set
00:36 - on the buffer where we sto store the
00:39 - pixel
00:40 - information so here I've set all the
00:42 - bites in our pixel buffer to the maximum
00:46 - possible value of um FF in heximal which
00:50 - is 255 in a decimal
00:53 - system so now let's um let's go ahead
00:56 - and see if we can change the colors of
00:58 - individual pixels so the first thing I'm
01:01 - going to do is do a mem set to zero and
01:05 - um then we should get back to black so
01:06 - we can just clear the buffer and set
01:09 - every bite in it to zero so we get black
01:13 - now let's try setting an individual
01:15 - pixel this is going to be quite hard to
01:17 - see so um after this I'm going to go on
01:20 - and uh in this tutorial we're going to
01:22 - set the entire screen to a particular
01:24 - color but we'll start with just an
01:26 - individual pixel so we've got the the
01:29 - buffer here containing our pixel data
01:33 - and we can pick any um any particular
01:37 - index in this buffer up to a maximum
01:40 - value of one less than the screen width
01:42 - times the screen height one less because
01:44 - it's an an an array and of course arrays
01:47 - start numbering at zero up to the number
01:50 - of um actual
01:54 - uh values that we can store in them
01:57 - let's just put something in here like uh
02:00 - 600 so we've clearly got more than 600
02:03 - pixels so I'm not sure where this is
02:05 - going to appear on the screen actually
02:07 - come to think of it it's going to be
02:09 - near the end of the top row so maybe
02:11 - I'll pick a bigger value here let's
02:13 - try um I don't know let's let's try
02:16 - something like 30
02:19 - 30,000 and let's set that equal to a
02:22 - value um let's try white to start with
02:27 - so each pixel occupies one bite and that
02:31 - bite you'll recall allows us to set the
02:33 - red green blue and Alpha values and each
02:36 - value has a value from zero up to 255
02:40 - maximum in decimal or FF in
02:44 - hexadecimal so what we do is we pack all
02:46 - those four values those four bytes into
02:49 - a single 32bit integer
02:54 - type now if we were to try to write this
02:57 - out in um decimal it would not be easy
03:00 - to understand what's going on but if we
03:02 - write it in hexadecimal as you'll see
03:04 - it's a lot easier so I'm going to write
03:05 - a heximal number here and um the the
03:10 - first so this is going to be o
03:14 - x0x so the first bite um we think of it
03:18 - as being on the left although um whether
03:21 - it really is or not in a computer's
03:23 - memory well the computer's memory it
03:25 - could be upside down or anything
03:27 - physically but um the first the first
03:30 - bite tier we're going to give a value of
03:32 - FF so FF is the maximum value we can
03:36 - store in a single bite in he a decimal
03:38 - and the next bite after that is also
03:40 - going to get a value of FF and so on for
03:43 - the remaining bytes so this value here o
03:48 - 0x followed by 8
03:50 - FS that's setting all four bytes to the
03:54 - maximum FF and we're going to be looking
03:56 - at this a bit further in a future
03:58 - tutorial exactly how this works but um
04:02 - for now just think of each of these each
04:04 - every pair of FS is a value that we're
04:08 - setting either for the alpha value or
04:10 - the red or the green or the
04:13 - blue um let's let's have a have a look
04:16 - at this let's run this and see what it
04:17 - looks like so if I run it I don't know
04:20 - if you can see that and the screen
04:21 - capture but there's a white pixel just
04:23 - above my mouse here let's quit
04:27 - that so if if we look at the Pix pixel
04:30 - format that we set when we created the
04:32 - texture that we're writing this data to
04:35 - we think that the first pair of FS
04:37 - should be the red bite then the green
04:39 - bite the blue bite and the alpha bite
04:42 - which we're not going to use but um in
04:45 - practice it doesn't seem to quite work
04:47 - like that I don't know why not so you
04:50 - need to do an experiment here on your
04:52 - system and figure out which is the alpha
04:55 - which is the red which is the green and
04:56 - which is the blue we're going to do that
04:58 - in a minute but let's first set the
05:01 - whole screen to a color because it's
05:03 - going to be easier to to see than one
05:05 - individual pixel so I'm going to use a
05:07 - for Loop here I'm going to say for in I
05:11 - equals not while I is less than and I
05:15 - want to visit every pixel on the screen
05:18 - so it's going to be I less than screen
05:20 - width time screen
05:23 - height and
05:28 - i++ and and uh we're going to set each
05:31 - pixel initially let's set it to White so
05:34 - I'm going to say buffer I equal o x and
05:40 - 1 2 3 4 5 6 7 8 FS just like this so
05:46 - this this is going to do the same thing
05:47 - as a mem set um originally we're doing
05:50 - mem set um to black but before we had M
05:54 - set to White it's just going to do it
05:56 - more slowly because we're using a for
05:58 - Loop which is going to be slow than a m
06:00 - set but the advantage is that
06:04 - um well actually there's not a lot of
06:06 - Advantage here except that we can't we
06:09 - can't we can only memet all the bites to
06:12 - the same value but if we do this we can
06:16 - now pick out um we can now change
06:19 - individual bites we we can deal with
06:22 - each of the bites in the the the groups
06:25 - of four bytes where four byes represents
06:27 - one pixel separately by changing the fs
06:31 - in this 32bit 4 by number so let's just
06:35 - run that and check that we get a white
06:37 - screen so now it's
06:39 - white and let's try um setting the
06:44 - middle per of bytes to Zer so a pair of
06:49 - zeros here and here and the end bytes
06:51 - are going to be F so I I'm not sure
06:54 - which one's red at this point and which
06:55 - one's Alpha but um we should see red
06:59 - here
07:00 - and um I'm not even sure whether um FF
07:04 - means completely transparent for Alpha
07:06 - or zero means completely transparent we
07:09 - could check that um but I found it this
07:11 - doesn't work with this program anyway
07:13 - the alpha doesn't seem to do anything so
07:15 - it doesn't seem to matter let's just run
07:17 - this now we've got a red
07:19 - screen so if I make the first by zero
07:25 - and the next by
07:26 - FF let's take a look at what that is
07:30 - so that's now green and what about the
07:33 - next
07:34 - bite
07:37 - here let's run
07:40 - this and this is now blue so it seems as
07:43 - though what we've got is red green blue
07:46 - and the last FS are the alpha value here
07:50 - which is what we'd expect from this
07:52 - actually um so I'm not sure why I
07:54 - thought it wasn't in fact in this order
07:56 - because this this in fact seems to work
07:58 - perfectly we could we could get
08:00 - combinations of colors as well so if
08:02 - we've got blue and green I think that
08:07 - should be yellow shouldn't it so let's
08:09 - let's try that if we run this I guess
08:13 - blue and green isn't yellow okay we've
08:15 - got um some sort of bluish color there
08:19 - I've set too many FS that's
08:22 - why so we've got um two zeros we need
08:25 - two
08:26 - FS so that's the red the zero then we've
08:29 - got green is FF blue is
08:32 - FF and Alpha is
08:36 - FF yeah so I guess I was right the first
08:38 - time I don't know let's try um let's try
08:42 - red and blue see what that
08:48 - does so now we've got a sort of purple
08:51 - color which is what we'
08:53 - expect um how would get yellow I've
08:55 - forgotten we we'd have to look that up
08:57 - but or I'd have to but I guess yellow
09:00 - would be some combination of blue and
09:03 - green let's just experiment here it's
09:06 - quite interesting let's try um we'll
09:09 - leave red at 0 0 then for green let's
09:16 - try FF and for blue let's try 80 because
09:20 - 80 is uh equivalent to I guess 128 it's
09:25 - half of
09:27 - 256 roughly half of FF let's try
09:32 - that and now we've got a sort of
09:34 - greenish color I'll try one last thing
09:37 - let's try
09:39 - maximum um let's try maximum
09:43 - green
09:45 - and let's try half of green did I just
09:49 - have that and maximum blue anyway this
09:52 - is getting silly so I'll leave you to
09:53 - experiment around with this and I'm
09:56 - going to go and look at what yellow is
09:58 - in terms of the primary colors here but
10:01 - um make sure you can get that to work on
10:03 - your system and uh make sure you can set
10:05 - different colors and check which of
10:08 - these bytes remember any particular bite
10:11 - is represented by two digits and this
10:13 - hex decimal number here and you need
10:15 - eight digits total make sure that you
10:18 - can get um red green and blue values
10:23 - Set uh hopefully this will work the same
10:25 - on your system as it does on mine you
10:27 - could try setting Alpha here uh which
10:29 - whichever one alpha is whether it's this
10:30 - one or this one on your system it should
10:33 - be the same as mine but I'm not
10:34 - completely certain of that try setting
10:36 - it to zero or FF and see if that makes a
10:39 - different difference and keep doing that
10:41 - until youve figured out reliably how to
10:43 - get red green and blue in here because
10:45 - you going to need that for the rest of
10:46 - this tutorial so that's it for this time
10:49 - and until next time happy coding
10:53 - [Music]

Cleaned transcript:

hello this is John from Cave of programming. comom in this tutorial we're going to take a look at setting colors of pixels in our program so in the in the last program that we created in the last tutorial we turn the entire screen white um just by doing a mem set on the buffer where we sto store the pixel information so here I've set all the bites in our pixel buffer to the maximum possible value of um FF in heximal which is 255 in a decimal system so now let's um let's go ahead and see if we can change the colors of individual pixels so the first thing I'm going to do is do a mem set to zero and um then we should get back to black so we can just clear the buffer and set every bite in it to zero so we get black now let's try setting an individual pixel this is going to be quite hard to see so um after this I'm going to go on and uh in this tutorial we're going to set the entire screen to a particular color but we'll start with just an individual pixel so we've got the the buffer here containing our pixel data and we can pick any um any particular index in this buffer up to a maximum value of one less than the screen width times the screen height one less because it's an an an array and of course arrays start numbering at zero up to the number of um actual uh values that we can store in them let's just put something in here like uh 600 so we've clearly got more than 600 pixels so I'm not sure where this is going to appear on the screen actually come to think of it it's going to be near the end of the top row so maybe I'll pick a bigger value here let's try um I don't know let's let's try something like 30 30,000 and let's set that equal to a value um let's try white to start with so each pixel occupies one bite and that bite you'll recall allows us to set the red green blue and Alpha values and each value has a value from zero up to 255 maximum in decimal or FF in hexadecimal so what we do is we pack all those four values those four bytes into a single 32bit integer type now if we were to try to write this out in um decimal it would not be easy to understand what's going on but if we write it in hexadecimal as you'll see it's a lot easier so I'm going to write a heximal number here and um the the first so this is going to be o x0x so the first bite um we think of it as being on the left although um whether it really is or not in a computer's memory well the computer's memory it could be upside down or anything physically but um the first the first bite tier we're going to give a value of FF so FF is the maximum value we can store in a single bite in he a decimal and the next bite after that is also going to get a value of FF and so on for the remaining bytes so this value here o 0x followed by 8 FS that's setting all four bytes to the maximum FF and we're going to be looking at this a bit further in a future tutorial exactly how this works but um for now just think of each of these each every pair of FS is a value that we're setting either for the alpha value or the red or the green or the blue um let's let's have a have a look at this let's run this and see what it looks like so if I run it I don't know if you can see that and the screen capture but there's a white pixel just above my mouse here let's quit that so if if we look at the Pix pixel format that we set when we created the texture that we're writing this data to we think that the first pair of FS should be the red bite then the green bite the blue bite and the alpha bite which we're not going to use but um in practice it doesn't seem to quite work like that I don't know why not so you need to do an experiment here on your system and figure out which is the alpha which is the red which is the green and which is the blue we're going to do that in a minute but let's first set the whole screen to a color because it's going to be easier to to see than one individual pixel so I'm going to use a for Loop here I'm going to say for in I equals not while I is less than and I want to visit every pixel on the screen so it's going to be I less than screen width time screen height and i++ and and uh we're going to set each pixel initially let's set it to White so I'm going to say buffer I equal o x and 1 2 3 4 5 6 7 8 FS just like this so this this is going to do the same thing as a mem set um originally we're doing mem set um to black but before we had M set to White it's just going to do it more slowly because we're using a for Loop which is going to be slow than a m set but the advantage is that um well actually there's not a lot of Advantage here except that we can't we can't we can only memet all the bites to the same value but if we do this we can now pick out um we can now change individual bites we we can deal with each of the bites in the the the groups of four bytes where four byes represents one pixel separately by changing the fs in this 32bit 4 by number so let's just run that and check that we get a white screen so now it's white and let's try um setting the middle per of bytes to Zer so a pair of zeros here and here and the end bytes are going to be F so I I'm not sure which one's red at this point and which one's Alpha but um we should see red here and um I'm not even sure whether um FF means completely transparent for Alpha or zero means completely transparent we could check that um but I found it this doesn't work with this program anyway the alpha doesn't seem to do anything so it doesn't seem to matter let's just run this now we've got a red screen so if I make the first by zero and the next by FF let's take a look at what that is so that's now green and what about the next bite here let's run this and this is now blue so it seems as though what we've got is red green blue and the last FS are the alpha value here which is what we'd expect from this actually um so I'm not sure why I thought it wasn't in fact in this order because this this in fact seems to work perfectly we could we could get combinations of colors as well so if we've got blue and green I think that should be yellow shouldn't it so let's let's try that if we run this I guess blue and green isn't yellow okay we've got um some sort of bluish color there I've set too many FS that's why so we've got um two zeros we need two FS so that's the red the zero then we've got green is FF blue is FF and Alpha is FF yeah so I guess I was right the first time I don't know let's try um let's try red and blue see what that does so now we've got a sort of purple color which is what we' expect um how would get yellow I've forgotten we we'd have to look that up but or I'd have to but I guess yellow would be some combination of blue and green let's just experiment here it's quite interesting let's try um we'll leave red at 0 0 then for green let's try FF and for blue let's try 80 because 80 is uh equivalent to I guess 128 it's half of 256 roughly half of FF let's try that and now we've got a sort of greenish color I'll try one last thing let's try maximum um let's try maximum green and let's try half of green did I just have that and maximum blue anyway this is getting silly so I'll leave you to experiment around with this and I'm going to go and look at what yellow is in terms of the primary colors here but um make sure you can get that to work on your system and uh make sure you can set different colors and check which of these bytes remember any particular bite is represented by two digits and this hex decimal number here and you need eight digits total make sure that you can get um red green and blue values Set uh hopefully this will work the same on your system as it does on mine you could try setting Alpha here uh which whichever one alpha is whether it's this one or this one on your system it should be the same as mine but I'm not completely certain of that try setting it to zero or FF and see if that makes a different difference and keep doing that until youve figured out reliably how to get red green and blue in here because you going to need that for the rest of this tutorial so that's it for this time and until next time happy coding
