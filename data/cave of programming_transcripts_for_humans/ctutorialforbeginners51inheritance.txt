With timestamps:

00:16 - hello this is John from cave of
00:19 - programming calm in this tutorial we're
00:21 - going to take a look at something called
00:24 - inheritance in C++ this is something
00:28 - which can get quite complicated and most
00:30 - of the time you don't need the
00:32 - complicated stuff and we're probably not
00:35 - going to cover the complexity of it in
00:37 - this introductory course but it's
00:40 - important that we do look at it because
00:42 - it is an important part of C++ so let's
00:47 - let's create a class here I'm going to
00:49 - define a couple of classes and I'm going
00:52 - to create them both here just above the
00:55 - main function just so that we can see
00:56 - them both in one place so let's create a
01:00 - class called anymore and I'll give any
01:06 - more let's let's just give it maybe one
01:11 - method
01:11 - so we'll say public and let's say void
01:16 - speak and let's make speak do something
01:22 - so I'm going to include and I'm going to
01:26 - include yeah I've got ice cream included
01:27 - already actually because I'm going to
01:29 - use C out so let's say in here C out and
01:34 - just make a generic sort of unhappy
01:37 - animal noise there guru so in my main
01:43 - class here I can create an animal like
01:45 - this animal let's call it a and of
01:50 - course I can call speak like this so
01:54 - let's just let's just run this check
01:56 - this is working you never know so it
02:00 - says guru
02:02 - now what if you've got an existing class
02:05 - and you want a new class that's similar
02:08 - to the old one but just has some extra
02:11 - functionality or it just has a few
02:13 - things changed compared to the old class
02:15 - and that's what inheritance allows you
02:18 - to do so I'm going to create a class
02:21 - here called cut a notice cat is a type
02:26 - of animal and this is important with
02:28 - inheritance so we're going to take
02:30 - classes and we're going to create child
02:33 - classes from them or subclasses we can
02:36 - call them and the subclasses are a type
02:38 - of whatever the so called super class is
02:42 - so animal is going to be the superclass
02:44 - cut is going to be a subclass cat is
02:48 - going to be a type of animal so let's
02:50 - say here class cut and I'm going to say
02:53 - : after the class name public animal and
02:59 - just put the brackets in there so and
03:03 - for a moment I'm not going to give cat
03:04 - any functionality but because we put
03:07 - coal on public anymore after the class
03:10 - name here that means that a cat is is
03:14 - basically the same as animal here so
03:19 - let's have a look at that we can say a
03:21 - cat cut and cut speak
03:27 - and we can run this so cat also says
03:32 - guru now we can we can actually add new
03:38 - methods into cats that animal doesn't
03:41 - have so let's say for example a generic
03:45 - animal and it can have all the
03:47 - functionality that any kind of generic
03:50 - animal should have but we might want
03:52 - some specific things in cut by what can
03:56 - a cat do that a generic animal can't
03:58 - well let's say for example a cat can
04:01 - jump let's have a public and employee
04:04 - jump let's just say in here and see out
04:12 - cat jumping obviously we put some real
04:17 - functionality in here in in a kind of
04:21 - real world example so now we can call
04:24 - cat jump let's run this
04:32 - so cut it still has a speed method of
04:37 - animal but we've extended it and we've
04:40 - given it this extra method called jump
04:44 - so although this is quite a small
04:46 - tutorial I think I'm going to leave it
04:48 - there for the moment and we'll carry on
04:50 - looking at this in the next tutorial
04:53 - so to practice this of course just
04:55 - create a class and then create a
04:57 - subclass of that class so remember this
05:00 - is called a subclass and we say that it
05:03 - extends cut or it's inherited sorry the
05:08 - cat is a subclass and we say that it
05:10 - extends animal or we can say that it it
05:14 - is inherited from animal so cat is a
05:17 - subclass of animal and we say that
05:20 - animal is the superclass of cut so
05:23 - there's kind of a hierarchy in your in
05:26 - your mind where animal is at the top
05:28 - here and below it is cut we could
05:31 - actually extend the hierarchy further
05:33 - so remember cut is a type of animal and
05:36 - if we want to create a new subclass here
05:39 - let's just do that actually let's say
05:41 - class and now we need a type of cut well
05:44 - what's the type of car let's say tiger
05:46 - and and we can say a tiger is a subclass
05:51 - of cat we could give that its own method
05:55 - as well what can a tiger do that cut
05:58 - can't let's say and void and attack and
06:04 - tell Oh
06:07 - not many cuts from any house cuts anyway
06:10 - would attack a antelope but a tiger
06:14 - certainly would have a go so let's say
06:18 - attacking endler and so now we could say
06:25 - tiger tiger and tigers got all the
06:28 - methods that cat has like you can say
06:30 - tiger jump we could say tiger speak and
06:36 - we could say tiger dart attack and tell
06:41 - Loeb let's run this and make sure that
06:45 - it works so there we go we've got
06:49 - attacking from our tiger here but cat
06:52 - doesn't have doesn't have an attack
06:54 - antelope method we can't say cut dart
06:56 - attack until oh it's not gonna work
07:00 - and in fact cat doesn't know anything
07:05 - about Tiger here and animal doesn't know
07:08 - anything about cat but tiger it is a
07:12 - kind of cut and they was all about this
07:14 - class and cut it was all about animal so
07:19 - his is a superclass of cat cat is a
07:23 - superclass of tiger Tiger is a subclass
07:26 - of cat and tiger is a subclass of animal
07:29 - Tiger is also an indirect subclass of
07:33 - animal and because like Tiger can do
07:36 - everything that an animal can do here so
07:39 - we've got this like hierarchy going from
07:41 - animal cut down to Tiger yeah so I
07:46 - really will leave it there and and to
07:48 - practice this it's just creating three
07:51 - or more classes and make one class
07:53 - extend the other try to think of an
07:55 - example and a different example for
07:56 - yourself where that might make sense you
08:00 - could think about like for example a
08:02 - machine car is a type of machine and a
08:05 - Fiat is a type of car and so on
08:08 - something like that
08:09 - anything really you could do with plants
08:11 - different types of people or if you've
08:13 - got like a employee structure or
08:16 - whatever
08:18 - beginners often have this reaction to
08:20 - this as I did when I started with this
08:22 - like what what use is it inheritance and
08:26 - do you really use this in real programs
08:28 - and the answer is absolutely yes not
08:31 - every program in C++ will use
08:33 - inheritance I've seen very very big
08:35 - programs that didn't use inheritance at
08:37 - all but they weren't actually well
08:40 - written programs in any case in fact a
08:43 - lot of C++ syntax particularly by older
08:47 - programmers such as myself is unduly
08:49 - influenced by C which is which is what
08:53 - C++ was built on and C didn't have
08:56 - classes at all it just purely wherewith
08:59 - functions so have a go at that define
09:01 - your own little class hierarchy and we
09:03 - will return to this a bit more in the
09:05 - next tutorial so until next time happy
09:08 - coding
09:18 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to take a look at something called inheritance in C++ this is something which can get quite complicated and most of the time you don't need the complicated stuff and we're probably not going to cover the complexity of it in this introductory course but it's important that we do look at it because it is an important part of C++ so let's let's create a class here I'm going to define a couple of classes and I'm going to create them both here just above the main function just so that we can see them both in one place so let's create a class called anymore and I'll give any more let's let's just give it maybe one method so we'll say public and let's say void speak and let's make speak do something so I'm going to include and I'm going to include yeah I've got ice cream included already actually because I'm going to use C out so let's say in here C out and just make a generic sort of unhappy animal noise there guru so in my main class here I can create an animal like this animal let's call it a and of course I can call speak like this so let's just let's just run this check this is working you never know so it says guru now what if you've got an existing class and you want a new class that's similar to the old one but just has some extra functionality or it just has a few things changed compared to the old class and that's what inheritance allows you to do so I'm going to create a class here called cut a notice cat is a type of animal and this is important with inheritance so we're going to take classes and we're going to create child classes from them or subclasses we can call them and the subclasses are a type of whatever the so called super class is so animal is going to be the superclass cut is going to be a subclass cat is going to be a type of animal so let's say here class cut and I'm going to say after the class name public animal and just put the brackets in there so and for a moment I'm not going to give cat any functionality but because we put coal on public anymore after the class name here that means that a cat is is basically the same as animal here so let's have a look at that we can say a cat cut and cut speak and we can run this so cat also says guru now we can we can actually add new methods into cats that animal doesn't have so let's say for example a generic animal and it can have all the functionality that any kind of generic animal should have but we might want some specific things in cut by what can a cat do that a generic animal can't well let's say for example a cat can jump let's have a public and employee jump let's just say in here and see out cat jumping obviously we put some real functionality in here in in a kind of real world example so now we can call cat jump let's run this so cut it still has a speed method of animal but we've extended it and we've given it this extra method called jump so although this is quite a small tutorial I think I'm going to leave it there for the moment and we'll carry on looking at this in the next tutorial so to practice this of course just create a class and then create a subclass of that class so remember this is called a subclass and we say that it extends cut or it's inherited sorry the cat is a subclass and we say that it extends animal or we can say that it it is inherited from animal so cat is a subclass of animal and we say that animal is the superclass of cut so there's kind of a hierarchy in your in your mind where animal is at the top here and below it is cut we could actually extend the hierarchy further so remember cut is a type of animal and if we want to create a new subclass here let's just do that actually let's say class and now we need a type of cut well what's the type of car let's say tiger and and we can say a tiger is a subclass of cat we could give that its own method as well what can a tiger do that cut can't let's say and void and attack and tell Oh not many cuts from any house cuts anyway would attack a antelope but a tiger certainly would have a go so let's say attacking endler and so now we could say tiger tiger and tigers got all the methods that cat has like you can say tiger jump we could say tiger speak and we could say tiger dart attack and tell Loeb let's run this and make sure that it works so there we go we've got attacking from our tiger here but cat doesn't have doesn't have an attack antelope method we can't say cut dart attack until oh it's not gonna work and in fact cat doesn't know anything about Tiger here and animal doesn't know anything about cat but tiger it is a kind of cut and they was all about this class and cut it was all about animal so his is a superclass of cat cat is a superclass of tiger Tiger is a subclass of cat and tiger is a subclass of animal Tiger is also an indirect subclass of animal and because like Tiger can do everything that an animal can do here so we've got this like hierarchy going from animal cut down to Tiger yeah so I really will leave it there and and to practice this it's just creating three or more classes and make one class extend the other try to think of an example and a different example for yourself where that might make sense you could think about like for example a machine car is a type of machine and a Fiat is a type of car and so on something like that anything really you could do with plants different types of people or if you've got like a employee structure or whatever beginners often have this reaction to this as I did when I started with this like what what use is it inheritance and do you really use this in real programs and the answer is absolutely yes not every program in C++ will use inheritance I've seen very very big programs that didn't use inheritance at all but they weren't actually well written programs in any case in fact a lot of C++ syntax particularly by older programmers such as myself is unduly influenced by C which is which is what C++ was built on and C didn't have classes at all it just purely wherewith functions so have a go at that define your own little class hierarchy and we will return to this a bit more in the next tutorial so until next time happy coding you
