With timestamps:

00:00 - hello this is john from
00:02 - caveoffprogramming.com in this tutorial
00:04 - we're going to look at reading and
00:06 - writing
00:07 - multiple objects of serializing and
00:09 - deserializing multiple objects and i've
00:11 - got this program that i created in the
00:13 - last tutorial in fact we've got two
00:15 - programs one for reading objects and one
00:17 - for writing objects and i've sort of
00:19 - gutted them
00:20 - so that we're not reading or writing any
00:22 - objects here at the moment but i've got
00:24 - the rest of the framework left in there
00:26 - we've also got this person object from
00:28 - the last tutorial which just has an id
00:30 - and a name property which can be set via
00:33 - a constructor
00:35 - so uh
00:36 - i'm gonna let's imagine that we we've
00:38 - got an array of these personal objects
00:40 - let's say up here person
00:42 - array
00:45 - people equals
00:48 - um and i'll use uh curly parentheses
00:51 - to create a array
00:54 - to initialize an array of these person
00:56 - objects that say new person
00:58 - i'll give this one a name of sue and an
01:00 - id of one
01:02 - and let's have new person
01:06 - id 99 name mike
01:09 - and new
01:10 - person id seven name of bob
01:14 - so we've got three people in this array
01:17 - here
01:18 - and uh
01:20 - it might be surprising to know
01:22 - uh that an array in java is is actually
01:25 - just an object in a sense just an
01:27 - ordinary object
01:28 - and we can simply
01:30 - serialize it and deserialize it as we
01:32 - would any object and in fact the rays
01:34 - are serializable as long as the objects
01:37 - in it are serializable
01:39 - and in other words if they implement the
01:41 - serializable interface which is all you
01:43 - have to do to make an object
01:44 - serializable then you can
01:47 - read and write an array of it so to
01:49 - demonstrate that i can say here os dot
01:52 - write object this object out um actually
01:55 - it's the wrong
01:56 - file let's go to the
01:59 - read objects file
02:01 - right object sorry there we go
02:03 - so let's write this array let's say os
02:05 - dot write object people
02:10 - and in
02:12 - this read objects file let's say people
02:15 - array
02:18 - people
02:19 - actually that's person array so person
02:21 - array people
02:23 - equals and i'll cast
02:26 - to the right type here
02:28 - and i'll just say os dot read object
02:32 - like that
02:34 - so let's save that and
02:36 - run it so i'll run
02:39 - write objects right click and run run as
02:42 - java application
02:44 - and let's go to read objects so right
02:46 - click and run as java
02:48 - application and uh oh yeah it would help
02:51 - actually if i iterated through
02:53 - these and actually displayed them so
02:55 - let's say four
02:56 - person person in people
03:00 - and um
03:02 - sissow
03:05 - person
03:06 - i'm in budapest where it's 40 degrees
03:09 - and so my brain isn't perhaps fully
03:11 - working as well as one might hope but
03:13 - i'll right click this read objects now
03:15 - and go to run as java application and
03:17 - now we can see that we've successfully
03:19 - uh
03:20 - read that array back
03:24 - um you can also
03:27 - if you've seen arraylist before you
03:28 - might wonder if you can serialize and
03:30 - deserialize arraylists and the answer is
03:32 - you can do that in exactly the same way
03:35 - we haven't covered arraylist yet in this
03:36 - series of tutorials and that's because
03:38 - i've put
03:39 - stuff about java collections in a
03:42 - separate section of this tutorial or if
03:44 - you look on
03:46 - caverprogramming.com it's in like a set
03:48 - a different
03:49 - uh section for youtube
03:51 - but um in my java collections videos i
03:53 - talk about arraylists and they're
03:55 - they're basically like a resizable array
03:57 - so very very very useful i'd highly
03:59 - recommend that you check out my video on
04:02 - arraylist if you haven't done so already
04:05 - and if you don't know about them but
04:06 - let's let's create an arraylist here
04:08 - just to demonstrate this so what i'll do
04:11 - is i'll i'll create an arraylist
04:13 - of
04:15 - person objects
04:17 - and with arraylist it's a template class
04:19 - so you have to specify what type of
04:20 - object it's going to store in these
04:22 - angle brackets
04:24 - and let's call this
04:26 - people list
04:27 - equals
04:29 - new array list
04:31 - of
04:32 - person
04:34 - and uh instead of writing these all out
04:37 - again which i could do i'll just use the
04:39 - arrays dot as list method to turn that
04:43 - array
04:44 - while to initialize the array list with
04:46 - it actually
04:48 - and now um i'll leave this original code
04:50 - in writing of the original list so that
04:52 - you can refer to it
04:54 - but what we'll do is i'll now serialize
04:56 - the arraylist as well so let's say
04:58 - os.right object
05:00 - person
05:03 - people list
05:05 - so we're serializing now first the
05:07 - original array and then the arraylist
05:09 - version of it
05:10 - and in read objects after i've read the
05:12 - array here
05:14 - i can now say array
05:17 - arraylist
05:18 - of
05:22 - person let's call this people list again
05:25 - equals and i'll put the typecast in
05:27 - arraylist
05:30 - arraylist of
05:32 - person
05:34 - os.read object
05:37 - and now we can also iterate through
05:40 - the array list in pretty much the same
05:42 - way
05:44 - this is now people list but the rest of
05:47 - the code is the same
05:49 - and if i run this now so let's run right
05:52 - object right click and run as java
05:54 - application so we've written the objects
05:57 - and now let's go to read objects right
05:59 - click and run as java application
06:02 - and now you can see that we've read
06:03 - these all over again so we've written
06:05 - and read them as an arraylist the only
06:08 - annoying thing here is this warning
06:11 - which says
06:12 - type safety uncheck cast from object to
06:14 - arraylist person
06:17 - and i think this has to do with type
06:19 - erasure because
06:20 - with a normal object java can determine
06:24 - what kind of type of object it is and it
06:26 - can figure out whether for example this
06:29 - is a safe cast to do or not when we read
06:33 - when we use read object here
06:35 - our our array is returned as an object
06:38 - but that object contains within it as i
06:40 - understand it the type information that
06:43 - says yes it is actually to be precise an
06:46 - array of person objects
06:48 - that is not the case with arraylists
06:50 - because with parametrized classes in
06:52 - general
06:53 - classes that take these types in these
06:56 - diamond brackets
06:58 - they suffer from type erasure which
07:01 - means that when you compile your java
07:03 - program the information about this type
07:05 - here is actually lost that's called type
07:08 - eurasia so this is like a grammatical
07:11 - thing that helps stop you trying to put
07:13 - the wrong
07:15 - object wrong type of object in your
07:17 - array lists but that information is no
07:20 - longer stored
07:21 - when the program is compiled and so when
07:24 - you serialize an array list
07:27 - and then deserialize it when it's
07:28 - deserialized
07:30 - the
07:31 - type information is no longer there in
07:33 - full because indeed it was no longer
07:35 - there even when the program ran
07:37 - the type this type is erased
07:41 - and that's why we get this warning and
07:44 - probably the easiest thing to do to be
07:45 - honest is just suppress it so you can
07:47 - just
07:48 - put a at sign
07:49 - and suppress warnings capital s suppress
07:52 - warnings annotation
07:54 - and in round brackets and within double
07:56 - quotes we can say unchecked
07:59 - let's save that
08:01 - and uh let's click this error
08:04 - and
08:05 - whoops i've got a spelling state there
08:07 - there we go suppress warnings
08:10 - and that suppresses the warning but it
08:11 - looks a bit ugly and it feels wrong to
08:13 - be suppressing warnings so i don't
08:14 - really like it and
08:16 - short of really going to quite um
08:20 - long lengths there's no easy way around
08:23 - that
08:24 - although certainly you can find ways
08:25 - around it if you want to serialize and
08:27 - deserialize an arraylist
08:29 - one
08:30 - last thing that i want to show you is
08:32 - you can certainly serialize and
08:34 - deserialize these people objects
08:36 - personal objects one at a time or same
08:39 - for any object and that the easiest
08:41 - thing to do is
08:43 - to write in advance the number of the
08:45 - number of objects that you're going to
08:47 - be dealing with
08:48 - so
08:49 - we could say here let's say we want to
08:51 - serialize
08:52 - this array object by object one one
08:55 - object at a time or maybe we could take
08:57 - this people list uh it doesn't really
09:00 - matter
09:01 - let's say here
09:03 - os dot write int
09:06 - and get the size of
09:08 - this arraylist so for an arraylist to
09:11 - get a number of objects in it we say dot
09:13 - size
09:14 - with round brackets because it's a
09:16 - method and for an
09:18 - array we'd use dot length with no round
09:20 - brackets because it's a property of the
09:22 - array object
09:24 - so here we're writing to the file the
09:26 - number of objects that we're about to
09:28 - write
09:29 - and i can now say for
09:32 - person
09:33 - we'll use like an enhanced for loop for
09:35 - each loop
09:36 - person person in
09:39 - people list
09:43 - and we'll say os.right object
09:47 - person
09:51 - and then when we read them back all we
09:53 - have to do is
09:55 - we can say ins num
09:57 - equals
09:59 - object
10:01 - input stream dot read int
10:05 - so all these all this combine reading
10:08 - and writing different objects is fine as
10:10 - long as we remember to read back the
10:12 - exact same number of objects in the
10:13 - exact same order that we originally
10:15 - wrote them in
10:17 - and now let's say
10:19 - for ins i equals naught
10:22 - i
10:22 - less than
10:24 - num and
10:26 - i
10:27 - plus plus
10:29 - we will read those objects one by one so
10:32 - person
10:34 - person person equals os dot read object
10:39 - and we just need to cast that to a
10:42 - person
10:44 - save it and let's do sis out on it again
10:46 - so
10:47 - now next time we run it we should have
10:49 - nine
10:50 - person objects there so i'll run right
10:52 - objects right click and run as
10:55 - java application and read objects right
10:58 - click and run as java application
11:01 - and hey presto we've now
11:03 - successfully read and written them one
11:05 - by one
11:06 - and the key to that the the easiest
11:08 - thing to do rather than trying to figure
11:10 - out when you've run run out of objects
11:12 - to read it's easier if you just write
11:15 - the number that you're going to
11:19 - write and that you therefore number need
11:21 - to read
11:23 - in advance so then you can read that
11:25 - number back
11:27 - and read the right number of objects
11:29 - and that's it for this tutorial one last
11:31 - little thing actually that i want to
11:32 - show you uh so that's not quite it is
11:35 - someone um
11:37 - left a comment on on my last video that
11:41 - shouldn't this os stop close be in the
11:43 - finally block and shouldn't we check to
11:45 - see if it's null well the answer is yeah
11:47 - i sort of agree really it probably
11:49 - should be
11:50 - um the reason i didn't put it in one is
11:52 - because
11:53 - uh at this point if if
11:57 - this this could easily fail because we
11:59 - might not be able to read the
12:01 - appropriate file or in this case
12:03 - here we might not be able to write to
12:05 - the appropriate file but once we've got
12:08 - the file output stream it's unlikely the
12:10 - object output stream will fail
12:12 - i think so this is probably not going to
12:14 - be null
12:15 - and it's probably not going to throw an
12:16 - exception but nevertheless it is
12:18 - possible that it could do
12:19 - so
12:20 - really this isn't great programming and
12:23 - also i don't think we really need to
12:25 - close it i put this in just to get rid
12:29 - of the
12:30 - warning that
12:31 - eclipse gave me about os not being
12:33 - closed but in fact since we are closing
12:35 - the underlying file because we're using
12:38 - this try with resources which will
12:39 - automatically close
12:41 - this object i don't think we need to
12:44 - necessarily close object output stream
12:47 - but again there might be some reason for
12:49 - it that i'm not aware of to do with
12:50 - memory management or something and so
12:54 - if you want uh kind of better practice
12:56 - here
12:57 - either you could check that this is not
12:59 - null and put it in a finally block as
13:00 - well
13:02 - down here maybe before closing it
13:05 - but um
13:06 - probably since i'm using this try with
13:08 - resources it's better if i just cut all
13:10 - this stuff here
13:12 - and put a semicolon
13:14 - here
13:15 - and paste this in
13:17 - and also open the object output stream
13:20 - within this try with resources block
13:23 - let's format this
13:25 - that's formatted as it gets apparently
13:29 - so you can have multiple
13:31 - autoclosable
13:33 - objects within your try
13:36 - and in java 7 and onwards and this will
13:39 - automatically call close on this so now
13:42 - we can get rid of this
13:44 - and our try with resources will handle
13:46 - it for us automatically
13:49 - it's uh it's a hellishly long line and i
13:51 - don't really like putting lots of things
13:52 - in round brackets but i must admit
13:55 - probably technically it's better to do
13:57 - that than just trying to close something
13:59 - um
14:00 - down here although to be perfectly
14:02 - honest if i was writing production code
14:04 - i'd be very tempted just to put os stock
14:07 - closed down there because i don't think
14:09 - it would be a problem but i admit it
14:11 - could be okay so that's it for this
14:12 - tutorial and um in the next tutorial
14:15 - we're going to look at the transient
14:17 - keyword and then after that we're going
14:19 - to move on from serialization
14:21 - and uh probably look at annotations
14:24 - among other things and also
14:26 - passing by value versus reference which
14:28 - doesn't quite exist in java but there's
14:30 - some stuff to be said about that
14:32 - so join me again for the next tutorial
14:34 - and you can always find the latest stuff
14:35 - on www.caveofprogramming.com
14:39 - and until next time happy coding

Cleaned transcript:

hello this is john from caveoffprogramming.com in this tutorial we're going to look at reading and writing multiple objects of serializing and deserializing multiple objects and i've got this program that i created in the last tutorial in fact we've got two programs one for reading objects and one for writing objects and i've sort of gutted them so that we're not reading or writing any objects here at the moment but i've got the rest of the framework left in there we've also got this person object from the last tutorial which just has an id and a name property which can be set via a constructor so uh i'm gonna let's imagine that we we've got an array of these personal objects let's say up here person array people equals um and i'll use uh curly parentheses to create a array to initialize an array of these person objects that say new person i'll give this one a name of sue and an id of one and let's have new person id 99 name mike and new person id seven name of bob so we've got three people in this array here and uh it might be surprising to know uh that an array in java is is actually just an object in a sense just an ordinary object and we can simply serialize it and deserialize it as we would any object and in fact the rays are serializable as long as the objects in it are serializable and in other words if they implement the serializable interface which is all you have to do to make an object serializable then you can read and write an array of it so to demonstrate that i can say here os dot write object this object out um actually it's the wrong file let's go to the read objects file right object sorry there we go so let's write this array let's say os dot write object people and in this read objects file let's say people array people actually that's person array so person array people equals and i'll cast to the right type here and i'll just say os dot read object like that so let's save that and run it so i'll run write objects right click and run run as java application and let's go to read objects so right click and run as java application and uh oh yeah it would help actually if i iterated through these and actually displayed them so let's say four person person in people and um sissow person i'm in budapest where it's 40 degrees and so my brain isn't perhaps fully working as well as one might hope but i'll right click this read objects now and go to run as java application and now we can see that we've successfully uh read that array back um you can also if you've seen arraylist before you might wonder if you can serialize and deserialize arraylists and the answer is you can do that in exactly the same way we haven't covered arraylist yet in this series of tutorials and that's because i've put stuff about java collections in a separate section of this tutorial or if you look on caverprogramming.com it's in like a set a different uh section for youtube but um in my java collections videos i talk about arraylists and they're they're basically like a resizable array so very very very useful i'd highly recommend that you check out my video on arraylist if you haven't done so already and if you don't know about them but let's let's create an arraylist here just to demonstrate this so what i'll do is i'll i'll create an arraylist of person objects and with arraylist it's a template class so you have to specify what type of object it's going to store in these angle brackets and let's call this people list equals new array list of person and uh instead of writing these all out again which i could do i'll just use the arrays dot as list method to turn that array while to initialize the array list with it actually and now um i'll leave this original code in writing of the original list so that you can refer to it but what we'll do is i'll now serialize the arraylist as well so let's say os.right object person people list so we're serializing now first the original array and then the arraylist version of it and in read objects after i've read the array here i can now say array arraylist of person let's call this people list again equals and i'll put the typecast in arraylist arraylist of person os.read object and now we can also iterate through the array list in pretty much the same way this is now people list but the rest of the code is the same and if i run this now so let's run right object right click and run as java application so we've written the objects and now let's go to read objects right click and run as java application and now you can see that we've read these all over again so we've written and read them as an arraylist the only annoying thing here is this warning which says type safety uncheck cast from object to arraylist person and i think this has to do with type erasure because with a normal object java can determine what kind of type of object it is and it can figure out whether for example this is a safe cast to do or not when we read when we use read object here our our array is returned as an object but that object contains within it as i understand it the type information that says yes it is actually to be precise an array of person objects that is not the case with arraylists because with parametrized classes in general classes that take these types in these diamond brackets they suffer from type erasure which means that when you compile your java program the information about this type here is actually lost that's called type eurasia so this is like a grammatical thing that helps stop you trying to put the wrong object wrong type of object in your array lists but that information is no longer stored when the program is compiled and so when you serialize an array list and then deserialize it when it's deserialized the type information is no longer there in full because indeed it was no longer there even when the program ran the type this type is erased and that's why we get this warning and probably the easiest thing to do to be honest is just suppress it so you can just put a at sign and suppress warnings capital s suppress warnings annotation and in round brackets and within double quotes we can say unchecked let's save that and uh let's click this error and whoops i've got a spelling state there there we go suppress warnings and that suppresses the warning but it looks a bit ugly and it feels wrong to be suppressing warnings so i don't really like it and short of really going to quite um long lengths there's no easy way around that although certainly you can find ways around it if you want to serialize and deserialize an arraylist one last thing that i want to show you is you can certainly serialize and deserialize these people objects personal objects one at a time or same for any object and that the easiest thing to do is to write in advance the number of the number of objects that you're going to be dealing with so we could say here let's say we want to serialize this array object by object one one object at a time or maybe we could take this people list uh it doesn't really matter let's say here os dot write int and get the size of this arraylist so for an arraylist to get a number of objects in it we say dot size with round brackets because it's a method and for an array we'd use dot length with no round brackets because it's a property of the array object so here we're writing to the file the number of objects that we're about to write and i can now say for person we'll use like an enhanced for loop for each loop person person in people list and we'll say os.right object person and then when we read them back all we have to do is we can say ins num equals object input stream dot read int so all these all this combine reading and writing different objects is fine as long as we remember to read back the exact same number of objects in the exact same order that we originally wrote them in and now let's say for ins i equals naught i less than num and i plus plus we will read those objects one by one so person person person equals os dot read object and we just need to cast that to a person save it and let's do sis out on it again so now next time we run it we should have nine person objects there so i'll run right objects right click and run as java application and read objects right click and run as java application and hey presto we've now successfully read and written them one by one and the key to that the the easiest thing to do rather than trying to figure out when you've run run out of objects to read it's easier if you just write the number that you're going to write and that you therefore number need to read in advance so then you can read that number back and read the right number of objects and that's it for this tutorial one last little thing actually that i want to show you uh so that's not quite it is someone um left a comment on on my last video that shouldn't this os stop close be in the finally block and shouldn't we check to see if it's null well the answer is yeah i sort of agree really it probably should be um the reason i didn't put it in one is because uh at this point if if this this could easily fail because we might not be able to read the appropriate file or in this case here we might not be able to write to the appropriate file but once we've got the file output stream it's unlikely the object output stream will fail i think so this is probably not going to be null and it's probably not going to throw an exception but nevertheless it is possible that it could do so really this isn't great programming and also i don't think we really need to close it i put this in just to get rid of the warning that eclipse gave me about os not being closed but in fact since we are closing the underlying file because we're using this try with resources which will automatically close this object i don't think we need to necessarily close object output stream but again there might be some reason for it that i'm not aware of to do with memory management or something and so if you want uh kind of better practice here either you could check that this is not null and put it in a finally block as well down here maybe before closing it but um probably since i'm using this try with resources it's better if i just cut all this stuff here and put a semicolon here and paste this in and also open the object output stream within this try with resources block let's format this that's formatted as it gets apparently so you can have multiple autoclosable objects within your try and in java 7 and onwards and this will automatically call close on this so now we can get rid of this and our try with resources will handle it for us automatically it's uh it's a hellishly long line and i don't really like putting lots of things in round brackets but i must admit probably technically it's better to do that than just trying to close something um down here although to be perfectly honest if i was writing production code i'd be very tempted just to put os stock closed down there because i don't think it would be a problem but i admit it could be okay so that's it for this tutorial and um in the next tutorial we're going to look at the transient keyword and then after that we're going to move on from serialization and uh probably look at annotations among other things and also passing by value versus reference which doesn't quite exist in java but there's some stuff to be said about that so join me again for the next tutorial and you can always find the latest stuff on www.caveofprogramming.com and until next time happy coding
