With timestamps:

00:05 - [Music]
00:17 - hello this is John from K programming.
00:20 - comom and welcome to tutorial number 14
00:23 - in the series of beginners Java
00:25 - tutorials from cave programming and in
00:28 - the last tutorial we looked at at
00:30 - classes and objects and in this tutorial
00:32 - we're going to look at sub routines in
00:36 - Java so here I've got some code I
00:38 - created in the last tutorial and this is
00:41 - just a little person class and this
00:44 - person just has a name and an age so it
00:46 - has some data associated with it and
00:50 - later on I'm creating a couple of
00:51 - objects a couple of people in other
00:53 - words using this class and giving them
00:56 - names and ages and then I'm printing out
00:59 - some inform information down
01:01 - here but of course we all know that um
01:05 - uh people have associated with them not
01:07 - only data like their name and their age
01:10 - and their mood and height and so on
01:13 - but also um we have behavior that we can
01:19 - we have things that we can do and
01:21 - behavior in Java is modeled using sub
01:24 - routines and a sub routine that's part
01:26 - of a class is called a method which is
01:29 - um
01:30 - the terminology is a little bit strange
01:32 - but there you go so let's give this um
01:36 - person class some behavior let's enable
01:38 - them to do something so um I want to
01:41 - make this um person be able to kind of
01:45 - say what their name is um and how old
01:49 - they
01:50 - are and um I'm going to create just a
01:52 - little sub routine here that's going to
01:54 - be part of the class
01:56 - so um I'm going to first I'll show you
01:59 - what to type and what I recommend is
02:01 - that you just type this out without
02:02 - worrying too much about what it means
02:04 - and once you get um into the habit of
02:07 - creating just basic methods then you can
02:10 - you'll start to understand um the
02:12 - meaning behind
02:13 - them so I'm going to type void here and
02:18 - then I'm going to type the name that I
02:20 - want the method to have so I can just
02:22 - make that up and I'm going to call that
02:24 - speak and methods um should always start
02:28 - with a um lowercase letter and you just
02:32 - capitalize the first letter of every
02:34 - word in the sub
02:36 - routine so I've only got one word here
02:38 - so it'll have a lowercase letter um and
02:41 - the only exception to that is what we
02:42 - call a Constructor which we haven't
02:44 - looked at yet but that has to have an
02:46 - uppercase letter because it has to have
02:48 - the same name as the class but we'll
02:49 - look at that later so we have void and
02:52 - the method name and then you have a
02:55 - couple of round brackets like this and
02:58 - then finally we have a open Kelly
03:02 - parenthesis and then a closing Celly
03:04 - parenthesis and when you create a
03:07 - method I would strongly recommend that
03:10 - you type out all this stuff first so
03:13 - don't open the parenthesis and then
03:15 - start typing stuff in here just put all
03:18 - the parentheses you need in first and
03:21 - then you won't forget them at the
03:23 - end and um in this method we can have
03:26 - some lines of code that are going to
03:28 - actually do it's going to actually do
03:31 - stuff um and uh whenever you have
03:34 - parentheses like this a pair of
03:36 - parentheses in Java you should always
03:38 - indent by one tab the stuff that's
03:40 - between the parentheses and if all this
03:43 - stuff about kind of parentheses and
03:45 - formatting seems a bit picky to you
03:47 - believe me it's it's not picky and it
03:50 - will massively help you um to improve
03:53 - your Java if you bear in mind what I'm
03:55 - saying here and if you um do screw up
03:58 - your formatting somehow like if I type
04:01 - um I could type sis out here for example
04:04 - hello like this if you this is screwed
04:07 - up because there's no indentation here
04:09 - and a quick way to fix that in Eclipse
04:11 - is hold down control shift and press f
04:14 - for format and it will automatically
04:16 - format your kind of
04:19 - method so here I've got my my basic
04:22 - method um kind of framework and then
04:24 - here I'm just going to type some code
04:26 - and as you've just seen I could type
04:28 - this out
04:30 - hello um and I can have as many lines of
04:33 - codes in there as I want and if I run
04:35 - that um well nothing will happen now
04:38 - because I've just got um a class and
04:40 - I've added a method but I haven't called
04:42 - it
04:43 - anywhere because to run this Behavior
04:45 - you have to actually call a method or in
04:48 - other words you have to type some code
04:49 - that makes this run so down here I've
04:52 - got two person
04:54 - objects and um I've got this one that
04:56 - I've given the name Joe and this one
04:59 - Sarah here and I'm let's make now that
05:02 - I've added this method to the class both
05:06 - of these person objects now have that
05:08 - method and they they can run
05:12 - it so um let's make this person one
05:16 - object run this method I can type person
05:19 - one and then you use a dot just as with
05:22 - variables here and then the name of the
05:25 - method and the important difference is
05:27 - that um when you're dealing with a
05:29 - variable
05:30 - that's part of a a class or an object
05:33 - you just have Dot and the variable name
05:35 - but with a method you have dot the
05:38 - method name and then you always need
05:39 - these round brackets like this and then
05:41 - of course the
05:43 - semicolon
05:44 - so if I run this now I'm going to get um
05:50 - hello output here um and this is this is
05:54 - coming from my um personal one object
05:56 - and I could do the same again for this
05:59 - person two object I could say person
06:01 - two.
06:03 - spech and um and this this syntax just
06:07 - runs whatever code you put in this
06:09 - method so in this case this is running
06:12 - this code here because that's what I put
06:14 - in the method so I run that and I get
06:16 - two hellos because I'm calling hello
06:19 - twice and you can call it of course as
06:21 - many times as you like on the same
06:22 - object it doesn't matter like I could
06:24 - put person one. spe again here like
06:28 - this
06:29 - um but it's more interesting um to
06:33 - actually make it do something with this
06:36 - data for example so I could say now to
06:40 - access this data here I don't I don't
06:42 - have to do anything special I can just
06:44 - use these names directly in the methods
06:47 - of my class and um and the methods have
06:51 - access to this inst what we call
06:53 - instance data here or the instance
06:55 - variables so here I could say um my name
07:01 - is and I'll say
07:04 - plus um name and then I'll say I'll have
07:09 - a um an and here I'll just say and I I
07:14 - am Plus Age and space years
07:18 - old oh and I I missed out a plus there
07:22 - so what I'm doing here is um I'm just
07:25 - concatenating this data into a long
07:27 - string so I've got this this might look
07:30 - a bit confusing but basically it's just
07:32 - here's one bit of data here that I've
07:34 - typed in literally and after a plus
07:36 - here's another bit of data this is plus
07:39 - another bit of data a string that I've
07:41 - typed in another bit of data after a
07:43 - plus and then a plus and a final bit of
07:46 - data so this is just building up one
07:48 - long string here and if I run this so um
07:52 - my my
07:53 - objects both have their own particular
07:57 - copies of these variables so the first
07:59 - one here is outputting the information
08:01 - that I set there and saying my name is
08:04 - Joe blogs I'm 37 years old and the
08:07 - second one here I set the name to Sarah
08:08 - Smith and the Aged to 20 so now I'm
08:10 - getting that output down
08:13 - there um and you can you can put um as
08:16 - as many lines of code as you like in
08:18 - here for example I could have a um for
08:21 - Loop like I could say for in IAL not I
08:25 - Less Than 3 I
08:27 - ++ and I could put this in Loop
08:30 - and um I could just repeat that three
08:32 - times like that so um methods you can
08:36 - put any code you like in there and they
08:38 - can it can refer to your instance data
08:42 - here um if if you're new to uh methods
08:46 - which you may well be if you're watching
08:48 - this tutorial um it can be really easy
08:52 - to confuse them with um data and as I
08:55 - say the the methods always have these
08:57 - round brackets and the instance
08:58 - variables not so I i' really strongly
09:01 - recommend just adding um some methods to
09:04 - your classes and trying them out for
09:06 - yourself and to finish off this tutorial
09:08 - let's just add another one here like um
09:11 - I could
09:13 - say um what should I what should I call
09:15 - it um I don't know say hello so I'll
09:18 - capitalize the first u letter of each
09:21 - word after the first one the first one
09:23 - has a lowercase letter and then because
09:25 - this is a new word I give it a capital H
09:28 - round bracket like that open the curly
09:30 - bracket eclipse is actually putting the
09:32 - closing curly bracket for me and I could
09:35 - say I know sis
09:38 - out um hello there and again if I run
09:42 - that there's not going to be any change
09:44 - because I'm not invoking this method
09:46 - here I'm not calling it and to invoke it
09:49 - I'd have to have an actual object like
09:52 - this one for example and
09:54 - say um wh got my fingers on the wrong
09:58 - keys there first someone dot say hello
10:01 - like that so I run that and um I've got
10:05 - a hello there and I could have it down
10:07 - here as
10:09 - well so um pretty simple um but it will
10:13 - be confusing if it's the first time
10:14 - you've seen it and actually it took me
10:17 - quite a long time um when I first
10:19 - started programming to get my head
10:20 - around this idea that you could have
10:22 - these Define these methods and then call
10:24 - them somewhere else so I definitely
10:27 - recommend playing around with it and
10:28 - then in the next tutorial we're going to
10:30 - look at um getting data into um into
10:36 - methods and getting data out of it so
10:39 - parameters and return types in other
10:40 - words but I think that's enough for this
10:42 - time have fun with that and join me
10:45 - again for the next tutorial and until
10:47 - then Happy
10:54 - [Music]
10:58 - coding

Cleaned transcript:

hello this is John from K programming. comom and welcome to tutorial number 14 in the series of beginners Java tutorials from cave programming and in the last tutorial we looked at at classes and objects and in this tutorial we're going to look at sub routines in Java so here I've got some code I created in the last tutorial and this is just a little person class and this person just has a name and an age so it has some data associated with it and later on I'm creating a couple of objects a couple of people in other words using this class and giving them names and ages and then I'm printing out some inform information down here but of course we all know that um uh people have associated with them not only data like their name and their age and their mood and height and so on but also um we have behavior that we can we have things that we can do and behavior in Java is modeled using sub routines and a sub routine that's part of a class is called a method which is um the terminology is a little bit strange but there you go so let's give this um person class some behavior let's enable them to do something so um I want to make this um person be able to kind of say what their name is um and how old they are and um I'm going to create just a little sub routine here that's going to be part of the class so um I'm going to first I'll show you what to type and what I recommend is that you just type this out without worrying too much about what it means and once you get um into the habit of creating just basic methods then you can you'll start to understand um the meaning behind them so I'm going to type void here and then I'm going to type the name that I want the method to have so I can just make that up and I'm going to call that speak and methods um should always start with a um lowercase letter and you just capitalize the first letter of every word in the sub routine so I've only got one word here so it'll have a lowercase letter um and the only exception to that is what we call a Constructor which we haven't looked at yet but that has to have an uppercase letter because it has to have the same name as the class but we'll look at that later so we have void and the method name and then you have a couple of round brackets like this and then finally we have a open Kelly parenthesis and then a closing Celly parenthesis and when you create a method I would strongly recommend that you type out all this stuff first so don't open the parenthesis and then start typing stuff in here just put all the parentheses you need in first and then you won't forget them at the end and um in this method we can have some lines of code that are going to actually do it's going to actually do stuff um and uh whenever you have parentheses like this a pair of parentheses in Java you should always indent by one tab the stuff that's between the parentheses and if all this stuff about kind of parentheses and formatting seems a bit picky to you believe me it's it's not picky and it will massively help you um to improve your Java if you bear in mind what I'm saying here and if you um do screw up your formatting somehow like if I type um I could type sis out here for example hello like this if you this is screwed up because there's no indentation here and a quick way to fix that in Eclipse is hold down control shift and press f for format and it will automatically format your kind of method so here I've got my my basic method um kind of framework and then here I'm just going to type some code and as you've just seen I could type this out hello um and I can have as many lines of codes in there as I want and if I run that um well nothing will happen now because I've just got um a class and I've added a method but I haven't called it anywhere because to run this Behavior you have to actually call a method or in other words you have to type some code that makes this run so down here I've got two person objects and um I've got this one that I've given the name Joe and this one Sarah here and I'm let's make now that I've added this method to the class both of these person objects now have that method and they they can run it so um let's make this person one object run this method I can type person one and then you use a dot just as with variables here and then the name of the method and the important difference is that um when you're dealing with a variable that's part of a a class or an object you just have Dot and the variable name but with a method you have dot the method name and then you always need these round brackets like this and then of course the semicolon so if I run this now I'm going to get um hello output here um and this is this is coming from my um personal one object and I could do the same again for this person two object I could say person two. spech and um and this this syntax just runs whatever code you put in this method so in this case this is running this code here because that's what I put in the method so I run that and I get two hellos because I'm calling hello twice and you can call it of course as many times as you like on the same object it doesn't matter like I could put person one. spe again here like this um but it's more interesting um to actually make it do something with this data for example so I could say now to access this data here I don't I don't have to do anything special I can just use these names directly in the methods of my class and um and the methods have access to this inst what we call instance data here or the instance variables so here I could say um my name is and I'll say plus um name and then I'll say I'll have a um an and here I'll just say and I I am Plus Age and space years old oh and I I missed out a plus there so what I'm doing here is um I'm just concatenating this data into a long string so I've got this this might look a bit confusing but basically it's just here's one bit of data here that I've typed in literally and after a plus here's another bit of data this is plus another bit of data a string that I've typed in another bit of data after a plus and then a plus and a final bit of data so this is just building up one long string here and if I run this so um my my objects both have their own particular copies of these variables so the first one here is outputting the information that I set there and saying my name is Joe blogs I'm 37 years old and the second one here I set the name to Sarah Smith and the Aged to 20 so now I'm getting that output down there um and you can you can put um as as many lines of code as you like in here for example I could have a um for Loop like I could say for in IAL not I Less Than 3 I ++ and I could put this in Loop and um I could just repeat that three times like that so um methods you can put any code you like in there and they can it can refer to your instance data here um if if you're new to uh methods which you may well be if you're watching this tutorial um it can be really easy to confuse them with um data and as I say the the methods always have these round brackets and the instance variables not so I i' really strongly recommend just adding um some methods to your classes and trying them out for yourself and to finish off this tutorial let's just add another one here like um I could say um what should I what should I call it um I don't know say hello so I'll capitalize the first u letter of each word after the first one the first one has a lowercase letter and then because this is a new word I give it a capital H round bracket like that open the curly bracket eclipse is actually putting the closing curly bracket for me and I could say I know sis out um hello there and again if I run that there's not going to be any change because I'm not invoking this method here I'm not calling it and to invoke it I'd have to have an actual object like this one for example and say um wh got my fingers on the wrong keys there first someone dot say hello like that so I run that and um I've got a hello there and I could have it down here as well so um pretty simple um but it will be confusing if it's the first time you've seen it and actually it took me quite a long time um when I first started programming to get my head around this idea that you could have these Define these methods and then call them somewhere else so I definitely recommend playing around with it and then in the next tutorial we're going to look at um getting data into um into methods and getting data out of it so parameters and return types in other words but I think that's enough for this time have fun with that and join me again for the next tutorial and until then Happy coding
