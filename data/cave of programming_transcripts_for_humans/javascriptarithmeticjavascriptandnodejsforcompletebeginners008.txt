With timestamps:

00:00 - hello in this video we're going to take
00:02 - a look at arithmetic in JavaScript and
00:05 - node.js if you if you've done some
00:10 - programming before there are probably no
00:12 - surprises here except that Java C C++
00:15 - and some others have this concepts of
00:18 - integer division were by dividing an
00:21 - integer by an integer always produces an
00:23 - integer or whole number and there isn't
00:26 - such thing in JavaScript so division
00:28 - works as you might expect if you never
00:30 - heard of that but anyway and putting
00:32 - that aside so addition works like it
00:37 - expect in JavaScript
00:38 - let's do console dot log 5 + 4 zoom in a
00:45 - bit
00:46 - maybe well let's run this so node
00:52 - arithmetic I I call this 0 108 oh let's
00:59 - run this 9 is that right yeah
01:03 - [Music]
01:06 - subtraction is exactly like you'd expect
01:10 - as well 5 and we've got multiplication
01:21 - so let's say 3 times 4 so we use the
01:26 - asterisk symbol in JavaScript for
01:28 - multiplication as we do in many other
01:30 - languages and there's also division
01:34 - let's do maybe 7 divided by 2 so this is
01:40 - all pretty much the same as other
01:41 - programming languages let's just run it
01:44 - 7 divided by 2 3.5 3 times 4 is 12
01:48 - we've gotten a mod operator as well so
01:53 - mod operator basically gives you the
01:56 - remainder from a division so if I change
02:00 - this to mod it's a % let's just make a
02:04 - comment mod operator so 7 mod two whelps
02:11 - if you divide 7 by
02:13 - - but then work out a remainder so
02:19 - that's obviously one let's run out one
02:24 - and the mod operator actually in
02:26 - JavaScript will will also work with at
02:30 - least with no no js' it will also work
02:33 - with values that aren't integers that
02:36 - aren't whole numbers so if I write like
02:39 - I don't know twelve point three divided
02:43 - by three let's say divided by five that
02:51 - gives us two point three so sometimes it
02:55 - can it can be a bit confusing because
02:57 - like numbers that are like
03:01 - floating-point numbers can't be stored
03:04 - in a completely exact way not only due
03:09 - to the nature of computing but to the
03:11 - nature of reality if you've got like a
03:14 - number with an infinite number of
03:16 - decimal values after the decimal point
03:18 - an infinite number of significant digits
03:21 - you can't store it exactly and so
03:23 - sometimes like if you're expecting 2.3
03:25 - you might get two point two nine nine
03:28 - nine nine nine and so on and you might
03:31 - wonder what's and but it's just kind of
03:33 - just the problem of being able to
03:35 - represent floating point numbers exactly
03:38 - just can't be done but here you can see
03:40 - that if you divide 12 by 12 point three
03:42 - by five you can fit two fives into that
03:44 - and you've got 2.3 leftover which is
03:47 - what the mod operators giving us here
03:48 - usually you use the mod operator with
03:51 - integers in programming and it can
03:54 - occasionally be very useful
03:56 - there's also it's probably worth
03:58 - mentioning there's also a couple of what
04:03 - we call unary operators that apply to
04:06 - apply to variables here they're intended
04:10 - for use with integer variables or whole
04:13 - numbers that is variables that refer to
04:17 - a whole number value so plus or all of
04:22 - these plus minus times divide and mod we
04:25 - call them binary operator
04:27 - as they operate on something they
04:29 - operate on two numbers binary operator
04:33 - meaning like - it's an operator that
04:36 - operates on two things
04:37 - so each of these basically takes in two
04:42 - values and then returns a third value if
04:46 - you think about it you know like so we
04:49 - take for example five plus four we've
04:51 - got two values at five and four and that
04:53 - produces we can say or returns a third
04:58 - value which is nine so we call these
05:00 - binary operators because they're
05:02 - operating on two things
05:03 - there are also unary operators that
05:05 - operate on a single value so let's say
05:08 - we've got a number like let value equal
05:12 - to if we do value plus plus in
05:18 - JavaScript
05:19 - let's do console dot log value that just
05:26 - increases the value of this variable by
05:31 - one and if you're new to programming
05:33 - hopefully you're just beginning you're
05:35 - beginning to get the idea of what
05:37 - variables do I'll give you some practice
05:38 - with them later on but you can use
05:42 - variables essentially instead of the
05:46 - values that they contain they're kind of
05:48 - like a label for values in a way so what
05:51 - this does is so initially we declare the
05:54 - variable called value and set it equal
05:56 - to two and then we we increment it we
06:01 - increase the value of it by one using
06:04 - this plus plus operator and and I'm
06:06 - going to output it so we're going to see
06:08 - three so if I just run this we get three
06:14 - there there's there are there's another
06:19 - version of that there looks like this so
06:22 - hang on let's maybe put that there and
06:26 - then there's plus plus value as well
06:31 - that doesn't what that is nearly nearly
06:34 - the same thing
06:37 - is a difference between this is this we
06:39 - call the postfix version and this the
06:43 - prefix version of it there is a
06:44 - difference between them which will
06:46 - doubtless see later on but it doesn't
06:49 - really matter here for a moment so you
06:53 - can see we've we've increased it again
06:55 - to four and we've got the same thing in
06:59 - we've got the same thing for like a - -
07:02 - version of it so let's take a look at
07:05 - that so we've got - - value or there's a
07:13 - postfix version as well like this looks
07:21 - like this
07:26 - so that's that decreases the value of a
07:30 - variable that refers to a number by one
07:32 - so we've gone from four to three to two
07:36 - okay I think that's I think that's it
07:39 - for this video what I'm going to show
07:41 - you next is we're going to implement a
07:43 - little program to convert temperatures
07:46 - between Fahrenheit and Celsius so you
07:50 - can have a go at that if you want if you
07:52 - can think you might be able to figure
07:53 - out how to do it if you've done
07:54 - programming before it should be easy for
07:57 - you and if you haven't then it might be
08:01 - difficult but you know see if you can do
08:04 - it I'm gonna I need to check stuff in to
08:07 - get here usually I do it on the command
08:10 - line but let's just see if I can
08:12 - actually do it using Visual Studio code
08:15 - so I don't usually do this but we've got
08:18 - if I go to this there's this view here
08:22 - there that shows this kind of the source
08:25 - control view it's like this icon you
08:28 - know in the top so near the top left
08:31 - here sort of sharing type icon and if I
08:34 - hover over it says source control
08:37 - several files I've got here having you
08:39 - by the side of them to show that that
08:41 - they are untracked I haven't done a get
08:43 - add and a name of the file or a get out
08:45 - star so I can add them to version
08:48 - control I think with this plus value if
08:52 - I hover over that it says stage changes
08:55 - let's do that and then you goes away
09:01 - well that actually seems fine and so now
09:10 - I should be able to do a commit if I
09:13 - hover over this changes you know that
09:16 - gives means stage or changes oh yeah I
09:18 - see it I couldn't quite remember how to
09:20 - do this but once I've staged things for
09:23 - commit I can then do a commit and I can
09:26 - add a message here
09:27 - let's just put created in here and then
09:31 - there's a there's a tick at the top here
09:34 - to actually do the commit let's try that
09:36 - I think that worked
09:39 - looks like it worked I could verify on
09:41 - the command line here if I do get status
09:46 - yeah the only thing I got to do is a
09:48 - push to my local to my remote repository
09:53 - I'm not actually sure how to do that
09:56 - yeah let's try let's try clicking these
10:00 - dots and going to push does that work
10:06 - something's happening so I can see
10:08 - progress bar would you would you like
10:11 - code to periodically run git fetch no
10:15 - because no one's going to change this
10:16 - repository pot from me and while it did
10:19 - something let's have a look now git
10:21 - status yeah looks like it worked okay so
10:27 - we can do all our get stuff from within
10:29 - these just to do code clearly but I do
10:32 - in general prefer the command line it
10:33 - gives me more of a feeling that I know
10:35 - what's actually going on okay we'll
10:38 - leave it there for this video see if you
10:40 - can write a program that converts like
10:43 - Celsius to Fahrenheit or Fahrenheit to
10:45 - Celsius if you like and we'll come back
10:47 - to this in the next video

Cleaned transcript:

hello in this video we're going to take a look at arithmetic in JavaScript and node.js if you if you've done some programming before there are probably no surprises here except that Java C C++ and some others have this concepts of integer division were by dividing an integer by an integer always produces an integer or whole number and there isn't such thing in JavaScript so division works as you might expect if you never heard of that but anyway and putting that aside so addition works like it expect in JavaScript let's do console dot log 5 + 4 zoom in a bit maybe well let's run this so node arithmetic I I call this 0 108 oh let's run this 9 is that right yeah subtraction is exactly like you'd expect as well 5 and we've got multiplication so let's say 3 times 4 so we use the asterisk symbol in JavaScript for multiplication as we do in many other languages and there's also division let's do maybe 7 divided by 2 so this is all pretty much the same as other programming languages let's just run it 7 divided by 2 3.5 3 times 4 is 12 we've gotten a mod operator as well so mod operator basically gives you the remainder from a division so if I change this to mod it's a % let's just make a comment mod operator so 7 mod two whelps if you divide 7 by but then work out a remainder so that's obviously one let's run out one and the mod operator actually in JavaScript will will also work with at least with no no js' it will also work with values that aren't integers that aren't whole numbers so if I write like I don't know twelve point three divided by three let's say divided by five that gives us two point three so sometimes it can it can be a bit confusing because like numbers that are like floatingpoint numbers can't be stored in a completely exact way not only due to the nature of computing but to the nature of reality if you've got like a number with an infinite number of decimal values after the decimal point an infinite number of significant digits you can't store it exactly and so sometimes like if you're expecting 2.3 you might get two point two nine nine nine nine nine and so on and you might wonder what's and but it's just kind of just the problem of being able to represent floating point numbers exactly just can't be done but here you can see that if you divide 12 by 12 point three by five you can fit two fives into that and you've got 2.3 leftover which is what the mod operators giving us here usually you use the mod operator with integers in programming and it can occasionally be very useful there's also it's probably worth mentioning there's also a couple of what we call unary operators that apply to apply to variables here they're intended for use with integer variables or whole numbers that is variables that refer to a whole number value so plus or all of these plus minus times divide and mod we call them binary operator as they operate on something they operate on two numbers binary operator meaning like it's an operator that operates on two things so each of these basically takes in two values and then returns a third value if you think about it you know like so we take for example five plus four we've got two values at five and four and that produces we can say or returns a third value which is nine so we call these binary operators because they're operating on two things there are also unary operators that operate on a single value so let's say we've got a number like let value equal to if we do value plus plus in JavaScript let's do console dot log value that just increases the value of this variable by one and if you're new to programming hopefully you're just beginning you're beginning to get the idea of what variables do I'll give you some practice with them later on but you can use variables essentially instead of the values that they contain they're kind of like a label for values in a way so what this does is so initially we declare the variable called value and set it equal to two and then we we increment it we increase the value of it by one using this plus plus operator and and I'm going to output it so we're going to see three so if I just run this we get three there there's there are there's another version of that there looks like this so hang on let's maybe put that there and then there's plus plus value as well that doesn't what that is nearly nearly the same thing is a difference between this is this we call the postfix version and this the prefix version of it there is a difference between them which will doubtless see later on but it doesn't really matter here for a moment so you can see we've we've increased it again to four and we've got the same thing in we've got the same thing for like a version of it so let's take a look at that so we've got value or there's a postfix version as well like this looks like this so that's that decreases the value of a variable that refers to a number by one so we've gone from four to three to two okay I think that's I think that's it for this video what I'm going to show you next is we're going to implement a little program to convert temperatures between Fahrenheit and Celsius so you can have a go at that if you want if you can think you might be able to figure out how to do it if you've done programming before it should be easy for you and if you haven't then it might be difficult but you know see if you can do it I'm gonna I need to check stuff in to get here usually I do it on the command line but let's just see if I can actually do it using Visual Studio code so I don't usually do this but we've got if I go to this there's this view here there that shows this kind of the source control view it's like this icon you know in the top so near the top left here sort of sharing type icon and if I hover over it says source control several files I've got here having you by the side of them to show that that they are untracked I haven't done a get add and a name of the file or a get out star so I can add them to version control I think with this plus value if I hover over that it says stage changes let's do that and then you goes away well that actually seems fine and so now I should be able to do a commit if I hover over this changes you know that gives means stage or changes oh yeah I see it I couldn't quite remember how to do this but once I've staged things for commit I can then do a commit and I can add a message here let's just put created in here and then there's a there's a tick at the top here to actually do the commit let's try that I think that worked looks like it worked I could verify on the command line here if I do get status yeah the only thing I got to do is a push to my local to my remote repository I'm not actually sure how to do that yeah let's try let's try clicking these dots and going to push does that work something's happening so I can see progress bar would you would you like code to periodically run git fetch no because no one's going to change this repository pot from me and while it did something let's have a look now git status yeah looks like it worked okay so we can do all our get stuff from within these just to do code clearly but I do in general prefer the command line it gives me more of a feeling that I know what's actually going on okay we'll leave it there for this video see if you can write a program that converts like Celsius to Fahrenheit or Fahrenheit to Celsius if you like and we'll come back to this in the next video
