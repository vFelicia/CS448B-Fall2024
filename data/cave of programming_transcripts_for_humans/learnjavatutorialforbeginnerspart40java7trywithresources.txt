With timestamps:

00:00 - hello this is John from cave of
00:03 - programming calm and in this tutorial
00:04 - we're going to look at try with
00:07 - resources and this is a Java 7 language
00:10 - feature so if you're using Java 6 or
00:12 - below you won't be able to do this
00:14 - in the last tutorial we looked at
00:16 - reading a file in the the old style in
00:20 - Java and what we found was that you end
00:25 - up doing something like this where
00:27 - you've got a nested try-catch block and
00:29 - like caches all over the place
00:31 - and it really looks terrible and in this
00:36 - tutorial we're going to see a language
00:37 - feature that was introduced in Java 7
00:39 - that can enable us to simplify this
00:41 - quite a lot so a lot of what we're going
00:47 - to do is going to be somewhat similar
00:49 - but we're going to end up with hopefully
00:52 - a lot less code at the end so I'm still
00:55 - going to declare a file object and let's
00:58 - actually create file here to work with
01:00 - so I'll right-click my project I'll go
01:02 - to new file I'll call this test text and
01:06 - let's just copy some lines in from my my
01:10 - other project here so I've got this
01:11 - little text file here and I'm going to
01:15 - use this now actually what I'll do it
01:17 - here is now that I think that I'll show
01:19 - you how this works without files because
01:22 - it one about to show you is nothing
01:25 - intrinsically to do with files it just
01:27 - happens to be very handy for working
01:30 - with files so I'll show you it
01:32 - independently of files first let's
01:35 - imagine that we've got a class up here
01:37 - let's call it class I'm just going to
01:42 - call it temp or something like that and
01:44 - I'm going to say here that 10 implements
01:49 - also closeable also closeable by that
01:53 - now the auto closeable interface just
01:56 - specifies that your class should have a
01:59 - 10 sorry closed method a method called
02:02 - closed so if I click this arrow here and
02:05 - add on implementing methods now we've
02:07 - got a closed method here and that throws
02:12 - an exception and let's
02:13 - just put in the SSL closing so that we
02:17 - can see if this method runs now imagine
02:21 - that in my main method I create I want
02:25 - to create some sort of object of the
02:28 - type temp by this and later on I need to
02:33 - close it I need to remember to close it
02:35 - like this because otherwise I don't know
02:38 - what's going to happen but somehow it's
02:41 - going to be bad for my program then here
02:45 - are I've got to handle its exception
02:46 - which could be thrown from this closed
02:48 - methods let's put this let's put a
02:49 - try-catch around it but now this program
02:52 - should work and if I run this it says
02:55 - closing so we we created a temp object
02:59 - and then we called the close method and
03:02 - temp was actually forced to have a close
03:04 - method because it implements Auto
03:06 - closeable and let's just put the cursor
03:08 - on that and press f3 we can go to this
03:10 - definition and we see that Auto
03:12 - closeable has nothing in it except that
03:15 - it says you've got to have a closed
03:16 - method that throws an exception
03:18 - I sort also closable what this interface
03:21 - does okay so let's let's delete that but
03:25 - keep that in mind and I know that's not
03:28 - to lead to actually because I still want
03:29 - to show you something here now instead
03:31 - of instead of having this try block here
03:36 - what we can do is we can get rid of that
03:40 - and when we actually declare the temp
03:43 - object since Java 7 we can surround that
03:47 - we can actually put that in the inner
03:53 - inner after a try and kind of like round
03:56 - brackets like this
03:57 - and this is called try with resources so
04:02 - I put after I've got a keyword try and
04:04 - I've got round brackets like this and
04:06 - within the round brackets and declaring
04:08 - and assigning some variable I'm creating
04:14 - an object using new and assigning it to
04:16 - a variable that implements also
04:19 - closeable and it's the important bits
04:20 - got to implement auto closeable and I
04:23 - open a curly bracket of the try here
04:25 - and let's just click Save and now if I
04:29 - look at the error here it's complaining
04:32 - that it throws an exception because this
04:34 - close method throws an exception
04:37 - actually it doesn't throw it but it
04:40 - could do because of this so let's just
04:43 - click that and say add catch Clause to
04:47 - surrounding try so now we're catching
04:49 - the exception here and now like there's
04:53 - no warning here that I haven't called
04:55 - close which ordinarily there would be
04:58 - and if I run this code we see that it's
05:00 - actually calling closing and that's what
05:02 - this does it actually the fact that
05:04 - we've declared this Auto closable object
05:08 - we then try means that the close is
05:11 - automatically called and we don't have
05:13 - to worry about what will happen if an
05:14 - exception is thrown or what will happen
05:18 - if it X cubes normally because whatever
05:20 - happens this will automatically call
05:24 - closed so we could even say here throw
05:26 - new exception like that and say oh oh no
05:33 - and even if I run that now it's still
05:39 - calling closing even though we've got
05:41 - this exception being thrown here so
05:43 - close is always caught and that's what's
05:45 - so great about this Java 7 language
05:47 - feature the try with resources that
05:50 - works on these auto closeable objects
05:52 - now I'm going to actually leave that
05:54 - there come to think of it and I'll
05:56 - create a new in my project is going to
05:59 - write one I'll create a new main method
06:02 - a right-click and I'll go to new class
06:07 - let's call this app 2 and click finish
06:14 - and now I want to show you how that
06:16 - works with regard to files so I've got
06:19 - my text file down here and I'm going to
06:23 - say file file get rid of the caps lock
06:27 - file file equals new file
06:30 - test text like so I'll do ctrl shift o
06:36 - to add the import and and now I want to
06:41 - read it as we saw in the last tutorial
06:44 - or if I want to read this line by line I
06:47 - need a file reader and a buffered reader
06:49 - and in the last tutorial what I did was
06:52 - this
06:52 - I said buffered reader buffered reader B
06:57 - R equals new new buffered reader and I
07:03 - passed the file to it and then inside
07:06 - the import and then I that's throwing an
07:08 - exception so there's going to be an
07:10 - error there and then I said if I this is
07:14 - wrong way around the first thing I said
07:15 - was file reader and F R equals new file
07:20 - reader and we pass the file to that and
07:23 - then we pass the file reader to the
07:26 - bufferedreader so we've got three
07:28 - objects here that are kind of buffered
07:31 - readers using this file reader here file
07:34 - reader is using the file here it's like
07:36 - a Russian gold kind of thing and what we
07:39 - can do even in Java 6 or I suppose any
07:43 - version of Java which was save a bit of
07:47 - which will save as a line is that
07:50 - instead of declaring this separately up
07:52 - here because we actually never refer to
07:54 - this again after using it down here so
07:57 - instead of having a separate variable
07:58 - for it here I could take my new file
08:01 - reader here and just declare it in a
08:03 - constructor and the call to the
08:05 - constructor of bufferedreader so it's
08:08 - just that the import make sure it's
08:10 - there so now I'm creating a
08:13 - bufferedreader and I'm creating a new
08:15 - file reader and I'm passing file to it
08:18 - and I'm passing that object directly to
08:20 - bufferedreader to the constructor of
08:22 - bufferedreader all in one line so that
08:25 - saves us a little bit of typing but now
08:28 - what we're going to do is we're going to
08:30 - use a Java seven language feature to try
08:33 - with resources again and I'm going to
08:36 - say here try and I surround this whole
08:38 - line with round brackets
08:41 - the long line but never mind and it
08:43 - opened the curly bracket here and if I
08:47 - click this arrow I can add the catch
08:48 - clause like that and we got file not
08:51 - found and here we could put an error
08:53 - message like sisal can't find file and
09:00 - you probably know the drill by now filed
09:03 - up to string if this executes and this
09:07 - could execute because we can't close the
09:09 - file but the most likely cause of it is
09:13 - is that we couldn't read the file
09:16 - properly so let's put here unable to
09:20 - read file and filed up to strength so I
09:26 - think this I think this error message
09:27 - here will is going to come out even if
09:29 - we're unable to close the file and the
09:31 - user doesn't really care if the file
09:33 - can't be closed they only really care
09:35 - usually if it can't be read but not much
09:40 - to be done about that because this is
09:42 - just so you see see how such synthesis
09:45 - is so small compared to their monstrous
09:47 - mess that we had in the last tutorial
09:50 - which to remind you that like look like
09:53 - this with a nested try catch and to
09:57 - complete our program we just need this
09:58 - bit here that actually reads the file
10:00 - line-by-line so we go to app two and
10:02 - paste this in try block control shift f2
10:06 - format there and now we've got a
10:08 - complete program that reads a file so
10:10 - and it closes the file handle as well
10:12 - because we're using this try with
10:13 - resources if I run that then we're
10:16 - reading the file and if it can't find
10:18 - the file let's say then we'll get a nice
10:20 - error message so what we've done is
10:23 - we've replaced this this Monts
10:29 - monstrosity which I can hardly bear to
10:31 - look at to be honest with you with this
10:34 - here which is much much nicer but it
10:37 - only works in Java 7 although this this
10:40 - bit here will work in Java 6 as well
10:42 - it's just there's no try with resources
10:43 - until two over seven so that's it for
10:46 - this tutorial that's a very handy
10:47 - feature that you can use to simplify
10:49 - your code this code will be on Cave of
10:53 - Programming
10:54 - calm so check out kata programming calm
10:57 - and I'm also in a process of setting up
10:59 - a email list with a weekly newsletter
11:02 - they'll contain my free M tutorials and
11:06 - special offers and stuff so check that
11:08 - out and until next time happy coding

Cleaned transcript:

hello this is John from cave of programming calm and in this tutorial we're going to look at try with resources and this is a Java 7 language feature so if you're using Java 6 or below you won't be able to do this in the last tutorial we looked at reading a file in the the old style in Java and what we found was that you end up doing something like this where you've got a nested trycatch block and like caches all over the place and it really looks terrible and in this tutorial we're going to see a language feature that was introduced in Java 7 that can enable us to simplify this quite a lot so a lot of what we're going to do is going to be somewhat similar but we're going to end up with hopefully a lot less code at the end so I'm still going to declare a file object and let's actually create file here to work with so I'll rightclick my project I'll go to new file I'll call this test text and let's just copy some lines in from my my other project here so I've got this little text file here and I'm going to use this now actually what I'll do it here is now that I think that I'll show you how this works without files because it one about to show you is nothing intrinsically to do with files it just happens to be very handy for working with files so I'll show you it independently of files first let's imagine that we've got a class up here let's call it class I'm just going to call it temp or something like that and I'm going to say here that 10 implements also closeable also closeable by that now the auto closeable interface just specifies that your class should have a 10 sorry closed method a method called closed so if I click this arrow here and add on implementing methods now we've got a closed method here and that throws an exception and let's just put in the SSL closing so that we can see if this method runs now imagine that in my main method I create I want to create some sort of object of the type temp by this and later on I need to close it I need to remember to close it like this because otherwise I don't know what's going to happen but somehow it's going to be bad for my program then here are I've got to handle its exception which could be thrown from this closed methods let's put this let's put a trycatch around it but now this program should work and if I run this it says closing so we we created a temp object and then we called the close method and temp was actually forced to have a close method because it implements Auto closeable and let's just put the cursor on that and press f3 we can go to this definition and we see that Auto closeable has nothing in it except that it says you've got to have a closed method that throws an exception I sort also closable what this interface does okay so let's let's delete that but keep that in mind and I know that's not to lead to actually because I still want to show you something here now instead of instead of having this try block here what we can do is we can get rid of that and when we actually declare the temp object since Java 7 we can surround that we can actually put that in the inner inner after a try and kind of like round brackets like this and this is called try with resources so I put after I've got a keyword try and I've got round brackets like this and within the round brackets and declaring and assigning some variable I'm creating an object using new and assigning it to a variable that implements also closeable and it's the important bits got to implement auto closeable and I open a curly bracket of the try here and let's just click Save and now if I look at the error here it's complaining that it throws an exception because this close method throws an exception actually it doesn't throw it but it could do because of this so let's just click that and say add catch Clause to surrounding try so now we're catching the exception here and now like there's no warning here that I haven't called close which ordinarily there would be and if I run this code we see that it's actually calling closing and that's what this does it actually the fact that we've declared this Auto closable object we then try means that the close is automatically called and we don't have to worry about what will happen if an exception is thrown or what will happen if it X cubes normally because whatever happens this will automatically call closed so we could even say here throw new exception like that and say oh oh no and even if I run that now it's still calling closing even though we've got this exception being thrown here so close is always caught and that's what's so great about this Java 7 language feature the try with resources that works on these auto closeable objects now I'm going to actually leave that there come to think of it and I'll create a new in my project is going to write one I'll create a new main method a rightclick and I'll go to new class let's call this app 2 and click finish and now I want to show you how that works with regard to files so I've got my text file down here and I'm going to say file file get rid of the caps lock file file equals new file test text like so I'll do ctrl shift o to add the import and and now I want to read it as we saw in the last tutorial or if I want to read this line by line I need a file reader and a buffered reader and in the last tutorial what I did was this I said buffered reader buffered reader B R equals new new buffered reader and I passed the file to it and then inside the import and then I that's throwing an exception so there's going to be an error there and then I said if I this is wrong way around the first thing I said was file reader and F R equals new file reader and we pass the file to that and then we pass the file reader to the bufferedreader so we've got three objects here that are kind of buffered readers using this file reader here file reader is using the file here it's like a Russian gold kind of thing and what we can do even in Java 6 or I suppose any version of Java which was save a bit of which will save as a line is that instead of declaring this separately up here because we actually never refer to this again after using it down here so instead of having a separate variable for it here I could take my new file reader here and just declare it in a constructor and the call to the constructor of bufferedreader so it's just that the import make sure it's there so now I'm creating a bufferedreader and I'm creating a new file reader and I'm passing file to it and I'm passing that object directly to bufferedreader to the constructor of bufferedreader all in one line so that saves us a little bit of typing but now what we're going to do is we're going to use a Java seven language feature to try with resources again and I'm going to say here try and I surround this whole line with round brackets the long line but never mind and it opened the curly bracket here and if I click this arrow I can add the catch clause like that and we got file not found and here we could put an error message like sisal can't find file and you probably know the drill by now filed up to string if this executes and this could execute because we can't close the file but the most likely cause of it is is that we couldn't read the file properly so let's put here unable to read file and filed up to strength so I think this I think this error message here will is going to come out even if we're unable to close the file and the user doesn't really care if the file can't be closed they only really care usually if it can't be read but not much to be done about that because this is just so you see see how such synthesis is so small compared to their monstrous mess that we had in the last tutorial which to remind you that like look like this with a nested try catch and to complete our program we just need this bit here that actually reads the file linebyline so we go to app two and paste this in try block control shift f2 format there and now we've got a complete program that reads a file so and it closes the file handle as well because we're using this try with resources if I run that then we're reading the file and if it can't find the file let's say then we'll get a nice error message so what we've done is we've replaced this this Monts monstrosity which I can hardly bear to look at to be honest with you with this here which is much much nicer but it only works in Java 7 although this this bit here will work in Java 6 as well it's just there's no try with resources until two over seven so that's it for this tutorial that's a very handy feature that you can use to simplify your code this code will be on Cave of Programming calm so check out kata programming calm and I'm also in a process of setting up a email list with a weekly newsletter they'll contain my free M tutorials and special offers and stuff so check that out and until next time happy coding
