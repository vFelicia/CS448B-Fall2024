With timestamps:

00:00 - [Music]
00:19 - hello this is John from Cave of
00:21 - programming. comom this is the eighth
00:25 - tutorial in our series of beginners Java
00:28 - tutorials um and in this tutorial we're
00:31 - going to look at a whole bunch of things
00:33 - I'm going to show you do while loops and
00:37 - we'll look at variable scope and also
00:40 - multi-line
00:42 - comments so a really common task that
00:46 - gets assigned to beginners in Java
00:50 - courses is to ask the user to enter some
00:54 - input and enter Loop until the user
00:57 - enters some particular input so for
01:00 - example I could say ask the user to
01:03 - enter a number and then keep asking them
01:06 - to enter a number until they enter the
01:08 - number five for example so let's see how
01:12 - we would do that using a while
01:15 - loop and the first thing I need is um a
01:18 - scanner object and as I said in previous
01:23 - tutorials don't worry too much about
01:24 - this syntax at the moment just get used
01:28 - to typing it
01:30 - um so I've created a new scanner object
01:34 - which I can then use to get input and
01:37 - I'll satly
01:38 - user enter a
01:42 - number and then I will get the number I
01:47 - enter I'll say int value equals scanner.
01:51 - next
01:53 - int and now I want to keep asking them
01:56 - to enter it until they enter the number
01:59 - five
02:01 - so to do that using a while loop I could
02:03 - say while value not equal to 5 do the
02:08 - loop and in the loop I would have to say
02:12 - enter a number
02:15 - again and I would have to get the value
02:22 - again now um you'll notice straight away
02:25 - a problem with this um I'm getting an
02:28 - error here and the reason for that is
02:31 - I've got two int values and you can only
02:34 - have one so I'll get rid of this int
02:38 - because I've already declared this here
02:41 - and I can use it again down there no
02:44 - problem and what I'll also do is I'll
02:47 - say at the end got five because this
02:51 - loot will only finish if someone kills
02:53 - the program somehow or if the user does
02:57 - enter five so I I'll run this uh I'll
03:00 - enter three 8
03:03 - 7 five got five so it
03:08 - works but it's not really ideal because
03:12 - this and this are practically identical
03:14 - and I'm repeating
03:16 - them and I can solve that problem using
03:20 - a do while
03:22 - loop so the first thing I'm going to do
03:25 - is get rid of this
03:26 - code um get rid of this code actually
03:30 - and I'm going to do that with a
03:31 - multi-line comment I'm going to comment
03:33 - out the code and a multi-line comment in
03:36 - Java looks like this slash asterisk um
03:41 - is where you want to start the comment
03:43 - and then where you want to finish the
03:44 - comment type asterisk
03:46 - slash and I've turned this into a
03:48 - comment so it doesn't do
03:51 - anything and that's really handy for
03:53 - just
03:54 - temporarily um disabling code that you
03:56 - don't want to use but that you don't
03:58 - want to delete but it's best not to let
04:01 - too many of these commented out blocks
04:03 - build up in your program because then it
04:05 - will just look like a total dogs
04:06 - breakfast or a pigs
04:09 - here um now a do while loop um looks
04:13 - like this you have the keyword do and an
04:16 - opening curly
04:17 - bracket and a closing curly bracket and
04:20 - the code that you want to run goes in
04:22 - here and the
04:24 - condition um goes here um so you've got
04:28 - while
04:30 - round brackets and a semicolon and then
04:33 - here I can check some condition for
04:36 - example value not equal to five and as
04:40 - long as this condition is true the loop
04:43 - will go round and round and round now
04:46 - the difference between this and a while
04:48 - loop is that because I'm only checking
04:51 - the condition at the end of the loop
04:53 - there will always be at least one run of
04:56 - the
04:57 - loop um because regardless of what this
05:00 - condition is when my code gets down to
05:03 - here it will execute this stuff then it
05:06 - will check the condition and if the
05:08 - condition is true it will go round again
05:11 - and if it's not true it will just drop
05:13 - out the
05:15 - bottom so here I could have
05:20 - my um sis out enter number
05:24 - prompt and then I might think okay I
05:28 - will get my Val
05:30 - here and I might think that would
05:33 - work so I get the scanner up here that's
05:37 - I still need that and then I come down
05:39 - here and it's a do while loop so I will
05:41 - enter the loop I'll say enter a number
05:44 - and I'll get the number and then if the
05:48 - number is not equal to five I will go
05:50 - around the loop again and I'll keep
05:52 - going until it is equal to five then the
05:55 - loop will stop here and I'll print this
05:58 - got five now you can see there's an
06:00 - error here and that has to do with
06:02 - variable scope because when you declare
06:06 - a variable for example int value or
06:08 - string name or
06:10 - whatever that variable only exists
06:13 - within the curly brackets um in which
06:16 - it's
06:17 - declared in fact only exists within the
06:20 - innermost curly brackets in which it's
06:22 - declared so there are more pairs of
06:24 - curly brackets here for example um
06:27 - containing the main um meth method but
06:31 - it's um it's um basically within this
06:35 - pair of curly brackets and for that
06:38 - reason outside of those it it doesn't
06:41 - exist and it doesn't value doesn't exist
06:44 - here for example where I need to check
06:46 - it so to get around that I need to
06:48 - declare it outside the curly
06:51 - brackets um so I'll put it here and I'll
06:53 - give it a default
06:55 - value and then here I can just use it
06:58 - and here I can happily use it as
07:01 - well um and variable scope is very very
07:04 - important in Java and many other
07:08 - practically all other um programming
07:10 - languages um so you have to always bear
07:12 - it in mind and now I run this program
07:15 - and it says enter a number so I can
07:16 - enter three 7 and when I finally enter
07:20 - five um hey Presto um the loot
07:23 - terminates and this
07:27 - executes um so that's all for this
07:30 - tutorial and in the next tutorial we
07:33 - will look at another another basic
07:35 - building block of computer
07:38 - programs the switch
07:40 - statement um so join me again for
07:43 - tutorial 9 and until then Happy coding
07:57 - [Music]

Cleaned transcript:

hello this is John from Cave of programming. comom this is the eighth tutorial in our series of beginners Java tutorials um and in this tutorial we're going to look at a whole bunch of things I'm going to show you do while loops and we'll look at variable scope and also multiline comments so a really common task that gets assigned to beginners in Java courses is to ask the user to enter some input and enter Loop until the user enters some particular input so for example I could say ask the user to enter a number and then keep asking them to enter a number until they enter the number five for example so let's see how we would do that using a while loop and the first thing I need is um a scanner object and as I said in previous tutorials don't worry too much about this syntax at the moment just get used to typing it um so I've created a new scanner object which I can then use to get input and I'll satly user enter a number and then I will get the number I enter I'll say int value equals scanner. next int and now I want to keep asking them to enter it until they enter the number five so to do that using a while loop I could say while value not equal to 5 do the loop and in the loop I would have to say enter a number again and I would have to get the value again now um you'll notice straight away a problem with this um I'm getting an error here and the reason for that is I've got two int values and you can only have one so I'll get rid of this int because I've already declared this here and I can use it again down there no problem and what I'll also do is I'll say at the end got five because this loot will only finish if someone kills the program somehow or if the user does enter five so I I'll run this uh I'll enter three 8 7 five got five so it works but it's not really ideal because this and this are practically identical and I'm repeating them and I can solve that problem using a do while loop so the first thing I'm going to do is get rid of this code um get rid of this code actually and I'm going to do that with a multiline comment I'm going to comment out the code and a multiline comment in Java looks like this slash asterisk um is where you want to start the comment and then where you want to finish the comment type asterisk slash and I've turned this into a comment so it doesn't do anything and that's really handy for just temporarily um disabling code that you don't want to use but that you don't want to delete but it's best not to let too many of these commented out blocks build up in your program because then it will just look like a total dogs breakfast or a pigs here um now a do while loop um looks like this you have the keyword do and an opening curly bracket and a closing curly bracket and the code that you want to run goes in here and the condition um goes here um so you've got while round brackets and a semicolon and then here I can check some condition for example value not equal to five and as long as this condition is true the loop will go round and round and round now the difference between this and a while loop is that because I'm only checking the condition at the end of the loop there will always be at least one run of the loop um because regardless of what this condition is when my code gets down to here it will execute this stuff then it will check the condition and if the condition is true it will go round again and if it's not true it will just drop out the bottom so here I could have my um sis out enter number prompt and then I might think okay I will get my Val here and I might think that would work so I get the scanner up here that's I still need that and then I come down here and it's a do while loop so I will enter the loop I'll say enter a number and I'll get the number and then if the number is not equal to five I will go around the loop again and I'll keep going until it is equal to five then the loop will stop here and I'll print this got five now you can see there's an error here and that has to do with variable scope because when you declare a variable for example int value or string name or whatever that variable only exists within the curly brackets um in which it's declared in fact only exists within the innermost curly brackets in which it's declared so there are more pairs of curly brackets here for example um containing the main um meth method but it's um it's um basically within this pair of curly brackets and for that reason outside of those it it doesn't exist and it doesn't value doesn't exist here for example where I need to check it so to get around that I need to declare it outside the curly brackets um so I'll put it here and I'll give it a default value and then here I can just use it and here I can happily use it as well um and variable scope is very very important in Java and many other practically all other um programming languages um so you have to always bear it in mind and now I run this program and it says enter a number so I can enter three 7 and when I finally enter five um hey Presto um the loot terminates and this executes um so that's all for this tutorial and in the next tutorial we will look at another another basic building block of computer programs the switch statement um so join me again for tutorial 9 and until then Happy coding
