With timestamps:

00:00 - hello this is John from cave of
00:03 - programming calm and in this tutorial
00:05 - we're going to start looking at handling
00:09 - exceptions in Java and I'm only going to
00:12 - show you the kind of simplest case here
00:14 - and we're going to look at more
00:16 - complicated stuff in future tutorials so
00:20 - exceptions are a major part of the Java
00:24 - language and one of the parts that in
00:25 - some ways is least well thought out and
00:28 - unfortunately they can make your code
00:30 - look at not look a bit ugly sometimes
00:33 - see I'm sort of have to do the best you
00:35 - can with them but one exception is is
00:38 - it's part of an error handling mechanism
00:41 - and that rod illan talk let's just get
00:45 - straight into an example so I'm going to
00:47 - show you an example that has to do with
00:50 - file handling and don't worry for a
00:53 - moment about the Excite classes that I'm
00:55 - using here because all I really want to
00:57 - do is illustrate handling exceptions and
01:00 - we will get more into handling files in
01:03 - future now in Java as an object called a
01:08 - file is a class called file and I'm
01:11 - going to declare a variable of the type
01:13 - file and set it equal to a new file
01:17 - object and to the constructor of file I
01:22 - can pass the name of a file that I want
01:24 - to deal with and you can imagine that we
01:26 - might be about to read a file or write
01:28 - to it or do something else with it so
01:31 - let's just say here test on text and
01:34 - I'll add the import for file with ctrl
01:37 - shift o
01:40 - now if you want to read the file let's
01:44 - say the next step could be to declare a
01:47 - file reader object so it's a classical
01:50 - file reader and let's just call this fr
01:54 - and I'll set it equal to a new file
01:56 - reader so usually it's bad practice to
02:00 - make variables that only have one or two
02:02 - letters in but in certain circumstances
02:05 - it's it ends up being kind of acceptable
02:10 - and makes your code cleaner and usually
02:13 - file reader is something that use as an
02:15 - intermediate step to reading a file so
02:18 - you don't refer to it much later on in
02:20 - your code or we won't go into that now
02:22 - but just for a moment I just want you to
02:25 - look at how this works in terms of
02:28 - exceptions so I'm going to set this fr
02:32 - variable equal to a new file reader and
02:34 - I'm going to pass it the file object but
02:37 - I declared here so I'll pass the file
02:39 - object to the constructor and again I'll
02:41 - add the import with ctrl shift o and now
02:44 - this is what I wanted to show you
02:45 - because we've still got an error and
02:48 - whenever you see an error like that the
02:51 - important thing is to have your mouse
02:53 - over the error icon at the left here and
02:57 - here we see whether there are two errors
03:00 - here one is that it says F R is not
03:02 - closed and I'll leave that for a moment
03:07 - but the top error is it says unhandled
03:10 - exception type file not found exception
03:13 - and exceptions are actually they're just
03:17 - ordinary objects except that they derive
03:20 - from a class called exception and you
03:22 - use them in a particular way now
03:24 - whenever you get an exception an error
03:27 - like that and it tells you unhandled
03:29 - exception there are two ways you can
03:33 - deal with it and click on the arrow and
03:37 - you'll see the two ways so the first way
03:40 - is this bad throws declaration and let's
03:43 - just click that and see what happens so
03:45 - what's happened is it's said originally
03:49 - that this
03:50 - and had an unhandled file not found
03:53 - exception and when I went to add throws
03:56 - it's actually added this to the header
03:59 - of my main method it says throws file
04:02 - not found exception and that fixes the
04:05 - problem so if I save this and I run it
04:10 - bearing in mind that we haven't got a
04:12 - test X so this file doesn't exist if I
04:15 - run it I get some red text down here and
04:20 - when you see red text like this this is
04:21 - called a stub trace or yeah a trace and
04:25 - the important thing to do is scroll
04:27 - right up and look at the top line and
04:30 - read it from the top line down so here
04:33 - it says exception in thread and main and
04:36 - Java IO file not found exception so this
04:40 - tells us kind of what kind of error
04:42 - we're dealing with and then it's got
04:45 - some more specific information here the
04:47 - system cannot find the file specified
04:49 - and often you will get more specific
04:52 - information and then if we look down a
04:55 - little bit we just go down a bit finally
04:58 - we come to a point where we've got a
05:00 - little a reference to some code that
05:04 - we've written ourselves so I've created
05:06 - at Java myself it's this file here and
05:09 - it says patent doc Java : 13 which means
05:11 - line 13 and I can click on that error
05:14 - and I can see exactly where the problem
05:17 - occurred so now I know what happened I
05:20 - know that the problem was test X wasn't
05:23 - found and it occurred at this line 13 on
05:25 - in app dot Java and an exception as
05:29 - being thrown and what that means is and
05:32 - that basically we've ended up with this
05:35 - kind of red text and a reason that this
05:41 - has appeared down here is because we
05:43 - think of this method here as it
05:46 - encounters an error and it reacts to the
05:49 - error by throwing an exception it's as
05:51 - if it's thrown an object straight out of
05:54 - itself and execution of my program has
05:57 - stopped at that point and the exceptions
06:00 - been thrown out of
06:01 - after the main method and that was
06:04 - possible because it's got this throws
06:06 - file not found exception declaration
06:09 - here and when an exception is thrown out
06:11 - of the main method you get a kind of
06:14 - stack trace like this with red text that
06:17 - tells you what the problem is let's take
06:21 - a look and not a method of handling an
06:23 - exception and what I'll do is I'll just
06:26 - right click and I'll go to new package
06:28 - and let's call this demo one and I'll
06:31 - just put this that Java into demo one
06:33 - and I'll create a new main method here
06:36 - so I'll right-click go to new class I'll
06:40 - call it up again and I'll put it in a
06:41 - package called demo two and we'll look
06:44 - at a different way of handling an
06:46 - exception here so let's copy this stuff
06:51 - and I'll go to my second app and I'll
06:56 - paste this in here let's get rid of
06:57 - these comments which always annoy me and
07:00 - I'll do ctrl shift F to format that and
07:02 - now let's look at the other alternative
07:05 - I'll just right-click and clearly this
07:07 - error I'll hover over the area and again
07:10 - it says unhandled exception so I click
07:12 - the error and I go to surround with
07:14 - try-catch and this is called this whole
07:18 - thing here is called a try-catch block
07:21 - and what this is doing is it's saying
07:25 - try to do this code and if that code
07:29 - throws an exception then go into the
07:32 - catch block and if this throws an
07:36 - exception we will immediately go into
07:38 - the catch block so if you put other
07:40 - lines down here they wouldn't be
07:43 - executed if that throws an exception but
07:46 - if it doesn't throw an exception of
07:47 - course you will just carry on executing
07:49 - sequentially line by line but soon as
07:52 - you throw an exception it's it kind of
07:54 - throws you straight out of what you're
07:56 - currently doing now in this case we're
07:58 - not throwing the exception out of main
08:00 - what we're doing is we're catching the
08:02 - exception so here we can put code which
08:06 - will be executed if that exception is
08:09 - thrown
08:10 - and the default here is to say e dot
08:13 - print stamp trace and the exception is
08:16 - declared here it's like a probably looks
08:18 - like a parameter to a method but it's
08:21 - not and this exception can be caught by
08:24 - this catch block of the try catch block
08:28 - and we're saying just print and stat
08:30 - trace without exception and if I run
08:32 - that it looks much the same as before
08:35 - and again we can click on the line and
08:37 - find out where the exception was thrown
08:39 - if I were to create that file in here
08:42 - it's just right click and go new file so
08:45 - right-click the project folder which is
08:48 - the working directory of the program and
08:50 - I can just create a test of text and
08:52 - click finish so now we shouldn't throw
08:55 - that error and if I run the program now
08:56 - we don't get an error we don't get the
08:58 - far not found exception being thrown
09:01 - because the file is found now so the
09:04 - exception is only thrown if an error
09:06 - condition arises I'll just delete that
09:09 - again and you can put whatever code you
09:14 - like in here you don't have to print the
09:16 - stack trace so by default you get this
09:20 - put in and it's very very handy but you
09:22 - could use anything you like for example
09:24 - I could put this out in here system
09:27 - dialed or print Ln and I could say let's
09:30 - say file not found and it's two plus and
09:35 - let's use my file object up here and
09:38 - I'll just do filed up to string which I
09:41 - think will give us a nice representation
09:45 - of the file I'll just run that and it
09:48 - says file not farm test dot text so you
09:50 - can handle an exception any way you like
09:54 - and if I had code in here
09:58 - the safe side continuing and let's put
10:03 - common here this will not be executed if
10:09 - the file if an exception is thrown so if
10:17 - an exception is thrown that line - just
10:19 - does not run so it immediately kind of
10:22 - from here if it throws an exception
10:24 - immediately goes into that catch block
10:26 - but if you caught an exception then you
10:29 - can continue so I can say here finished
10:33 - and if I run this even though we've got
10:36 - an exception being thrown we're catching
10:38 - it were handling it and then were
10:40 - continuing with our code and that this
10:44 - is quite a lot to absorb but as usual I
10:47 - would say if you typed it out yourself
10:49 - you'll really quickly see how it works
10:51 - and it's just a matter of getting used
10:54 - to the terminology throwing an exception
10:56 - catching an exception and just typing it
10:59 - and seeing how it works and you don't
11:01 - really need to puzzle over it too much
11:03 - and because typing is your kind of magic
11:06 - shortcut to actually understanding this
11:09 - stuff I find by one throat I want to
11:11 - show you just one more thing here so I'm
11:16 - going to create a app three let's close
11:18 - this
11:19 - well app an app in demo three and I'll
11:22 - right-click and go to new class let's
11:25 - call this app again and oh I forgot a
11:29 - package that's quite a new package a
11:32 - right-click and go to new package I'll
11:36 - call this demo three and I'll just drag
11:39 - my anti Java into this and once again
11:43 - I'll have some code in here that tries
11:48 - to open a non-existent file and this
11:51 - time what I want to show you is I'm
11:54 - going to have another method in here and
11:56 - because I haven't got a instance of my
11:59 - app class I haven't gotten up objet is
12:02 - nowhere in here does the same new app if
12:05 - I want to declare a method here and use
12:07 - it at the moment it would have to be
12:08 - static
12:09 - so empty is a non-static method of a
12:13 - class then you have to do new on that
12:16 - class somewhere and rather than do that
12:17 - I'm just going to say public static void
12:20 - open file so I've got a new method here
12:23 - and I'm gonna cut this and put it in
12:27 - this method here and here I'm going to
12:32 - call this method so in main which is the
12:34 - entry point of the program I'm going to
12:36 - call Open File like that and now let's
12:42 - well again if I were to click the error
12:45 - and I were to put a try-catch block in
12:47 - we could just handle it here and that
12:49 - would be the end of it but if I put
12:50 - throws in so I click and I go to add
12:54 - throws declaration it's going to add the
12:56 - throws declaration to the method I'm in
12:59 - so now open file throws file not found
13:02 - exception and now I've got an error in
13:04 - main and because I've got a handle ID
13:08 - section somewhere or I must throw out a
13:11 - many ultimately so this open file is now
13:16 - itself
13:16 - throwing the exception so the exception
13:20 - starts and file reader it gets thrown
13:22 - instead of being caught or handled in a
13:25 - try-catch block it gets thrown out of
13:28 - open file and now I need to either throw
13:31 - it out of main or catch it here and for
13:34 - example I could just go to add throws
13:37 - and I get throw a thread clean out of my
13:39 - program in effect and I run that and
13:42 - it's a sense before or another
13:45 - possibility is again two throws and
13:48 - declaration on main and I handle it now
13:52 - in main
13:52 - I go to surround a try/catch and again I
13:56 - could say something like this out could
13:59 - not open file although it's always good
14:02 - when you when you have an error to have
14:06 - a specific a message as you can to your
14:08 - user if the user was intended to see
14:10 - this the user should never see
14:13 - a stacktrace like this unless you want
14:15 - to horrify them because all users all
14:19 - kind of non-technical users and even
14:21 - technical ones are horrified by stack
14:24 - traces so don't let your application
14:26 - produce a stack trace if you intend it
14:29 - to be distributed and used by other
14:31 - people and here I would make it say
14:33 - couldn't open files such and such and
14:35 - I'd do something like maybe pass the
14:37 - file name into here so I wouldn't let it
14:39 - just say couldn't open file because
14:41 - that's too vague a message
14:43 - let's just put quick note here yes this
14:48 - message is too vague but anyway the
14:54 - point is that I can if I throw the
14:56 - exception out of open file I can then
14:58 - catch it
14:59 - further up the stack and catch it in
15:03 - main because we think of the methods the
15:06 - method calls as being like a stack well
15:08 - one calls the other which calls another
15:10 - which calls another and it's like this a
15:11 - stack of methods and you kind of take
15:15 - the methods off the stack and run them
15:17 - one by one or at least the java virtual
15:19 - machine does so same way okay I'll run
15:23 - this open file and then I'll carry on
15:25 - with main and so on anyway that's all
15:30 - for this tutorial and it is a lot of
15:33 - stuff but if you play around with it
15:34 - you'll see it's not that complicated and
15:37 - we're going to move on probably in the
15:40 - next tutorial we'll move on to looking
15:42 - at some more exception handling stuff
15:45 - and probably will look at different
15:47 - kinds of exceptions and stuff like that
15:49 - so that's it for this tutorial and you
15:52 - can find this code on Cave of
15:55 - Programming calm if you go to the front
15:58 - page at least in a moment and look down
16:02 - and see links to pages for these
16:04 - tutorials where you can see the source
16:06 - code and I've also got courses on
16:12 - programming desktop applications and
16:15 - stuff like that so certainly check those
16:16 - out ok and that's it for today and until
16:20 - next time
16:22 - coding

Cleaned transcript:

hello this is John from cave of programming calm and in this tutorial we're going to start looking at handling exceptions in Java and I'm only going to show you the kind of simplest case here and we're going to look at more complicated stuff in future tutorials so exceptions are a major part of the Java language and one of the parts that in some ways is least well thought out and unfortunately they can make your code look at not look a bit ugly sometimes see I'm sort of have to do the best you can with them but one exception is is it's part of an error handling mechanism and that rod illan talk let's just get straight into an example so I'm going to show you an example that has to do with file handling and don't worry for a moment about the Excite classes that I'm using here because all I really want to do is illustrate handling exceptions and we will get more into handling files in future now in Java as an object called a file is a class called file and I'm going to declare a variable of the type file and set it equal to a new file object and to the constructor of file I can pass the name of a file that I want to deal with and you can imagine that we might be about to read a file or write to it or do something else with it so let's just say here test on text and I'll add the import for file with ctrl shift o now if you want to read the file let's say the next step could be to declare a file reader object so it's a classical file reader and let's just call this fr and I'll set it equal to a new file reader so usually it's bad practice to make variables that only have one or two letters in but in certain circumstances it's it ends up being kind of acceptable and makes your code cleaner and usually file reader is something that use as an intermediate step to reading a file so you don't refer to it much later on in your code or we won't go into that now but just for a moment I just want you to look at how this works in terms of exceptions so I'm going to set this fr variable equal to a new file reader and I'm going to pass it the file object but I declared here so I'll pass the file object to the constructor and again I'll add the import with ctrl shift o and now this is what I wanted to show you because we've still got an error and whenever you see an error like that the important thing is to have your mouse over the error icon at the left here and here we see whether there are two errors here one is that it says F R is not closed and I'll leave that for a moment but the top error is it says unhandled exception type file not found exception and exceptions are actually they're just ordinary objects except that they derive from a class called exception and you use them in a particular way now whenever you get an exception an error like that and it tells you unhandled exception there are two ways you can deal with it and click on the arrow and you'll see the two ways so the first way is this bad throws declaration and let's just click that and see what happens so what's happened is it's said originally that this and had an unhandled file not found exception and when I went to add throws it's actually added this to the header of my main method it says throws file not found exception and that fixes the problem so if I save this and I run it bearing in mind that we haven't got a test X so this file doesn't exist if I run it I get some red text down here and when you see red text like this this is called a stub trace or yeah a trace and the important thing to do is scroll right up and look at the top line and read it from the top line down so here it says exception in thread and main and Java IO file not found exception so this tells us kind of what kind of error we're dealing with and then it's got some more specific information here the system cannot find the file specified and often you will get more specific information and then if we look down a little bit we just go down a bit finally we come to a point where we've got a little a reference to some code that we've written ourselves so I've created at Java myself it's this file here and it says patent doc Java 13 which means line 13 and I can click on that error and I can see exactly where the problem occurred so now I know what happened I know that the problem was test X wasn't found and it occurred at this line 13 on in app dot Java and an exception as being thrown and what that means is and that basically we've ended up with this kind of red text and a reason that this has appeared down here is because we think of this method here as it encounters an error and it reacts to the error by throwing an exception it's as if it's thrown an object straight out of itself and execution of my program has stopped at that point and the exceptions been thrown out of after the main method and that was possible because it's got this throws file not found exception declaration here and when an exception is thrown out of the main method you get a kind of stack trace like this with red text that tells you what the problem is let's take a look and not a method of handling an exception and what I'll do is I'll just right click and I'll go to new package and let's call this demo one and I'll just put this that Java into demo one and I'll create a new main method here so I'll rightclick go to new class I'll call it up again and I'll put it in a package called demo two and we'll look at a different way of handling an exception here so let's copy this stuff and I'll go to my second app and I'll paste this in here let's get rid of these comments which always annoy me and I'll do ctrl shift F to format that and now let's look at the other alternative I'll just rightclick and clearly this error I'll hover over the area and again it says unhandled exception so I click the error and I go to surround with trycatch and this is called this whole thing here is called a trycatch block and what this is doing is it's saying try to do this code and if that code throws an exception then go into the catch block and if this throws an exception we will immediately go into the catch block so if you put other lines down here they wouldn't be executed if that throws an exception but if it doesn't throw an exception of course you will just carry on executing sequentially line by line but soon as you throw an exception it's it kind of throws you straight out of what you're currently doing now in this case we're not throwing the exception out of main what we're doing is we're catching the exception so here we can put code which will be executed if that exception is thrown and the default here is to say e dot print stamp trace and the exception is declared here it's like a probably looks like a parameter to a method but it's not and this exception can be caught by this catch block of the try catch block and we're saying just print and stat trace without exception and if I run that it looks much the same as before and again we can click on the line and find out where the exception was thrown if I were to create that file in here it's just right click and go new file so rightclick the project folder which is the working directory of the program and I can just create a test of text and click finish so now we shouldn't throw that error and if I run the program now we don't get an error we don't get the far not found exception being thrown because the file is found now so the exception is only thrown if an error condition arises I'll just delete that again and you can put whatever code you like in here you don't have to print the stack trace so by default you get this put in and it's very very handy but you could use anything you like for example I could put this out in here system dialed or print Ln and I could say let's say file not found and it's two plus and let's use my file object up here and I'll just do filed up to string which I think will give us a nice representation of the file I'll just run that and it says file not farm test dot text so you can handle an exception any way you like and if I had code in here the safe side continuing and let's put common here this will not be executed if the file if an exception is thrown so if an exception is thrown that line just does not run so it immediately kind of from here if it throws an exception immediately goes into that catch block but if you caught an exception then you can continue so I can say here finished and if I run this even though we've got an exception being thrown we're catching it were handling it and then were continuing with our code and that this is quite a lot to absorb but as usual I would say if you typed it out yourself you'll really quickly see how it works and it's just a matter of getting used to the terminology throwing an exception catching an exception and just typing it and seeing how it works and you don't really need to puzzle over it too much and because typing is your kind of magic shortcut to actually understanding this stuff I find by one throat I want to show you just one more thing here so I'm going to create a app three let's close this well app an app in demo three and I'll rightclick and go to new class let's call this app again and oh I forgot a package that's quite a new package a rightclick and go to new package I'll call this demo three and I'll just drag my anti Java into this and once again I'll have some code in here that tries to open a nonexistent file and this time what I want to show you is I'm going to have another method in here and because I haven't got a instance of my app class I haven't gotten up objet is nowhere in here does the same new app if I want to declare a method here and use it at the moment it would have to be static so empty is a nonstatic method of a class then you have to do new on that class somewhere and rather than do that I'm just going to say public static void open file so I've got a new method here and I'm gonna cut this and put it in this method here and here I'm going to call this method so in main which is the entry point of the program I'm going to call Open File like that and now let's well again if I were to click the error and I were to put a trycatch block in we could just handle it here and that would be the end of it but if I put throws in so I click and I go to add throws declaration it's going to add the throws declaration to the method I'm in so now open file throws file not found exception and now I've got an error in main and because I've got a handle ID section somewhere or I must throw out a many ultimately so this open file is now itself throwing the exception so the exception starts and file reader it gets thrown instead of being caught or handled in a trycatch block it gets thrown out of open file and now I need to either throw it out of main or catch it here and for example I could just go to add throws and I get throw a thread clean out of my program in effect and I run that and it's a sense before or another possibility is again two throws and declaration on main and I handle it now in main I go to surround a try/catch and again I could say something like this out could not open file although it's always good when you when you have an error to have a specific a message as you can to your user if the user was intended to see this the user should never see a stacktrace like this unless you want to horrify them because all users all kind of nontechnical users and even technical ones are horrified by stack traces so don't let your application produce a stack trace if you intend it to be distributed and used by other people and here I would make it say couldn't open files such and such and I'd do something like maybe pass the file name into here so I wouldn't let it just say couldn't open file because that's too vague a message let's just put quick note here yes this message is too vague but anyway the point is that I can if I throw the exception out of open file I can then catch it further up the stack and catch it in main because we think of the methods the method calls as being like a stack well one calls the other which calls another which calls another and it's like this a stack of methods and you kind of take the methods off the stack and run them one by one or at least the java virtual machine does so same way okay I'll run this open file and then I'll carry on with main and so on anyway that's all for this tutorial and it is a lot of stuff but if you play around with it you'll see it's not that complicated and we're going to move on probably in the next tutorial we'll move on to looking at some more exception handling stuff and probably will look at different kinds of exceptions and stuff like that so that's it for this tutorial and you can find this code on Cave of Programming calm if you go to the front page at least in a moment and look down and see links to pages for these tutorials where you can see the source code and I've also got courses on programming desktop applications and stuff like that so certainly check those out ok and that's it for today and until next time coding
