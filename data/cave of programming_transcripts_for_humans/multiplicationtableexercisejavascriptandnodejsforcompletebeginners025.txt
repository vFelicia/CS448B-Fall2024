With timestamps:

00:00 - hello this is John from cave of
00:02 - programming calm continuing my free
00:05 - course on nodejs and JavaScript for
00:07 - complete beginners in the last video we
00:10 - took a look at control characters and we
00:12 - also saw how you can use process that
00:14 - standardout dot write to write text
00:17 - without a newline appearing after it in
00:20 - this video I'm going to give you an
00:23 - exercise it's going to use this stuff
00:25 - and it's also going to use a lot of what
00:27 - we've seen so far in the course so as
00:30 - always I would say if you're a beginner
00:33 - and don't feel that you've got to plan
00:35 - out programs in your head at the start
00:38 - necessarily that can hold you back so if
00:41 - you have a program you want to write
00:43 - whether it's an exercise or it's just
00:45 - something you've thought of have a go at
00:47 - it see how far you can get with it
00:49 - can you write any bits of it can you
00:51 - write something that's similar to what
00:53 - you what you actually want you know just
00:56 - have a go get in type stuff
00:58 - see what it does experiment and I think
01:01 - that's a lot more profitable than just
01:02 - staring at a blank sort of page and
01:05 - thinking how would I start and complete
01:09 - and finish this program you know just
01:10 - launch into it so I'll give you an
01:13 - exercise is you may find it very easy
01:16 - but then again you may find it very hard
01:18 - the important thing is just to try or
01:20 - else if you don't do this do some
01:22 - practice of your own because you have to
01:24 - practice this stuff you can't just watch
01:26 - videos you've got to practice stuff to
01:28 - be able to use it so bear in mind that
01:31 - when I give you this exercise the thing
01:33 - to do is don't don't just look at a
01:36 - blank screen and be overwhelmed by it
01:37 - just have a go at it and see where you
01:41 - can get with it see what bits you can do
01:43 - you know so I'll describe the exercise
01:46 - and then you can pause the video if you
01:48 - want to try it and then I'll actually
01:49 - show you how to do it ok so as usual I'm
01:53 - going to start my multiplication j/s
01:56 - here my script with you stripped so this
02:01 - exercise here is to create a
02:06 - multiplication table that's not quite
02:10 - all the exercise though so what we want
02:12 - to do is we
02:13 - to end up as clear the console here is
02:15 - annoying me so we want to end up let's
02:18 - use a multi-line string here I sorry a
02:21 - multi-line comment we want to end up
02:23 - printing in other words displaying on
02:25 - the console a multiplication table that
02:28 - looks something like this so we have the
02:31 - times one sort of multiplication
02:38 - multiplications let's write one two
02:40 - separating these by tabs and we go all
02:43 - the way up to eventually one times ten
02:47 - then on the next line we'll have two
02:49 - four six eight all the way up to 20 and
02:57 - then we'll have some more lines and then
02:59 - finally the last line will be 10 20 30
03:02 - 40 all the way up to 100 ideally these
03:07 - should be lined up but if they're not
03:09 - exactly lined up then that's okay so we
03:13 - want to output we want to print this in
03:15 - other words out put it on the console
03:16 - it's the ten times multiplication table
03:20 - all the way from 1 times 1 to 10 times
03:23 - 10 and a dot surface or the bits you've
03:26 - got to fill in but there's a little
03:28 - twist here because I'm going to suggest
03:30 - that you create a 2-dimensional array
03:33 - and fill all this data all these numbers
03:36 - into the 2-dimensional array and then
03:39 - later in your program after some blank
03:42 - lines write some code that outputs the
03:46 - entire content of that 2-dimensional
03:49 - array so the end result will be will be
03:52 - that you'll print this ten times ten
03:55 - multiplication table but you'll do it by
03:58 - first filling in a two-dimensional array
04:01 - and then later on in your program you
04:03 - will work through that array and output
04:06 - it all okay and these are these are tab
04:10 - characters separating the numbers and
04:12 - after each line we have a well we have a
04:14 - newline character so that each line
04:16 - comes out on a separate line all right
04:19 - so if you want to have a go at that
04:20 - pause the video now and try and don't
04:22 - forget just just
04:24 - try to do some bits you can if you could
04:26 - if you're overwhelmed by the whole thing
04:27 - just simplify it can you even output
04:29 - these numbers never mind about the array
04:32 - never mind the table can you output 1 2
04:34 - 3 4 and so on
04:35 - so start simple and build up and see
04:38 - where you can get with it
04:39 - alright so pause the video now if you
04:41 - want to try that alright so let's take a
04:44 - look at it the first thing that we need
04:46 - is a two dimensional array and a two
04:49 - dimensional arrays a one dimensional
04:51 - array where the elements are themselves
04:53 - arrays so let's create a one dimensional
04:55 - array I'll just call it table so let's
04:58 - say let table equal an empty square
05:01 - brackets to initialize it to an empty
05:04 - array now if I wanted to just add one
05:09 - row to this table I would create a loop
05:11 - like for let I equals 0 I less than less
05:17 - than 10 let's say I plus plus and then
05:24 - we could add value slot tables so i here
05:27 - will go from 0 to 9 which is not quite
05:30 - what we want because even for the first
05:31 - row we want 1 to 10 not 0 to 9 but it's
05:34 - a big step in the right direction what
05:37 - if we wanted not just one row but 10
05:40 - rows well then we could have a loop
05:43 - within a loop so we could have let for
05:45 - let's let's call this j equals 0 J less
05:49 - than 10 j plus plus can we use that to
05:55 - fill a two-dimensional array with
05:57 - numbers so could we even use it to
06:00 - create a multiplication table goes from
06:03 - 0 times 0 to 9 times 9 and let's try
06:07 - that so we want to add rows to our table
06:11 - so within this outer loop we've got a
06:14 - crate rows every time we go around this
06:17 - loop we need to create a row and add it
06:19 - to the table so that's right let we'll
06:22 - call it row equal an empty array and
06:25 - then we can add values to this row in
06:28 - this inner loop so Rho dot Posche J
06:34 - that will give us well that would that
06:38 - would basically just loop around and
06:39 - create ten rows but we haven't added
06:41 - added them to the table so after we in
06:45 - add some numbers to the row let's do
06:48 - table dot push and add the row to the
06:50 - table so now we're adding ten rows to
06:53 - our table where each row contains the
06:55 - numbers 0 to 9 which is a step in the
06:58 - right direction
06:59 - let's already see if we can display that
07:01 - so we'll go down further in a program
07:04 - and how would we display this well we
07:08 - could display it with a nested loop
07:12 - again so we need to for each row we need
07:16 - to work along the row and output the
07:20 - numbers let's try this so let's have for
07:23 - int I equals naught I less than 10
07:29 - actually how big is this outer array the
07:33 - length of its table dot length let's do
07:36 - that and I plus plus and then within
07:42 - that it's not in that should be let I'm
07:46 - going to confuse with C in Java all
07:48 - right
07:48 - so within that we can write for let J
07:52 - equal 0 J less than what well we need to
07:57 - get a row out of the table let's let's
08:00 - do that so how would we get a row from
08:03 - this table how would we get the road the
08:06 - 8th row we could write let Rho equal
08:09 - table I and then the inner loops got to
08:13 - iterate over this row so we could write
08:15 - let J corn or J less than Rho dot length
08:19 - and J plus plus then we can get values
08:26 - out of the row so we could write let in
08:29 - value equal row J let's display these
08:36 - values and see what we've gone I don't
08:38 - want to get each value on a new line so
08:41 - let's use process dot
08:46 - that's autocomplete being unhelpful
08:48 - process esque dot standard outright and
08:54 - we output and value here what does that
08:57 - give us let's have a look gonna run the
09:04 - right file that would help so node
09:06 - multiplication dodge is we've got an
09:10 - error why is there an error well it's
09:12 - because processed at standard outright
09:15 - will not write numbers it will only
09:17 - write strings so as we saw in the last
09:19 - video here we have to write to string
09:23 - let's try that yeah well we've got a
09:29 - load of numbers but for one thing we've
09:35 - got one massive line we need new lines
09:37 - in there where should we put the new
09:39 - lines so every time after we output a
09:41 - row which we're doing here we want a new
09:44 - line character so we could use we could
09:48 - use console.log to do that let's write
09:50 - console dot log and just empty brackets
09:52 - and see how that looks
09:56 - it's is a lot better but well the
10:01 - numbers are clearly not the right
10:02 - numbers but they're halfway what we want
10:05 - really
10:06 - so can we separate the numbers by tabs
10:10 - well after each after each write of a
10:14 - number we want the tab character so I
10:16 - could just add on the top here with plus
10:18 - or I could use another process that
10:21 - stands out dot right let's try it
10:25 - backslash T what does that look like
10:32 - well now we've got numbers now the only
10:34 - problem is we're outputting the first
10:36 - row well that's not the only problem but
10:39 - we're outputting the first row over and
10:41 - over again it also starts at zero which
10:44 - we don't want so we need to now now we
10:47 - were outputting this two-dimensional
10:49 - array successfully we need to take a
10:51 - look at the content of it which is not
10:53 - quite right so to get in a
10:55 - multiplication table while all I need to
10:57 - do really is multiply
10:59 - I by J so multiply the sort of column
11:02 - number column index spider row index
11:04 - really so if I write I times that's
11:08 - right I times J how does that look okay
11:16 - let's zoom out and go back to the
11:18 - console I did something wrong here oh no
11:23 - there we go
11:24 - right I'll just clear this and then
11:26 - output it so now we've got it is a
11:30 - multiplication table the problem is it
11:33 - goes from 0 times 0 to 9 times 9 we want
11:36 - it to go from 1 times 1 to 10 times 10
11:40 - really what we want to do here is
11:42 - instead of I times J we want to add 1 to
11:45 - I and add 1 to J so we can do that if we
11:49 - just we're going to have to use brackets
11:50 - to to stop this expression that we're
11:57 - going to write being translated in the
11:58 - wrong way but that's right I plus 1 in
12:01 - brackets times J plus 1 so that that
12:07 - means that we add once I before we
12:11 - multiply it and then we multiply it by J
12:14 - plus 1 so let's run this and we've got
12:21 - what we want we've got 1 times 1 all the
12:23 - way up to 10 times 10 ok so if you did
12:30 - try this exercise and you you've got
12:34 - this printing out and you used a
12:37 - two-dimensional array to store numbers
12:39 - and then access them again afterwards
12:41 - then you've successfully completed the
12:43 - exercise whether you use the exact same
12:46 - techniques that I've used here or
12:48 - something slightly different and if you
12:52 - tried the exercise and you just couldn't
12:54 - get it to work then don't feel bad you
12:57 - know if you did anything at all that's
13:00 - that's really great and I would say if
13:02 - you didn't get exercise to work try
13:05 - typing out this code and you know see
13:09 - that it actually works you'll learn a
13:10 - lot just by typing it out and try
13:13 - experiment
13:14 - and check that you understand it if
13:16 - possible try to see what's going on if
13:19 - you don't quite understand something why
13:21 - something's there or whatever try
13:23 - removing it or changing it and see if
13:26 - you can figure out exactly what's going
13:27 - on here that's that's a really good
13:30 - thing to do
13:30 - so what's the difficult exercise if you
13:33 - are a complete beginner so don't feel
13:36 - bad if you couldn't get this working but
13:38 - now you've seen how it is done try it
13:42 - out for yourself
13:42 - and check that you can get this code
13:45 - working don't forget you can find all
13:47 - the code for this course on github comm
13:50 - slash cave of programming all one word
13:54 - and then go to our no js' repository but
13:57 - there isn't value for learning purposes
13:59 - there isn't value really in copying and
14:02 - pasting code what you need to do is type
14:04 - it out yourself even if it might seem
14:06 - boring and if you find yourself getting
14:08 - too bored by typing don't forget you can
14:10 - learn to touch type you know if you
14:12 - search on the internet there are lots of
14:14 - free touch typing programs that teach
14:17 - you to type without looking at the
14:19 - keyboard and that can massively speed up
14:21 - your typing probably only half a
14:23 - programmers do touch type you don't have
14:25 - to but it can speed up your learning by
14:27 - making you essentially less we looked
14:30 - into type stuff and it's a bit tricky to
14:33 - learn at first but after a few weeks of
14:36 - forcing yourself to just touch tight
14:38 - with emails or whatever you write then
14:41 - you know you'll get the hang of it and
14:43 - it will speed up your learning I think
14:45 - with coding quite a lot but anyway okay
14:48 - so we'll leave it there for this video
14:49 - until next time happy coding

Cleaned transcript:

hello this is John from cave of programming calm continuing my free course on nodejs and JavaScript for complete beginners in the last video we took a look at control characters and we also saw how you can use process that standardout dot write to write text without a newline appearing after it in this video I'm going to give you an exercise it's going to use this stuff and it's also going to use a lot of what we've seen so far in the course so as always I would say if you're a beginner and don't feel that you've got to plan out programs in your head at the start necessarily that can hold you back so if you have a program you want to write whether it's an exercise or it's just something you've thought of have a go at it see how far you can get with it can you write any bits of it can you write something that's similar to what you what you actually want you know just have a go get in type stuff see what it does experiment and I think that's a lot more profitable than just staring at a blank sort of page and thinking how would I start and complete and finish this program you know just launch into it so I'll give you an exercise is you may find it very easy but then again you may find it very hard the important thing is just to try or else if you don't do this do some practice of your own because you have to practice this stuff you can't just watch videos you've got to practice stuff to be able to use it so bear in mind that when I give you this exercise the thing to do is don't don't just look at a blank screen and be overwhelmed by it just have a go at it and see where you can get with it see what bits you can do you know so I'll describe the exercise and then you can pause the video if you want to try it and then I'll actually show you how to do it ok so as usual I'm going to start my multiplication j/s here my script with you stripped so this exercise here is to create a multiplication table that's not quite all the exercise though so what we want to do is we to end up as clear the console here is annoying me so we want to end up let's use a multiline string here I sorry a multiline comment we want to end up printing in other words displaying on the console a multiplication table that looks something like this so we have the times one sort of multiplication multiplications let's write one two separating these by tabs and we go all the way up to eventually one times ten then on the next line we'll have two four six eight all the way up to 20 and then we'll have some more lines and then finally the last line will be 10 20 30 40 all the way up to 100 ideally these should be lined up but if they're not exactly lined up then that's okay so we want to output we want to print this in other words out put it on the console it's the ten times multiplication table all the way from 1 times 1 to 10 times 10 and a dot surface or the bits you've got to fill in but there's a little twist here because I'm going to suggest that you create a 2dimensional array and fill all this data all these numbers into the 2dimensional array and then later in your program after some blank lines write some code that outputs the entire content of that 2dimensional array so the end result will be will be that you'll print this ten times ten multiplication table but you'll do it by first filling in a twodimensional array and then later on in your program you will work through that array and output it all okay and these are these are tab characters separating the numbers and after each line we have a well we have a newline character so that each line comes out on a separate line all right so if you want to have a go at that pause the video now and try and don't forget just just try to do some bits you can if you could if you're overwhelmed by the whole thing just simplify it can you even output these numbers never mind about the array never mind the table can you output 1 2 3 4 and so on so start simple and build up and see where you can get with it alright so pause the video now if you want to try that alright so let's take a look at it the first thing that we need is a two dimensional array and a two dimensional arrays a one dimensional array where the elements are themselves arrays so let's create a one dimensional array I'll just call it table so let's say let table equal an empty square brackets to initialize it to an empty array now if I wanted to just add one row to this table I would create a loop like for let I equals 0 I less than less than 10 let's say I plus plus and then we could add value slot tables so i here will go from 0 to 9 which is not quite what we want because even for the first row we want 1 to 10 not 0 to 9 but it's a big step in the right direction what if we wanted not just one row but 10 rows well then we could have a loop within a loop so we could have let for let's let's call this j equals 0 J less than 10 j plus plus can we use that to fill a twodimensional array with numbers so could we even use it to create a multiplication table goes from 0 times 0 to 9 times 9 and let's try that so we want to add rows to our table so within this outer loop we've got a crate rows every time we go around this loop we need to create a row and add it to the table so that's right let we'll call it row equal an empty array and then we can add values to this row in this inner loop so Rho dot Posche J that will give us well that would that would basically just loop around and create ten rows but we haven't added added them to the table so after we in add some numbers to the row let's do table dot push and add the row to the table so now we're adding ten rows to our table where each row contains the numbers 0 to 9 which is a step in the right direction let's already see if we can display that so we'll go down further in a program and how would we display this well we could display it with a nested loop again so we need to for each row we need to work along the row and output the numbers let's try this so let's have for int I equals naught I less than 10 actually how big is this outer array the length of its table dot length let's do that and I plus plus and then within that it's not in that should be let I'm going to confuse with C in Java all right so within that we can write for let J equal 0 J less than what well we need to get a row out of the table let's let's do that so how would we get a row from this table how would we get the road the 8th row we could write let Rho equal table I and then the inner loops got to iterate over this row so we could write let J corn or J less than Rho dot length and J plus plus then we can get values out of the row so we could write let in value equal row J let's display these values and see what we've gone I don't want to get each value on a new line so let's use process dot that's autocomplete being unhelpful process esque dot standard outright and we output and value here what does that give us let's have a look gonna run the right file that would help so node multiplication dodge is we've got an error why is there an error well it's because processed at standard outright will not write numbers it will only write strings so as we saw in the last video here we have to write to string let's try that yeah well we've got a load of numbers but for one thing we've got one massive line we need new lines in there where should we put the new lines so every time after we output a row which we're doing here we want a new line character so we could use we could use console.log to do that let's write console dot log and just empty brackets and see how that looks it's is a lot better but well the numbers are clearly not the right numbers but they're halfway what we want really so can we separate the numbers by tabs well after each after each write of a number we want the tab character so I could just add on the top here with plus or I could use another process that stands out dot right let's try it backslash T what does that look like well now we've got numbers now the only problem is we're outputting the first row well that's not the only problem but we're outputting the first row over and over again it also starts at zero which we don't want so we need to now now we were outputting this twodimensional array successfully we need to take a look at the content of it which is not quite right so to get in a multiplication table while all I need to do really is multiply I by J so multiply the sort of column number column index spider row index really so if I write I times that's right I times J how does that look okay let's zoom out and go back to the console I did something wrong here oh no there we go right I'll just clear this and then output it so now we've got it is a multiplication table the problem is it goes from 0 times 0 to 9 times 9 we want it to go from 1 times 1 to 10 times 10 really what we want to do here is instead of I times J we want to add 1 to I and add 1 to J so we can do that if we just we're going to have to use brackets to to stop this expression that we're going to write being translated in the wrong way but that's right I plus 1 in brackets times J plus 1 so that that means that we add once I before we multiply it and then we multiply it by J plus 1 so let's run this and we've got what we want we've got 1 times 1 all the way up to 10 times 10 ok so if you did try this exercise and you you've got this printing out and you used a twodimensional array to store numbers and then access them again afterwards then you've successfully completed the exercise whether you use the exact same techniques that I've used here or something slightly different and if you tried the exercise and you just couldn't get it to work then don't feel bad you know if you did anything at all that's that's really great and I would say if you didn't get exercise to work try typing out this code and you know see that it actually works you'll learn a lot just by typing it out and try experiment and check that you understand it if possible try to see what's going on if you don't quite understand something why something's there or whatever try removing it or changing it and see if you can figure out exactly what's going on here that's that's a really good thing to do so what's the difficult exercise if you are a complete beginner so don't feel bad if you couldn't get this working but now you've seen how it is done try it out for yourself and check that you can get this code working don't forget you can find all the code for this course on github comm slash cave of programming all one word and then go to our no js' repository but there isn't value for learning purposes there isn't value really in copying and pasting code what you need to do is type it out yourself even if it might seem boring and if you find yourself getting too bored by typing don't forget you can learn to touch type you know if you search on the internet there are lots of free touch typing programs that teach you to type without looking at the keyboard and that can massively speed up your typing probably only half a programmers do touch type you don't have to but it can speed up your learning by making you essentially less we looked into type stuff and it's a bit tricky to learn at first but after a few weeks of forcing yourself to just touch tight with emails or whatever you write then you know you'll get the hang of it and it will speed up your learning I think with coding quite a lot but anyway okay so we'll leave it there for this video until next time happy coding
