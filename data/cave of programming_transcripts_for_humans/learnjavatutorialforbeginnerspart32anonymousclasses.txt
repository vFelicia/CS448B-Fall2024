With timestamps:

00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from cave of
00:19 - programming calm and in this tutorial
00:21 - we're going to look at anonymous classes
00:24 - in Java so anonymous classes are
00:28 - basically a way of either extending an
00:32 - existing class or implementing an
00:35 - interface in such a way that you can
00:37 - just do it kind of one time there's a
00:38 - one-shot thing which is which is often
00:42 - quite useful so let's take a look at a
00:46 - couple of examples here and I'm going to
00:48 - create the class here to act as a parent
00:51 - class and I'll call it machine and let's
00:57 - give that a method public for you to
00:59 - start and I'll just put this out in
01:03 - there and let's say starting machine so
01:09 - just a really simple class with one
01:11 - method not to create a new object from
01:14 - that class of course I say machine
01:17 - machine one let's say and then this bit
01:21 - is just the variable declarations it's
01:23 - not actually creating a object and I
01:26 - might point this reference variable here
01:28 - at an object a new object by saying
01:31 - equals a new machine and so here we've
01:37 - got an actual object an actual instance
01:39 - of this class a sort of an actual thing
01:43 - that's been created from this blueprint
01:45 - which among other things contains this
01:47 - method so I can now run start by saying
01:51 - machine one not start and of course if I
01:56 - run that we'll see
01:59 - after eclipse has had a bit of a thing
02:03 - down in the console hopefully we'll see
02:07 - starting machine and here we go now
02:14 - the way an anonymous class works is
02:17 - let's say I want to override this start
02:21 - method a machine of course the normal
02:24 - way to do it is you create a class let's
02:27 - say camera and you say the extends
02:30 - machine and you implement the start
02:32 - method and they're overriding the one in
02:34 - the parent class but I can also open a
02:37 - curly parenthesis here and put the
02:40 - closing one down there this looks a bit
02:42 - surprising if you haven't seen it before
02:44 - and in this space here I can actually
02:47 - override methods so I can say for
02:54 - example public and southern override
02:57 - annotation just to double check that I
02:59 - am overriding the write method I could
03:01 - say here override public for it start or
03:09 - I could use a shortcut shortcut in
03:11 - Eclipse here and just right-click and go
03:12 - to source override implement methods
03:16 - that would also work and then here I can
03:19 - supply a new implementation so I can say
03:22 - and say camera snapping so now if I run
03:28 - this if Sam is running the start method
03:32 - in machine but I've overridden that here
03:35 - and if you look at this object the one
03:38 - that Sam I'm creating we're doing new
03:40 - here you could ask like well what is the
03:43 - class of that object it's not machine ok
03:47 - that the class of the variable the type
03:48 - of this variable is machine but this
03:51 - thing is actually a child class of
03:53 - machine it's not machine itself because
03:55 - it doesn't have the machine
03:58 - implementation this start method as a
04:00 - overridden implementation as though
04:02 - you've done extends on the class so
04:05 - actually the type of this object it's
04:08 - some child class up machine that doesn't
04:10 - actually have a name
04:12 - and that's why it's called an anonymous
04:13 - class with anonymous classes there's no
04:17 - there's no way that you can create a new
04:19 - object from this class here but it's as
04:26 - good as a one-shot thing if you just
04:28 - want one example of some classes a
04:31 - little bit different to an existing
04:32 - class you can use an anonymous class
04:35 - syntax like this let's just take a look
04:37 - at one more example here
04:39 - that's supposing I have an interface
04:42 - let's say interface what should we have
04:47 - interface plant let's say and let's say
04:50 - that the plant interface I could give it
04:53 - lots of methods but I'll just give it
04:54 - one it's an example so I'll give it a
04:57 - public void grow and the X it's an
05:03 - interface of course we don't have any
05:05 - code so there's no Cali parentheses we
05:08 - just have a semicolon there now to to
05:12 - implement this interface iCard create a
05:15 - class and say that it implements plant
05:18 - and then I'd be forced to add a method
05:21 - to that class with this with this header
05:24 - but another way of doing this is to use
05:26 - again an anonymous class syntax so I
05:30 - could say here plants plants 1 equals
05:34 - new plant now this isn't going to work
05:37 - in itself it's going to give me an error
05:39 - saying cannot instantiate the type plan
05:42 - instantiate means create an object from
05:45 - the class of the interface and you can't
05:47 - instantiate interfaces because there's
05:50 - no code there to actually put into an
05:53 - object so this syntax for an interface
05:57 - it's not legal in itself it's just as if
05:59 - I'm kind of pretending here that
06:02 - planteth a is a class but it isn't and
06:05 - so this won't actually work but again
06:08 - what I can do is open a curly
06:09 - parenthesis and put a closing 1 in there
06:12 - followed by a semicolon at the end and
06:15 - now in here actually the quickest way to
06:17 - do this
06:18 - is to click on this error and add
06:21 - unimplemented methods here and now I can
06:25 - implement the grow method of plant right
06:28 - here with this anonymous class syntax I
06:32 - don't need this override annotation if I
06:35 - here it seems strange that we say
06:37 - override to implement the method in an
06:39 - interface it is a sort of overrides I
06:41 - suppose but anyway leaving that side
06:45 - let's get rid of at least the blank
06:47 - lines and this override annotation is
06:49 - not necessary I could delete it and
06:53 - explain here sis our plants growing and
06:58 - now I can declare a variable of this
07:01 - type the type of the interface which I
07:04 - already have done here and then I can
07:07 - say plant one dot grow like that
07:11 - so I can call a method of this anonymous
07:14 - class which actually implements this
07:17 - interface let's say grow there and once
07:20 - again if I just run that now save it and
07:23 - run it then it's going to say plant
07:26 - growing so that's it for this tutorial
07:29 - and in the future we're going to look
07:32 - perhaps some more examples of this
07:34 - because often what you do is you declare
07:37 - an anonymous class while you actually
07:39 - pass it to a method at the same time and
07:41 - that's often used for the kind of the
07:44 - kind of listener event pattern which is
07:48 - a notices is tremendously confusing and
07:50 - difficult for beginners in Java just
07:53 - because there are several different
07:54 - concepts all in one kind of just in a
07:57 - few lines and this is one of the
07:59 - concepts that you'll need to understand
08:02 - how event kind of listeners in GUI
08:06 - programming or often implemented and
08:09 - even if you're not doing any GUI that's
08:12 - graphical user interface programming you
08:14 - can you can do all sorts of things with
08:16 - this technique which are going to show
08:18 - you in huge tutorials thanks again for
08:21 - all the fantastic comments that people
08:23 - have left on YouTube and on cave of
08:25 - programming com
08:26 - it really makes it worthwhile creating
08:28 - these for the
08:29 - so many fans and discos going to be on K
08:32 - for programming calm and I hope you'll
08:35 - join me again next time until then
08:42 - [Music]
08:47 - you
08:48 - [Music]

Cleaned transcript:

hello this is John from cave of programming calm and in this tutorial we're going to look at anonymous classes in Java so anonymous classes are basically a way of either extending an existing class or implementing an interface in such a way that you can just do it kind of one time there's a oneshot thing which is which is often quite useful so let's take a look at a couple of examples here and I'm going to create the class here to act as a parent class and I'll call it machine and let's give that a method public for you to start and I'll just put this out in there and let's say starting machine so just a really simple class with one method not to create a new object from that class of course I say machine machine one let's say and then this bit is just the variable declarations it's not actually creating a object and I might point this reference variable here at an object a new object by saying equals a new machine and so here we've got an actual object an actual instance of this class a sort of an actual thing that's been created from this blueprint which among other things contains this method so I can now run start by saying machine one not start and of course if I run that we'll see after eclipse has had a bit of a thing down in the console hopefully we'll see starting machine and here we go now the way an anonymous class works is let's say I want to override this start method a machine of course the normal way to do it is you create a class let's say camera and you say the extends machine and you implement the start method and they're overriding the one in the parent class but I can also open a curly parenthesis here and put the closing one down there this looks a bit surprising if you haven't seen it before and in this space here I can actually override methods so I can say for example public and southern override annotation just to double check that I am overriding the write method I could say here override public for it start or I could use a shortcut shortcut in Eclipse here and just rightclick and go to source override implement methods that would also work and then here I can supply a new implementation so I can say and say camera snapping so now if I run this if Sam is running the start method in machine but I've overridden that here and if you look at this object the one that Sam I'm creating we're doing new here you could ask like well what is the class of that object it's not machine ok that the class of the variable the type of this variable is machine but this thing is actually a child class of machine it's not machine itself because it doesn't have the machine implementation this start method as a overridden implementation as though you've done extends on the class so actually the type of this object it's some child class up machine that doesn't actually have a name and that's why it's called an anonymous class with anonymous classes there's no there's no way that you can create a new object from this class here but it's as good as a oneshot thing if you just want one example of some classes a little bit different to an existing class you can use an anonymous class syntax like this let's just take a look at one more example here that's supposing I have an interface let's say interface what should we have interface plant let's say and let's say that the plant interface I could give it lots of methods but I'll just give it one it's an example so I'll give it a public void grow and the X it's an interface of course we don't have any code so there's no Cali parentheses we just have a semicolon there now to to implement this interface iCard create a class and say that it implements plant and then I'd be forced to add a method to that class with this with this header but another way of doing this is to use again an anonymous class syntax so I could say here plants plants 1 equals new plant now this isn't going to work in itself it's going to give me an error saying cannot instantiate the type plan instantiate means create an object from the class of the interface and you can't instantiate interfaces because there's no code there to actually put into an object so this syntax for an interface it's not legal in itself it's just as if I'm kind of pretending here that planteth a is a class but it isn't and so this won't actually work but again what I can do is open a curly parenthesis and put a closing 1 in there followed by a semicolon at the end and now in here actually the quickest way to do this is to click on this error and add unimplemented methods here and now I can implement the grow method of plant right here with this anonymous class syntax I don't need this override annotation if I here it seems strange that we say override to implement the method in an interface it is a sort of overrides I suppose but anyway leaving that side let's get rid of at least the blank lines and this override annotation is not necessary I could delete it and explain here sis our plants growing and now I can declare a variable of this type the type of the interface which I already have done here and then I can say plant one dot grow like that so I can call a method of this anonymous class which actually implements this interface let's say grow there and once again if I just run that now save it and run it then it's going to say plant growing so that's it for this tutorial and in the future we're going to look perhaps some more examples of this because often what you do is you declare an anonymous class while you actually pass it to a method at the same time and that's often used for the kind of the kind of listener event pattern which is a notices is tremendously confusing and difficult for beginners in Java just because there are several different concepts all in one kind of just in a few lines and this is one of the concepts that you'll need to understand how event kind of listeners in GUI programming or often implemented and even if you're not doing any GUI that's graphical user interface programming you can you can do all sorts of things with this technique which are going to show you in huge tutorials thanks again for all the fantastic comments that people have left on YouTube and on cave of programming com it really makes it worthwhile creating these for the so many fans and discos going to be on K for programming calm and I hope you'll join me again next time until then you
