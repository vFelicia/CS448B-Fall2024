With timestamps:

00:00 - hello in this video we're going to take
00:02 - a look at function expressions in
00:04 - javascript so uh my name's
00:07 - john uh i'm from the website i'm i'm the
00:10 - creator of the website
00:11 - caverprogramming.com
00:13 - and we're continuing here our course on
00:16 - node.js and javascript for beginners
00:20 - so i'm going to start with you strict as
00:23 - always
00:25 - sometimes i forget that but really
00:27 - should try to remember it
00:29 - and let's create a function in the
00:32 - most kind of basic way so this is called
00:35 - a function definition which we've
00:37 - already seen in this course
00:38 - we write function and let's create a
00:41 - function that may be
00:43 - just says hello so let's write function
00:46 - i'll call it greet one
00:49 - round brackets and curly brackets
00:52 - so we can use numbers in function names
00:56 - and
00:56 - variable names we just can't start them
00:59 - with a number so this is a valid
01:00 - function name
01:01 - i'm calling it greet one because i'm
01:03 - going to have another two of these
01:05 - and i don't want to have to think of
01:06 - completely different names every time
01:08 - so i can have greek one greek two and
01:10 - greek three and let's just
01:12 - write console dot log
01:15 - and we'll output hello one here
01:19 - how do i actually call this function
01:22 - and when i say call the function this is
01:25 - programming lingo for
01:26 - make the pro make the function actually
01:28 - execute
01:30 - and the answer is we just write greet
01:32 - one the name of it
01:33 - two round brackets and we should put the
01:35 - semicolon in really
01:37 - so if i run this now it says hello one
01:42 - so we've already seen this and this is
01:43 - called a function definition
01:45 - now one thing to be aware of is that
01:48 - so that the node.js interpreter or the
01:52 - javascript interpreter whichever one
01:53 - you're using
01:55 - should we it will normally start at the
01:58 - top
01:58 - basically and read downwards so it's
02:01 - reading downwards it sees your function
02:02 - definition
02:04 - and eventually it comes if you've got
02:06 - one to a
02:07 - function call so now we're calling this
02:09 - function
02:10 - and by the time we do that it's already
02:12 - seen the definition of the function
02:14 - so it works however we can also in this
02:17 - case
02:18 - put the call to the function above the
02:21 - definition of the function
02:23 - so we can call the function before we've
02:25 - defined it as long as we do define it
02:28 - in our program let's try that and it
02:31 - actually does work
02:32 - and this is called function hoisting
02:35 - which is a name that i discovered
02:37 - recently i didn't know it was called
02:38 - that but this
02:40 - this does actually work with a function
02:42 - definition
02:43 - but as we'll see it it doesn't work with
02:46 - the other
02:47 - styles of creating the function that
02:49 - we're going to see
02:50 - so the second way to create a function
02:52 - is called a function expression
02:55 - we write let we need a variable here
02:59 - essentially
03:00 - which will actually be a reference to
03:03 - the function
03:04 - rather than just a simple value so let's
03:07 - call this
03:07 - greet two and i'm going to set it equal
03:10 - to and we need the keyword function
03:13 - then we have the round brackets as
03:14 - always and the curly brackets as always
03:17 - and in there i'm going to do console.log
03:21 - hello2
03:24 - so we can call that same as before we
03:27 - have the name of the function two round
03:28 - brackets
03:29 - and ideally a semicolon so if i run this
03:34 - it says hello2 if you can see that
03:38 - that works however function hoisting
03:41 - doesn't work with function expressions
03:45 - it only works with function definitions
03:48 - so if i try to call this function
03:50 - before i define it with a function
03:52 - expression
03:54 - then i get a nasty looking error and it
03:57 - says
03:57 - actually on the top line it says cannot
04:00 - access greet 2 before initialization
04:03 - let's put this back down here
04:07 - so that it actually works
04:12 - so here we've got function
04:15 - definition and here we've got
04:18 - function expression we've got a function
04:21 - expression
04:23 - why is it called a function expression
04:25 - well probably because
04:27 - in programming in general an expression
04:30 - is something that evaluates to some
04:32 - value
04:33 - for example if i write two plus two that
04:36 - evaluates
04:36 - to the value four in this case this
04:40 - expression evaluates to a function
04:43 - which we can assign to a variable and
04:46 - then we can call the function
04:47 - so this is a function expression whereas
04:50 - this is a function definition
04:52 - there's another way of writing a
04:54 - function expression
04:55 - that seems to be getting more and more
04:57 - common i'm seeing it a lot
04:59 - in react code react as a framework
05:02 - for creating basically web user
05:05 - interfaces
05:07 - let's take a look at that so again we we
05:09 - have a variable
05:10 - to store a reference to the function
05:12 - i'll call this greet three
05:14 - and we set it equal to and now instead
05:15 - of the function keyword
05:18 - we have two round brackets which again
05:21 - could accept
05:22 - a list a pr a list of arguments we could
05:25 - put a parameter list in there
05:27 - and um we have a equals
05:30 - sign and a sort of right angle bracket
05:34 - sort of diamond bracket and then we have
05:38 - the curly brackets
05:39 - so let's put in the console.log
05:44 - hello3
05:47 - so to call or invoke
05:50 - this three function we write again greek
05:54 - three
05:54 - and around brackets and if i run this
05:58 - it says hello hello three so there are
06:02 - at least
06:03 - three different ways of defining a
06:05 - function
06:07 - these are three important ways of
06:09 - defining a function
06:11 - if you are a beginner you will start to
06:14 - get lost just by looking at this
06:16 - it's really important that you type all
06:18 - of this out
06:20 - and you know try it out for yourself and
06:22 - try to give yourself
06:23 - an exercise now or some exercises rather
06:27 - and in each case we could supply
06:30 - function parameters
06:32 - we could put function parameters in the
06:33 - round brackets that's where they always
06:35 - go
06:36 - and then we could pass those to the
06:38 - functions
06:39 - in our curly brackets here when we call
06:41 - the functions we'll take a look at that
06:43 - in the next video
06:44 - but if you if you think you understand
06:46 - how this might work then
06:48 - do try it out you know so you have to
06:51 - give yourselves
06:52 - exercises of some kind so for example
06:55 - can you write a function
06:56 - that adds up all the numbers from 1 to
06:58 - 100 and then just prints them out
07:01 - or else returns the value that is
07:04 - calculated
07:05 - you know give yourselves make up some
07:07 - silly exercises that they don't have to
07:09 - be anything
07:10 - really serious or useful but make up
07:12 - exercises and try to practice all of
07:14 - these
07:15 - you know try adding up sequences of
07:17 - numbers
07:18 - or you know squaring numbers like i've
07:20 - done here or whatever
07:21 - springs to your mind converting um a
07:24 - temperature in celsius to a temperature
07:26 - in fahrenheit converting
07:28 - a number of days to a number of months
07:31 - whatever you like
07:32 - make up exercises and try to do them
07:34 - you've got to practice this stuff to
07:35 - learn it
07:36 - so in the next video we'll take a look
07:38 - at how we would handle return values and
07:40 - parameters
07:41 - with these different ways of creating
07:43 - functions but do practices
07:45 - or you will start to get lost so until
07:48 - next time
07:49 - happy coding

Cleaned transcript:

hello in this video we're going to take a look at function expressions in javascript so uh my name's john uh i'm from the website i'm i'm the creator of the website caverprogramming.com and we're continuing here our course on node.js and javascript for beginners so i'm going to start with you strict as always sometimes i forget that but really should try to remember it and let's create a function in the most kind of basic way so this is called a function definition which we've already seen in this course we write function and let's create a function that may be just says hello so let's write function i'll call it greet one round brackets and curly brackets so we can use numbers in function names and variable names we just can't start them with a number so this is a valid function name i'm calling it greet one because i'm going to have another two of these and i don't want to have to think of completely different names every time so i can have greek one greek two and greek three and let's just write console dot log and we'll output hello one here how do i actually call this function and when i say call the function this is programming lingo for make the pro make the function actually execute and the answer is we just write greet one the name of it two round brackets and we should put the semicolon in really so if i run this now it says hello one so we've already seen this and this is called a function definition now one thing to be aware of is that so that the node.js interpreter or the javascript interpreter whichever one you're using should we it will normally start at the top basically and read downwards so it's reading downwards it sees your function definition and eventually it comes if you've got one to a function call so now we're calling this function and by the time we do that it's already seen the definition of the function so it works however we can also in this case put the call to the function above the definition of the function so we can call the function before we've defined it as long as we do define it in our program let's try that and it actually does work and this is called function hoisting which is a name that i discovered recently i didn't know it was called that but this this does actually work with a function definition but as we'll see it it doesn't work with the other styles of creating the function that we're going to see so the second way to create a function is called a function expression we write let we need a variable here essentially which will actually be a reference to the function rather than just a simple value so let's call this greet two and i'm going to set it equal to and we need the keyword function then we have the round brackets as always and the curly brackets as always and in there i'm going to do console.log hello2 so we can call that same as before we have the name of the function two round brackets and ideally a semicolon so if i run this it says hello2 if you can see that that works however function hoisting doesn't work with function expressions it only works with function definitions so if i try to call this function before i define it with a function expression then i get a nasty looking error and it says actually on the top line it says cannot access greet 2 before initialization let's put this back down here so that it actually works so here we've got function definition and here we've got function expression we've got a function expression why is it called a function expression well probably because in programming in general an expression is something that evaluates to some value for example if i write two plus two that evaluates to the value four in this case this expression evaluates to a function which we can assign to a variable and then we can call the function so this is a function expression whereas this is a function definition there's another way of writing a function expression that seems to be getting more and more common i'm seeing it a lot in react code react as a framework for creating basically web user interfaces let's take a look at that so again we we have a variable to store a reference to the function i'll call this greet three and we set it equal to and now instead of the function keyword we have two round brackets which again could accept a list a pr a list of arguments we could put a parameter list in there and um we have a equals sign and a sort of right angle bracket sort of diamond bracket and then we have the curly brackets so let's put in the console.log hello3 so to call or invoke this three function we write again greek three and around brackets and if i run this it says hello hello three so there are at least three different ways of defining a function these are three important ways of defining a function if you are a beginner you will start to get lost just by looking at this it's really important that you type all of this out and you know try it out for yourself and try to give yourself an exercise now or some exercises rather and in each case we could supply function parameters we could put function parameters in the round brackets that's where they always go and then we could pass those to the functions in our curly brackets here when we call the functions we'll take a look at that in the next video but if you if you think you understand how this might work then do try it out you know so you have to give yourselves exercises of some kind so for example can you write a function that adds up all the numbers from 1 to 100 and then just prints them out or else returns the value that is calculated you know give yourselves make up some silly exercises that they don't have to be anything really serious or useful but make up exercises and try to practice all of these you know try adding up sequences of numbers or you know squaring numbers like i've done here or whatever springs to your mind converting um a temperature in celsius to a temperature in fahrenheit converting a number of days to a number of months whatever you like make up exercises and try to do them you've got to practice this stuff to learn it so in the next video we'll take a look at how we would handle return values and parameters with these different ways of creating functions but do practices or you will start to get lost so until next time happy coding
