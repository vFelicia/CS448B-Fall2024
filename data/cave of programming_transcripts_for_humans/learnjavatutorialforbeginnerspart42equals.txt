With timestamps:

00:00 - John from cave of programming calm and
00:02 - this is a tutorial on the equals method
00:06 - in Java or you can call it dot equals
00:09 - since all methods have a dot in front of
00:11 - them if you like I really should have
00:13 - covered this much earlier in the course
00:15 - in fact I started to but then I that
00:19 - video didn't work out somehow and I
00:21 - forgot about it so I'm going to cover it
00:23 - now and and I need to ask your patience
00:27 - in this video because I've just switched
00:29 - using a Mac and it's got a Hungarian
00:31 - keyboard and some of the keys are
00:34 - proving a little tricky to find I'm just
00:36 - getting used to it
00:36 - so I I must I must ask your patience now
00:42 - and I'm going to create a class here
00:44 - let's let's define a class person which
00:48 - is something I often use and if I can
00:51 - find the right key I'm going to put the
00:54 - opening and closing brackets in there
00:55 - and let's give let's give person a
00:58 - couple of fields so I'm going to say
01:01 - private int ID and private name private
01:06 - string name and I'll give it a
01:11 - constructor so I'll right click and go
01:15 - to source generate constructor using
01:18 - fields I take the fields that I want to
01:20 - include as parameters to the constructor
01:21 - click OK and let's get rid of this super
01:25 - which is actually superfluous and I will
01:30 - do and figures command shift F on the
01:33 - map or ctrl shift left on Windows to
01:35 - format the code and I'll also give this
01:38 - a to string method so I'm going to right
01:40 - click and go to source generate to
01:43 - string take the fields that I want to
01:45 - include and click OK
01:47 - so now we've got a person object and I'm
01:50 - going to create two of them and we're
01:52 - going to talk about how to compare those
01:54 - two person objects so let's say person
01:57 - person 1 equals new person
02:01 - let's give it give it an ID of 5 and a
02:04 - name of Bob and person person 2
02:12 - equals new person and an idea of eight
02:16 - and the name of su let's say so are
02:23 - these two people I need to mail that
02:26 - lowercase actually there we go
02:28 - are these two people equal or not if we
02:32 - want to know whether they're equal or
02:34 - not we could we could do this we could
02:35 - say if person one equals equals person -
02:40 - in fact I come to think it rather than
02:42 - use an if I'll do something even simpler
02:44 - let's just do sis owl or C so you can
02:50 - also type two also works and I think
02:53 - it's control space there we go on the
02:56 - Mac just as it is on Windows and let's
02:58 - say person one equals equals person 2 so
03:02 - we're comparing them with equals equals
03:03 - and if I run this it's going to output
03:06 - false because they are clearly different
03:09 - objects now what equals equals does is
03:12 - it tells you whether two references to
03:15 - objects are pointing at the same object
03:17 - or not or with integers or numeric
03:21 - values it tells you if if those
03:25 - primitive types while with primitive
03:27 - types in general I guess it tells you if
03:29 - they have the same value but with non
03:31 - primitive types like this references to
03:33 - objects it's telling you if they're
03:35 - pointing at the same object or not so if
03:37 - I now point person to at person one then
03:42 - it's going to say that they are equal
03:45 - true down there now what we often want
03:49 - to do is we want to compare objects
03:51 - semantically so we've got some idea of
03:54 - when two objects are equal that has
03:56 - nothing to do with with whether they are
03:58 - literally the same object or not for
04:00 - example if a person object has the same
04:02 - idea name we might argue that they
04:05 - should be in terms of meaning they
04:07 - should be considered to be equal and
04:09 - that's what our dot equals method is for
04:13 - so let's change them so that they're
04:16 - both equal semantically in terms of
04:19 - meaning so we've given them the same IDs
04:23 - and same names
04:25 - if I run this equals equals still gives
04:28 - us false because these are two different
04:31 - objects it's but it's just a
04:35 - nevertheless they contain the same
04:36 - information and semantically we feel
04:39 - that they are the same but in terms of
04:41 - you know memory
04:43 - they are kind of physically two
04:45 - different objects so how can we compare
04:49 - them in terms of meaning and what we do
04:51 - is we use dot equals which is a method
04:54 - that all objects inherit inherit from
04:57 - the object of superclass object with a
05:00 - capital o and we just we can just
05:02 - override this to provide our own
05:04 - interpretation of it if I just run that
05:06 - it's going to still say false because we
05:11 - haven't told dot equals how to compare
05:15 - the the two objects and we do that by
05:18 - overriding dot equals and implementing
05:21 - ourselves an easiest way to do those two
05:25 - right click in your class go to source
05:30 - generate ash code in equals and I'll
05:33 - talk about hash code briefly in a little
05:34 - while and then tick the fields that you
05:38 - want to compare so if you feel that two
05:43 - person objects with the same name are
05:45 - equal regardless of ID I would just take
05:48 - name or if I felt that having the same
05:51 - ID meant they are equal regardless of
05:53 - name I just tick ID did I just say that
05:57 - right well hopefully you get the idea
06:00 - and that you need to tick the fields
06:02 - that are important in comparing the
06:05 - object and if I feel that you in two
06:09 - objects must have the same ID in this
06:12 - case and the same name in order to be
06:15 - considered equal and I tick both if you
06:17 - have a whole list of fields you only
06:19 - tick the ones that are important when
06:22 - you compare the objects if you see what
06:24 - I mean so I'll take both here and I'll
06:26 - click OK and it generates this dot
06:28 - equals method for me and all this is
06:30 - doing is it's it's trying to compare
06:32 - compare two objects efficiently so it
06:36 - does a load of easy tests
06:38 - the more lengthy tests saves for if the
06:41 - easy tests didn't work out so this is
06:46 - kind of an optimized method that really
06:49 - is just saying it's just saying is this
06:52 - object equal to this object that's all
06:54 - it's doing and if you go through this
06:56 - you'll kind of see how it works so I
07:00 - think I'll skip over it now you can't
07:02 - figure it out if you go through it it's
07:04 - not too difficult especially if you
07:05 - follow the videos so far in this series
07:09 - so now if I run this and dot equals here
07:14 - is returning true because our objects
07:17 - are equal and if I change name for
07:22 - example or ID then they're going to be
07:24 - false because I've said I take both idea
07:27 - name said oh they must have both the
07:29 - same ID and the same name to be
07:32 - considered equal so that's a dot equals
07:35 - method for you with integer types or
07:41 - like well with numeric types in general
07:43 - you can just use equals equals so for
07:46 - example let's use a non primitive double
07:50 - tight let's say so I can say double
07:52 - value one equals seven point two exactly
07:57 - seven point two and double value two
08:01 - equals seven point two
08:04 - the exact value again and let's do
08:07 - Sissel value one equals equals value two
08:14 - so you could use dot equals there pretty
08:17 - sure it would work and wow I'm surprised
08:21 - actually I thought this would work and
08:24 - why do you know it doesn't
08:27 - so with I think with with integers let's
08:33 - let's do integer value integer let's say
08:37 - number one equals six and an integer
08:44 - number two also equals six so what do
08:49 - you think will this work or won't it
08:51 - I think it will so let's say number one
08:54 - equals equals number two let's run this
09:01 - and it does work and so why why does why
09:06 - does this give us true but this gives us
09:09 - false
09:10 - I think reason is that sometimes if you
09:15 - set an object to the same value with
09:19 - integers clearly this this is true then
09:22 - object and then Java will actually
09:25 - actually create a new object and use the
09:28 - same object for both of them so these
09:30 - are literally pointing at the same
09:32 - object but with doubles apparently to my
09:34 - surprise it doesn't do that and which I
09:39 - guess is because doubles are well I
09:45 - don't know I suppose they decided to
09:46 - compare because they contain more
09:48 - information I don't know if you use dot
09:50 - equals for a double then should be all
09:53 - right I should think there we go
09:54 - now that's true so you have to be a bit
09:58 - careful here and equals equals is only
10:01 - checking if two objects are pointing
10:06 - literally at the same two references are
10:08 - pointing literally at the same object
10:10 - and the safe way is to use dot equals
10:13 - which will tell you if they're equal in
10:15 - terms of value or not now this is
10:20 - particularly tricky when it comes to
10:22 - strings and a classic beginners mistake
10:26 - is to compare two strings with equals
10:28 - equals so let's have two strings here
10:29 - and now I feel I'm on safe ground
10:32 - because I've tried this before so string
10:35 - text one equals hello let's say and
10:40 - string text two equals hello as well and
10:47 - let's let's try that let's say Sissel
10:52 - text 1 equals equals text 2 now what do
10:57 - you think are those going to be equal or
10:58 - not and in fact this is a shortcut for
11:01 - new string basically new
11:04 - ring round brackets hello and this is
11:07 - kind of an argument to the constructor
11:08 - but the thing is if you run this they
11:12 - are pointing at the same string and
11:13 - that's because Java optimizes in this
11:15 - case or at least this version of Java on
11:19 - this system certainly does two-point
11:21 - these two references at the exact same
11:23 - object now a take-home message here is
11:27 - don't compare non primitive numbers with
11:33 - equals equals only use equals equals to
11:37 - check if two things two references point
11:39 - that literally the same object and the
11:41 - same with strings always use equals to
11:45 - compare strings because this will play
11:47 - you false equals equals is only checking
11:50 - if these references are literally
11:52 - pointing at the same object or not and
11:54 - to show you what I mean let's add some
11:56 - more characters to this and then let's
12:00 - do substring on it so I'll say dot
12:02 - substring start index naught end index
12:07 - fifth character and then it's us to
12:11 - assist out or you can just type C so as
12:14 - people keep telling me I prefer sis out
12:16 - because it's just rolls off my tongue
12:19 - easier but you kind of type C so control
12:21 - space
12:22 - now let's output text to text too and
12:25 - run this and what we find is that text
12:30 - two is equal to hello because we we made
12:34 - it a bigger string than hello to start
12:35 - with but and we only took the first five
12:37 - characters of that so is hello and text
12:40 - 1 is equal to hello and you see that
12:42 - equals equals is playing as false while
12:45 - it's actually doing what it should do
12:46 - it's telling us that these point now
12:49 - these references point to two different
12:51 - objects in memory and what you need to
12:55 - do is strings is is always use dot
12:59 - equals for that reason because with
13:01 - strings sometimes equals equals will
13:05 - work the reason being that Java will
13:08 - sometimes optimize to point to two
13:12 - different references at the same object
13:14 - if you literally initialize them at the
13:15 - same
13:16 - next but you can't rely on that and what
13:20 - you really need to do is compare the
13:22 - strings semantically in terms of that
13:25 - the data that they contain and for that
13:27 - you need equals so equals equals is
13:30 - comparing see if you've got the same
13:32 - object literally dot equals is for
13:36 - comparing in terms of meaning which is
13:38 - what you pretty much always want with
13:40 - strings and as we've seen you can
13:43 - implement your own equals method just
13:47 - getting by getting your IDE to do it for
13:49 - you that's the quickest way I just want
13:52 - to very quickly mention this hashcode
13:54 - method that was also generated for us if
13:58 - you take a object that doesn't have a
14:01 - two string method so I don't know what a
14:05 - good example is here maybe maybe I could
14:10 - just use a new object let's try this say
14:12 - sisal controlspace
14:15 - new object I'm not sure if this will
14:18 - actually work but I'll run that yeah
14:22 - there we go so you see an ID here and if
14:25 - this had a two string method but
14:27 - actually that would implement it to
14:29 - return something other than a default
14:31 - then we wouldn't see this but by default
14:35 - to string on on an object you've created
14:39 - yourself or on this object the
14:41 - grandparent object outputs this stuff
14:43 - and what this is is well this is the
14:46 - class of the object including the
14:47 - package that it's in Blasius an @ sign
14:50 - and this looks like a memory address but
14:52 - it's not it's it's what's called a hash
14:55 - code and hash codes are just kind of
14:57 - like unique IDs or they usually should
15:00 - be unique and that each object has and
15:03 - it's actually literally the value
15:06 - returned by this method here by this
15:08 - hashcode method and it's only really
15:11 - used if you add your objects to a hash
15:13 - and you I talked about hashes in the
15:16 - collections section of this tutorial and
15:20 - if you're watching on udemy or on
15:22 - YouTube you can find my collections
15:25 - tutorials separately on YouTube
15:28 - but that's what that is it's a hash code
15:31 - which is kind of like a unique ID that
15:33 - you only need to necessarily worry about
15:37 - you only need to implement this method
15:39 - using the automatic ID technique that I
15:42 - showed you earlier if you're gonna use
15:45 - your objects a key in a hash or you're
15:47 - going to put it in a set or something
15:49 - like that
15:49 - and this is this is that number that
15:54 - this method returns which is supposed to
15:56 - be unique for every object so that's it
16:00 - for this tutorial this is actually
16:03 - something I should have gone over a long
16:05 - time ago and it's a kind of classic
16:07 - interview question and in fact a friend
16:09 - of mine was interviewing someone a while
16:11 - ago and he said that he didn't give the
16:14 - guy the job because he he was asked what
16:18 - is dot equals what does it do and a guy
16:20 - couldn't reply funny thing is when my
16:22 - friend asked me the same question
16:24 - I couldn't reply either because I was
16:27 - confused by him saying dot equals and I
16:29 - thought you meant like an operator like
16:30 - this whoops with a dot sign and a and it
16:35 - equals like that but no he was just
16:39 - whoops than a white Eclipse his doing
16:41 - that but anyway he meant this the equals
16:45 - method and it's often referred to as dot
16:47 - equals because of course as a dot and in
16:50 - front of it because that's how you use
16:54 - methods so and the name of it is equals
16:56 - but of course it always has a dot before
16:59 - it like you know dot substring you could
17:01 - say so it's something to be aware of on
17:04 - exams and interviews this question comes
17:06 - up what does that equals do or what's
17:08 - equals do and what do you use it for
17:12 - that's it for today or that's it for
17:14 - this video and until next time happy
17:17 - coding

Cleaned transcript:

John from cave of programming calm and this is a tutorial on the equals method in Java or you can call it dot equals since all methods have a dot in front of them if you like I really should have covered this much earlier in the course in fact I started to but then I that video didn't work out somehow and I forgot about it so I'm going to cover it now and and I need to ask your patience in this video because I've just switched using a Mac and it's got a Hungarian keyboard and some of the keys are proving a little tricky to find I'm just getting used to it so I I must I must ask your patience now and I'm going to create a class here let's let's define a class person which is something I often use and if I can find the right key I'm going to put the opening and closing brackets in there and let's give let's give person a couple of fields so I'm going to say private int ID and private name private string name and I'll give it a constructor so I'll right click and go to source generate constructor using fields I take the fields that I want to include as parameters to the constructor click OK and let's get rid of this super which is actually superfluous and I will do and figures command shift F on the map or ctrl shift left on Windows to format the code and I'll also give this a to string method so I'm going to right click and go to source generate to string take the fields that I want to include and click OK so now we've got a person object and I'm going to create two of them and we're going to talk about how to compare those two person objects so let's say person person 1 equals new person let's give it give it an ID of 5 and a name of Bob and person person 2 equals new person and an idea of eight and the name of su let's say so are these two people I need to mail that lowercase actually there we go are these two people equal or not if we want to know whether they're equal or not we could we could do this we could say if person one equals equals person in fact I come to think it rather than use an if I'll do something even simpler let's just do sis owl or C so you can also type two also works and I think it's control space there we go on the Mac just as it is on Windows and let's say person one equals equals person 2 so we're comparing them with equals equals and if I run this it's going to output false because they are clearly different objects now what equals equals does is it tells you whether two references to objects are pointing at the same object or not or with integers or numeric values it tells you if if those primitive types while with primitive types in general I guess it tells you if they have the same value but with non primitive types like this references to objects it's telling you if they're pointing at the same object or not so if I now point person to at person one then it's going to say that they are equal true down there now what we often want to do is we want to compare objects semantically so we've got some idea of when two objects are equal that has nothing to do with with whether they are literally the same object or not for example if a person object has the same idea name we might argue that they should be in terms of meaning they should be considered to be equal and that's what our dot equals method is for so let's change them so that they're both equal semantically in terms of meaning so we've given them the same IDs and same names if I run this equals equals still gives us false because these are two different objects it's but it's just a nevertheless they contain the same information and semantically we feel that they are the same but in terms of you know memory they are kind of physically two different objects so how can we compare them in terms of meaning and what we do is we use dot equals which is a method that all objects inherit inherit from the object of superclass object with a capital o and we just we can just override this to provide our own interpretation of it if I just run that it's going to still say false because we haven't told dot equals how to compare the the two objects and we do that by overriding dot equals and implementing ourselves an easiest way to do those two right click in your class go to source generate ash code in equals and I'll talk about hash code briefly in a little while and then tick the fields that you want to compare so if you feel that two person objects with the same name are equal regardless of ID I would just take name or if I felt that having the same ID meant they are equal regardless of name I just tick ID did I just say that right well hopefully you get the idea and that you need to tick the fields that are important in comparing the object and if I feel that you in two objects must have the same ID in this case and the same name in order to be considered equal and I tick both if you have a whole list of fields you only tick the ones that are important when you compare the objects if you see what I mean so I'll take both here and I'll click OK and it generates this dot equals method for me and all this is doing is it's it's trying to compare compare two objects efficiently so it does a load of easy tests the more lengthy tests saves for if the easy tests didn't work out so this is kind of an optimized method that really is just saying it's just saying is this object equal to this object that's all it's doing and if you go through this you'll kind of see how it works so I think I'll skip over it now you can't figure it out if you go through it it's not too difficult especially if you follow the videos so far in this series so now if I run this and dot equals here is returning true because our objects are equal and if I change name for example or ID then they're going to be false because I've said I take both idea name said oh they must have both the same ID and the same name to be considered equal so that's a dot equals method for you with integer types or like well with numeric types in general you can just use equals equals so for example let's use a non primitive double tight let's say so I can say double value one equals seven point two exactly seven point two and double value two equals seven point two the exact value again and let's do Sissel value one equals equals value two so you could use dot equals there pretty sure it would work and wow I'm surprised actually I thought this would work and why do you know it doesn't so with I think with with integers let's let's do integer value integer let's say number one equals six and an integer number two also equals six so what do you think will this work or won't it I think it will so let's say number one equals equals number two let's run this and it does work and so why why does why does this give us true but this gives us false I think reason is that sometimes if you set an object to the same value with integers clearly this this is true then object and then Java will actually actually create a new object and use the same object for both of them so these are literally pointing at the same object but with doubles apparently to my surprise it doesn't do that and which I guess is because doubles are well I don't know I suppose they decided to compare because they contain more information I don't know if you use dot equals for a double then should be all right I should think there we go now that's true so you have to be a bit careful here and equals equals is only checking if two objects are pointing literally at the same two references are pointing literally at the same object and the safe way is to use dot equals which will tell you if they're equal in terms of value or not now this is particularly tricky when it comes to strings and a classic beginners mistake is to compare two strings with equals equals so let's have two strings here and now I feel I'm on safe ground because I've tried this before so string text one equals hello let's say and string text two equals hello as well and let's let's try that let's say Sissel text 1 equals equals text 2 now what do you think are those going to be equal or not and in fact this is a shortcut for new string basically new ring round brackets hello and this is kind of an argument to the constructor but the thing is if you run this they are pointing at the same string and that's because Java optimizes in this case or at least this version of Java on this system certainly does twopoint these two references at the exact same object now a takehome message here is don't compare non primitive numbers with equals equals only use equals equals to check if two things two references point that literally the same object and the same with strings always use equals to compare strings because this will play you false equals equals is only checking if these references are literally pointing at the same object or not and to show you what I mean let's add some more characters to this and then let's do substring on it so I'll say dot substring start index naught end index fifth character and then it's us to assist out or you can just type C so as people keep telling me I prefer sis out because it's just rolls off my tongue easier but you kind of type C so control space now let's output text to text too and run this and what we find is that text two is equal to hello because we we made it a bigger string than hello to start with but and we only took the first five characters of that so is hello and text 1 is equal to hello and you see that equals equals is playing as false while it's actually doing what it should do it's telling us that these point now these references point to two different objects in memory and what you need to do is strings is is always use dot equals for that reason because with strings sometimes equals equals will work the reason being that Java will sometimes optimize to point to two different references at the same object if you literally initialize them at the same next but you can't rely on that and what you really need to do is compare the strings semantically in terms of that the data that they contain and for that you need equals so equals equals is comparing see if you've got the same object literally dot equals is for comparing in terms of meaning which is what you pretty much always want with strings and as we've seen you can implement your own equals method just getting by getting your IDE to do it for you that's the quickest way I just want to very quickly mention this hashcode method that was also generated for us if you take a object that doesn't have a two string method so I don't know what a good example is here maybe maybe I could just use a new object let's try this say sisal controlspace new object I'm not sure if this will actually work but I'll run that yeah there we go so you see an ID here and if this had a two string method but actually that would implement it to return something other than a default then we wouldn't see this but by default to string on on an object you've created yourself or on this object the grandparent object outputs this stuff and what this is is well this is the class of the object including the package that it's in Blasius an @ sign and this looks like a memory address but it's not it's it's what's called a hash code and hash codes are just kind of like unique IDs or they usually should be unique and that each object has and it's actually literally the value returned by this method here by this hashcode method and it's only really used if you add your objects to a hash and you I talked about hashes in the collections section of this tutorial and if you're watching on udemy or on YouTube you can find my collections tutorials separately on YouTube but that's what that is it's a hash code which is kind of like a unique ID that you only need to necessarily worry about you only need to implement this method using the automatic ID technique that I showed you earlier if you're gonna use your objects a key in a hash or you're going to put it in a set or something like that and this is this is that number that this method returns which is supposed to be unique for every object so that's it for this tutorial this is actually something I should have gone over a long time ago and it's a kind of classic interview question and in fact a friend of mine was interviewing someone a while ago and he said that he didn't give the guy the job because he he was asked what is dot equals what does it do and a guy couldn't reply funny thing is when my friend asked me the same question I couldn't reply either because I was confused by him saying dot equals and I thought you meant like an operator like this whoops with a dot sign and a and it equals like that but no he was just whoops than a white Eclipse his doing that but anyway he meant this the equals method and it's often referred to as dot equals because of course as a dot and in front of it because that's how you use methods so and the name of it is equals but of course it always has a dot before it like you know dot substring you could say so it's something to be aware of on exams and interviews this question comes up what does that equals do or what's equals do and what do you use it for that's it for today or that's it for this video and until next time happy coding
