With timestamps:

00:17 - hello this is John from cave of
00:20 - programming calm in this tutorial we're
00:22 - going to look at if-else if so in the
00:25 - last tutorial and I created this project
00:28 - where we have like we output a menu and
00:31 - we ask the user to enter their selection
00:33 - then we take different actions depending
00:36 - on the range of values that are dollar
00:38 - entered while here here we're checking
00:41 - to see if they enter the specific value
00:43 - and here we're checking ranges what we
00:45 - usually want to do with a menu like this
00:47 - is to check each of the possible values
00:49 - so we don't really it's not elegant at
00:52 - all it's quite ugly to have multiple if
00:54 - else's in your program what we want is
00:57 - one statement that can check all of
01:00 - these different values and we can do
01:02 - that with a if else if statement so
01:07 - let's delete this here and if you've
01:09 - tried the code yourself on previous
01:12 - tutorials then you should find this
01:14 - pretty easy hopefully so I'm going to
01:17 - type here if and let's say value that's
01:20 - value that the user entered equals one
01:24 - and then we can say see out adding new
01:31 - record Endre of course you could have
01:37 - anything in this menu it's just a
01:38 - made-up example and we've seen that you
01:41 - could and have an else on there and but
01:44 - that's what what we can also do is we
01:47 - can type it sorry else space if value
01:52 - equals equals two and then we can say
01:57 - let's say C out delete deleting record
02:04 - deli team record and we can have as many
02:07 - of these else if clauses as we like be
02:11 - sure that you don't leave any blank
02:12 - lines under here
02:14 - because it'll little compiled that still
02:17 - run but it just looks really messy and
02:21 - also be very very careful to indent
02:24 - stuff between these brackets with an
02:27 - extra tab and it's this good practice I
02:30 - think when you're beginning especially
02:31 - to just use the auto format anyway just
02:35 - to double-check go to right click source
02:37 - and format just a double chatter your
02:41 - formatting is good that's a really
02:43 - important thing to get right
02:44 - okay so let's copy this elsif and we'll
02:47 - have three more of them two three so we
02:51 - can check three four and five and I'll
02:56 - use the shortcut which is on a Mac is
02:58 - command shift F to format these to save
03:01 - me some time and so option 3 should be
03:05 - viewing viewing record let's say option
03:09 - 4
03:10 - we can have searching and probably
03:15 - should say initiating search or
03:17 - something but you get the idea and we
03:21 - can also combine else--if if else--if
03:24 - with else so what if they enter some
03:26 - other value here that isn't 1 2 3 4 or 5
03:29 - we can say finding here else and see out
03:34 - in valid option
03:38 - so what's going to happen here is that
03:41 - the compiler well the and the program is
03:46 - when it's compiled is going to work down
03:48 - these different options one one after
03:50 - the other and as soon as it finds one
03:52 - that evaluates to true it's going to
03:54 - stop there so you can only have only one
03:59 - of these options is going to execute and
04:02 - that's important to keep in mind so
04:04 - we're going to check here and is the
04:07 - value one if not go to the next one is
04:10 - it - if not next one is it three is it
04:13 - four is it five and else if it's one of
04:16 - those we're going to do this so let's
04:18 - let's our polish now let's run it and so
04:22 - let's check one adding new record let's
04:26 - try five quitting that's had something
04:30 - else let's try some other input like
04:32 - zero or 500 or something and it says
04:35 - invalid option so another really
04:40 - important basic building block of C++ so
04:44 - to practice this probably the best way
04:46 - is create your own menu here and check
04:49 - the different options and use an if-else
04:51 - if-else so it should be should be pretty
04:54 - simple if you follow the last tutorials
04:56 - I just want to finish up by pointing out
04:59 - something important here I've said that
05:03 - you can use conditions like this with
05:06 - strings and here we're using it with
05:09 - integers and you might want it can you
05:12 - use conditions can you use ifs with
05:15 - floating point values well let's try so
05:19 - I'm going to say here float in fact what
05:23 - I'll do is a comment this hour coming
05:26 - out of a block of code temporarily we've
05:28 - seen that you can create comment
05:30 - one-line comment like this this is a
05:33 - comment and it's that can be really
05:35 - useful and if you want to just comment
05:37 - one or two lines of code you can also
05:39 - comment
05:40 - a whole block like this type sliced star
05:44 - and then at the end of where you want to
05:47 - comment to n-type star slash whoops so
05:52 - you need a forward slash that's a
05:54 - forward slash it's like if you go from
05:57 - left to right you'll be going up the
05:59 - hill if you imagine this is a sort of
06:00 - hell as a forward slash and you need
06:03 - slash star and an ending star slash and
06:08 - multi-line comments like this they're
06:10 - great for creating you know big chunks
06:12 - of information that you need to put in
06:14 - your program and are also really great
06:16 - for commenting commenting out blocks of
06:18 - code so there's something that you don't
06:21 - need at the moment maybe you're
06:24 - debugging your program and you want to
06:25 - stop some bit of code executing but you
06:28 - don't want to get rid of it completely
06:29 - you can use star / and / start to
06:33 - comment out that code temporarily so now
06:35 - this program will do nothing but don't
06:40 - get carried away with that because and
06:41 - if you do comment out code and it's best
06:46 - if you if you're really not going to
06:48 - need it ever then delete the code or
06:50 - just put it somewhere else
06:52 - I've seen a lot of code that has lots
06:55 - and lots of comments that blocks in it
06:57 - that they're there for years and it just
06:59 - looks horrible and terrible so don't
07:02 - leave unnecessary code in permanently
07:04 - it's good as a like a temporary thing
07:07 - usually so what I want to show you is
07:10 - I'm going to right here float value
07:13 - equals let's say 94.5 and let's say if
07:18 - value equals equals 4.5 then see out
07:25 - value sorry see out safe equals
07:33 - endler elves see out not equal so you
07:44 - think looking at this code that you
07:47 - should say and that that there that this
07:51 - is equal to this because we set a equal
07:53 - to 4.5 and we're testing for point five
07:55 - in the Equality or if we if we run it it
07:58 - says well here it says it is equal
08:01 - actually which I'm a little surprised
08:03 - let's try something else
08:05 - let's try one point one maybe one point
08:09 - one hopefully I can demonstrate this to
08:13 - you now it says not equal so what what's
08:16 - going on here and basically if you
08:19 - compare flow with equals equals the
08:21 - behavior of it is going to be pretty
08:23 - unpredictable and really so this is best
08:27 - just not to do it just leave it alone
08:30 - depending on your compiler your system
08:32 - will you use floats or doubles or
08:34 - whatever you might find them it works as
08:37 - you expect but you might not and I think
08:39 - the best thing there is just to leave it
08:41 - alone
08:42 - don't use equals equals with floating
08:44 - point values the reason is that as we've
08:46 - seen in a previous tutorial floating
08:49 - point values are store are not stored
08:51 - with infinite precision because you've
08:53 - only got so much computer memory so if
08:55 - we actually output this float value
08:57 - let's do it so I've actually already
08:59 - included IO manip at all and we have
09:02 - seen this before and that allows me to
09:04 - do this see out lets out put it in fix
09:08 - notation so I want it to write all the
09:11 - numbers out rather than using scientific
09:13 - notation and I can use set precision
09:15 - from IO manip let's set it to 10
09:18 - and then we can output the value and
09:21 - this is stuff that we've seen in a
09:24 - previous tutorial let's run that and we
09:28 - see that in fact the float value when it
09:31 - comes up is is not precisely equal to
09:34 - one point one because of the difficulty
09:37 - of storing stuff in the computer memory
09:40 - with with perfect precision but what you
09:46 - can safely do with floating point
09:48 - numbers is you can certainly use less
09:50 - than or greater than so we can say if
09:52 - value is greater than one point two I
09:55 - know that's always going to work because
10:00 - well at worst I suppose this could come
10:04 - out as being equal to one point one four
10:08 - or something but one point one is
10:10 - definitely going to be less than equal
10:12 - to one point two so don't get too
10:14 - detailed with it like it and it's best
10:17 - not to start doing is it stuff like is
10:20 - it less than one point one one well
10:24 - that's going to work in this case but
10:28 - yeah but be I would say be be careful
10:31 - and be aware that your your number is
10:34 - gonna and it's going to have in effect
10:38 - some extra numbers on the end of it that
10:40 - are going to be basically garbage and
10:44 - you're safe if you're comparing it color
10:47 - to the next number up 1.1 1.2 is fine
10:50 - but don't use equals equals and don't
10:52 - try to get too detailed don't do stuff
10:55 - like you know like this because will it
10:59 - work or will it not work probably in
11:01 - this case but you know it's getting a
11:03 - bit dodgy because who knows what this
11:06 - number actually is in the computer
11:07 - memory
11:09 - and so yeah
11:12 - Dhoni was equals equals and be careful
11:14 - when you're comparing floats and doubles
11:16 - because that back and catch well so I'm
11:19 - going to uncomment this now so for
11:21 - practice create your own menu system and
11:23 - use if-else if-else to check the
11:26 - different values or if you can think of
11:28 - some other program maybe using strings
11:31 - or even doubles with comparisons greater
11:34 - than or equal to or floats then make
11:38 - something up and try it yourself but the
11:39 - important thing is to try if-else
11:43 - if-else and make sure that you can
11:45 - actually successfully get it working so
11:48 - in the next tutorial I think what we'll
11:50 - we'll do and is we'll look at some more
11:54 - advanced conditions because you can
11:56 - combine conditions and I want to get on
12:01 - as soon as possible really to looking at
12:03 - loops because that even makes the
12:05 - program a whole other level of of
12:07 - interesting and gives you a lot more
12:09 - power but we've got maybe one or two
12:12 - little things to look at before we get
12:14 - to loops so that's it for this tutorial
12:16 - you can find more videos on my website
12:19 - which is cave of programming calm like a
12:22 - huge amount of free stuff there and
12:24 - until next time happy coding
12:34 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to look at ifelse if so in the last tutorial and I created this project where we have like we output a menu and we ask the user to enter their selection then we take different actions depending on the range of values that are dollar entered while here here we're checking to see if they enter the specific value and here we're checking ranges what we usually want to do with a menu like this is to check each of the possible values so we don't really it's not elegant at all it's quite ugly to have multiple if else's in your program what we want is one statement that can check all of these different values and we can do that with a if else if statement so let's delete this here and if you've tried the code yourself on previous tutorials then you should find this pretty easy hopefully so I'm going to type here if and let's say value that's value that the user entered equals one and then we can say see out adding new record Endre of course you could have anything in this menu it's just a madeup example and we've seen that you could and have an else on there and but that's what what we can also do is we can type it sorry else space if value equals equals two and then we can say let's say C out delete deleting record deli team record and we can have as many of these else if clauses as we like be sure that you don't leave any blank lines under here because it'll little compiled that still run but it just looks really messy and also be very very careful to indent stuff between these brackets with an extra tab and it's this good practice I think when you're beginning especially to just use the auto format anyway just to doublecheck go to right click source and format just a double chatter your formatting is good that's a really important thing to get right okay so let's copy this elsif and we'll have three more of them two three so we can check three four and five and I'll use the shortcut which is on a Mac is command shift F to format these to save me some time and so option 3 should be viewing viewing record let's say option 4 we can have searching and probably should say initiating search or something but you get the idea and we can also combine elseif if elseif with else so what if they enter some other value here that isn't 1 2 3 4 or 5 we can say finding here else and see out in valid option so what's going to happen here is that the compiler well the and the program is when it's compiled is going to work down these different options one one after the other and as soon as it finds one that evaluates to true it's going to stop there so you can only have only one of these options is going to execute and that's important to keep in mind so we're going to check here and is the value one if not go to the next one is it if not next one is it three is it four is it five and else if it's one of those we're going to do this so let's let's our polish now let's run it and so let's check one adding new record let's try five quitting that's had something else let's try some other input like zero or 500 or something and it says invalid option so another really important basic building block of C++ so to practice this probably the best way is create your own menu here and check the different options and use an ifelse ifelse so it should be should be pretty simple if you follow the last tutorials I just want to finish up by pointing out something important here I've said that you can use conditions like this with strings and here we're using it with integers and you might want it can you use conditions can you use ifs with floating point values well let's try so I'm going to say here float in fact what I'll do is a comment this hour coming out of a block of code temporarily we've seen that you can create comment oneline comment like this this is a comment and it's that can be really useful and if you want to just comment one or two lines of code you can also comment a whole block like this type sliced star and then at the end of where you want to comment to ntype star slash whoops so you need a forward slash that's a forward slash it's like if you go from left to right you'll be going up the hill if you imagine this is a sort of hell as a forward slash and you need slash star and an ending star slash and multiline comments like this they're great for creating you know big chunks of information that you need to put in your program and are also really great for commenting commenting out blocks of code so there's something that you don't need at the moment maybe you're debugging your program and you want to stop some bit of code executing but you don't want to get rid of it completely you can use star / and / start to comment out that code temporarily so now this program will do nothing but don't get carried away with that because and if you do comment out code and it's best if you if you're really not going to need it ever then delete the code or just put it somewhere else I've seen a lot of code that has lots and lots of comments that blocks in it that they're there for years and it just looks horrible and terrible so don't leave unnecessary code in permanently it's good as a like a temporary thing usually so what I want to show you is I'm going to right here float value equals let's say 94.5 and let's say if value equals equals 4.5 then see out value sorry see out safe equals endler elves see out not equal so you think looking at this code that you should say and that that there that this is equal to this because we set a equal to 4.5 and we're testing for point five in the Equality or if we if we run it it says well here it says it is equal actually which I'm a little surprised let's try something else let's try one point one maybe one point one hopefully I can demonstrate this to you now it says not equal so what what's going on here and basically if you compare flow with equals equals the behavior of it is going to be pretty unpredictable and really so this is best just not to do it just leave it alone depending on your compiler your system will you use floats or doubles or whatever you might find them it works as you expect but you might not and I think the best thing there is just to leave it alone don't use equals equals with floating point values the reason is that as we've seen in a previous tutorial floating point values are store are not stored with infinite precision because you've only got so much computer memory so if we actually output this float value let's do it so I've actually already included IO manip at all and we have seen this before and that allows me to do this see out lets out put it in fix notation so I want it to write all the numbers out rather than using scientific notation and I can use set precision from IO manip let's set it to 10 and then we can output the value and this is stuff that we've seen in a previous tutorial let's run that and we see that in fact the float value when it comes up is is not precisely equal to one point one because of the difficulty of storing stuff in the computer memory with with perfect precision but what you can safely do with floating point numbers is you can certainly use less than or greater than so we can say if value is greater than one point two I know that's always going to work because well at worst I suppose this could come out as being equal to one point one four or something but one point one is definitely going to be less than equal to one point two so don't get too detailed with it like it and it's best not to start doing is it stuff like is it less than one point one one well that's going to work in this case but yeah but be I would say be be careful and be aware that your your number is gonna and it's going to have in effect some extra numbers on the end of it that are going to be basically garbage and you're safe if you're comparing it color to the next number up 1.1 1.2 is fine but don't use equals equals and don't try to get too detailed don't do stuff like you know like this because will it work or will it not work probably in this case but you know it's getting a bit dodgy because who knows what this number actually is in the computer memory and so yeah Dhoni was equals equals and be careful when you're comparing floats and doubles because that back and catch well so I'm going to uncomment this now so for practice create your own menu system and use ifelse ifelse to check the different values or if you can think of some other program maybe using strings or even doubles with comparisons greater than or equal to or floats then make something up and try it yourself but the important thing is to try ifelse ifelse and make sure that you can actually successfully get it working so in the next tutorial I think what we'll we'll do and is we'll look at some more advanced conditions because you can combine conditions and I want to get on as soon as possible really to looking at loops because that even makes the program a whole other level of of interesting and gives you a lot more power but we've got maybe one or two little things to look at before we get to loops so that's it for this tutorial you can find more videos on my website which is cave of programming calm like a huge amount of free stuff there and until next time happy coding you
