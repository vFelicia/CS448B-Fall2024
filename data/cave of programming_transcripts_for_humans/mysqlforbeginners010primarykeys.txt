With timestamps:

00:00 - hello this is John from cave of
00:02 - programming calm in this tutorial we're
00:05 - going to take a look at primary keys in
00:07 - my sequel so I'm going to say use
00:10 - tutorial one as usual and I'm gonna say
00:13 - show tables and at the moment I've just
00:15 - got one table in here called users so
00:18 - I'm going to do drop table users because
00:20 - I want to recreate this table now I'll
00:23 - say create table users and let's give
00:26 - this a ID of type int and we'll give it
00:31 - an let's give it a name field I'll just
00:33 - call it name stead of user names is
00:35 - shorter of type text and also let's have
00:39 - email of type text now before I create
00:42 - this table it's good practice in sequin
00:47 - in general to make sure that every table
00:49 - has a think or the primary key and what
00:51 - this is is it's one of your columns
00:53 - which in that column the values in a
00:58 - column are going to uniquely identify
00:59 - each row so for every row in your table
01:03 - the primary key will have a different
01:06 - unique value and it can't be null its
01:09 - usual to make and the primary key a
01:13 - integer type you can make it another
01:17 - type so for example if you had a table
01:20 - with had a column which was like a
01:23 - username column in so you had a table of
01:26 - users and each user had a unique user
01:29 - name important that it's unique you
01:32 - could choose to make the user name the
01:34 - primary key you can't do that with tight
01:36 - text on a counter text being a
01:39 - variable-length feel but later on we
01:42 - will see fixed-length text fields text
01:45 - types that you could use in your primary
01:48 - key but the bottom line is that every
01:52 - table ideally should have a primary key
01:54 - and that's ideally that should be of an
01:57 - integer type because that will give you
01:59 - the fastest results with your queries
02:02 - but it is possible to use text types as
02:05 - we'll see later on
02:08 - so I'm going to make this ID column here
02:13 - which is which is an integer type my
02:15 - primary key so that's going to contain a
02:17 - value that's going to be unique for
02:19 - every row in a database let's say
02:21 - primary key after int yeah so I'll run
02:27 - this now and then if we do a desk users
02:31 - we can look at the type of it's table so
02:34 - we see that the ID field can't be null
02:36 - and that's because primary Keys can't be
02:39 - null in general if you want you can say
02:41 - primary key not null but that's implied
02:44 - by that just the fact that you made it a
02:46 - primary key and we see here that it is
02:49 - the primary key you see that the type is
02:52 - in brackets xi xi doesn't actually refer
02:55 - to the number of digits you can store in
02:57 - there or anything is purely a relatively
03:00 - unimportant display feature which means
03:03 - that if you have a integer in that it's
03:06 - smaller than eleven digits my sequel in
03:10 - some circumstances depending on how you
03:11 - do the query what you do the query with
03:13 - will left pad the integer with spaces I
03:18 - think usually left but it but that's not
03:20 - that's not really important so this
03:22 - brackets 11 is not so important it just
03:25 - somehow sometimes under some
03:28 - circumstances it will affect where the
03:31 - small integers you know get displayed in
03:33 - a field that has the 11 spaces in it or
03:35 - not but it won't truncate your integers
03:38 - or anything like that it doesn't affect
03:39 - how many digits you can store in that I
03:41 - think for an intern any case a normal
03:44 - int you can get 10 digits in that but if
03:47 - you google for my sequel numeric types
03:50 - you'll find more information on that
03:52 - okay so let's see what we can do with
03:53 - the primary key let's say insert into
03:56 - users ID name and email values and we'll
04:02 - put 0 in for the ID and we'll have a
04:05 - name that say Bob and email Bob so I'll
04:10 - just type some nonsense in that
04:12 - I don't know whether this site actually
04:14 - exists but we'll add that in so I'll go
04:17 - ahead and execute that it's executed
04:19 - fine now we could you know happily
04:23 - insert other stuff in that let's insert
04:26 - some other stuff we'll give this a
04:29 - primary key value of one so that that's
04:32 - worked as well we can see those values
04:36 - of course in the normal way select star
04:38 - from users and there we go
04:40 - but now let's try to do some things that
04:42 - won't work so if we go and we let's
04:47 - bring by this query if for example we
04:50 - try to insert some data with a primary
04:56 - key that already exists in that that
04:59 - won't work so if we execute this it
05:01 - won't execute because you can't have
05:04 - duplicate values and the primary key
05:06 - column the point of it is to uniquely
05:09 - identify every row in a table similar
05:12 - similarly you can't have null for
05:14 - primary keys automatically not null so
05:16 - this query this statement won't execute
05:20 - either so the primary key must be you
05:24 - means most often you make it an integer
05:26 - and sometimes I see users doing stuff I
05:30 - mean beginners with my sequel I seen
05:32 - them do things like they'll take the
05:34 - value or another key let's say that had
05:36 - a user name Bob and then they'll append
05:38 - something to that user name which is
05:40 - already in the database to make it you
05:43 - mean like an underscore in some digits
05:45 - this is very bad practice you shouldn't
05:49 - duplicate data in your database because
05:52 - imagine if you had a user with the user
05:55 - named Bob and they had a primary key
05:58 - zero this is fine there's no data
06:00 - duplication but if you had the primary
06:03 - key as a text value and remember you
06:06 - can't use the text type for a primary
06:08 - key but there are text types that you
06:11 - can use which we'll see later so if it
06:13 - was a text type you might think okay
06:15 - I'll do this Bob on the score
06:18 - like this that's not a good idea because
06:20 - now you're duplicating some data it
06:23 - takes up unnecessary space and what if
06:25 - you want to rename Bob what if Bob
06:27 - changes his name then you've got to
06:29 - rename it both here and here which is
06:31 - even more difficult so try to avoid
06:36 - having any duplicate data in your
06:38 - database you need to get all the
06:39 - duplicate data out there of course if
06:41 - you have two separate users and they
06:44 - both happen to have the same name that's
06:46 - not considered duplicate data this is
06:49 - the unique name for each user it's just
06:51 - that they happen to have the same name
06:53 - but there again if they do have the same
06:55 - name you can't use their name as a
06:57 - primary key because the primary key
06:59 - really must have duplicate values in it
07:01 - the point is just that you don't want to
07:03 - repeat data in your database so you
07:07 - don't want to have the name of one
07:09 - particular user repeated in two places
07:11 - but if two people had the same name
07:14 - that's fine as long as you're not trying
07:17 - to put the same name of two different
07:19 - users in a field where you can't have
07:22 - duplicate it's like a primary key so
07:25 - anyway the way to get to grips with this
07:27 - is really just to play about it a bit so
07:29 - do try this create a table with some
07:31 - columns in it give it a integer type
07:34 - primary key insert some data in there
07:37 - and then check that you can't insert
07:39 - duplicate values for the primary key and
07:42 - checking you can't insert null values
07:45 - for the primary key because even if this
07:47 - does seem complicated to you at first
07:49 - just by typing this stuff out it will
07:52 - start to remain in your head and it will
07:55 - start to become understandable even if
07:58 - you get to a point either now or later
08:00 - with this course where you're struggling
08:02 - typing this out and actually singing
08:04 - work is really the key to understanding
08:06 - that ok so until next time happy coding

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to take a look at primary keys in my sequel so I'm going to say use tutorial one as usual and I'm gonna say show tables and at the moment I've just got one table in here called users so I'm going to do drop table users because I want to recreate this table now I'll say create table users and let's give this a ID of type int and we'll give it an let's give it a name field I'll just call it name stead of user names is shorter of type text and also let's have email of type text now before I create this table it's good practice in sequin in general to make sure that every table has a think or the primary key and what this is is it's one of your columns which in that column the values in a column are going to uniquely identify each row so for every row in your table the primary key will have a different unique value and it can't be null its usual to make and the primary key a integer type you can make it another type so for example if you had a table with had a column which was like a username column in so you had a table of users and each user had a unique user name important that it's unique you could choose to make the user name the primary key you can't do that with tight text on a counter text being a variablelength feel but later on we will see fixedlength text fields text types that you could use in your primary key but the bottom line is that every table ideally should have a primary key and that's ideally that should be of an integer type because that will give you the fastest results with your queries but it is possible to use text types as we'll see later on so I'm going to make this ID column here which is which is an integer type my primary key so that's going to contain a value that's going to be unique for every row in a database let's say primary key after int yeah so I'll run this now and then if we do a desk users we can look at the type of it's table so we see that the ID field can't be null and that's because primary Keys can't be null in general if you want you can say primary key not null but that's implied by that just the fact that you made it a primary key and we see here that it is the primary key you see that the type is in brackets xi xi doesn't actually refer to the number of digits you can store in there or anything is purely a relatively unimportant display feature which means that if you have a integer in that it's smaller than eleven digits my sequel in some circumstances depending on how you do the query what you do the query with will left pad the integer with spaces I think usually left but it but that's not that's not really important so this brackets 11 is not so important it just somehow sometimes under some circumstances it will affect where the small integers you know get displayed in a field that has the 11 spaces in it or not but it won't truncate your integers or anything like that it doesn't affect how many digits you can store in that I think for an intern any case a normal int you can get 10 digits in that but if you google for my sequel numeric types you'll find more information on that okay so let's see what we can do with the primary key let's say insert into users ID name and email values and we'll put 0 in for the ID and we'll have a name that say Bob and email Bob so I'll just type some nonsense in that I don't know whether this site actually exists but we'll add that in so I'll go ahead and execute that it's executed fine now we could you know happily insert other stuff in that let's insert some other stuff we'll give this a primary key value of one so that that's worked as well we can see those values of course in the normal way select star from users and there we go but now let's try to do some things that won't work so if we go and we let's bring by this query if for example we try to insert some data with a primary key that already exists in that that won't work so if we execute this it won't execute because you can't have duplicate values and the primary key column the point of it is to uniquely identify every row in a table similar similarly you can't have null for primary keys automatically not null so this query this statement won't execute either so the primary key must be you means most often you make it an integer and sometimes I see users doing stuff I mean beginners with my sequel I seen them do things like they'll take the value or another key let's say that had a user name Bob and then they'll append something to that user name which is already in the database to make it you mean like an underscore in some digits this is very bad practice you shouldn't duplicate data in your database because imagine if you had a user with the user named Bob and they had a primary key zero this is fine there's no data duplication but if you had the primary key as a text value and remember you can't use the text type for a primary key but there are text types that you can use which we'll see later so if it was a text type you might think okay I'll do this Bob on the score like this that's not a good idea because now you're duplicating some data it takes up unnecessary space and what if you want to rename Bob what if Bob changes his name then you've got to rename it both here and here which is even more difficult so try to avoid having any duplicate data in your database you need to get all the duplicate data out there of course if you have two separate users and they both happen to have the same name that's not considered duplicate data this is the unique name for each user it's just that they happen to have the same name but there again if they do have the same name you can't use their name as a primary key because the primary key really must have duplicate values in it the point is just that you don't want to repeat data in your database so you don't want to have the name of one particular user repeated in two places but if two people had the same name that's fine as long as you're not trying to put the same name of two different users in a field where you can't have duplicate it's like a primary key so anyway the way to get to grips with this is really just to play about it a bit so do try this create a table with some columns in it give it a integer type primary key insert some data in there and then check that you can't insert duplicate values for the primary key and checking you can't insert null values for the primary key because even if this does seem complicated to you at first just by typing this stuff out it will start to remain in your head and it will start to become understandable even if you get to a point either now or later with this course where you're struggling typing this out and actually singing work is really the key to understanding that ok so until next time happy coding
