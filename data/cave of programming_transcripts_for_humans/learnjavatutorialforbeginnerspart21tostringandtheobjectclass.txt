With timestamps:

00:00 - [Music]
00:12 - [Music]
00:18 - hello this is John from Cave of
00:20 - programming. comom and this is a
00:22 - tutorial on the two string method in
00:26 - Java so all objects in Java
00:31 - um have the object class as their
00:34 - ultimate parent so if I create my own
00:37 - class here it will have object secretly
00:41 - as um as its parent as the class that it
00:45 - actually um derives from um and we're
00:47 - going to look at inheritance um very
00:49 - shortly in this series of tutorials but
00:52 - for now I want to show you some of the
00:53 - standard methods that the object class
00:56 - has and that therefore every um class in
01:00 - Java every object also has so if I
01:03 - create an object here I'll call it obge
01:06 - and I'll just say object equals new
01:09 - object like
01:11 - this and and then if I go object Dot and
01:14 - press control return in eclips to get
01:16 - the autocomplete suggestions you can see
01:20 - that um obge has a whole bunch of
01:24 - methods here and um notify notify all in
01:28 - the various kind of ways
01:31 - I actually go through in my series on
01:33 - multi-threading that's quite Advanced so
01:35 - I won't cover that here but in these
01:37 - beginners tutorials I am going to cover
01:41 - um hash code and probably in the next
01:45 - tutorial the equals or do equals method
01:48 - and also um in this tutorial I'm going
01:51 - to look at the two string
01:53 - method so um let's create a class here
01:58 - and I'll just call it
02:00 - um it's going to be very simple so I'll
02:02 - call it uh why not call it
02:05 - frog um and I'm not going to give frog
02:09 - any methods just for the moment but I'll
02:11 - say frog frog one equals new frog like
02:17 - this and again if I do frog one
02:21 - dot um and in fact the auto complete you
02:24 - can see it's going to have all these
02:25 - methods because it has inherited all
02:28 - these methods from the object class that
02:32 - is secretly the parent of the Frog of
02:35 - the Frog
02:37 - class and um in particular it's got a
02:40 - two string method and the two string
02:42 - method is really really useful for
02:44 - helping to debug your applications so
02:47 - let's see how it works um I'll start by
02:50 - giving frog a very simple two- string
02:54 - method so um the header of two string
02:58 - looks like this it's public click string
03:01 - to
03:03 - string lowercase o uh lowercase T
03:07 - capital
03:08 - S and it takes no
03:10 - arguments and of course it has to return
03:13 - a string so uh I'm going to just here
03:16 - I'll create a
03:18 - string um and in fact what I'll do is
03:21 - I'll just say return and and for a
03:23 - moment I'll just say return hello like
03:25 - this so I'm just returning a string
03:28 - here uh um and if now if I do sis out
03:33 - down here so control space and if I now
03:38 - do sis out on my frog one like
03:42 - this and I run
03:45 - this um as a Java
03:48 - application it's going to actually
03:50 - output hello because when you do
03:53 - system.out.print Len on an object it um
03:57 - tries to invoke the two string method to
04:00 - get a string representation of that
04:02 - object and if you don't have a any two
04:06 - string method defined for your object so
04:08 - let's just comment this
04:12 - out to take this away
04:15 - again then you can still do
04:17 - system.out.println and what happens is
04:21 - you get this so you get the class name
04:24 - and you get a at sign and you get
04:26 - something here that looks like a memory
04:28 - address but it's actually
04:30 - um called the hash code it's like a kind
04:32 - of unique
04:34 - identifier for all your um objects um in
04:38 - Java and we're going to look at hash
04:41 - code uh in a probably um quite soon in a
04:44 - future tutorial so I'll put this in
04:47 - again for now and the real use of um the
04:50 - two string method is of course you can
04:52 - create a string representation of your
04:55 - object that enables you to identify that
04:58 - object which is really helpful for
04:59 - debugging so let's say that a frog has a
05:02 - name so let's say this is public string
05:06 - name and uh let's give it an idea as
05:09 - well so let's say in fact I should make
05:11 - that private and I'll give it a private
05:16 - int um ID like this and let's say that
05:20 - the Frog Constructor allows you to set
05:23 - those values so int ID and string name
05:28 - and in the Constructor I'll just do
05:30 - this. ID equals ID and this. name equals
05:36 - name um oh yeah it's Capital that should
05:39 - be lowercase I actually your variabl
05:41 - should begin with um lowercase letters
05:44 - in Java
05:45 - really and what I can do here is I'm
05:48 - going to actually use I could do this I
05:50 - could say um let's say
05:54 - return
05:56 - ID plus and some punctuation
06:01 - plus name and there's nothing too wrong
06:04 - with that um and if I do that and I do
06:07 - system. out on frog
06:09 - object I've just got to yeah I've got to
06:12 - give it um obviously a value for the ID
06:14 - and name so let's give it seven fly ID
06:17 - and Bob full of name and if I run this
06:22 - actually maybe Freddy for a frog Freddy
06:25 - to frog so if I run this it's going to
06:28 - say seven call on Freddy and of course
06:31 - if I
06:32 - have um multiple different
06:35 - objects this will allow me to identify
06:38 - which one's which so let's make this
06:41 - five I'll call this one Roger and just
06:46 - do sis out Frog 2 so I'm getting now
06:50 - some useful output down
06:52 - here now there's nothing wrong really
06:55 - with this it's just that it's a little
06:57 - bit inefficient because
07:00 - um you've got a string object here and
07:03 - you're creating um you've got a string
07:06 - object here as well and you're uh this
07:09 - is getting wrapped in a
07:12 - integer um a non-primitive integer type
07:15 - class and then converted to a string and
07:17 - then you're concatenating all those
07:18 - strings together and turning them into a
07:20 - new string so there's a lot of string
07:21 - objects flying about and a slightly more
07:23 - efficient way of doing it would be to
07:25 - use string Builder so I say I can say
07:27 - string Builder SB
07:30 - um equals new string
07:35 - Builder um and then I can do s sp.
07:39 - append
07:41 - ID um do append let's have some um
07:49 - punctuation and do append
07:52 - name and then I can do return s SP do2
07:58 - string
08:00 - so um this this avoids um uh the
08:04 - inefficiency of concatenating strings
08:06 - because every time you put a plus
08:08 - between two string um two strings you're
08:11 - basically creating a new string so um as
08:15 - I mentioned in the last tutorial
08:16 - concatenation of strings is pretty
08:19 - inefficient which you might not care
08:20 - about in a simple program but this is um
08:23 - a better way to do it cuz here we've
08:25 - just got one string Builder object and
08:27 - you're using that to build up um
08:30 - a single string from a bunch of
08:31 - different strings without creating any
08:34 - intermediate strings behind the
08:37 - scenes um and if I run that now then I
08:40 - get the same results as before and of
08:42 - course you can use all the stuff that I
08:44 - showed you in the last tutorial here
08:45 - like um uh if you want to return like a
08:49 - formatted string you know you could use
08:51 - for example um well this is this is one
08:55 - version of two string let's just quickly
08:58 - look at another
09:01 - possibility so you could also do um I
09:04 - think I hit the return yeah hit the
09:06 - insert Key by mate there so you could
09:08 - also do for example
09:11 - um if I comment that
09:14 - out I could do return string.
09:19 - format and I could format this as uh
09:23 - let's see
09:25 - percent um I'll give it a a width of
09:28 - four characters ID and that's an integer
09:32 - um and this this should be in quotes So
09:33 - This is a format string
09:35 - specifying how the string should look um
09:38 - and this is this is stuff we covered in
09:40 - the last tutorial and again I'll have a
09:42 - call on there an m% S to Output the name
09:46 - and now I just Supply um ID and name so
09:50 - I'm just using the string. format method
09:52 - here to create a formatted string u in
09:55 - the same style as kind of system dial.
09:58 - printf print format and again we have
10:01 - the same results here and I could if I
10:04 - want I could left align this with a
10:07 - negative sign but you get the basic idea
10:11 - um and that's so that's two string for
10:13 - you and very very useful for debuging
10:16 - and in the next tutorial um we're going
10:18 - to look at the very
10:21 - important um do equals method that
10:23 - allows you to compare objects and and
10:27 - this is all kind of stuff that will come
10:28 - up on on a course or a interview
10:31 - possibly or exam um so apart from being
10:35 - extremely useful it's also very useful
10:38 - for um getting jobs or passing exams
10:41 - okay so that's it for this tutorial and
10:42 - this code will be as always on Cave or
10:44 - programming. comom and until next time
10:48 - happy
10:53 - [Music]
10:58 - coding
11:01 - [Music]

Cleaned transcript:

hello this is John from Cave of programming. comom and this is a tutorial on the two string method in Java so all objects in Java um have the object class as their ultimate parent so if I create my own class here it will have object secretly as um as its parent as the class that it actually um derives from um and we're going to look at inheritance um very shortly in this series of tutorials but for now I want to show you some of the standard methods that the object class has and that therefore every um class in Java every object also has so if I create an object here I'll call it obge and I'll just say object equals new object like this and and then if I go object Dot and press control return in eclips to get the autocomplete suggestions you can see that um obge has a whole bunch of methods here and um notify notify all in the various kind of ways I actually go through in my series on multithreading that's quite Advanced so I won't cover that here but in these beginners tutorials I am going to cover um hash code and probably in the next tutorial the equals or do equals method and also um in this tutorial I'm going to look at the two string method so um let's create a class here and I'll just call it um it's going to be very simple so I'll call it uh why not call it frog um and I'm not going to give frog any methods just for the moment but I'll say frog frog one equals new frog like this and again if I do frog one dot um and in fact the auto complete you can see it's going to have all these methods because it has inherited all these methods from the object class that is secretly the parent of the Frog of the Frog class and um in particular it's got a two string method and the two string method is really really useful for helping to debug your applications so let's see how it works um I'll start by giving frog a very simple two string method so um the header of two string looks like this it's public click string to string lowercase o uh lowercase T capital S and it takes no arguments and of course it has to return a string so uh I'm going to just here I'll create a string um and in fact what I'll do is I'll just say return and and for a moment I'll just say return hello like this so I'm just returning a string here uh um and if now if I do sis out down here so control space and if I now do sis out on my frog one like this and I run this um as a Java application it's going to actually output hello because when you do system.out.print Len on an object it um tries to invoke the two string method to get a string representation of that object and if you don't have a any two string method defined for your object so let's just comment this out to take this away again then you can still do system.out.println and what happens is you get this so you get the class name and you get a at sign and you get something here that looks like a memory address but it's actually um called the hash code it's like a kind of unique identifier for all your um objects um in Java and we're going to look at hash code uh in a probably um quite soon in a future tutorial so I'll put this in again for now and the real use of um the two string method is of course you can create a string representation of your object that enables you to identify that object which is really helpful for debugging so let's say that a frog has a name so let's say this is public string name and uh let's give it an idea as well so let's say in fact I should make that private and I'll give it a private int um ID like this and let's say that the Frog Constructor allows you to set those values so int ID and string name and in the Constructor I'll just do this. ID equals ID and this. name equals name um oh yeah it's Capital that should be lowercase I actually your variabl should begin with um lowercase letters in Java really and what I can do here is I'm going to actually use I could do this I could say um let's say return ID plus and some punctuation plus name and there's nothing too wrong with that um and if I do that and I do system. out on frog object I've just got to yeah I've got to give it um obviously a value for the ID and name so let's give it seven fly ID and Bob full of name and if I run this actually maybe Freddy for a frog Freddy to frog so if I run this it's going to say seven call on Freddy and of course if I have um multiple different objects this will allow me to identify which one's which so let's make this five I'll call this one Roger and just do sis out Frog 2 so I'm getting now some useful output down here now there's nothing wrong really with this it's just that it's a little bit inefficient because um you've got a string object here and you're creating um you've got a string object here as well and you're uh this is getting wrapped in a integer um a nonprimitive integer type class and then converted to a string and then you're concatenating all those strings together and turning them into a new string so there's a lot of string objects flying about and a slightly more efficient way of doing it would be to use string Builder so I say I can say string Builder SB um equals new string Builder um and then I can do s sp. append ID um do append let's have some um punctuation and do append name and then I can do return s SP do2 string so um this this avoids um uh the inefficiency of concatenating strings because every time you put a plus between two string um two strings you're basically creating a new string so um as I mentioned in the last tutorial concatenation of strings is pretty inefficient which you might not care about in a simple program but this is um a better way to do it cuz here we've just got one string Builder object and you're using that to build up um a single string from a bunch of different strings without creating any intermediate strings behind the scenes um and if I run that now then I get the same results as before and of course you can use all the stuff that I showed you in the last tutorial here like um uh if you want to return like a formatted string you know you could use for example um well this is this is one version of two string let's just quickly look at another possibility so you could also do um I think I hit the return yeah hit the insert Key by mate there so you could also do for example um if I comment that out I could do return string. format and I could format this as uh let's see percent um I'll give it a a width of four characters ID and that's an integer um and this this should be in quotes So This is a format string specifying how the string should look um and this is this is stuff we covered in the last tutorial and again I'll have a call on there an m% S to Output the name and now I just Supply um ID and name so I'm just using the string. format method here to create a formatted string u in the same style as kind of system dial. printf print format and again we have the same results here and I could if I want I could left align this with a negative sign but you get the basic idea um and that's so that's two string for you and very very useful for debuging and in the next tutorial um we're going to look at the very important um do equals method that allows you to compare objects and and this is all kind of stuff that will come up on on a course or a interview possibly or exam um so apart from being extremely useful it's also very useful for um getting jobs or passing exams okay so that's it for this tutorial and this code will be as always on Cave or programming. comom and until next time happy coding
