With timestamps:

00:18 - hello this is John from cave of
00:21 - programming calm in this tutorial we're
00:23 - going to look at break and continue in
00:26 - the context of loops and C++ so before
00:30 - we move on from loops we've got a couple
00:32 - of statements that can be very useful in
00:35 - some programs in loops and can help you
00:37 - to simplify your code so for an example
00:40 - is let's take a for loop so I'm going to
00:42 - type for int I equals 0 and we can also
00:47 - use foreign for sorry continue and break
00:50 - with while loops and do-while loops as
00:53 - well let's say I less than 5 and I plus
01:02 - plus so let's let's put something in
01:06 - here so we can see what's happening
01:07 - let's say C out I is and I and I'll have
01:16 - an end learn so check this works I'm
01:19 - going to run that we need to build it
01:22 - first project build project and run it
01:27 - there we go so we've got I is 0 1 2 3 4
01:31 - now the first and probably the most
01:35 - useful at these statements is break so
01:40 - what break does is it jumps immediately
01:43 - out of the loop which is yeah it's
01:48 - sometimes useful because sometimes in
01:50 - your your for loop is probably more
01:52 - often used with while loops but even in
01:54 - a for loop you might have some extra
01:56 - condition which occurs within the loop
01:58 - which makes you want to break out of the
02:01 - loop and you could add that condition up
02:04 - here you could have an and clause or
02:06 - whatever in there but sometimes it just
02:09 - makes for more elegant code if you check
02:11 - some condition within the loop and if
02:14 - that condition occurs you break out of
02:15 - the loop let's say for example if I is
02:19 - equal to
02:21 - three break so as soon as we as soon as
02:27 - this code executes the loops going to
02:29 - stop executing we're going to break out
02:31 - of it and even if there's anything
02:33 - underneath here we're not going to see
02:35 - it and let's say looping dot so brake is
02:41 - going to immediately jump out of these
02:43 - brat and closing brackets and do
02:46 - whatever x' after the loop let's put
02:48 - here program quitting so if we run this
02:58 - program so I click run and we get I is
03:05 - zero and and and it says looping and
03:08 - then I is one looping is two is three
03:12 - but when I use three this condition says
03:14 - yeah I is three and it breaks and then
03:17 - notice we don't get this looping after
03:20 - that so after three here it doesn't say
03:22 - looping break is literally shot straight
03:25 - out of the loop and then we were on to
03:28 - the stuff that's after the loop and be
03:31 - careful that when you have like nested
03:33 - brackets within brackets always put that
03:35 - extra tab indentation in here so here
03:38 - I've got an if nested within my for
03:41 - nested within the main subroutine so the
03:47 - statements within main are indented by
03:49 - one tab within four all the statements
03:52 - are indented by an extra tab and within
03:54 - this if which has its own curly brackets
03:56 - we've indented the brain by another top
03:59 - and that's that's really important to
04:00 - keep your code readable so that's that's
04:05 - break let's maybe copy this code and
04:08 - paste it down here so what I'll do is
04:12 - I'll comment this out because I don't I
04:15 - don't want to use it anymore here but I
04:19 - want you to be able to refer to it if
04:21 - you download the source code so I'm just
04:23 - gonna
04:24 - and comment this hour with a slash star
04:26 - star slash let's just use the auto
04:29 - formatter here in fact the auto for
04:34 - matter is strangely and not indented the
04:37 - break ma'am usually you should indent
04:39 - stuff within if but I guess the
04:42 - formatter feels that break should be an
04:44 - exception but I'm going to put it back
04:46 - anyway because it looks a bit odd to me
04:49 - yeah so and continue is a little bit
04:54 - similar to break but it just kind of
04:57 - breaks and the current iteration of the
05:01 - loop and then goes on to the next
05:02 - iteration so if we have continued in
05:04 - here instead what's going to happen is
05:06 - we're not going to execute any
05:08 - statements after continue it's going to
05:11 - break out of that particular iteration
05:14 - of the loop but then it is going to
05:16 - carry on with the following iterations
05:18 - so if we look at this now then we get I
05:23 - is 1 is 2 I week is 3 and after I is 3
05:27 - when we do to continue we don't execute
05:29 - the statements that come after continue
05:31 - so there's no looping after I is 3 but
05:35 - unlike break it then does go on to do
05:38 - the rest of the iterations of the loop
05:40 - so we get is 4 and says looping so
05:44 - that's that's continue and what I want
05:47 - to do in the rest of this tutorial is
05:50 - show you just like one usage maybe of
05:54 - break so you can see how it can be
05:56 - useful let's take the code from from a
06:00 - do-while tutorial so here I've got this
06:03 - program that repeatedly asks the user to
06:06 - enter their password until they finally
06:10 - enter the right password so I'm going to
06:13 - copy all this stuff
06:15 - and paste it in here nice format that
06:19 - yeah continue is also not being indented
06:23 - usually you should like if I had another
06:25 - statement in here like see out
06:28 - let's put see out hello hello let's just
06:36 - let's just do that and then just format
06:38 - that I'll say that first well that's
06:42 - pretty weird
06:43 - and the formatter here is yeah the
06:46 - reason is that I now see because I've
06:50 - commented out if I don't comment it out
06:53 - I use the format you can seal it does in
06:55 - dense stuff correctly but because I've
06:58 - got this stuff in in a comment it's the
07:02 - auto formatter is not doing what I
07:04 - expected it to do so let's just indent
07:08 - those manually for the moment and so
07:12 - that that looks good I'll go into this
07:13 - actually that's that's a bit weird I
07:17 - guess and format is just not geared up
07:20 - for code within comments so nevermind
07:24 - okay and so yeah we've got this program
07:27 - that asks for a password and repeatedly
07:30 - and we can simplify this using break so
07:38 - here we've got we're checking this
07:40 - condition twice that we're checking if
07:43 - the input is equal to the password or
07:44 - not twice here and here now what we
07:49 - could do here is we could change this
07:51 - wild condition to true so now this is an
07:54 - infinite loop but we can break the loop
07:56 - with break so let's say if input is
07:59 - equal to password then we say break
08:05 - let's put the closing bracket in there
08:08 - there we go
08:10 - else so if the input is not equal to the
08:13 - password then we say access denied and
08:17 - we continue
08:19 - so justjust by using a break statement
08:22 - there are made it a little bit clearer
08:24 - and I've avoided having to repeat the
08:28 - condition twice so I think that looks
08:30 - good let's let's check it as if it works
08:32 - so as soon as the inputs equal to the
08:35 - password we're going to break out of
08:37 - what would otherwise be an infinite loop
08:39 - so I'm going to run that enter your
08:41 - password let's try garbage garbage
08:43 - garbage hello access denied
08:49 - well it's case sensitive let's type
08:51 - hello lower case and says program
08:53 - quitting I also said password accepted
08:57 - so just a little example of our break
09:00 - can simplify your code and same for
09:02 - continued I think breaks probably more
09:05 - common now if you want to practice this
09:07 - what I'd recommend is first write a
09:09 - little program write just a little demo
09:13 - like like what I did earlier in this
09:14 - tutorial checking that you understand
09:17 - break and do the same for continue and
09:20 - then take this code from the do-while
09:24 - tutorial and try to modify it yourself
09:29 - with a break or if you can think of a
09:32 - way to user continue in there that makes
09:34 - it nicer by all means do but try to use
09:37 - break or continue in there to simplify
09:39 - the code like I've done and try to do it
09:42 - from memory without referring back to
09:44 - this code but if you do need to refer
09:46 - back then no shame in that but it's good
09:50 - if you if you have a go at first try to
09:52 - get it working yourself from memory and
09:54 - then even if you end up with furring
09:57 - back to this code that will help you
09:59 - uncover the deficits in your
10:02 - understanding and it will help you to
10:04 - get to grips with this okay so that's it
10:07 - for this tutorial and until next time
10:10 - happy coding
10:19 - you
10:32 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to look at break and continue in the context of loops and C++ so before we move on from loops we've got a couple of statements that can be very useful in some programs in loops and can help you to simplify your code so for an example is let's take a for loop so I'm going to type for int I equals 0 and we can also use foreign for sorry continue and break with while loops and dowhile loops as well let's say I less than 5 and I plus plus so let's let's put something in here so we can see what's happening let's say C out I is and I and I'll have an end learn so check this works I'm going to run that we need to build it first project build project and run it there we go so we've got I is 0 1 2 3 4 now the first and probably the most useful at these statements is break so what break does is it jumps immediately out of the loop which is yeah it's sometimes useful because sometimes in your your for loop is probably more often used with while loops but even in a for loop you might have some extra condition which occurs within the loop which makes you want to break out of the loop and you could add that condition up here you could have an and clause or whatever in there but sometimes it just makes for more elegant code if you check some condition within the loop and if that condition occurs you break out of the loop let's say for example if I is equal to three break so as soon as we as soon as this code executes the loops going to stop executing we're going to break out of it and even if there's anything underneath here we're not going to see it and let's say looping dot so brake is going to immediately jump out of these brat and closing brackets and do whatever x' after the loop let's put here program quitting so if we run this program so I click run and we get I is zero and and and it says looping and then I is one looping is two is three but when I use three this condition says yeah I is three and it breaks and then notice we don't get this looping after that so after three here it doesn't say looping break is literally shot straight out of the loop and then we were on to the stuff that's after the loop and be careful that when you have like nested brackets within brackets always put that extra tab indentation in here so here I've got an if nested within my for nested within the main subroutine so the statements within main are indented by one tab within four all the statements are indented by an extra tab and within this if which has its own curly brackets we've indented the brain by another top and that's that's really important to keep your code readable so that's that's break let's maybe copy this code and paste it down here so what I'll do is I'll comment this out because I don't I don't want to use it anymore here but I want you to be able to refer to it if you download the source code so I'm just gonna and comment this hour with a slash star star slash let's just use the auto formatter here in fact the auto for matter is strangely and not indented the break ma'am usually you should indent stuff within if but I guess the formatter feels that break should be an exception but I'm going to put it back anyway because it looks a bit odd to me yeah so and continue is a little bit similar to break but it just kind of breaks and the current iteration of the loop and then goes on to the next iteration so if we have continued in here instead what's going to happen is we're not going to execute any statements after continue it's going to break out of that particular iteration of the loop but then it is going to carry on with the following iterations so if we look at this now then we get I is 1 is 2 I week is 3 and after I is 3 when we do to continue we don't execute the statements that come after continue so there's no looping after I is 3 but unlike break it then does go on to do the rest of the iterations of the loop so we get is 4 and says looping so that's that's continue and what I want to do in the rest of this tutorial is show you just like one usage maybe of break so you can see how it can be useful let's take the code from from a dowhile tutorial so here I've got this program that repeatedly asks the user to enter their password until they finally enter the right password so I'm going to copy all this stuff and paste it in here nice format that yeah continue is also not being indented usually you should like if I had another statement in here like see out let's put see out hello hello let's just let's just do that and then just format that I'll say that first well that's pretty weird and the formatter here is yeah the reason is that I now see because I've commented out if I don't comment it out I use the format you can seal it does in dense stuff correctly but because I've got this stuff in in a comment it's the auto formatter is not doing what I expected it to do so let's just indent those manually for the moment and so that that looks good I'll go into this actually that's that's a bit weird I guess and format is just not geared up for code within comments so nevermind okay and so yeah we've got this program that asks for a password and repeatedly and we can simplify this using break so here we've got we're checking this condition twice that we're checking if the input is equal to the password or not twice here and here now what we could do here is we could change this wild condition to true so now this is an infinite loop but we can break the loop with break so let's say if input is equal to password then we say break let's put the closing bracket in there there we go else so if the input is not equal to the password then we say access denied and we continue so justjust by using a break statement there are made it a little bit clearer and I've avoided having to repeat the condition twice so I think that looks good let's let's check it as if it works so as soon as the inputs equal to the password we're going to break out of what would otherwise be an infinite loop so I'm going to run that enter your password let's try garbage garbage garbage hello access denied well it's case sensitive let's type hello lower case and says program quitting I also said password accepted so just a little example of our break can simplify your code and same for continued I think breaks probably more common now if you want to practice this what I'd recommend is first write a little program write just a little demo like like what I did earlier in this tutorial checking that you understand break and do the same for continue and then take this code from the dowhile tutorial and try to modify it yourself with a break or if you can think of a way to user continue in there that makes it nicer by all means do but try to use break or continue in there to simplify the code like I've done and try to do it from memory without referring back to this code but if you do need to refer back then no shame in that but it's good if you if you have a go at first try to get it working yourself from memory and then even if you end up with furring back to this code that will help you uncover the deficits in your understanding and it will help you to get to grips with this okay so that's it for this tutorial and until next time happy coding you you
