With timestamps:

00:06 - [Music]
00:16 - hello and welcome to another beginner's
00:19 - Java tutorial from cave of roaming calm
00:22 - in this tutorial we're gonna look at
00:25 - passing parameters to method but in a
00:29 - next tutorial we'll get on to looking at
00:30 - sap methods and setters so I've got my
00:35 - main program already set up here here
00:38 - and let's create a new class I'll create
00:44 - a class called robot and let's have a
00:48 - method called speak so I'll say public
00:53 - avoid speak and this makes the robot say
00:58 - something but I'll just pass this out
01:00 - here and have it say hello so in my main
01:04 - method and now I can already create
01:05 - objects from this robot so I can say
01:07 - robot I need a name for the variable so
01:11 - let's call it Sam equals new robot and I
01:16 - could say Sun speak to make it say hello
01:19 - and if I run this so click the green
01:23 - run-button there then after my computer
01:27 - warms up a bit it says hello
01:30 - now often with methods so we saw in the
01:34 - last tutorial that you can return values
01:36 - from methods but another thing that you
01:38 - often want to do is you want to pass
01:40 - values into methods because often you
01:44 - want to some have changed the way that
01:45 - the method you want to change what it
01:48 - does slightly depending on some some
01:52 - kind of the value of some variable or
01:54 - you want to pass some data to the method
01:56 - for some reason and then I look at that
01:59 - in this tutorial so in the case of this
02:02 - spiit method I might want to pass in
02:04 - some text and the robot then is going to
02:07 - read that text out instead of saying
02:10 - hello
02:11 - so let's say let's look at how you do
02:15 - that and basically when you when you
02:18 - create a method you'll notice there's
02:21 - there's always and these two round
02:23 - brackets after the name of the method
02:25 - and it's the same when you call the
02:27 - method like here this actually makes
02:29 - this code run here after the name of the
02:33 - method I get again I've got these two
02:34 - round brackets and these these two round
02:39 - brackets are actually a bit like a chute
02:41 - and you can throw data down the chute so
02:45 - here's like the top end of the chute
02:46 - here and this as well a chute comes out
02:50 - so what I could do is that supposing I
02:55 - put supposing I want this robot to say
02:59 - not hello but I don't know hi I'm Sam I
03:03 - could type some text here hi I'm Sam and
03:10 - so this is a bit like this a string and
03:13 - I'm sort of throwing the string down the
03:15 - chute if you like and don't worry we'll
03:17 - look at the technical lingo in a minute
03:19 - but here's the other end of a chute and
03:22 - this is going to now receive this string
03:25 - so I need to have a string here for this
03:29 - to kind of be shoved into dropped into
03:32 - so here I declare a string variable like
03:36 - I could call it text or anything I like
03:38 - but the important thing is say front and
03:41 - passing a string in throwing a string
03:43 - down shoot here I need a string variable
03:47 - to receive it and now I can use this
03:51 - text variable in my actual method body
03:56 - so here I'll just pass it to sis out and
03:58 - if I run that is gonna say hi I'm Sam so
04:02 - to give a more technical explanation
04:04 - what something is this is called passing
04:08 - a parameter to the method so this is a
04:11 - variable and this of course and this
04:13 - variable is available anywhere between
04:15 - these two curly brackets and I've just
04:19 - used it here but because this variable
04:21 - is declared within these two round
04:25 - brackets we call that a parameter so a
04:29 - parameter is like a variable that you
04:32 - pass into a method
04:35 - so here I'm passing a string into this
04:38 - method and it's appearing in this
04:41 - parameter and I'm just using the value
04:44 - of the parameter here so a parameter is
04:47 - called a parameter because I promise to
04:49 - recite something you kind of change or
04:51 - tweak like if you have a synthesizer you
04:54 - can kind of change their different
04:55 - frequency and you know I don't know that
04:58 - the way it sounds despite turning knobs
05:01 - and then you say you're kind of changing
05:02 - the parameters and this is a method
05:05 - parameter that changes Delana method
05:07 - works this is called passing in
05:10 - parameters and let's let's look at how
05:13 - you do that when an integer so if I want
05:14 - to say public void jump and I want to
05:17 - tell it how high to jump so in tight and
05:21 - I'll just output kind of what I'm doing
05:24 - here with this out just to show you
05:26 - doing something so I've said that this
05:30 - method takes one parameter of type
05:33 - integer and outside of outside of this
05:36 - method the name doesn't matter
05:38 - it's only like here within the method
05:40 - that the name matters because you need a
05:42 - way to refer to the value that's passed
05:44 - in so you need to call it something here
05:46 - but when you're calling the method so
05:49 - down here if I say some dot John the
05:52 - only thing that matters is that the
05:53 - parameter is of type integer so I've got
05:56 - a passing an integer when I call the
05:58 - method otherwise I get an error like
06:00 - this so let's pass in the value 7 and if
06:04 - I run that it's gonna say jumping 7
06:07 - which is output here so I've passed that
06:10 - value in and you can also have multiple
06:12 - parameters you can say like which I say
06:17 - let's have public void and move and I'll
06:24 - have a direction which will be a string
06:25 - it'll be a compass direction direction
06:28 - and like north south east or west and
06:32 - I'll have a number of meters so I int
06:36 - distance or it could be double let's
06:38 - have a double double so floating-point
06:40 - value with a decimal point in it
06:43 - of all distance like that and here I'll
06:47 - say moving distance in direction
06:58 - direction like that and in fact I'll say
07:03 - meters let's say this meters so when I
07:07 - call this method I need to supply it
07:09 - with first a string and then a double
07:12 - value and it needs to be in this order
07:14 - that's very important so if I say hey
07:17 - Sam dot move I will need to give it a
07:20 - direction a string actually so let's say
07:24 - west and a distance let's say 12 14 2
07:30 - meters and if I run that moving to a
07:35 - point 2 meter south space actually 4
07:37 - meters to say it says moving 12 point 2
07:40 - meters in Direction west so the
07:43 - important thing is that when you call
07:44 - the method you have to you have to give
07:46 - it a list of things separated by commas
07:50 - that matches kind of order of the
07:53 - parameter list here and the things that
07:55 - you pass in have to have the same type
07:56 - as these parameters and if you have more
07:59 - than one thing and when you declare
08:01 - these parameters here you've got to
08:03 - separate them by commas and similarly
08:05 - when you call the method and you pass in
08:07 - the values you've got a separate them by
08:10 - commas and not probably if you if you if
08:15 - it's the first time you've seen that
08:16 - this will seem quite confusing something
08:18 - ages to get my head around this even
08:19 - though it's simple in a way but just
08:22 - type it out and practice it and you'll
08:24 - gradually it'll gradually sink in you'll
08:25 - get Hank and see how it works now I want
08:29 - to mention one thing that often confuses
08:32 - beginners certainly confused me when I
08:34 - started programming which is supposing
08:37 - let's take an example or supposing you
08:39 - have a supposing I want to call Sandor
08:42 - speak now we know eclipses just
08:46 - automatically put that in for me I
08:49 - delete it I've got it pass in a string
08:51 - to speak because
08:53 - speak method takes one parameter of type
08:56 - string now supposing I have a string
09:00 - here which I could call greeting and
09:03 - I'll set that equal to hello there like
09:07 - that
09:08 - so greeting is a type string and speak
09:12 - expects a string so I can pass greeting
09:16 - in to speak instead of literally typing
09:19 - something between quotes here and that
09:21 - will work so if I run that it says hello
09:23 - there so I'm here I'm creating a string
09:27 - with hello in it some text in it here
09:30 - I'm calling the method and passing the
09:32 - string to it and then that string that
09:35 - text appears here and it gets output
09:38 - here and what's sort of confusing is
09:41 - that so here we've got a string called
09:44 - greeting and here we're outputting a
09:46 - string and you kind of think well here
09:51 - I'm calling it greeting and here I'm
09:52 - calling a text and what's going on there
09:54 - and really what's going on in this case
09:57 - is that so I've got here is my string
10:02 - this is the actual string that I'm
10:04 - dealing with it's the same string all
10:06 - the way through here but and this
10:09 - variable really is just a label that you
10:12 - used to refer to that string so it's a
10:13 - bit like if this was a bike this is a
10:16 - bit like a bit of paper that I've stuck
10:18 - on it and I've written the word greeting
10:20 - on that on that bit of paper that label
10:23 - so it's a Greek play so this will be a
10:25 - stupid thing to stick on a bike but for
10:28 - a string it makes sense so that's that's
10:32 - literally like it's literally like if
10:34 - you you've got lots of bicycles and you
10:36 - want to identify a particular one you
10:38 - write out a sticky paper label write
10:41 - something on it not write a name on it
10:43 - and stick it on the bike and then you
10:45 - can refuse that label to refer to the
10:46 - biting saying you know that's sad that's
10:49 - the bike that I've called
10:51 - what would you call it bike actually
10:53 - I've really got an idea but supposing
10:55 - you called your bike David it's a bit
10:57 - crazy then you could say that's David
10:59 - over there my bike
11:01 - so in this case this string this text is
11:04 - called greeting here
11:05 - it's like a label types stuck on this
11:07 - string and I use greeting here to refer
11:10 - to that text to say okay I mean by
11:13 - greeting I mean this bit of text but
11:15 - when it appears in the method here the
11:18 - method gives it its own label so the
11:20 - method doesn't care what you called it
11:22 - here it doesn't need to know it doesn't
11:25 - matter this method it says okay I'm
11:27 - going to get a string and I'll call that
11:29 - string text and here it's it's using
11:32 - that string by referring to its name
11:35 - which is text hopefully that will kind
11:39 - of help if you're confused just take a
11:42 - while to get your head around this but
11:45 - the bottom line is that this this
11:46 - actually is the same string that you've
11:48 - got here it's just that you call it by a
11:51 - different name in your method and the
11:53 - kind of reason for that really is that
11:54 - you when you write your class you you
11:57 - don't want to care about what people
11:59 - call their own variables like here and
12:02 - similar similarly if you're using a
12:05 - class you don't need to know what what
12:09 - the parameters are called to the method
12:11 - you just need to know their type so you
12:12 - can call them anything you like in your
12:14 - own code pass them in as long as they've
12:16 - got a right type and they are in the
12:18 - right order
12:19 - then Bob's your uncle so to speak and it
12:24 - works very slightly differently with
12:26 - primitive variables so string is non
12:29 - primitive it's a class you know like
12:31 - Cisco an uppercase letter here with
12:33 - primitive variables it's basically the
12:36 - same idea but it's it's actually
12:38 - slightly different in a way because kind
12:44 - of like if I have an int variable down
12:46 - here int value equals 14 let's say and I
12:51 - say some value so that will work just
12:57 - the same
12:57 - jumping 14 and the only difference is
13:02 - that whereas this isn't like a label or
13:04 - this is a bit more like a bucket a
13:06 - bucket called value in as much as here
13:11 - this is a bit of memory that actually
13:13 - contains this value and in the parameter
13:17 - list here I've got another kind of
13:18 - bucket that can also contain an integer
13:20 - and you're kind of sloshing this integer
13:23 - from this bucket value into this bucket
13:27 - height and then outputting it here so
13:32 - technically you know this is a value and
13:34 - this is a reference but I'm only
13:36 - mentioning me mentioning this now just
13:38 - because if you keep hearing this if
13:40 - you're following these tutorials it'll
13:42 - gradually become clearer in your head if
13:43 - you keep kind of thinking about it but
13:45 - for now I would just kind of practice
13:48 - declaring methods and passing parameters
13:50 - in and you'll gradually get a hang
13:52 - okay so in the next tutorial we're going
13:54 - to look at kind of example of this we're
13:57 - gonna look at set methods or setters and
13:59 - if your lecture if you've if you're
14:01 - following a university course and your
14:02 - lecturer has come forward in a time
14:06 - machine from 1970 your lecturer may
14:08 - refer to set of setters as mutaters and
14:13 - we're also gonna look at this which is
14:16 - very confusing to start with so we're
14:19 - going to look at set methods or setters
14:22 - and this but for now I recommend just
14:25 - practicing this a bit so join me again
14:28 - next time and if you're watching on
14:29 - YouTube please click the subscribe
14:31 - button to be notified when I make new
14:34 - videos thank you very much
14:38 - [Music]
14:47 - you

Cleaned transcript:

hello and welcome to another beginner's Java tutorial from cave of roaming calm in this tutorial we're gonna look at passing parameters to method but in a next tutorial we'll get on to looking at sap methods and setters so I've got my main program already set up here here and let's create a new class I'll create a class called robot and let's have a method called speak so I'll say public avoid speak and this makes the robot say something but I'll just pass this out here and have it say hello so in my main method and now I can already create objects from this robot so I can say robot I need a name for the variable so let's call it Sam equals new robot and I could say Sun speak to make it say hello and if I run this so click the green runbutton there then after my computer warms up a bit it says hello now often with methods so we saw in the last tutorial that you can return values from methods but another thing that you often want to do is you want to pass values into methods because often you want to some have changed the way that the method you want to change what it does slightly depending on some some kind of the value of some variable or you want to pass some data to the method for some reason and then I look at that in this tutorial so in the case of this spiit method I might want to pass in some text and the robot then is going to read that text out instead of saying hello so let's say let's look at how you do that and basically when you when you create a method you'll notice there's there's always and these two round brackets after the name of the method and it's the same when you call the method like here this actually makes this code run here after the name of the method I get again I've got these two round brackets and these these two round brackets are actually a bit like a chute and you can throw data down the chute so here's like the top end of the chute here and this as well a chute comes out so what I could do is that supposing I put supposing I want this robot to say not hello but I don't know hi I'm Sam I could type some text here hi I'm Sam and so this is a bit like this a string and I'm sort of throwing the string down the chute if you like and don't worry we'll look at the technical lingo in a minute but here's the other end of a chute and this is going to now receive this string so I need to have a string here for this to kind of be shoved into dropped into so here I declare a string variable like I could call it text or anything I like but the important thing is say front and passing a string in throwing a string down shoot here I need a string variable to receive it and now I can use this text variable in my actual method body so here I'll just pass it to sis out and if I run that is gonna say hi I'm Sam so to give a more technical explanation what something is this is called passing a parameter to the method so this is a variable and this of course and this variable is available anywhere between these two curly brackets and I've just used it here but because this variable is declared within these two round brackets we call that a parameter so a parameter is like a variable that you pass into a method so here I'm passing a string into this method and it's appearing in this parameter and I'm just using the value of the parameter here so a parameter is called a parameter because I promise to recite something you kind of change or tweak like if you have a synthesizer you can kind of change their different frequency and you know I don't know that the way it sounds despite turning knobs and then you say you're kind of changing the parameters and this is a method parameter that changes Delana method works this is called passing in parameters and let's let's look at how you do that when an integer so if I want to say public void jump and I want to tell it how high to jump so in tight and I'll just output kind of what I'm doing here with this out just to show you doing something so I've said that this method takes one parameter of type integer and outside of outside of this method the name doesn't matter it's only like here within the method that the name matters because you need a way to refer to the value that's passed in so you need to call it something here but when you're calling the method so down here if I say some dot John the only thing that matters is that the parameter is of type integer so I've got a passing an integer when I call the method otherwise I get an error like this so let's pass in the value 7 and if I run that it's gonna say jumping 7 which is output here so I've passed that value in and you can also have multiple parameters you can say like which I say let's have public void and move and I'll have a direction which will be a string it'll be a compass direction direction and like north south east or west and I'll have a number of meters so I int distance or it could be double let's have a double double so floatingpoint value with a decimal point in it of all distance like that and here I'll say moving distance in direction direction like that and in fact I'll say meters let's say this meters so when I call this method I need to supply it with first a string and then a double value and it needs to be in this order that's very important so if I say hey Sam dot move I will need to give it a direction a string actually so let's say west and a distance let's say 12 14 2 meters and if I run that moving to a point 2 meter south space actually 4 meters to say it says moving 12 point 2 meters in Direction west so the important thing is that when you call the method you have to you have to give it a list of things separated by commas that matches kind of order of the parameter list here and the things that you pass in have to have the same type as these parameters and if you have more than one thing and when you declare these parameters here you've got to separate them by commas and similarly when you call the method and you pass in the values you've got a separate them by commas and not probably if you if you if it's the first time you've seen that this will seem quite confusing something ages to get my head around this even though it's simple in a way but just type it out and practice it and you'll gradually it'll gradually sink in you'll get Hank and see how it works now I want to mention one thing that often confuses beginners certainly confused me when I started programming which is supposing let's take an example or supposing you have a supposing I want to call Sandor speak now we know eclipses just automatically put that in for me I delete it I've got it pass in a string to speak because speak method takes one parameter of type string now supposing I have a string here which I could call greeting and I'll set that equal to hello there like that so greeting is a type string and speak expects a string so I can pass greeting in to speak instead of literally typing something between quotes here and that will work so if I run that it says hello there so I'm here I'm creating a string with hello in it some text in it here I'm calling the method and passing the string to it and then that string that text appears here and it gets output here and what's sort of confusing is that so here we've got a string called greeting and here we're outputting a string and you kind of think well here I'm calling it greeting and here I'm calling a text and what's going on there and really what's going on in this case is that so I've got here is my string this is the actual string that I'm dealing with it's the same string all the way through here but and this variable really is just a label that you used to refer to that string so it's a bit like if this was a bike this is a bit like a bit of paper that I've stuck on it and I've written the word greeting on that on that bit of paper that label so it's a Greek play so this will be a stupid thing to stick on a bike but for a string it makes sense so that's that's literally like it's literally like if you you've got lots of bicycles and you want to identify a particular one you write out a sticky paper label write something on it not write a name on it and stick it on the bike and then you can refuse that label to refer to the biting saying you know that's sad that's the bike that I've called what would you call it bike actually I've really got an idea but supposing you called your bike David it's a bit crazy then you could say that's David over there my bike so in this case this string this text is called greeting here it's like a label types stuck on this string and I use greeting here to refer to that text to say okay I mean by greeting I mean this bit of text but when it appears in the method here the method gives it its own label so the method doesn't care what you called it here it doesn't need to know it doesn't matter this method it says okay I'm going to get a string and I'll call that string text and here it's it's using that string by referring to its name which is text hopefully that will kind of help if you're confused just take a while to get your head around this but the bottom line is that this this actually is the same string that you've got here it's just that you call it by a different name in your method and the kind of reason for that really is that you when you write your class you you don't want to care about what people call their own variables like here and similar similarly if you're using a class you don't need to know what what the parameters are called to the method you just need to know their type so you can call them anything you like in your own code pass them in as long as they've got a right type and they are in the right order then Bob's your uncle so to speak and it works very slightly differently with primitive variables so string is non primitive it's a class you know like Cisco an uppercase letter here with primitive variables it's basically the same idea but it's it's actually slightly different in a way because kind of like if I have an int variable down here int value equals 14 let's say and I say some value so that will work just the same jumping 14 and the only difference is that whereas this isn't like a label or this is a bit more like a bucket a bucket called value in as much as here this is a bit of memory that actually contains this value and in the parameter list here I've got another kind of bucket that can also contain an integer and you're kind of sloshing this integer from this bucket value into this bucket height and then outputting it here so technically you know this is a value and this is a reference but I'm only mentioning me mentioning this now just because if you keep hearing this if you're following these tutorials it'll gradually become clearer in your head if you keep kind of thinking about it but for now I would just kind of practice declaring methods and passing parameters in and you'll gradually get a hang okay so in the next tutorial we're going to look at kind of example of this we're gonna look at set methods or setters and if your lecture if you've if you're following a university course and your lecturer has come forward in a time machine from 1970 your lecturer may refer to set of setters as mutaters and we're also gonna look at this which is very confusing to start with so we're going to look at set methods or setters and this but for now I recommend just practicing this a bit so join me again next time and if you're watching on YouTube please click the subscribe button to be notified when I make new videos thank you very much you
