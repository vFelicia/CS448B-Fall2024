With timestamps:

00:01 - [Music]
00:13 - [Music]
00:17 - hello this is John from Cave of
00:19 - programming. comom in this tutorial
00:21 - we're going to take a look at pointers
00:23 - and arrays so the stuff we're going to
00:26 - look at here is a little bit complicated
00:28 - but as always the thing to do
00:30 - is just try some of this stuff out for
00:32 - yourself and um go easy on yourself like
00:35 - don't don't expect yourself to
00:37 - understand this all immediately because
00:39 - you won't attain fluency with this until
00:42 - you've used it several times in your own
00:44 - programs that you've tried to write for
00:46 - yourself but the exercises will help fix
00:49 - this in your mind so let's start by
00:51 - declaring an array I'll make this let's
00:53 - say an array of strings let's say string
00:57 - I'll call it texts texts each equals uh
01:01 - we need to put the array brackets in
01:03 - there of course equals and we'll
01:06 - initialize this with some strings let's
01:10 - say one
01:13 - 2
01:16 - 3 uh now if we if we do size of this
01:19 - array let's just try it see out uh size
01:25 - of text that will give us um the size of
01:29 - all the elements in the array and if and
01:32 - we can divide that by the size
01:35 - of uh
01:37 - string to get the number of elements in
01:39 - the array we've seen this before now
01:42 - this this might seem a little bit
01:44 - puzzling because of course strings have
01:46 - different amounts of data in them but
01:48 - here we see it's it's correctly given as
01:51 - three which is the number of elements in
01:53 - the array and yet we've got different
01:55 - amounts of data in each string well
01:57 - here's uh one to five characters and
01:59 - here is three and three but that's
02:02 - because the actual contents of the
02:03 - string is stored in some memory that the
02:06 - string object allocates separately so
02:09 - what we're storing in the array is is a
02:12 - string object of fixed size and the
02:14 - actual text is stored elsewhere
02:17 - basically by the individual string
02:19 - objects so this this works for string
02:22 - arrays just like it does for
02:25 - interrays now to iterate through that we
02:27 - could of course do this let's say for in
02:30 - I equals not I less than um less than
02:35 - this stuff
02:37 - basically let's just copy
02:40 - that and
02:44 - i++ and now we can do um C
02:49 - out and
02:52 - text I so we've seen that before as well
02:57 - this is just using normal array syntax
02:59 - tax and it looks like this 1 2 3 I'm
03:03 - just going to um change that to
03:05 - flush and add some add an empty space
03:08 - here just so we can get all all that
03:09 - stuff on one
03:12 - line now if we declare a pointer of type
03:16 - string let's do that get rid of this
03:18 - line here let's say string
03:21 - pointer and we'll call it P
03:25 - text uh we can set that to point at the
03:29 - first element in the array and there's
03:32 - several way well there there's two ways
03:33 - to do that basically we'll look at the
03:35 - second way a bit later but one way to do
03:38 - it is just to type texts like this just
03:41 - the name of the array because in fact uh
03:44 - array variables and pointers are
03:47 - extremely similar to each other the main
03:50 - differences perhaps it's even the only
03:53 - difference is that um the array variable
03:56 - actually knows how much data it's
03:58 - pointing at yeah has that information in
04:00 - it and that's why we can use size of to
04:02 - get the number of elements in the array
04:04 - a normal pointer like this doesn't know
04:08 - how much data it's pointing at it only
04:10 - knows um the size of um the size of the
04:15 - first block of data that it's pointing
04:17 - at it doesn't know how many blocks there
04:19 - are so this pointer knows that it's
04:21 - pointing at a string because of this but
04:23 - it doesn't know how many strings there
04:25 - are it doesn't know what what size the
04:28 - block of memory is uh and how many
04:30 - strings there are in that whereas this
04:32 - does but apart from that this and this
04:34 - are basically the same and that's why we
04:36 - can assign a pointer directly to point
04:39 - out an array variable now we can iterate
04:42 - through this uh array using this pointer
04:46 - all we have to do here is change this to
04:48 - P text like that and that will work so
04:52 - it says 1 2
04:54 - 3 that's that's one way of um of using a
04:58 - pointer which is a bit surprising when
04:59 - you first see it to iterate through an
05:01 - array but there are other things that we
05:03 - can do as well let's let's take a look
05:05 - at another example so um one thing that
05:09 - we could do is we could let's use this
05:13 - for loop
05:16 - again and I'll just format that so we've
05:20 - we've left the pointer here pointing at
05:22 - the start of the array like this and
05:26 - instead of using I using like
05:30 - array um array element reference syntax
05:34 - here we could output the thing that the
05:37 - PO is pointing to by D referencing the
05:39 - pointer so if you remember from the last
05:42 - tutorial we can do that just by typing P
05:45 - text with a star be before it so if this
05:48 - pointer points at a string Then star and
05:51 - a pointer name will actually give us um
05:55 - the actual value in the address that
05:57 - that pointer points to that will point
05:59 - to the first string so if we run that
06:01 - it's just going to Output the first
06:03 - string three times 111 let's make that a
06:07 - little bit clearer by outputting just a
06:09 - new line
06:10 - here so I'll save that and run it and um
06:15 - we'll get
06:16 - 111 how can we move this pointer to
06:19 - point at the next string well because
06:21 - the pointer knows what size of block of
06:24 - data what kind of data block size it's
06:26 - pointing at we can just say PEX
06:31 - uh we could say equals P text +
06:36 - 1 uh so by adding one to the pointer uh
06:40 - C++ knows that you mean you want you
06:42 - want to make it point at the next block
06:44 - of data in the in the memory it's
06:47 - pointing at so if we run this
06:50 - now after saving it then we get all the
06:53 - strings 1 2 3 and in fact we can use the
06:56 - more succinct syntax that we've just
06:58 - used here to increment I we can just put
07:01 - PEX Plus+ and that will also make the
07:04 - pointer point at um the next each time
07:08 - that executes it will make it point at
07:10 - the next block of data in the memory
07:12 - it's pointing to so that
07:14 - works now for Loops are actually quite
07:17 - flexible so if we wanted um we could put
07:21 - this up here because we want this to to
07:25 - happen uh once after every time the loop
07:28 - has run and and this the stuff in this
07:31 - part of the for loop after the the
07:34 - second semicolon it's two semicolons
07:37 - dividing the stuff up here and the third
07:39 - section here happens every time after
07:42 - the loop has run and we can put more
07:44 - than one um thing in there we can put a
07:48 - comma and put something else that we
07:50 - want to run besides I ++ we can put P
07:55 - t++ let's get rid of
07:57 - that and that will now also do the
08:03 - trick there's um there's another way
08:05 - that we can do this as well using
08:08 - pointers let's try that so um we can we
08:13 - can create a pointer to the to the start
08:15 - of the text like this the start of the
08:19 - array um this is pointer now by the time
08:22 - we finished is going to point to the end
08:24 - of this array because we've we've
08:26 - incremented it so um I don't want to use
08:29 - that again again let's create a new
08:30 - pointer let's say
08:32 - string pointer P I'll call it P um
08:37 - element because we're going to point
08:39 - this to each element one after the other
08:41 - and I I could set that equal to point to
08:44 - the first string in the array like
08:47 - that and uh I can get another pointer
08:50 - string which I'm going to call string
08:52 - pointer P end I want to point this to
08:55 - the end of the array uh so I want to
08:57 - point it to the last element in the the
08:59 - array and I can do that well let's how
09:02 - would we get the last element in the
09:03 - array we'd have to know how many items
09:06 - are in it unless we use size of so the
09:08 - last item in this array is going to be
09:10 - element two because this is element 0 1
09:14 - and
09:16 - two now to get the address of this
09:19 - element because we we can't just we
09:21 - can't assign the pointer to this but
09:24 - that would give us a nonsense thing that
09:26 - would just take um what this this kind
09:29 - of element whatever whatever data is
09:31 - stored there and put it in the pointer
09:33 - but this is no use what we want is the
09:35 - address of this element and to do that
09:38 - we need the um the Amper sand at the
09:41 - start of
09:43 - it so um this these these brackets are
09:47 - um I forget the exact term but they
09:49 - they're the array element um array
09:53 - element uh operator array element
09:57 - reference operator something like that
09:59 - the an operator that operates on the um
10:03 - on the array variable name to get you
10:06 - the elements in it this is another
10:08 - operator that gets you the address of
10:11 - stuff following it and this works
10:13 - because this operator has a higher
10:15 - precedence than this in other words when
10:18 - we type this C++ will first do this bit
10:23 - it'll first execute this operator and
10:26 - then that one but if you want it to be
10:28 - even clearer you could put this in round
10:32 - brackets like that so now we know we're
10:34 - getting the last element in the array
10:36 - and then we're getting the address of it
10:38 - but we we don't need these round
10:39 - brackets just because um this operator
10:44 - has a higher precedence than this anyway
10:46 - it will be it will execute
10:48 - first so now we've got one pointer that
10:50 - points to the start of the text and one
10:53 - uh of the text array and one pointer
10:55 - that points to the end uh and if we want
10:58 - we could just
11:00 - use the same syntax here um in place of
11:03 - this just just to make it a bit clearer
11:07 - what's going on so we we can put zero in
11:10 - there and that will work just it's just
11:13 - identical to this but since we're using
11:16 - this here if we use this here it makes
11:18 - it a little tiny bit clearer what's
11:20 - going on maybe now what we want to do is
11:23 - we want to Loop through the array and we
11:28 - want to Output every element this points
11:30 - to and after every Loop we want to move
11:34 - this to point at the next element until
11:36 - we find that this is pointing at the
11:39 - same place as this when that happens we
11:41 - want to Output the element and then we
11:43 - want to break the loop so let's maybe um
11:47 - let's use let's try using while loop
11:50 - here let's say while I'll do a while
11:52 - true so this would be an infinite Loop
11:54 - unless we put a break in it and uh we
11:57 - can do c out
12:00 - we can output um the first element by D
12:04 - referencing this element pointer we can
12:06 - say see out star P
12:10 - element and we'll have yeah let's put
12:13 - them all on one line again so I I'll put
12:16 - empty space and then
12:18 - flush then we've got to move P element
12:20 - to point at the next element so we can
12:23 - do p element
12:26 - ++ then let's say if p
12:29 - element equals equals P end if it's now
12:34 - pointing at the last element in the
12:36 - array that means that we've just output
12:38 - the last element in the array and in
12:40 - that case we break the loop so this is
12:43 - also a way of iterating through the
12:45 - array sometimes is very useful let's run
12:47 - this and check that we get the right
12:49 - results it's easy to make mistakes with
12:51 - this yeah I've got one to I've missed
12:53 - all three so I think I've done something
12:55 - wrong what have I done wrong so we
12:57 - pointed it at the first element we
12:59 - output that we incremented it yeah I
13:02 - should have incremented it um after I
13:06 - checked to see if it was at the
13:08 - end so we need to Output the element and
13:12 - we then we say is the element that we
13:14 - just output the last one if so we'll
13:16 - break otherwise increment the pointer
13:20 - okay I think this will work now I'm
13:21 - pretty confident let's run
13:22 - it okay so now we get 1 2 3 it's very
13:26 - easy to make mistakes in C++ even for me
13:29 - and I started doing
13:31 - C++ a long time ago like 15 years or
13:35 - something okay so um we can make this
13:38 - even a little bit more elegant still
13:41 - possibly by um we could find a way of of
13:45 - combining this with this we we could
13:49 - somehow fix that up so that it would
13:50 - work but um but then it's it's starting
13:55 - to look a bit confusing so I think I'll
13:56 - leave it at this
13:59 - okay so this this has been quite a
14:00 - difficult tutorial but um what I'd
14:03 - recommend is like I say go easy on
14:04 - yourself and practice these things first
14:07 - of all Loop through an
14:12 - array using a
14:14 - pointer
14:16 - with array element reference syntax in
14:21 - other words like
14:25 - this then try um looping Loop through an
14:32 - array by incrementing a
14:35 - pointer to the array and then finally uh
14:39 - try looping through the array so Loop
14:42 - through an
14:43 - array and um stopping by by
14:50 - comparing two
14:53 - pointers so um one to the actual element
14:56 - and one to the end so like um uh
15:00 - here we are here we're comparing two
15:03 - pointers we're comparing the pointer
15:06 - that's stepping through the array with a
15:07 - pointer to the end of the array and
15:09 - that's how we stop the
15:11 - loop so um if you want an exercise I'd
15:14 - say try try these three things you're
15:16 - going to struggle with it probably a bit
15:18 - if it's the first time you've seen it
15:20 - for sure um and I remember the first
15:23 - time that I looked at this stuff it was
15:25 - completely baffling took me a long time
15:27 - to get the hang of it
15:29 - but if if you can if you can um get the
15:32 - exercises working with uh only looking
15:35 - back at this text when you need to then
15:40 - um you can basically rest assured that
15:42 - you're progressing quite well and as I
15:44 - say don't don't expect to be completely
15:46 - fluent with this until you've practiced
15:48 - it in actual programs that you've
15:50 - thought up yourself because that's the
15:51 - vital step that you need to really
15:53 - become fluent with C++ but at the moment
15:56 - just working through some exercises and
15:58 - getting stuff working and figuring out
16:00 - what bits youve forgotten or what bits
16:02 - you didn't understand um that is really
16:05 - important I also remember that when I
16:07 - started programming uh I could spend
16:10 - easily sometimes two or three days
16:12 - working through a bug in my program and
16:14 - I just not knowing why it why it did
16:17 - well it did and one thing that helps a
16:19 - lot with that is doing things step by
16:21 - step write a little bit of code then
16:23 - build your program and run it and check
16:25 - that that bit of code works as you
16:27 - expect uh putting some SE out statements
16:30 - in if you want before moving on to the
16:32 - next bit of code it's really bad to
16:34 - write everything all in one block and
16:36 - then build it and run it because it
16:37 - makes it a lot harder to find the bugs
16:39 - in it so you should write a little step
16:42 - build it and run it and then and check
16:44 - that that works properly as far as you
16:46 - can tell before going on to the next
16:48 - step okay so I'll leave you with that
16:50 - we're looking at the most complicated
16:53 - stuff in C++ here pretty much um but um
16:57 - but hang in there
16:59 - because uh after this it's probably
17:01 - going to get easier if anything so until
17:04 - next time happy coding
17:16 - [Music]

Cleaned transcript:

hello this is John from Cave of programming. comom in this tutorial we're going to take a look at pointers and arrays so the stuff we're going to look at here is a little bit complicated but as always the thing to do is just try some of this stuff out for yourself and um go easy on yourself like don't don't expect yourself to understand this all immediately because you won't attain fluency with this until you've used it several times in your own programs that you've tried to write for yourself but the exercises will help fix this in your mind so let's start by declaring an array I'll make this let's say an array of strings let's say string I'll call it texts texts each equals uh we need to put the array brackets in there of course equals and we'll initialize this with some strings let's say one 2 3 uh now if we if we do size of this array let's just try it see out uh size of text that will give us um the size of all the elements in the array and if and we can divide that by the size of uh string to get the number of elements in the array we've seen this before now this this might seem a little bit puzzling because of course strings have different amounts of data in them but here we see it's it's correctly given as three which is the number of elements in the array and yet we've got different amounts of data in each string well here's uh one to five characters and here is three and three but that's because the actual contents of the string is stored in some memory that the string object allocates separately so what we're storing in the array is is a string object of fixed size and the actual text is stored elsewhere basically by the individual string objects so this this works for string arrays just like it does for interrays now to iterate through that we could of course do this let's say for in I equals not I less than um less than this stuff basically let's just copy that and i++ and now we can do um C out and text I so we've seen that before as well this is just using normal array syntax tax and it looks like this 1 2 3 I'm just going to um change that to flush and add some add an empty space here just so we can get all all that stuff on one line now if we declare a pointer of type string let's do that get rid of this line here let's say string pointer and we'll call it P text uh we can set that to point at the first element in the array and there's several way well there there's two ways to do that basically we'll look at the second way a bit later but one way to do it is just to type texts like this just the name of the array because in fact uh array variables and pointers are extremely similar to each other the main differences perhaps it's even the only difference is that um the array variable actually knows how much data it's pointing at yeah has that information in it and that's why we can use size of to get the number of elements in the array a normal pointer like this doesn't know how much data it's pointing at it only knows um the size of um the size of the first block of data that it's pointing at it doesn't know how many blocks there are so this pointer knows that it's pointing at a string because of this but it doesn't know how many strings there are it doesn't know what what size the block of memory is uh and how many strings there are in that whereas this does but apart from that this and this are basically the same and that's why we can assign a pointer directly to point out an array variable now we can iterate through this uh array using this pointer all we have to do here is change this to P text like that and that will work so it says 1 2 3 that's that's one way of um of using a pointer which is a bit surprising when you first see it to iterate through an array but there are other things that we can do as well let's let's take a look at another example so um one thing that we could do is we could let's use this for loop again and I'll just format that so we've we've left the pointer here pointing at the start of the array like this and instead of using I using like array um array element reference syntax here we could output the thing that the PO is pointing to by D referencing the pointer so if you remember from the last tutorial we can do that just by typing P text with a star be before it so if this pointer points at a string Then star and a pointer name will actually give us um the actual value in the address that that pointer points to that will point to the first string so if we run that it's just going to Output the first string three times 111 let's make that a little bit clearer by outputting just a new line here so I'll save that and run it and um we'll get 111 how can we move this pointer to point at the next string well because the pointer knows what size of block of data what kind of data block size it's pointing at we can just say PEX uh we could say equals P text + 1 uh so by adding one to the pointer uh C++ knows that you mean you want you want to make it point at the next block of data in the in the memory it's pointing at so if we run this now after saving it then we get all the strings 1 2 3 and in fact we can use the more succinct syntax that we've just used here to increment I we can just put PEX Plus+ and that will also make the pointer point at um the next each time that executes it will make it point at the next block of data in the memory it's pointing to so that works now for Loops are actually quite flexible so if we wanted um we could put this up here because we want this to to happen uh once after every time the loop has run and and this the stuff in this part of the for loop after the the second semicolon it's two semicolons dividing the stuff up here and the third section here happens every time after the loop has run and we can put more than one um thing in there we can put a comma and put something else that we want to run besides I ++ we can put P t++ let's get rid of that and that will now also do the trick there's um there's another way that we can do this as well using pointers let's try that so um we can we can create a pointer to the to the start of the text like this the start of the array um this is pointer now by the time we finished is going to point to the end of this array because we've we've incremented it so um I don't want to use that again again let's create a new pointer let's say string pointer P I'll call it P um element because we're going to point this to each element one after the other and I I could set that equal to point to the first string in the array like that and uh I can get another pointer string which I'm going to call string pointer P end I want to point this to the end of the array uh so I want to point it to the last element in the the array and I can do that well let's how would we get the last element in the array we'd have to know how many items are in it unless we use size of so the last item in this array is going to be element two because this is element 0 1 and two now to get the address of this element because we we can't just we can't assign the pointer to this but that would give us a nonsense thing that would just take um what this this kind of element whatever whatever data is stored there and put it in the pointer but this is no use what we want is the address of this element and to do that we need the um the Amper sand at the start of it so um this these these brackets are um I forget the exact term but they they're the array element um array element uh operator array element reference operator something like that the an operator that operates on the um on the array variable name to get you the elements in it this is another operator that gets you the address of stuff following it and this works because this operator has a higher precedence than this in other words when we type this C++ will first do this bit it'll first execute this operator and then that one but if you want it to be even clearer you could put this in round brackets like that so now we know we're getting the last element in the array and then we're getting the address of it but we we don't need these round brackets just because um this operator has a higher precedence than this anyway it will be it will execute first so now we've got one pointer that points to the start of the text and one uh of the text array and one pointer that points to the end uh and if we want we could just use the same syntax here um in place of this just just to make it a bit clearer what's going on so we we can put zero in there and that will work just it's just identical to this but since we're using this here if we use this here it makes it a little tiny bit clearer what's going on maybe now what we want to do is we want to Loop through the array and we want to Output every element this points to and after every Loop we want to move this to point at the next element until we find that this is pointing at the same place as this when that happens we want to Output the element and then we want to break the loop so let's maybe um let's use let's try using while loop here let's say while I'll do a while true so this would be an infinite Loop unless we put a break in it and uh we can do c out we can output um the first element by D referencing this element pointer we can say see out star P element and we'll have yeah let's put them all on one line again so I I'll put empty space and then flush then we've got to move P element to point at the next element so we can do p element ++ then let's say if p element equals equals P end if it's now pointing at the last element in the array that means that we've just output the last element in the array and in that case we break the loop so this is also a way of iterating through the array sometimes is very useful let's run this and check that we get the right results it's easy to make mistakes with this yeah I've got one to I've missed all three so I think I've done something wrong what have I done wrong so we pointed it at the first element we output that we incremented it yeah I should have incremented it um after I checked to see if it was at the end so we need to Output the element and we then we say is the element that we just output the last one if so we'll break otherwise increment the pointer okay I think this will work now I'm pretty confident let's run it okay so now we get 1 2 3 it's very easy to make mistakes in C++ even for me and I started doing C++ a long time ago like 15 years or something okay so um we can make this even a little bit more elegant still possibly by um we could find a way of of combining this with this we we could somehow fix that up so that it would work but um but then it's it's starting to look a bit confusing so I think I'll leave it at this okay so this this has been quite a difficult tutorial but um what I'd recommend is like I say go easy on yourself and practice these things first of all Loop through an array using a pointer with array element reference syntax in other words like this then try um looping Loop through an array by incrementing a pointer to the array and then finally uh try looping through the array so Loop through an array and um stopping by by comparing two pointers so um one to the actual element and one to the end so like um uh here we are here we're comparing two pointers we're comparing the pointer that's stepping through the array with a pointer to the end of the array and that's how we stop the loop so um if you want an exercise I'd say try try these three things you're going to struggle with it probably a bit if it's the first time you've seen it for sure um and I remember the first time that I looked at this stuff it was completely baffling took me a long time to get the hang of it but if if you can if you can um get the exercises working with uh only looking back at this text when you need to then um you can basically rest assured that you're progressing quite well and as I say don't don't expect to be completely fluent with this until you've practiced it in actual programs that you've thought up yourself because that's the vital step that you need to really become fluent with C++ but at the moment just working through some exercises and getting stuff working and figuring out what bits youve forgotten or what bits you didn't understand um that is really important I also remember that when I started programming uh I could spend easily sometimes two or three days working through a bug in my program and I just not knowing why it why it did well it did and one thing that helps a lot with that is doing things step by step write a little bit of code then build your program and run it and check that that bit of code works as you expect uh putting some SE out statements in if you want before moving on to the next bit of code it's really bad to write everything all in one block and then build it and run it because it makes it a lot harder to find the bugs in it so you should write a little step build it and run it and then and check that that works properly as far as you can tell before going on to the next step okay so I'll leave you with that we're looking at the most complicated stuff in C++ here pretty much um but um but hang in there because uh after this it's probably going to get easier if anything so until next time happy coding
