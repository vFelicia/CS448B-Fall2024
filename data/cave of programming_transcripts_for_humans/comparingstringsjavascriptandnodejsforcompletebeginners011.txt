With timestamps:

00:00 - hello in this video we're going to talk
00:02 - about basic string comparison in
00:05 - JavaScript
00:06 - so let's write use strict here and I'll
00:12 - have a string that's right text equals
00:16 - cat so we can check if two strings are
00:21 - equal with equals equals so let's write
00:24 - console dot log and text equals equals
00:30 - cat so these these two strings are equal
00:35 - so this equality test operator here
00:38 - should return true let's maybe put this
00:42 - in a kind of a comment which I start put
00:49 - this text so that we know what we've
00:51 - done here then if I run this so node and
00:57 - comparing strings to Jess we see that
01:00 - this indicates that the two strings are
01:03 - the same by returning true or by
01:06 - evaluating to true we can also use the
01:10 - slightly longer version of this operator
01:12 - so this that's the equality test
01:15 - operator this is the identity test
01:18 - operator what's the difference well
01:21 - we'll look at that in the next video but
01:23 - in a nutshell basically you probably
01:26 - some people think that you shouldn't use
01:29 - this short version it's kind of an older
01:33 - feature of JavaScript here this equals
01:36 - equals and some people call it the evil
01:39 - twin of the identity test operator so if
01:42 - in doubt use the longer versions so if
01:46 - you run this now again that says there
01:49 - they're the same it returns true we've
01:52 - got not equals as well so we've got and
01:58 - that also works with strings just as
02:00 - you'd expect
02:02 - so is it true that this test which
02:05 - contains the word cat is not equal to
02:07 - cat as that's going to be false in in
02:10 - all of these cases
02:12 - not equal and it's false that it's not
02:17 - equal it's false that it's not identical
02:19 - it is identical it is equal now
02:22 - surprisingly we can also use less than
02:27 - or equal to whist with strings so we can
02:31 - write texts for example this variable
02:35 - text less than dog is that true or is it
02:40 - false let's maybe just put this in a
02:42 - comment as well not exactly a comment
02:46 - but just some text to remind us of what
02:48 - we're doing here well this is actually
02:54 - going to evaluate to true because it
03:01 - just checks the alphabetical ordering of
03:03 - the strings involved so cat sorts
03:06 - earlier in the alphabet in the alphabet
03:08 - and dog because it begins with a C so if
03:13 - you think about the ordering of it it's
03:15 - true that cat is less than dog so if I
03:18 - run this now it's not a comment on cats
03:20 - or dogs but it says true cat is is less
03:27 - than dog in the alphabetical sense so of
03:30 - course you can use greater than you can
03:32 - use greater than or equal to with
03:34 - strings as well let's just check that so
03:37 - I could write text greater than or equal
03:40 - to dog is it true or is it false well
03:46 - cat is it's sort so earlier in the
03:49 - alphabet then dog so that's going to be
03:51 - false what else I think I think that's
03:58 - probably it's less than greater than
04:00 - notice that they're less than a greater
04:03 - than are are sort of case sensitive so
04:07 - here we've got yeah let's let's try
04:10 - comparing cat with cat with a capital C
04:15 - or dog maybe that's right dog with a
04:19 - capital D
04:22 - and I'll just replace the text in this
04:26 - string here as well so is this true or
04:30 - false that dog is greater than or equal
04:32 - to dog is false I think because in the
04:38 - character set that we're using here
04:40 - unicode character set capital letters
04:44 - are actually ordered earlier than
04:47 - lowercase letters so I think this is
04:50 - false let's just try it yeah false so
04:57 - dog is not greater than or equal to dog
05:00 - with a lowercase D all right that's it
05:04 - for this video and there are other ways
05:06 - to compare strings as well but most of
05:10 - the time these operators will will do
05:12 - the trick for you so until next time oh
05:14 - yeah if you're a beginner the important
05:16 - thing is I'll just say it again you've
05:19 - got to just try this out for yourself
05:20 - try them all out and make sure you
05:22 - understand them and pretty soon we're
05:24 - going to get onto practically using them
05:26 - with loops and conditionals these are
05:29 - we're still working at the moment with
05:31 - the absolute nuts and bolts the real
05:33 - building blocks of programming languages
05:35 - so until next time happy coding

Cleaned transcript:

hello in this video we're going to talk about basic string comparison in JavaScript so let's write use strict here and I'll have a string that's right text equals cat so we can check if two strings are equal with equals equals so let's write console dot log and text equals equals cat so these these two strings are equal so this equality test operator here should return true let's maybe put this in a kind of a comment which I start put this text so that we know what we've done here then if I run this so node and comparing strings to Jess we see that this indicates that the two strings are the same by returning true or by evaluating to true we can also use the slightly longer version of this operator so this that's the equality test operator this is the identity test operator what's the difference well we'll look at that in the next video but in a nutshell basically you probably some people think that you shouldn't use this short version it's kind of an older feature of JavaScript here this equals equals and some people call it the evil twin of the identity test operator so if in doubt use the longer versions so if you run this now again that says there they're the same it returns true we've got not equals as well so we've got and that also works with strings just as you'd expect so is it true that this test which contains the word cat is not equal to cat as that's going to be false in in all of these cases not equal and it's false that it's not equal it's false that it's not identical it is identical it is equal now surprisingly we can also use less than or equal to whist with strings so we can write texts for example this variable text less than dog is that true or is it false let's maybe just put this in a comment as well not exactly a comment but just some text to remind us of what we're doing here well this is actually going to evaluate to true because it just checks the alphabetical ordering of the strings involved so cat sorts earlier in the alphabet in the alphabet and dog because it begins with a C so if you think about the ordering of it it's true that cat is less than dog so if I run this now it's not a comment on cats or dogs but it says true cat is is less than dog in the alphabetical sense so of course you can use greater than you can use greater than or equal to with strings as well let's just check that so I could write text greater than or equal to dog is it true or is it false well cat is it's sort so earlier in the alphabet then dog so that's going to be false what else I think I think that's probably it's less than greater than notice that they're less than a greater than are are sort of case sensitive so here we've got yeah let's let's try comparing cat with cat with a capital C or dog maybe that's right dog with a capital D and I'll just replace the text in this string here as well so is this true or false that dog is greater than or equal to dog is false I think because in the character set that we're using here unicode character set capital letters are actually ordered earlier than lowercase letters so I think this is false let's just try it yeah false so dog is not greater than or equal to dog with a lowercase D all right that's it for this video and there are other ways to compare strings as well but most of the time these operators will will do the trick for you so until next time oh yeah if you're a beginner the important thing is I'll just say it again you've got to just try this out for yourself try them all out and make sure you understand them and pretty soon we're going to get onto practically using them with loops and conditionals these are we're still working at the moment with the absolute nuts and bolts the real building blocks of programming languages so until next time happy coding
