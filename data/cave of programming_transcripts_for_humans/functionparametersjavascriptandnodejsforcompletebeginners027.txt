With timestamps:

00:00 - hello this is John from cave of
00:03 - programming calm in this video we're
00:05 - going to take a look at function
00:06 - parameters continuing my course on
00:09 - JavaScript and nodejs for beginners so
00:12 - in the last video we took a look at how
00:14 - to define a simple function now actually
00:17 - javascript is very flexible it lets you
00:20 - define functions in a variety of ways
00:22 - and we can also put functions in
00:26 - structures called classes and we can do
00:28 - functional programming where we're
00:30 - passing functions to functions but we're
00:32 - going to look at that later on here
00:34 - we're just going to concentrate on some
00:36 - basic building blocks and getting some
00:39 - basic ideas straight so let's create a
00:43 - new file here and I'm going to call it
00:45 - parameters J s we'll start with you
00:49 - strict and we'll create a function let's
00:54 - create a function I'll call it greet
00:59 - again which is what I called it in the
01:00 - last video so function names basically
01:08 - follow the same convention usually as
01:10 - variable names so if you wanted to
01:13 - create a function called greet person
01:16 - let's say you wanted to create a
01:18 - function called hello world usually
01:21 - you'd start it with a lowercase first
01:23 - letter most often or it's the most
01:25 - common convention and the second word of
01:27 - it would begin with an uppercase first
01:29 - letter like this I'm tempted to actually
01:34 - call it hello world but anyway no let's
01:36 - call it greet so as before we have the
01:39 - keyword function and we have a name that
01:42 - we made up for it and then we have two
01:44 - round brackets and we have two curly
01:46 - brackets and in here we can put some
01:51 - statements whatever we like as long as
01:53 - it's valid JavaScript let's write
01:55 - console dot log and hello so this by
02:01 - itself doesn't do anything other than
02:03 - define a function if I run this now so
02:07 - node parameters da che s nothing comes
02:10 - out we
02:13 - to actually call the function somewhere
02:14 - we can call it wherever we were wherever
02:17 - we like in our program here although so
02:22 - what we would normally do is this
02:25 - so let's write greet to actually call
02:28 - the function in other words to actually
02:30 - make the function execute so to make it
02:32 - run the code that it contains and then
02:34 - if I cut if I write no parameters such a
02:37 - s it says hello let's try moving greet
02:42 - above here above where we define the
02:46 - function and it actually still works so
02:50 - in some programming languages you could
02:55 - only call the function after you've
02:59 - defined it and that still looks kind of
03:02 - right to me
03:02 - so if you if you think about the
03:05 - JavaScript interpreter sort of reading
03:08 - downwards it's going to go down the
03:12 - function gets defined and then we can
03:14 - actually call it but actually javascript
03:17 - typically is very flexible so it allows
03:21 - us here to call the function before
03:24 - we've actually defined it and it's able
03:26 - to go and get the function definition
03:27 - for you but that's not true in all
03:31 - programming languages so it's worth
03:32 - being aware of that to me it kind of
03:35 - feels more right because I'm used to
03:37 - other programming languages to call the
03:39 - function after it's defined
03:42 - anyway we're going to look function
03:45 - parameters in this video so in the last
03:48 - video I said that and there the idea of
03:51 - functions comes from mathematics and a
03:55 - function in mathematics is like a black
03:56 - box where you throw a number into the
04:00 - box so to speak and it processes the
04:04 - number and spits another number out and
04:08 - in programming we don't have to pass any
04:12 - data to functions and we don't have to
04:15 - get any data out of it so here we're not
04:18 - doing the function is purely it's purely
04:21 - some statements that it executes but we
04:24 - can and
04:25 - less pass data to a function and we can
04:28 - get data out of it again let's take a
04:31 - look at how to do that so supposing we
04:34 - want to alter the behavior of this
04:35 - function so that it outputs a name so it
04:40 - says like hello Bob or whatever between
04:45 - these two round brackets we can write
04:48 - the name of a variable so it's although
04:52 - in effect here we're declaring a
04:55 - variable but we don't use any kind of
04:59 - word like letter or anything we just
05:01 - write the name of the variable that we
05:03 - want to use so let's supposing I want a
05:06 - variable called name I just write name
05:08 - there and this is something that I'm
05:11 - going to pass to the function when I
05:14 - call it so the function is going to have
05:17 - this name whatever's in there we don't
05:20 - know could be anything could be a number
05:21 - but hopefully it's something appropriate
05:24 - because we called it name and I'm going
05:27 - to output that with console dot log
05:29 - let's write comma name now this so this
05:36 - says that this function has a parameter
05:40 - called name in other words it can accept
05:44 - some data which is going to be placed in
05:47 - this name variable to actually pass that
05:50 - data to the function when we call it in
05:53 - the round brackets after you know where
05:56 - we actually call the function we can
05:58 - pass in some data that's right Bob and
06:04 - let's run this and see what it does so I
06:07 - run it and it says hello Bob what's
06:10 - happening here well a kind of analogy I
06:13 - like to make is that when we call the
06:16 - function these the two round brackets
06:18 - here are kind of like a chute and what
06:21 - we're doing is were throwing Bob in this
06:23 - case down the chute we're throwing some
06:25 - data down the chute the chute comes out
06:28 - here where we define the function and
06:31 - this Bob ends up getting thrown into
06:34 - this variable here and then we can use
06:36 - that variable here
06:39 - so let's try it again on a different
06:41 - name that's right greet and that's right
06:45 - Claire we've got to be that use male and
06:52 - female names equally but then there are
06:56 - also sort of names that are neither male
07:00 - or female sand minefield basically but
07:02 - anyway let's run this ok so hello Bob
07:05 - and hello Claire
07:07 - and so we're using the same function but
07:11 - we're changing how it works because the
07:13 - first time it says hello Bob the second
07:15 - time it says hello Claire
07:17 - if you if you've ever used a synthesizer
07:21 - like a musical the musical instrument it
07:25 - will have various things that you can
07:26 - change and control
07:27 - and we call those parameters so you
07:30 - change the parameters parameter values
07:33 - on the synthesizer to change what sounds
07:36 - it makes functions are kind of the same
07:38 - so we call this a parameter because it
07:42 - changes how the function works this is a
07:44 - function parameter and it is also a
07:48 - variable and we're outputting the
07:50 - variable in our consult log when we
07:52 - actually pass values to the function we
07:56 - call them arguments so we supply an
07:58 - argument to the function kind of strange
08:01 - lingo why why it's argument I guess that
08:06 - comes from mathematics as well but
08:09 - you'll get used to it so this is a
08:11 - function parameter this name variable
08:14 - here and here were passing arguments to
08:16 - the function we can actually also pass
08:20 - more than one so supposing we wanted to
08:24 - pass in the name of a day so we can have
08:29 - a list of parameters here let's write
08:32 - comedy so I'm not using it at the moment
08:37 - if I were to run it at the moment so
08:39 - many programming languages would if I
08:43 - try to run this now so I've got a
08:44 - function that expects two arguments
08:47 - because it's got two parameters and I'm
08:49 - running it each time with only one
08:51 - argument many
08:52 - programming languages would gag at that
08:55 - point they would refuse to execute they
08:57 - would say no this is wrong but
08:59 - javascript happily executes sit does the
09:02 - same thing as before at the moment
09:04 - JavaScript say extreme flexibility
09:07 - partly comes from just just I suppose it
09:10 - being an interpreted sort of scripting
09:14 - type language you know it interpreted in
09:19 - the sense that when you run it there's
09:21 - an actual program node in this
09:22 - particular case it's actually
09:24 - interpreting the program and running it
09:25 - and interpreted languages tend to be
09:28 - more flexible than compiled languages
09:30 - where you take text and you turn it into
09:33 - a binary file you compile it into a
09:36 - binary file it's also weakly tight so
09:40 - variables don't have types it's not like
09:43 - we have one kind of variable that's an
09:45 - integer and one that's a piece of text
09:48 - and so on you know we have weak typing
09:50 - in JavaScript so it's very flexible in
09:52 - the nature of it and because it was
09:55 - originally designed to run in browsers
09:57 - it doesn't make any strict demands on it
10:00 - on the programmer and it lets you do
10:02 - things like this but anyway let's
10:04 - actually make use of this day variable
10:07 - so let's say hello comma name comma . it
10:15 - is and then let's output the day what
10:20 - happens if I run this so now I'm I've
10:23 - got this day parameter but I'm only
10:25 - supplying one argument just the name
10:27 - each time I run the function if I run
10:30 - this it says it is undefined so it lets
10:35 - me refer today but because I haven't
10:37 - given it I'm actually given it a value
10:39 - it just says undefined but let's give it
10:42 - a value so here I'm going to when I
10:45 - actually call the function I need to
10:47 - supply ideally usually most of the time
10:49 - I'm going to be supplying a list of
10:53 - arguments that matches what we've got
10:55 - here so that's right comma Tuesday and
11:01 - here let's write comma
11:05 - Saturday so if I run this it says hello
11:10 - Bob it is Tuesday actually I dis looks a
11:13 - bit ugly with because consult our local
11:17 - puts of space here yeah they're scared
11:22 - of that . now that'll do it's it's quite
11:29 - ugly actually maybe it'd look better
11:31 - with a full stop in it doesn't matter
11:33 - anyway hello Bob
11:36 - it is Tuesday hello Clara it is Saturday
11:38 - so you know again going back to my shoot
11:40 - analogy it's here it's as if we've
11:42 - thrown the values Bob and Tuesday down
11:44 - the chute and they end up getting
11:47 - stuffed into the corresponding
11:48 - parameters here
11:50 - and we can make use of them here we can
11:54 - also of course you might guess we can
11:57 - pass variables instead of literal values
12:00 - so let's say we have a variable we can
12:05 - call it what we want so we could call it
12:06 - let's call it something other than day
12:09 - like day of week equals Tuesday we can
12:18 - pass day of week here instead of a
12:23 - literal hard-coded value and this works
12:27 - as before this can also be confusing
12:30 - to beginners because this variable
12:35 - doesn't have the same name as this
12:37 - variable but it doesn't matter the the
12:41 - mechanism here is not trying to match
12:43 - names of variables this is simply an
12:47 - argument simply a value that gets passed
12:51 - to the function thrown down the chute so
12:54 - to speak and it ends up being sort of
12:58 - received at the lower end of the chute
13:00 - here so you just simply taking the
13:04 - comma-separated list of values and
13:06 - shoving them into the corresponding
13:07 - variables here and of course you can
13:10 - also pass in numbers as well and other
13:14 - kinds of things you can even pass in
13:16 - arrays so we'll
13:19 - leave it there for this video the thing
13:21 - to do as always is try this out for
13:23 - yourself and see if you can get creative
13:25 - with it see if you can change it somehow
13:28 - try functions with three parameters once
13:31 - you think you've got the hang of it and
13:33 - you know see how you get on it is just a
13:35 - question of typing this out to
13:37 - understand it I don't think it's good to
13:40 - spend a lot of time puzzling over it
13:43 - the thing is to actually try it get it
13:45 - working for yourself and eventually your
13:47 - fingers will start remembering what to
13:49 - type and this will become second nature
13:51 - to you so until next time happy coding

Cleaned transcript:

hello this is John from cave of programming calm in this video we're going to take a look at function parameters continuing my course on JavaScript and nodejs for beginners so in the last video we took a look at how to define a simple function now actually javascript is very flexible it lets you define functions in a variety of ways and we can also put functions in structures called classes and we can do functional programming where we're passing functions to functions but we're going to look at that later on here we're just going to concentrate on some basic building blocks and getting some basic ideas straight so let's create a new file here and I'm going to call it parameters J s we'll start with you strict and we'll create a function let's create a function I'll call it greet again which is what I called it in the last video so function names basically follow the same convention usually as variable names so if you wanted to create a function called greet person let's say you wanted to create a function called hello world usually you'd start it with a lowercase first letter most often or it's the most common convention and the second word of it would begin with an uppercase first letter like this I'm tempted to actually call it hello world but anyway no let's call it greet so as before we have the keyword function and we have a name that we made up for it and then we have two round brackets and we have two curly brackets and in here we can put some statements whatever we like as long as it's valid JavaScript let's write console dot log and hello so this by itself doesn't do anything other than define a function if I run this now so node parameters da che s nothing comes out we to actually call the function somewhere we can call it wherever we were wherever we like in our program here although so what we would normally do is this so let's write greet to actually call the function in other words to actually make the function execute so to make it run the code that it contains and then if I cut if I write no parameters such a s it says hello let's try moving greet above here above where we define the function and it actually still works so in some programming languages you could only call the function after you've defined it and that still looks kind of right to me so if you if you think about the JavaScript interpreter sort of reading downwards it's going to go down the function gets defined and then we can actually call it but actually javascript typically is very flexible so it allows us here to call the function before we've actually defined it and it's able to go and get the function definition for you but that's not true in all programming languages so it's worth being aware of that to me it kind of feels more right because I'm used to other programming languages to call the function after it's defined anyway we're going to look function parameters in this video so in the last video I said that and there the idea of functions comes from mathematics and a function in mathematics is like a black box where you throw a number into the box so to speak and it processes the number and spits another number out and in programming we don't have to pass any data to functions and we don't have to get any data out of it so here we're not doing the function is purely it's purely some statements that it executes but we can and less pass data to a function and we can get data out of it again let's take a look at how to do that so supposing we want to alter the behavior of this function so that it outputs a name so it says like hello Bob or whatever between these two round brackets we can write the name of a variable so it's although in effect here we're declaring a variable but we don't use any kind of word like letter or anything we just write the name of the variable that we want to use so let's supposing I want a variable called name I just write name there and this is something that I'm going to pass to the function when I call it so the function is going to have this name whatever's in there we don't know could be anything could be a number but hopefully it's something appropriate because we called it name and I'm going to output that with console dot log let's write comma name now this so this says that this function has a parameter called name in other words it can accept some data which is going to be placed in this name variable to actually pass that data to the function when we call it in the round brackets after you know where we actually call the function we can pass in some data that's right Bob and let's run this and see what it does so I run it and it says hello Bob what's happening here well a kind of analogy I like to make is that when we call the function these the two round brackets here are kind of like a chute and what we're doing is were throwing Bob in this case down the chute we're throwing some data down the chute the chute comes out here where we define the function and this Bob ends up getting thrown into this variable here and then we can use that variable here so let's try it again on a different name that's right greet and that's right Claire we've got to be that use male and female names equally but then there are also sort of names that are neither male or female sand minefield basically but anyway let's run this ok so hello Bob and hello Claire and so we're using the same function but we're changing how it works because the first time it says hello Bob the second time it says hello Claire if you if you've ever used a synthesizer like a musical the musical instrument it will have various things that you can change and control and we call those parameters so you change the parameters parameter values on the synthesizer to change what sounds it makes functions are kind of the same so we call this a parameter because it changes how the function works this is a function parameter and it is also a variable and we're outputting the variable in our consult log when we actually pass values to the function we call them arguments so we supply an argument to the function kind of strange lingo why why it's argument I guess that comes from mathematics as well but you'll get used to it so this is a function parameter this name variable here and here were passing arguments to the function we can actually also pass more than one so supposing we wanted to pass in the name of a day so we can have a list of parameters here let's write comedy so I'm not using it at the moment if I were to run it at the moment so many programming languages would if I try to run this now so I've got a function that expects two arguments because it's got two parameters and I'm running it each time with only one argument many programming languages would gag at that point they would refuse to execute they would say no this is wrong but javascript happily executes sit does the same thing as before at the moment JavaScript say extreme flexibility partly comes from just just I suppose it being an interpreted sort of scripting type language you know it interpreted in the sense that when you run it there's an actual program node in this particular case it's actually interpreting the program and running it and interpreted languages tend to be more flexible than compiled languages where you take text and you turn it into a binary file you compile it into a binary file it's also weakly tight so variables don't have types it's not like we have one kind of variable that's an integer and one that's a piece of text and so on you know we have weak typing in JavaScript so it's very flexible in the nature of it and because it was originally designed to run in browsers it doesn't make any strict demands on it on the programmer and it lets you do things like this but anyway let's actually make use of this day variable so let's say hello comma name comma . it is and then let's output the day what happens if I run this so now I'm I've got this day parameter but I'm only supplying one argument just the name each time I run the function if I run this it says it is undefined so it lets me refer today but because I haven't given it I'm actually given it a value it just says undefined but let's give it a value so here I'm going to when I actually call the function I need to supply ideally usually most of the time I'm going to be supplying a list of arguments that matches what we've got here so that's right comma Tuesday and here let's write comma Saturday so if I run this it says hello Bob it is Tuesday actually I dis looks a bit ugly with because consult our local puts of space here yeah they're scared of that . now that'll do it's it's quite ugly actually maybe it'd look better with a full stop in it doesn't matter anyway hello Bob it is Tuesday hello Clara it is Saturday so you know again going back to my shoot analogy it's here it's as if we've thrown the values Bob and Tuesday down the chute and they end up getting stuffed into the corresponding parameters here and we can make use of them here we can also of course you might guess we can pass variables instead of literal values so let's say we have a variable we can call it what we want so we could call it let's call it something other than day like day of week equals Tuesday we can pass day of week here instead of a literal hardcoded value and this works as before this can also be confusing to beginners because this variable doesn't have the same name as this variable but it doesn't matter the the mechanism here is not trying to match names of variables this is simply an argument simply a value that gets passed to the function thrown down the chute so to speak and it ends up being sort of received at the lower end of the chute here so you just simply taking the commaseparated list of values and shoving them into the corresponding variables here and of course you can also pass in numbers as well and other kinds of things you can even pass in arrays so we'll leave it there for this video the thing to do as always is try this out for yourself and see if you can get creative with it see if you can change it somehow try functions with three parameters once you think you've got the hang of it and you know see how you get on it is just a question of typing this out to understand it I don't think it's good to spend a lot of time puzzling over it the thing is to actually try it get it working for yourself and eventually your fingers will start remembering what to type and this will become second nature to you so until next time happy coding
