With timestamps:

00:16 - hello this is John from cave of
00:19 - programming calm in this tutorial we're
00:22 - going to start looking at subroutines in
00:24 - C++ which are actually more usually
00:27 - known as functions so a function is it's
00:32 - just like a separate piece of code
00:36 - containing usually multiple lines which
00:39 - you can invoke from there from wherever
00:43 - you like so you can cause it to run
00:45 - wherever you like in your program that
00:47 - means you can reuse it and you can split
00:51 - up your program into logical kind of
00:54 - sections and I've got a little program
00:56 - here that I'm going to add a function to
00:59 - so what this program does is it displays
01:02 - a menu i should be three actually and
01:06 - ask the user to enter their selection
01:08 - and then they enter one of these numbers
01:11 - 1 2 3 or something else if they get it
01:13 - wrong and then we just switch on the
01:15 - number and we just we've got some dummy
01:18 - functionality here we're just outputting
01:20 - some text depending on what number they
01:23 - enter and so I'm going to add I think
01:27 - just one a function to this program just
01:32 - for the moment there's quite a lot to
01:34 - say about functions and so I'm just
01:37 - going to kind of start gently here one
01:41 - thing that I want to mention that the
01:42 - star is that C++ is is built on a
01:45 - language called C it's is it consists of
01:49 - basically extensions to the C language
01:51 - and in C you created your entire program
01:54 - using functions so you slept whole thing
01:57 - of using functions in c++ we split that
02:01 - there we split the program up using
02:04 - classes and classes contain both data
02:08 - and functions and we'll get onto that in
02:10 - due course but I just want you to be
02:13 - worth away for a moment that what we're
02:15 - looking at here is not the kind of final
02:18 - way of doing things it's it's a step on
02:21 - the way to creating methods
02:24 - and methods are functions that are part
02:26 - of a class and we're going to see that
02:28 - later on nevertheless it is still quite
02:32 - common to use some functions in the C++
02:34 - program even our purists would say they
02:36 - should all belong to classes anyway
02:38 - enough about this let's go on and take a
02:40 - look at how this works so one thing we
02:45 - could do here just just to get started
02:47 - is we've got some code here that outputs
02:51 - a menu and that is prime candidate for
02:55 - putting in its own function so let's
02:59 - create a function up here I'm going to
03:01 - start by typing the keyword void and
03:03 - we're going to see what void means later
03:06 - on but for now I'll just mention that it
03:08 - means we're not returning any data into
03:11 - the into the what we call a calling
03:14 - function which in this case is going to
03:17 - be main and that's that's probably not
03:20 - going to mean much to you at the moment
03:21 - but we will look at it later on so type
03:23 - void and then we need a name for the
03:25 - function and the name for functions
03:27 - should follow pretty much the same
03:29 - conventions as name names for variables
03:32 - let's call this show menu so I'm
03:35 - capitalizing the Ender and in order to
03:39 - just kind of differentiate between the
03:41 - two words and I'm starting the function
03:43 - in this case with a lowercase letter as
03:46 - well which is a pretty normal thing to
03:48 - do although you do see different
03:50 - conventions in C++ this is one of the
03:52 - most common and again you could use
03:55 - underscores if you want in here instead
03:57 - but if you do that you should deal with
03:59 - your variables as well so however you
04:01 - separate the words and your variables
04:03 - and functions and whatever convention
04:06 - you are dear to you should adhere to it
04:08 - consistently and don't mix them
04:10 - following that we're going to have the
04:13 - same pattern that we've now seen
04:14 - multiple times we're going to have an
04:16 - open and close round bracket and in
04:19 - subsequent tutorials we're going to see
04:20 - what you can put in those round brackets
04:22 - and following that an open and close
04:24 - curly bracket
04:26 - like this and between the curly brackets
04:29 - we can pop code so I'm going to just cut
04:32 - this menu from my main function and
04:37 - paste it into this show menu function
04:39 - and I'll just use the auto formatter to
04:41 - format it so this defines a function
04:44 - this is defining a block of code which
04:47 - we've labeled show menu and this block
04:50 - of code is it's performing these actions
04:52 - it's performing these statements and we
04:56 - can now invoke this block of code from
04:58 - anywhere we talked about calling the
05:00 - function so this this doesn't do
05:02 - anything in itself this is stuff that we
05:05 - could do if we wanted to do and to
05:07 - actually make this happen we need to
05:09 - call a function and to do that in Maine
05:12 - where I previously had this code I'm
05:14 - going to type show menu with round
05:18 - brackets and finish with a semicolon at
05:21 - the end there so if we run this now it's
05:24 - going to look it's going to behave
05:27 - exactly the same as the program did
05:29 - before so I've got the menu now it's
05:31 - been output with this code in here and
05:34 - we can our enter enter a selection as
05:37 - say 3 hit return and it says quitting
05:40 - because we've invoked and case 3 here so
05:46 - here we're defining a function and here
05:49 - or you could also say we're implementing
05:51 - the function and here we're calling the
05:54 - function we're actually making it run
05:56 - we're actually making this code run and
06:00 - notice that I define the function above
06:02 - main here if I defined it below we'd
06:07 - have the same problem that we've seen
06:08 - previously with variables so if I try if
06:11 - I say this and then try to build it
06:13 - project build project then we get an
06:16 - error here she says show many was not
06:19 - declared in this scope and that's
06:21 - because the compiler reads these lines
06:24 - downwards and when it gets to this point
06:26 - it hasn't yet seen this
06:29 - so it says you can't use that because I
06:32 - haven't seen it and we're going to see
06:35 - ways that we can get around that because
06:37 - that's that's quite inconvenient but
06:39 - fortunately and there are things we can
06:42 - do that avoid us having to declare
06:44 - everything in order but for the moment
06:46 - I'm going to suggest that you take any
06:48 - program that you've written so far
06:50 - anyone at all and try to put some code
06:53 - into it into a function like this and
06:55 - then call it in your main function and
07:02 - and for the moment I think that's that's
07:05 - enough practice it's trying to think if
07:07 - there's anything else I want to say
07:08 - about functions at this point we're
07:10 - going to see a lot more stuff that you
07:12 - can do with them and that you need to
07:13 - know about them but I think this is a
07:16 - really good start and you can't have
07:19 - multiple functions certainly and you can
07:21 - try that if you want define multiple
07:23 - ones we could take all this code and
07:27 - split it off into its own function if I
07:29 - let's just do that quickly before we
07:31 - close so it's hard to know what to call
07:36 - this because at the moment we can't
07:38 - split this out into a really elegant way
07:40 - but let's let's call it for process
07:45 - selection or we could call it pros get
07:50 - under process selection or something
07:52 - like that
07:52 - I don't know and let's let's just cut
07:55 - all this paste it in there format it
07:59 - command shift left or control shift left
08:02 - on Windows and say process selection and
08:07 - save that and let's just run it and it
08:11 - should behave exactly as before if we've
08:13 - got this right
08:15 - so we can enter a number like five and
08:21 - says please set select an item on the
08:23 - menu because the default case is now
08:25 - executing so yeah I remember the thing
08:28 - that I wanted to tell you which is the
08:30 - inner C++ program if if it is built up
08:34 - of functions which usually it shouldn't
08:38 - be but you see a lot that are and
08:39 - certainly in the C program deep the aim
08:42 - its to get your main function really
08:45 - simple so you can just glance it and see
08:48 - immediately what it's doing so here is
08:49 - it's a really small main function which
08:52 - is good and we can see that it's just
08:54 - showing the menu and then processing the
08:56 - selection from that menu and that's kind
08:58 - of a good situation to keep your main
09:00 - really simple and make your main
09:02 - illustrate basically whatever is
09:05 - happening in your program so you can
09:06 - pretty much see at a glance so I'm going
09:10 - to leave you leave you with this try
09:11 - this out on any any program you've
09:13 - written try to define at least one
09:15 - function and in the next tutorial we're
09:19 - going to look at more stuff that you can
09:21 - do with functions so join me again for
09:23 - that and until next time happy
09:32 - you
09:47 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to start looking at subroutines in C++ which are actually more usually known as functions so a function is it's just like a separate piece of code containing usually multiple lines which you can invoke from there from wherever you like so you can cause it to run wherever you like in your program that means you can reuse it and you can split up your program into logical kind of sections and I've got a little program here that I'm going to add a function to so what this program does is it displays a menu i should be three actually and ask the user to enter their selection and then they enter one of these numbers 1 2 3 or something else if they get it wrong and then we just switch on the number and we just we've got some dummy functionality here we're just outputting some text depending on what number they enter and so I'm going to add I think just one a function to this program just for the moment there's quite a lot to say about functions and so I'm just going to kind of start gently here one thing that I want to mention that the star is that C++ is is built on a language called C it's is it consists of basically extensions to the C language and in C you created your entire program using functions so you slept whole thing of using functions in c++ we split that there we split the program up using classes and classes contain both data and functions and we'll get onto that in due course but I just want you to be worth away for a moment that what we're looking at here is not the kind of final way of doing things it's it's a step on the way to creating methods and methods are functions that are part of a class and we're going to see that later on nevertheless it is still quite common to use some functions in the C++ program even our purists would say they should all belong to classes anyway enough about this let's go on and take a look at how this works so one thing we could do here just just to get started is we've got some code here that outputs a menu and that is prime candidate for putting in its own function so let's create a function up here I'm going to start by typing the keyword void and we're going to see what void means later on but for now I'll just mention that it means we're not returning any data into the into the what we call a calling function which in this case is going to be main and that's that's probably not going to mean much to you at the moment but we will look at it later on so type void and then we need a name for the function and the name for functions should follow pretty much the same conventions as name names for variables let's call this show menu so I'm capitalizing the Ender and in order to just kind of differentiate between the two words and I'm starting the function in this case with a lowercase letter as well which is a pretty normal thing to do although you do see different conventions in C++ this is one of the most common and again you could use underscores if you want in here instead but if you do that you should deal with your variables as well so however you separate the words and your variables and functions and whatever convention you are dear to you should adhere to it consistently and don't mix them following that we're going to have the same pattern that we've now seen multiple times we're going to have an open and close round bracket and in subsequent tutorials we're going to see what you can put in those round brackets and following that an open and close curly bracket like this and between the curly brackets we can pop code so I'm going to just cut this menu from my main function and paste it into this show menu function and I'll just use the auto formatter to format it so this defines a function this is defining a block of code which we've labeled show menu and this block of code is it's performing these actions it's performing these statements and we can now invoke this block of code from anywhere we talked about calling the function so this this doesn't do anything in itself this is stuff that we could do if we wanted to do and to actually make this happen we need to call a function and to do that in Maine where I previously had this code I'm going to type show menu with round brackets and finish with a semicolon at the end there so if we run this now it's going to look it's going to behave exactly the same as the program did before so I've got the menu now it's been output with this code in here and we can our enter enter a selection as say 3 hit return and it says quitting because we've invoked and case 3 here so here we're defining a function and here or you could also say we're implementing the function and here we're calling the function we're actually making it run we're actually making this code run and notice that I define the function above main here if I defined it below we'd have the same problem that we've seen previously with variables so if I try if I say this and then try to build it project build project then we get an error here she says show many was not declared in this scope and that's because the compiler reads these lines downwards and when it gets to this point it hasn't yet seen this so it says you can't use that because I haven't seen it and we're going to see ways that we can get around that because that's that's quite inconvenient but fortunately and there are things we can do that avoid us having to declare everything in order but for the moment I'm going to suggest that you take any program that you've written so far anyone at all and try to put some code into it into a function like this and then call it in your main function and and for the moment I think that's that's enough practice it's trying to think if there's anything else I want to say about functions at this point we're going to see a lot more stuff that you can do with them and that you need to know about them but I think this is a really good start and you can't have multiple functions certainly and you can try that if you want define multiple ones we could take all this code and split it off into its own function if I let's just do that quickly before we close so it's hard to know what to call this because at the moment we can't split this out into a really elegant way but let's let's call it for process selection or we could call it pros get under process selection or something like that I don't know and let's let's just cut all this paste it in there format it command shift left or control shift left on Windows and say process selection and save that and let's just run it and it should behave exactly as before if we've got this right so we can enter a number like five and says please set select an item on the menu because the default case is now executing so yeah I remember the thing that I wanted to tell you which is the inner C++ program if if it is built up of functions which usually it shouldn't be but you see a lot that are and certainly in the C program deep the aim its to get your main function really simple so you can just glance it and see immediately what it's doing so here is it's a really small main function which is good and we can see that it's just showing the menu and then processing the selection from that menu and that's kind of a good situation to keep your main really simple and make your main illustrate basically whatever is happening in your program so you can pretty much see at a glance so I'm going to leave you leave you with this try this out on any any program you've written try to define at least one function and in the next tutorial we're going to look at more stuff that you can do with functions so join me again for that and until next time happy you you
