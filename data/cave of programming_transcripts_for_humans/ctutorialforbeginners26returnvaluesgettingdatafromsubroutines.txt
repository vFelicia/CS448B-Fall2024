With timestamps:

00:16 - hello this is John from cave of
00:19 - programming calm in this tutorial we're
00:21 - going to learn our returning values from
00:23 - functions so I copied the project from
00:28 - the last tutorial and just paste it into
00:30 - the into the project view project
00:34 - Explorer here to create this copy which
00:38 - is here and now this process selection
00:45 - which we have from the last tutorial is
00:47 - actually doing two tasks here or at
00:49 - least two tasks it's getting input from
00:52 - the user and then it's processing that
00:55 - input what would like to do is create a
00:57 - dedicated function that just gets input
00:59 - from the user let's take out this stuff
01:02 - that is actually processing the input
01:04 - here let's cut it and put it back in the
01:06 - main function for the moment I'll just
01:08 - format that now the problem here is that
01:11 - we've declared input which is the
01:14 - variable we use to get the user input in
01:17 - process selection and variables are
01:19 - scoped to the enclosing pair of curly
01:22 - brackets so this variable the scope of
01:26 - it is these curly brackets and that
01:27 - means that it only exists between those
01:30 - curly brackets so we can't then use it
01:32 - down here which is why I've got an error
01:34 - here so to deal with that we need to
01:39 - make this function return a value into
01:42 - the calling function which is main here
01:45 - so we want to get a value from this and
01:48 - we want to be able to use it in this so
01:53 - to do that and what we do is firstly
01:56 - this void here this is what we call the
01:59 - return type of process selection the
02:03 - return type of the function and I want
02:05 - this function to return an integer so
02:07 - I'm going to change void for it means no
02:10 - return type and I'm going to change that
02:12 - to int because we want to return an
02:15 - integer
02:16 - then at the end of the function here I'm
02:19 - going to type return input and that is
02:25 - enough to say to actually make this
02:28 - function return a integer so here we're
02:31 - saying that it returns an integer and
02:34 - here we're specifying what integer we
02:36 - actually return it's this one
02:38 - it's input now to get input in the main
02:43 - function here we can declare a variable
02:45 - that's call it input again and set it
02:47 - equal to process selection so this looks
02:51 - like we're setting an integer equal to a
02:53 - function which is mind boggling but
02:55 - what's actually happening is that we're
02:57 - setting input equal to whatever process
03:00 - selection returns and that's going to be
03:03 - this variable here so this variable and
03:07 - this one are completely different
03:10 - variables they're completely separate
03:13 - this one exists between these brackets
03:16 - this one exists between these brackets
03:19 - and in fact that they're not connected
03:21 - in any way either what's happening is
03:24 - that we're returning the value of input
03:26 - here and we're storing it in a
03:29 - completely new variable here so it were
03:31 - creating a copy of the value by doing
03:34 - this and this does not not need to be
03:36 - named input we could call it something
03:38 - else let's call it selection and we need
03:41 - to call this selection as well where we
03:43 - actually use it so they're not connected
03:46 - it's just that this value is being
03:48 - stored ultimately in here and if I if I
03:52 - were to change this it's not going to
03:54 - alter this this code is completely
03:56 - self-contained now the only thing it the
03:59 - only interaction it has with other
04:00 - functions is though it's returning a
04:03 - value here which is copied into this
04:05 - variable so that that should behave
04:07 - exactly the same as before let's run it
04:10 - and let's enter a selection let's say
04:14 - three quit and says quitting so execute
04:18 - case three
04:19 - so like a lot of things in C++ this
04:22 - looks quite impenetrable until you
04:25 - actually try it the important thing is
04:27 - don't stress too much over what's
04:29 - happening but actually try to get it
04:31 - working try to type out code and get it
04:33 - working I'd suggest as an exercise that
04:35 - you do what I've just done and take the
04:39 - tutorial from the last take the code
04:42 - from the last tutorial and modify it to
04:45 - add this new function that just gets the
04:47 - user input or alternatively take any
04:51 - program you've written and just create
04:53 - some function that returns input and you
04:56 - can have multiple ones in your program
04:58 - if you like get multiple input from
05:00 - different functions it's not a problem
05:03 - so at the moment we go we could return
05:08 - doubles or floats or even strings and
05:13 - intercourse but we can't return arrays
05:16 - there's no way of doing that at the
05:17 - moment so so don't try that everything
05:20 - else you can return from a function so
05:24 - that's it for this tutorial its assets
05:27 - important practices rather than kind of
05:29 - stress about how it works because once
05:31 - you've typed it a few times then your
05:33 - understanding will come after once you
05:36 - can get it working especially when you
05:38 - can get it working without referring
05:39 - back to to example code like this okay
05:43 - so in the next tutorial we're going to
05:46 - look at passing values to functions so
05:49 - until next time
06:00 - you
06:14 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to learn our returning values from functions so I copied the project from the last tutorial and just paste it into the into the project view project Explorer here to create this copy which is here and now this process selection which we have from the last tutorial is actually doing two tasks here or at least two tasks it's getting input from the user and then it's processing that input what would like to do is create a dedicated function that just gets input from the user let's take out this stuff that is actually processing the input here let's cut it and put it back in the main function for the moment I'll just format that now the problem here is that we've declared input which is the variable we use to get the user input in process selection and variables are scoped to the enclosing pair of curly brackets so this variable the scope of it is these curly brackets and that means that it only exists between those curly brackets so we can't then use it down here which is why I've got an error here so to deal with that we need to make this function return a value into the calling function which is main here so we want to get a value from this and we want to be able to use it in this so to do that and what we do is firstly this void here this is what we call the return type of process selection the return type of the function and I want this function to return an integer so I'm going to change void for it means no return type and I'm going to change that to int because we want to return an integer then at the end of the function here I'm going to type return input and that is enough to say to actually make this function return a integer so here we're saying that it returns an integer and here we're specifying what integer we actually return it's this one it's input now to get input in the main function here we can declare a variable that's call it input again and set it equal to process selection so this looks like we're setting an integer equal to a function which is mind boggling but what's actually happening is that we're setting input equal to whatever process selection returns and that's going to be this variable here so this variable and this one are completely different variables they're completely separate this one exists between these brackets this one exists between these brackets and in fact that they're not connected in any way either what's happening is that we're returning the value of input here and we're storing it in a completely new variable here so it were creating a copy of the value by doing this and this does not not need to be named input we could call it something else let's call it selection and we need to call this selection as well where we actually use it so they're not connected it's just that this value is being stored ultimately in here and if I if I were to change this it's not going to alter this this code is completely selfcontained now the only thing it the only interaction it has with other functions is though it's returning a value here which is copied into this variable so that that should behave exactly the same as before let's run it and let's enter a selection let's say three quit and says quitting so execute case three so like a lot of things in C++ this looks quite impenetrable until you actually try it the important thing is don't stress too much over what's happening but actually try to get it working try to type out code and get it working I'd suggest as an exercise that you do what I've just done and take the tutorial from the last take the code from the last tutorial and modify it to add this new function that just gets the user input or alternatively take any program you've written and just create some function that returns input and you can have multiple ones in your program if you like get multiple input from different functions it's not a problem so at the moment we go we could return doubles or floats or even strings and intercourse but we can't return arrays there's no way of doing that at the moment so so don't try that everything else you can return from a function so that's it for this tutorial its assets important practices rather than kind of stress about how it works because once you've typed it a few times then your understanding will come after once you can get it working especially when you can get it working without referring back to to example code like this okay so in the next tutorial we're going to look at passing values to functions so until next time you you
