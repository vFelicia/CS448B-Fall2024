With timestamps:

00:16 - hello this is John from cave of
00:20 - programming calm in this tutorial we're
00:23 - going to take a look at references in
00:25 - C++ I think it's probably going to take
00:28 - us a couple of tutorials at least to
00:30 - properly get through this but we'll
00:32 - we'll start here so let's say we've got
00:37 - a an integer here let's say int value 1
00:40 - and we set it equal to maybe 8 that's
00:45 - great and into value 2 and set that
00:47 - equal to value 1 and let's change value
00:52 - to 2 and 10 so we've got two integers
00:58 - here value 1 set equal to 8 value 2
01:01 - which is set equal to whatever was in
01:03 - value 1 at this point and then we've
01:06 - changed value 2 to have a 10 in it and
01:09 - let's do some C alcea let's say value 1
01:13 - and value 1 and it's also output value 2
01:25 - so this is going to be an hopefully what
01:28 - you what you expect so if we run this
01:31 - we've got value 1 is 8 which it always
01:35 - has been and value to it started out as
01:37 - 8 and at this point but now we set it
01:40 - equal to 10 and that doesn't change
01:43 - value 1 but look what happens if we type
01:46 - a ampersand in front of value 2 now this
01:50 - is nothing to do with pointers if you
01:52 - work through my previous tutorials you
01:54 - remember that we use an ampersand to get
01:57 - the address of our variables this is a
02:00 - different usage altogether let's run
02:03 - this and what we find is that by
02:06 - changing value 2 we've now changed value
02:08 - 1 as well the reason for that is when
02:11 - you declare a variable and set it equal
02:14 - to something else with and the variable
02:17 - name has got an amp son and just in
02:20 - front of it you can also put the
02:23 - ampersand with
02:24 - type like that that's just an alternate
02:27 - syntax that still works let's just run
02:30 - this but I usually prefer to put it
02:35 - directly for a variable this is called a
02:38 - reference variable we say that value two
02:41 - is a reference to value one and what
02:43 - that means is that value two is just
02:46 - another name for value one basically
02:49 - whatever we do in value two is going to
02:51 - happen to file you won't because of the
02:53 - same variable if we didn't have this
02:55 - ampersand
02:56 - after the in sign for value two we'd be
02:59 - creating another would be allocating
03:02 - another bit of memory to hold an integer
03:05 - but when we put an ampersand O we create
03:07 - a reference and this reference can't
03:11 - hold a new integer it can only act as a
03:14 - synonym for an existing variable so we
03:17 - could do this with strings or doubles or
03:19 - whatever you like absolutely anything
03:21 - reference variables just create aliases
03:24 - to existing variables and we can use
03:28 - those aliases to change whatever value
03:31 - is in the original variable there's only
03:33 - one bit of memory here that's actually
03:36 - been allocated to hold an int and that
03:38 - happened when we did this this is Mayor
03:40 - Ed Murray a synonym for this it's a
03:43 - reference to file you want now that can
03:45 - be particularly useful when you want to
03:47 - create a function that changes the value
03:50 - of something and for some reason you
03:53 - don't want to just use a return value
03:55 - there so let's say we've got a function
03:58 - here let's say a void change something
04:04 - let's make it take a we'll have a string
04:07 - let's say I set a safe string if I know
04:11 - on second thoughts let's not do that let
04:14 - us have a double I say double and value
04:17 - and in there I'm gonna do value equals
04:25 - and
04:27 - one two three point four so now down
04:32 - here let's create a double so double
04:34 - I'll call it value again and bear in
04:37 - mind that this value and this value are
04:39 - not the same thing they're two different
04:41 - variables let's set that equal to four
04:44 - point three two one
04:46 - let's call change something value and
04:51 - let's do see out on value like this so
04:59 - let's run this see what happens
05:03 - so it says that value here is equal to
05:07 - four point three two one now the reason
05:10 - for that is you might guess if you've
05:13 - seen my previous tutorials this is a
05:15 - completely different very variable to
05:18 - this this is a new double variable it's
05:23 - just that when we do this we're taking
05:24 - this value and putting it into this
05:27 - that's all we're copying the value but
05:30 - the two variables are different so then
05:33 - when we change the value stored in this
05:36 - variable it doesn't affect the value
05:38 - that's stored in this variable these are
05:40 - two separate variables the only
05:42 - connection here is that we're taking
05:44 - that value putting it in there and then
05:46 - we're putting that value in here so at
05:49 - this point if I did a CL it was say
05:51 - value is four point three two one but
05:54 - then I can change this one and it's not
05:57 - going to have any effect on this but
05:59 - that's very different if we change this
06:01 - to a reference variable so now if I run
06:05 - the program and you see this as support
06:06 - point three to one down here which much
06:08 - is this but now if I run this program
06:10 - it's one to three point four which is
06:13 - the value that we assigned it in this
06:16 - function and that's because now this
06:18 - isn't a new double variable it's only a
06:21 - reference to an existing variable and it
06:25 - becomes a reference to this variable
06:28 - here when we pass it in here you are
06:32 - assigning this reference
06:33 - to point at this value so references are
06:37 - quite light pointers and really it's
06:41 - just that the syntax of working with
06:43 - references is a lot simpler than with
06:45 - pointers nevertheless often we do need
06:48 - pointers because they they allow us to
06:50 - do various things that we can't do with
06:53 - references but if you can use a
06:55 - reference it's simpler to use that than
06:58 - to use a pointer so again if you're just
07:02 - watching these videos it's going to be
07:03 - natural to get completely lost but I'd
07:07 - recommend practicing this so declare a
07:09 - reference variable like this and chetley
07:11 - can use the reference to change the
07:13 - original variable and then declare a
07:16 - function in Cheddar you can declare a
07:18 - function that takes a reference variable
07:20 - and use that function to change the
07:23 - value of a variable that you pass in
07:25 - just have a go at that and see what
07:27 - happens and as I've said before you you
07:30 - can't expect to feel completely
07:31 - comfortable with this even if you do
07:34 - these exercises but later on we're going
07:36 - to write some complete programs and
07:39 - after that or even now certainly if you
07:43 - try to write your own programs that's
07:46 - when you will become comfortable with
07:48 - the syntax is that ultimately there's no
07:50 - substitute for trying to invent your own
07:52 - programs but of course when you only
07:54 - know minimal syntax it's difficult to do
07:58 - that but the sooner you start writing
08:00 - your own stuff just making stuff up
08:01 - inventing stuff and writing it the
08:03 - sooner you'll start to become
08:05 - comfortable with this stuff which at
08:06 - first seems very complicated and
08:09 - confusing we'll leave it there for this
08:11 - tutorial and until next time happy
08:13 - coding
08:26 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to take a look at references in C++ I think it's probably going to take us a couple of tutorials at least to properly get through this but we'll we'll start here so let's say we've got a an integer here let's say int value 1 and we set it equal to maybe 8 that's great and into value 2 and set that equal to value 1 and let's change value to 2 and 10 so we've got two integers here value 1 set equal to 8 value 2 which is set equal to whatever was in value 1 at this point and then we've changed value 2 to have a 10 in it and let's do some C alcea let's say value 1 and value 1 and it's also output value 2 so this is going to be an hopefully what you what you expect so if we run this we've got value 1 is 8 which it always has been and value to it started out as 8 and at this point but now we set it equal to 10 and that doesn't change value 1 but look what happens if we type a ampersand in front of value 2 now this is nothing to do with pointers if you work through my previous tutorials you remember that we use an ampersand to get the address of our variables this is a different usage altogether let's run this and what we find is that by changing value 2 we've now changed value 1 as well the reason for that is when you declare a variable and set it equal to something else with and the variable name has got an amp son and just in front of it you can also put the ampersand with type like that that's just an alternate syntax that still works let's just run this but I usually prefer to put it directly for a variable this is called a reference variable we say that value two is a reference to value one and what that means is that value two is just another name for value one basically whatever we do in value two is going to happen to file you won't because of the same variable if we didn't have this ampersand after the in sign for value two we'd be creating another would be allocating another bit of memory to hold an integer but when we put an ampersand O we create a reference and this reference can't hold a new integer it can only act as a synonym for an existing variable so we could do this with strings or doubles or whatever you like absolutely anything reference variables just create aliases to existing variables and we can use those aliases to change whatever value is in the original variable there's only one bit of memory here that's actually been allocated to hold an int and that happened when we did this this is Mayor Ed Murray a synonym for this it's a reference to file you want now that can be particularly useful when you want to create a function that changes the value of something and for some reason you don't want to just use a return value there so let's say we've got a function here let's say a void change something let's make it take a we'll have a string let's say I set a safe string if I know on second thoughts let's not do that let us have a double I say double and value and in there I'm gonna do value equals and one two three point four so now down here let's create a double so double I'll call it value again and bear in mind that this value and this value are not the same thing they're two different variables let's set that equal to four point three two one let's call change something value and let's do see out on value like this so let's run this see what happens so it says that value here is equal to four point three two one now the reason for that is you might guess if you've seen my previous tutorials this is a completely different very variable to this this is a new double variable it's just that when we do this we're taking this value and putting it into this that's all we're copying the value but the two variables are different so then when we change the value stored in this variable it doesn't affect the value that's stored in this variable these are two separate variables the only connection here is that we're taking that value putting it in there and then we're putting that value in here so at this point if I did a CL it was say value is four point three two one but then I can change this one and it's not going to have any effect on this but that's very different if we change this to a reference variable so now if I run the program and you see this as support point three to one down here which much is this but now if I run this program it's one to three point four which is the value that we assigned it in this function and that's because now this isn't a new double variable it's only a reference to an existing variable and it becomes a reference to this variable here when we pass it in here you are assigning this reference to point at this value so references are quite light pointers and really it's just that the syntax of working with references is a lot simpler than with pointers nevertheless often we do need pointers because they they allow us to do various things that we can't do with references but if you can use a reference it's simpler to use that than to use a pointer so again if you're just watching these videos it's going to be natural to get completely lost but I'd recommend practicing this so declare a reference variable like this and chetley can use the reference to change the original variable and then declare a function in Cheddar you can declare a function that takes a reference variable and use that function to change the value of a variable that you pass in just have a go at that and see what happens and as I've said before you you can't expect to feel completely comfortable with this even if you do these exercises but later on we're going to write some complete programs and after that or even now certainly if you try to write your own programs that's when you will become comfortable with the syntax is that ultimately there's no substitute for trying to invent your own programs but of course when you only know minimal syntax it's difficult to do that but the sooner you start writing your own stuff just making stuff up inventing stuff and writing it the sooner you'll start to become comfortable with this stuff which at first seems very complicated and confusing we'll leave it there for this tutorial and until next time happy coding you
