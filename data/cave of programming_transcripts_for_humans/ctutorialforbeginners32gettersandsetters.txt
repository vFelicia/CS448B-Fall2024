With timestamps:

00:18 - hello this is John from cave of
00:21 - programming calm in this tutorial we're
00:23 - going to look at getters and setters in
00:26 - C++ getters and setters were all the
00:29 - rage in the early days of
00:30 - object-oriented programming and they're
00:33 - still used a lot although some people
00:34 - say that you should try to avoid them in
00:36 - C++
00:37 - but we're going to look at them here
00:38 - because they are still very important to
00:40 - know about sometimes you need them so
00:44 - getters and setters are just methods for
00:46 - getting setting values in a class
00:49 - getting a set up
00:50 - getting setting instance variables let's
00:54 - take a look at that so I've got this
00:55 - project here basically project I've
00:57 - created I'm going to right click it and
01:00 - go to new supers plus class and let's
01:04 - give this a name I'll call it person I
01:06 - won't put it in the namespace I'm going
01:09 - to tick to say that I want a constructor
01:11 - and destructor because but let's have
01:15 - just the constructor actually we don't
01:17 - really need destructor and I'll click
01:19 - finish so if you're modeling a person in
01:24 - C++ you're going to have some attributes
01:26 - like name and age and whatever other
01:28 - data you need to put in there to capture
01:31 - whatever aspects of a person you want to
01:33 - capture for the purposes of this
01:35 - tutorial let's just give person a let's
01:39 - say let's just give them a name so I'm
01:41 - going to above the public section here
01:43 - I'm going to have a private section and
01:46 - I'm going to type string name so you'll
01:49 - get an error there and that's because we
01:51 - haven't included the the right header
01:53 - for string let's do that so the top
01:56 - above the class here below this defined
01:58 - thing I'm going to put and define
02:02 - preprocessor directive I should say
02:04 - rather than thing really
02:06 - let's put include iostream on some
02:10 - compilers you might need to say iostream
02:12 - dot h or you might you might even need
02:15 - to include string or even string dot H
02:17 - and I'm also going to put using name
02:20 - space standard and I believe with this
02:24 - compiler that will give us string
02:27 - oh yeah it's a lowercase s
02:29 - I always forget because it does vary I
02:32 - think without these wouldn't work yeah
02:35 - so string class is defined somewhere in
02:39 - that iostream for this compiler at least
02:42 - we can we can set a value for name for
02:45 - this person let's let's do that so let's
02:49 - go to person dot CPP here's the
02:52 - constructor let's say that name equals
02:56 - Jorge now we can create a person object
03:04 - here in in our main CPP file let's say
03:09 - here person person so I've been taking
03:15 - care to give my classes uppercase first
03:17 - letters so if I want I can I can give
03:19 - the actual variable the same names the
03:22 - class with a but with a lowercase letter
03:24 - some people think that's really bad but
03:26 - I quite like doing that and now well we
03:32 - can't do much with person at the moment
03:34 - what we could do is we could give it a
03:36 - method and that outputs details about
03:39 - this person let's do that let's say I'll
03:43 - call it two string so Java actually has
03:48 - a method called two string and the idea
03:50 - is that returns a string that shows you
03:52 - information about your objects let's do
03:54 - a similar thing here in C++ so I mean to
03:57 - string turned a string like that and
03:59 - we'll go to we'll go to person dot CPP
04:04 - and implement this two string method
04:06 - let's say string person : : to string
04:11 - we've seen all of this stuff before and
04:15 - I'm going to just return name for the
04:18 - moment so that we can have a way of
04:21 - getting the data out of that person or
04:24 - we could say something like person's
04:27 - name is plus name that just gives us
04:32 - kind of a way of outputting information
04:34 - we can include the age in there if we
04:36 - add an age or whatever whatever or the
04:39 - detail
04:39 - we have said George is not correctly
04:43 - spelled but it is so I'll ignore that
04:45 - let's go back to the main function here
04:50 - and let's just say C out and person to
04:55 - string so two strings returning the
05:01 - string containing details about a person
05:02 - and because it's returning a string we
05:05 - can just use it and C out so this this
05:07 - will be outputting whatever this
05:10 - actually returns and that's a string so
05:13 - we can output strings with C out so
05:14 - we're good I think we we may need in
05:19 - yeah we've already got iostream in here
05:22 - and using namespace standards let's just
05:24 - run this and with a bit of luck it's
05:28 - going to have already compiled it once
05:30 - so I should just be able to click the
05:32 - Run button and while I'm waiting for
05:36 - that that the thing here is that
05:38 - sometimes you you want to be able to get
05:43 - and set variables in a an object
05:47 - directly and that that's not always the
05:51 - case because if you allow people to get
05:57 - in set well let's just deal with this
05:59 - error so it says person person yeah but
06:02 - to include persons or age I always
06:05 - forget something so I'm glad that the
06:08 - compiler picks it up let's include that
06:12 - person by age sometimes you want to get
06:15 - in set variables within your class let's
06:19 - save it and see if it builds but if you
06:26 - do that it's almost as bad as exposing
06:28 - the actual variable directly we'll see
06:30 - this in a minute but some people say
06:32 - that it's not good idea so it says
06:34 - person's name is George here now what if
06:36 - we want to be able to change that name
06:38 - you want to get it and set it so let's
06:41 - first look at set method if we go to
06:43 - person dot age here I'll give this a
06:46 - method
06:47 - call what it'll have no return type and
06:50 - I'll call it set name this is kind of a
06:53 - standard format so we call it set
06:55 - something lowercase s and because I'm
06:58 - following this convention of
06:59 - capitalizing the subsequent words in
07:02 - every kind of functional variable name
07:04 - I'll give the name and up case N and
07:06 - then we'll go to person dot CPP and
07:09 - implement that so I'll say voyage person
07:12 - : : set name and we're going to pass
07:16 - this a string name that we're going to
07:18 - use that string to change the name of
07:20 - the person let's say string name in fact
07:24 - beings have already called this name for
07:28 - the moment I'll I'll call it something
07:29 - else and we'll see a better way of
07:31 - dealing with that in the future let's
07:32 - call it string new name and in there all
07:38 - I'm going to do is say name that's the
07:40 - name of the person defined in the class
07:41 - equals new name so this this is called a
07:46 - set method let's take a look at this
07:48 - error method declaration not found yeah
07:52 - I need to define the prototype as well
07:54 - as copy this yeah I just did it already
07:58 - oh yeah but I missed out this string new
08:03 - name okay so what I've got here is I've
08:07 - got a method here that's that's taking a
08:10 - string and that method is simply setting
08:14 - value for name setting a new value for
08:16 - the name of the person associated with
08:19 - the class so let's let's actually use
08:22 - that so here in my main method when we
08:25 - create the person that constructor runs
08:26 - and that says that the name to George it
08:30 - doesn't have to do that though it could
08:32 - just not set it at all but now we could
08:35 - say person set name let's imagine
08:41 - George's had a sex-change and set into
08:44 - Georgina or maybe he's just a
08:49 - transvestite that I don't know but
08:50 - anyway so now we can run that again and
08:54 - we get now person's name is Georgina
08:58 - so that's the setna that it's pretty
08:59 - simple we're just using stuff we've
09:01 - already seen but things it's a method
09:03 - with a name set that takes some some
09:07 - value that you want to set one of the
09:09 - variables of the class to name in this
09:12 - case and it just sets that value to what
09:14 - better you pass in and this is how you
09:17 - use it so it's pretty simple and if you
09:21 - can't remember all this stuff if you
09:22 - even type that first then it's just a
09:25 - question of everything else you've done
09:27 - it has just been to get that to work
09:29 - that was the whole purpose of everything
09:31 - we've done so that's a set method or a
09:33 - setter also called a mutator some people
09:36 - think this is bad because it's almost as
09:39 - though we've exposed this variable
09:41 - directly it's not quite that bad because
09:43 - we could document that we've got this
09:45 - set method and then if later on for some
09:48 - reason we need to change how this class
09:51 - works and we need to change string name
09:53 - to something else or store it in a
09:55 - different way we can still do that
09:57 - without altering without altering this
09:58 - method and hence without altering the
10:02 - documentation of this class because only
10:04 - this only this bit here would actually
10:07 - be documented only the set method
10:09 - prototype and we can change this if we
10:11 - want to so it's not as bad as exposing
10:13 - the variable making it public and
10:15 - allowing people to change it directly
10:17 - but it's getting there and that's why
10:18 - some people think you should avoid this
10:20 - let's give it a get method as well to
10:22 - get our name so I can say strings that
10:26 - will return the string we'll call it get
10:28 - name by this and it won't have any
10:31 - parameters and then we'll implement get
10:34 - name so go to person dot CPP I'll say
10:37 - void no sorry string person : : get name
10:42 - and all that's going to do is return
10:45 - name so it allows us to get the value of
10:48 - the name for this person and we'll go to
10:51 - get some set of CPP this some main
10:54 - function and let's say C out
10:59 - name of person with get method and let's
11:07 - just use another one of these Chevron's
11:09 - and thus a person put two operators I
11:13 - should say persons I'll get name like
11:15 - that and endler so if we run this then
11:22 - we should get name a person will get
11:25 - method georgina so this to string method
11:29 - i implemented thus and thus almost a get
11:32 - method but the idea behind this is you
11:35 - can put more details in it if we wanted
11:37 - so that's that's getters and setters
11:39 - it's just very simply a method call set
11:42 - something rather lets you set the value
11:44 - of an internal variable in the class
11:46 - well it doesn't have to but usually by
11:48 - creating getting set method you're
11:50 - implying that that variable exists but
11:53 - cuz it doesn't have to exist you could
11:54 - store this name in some other way in an
11:57 - array or something and the end user of
12:00 - this class would never know and we've
12:02 - also got this get method to get value
12:05 - for that and variable so yeah it's best
12:10 - to try to avoid this but sometimes you
12:13 - do need it at least you need a get or a
12:15 - set one of the two so to practice this
12:17 - the thing is just as long as you can
12:20 - remember basically what this program
12:22 - does nevermind to string I just pull
12:24 - that in just so we could see something
12:25 - happening early on but if you can get
12:28 - your program so that you you can have a
12:30 - class and you've got a set something or
12:33 - other and you've got to get something or
12:35 - other
12:35 - then then you've understood if you can
12:38 - do that you've understood the purpose of
12:39 - this tutorial so that a device creating
12:42 - a class could be person could be car
12:44 - could be any any kind of class that
12:46 - represents something and give it some
12:49 - variables and define like again set
12:52 - method for each of the variables in your
12:53 - class and see how that goes
12:55 - so that's it for this tutorial and until
12:58 - next time happy coding
13:08 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to look at getters and setters in C++ getters and setters were all the rage in the early days of objectoriented programming and they're still used a lot although some people say that you should try to avoid them in C++ but we're going to look at them here because they are still very important to know about sometimes you need them so getters and setters are just methods for getting setting values in a class getting a set up getting setting instance variables let's take a look at that so I've got this project here basically project I've created I'm going to right click it and go to new supers plus class and let's give this a name I'll call it person I won't put it in the namespace I'm going to tick to say that I want a constructor and destructor because but let's have just the constructor actually we don't really need destructor and I'll click finish so if you're modeling a person in C++ you're going to have some attributes like name and age and whatever other data you need to put in there to capture whatever aspects of a person you want to capture for the purposes of this tutorial let's just give person a let's say let's just give them a name so I'm going to above the public section here I'm going to have a private section and I'm going to type string name so you'll get an error there and that's because we haven't included the the right header for string let's do that so the top above the class here below this defined thing I'm going to put and define preprocessor directive I should say rather than thing really let's put include iostream on some compilers you might need to say iostream dot h or you might you might even need to include string or even string dot H and I'm also going to put using name space standard and I believe with this compiler that will give us string oh yeah it's a lowercase s I always forget because it does vary I think without these wouldn't work yeah so string class is defined somewhere in that iostream for this compiler at least we can we can set a value for name for this person let's let's do that so let's go to person dot CPP here's the constructor let's say that name equals Jorge now we can create a person object here in in our main CPP file let's say here person person so I've been taking care to give my classes uppercase first letters so if I want I can I can give the actual variable the same names the class with a but with a lowercase letter some people think that's really bad but I quite like doing that and now well we can't do much with person at the moment what we could do is we could give it a method and that outputs details about this person let's do that let's say I'll call it two string so Java actually has a method called two string and the idea is that returns a string that shows you information about your objects let's do a similar thing here in C++ so I mean to string turned a string like that and we'll go to we'll go to person dot CPP and implement this two string method let's say string person to string we've seen all of this stuff before and I'm going to just return name for the moment so that we can have a way of getting the data out of that person or we could say something like person's name is plus name that just gives us kind of a way of outputting information we can include the age in there if we add an age or whatever whatever or the detail we have said George is not correctly spelled but it is so I'll ignore that let's go back to the main function here and let's just say C out and person to string so two strings returning the string containing details about a person and because it's returning a string we can just use it and C out so this this will be outputting whatever this actually returns and that's a string so we can output strings with C out so we're good I think we we may need in yeah we've already got iostream in here and using namespace standards let's just run this and with a bit of luck it's going to have already compiled it once so I should just be able to click the Run button and while I'm waiting for that that the thing here is that sometimes you you want to be able to get and set variables in a an object directly and that that's not always the case because if you allow people to get in set well let's just deal with this error so it says person person yeah but to include persons or age I always forget something so I'm glad that the compiler picks it up let's include that person by age sometimes you want to get in set variables within your class let's save it and see if it builds but if you do that it's almost as bad as exposing the actual variable directly we'll see this in a minute but some people say that it's not good idea so it says person's name is George here now what if we want to be able to change that name you want to get it and set it so let's first look at set method if we go to person dot age here I'll give this a method call what it'll have no return type and I'll call it set name this is kind of a standard format so we call it set something lowercase s and because I'm following this convention of capitalizing the subsequent words in every kind of functional variable name I'll give the name and up case N and then we'll go to person dot CPP and implement that so I'll say voyage person set name and we're going to pass this a string name that we're going to use that string to change the name of the person let's say string name in fact beings have already called this name for the moment I'll I'll call it something else and we'll see a better way of dealing with that in the future let's call it string new name and in there all I'm going to do is say name that's the name of the person defined in the class equals new name so this this is called a set method let's take a look at this error method declaration not found yeah I need to define the prototype as well as copy this yeah I just did it already oh yeah but I missed out this string new name okay so what I've got here is I've got a method here that's that's taking a string and that method is simply setting value for name setting a new value for the name of the person associated with the class so let's let's actually use that so here in my main method when we create the person that constructor runs and that says that the name to George it doesn't have to do that though it could just not set it at all but now we could say person set name let's imagine George's had a sexchange and set into Georgina or maybe he's just a transvestite that I don't know but anyway so now we can run that again and we get now person's name is Georgina so that's the setna that it's pretty simple we're just using stuff we've already seen but things it's a method with a name set that takes some some value that you want to set one of the variables of the class to name in this case and it just sets that value to what better you pass in and this is how you use it so it's pretty simple and if you can't remember all this stuff if you even type that first then it's just a question of everything else you've done it has just been to get that to work that was the whole purpose of everything we've done so that's a set method or a setter also called a mutator some people think this is bad because it's almost as though we've exposed this variable directly it's not quite that bad because we could document that we've got this set method and then if later on for some reason we need to change how this class works and we need to change string name to something else or store it in a different way we can still do that without altering without altering this method and hence without altering the documentation of this class because only this only this bit here would actually be documented only the set method prototype and we can change this if we want to so it's not as bad as exposing the variable making it public and allowing people to change it directly but it's getting there and that's why some people think you should avoid this let's give it a get method as well to get our name so I can say strings that will return the string we'll call it get name by this and it won't have any parameters and then we'll implement get name so go to person dot CPP I'll say void no sorry string person get name and all that's going to do is return name so it allows us to get the value of the name for this person and we'll go to get some set of CPP this some main function and let's say C out name of person with get method and let's just use another one of these Chevron's and thus a person put two operators I should say persons I'll get name like that and endler so if we run this then we should get name a person will get method georgina so this to string method i implemented thus and thus almost a get method but the idea behind this is you can put more details in it if we wanted so that's that's getters and setters it's just very simply a method call set something rather lets you set the value of an internal variable in the class well it doesn't have to but usually by creating getting set method you're implying that that variable exists but cuz it doesn't have to exist you could store this name in some other way in an array or something and the end user of this class would never know and we've also got this get method to get value for that and variable so yeah it's best to try to avoid this but sometimes you do need it at least you need a get or a set one of the two so to practice this the thing is just as long as you can remember basically what this program does nevermind to string I just pull that in just so we could see something happening early on but if you can get your program so that you you can have a class and you've got a set something or other and you've got to get something or other then then you've understood if you can do that you've understood the purpose of this tutorial so that a device creating a class could be person could be car could be any any kind of class that represents something and give it some variables and define like again set method for each of the variables in your class and see how that goes so that's it for this tutorial and until next time happy coding you
