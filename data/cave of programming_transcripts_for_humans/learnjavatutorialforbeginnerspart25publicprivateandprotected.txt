With timestamps:

00:16 - hello this is John from cave of
00:19 - programming calm and in the last
00:21 - tutorial I actually said that we would
00:24 - look at generics in Java but after I
00:28 - thought about it I realized there were a
00:30 - few things that we should cover first
00:32 - before getting on to generics so I'm
00:34 - going to try to get some tutorials out
00:36 - pretty quickly on some other subjects
00:39 - and in this tutorial we're going to look
00:41 - at the access level modifiers or unset
00:45 - specifiers public private and protected
00:50 - so let's look at the simplest one first
00:53 - let's look at public I'm going to create
00:57 - a new class here some of the right-click
00:59 - project go to new class and let's call
01:04 - this machine now just reach Ange let's
01:10 - call it plant so call it plant and I'm
01:14 - going to give plant a instance member
01:18 - variables ear so I'm going to call this
01:20 - let's say string name and yeah let's
01:27 - just leave it a string name and I'm
01:29 - going to make string name public now
01:33 - supposing I create a plant instance here
01:37 - in my main method so say plants plant
01:41 - I'll create a variable so that I've got
01:44 - a reference to it and I'll set that
01:46 - equal to a new instance of plant like
01:49 - this now if you've got a instance
01:55 - variable or a member variable that's
01:57 - called published declared public you can
02:00 - access it from anywhere so within plants
02:04 - that say for example in a constructor so
02:06 - public plant like this of course I could
02:11 - access it here I could say name
02:15 - equals let's say say on a plant
02:21 - I'm a plant and a stupid name for a
02:27 - plant
02:28 - how about Freddie okay so if you want to
02:33 - access instance variables within the
02:35 - class you don't need to prefix them with
02:36 - anything but some people like to prefix
02:38 - them with this and then that just mean
02:42 - that's kind of superfluous here but the
02:45 - point is that you can access name within
02:48 - the class of course where you can access
02:50 - it from anywhere else to so I can say
02:52 - plan dot well let's just say suss out
02:55 - yeah it's a cell plant dot name so
03:01 - absolutely anywhere where I've got a
03:02 - reference to a plant object I can access
03:05 - name and this is bad practice usually so
03:11 - bad practice because you shouldn't
03:14 - usually declare instance variables
03:18 - public like this
03:19 - the idea is you usually want to
03:21 - encapsulate them hide them away from the
03:23 - world and make people access them
03:25 - through methods so you can control
03:26 - something with them if you do want to
03:30 - have a public instance variable most
03:34 - often you're going to make a constant
03:35 - and if it's constant usually you'll also
03:39 - make it static
03:40 - so you'll access it with a class so I'll
03:42 - say public static I don't know like ID
03:46 - for example or yeah IDs as good as
03:50 - anything public starting in ID so I'm
03:54 - putting this in uppercase to signify
03:57 - that it's going to be constant and I'm
03:59 - going to say final which will mean that
04:02 - it can't be changed it's constant and
04:04 - I'm going to initialize it to just some
04:06 - number like eight and then you would you
04:11 - could say here could access that again
04:13 - from anywhere but I can't change it from
04:16 - anywhere because it's final I'll say
04:18 - plant ID so if I run that it's just
04:21 - gonna output
04:22 - the name and the idea and this is
04:28 - acceptable practice there's nothing
04:32 - wrong with declaring public constants
04:35 - like this as long as it's final okay
04:42 - meaning constant so that's that's public
04:45 - it's pretty simple meaning you can
04:47 - access the variables anywhere and by the
04:50 - way this here just means the same as
04:54 - plant yeah it's just that if you want
04:57 - want to access a objects member
05:00 - variables from within the actual class
05:04 - then you use this dot to get a reference
05:06 - to it whereas externally we'd have some
05:09 - named reference like this but it's the
05:11 - same thing basically
05:12 - anyway that's so important so the next
05:17 - simplest one is probably private so to
05:21 - illustrate pry though I'm going to
05:22 - create a subclass of plant so I'm going
05:25 - to go here and say new class and let's
05:30 - call this oak because an oak is a plant
05:34 - and I'm going to say oak extends plants
05:38 - and let's just give that constructor as
05:41 - well
05:41 - so public oak
05:47 - like this pressing on key on my keyboard
05:52 - okay there we go
05:54 - now supposing implant
05:57 - I declare something private that's the
05:59 - lip leave these together up here and
06:02 - I'll go down here and usually when you
06:04 - have an instance member variable or
06:08 - class variable a static variable some
06:11 - kind of variable up here basically
06:12 - usually you want to declare it private
06:15 - you want to stop people out listing it
06:17 - from outside the class if I say private
06:21 - string type let's say and so now
06:30 - string is private and private means it's
06:34 - the opposite to public really public
06:36 - means you can access it anywhere private
06:38 - means you can only access it from within
06:40 - this class so I could happily say type
06:44 - equals plant here so I can use type here
06:49 - or if I want to say this type makes no
06:53 - difference
06:54 - but even though oak is a child class I
06:58 - cannot say here type equals 3 so that's
07:07 - giving me an error and it's saying if
07:08 - your plan dot type is not visible
07:10 - because it's private so let's say once
07:14 - won't work
07:17 - type type is private
07:23 - so I can only access type literally
07:28 - within these brackets here because
07:30 - that's that's a scope of a class I can
07:33 - access anywhere else I can't access it
07:35 - here either
07:36 - so system dot out say suss out plant
07:41 - plants dot type that's not going to work
07:45 - either so again I'll say won't work type
07:50 - type is private so private means only
07:56 - within the class and only within the
07:58 - class means within these brackets after
08:00 - your class declaration now often you
08:04 - want to have a variable which can't be
08:07 - accessed on the outside so it's not
08:09 - public and is you can't it's protected
08:13 - from being accessed here for example in
08:16 - a completely different class this is
08:18 - that app class but you want it to be
08:20 - access you want it to be accessible in
08:22 - child classes and that's what protected
08:25 - is for so I saw something here and say
08:30 - protected let's say protected string
08:37 - size and I'll set size equal to this
08:46 - stop actually let's let's post down a
08:49 - bit further so down here let's say this
08:53 - dot size equals large and you'd normally
08:59 - want to like I shall set it equal to
09:02 - medium usually you'd want to use our
09:04 - numerator type for this kind of thing
09:06 - but I'm just trying to illustrate
09:07 - they're probably private and protected
09:09 - stuff here so I won't worry about that
09:12 - so if you've got a protected variable
09:15 - you can access it within the class
09:16 - that's fine so
09:21 - actually you can access it doesn't
09:25 - matter what access level modify you put
09:28 - here you can always access them within
09:30 - the class that's always possible but if
09:33 - I go to oak now and I want to say like
09:36 - this start size equals large oak trees
09:42 - are pretty big
09:43 - then this yeah this is going to work now
09:47 - because size is protected and protected
09:52 - means that you can access it within the
09:56 - class within any subclass and also
09:59 - within any package
10:01 - sorry also within the same package so
10:04 - this works because size is protected and
10:12 - oak is a subclass of plant but so
10:21 - protected lets you access a variable
10:24 - within the class so within these
10:26 - brackets and within any subclass and
10:28 - also within the same package anywhere so
10:31 - let's create a new let's create a new
10:34 - class here
10:35 - and let's call it field like this and
10:41 - let's give let's give field a an oak
10:47 - actually let's give a plant source a
10:50 - plant plant and cause new plant I'm
10:57 - going to make this plant variable
10:59 - private so when you do new plan you can
11:02 - do it happily up here or you could do
11:04 - new plant in a constructor as well and
11:06 - it's let's give it a constructor while
11:08 - we're at it
11:10 - so here now we're in their default
11:17 - package so here I can say plant I see
11:25 - plant dot size and actually I could just
11:29 - do this analysis our plan dot size and
11:33 - this works as well so if I save that
11:38 - this works size is protected and field
11:46 - is in the same package as plant so
11:54 - that's fine unless let's just kind of
11:57 - emphasize this a bit by saying
11:59 - everything's in the default package at
12:01 - the moment so I could access plan dot
12:02 - size within main as well because my app
12:06 - here the class that main is it and
12:08 - there's also an end of the default
12:10 - package let's just create a new package
12:12 - here so let's call this world should be
12:17 - lower case actually I'll call that world
12:19 - and let's just drag these plants into
12:23 - world like this and just let Eclipse
12:28 - refactor it so this kind of emphasizes
12:31 - that plant is in the world package field
12:34 - is in the world package so for that
12:36 - reason I can access the protected
12:37 - variable plan dot size we will go to app
12:40 - which is now in a different package and
12:42 - I try to say see Sal plants dot size
12:48 - then it won't work size is protected
12:54 - site is protected and app is not in the
13:01 - same package as plant so it won't work
13:11 - won't work and so there's this bus
13:18 - public private and protected so private
13:20 - just within the same class public
13:22 - absolutely anywhere protect it within
13:25 - the same class
13:26 - all within the same package and there's
13:28 - one more possibility and that's that you
13:31 - could have no access level modifier no
13:35 - access specifier so I could say here
13:39 - string say and say int height and so I
13:48 - haven't given this a public private or
13:51 - protected and if you do that this is now
13:56 - package level visibility so I can access
14:03 - height of course in plan you can always
14:06 - access stuff within the same class you
14:09 - can always access the instance variables
14:12 - from within the same class to say eight
14:14 - there and I can access that within that
14:22 - say poke I can say this stop height
14:26 - equals ten or something so no access
14:35 - specifier
14:39 - so it works because oak and plant in the
14:45 - same package but you see it is possible
14:50 - to have a child class which is not in
14:54 - the same package by the way let me just
14:55 - show you that because the app class here
14:59 - is not in the same it's not in saint
15:03 - packages plan I can't do this out plant
15:08 - height so and this one work won't work
15:14 - because app and plant in different
15:19 - packages and the height has a package
15:24 - level package level is ability well this
15:29 - is one more possibility here which is
15:33 - that I could create a new child class
15:36 - here let's say new class and let's call
15:40 - this grass and I'm going to say grass
15:46 - extends plant
15:49 - and I'm going to just add the input
15:52 - there ctrl shift though to import world
15:54 - plan and let's give this a constructor
15:57 - so public grass and now supposing I try
16:04 - to do this out sis out this stop height
16:12 - it's not going to work because if I look
16:16 - at plant height has no access specifier
16:20 - that means its visible only in the same
16:23 - package and even though grass is a
16:25 - subclass of plan we still can't access
16:28 - this here this won't work won't work
16:34 - grass not in the same package as plant
16:39 - even though even though it's a subclass
16:46 - so that's a lot and that's coming out so
16:51 - actually runs and that's all I want to
16:54 - say for this tutorial I'm just going to
16:57 - summarize that again now but if your
17:00 - brain is already bursting it seems we
17:03 - were just bored then this is a good
17:04 - place to stop watching but let's just
17:07 - summarize these different possibilities
17:08 - here so um if I put this here and I say
17:17 - let say private only within same class
17:22 - and public from anywhere and protected
17:29 - means same class and same sorry child
17:38 - class so I subclasses why she say so
17:40 - class and same package
17:46 - and no modifier means same package only
17:54 - and of course you can access you can
18:00 - always access things from within the
18:02 - same class so I could say same here same
18:06 - class protected same class subclass same
18:09 - package and of course same package imply
18:13 - so you can access it from within the
18:15 - same class so I think I said and people
18:20 - sometimes get confused between probably
18:23 - private and protected and it modifies on
18:25 - the classes themselves so if you can
18:30 - only when you create a class in a file -
18:33 - let's look at plan if you declare it
18:36 - public that means is it's visible from
18:39 - outside that file and it's got to have
18:42 - the same name you can only have one
18:43 - public class in a file it's gotta have
18:45 - the same name as a file
18:47 - you can't declare classes privates I
18:49 - can't say private class something here
18:53 - something like this and because this
18:58 - public private and protected stuff does
19:01 - not apply to classes it only applies
19:04 - these instance variables and but you can
19:06 - miss off the access specifier altogether
19:09 - and then this is just visible within
19:12 - this file and you can have as many
19:13 - classes as you want in one file but as I
19:16 - say only one public class because it has
19:18 - to manage the file name so that's it for
19:21 - public private and protected and I'm
19:23 - going to pull this source code on cave
19:25 - of programming comm and join me again
19:30 - for the next tutorial and until then
19:33 - happy coding
19:50 - you

Cleaned transcript:

hello this is John from cave of programming calm and in the last tutorial I actually said that we would look at generics in Java but after I thought about it I realized there were a few things that we should cover first before getting on to generics so I'm going to try to get some tutorials out pretty quickly on some other subjects and in this tutorial we're going to look at the access level modifiers or unset specifiers public private and protected so let's look at the simplest one first let's look at public I'm going to create a new class here some of the rightclick project go to new class and let's call this machine now just reach Ange let's call it plant so call it plant and I'm going to give plant a instance member variables ear so I'm going to call this let's say string name and yeah let's just leave it a string name and I'm going to make string name public now supposing I create a plant instance here in my main method so say plants plant I'll create a variable so that I've got a reference to it and I'll set that equal to a new instance of plant like this now if you've got a instance variable or a member variable that's called published declared public you can access it from anywhere so within plants that say for example in a constructor so public plant like this of course I could access it here I could say name equals let's say say on a plant I'm a plant and a stupid name for a plant how about Freddie okay so if you want to access instance variables within the class you don't need to prefix them with anything but some people like to prefix them with this and then that just mean that's kind of superfluous here but the point is that you can access name within the class of course where you can access it from anywhere else to so I can say plan dot well let's just say suss out yeah it's a cell plant dot name so absolutely anywhere where I've got a reference to a plant object I can access name and this is bad practice usually so bad practice because you shouldn't usually declare instance variables public like this the idea is you usually want to encapsulate them hide them away from the world and make people access them through methods so you can control something with them if you do want to have a public instance variable most often you're going to make a constant and if it's constant usually you'll also make it static so you'll access it with a class so I'll say public static I don't know like ID for example or yeah IDs as good as anything public starting in ID so I'm putting this in uppercase to signify that it's going to be constant and I'm going to say final which will mean that it can't be changed it's constant and I'm going to initialize it to just some number like eight and then you would you could say here could access that again from anywhere but I can't change it from anywhere because it's final I'll say plant ID so if I run that it's just gonna output the name and the idea and this is acceptable practice there's nothing wrong with declaring public constants like this as long as it's final okay meaning constant so that's that's public it's pretty simple meaning you can access the variables anywhere and by the way this here just means the same as plant yeah it's just that if you want want to access a objects member variables from within the actual class then you use this dot to get a reference to it whereas externally we'd have some named reference like this but it's the same thing basically anyway that's so important so the next simplest one is probably private so to illustrate pry though I'm going to create a subclass of plant so I'm going to go here and say new class and let's call this oak because an oak is a plant and I'm going to say oak extends plants and let's just give that constructor as well so public oak like this pressing on key on my keyboard okay there we go now supposing implant I declare something private that's the lip leave these together up here and I'll go down here and usually when you have an instance member variable or class variable a static variable some kind of variable up here basically usually you want to declare it private you want to stop people out listing it from outside the class if I say private string type let's say and so now string is private and private means it's the opposite to public really public means you can access it anywhere private means you can only access it from within this class so I could happily say type equals plant here so I can use type here or if I want to say this type makes no difference but even though oak is a child class I cannot say here type equals 3 so that's giving me an error and it's saying if your plan dot type is not visible because it's private so let's say once won't work type type is private so I can only access type literally within these brackets here because that's that's a scope of a class I can access anywhere else I can't access it here either so system dot out say suss out plant plants dot type that's not going to work either so again I'll say won't work type type is private so private means only within the class and only within the class means within these brackets after your class declaration now often you want to have a variable which can't be accessed on the outside so it's not public and is you can't it's protected from being accessed here for example in a completely different class this is that app class but you want it to be access you want it to be accessible in child classes and that's what protected is for so I saw something here and say protected let's say protected string size and I'll set size equal to this stop actually let's let's post down a bit further so down here let's say this dot size equals large and you'd normally want to like I shall set it equal to medium usually you'd want to use our numerator type for this kind of thing but I'm just trying to illustrate they're probably private and protected stuff here so I won't worry about that so if you've got a protected variable you can access it within the class that's fine so actually you can access it doesn't matter what access level modify you put here you can always access them within the class that's always possible but if I go to oak now and I want to say like this start size equals large oak trees are pretty big then this yeah this is going to work now because size is protected and protected means that you can access it within the class within any subclass and also within any package sorry also within the same package so this works because size is protected and oak is a subclass of plant but so protected lets you access a variable within the class so within these brackets and within any subclass and also within the same package anywhere so let's create a new let's create a new class here and let's call it field like this and let's give let's give field a an oak actually let's give a plant source a plant plant and cause new plant I'm going to make this plant variable private so when you do new plan you can do it happily up here or you could do new plant in a constructor as well and it's let's give it a constructor while we're at it so here now we're in their default package so here I can say plant I see plant dot size and actually I could just do this analysis our plan dot size and this works as well so if I save that this works size is protected and field is in the same package as plant so that's fine unless let's just kind of emphasize this a bit by saying everything's in the default package at the moment so I could access plan dot size within main as well because my app here the class that main is it and there's also an end of the default package let's just create a new package here so let's call this world should be lower case actually I'll call that world and let's just drag these plants into world like this and just let Eclipse refactor it so this kind of emphasizes that plant is in the world package field is in the world package so for that reason I can access the protected variable plan dot size we will go to app which is now in a different package and I try to say see Sal plants dot size then it won't work size is protected site is protected and app is not in the same package as plant so it won't work won't work and so there's this bus public private and protected so private just within the same class public absolutely anywhere protect it within the same class all within the same package and there's one more possibility and that's that you could have no access level modifier no access specifier so I could say here string say and say int height and so I haven't given this a public private or protected and if you do that this is now package level visibility so I can access height of course in plan you can always access stuff within the same class you can always access the instance variables from within the same class to say eight there and I can access that within that say poke I can say this stop height equals ten or something so no access specifier so it works because oak and plant in the same package but you see it is possible to have a child class which is not in the same package by the way let me just show you that because the app class here is not in the same it's not in saint packages plan I can't do this out plant height so and this one work won't work because app and plant in different packages and the height has a package level package level is ability well this is one more possibility here which is that I could create a new child class here let's say new class and let's call this grass and I'm going to say grass extends plant and I'm going to just add the input there ctrl shift though to import world plan and let's give this a constructor so public grass and now supposing I try to do this out sis out this stop height it's not going to work because if I look at plant height has no access specifier that means its visible only in the same package and even though grass is a subclass of plan we still can't access this here this won't work won't work grass not in the same package as plant even though even though it's a subclass so that's a lot and that's coming out so actually runs and that's all I want to say for this tutorial I'm just going to summarize that again now but if your brain is already bursting it seems we were just bored then this is a good place to stop watching but let's just summarize these different possibilities here so um if I put this here and I say let say private only within same class and public from anywhere and protected means same class and same sorry child class so I subclasses why she say so class and same package and no modifier means same package only and of course you can access you can always access things from within the same class so I could say same here same class protected same class subclass same package and of course same package imply so you can access it from within the same class so I think I said and people sometimes get confused between probably private and protected and it modifies on the classes themselves so if you can only when you create a class in a file let's look at plan if you declare it public that means is it's visible from outside that file and it's got to have the same name you can only have one public class in a file it's gotta have the same name as a file you can't declare classes privates I can't say private class something here something like this and because this public private and protected stuff does not apply to classes it only applies these instance variables and but you can miss off the access specifier altogether and then this is just visible within this file and you can have as many classes as you want in one file but as I say only one public class because it has to manage the file name so that's it for public private and protected and I'm going to pull this source code on cave of programming comm and join me again for the next tutorial and until then happy coding you
