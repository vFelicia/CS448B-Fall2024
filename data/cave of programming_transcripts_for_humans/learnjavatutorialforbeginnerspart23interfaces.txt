With timestamps:

00:16 - hello this is John from cave of
00:19 - programming calm and this is a tutorial
00:22 - on interfaces in Java so there's a lot
00:26 - to say about interfaces and we're just
00:28 - going to get started on them here in
00:30 - this tutorial so let's say I create a
00:35 - class here I'm going to create a new
00:37 - class and I'll call it I don't know I'll
00:43 - call it machine and I'll give actually I
00:48 - won't give machine any methods for a
00:50 - moment but let's also I'll create
00:55 - another class here new class which I'll
00:58 - call person so got two classes here
01:02 - machine and person and machine might
01:05 - have I don't know like a method public
01:10 - void start let's say I'm just trying to
01:15 - create sort of absolutely minimal
01:18 - plausible kind of scenario for using
01:21 - interfaces and I'll say here machine
01:25 - started and person might have a bunch of
01:31 - methods to I don't know what like let's
01:35 - have a public void greet and greet just
01:40 - says this out hello there in fact let's
01:46 - and let's get machine and some just made
01:49 - this a bit more realistic let's give it
01:51 - a private string maybe a private int ID
01:58 - equals seven and let's give person a
02:08 - private string name and I'll also give
02:13 - personal constructor I'm going to right
02:15 - click my class file here and go to
02:18 - source I'm going to go to generate
02:21 - constructor using fields tick name and
02:24 - click
02:25 - and that will generate a constructor
02:28 - formula that sets the name and also
02:30 - calls the super constructor which I
02:32 - don't need so I'm going to get rid of
02:33 - that because person will actually be a
02:38 - child of the object class secretly
02:42 - because all classes are in Java but
02:44 - anyway now I can use these two classes
02:47 - of course I can say machine Mac one at
02:52 - say equals new machine and she's just
02:55 - got one method at a moment so I'm saying
02:58 - that Quan dot well these are actually
03:00 - inherited from the object parent class
03:03 - but I can call start which is the method
03:05 - that I defined for machine and to create
03:08 - a new person as a person 1 equals new
03:10 - person and person's got its constructor
03:13 - where you have to pass in the name
03:16 - because that's why I just defined and
03:17 - say person one dart greet for example
03:22 - but whoops
03:23 - not equals on a call person 1 greet and
03:29 - and so the point is that machine and
03:33 - person are just two completely different
03:36 - arbitrary objects with nothing in common
03:38 - but now supposing I thought okay and
03:44 - both machine and person should have a
03:47 - method called let's say show info so for
03:53 - some reason I've decided that ok machine
03:55 - a person or nothing to do with each
03:56 - other they're not the same kind of thing
03:57 - they don't have a common parent class or
04:00 - anything like that but I've decided that
04:02 - they should both have a method called
04:04 - show info Java gives me a kind of
04:08 - mechanism to kind of formalize that and
04:12 - this is one thing you can use interfaces
04:13 - for so let's right click in my project
04:16 - here I'm right-clicking the default
04:18 - package but could also just right-click
04:20 - the project folder doesn't matter here
04:21 - and go to new and instead of going to
04:24 - new class I'm going to go to new
04:26 - interface like this and creating an
04:30 - interface is pretty much the same as
04:33 - creating a class so I'll give it a name
04:35 - which had stol'n uppercase letter
04:37 - and I'll call this interface info and
04:42 - I'll click finish and I'm going to give
04:45 - this interface a method so I'm going to
04:48 - say public void show info I'm not going
04:53 - to pass the method any parameters
04:55 - although I could do certainly could do
04:56 - an important thing is I'm not going to
04:59 - define a method body like I could in a
05:01 - class I'd define something like I'd open
05:04 - a bracket curly bracket like that and
05:07 - pull closing on in and define code in
05:09 - here but interfaces don't have any code
05:12 - so they don't even have these curly
05:14 - brackets all they have its the header of
05:18 - of methods this is a header and that's
05:21 - all they have no curly parenthesis
05:23 - parenthesis so I define the show info
05:27 - and what I can do with that is let's say
05:29 - I go to machine I can say machine
05:33 - implements info like that and if I do
05:38 - that and without doing anything else I'm
05:40 - going to get an error here and if I look
05:42 - at the error click on it and go to add
05:45 - on implementing methods and I could also
05:47 - tie this by hand and what saying
05:51 - implements info does is it forces you to
05:54 - have all of the methods with the headers
05:56 - as specified in this interface so I said
05:59 - ok if something implements in the info
06:01 - interface it's got to have a method
06:03 - public footage so info and now Eclipse
06:06 - has just filled in for me the body of
06:07 - this method public void show info and
06:11 - this override annotation here this is
06:14 - optional but I was just checking that
06:17 - this really is an override but I could
06:18 - delete that I don't need it I'll delete
06:20 - this comment and let's let's put
06:23 - something in here let's make it do
06:25 - something like this out machine ID is
06:30 - and I'll say plus ID
06:36 - and now we could do with the same with
06:38 - person I could say person implements
06:44 - info and again the arrow comes up and
06:48 - let's go to add unimplemented methods
06:50 - and in person I'll say SSL person name
06:56 - is and it's just output name there so
07:03 - I'll leave that there as I say it's
07:05 - optional now the great thing about
07:09 - interfaces are so like so far we're just
07:13 - seeing that an interface is like it's
07:14 - kind of like a text contract really the
07:17 - way we've used it so far it's just like
07:19 - the thing that says okay if you
07:21 - implement this interface which could
07:22 - have any number of methods in with
07:24 - different return types different
07:25 - parameters different names and so on if
07:28 - you say implements that interface and
07:29 - it's got to have the methods that you've
07:31 - specified here so it's just kind of like
07:33 - a textual contract in from our point of
07:36 - view and by the way a class can
07:38 - implement any number of interfaces you
07:41 - can have a list of interfaces separated
07:43 - by commas here as many as you like and
07:46 - of course you can separately to that
07:48 - make a class extend and some parent
07:51 - class as you saw in the last tutorial
07:53 - but class can only extend one parent
07:56 - class whereas it can implement lots and
07:58 - lots of interfaces without number but
08:02 - the great thing about interfaces is is
08:04 - that now you can use them basically
08:07 - wherever you would have used a class
08:08 - name the only place you can't use an
08:10 - interface is when you do new because
08:12 - when you do new you're actually
08:14 - allocating memory to store kind of
08:18 - variables and methods I suppose I'm not
08:23 - really sure how it works but when you do
08:25 - new it's got to be followed by a class
08:27 - name with some exceptions that we'll see
08:29 - in a future tutorial and so you can't do
08:32 - new and an interface name normally
08:34 - without doing some other stuff anyway
08:36 - but anywhere else where you've got the
08:39 - name of a class you could use the name
08:41 - of an interface so let's take an example
08:43 - I could say
08:46 - info info 1 equals for example new
08:54 - machine like that it will let me do that
08:59 - and a reason I can do that is because
09:00 - machine does implement this interface up
09:03 - here says implements info and when I've
09:06 - done that this ok this is a variable of
09:09 - type info pointing to an object of Time
09:12 - Machine and I can only use this variable
09:15 - and to access just the one method of
09:18 - machine ok here are a bunch of methods
09:21 - and that kind of in the object parent
09:25 - class of all objects but the only
09:26 - machine specific method that I can
09:29 - access is the one defined in the
09:31 - interface this info interface which is
09:33 - show info so and because I defined show
09:37 - info in this interface I can call it via
09:41 - variables of the interface type and of
09:45 - course I could do stuff like info let's
09:47 - say info 2 equals and I could point it
09:51 - to person one because person 1 is
09:55 - actually a reference to a person object
09:57 - so I could point this reference a type
10:00 - info to that personal jet because person
10:04 - implements info so I've got this one
10:07 - personal jet here person 1 points at it
10:10 - and I'm saying point info to this
10:13 - variable to the same thing that person 1
10:17 - refers to or points up so again I could
10:22 - say like info 2 dot show info and if I
10:26 - run that it's going to say run as java
10:29 - application I think I'm running the
10:31 - wrong thing no that's good ok
10:32 - and it's and this is calling the show
10:34 - info method in this person object so if
10:38 - that's confusing which probably is if
10:40 - it's the first time you've seen it and
10:42 - it's worth spending some time looking at
10:45 - and I'll show you one more good example
10:47 - here so let's so here I've got this
10:51 - class called app which is just serving
10:53 - as a place to put my
10:55 - static void main method so I've not got
10:58 - an app object but I can create a method
11:01 - here like private static info let's say
11:07 - and I can make this method take a
11:12 - parameter of type info info info and I
11:18 - need the return sight there let's say
11:19 - void so methods aren't usually static
11:23 - you know these these methods on static
11:25 - but I have to make this static phone to
11:29 - use it because there's no app object
11:30 - here I haven't a new app and that's why
11:32 - I'm making it static and in here I could
11:35 - say info dot show info because that's
11:38 - all you can do with this info interface
11:40 - because I only define one method in it
11:42 - although I could define more you could
11:44 - have as many methods in there as you
11:46 - like as I say and now I can call info I
11:54 - totally scaling confusing having all
11:56 - these infos let's call this something
11:57 - different like output info maybe that's
12:02 - better
12:02 - I can call outputs info and I could pass
12:06 - for example as a range of possibilities
12:09 - I could pass machine 1 to it for example
12:11 - because machine 1 implements the info
12:13 - interface or acts 8 output info person 1
12:18 - for example and so I can pass any object
12:23 - to this method that implements this info
12:25 - interface and then within the method I
12:28 - can access any method that is defined in
12:31 - the info interface but I can't access
12:33 - other kind of methods of the class so
12:36 - there we've got this stuff coming up
12:38 - again this may be just puts this out and
12:41 - here a blank line to mail a bit clearer
12:43 - there we go so we're producing this by
12:47 - doing this
12:49 - and so that's that's as far as I can
12:53 - think that's sort of almost all there is
12:58 - really two interfaces till the mechanics
13:01 - of interfaces and of course this doesn't
13:04 - tell you much about how they are used
13:05 - but we're seeing one possible usage here
13:08 - that if you want to pass if you want to
13:11 - pass disparate to different objects to a
13:15 - method as long as they implement the
13:17 - same interface you know you can make it
13:19 - possible and you can call methods in
13:21 - those classes those objects by using the
13:24 - methods of the interface that's one
13:26 - possibility
13:27 - there are other things you can use
13:29 - interfaces for if you want some examples
13:32 - you could look for example at my got
13:35 - some free tutorials on youtube or on my
13:37 - website Cave of programming comm of the
13:42 - collections packages in Java they're
13:45 - used for kind of storing a manipulating
13:47 - data and they group the different
13:50 - storage objects down under different
13:52 - interfaces like list and set and map and
13:56 - so on so that's another uses to kind of
13:58 - group objects in a way and another kind
14:04 - of possible use is some people actually
14:05 - design whole programs by using
14:08 - interfaces like for example you know if
14:12 - I think you know you could start off
14:14 - designing a program by thinking okay
14:15 - what classes do I need and then I'll say
14:18 - you know let's say I want to have a
14:19 - class not a class well it's so I'm going
14:24 - to have objects they're all for example
14:26 - have methods like start and stop I could
14:29 - do stuff like new interface I could call
14:33 - this like I don't know I started all for
14:38 - example you know and so I just stands
14:41 - for interface which you could you could
14:43 - use if you want to make it clear that it
14:45 - is an interface and then you know you
14:47 - can start defining stuff like public
14:48 - void start here and public void stop and
14:54 - these could have parameters if you want
14:56 - and so on
14:57 - so some people design whole programs
14:59 - like that and that they create the
15:00 - interfaces first and so that you're
15:03 - defining card that objects will interact
15:05 - with each other and then you just create
15:07 - objects that implement those interfaces
15:09 - which is I don't know the name for that
15:12 - technique but it's a perfectly
15:14 - reasonable thing to do and it's just one
15:18 - more thing that I wanted to say which
15:21 - has almost slipped my mind let me think
15:23 - for a second okay got it yeah what I
15:26 - wanted to say it was just like and this
15:29 - is really I think it's a really nice
15:31 - analogy that I thought of for interfaces
15:35 - so I'm going to show you any more code
15:37 - now but if you want like a way of
15:40 - thinking about interfaces that I find
15:42 - useful and you can always think that if
15:46 - you open a bank account then that's kind
15:51 - of like doing new on a new with a class
15:54 - to create an object when you open a bank
15:57 - account usually you look into what bank
16:00 - you're going to use and you you might
16:03 - look at there I know interest rates or
16:05 - what kind of you know what kind of perks
16:08 - they give you or whatever you know where
16:10 - their branches are located you kind of
16:13 - look into the bank and think about it
16:16 - but after you've an open to bank account
16:20 - then you sort of no longer really think
16:23 - about the particular Bank you just
16:25 - expect that the bank will have certain
16:27 - facilities that every bank has like
16:30 - facilities for withdrawing money for
16:32 - paying money in I don't know for cashing
16:35 - checks or this kind of thing so the
16:38 - facilities that the bank has are kind of
16:41 - like and the things that you specify
16:43 - through the interface and you only have
16:47 - to think about particular objects when
16:51 - you do new so if you look at this this
16:55 - example for example I'm here I'm saying
17:00 - info one equals new machine and by doing
17:03 - that I kind of I no longer have access
17:06 - after this
17:07 - to machine specific methods except for
17:10 - the ones that I define in my interface
17:12 - and I could have done in for one equals
17:16 - new personal something and then I would
17:19 - have had access to show info method in
17:21 - person but it's kind of like sometimes
17:24 - you only care about what particular kind
17:28 - of object you're creating here when you
17:29 - do new and after that you just care
17:33 - about what methods the object has you
17:36 - don't worry about the type of it anymore
17:37 - and you access those methods to the
17:39 - interface that's kind of just one way of
17:42 - working it's not how you always work but
17:44 - I like this analogy because if you look
17:46 - for example at C Java collections you'll
17:51 - have the list interface and you only
17:54 - think about what kind of list you're
17:55 - creating when you do new lists and you
18:00 - know new array lists new linked lists or
18:02 - whatever and then the details you know
18:04 - of the particular type of lists you sort
18:07 - of then slightly forget about and you
18:09 - access that object through the interface
18:13 - methods and all this stuff kind of the
18:16 - same methods like add and remove and so
18:18 - on so I don't know if that analogy helps
18:21 - but if you do look at Java collections
18:23 - packages I think it does kind of help to
18:26 - think you know you're only going to
18:28 - worry about the particular type at the
18:31 - time when you create it and later on you
18:32 - just worry about the interface the
18:34 - actual methods that it has which could
18:36 - be the same for a whole variety of
18:38 - different objects anyway I'll leave you
18:42 - lurk some waffling and in the next
18:44 - tutorial we're going to look probably
18:46 - art packages in Java so join me again
18:49 - then and this code will be on cave of
18:51 - programming comm and so join me again
18:55 - next time

Cleaned transcript:

hello this is John from cave of programming calm and this is a tutorial on interfaces in Java so there's a lot to say about interfaces and we're just going to get started on them here in this tutorial so let's say I create a class here I'm going to create a new class and I'll call it I don't know I'll call it machine and I'll give actually I won't give machine any methods for a moment but let's also I'll create another class here new class which I'll call person so got two classes here machine and person and machine might have I don't know like a method public void start let's say I'm just trying to create sort of absolutely minimal plausible kind of scenario for using interfaces and I'll say here machine started and person might have a bunch of methods to I don't know what like let's have a public void greet and greet just says this out hello there in fact let's and let's get machine and some just made this a bit more realistic let's give it a private string maybe a private int ID equals seven and let's give person a private string name and I'll also give personal constructor I'm going to right click my class file here and go to source I'm going to go to generate constructor using fields tick name and click and that will generate a constructor formula that sets the name and also calls the super constructor which I don't need so I'm going to get rid of that because person will actually be a child of the object class secretly because all classes are in Java but anyway now I can use these two classes of course I can say machine Mac one at say equals new machine and she's just got one method at a moment so I'm saying that Quan dot well these are actually inherited from the object parent class but I can call start which is the method that I defined for machine and to create a new person as a person 1 equals new person and person's got its constructor where you have to pass in the name because that's why I just defined and say person one dart greet for example but whoops not equals on a call person 1 greet and and so the point is that machine and person are just two completely different arbitrary objects with nothing in common but now supposing I thought okay and both machine and person should have a method called let's say show info so for some reason I've decided that ok machine a person or nothing to do with each other they're not the same kind of thing they don't have a common parent class or anything like that but I've decided that they should both have a method called show info Java gives me a kind of mechanism to kind of formalize that and this is one thing you can use interfaces for so let's right click in my project here I'm rightclicking the default package but could also just rightclick the project folder doesn't matter here and go to new and instead of going to new class I'm going to go to new interface like this and creating an interface is pretty much the same as creating a class so I'll give it a name which had stol'n uppercase letter and I'll call this interface info and I'll click finish and I'm going to give this interface a method so I'm going to say public void show info I'm not going to pass the method any parameters although I could do certainly could do an important thing is I'm not going to define a method body like I could in a class I'd define something like I'd open a bracket curly bracket like that and pull closing on in and define code in here but interfaces don't have any code so they don't even have these curly brackets all they have its the header of of methods this is a header and that's all they have no curly parenthesis parenthesis so I define the show info and what I can do with that is let's say I go to machine I can say machine implements info like that and if I do that and without doing anything else I'm going to get an error here and if I look at the error click on it and go to add on implementing methods and I could also tie this by hand and what saying implements info does is it forces you to have all of the methods with the headers as specified in this interface so I said ok if something implements in the info interface it's got to have a method public footage so info and now Eclipse has just filled in for me the body of this method public void show info and this override annotation here this is optional but I was just checking that this really is an override but I could delete that I don't need it I'll delete this comment and let's let's put something in here let's make it do something like this out machine ID is and I'll say plus ID and now we could do with the same with person I could say person implements info and again the arrow comes up and let's go to add unimplemented methods and in person I'll say SSL person name is and it's just output name there so I'll leave that there as I say it's optional now the great thing about interfaces are so like so far we're just seeing that an interface is like it's kind of like a text contract really the way we've used it so far it's just like the thing that says okay if you implement this interface which could have any number of methods in with different return types different parameters different names and so on if you say implements that interface and it's got to have the methods that you've specified here so it's just kind of like a textual contract in from our point of view and by the way a class can implement any number of interfaces you can have a list of interfaces separated by commas here as many as you like and of course you can separately to that make a class extend and some parent class as you saw in the last tutorial but class can only extend one parent class whereas it can implement lots and lots of interfaces without number but the great thing about interfaces is is that now you can use them basically wherever you would have used a class name the only place you can't use an interface is when you do new because when you do new you're actually allocating memory to store kind of variables and methods I suppose I'm not really sure how it works but when you do new it's got to be followed by a class name with some exceptions that we'll see in a future tutorial and so you can't do new and an interface name normally without doing some other stuff anyway but anywhere else where you've got the name of a class you could use the name of an interface so let's take an example I could say info info 1 equals for example new machine like that it will let me do that and a reason I can do that is because machine does implement this interface up here says implements info and when I've done that this ok this is a variable of type info pointing to an object of Time Machine and I can only use this variable and to access just the one method of machine ok here are a bunch of methods and that kind of in the object parent class of all objects but the only machine specific method that I can access is the one defined in the interface this info interface which is show info so and because I defined show info in this interface I can call it via variables of the interface type and of course I could do stuff like info let's say info 2 equals and I could point it to person one because person 1 is actually a reference to a person object so I could point this reference a type info to that personal jet because person implements info so I've got this one personal jet here person 1 points at it and I'm saying point info to this variable to the same thing that person 1 refers to or points up so again I could say like info 2 dot show info and if I run that it's going to say run as java application I think I'm running the wrong thing no that's good ok and it's and this is calling the show info method in this person object so if that's confusing which probably is if it's the first time you've seen it and it's worth spending some time looking at and I'll show you one more good example here so let's so here I've got this class called app which is just serving as a place to put my static void main method so I've not got an app object but I can create a method here like private static info let's say and I can make this method take a parameter of type info info info and I need the return sight there let's say void so methods aren't usually static you know these these methods on static but I have to make this static phone to use it because there's no app object here I haven't a new app and that's why I'm making it static and in here I could say info dot show info because that's all you can do with this info interface because I only define one method in it although I could define more you could have as many methods in there as you like as I say and now I can call info I totally scaling confusing having all these infos let's call this something different like output info maybe that's better I can call outputs info and I could pass for example as a range of possibilities I could pass machine 1 to it for example because machine 1 implements the info interface or acts 8 output info person 1 for example and so I can pass any object to this method that implements this info interface and then within the method I can access any method that is defined in the info interface but I can't access other kind of methods of the class so there we've got this stuff coming up again this may be just puts this out and here a blank line to mail a bit clearer there we go so we're producing this by doing this and so that's that's as far as I can think that's sort of almost all there is really two interfaces till the mechanics of interfaces and of course this doesn't tell you much about how they are used but we're seeing one possible usage here that if you want to pass if you want to pass disparate to different objects to a method as long as they implement the same interface you know you can make it possible and you can call methods in those classes those objects by using the methods of the interface that's one possibility there are other things you can use interfaces for if you want some examples you could look for example at my got some free tutorials on youtube or on my website Cave of programming comm of the collections packages in Java they're used for kind of storing a manipulating data and they group the different storage objects down under different interfaces like list and set and map and so on so that's another uses to kind of group objects in a way and another kind of possible use is some people actually design whole programs by using interfaces like for example you know if I think you know you could start off designing a program by thinking okay what classes do I need and then I'll say you know let's say I want to have a class not a class well it's so I'm going to have objects they're all for example have methods like start and stop I could do stuff like new interface I could call this like I don't know I started all for example you know and so I just stands for interface which you could you could use if you want to make it clear that it is an interface and then you know you can start defining stuff like public void start here and public void stop and these could have parameters if you want and so on so some people design whole programs like that and that they create the interfaces first and so that you're defining card that objects will interact with each other and then you just create objects that implement those interfaces which is I don't know the name for that technique but it's a perfectly reasonable thing to do and it's just one more thing that I wanted to say which has almost slipped my mind let me think for a second okay got it yeah what I wanted to say it was just like and this is really I think it's a really nice analogy that I thought of for interfaces so I'm going to show you any more code now but if you want like a way of thinking about interfaces that I find useful and you can always think that if you open a bank account then that's kind of like doing new on a new with a class to create an object when you open a bank account usually you look into what bank you're going to use and you you might look at there I know interest rates or what kind of you know what kind of perks they give you or whatever you know where their branches are located you kind of look into the bank and think about it but after you've an open to bank account then you sort of no longer really think about the particular Bank you just expect that the bank will have certain facilities that every bank has like facilities for withdrawing money for paying money in I don't know for cashing checks or this kind of thing so the facilities that the bank has are kind of like and the things that you specify through the interface and you only have to think about particular objects when you do new so if you look at this this example for example I'm here I'm saying info one equals new machine and by doing that I kind of I no longer have access after this to machine specific methods except for the ones that I define in my interface and I could have done in for one equals new personal something and then I would have had access to show info method in person but it's kind of like sometimes you only care about what particular kind of object you're creating here when you do new and after that you just care about what methods the object has you don't worry about the type of it anymore and you access those methods to the interface that's kind of just one way of working it's not how you always work but I like this analogy because if you look for example at C Java collections you'll have the list interface and you only think about what kind of list you're creating when you do new lists and you know new array lists new linked lists or whatever and then the details you know of the particular type of lists you sort of then slightly forget about and you access that object through the interface methods and all this stuff kind of the same methods like add and remove and so on so I don't know if that analogy helps but if you do look at Java collections packages I think it does kind of help to think you know you're only going to worry about the particular type at the time when you create it and later on you just worry about the interface the actual methods that it has which could be the same for a whole variety of different objects anyway I'll leave you lurk some waffling and in the next tutorial we're going to look probably art packages in Java so join me again then and this code will be on cave of programming comm and so join me again next time
