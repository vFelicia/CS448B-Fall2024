With timestamps:

00:00 - hello this is John from cave of
00:02 - programming calm in this tutorial we're
00:04 - going to take a look at creating a
00:06 - static library in C++ so if you've got a
00:10 - bunch of classes or functions that you
00:13 - want to reuse in other programs of
00:15 - course there is the easy option of just
00:17 - copying your code over and you can do
00:19 - that in Eclipse just by right-clicking
00:22 - copying and pasting between your
00:24 - projects but another thing you can do is
00:26 - create the library of code and you can
00:28 - even then distribute that library to
00:30 - end-users you know to other programmers
00:32 - who can use it in their code if you want
00:35 - to and there are two kinds of libraries
00:37 - there are dynamic libraries which on
00:40 - Windows have the extension DLL and if I
00:43 - remember rightly it's gonna be dot s Oh
00:46 - typically on a UNIX type system and
00:50 - erasure there are also static libraries
00:53 - which have the extension dot Lib on
00:56 - windows last time I checked and it's
00:59 - gonna be usually dot a on a UNIX type
01:01 - system like this one which is the Mac
01:05 - dynamic libraries are that they're
01:08 - shared between programs and are loaded
01:10 - at runtime and you put your dynamic
01:12 - libraries either in the working
01:14 - directory of the program the directory
01:16 - of thinks is running in or in some
01:18 - special place on your operating system
01:20 - so on Windows for example you'll have a
01:23 - folder containing a lot of standard
01:25 - dll's or on a UNIX system a loaded
01:28 - standard dot Essos probably several
01:30 - directories we're going to look here at
01:33 - creating the simplest type of static
01:35 - library and now this is a library that
01:37 - you actually build into your code so at
01:40 - the end you would only district if
01:42 - you're creating a program you'd only
01:43 - distribute that one file your executable
01:47 - and that would have your static
01:49 - libraries incorporated into it so let's
01:52 - take a look here at how you can do that
01:54 - I've created this test library program
01:58 - and this is just a normal hello world
02:00 - C++ program and I'm going to use that to
02:02 - test my library code and we're going to
02:05 - go ahead now and create an actual
02:07 - library to test so let's go in Eclipse
02:10 - to file new C++ C++
02:13 - and all the stuff I say here it applies
02:16 - to other ideas as well it's just that in
02:18 - other ideas of course you have different
02:21 - menus and different ways of doing things
02:23 - but it always involves the same basic
02:26 - concepts so here we can see how I've got
02:29 - options to create a shared or static
02:32 - library in this project creation screen
02:35 - let's expand static library and create
02:37 - an empty project and here on my Mac I
02:40 - need to select this Mac OS X or OS 10
02:44 - how have you set GCC compiler Oh it is
02:48 - the compiler that I've just been using
02:50 - for this course in general so I'll give
02:53 - this a name I'm gonna give it a nameless
02:55 - completely lowercase because then my
02:58 - library name is going to come out all
03:01 - lowercase anyway which is perhaps the
03:04 - most common option for a library but
03:07 - it's not really important but just that
03:10 - you know have the greatest consistency
03:13 - with other libraries
03:14 - I'll give it a lowercase name I'm not
03:15 - even sure what a windows convention is
03:18 - really to be honest these days but let's
03:21 - call it let's call it animals I don't
03:26 - know maybe you want to give it you know
03:28 - so this is gonna be a library that just
03:30 - has a simple demonstration function and
03:32 - class in it is just gonna not do
03:34 - anything very exciting it's just gonna
03:36 - demonstrate the concept obviously call
03:38 - your library something appropriate to
03:40 - what it is if possible but a lot of them
03:43 - do have terribly cryptic names it has to
03:45 - be admitted ok so we'll click Next now
03:48 - and I'm gonna on tick debug here just
03:52 - because if we create a debug version
03:55 - it's gonna have symbols in it that would
03:58 - enable us to use that Eclipse debugger
04:00 - but I don't think I've ever actually
04:02 - used the Eclipse debugger with a library
04:04 - anyway and what I'd like to create here
04:06 - is a release version which is intended
04:08 - for distribution to end users you know
04:11 - or you could just use it yourself so
04:13 - let's do that I'll click finish now this
04:18 - this is kind of works pretty much as
04:20 - you'd expect really we can go ahead and
04:22 - we can create classes in this library
04:25 - I'm gonna give you an example of
04:27 - class and one function and put it in
04:29 - this library for demonstration purposes
04:31 - so I'll right-click the project and go
04:33 - to new class for a start let's call this
04:36 - cat so obviously again this is just a
04:40 - silly kind of demonstration and we'll
04:43 - click finish here so now we've got class
04:46 - in our library let's give this cut class
04:49 - a function that does something so I'm
04:52 - gonna give it a void speak many people
04:58 - say cats can't speak my insists my
05:00 - sister insists that they can so you know
05:03 - I don't know anyway right let's get on
05:07 - with it so I've created a prototype of
05:10 - my function in the class and I'm gonna
05:12 - go to my implementation file paste it in
05:14 - there and we'll say let's a member of a
05:16 - cut class and put an implementation in
05:22 - for it here and now I just want to use a
05:25 - C out in here just so that we can you
05:27 - know demonstrate this method actually
05:29 - doing something when we use it now with
05:33 - a library you want to be very careful
05:34 - about what you include and what
05:36 - namespaces you use so if I went to cut
05:39 - that H and included iostream for example
05:42 - we're going to have to distribute the
05:44 - header files not the CPP files just the
05:47 - head of files with the library so that
05:49 - people use it because they're going to
05:52 - need the prototypes of you know classes
05:54 - and functions in order to be able to use
05:58 - these functions in their code so if we
06:00 - included iostream here
06:02 - anyone who included capital H would then
06:05 - also have iostream included and maybe
06:07 - they would rather not have that so since
06:10 - I don't I don't need it in any case in
06:13 - this class I'm going to just include it
06:16 - in the implementation file here which
06:19 - the implementation file this is only
06:20 - going to be included as binary code so
06:25 - hearing includes and not so much of a
06:26 - problem and another thing that I really
06:28 - should have done is I should have put
06:30 - this class in the namespace so let's do
06:32 - that let's say a class I'll call my name
06:35 - space cave
06:36 - groaning you need a angle bracket there
06:40 - and after we finished defining stuff it
06:42 - close the angle bracket and I'll do the
06:44 - same thing with my implementation here
06:47 - let's put it in a namespace right here
06:55 - there we go now we were gonna be using
07:00 - them that the standard namespace here
07:02 - let's just compile that because it's got
07:04 - areas in in the moment what did I do
07:06 - wrong
07:07 - I yeah I should have said a namespace
07:09 - here okay so that should that should fix
07:13 - that we should be able to check that
07:14 - this compiles save that and this every
07:19 - time I record this video I make some
07:21 - mistakes as well I see this is the
07:23 - second time I've recorded this one okay
07:25 - right so god we've got our classes in
07:28 - the namespace we've included iostream
07:31 - now if I said using namespace standard
07:34 - here so using namespace and which I've
07:37 - been doing in this tutorial here that's
07:41 - as I guess it's not really bad but a lot
07:45 - of people disapprove of using this in
07:47 - general because if you're using if you
07:50 - say you're using a whole namespace then
07:53 - if you use another namespace or you want
07:56 - to include some classes from it a
07:58 - different name space and there are
08:00 - classes with the same names in both
08:02 - namespaces then you have a class there
08:05 - and this will be very problematic
08:08 - potentially if we were to put it in a
08:10 - header file because then anyone who uses
08:12 - this header would be automatically using
08:15 - that namespace and that they're not
08:16 - going to like that
08:17 - because that's going to import a lot of
08:19 - stuff into the namespace area that
08:22 - they're using you know and maybe that's
08:25 - gonna some classes or functions in this
08:28 - namespace are going to clash with the
08:30 - ones that the user wants to use so what
08:33 - I'll do here is I'll follow which is
08:34 - kind of something which is kind of
08:36 - considered best practice anyway and
08:38 - rather than just saying using namespace
08:40 - which is fine for a small project
08:43 - usually but rather than do that I'm
08:47 - gonna do the following I'm just going to
08:49 - pre
08:49 - so anything I want to use from the
08:51 - standard namespace with STD : : so let's
08:54 - say STD : : C out and I'll make it sort
08:58 - of cut noise in here by this and we then
09:03 - they need to say standard
09:06 - ndele or endler as i've been calling it
09:09 - as someone said that's better to say
09:11 - ndele and i suppose i agree with them
09:13 - really okay so that's that now we've got
09:17 - now we've got basically a functional
09:19 - library doesn't know anything very
09:21 - exciting but we could use it let's also
09:23 - put a function in here so if you've got
09:25 - a load of functions and a load of
09:27 - classes probably it's better to put the
09:29 - functions and a separate header file
09:30 - maybe even divide them up in different
09:32 - headers depending on you know what sort
09:35 - of category of things they're involved
09:37 - with but this is just a demonstration so
09:39 - I'm just gonna bunk a function in right
09:41 - here let's say void say something and I
09:48 - need to create the implementation of
09:50 - this in my implementation file in this
09:53 - namespace so let's let's just have
09:57 - another C out here and here I'm gonna
10:01 - say hello there
10:04 - I should probably thought of something
10:05 - that relates to cats or animals but
10:08 - hopefully you'll get the idea from this
10:10 - demo okay now if we actually build this
10:13 - then as long as we get no errors we
10:16 - shall be able to expand our project our
10:19 - project here expand the release folder
10:21 - and here you can see various files and
10:23 - this is actually the library that we've
10:25 - created so that was pretty simple if
10:28 - you're familiar with C++ it's pretty
10:30 - simple to create a library and we can
10:34 - also see this is the object file that
10:35 - was compiled just from the
10:37 - implementation file of the class
10:39 - basically we've got some other stuff in
10:42 - there it's not so important but that's
10:43 - what would actually be distributing and
10:45 - using in other projects we've also got
10:47 - this cat that H we created and we'd also
10:49 - have to distribute that with the library
10:52 - so now we can go ahead and use these and
10:55 - what you'd normally do is probably copy
10:56 - these to some other folder you know and
10:59 - then you've got a copy of your library
11:00 - which you can make use of but rather
11:02 - than do
11:03 - now I'm just going to make my test
11:05 - project reference these files actually
11:07 - were they happen to be at the moment so
11:11 - to take this library file for example
11:14 - live animals they let's right-click that
11:17 - on windows that's going to be probably
11:19 - Lib let's right-click and go to
11:20 - properties go to this resource thing at
11:23 - the top and here's the full path to
11:25 - where that library happens to be now so
11:28 - I'm just going to copy that click cancel
11:31 - and now in my test project and then a
11:34 - right-click properties and I'm gonna go
11:36 - to c++ build settings and we need to go
11:40 - to the linker settings here this is the
11:42 - thing that links together all your files
11:44 - to create your final executable in this
11:47 - case or could be a library we'll go to
11:51 - libraries here so here we have to
11:55 - specify a path to a folder containing
11:57 - libraries let's click + here paste that
12:00 - in I'm just going to get rid of the
12:01 - initial library name at the end and I've
12:04 - cut that because what we need is this
12:05 - path to the folder containing libraries
12:08 - that we want to use and I click ok so
12:10 - this is in there and under libraries
12:14 - here click plus sign and just paste in
12:17 - the name of that library now we need to
12:19 - remove the dot a Lib and we also need to
12:22 - remove the Lib prefix here all we want
12:25 - is the name of that library right here
12:27 - we don't want the Lib prefixes added
12:29 - onto the beginning or the extension to
12:32 - click ok so it's using the animals
12:34 - library from this directory and I'll
12:37 - just blend apply and ok we also need to
12:41 - tell our test project were to find
12:42 - relevant header files so let's look at
12:46 - our cattle a each right click properties
12:48 - resource here's where it's located so
12:52 - I'm going to copy and here I just need
12:54 - the directory so I'm just gonna copy the
12:56 - directory click cancel go back to our
12:59 - test project right click properties c++
13:03 - build settings and now we've got this
13:07 - includes in there compiler settings and
13:10 - where it says include paths here i need
13:13 - to add the directory there
13:15 - so this is the directory containing the
13:17 - header files that I want to use in this
13:19 - project click OK and we don't really
13:22 - need to click apply actually but you can
13:23 - and click OK now I can use that library
13:27 - in my test project so let's go to the
13:29 - test project go to the main function
13:32 - here so here I can include my cut my cut
13:39 - dot age or I can include it wherever I
13:41 - want within this project let's say
13:43 - include include capital H and since this
13:51 - is now a header it's in a standard
13:54 - location in one of the locations are set
13:56 - in the kind of compiler settings I'm
13:59 - gonna put this in angle brackets I don't
14:02 - know that it's really actually any
14:04 - difference necessarily in all compilers
14:07 - between angle brackets and quotes we
14:08 - usually use quotes for double quotes for
14:11 - local headers that are in your project
14:13 - and angle brackets for stuff that cells
14:16 - were so I'll stick to what I think is
14:18 - the convention here we even need to say
14:23 - using namespace cave or programming or I
14:25 - could prefix the objects I use with cave
14:28 - a programming colon colon so let's maybe
14:31 - do the other because as I say it is you
14:35 - know this kind of thing is considered by
14:37 - many people to be bad practice although
14:39 - I do use it around my course because it
14:41 - is easier and if I write programs myself
14:43 - I often use it as well but it's true
14:45 - that it could be a problem if you're
14:47 - writing a you know a larger project or
14:50 - something that includes a lot of
14:51 - different libraries so let's not do that
14:52 - at all and here I'm going to say cave of
14:57 - programming colon colon say something
15:00 - and if that might autocomplete even
15:03 - magically work there so if I run this we
15:06 - should get some output that's actually
15:08 - coming from our library and here it is
15:10 - and we can use the classes in there as
15:12 - well so I can say cave of programming
15:15 - colon colon cat
15:18 - and let's create an object from that car
15:20 - let's call the cat Bob which is an
15:23 - unusual name for cat but it will do and
15:25 - we'll say Bob dart speak there we go and
15:31 - run this and we should see something
15:33 - interesting so I only need to prefix the
15:35 - types with the name space and that's
15:38 - just an alternative to writing using
15:41 - namespace kvar programming which avoids
15:45 - the possibility of namespace you know
15:49 - clashes between namespaces basically so
15:51 - let's run this and though we see meow
15:54 - and that's coming from my library so
15:56 - there you go as you can see it's pretty
15:58 - simple if you have got basic c++ down
16:01 - then you can quite easily create a
16:04 - static library okay so until next time
16:07 - happy coding

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to take a look at creating a static library in C++ so if you've got a bunch of classes or functions that you want to reuse in other programs of course there is the easy option of just copying your code over and you can do that in Eclipse just by rightclicking copying and pasting between your projects but another thing you can do is create the library of code and you can even then distribute that library to endusers you know to other programmers who can use it in their code if you want to and there are two kinds of libraries there are dynamic libraries which on Windows have the extension DLL and if I remember rightly it's gonna be dot s Oh typically on a UNIX type system and erasure there are also static libraries which have the extension dot Lib on windows last time I checked and it's gonna be usually dot a on a UNIX type system like this one which is the Mac dynamic libraries are that they're shared between programs and are loaded at runtime and you put your dynamic libraries either in the working directory of the program the directory of thinks is running in or in some special place on your operating system so on Windows for example you'll have a folder containing a lot of standard dll's or on a UNIX system a loaded standard dot Essos probably several directories we're going to look here at creating the simplest type of static library and now this is a library that you actually build into your code so at the end you would only district if you're creating a program you'd only distribute that one file your executable and that would have your static libraries incorporated into it so let's take a look here at how you can do that I've created this test library program and this is just a normal hello world C++ program and I'm going to use that to test my library code and we're going to go ahead now and create an actual library to test so let's go in Eclipse to file new C++ C++ and all the stuff I say here it applies to other ideas as well it's just that in other ideas of course you have different menus and different ways of doing things but it always involves the same basic concepts so here we can see how I've got options to create a shared or static library in this project creation screen let's expand static library and create an empty project and here on my Mac I need to select this Mac OS X or OS 10 how have you set GCC compiler Oh it is the compiler that I've just been using for this course in general so I'll give this a name I'm gonna give it a nameless completely lowercase because then my library name is going to come out all lowercase anyway which is perhaps the most common option for a library but it's not really important but just that you know have the greatest consistency with other libraries I'll give it a lowercase name I'm not even sure what a windows convention is really to be honest these days but let's call it let's call it animals I don't know maybe you want to give it you know so this is gonna be a library that just has a simple demonstration function and class in it is just gonna not do anything very exciting it's just gonna demonstrate the concept obviously call your library something appropriate to what it is if possible but a lot of them do have terribly cryptic names it has to be admitted ok so we'll click Next now and I'm gonna on tick debug here just because if we create a debug version it's gonna have symbols in it that would enable us to use that Eclipse debugger but I don't think I've ever actually used the Eclipse debugger with a library anyway and what I'd like to create here is a release version which is intended for distribution to end users you know or you could just use it yourself so let's do that I'll click finish now this this is kind of works pretty much as you'd expect really we can go ahead and we can create classes in this library I'm gonna give you an example of class and one function and put it in this library for demonstration purposes so I'll rightclick the project and go to new class for a start let's call this cat so obviously again this is just a silly kind of demonstration and we'll click finish here so now we've got class in our library let's give this cut class a function that does something so I'm gonna give it a void speak many people say cats can't speak my insists my sister insists that they can so you know I don't know anyway right let's get on with it so I've created a prototype of my function in the class and I'm gonna go to my implementation file paste it in there and we'll say let's a member of a cut class and put an implementation in for it here and now I just want to use a C out in here just so that we can you know demonstrate this method actually doing something when we use it now with a library you want to be very careful about what you include and what namespaces you use so if I went to cut that H and included iostream for example we're going to have to distribute the header files not the CPP files just the head of files with the library so that people use it because they're going to need the prototypes of you know classes and functions in order to be able to use these functions in their code so if we included iostream here anyone who included capital H would then also have iostream included and maybe they would rather not have that so since I don't I don't need it in any case in this class I'm going to just include it in the implementation file here which the implementation file this is only going to be included as binary code so hearing includes and not so much of a problem and another thing that I really should have done is I should have put this class in the namespace so let's do that let's say a class I'll call my name space cave groaning you need a angle bracket there and after we finished defining stuff it close the angle bracket and I'll do the same thing with my implementation here let's put it in a namespace right here there we go now we were gonna be using them that the standard namespace here let's just compile that because it's got areas in in the moment what did I do wrong I yeah I should have said a namespace here okay so that should that should fix that we should be able to check that this compiles save that and this every time I record this video I make some mistakes as well I see this is the second time I've recorded this one okay right so god we've got our classes in the namespace we've included iostream now if I said using namespace standard here so using namespace and which I've been doing in this tutorial here that's as I guess it's not really bad but a lot of people disapprove of using this in general because if you're using if you say you're using a whole namespace then if you use another namespace or you want to include some classes from it a different name space and there are classes with the same names in both namespaces then you have a class there and this will be very problematic potentially if we were to put it in a header file because then anyone who uses this header would be automatically using that namespace and that they're not going to like that because that's going to import a lot of stuff into the namespace area that they're using you know and maybe that's gonna some classes or functions in this namespace are going to clash with the ones that the user wants to use so what I'll do here is I'll follow which is kind of something which is kind of considered best practice anyway and rather than just saying using namespace which is fine for a small project usually but rather than do that I'm gonna do the following I'm just going to pre so anything I want to use from the standard namespace with STD so let's say STD C out and I'll make it sort of cut noise in here by this and we then they need to say standard ndele or endler as i've been calling it as someone said that's better to say ndele and i suppose i agree with them really okay so that's that now we've got now we've got basically a functional library doesn't know anything very exciting but we could use it let's also put a function in here so if you've got a load of functions and a load of classes probably it's better to put the functions and a separate header file maybe even divide them up in different headers depending on you know what sort of category of things they're involved with but this is just a demonstration so I'm just gonna bunk a function in right here let's say void say something and I need to create the implementation of this in my implementation file in this namespace so let's let's just have another C out here and here I'm gonna say hello there I should probably thought of something that relates to cats or animals but hopefully you'll get the idea from this demo okay now if we actually build this then as long as we get no errors we shall be able to expand our project our project here expand the release folder and here you can see various files and this is actually the library that we've created so that was pretty simple if you're familiar with C++ it's pretty simple to create a library and we can also see this is the object file that was compiled just from the implementation file of the class basically we've got some other stuff in there it's not so important but that's what would actually be distributing and using in other projects we've also got this cat that H we created and we'd also have to distribute that with the library so now we can go ahead and use these and what you'd normally do is probably copy these to some other folder you know and then you've got a copy of your library which you can make use of but rather than do now I'm just going to make my test project reference these files actually were they happen to be at the moment so to take this library file for example live animals they let's rightclick that on windows that's going to be probably Lib let's rightclick and go to properties go to this resource thing at the top and here's the full path to where that library happens to be now so I'm just going to copy that click cancel and now in my test project and then a rightclick properties and I'm gonna go to c++ build settings and we need to go to the linker settings here this is the thing that links together all your files to create your final executable in this case or could be a library we'll go to libraries here so here we have to specify a path to a folder containing libraries let's click + here paste that in I'm just going to get rid of the initial library name at the end and I've cut that because what we need is this path to the folder containing libraries that we want to use and I click ok so this is in there and under libraries here click plus sign and just paste in the name of that library now we need to remove the dot a Lib and we also need to remove the Lib prefix here all we want is the name of that library right here we don't want the Lib prefixes added onto the beginning or the extension to click ok so it's using the animals library from this directory and I'll just blend apply and ok we also need to tell our test project were to find relevant header files so let's look at our cattle a each right click properties resource here's where it's located so I'm going to copy and here I just need the directory so I'm just gonna copy the directory click cancel go back to our test project right click properties c++ build settings and now we've got this includes in there compiler settings and where it says include paths here i need to add the directory there so this is the directory containing the header files that I want to use in this project click OK and we don't really need to click apply actually but you can and click OK now I can use that library in my test project so let's go to the test project go to the main function here so here I can include my cut my cut dot age or I can include it wherever I want within this project let's say include include capital H and since this is now a header it's in a standard location in one of the locations are set in the kind of compiler settings I'm gonna put this in angle brackets I don't know that it's really actually any difference necessarily in all compilers between angle brackets and quotes we usually use quotes for double quotes for local headers that are in your project and angle brackets for stuff that cells were so I'll stick to what I think is the convention here we even need to say using namespace cave or programming or I could prefix the objects I use with cave a programming colon colon so let's maybe do the other because as I say it is you know this kind of thing is considered by many people to be bad practice although I do use it around my course because it is easier and if I write programs myself I often use it as well but it's true that it could be a problem if you're writing a you know a larger project or something that includes a lot of different libraries so let's not do that at all and here I'm going to say cave of programming colon colon say something and if that might autocomplete even magically work there so if I run this we should get some output that's actually coming from our library and here it is and we can use the classes in there as well so I can say cave of programming colon colon cat and let's create an object from that car let's call the cat Bob which is an unusual name for cat but it will do and we'll say Bob dart speak there we go and run this and we should see something interesting so I only need to prefix the types with the name space and that's just an alternative to writing using namespace kvar programming which avoids the possibility of namespace you know clashes between namespaces basically so let's run this and though we see meow and that's coming from my library so there you go as you can see it's pretty simple if you have got basic c++ down then you can quite easily create a static library okay so until next time happy coding
