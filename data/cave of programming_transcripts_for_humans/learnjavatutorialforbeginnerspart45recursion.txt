With timestamps:

00:00 - hello this is John from cave of
00:03 - programming calm this is a tutorial on
00:06 - recursion in Java several people have
00:10 - asked me to make a tutorial on recursion
00:12 - and at first I didn't want to because
00:14 - it's sort of an algorithm rather than in
00:18 - a way being anything to do with Java as
00:21 - such but then I reflected and I realized
00:24 - that in fact recursion is is considered
00:26 - something basic that all programmers are
00:29 - supposed to learn so if you're learning
00:30 - Java you want to learn recursion along
00:33 - with it so let's take a look at it here
00:35 - I've got a main method set up in my
00:38 - application in Eclipse here and let's
00:40 - just put a sisal in there - cello works
00:43 - and I'll run this and it says hello now
00:47 - I'll define another method here I'm
00:50 - going to make this this other method
00:52 - also static I might as well make it
00:54 - private so I'm only going to call it
00:55 - from within this class in main I'll say
00:58 - private static void and I'll call it
01:02 - let's see let's just call it for a
01:05 - moment calculate like like this now the
01:12 - reason I made this static this has
01:14 - static has nothing implicitly to do with
01:16 - recursion it's just that I haven't got
01:18 - an object of this app class and I just
01:22 - want to use a method here directly from
01:24 - within main and if you want to call a
01:27 - method of a class then it needs to be
01:30 - static so rather than do new app and
01:32 - then say app top calculate or something
01:35 - I'm going to just make this method
01:37 - static here and we've covered that
01:39 - before of course so I can call calculate
01:42 - from within main of course
01:44 - let's put calculate in there and sis out
01:48 - hello
01:50 - and run that and this is all completely
01:52 - standard ordinary Java now supposing I
01:55 - pass a value to calculate like let's say
01:58 - here let's say an int value equals 4
02:08 - but four and then I'll make calculate
02:11 - take an int value and I'll display the
02:16 - value here and I'll pass pass in here
02:20 - let's run that check it works says for
02:23 - now it's important to realize for the
02:26 - purposes of this tutorial especially
02:28 - that whatever we do to end value within
02:31 - these brackets will not affect its value
02:33 - here this is because this is a primitive
02:36 - type it's like we're slashing the value
02:39 - for from this variable here into this
02:43 - variable here which is only as a scope
02:45 - at these two brackets here so if I say
02:48 - something like value equals value minus
02:54 - one or something like that and then I
02:57 - run this yeah it'll be three within this
03:00 - method but down here it's still going to
03:05 - be four so let's run that that's an
03:08 - important thing to grasp now as far as
03:11 - recursion goes we can do something kind
03:14 - of interesting here which is we can make
03:16 - this method call itself
03:18 - that's what recursion is is where you
03:20 - call a method recursively or to put it
03:23 - another way a subroutine calls the
03:26 - subroutine so here I could say let's say
03:31 - well it's a sub this is out in there
03:33 - actually what value I can now call
03:36 - calculate like that again and there's no
03:40 - real actually need to have this inner an
03:42 - int here I can just put it literally
03:44 - there I just did that to show that it
03:46 - wasn't changed when we change it within
03:48 - the function it's not changed within
03:50 - this method so in called calculate and
03:53 - let's pass value to it
03:56 - so the method is now calling itself
03:58 - recursively and this this code is
04:00 - actually problematic and if we run it
04:04 - what will happen this will get an error
04:06 - and let's see if I can scroll to the top
04:09 - of this error it's gonna be here
04:11 - somewhere
04:12 - there it was then it says stack overflow
04:17 - error and what this is is when you call
04:19 - a method
04:20 - from within another method like here we
04:23 - are calling calculate from within main
04:25 - there's a special area of memory in the
04:28 - Java Virtual Machine called the stack
04:30 - and the stack is used for local
04:33 - variables and for remembering which
04:37 - method called which method so we know
04:40 - where to return after the method is we
04:42 - call this use after the matter this call
04:44 - is used for stuff like that that's
04:46 - distinct from the heap and the heap is
04:48 - an area of memory which is where objects
04:51 - are allocated when you use the new
04:54 - operator so the stack is a relatively
04:56 - small area of memory that remembers
04:58 - function calls and local variables and
05:00 - stuff like that and here we're getting a
05:03 - stack overflow error because we called
05:05 - this function infinitely we call this
05:08 - within this this calls this which is
05:11 - this and it's calling self again and it
05:14 - kind of goes round and round in an
05:15 - infinite recursive loop until we get
05:19 - this stack overflow error so that's no
05:21 - good but we can this is legitimate if we
05:26 - provide some way of this this method to
05:30 - stop calling yourself at some point so a
05:33 - problem with recursion in a reason why
05:35 - it's not advisable to use it too much is
05:37 - precisely the danger of stack overflow
05:40 - errors if you call a method from within
05:43 - a method too many times I don't know how
05:45 - many I'm guessing tens of thousands then
05:48 - you'll get a stack overflow error and
05:50 - for that reason it's better to avoid
05:52 - recursion but are some situations which
05:54 - we'll look at in which it's very very
05:56 - useful to use a recursive method so and
06:02 - what we can do it here is we could put
06:03 - an if in here like say if well actually
06:07 - actually before I do that let's let's do
06:09 - something slightly more interesting
06:10 - let's call calculate on value minus one
06:15 - instead and what's going to happen now
06:18 - is you see we've got the same error
06:21 - again unsurprisingly but every time it
06:24 - printed out one less than a previous
06:26 - value until we got about 10,000 of them
06:29 - before we got the we got down to minus
06:31 - 10,000 before getting the stack
06:33 - overflow error so calculate initially
06:37 - has the value forty displays and then it
06:40 - calls calculate with the value and minus
06:43 - 1 which is 3 so then we end up coming in
06:45 - here again and the second time it prints
06:47 - 3 and so on but now the interesting
06:50 - thing is it's possible to stop the
06:52 - recursion because I can say something
06:54 - like if value equals 1 then or maybe
07:00 - even it's yeah let's just do that
07:02 - actually if value equals 1 then we can
07:06 - say we turn 1 like that
07:11 - oh yeah we're not returning anything at
07:13 - the moment let's just say return like
07:15 - that and then if we run that now prints
07:18 - 4 3 2 1 so we're coming in fine and it's
07:23 - calling calculate for values greater
07:24 - than 1 but when it gets to 1 it just
07:26 - returns so we've got one method calling
07:29 - another method what's this for 4 times I
07:32 - suppose yeah because we call calculate
07:36 - initially with 4 and we get this and
07:38 - calculate calls itself 1 2 I guess three
07:41 - times now we could we can do useful
07:45 - stuff with this and one classic example
07:49 - is to calculate a factorial value a
07:53 - factorial value is if you take for
07:55 - example e top let's say example eg the
08:01 - factorial of 4 which we write like this
08:05 - four exclamation mark that's not
08:06 - programming terminology or anything that
08:08 - sir that's some mathematics terminology
08:11 - for factorial I think you're right it
08:14 - like that or is it is it like this I
08:17 - think it's like that it doesn't matter
08:19 - anyway 4 factorial is equal to 4 times 3
08:25 - times 2 times 1 or little 1 obviously
08:29 - doesn't matter
08:30 - so the factorial of any number is equal
08:32 - to the number multiplied by all the
08:34 - numbers below it so to speak
08:36 - leaving out 0 because if we multiplied
08:39 - it by 0 at the end we just get 0 of
08:42 - course and this is this is very useful
08:44 - in probability theory
08:46 - example so this is called the factorial
08:49 - factorial for in this case
08:53 - so the factorial of any number is just
08:54 - this now we can calculate that using a
08:57 - recursive function because what I can do
09:00 - is here and say let's our return value
09:02 - let's make this int and here I'll say if
09:06 - the value is 1 we'll stop by just
09:09 - returning 1 but otherwise if the value
09:12 - is something greater than 1 we'll say
09:15 - we'll call calculate itself on value
09:18 - minus 1 but we'll multiply the return
09:21 - value of that by value itself and we'll
09:26 - return this this is getting a little bit
09:29 - more complicated now and you'll have to
09:31 - think about this probably a little bit
09:32 - unless you're cleverer than me to get
09:36 - your head around it
09:37 - let's listen excuse me let's run this
09:39 - again and now what I can do is I can
09:43 - print out return value actually here so
09:47 - here and let's run this and now the
09:52 - factorial of 4 is 24 and I can let's I
09:59 - can also rename this to factorial which
10:01 - might be might be handy by like this so
10:06 - now we've got a function that calculates
10:08 - the factorial its rename this as well of
10:12 - any number passed to it factorial 5 or
10:16 - whatever and to see how this works it's
10:19 - um it's probably going to help if you
10:22 - just think through what it does for
10:25 - small values so if we call this this
10:29 - method here I'm using my function and
10:31 - method interchangeably it's a method
10:33 - because it's part of an object but you
10:35 - could also call it a functional
10:36 - subroutine if you like I'm so routing
10:38 - programming lingo function is more a
10:40 - mathematics lingo but it's all good so
10:44 - function takes in usually a number and
10:47 - returns a number and and let's say we
10:50 - pass in one what would happen is we'd
10:53 - come in here and it would say is value 1
10:54 - yes return 1 so this would display 1
10:58 - we pass in one here we just get one like
11:02 - this if we pass in two what happens is
11:06 - we come in here with the value two and
11:08 - says is the value one no it's not so it
11:10 - doesn't do this it comes down here and
11:13 - it calls factorial on one in other words
11:17 - 2 minus 1 which is 1 times 2 so we're
11:21 - taking 2 here and multiplying it by
11:24 - factorial 1 2 times 1 is of course 2 and
11:30 - so that this the factorial of 1 will
11:34 - just return here we'll just get 1 so if
11:37 - we call it with 2 here it's 2 and
11:40 - doesn't execute that execute this that's
11:43 - 2 this will end up being 1 so 2 times 1
11:47 - and is why is returned in the end from
11:50 - that from the function and that's
11:52 - factorial 2 is 2 I don't if I sounded
11:55 - hideously confusing or helpful but
11:58 - either way I'd advise just going through
12:00 - this logic for yourself imagine what
12:02 - this will do for the value 1 and n value
12:05 - 2 and and so on I'm not sure what
12:09 - factorial 0 is actually are probably
12:12 - it's defined as 0 we might want to think
12:15 - about how to define factorial 0 but this
12:17 - will do to all these stray recursion and
12:19 - if we pass in 3 it's going to do 3 times
12:24 - 2 times 1 so we've got an extra step to
12:27 - it comes in here and it says ok 3 times
12:31 - whatever factorial 3 minus 1 is Miller
12:34 - is factorial of 2 and then it so it's
12:37 - coming in here at second time saying ok
12:39 - we'll do 2 times whatever factorial of 2
12:44 - is and all these values get stored
12:48 - basically on there on the stag and the
12:50 - end result is you're calculating
12:51 - factorial 3 I think once you once you've
12:55 - got your head around what's going on
12:57 - when you passing 1 and when you pass in
12:59 - two it starts to become fairly clear
13:02 - what will happen for 3 and 4 and 5 and
13:04 - so on and you get the idea you could
13:07 - spend days thinking about this until you
13:09 - you're understanding
13:10 - is as great as your understanding is of
13:13 - you know pulling out a chair from
13:15 - underneath the table but it's probably
13:16 - not worth it that degree of clarity
13:19 - you'll get the idea if you just look at
13:21 - a few small values of this and so this
13:24 - this is a classic example where you use
13:25 - recursion the important thing to
13:27 - remember with recursion is always always
13:29 - make sure that it's going to stop
13:32 - somewhere and don't try to make it
13:34 - recurse thousands of times stick with
13:37 - small numbers otherwise you could get a
13:39 - stack overflow error another classic
13:43 - example where we use recursion is let's
13:46 - take a look is if you look up the towers
13:52 - of Hanoi puzzle towers of Hanoi there's
13:56 - a there's an explanation of this on
13:58 - Wikipedia this simple game which looks
14:02 - complex and intimidating at first was
14:04 - actually relatively simple and the
14:08 - towers of Hanoi puzzle is you have these
14:10 - disks on these rods and you've got to
14:12 - move the disks by moving one disk at a
14:14 - time onto another rod and you're only
14:17 - allowed in you're not allowed to ever
14:19 - put a bigger disk on a smaller disk and
14:21 - their puzzle is to move the tower from
14:25 - move the entire stack to another rod one
14:28 - disk at a time obeying these these rules
14:30 - and if you look down here somewhere
14:33 - we've got an explanation of the
14:34 - recursive solution and although this
14:37 - looks a bit intimidating it's actually
14:40 - in some ways easier to understand in
14:43 - calculating factorial I find and work
14:45 - where recursive algorithms really shine
14:48 - is if you can see what to do for one
14:50 - step of this puzzle then you can use a
14:53 - recursive solution that applies that
14:55 - step over and over again and solves the
15:00 - whole whole puzzle in a very elegant
15:02 - manner with surprisingly little code
15:06 - it's better to loops in general than
15:09 - recursion but in this case using a loop
15:11 - would be actually quite hard to figure
15:14 - out mentally where is the recursive
15:16 - solution that turns out to be pretty
15:20 - simple you're kind of looking at the end
15:21 - result and saying okay
15:24 - what would I have to do to get to one
15:25 - step before that end result whether all
15:28 - that all the tower is being moved and
15:30 - create a writer method that does that
15:32 - and then say okay we can use the same
15:34 - method to get to one step before the the
15:39 - solution that's one step before the
15:41 - final step if you see what I mean there
15:43 - if you can solve there the second to
15:47 - last step or I guess it will be the last
15:50 - step then you can solve the second to
15:51 - last step in the same way and the third
15:53 - to last step and so on just by using a
15:56 - recursive method so if you want practice
16:00 - with recursive methods try to calculate
16:01 - a factorial and then I would say come to
16:04 - this Wikipedia page and see if you can
16:07 - implement a recursive solution for the
16:09 - towers of Hanoi puzzle and actually that
16:13 - you also need some way of representing
16:14 - these disks using maybe a Java
16:18 - collection class or something or if
16:20 - that's too complicated don't worry about
16:22 - it because the most basic thing that you
16:25 - need to grasp first is just calculating
16:27 - a factorial or something like that and
16:29 - when you can do that you basically
16:31 - grasped recursion so and that's it for
16:35 - this tutorial I'll put this code as
16:37 - always on cave of programming comm and
16:40 - if you go to WWE for programming comm
16:44 - there you can find lots of free videos
16:47 - and simply articles as well and some
16:50 - free courses and lots of other courses
16:53 - that include free videos you can just
16:55 - click on this and ghosts look straighter
16:57 - some free videos and the source code for
17:00 - this is going to be if you scroll down
17:01 - to the YouTube videos section you'll
17:04 - find it under the appropriate and while
17:08 - this is actually going to be in the
17:09 - basic Java video tutorials and you'll be
17:11 - down here somewhere when I get around to
17:13 - adding this source code click on a page
17:15 - in this section and you'll find the
17:18 - source code so that's it for this
17:22 - tutorial and until next time happy
17:25 - coding

Cleaned transcript:

hello this is John from cave of programming calm this is a tutorial on recursion in Java several people have asked me to make a tutorial on recursion and at first I didn't want to because it's sort of an algorithm rather than in a way being anything to do with Java as such but then I reflected and I realized that in fact recursion is is considered something basic that all programmers are supposed to learn so if you're learning Java you want to learn recursion along with it so let's take a look at it here I've got a main method set up in my application in Eclipse here and let's just put a sisal in there cello works and I'll run this and it says hello now I'll define another method here I'm going to make this this other method also static I might as well make it private so I'm only going to call it from within this class in main I'll say private static void and I'll call it let's see let's just call it for a moment calculate like like this now the reason I made this static this has static has nothing implicitly to do with recursion it's just that I haven't got an object of this app class and I just want to use a method here directly from within main and if you want to call a method of a class then it needs to be static so rather than do new app and then say app top calculate or something I'm going to just make this method static here and we've covered that before of course so I can call calculate from within main of course let's put calculate in there and sis out hello and run that and this is all completely standard ordinary Java now supposing I pass a value to calculate like let's say here let's say an int value equals 4 but four and then I'll make calculate take an int value and I'll display the value here and I'll pass pass in here let's run that check it works says for now it's important to realize for the purposes of this tutorial especially that whatever we do to end value within these brackets will not affect its value here this is because this is a primitive type it's like we're slashing the value for from this variable here into this variable here which is only as a scope at these two brackets here so if I say something like value equals value minus one or something like that and then I run this yeah it'll be three within this method but down here it's still going to be four so let's run that that's an important thing to grasp now as far as recursion goes we can do something kind of interesting here which is we can make this method call itself that's what recursion is is where you call a method recursively or to put it another way a subroutine calls the subroutine so here I could say let's say well it's a sub this is out in there actually what value I can now call calculate like that again and there's no real actually need to have this inner an int here I can just put it literally there I just did that to show that it wasn't changed when we change it within the function it's not changed within this method so in called calculate and let's pass value to it so the method is now calling itself recursively and this this code is actually problematic and if we run it what will happen this will get an error and let's see if I can scroll to the top of this error it's gonna be here somewhere there it was then it says stack overflow error and what this is is when you call a method from within another method like here we are calling calculate from within main there's a special area of memory in the Java Virtual Machine called the stack and the stack is used for local variables and for remembering which method called which method so we know where to return after the method is we call this use after the matter this call is used for stuff like that that's distinct from the heap and the heap is an area of memory which is where objects are allocated when you use the new operator so the stack is a relatively small area of memory that remembers function calls and local variables and stuff like that and here we're getting a stack overflow error because we called this function infinitely we call this within this this calls this which is this and it's calling self again and it kind of goes round and round in an infinite recursive loop until we get this stack overflow error so that's no good but we can this is legitimate if we provide some way of this this method to stop calling yourself at some point so a problem with recursion in a reason why it's not advisable to use it too much is precisely the danger of stack overflow errors if you call a method from within a method too many times I don't know how many I'm guessing tens of thousands then you'll get a stack overflow error and for that reason it's better to avoid recursion but are some situations which we'll look at in which it's very very useful to use a recursive method so and what we can do it here is we could put an if in here like say if well actually actually before I do that let's let's do something slightly more interesting let's call calculate on value minus one instead and what's going to happen now is you see we've got the same error again unsurprisingly but every time it printed out one less than a previous value until we got about 10,000 of them before we got the we got down to minus 10,000 before getting the stack overflow error so calculate initially has the value forty displays and then it calls calculate with the value and minus 1 which is 3 so then we end up coming in here again and the second time it prints 3 and so on but now the interesting thing is it's possible to stop the recursion because I can say something like if value equals 1 then or maybe even it's yeah let's just do that actually if value equals 1 then we can say we turn 1 like that oh yeah we're not returning anything at the moment let's just say return like that and then if we run that now prints 4 3 2 1 so we're coming in fine and it's calling calculate for values greater than 1 but when it gets to 1 it just returns so we've got one method calling another method what's this for 4 times I suppose yeah because we call calculate initially with 4 and we get this and calculate calls itself 1 2 I guess three times now we could we can do useful stuff with this and one classic example is to calculate a factorial value a factorial value is if you take for example e top let's say example eg the factorial of 4 which we write like this four exclamation mark that's not programming terminology or anything that sir that's some mathematics terminology for factorial I think you're right it like that or is it is it like this I think it's like that it doesn't matter anyway 4 factorial is equal to 4 times 3 times 2 times 1 or little 1 obviously doesn't matter so the factorial of any number is equal to the number multiplied by all the numbers below it so to speak leaving out 0 because if we multiplied it by 0 at the end we just get 0 of course and this is this is very useful in probability theory example so this is called the factorial factorial for in this case so the factorial of any number is just this now we can calculate that using a recursive function because what I can do is here and say let's our return value let's make this int and here I'll say if the value is 1 we'll stop by just returning 1 but otherwise if the value is something greater than 1 we'll say we'll call calculate itself on value minus 1 but we'll multiply the return value of that by value itself and we'll return this this is getting a little bit more complicated now and you'll have to think about this probably a little bit unless you're cleverer than me to get your head around it let's listen excuse me let's run this again and now what I can do is I can print out return value actually here so here and let's run this and now the factorial of 4 is 24 and I can let's I can also rename this to factorial which might be might be handy by like this so now we've got a function that calculates the factorial its rename this as well of any number passed to it factorial 5 or whatever and to see how this works it's um it's probably going to help if you just think through what it does for small values so if we call this this method here I'm using my function and method interchangeably it's a method because it's part of an object but you could also call it a functional subroutine if you like I'm so routing programming lingo function is more a mathematics lingo but it's all good so function takes in usually a number and returns a number and and let's say we pass in one what would happen is we'd come in here and it would say is value 1 yes return 1 so this would display 1 we pass in one here we just get one like this if we pass in two what happens is we come in here with the value two and says is the value one no it's not so it doesn't do this it comes down here and it calls factorial on one in other words 2 minus 1 which is 1 times 2 so we're taking 2 here and multiplying it by factorial 1 2 times 1 is of course 2 and so that this the factorial of 1 will just return here we'll just get 1 so if we call it with 2 here it's 2 and doesn't execute that execute this that's 2 this will end up being 1 so 2 times 1 and is why is returned in the end from that from the function and that's factorial 2 is 2 I don't if I sounded hideously confusing or helpful but either way I'd advise just going through this logic for yourself imagine what this will do for the value 1 and n value 2 and and so on I'm not sure what factorial 0 is actually are probably it's defined as 0 we might want to think about how to define factorial 0 but this will do to all these stray recursion and if we pass in 3 it's going to do 3 times 2 times 1 so we've got an extra step to it comes in here and it says ok 3 times whatever factorial 3 minus 1 is Miller is factorial of 2 and then it so it's coming in here at second time saying ok we'll do 2 times whatever factorial of 2 is and all these values get stored basically on there on the stag and the end result is you're calculating factorial 3 I think once you once you've got your head around what's going on when you passing 1 and when you pass in two it starts to become fairly clear what will happen for 3 and 4 and 5 and so on and you get the idea you could spend days thinking about this until you you're understanding is as great as your understanding is of you know pulling out a chair from underneath the table but it's probably not worth it that degree of clarity you'll get the idea if you just look at a few small values of this and so this this is a classic example where you use recursion the important thing to remember with recursion is always always make sure that it's going to stop somewhere and don't try to make it recurse thousands of times stick with small numbers otherwise you could get a stack overflow error another classic example where we use recursion is let's take a look is if you look up the towers of Hanoi puzzle towers of Hanoi there's a there's an explanation of this on Wikipedia this simple game which looks complex and intimidating at first was actually relatively simple and the towers of Hanoi puzzle is you have these disks on these rods and you've got to move the disks by moving one disk at a time onto another rod and you're only allowed in you're not allowed to ever put a bigger disk on a smaller disk and their puzzle is to move the tower from move the entire stack to another rod one disk at a time obeying these these rules and if you look down here somewhere we've got an explanation of the recursive solution and although this looks a bit intimidating it's actually in some ways easier to understand in calculating factorial I find and work where recursive algorithms really shine is if you can see what to do for one step of this puzzle then you can use a recursive solution that applies that step over and over again and solves the whole whole puzzle in a very elegant manner with surprisingly little code it's better to loops in general than recursion but in this case using a loop would be actually quite hard to figure out mentally where is the recursive solution that turns out to be pretty simple you're kind of looking at the end result and saying okay what would I have to do to get to one step before that end result whether all that all the tower is being moved and create a writer method that does that and then say okay we can use the same method to get to one step before the the solution that's one step before the final step if you see what I mean there if you can solve there the second to last step or I guess it will be the last step then you can solve the second to last step in the same way and the third to last step and so on just by using a recursive method so if you want practice with recursive methods try to calculate a factorial and then I would say come to this Wikipedia page and see if you can implement a recursive solution for the towers of Hanoi puzzle and actually that you also need some way of representing these disks using maybe a Java collection class or something or if that's too complicated don't worry about it because the most basic thing that you need to grasp first is just calculating a factorial or something like that and when you can do that you basically grasped recursion so and that's it for this tutorial I'll put this code as always on cave of programming comm and if you go to WWE for programming comm there you can find lots of free videos and simply articles as well and some free courses and lots of other courses that include free videos you can just click on this and ghosts look straighter some free videos and the source code for this is going to be if you scroll down to the YouTube videos section you'll find it under the appropriate and while this is actually going to be in the basic Java video tutorials and you'll be down here somewhere when I get around to adding this source code click on a page in this section and you'll find the source code so that's it for this tutorial and until next time happy coding
