With timestamps:

00:17 - hello this is char from cave or
00:19 - programmer calm and this is they fairly
00:23 - small but nevertheless very important
00:25 - tutorial on casting in Java so in Java
00:31 - is a bunch of numerical types for
00:33 - example we've got ins and which let's
00:39 - say we have a an integer value we can
00:43 - use in to store it and it's also like
00:46 - there's a short version of int which
00:49 - takes a less memory I think intersexual
00:51 - 32 bytes and short is I think 16 sorry
00:59 - 32 bits for int and shorter is 16 bits I
01:03 - think that's right or 2 bytes so that's
01:06 - a short short volume equals 55 or
01:12 - something and as also there's also like
01:14 - a bytes type and bike can only store up
01:17 - to from it's like from minus 128 to Plus
01:23 - 127 so total of 256 different values if
01:27 - we include the 0 so let's say here my
01:31 - value equals 20 or something and there's
01:34 - also like a long so long value equals
01:39 - and I could be a really really long
01:40 - number and of course we've got floating
01:43 - point values we've got float floats
01:48 - value this can have a point in it equals
01:52 - you know something like this and we've
01:55 - got a double value that has even greater
01:57 - precision I can remember there how many
02:02 - maximum values gets off the top of my
02:04 - head but you can easily look them up and
02:08 - say double value
02:10 - equals something like this and if you do
02:15 - want to know that kind of maximum anyone
02:17 - many of those oh by the way this
02:19 - something I wanted to show you here
02:20 - which is that if you type a value at a
02:25 - point without points the here a decimal
02:27 - point
02:27 - it has a double type somehow by default
02:32 - so when I try to assign a value with a
02:35 - floating point to a float value I get an
02:37 - error and it's going to say cannot
02:39 - convert from double to float and one
02:41 - really simple way of dealing with that
02:43 - is just to put an F on the end of it and
02:45 - that turns it into a float value so it's
02:48 - useful to know and if you wanted to know
02:50 - that maximum minimum values these types
02:52 - you can look in the non primitive
02:53 - versions of these for example double
02:57 - this is the class version that has
02:59 - various methods and that's got like a
03:02 - max value on it and for example so or I
03:07 - could say you know like bite max value
03:10 - let's just do it suss out on that so you
03:13 - can see this out and
03:18 - if I run that 127 now you can actually
03:27 - cast from one kind of numerical value to
03:31 - another so if you have one kind of
03:33 - numerical value and you want to store it
03:35 - in a variable of a different type you
03:37 - can use a cast so I could say for
03:40 - example if I say like int value here
03:46 - equals long value like that and I save
03:52 - it then get an error here because the
03:55 - same kind of convert from long to int
03:58 - but in fact I often can convert for a
04:01 - long twin because if I look at this
04:03 - value here that would fit in an integer
04:06 - type it's a relatively small value so I
04:10 - can say here int you put Apollo the
04:14 - type that you want to cast to this type
04:16 - in round brackets before the title your
04:20 - customer from and now it accepts it and
04:23 - it's fine and if I do it's this out on
04:25 - int value and it's just run this program
04:30 - here see it's still going to write value
04:32 - in because this this value fits
04:34 - comfortably in an int you can also cast
04:38 - from floating point values to win values
04:42 - or the other weight so let's have a now
04:46 - going in value there let's say double
04:51 - value equals int volume and let's save
04:57 - that in fact it's letting me do that
05:01 - without even a cast but what's going to
05:03 - happen is it's just gonna of course
05:08 - it's just going to put point naught on
05:11 - the end of it so it's converting
05:12 - comfortably to a double value and you
05:15 - don't need a caster because you're not
05:17 - in essentially not changing the value
05:19 - you're not chopping anything off or
05:22 - because here this potential complication
05:25 - that we'll look at in a second well if I
05:27 - had a long value it was too big to fit
05:30 - into an integer type because long is I
05:32 - think it's 64 bits and in 32 bits I
05:35 - think then you could potentially have
05:39 - problems so this kind of casting is a
05:43 - way of saying look I really know what
05:45 - I'm doing I definitely want to do this
05:46 - change it to an int whereas with this
05:49 - there's less potential for stuff to go
05:51 - wrong so job will just do it for you you
05:54 - don't need a cast and we can convert the
05:56 - other way as well let's say I want to
05:58 - say supposing I have a double value at
06:02 - set double value back to in fact let's
06:05 - use that float plot you there so I've
06:07 - got float said two eight eight three
06:09 - four point three if I say int value
06:13 - equals float value now there's a
06:19 - potential for something to go wrong well
06:21 - not go wrong all the things we're going
06:23 - to lose this stuff after the floating
06:25 - point point three exchange it to
06:28 - actually on AIDS because up for a reason
06:31 - I'll explain in a minute and Java wants
06:34 - to know that you really do want to chop
06:35 - off the end of this here so you have to
06:38 - cast it and I can put Castilla I can
06:41 - cast from the float value to the in
06:43 - value and then it still sits out here on
06:46 - int value and if I run that then I've
06:51 - got eighty eight eight thousand eight
06:52 - hundred eight hundred and thirty-four
06:54 - and notice this is not rounding off it's
06:57 - literally chopped the end of it off if
07:00 - you wanted to round it you'd have to use
07:02 - math dot round
07:05 - but so if you just do a cast it's just
07:08 - going to cut the end off and now like
07:11 - one last thing I want to say in this
07:12 - tutorial which is that you have to be
07:14 - really careful trying to stuff an
07:18 - oversized type into a type it's not
07:20 - going off memory to hold it
07:22 - so bite value as we've seen the maximum
07:25 - value of a bite is 127 and let's let's
07:30 - try to like and let's say bite pile you
07:34 - here and let's try to cast have a value
07:37 - to abide that's too big so let's say 128
07:43 - and I can literally type a number though
07:46 - as well it doesn't have to be a variable
07:48 - you can cast a number to an appropriate
07:50 - type and so an alternative syntax here
07:54 - for example would be the say float float
07:58 - value to 2 equals 99.3 so that's a
08:06 - double value so need a cast instead of
08:09 - putting an F on the end I could just put
08:11 - float here that will work just as well
08:14 - and now here so 127 is a maximum value
08:18 - of our bytes I'm trying to pull hundred
08:20 - 28 into it and it's just two sits out
08:22 - here and then what happens so by its
08:26 - value there and if I run that it's going
08:30 - to minus 128 which is the minimum value
08:33 - of it so it's kind of like it is wrapped
08:36 - around so like that extra one has pushed
08:41 - it around the circle and it's gone kind
08:43 - of round the circle all the way to the
08:45 - minimum value that it can have so you
08:50 - have to be really careful and when
08:51 - you're typing this when you're typing a
08:55 - cast you're casting from one type to
08:56 - another
08:57 - you're implicitly doing something that
09:00 - could go wrong and you have to really
09:02 - carefully think is this going to work
09:05 - have I got enough memory in a tight line
09:07 - cast
09:08 - to to store the value that I'm casting
09:12 - from otherwise you'll get very strange
09:14 - results let's just put them the
09:18 - following won't work well it will work
09:23 - but as we expect it to Lannisport
09:33 - comment that 1 to 8 is too big for a
09:38 - bite
09:39 - ok and sometimes beginners in
09:43 - programming will try to cast from one
09:46 - completely different class to another
09:47 - and you can't do that this just works
09:50 - because these numerical types are all or
09:53 - - storing numbers but you can't cast
09:55 - like from a you know a string to our I
09:59 - don't know to our just nipple you can't
10:03 - customize string to an integer that's a
10:05 - good example because often you've got an
10:09 - integer and you want to get string from
10:10 - it and you can't just podcast in there
10:13 - because these are two completely
10:14 - different objects you can't cuss one
10:16 - from one to the other if you want to
10:18 - convert from an integer to a string you
10:20 - have to use two string and if you want
10:22 - to convert from string to an integer
10:23 - you'll have to use integer dot Parsons
10:27 - or something like that so that's it for
10:30 - this tutorial and in the next tutorial
10:32 - we're going to look at op casting and
10:34 - down casting so we're going to build on
10:36 - this luckily a really important topic of
10:38 - under what circumstances you can
10:41 - actually convert from one object to a
10:44 - different kind of object because there
10:45 - are some circumstances where you can do
10:48 - that as long as there's a child parent
10:50 - relationship there so that's it this
10:52 - tutorial I hope that's useful join me
10:55 - again next time
11:07 - Oh

Cleaned transcript:

hello this is char from cave or programmer calm and this is they fairly small but nevertheless very important tutorial on casting in Java so in Java is a bunch of numerical types for example we've got ins and which let's say we have a an integer value we can use in to store it and it's also like there's a short version of int which takes a less memory I think intersexual 32 bytes and short is I think 16 sorry 32 bits for int and shorter is 16 bits I think that's right or 2 bytes so that's a short short volume equals 55 or something and as also there's also like a bytes type and bike can only store up to from it's like from minus 128 to Plus 127 so total of 256 different values if we include the 0 so let's say here my value equals 20 or something and there's also like a long so long value equals and I could be a really really long number and of course we've got floating point values we've got float floats value this can have a point in it equals you know something like this and we've got a double value that has even greater precision I can remember there how many maximum values gets off the top of my head but you can easily look them up and say double value equals something like this and if you do want to know that kind of maximum anyone many of those oh by the way this something I wanted to show you here which is that if you type a value at a point without points the here a decimal point it has a double type somehow by default so when I try to assign a value with a floating point to a float value I get an error and it's going to say cannot convert from double to float and one really simple way of dealing with that is just to put an F on the end of it and that turns it into a float value so it's useful to know and if you wanted to know that maximum minimum values these types you can look in the non primitive versions of these for example double this is the class version that has various methods and that's got like a max value on it and for example so or I could say you know like bite max value let's just do it suss out on that so you can see this out and if I run that 127 now you can actually cast from one kind of numerical value to another so if you have one kind of numerical value and you want to store it in a variable of a different type you can use a cast so I could say for example if I say like int value here equals long value like that and I save it then get an error here because the same kind of convert from long to int but in fact I often can convert for a long twin because if I look at this value here that would fit in an integer type it's a relatively small value so I can say here int you put Apollo the type that you want to cast to this type in round brackets before the title your customer from and now it accepts it and it's fine and if I do it's this out on int value and it's just run this program here see it's still going to write value in because this this value fits comfortably in an int you can also cast from floating point values to win values or the other weight so let's have a now going in value there let's say double value equals int volume and let's save that in fact it's letting me do that without even a cast but what's going to happen is it's just gonna of course it's just going to put point naught on the end of it so it's converting comfortably to a double value and you don't need a caster because you're not in essentially not changing the value you're not chopping anything off or because here this potential complication that we'll look at in a second well if I had a long value it was too big to fit into an integer type because long is I think it's 64 bits and in 32 bits I think then you could potentially have problems so this kind of casting is a way of saying look I really know what I'm doing I definitely want to do this change it to an int whereas with this there's less potential for stuff to go wrong so job will just do it for you you don't need a cast and we can convert the other way as well let's say I want to say supposing I have a double value at set double value back to in fact let's use that float plot you there so I've got float said two eight eight three four point three if I say int value equals float value now there's a potential for something to go wrong well not go wrong all the things we're going to lose this stuff after the floating point point three exchange it to actually on AIDS because up for a reason I'll explain in a minute and Java wants to know that you really do want to chop off the end of this here so you have to cast it and I can put Castilla I can cast from the float value to the in value and then it still sits out here on int value and if I run that then I've got eighty eight eight thousand eight hundred eight hundred and thirtyfour and notice this is not rounding off it's literally chopped the end of it off if you wanted to round it you'd have to use math dot round but so if you just do a cast it's just going to cut the end off and now like one last thing I want to say in this tutorial which is that you have to be really careful trying to stuff an oversized type into a type it's not going off memory to hold it so bite value as we've seen the maximum value of a bite is 127 and let's let's try to like and let's say bite pile you here and let's try to cast have a value to abide that's too big so let's say 128 and I can literally type a number though as well it doesn't have to be a variable you can cast a number to an appropriate type and so an alternative syntax here for example would be the say float float value to 2 equals 99.3 so that's a double value so need a cast instead of putting an F on the end I could just put float here that will work just as well and now here so 127 is a maximum value of our bytes I'm trying to pull hundred 28 into it and it's just two sits out here and then what happens so by its value there and if I run that it's going to minus 128 which is the minimum value of it so it's kind of like it is wrapped around so like that extra one has pushed it around the circle and it's gone kind of round the circle all the way to the minimum value that it can have so you have to be really careful and when you're typing this when you're typing a cast you're casting from one type to another you're implicitly doing something that could go wrong and you have to really carefully think is this going to work have I got enough memory in a tight line cast to to store the value that I'm casting from otherwise you'll get very strange results let's just put them the following won't work well it will work but as we expect it to Lannisport comment that 1 to 8 is too big for a bite ok and sometimes beginners in programming will try to cast from one completely different class to another and you can't do that this just works because these numerical types are all or storing numbers but you can't cast like from a you know a string to our I don't know to our just nipple you can't customize string to an integer that's a good example because often you've got an integer and you want to get string from it and you can't just podcast in there because these are two completely different objects you can't cuss one from one to the other if you want to convert from an integer to a string you have to use two string and if you want to convert from string to an integer you'll have to use integer dot Parsons or something like that so that's it for this tutorial and in the next tutorial we're going to look at op casting and down casting so we're going to build on this luckily a really important topic of under what circumstances you can actually convert from one object to a different kind of object because there are some circumstances where you can do that as long as there's a child parent relationship there so that's it this tutorial I hope that's useful join me again next time Oh
