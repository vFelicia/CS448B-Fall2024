With timestamps:

00:18 - hello this is John from cave of
00:21 - programming calm in this tutorial we're
00:22 - going to take a bit of a deeper look at
00:25 - the size of operator which we've seen
00:27 - before but we're going to see like an
00:30 - interesting use of that so just just to
00:32 - remind you if we create a variable like
00:35 - this let's say int value equals 34 we
00:40 - can do this see out size of volume
00:45 - handler and if we run this program might
00:50 - have to build it let's go to project
00:53 - build project and let's run that so we
01:00 - get the number of bytes and each byte is
01:02 - eight bits remember that this this
01:05 - variable takes up and we can also do
01:08 - sizeof int so let's try that and that
01:12 - does exactly the same gives us the size
01:13 - of this type this is just a unused
01:17 - variable warning kick so I'm not using
01:18 - value now in my program size of is
01:21 - actually an operator like the put to
01:24 - operator or like plus symbol
01:27 - it looks like a method sorry a function
01:31 - call or a method yeah it looks like a
01:33 - function call and we're going to see
01:34 - functions and subroutines later on but
01:37 - it's nice actually an operator so one
01:42 - one thing that I wanted to show you here
01:43 - was that you can use that this with a
01:45 - raise let's say we've got an array and
01:48 - let's get rid of this and let's say int
01:53 - values equals let's just have an array
01:57 - of values here so I'm going to say and
02:02 - put some values in status semicolon
02:04 - first and just some random values we can
02:09 - iterate over that with a for loop so we
02:11 - can say int I equals naught I less than
02:15 - this this is going to be less than four
02:18 - because there are four values here I
02:20 - plus plus
02:22 - and we can say see out and values and I
02:31 - let's just output an endless there or in
02:36 - fact we could just pop flush and let's
02:40 - just have some space there to get it all
02:43 - on one line and I put an end ler after
02:47 - that just to well just to flush the
02:50 - buffer but actually it's not necessary
02:52 - here because when the program ends that
02:55 - buffers going to be flushed anyway I
02:57 - imagine so
02:59 - got some problem we flushed her I don't
03:02 - quite know what I did wrong I've done
03:04 - something wrong let's just say this and
03:07 - try building it have I done something
03:10 - really stupid
03:11 - oh it's complaining that scale object
03:16 - values requires one element in
03:17 - initializer I forgot to put the brackets
03:20 - on your right here very silly there we
03:22 - go sorry about that so let's go to
03:26 - project build project and yes now we can
03:30 - run this so we get four seven three four
03:34 - now instead of saying less than I we can
03:37 - use size off here to find out how many
03:40 - elements are in the array
03:41 - let's do size of values and so size size
03:47 - of values endler
03:53 - now if we if we run this then we get
03:58 - sixteen so this takes up sixteen bytes
04:01 - because each int is four bytes and we've
04:04 - got four inch and we can also do see out
04:07 - size of int because we've got into in
04:13 - our array so we're interested in that
04:14 - and if we run this we see that we get of
04:17 - course four as we just seen
04:19 - so if we divide the total size of the
04:23 - array by the size of the elements that
04:25 - are in it then we're going to get the
04:27 - number of elements in the array so
04:28 - instead of having four here we could say
04:31 - size of values divided by size of int so
04:40 - divided by this for its lifetime in C++
04:43 - and most programming languages and if we
04:46 - run that now then it works exactly as
04:50 - before I'm sure what the warning is here
04:53 - by saying we're comparing signed an
04:57 - unsigned integer expressions that's
05:00 - that's because sizeof is actually
05:03 - returning a eight unsigned int and here
05:08 - we're comparing this this is a signed in
05:11 - by default with an unsigned value here
05:14 - so what we can do to fix that warning is
05:16 - just put in unsigned in there and if we
05:20 - build that now the warning will go away
05:23 - and it works just as before so yeah not
05:29 - all compilers give you that warning that
05:32 - there's nothing really wrong with
05:33 - comparing assigned an unsigned value as
05:37 - far as I can see but I got like warning
05:40 - here so we fixed it unsigned your recall
05:43 - means just that the value can't be
05:45 - negative so an unsigned int can't be
05:47 - negative
05:49 - okay that's it for this tutorial and
05:51 - it's worth practicing this just declare
05:54 - an array if you really want to challenge
05:56 - make it a 2d array and instead of
05:59 - hard-coding
06:01 - the actual index here the actual sorry
06:06 - the number of elements in the array
06:08 - use size off to get it in your loops so
06:11 - 2d array you can do this as well but
06:13 - it's going to be a bit challenging you
06:15 - can have a goal app if you're feeling
06:17 - ambitious otherwise try a 1d array so
06:20 - that's it for this tutorial and until
06:21 - next time happy coding
06:31 - you
06:46 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to take a bit of a deeper look at the size of operator which we've seen before but we're going to see like an interesting use of that so just just to remind you if we create a variable like this let's say int value equals 34 we can do this see out size of volume handler and if we run this program might have to build it let's go to project build project and let's run that so we get the number of bytes and each byte is eight bits remember that this this variable takes up and we can also do sizeof int so let's try that and that does exactly the same gives us the size of this type this is just a unused variable warning kick so I'm not using value now in my program size of is actually an operator like the put to operator or like plus symbol it looks like a method sorry a function call or a method yeah it looks like a function call and we're going to see functions and subroutines later on but it's nice actually an operator so one one thing that I wanted to show you here was that you can use that this with a raise let's say we've got an array and let's get rid of this and let's say int values equals let's just have an array of values here so I'm going to say and put some values in status semicolon first and just some random values we can iterate over that with a for loop so we can say int I equals naught I less than this this is going to be less than four because there are four values here I plus plus and we can say see out and values and I let's just output an endless there or in fact we could just pop flush and let's just have some space there to get it all on one line and I put an end ler after that just to well just to flush the buffer but actually it's not necessary here because when the program ends that buffers going to be flushed anyway I imagine so got some problem we flushed her I don't quite know what I did wrong I've done something wrong let's just say this and try building it have I done something really stupid oh it's complaining that scale object values requires one element in initializer I forgot to put the brackets on your right here very silly there we go sorry about that so let's go to project build project and yes now we can run this so we get four seven three four now instead of saying less than I we can use size off here to find out how many elements are in the array let's do size of values and so size size of values endler now if we if we run this then we get sixteen so this takes up sixteen bytes because each int is four bytes and we've got four inch and we can also do see out size of int because we've got into in our array so we're interested in that and if we run this we see that we get of course four as we just seen so if we divide the total size of the array by the size of the elements that are in it then we're going to get the number of elements in the array so instead of having four here we could say size of values divided by size of int so divided by this for its lifetime in C++ and most programming languages and if we run that now then it works exactly as before I'm sure what the warning is here by saying we're comparing signed an unsigned integer expressions that's that's because sizeof is actually returning a eight unsigned int and here we're comparing this this is a signed in by default with an unsigned value here so what we can do to fix that warning is just put in unsigned in there and if we build that now the warning will go away and it works just as before so yeah not all compilers give you that warning that there's nothing really wrong with comparing assigned an unsigned value as far as I can see but I got like warning here so we fixed it unsigned your recall means just that the value can't be negative so an unsigned int can't be negative okay that's it for this tutorial and it's worth practicing this just declare an array if you really want to challenge make it a 2d array and instead of hardcoding the actual index here the actual sorry the number of elements in the array use size off to get it in your loops so 2d array you can do this as well but it's going to be a bit challenging you can have a goal app if you're feeling ambitious otherwise try a 1d array so that's it for this tutorial and until next time happy coding you you
