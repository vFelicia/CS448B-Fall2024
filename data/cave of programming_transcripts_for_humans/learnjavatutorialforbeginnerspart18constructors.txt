With timestamps:

00:04 - [Music]
00:18 - hello this is John from cave of
00:20 - programming comm and this is a tutorial
00:22 - on constructors in Java so I've got the
00:26 - main method set up here already and I'm
00:29 - gonna create a gonna add a new class
00:31 - here in the same file just to keep
00:34 - things simple which I will call machine
00:38 - now a constructor is a special method
00:41 - which is run every time you create an
00:44 - instance of your class so down here
00:47 - let's go ahead and I'll create an
00:49 - instance of this class I'll say I'll
00:52 - create a variable to refer to it and
00:54 - I'll set it equal to a new machine like
00:58 - this and it's their new machine bit here
01:00 - that's the important bit because that's
01:02 - where the new instance is actually
01:05 - created of this class that's where we
01:07 - actually create an object so now to
01:11 - machine I'm going to add a method I'll
01:13 - make a public method and it's not going
01:16 - to have a return type so usually a
01:19 - method has to have a return type even if
01:21 - it's void but a constructor uniquely
01:25 - doesn't have any return type and the
01:28 - name of your constructor always has to
01:30 - be the same as the name of your class so
01:33 - this is going to be a machine in this
01:34 - case normally a method has a lowercase
01:39 - letter at the start or because your
01:41 - constructor has tired the same name as
01:44 - your class it's of course going to be an
01:46 - uppercase letter so I'll address this
01:50 - out here just so that we can see it's
01:52 - doing something construct our running
01:57 - like this and now I can go ahead and run
02:03 - this program so if I run that we get
02:08 - this output here so just the fact I'm
02:10 - doing new machine is causing the
02:13 - constructor to run automatically which
02:15 - is the whole point of it now something
02:19 - that you often use constructors for is
02:22 - initialization of instance variables for
02:25 - example so let's say we've got a private
02:28 - string name for my machine
02:31 - I could use the constructor to set a
02:34 - default value for that name so I could
02:37 - say name equals Arne for example and
02:44 - because this constructor runs every time
02:47 - an object is created I know that my
02:49 - objects will all have and will all have
02:52 - this initialization running so they'll
02:53 - all have name initially set to Barney in
02:56 - this case and just to underline the fact
03:00 - that it's Israeli the new machine bit
03:03 - Israeli there knew that cause the
03:06 - constructor I I don't even need usually
03:09 - when you do new you create a variable
03:12 - and set it equal to the object that's
03:14 - returned but you could just type new and
03:17 - your class name by itself with round
03:19 - brackets after it and that in itself
03:21 - will create a new object and if I run
03:24 - this you can see that it will run the
03:25 - constructor a second time here so this
03:29 - is the important bit for invoking the
03:31 - constructor one thing that you often
03:36 - want to do is to have multiple
03:38 - constructors because just as a method
03:41 - can take parameters so can a constructor
03:44 - and in the same way that actually you
03:47 - can have you can have different methods
03:50 - with the same name and as long as you've
03:53 - got different parameters to the method
03:55 - then it's okay and Java will figure out
03:58 - which method to call when you actually
04:01 - call it so you could think of this here
04:03 - as being a bit like a call to the
04:05 - constructor and you see we've got a
04:07 - place here where we could put some
04:08 - parameters and this is looking for a
04:12 - constructor that accepts no parameters
04:14 - so it's running this constructor but
04:16 - let's go ahead and add a constructor
04:19 - that accepts a string parameter like
04:22 - this and this could work just like a set
04:27 - method I could say this dot name equals
04:29 - name so this dot name means the instance
04:34 - variable up here and name by itself
04:36 - means the local variable here so I'm
04:38 - just setting this setting this equal to
04:42 - what we pass in
04:44 - and to pass something in but first
04:46 - actually I'll add a sisal so you can see
04:49 - it running I'll say second constructor
04:52 - running and if I just run that as it is
04:57 - I'm only going to get the first
04:58 - constructor which is being run here but
05:02 - let's add a call to the second
05:03 - constructor I'll say machine machine 2
05:06 - equals new machine and this time I'll
05:09 - pass in a string which I'll say corta
05:11 - Bertie so if I run this it's gonna look
05:15 - for the constructor that accepts a
05:17 - string and it's gonna find it here and
05:19 - it's gonna run this one so when I run
05:21 - that so this code runs my first
05:23 - constructor and this code here where I
05:27 - pass in the string runs the second
05:28 - constructor because that accepts the
05:30 - string that's just bunk in one more for
05:33 - the fun of it supposing I get this
05:36 - private int code I have a so every
05:39 - machine has a name and a code
05:40 - I could have yet another constructor
05:43 - that accepts also a name but it also
05:48 - accepts a code and I can say this stop
05:52 - name equals name just like an asset
05:55 - method which we've covered previously
05:57 - and this stop code equals code and to
06:00 - invoke that selling machine 3 calls new
06:06 - machine and I'm gonna pass in a name
06:12 - chorky let's say and I'll give up code 7
06:17 - so and see that running sis out what I
06:22 - think I have my laptop think about think
06:28 - what have we call it a con member okay
06:31 - so I'll say third construct running so
06:37 - if I run that then nope we're on the
06:39 - third constructor just because of this
06:41 - line here so you can see that John was
06:43 - automatically selecting the right
06:45 - constructor depending on the parameter
06:47 - list probably a final thing I should
06:52 - mention about constructors
06:54 - sometimes you want to call a constructor
06:56 - from within another constructor so one
06:59 - possibility is that all the more complex
07:03 - constructors could call the simpler ones
07:05 - like for example maybe I've got some
07:09 - code in here some kind of initialization
07:11 - that I want to always run in every
07:13 - constructor and I want to always call
07:15 - this constructor from within the more
07:17 - complex ones or another possibility
07:21 - which I'll demonstrate here is so you
07:24 - might want to use the most complex
07:26 - constructor in all of the simpler ones
07:28 - so let's say for example here here I'm
07:31 - initializing the name to Arnie and I
07:34 - probably also want to initialize the
07:36 - code to some default value and you'd
07:39 - think that you could do that by writing
07:41 - machine Arnie and let's give it a
07:45 - default code of zero so what I'm
07:50 - attempting to do that is to invoke this
07:53 - constructor here which has the main
07:55 - machine so I'm calling it like a method
07:57 - but that doesn't actually work and the
07:59 - one change you have to well there's two
08:02 - changes you have to make to get it to
08:03 - work firstly change change the
08:06 - constructor name to this and I wouldn't
08:10 - worry too much about that that's the
08:11 - second use of this we've seen in this
08:13 - series of tutorials the other one is
08:15 - this thing here to differentiate between
08:16 - an instance variable and a local
08:19 - variable here I'm using this to call a
08:22 - constructor and that's all there is to
08:24 - it they might look complex because it's
08:26 - a strange word to use but it just means
08:29 - call the constructor that accepts these
08:31 - particular parameters and if you wanted
08:33 - to call the default constructor with no
08:36 - parameters it would look like that you
08:38 - just have no parameters there after it
08:42 - but here I want to call the one with two
08:45 - parameters and didn't the other thing I
08:47 - need to do to get this to work is a call
08:49 - to a constructor needs to be the first
08:51 - line in the constructor way of calling
08:54 - it so I need to put it right at the top
08:56 - there and I could have that in the
08:58 - second constructors what constructor as
09:00 - well and say this and this case i liaise
09:02 - with name again I'll give it a default
09:04 - code of zero
09:06 - and then this third constructor of
09:08 - course isn't going to call isn't gonna
09:09 - do this because that will be calling
09:10 - itself which was be a infinite recursive
09:13 - loop which wouldn't be good so that all
09:16 - works and this this might look a bit
09:19 - puzzling because you have to bear in
09:20 - mind that let's say for example you just
09:24 - call the first constructor in your code
09:26 - by running a new machine and what's
09:29 - going to happen is it's gonna go
09:31 - straight into this code here and the
09:33 - first line of that is calling their
09:35 - third constructor here so it says third
09:37 - constructor running down here and then
09:41 - after that it gets on to its own code
09:43 - and says constructor running like that
09:47 - so that's that constructors and in the
09:54 - next tutorial we're going to cover
09:55 - probably static variables and static
09:58 - methods so join me again for that and
10:02 - until then happy coding
10:08 - [Music]

Cleaned transcript:

hello this is John from cave of programming comm and this is a tutorial on constructors in Java so I've got the main method set up here already and I'm gonna create a gonna add a new class here in the same file just to keep things simple which I will call machine now a constructor is a special method which is run every time you create an instance of your class so down here let's go ahead and I'll create an instance of this class I'll say I'll create a variable to refer to it and I'll set it equal to a new machine like this and it's their new machine bit here that's the important bit because that's where the new instance is actually created of this class that's where we actually create an object so now to machine I'm going to add a method I'll make a public method and it's not going to have a return type so usually a method has to have a return type even if it's void but a constructor uniquely doesn't have any return type and the name of your constructor always has to be the same as the name of your class so this is going to be a machine in this case normally a method has a lowercase letter at the start or because your constructor has tired the same name as your class it's of course going to be an uppercase letter so I'll address this out here just so that we can see it's doing something construct our running like this and now I can go ahead and run this program so if I run that we get this output here so just the fact I'm doing new machine is causing the constructor to run automatically which is the whole point of it now something that you often use constructors for is initialization of instance variables for example so let's say we've got a private string name for my machine I could use the constructor to set a default value for that name so I could say name equals Arne for example and because this constructor runs every time an object is created I know that my objects will all have and will all have this initialization running so they'll all have name initially set to Barney in this case and just to underline the fact that it's Israeli the new machine bit Israeli there knew that cause the constructor I I don't even need usually when you do new you create a variable and set it equal to the object that's returned but you could just type new and your class name by itself with round brackets after it and that in itself will create a new object and if I run this you can see that it will run the constructor a second time here so this is the important bit for invoking the constructor one thing that you often want to do is to have multiple constructors because just as a method can take parameters so can a constructor and in the same way that actually you can have you can have different methods with the same name and as long as you've got different parameters to the method then it's okay and Java will figure out which method to call when you actually call it so you could think of this here as being a bit like a call to the constructor and you see we've got a place here where we could put some parameters and this is looking for a constructor that accepts no parameters so it's running this constructor but let's go ahead and add a constructor that accepts a string parameter like this and this could work just like a set method I could say this dot name equals name so this dot name means the instance variable up here and name by itself means the local variable here so I'm just setting this setting this equal to what we pass in and to pass something in but first actually I'll add a sisal so you can see it running I'll say second constructor running and if I just run that as it is I'm only going to get the first constructor which is being run here but let's add a call to the second constructor I'll say machine machine 2 equals new machine and this time I'll pass in a string which I'll say corta Bertie so if I run this it's gonna look for the constructor that accepts a string and it's gonna find it here and it's gonna run this one so when I run that so this code runs my first constructor and this code here where I pass in the string runs the second constructor because that accepts the string that's just bunk in one more for the fun of it supposing I get this private int code I have a so every machine has a name and a code I could have yet another constructor that accepts also a name but it also accepts a code and I can say this stop name equals name just like an asset method which we've covered previously and this stop code equals code and to invoke that selling machine 3 calls new machine and I'm gonna pass in a name chorky let's say and I'll give up code 7 so and see that running sis out what I think I have my laptop think about think what have we call it a con member okay so I'll say third construct running so if I run that then nope we're on the third constructor just because of this line here so you can see that John was automatically selecting the right constructor depending on the parameter list probably a final thing I should mention about constructors sometimes you want to call a constructor from within another constructor so one possibility is that all the more complex constructors could call the simpler ones like for example maybe I've got some code in here some kind of initialization that I want to always run in every constructor and I want to always call this constructor from within the more complex ones or another possibility which I'll demonstrate here is so you might want to use the most complex constructor in all of the simpler ones so let's say for example here here I'm initializing the name to Arnie and I probably also want to initialize the code to some default value and you'd think that you could do that by writing machine Arnie and let's give it a default code of zero so what I'm attempting to do that is to invoke this constructor here which has the main machine so I'm calling it like a method but that doesn't actually work and the one change you have to well there's two changes you have to make to get it to work firstly change change the constructor name to this and I wouldn't worry too much about that that's the second use of this we've seen in this series of tutorials the other one is this thing here to differentiate between an instance variable and a local variable here I'm using this to call a constructor and that's all there is to it they might look complex because it's a strange word to use but it just means call the constructor that accepts these particular parameters and if you wanted to call the default constructor with no parameters it would look like that you just have no parameters there after it but here I want to call the one with two parameters and didn't the other thing I need to do to get this to work is a call to a constructor needs to be the first line in the constructor way of calling it so I need to put it right at the top there and I could have that in the second constructors what constructor as well and say this and this case i liaise with name again I'll give it a default code of zero and then this third constructor of course isn't going to call isn't gonna do this because that will be calling itself which was be a infinite recursive loop which wouldn't be good so that all works and this this might look a bit puzzling because you have to bear in mind that let's say for example you just call the first constructor in your code by running a new machine and what's going to happen is it's gonna go straight into this code here and the first line of that is calling their third constructor here so it says third constructor running down here and then after that it gets on to its own code and says constructor running like that so that's that constructors and in the next tutorial we're going to cover probably static variables and static methods so join me again for that and until then happy coding
