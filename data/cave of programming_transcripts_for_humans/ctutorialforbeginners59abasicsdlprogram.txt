With timestamps:

00:17 - hello this is John from kale programming
00:21 - comm in this tutorial we're going to set
00:23 - up a project and uses the libraries that
00:25 - lie that I talked about in the last
00:29 - video which hope hopefully you've now
00:31 - acquired one way or the other and if
00:33 - that was the struggle I do sympathize
00:35 - because sometimes it is if you're using
00:37 - Linux especially on the Mac but
00:40 - hopefully you've got up and sorted out
00:42 - so because I'm on the Mac here I'm going
00:44 - to be using my my dot a library and I'm
00:51 - going to be using the header files I
00:52 - downloaded so I'm using Eclipse as well
00:55 - and is this is going to be slightly
00:56 - different if you're using code blobs or
00:58 - visual C++ or another IDE but all C++
01:03 - IDs are the same basic ideas because
01:05 - it's still C++ after all it's just that
01:07 - you might have to Google for
01:08 - instructions on how to do this for your
01:10 - platform let's create a new project so
01:13 - I'm going to go to file a new C++
01:16 - project I've actually got a choice of
01:18 - compilers here I've never used this
01:20 - cross compiler sounds good but I'm
01:22 - staying away from it for the moment
01:24 - going to go to the Mac compiler and a
01:26 - hello world C++ project okay and let's
01:31 - call this SDL basic or something I would
01:37 - call STL test but I've already created
01:39 - one of those for my own purposes so
01:41 - let's call it STL basic click finish now
01:51 - yeah let's let's add the path paths to
01:55 - the library and header files first so
01:57 - I'm going to right click project here
01:59 - and go to properties and I'm going to go
02:02 - to c++ build let's expand that and at
02:06 - the top here so again this could be
02:08 - different in different versions of
02:10 - eclipse and it'll be different for a
02:11 - different IDE but once you've seen how
02:14 - this works here you can apply this to
02:15 - any IDE but you might need to do a
02:19 - little bit of googling so here I can
02:21 - configure my debug release
02:25 - targets and I can also set things all
02:28 - configurations so I'm going to change to
02:30 - all configurations here because I want
02:32 - this to work whether I'm compiling a
02:34 - debug or a release version of the
02:37 - program the difference is the debug
02:39 - version contains extra symbols which
02:42 - slow down the program a lot but I
02:44 - helpful if you're going to use the
02:46 - debugger which we're not in this
02:48 - tutorial but but you could do so so we
02:55 - go to all configurations here and I'm
02:56 - going to go to settings and I need to
03:00 - tell eclipse which is in turn is going
03:03 - to inform my program well it's going to
03:06 - mean for my C++ compiler where to find
03:09 - the header files so let's go to includes
03:11 - here down here and I need to add an
03:15 - include path and the include path is it
03:18 - is going to be the directory where I put
03:20 - my header files so on for me here
03:24 - I'm using the Mac and I use this mac
03:27 - ports thing to download this and it put
03:30 - my header files add to Google for to
03:32 - find out where it actually put the
03:33 - things but it put them in let's do it
03:37 - Asturia
03:38 - it put them in user local include so
03:42 - let's go to CD a directory check though
03:46 - really there SDL to here are my header
03:52 - files and so I need to put this
03:55 - directory I need to tell Eclipse here to
04:00 - use that directory to search for header
04:02 - files let's go to include paths click
04:06 - the green plus sign here add that
04:08 - directory in like that now I need to
04:11 - tell Eclipse were to find the SDL where
04:17 - to find STL libraries so let's go to
04:20 - libraries here and I need to add the
04:23 - directory containing the libraries to
04:25 - the library search path here it says -
04:28 - elder because it's going to supply a
04:30 - help - elf flag to the compiler in this
04:34 - particular case for this
04:35 - get a set up which will tell it what it
04:39 - will add an extra library path for it to
04:41 - search so let's go back and check where
04:45 - my libraries are and that they are in
04:48 - use a local Lib so this directory here
04:51 - if I go to that and then the libraries
04:58 - that the library that I need is Lib STL
05:02 - dot a and yeah I think that yeah that's
05:06 - right and to run my program is going to
05:09 - need live STL die Lib but somehow my
05:14 - system it finds that anyway it's
05:16 - possible that you may you may need to
05:18 - copy or des Eaux or that DLL file
05:21 - I don't know depending on your platform
05:23 - into your programs working directory but
05:27 - or into a standard directory on your
05:30 - system like Windows system or something
05:33 - like that but on my system it found this
05:36 - die lib automatically when I when I run
05:39 - the program so we don't need to think
05:42 - about that for the moment so I need to
05:47 - tell eclipse to search this directory
05:50 - for libraries let's copy that and I'm
05:53 - going to click library search path going
05:56 - to click the green plus here and add in
05:58 - that directory now I need to tell it
06:01 - what library to link with and I need to
06:03 - tell it to link with this live STL to
06:06 - dot a library on Windows it will be STL
06:09 - to Don Lib now although this is called
06:12 - Lib SDR to dieter's this convention that
06:15 - you don't mention the lip when you're
06:17 - specifying libraries and you don't
06:18 - mention the dot a you just mention STL -
06:21 - I didn't I'm not sure how this works on
06:24 - Windows probably you just have to tell
06:27 - it to lean with STL - you might have to
06:29 - put STR to Lib so you can even try both
06:33 - and see which one works I'm not
06:35 - completely sure it's a while since I've
06:37 - used Windows but I'm going to copy that
06:38 - STL - bracha just type it click the
06:42 - green plus by libraries and put SDL - in
06:44 - there so like I say on Windows I think
06:47 - you need to specify STL
06:49 - but in part possibly it could be STL to
06:52 - lib I'm not totally sure so but one of
06:57 - those is going to work hopefully
06:59 - so now let's click apply in let's click
07:02 - okay so now my program knows where to
07:06 - find the includes and knows where to
07:08 - find the libraries let's just build this
07:10 - project and see if we get any areas at
07:12 - this stage yet so that this is fine and
07:15 - we can run it it's just a hello world
07:16 - program that runs on the console right
07:18 - now now let's add an include up here
07:22 - let's say include and I use the angle
07:27 - brackets because I won't wanted to look
07:29 - in a standard position for my header
07:33 - file I'm going to say include SD L 2 dot
07:36 - H and that file STR 2 dot H must be
07:40 - present in that include directory that
07:42 - you just specified let's save this I
07:45 - think I'm wrong there I think it's STL
07:47 - let's let's actually just check here so
07:52 - let's go to use a local include so
07:57 - although I downloaded STL SDL - yeah
08:02 - it's actually just SD l dot H okay
08:05 - that's why I've got that warning symbol
08:07 - there which is very handy okay so we've
08:10 - got SD l dot H included now that should
08:15 - also work you should be able to build it
08:17 - and run it if you've got that the header
08:21 - the include directory specified
08:23 - correctly now let's try calling a couple
08:25 - of STL functions just to check that it's
08:28 - work so I've got a little program that I
08:30 - already set up and I'm gonna just call
08:34 - this SDLC knit and SDL quit so I've got
08:39 - ice DL in it we're telling it with this
08:41 - constant which is in that STL header
08:43 - file to just initialize graphics mode so
08:47 - let's let's type this out let's say if
08:52 - STL be knit
08:56 - and we've got STL in its graphics cello
09:03 - this sorry STL innit video as you can
09:06 - see I don't remember this well I've done
09:08 - this several times but unless you do
09:10 - stuff tailing day out a while for me
09:12 - anyway it doesn't stick in my head and
09:14 - this this function is going to return a
09:17 - value less than naught if it doesn't
09:20 - succeed that's why we say if SDLC nets
09:23 - brackets STL got a spell wrong in it
09:26 - video is less than naught then we need
09:33 - to return we can return as say one from
09:39 - our main subroutine here that's that's a
09:42 - good thing to do because usually you
09:44 - return 0 to indicate success for a C++
09:47 - program and anything else is considered
09:50 - an error code but when we're going to be
09:54 - running this program by hand anyway
09:55 - we're not going to it's not like we'll
09:56 - have some system that will run this
09:58 - program and check its error return code
10:00 - so let's put in the SC out and STL in it
10:05 - failed endler
10:12 - and after that let's put if the if
10:15 - doesn't execute and we don't return here
10:18 - we can put STL in it succeeded and after
10:25 - that to shut down the STL system we call
10:28 - STL on the score quit pay close
10:33 - attention to the capitalization so we've
10:35 - got capital STL on the score and capital
10:39 - letter at the beginning of the
10:42 - subsequent word or the rest of its
10:44 - lowercase so yeah there's no fixed
10:47 - condition about how to separate words or
10:50 - break break up class names in C++ and
10:52 - they decide its prefix tough with STL
10:54 - and an underscore which is fair enough
10:56 - and then capitalize the first letter
10:58 - here so we should be able to build this
11:02 - program and run it and if you're using a
11:05 - different graphics API like Allegro or
11:07 - something you should be able to do
11:09 - something similar you should be able to
11:11 - initialize the system somehow and and
11:16 - then D initialize it with some quick
11:18 - type function and you can easily find
11:20 - tutorials for example - if I set for
11:22 - Allegro tutorial I haven't done this at
11:27 - least for many years but stuff is going
11:29 - to come up you're going to find stuff
11:31 - that will show you how to create a basic
11:35 - Allegro program for Allegro we've got
11:38 - apparently Allegro in it and you can
11:41 - bear that we've also got some sort of
11:43 - yes and we've got some sort of function
11:46 - that closes down Allegro so it's the
11:48 - same for pretty much any graphics
11:50 - library you just need to get whatever
11:52 - the most minimal program you absolutely
11:55 - can run you need to get that running and
12:00 - building basically at this stage so this
12:03 - is a very very minimal SDL program it
12:05 - doesn't nothing at all but is going to
12:07 - test whether we can successfully link
12:09 - with the right library let's try
12:11 - building that so we build it and we
12:13 - should see any errors if you do see
12:15 - errors then something's gone wrong
12:18 - you're not linking with the right
12:19 - library or you've specified the wrong
12:22 - path
12:22 - your library or something like that so
12:25 - you have to get past this stage if you
12:27 - see any areas that are really peculiar
12:28 - that you totally don't understand
12:30 - absolutely put them in Google and you
12:34 - could also add STL in there for example
12:37 - and see who else has got those errors
12:39 - because someone will have so you're
12:41 - aiming at this stage to get a buildable
12:43 - program that calls you know at least one
12:46 - or two STL functions now let's run it
12:50 - and it should do anything you should
12:51 - just quit
12:52 - so it says STL succeeded we expect to
12:54 - see that success message if if we get in
12:59 - it failed here you could try getting the
13:03 - return value from this function and then
13:05 - doing some googling to find out what
13:07 - that means usually this this won't fail
13:13 - if it does I'm afraid you're on your own
13:17 - I don't know why it would fail and and
13:21 - if it does you need to get into Google
13:23 - I'm afraid and do some googling you know
13:27 - look for STL in it failed check the
13:30 - actual error code from this get the
13:31 - actual integer that it's returning print
13:34 - it out and try to Google for that code
13:38 - you know STL in it
13:40 - error code and look for what it actually
13:42 - means if you run the program and you get
13:46 - a message about some dynamic library not
13:49 - being found then somehow you need to
13:52 - make sure that your program can load the
13:54 - dynamic libraries it needs to run so on
13:57 - Windows you could try putting the dot
13:59 - DLL file in the same folder as your
14:01 - actual program where it's actually
14:02 - compiled - or try putting it in a
14:05 - Windows system directory or something
14:07 - like that on Mac again on the Mac or
14:13 - Linux you probably want to make sure
14:15 - that your dynamic libraries are in some
14:19 - kind of standard folder and if you still
14:25 - can't get it to work then again it's a
14:27 - question of going to Google and googling
14:29 - for stuff STL dynamic library location
14:31 - or that sort of thing you can on Linux
14:34 - an amount you can also use various tool
14:36 - was to find out what dynamic libraries
14:39 - your program is trying to load from
14:42 - which directories so again if you google
14:44 - out you'll find information about that
14:47 - but you need to get to the point before
14:51 - going on to the next tutorial of running
14:54 - a program like this that English Eliza's
14:55 - in quits your graphics API and can
15:00 - actually display some message to let you
15:03 - know that it has succeeded at least in
15:06 - initializing the system and then you can
15:09 - quit so good good luck with that if it
15:13 - doesn't work straight off then do
15:16 - persist with it because believe me as a
15:18 - C++ program you're going to have to be
15:20 - persistent and you are going to find
15:22 - yourself at some point with C++ googling
15:25 - for information about error messages but
15:28 - it's worth persisting with because these
15:30 - are this is not theoretical physics
15:32 - these these are not property or
15:34 - philosophy this these are not problems
15:35 - that are insoluble whatever problems you
15:38 - get they can be they can't be solved one
15:40 - way or another it's just you have to be
15:42 - persistent enough to figure out how to
15:44 - solve them so don't don't throw up your
15:47 - hands in despair you know usually you
15:50 - can solve programs with an hour or two
15:51 - of googling at the worst in the worst
15:55 - case that ends up being the thing that
15:56 - takes you multiple days and what I
15:58 - usually do that is I try to look at it
16:00 - for like an hour a day or something
16:01 - until I finally solve the problem but
16:04 - those are the worst problems
16:05 - unfortunately and it's a lot more
16:08 - difficult when you're beginning and you
16:10 - haven't got experience to solve problems
16:12 - and I used to sometimes spend a couple
16:14 - of days just trying to fix one bug but I
16:17 - was a bit - in my approach so if
16:21 - you really try hard to be systematic it
16:23 - really really does help a lot so I'll
16:26 - leave you with that and good luck with
16:27 - that I hope you succeed in getting some
16:30 - graphics API that can do pixel access
16:32 - initialized for your system and in the
16:35 - next tutorial we'll look at putting
16:37 - together a basic STL program that
16:41 - actually can put a window on the screen
16:44 - and allow you to quit
16:46 - Graham closed the window so until next
16:49 - time happy coding
16:57 - you

Cleaned transcript:

hello this is John from kale programming comm in this tutorial we're going to set up a project and uses the libraries that lie that I talked about in the last video which hope hopefully you've now acquired one way or the other and if that was the struggle I do sympathize because sometimes it is if you're using Linux especially on the Mac but hopefully you've got up and sorted out so because I'm on the Mac here I'm going to be using my my dot a library and I'm going to be using the header files I downloaded so I'm using Eclipse as well and is this is going to be slightly different if you're using code blobs or visual C++ or another IDE but all C++ IDs are the same basic ideas because it's still C++ after all it's just that you might have to Google for instructions on how to do this for your platform let's create a new project so I'm going to go to file a new C++ project I've actually got a choice of compilers here I've never used this cross compiler sounds good but I'm staying away from it for the moment going to go to the Mac compiler and a hello world C++ project okay and let's call this SDL basic or something I would call STL test but I've already created one of those for my own purposes so let's call it STL basic click finish now yeah let's let's add the path paths to the library and header files first so I'm going to right click project here and go to properties and I'm going to go to c++ build let's expand that and at the top here so again this could be different in different versions of eclipse and it'll be different for a different IDE but once you've seen how this works here you can apply this to any IDE but you might need to do a little bit of googling so here I can configure my debug release targets and I can also set things all configurations so I'm going to change to all configurations here because I want this to work whether I'm compiling a debug or a release version of the program the difference is the debug version contains extra symbols which slow down the program a lot but I helpful if you're going to use the debugger which we're not in this tutorial but but you could do so so we go to all configurations here and I'm going to go to settings and I need to tell eclipse which is in turn is going to inform my program well it's going to mean for my C++ compiler where to find the header files so let's go to includes here down here and I need to add an include path and the include path is it is going to be the directory where I put my header files so on for me here I'm using the Mac and I use this mac ports thing to download this and it put my header files add to Google for to find out where it actually put the things but it put them in let's do it Asturia it put them in user local include so let's go to CD a directory check though really there SDL to here are my header files and so I need to put this directory I need to tell Eclipse here to use that directory to search for header files let's go to include paths click the green plus sign here add that directory in like that now I need to tell Eclipse were to find the SDL where to find STL libraries so let's go to libraries here and I need to add the directory containing the libraries to the library search path here it says elder because it's going to supply a help elf flag to the compiler in this particular case for this get a set up which will tell it what it will add an extra library path for it to search so let's go back and check where my libraries are and that they are in use a local Lib so this directory here if I go to that and then the libraries that the library that I need is Lib STL dot a and yeah I think that yeah that's right and to run my program is going to need live STL die Lib but somehow my system it finds that anyway it's possible that you may you may need to copy or des Eaux or that DLL file I don't know depending on your platform into your programs working directory but or into a standard directory on your system like Windows system or something like that but on my system it found this die lib automatically when I when I run the program so we don't need to think about that for the moment so I need to tell eclipse to search this directory for libraries let's copy that and I'm going to click library search path going to click the green plus here and add in that directory now I need to tell it what library to link with and I need to tell it to link with this live STL to dot a library on Windows it will be STL to Don Lib now although this is called Lib SDR to dieter's this convention that you don't mention the lip when you're specifying libraries and you don't mention the dot a you just mention STL I didn't I'm not sure how this works on Windows probably you just have to tell it to lean with STL you might have to put STR to Lib so you can even try both and see which one works I'm not completely sure it's a while since I've used Windows but I'm going to copy that STL bracha just type it click the green plus by libraries and put SDL in there so like I say on Windows I think you need to specify STL but in part possibly it could be STL to lib I'm not totally sure so but one of those is going to work hopefully so now let's click apply in let's click okay so now my program knows where to find the includes and knows where to find the libraries let's just build this project and see if we get any areas at this stage yet so that this is fine and we can run it it's just a hello world program that runs on the console right now now let's add an include up here let's say include and I use the angle brackets because I won't wanted to look in a standard position for my header file I'm going to say include SD L 2 dot H and that file STR 2 dot H must be present in that include directory that you just specified let's save this I think I'm wrong there I think it's STL let's let's actually just check here so let's go to use a local include so although I downloaded STL SDL yeah it's actually just SD l dot H okay that's why I've got that warning symbol there which is very handy okay so we've got SD l dot H included now that should also work you should be able to build it and run it if you've got that the header the include directory specified correctly now let's try calling a couple of STL functions just to check that it's work so I've got a little program that I already set up and I'm gonna just call this SDLC knit and SDL quit so I've got ice DL in it we're telling it with this constant which is in that STL header file to just initialize graphics mode so let's let's type this out let's say if STL be knit and we've got STL in its graphics cello this sorry STL innit video as you can see I don't remember this well I've done this several times but unless you do stuff tailing day out a while for me anyway it doesn't stick in my head and this this function is going to return a value less than naught if it doesn't succeed that's why we say if SDLC nets brackets STL got a spell wrong in it video is less than naught then we need to return we can return as say one from our main subroutine here that's that's a good thing to do because usually you return 0 to indicate success for a C++ program and anything else is considered an error code but when we're going to be running this program by hand anyway we're not going to it's not like we'll have some system that will run this program and check its error return code so let's put in the SC out and STL in it failed endler and after that let's put if the if doesn't execute and we don't return here we can put STL in it succeeded and after that to shut down the STL system we call STL on the score quit pay close attention to the capitalization so we've got capital STL on the score and capital letter at the beginning of the subsequent word or the rest of its lowercase so yeah there's no fixed condition about how to separate words or break break up class names in C++ and they decide its prefix tough with STL and an underscore which is fair enough and then capitalize the first letter here so we should be able to build this program and run it and if you're using a different graphics API like Allegro or something you should be able to do something similar you should be able to initialize the system somehow and and then D initialize it with some quick type function and you can easily find tutorials for example if I set for Allegro tutorial I haven't done this at least for many years but stuff is going to come up you're going to find stuff that will show you how to create a basic Allegro program for Allegro we've got apparently Allegro in it and you can bear that we've also got some sort of yes and we've got some sort of function that closes down Allegro so it's the same for pretty much any graphics library you just need to get whatever the most minimal program you absolutely can run you need to get that running and building basically at this stage so this is a very very minimal SDL program it doesn't nothing at all but is going to test whether we can successfully link with the right library let's try building that so we build it and we should see any errors if you do see errors then something's gone wrong you're not linking with the right library or you've specified the wrong path your library or something like that so you have to get past this stage if you see any areas that are really peculiar that you totally don't understand absolutely put them in Google and you could also add STL in there for example and see who else has got those errors because someone will have so you're aiming at this stage to get a buildable program that calls you know at least one or two STL functions now let's run it and it should do anything you should just quit so it says STL succeeded we expect to see that success message if if we get in it failed here you could try getting the return value from this function and then doing some googling to find out what that means usually this this won't fail if it does I'm afraid you're on your own I don't know why it would fail and and if it does you need to get into Google I'm afraid and do some googling you know look for STL in it failed check the actual error code from this get the actual integer that it's returning print it out and try to Google for that code you know STL in it error code and look for what it actually means if you run the program and you get a message about some dynamic library not being found then somehow you need to make sure that your program can load the dynamic libraries it needs to run so on Windows you could try putting the dot DLL file in the same folder as your actual program where it's actually compiled or try putting it in a Windows system directory or something like that on Mac again on the Mac or Linux you probably want to make sure that your dynamic libraries are in some kind of standard folder and if you still can't get it to work then again it's a question of going to Google and googling for stuff STL dynamic library location or that sort of thing you can on Linux an amount you can also use various tool was to find out what dynamic libraries your program is trying to load from which directories so again if you google out you'll find information about that but you need to get to the point before going on to the next tutorial of running a program like this that English Eliza's in quits your graphics API and can actually display some message to let you know that it has succeeded at least in initializing the system and then you can quit so good good luck with that if it doesn't work straight off then do persist with it because believe me as a C++ program you're going to have to be persistent and you are going to find yourself at some point with C++ googling for information about error messages but it's worth persisting with because these are this is not theoretical physics these these are not property or philosophy this these are not problems that are insoluble whatever problems you get they can be they can't be solved one way or another it's just you have to be persistent enough to figure out how to solve them so don't don't throw up your hands in despair you know usually you can solve programs with an hour or two of googling at the worst in the worst case that ends up being the thing that takes you multiple days and what I usually do that is I try to look at it for like an hour a day or something until I finally solve the problem but those are the worst problems unfortunately and it's a lot more difficult when you're beginning and you haven't got experience to solve problems and I used to sometimes spend a couple of days just trying to fix one bug but I was a bit in my approach so if you really try hard to be systematic it really really does help a lot so I'll leave you with that and good luck with that I hope you succeed in getting some graphics API that can do pixel access initialized for your system and in the next tutorial we'll look at putting together a basic STL program that actually can put a window on the screen and allow you to quit Graham closed the window so until next time happy coding you
