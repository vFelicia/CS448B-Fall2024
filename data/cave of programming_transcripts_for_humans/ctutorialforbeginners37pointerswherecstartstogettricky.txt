With timestamps:

00:01 - [Music]
00:13 - [Music]
00:17 - hello this is John from K programming.
00:20 - comom in this tutorial we're going to
00:22 - start looking at pointers in C++ this is
00:26 - a language feature that is um that you
00:30 - don't find in too many other computer
00:32 - languages and uh it's it sort of baffles
00:35 - beginners but we're going to take it
00:36 - slowly here we're going to start looking
00:38 - at pointers in this tutorial and we're
00:40 - going to move on uh in subsequent
00:42 - tutorials and look at more stuff that
00:45 - you can do with
00:47 - pointers so let's let's declare an INT
00:49 - here I'm going to say int I'll just call
00:52 - it n value the N just standing for
00:55 - integer and uh I'll assign it a value
00:58 - let's say eight
01:00 - so here we've you can think of this as
01:03 - being like a bucket that we've put a
01:05 - value into it's uh We've allocated some
01:08 - memory and the amount of memory we've
01:11 - allocated is controlled by the fact that
01:14 - we've got an INT here and uh of course
01:17 - we can change that um we can set the
01:19 - value to something else and so on and we
01:21 - can output
01:22 - it let's try that um n let's say int
01:27 - value and
01:30 - n
01:32 - value oops need put to operator there
01:36 - let's just check that this
01:38 - works so um yes I want to save it and
01:43 - now it says in value
01:45 - 9 uh now you can actually you can
01:48 - actually get a you can actually create a
01:51 - variable that stores the the address of
01:54 - this um int um rather than the value
01:58 - itself
02:00 - so to do that I can typee int and I'm
02:03 - going to type an asterisk here like that
02:08 - uh so we read this as uh int pointer or
02:11 - pointer to an INT int pointer is kind of
02:14 - trips off the tongue faster and because
02:16 - this is is a pointer I'm going to prefix
02:19 - it with a p you don't have to do this
02:22 - but um it just helps make it clearer
02:24 - that it is a pointer let's say p i could
02:28 - put n for in as well if I want this is
02:31 - just stuff just to help me remember what
02:33 - it is so PN
02:35 - value now I can set that to point to the
02:38 - address of this int by typing equals and
02:43 - a um Ampersand which uh you can read as
02:48 - address and NV value so I'm saying here
02:52 - um pointer to an INT equals the address
02:56 - of n
02:57 - value so what's actually stored in here
02:59 - here is is not an INT it's not this
03:02 - value it's the address the memory
03:05 - address of this bit of memory here this
03:07 - int and we can output that as well let's
03:10 - do that let's say um
03:15 - here pointer
03:18 - to
03:20 - int address let's say address now let's
03:24 - output this PN value
03:27 - here so if we copy that paste it in
03:30 - there save this and run it then we get a
03:34 - memory address in hexad decimal so this
03:37 - is just a number the ox just says it's
03:40 - hex aimal as we saw in a previous
03:42 - tutorial this is a number in HEX and
03:45 - this is the memory location of that int
03:49 - there so what what can we actually do
03:51 - with this well these are very useful in
03:54 - C++ they have a lot of different uses
03:57 - but one thing we can do is get back the
03:59 - or int so let's paste in another C out
04:05 - here like this and
04:09 - say int value via
04:13 - pointer now if we just put the actual
04:17 - pointer variable name in here of course
04:18 - we're going to get the address again
04:20 - what we can do is something called
04:21 - dereferencing The Pointer and to do that
04:24 - we just type an as risk in front of it
04:28 - and this gives us the value
04:30 - that the pointer refers to so let's try
04:34 - this and when it runs we get
04:39 - eight so we've got several bits of um
04:44 - notation syntax here here we're using a
04:47 - star saying inar or like another way to
04:50 - write it which um maybe is nicer but
04:54 - depends on your preferences relies to
04:56 - put the asteris directly before the
04:58 - variable that's that also so
05:01 - works so we're using the star here to
05:05 - that this is the type of this variable
05:07 - so the type of this variable is we read
05:10 - it from uh from right to left the type
05:13 - of this variable is pointer to an
05:17 - INT and then we use the uh Ampersand
05:20 - here to get the address of a value in
05:24 - this case an integer value and then here
05:28 - if we want to Output the value that that
05:30 - the pointer points to the actual um
05:34 - value at the memory address which is
05:36 - contained in the pointer we use an
05:38 - asteris just before it to dreference it
05:41 - so this gets us the actual value that
05:43 - the pointer points to it gets us the
05:46 - value stored in the memory
05:48 - address um and we've stored that memory
05:50 - address in the
05:52 - pointer um it's uh the easiest way to
05:57 - understand this is just to practice
05:58 - using it
06:00 - because uh I find you can read
06:02 - explanations of this and um it's really
06:05 - hard to remember which asterisk and
06:07 - which and goes where it's only when you
06:09 - use it you type it out that you really
06:12 - start to get a feel for it let's look at
06:14 - one thing in this tutorial that you can
06:16 - do with this that's um sometimes quite
06:19 - useful let's declare a function up here
06:21 - so I'm going to say void and we'll call
06:23 - it um let's call it um I really don't
06:29 - know actually I'll call it
06:32 - manipulate and let's make that take an
06:34 - INT so int
06:38 - value and what manipulate will do is
06:42 - we'll just say value
06:43 - equals 10 like
06:46 - that and let's do a c out value of
06:51 - int in
06:54 - manipulate and let's output that value
06:57 - there endler
07:02 - so um I'll output here let's output some
07:08 - just text just to separate this stuff
07:10 - out a
07:12 - bit and then I'm going to declare let's
07:16 - have another in in here let's say in
07:19 - fact let's let's maybe use a double just
07:21 - to demonstrate this with some something
07:24 - else let's say double value and then we
07:26 - can say value is 10.0 value double in
07:30 - manipulate so I'll declare a value value
07:33 - here a double let's say um let's say d d
07:38 - value that'll do set it equal to 1 2
07:44 - 3.4 and then let's output this value so
07:47 - let's say uh D
07:51 - value I'll put a one before this one D
07:57 - value and output
08:00 - the double value
08:03 - there then let's call manipulate
08:06 - manipulate and pass it that double value
08:09 - D value like
08:11 - that and then let's output that
08:16 - again and save D value
08:19 - again so we're declaring this double
08:22 - here and we're setting the value of it
08:24 - we're outputting that value so we expect
08:26 - to see1 2
08:27 - 3.4 we're calling manipul we're passing
08:30 - this double in and that actually sets
08:32 - the value to something else and it
08:34 - outputs what that something else is and
08:37 - then we're outputting the double value
08:39 - back in the main function again after
08:41 - manipulate and if we run this now we're
08:45 - going to
08:46 - get in main uh so the double value
08:50 - starts off at 1 1 2 3.4 in manipulate we
08:54 - change it to 10 and then output it so
08:58 - maybe we can make this actually a little
09:00 - bit clearer by putting another C out in
09:02 - here let's say here
09:06 - two
09:08 - three and I'll make this
09:11 - four let's run this so when we run
09:15 - manipulate to start with the values 1.2
09:18 - 1 2 3.4 in manipulate we pass that value
09:21 - in comes in here and we output it so
09:24 - again at two it's 1 1 2 3.4 then we
09:28 - change it manipulate 10 and we output it
09:31 - again and then it's 10 and when we
09:34 - output it after manipulate in the main
09:37 - function it's 1 2
09:39 - 3.4 the reason for that is when you pass
09:42 - a value like this into a function um
09:45 - it's it's like pouring pouring data from
09:48 - one bucket to another we're actually
09:50 - copying this we're we're copying the
09:53 - value um in this double here copying it
09:57 - into this value and in this fun we're
09:59 - changing this value we're not changing
10:02 - this we're just changing something that
10:04 - happens to contain a copy of that value
10:08 - so this here is a new double and when we
10:11 - call manipulate and pass that value in
10:14 - we're just taking this value putting it
10:17 - into this copy and changing the copy so
10:20 - that when we get back into the main
10:23 - function when after this manipulate
10:26 - returns our our our original double
10:29 - still has its original value the fact
10:30 - that we check we changed a copy of it
10:32 - here doesn't make any difference to it
10:35 - now usually that's what you want and it
10:37 - it makes things simpler to have
10:39 - functions behave like this but sometimes
10:42 - you want a function to be able to
10:43 - literally change a value and uh there's
10:46 - another way of doing this in C++ called
10:48 - reference variables which we'll look at
10:51 - but um one thing you can do is to use a
10:53 - pointer let's change manipulate so that
10:56 - instead of taking a double value it
10:58 - takes a pointer to a double so I'm going
11:02 - to type here an asterisk so now the type
11:06 - that we pass in here is pointer to a
11:09 - double and if we compile that it's not
11:11 - going to compile um because now we have
11:13 - to pass in not the value itself but the
11:16 - address of the value because pointers
11:19 - contain addresses of values literally
11:22 - memory addresses where those values are
11:23 - stored so we need to type here a um an
11:27 - ampersand to get the address of
11:30 - this so now um we're passing that in and
11:34 - now we don't want to assign it a value
11:36 - 10 cuz this will contain the address of
11:40 - this if we sign out a value 10 we're
11:42 - saying okay change this memory address
11:45 - to 10 which is pointing at some random
11:47 - bit of memory and we don't want that
11:49 - here we want D reference value so I'm
11:51 - going to put an asterisk there and that
11:54 - says change this says change the value
11:57 - that this pointer points at so actually
12:00 - go to that bit of memory and change
12:03 - it now um let's I think we can try
12:07 - running that let's try running this so
12:10 - now we see that um I've got valuable
12:13 - doubling manipulate we've got the memory
12:14 - address let's change this to dreference
12:17 - the pointer as
12:20 - well I I should have probably called it
12:22 - P value really just to emphasize that
12:25 - it's a pointer I think that'll make it a
12:27 - little bit clearer let's do
12:31 - that and now let's save it and run
12:34 - it so now what's happening is we get the
12:36 - double we output its value so 1 2
12:40 - 3.4 we pass the address of it to
12:44 - manipulate that stores it in a pointer
12:47 - variable it stores the address of our
12:50 - original double in this pointer variable
12:52 - we output it we output not the address
12:55 - but the value at that address which is 1
12:58 - 2 3.4
12:59 - we change it to 10.0 by dereferencing
13:02 - the pointer and changing whatever value
13:04 - is stored at that memory
13:07 - address we output it again we output the
13:10 - D reference pointer so the value at that
13:13 - address and it's of course it's 10 now
13:16 - and then back in the main function we
13:17 - output the double value and now it has
13:20 - changed because we actually went to the
13:22 - address and change the value so in this
13:24 - version of the program now there's only
13:27 - one double we don't have a copy of this
13:29 - double um what this is is the address of
13:32 - the double there's only one double and
13:35 - this pointer points to that double it
13:37 - has the address of that double and we
13:39 - can use it to change the original value
13:42 - stored at that
13:44 - address uh so that's it for this
13:46 - tutorial and um I'd highly highly
13:49 - recommend uh that you practice this
13:52 - yourself so just do what I've done here
13:55 - uh first try typing out a value whatever
13:59 - you like could um you know maybe try an
14:02 - inter a double that's probably simplest
14:05 - and um then try declaring a pointer to
14:10 - that value and um like this and try
14:14 - using a pointer to change the value so
14:17 - of course we could change the value here
14:18 - using the pointer as well you know we
14:21 - could say um star PN value equals some
14:26 - int like that try doing that sort of
14:28 - thing
14:30 - D referencing the pointer and then
14:33 - declare a function that um takes a
14:36 - pointer as its parameter and try passing
14:41 - your U the address of one of your values
14:43 - in your function to that to that um
14:46 - function try changing it in the function
14:49 - and see what you get afterwards so try
14:51 - to do all this and um try to do as much
14:54 - from memory as possible but you you're
14:56 - almost certainly going to have to refer
14:57 - back to this uh to remember it but try
15:00 - to look at it as little as possible and
15:02 - see how far you can get you'll probably
15:04 - find if this is new to you that you'll
15:06 - make a lot of mistakes in getting this
15:08 - to work you probably um you know it's
15:11 - it's not too difficult to actually do
15:13 - this bit um but you probably need to
15:15 - refer to this a few times before you can
15:18 - do it from
15:19 - memory and then this bit when you
15:21 - actually pass the value to a function
15:23 - and that function actually changes the
15:25 - value by using a pointer that's a bit
15:28 - tricky as well and you'll probably make
15:29 - some mistakes first time you do it but
15:32 - um it's it's very very good if you can
15:34 - get to the point where you can type out
15:36 - this code and you can create functions
15:38 - that take pointers and change the value
15:40 - of the variable using that pointer by
15:42 - dereferencing it from memory because
15:44 - once you've done that you've really got
15:47 - not such a bad um uh feeling for
15:51 - pointers I
15:52 - think so um that's all we're going to do
15:55 - in this tutorial and we'll look at
15:57 - pointers more in the next tutorial
15:59 - but um yeah it's it's good to practice
16:01 - this because we're going to get we're
16:03 - going to do more stuff with pointers in
16:05 - subsequent tutorials and it's going to
16:07 - get more complicated but not much more
16:10 - so um so don't worry and uh once you've
16:13 - understood this you can really kind of
16:15 - give yourself a pat on the backat
16:16 - because this is something that defeats a
16:19 - lot of beginners a lot of people know
16:21 - C++ uh to a point but pointers is the
16:24 - point at which they sort of give up so
16:26 - it's really worth persisting with this
16:28 - and I'd say don't agonize about it too
16:31 - much the thing is to um get your fingers
16:34 - to kind of remember it remember what you
16:35 - have to type where in order to get this
16:37 - to work and then the understanding sort
16:40 - of tends to come later on so until next
16:44 - time happy coding
16:56 - [Music]

Cleaned transcript:

hello this is John from K programming. comom in this tutorial we're going to start looking at pointers in C++ this is a language feature that is um that you don't find in too many other computer languages and uh it's it sort of baffles beginners but we're going to take it slowly here we're going to start looking at pointers in this tutorial and we're going to move on uh in subsequent tutorials and look at more stuff that you can do with pointers so let's let's declare an INT here I'm going to say int I'll just call it n value the N just standing for integer and uh I'll assign it a value let's say eight so here we've you can think of this as being like a bucket that we've put a value into it's uh We've allocated some memory and the amount of memory we've allocated is controlled by the fact that we've got an INT here and uh of course we can change that um we can set the value to something else and so on and we can output it let's try that um n let's say int value and n value oops need put to operator there let's just check that this works so um yes I want to save it and now it says in value 9 uh now you can actually you can actually get a you can actually create a variable that stores the the address of this um int um rather than the value itself so to do that I can typee int and I'm going to type an asterisk here like that uh so we read this as uh int pointer or pointer to an INT int pointer is kind of trips off the tongue faster and because this is is a pointer I'm going to prefix it with a p you don't have to do this but um it just helps make it clearer that it is a pointer let's say p i could put n for in as well if I want this is just stuff just to help me remember what it is so PN value now I can set that to point to the address of this int by typing equals and a um Ampersand which uh you can read as address and NV value so I'm saying here um pointer to an INT equals the address of n value so what's actually stored in here here is is not an INT it's not this value it's the address the memory address of this bit of memory here this int and we can output that as well let's do that let's say um here pointer to int address let's say address now let's output this PN value here so if we copy that paste it in there save this and run it then we get a memory address in hexad decimal so this is just a number the ox just says it's hex aimal as we saw in a previous tutorial this is a number in HEX and this is the memory location of that int there so what what can we actually do with this well these are very useful in C++ they have a lot of different uses but one thing we can do is get back the or int so let's paste in another C out here like this and say int value via pointer now if we just put the actual pointer variable name in here of course we're going to get the address again what we can do is something called dereferencing The Pointer and to do that we just type an as risk in front of it and this gives us the value that the pointer refers to so let's try this and when it runs we get eight so we've got several bits of um notation syntax here here we're using a star saying inar or like another way to write it which um maybe is nicer but depends on your preferences relies to put the asteris directly before the variable that's that also so works so we're using the star here to that this is the type of this variable so the type of this variable is we read it from uh from right to left the type of this variable is pointer to an INT and then we use the uh Ampersand here to get the address of a value in this case an integer value and then here if we want to Output the value that that the pointer points to the actual um value at the memory address which is contained in the pointer we use an asteris just before it to dreference it so this gets us the actual value that the pointer points to it gets us the value stored in the memory address um and we've stored that memory address in the pointer um it's uh the easiest way to understand this is just to practice using it because uh I find you can read explanations of this and um it's really hard to remember which asterisk and which and goes where it's only when you use it you type it out that you really start to get a feel for it let's look at one thing in this tutorial that you can do with this that's um sometimes quite useful let's declare a function up here so I'm going to say void and we'll call it um let's call it um I really don't know actually I'll call it manipulate and let's make that take an INT so int value and what manipulate will do is we'll just say value equals 10 like that and let's do a c out value of int in manipulate and let's output that value there endler so um I'll output here let's output some just text just to separate this stuff out a bit and then I'm going to declare let's have another in in here let's say in fact let's let's maybe use a double just to demonstrate this with some something else let's say double value and then we can say value is 10.0 value double in manipulate so I'll declare a value value here a double let's say um let's say d d value that'll do set it equal to 1 2 3.4 and then let's output this value so let's say uh D value I'll put a one before this one D value and output the double value there then let's call manipulate manipulate and pass it that double value D value like that and then let's output that again and save D value again so we're declaring this double here and we're setting the value of it we're outputting that value so we expect to see1 2 3.4 we're calling manipul we're passing this double in and that actually sets the value to something else and it outputs what that something else is and then we're outputting the double value back in the main function again after manipulate and if we run this now we're going to get in main uh so the double value starts off at 1 1 2 3.4 in manipulate we change it to 10 and then output it so maybe we can make this actually a little bit clearer by putting another C out in here let's say here two three and I'll make this four let's run this so when we run manipulate to start with the values 1.2 1 2 3.4 in manipulate we pass that value in comes in here and we output it so again at two it's 1 1 2 3.4 then we change it manipulate 10 and we output it again and then it's 10 and when we output it after manipulate in the main function it's 1 2 3.4 the reason for that is when you pass a value like this into a function um it's it's like pouring pouring data from one bucket to another we're actually copying this we're we're copying the value um in this double here copying it into this value and in this fun we're changing this value we're not changing this we're just changing something that happens to contain a copy of that value so this here is a new double and when we call manipulate and pass that value in we're just taking this value putting it into this copy and changing the copy so that when we get back into the main function when after this manipulate returns our our our original double still has its original value the fact that we check we changed a copy of it here doesn't make any difference to it now usually that's what you want and it it makes things simpler to have functions behave like this but sometimes you want a function to be able to literally change a value and uh there's another way of doing this in C++ called reference variables which we'll look at but um one thing you can do is to use a pointer let's change manipulate so that instead of taking a double value it takes a pointer to a double so I'm going to type here an asterisk so now the type that we pass in here is pointer to a double and if we compile that it's not going to compile um because now we have to pass in not the value itself but the address of the value because pointers contain addresses of values literally memory addresses where those values are stored so we need to type here a um an ampersand to get the address of this so now um we're passing that in and now we don't want to assign it a value 10 cuz this will contain the address of this if we sign out a value 10 we're saying okay change this memory address to 10 which is pointing at some random bit of memory and we don't want that here we want D reference value so I'm going to put an asterisk there and that says change this says change the value that this pointer points at so actually go to that bit of memory and change it now um let's I think we can try running that let's try running this so now we see that um I've got valuable doubling manipulate we've got the memory address let's change this to dreference the pointer as well I I should have probably called it P value really just to emphasize that it's a pointer I think that'll make it a little bit clearer let's do that and now let's save it and run it so now what's happening is we get the double we output its value so 1 2 3.4 we pass the address of it to manipulate that stores it in a pointer variable it stores the address of our original double in this pointer variable we output it we output not the address but the value at that address which is 1 2 3.4 we change it to 10.0 by dereferencing the pointer and changing whatever value is stored at that memory address we output it again we output the D reference pointer so the value at that address and it's of course it's 10 now and then back in the main function we output the double value and now it has changed because we actually went to the address and change the value so in this version of the program now there's only one double we don't have a copy of this double um what this is is the address of the double there's only one double and this pointer points to that double it has the address of that double and we can use it to change the original value stored at that address uh so that's it for this tutorial and um I'd highly highly recommend uh that you practice this yourself so just do what I've done here uh first try typing out a value whatever you like could um you know maybe try an inter a double that's probably simplest and um then try declaring a pointer to that value and um like this and try using a pointer to change the value so of course we could change the value here using the pointer as well you know we could say um star PN value equals some int like that try doing that sort of thing D referencing the pointer and then declare a function that um takes a pointer as its parameter and try passing your U the address of one of your values in your function to that to that um function try changing it in the function and see what you get afterwards so try to do all this and um try to do as much from memory as possible but you you're almost certainly going to have to refer back to this uh to remember it but try to look at it as little as possible and see how far you can get you'll probably find if this is new to you that you'll make a lot of mistakes in getting this to work you probably um you know it's it's not too difficult to actually do this bit um but you probably need to refer to this a few times before you can do it from memory and then this bit when you actually pass the value to a function and that function actually changes the value by using a pointer that's a bit tricky as well and you'll probably make some mistakes first time you do it but um it's it's very very good if you can get to the point where you can type out this code and you can create functions that take pointers and change the value of the variable using that pointer by dereferencing it from memory because once you've done that you've really got not such a bad um uh feeling for pointers I think so um that's all we're going to do in this tutorial and we'll look at pointers more in the next tutorial but um yeah it's it's good to practice this because we're going to get we're going to do more stuff with pointers in subsequent tutorials and it's going to get more complicated but not much more so um so don't worry and uh once you've understood this you can really kind of give yourself a pat on the backat because this is something that defeats a lot of beginners a lot of people know C++ uh to a point but pointers is the point at which they sort of give up so it's really worth persisting with this and I'd say don't agonize about it too much the thing is to um get your fingers to kind of remember it remember what you have to type where in order to get this to work and then the understanding sort of tends to come later on so until next time happy coding
