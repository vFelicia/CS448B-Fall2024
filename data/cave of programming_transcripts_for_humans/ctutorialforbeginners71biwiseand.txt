With timestamps:

00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from Cave of
00:20 - programming. comom in this tutorial
00:22 - we're going to look at the right bit
00:24 - shift and binary bitwise and operators
00:29 - the reason for that is um at the moment
00:31 - we've got this particle explosion that
00:33 - we've been working on in these
00:35 - tutorials um but before we start find
00:38 - tuning the movements of the particles
00:40 - and make it look uh nicer I think it
00:43 - would be good if we could blur this
00:46 - program because without seeing the kind
00:48 - of blur on the particles it's hard to
00:50 - really get a sense of how this is going
00:53 - to look with the final blur applied to
00:55 - it and the blur makes a big difference
00:58 - in um how nice it actually
01:00 - looks now to actually do the blur we
01:03 - need to be able to get pixel values and
01:05 - set new pixel values based on the old
01:07 - ones um after applying some kind of blur
01:10 - algorithm and to get the pixel values
01:13 - that involves um getting a color which
01:16 - will be a 32-bit value that looks
01:18 - something like this let's write it out
01:20 - in HEX 1 2 3 4 5 6 7 8 and getting the
01:26 - uh red green and blue values from this
01:29 - so we're we're packing red green blue
01:30 - and Alpha values into a single 32bit
01:33 - color value so this would be red this
01:36 - bite would be green this bite would be
01:39 - blue and this would be Alpha and we're
01:42 - not using Alpha although we have to have
01:45 - it in there because we're working with
01:46 - 32bit values for each pixel so to show
01:49 - you how to do this well let's get rid of
01:51 - the alpha value just because it's
01:53 - simpler to demonstrate this
01:55 - without um a little bit simpler how can
01:59 - we get red green and blue values out of
02:01 - there so the red is 12 in HEX green is
02:04 - 34 in HEX uh each of these is one by and
02:08 - the blue is 56 in XX how can we extract
02:11 - those from this well one thing we can do
02:14 - is use a bitwise and operator if I write
02:17 - int um let's say red equals color now
02:22 - I'm going to use a single and so two and
02:25 - symbols together in uh in C++ is a
02:30 - logical
02:31 - and um it's it's like Boolean logic but
02:33 - if I use a single and this does a
02:36 - bitwise comparison so if I write out now
02:39 - o x and we're going to set if if you
02:42 - imagine this is binary I'm going to set
02:45 - two bytes entirely to one sorry one bite
02:48 - entirely to ones so this is like eight
02:50 - ones FF is like eight ones in
02:53 - binary and then the rest I'm going to
02:55 - have zeros so I've got the same number
02:58 - here but if you look at it in binary it
03:00 - would look like this 1 2 3 4 5 6 7 8 and
03:04 - then 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7
03:10 - 8 and uh what this bitwise and will do
03:14 - will be it will say it will look at each
03:17 - bit in this and this in the color and in
03:20 - and in this my um what we call a mask
03:24 - here and it will say okay if both of the
03:27 - bits are one I'll set the result the bit
03:30 - in a resulting variable to one um but if
03:33 - either of them is zero um then I'll set
03:37 - the bit corresponding bit and resulting
03:41 - value to zero so it means and means um
03:45 - both of both of them the actual value
03:48 - and the mask have got to have um ones
03:52 - set in a particular position so it's got
03:55 - to be one and one together if it's one
03:59 - and zero
04:00 - um then we say that's um that's we're
04:02 - going to set that to a zero in the
04:05 - resulting
04:06 - variable so like here if if I write out
04:10 - um if you imagine this is the mask we
04:12 - call this The Mask which is this and if
04:16 - we say that this is the color so let's
04:19 - let's line them up here if the color
04:22 - look like
04:28 - this then
04:30 - um the result of bitwise
04:34 - and will be like this so if we look at
04:38 - this column we've got one and one so
04:40 - that's one this is one and zero so we
04:43 - make that zero and these are all ones
04:45 - and zeros here we've got a one and a one
04:48 - here's a zero here's a one and a one one
04:51 - and a one one and zero that's zero so
04:53 - that's zero zero and in fact all the
04:56 - rest are going to be zeros because we've
04:58 - got zeros in The Mask so it's going to
05:00 - end up looking
05:03 - like this if I've got this
05:06 - right so youve got to have one in the
05:09 - mask and one in the color now we're
05:13 - we're working with hex but um the way
05:15 - this looks in HEX is if I um use a
05:19 - bitwise and on this color with a mass
05:22 - that has FF here and 0 0 for the rest
05:26 - all of these are going to be set to zero
05:29 - and
05:30 - the the first two here which we do the
05:32 - and operation with the FF which is just
05:36 - um just 8 ones
05:38 - basically this bit is going to remain um
05:42 - what it is currently so let's just see
05:43 - the result R and talking anymore I
05:45 - probably explain this about as well as I
05:47 - can now um so I'm going to I'm going to
05:50 - say here see
05:51 - out we want hex format and uh I'm going
05:56 - to Output um red here
06:00 - let's see how this
06:01 - looks so if I run this now whoops I
06:04 - think I've just run the wrong program I
06:07 - no we've run the right one so we can see
06:09 - that we' picked out the one two and set
06:12 - the rest to zeros all I have to do now
06:16 - is shift
06:19 - this um so if I shift this two bytes
06:22 - along which is 16
06:24 - bits now we're going to get the red
06:27 - value
06:29 - so we've got red similarly if I copy
06:34 - this
06:36 - and let's say
06:39 - green so let's set the first two to zero
06:44 - and then we want um FF to to mask out
06:48 - the green bit and then 0 0 0 0 for the
06:51 - last value and I want to shift this by
06:54 - one by and let's take a look at that so
06:57 - green here
07:01 - and there's our green value 34 which is
07:03 - picked out from here and finally we've
07:06 - got blue which just is
07:10 - color um bitwise and so single and Ox
07:15 - 000000
07:18 - FF and if we now look at
07:22 - Blue hopefully this will
07:25 - work whoops yeah yeah H it's good okay
07:28 - yes so we've got the blue value picked
07:30 - out there now this is a solution that
07:32 - I've seen um on the um internet when
07:36 - I've looked for this but I I find that
07:39 - um at least what I can do on this system
07:41 - and I think it would work on all systems
07:43 - but I'm not completely certain is we can
07:47 - do the
07:52 - following just going to write a comment
07:54 - there because I haven't tested this on a
07:56 - range of systems I don't see why it
07:58 - wouldn't work
07:59 - on any any system that you try it on but
08:03 - there's a little doubt in my mind so I'm
08:05 - probably going to stick to using this
08:07 - kind of system in this tutorial now of
08:09 - course we don't want ins here we want
08:11 - unsigned chars because each of our red
08:14 - green and blue values are
08:18 - actually um they can only range from n
08:21 - to 255 like an unsigned Char
08:24 - value uh so this out this is outputting
08:27 - the capital V because it's try to Output
08:30 - it like a character but if we cast that
08:31 - blue to an INT there and then run it we
08:34 - should see that we're still successfully
08:36 - getting blue I don't know what this
08:38 - problem is that I keep seeing every time
08:40 - it comes past maybe just an unused
08:42 - variable warning let's just check let's
08:45 - check the red as well and check that
08:46 - we're picking
08:47 - out um the value one two there let's run
08:52 - this so yeah that still works fine uh
08:55 - but what I find is that I can do
08:57 - something like this unsigned
09:00 - Char red let's call it red again
09:05 - equals uh we take our color and all we
09:08 - have to do is do the shift so if we um
09:12 - shift this by two bytes and then
09:17 - output this value so red
09:22 - again then if I run this again we get
09:26 - one two so because we're using an onside
09:30 - unsigned chart if we just shift this
09:32 - over if we shift this number over two
09:34 - two bytes sorry this number when we
09:37 - shift it we discard all these and then
09:40 - when we pack the int into an unsigned
09:42 - chart when we do a typ cast in effect
09:45 - then we end up with the value that we
09:47 - want so if you're purely getting your
09:50 - result in an unsigned chart I don't
09:52 - think you need to do the mask bit
09:55 - nevertheless I ran through it because
09:57 - I'm not 100 I'm not absolutely 100% sure
10:00 - that there's there's not some Quirk on
10:03 - some system somewhere that would somehow
10:05 - prevent this working with some compiler
10:08 - I don't know and because you see this on
10:10 - the internet a lot and also because it
10:11 - is important to know about the bitwise
10:14 - and operator in C++ is sometimes very
10:17 - useful there's also a bitwise or which
10:20 - I'm not going to cover here except to
10:22 - say that bitwise or would set the one in
10:25 - your resulting value to one if either
10:29 - the The Mask or the um original kind of
10:32 - value were one so it's saying it's got
10:35 - um one of them is got to be one either
10:37 - the first one's one or the second one
10:39 - one whereas the bitwise and says and
10:43 - this one's got to be one and the second
10:45 - one's got to be one as well so the bit
10:48 - wise or um it looks like this let's just
10:50 - write this bitwise
10:55 - or it's that symbol there and remember
10:58 - for a logic C or use um a double
11:03 - bar okay so um it's yeah it might be
11:06 - worth Googling bitwise operators just
11:09 - have a a look at a page there so if if
11:12 - you want some homework I'll give you
11:13 - that as a kind of homework task but
11:15 - apart from that I'd recommend trying
11:16 - this for yourself and check that you can
11:18 - extract extract red green and blue
11:21 - values from a 32bit color like this
11:24 - check that you can do it and then in the
11:26 - next tutorial we can go on to
11:27 - implementing blur I should think which
11:30 - will start to make our program lot
11:32 - really quite lovely so um that's it for
11:35 - this tutorial and until next time happy
11:37 - coding
11:39 - [Music]

Cleaned transcript:

hello this is John from Cave of programming. comom in this tutorial we're going to look at the right bit shift and binary bitwise and operators the reason for that is um at the moment we've got this particle explosion that we've been working on in these tutorials um but before we start find tuning the movements of the particles and make it look uh nicer I think it would be good if we could blur this program because without seeing the kind of blur on the particles it's hard to really get a sense of how this is going to look with the final blur applied to it and the blur makes a big difference in um how nice it actually looks now to actually do the blur we need to be able to get pixel values and set new pixel values based on the old ones um after applying some kind of blur algorithm and to get the pixel values that involves um getting a color which will be a 32bit value that looks something like this let's write it out in HEX 1 2 3 4 5 6 7 8 and getting the uh red green and blue values from this so we're we're packing red green blue and Alpha values into a single 32bit color value so this would be red this bite would be green this bite would be blue and this would be Alpha and we're not using Alpha although we have to have it in there because we're working with 32bit values for each pixel so to show you how to do this well let's get rid of the alpha value just because it's simpler to demonstrate this without um a little bit simpler how can we get red green and blue values out of there so the red is 12 in HEX green is 34 in HEX uh each of these is one by and the blue is 56 in XX how can we extract those from this well one thing we can do is use a bitwise and operator if I write int um let's say red equals color now I'm going to use a single and so two and symbols together in uh in C++ is a logical and um it's it's like Boolean logic but if I use a single and this does a bitwise comparison so if I write out now o x and we're going to set if if you imagine this is binary I'm going to set two bytes entirely to one sorry one bite entirely to ones so this is like eight ones FF is like eight ones in binary and then the rest I'm going to have zeros so I've got the same number here but if you look at it in binary it would look like this 1 2 3 4 5 6 7 8 and then 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 and uh what this bitwise and will do will be it will say it will look at each bit in this and this in the color and in and in this my um what we call a mask here and it will say okay if both of the bits are one I'll set the result the bit in a resulting variable to one um but if either of them is zero um then I'll set the bit corresponding bit and resulting value to zero so it means and means um both of both of them the actual value and the mask have got to have um ones set in a particular position so it's got to be one and one together if it's one and zero um then we say that's um that's we're going to set that to a zero in the resulting variable so like here if if I write out um if you imagine this is the mask we call this The Mask which is this and if we say that this is the color so let's let's line them up here if the color look like this then um the result of bitwise and will be like this so if we look at this column we've got one and one so that's one this is one and zero so we make that zero and these are all ones and zeros here we've got a one and a one here's a zero here's a one and a one one and a one one and zero that's zero so that's zero zero and in fact all the rest are going to be zeros because we've got zeros in The Mask so it's going to end up looking like this if I've got this right so youve got to have one in the mask and one in the color now we're we're working with hex but um the way this looks in HEX is if I um use a bitwise and on this color with a mass that has FF here and 0 0 for the rest all of these are going to be set to zero and the the first two here which we do the and operation with the FF which is just um just 8 ones basically this bit is going to remain um what it is currently so let's just see the result R and talking anymore I probably explain this about as well as I can now um so I'm going to I'm going to say here see out we want hex format and uh I'm going to Output um red here let's see how this looks so if I run this now whoops I think I've just run the wrong program I no we've run the right one so we can see that we' picked out the one two and set the rest to zeros all I have to do now is shift this um so if I shift this two bytes along which is 16 bits now we're going to get the red value so we've got red similarly if I copy this and let's say green so let's set the first two to zero and then we want um FF to to mask out the green bit and then 0 0 0 0 for the last value and I want to shift this by one by and let's take a look at that so green here and there's our green value 34 which is picked out from here and finally we've got blue which just is color um bitwise and so single and Ox 000000 FF and if we now look at Blue hopefully this will work whoops yeah yeah H it's good okay yes so we've got the blue value picked out there now this is a solution that I've seen um on the um internet when I've looked for this but I I find that um at least what I can do on this system and I think it would work on all systems but I'm not completely certain is we can do the following just going to write a comment there because I haven't tested this on a range of systems I don't see why it wouldn't work on any any system that you try it on but there's a little doubt in my mind so I'm probably going to stick to using this kind of system in this tutorial now of course we don't want ins here we want unsigned chars because each of our red green and blue values are actually um they can only range from n to 255 like an unsigned Char value uh so this out this is outputting the capital V because it's try to Output it like a character but if we cast that blue to an INT there and then run it we should see that we're still successfully getting blue I don't know what this problem is that I keep seeing every time it comes past maybe just an unused variable warning let's just check let's check the red as well and check that we're picking out um the value one two there let's run this so yeah that still works fine uh but what I find is that I can do something like this unsigned Char red let's call it red again equals uh we take our color and all we have to do is do the shift so if we um shift this by two bytes and then output this value so red again then if I run this again we get one two so because we're using an onside unsigned chart if we just shift this over if we shift this number over two two bytes sorry this number when we shift it we discard all these and then when we pack the int into an unsigned chart when we do a typ cast in effect then we end up with the value that we want so if you're purely getting your result in an unsigned chart I don't think you need to do the mask bit nevertheless I ran through it because I'm not 100 I'm not absolutely 100% sure that there's there's not some Quirk on some system somewhere that would somehow prevent this working with some compiler I don't know and because you see this on the internet a lot and also because it is important to know about the bitwise and operator in C++ is sometimes very useful there's also a bitwise or which I'm not going to cover here except to say that bitwise or would set the one in your resulting value to one if either the The Mask or the um original kind of value were one so it's saying it's got um one of them is got to be one either the first one's one or the second one one whereas the bitwise and says and this one's got to be one and the second one's got to be one as well so the bit wise or um it looks like this let's just write this bitwise or it's that symbol there and remember for a logic C or use um a double bar okay so um it's yeah it might be worth Googling bitwise operators just have a a look at a page there so if if you want some homework I'll give you that as a kind of homework task but apart from that I'd recommend trying this for yourself and check that you can extract extract red green and blue values from a 32bit color like this check that you can do it and then in the next tutorial we can go on to implementing blur I should think which will start to make our program lot really quite lovely so um that's it for this tutorial and until next time happy coding
