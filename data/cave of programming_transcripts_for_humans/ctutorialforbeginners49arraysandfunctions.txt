With timestamps:

00:17 - hello this is John from Cave of
00:19 - programming. comom in this tutorial
00:22 - we're going to look at arrays and
00:23 - functions we're going to look at passing
00:25 - arrays two functions most of all and
00:28 - we're also going to have a quick look at
00:30 - returning arrays from functions so I'm
00:33 - in Eclipse as usual and I've got my um
00:37 - main function
00:39 - here and uh I'm using the G compiler as
00:42 - usual so I'm going to start by declaring
00:45 - an array here let's make it an array of
00:47 - strings which I'll call texts and um put
00:51 - the array brackets in there and I'll
00:53 - initialize that uh so if we initialize
00:56 - it we don't need to put the number of
00:57 - elements in the array as we've seen
00:59 - before
01:01 - so let's initialize it with um
01:05 - Apple
01:06 - orange and
01:09 - banana now supposing we want to pass
01:11 - this array to a function let's create a
01:14 - function up here let's make it
01:17 - void um I'll call it show in fact I'll
01:20 - call it show one because I'm going to
01:22 - have probably three of these let's say
01:24 - show one now the the kind of most
01:27 - intuitive way to pass an array to a
01:29 - function
01:30 - is to use the whole type of the array
01:32 - which is string text and
01:36 - um uh square
01:38 - brackets so um we don't have to call
01:41 - this text of course we could call it
01:42 - anything that we like uh we could call
01:45 - it strings or whatever could call it
01:47 - anything but I'll call it text just so I
01:50 - don't have to think of another name for
01:51 - this
01:52 - variable um and now we could we could
01:55 - pass that in so we could say pass the
01:57 - array into the function let's say show
01:59 - one and texts like
02:02 - that let's Loop through the array so
02:05 - let's say for in I equals not I less
02:08 - than three cuz there's three elements in
02:11 - the array I
02:13 - ++ and we'll do c
02:15 - out text
02:19 - I
02:22 - endler so this works exactly as you'd
02:25 - expect pretty much if we run this we've
02:28 - got Apple Orange banana now there is a
02:31 - problem here which is that um when we
02:35 - pass an array like this we lose the
02:37 - information about how many elements are
02:39 - actually in the array to underline that
02:42 - we could do see out here this will work
02:44 - see out size of text and that's going to
02:49 - give us um well a string occupies on
02:51 - this with this compiler 24 bytes so
02:54 - we've got three of them so the whole
02:56 - array is going to be 72 bytes so we get
02:58 - 72 there
03:00 - but if we try the same thing here for
03:03 - one thing um we probably well at least
03:06 - in my compiler I'm going to get a compil
03:08 - a warning so it's going to give me a
03:10 - warning but it still builds it's not an
03:12 - error and um so the warning is this
03:16 - stuff about size of on array function
03:18 - parameter will return size of string
03:20 - pointer what we actually get when we
03:22 - when we run it is we just get the size
03:24 - of the pointer which is the same as size
03:26 - of long which is um at least with this
03:30 - compiler which is 8 bytes so we've lost
03:33 - the size information with this syntax
03:36 - and for that reason it's it's a a common
03:38 - thing to do is to pass in the number of
03:41 - elements in the array uh as a parameter
03:44 - so let's say int um elements or we could
03:48 - call it n elements or something to
03:50 - underline that it's um excuse me to
03:53 - underline that it's a it's an integer
03:56 - it's a number let's say int element n
03:58 - elements
04:00 - and then we could pass that in uh here
04:04 - so that's three and we could use n
04:06 - elements
04:08 - here n elements and because we we
04:11 - definitely don't want to change this
04:13 - number for good practice we should
04:15 - declare it Con as well so that we can't
04:17 - change it within this function and if we
04:20 - run this it works as before I don't
04:22 - think we we saw any compiler warnings
04:25 - there oh yeah we would do because of
04:27 - this um so let's put a note here returns
04:32 - size of
04:34 - pointer that doesn't work and now if we
04:37 - build this we shouldn't see I don't
04:39 - expect to see any warnings here so it's
04:42 - fine now another uh syntax that you can
04:45 - use well in fact this is exactly
04:48 - equivalent to
04:50 - doing this where we pass a pointer like
04:56 - that um
04:58 - so this is is really exactly the same as
05:01 - this there's not there's not any
05:02 - difference um so if we if we do that
05:06 - let's call this show
05:07 - two it's going to work exactly the same
05:10 - so these two are equivalent and you'll
05:13 - recall that with a pointer you don't
05:16 - have size information there you have the
05:18 - information about how big the pointer
05:21 - variable is it's 8 bytes cuz it contains
05:24 - a memory address that can take 8 bytes
05:27 - to specify but we don't have the
05:29 - information
05:30 - about how many elements are in the
05:32 - array you can even uh put a number here
05:37 - um like three but C++ will just
05:40 - completely ignore it I could put two in
05:42 - there or whatever and we can still
05:44 - merrily pass in an array with three
05:47 - elements we don't even get a compiler
05:50 - warning with this compiler
05:52 - anyway um so this this is really useless
05:55 - there's no point putting a number there
05:57 - except perhaps is just to remind you
06:00 - uh about the number of elements that are
06:01 - expected there that's really the only
06:03 - thing that it's good
06:05 - for if you do want to retain size
06:09 - information you have to pass a pointer
06:12 - to the array let's show that so let's
06:14 - call this show three now we can get rid
06:17 - of the number of elements CU we're not
06:18 - going to need it and uh we can say
06:21 - string so we'll say string text array
06:25 - just as before and using this syntax you
06:28 - have to specify the number of elements
06:29 - in the array correctly so I'll say it's
06:32 - got going to have three elements now to
06:34 - pass in a reference you might expect
06:36 - that we just do this um this if you
06:40 - recall uh the tutorial on references but
06:43 - the problem is that this actually
06:44 - specifies an array of references to
06:47 - Strings which is um no use what we want
06:51 - is a reference to an array of strings so
06:53 - we actually have to put round brackets
06:56 - around this bit and perhaps this is the
06:58 - reason why this syntax I haven't seen it
07:01 - really Ed much it just doesn't look that
07:03 - look that nice but it does work and then
07:06 - we can use our old trick to get the um
07:09 - number of elements in the array we can
07:10 - say size of
07:13 - text divide by size of string because
07:17 - we've got strings in the array and if we
07:20 - do that we can call show
07:23 - three and it has correctly now it does
07:27 - have that information correctly about
07:29 - the number number of elements in the
07:30 - array we're outp putting Apple orange
07:32 - banana here so this is all working and
07:36 - here C++ will check that you're passing
07:39 - in in an array with the correct number
07:40 - of elements so if we change that to two
07:44 - and we build that then we get an error
07:46 - um it won't let us run that uh it's
07:49 - possible some other compiler might give
07:50 - you just a warning but um I'm guessing
07:53 - most of them will give you an actual
07:55 - error you have to have the right number
07:57 - in there that's kind the point of
08:01 - it uh so three different useful syntaxes
08:05 - there for passing arrays I also just
08:07 - want to mention quickly uh returning an
08:09 - array from a function um so to do that
08:13 - the thing to do is return a pointer so
08:15 - we could say
08:17 - string
08:19 - pointer um get array let's call
08:23 - it and um what you must avoid is let's
08:28 - create an array here
08:31 - I'll put something different in it like
08:32 - 1
08:33 - 2
08:36 - 3 now you can return that text but you
08:40 - mustn't and if in fact if we build this
08:44 - we'll get probably a warning but not an
08:46 - error so this this has given me a
08:48 - warning which is nice but um this is no
08:52 - good at all because what's happening is
08:55 - we've got this array which is scoped to
08:57 - these brackets then we we we are
09:00 - returning a uh pointer to that array but
09:04 - we'll be that pointer will then point at
09:06 - something that no longer exists after
09:08 - this function returns so um you must not
09:12 - do that let's uh let's just put
09:16 - here um don't don't return pointers to
09:22 - local variables because that's really
09:25 - what this is It's a local variable and
09:27 - we can't return pointers to variables
09:30 - within functions because they don't
09:32 - exist anymore after you leave the
09:34 - function if you wanted um you could in
09:37 - fact declare the array somewhere where
09:40 - it's available to all functions so um if
09:44 - I put this up here like this let's call
09:47 - it something else the same
09:50 - numbers and then here I'm going to
09:52 - return
09:54 - numbers that would actually work so if
09:57 - we build this
10:02 - that would work just fine it's a bit
10:04 - useless because why returns something
10:06 - when it's it's available anywhere but
10:08 - the point uh really of this is just to
10:10 - show you that you can declare variables
10:12 - outside of any function and then they're
10:15 - going to be available in any function in
10:17 - your file below where you declare them
10:20 - um so whoops let's say
10:24 - here um could
10:27 - declare the
10:30 - CLA if I can spell it right variables
10:35 - here okay but um but whatever you do
10:39 - don't don't return um a local variable
10:42 - from a function cuz that's really going
10:44 - to mess things up and if you do need to
10:46 - return an array from a function you can
10:49 - uh just return it as a pointer and
10:52 - that's that's useful for example if
10:54 - you've um if you've used the new
10:58 - operator within your function let's take
11:01 - a quick look at that let's say we've got
11:03 - I use Char Just For Change here but this
11:06 - also applies to Strings we could say CHP
11:09 - pointer um I don't know
11:12 - get
11:15 - memory and in this function we could do
11:18 - something like
11:21 - um uh
11:23 - Char pointer p m equals new
11:30 - Char and then some some number of chars
11:33 - let's let's say 100 we could return
11:36 - pmen that's fine because we're using new
11:39 - we're explicitly allocating memory and
11:41 - that will not be de deallocated until
11:44 - you call delete on it so now we could do
11:46 - um Char pointer
11:49 - P um
11:51 - P memory I'll call it something
11:54 - different just to underscore that it's
11:56 - it is different we could call it PM
11:58 - again it doesn't matter equals get me
12:02 - memory like
12:04 - that but then we have to remember to
12:08 - free that memory later when you use new
12:11 - the responsibility is entirely on you to
12:14 - free up that memory so again although
12:17 - this is quite common clearly um it's not
12:21 - ideal because uh you have to know that
12:25 - this function when you call it you have
12:26 - to know that it allocates memory because
12:29 - you've got to delete it and again quite
12:31 - a common thing to do um would be to
12:35 - declare another function let's say um
12:39 - void void free
12:43 - memory which can take a Char pointer p
12:47 - m and then all that's going to
12:50 - do is to call
12:54 - delete like that so p m
12:59 - and then here we could say free
13:03 - memory P
13:06 - memory so this is also quite a common
13:09 - pattern in C++ let's just run that make
13:11 - sure it it actually builds and seems to
13:13 - work so if you create a function that
13:16 - allocates memory it's a common practices
13:19 - also to create a function that
13:21 - deallocates that memory and then in the
13:23 - documentation of your functions you can
13:25 - say okay if you call in this case get
13:28 - memory you must remember to call free
13:31 - memory to deallocate that memory so
13:33 - that's quite a common thing to do uh
13:35 - just to um just to avoid the user having
13:40 - to realize that um they need to free an
13:43 - array of memory you just provide them
13:47 - with a nice utility function to clean up
13:49 - whatever this function did and call them
13:51 - imp purs that's a common pattern in C++
13:54 - okay so to practice this um I'd
13:57 - recommend just just trying all of these
13:59 - things try passing an array to a
14:01 - function using these three different
14:03 - syntaxes use an array pass in the number
14:06 - of
14:07 - elements um use a pointer and also use a
14:11 - reference to an array and check that you
14:13 - can iterate through the array in your
14:15 - function you might also want to try just
14:17 - doing this creating a function that
14:19 - allocates memory and another function
14:21 - that deallocates some memory and if you
14:23 - want you can use that memory to do
14:25 - something put some characters or strings
14:27 - in there whenever your you're returning
14:30 - from that function so try those for
14:32 - yourself and try doing size of like I've
14:35 - done on the um on the array variable
14:39 - that you passed your function so you can
14:41 - see how size of responds in these three
14:44 - different
14:46 - situations and uh you can see if your
14:49 - compiler gives you a warning or not when
14:51 - you do something that you shouldn't do
14:54 - basically so um so that's it for this
14:57 - tutorial it's definitely worth
14:58 - practicing that just just try it for
14:59 - yourself passing arrange to functions
15:01 - using these three different syntaxes and
15:04 - until next time happy coding

Cleaned transcript:

hello this is John from Cave of programming. comom in this tutorial we're going to look at arrays and functions we're going to look at passing arrays two functions most of all and we're also going to have a quick look at returning arrays from functions so I'm in Eclipse as usual and I've got my um main function here and uh I'm using the G compiler as usual so I'm going to start by declaring an array here let's make it an array of strings which I'll call texts and um put the array brackets in there and I'll initialize that uh so if we initialize it we don't need to put the number of elements in the array as we've seen before so let's initialize it with um Apple orange and banana now supposing we want to pass this array to a function let's create a function up here let's make it void um I'll call it show in fact I'll call it show one because I'm going to have probably three of these let's say show one now the the kind of most intuitive way to pass an array to a function is to use the whole type of the array which is string text and um uh square brackets so um we don't have to call this text of course we could call it anything that we like uh we could call it strings or whatever could call it anything but I'll call it text just so I don't have to think of another name for this variable um and now we could we could pass that in so we could say pass the array into the function let's say show one and texts like that let's Loop through the array so let's say for in I equals not I less than three cuz there's three elements in the array I ++ and we'll do c out text I endler so this works exactly as you'd expect pretty much if we run this we've got Apple Orange banana now there is a problem here which is that um when we pass an array like this we lose the information about how many elements are actually in the array to underline that we could do see out here this will work see out size of text and that's going to give us um well a string occupies on this with this compiler 24 bytes so we've got three of them so the whole array is going to be 72 bytes so we get 72 there but if we try the same thing here for one thing um we probably well at least in my compiler I'm going to get a compil a warning so it's going to give me a warning but it still builds it's not an error and um so the warning is this stuff about size of on array function parameter will return size of string pointer what we actually get when we when we run it is we just get the size of the pointer which is the same as size of long which is um at least with this compiler which is 8 bytes so we've lost the size information with this syntax and for that reason it's it's a a common thing to do is to pass in the number of elements in the array uh as a parameter so let's say int um elements or we could call it n elements or something to underline that it's um excuse me to underline that it's a it's an integer it's a number let's say int element n elements and then we could pass that in uh here so that's three and we could use n elements here n elements and because we we definitely don't want to change this number for good practice we should declare it Con as well so that we can't change it within this function and if we run this it works as before I don't think we we saw any compiler warnings there oh yeah we would do because of this um so let's put a note here returns size of pointer that doesn't work and now if we build this we shouldn't see I don't expect to see any warnings here so it's fine now another uh syntax that you can use well in fact this is exactly equivalent to doing this where we pass a pointer like that um so this is is really exactly the same as this there's not there's not any difference um so if we if we do that let's call this show two it's going to work exactly the same so these two are equivalent and you'll recall that with a pointer you don't have size information there you have the information about how big the pointer variable is it's 8 bytes cuz it contains a memory address that can take 8 bytes to specify but we don't have the information about how many elements are in the array you can even uh put a number here um like three but C++ will just completely ignore it I could put two in there or whatever and we can still merrily pass in an array with three elements we don't even get a compiler warning with this compiler anyway um so this this is really useless there's no point putting a number there except perhaps is just to remind you uh about the number of elements that are expected there that's really the only thing that it's good for if you do want to retain size information you have to pass a pointer to the array let's show that so let's call this show three now we can get rid of the number of elements CU we're not going to need it and uh we can say string so we'll say string text array just as before and using this syntax you have to specify the number of elements in the array correctly so I'll say it's got going to have three elements now to pass in a reference you might expect that we just do this um this if you recall uh the tutorial on references but the problem is that this actually specifies an array of references to Strings which is um no use what we want is a reference to an array of strings so we actually have to put round brackets around this bit and perhaps this is the reason why this syntax I haven't seen it really Ed much it just doesn't look that look that nice but it does work and then we can use our old trick to get the um number of elements in the array we can say size of text divide by size of string because we've got strings in the array and if we do that we can call show three and it has correctly now it does have that information correctly about the number number of elements in the array we're outp putting Apple orange banana here so this is all working and here C++ will check that you're passing in in an array with the correct number of elements so if we change that to two and we build that then we get an error um it won't let us run that uh it's possible some other compiler might give you just a warning but um I'm guessing most of them will give you an actual error you have to have the right number in there that's kind the point of it uh so three different useful syntaxes there for passing arrays I also just want to mention quickly uh returning an array from a function um so to do that the thing to do is return a pointer so we could say string pointer um get array let's call it and um what you must avoid is let's create an array here I'll put something different in it like 1 2 3 now you can return that text but you mustn't and if in fact if we build this we'll get probably a warning but not an error so this this has given me a warning which is nice but um this is no good at all because what's happening is we've got this array which is scoped to these brackets then we we we are returning a uh pointer to that array but we'll be that pointer will then point at something that no longer exists after this function returns so um you must not do that let's uh let's just put here um don't don't return pointers to local variables because that's really what this is It's a local variable and we can't return pointers to variables within functions because they don't exist anymore after you leave the function if you wanted um you could in fact declare the array somewhere where it's available to all functions so um if I put this up here like this let's call it something else the same numbers and then here I'm going to return numbers that would actually work so if we build this that would work just fine it's a bit useless because why returns something when it's it's available anywhere but the point uh really of this is just to show you that you can declare variables outside of any function and then they're going to be available in any function in your file below where you declare them um so whoops let's say here um could declare the CLA if I can spell it right variables here okay but um but whatever you do don't don't return um a local variable from a function cuz that's really going to mess things up and if you do need to return an array from a function you can uh just return it as a pointer and that's that's useful for example if you've um if you've used the new operator within your function let's take a quick look at that let's say we've got I use Char Just For Change here but this also applies to Strings we could say CHP pointer um I don't know get memory and in this function we could do something like um uh Char pointer p m equals new Char and then some some number of chars let's let's say 100 we could return pmen that's fine because we're using new we're explicitly allocating memory and that will not be de deallocated until you call delete on it so now we could do um Char pointer P um P memory I'll call it something different just to underscore that it's it is different we could call it PM again it doesn't matter equals get me memory like that but then we have to remember to free that memory later when you use new the responsibility is entirely on you to free up that memory so again although this is quite common clearly um it's not ideal because uh you have to know that this function when you call it you have to know that it allocates memory because you've got to delete it and again quite a common thing to do um would be to declare another function let's say um void void free memory which can take a Char pointer p m and then all that's going to do is to call delete like that so p m and then here we could say free memory P memory so this is also quite a common pattern in C++ let's just run that make sure it it actually builds and seems to work so if you create a function that allocates memory it's a common practices also to create a function that deallocates that memory and then in the documentation of your functions you can say okay if you call in this case get memory you must remember to call free memory to deallocate that memory so that's quite a common thing to do uh just to um just to avoid the user having to realize that um they need to free an array of memory you just provide them with a nice utility function to clean up whatever this function did and call them imp purs that's a common pattern in C++ okay so to practice this um I'd recommend just just trying all of these things try passing an array to a function using these three different syntaxes use an array pass in the number of elements um use a pointer and also use a reference to an array and check that you can iterate through the array in your function you might also want to try just doing this creating a function that allocates memory and another function that deallocates some memory and if you want you can use that memory to do something put some characters or strings in there whenever your you're returning from that function so try those for yourself and try doing size of like I've done on the um on the array variable that you passed your function so you can see how size of responds in these three different situations and uh you can see if your compiler gives you a warning or not when you do something that you shouldn't do basically so um so that's it for this tutorial it's definitely worth practicing that just just try it for yourself passing arrange to functions using these three different syntaxes and until next time happy coding
