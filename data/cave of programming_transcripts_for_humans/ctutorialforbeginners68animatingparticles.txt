With timestamps:

00:17 - hello
00:18 - this is john from caveofprogramming.com
00:22 - in this tutorial we're going to take a
00:23 - look at actually animating particles
00:25 - making a move around the screen
00:28 - and a lot of the principles that we're
00:29 - going to look at here we'll
00:31 - um in this tutorial in the next few
00:33 - tutorials
00:34 - would also apply to animating everything
00:37 - so in
00:38 - sdl um at the moment we're doing pixel
00:40 - access
00:41 - we're putting a load of particles on the
00:43 - screen which are just individual pixels
00:46 - but sdl also allows you to put images on
00:48 - the screen
00:49 - which we won't look at in this tutorial
00:52 - but you can animate
00:53 - images in the same way that you can
00:55 - animate particles
00:58 - so at the moment what's what's happening
00:59 - in our main program here is we've got a
01:02 - game loop
01:03 - uh so even though at the moment that the
01:06 - particles are not changing position
01:08 - although they are changing color we're
01:10 - redrawing them as often as possible
01:13 - and uh usually for a game or a
01:15 - simulation like this
01:17 - you hope that uh your game loop will
01:20 - execute
01:21 - at least sort of 25 times a second i
01:24 - i guess here we're getting more than
01:27 - that i don't know how many 30 or 40
01:29 - um redraws a second probably on on my
01:34 - computer here
01:36 - and i think i'm building a debug target
01:39 - as well which
01:40 - will always run more slowly than the
01:42 - release target actually since we're not
01:44 - going to do any debugging i can probably
01:45 - go to project
01:47 - and build configurations
01:51 - set active and go to release because
01:53 - that will compile a version without
01:54 - debug symbols in
01:56 - and i haven't shown you how to use the
01:58 - debugger and we're probably not going to
01:59 - get onto that
02:00 - in this tutorial on basic c plus
02:04 - so we'll build a release one because
02:06 - without the debug symbols in it which
02:09 - we're not using anyway
02:10 - it will typically execute quite a lot
02:12 - faster
02:14 - so now just just to get us started with
02:17 - animation
02:17 - let's see if we can make the particles
02:19 - bounce around the screen
02:21 - sort of randomly which is not the final
02:24 - effect that we want to achieve
02:26 - but it would certainly be a bit more
02:29 - interesting than having them just sit
02:30 - there
02:31 - so since since we're redrawing the
02:33 - screen
02:34 - at least probably 30 times a second all
02:37 - we have to do
02:38 - is move the particles in in between
02:42 - redraws well actually we'll need to
02:43 - clear the screen
02:45 - and then move the particles every time
02:48 - we
02:48 - um every time we redraw the screen and
02:51 - that will give the illusion of movement
02:53 - so let's go to particle let's go to
02:57 - particle.h here actually
02:59 - because i want to give particle a method
03:02 - which i'll call
03:02 - update let's make it initially let's
03:06 - make it void
03:07 - update like that and this is going to
03:10 - update
03:10 - the position of the particle
03:13 - and ultimately probably the color as
03:16 - well but we'll leave that for the moment
03:18 - and then we'll go to particle.cpp and
03:20 - create that method here
03:22 - so we've got void particle column colon
03:26 - update
03:29 - so in here we can change the positions
03:32 - of the particles
03:33 - and let's just check what this error is
03:36 - here did i put that in the wrong place
03:39 - or something
03:40 - so we've got void update and particle.h
03:44 - and i'm editing the right particle.h and
03:48 - it's for some reason complaining that's
03:51 - not right
03:52 - let's try just building it
03:55 - maybe i've got the wrong particle.cpp
03:57 - yeah for some reason i put that in the
04:00 - wrong particle.cpp let's cut that from
04:02 - there
04:03 - save everything quit that and try
04:06 - putting it in the right file
04:07 - i should already close these projects as
04:09 - i go along so it does get confusing okay
04:11 - that's better
04:13 - so um what we can do in here is uh let's
04:16 - let's
04:17 - um let's create a constant here let's
04:19 - say constant
04:20 - uh double speed
04:24 - um yeah let's let's just
04:28 - have a speed and set it equal to
04:32 - some um some like quite small value
04:35 - like 0.01 and
04:39 - every time we call update which i need
04:41 - to call somewhere
04:42 - i'm going to add speed to the x and y
04:45 - coordinates let's say
04:47 - m underscore x plus equals
04:50 - speed and m underscore y
04:55 - plus equals speed now this isn't very
04:57 - good because
04:58 - they're all going to move in in the same
05:01 - direction but let's see what
05:02 - what effect this actually has
05:06 - let's go to um let's go to our main file
05:10 - here
05:11 - and before we draw the particles
05:14 - let's call update on each of them
05:17 - so um maybe i should do that
05:21 - yeah what i can do is i could call
05:23 - updates on each particle at this
05:25 - point after this but in fact what i'll
05:27 - do is i'll go to swarm.h
05:30 - and i also give swarm a void
05:33 - of date method i won't make it virtual
05:36 - because i'm not planning to override
05:38 - it and go to swarm.cpp
05:41 - let's have a void swarm column colon
05:44 - update
05:46 - and in there i can loop through all of
05:49 - the particles
05:51 - with a loop like this so it would be
05:54 - more efficient
05:56 - i suppose to update each of the
05:58 - particles positions
06:00 - in this loop but because
06:03 - i at least this computer doesn't
06:05 - particularly struggle with this
06:07 - i'm going to um go to the root of more
06:10 - elegant coding
06:11 - rather than greater efficiency and
06:13 - create a separate loop to do this
06:15 - so i've copied that loop where we loop
06:17 - through all the particles in the main
06:20 - uh sort of thing and here i can say for
06:23 - each particle
06:24 - m on m on the scope p particles
06:29 - and the array brackets here
06:33 - i dot update so i'm calling update on
06:36 - each particle
06:38 - um it's complaining about that for some
06:42 - reason
06:42 - i'm not sure why method update could not
06:44 - be resolved
06:46 - but i have added it to particle
06:50 - oh dear i think i'm editing the wrong
06:53 - swarm.cpp as well this is really a
06:55 - disaster
06:56 - let's cut this out of here put it in the
06:58 - right place
07:01 - and um save that
07:04 - and let's check my swann.h yes i also
07:08 - edited the wrong one there let's save
07:10 - that
07:11 - go back to swan.h and
07:14 - um put that in if i do this again i
07:18 - think i'm going to
07:18 - re-record the video but sometimes i like
07:20 - to leave these mistakes in
07:22 - just so that you can see what kind of
07:24 - thing
07:25 - typically goes wrong at least with me
07:28 - because i'm sure you'll make many of the
07:29 - same mistakes but let's close that
07:31 - project now
07:32 - okay so we've got swarm.cpp here the
07:35 - error has gone away now we're updating
07:37 - each particle
07:38 - and now in main.cpp when i do
07:41 - each of these loops i can call i'm going
07:44 - to put it down here for reasons that
07:46 - i'll show you in a bit
07:47 - let's call swarm dot update to update
07:50 - the positions
07:51 - of all of the particles
07:54 - so we've got our update code in our
07:56 - particle particle.update here
07:58 - and let's let's see what happens now
08:00 - when we run this
08:02 - so let's check it out so now all the
08:05 - particles have shot off in the same
08:07 - direction
08:08 - we're not getting any errors because
08:10 - we've made sure that we're not drawing
08:11 - pixels
08:13 - uh if they go out off the edge of the
08:14 - screen
08:16 - otherwise this would crash our program
08:18 - but we've taken care of that already
08:21 - and you can see it's leaving these
08:23 - trails because we're not clearing the
08:25 - screen
08:26 - in between drawing these particles so
08:28 - let's
08:29 - let's think about clearing the screen if
08:31 - we go to screen.cpp
08:34 - we've got a we've got an update method
08:38 - here
08:39 - and that's that's clearing the render up
08:41 - it's not clearing the particle buffer
08:44 - where we're drawing the particles so
08:47 - if you remember um when we
08:50 - when we draw our particles um we're
08:54 - actually
08:54 - using screen.set pixel and if we look at
08:57 - that
08:58 - that's drawing into this buffer which
09:01 - we're not clearing
09:03 - so the thing to do is um that we need to
09:06 - clear this buffer
09:08 - somewhere so if we look at main
09:11 - first we're doing set pixel and then
09:14 - we're doing screen.update
09:17 - probably the the right thing to do here
09:20 - is to create a screen dot clear
09:24 - method let's try that and see if see if
09:26 - that works
09:28 - i think that might do the trick
09:32 - and because there's there's nothing else
09:35 - here that we can really
09:38 - clear i don't think so
09:42 - let's try that let's go to um
09:45 - let's go to screen dot h
09:49 - and add here avoid clear
09:53 - method i'll go to screen.cpp and
09:57 - implement that
09:58 - doesn't matter too much where we put it
10:01 - so screen clear
10:05 - and in there i'm going to do mem set
10:08 - we're going to mem set the
10:10 - buffer that holds the particles
10:13 - so we're going to mem set each bite in
10:15 - there to naught
10:17 - to sort of clear it and the number of
10:21 - bytes is going to be the number of bytes
10:23 - of the buffer
10:24 - which in fact actually we've already got
10:26 - exactly what we want here
10:27 - so we did clear it when we initialized
10:30 - it
10:31 - so it's the screen width times the
10:32 - screen height because it holds um
10:36 - holds actually four bytes for each pixel
10:38 - in the screen
10:39 - times size of uint32 which is four bytes
10:43 - let's just let's just copy this line in
10:44 - fact it's going to be a bit
10:46 - quicker paste that in there
10:49 - and then if we go to main.cpp before we
10:52 - draw the particles here
10:54 - we can clear the screen
10:58 - so we can say um
11:01 - screen dot clear somewhere up here
11:05 - now let's see what that does so let's
11:06 - run this
11:08 - and now we can see that we've cleared
11:10 - the screen we've just got a massive load
11:11 - of particles that just
11:12 - all shuffle off to the lower
11:16 - um the lower right there
11:20 - so the reason they're doing that is
11:21 - because if we go to particle.cpp now
11:25 - we can see that where we've got this
11:27 - speed and we're just adding that value
11:29 - to the x and y so if you increase
11:32 - x it will move the particle to the left
11:35 - let's just demonstrate that for example
11:38 - we run this and we see the particles
11:41 - moving
11:42 - sorry to the right and
11:45 - if we increase y it actually moves them
11:48 - down because y
11:48 - increases uh from the top down to the
11:51 - bottom of the screen which is how the
11:52 - string is actually
11:53 - redrawn hopefully you can see that on
11:56 - your on this video
12:00 - and if we do them both at the same time
12:03 - then
12:04 - the effect is to move them diagonally
12:06 - down to the
12:07 - to the right and to the bottom
12:11 - well that's not very good what would
12:12 - really like is um would like them
12:14 - sort of moving uh randomly around a bit
12:18 - so what we could do is um we could have
12:22 - a let's say cons double x
12:26 - speed and we need to set this to some
12:29 - random value
12:30 - let's use rand divided by rand
12:34 - max to get a random number between
12:38 - naught and one and this um remember
12:41 - rand max is rand returns a random number
12:45 - from naught
12:46 - up to rand max and rand max is some big
12:49 - uh some big constant here it's this
12:52 - in fact ox7 and a bunch of f's in
12:55 - hexadecimal
12:57 - and remember that these are two integers
12:59 - so this would this would give us
13:01 - something not useful at all that would
13:03 - give us naught probably
13:04 - i suppose usually and but if we multiply
13:08 - this by a double if we multiply run by a
13:10 - double
13:11 - then we'll we'll get some we'll do
13:14 - double division instead of integer
13:16 - division and we'll get some useful
13:18 - result
13:19 - so let's let's try this
13:22 - and we can do the same to create a y
13:25 - speed as well
13:28 - so again we'll get another random number
13:30 - from there multiply it by
13:31 - a double i meant to put these brackets
13:34 - just around the top bit here because we
13:36 - want to make sure
13:37 - that we're dividing a double by an
13:39 - integer
13:40 - because um as long as we do this bit of
13:42 - a calculation first
13:44 - we've got a double and then when we
13:45 - divide by this integer
13:47 - we will still do double division as long
13:49 - as either the numerator
13:51 - or the denominator or a double you get
13:54 - floating point division which is what we
13:56 - want
13:58 - so now we can add x speed to x
14:01 - and y speed to y let's see how that
14:04 - looks
14:08 - so um we're still getting them
14:12 - in fact they
14:15 - are they even moving at different speeds
14:18 - i'm not completely
14:19 - sure they should be but they're still
14:22 - shuffling off
14:23 - to the bottom right which is not really
14:26 - that
14:26 - interesting um so
14:29 - we should be getting different speeds
14:31 - here though
14:33 - what we can do is what we really want is
14:37 - yeah you can see they're jiggling about
14:38 - as they move but on
14:41 - on average they end up moving with a
14:42 - sort of similar sort of average speed
14:45 - to make them move in different
14:46 - directions we want to make sure that x
14:48 - speed
14:49 - and y speed can be negative as well as
14:51 - positive
14:53 - so ra rand divided by around maps that's
14:56 - giving us a random number
14:58 - between um between
15:01 - naught and one what we really want is a
15:04 - random number between minus one
15:06 - and plus one so to do that we we can
15:09 - increase the range of this
15:11 - by multiplying it by two that's a random
15:13 - number from
15:15 - um from naught to
15:19 - two and then subtract one from it
15:24 - so subtract one so we want to get this
15:27 - in the right order let's
15:28 - just cut this down a bit so we want to
15:30 - multiply
15:31 - two by run two point naught that's very
15:34 - important to turn this into a double
15:36 - divide it by run max so that will give
15:39 - us the random number from naught to two
15:41 - and then subtract one which will give us
15:43 - a random number from minus one to plus
15:45 - one
15:46 - and that's what we want and once we've
15:48 - got that let's put more brackets around
15:50 - this we can multiply it by some
15:52 - speed constant that can determine
15:55 - for us um basically
15:59 - roughly how kind of fast that we want
16:00 - them to move so let's
16:02 - paste this in for y as well
16:06 - and we've got some sort of warning here
16:09 - this is just this bad character sequence
16:11 - which plagues me but i can see that
16:13 - there's a
16:13 - space underlined so there's obviously
16:16 - some weird
16:17 - non-printing character instead of a
16:19 - space so i just deleted that and put
16:20 - space in
16:22 - now let's let's run this again so now
16:25 - what we're seeing
16:26 - jiggling around in um in quite random
16:30 - ways
16:32 - now um they're behaving like flies
16:36 - the kind of the average speed of them is
16:38 - zero
16:39 - because um we recalculate the average
16:41 - speed every time we draw the particle
16:43 - what would make it more interesting is
16:45 - if we gave the particle its speed
16:48 - its direction when we initialize the
16:51 - particle and if that particular each
16:53 - particular particle
16:55 - then stuck to having the same speed and
16:57 - direction
16:58 - for its entire life so what we can do is
17:03 - take these out here let's cut them from
17:06 - there let's go to particle.h
17:08 - and paste them in here let's call them
17:12 - m m underscore
17:15 - x speed m underscore y speed
17:18 - i can't initialize these here so i'm
17:20 - going to get rid of the const
17:21 - here i'm going to copy this
17:25 - into the constructor of the particle
17:30 - so get rid of the declaration from the
17:31 - constructor
17:33 - like that and um get rid of the
17:37 - assignment from
17:40 - the header so get rid of this bit which
17:43 - we can't put
17:45 - where we declare the variable so i've
17:47 - declared the variables
17:49 - as well they're public variables but it
17:52 - doesn't doesn't matter for the moment
17:54 - in part in the particle class and in the
17:57 - implementation in the constructor
17:59 - then i assign the speeds to random
18:01 - speeds
18:02 - and then we can simply use them in this
18:05 - update
18:05 - method here
18:09 - so now if i run this we see something
18:12 - much more interesting
18:14 - particles are buzzing around and they're
18:16 - gradually all going to move off the edge
18:18 - of
18:18 - the screen and get lost
18:22 - now this isn't the final movement
18:24 - algorithm that i want to show you
18:25 - because
18:26 - it's a kind of a bit boring for our
18:29 - purposes here but i wanted to show you
18:31 - some of the basic principles of
18:32 - animation one last thing that i want to
18:34 - show you is
18:35 - we can make sure in this update method
18:38 - that the particles don't move
18:39 - off the edge so let's say here if
18:43 - m underscore x
18:47 - is less than naught
18:50 - or if m underscore
18:53 - x is greater than screen
18:57 - width really we should say is greater
19:00 - than or equal to screen width
19:03 - then we'll make the x speed
19:06 - equal to the negative of itself so that
19:10 - we reverse the direction
19:11 - in the x direction of the particle so
19:14 - um if the uh
19:17 - i'm sorry that's actually one because
19:20 - we've said that the particle is bouncing
19:21 - around in a
19:22 - box that goes from and this should be
19:24 - minus one come to think of it
19:28 - yeah so we we're making the particle
19:30 - bounce around in a box from minus one to
19:32 - plus one
19:33 - so if it exceeds those bounds then
19:36 - um then we're going to change the speed
19:40 - we're going to reverse the speed so we
19:41 - reverse the
19:42 - the x direction by taking the negative
19:45 - of itself
19:46 - and we don't have to worry too much
19:48 - about whether it could go off the edge
19:49 - of the screen
19:50 - because you know if the particle's
19:52 - already off the edge and we change the
19:53 - speed
19:54 - then it's still off the edge because the
19:57 - speed will only affect it next time
19:59 - update is called
20:00 - but we don't have to worry too much
20:01 - about that because we've made sure that
20:05 - pixels can't be set off the edge of the
20:07 - screen which could cause the program to
20:09 - crash
20:10 - so we don't have to worry let's do the
20:11 - same thing for y as well
20:13 - so if y is outside of this box
20:16 - of minus one to plus one then we can
20:20 - change the y
20:21 - speed to the negative whatever it is
20:23 - currently so if it's positive we make it
20:25 - negative
20:26 - if it's negative we make it positive and
20:29 - if we run this now
20:30 - we can see that now the particles stay
20:33 - within
20:34 - the screen and they're all just bouncing
20:35 - around randomly might be nicer
20:37 - if there was less of them and they're a
20:39 - bit slower actually
20:41 - let's go to where we initialize the
20:42 - speed here and
20:44 - make it slower and i'm also going to go
20:47 - to uh swarm.h and change the number of
20:51 - particles to a thousand
20:53 - so now we'll run this so
20:56 - as i say this isn't the final algorithm
20:59 - that we're going to use
21:00 - but it shows you the basic principles of
21:03 - animation and you can use this kind of
21:04 - thing
21:05 - for making a ball bounce around the
21:08 - screen for example
21:10 - so i'll leave it there for now and we've
21:13 - got some more things to do
21:14 - including blurring the screen and making
21:17 - the particles move in a much more
21:19 - interesting way
21:20 - so we'll tackle one of those in the next
21:22 - tutorial
21:24 - that's it for this tutorial and until
21:26 - next time happy coding
21:42 - you

Cleaned transcript:

hello this is john from caveofprogramming.com in this tutorial we're going to take a look at actually animating particles making a move around the screen and a lot of the principles that we're going to look at here we'll um in this tutorial in the next few tutorials would also apply to animating everything so in sdl um at the moment we're doing pixel access we're putting a load of particles on the screen which are just individual pixels but sdl also allows you to put images on the screen which we won't look at in this tutorial but you can animate images in the same way that you can animate particles so at the moment what's what's happening in our main program here is we've got a game loop uh so even though at the moment that the particles are not changing position although they are changing color we're redrawing them as often as possible and uh usually for a game or a simulation like this you hope that uh your game loop will execute at least sort of 25 times a second i i guess here we're getting more than that i don't know how many 30 or 40 um redraws a second probably on on my computer here and i think i'm building a debug target as well which will always run more slowly than the release target actually since we're not going to do any debugging i can probably go to project and build configurations set active and go to release because that will compile a version without debug symbols in and i haven't shown you how to use the debugger and we're probably not going to get onto that in this tutorial on basic c plus so we'll build a release one because without the debug symbols in it which we're not using anyway it will typically execute quite a lot faster so now just just to get us started with animation let's see if we can make the particles bounce around the screen sort of randomly which is not the final effect that we want to achieve but it would certainly be a bit more interesting than having them just sit there so since since we're redrawing the screen at least probably 30 times a second all we have to do is move the particles in in between redraws well actually we'll need to clear the screen and then move the particles every time we um every time we redraw the screen and that will give the illusion of movement so let's go to particle let's go to particle.h here actually because i want to give particle a method which i'll call update let's make it initially let's make it void update like that and this is going to update the position of the particle and ultimately probably the color as well but we'll leave that for the moment and then we'll go to particle.cpp and create that method here so we've got void particle column colon update so in here we can change the positions of the particles and let's just check what this error is here did i put that in the wrong place or something so we've got void update and particle.h and i'm editing the right particle.h and it's for some reason complaining that's not right let's try just building it maybe i've got the wrong particle.cpp yeah for some reason i put that in the wrong particle.cpp let's cut that from there save everything quit that and try putting it in the right file i should already close these projects as i go along so it does get confusing okay that's better so um what we can do in here is uh let's let's um let's create a constant here let's say constant uh double speed um yeah let's let's just have a speed and set it equal to some um some like quite small value like 0.01 and every time we call update which i need to call somewhere i'm going to add speed to the x and y coordinates let's say m underscore x plus equals speed and m underscore y plus equals speed now this isn't very good because they're all going to move in in the same direction but let's see what what effect this actually has let's go to um let's go to our main file here and before we draw the particles let's call update on each of them so um maybe i should do that yeah what i can do is i could call updates on each particle at this point after this but in fact what i'll do is i'll go to swarm.h and i also give swarm a void of date method i won't make it virtual because i'm not planning to override it and go to swarm.cpp let's have a void swarm column colon update and in there i can loop through all of the particles with a loop like this so it would be more efficient i suppose to update each of the particles positions in this loop but because i at least this computer doesn't particularly struggle with this i'm going to um go to the root of more elegant coding rather than greater efficiency and create a separate loop to do this so i've copied that loop where we loop through all the particles in the main uh sort of thing and here i can say for each particle m on m on the scope p particles and the array brackets here i dot update so i'm calling update on each particle um it's complaining about that for some reason i'm not sure why method update could not be resolved but i have added it to particle oh dear i think i'm editing the wrong swarm.cpp as well this is really a disaster let's cut this out of here put it in the right place and um save that and let's check my swann.h yes i also edited the wrong one there let's save that go back to swan.h and um put that in if i do this again i think i'm going to rerecord the video but sometimes i like to leave these mistakes in just so that you can see what kind of thing typically goes wrong at least with me because i'm sure you'll make many of the same mistakes but let's close that project now okay so we've got swarm.cpp here the error has gone away now we're updating each particle and now in main.cpp when i do each of these loops i can call i'm going to put it down here for reasons that i'll show you in a bit let's call swarm dot update to update the positions of all of the particles so we've got our update code in our particle particle.update here and let's let's see what happens now when we run this so let's check it out so now all the particles have shot off in the same direction we're not getting any errors because we've made sure that we're not drawing pixels uh if they go out off the edge of the screen otherwise this would crash our program but we've taken care of that already and you can see it's leaving these trails because we're not clearing the screen in between drawing these particles so let's let's think about clearing the screen if we go to screen.cpp we've got a we've got an update method here and that's that's clearing the render up it's not clearing the particle buffer where we're drawing the particles so if you remember um when we when we draw our particles um we're actually using screen.set pixel and if we look at that that's drawing into this buffer which we're not clearing so the thing to do is um that we need to clear this buffer somewhere so if we look at main first we're doing set pixel and then we're doing screen.update probably the the right thing to do here is to create a screen dot clear method let's try that and see if see if that works i think that might do the trick and because there's there's nothing else here that we can really clear i don't think so let's try that let's go to um let's go to screen dot h and add here avoid clear method i'll go to screen.cpp and implement that doesn't matter too much where we put it so screen clear and in there i'm going to do mem set we're going to mem set the buffer that holds the particles so we're going to mem set each bite in there to naught to sort of clear it and the number of bytes is going to be the number of bytes of the buffer which in fact actually we've already got exactly what we want here so we did clear it when we initialized it so it's the screen width times the screen height because it holds um holds actually four bytes for each pixel in the screen times size of uint32 which is four bytes let's just let's just copy this line in fact it's going to be a bit quicker paste that in there and then if we go to main.cpp before we draw the particles here we can clear the screen so we can say um screen dot clear somewhere up here now let's see what that does so let's run this and now we can see that we've cleared the screen we've just got a massive load of particles that just all shuffle off to the lower um the lower right there so the reason they're doing that is because if we go to particle.cpp now we can see that where we've got this speed and we're just adding that value to the x and y so if you increase x it will move the particle to the left let's just demonstrate that for example we run this and we see the particles moving sorry to the right and if we increase y it actually moves them down because y increases uh from the top down to the bottom of the screen which is how the string is actually redrawn hopefully you can see that on your on this video and if we do them both at the same time then the effect is to move them diagonally down to the to the right and to the bottom well that's not very good what would really like is um would like them sort of moving uh randomly around a bit so what we could do is um we could have a let's say cons double x speed and we need to set this to some random value let's use rand divided by rand max to get a random number between naught and one and this um remember rand max is rand returns a random number from naught up to rand max and rand max is some big uh some big constant here it's this in fact ox7 and a bunch of f's in hexadecimal and remember that these are two integers so this would this would give us something not useful at all that would give us naught probably i suppose usually and but if we multiply this by a double if we multiply run by a double then we'll we'll get some we'll do double division instead of integer division and we'll get some useful result so let's let's try this and we can do the same to create a y speed as well so again we'll get another random number from there multiply it by a double i meant to put these brackets just around the top bit here because we want to make sure that we're dividing a double by an integer because um as long as we do this bit of a calculation first we've got a double and then when we divide by this integer we will still do double division as long as either the numerator or the denominator or a double you get floating point division which is what we want so now we can add x speed to x and y speed to y let's see how that looks so um we're still getting them in fact they are they even moving at different speeds i'm not completely sure they should be but they're still shuffling off to the bottom right which is not really that interesting um so we should be getting different speeds here though what we can do is what we really want is yeah you can see they're jiggling about as they move but on on average they end up moving with a sort of similar sort of average speed to make them move in different directions we want to make sure that x speed and y speed can be negative as well as positive so ra rand divided by around maps that's giving us a random number between um between naught and one what we really want is a random number between minus one and plus one so to do that we we can increase the range of this by multiplying it by two that's a random number from um from naught to two and then subtract one from it so subtract one so we want to get this in the right order let's just cut this down a bit so we want to multiply two by run two point naught that's very important to turn this into a double divide it by run max so that will give us the random number from naught to two and then subtract one which will give us a random number from minus one to plus one and that's what we want and once we've got that let's put more brackets around this we can multiply it by some speed constant that can determine for us um basically roughly how kind of fast that we want them to move so let's paste this in for y as well and we've got some sort of warning here this is just this bad character sequence which plagues me but i can see that there's a space underlined so there's obviously some weird nonprinting character instead of a space so i just deleted that and put space in now let's let's run this again so now what we're seeing jiggling around in um in quite random ways now um they're behaving like flies the kind of the average speed of them is zero because um we recalculate the average speed every time we draw the particle what would make it more interesting is if we gave the particle its speed its direction when we initialize the particle and if that particular each particular particle then stuck to having the same speed and direction for its entire life so what we can do is take these out here let's cut them from there let's go to particle.h and paste them in here let's call them m m underscore x speed m underscore y speed i can't initialize these here so i'm going to get rid of the const here i'm going to copy this into the constructor of the particle so get rid of the declaration from the constructor like that and um get rid of the assignment from the header so get rid of this bit which we can't put where we declare the variable so i've declared the variables as well they're public variables but it doesn't doesn't matter for the moment in part in the particle class and in the implementation in the constructor then i assign the speeds to random speeds and then we can simply use them in this update method here so now if i run this we see something much more interesting particles are buzzing around and they're gradually all going to move off the edge of the screen and get lost now this isn't the final movement algorithm that i want to show you because it's a kind of a bit boring for our purposes here but i wanted to show you some of the basic principles of animation one last thing that i want to show you is we can make sure in this update method that the particles don't move off the edge so let's say here if m underscore x is less than naught or if m underscore x is greater than screen width really we should say is greater than or equal to screen width then we'll make the x speed equal to the negative of itself so that we reverse the direction in the x direction of the particle so um if the uh i'm sorry that's actually one because we've said that the particle is bouncing around in a box that goes from and this should be minus one come to think of it yeah so we we're making the particle bounce around in a box from minus one to plus one so if it exceeds those bounds then um then we're going to change the speed we're going to reverse the speed so we reverse the the x direction by taking the negative of itself and we don't have to worry too much about whether it could go off the edge of the screen because you know if the particle's already off the edge and we change the speed then it's still off the edge because the speed will only affect it next time update is called but we don't have to worry too much about that because we've made sure that pixels can't be set off the edge of the screen which could cause the program to crash so we don't have to worry let's do the same thing for y as well so if y is outside of this box of minus one to plus one then we can change the y speed to the negative whatever it is currently so if it's positive we make it negative if it's negative we make it positive and if we run this now we can see that now the particles stay within the screen and they're all just bouncing around randomly might be nicer if there was less of them and they're a bit slower actually let's go to where we initialize the speed here and make it slower and i'm also going to go to uh swarm.h and change the number of particles to a thousand so now we'll run this so as i say this isn't the final algorithm that we're going to use but it shows you the basic principles of animation and you can use this kind of thing for making a ball bounce around the screen for example so i'll leave it there for now and we've got some more things to do including blurring the screen and making the particles move in a much more interesting way so we'll tackle one of those in the next tutorial that's it for this tutorial and until next time happy coding you
