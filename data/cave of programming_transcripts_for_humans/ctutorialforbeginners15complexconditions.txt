With timestamps:

00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from Cave of
00:20 - programming. comom in this tutorial
00:22 - we're going to take a look at complex
00:24 - conditions in C++ by which I mean
00:28 - conditions that are made up of more than
00:30 - one Clause so let's put um a multi-line
00:34 - comment here um we can put SL star and
00:38 - finish it in Star slash and actually
00:41 - Eclipse helpfully puts in um asterisks
00:44 - for me here um if I hit return which uh
00:47 - are not part of a comment notation you
00:49 - only need slash star and star slash to
00:52 - start and end a multi-line comment but
00:56 - um these Stars just kind of make it look
00:58 - nicer so um
01:00 - so far we've seen uh equals equals which
01:04 - is um the equality test um
01:08 - operator we've seen uh not equals so
01:12 - that's not equals we've seen less than
01:16 - this is less than and we've seen greater
01:18 - than greater
01:20 - than now we can combine these conditions
01:24 - into more complicated Clauses so uh
01:28 - let's let's create value here let's say
01:30 - int value 1 = 7 and we'll have another
01:34 - one int value 2 value 2 equals
01:39 - 4 so we've seen that you can do things
01:42 - like if value one is less than
01:46 - 8 then um see out let's call this
01:50 - condition
01:52 - one and uh we'll put here condition one
01:56 - let's say condition one
01:58 - true and endler and we'll have an else
02:01 - as well so
02:03 - else uh we'll say condition one is
02:07 - false condition one
02:10 - false so that's that's less than if if
02:12 - we run this then we find that um we find
02:16 - that value one is less than 8 so this is
02:18 - true if we put greater than 8 then uh we
02:24 - get
02:26 - false now a couple of other conditions
02:29 - actually that worth mentioning are this
02:31 - so there's less than an equal to so uh
02:34 - sorry less than or equal two and greater
02:40 - than or equal to so greater than or
02:43 - equal
02:45 - two um sometimes you you it can be easy
02:49 - for beginners to confuse which way
02:51 - around these symbols go but if if you
02:53 - look at it equals um equals than greater
02:57 - than that would kind of look like a sort
02:59 - of arrow and it it's not an arrow um
03:02 - it's it's this so um this way around
03:05 - looks like something other than what it
03:06 - is but this way round actually looks um
03:09 - that that's actually correct this is
03:11 - less than or equal to well I suppose it
03:13 - looks like an arrow pointing to the left
03:15 - but anyway may maybe that will help you
03:17 - to remember so the less than or greater
03:19 - than has to go first and the equal to uh
03:22 - later and what that means is um if we
03:25 - say value is greater than or equal to
03:28 - Value one is greater than or equal to 7
03:31 - this will be true if value is greater
03:34 - than seven or it's equal to S so in
03:37 - either of the cases it's true and in
03:39 - this case value one is equal to seven so
03:42 - this evaluates as true it's also true um
03:46 - that it's if we say value one is greater
03:48 - than or equal to 8 um that's that's well
03:51 - that's false so let's run this it's not
03:53 - greater than um 8 and it's not equal to
03:56 - 8 if we say greater than or equal to
03:59 - five
04:00 - that's true it's not equal to five but
04:02 - it is greater than five so the these are
04:06 - um these are very very commonly used in
04:10 - C++ now we can combine all the
04:12 - conditions that we've seen so far into
04:14 - more complicated Clauses let's take a
04:18 - another example here and we'll call this
04:20 - condition two and I'm going to format
04:23 - that with the auto format
04:25 - there so we can say for example um if
04:29 - value
04:30 - one value one is equal
04:34 - to uh seven and value two is equal to
04:40 - four what what is this this this is um
04:44 - this is the and operator we need two
04:47 - ampersands here to represent and because
04:50 - a single Ampersand represents the um the
04:54 - bitwise and operator which we're going
04:56 - to see later on in this uh in this
04:59 - course course but this this um this
05:01 - means a logical and and what it means is
05:04 - that this entire condition is going to
05:07 - be true only if this is true the first
05:11 - clause and this is true the second
05:13 - Clause theyve both got to be true to
05:16 - make this equal to true so if we make
05:18 - one of them false for example we could
05:20 - say and value two is less than um three
05:24 - which it isn't it's four if we run this
05:28 - then we find that um this is false so
05:31 - now the first Clause here that's true
05:34 - value one is equal to 7 but value two is
05:37 - less than three that's false and so
05:40 - because they're not because we haven't
05:42 - got one is true and the other is true as
05:44 - well then the whole thing is
05:47 - false uh the way C++ reads this is it
05:51 - reads complex conditions from left to
05:53 - right so it's first going to evaluate
05:56 - this and um then if if if it's necessary
06:00 - and it and it is necessary for this and
06:02 - it will then evaluate the next condition
06:05 - here uh we we've also got a logical or
06:09 - so let's copy this and take a look at or
06:13 - we'll call this condition
06:17 - three and uh we're going to change the
06:20 - and here to two bars like that and this
06:23 - is or and again a single bar means the
06:25 - bitwise or which we'll also look at
06:27 - later in this course so you need a
06:29 - double bar like that for the logical or
06:32 - now what this does is it says the entire
06:35 - condition is true if either this is true
06:39 - or this is true so either one of them
06:41 - being true makes the condition true now
06:44 - here we see that value one is equal to
06:46 - seven so that's true value two is less
06:49 - than three that's false value two is
06:51 - four but the entire condition is true
06:54 - because just one of these is true so
06:57 - we're saying if this is true or this is
07:00 - true either of them being true will make
07:02 - the entire condition true so if we run
07:05 - this we find that the condition is
07:09 - true uh now again C++ will scan this
07:12 - from left to right so um it's going to
07:15 - say is this true value 1 equals 7 yes it
07:18 - is so it actually won't even bother
07:20 - doing this because um there's no need to
07:24 - it can already see just from this that
07:27 - the entire condition must be true
07:28 - because either one of these being true
07:31 - would make the whole condition true if
07:33 - the first one is true it doesn't have to
07:35 - evaluate the second bit if this was
07:37 - false it would have to say well okay the
07:38 - first one's false but we're doing an or
07:41 - here so um the second one could be true
07:44 - and that would make the whole thing true
07:45 - so in that case it has to evaluate the
07:47 - second one as well but if if it
07:50 - evaluates the first one and that's
07:52 - enough to make the whole condition true
07:54 - it won't even bother checking this
07:55 - second bit and sometimes you actually
07:57 - find codes like a uh sub routine call as
08:00 - we'll see later on in this second bit
08:03 - that is is deliberately not done um if
08:06 - the first bit is true in an or Clause
08:09 - like this but that's a pretty confusing
08:11 - way of writing code which I I wouldn't
08:13 - recommend at
08:15 - all now we can build up even more
08:17 - complicated conditions and it's very
08:19 - easy to get in a mess with conditions
08:22 - one thing uh one little thing is we can
08:24 - say if value um let's say value two is
08:28 - not not equal to
08:31 - 8 then um let's let's maybe copy let's
08:35 - maybe copy this stuff
08:39 - here and I'm going to put condition four
08:42 - here it's it's really important to name
08:44 - your variables and your uh well yeah
08:47 - name all your variables and sub routines
08:50 - which we'll see later with a name that
08:52 - illustrates what they actually do and
08:54 - here because I'm writing a demo program
08:56 - because there's no real purpose behind
08:58 - this to other than to demonstrate this
09:00 - I'm having to call them value but you
09:02 - shouldn't do that in your programs try
09:04 - to give them a meaningful name so here
09:07 - we're saying if value is not equal to 8
09:10 - uh then this is then we'll execute this
09:13 - if the condition's true value is not
09:15 - equal to 8 that's true then we'll do
09:17 - this otherwise we'll do this so this
09:20 - works and if we look at it we say well
09:21 - value two is not equal to 8 that is true
09:24 - uh value two is actually Four so we're
09:27 - going to do this and if we run this now
09:30 - we find that condition four is true but
09:33 - this is a little bit more confusing than
09:36 - if we made this equals equals and just
09:38 - swap these around so instead of doing a
09:41 - test for non-equality we could do a test
09:44 - for equality with equals equals and just
09:45 - swap those two those two bits of code
09:48 - around and that would be a bit easier to
09:51 - read so it's better to do that try not
09:54 - to use not equals in your conditions
09:57 - unless you you need to or unless unless
09:59 - you really feel that that makes the code
10:01 - easier to read
10:03 - somehow now you can make this even worse
10:05 - because we can combine multiple
10:08 - conditions let's say if value one is not
10:11 - equal to 8 and value two is equal to uh
10:18 - let's say value one is equal to 7 which
10:21 - it
10:22 - is um
10:25 - or uh value one is less than 10 which is
10:30 - true what's this going to do uh it's
10:34 - it's starting to be quite hard to
10:36 - understand you can't immediately look at
10:38 - this unless you're really good you've
10:39 - had lots of practice and say what what
10:42 - it does and uh you even for me I mean I
10:45 - couldn't immediately look at this uh in
10:48 - a in a program and think what it does
10:50 - especially not uh bearing in mind that
10:53 - these are usually going to be values
10:55 - that are calculated in your program
10:56 - they're usually not just going to be uh
10:58 - what what we call hardcoded literal
11:01 - values here we say hardcoded meaning
11:04 - we've actually put it in the program put
11:07 - the value in the program hardcoded it
11:09 - usually these are going to be the
11:10 - results of
11:11 - calculations and uh and that means that
11:13 - this is this can be quite hard to
11:15 - understand so if we look at it was
11:17 - saying if value 2 is not equal to 8
11:19 - let's just check this little warning
11:21 - sign here um yeah that's that's a good
11:23 - suggestion it says suggested parentheses
11:26 - parenthesis around expression so we'll
11:28 - take a look at
11:29 - that in a second but we're saying if
11:32 - value 2 is not equal to 8 and value 1 is
11:35 - equal to 7 is that true or false uh is
11:39 - value 2 not equal to 8 yes it is it's
11:42 - equal to four so that bit is true is
11:45 - value 1 equal to 7 yes it is so it's
11:48 - true so this whole bit is
11:50 - true and we're saying that or value one
11:53 - is less than 10 which actually is also
11:56 - true in this case let's make the and
11:58 - condition fults so let's say if value 2
12:02 - is not equal to 8 okay that's true and
12:05 - value 1 equals 10 now this bit's false
12:09 - but this bit's true and remember we're
12:12 - going to evaluate these from left to
12:13 - right so we're going to first do this
12:16 - C++ is going to take a look at this it's
12:18 - going to say is value 2 not equal to 8
12:21 - um that is true it's
12:25 - four uh so then it it it actually
12:27 - doesn't need to check this because the
12:29 - first oh yeah sorry it does need yeah it
12:32 - doesn't need to check it because um in
12:34 - an
12:35 - and uh what am I saying it you see I'm
12:40 - already getting confused myself yeah so
12:43 - in an and you've got to evaluate both
12:45 - bits of the expression to determine if
12:47 - the whole and is true so it says is
12:49 - value 2 not equal to 8 yes that's true
12:52 - but we have to check the other bit as
12:53 - well is value one equal to 10 no it's
12:56 - not so this whole condition is false but
13:00 - then it says this whole thing is going
13:01 - to be true if either this bit or this
13:06 - bit is true is value one less than 10
13:09 - yes it is so the whole condition is true
13:12 - reading it from left to right bit by bit
13:16 - when we run it we find that it's true
13:18 - but this is this is confusing it's it's
13:20 - difficult to read it's unpleasant we've
13:22 - got a not equals in there which makes it
13:24 - even more unpleasant and uh we're
13:26 - combining all these conditionals and
13:28 - we're relying on them being evaluated in
13:31 - a certain order uh for it to come out
13:34 - right so um when you have conditions
13:37 - like this uh it's best not to leave them
13:39 - in your program try to simplify them and
13:42 - there are two major things that we can
13:43 - do to simplify these conditions one well
13:45 - one thing actually one little thing
13:47 - would be to try to see if you can write
13:49 - this without not equals that would
13:51 - already be a little bit better um but
13:54 - then we can put parentheses around the
13:57 - individual clauses so let's at least put
13:59 - parenthe uh parenthesis parentheses I
14:02 - guess you say around this um because we
14:06 - can we can make it clear that that's got
14:10 - to be evaluated um before that's got to
14:13 - be evaluated as a block before we go on
14:15 - to do this so if we run this now it runs
14:19 - the same as before and it's true and the
14:21 - warning sign has gone away the warning
14:22 - was suggesting that I put these in and
14:24 - it's a bit clearer to read now another
14:27 - thing you can do
14:29 - that makes it um even clearer is if you
14:32 - really have to have a complicated
14:33 - condition like this um you can at least
14:37 - store the conditions in Boolean
14:38 - variables so supposing I say bu let's
14:42 - call it condition one
14:45 - equals um and I can say condition one is
14:49 - is this bit here let's copy
14:52 - this so this is relatively easy to
14:55 - understand we we've got the not equals
14:57 - in there so this is this is just an
14:59 - assignment operator we're going to
15:00 - evaluate this and store it in this
15:03 - condition when a program reaches this
15:04 - point it's going to it's going to
15:06 - evaluate this condition and store it in
15:09 - here as true or false cuz remember bull
15:11 - stores true or false so um let's put
15:15 - brackets around it to make it maybe even
15:18 - a bit clearer we could we can put
15:20 - brackets in kind of
15:21 - judiciously however we feel maybe maybe
15:24 - we feel that this looks a bit nicer for
15:27 - example that's fine
15:29 - so we're going to say if value 2 is not
15:32 - equal to 8 which um we can see is
15:36 - true and uh value one is equal to 10
15:40 - which is false so the whole condition is
15:42 - false and we could actually output that
15:44 - here let's output condition
15:47 - one to see that it is false and uh it's
15:52 - it's a really really good habit to get
15:54 - into the practice of as you go through
15:57 - your program if you calculate values or
15:59 - you get user input output them with a SE
16:03 - out like this if it's user input
16:05 - surround it with single quotes as I
16:07 - showed you earlier to make make doubly
16:10 - sure that the values you've calculated
16:11 - in your program are what you expect and
16:14 - do that before you go on to write the
16:16 - next bit of your program uh it's really
16:18 - bad just to build up a really
16:19 - complicated program not checking
16:21 - anything not stopping compiling and
16:24 - checking values as you add as you
16:25 - gradually build up the code and then
16:27 - when you get to the end you find it
16:29 - doesn't work and you've got a big task
16:30 - in debugging it it's much better to
16:32 - build up a program step by step checking
16:35 - that the values are what you expect as
16:37 - you go along and then you can save
16:38 - yourself a big headache later on we can
16:41 - then say bull condition two equals let's
16:45 - make it equal to this condition here
16:48 - value is less than 10 value one is less
16:50 - than 10 is value one less than 10 yes it
16:53 - is so this condition is going to be true
16:56 - let's output it and double check so um
17:00 - condition two we'll output that and we
17:02 - find that it's um we find that it's true
17:06 - remember zero is equivalent to false one
17:09 - is equivalent to true so now we've got
17:11 - one condition that's false and one
17:13 - condition that's true we can now let's
17:16 - copy all this to save some
17:18 - typing I'm going to call this condition
17:21 - five and we're going to get rid of this
17:23 - we can replace all of this
17:25 - now with condition
17:29 - one or condition
17:33 - condition condition two and that's
17:36 - that's a lot simpler to work out because
17:38 - it goes step by step and we see that
17:40 - this is going to be true uh condition
17:42 - five is true because although this is
17:44 - false this is true and this is saying if
17:48 - either of these are true if this is true
17:51 - or this is true the whole condition is
17:53 - true let's format that cuz we mustn't
17:55 - leave badly formatted code in there um
17:58 - for some reason my auto format oh yeah
18:01 - there we go it wasn't working but there
18:02 - we go it's working
18:04 - now um so it's it's easy to read this
18:07 - and now now that we we've checked these
18:09 - values as we develop the program we can
18:11 - get rid of the SE outs and it's easier
18:14 - to understand this than it is this
18:17 - particularly because it it kind of
18:18 - forces you to go step by step through it
18:21 - a little bit more and you don't have to
18:24 - rely on um understanding the order of
18:27 - the condition evaluation anymore it's
18:29 - clear what's being done in what order
18:32 - and it's easier to understand
18:34 - this so um that's it for this
18:38 - tutorial it's worth trying this for
18:40 - yourself if you want you can type out
18:42 - this exact code but it's even better if
18:45 - you declare some variables you can also
18:48 - experiment with strings which can be
18:50 - compared with equals equals and not
18:52 - equals and uh try various combinations
18:55 - of conditions um as I have done in this
18:58 - program try the logical and and the
19:01 - logical or try combining things and
19:03 - check that you get the results that you
19:05 - expect and also try really complicated
19:08 - conditions you can make them as long as
19:09 - you like but try breaking them up um try
19:12 - using the brackets but also then try
19:14 - breaking them up using separate Boolean
19:17 - variables and then combining them to
19:19 - create a much simpler expression like
19:22 - this so there's an art to do to doing
19:24 - this to figuring out how to create
19:26 - conditions that are as simple as
19:27 - possible
19:28 - and you have to strive to do that to try
19:31 - to make your code readable but it's it's
19:33 - really worth trying this and you'll find
19:35 - as you go along or I find that things
19:37 - don't work out as I as I expect just cuz
19:39 - I misread some little symbol or I forgot
19:42 - what the value of something was it's
19:44 - really easy to do that but um by trying
19:47 - this out for yourself and trying
19:49 - experimenting with code and using all of
19:51 - these conditions uh it really helps to
19:54 - get it into your head what what each one
19:55 - does and how you kind of pass them ment
19:58 - Mally how you break them down mentally
20:00 - to understand what's going on uh so
20:03 - that's it for this time uh by the way
20:05 - just a quick mention I originally
20:07 - created this tutorial and realized I've
20:09 - made loads of mistakes not in the code
20:12 - but in reading out what I was actually
20:13 - writing so I'm trying to write and uh
20:16 - talk about it at the same time so I've
20:18 - recreated this tutorial now and these um
20:21 - work spaces here are actually from my
20:23 - advanc C++ tutorial which um it's now uh
20:28 - October 2014 and this is going to be
20:30 - available soon uh so do look out for
20:32 - that if you manage to get through this
20:34 - tutorial okay so um until next time
20:37 - happy
20:40 - [Music]
20:57 - coding

Cleaned transcript:

hello this is John from Cave of programming. comom in this tutorial we're going to take a look at complex conditions in C++ by which I mean conditions that are made up of more than one Clause so let's put um a multiline comment here um we can put SL star and finish it in Star slash and actually Eclipse helpfully puts in um asterisks for me here um if I hit return which uh are not part of a comment notation you only need slash star and star slash to start and end a multiline comment but um these Stars just kind of make it look nicer so um so far we've seen uh equals equals which is um the equality test um operator we've seen uh not equals so that's not equals we've seen less than this is less than and we've seen greater than greater than now we can combine these conditions into more complicated Clauses so uh let's let's create value here let's say int value 1 = 7 and we'll have another one int value 2 value 2 equals 4 so we've seen that you can do things like if value one is less than 8 then um see out let's call this condition one and uh we'll put here condition one let's say condition one true and endler and we'll have an else as well so else uh we'll say condition one is false condition one false so that's that's less than if if we run this then we find that um we find that value one is less than 8 so this is true if we put greater than 8 then uh we get false now a couple of other conditions actually that worth mentioning are this so there's less than an equal to so uh sorry less than or equal two and greater than or equal to so greater than or equal two um sometimes you you it can be easy for beginners to confuse which way around these symbols go but if if you look at it equals um equals than greater than that would kind of look like a sort of arrow and it it's not an arrow um it's it's this so um this way around looks like something other than what it is but this way round actually looks um that that's actually correct this is less than or equal to well I suppose it looks like an arrow pointing to the left but anyway may maybe that will help you to remember so the less than or greater than has to go first and the equal to uh later and what that means is um if we say value is greater than or equal to Value one is greater than or equal to 7 this will be true if value is greater than seven or it's equal to S so in either of the cases it's true and in this case value one is equal to seven so this evaluates as true it's also true um that it's if we say value one is greater than or equal to 8 um that's that's well that's false so let's run this it's not greater than um 8 and it's not equal to 8 if we say greater than or equal to five that's true it's not equal to five but it is greater than five so the these are um these are very very commonly used in C++ now we can combine all the conditions that we've seen so far into more complicated Clauses let's take a another example here and we'll call this condition two and I'm going to format that with the auto format there so we can say for example um if value one value one is equal to uh seven and value two is equal to four what what is this this this is um this is the and operator we need two ampersands here to represent and because a single Ampersand represents the um the bitwise and operator which we're going to see later on in this uh in this course course but this this um this means a logical and and what it means is that this entire condition is going to be true only if this is true the first clause and this is true the second Clause theyve both got to be true to make this equal to true so if we make one of them false for example we could say and value two is less than um three which it isn't it's four if we run this then we find that um this is false so now the first Clause here that's true value one is equal to 7 but value two is less than three that's false and so because they're not because we haven't got one is true and the other is true as well then the whole thing is false uh the way C++ reads this is it reads complex conditions from left to right so it's first going to evaluate this and um then if if if it's necessary and it and it is necessary for this and it will then evaluate the next condition here uh we we've also got a logical or so let's copy this and take a look at or we'll call this condition three and uh we're going to change the and here to two bars like that and this is or and again a single bar means the bitwise or which we'll also look at later in this course so you need a double bar like that for the logical or now what this does is it says the entire condition is true if either this is true or this is true so either one of them being true makes the condition true now here we see that value one is equal to seven so that's true value two is less than three that's false value two is four but the entire condition is true because just one of these is true so we're saying if this is true or this is true either of them being true will make the entire condition true so if we run this we find that the condition is true uh now again C++ will scan this from left to right so um it's going to say is this true value 1 equals 7 yes it is so it actually won't even bother doing this because um there's no need to it can already see just from this that the entire condition must be true because either one of these being true would make the whole condition true if the first one is true it doesn't have to evaluate the second bit if this was false it would have to say well okay the first one's false but we're doing an or here so um the second one could be true and that would make the whole thing true so in that case it has to evaluate the second one as well but if if it evaluates the first one and that's enough to make the whole condition true it won't even bother checking this second bit and sometimes you actually find codes like a uh sub routine call as we'll see later on in this second bit that is is deliberately not done um if the first bit is true in an or Clause like this but that's a pretty confusing way of writing code which I I wouldn't recommend at all now we can build up even more complicated conditions and it's very easy to get in a mess with conditions one thing uh one little thing is we can say if value um let's say value two is not not equal to 8 then um let's let's maybe copy let's maybe copy this stuff here and I'm going to put condition four here it's it's really important to name your variables and your uh well yeah name all your variables and sub routines which we'll see later with a name that illustrates what they actually do and here because I'm writing a demo program because there's no real purpose behind this to other than to demonstrate this I'm having to call them value but you shouldn't do that in your programs try to give them a meaningful name so here we're saying if value is not equal to 8 uh then this is then we'll execute this if the condition's true value is not equal to 8 that's true then we'll do this otherwise we'll do this so this works and if we look at it we say well value two is not equal to 8 that is true uh value two is actually Four so we're going to do this and if we run this now we find that condition four is true but this is a little bit more confusing than if we made this equals equals and just swap these around so instead of doing a test for nonequality we could do a test for equality with equals equals and just swap those two those two bits of code around and that would be a bit easier to read so it's better to do that try not to use not equals in your conditions unless you you need to or unless unless you really feel that that makes the code easier to read somehow now you can make this even worse because we can combine multiple conditions let's say if value one is not equal to 8 and value two is equal to uh let's say value one is equal to 7 which it is um or uh value one is less than 10 which is true what's this going to do uh it's it's starting to be quite hard to understand you can't immediately look at this unless you're really good you've had lots of practice and say what what it does and uh you even for me I mean I couldn't immediately look at this uh in a in a program and think what it does especially not uh bearing in mind that these are usually going to be values that are calculated in your program they're usually not just going to be uh what what we call hardcoded literal values here we say hardcoded meaning we've actually put it in the program put the value in the program hardcoded it usually these are going to be the results of calculations and uh and that means that this is this can be quite hard to understand so if we look at it was saying if value 2 is not equal to 8 let's just check this little warning sign here um yeah that's that's a good suggestion it says suggested parentheses parenthesis around expression so we'll take a look at that in a second but we're saying if value 2 is not equal to 8 and value 1 is equal to 7 is that true or false uh is value 2 not equal to 8 yes it is it's equal to four so that bit is true is value 1 equal to 7 yes it is so it's true so this whole bit is true and we're saying that or value one is less than 10 which actually is also true in this case let's make the and condition fults so let's say if value 2 is not equal to 8 okay that's true and value 1 equals 10 now this bit's false but this bit's true and remember we're going to evaluate these from left to right so we're going to first do this C++ is going to take a look at this it's going to say is value 2 not equal to 8 um that is true it's four uh so then it it it actually doesn't need to check this because the first oh yeah sorry it does need yeah it doesn't need to check it because um in an and uh what am I saying it you see I'm already getting confused myself yeah so in an and you've got to evaluate both bits of the expression to determine if the whole and is true so it says is value 2 not equal to 8 yes that's true but we have to check the other bit as well is value one equal to 10 no it's not so this whole condition is false but then it says this whole thing is going to be true if either this bit or this bit is true is value one less than 10 yes it is so the whole condition is true reading it from left to right bit by bit when we run it we find that it's true but this is this is confusing it's it's difficult to read it's unpleasant we've got a not equals in there which makes it even more unpleasant and uh we're combining all these conditionals and we're relying on them being evaluated in a certain order uh for it to come out right so um when you have conditions like this uh it's best not to leave them in your program try to simplify them and there are two major things that we can do to simplify these conditions one well one thing actually one little thing would be to try to see if you can write this without not equals that would already be a little bit better um but then we can put parentheses around the individual clauses so let's at least put parenthe uh parenthesis parentheses I guess you say around this um because we can we can make it clear that that's got to be evaluated um before that's got to be evaluated as a block before we go on to do this so if we run this now it runs the same as before and it's true and the warning sign has gone away the warning was suggesting that I put these in and it's a bit clearer to read now another thing you can do that makes it um even clearer is if you really have to have a complicated condition like this um you can at least store the conditions in Boolean variables so supposing I say bu let's call it condition one equals um and I can say condition one is is this bit here let's copy this so this is relatively easy to understand we we've got the not equals in there so this is this is just an assignment operator we're going to evaluate this and store it in this condition when a program reaches this point it's going to it's going to evaluate this condition and store it in here as true or false cuz remember bull stores true or false so um let's put brackets around it to make it maybe even a bit clearer we could we can put brackets in kind of judiciously however we feel maybe maybe we feel that this looks a bit nicer for example that's fine so we're going to say if value 2 is not equal to 8 which um we can see is true and uh value one is equal to 10 which is false so the whole condition is false and we could actually output that here let's output condition one to see that it is false and uh it's it's a really really good habit to get into the practice of as you go through your program if you calculate values or you get user input output them with a SE out like this if it's user input surround it with single quotes as I showed you earlier to make make doubly sure that the values you've calculated in your program are what you expect and do that before you go on to write the next bit of your program uh it's really bad just to build up a really complicated program not checking anything not stopping compiling and checking values as you add as you gradually build up the code and then when you get to the end you find it doesn't work and you've got a big task in debugging it it's much better to build up a program step by step checking that the values are what you expect as you go along and then you can save yourself a big headache later on we can then say bull condition two equals let's make it equal to this condition here value is less than 10 value one is less than 10 is value one less than 10 yes it is so this condition is going to be true let's output it and double check so um condition two we'll output that and we find that it's um we find that it's true remember zero is equivalent to false one is equivalent to true so now we've got one condition that's false and one condition that's true we can now let's copy all this to save some typing I'm going to call this condition five and we're going to get rid of this we can replace all of this now with condition one or condition condition condition two and that's that's a lot simpler to work out because it goes step by step and we see that this is going to be true uh condition five is true because although this is false this is true and this is saying if either of these are true if this is true or this is true the whole condition is true let's format that cuz we mustn't leave badly formatted code in there um for some reason my auto format oh yeah there we go it wasn't working but there we go it's working now um so it's it's easy to read this and now now that we we've checked these values as we develop the program we can get rid of the SE outs and it's easier to understand this than it is this particularly because it it kind of forces you to go step by step through it a little bit more and you don't have to rely on um understanding the order of the condition evaluation anymore it's clear what's being done in what order and it's easier to understand this so um that's it for this tutorial it's worth trying this for yourself if you want you can type out this exact code but it's even better if you declare some variables you can also experiment with strings which can be compared with equals equals and not equals and uh try various combinations of conditions um as I have done in this program try the logical and and the logical or try combining things and check that you get the results that you expect and also try really complicated conditions you can make them as long as you like but try breaking them up um try using the brackets but also then try breaking them up using separate Boolean variables and then combining them to create a much simpler expression like this so there's an art to do to doing this to figuring out how to create conditions that are as simple as possible and you have to strive to do that to try to make your code readable but it's it's really worth trying this and you'll find as you go along or I find that things don't work out as I as I expect just cuz I misread some little symbol or I forgot what the value of something was it's really easy to do that but um by trying this out for yourself and trying experimenting with code and using all of these conditions uh it really helps to get it into your head what what each one does and how you kind of pass them ment Mally how you break them down mentally to understand what's going on uh so that's it for this time uh by the way just a quick mention I originally created this tutorial and realized I've made loads of mistakes not in the code but in reading out what I was actually writing so I'm trying to write and uh talk about it at the same time so I've recreated this tutorial now and these um work spaces here are actually from my advanc C++ tutorial which um it's now uh October 2014 and this is going to be available soon uh so do look out for that if you manage to get through this tutorial okay so um until next time happy coding
