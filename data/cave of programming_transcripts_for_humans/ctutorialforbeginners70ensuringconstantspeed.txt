With timestamps:

00:00 - [Music]
00:12 - [Music]
00:16 - hello this is John from cane of
00:20 - programming comm and this tutorial will
00:22 - gonna look at how we can ensure that our
00:26 - game you are simulation runs at the same
00:28 - speed on every computer that it runs on
00:32 - so the moment we've got this particle
00:35 - explosion it doesn't look very good we
00:39 - can see the individual pixels here I
00:41 - don't know if you can see them on the on
00:42 - this actual video but I'm sitting here
00:44 - and I can see the individual pixels they
00:46 - don't look kind of smoky or blurry or
00:49 - anything so it doesn't look that great
00:52 - and they also form a circle that's a bit
00:55 - too perfect they're all changing color
00:58 - at the same time and they're not really
01:00 - doing anything too interesting but what
01:02 - we have got is we've got a circular
01:04 - explosion at least now one problem with
01:08 - this is kind of hidden in that you won't
01:11 - necessarily notice it immediately but it
01:13 - is there is that this is just running as
01:17 - fast as it can depending on how fast the
01:21 - loop that we've got in main the game
01:23 - loop can iterate so on a really fast
01:27 - computer this explosion will happen
01:29 - really fast on a slower computer really
01:33 - slow so what what would like is we'd
01:36 - like to take account at the time in such
01:38 - a way that this runs at a similar speed
01:41 - on all different computers that it runs
01:45 - on what we need to do is in a particle
01:49 - dot cpp here this is where we are
01:52 - actually moving we're actually moving
01:54 - the particles we need to make we need to
01:57 - move the particles every time the loop
01:59 - iterates by an amount that's
02:02 - proportional to the amount of time that
02:04 - has passed since last time the loop
02:07 - iterated so let's have a look at and see
02:11 - how that actually pans out I'm gonna go
02:13 - to main dot cpp here in main dot CPP
02:16 - we've got any amount of time that has
02:18 - elapsed since
02:20 - the program started running and the
02:23 - first step is I'm going to supply that
02:25 - to this swarmed update the swarm class
02:28 - that manages our particles so that it
02:32 - knows what the time is basically let's
02:34 - put any laps to this swarmed update and
02:38 - let's go to swarm dot H change the
02:41 - prototype here to take a integer value
02:46 - the number of milliseconds that has
02:47 - passed since the program started and in
02:51 - the implementation as well we'll also
02:54 - add that now what I really want to tell
02:59 - each particle as is right through it
03:01 - here in the swarm update method this is
03:05 - where we're iterating through all our
03:06 - particles and updating each one
03:08 - individually I want to give it the
03:10 - amount of time has passed since last
03:12 - time update run so to do that we need to
03:16 - store the time the number of
03:19 - milliseconds that had passed since the
03:22 - program started last time this update
03:24 - method ran and then we can compare that
03:26 - to the number of milliseconds there's
03:28 - now passed when we're running update
03:30 - this time and subtract one from the
03:32 - other and we can get the interval that
03:34 - as he elapsed since last time the update
03:37 - method ran I'm gonna go to Swan dot H
03:40 - here and let's give this a private
03:44 - variable called int let's call it last
03:48 - time in the constructor of Swan dot CPP
03:54 - here in the pot and the constructor
03:58 - initialization this I can initialize
04:00 - last time to 0 and in elapsed here every
04:08 - time we finished using this update
04:10 - method I'm going to set last time to the
04:13 - total number of milliseconds as he
04:15 - elapsed since the program started
04:17 - running when I first go in to update I
04:20 - can then say int interval equals elapsed
04:26 - - last time so this again is I don't
04:31 - have a name for every
04:32 - a common sort of design pattern that we
04:34 - have while we're getting an interval and
04:37 - using it to find out how much times he
04:39 - lapsed since the last time we got that
04:42 - interval or it could be some other value
04:44 - and then where we're storing the present
04:49 - value at this interval
04:50 - oh sorry of that time restoring the kind
04:53 - of present time so that the next time we
04:55 - can get the interval again using the
04:58 - time that we just stored so now that
05:02 - we've done that we can pass the actual
05:04 - interval to particle update
05:06 - let's pass that in there and I need to
05:11 - go to particle to age and in the update
05:14 - method here let's give it a interval and
05:17 - in particle dot CPP let's change that as
05:21 - well so int interval and now all I have
05:25 - to do is when I'm not when I add the
05:27 - speed to the X&Y coordinates I need to
05:32 - multiply those speeds by the interval
05:34 - and that will ensure that the amount
05:39 - that we move each particle by when we
05:42 - run the update method is proportional to
05:45 - the amount of time this passed since we
05:47 - last move the particle thus ensuring
05:50 - hopefully that it will move at a similar
05:52 - speed on slower systems on slow system
05:55 - now its movement could be jerky but at
05:58 - least it's gonna be a similar amount of
06:02 - movement to what would find on a faster
06:04 - system and usually folk games that's
06:07 - what you want you don't want things to
06:08 - be just running a wire of a speed they
06:10 - happen to run out you want them to run
06:12 - at some consistent speed you'd rather
06:15 - have jerky motion on a slow system then
06:18 - have that game just running really
06:19 - slowly and it's equally bad especially
06:23 - for a game if you've got something that
06:25 - runs really fast on a fast system too
06:27 - fast for the user to respond to in a
06:29 - game so this really helps sort of sort
06:32 - things out a lot and so let's let's make
06:36 - sure everything's saved and build the
06:39 - project I've got an error here but I'm
06:41 - hoping it's gonna go away
06:44 - let's take a look well I don't see any
06:48 - errors yet so the error is gone away now
06:50 - so that's good let's run this and see
06:52 - how it looks might be a bit fast or slow
06:54 - yeah it seems very fast so let's go to
06:58 - skirt particle age particle dot cpp
07:04 - maybe and here were creating the speed
07:07 - that we want particle to move out let's
07:09 - just put another decimal place after the
07:12 - point in here to make the speed slower
07:14 - because I want to slow this done so we
07:17 - can really see what something there we
07:18 - go that's a lot better now we can see
07:20 - the circle performing so we still got
07:25 - quite a bit of work to do here or they
07:27 - were approaching the end of this now I'm
07:29 - sorry vit there for this tutorial and
07:31 - until next time happy coding
07:36 - [Music]
07:42 - you

Cleaned transcript:

hello this is John from cane of programming comm and this tutorial will gonna look at how we can ensure that our game you are simulation runs at the same speed on every computer that it runs on so the moment we've got this particle explosion it doesn't look very good we can see the individual pixels here I don't know if you can see them on the on this actual video but I'm sitting here and I can see the individual pixels they don't look kind of smoky or blurry or anything so it doesn't look that great and they also form a circle that's a bit too perfect they're all changing color at the same time and they're not really doing anything too interesting but what we have got is we've got a circular explosion at least now one problem with this is kind of hidden in that you won't necessarily notice it immediately but it is there is that this is just running as fast as it can depending on how fast the loop that we've got in main the game loop can iterate so on a really fast computer this explosion will happen really fast on a slower computer really slow so what what would like is we'd like to take account at the time in such a way that this runs at a similar speed on all different computers that it runs on what we need to do is in a particle dot cpp here this is where we are actually moving we're actually moving the particles we need to make we need to move the particles every time the loop iterates by an amount that's proportional to the amount of time that has passed since last time the loop iterated so let's have a look at and see how that actually pans out I'm gonna go to main dot cpp here in main dot CPP we've got any amount of time that has elapsed since the program started running and the first step is I'm going to supply that to this swarmed update the swarm class that manages our particles so that it knows what the time is basically let's put any laps to this swarmed update and let's go to swarm dot H change the prototype here to take a integer value the number of milliseconds that has passed since the program started and in the implementation as well we'll also add that now what I really want to tell each particle as is right through it here in the swarm update method this is where we're iterating through all our particles and updating each one individually I want to give it the amount of time has passed since last time update run so to do that we need to store the time the number of milliseconds that had passed since the program started last time this update method ran and then we can compare that to the number of milliseconds there's now passed when we're running update this time and subtract one from the other and we can get the interval that as he elapsed since last time the update method ran I'm gonna go to Swan dot H here and let's give this a private variable called int let's call it last time in the constructor of Swan dot CPP here in the pot and the constructor initialization this I can initialize last time to 0 and in elapsed here every time we finished using this update method I'm going to set last time to the total number of milliseconds as he elapsed since the program started running when I first go in to update I can then say int interval equals elapsed last time so this again is I don't have a name for every a common sort of design pattern that we have while we're getting an interval and using it to find out how much times he lapsed since the last time we got that interval or it could be some other value and then where we're storing the present value at this interval oh sorry of that time restoring the kind of present time so that the next time we can get the interval again using the time that we just stored so now that we've done that we can pass the actual interval to particle update let's pass that in there and I need to go to particle to age and in the update method here let's give it a interval and in particle dot CPP let's change that as well so int interval and now all I have to do is when I'm not when I add the speed to the X&Y coordinates I need to multiply those speeds by the interval and that will ensure that the amount that we move each particle by when we run the update method is proportional to the amount of time this passed since we last move the particle thus ensuring hopefully that it will move at a similar speed on slower systems on slow system now its movement could be jerky but at least it's gonna be a similar amount of movement to what would find on a faster system and usually folk games that's what you want you don't want things to be just running a wire of a speed they happen to run out you want them to run at some consistent speed you'd rather have jerky motion on a slow system then have that game just running really slowly and it's equally bad especially for a game if you've got something that runs really fast on a fast system too fast for the user to respond to in a game so this really helps sort of sort things out a lot and so let's let's make sure everything's saved and build the project I've got an error here but I'm hoping it's gonna go away let's take a look well I don't see any errors yet so the error is gone away now so that's good let's run this and see how it looks might be a bit fast or slow yeah it seems very fast so let's go to skirt particle age particle dot cpp maybe and here were creating the speed that we want particle to move out let's just put another decimal place after the point in here to make the speed slower because I want to slow this done so we can really see what something there we go that's a lot better now we can see the circle performing so we still got quite a bit of work to do here or they were approaching the end of this now I'm sorry vit there for this tutorial and until next time happy coding you
