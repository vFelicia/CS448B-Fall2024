With timestamps:

00:00 - [Music]
00:12 - [Music]
00:18 - hello this is John from Cave of
00:20 - programming. comom in this tutorial um
00:23 - I'm going to give you uh a solution to a
00:25 - little challenge that I posed in the
00:27 - last tutorial which was on um using size
00:31 - of uh particularly with arrays and I
00:35 - suggested there for um some practice you
00:38 - could use size of to iterate through an
00:40 - array instead of hardcoding the number
00:42 - of values in the array in your full
00:45 - loop and I suggested that you could try
00:48 - this on a multi-dimensional array if
00:49 - you're feeling particularly ambitious
00:52 - and because that's quite tricky um I'm
00:54 - going to actually give you the solution
00:56 - to that here so um have a go at it um if
01:00 - you feel up to the job it's worth trying
01:04 - and uh what the way we're going to do
01:06 - this actually is first let's investigate
01:08 - a little bit what we here we've got a
01:10 - multi-dimensional array um it's actually
01:13 - two rows here of um strings in this case
01:19 - although the stuff that I'm about to
01:20 - show you applies equally well to um to
01:23 - other types let's investigate a bit what
01:26 - we can get using size off here so let's
01:29 - say see out size of string for a
01:33 - start endler and let's run
01:38 - this so I've got um an unused variable
01:41 - warning here so the size of a string is
01:45 - 8 bytes it doesn't matter how many
01:48 - characters you put in the string the
01:50 - thing that we're actually storing in the
01:51 - array is um it's what we call a string
01:54 - object and that object uses memory
01:57 - that's allocated elsewhere so so so the
02:00 - actual these actual strings are not
02:03 - stored directly in the array we're
02:05 - storing these string objects in the
02:08 - array and um the memory for each
02:11 - particular object that contains the
02:13 - actual characters that actually exists
02:15 - somewhere else other than in the array
02:18 - so don't worry about that but basically
02:20 - this is the same as as if we had ins in
02:22 - the array we've got objects of a fixed
02:24 - size in the array and each one has eight
02:27 - bytes we can also do size of
02:31 - animals um well size of animals and that
02:34 - will tell us tell us the total size of
02:37 - the
02:38 - array so in in the arrays a hole we've
02:41 - got 48 bytes so each entry is eight
02:44 - bytes and we've got six of them 8 * 6 is
02:47 - 48 bytes and we can get the size of the
02:51 - um of the first row here which is going
02:52 - to be the same size as the second row CU
02:54 - all all the all the rows have to have
02:56 - the same number of values in in C++ so
03:00 - we can do do that by doing
03:02 - Animals zero that's the size of the
03:04 - first row and if we look at that we
03:07 - expect um 24 because we've got eight
03:10 - bytes and we've got three entries so
03:12 - that's 24 alog together
03:14 - bytes so to Lo through the array let's
03:17 - go through the outer array first let's
03:19 - say for in I equals n i less than this
03:24 - is a tricky bit and I'll leave that out
03:26 - for the moment I ++ let's put the
03:29 - brackets in
03:31 - um so we want the size of the total
03:33 - array just divided by the size of um the
03:36 - Sub sub arrays so that's going to be
03:39 - size
03:40 - of um animals that's the size of the
03:43 - total array divide by size of
03:47 - animals n which will give us the size of
03:51 - each of these subarrays they all have
03:52 - the same size and if we divide the total
03:55 - size of the array by the size of any one
03:58 - of its subarray s then we're going to
04:00 - get the number of subarrays in other
04:02 - words the number of rows in the array
04:04 - which is exactly what we
04:06 - want let's go through the inner loop
04:08 - here for INT J equals not J less than um
04:15 - well this is a tricky bit again
04:19 - j++ so now we want the size of um any of
04:22 - the subarrays which is size of animals n
04:26 - that's the size of the first subarray
04:28 - also the same size as second and however
04:30 - many we
04:31 - have divide by size of the items that we
04:36 - have in it which is string so that
04:38 - should work we divide the size of a
04:40 - subarray by the size of the items in it
04:43 - we get the number of elements in the
04:44 - array let's try that see
04:47 - out
04:49 - animals and um we need two square
04:52 - brackets here and we've got I and J in
04:55 - there for our
04:57 - indices and let's output this let's have
05:00 - some space there followed by flush so
05:04 - that we have um some space after each
05:07 - entry and then before the outer loop I'm
05:09 - going to put a new line character just
05:12 - so that we have each of the rows on our
05:14 - own line and let's run this so now we
05:17 - get if we've got it right um that's not
05:20 - what I intended let's just change this
05:22 - to flush so I want to have all the
05:25 - entries within one one row on the same
05:27 - on the same line that's why I put this
05:29 - space to separate the entries on one
05:31 - line now we've got fox dog cat Mouse
05:33 - squirel parrot which is what we have in
05:36 - our um in our uh 2D array our table in
05:40 - other words let's just put unsigned in
05:42 - in here because as we saw in the last
05:44 - tutorial we um we're going to get this
05:48 - warning otherwise with this
05:49 - compiler about uh comparing assigned and
05:53 - unsigned value so there we go and that
05:57 - should work that's it for this tutorial
06:00 - in the next tutorial I think we're going
06:02 - to look at the switch statement which is
06:05 - another kind of conditional statement
06:07 - bit similar to if um elith but um more
06:11 - kind of useful for some situations so
06:14 - until next time happy
06:16 - [Music]
06:28 - coding
06:29 - [Music]

Cleaned transcript:

hello this is John from Cave of programming. comom in this tutorial um I'm going to give you uh a solution to a little challenge that I posed in the last tutorial which was on um using size of uh particularly with arrays and I suggested there for um some practice you could use size of to iterate through an array instead of hardcoding the number of values in the array in your full loop and I suggested that you could try this on a multidimensional array if you're feeling particularly ambitious and because that's quite tricky um I'm going to actually give you the solution to that here so um have a go at it um if you feel up to the job it's worth trying and uh what the way we're going to do this actually is first let's investigate a little bit what we here we've got a multidimensional array um it's actually two rows here of um strings in this case although the stuff that I'm about to show you applies equally well to um to other types let's investigate a bit what we can get using size off here so let's say see out size of string for a start endler and let's run this so I've got um an unused variable warning here so the size of a string is 8 bytes it doesn't matter how many characters you put in the string the thing that we're actually storing in the array is um it's what we call a string object and that object uses memory that's allocated elsewhere so so so the actual these actual strings are not stored directly in the array we're storing these string objects in the array and um the memory for each particular object that contains the actual characters that actually exists somewhere else other than in the array so don't worry about that but basically this is the same as as if we had ins in the array we've got objects of a fixed size in the array and each one has eight bytes we can also do size of animals um well size of animals and that will tell us tell us the total size of the array so in in the arrays a hole we've got 48 bytes so each entry is eight bytes and we've got six of them 8 * 6 is 48 bytes and we can get the size of the um of the first row here which is going to be the same size as the second row CU all all the all the rows have to have the same number of values in in C++ so we can do do that by doing Animals zero that's the size of the first row and if we look at that we expect um 24 because we've got eight bytes and we've got three entries so that's 24 alog together bytes so to Lo through the array let's go through the outer array first let's say for in I equals n i less than this is a tricky bit and I'll leave that out for the moment I ++ let's put the brackets in um so we want the size of the total array just divided by the size of um the Sub sub arrays so that's going to be size of um animals that's the size of the total array divide by size of animals n which will give us the size of each of these subarrays they all have the same size and if we divide the total size of the array by the size of any one of its subarray s then we're going to get the number of subarrays in other words the number of rows in the array which is exactly what we want let's go through the inner loop here for INT J equals not J less than um well this is a tricky bit again j++ so now we want the size of um any of the subarrays which is size of animals n that's the size of the first subarray also the same size as second and however many we have divide by size of the items that we have in it which is string so that should work we divide the size of a subarray by the size of the items in it we get the number of elements in the array let's try that see out animals and um we need two square brackets here and we've got I and J in there for our indices and let's output this let's have some space there followed by flush so that we have um some space after each entry and then before the outer loop I'm going to put a new line character just so that we have each of the rows on our own line and let's run this so now we get if we've got it right um that's not what I intended let's just change this to flush so I want to have all the entries within one one row on the same on the same line that's why I put this space to separate the entries on one line now we've got fox dog cat Mouse squirel parrot which is what we have in our um in our uh 2D array our table in other words let's just put unsigned in in here because as we saw in the last tutorial we um we're going to get this warning otherwise with this compiler about uh comparing assigned and unsigned value so there we go and that should work that's it for this tutorial in the next tutorial I think we're going to look at the switch statement which is another kind of conditional statement bit similar to if um elith but um more kind of useful for some situations so until next time happy coding
