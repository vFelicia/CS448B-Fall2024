With timestamps:

00:00 - in this video we're going to write a
00:02 - program that uses three userdefined
00:06 - functions now here's a little exercise
00:09 - that you can do at this point if you
00:11 - want to just pause the video after I've
00:13 - described it so we need a program which
00:17 - asks the user to enter a
00:19 - password if they enter the correct
00:22 - password whatever we've decided that is
00:25 - it's going to print access
00:28 - granted otherwise it's going to print
00:30 - access denied so if you want an exercise
00:33 - you can pause the video and try to write
00:35 - that program at this stage you should be
00:37 - able to write that program I think and
00:40 - if you can't you probably want to
00:42 - consider increasing the amount of
00:44 - practice you're doing at this
00:47 - stage so let's go ahead and write that
00:50 - program in fact I'm going to start by
00:52 - printing a greeting let's say print
00:56 - welcome no un oror
01:00 - authorized users okay now I'm going to
01:04 - create somewhere maybe at the top a
01:07 - constant which will store the correct
01:10 - password let's make that hello which of
01:13 - course is a a terrible password that you
01:15 - should never
01:18 - use then we'll get the password from the
01:20 - user so let's say password lowercase now
01:24 - equals
01:26 - input enter your password let's have a
01:30 - space and a sort of prompt
01:33 - character then we'll check it so if
01:36 - password equals
01:40 - password then
01:42 - print access
01:47 - granted
01:49 - else
01:51 - print access
01:56 - denied let's run it and see if it works
02:03 - enter your password access denied enter
02:06 - your
02:07 - password hello okay that's working now
02:10 - with a small program like this you don't
02:13 - need to Define your own
02:15 - functions it's just not worth the effort
02:17 - and actually would make it more
02:19 - complicated but let's do it anyway
02:21 - because for a larger program you
02:24 - definitely need to be defining
02:27 - functions breaking your code down into
02:29 - functions makes it much easier to
02:32 - maintain and to fix and to understand so
02:36 - we'll start practicing that with this
02:38 - really small program
02:40 - here how can we break this down into
02:43 - functions well one way we could do it is
02:45 - we could have a greeting function that
02:48 - does this bit and we could have a
02:51 - password checking function that does
02:54 - this bit so let's do
02:57 - that we'll have a function here let's
02:59 - call call it defa greeting and I have
03:02 - the round brackets and the colon and
03:05 - that just displays the greeting to the
03:08 - user now we've got a bit that checks the
03:11 - password let's say
03:12 - def check uncore password round brackets
03:17 - colon and I have to indent this with a
03:20 - tab to say that this is the body of this
03:25 - function what about this constant up
03:28 - here well this will actually work if I
03:30 - just leave the constant there so one
03:32 - possibility is I could just leave it
03:35 - there another possibility is I could
03:38 - move it into this function doesn't
03:39 - really matter which one of those I
03:41 - choose so at the moment this will do
03:44 - nothing if I run it to make it run I've
03:46 - got to call the functions so let's say
03:49 - greeting that's the first thing we do
03:51 - and then we do check uncore
03:54 - password with round brackets on the end
03:56 - there and let's now try that
04:01 - so that now works now this is okay being
04:05 - it's a really small program but with a
04:08 - bigger program if you have lots of
04:10 - functions it can become quite hard to
04:12 - see where the program actually
04:15 - starts so a convention that we typically
04:18 - follow in Python is we have a function
04:22 - called main which is the entry point of
04:25 - the program that is it's the thing that
04:27 - kicks the whole program off so what I'm
04:30 - going to do is I'm going to put these in
04:32 - a function called main so let's just go
04:34 - to the top here and say def main there's
04:38 - nothing special about the word main it's
04:41 - just a common convention we need round
04:44 - brackets and a colon and then I indent
04:46 - these with a tab to say that they're
04:49 - part of this function and of course my
04:52 - tab is still being automatically
04:54 - translated into four
04:57 - spaces now again if I run this it's
04:59 - going to do nothing what I have to do is
05:01 - call Main to start the whole thing off
05:05 - so right at the bottom here I'm going to
05:09 - call Main like
05:11 - this that makes the main function run
05:15 - and then that will run the greeting
05:17 - function it will call the greeting
05:19 - function so it does this and when that's
05:22 - finished it will then call check
05:25 - password which does this let's try that
05:32 - and we can see that it
05:34 - works just as
05:37 - before but we've got a much more
05:39 - structured program which if we wanted to
05:42 - make it bigger add a lot more code into
05:45 - it we'd have a much better chance of
05:47 - maintaining a clear understandable
05:49 - structure now that it's broken down into
05:53 - separate functions than if we just put
05:55 - everything on one page so try this out
05:58 - for yourself if if you are confused by
06:00 - it at the moment I think you'll find
06:02 - that if you type it out and get it
06:04 - working it will seem less confusing
06:07 - after that and if you're feeling
06:09 - confident you can make up your own
06:11 - program with multiple functions don't
06:13 - forget to create a main function which
06:16 - then calls your other functions and
06:18 - you've got to run main you have to call
06:20 - Main right at the bottom of your program
06:23 - there you've been watching a free sample
06:25 - from my Python and machine learning for
06:28 - complete beginners called course I'm
06:30 - uploading enough videos from the start
06:32 - of the course to get you started with
06:34 - python and machine learning the full
06:36 - course is absolutely massive if you're
06:38 - interested in it please click the link
06:41 - in the description the complete course
06:43 - covers not only basic python but also
06:46 - some fairly Advanced python even some
06:48 - desktop programming stuff and then goes
06:51 - on to machine learning and artificial
06:53 - intelligence until next time happy
06:56 - coding

Cleaned transcript:

in this video we're going to write a program that uses three userdefined functions now here's a little exercise that you can do at this point if you want to just pause the video after I've described it so we need a program which asks the user to enter a password if they enter the correct password whatever we've decided that is it's going to print access granted otherwise it's going to print access denied so if you want an exercise you can pause the video and try to write that program at this stage you should be able to write that program I think and if you can't you probably want to consider increasing the amount of practice you're doing at this stage so let's go ahead and write that program in fact I'm going to start by printing a greeting let's say print welcome no un oror authorized users okay now I'm going to create somewhere maybe at the top a constant which will store the correct password let's make that hello which of course is a a terrible password that you should never use then we'll get the password from the user so let's say password lowercase now equals input enter your password let's have a space and a sort of prompt character then we'll check it so if password equals password then print access granted else print access denied let's run it and see if it works enter your password access denied enter your password hello okay that's working now with a small program like this you don't need to Define your own functions it's just not worth the effort and actually would make it more complicated but let's do it anyway because for a larger program you definitely need to be defining functions breaking your code down into functions makes it much easier to maintain and to fix and to understand so we'll start practicing that with this really small program here how can we break this down into functions well one way we could do it is we could have a greeting function that does this bit and we could have a password checking function that does this bit so let's do that we'll have a function here let's call call it defa greeting and I have the round brackets and the colon and that just displays the greeting to the user now we've got a bit that checks the password let's say def check uncore password round brackets colon and I have to indent this with a tab to say that this is the body of this function what about this constant up here well this will actually work if I just leave the constant there so one possibility is I could just leave it there another possibility is I could move it into this function doesn't really matter which one of those I choose so at the moment this will do nothing if I run it to make it run I've got to call the functions so let's say greeting that's the first thing we do and then we do check uncore password with round brackets on the end there and let's now try that so that now works now this is okay being it's a really small program but with a bigger program if you have lots of functions it can become quite hard to see where the program actually starts so a convention that we typically follow in Python is we have a function called main which is the entry point of the program that is it's the thing that kicks the whole program off so what I'm going to do is I'm going to put these in a function called main so let's just go to the top here and say def main there's nothing special about the word main it's just a common convention we need round brackets and a colon and then I indent these with a tab to say that they're part of this function and of course my tab is still being automatically translated into four spaces now again if I run this it's going to do nothing what I have to do is call Main to start the whole thing off so right at the bottom here I'm going to call Main like this that makes the main function run and then that will run the greeting function it will call the greeting function so it does this and when that's finished it will then call check password which does this let's try that and we can see that it works just as before but we've got a much more structured program which if we wanted to make it bigger add a lot more code into it we'd have a much better chance of maintaining a clear understandable structure now that it's broken down into separate functions than if we just put everything on one page so try this out for yourself if if you are confused by it at the moment I think you'll find that if you type it out and get it working it will seem less confusing after that and if you're feeling confident you can make up your own program with multiple functions don't forget to create a main function which then calls your other functions and you've got to run main you have to call Main right at the bottom of your program there you've been watching a free sample from my Python and machine learning for complete beginners called course I'm uploading enough videos from the start of the course to get you started with python and machine learning the full course is absolutely massive if you're interested in it please click the link in the description the complete course covers not only basic python but also some fairly Advanced python even some desktop programming stuff and then goes on to machine learning and artificial intelligence until next time happy coding
