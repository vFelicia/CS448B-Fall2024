With timestamps:

00:00 - hello this is John from k4 programming
00:03 - comm and this is a tutorial on for loops
00:06 - continuing my course on JavaScript and
00:09 - no js' for beginners so a for loop is
00:13 - probably the most common type of loop
00:16 - used in programming in general many of
00:19 - the constructs that we've seen and
00:20 - generally most or all of the ideas that
00:23 - we've seen really are found in a variety
00:26 - of programming languages with small
00:29 - differences between them and a full loop
00:33 - is one of those things that's ubiquitous
00:34 - in a wide range of programming languages
00:37 - and a for loop takes all the elements
00:40 - that you need to create a loop and
00:41 - basically puts them into a single
00:43 - construct so if we think how we would
00:46 - how we might write a while loop the so
00:48 - there are lots of ways to write while
00:50 - loops but one common way would be to
00:53 - create a counter set equal to zero and
00:56 - say while counter is less than 5 or
01:00 - whatever and within the loop you have to
01:03 - increment counter and we've seen this
01:06 - already so if I do console dot log and
01:09 - just output counter there then let's run
01:13 - this
01:16 - so if I write node and 4j s then we get
01:22 - output 0 1 2 3 4 let's just bring this
01:27 - up a little bit ok so if you look at
01:31 - look at what elements are here and now
01:32 - they don't all have to be present none
01:34 - of them have to be present actually to
01:37 - create a while loop if you if you were
01:39 - to write while like while true that
01:44 - would be an infinite loop and then you
01:46 - could have some way of breaking it
01:48 - inside the loop so one way is to use the
01:52 - break keyword I could write let's maybe
01:57 - take a quick look at that so I could
02:00 - write while true and I'll still
02:05 - increment the counter but here I'll say
02:08 - if counter is greater than or equal
02:13 - five break so the break keyword breaks a
02:19 - loop let's just take a look let's just
02:21 - run this and we get 0 1 2 3 4 so 5
02:27 - iterations in total worth worth trying
02:30 - out for yourself and the point here that
02:32 - I'm making is that none of these loop
02:35 - elements are essential nevertheless the
02:38 - most common way to write a while loop
02:41 - might be something similar to this and
02:45 - you don't even have to say well counter
02:47 - is less than 5 you could say you know
02:50 - set the counter to 10 and say well
02:53 - counter is greater than 0 and then
02:55 - decrement accounts with minus minus here
02:58 - so there are lots of possibilities but
02:59 - the important point is that there are
03:01 - three distinct parts to this three
03:05 - distinct working parts we've got a
03:08 - variable that we've created which we've
03:11 - initialized in this case to zero we've
03:13 - got a condition somewhere typically here
03:17 - that determines when the loop stops and
03:20 - we also increment the counter or we
03:23 - could decrement it depending on exactly
03:24 - how we're doing this loop now a for loop
03:29 - brings all those three different parts
03:30 - together and it looks like this so an
03:33 - infinite for Lu would look like this so
03:35 - we write four and again we have round
03:38 - brackets and we have curly brackets
03:39 - so this is the same as a while loop
03:41 - except we've got the four keyword and
03:43 - within these two brackets we need two
03:46 - semicolons like this which looks weird
03:48 - but you'll see why shortly if I just
03:51 - write console dot log in there
03:55 - let's output hello this is an infinite
03:58 - loop so if I run this it just goes on
04:02 - forever till I do control C and stop it
04:07 - but these three these two semicolons
04:12 - divide this area up into three sections
04:15 - which we can where we can put the three
04:18 - elements that we need of our loop so the
04:21 - first thing that we need is a loop
04:22 - counter and by the way it's really
04:24 - common to use really short for
04:27 - Abell names for loop counters especially
04:30 - in this situation and it's a it's
04:33 - actually particularly common to use I or
04:36 - if you've got another one you need
04:38 - another one maybe J maybe K so in
04:41 - general we avoid short cryptic variable
04:44 - names but when you use I in a loop
04:46 - everyone understands what it means so
04:49 - I'm going to write let I equals naught
04:52 - here now this first section here will
04:57 - actually run before the loop starts so
05:00 - that gives us an opportunity to create
05:03 - to declare and initialize a variable
05:06 - this second section here that's where we
05:11 - put the loop condition so this will be
05:13 - checked every time one iteration of the
05:16 - loop executes and as soon as the
05:19 - condition is no longer true the loop
05:21 - stops so that's right I less than less
05:26 - than five and then this third section
05:29 - here this is going to get run every time
05:34 - the loop iterates so after every
05:39 - iteration this section will get run
05:42 - let's put I plus plus so if you think
05:45 - how this is going to work now before the
05:48 - loop starts we declare this variable I
05:50 - and we initialize it to 0 and every time
05:55 - the loop goes round we are going to
06:00 - increment this variable I increase the
06:04 - value of it by 1 and then we're going to
06:07 - check we're going to see is it still
06:09 - less than 5 if it is do another
06:11 - iteration of the loop if it isn't stop
06:14 - the loop so let's actually output the
06:17 - value of I here as well and run this
06:20 - I'll just zoom out and we can see we've
06:25 - got hello 0 1 2 3 & 4 so 5 iterations of
06:30 - the loop because we keep going as long
06:33 - as I is less than 5 and we're starting I
06:35 - at 0 so 0 1 2 3 4
06:38 - I if you're if you're new to this the
06:41 - thing is just to practice this copy it
06:45 - from the video here and all from my
06:49 - github repository where you can find
06:52 - that at github comm slash cave of
06:54 - programming and then just go to the
06:56 - repository for nodejs
06:58 - and JavaScript and a really good thing
07:02 - to do is just to try it a few times and
07:06 - then try to write it without referring
07:09 - to any code so don't see if you can
07:14 - write it from memory in other words and
07:16 - in practice just make sure that you can
07:18 - write a for loop that executes any
07:21 - particular number of times that you want
07:24 - like three times two times ten times
07:27 - whatever so try it out and once you can
07:29 - do that you basically got the hang of it
07:31 - so it looks a little bit complicated at
07:34 - first to a complete beginner but you
07:36 - know it's just a little bit of stuff to
07:38 - remember there's this is not absolutely
07:40 - not obligatory to put these things in
07:44 - these different sections here the point
07:46 - of them is just that you have a section
07:48 - that runs before the loop starts you
07:50 - have a condition that's checked before
07:53 - every iteration of the loop and you have
07:57 - a thing that runs before every iteration
08:01 - of the loop except for the first one
08:03 - well actually I suppose it's better to
08:04 - say this runs after every iteration of
08:08 - the loop and this condition is checked
08:11 - before the loop executes so you can put
08:15 - what you what you like in these three
08:16 - sections and sometimes programs get a
08:19 - bit creative with them but that can get
08:21 - very unclear so that the clearest thing
08:23 - to do is to do stuff like this and if
08:26 - you've got other code put it somewhere
08:28 - else but nevertheless it isn't uncommon
08:31 - to see other stuff in here as well okay
08:34 - so until next time happy coding

Cleaned transcript:

hello this is John from k4 programming comm and this is a tutorial on for loops continuing my course on JavaScript and no js' for beginners so a for loop is probably the most common type of loop used in programming in general many of the constructs that we've seen and generally most or all of the ideas that we've seen really are found in a variety of programming languages with small differences between them and a full loop is one of those things that's ubiquitous in a wide range of programming languages and a for loop takes all the elements that you need to create a loop and basically puts them into a single construct so if we think how we would how we might write a while loop the so there are lots of ways to write while loops but one common way would be to create a counter set equal to zero and say while counter is less than 5 or whatever and within the loop you have to increment counter and we've seen this already so if I do console dot log and just output counter there then let's run this so if I write node and 4j s then we get output 0 1 2 3 4 let's just bring this up a little bit ok so if you look at look at what elements are here and now they don't all have to be present none of them have to be present actually to create a while loop if you if you were to write while like while true that would be an infinite loop and then you could have some way of breaking it inside the loop so one way is to use the break keyword I could write let's maybe take a quick look at that so I could write while true and I'll still increment the counter but here I'll say if counter is greater than or equal five break so the break keyword breaks a loop let's just take a look let's just run this and we get 0 1 2 3 4 so 5 iterations in total worth worth trying out for yourself and the point here that I'm making is that none of these loop elements are essential nevertheless the most common way to write a while loop might be something similar to this and you don't even have to say well counter is less than 5 you could say you know set the counter to 10 and say well counter is greater than 0 and then decrement accounts with minus minus here so there are lots of possibilities but the important point is that there are three distinct parts to this three distinct working parts we've got a variable that we've created which we've initialized in this case to zero we've got a condition somewhere typically here that determines when the loop stops and we also increment the counter or we could decrement it depending on exactly how we're doing this loop now a for loop brings all those three different parts together and it looks like this so an infinite for Lu would look like this so we write four and again we have round brackets and we have curly brackets so this is the same as a while loop except we've got the four keyword and within these two brackets we need two semicolons like this which looks weird but you'll see why shortly if I just write console dot log in there let's output hello this is an infinite loop so if I run this it just goes on forever till I do control C and stop it but these three these two semicolons divide this area up into three sections which we can where we can put the three elements that we need of our loop so the first thing that we need is a loop counter and by the way it's really common to use really short for Abell names for loop counters especially in this situation and it's a it's actually particularly common to use I or if you've got another one you need another one maybe J maybe K so in general we avoid short cryptic variable names but when you use I in a loop everyone understands what it means so I'm going to write let I equals naught here now this first section here will actually run before the loop starts so that gives us an opportunity to create to declare and initialize a variable this second section here that's where we put the loop condition so this will be checked every time one iteration of the loop executes and as soon as the condition is no longer true the loop stops so that's right I less than less than five and then this third section here this is going to get run every time the loop iterates so after every iteration this section will get run let's put I plus plus so if you think how this is going to work now before the loop starts we declare this variable I and we initialize it to 0 and every time the loop goes round we are going to increment this variable I increase the value of it by 1 and then we're going to check we're going to see is it still less than 5 if it is do another iteration of the loop if it isn't stop the loop so let's actually output the value of I here as well and run this I'll just zoom out and we can see we've got hello 0 1 2 3 & 4 so 5 iterations of the loop because we keep going as long as I is less than 5 and we're starting I at 0 so 0 1 2 3 4 I if you're if you're new to this the thing is just to practice this copy it from the video here and all from my github repository where you can find that at github comm slash cave of programming and then just go to the repository for nodejs and JavaScript and a really good thing to do is just to try it a few times and then try to write it without referring to any code so don't see if you can write it from memory in other words and in practice just make sure that you can write a for loop that executes any particular number of times that you want like three times two times ten times whatever so try it out and once you can do that you basically got the hang of it so it looks a little bit complicated at first to a complete beginner but you know it's just a little bit of stuff to remember there's this is not absolutely not obligatory to put these things in these different sections here the point of them is just that you have a section that runs before the loop starts you have a condition that's checked before every iteration of the loop and you have a thing that runs before every iteration of the loop except for the first one well actually I suppose it's better to say this runs after every iteration of the loop and this condition is checked before the loop executes so you can put what you what you like in these three sections and sometimes programs get a bit creative with them but that can get very unclear so that the clearest thing to do is to do stuff like this and if you've got other code put it somewhere else but nevertheless it isn't uncommon to see other stuff in here as well okay so until next time happy coding
