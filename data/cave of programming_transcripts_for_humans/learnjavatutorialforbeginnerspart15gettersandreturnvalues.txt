With timestamps:

00:17 - hello and welcome to another tutorial on
00:20 - beginners Java from cave of programming
00:23 - calm and mystics we're all going to look
00:26 - at and get methods or getters and also
00:29 - kill a lot more generally and returning
00:30 - values from methods so just to recap
00:34 - what we did in the last couple of
00:35 - tutorials I could create a class up here
00:38 - if one to two although you usually
00:40 - create classes in their own file and
00:43 - decline in public like this
00:44 - but I'll create a class just up here for
00:47 - a moment I'll call it person and let's
00:50 - give person some instance data source a
00:52 - string name I'll say int age and let's
00:55 - give them some behavior with a method so
00:57 - I'll save all we'd speak like this this
01:00 - out my name is and I'll have name in
01:05 - there and in my main method here I can
01:11 - create a personal object now so this is
01:13 - the idea of a person basically it's a
01:16 - person class and now I want to actually
01:18 - create a specific person so I need a
01:21 - variable that can refer to that person
01:23 - I'll call it person one and then here I
01:26 - say equals new person and here I'm magic
01:29 - ink into being an actual person well in
01:32 - software terms and then I can say person
01:37 - one dot name equals let's say Joe and
01:41 - person one age equals 25 and I could if
01:48 - I wanted I could call this speed method
01:49 - so if I run this now nothing's going to
01:53 - appear on the console because I'm not
01:55 - calling this method but I could say
01:58 - person one don't speak down here in
02:00 - Maine and if I run that then it invokes
02:04 - this code here now often in computing
02:07 - you want to use a method to either
02:10 - retrieve some data or calculate
02:12 - something and let's have a look at how I
02:17 - could have a method that calculated
02:19 - something so I'll say I'll say void
02:21 - calculate maybe years to retirement
02:27 - let's say
02:29 - and I'll do a calculation here I'll say
02:33 - in tears left equals and let's say this
02:37 - person retires at 65 horrible thought
02:41 - there you go
02:42 - I'll say 65 minus age and I'll make this
02:48 - method just output that information that
02:50 - it's calculated so I'll say years left
02:53 - here and again if I run that there's no
02:55 - nothing new down here but if I then call
02:58 - this method here so I actually invoke it
03:01 - I say person 1 dot calculate years left
03:04 - retirement and I run that then I get
03:06 - this 40 here which was calculated here
03:11 - now supposing that I I want this
03:15 - calculate method not to output anything
03:18 - I just want it to do the calculation and
03:20 - then tell me what result is in other
03:22 - words I in here in Maine I want to be
03:25 - able to get a result at this calculation
03:27 - and do what I like with it how could I
03:30 - do that well here you see that a keyword
03:34 - void a Java keyword and this says that
03:39 - this method and does not return anything
03:41 - we talk about methods returning values
03:44 - and I want to change that I want to say
03:46 - that this method is going to return this
03:49 - value here so the first step is to say
03:52 - int because I'm going to say this method
03:55 - returns a value of type int because
03:59 - years left is IV antutu type int and
04:02 - this the second step is down here in the
04:05 - bottom of the method I want to say
04:07 - return years left like this because here
04:12 - I've said it returns something of type
04:14 - int and here I'm saying
04:16 - yeah well I'm actually returning is
04:18 - years left and when you type return this
04:21 - will literally leave your method at that
04:22 - point which is why it's usually at a
04:25 - bottom although it might not be it could
04:26 - be somewhere else in your method
04:27 - enclosed in an if statement and it might
04:30 - only execute on the certain
04:31 - circumstances let's say and I can get
04:35 - rid of this here and if I run that now
04:37 - so you don't see anything of course but
04:40 - in my main program
04:42 - create a variable of type int and I
04:46 - could call it whatever I like let's call
04:49 - it years I could set that equal to and
04:51 - now I set it equal to the return value
04:56 - of this method so it looks like I'm
04:58 - setting it equal to this method but I'm
04:59 - not and this is actually this is a
05:02 - method here of course it's this and this
05:06 - is just data a variable and you can't
05:08 - set variable equal to a method but
05:10 - what's actually happening is I'm setting
05:13 - this equal to the return value of this
05:15 - method and this method is returning this
05:17 - here so years ends up being equal to
05:21 - whatever I returned here which is years
05:24 - left now I can output that and I can say
05:28 - Sissel years till retirement and let's
05:35 - just output that years there in my main
05:38 - program so this this return value has
05:42 - enabled me to get a value in my return
05:45 - in my main program and if this seems
05:49 - confusing at all to you which it will do
05:51 - if it's the first time you've seen it
05:52 - then definitely just type this out a few
05:54 - times yourself and just from typing it
05:56 - you'll start to feel familiar with it
05:59 - just make it work and try returning
06:01 - different values and now another really
06:04 - common thing to do besides returning the
06:07 - results of calculations is later on
06:11 - we're going to look at encapsulation
06:14 - which means encapsulation means that the
06:16 - data that you declare in a class is
06:19 - hidden away from other classes so in
06:22 - this case it would mean later on we're
06:24 - going to look at how you can stop other
06:26 - classes like this this class app I've
06:30 - got my main program in from accessing
06:32 - that data directly which it's doing here
06:35 - and so motivated by that we need some
06:39 - way of getting this information if if we
06:43 - do actually want to make it available in
06:44 - the main program here and what I could
06:47 - do is in the same way that here I've got
06:49 - this this method that returns the result
06:52 - of a calculation here
06:54 - I could have a get method the returns
06:56 - age I could say int get age and notice
07:01 - I'm I'm I've got I'm starting it with a
07:03 - lowercase G as always okay see the
07:06 - locate s so it starts with a lowercase
07:08 - letter but because I've got two words in
07:10 - it I don't capitalize this letter here
07:14 - to make it easier to read and then I'll
07:17 - put in the brackets and then I'll just
07:19 - say return age so this method now just
07:23 - returns this age and in my main program
07:25 - I could say let's say int age equals and
07:32 - I could say person 1 get age like that
07:38 - so this will end up being equal to this
07:43 - value here which is this and which at
07:47 - the moment I'm actually setting in my
07:48 - main program here so it's a bit of a
07:51 - convoluted trail and from here to here
07:54 - and and it's returned here and then it's
07:58 - it ends up in this variable here so and
08:01 - you need to follow that through and sort
08:03 - of get your head around it and I could
08:04 - do the same with string I can return
08:06 - their string types I could return the
08:09 - name here I could say strings I'm going
08:12 - to return name which is a type string
08:15 - get name I can say just return name so
08:21 - these are getting methods or get methods
08:23 - and if you're following a course on Java
08:25 - you'll get asked about these for sure
08:27 - and even if you're not you'll absolutely
08:31 - need to know how to do this and then in
08:34 - my main program I can say string name
08:37 - equals person 1 get name like that and
08:40 - just to show you that I can I'm really
08:42 - accessing those values I can say name is
08:47 - let's use the name here and then under
08:50 - that I'll say age is and let's use the
08:54 - age there and I'll get rid of this
08:57 - person 1 dot speed like commenting out a
08:59 - couple of slashes in front of it so this
09:02 - is no longer going to run but if I run
09:05 - run this program now so I get this runs
09:08 - and then I get methods are returning the
09:11 - name and the age from my object which I
09:15 - actually set here okay so and this for a
09:22 - moment I just wanted to show you how to
09:23 - have methods that return things you can
09:26 - also return arrays by the way in just
09:27 - just the same way and this is going to
09:32 - make more sense in future when we
09:34 - actually encapsulate this data and hide
09:37 - it away using the keyword private or
09:39 - protected but for a moment just you know
09:43 - just get get used to how these methods
09:45 - work because you will need to know about
09:48 - this and here in this tutorial we've
09:52 - looked getting values from methods and
09:55 - in the next tutorial we're going to look
09:57 - at passing values into methods and we're
10:00 - going to look at setters and set methods
10:03 - so until then have fun with this and
10:08 - definitely take that out and practice
10:09 - this a bit if it's new to and until next
10:13 - time happy coding
10:30 - you

Cleaned transcript:

hello and welcome to another tutorial on beginners Java from cave of programming calm and mystics we're all going to look at and get methods or getters and also kill a lot more generally and returning values from methods so just to recap what we did in the last couple of tutorials I could create a class up here if one to two although you usually create classes in their own file and decline in public like this but I'll create a class just up here for a moment I'll call it person and let's give person some instance data source a string name I'll say int age and let's give them some behavior with a method so I'll save all we'd speak like this this out my name is and I'll have name in there and in my main method here I can create a personal object now so this is the idea of a person basically it's a person class and now I want to actually create a specific person so I need a variable that can refer to that person I'll call it person one and then here I say equals new person and here I'm magic ink into being an actual person well in software terms and then I can say person one dot name equals let's say Joe and person one age equals 25 and I could if I wanted I could call this speed method so if I run this now nothing's going to appear on the console because I'm not calling this method but I could say person one don't speak down here in Maine and if I run that then it invokes this code here now often in computing you want to use a method to either retrieve some data or calculate something and let's have a look at how I could have a method that calculated something so I'll say I'll say void calculate maybe years to retirement let's say and I'll do a calculation here I'll say in tears left equals and let's say this person retires at 65 horrible thought there you go I'll say 65 minus age and I'll make this method just output that information that it's calculated so I'll say years left here and again if I run that there's no nothing new down here but if I then call this method here so I actually invoke it I say person 1 dot calculate years left retirement and I run that then I get this 40 here which was calculated here now supposing that I I want this calculate method not to output anything I just want it to do the calculation and then tell me what result is in other words I in here in Maine I want to be able to get a result at this calculation and do what I like with it how could I do that well here you see that a keyword void a Java keyword and this says that this method and does not return anything we talk about methods returning values and I want to change that I want to say that this method is going to return this value here so the first step is to say int because I'm going to say this method returns a value of type int because years left is IV antutu type int and this the second step is down here in the bottom of the method I want to say return years left like this because here I've said it returns something of type int and here I'm saying yeah well I'm actually returning is years left and when you type return this will literally leave your method at that point which is why it's usually at a bottom although it might not be it could be somewhere else in your method enclosed in an if statement and it might only execute on the certain circumstances let's say and I can get rid of this here and if I run that now so you don't see anything of course but in my main program create a variable of type int and I could call it whatever I like let's call it years I could set that equal to and now I set it equal to the return value of this method so it looks like I'm setting it equal to this method but I'm not and this is actually this is a method here of course it's this and this is just data a variable and you can't set variable equal to a method but what's actually happening is I'm setting this equal to the return value of this method and this method is returning this here so years ends up being equal to whatever I returned here which is years left now I can output that and I can say Sissel years till retirement and let's just output that years there in my main program so this this return value has enabled me to get a value in my return in my main program and if this seems confusing at all to you which it will do if it's the first time you've seen it then definitely just type this out a few times yourself and just from typing it you'll start to feel familiar with it just make it work and try returning different values and now another really common thing to do besides returning the results of calculations is later on we're going to look at encapsulation which means encapsulation means that the data that you declare in a class is hidden away from other classes so in this case it would mean later on we're going to look at how you can stop other classes like this this class app I've got my main program in from accessing that data directly which it's doing here and so motivated by that we need some way of getting this information if if we do actually want to make it available in the main program here and what I could do is in the same way that here I've got this this method that returns the result of a calculation here I could have a get method the returns age I could say int get age and notice I'm I'm I've got I'm starting it with a lowercase G as always okay see the locate s so it starts with a lowercase letter but because I've got two words in it I don't capitalize this letter here to make it easier to read and then I'll put in the brackets and then I'll just say return age so this method now just returns this age and in my main program I could say let's say int age equals and I could say person 1 get age like that so this will end up being equal to this value here which is this and which at the moment I'm actually setting in my main program here so it's a bit of a convoluted trail and from here to here and and it's returned here and then it's it ends up in this variable here so and you need to follow that through and sort of get your head around it and I could do the same with string I can return their string types I could return the name here I could say strings I'm going to return name which is a type string get name I can say just return name so these are getting methods or get methods and if you're following a course on Java you'll get asked about these for sure and even if you're not you'll absolutely need to know how to do this and then in my main program I can say string name equals person 1 get name like that and just to show you that I can I'm really accessing those values I can say name is let's use the name here and then under that I'll say age is and let's use the age there and I'll get rid of this person 1 dot speed like commenting out a couple of slashes in front of it so this is no longer going to run but if I run run this program now so I get this runs and then I get methods are returning the name and the age from my object which I actually set here okay so and this for a moment I just wanted to show you how to have methods that return things you can also return arrays by the way in just just the same way and this is going to make more sense in future when we actually encapsulate this data and hide it away using the keyword private or protected but for a moment just you know just get get used to how these methods work because you will need to know about this and here in this tutorial we've looked getting values from methods and in the next tutorial we're going to look at passing values into methods and we're going to look at setters and set methods so until then have fun with this and definitely take that out and practice this a bit if it's new to and until next time happy coding you
