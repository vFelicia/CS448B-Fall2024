With timestamps:

00:00 - hello this is john from
00:02 - caveofprogramming.com
00:04 - this is another video in my javascript
00:07 - and node.js
00:08 - for complete beginners course and in
00:10 - this video we're going to tackle
00:11 - approximating pi
00:13 - so we're going to do the exercise that i
00:15 - gave you in the last video
00:17 - so the first step as we've seen is we
00:19 - want to get these numbers
00:21 - on the bottoms of these fractions here
00:24 - so that's
00:24 - we can think of the first term so these
00:27 - are term
00:28 - we call them terms of the equation oh by
00:31 - the way
00:31 - i want to mention that people often ask
00:34 - do you need to know a lot of mathematics
00:35 - to do programming and the answer is no
00:37 - i picked a mathematical example but you
00:40 - could have a career in programming
00:42 - and this might end up being in a way the
00:44 - most mathematical thing you ever do
00:46 - you know so don't be put off by the idea
00:48 - that programming's mathematics because
00:50 - it isn't
00:51 - but anyway you can think of this first
00:53 - term here as one divided by one
00:55 - and that will help because then the
00:56 - numbers on the bottom here are one
00:58 - three five seven nine so the first step
01:01 - is let's see if we can write a program
01:03 - that outputs the values one three five
01:05 - seven nine and if you had a go at this
01:07 - and you didn't manage to
01:09 - do it then do feel free to stop at any
01:12 - point
01:12 - and implement whatever bit of this you
01:14 - think you might be able to implement
01:17 - so um we're going to need a loop let's
01:19 - leave that console.log
01:21 - math.pi in in here um but i'll move it
01:25 - to the bottom and actually i'll comment
01:26 - it out
01:27 - so in other words if i put two uh
01:31 - slashes at the beginning that turns the
01:33 - rest of the line into a comment
01:35 - which is useful for documentation but it
01:37 - doesn't
01:38 - actually do anything in terms of your
01:41 - code
01:42 - so that's quite a useful thing to do and
01:44 - we call this commenting something out
01:46 - where we temporarily turn it into a
01:48 - comment and deactivate it
01:50 - okay so um if i've got a
01:53 - loop i'm going to need a counter let's
01:55 - create a loop counter and set it equal
01:57 - to naught
01:58 - and then i'll have while counter let's
02:00 - put less than five
02:02 - initially just some small value while
02:04 - we're developing this
02:06 - so i've got my brackets on my right
02:07 - counter plus plus
02:11 - so now we've got a loop but there's
02:13 - nothing in the loop
02:15 - um so now let's maybe create a value
02:19 - which will create a variable which we're
02:22 - going to add 2
02:23 - to every time so the variable is going
02:25 - to um
02:26 - it's going to be have values 1 3 5 7 9
02:29 - and so on
02:30 - so i'll call this well since this is
02:33 - going to end up
02:34 - on the bottom of our fraction and that's
02:36 - called the denominator
02:38 - i'm going to call this denominator
02:43 - in nato equals
02:46 - 1 to start with then in the loop
02:49 - i can add 2 to that every time so
02:52 - denominator equals
02:54 - denominator plus 2.
02:57 - now if we output it down here
03:00 - um the first value that we see will be
03:03 - one plus
03:04 - two which is of course three but if we
03:07 - output it here
03:09 - above where we increase the value of it
03:13 - the first value will be one which is
03:15 - what we want so let's
03:16 - write here in fact i'll put these two
03:20 - lines together because they're kind of
03:21 - similar con
03:23 - soul dot log denominator
03:29 - all right and let's run this and see if
03:31 - we've succeeded so far
03:33 - so node pi js and we see we've got one
03:35 - three five seven nine
03:36 - that's exactly what we want now the
03:39 - other thing that we
03:40 - we need here is um so we need to form a
03:43 - fraction
03:45 - and uh we actually we could do that step
03:48 - next let's just do that
03:50 - so instead of outputting one three five
03:52 - seven nine
03:53 - we need to output one divided by one one
03:55 - divided by three
03:56 - one divided by five and so on and that's
03:58 - pretty easy to do
04:00 - so all we have to do is change this to 1
04:02 - divided by
04:04 - denominator and if we run this
04:10 - and we've got 1 divided by 1 1 divided
04:13 - by three or a third
04:14 - one divided by two is a half
04:17 - um sorry one divided by what must what
04:20 - am i talking about
04:21 - this is one that's one divided by three
04:23 - this is one divided by five not point
04:25 - two
04:26 - one divided by seven one divided by nine
04:29 - and so on so um actually
04:32 - uh so the different bits of an equation
04:37 - like in this case one um a third a fifth
04:40 - and so on
04:41 - they're called terms in the equation
04:43 - just in sort of mathematical language
04:45 - so i'm gonna write here let term equal
04:49 - so we'll store that in a variable for
04:51 - convenience
04:53 - and we can output that if we want and
04:56 - our program
04:57 - the output of it is unchanged
05:01 - there we go all right um
05:05 - so now the next thing that we need is we
05:07 - notice that we've got
05:08 - the sort of sign alternates here we've
05:11 - got to add on
05:12 - we've got to subtract a third add a
05:14 - fifth subtract a seventh
05:16 - so we could think of this as being
05:19 - that like we're always doing additions
05:22 - but what we're doing is we're
05:23 - we're adding minus a third and then we
05:26 - add
05:27 - a fifth and then we add minus the
05:30 - seventh and so on
05:32 - to get these alternating plus and minus
05:34 - signs
05:35 - we can create a variable which we
05:37 - multiply
05:38 - which starts off at the value one and uh
05:41 - we multiply it by minus one every time
05:44 - so let's let's try that so i'm going to
05:46 - call this variable
05:48 - sine and set it equal to one
05:51 - and then here where we're sort of
05:53 - changing values of things
05:55 - i'm going to write sine equals sine
05:58 - times
05:59 - -1 and then let's output that
06:03 - so instead of outputting term here i'll
06:06 - output sine
06:09 - and that should give us an alternating 1
06:10 - and minus 1.
06:13 - let's run it
06:16 - yeah that's working so now if we take
06:19 - our
06:20 - term and multiply it by sign
06:23 - we should get one minus the third and
06:26 - then
06:27 - plus the fifth and then minus seventh
06:29 - and so on
06:31 - so let's write um let term equal
06:34 - sine times one divided by the
06:38 - denominator
06:40 - and then we'll output term again
06:43 - we'll try this
06:47 - and that seems to be working so we've
06:49 - got one we've got minus the third
06:51 - we've got plus a fifth we've got minus
06:54 - minus the seventh plus the ninth
06:57 - and so on and that's exactly what we
07:00 - want
07:02 - now all we have to do is add all of
07:04 - those up and at the end multiplying them
07:06 - by four
07:07 - because this gives us an approximation
07:08 - for pi divided by four so we're gonna
07:11 - have to multiply it by four at the end
07:13 - to get pi so
07:16 - um let's create another variable let's
07:18 - call it sum
07:19 - set it equal to naught and then what
07:21 - we'll do is every time we
07:23 - go around the loop um i'm going to just
07:27 - say
07:28 - sum equals sum plus
07:32 - uh term
07:36 - and then we'll find that our sum should
07:38 - get closer and closer to pi
07:40 - after the program's finished closer and
07:42 - closer to pi
07:44 - divided by four that is so sorry after
07:46 - the
07:47 - lube not the program after the loop's
07:48 - finished we can then write let pi
07:51 - equals sum times four and we can do
07:55 - console.log
07:57 - pi and then let's output let's uncomment
08:02 - this console.log math.pi so we can see
08:04 - how close our pi
08:06 - is to the um actual pi
08:10 - let's try it so
08:13 - at the moment not very close we can see
08:15 - it's in the right sort of area
08:17 - but um the thing is we've not added on
08:19 - enough terms
08:21 - to get a sort of realistic value for it
08:23 - let's try a thousand
08:27 - and then if i run this
08:31 - yep we get it's pretty close now
08:35 - pretty close let's try five thousand
08:40 - and this this will still execute in a
08:42 - blink of an eye
08:44 - even on an old computer and we can see
08:46 - that we're getting closer the first few
08:48 - digits
08:48 - are correct um maybe try
08:52 - 20 000
09:00 - yeah now we've got we've got a few more
09:02 - digits
09:04 - uh so 14159 doesn't go wrong until here
09:09 - and you can try more if you want like um
09:12 - you know like a million or something how
09:15 - many is that let's take a look
09:18 - so one two
09:21 - three one two three that's a million
09:23 - terms
09:25 - and if we run that
09:28 - then yeah so you can see that the more
09:32 - terms you add the closer it gets to pi
09:34 - this is a kind of known downside of the
09:37 - leibniz approximation
09:38 - that it doesn't um it doesn't converge
09:41 - to pi very quickly
09:42 - meaning you have to add a lot of terms
09:45 - to get a value
09:46 - that's um that's accurate for more than
09:49 - a few digits
09:50 - but you can see that this is basically
09:52 - working
09:53 - and if we were to go on and add more and
09:55 - more of the terms in our equation here
09:58 - we will get
09:59 - exactly what we want now we can write
10:02 - this program a little bit more
10:04 - nicely here so if i was writing this
10:08 - not for explanatory purposes but just
10:10 - for myself
10:11 - i would have condensed this more i
10:14 - wouldn't have put probably term in a
10:16 - separate variable for example
10:18 - i would have just written it down here
10:19 - and so on but one simple thing that we
10:21 - can do
10:22 - is um is we can use a slightly different
10:25 - operator at certain points here
10:28 - so instead of writing sum equals sum
10:30 - plus term
10:32 - we can write sum plus equals
10:35 - term and a plus equals operator
10:39 - will just add on whatever's on the right
10:42 - to the existing value
10:43 - the existing variable value on the
10:46 - left so this this means
10:50 - sum equals sum plus term
10:53 - some plus equals term we're just adding
10:56 - term to sum every time
10:57 - and we can do the same with times
11:01 - instead of writing sine equals sine
11:03 - times minus 1
11:05 - we can write sine times equals
11:10 - minus 1. it's kind of something that can
11:15 - make
11:15 - your code look a lot nicer here's a
11:18 - simple example
11:19 - um instead of denominator equals
11:20 - denominator plus two
11:23 - denominator plus equals two and if this
11:25 - seems confusing just practice it in a
11:27 - really simple program
11:29 - don't use a loop just take a variable
11:30 - and try using plus equals and times
11:32 - equals
11:33 - just to see what they do and you'll find
11:35 - that they're actually
11:37 - really not so bad at all so
11:41 - i think that's that's it really for this
11:43 - video let's just try this
11:45 - and check that it still works yeah it's
11:48 - still fine
11:50 - and you could you know you could
11:53 - simplify it in a way
11:54 - just by not having a separate variable
11:56 - for term
11:57 - so i mean you could take this and put it
11:59 - down there
12:01 - you know rather than storing it in a
12:03 - variable say sum plus equals
12:05 - sine times one divided by denominator um
12:09 - okay so we'll leave it there for this
12:11 - video if you just found that
12:12 - too complicated don't worry at all and
12:15 - you're not going to need
12:16 - mathematics knowledge here most of
12:19 - programming
12:20 - it's it's about logic and you learn the
12:22 - logic at the same
12:24 - time that you learn programming it's not
12:26 - really about
12:27 - you know mathematical approximations
12:29 - unless you're working in
12:30 - that kind of a field a sort of
12:31 - mathematical field so if you found the
12:33 - exercise too hard don't worry at all
12:35 - it is just an exercise but the important
12:37 - thing is to try to do these things
12:39 - do whatever bits of them you can and if
12:42 - you didn't try to do this exercise make
12:44 - up some
12:45 - exercises of your own just whatever you
12:47 - can think of it doesn't matter even if
12:49 - they're ridiculously simple they don't
12:51 - have to be something
12:52 - like really serious sounding like some
12:54 - serious mathematical thing
12:56 - just make up some silly exercise
12:58 - challenge yourself to do it
12:59 - and see how far you get you know and if
13:02 - you keep doing that your programming
13:04 - will steadily improve okay so we'll
13:06 - leave it there for this video
13:08 - until next time happy coding

Cleaned transcript:

hello this is john from caveofprogramming.com this is another video in my javascript and node.js for complete beginners course and in this video we're going to tackle approximating pi so we're going to do the exercise that i gave you in the last video so the first step as we've seen is we want to get these numbers on the bottoms of these fractions here so that's we can think of the first term so these are term we call them terms of the equation oh by the way i want to mention that people often ask do you need to know a lot of mathematics to do programming and the answer is no i picked a mathematical example but you could have a career in programming and this might end up being in a way the most mathematical thing you ever do you know so don't be put off by the idea that programming's mathematics because it isn't but anyway you can think of this first term here as one divided by one and that will help because then the numbers on the bottom here are one three five seven nine so the first step is let's see if we can write a program that outputs the values one three five seven nine and if you had a go at this and you didn't manage to do it then do feel free to stop at any point and implement whatever bit of this you think you might be able to implement so um we're going to need a loop let's leave that console.log math.pi in in here um but i'll move it to the bottom and actually i'll comment it out so in other words if i put two uh slashes at the beginning that turns the rest of the line into a comment which is useful for documentation but it doesn't actually do anything in terms of your code so that's quite a useful thing to do and we call this commenting something out where we temporarily turn it into a comment and deactivate it okay so um if i've got a loop i'm going to need a counter let's create a loop counter and set it equal to naught and then i'll have while counter let's put less than five initially just some small value while we're developing this so i've got my brackets on my right counter plus plus so now we've got a loop but there's nothing in the loop um so now let's maybe create a value which will create a variable which we're going to add 2 to every time so the variable is going to um it's going to be have values 1 3 5 7 9 and so on so i'll call this well since this is going to end up on the bottom of our fraction and that's called the denominator i'm going to call this denominator in nato equals 1 to start with then in the loop i can add 2 to that every time so denominator equals denominator plus 2. now if we output it down here um the first value that we see will be one plus two which is of course three but if we output it here above where we increase the value of it the first value will be one which is what we want so let's write here in fact i'll put these two lines together because they're kind of similar con soul dot log denominator all right and let's run this and see if we've succeeded so far so node pi js and we see we've got one three five seven nine that's exactly what we want now the other thing that we we need here is um so we need to form a fraction and uh we actually we could do that step next let's just do that so instead of outputting one three five seven nine we need to output one divided by one one divided by three one divided by five and so on and that's pretty easy to do so all we have to do is change this to 1 divided by denominator and if we run this and we've got 1 divided by 1 1 divided by three or a third one divided by two is a half um sorry one divided by what must what am i talking about this is one that's one divided by three this is one divided by five not point two one divided by seven one divided by nine and so on so um actually uh so the different bits of an equation like in this case one um a third a fifth and so on they're called terms in the equation just in sort of mathematical language so i'm gonna write here let term equal so we'll store that in a variable for convenience and we can output that if we want and our program the output of it is unchanged there we go all right um so now the next thing that we need is we notice that we've got the sort of sign alternates here we've got to add on we've got to subtract a third add a fifth subtract a seventh so we could think of this as being that like we're always doing additions but what we're doing is we're we're adding minus a third and then we add a fifth and then we add minus the seventh and so on to get these alternating plus and minus signs we can create a variable which we multiply which starts off at the value one and uh we multiply it by minus one every time so let's let's try that so i'm going to call this variable sine and set it equal to one and then here where we're sort of changing values of things i'm going to write sine equals sine times 1 and then let's output that so instead of outputting term here i'll output sine and that should give us an alternating 1 and minus 1. let's run it yeah that's working so now if we take our term and multiply it by sign we should get one minus the third and then plus the fifth and then minus seventh and so on so let's write um let term equal sine times one divided by the denominator and then we'll output term again we'll try this and that seems to be working so we've got one we've got minus the third we've got plus a fifth we've got minus minus the seventh plus the ninth and so on and that's exactly what we want now all we have to do is add all of those up and at the end multiplying them by four because this gives us an approximation for pi divided by four so we're gonna have to multiply it by four at the end to get pi so um let's create another variable let's call it sum set it equal to naught and then what we'll do is every time we go around the loop um i'm going to just say sum equals sum plus uh term and then we'll find that our sum should get closer and closer to pi after the program's finished closer and closer to pi divided by four that is so sorry after the lube not the program after the loop's finished we can then write let pi equals sum times four and we can do console.log pi and then let's output let's uncomment this console.log math.pi so we can see how close our pi is to the um actual pi let's try it so at the moment not very close we can see it's in the right sort of area but um the thing is we've not added on enough terms to get a sort of realistic value for it let's try a thousand and then if i run this yep we get it's pretty close now pretty close let's try five thousand and this this will still execute in a blink of an eye even on an old computer and we can see that we're getting closer the first few digits are correct um maybe try 20 000 yeah now we've got we've got a few more digits uh so 14159 doesn't go wrong until here and you can try more if you want like um you know like a million or something how many is that let's take a look so one two three one two three that's a million terms and if we run that then yeah so you can see that the more terms you add the closer it gets to pi this is a kind of known downside of the leibniz approximation that it doesn't um it doesn't converge to pi very quickly meaning you have to add a lot of terms to get a value that's um that's accurate for more than a few digits but you can see that this is basically working and if we were to go on and add more and more of the terms in our equation here we will get exactly what we want now we can write this program a little bit more nicely here so if i was writing this not for explanatory purposes but just for myself i would have condensed this more i wouldn't have put probably term in a separate variable for example i would have just written it down here and so on but one simple thing that we can do is um is we can use a slightly different operator at certain points here so instead of writing sum equals sum plus term we can write sum plus equals term and a plus equals operator will just add on whatever's on the right to the existing value the existing variable value on the left so this this means sum equals sum plus term some plus equals term we're just adding term to sum every time and we can do the same with times instead of writing sine equals sine times minus 1 we can write sine times equals minus 1. it's kind of something that can make your code look a lot nicer here's a simple example um instead of denominator equals denominator plus two denominator plus equals two and if this seems confusing just practice it in a really simple program don't use a loop just take a variable and try using plus equals and times equals just to see what they do and you'll find that they're actually really not so bad at all so i think that's that's it really for this video let's just try this and check that it still works yeah it's still fine and you could you know you could simplify it in a way just by not having a separate variable for term so i mean you could take this and put it down there you know rather than storing it in a variable say sum plus equals sine times one divided by denominator um okay so we'll leave it there for this video if you just found that too complicated don't worry at all and you're not going to need mathematics knowledge here most of programming it's it's about logic and you learn the logic at the same time that you learn programming it's not really about you know mathematical approximations unless you're working in that kind of a field a sort of mathematical field so if you found the exercise too hard don't worry at all it is just an exercise but the important thing is to try to do these things do whatever bits of them you can and if you didn't try to do this exercise make up some exercises of your own just whatever you can think of it doesn't matter even if they're ridiculously simple they don't have to be something like really serious sounding like some serious mathematical thing just make up some silly exercise challenge yourself to do it and see how far you get you know and if you keep doing that your programming will steadily improve okay so we'll leave it there for this video until next time happy coding
