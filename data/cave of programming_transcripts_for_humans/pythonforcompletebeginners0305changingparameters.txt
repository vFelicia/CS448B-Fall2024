With timestamps:

00:00 - in this video I just want to show you
00:02 - something which kind of reinforces the
00:05 - point that I've already been making
00:08 - here which is that this parameter
00:12 - variable here is totally different to
00:14 - this variable here it's a different
00:16 - variable and another way that I can
00:18 - prove that is well let's first clear up
00:21 - this function and get rid of the
00:22 - printing of these
00:25 - IDs and now what I'm going to do in
00:28 - greet is I'm going to change
00:31 - this name parameter so first I print
00:34 - hello and name and after that I'm going
00:36 - to assign a new value to name so let's
00:41 - say name
00:43 - equals Rachel now we can trace through
00:47 - and see what the value is of these
00:49 - different name variables at every point
00:52 - so here I could say
00:54 - print let's write a one and value of
00:59 - name
01:00 - in main
01:02 - is and then add on name there so we can
01:05 - see what the value of it is I'm going to
01:08 - copy that and down here after greet I'm
01:13 - going to have a second print so we can
01:16 - see what the value of it is
01:18 - there and I'm going to do the same here
01:21 - so let's paste in this and say one value
01:24 - of name in greet is name and then I'm
01:29 - going to have a second one of those down
01:32 - here to value of name in greet is and
01:37 - whatever it
01:38 - is now this is something that I actually
01:41 - do quite often to figure out where there
01:45 - are bugs in my
01:47 - code so you can have several different
01:50 - types of error in a computer program you
01:52 - can have a syntax error where your
01:54 - program actually won't run because you
01:56 - haven't followed the grammar of the
01:58 - programming language
02:00 - and you can have some kind
02:02 - of logic
02:04 - error some kind of bug where the program
02:07 - does run so it is syntactically valid
02:11 - but it just doesn't do what you want it
02:13 - to do because you've done something
02:15 - wrong and sometimes when I have errors
02:18 - in my logic and I can't quite figure out
02:20 - where they are I just put in prints for
02:23 - variables like this and sometimes I even
02:26 - number them and I do this to try to
02:28 - narrow down where the ACT problem occurs
02:31 - there are other ways you can deal with
02:33 - this but that is something that I do
02:35 - quite a bit let's just run this and we
02:38 - can see it says value of name in main is
02:40 - John okay that makes sense right and
02:43 - then we go into greet so we go into
02:45 - greet and it says value of name and
02:48 - greet is and that's here value of name
02:50 - and greet is John which makes sense then
02:53 - we change name to refer to a different
02:56 - string Rachel and then we do another
02:59 - print and and that's coming out here
03:01 - value of name in greet is Rachel and
03:04 - then finally so we emerge from the Greet
03:06 - function we return from it it's finished
03:10 - and at this point we're displaying the
03:12 - value of name in main again and you can
03:14 - see that it's still John so just because
03:17 - you change what this variable refers to
03:21 - in this GRE function that doesn't mean
03:23 - youve changed this variable
03:26 - here this is a whole different variable
03:29 - and that's the point that I really want
03:30 - to make here it's worth verifying this
03:33 - for yourself I think it's really
03:35 - important to get this clear at this
03:38 - stage of course if I gave this a
03:40 - completely different name altogether it
03:43 - would be even clearer but it's quite
03:45 - common that you would have a variable
03:49 - with a certain name which you pass to a
03:51 - function and that function has a
03:54 - parameter with the same name as the
03:56 - variable you passed to it that just
03:58 - happens quite a lot
04:00 - but you have to think often you're going
04:02 - to be defining functions in advance
04:06 - before you then use them so when you
04:09 - create this function you don't
04:11 - necessarily know how people are going to
04:13 - use it or how you are going to use it
04:15 - yourself so you can't have a situation
04:19 - where the name of this parameter here
04:21 - would depend upon this variable here
04:24 - because when you define the function you
04:26 - don't necessarily know that it's going
04:28 - to be used in this particular way if you
04:30 - see what I mean so it does make sense
04:33 - that this will be a completely different
04:34 - variable to this variable I would
04:37 - recommend typing this out for yourself
04:39 - or something that does these the same
04:42 - equivalent thing just to verify that
04:44 - python does indeed behave like this
04:48 - you've been watching a free sample from
04:50 - my Python and machine learning for
04:52 - complete beginners course I'm uploading
04:55 - enough videos from the start of the
04:56 - course to get you started with python
04:59 - and machine learning the full course is
05:01 - absolutely massive if you're interested
05:03 - in it please click the link in the
05:05 - description the complete course covers
05:08 - not only basic python but also some
05:10 - fairly Advanced python even some desktop
05:13 - programming stuff and then goes on to
05:15 - machine learning and artificial
05:18 - intelligence until next time happy
05:20 - coding

Cleaned transcript:

in this video I just want to show you something which kind of reinforces the point that I've already been making here which is that this parameter variable here is totally different to this variable here it's a different variable and another way that I can prove that is well let's first clear up this function and get rid of the printing of these IDs and now what I'm going to do in greet is I'm going to change this name parameter so first I print hello and name and after that I'm going to assign a new value to name so let's say name equals Rachel now we can trace through and see what the value is of these different name variables at every point so here I could say print let's write a one and value of name in main is and then add on name there so we can see what the value of it is I'm going to copy that and down here after greet I'm going to have a second print so we can see what the value of it is there and I'm going to do the same here so let's paste in this and say one value of name in greet is name and then I'm going to have a second one of those down here to value of name in greet is and whatever it is now this is something that I actually do quite often to figure out where there are bugs in my code so you can have several different types of error in a computer program you can have a syntax error where your program actually won't run because you haven't followed the grammar of the programming language and you can have some kind of logic error some kind of bug where the program does run so it is syntactically valid but it just doesn't do what you want it to do because you've done something wrong and sometimes when I have errors in my logic and I can't quite figure out where they are I just put in prints for variables like this and sometimes I even number them and I do this to try to narrow down where the ACT problem occurs there are other ways you can deal with this but that is something that I do quite a bit let's just run this and we can see it says value of name in main is John okay that makes sense right and then we go into greet so we go into greet and it says value of name and greet is and that's here value of name and greet is John which makes sense then we change name to refer to a different string Rachel and then we do another print and and that's coming out here value of name in greet is Rachel and then finally so we emerge from the Greet function we return from it it's finished and at this point we're displaying the value of name in main again and you can see that it's still John so just because you change what this variable refers to in this GRE function that doesn't mean youve changed this variable here this is a whole different variable and that's the point that I really want to make here it's worth verifying this for yourself I think it's really important to get this clear at this stage of course if I gave this a completely different name altogether it would be even clearer but it's quite common that you would have a variable with a certain name which you pass to a function and that function has a parameter with the same name as the variable you passed to it that just happens quite a lot but you have to think often you're going to be defining functions in advance before you then use them so when you create this function you don't necessarily know how people are going to use it or how you are going to use it yourself so you can't have a situation where the name of this parameter here would depend upon this variable here because when you define the function you don't necessarily know that it's going to be used in this particular way if you see what I mean so it does make sense that this will be a completely different variable to this variable I would recommend typing this out for yourself or something that does these the same equivalent thing just to verify that python does indeed behave like this you've been watching a free sample from my Python and machine learning for complete beginners course I'm uploading enough videos from the start of the course to get you started with python and machine learning the full course is absolutely massive if you're interested in it please click the link in the description the complete course covers not only basic python but also some fairly Advanced python even some desktop programming stuff and then goes on to machine learning and artificial intelligence until next time happy coding
