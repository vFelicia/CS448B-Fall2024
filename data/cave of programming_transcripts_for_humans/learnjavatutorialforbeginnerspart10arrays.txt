With timestamps:

00:00 - [Music]
00:17 - hello this is John from cave of
00:20 - programming comm and this is a beginners
00:25 - tutorial on arrays in Java and in the
00:28 - last tutorial I actually said that we
00:29 - would look at classes and objects this
00:31 - time but I completely forgot about
00:34 - arrays so this time we're gonna I'm
00:36 - gonna it's gonna be the first of several
00:38 - tutorials in which we look at arrays
00:42 - so just to recap I can create a variable
00:46 - that can hold an int like this say int
00:50 - values equal 7 and there's a really
00:55 - important distinction that we need to
00:57 - make now between value types and
01:01 - reference types in Java at the anatomy
01:05 - of what's going on here is that when I
01:08 - type int which is a primitive type in
01:11 - Java with a lowercase letter here I
01:14 - actually mean create enough memory to
01:18 - hold an integer 32 bits to be precise
01:21 - and and here I'm saying and put some
01:24 - value into that memory so this is like a
01:27 - bucket that's big enough to hold an
01:29 - integer now I can actually create a
01:32 - variable that can refer to a whole list
01:36 - of integers by saying int array values
01:41 - and again I'm just using an arbitrary
01:43 - name here and I'm calling it values with
01:45 - an S instead of value because it's gonna
01:48 - be more than one of them but that's you
01:51 - know I could call this not to pluck her
01:54 - or whatever I liked and now the anatomy
01:57 - of this is it's quite different here
02:00 - because this does not actually hold any
02:03 - integers it can't it can merely refer to
02:07 - a list of integers so when I type this
02:10 - it's not like creating a bucket it's
02:13 - like creating a label technically this
02:16 - is a value type a value variable and
02:19 - this is a reference type a reference
02:22 - variable this is a reference this is a
02:24 - value
02:26 - and now the next step of course is I
02:30 - want to actually allocate some memory
02:33 - which I can put some integers into so I
02:36 - can say values equals new int array and
02:42 - in these square brackets which represent
02:45 - the array I can cite the number of
02:48 - integers that I want values to refer to
02:50 - I'll say for example 3 and what's going
02:54 - on here is I'm saying point this
02:57 - reference at this stuff and this stuff
03:01 - uses the new keyword to actually
03:04 - allocate some memory and the amount of
03:07 - memory that I'm allocating is enough to
03:09 - hold 3 integers now you might be
03:14 - wondering ok what are these integers
03:16 - because I've not actually referred 20
03:17 - values ok here's a value but where are
03:20 - the values here there aren't any well if
03:24 - I I can refer to the first integer in
03:28 - this list of integers this array events
03:31 - just technically
03:32 - by saying values and then I open a
03:36 - square bracket Eclipse is putting the
03:39 - closing square bracket for me
03:42 - automatically and in there I type and
03:44 - the number in the list that I want to
03:46 - refer to and the values are our numbers
03:51 - starting at 0 so usually when you when
03:54 - you number list yourself you start at 1
03:56 - you go 1 2 3 4 5
03:58 - usually in programming the first in the
04:02 - list starts at 0 and by the way that
04:04 - creates what we call the off by one
04:06 - problem which is that if you have a list
04:09 - of three things the first one will be 0
04:11 - and so the last one is number 2 and it's
04:14 - the same kind of problem that we have
04:16 - with centuries because the first century
04:19 - started at year 0 and so the 20th
04:21 - century starts at 1900 and every year in
04:26 - a 20th century starts in 19 which can be
04:28 - a little confusing same problem here so
04:33 - if I run this program
04:34 - now I actually get zero because Java
04:38 - unlike C++ for instance is kind enough
04:41 - to give all values in arrays a default
04:45 - value but of course I can I can put my
04:49 - own values in there I can say values
04:52 - naught equals 10 let's say if I now
04:57 - display that values naught then I get 10
05:05 - and you're still seeing the original
05:07 - value here before I changed it and we
05:12 - could print out values 1 and of course
05:17 - the last value is values to these folks
05:23 - are haven't set yet are going to be of
05:25 - course 0 but I can't set them I can say
05:29 - values 1 equals I don't know 20 values 2
05:33 - equals 30 and if you try to refer to
05:36 - values 3 you'll get your program will
05:38 - crash with a hand the exception that
05:40 - will tell you that you've done something
05:41 - wrong which is quite handy because C++
05:45 - would just fail silently but Java is
05:47 - good enough to warn you if you refer to
05:49 - a value that's actually outside the list
05:54 - now some other things you can do with a
05:57 - race so here we've looked at setting
05:59 - values and getting values and another
06:03 - really common thing to do is that you
06:05 - want to iterate through the array that
06:07 - means go through each value in turn and
06:12 - I'm going to show you just one way of
06:14 - doing that here using a for loop and in
06:18 - the next tutorial we'll look at another
06:19 - way of doing it so what you do is you
06:23 - say let's have a loop variable I'll call
06:27 - it I and I'll set it to naught to start
06:29 - with and I want I I want the loop to
06:32 - keep looping until I is equal to the 1
06:38 - less than the last value in the array so
06:42 - the length the in Java the size of an
06:46 - array
06:47 - can be found by referring to the dot
06:50 - length variable each array no Sun Lanka
06:54 - is in Java and the number of values in
06:57 - the array is stored in this dot length
07:02 - variable and then I'll increment I every
07:06 - time I go around the loop and now in
07:08 - here all I have to do is say that say
07:12 - suss out values I put I in the kind of
07:17 - array index brackets here and then when
07:19 - I run this it's gonna go through each of
07:22 - the values in my array in turn and one
07:30 - last really handy thing that we can do
07:32 - to initialize an array at the same time
07:36 - as declaring it is I can say int array
07:40 - let's call it numbers for example and
07:44 - then instead of allocating the memory
07:47 - and then specifying the values I can
07:50 - specify the values just in a list in
07:52 - curly brackets here let's say for
07:54 - example 5 6 7 but of course you could
07:58 - have hundreds or thousands of values and
08:01 - then once again it's right through them
08:04 - I'll say I less than numbers dot length
08:08 - and notice I is never equal to numbers
08:12 - dot length because numbers dot length
08:14 - will be three and if I refer to numbers
08:17 - three that will be outside the array
08:20 - which is no good because the last one in
08:22 - the array has index of two because we
08:25 - started numbering zero and I'll say here
08:29 - I plus plus again and then I'll do this
08:35 - all again
08:35 - numbers and of course you could change
08:38 - the numbers here as well as just
08:39 - accessing them if you want it if I run
08:42 - this we get five six seven okay
08:46 - so we're going to look at arrays a bit
08:49 - more next time because it's a big
08:50 - subject and
08:52 - we've kind of covered a lot of material
08:53 - in this tutorial we've looked briefly
08:55 - out and value in reference variables and
08:59 - lots of erase stuff and the best thing
09:02 - to do to get your head around this is
09:04 - just to have a play with it yourself and
09:05 - try accessing arrays and creating arrays
09:08 - and changing numbers and arrays and the
09:13 - next time we'll look at string arrays
09:15 - and another way of iterating through an
09:19 - array so join me again if it's for
09:23 - tutorial number eleven and I'll till
09:25 - then happy coding
09:26 - [Music]
09:39 - you

Cleaned transcript:

hello this is John from cave of programming comm and this is a beginners tutorial on arrays in Java and in the last tutorial I actually said that we would look at classes and objects this time but I completely forgot about arrays so this time we're gonna I'm gonna it's gonna be the first of several tutorials in which we look at arrays so just to recap I can create a variable that can hold an int like this say int values equal 7 and there's a really important distinction that we need to make now between value types and reference types in Java at the anatomy of what's going on here is that when I type int which is a primitive type in Java with a lowercase letter here I actually mean create enough memory to hold an integer 32 bits to be precise and and here I'm saying and put some value into that memory so this is like a bucket that's big enough to hold an integer now I can actually create a variable that can refer to a whole list of integers by saying int array values and again I'm just using an arbitrary name here and I'm calling it values with an S instead of value because it's gonna be more than one of them but that's you know I could call this not to pluck her or whatever I liked and now the anatomy of this is it's quite different here because this does not actually hold any integers it can't it can merely refer to a list of integers so when I type this it's not like creating a bucket it's like creating a label technically this is a value type a value variable and this is a reference type a reference variable this is a reference this is a value and now the next step of course is I want to actually allocate some memory which I can put some integers into so I can say values equals new int array and in these square brackets which represent the array I can cite the number of integers that I want values to refer to I'll say for example 3 and what's going on here is I'm saying point this reference at this stuff and this stuff uses the new keyword to actually allocate some memory and the amount of memory that I'm allocating is enough to hold 3 integers now you might be wondering ok what are these integers because I've not actually referred 20 values ok here's a value but where are the values here there aren't any well if I I can refer to the first integer in this list of integers this array events just technically by saying values and then I open a square bracket Eclipse is putting the closing square bracket for me automatically and in there I type and the number in the list that I want to refer to and the values are our numbers starting at 0 so usually when you when you number list yourself you start at 1 you go 1 2 3 4 5 usually in programming the first in the list starts at 0 and by the way that creates what we call the off by one problem which is that if you have a list of three things the first one will be 0 and so the last one is number 2 and it's the same kind of problem that we have with centuries because the first century started at year 0 and so the 20th century starts at 1900 and every year in a 20th century starts in 19 which can be a little confusing same problem here so if I run this program now I actually get zero because Java unlike C++ for instance is kind enough to give all values in arrays a default value but of course I can I can put my own values in there I can say values naught equals 10 let's say if I now display that values naught then I get 10 and you're still seeing the original value here before I changed it and we could print out values 1 and of course the last value is values to these folks are haven't set yet are going to be of course 0 but I can't set them I can say values 1 equals I don't know 20 values 2 equals 30 and if you try to refer to values 3 you'll get your program will crash with a hand the exception that will tell you that you've done something wrong which is quite handy because C++ would just fail silently but Java is good enough to warn you if you refer to a value that's actually outside the list now some other things you can do with a race so here we've looked at setting values and getting values and another really common thing to do is that you want to iterate through the array that means go through each value in turn and I'm going to show you just one way of doing that here using a for loop and in the next tutorial we'll look at another way of doing it so what you do is you say let's have a loop variable I'll call it I and I'll set it to naught to start with and I want I I want the loop to keep looping until I is equal to the 1 less than the last value in the array so the length the in Java the size of an array can be found by referring to the dot length variable each array no Sun Lanka is in Java and the number of values in the array is stored in this dot length variable and then I'll increment I every time I go around the loop and now in here all I have to do is say that say suss out values I put I in the kind of array index brackets here and then when I run this it's gonna go through each of the values in my array in turn and one last really handy thing that we can do to initialize an array at the same time as declaring it is I can say int array let's call it numbers for example and then instead of allocating the memory and then specifying the values I can specify the values just in a list in curly brackets here let's say for example 5 6 7 but of course you could have hundreds or thousands of values and then once again it's right through them I'll say I less than numbers dot length and notice I is never equal to numbers dot length because numbers dot length will be three and if I refer to numbers three that will be outside the array which is no good because the last one in the array has index of two because we started numbering zero and I'll say here I plus plus again and then I'll do this all again numbers and of course you could change the numbers here as well as just accessing them if you want it if I run this we get five six seven okay so we're going to look at arrays a bit more next time because it's a big subject and we've kind of covered a lot of material in this tutorial we've looked briefly out and value in reference variables and lots of erase stuff and the best thing to do to get your head around this is just to have a play with it yourself and try accessing arrays and creating arrays and changing numbers and arrays and the next time we'll look at string arrays and another way of iterating through an array so join me again if it's for tutorial number eleven and I'll till then happy coding you
