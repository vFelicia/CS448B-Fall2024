With timestamps:

00:16 - hello this is John from cave or
00:19 - programming calm in this tutorial we're
00:21 - going to look at constructor inheritance
00:24 - in C++ the bottom line here is that
00:27 - constructors are not inherited in C++ by
00:31 - subclasses but they are called so let
00:34 - let's take a look at that so I'm going
00:36 - to create a class here called machine to
00:40 - be like a sort of generic superclass and
00:43 - I'll give machine a constructor so let's
00:46 - say machine like this and let's in the
00:51 - constructor let's put C out so we can
00:53 - see it running let's say machine no
00:56 - argument construct
00:58 - tour called and accepts him now we can
01:05 - already create a machine object we can
01:07 - instantiate an object from the machine
01:09 - class like that and if we run this we're
01:11 - gonna see the machine constructor
01:13 - running let's create a subclass of
01:16 - machines let's say class vehicle so a
01:20 - vehicle is a type of machine unless it's
01:24 - a magic flying carpet but usually a
01:27 - vehicle is is a kind of machine let's
01:30 - give this a constructor - so I'll just
01:33 - copy this - save me some typing and
01:36 - rename machine in here - vehicle and
01:39 - let's now create a vehicle so the call
01:45 - I'm giving the the variable the same
01:47 - name as a class here which I can do
01:49 - because my variable has a lower case
01:52 - feed and the class has an upper case fee
01:54 - and some people find this confusing and
01:57 - avoid it but I quite like it if you just
01:59 - got one object of a class because the
02:02 - class because I'm giving it an upper
02:05 - case first letter by my convention that
02:08 - I'm using which is a common convention
02:10 - and I give my variables lower case first
02:13 - letters and and C++ is case sensitive we
02:16 - are allowed to do this so let's let's
02:18 - run this now and what we find is that
02:24 - well actually I had meant to I meant to
02:28 - make this extend machine let's do this
02:30 - so vehicle is a subclass of machine and
02:33 - also I want all this text actually in
02:39 - the constructor
02:40 - let's just change this okay so let's run
02:45 - this now so now when we actually create
02:48 - a vehicle this the constructor of
02:51 - machine is called first so we've only
02:55 - got one object here we've only got a
02:57 - vehicle object but and because vehicle
03:00 - is now based on machine C++ will
03:05 - actually call the constructor of machine
03:07 - in order to construct vehicle and it
03:09 - will call it before it calls the vehicle
03:12 - constructor so C++ will call the default
03:16 - constructors of all the super classes
03:18 - when it creates an object from a
03:20 - subclass and that makes sense if you
03:22 - think about it
03:24 - let's give machine a private int ID and
03:29 - the constructor of machine could
03:31 - initialize the ID let's set ID equal to
03:35 - nor because if we didn't set it equal to
03:37 - something it would just stop garbage in
03:39 - it whatever happen to be in the memory
03:41 - at that point so we'll initialize it
03:43 - with zero and let's also give Machine a
03:46 - a method called info which is just gonna
03:50 - basically output the ID so let's say C
03:53 - out ID and ID
03:59 - and because machine has this info method
04:03 - public info method vehicle will inherit
04:07 - that method so we can say vehicle dot
04:10 - info if we run this now we find that for
04:15 - vehicle ID isn't set is indeed set to
04:18 - zero so in vehicle
04:21 - we can't refer to ID at all it's private
04:24 - to machine so we can't do stuff like
04:26 - this
04:29 - C++ won't letters we're not allowed to
04:32 - refer to ID in vehicle because it's
04:35 - private and machine then that means we
04:37 - can only refer to it within the defining
04:39 - brackets of the machine class so if you
04:42 - run this then we get an error and for
04:45 - that reason it's very handy that the
04:47 - Constructors of super classes are called
04:49 - because our machine constructor can
04:54 - initialize the private data of machine
04:56 - and then the private ID of vehicle
05:00 - that's sorry the idea vehicle will be
05:04 - initialized automatically so let's just
05:07 - build this again guarantee error and run
05:10 - it whoops what they do
05:13 - whoops no I want to do that so I've got
05:19 - an error check the error initializer ID
05:24 - does not name a non static I forgot to
05:27 - save my program that's the problem let's
05:30 - run it ok so there we go
05:32 - right so vehicle does have an ID it does
05:36 - have an ID because it's super class
05:39 - machine had an ID it's just that we we
05:42 - can't refer to the ID anywhere in
05:44 - vehicle we can output it with this
05:47 - method that was inherited from machine
05:48 - that refer to the ID and the constructor
05:51 - of ID can initialize that ID but in
05:54 - vehicle were not able to refer to the ID
05:57 - anywhere Neverland nevertheless we can
05:59 - call a method in a superclass that
06:02 - refers to the private data of that
06:04 - superclass and a vehicle does have an ID
06:07 - because it's inherited it from machine
06:09 - let's take this
06:12 - therapy one level further I'm gonna
06:13 - create specialized type of vehicle which
06:16 - I'll call car a safe public vehicle so
06:19 - car now is a subclass of vehicle and
06:22 - it's an indirect subclass of machine and
06:25 - also give car a constructor so I'll copy
06:31 - the vehicle one just to save some typing
06:34 - and we can type car car car dot info so
06:42 - now if if we run this we find that C++
06:45 - will call all the constructors of all
06:47 - the super classes above car before
06:50 - called calling the car constructor so
06:53 - first it calls the machine constructor
06:55 - which initializes the ID then it calls
06:57 - the vehicle constructor and we can see
06:59 - that running here
07:00 - finally it calls the car constructor the
07:04 - constructor of the object itself and
07:05 - again car has an ID because it's
07:08 - indirect superclass at the top of the
07:10 - hierarchy here machine had an ID but we
07:13 - couldn't refer to that in car because
07:16 - it's private
07:17 - in machine c++ also allows us to specify
07:21 - which constructor in the superclass at
07:24 - any points in the hierarchy is actually
07:27 - run so let's imagine well that's not
07:30 - imagine if I actually give machine a
07:33 - constructor that takes a int ID and uses
07:39 - that to initialize ID so now we can do
07:44 - this we can do machine machine pass it
07:47 - an ID let's say one two three and of
07:49 - course we can call machine dot info so
07:54 - hopefully I've got this right let's run
07:55 - this and we see that the idea of machine
07:59 - is one two three but we can't call come
08:04 - we can't call that constructor with
08:06 - vehicle so if I change this to vehicle
08:10 - we can't call this parameterised
08:13 - constructor and vehicle because we only
08:15 - defined it in machine here and
08:18 - constructors are not inherited in c++ so
08:22 - they're called
08:23 - the Constructors of superclass's are
08:25 - called but they're not inherited we
08:26 - can't actually use it like this what we
08:30 - can do is we can specify in the vehicle
08:33 - constructor
08:34 - what constructor we want to run in its
08:38 - superclass so let's give vehicle a
08:41 - constructor that takes a parameter let's
08:45 - say int ID and I'm going to say here why
08:49 - I should change this actually so this is
08:51 - the Machine para Ram a terrorised
08:57 - constructor hopefully I've spelled that
08:59 - right and I want a copy Lux is so
09:02 - difficult spell and this is the vehicle
09:05 - parameterised constructor now again
09:09 - we've got a similar problem here to what
09:11 - we saw before that we want we want
09:14 - vehicle to have a constructor that looks
09:17 - like this that accepts some ID parameter
09:19 - to initialize vehicles ID with which it
09:22 - inherits from machine but we can't refer
09:24 - to ID directly in vehicle we can't refer
09:28 - to this ID because it's private to
09:30 - machine but what we can do is we can
09:32 - specify here in the constructor
09:35 - initialization this that this vehicle
09:37 - constructor is going to run the machine
09:40 - constructor that takes a parameter just
09:43 - accept some ID so now we we defined this
09:47 - constructor for vehicle and we've said
09:49 - that this constructor will run the
09:52 - particular constructor and machine that
09:54 - takes a parameter let's try running this
09:57 - see if this works and shall we run it so
10:03 - there we see that the vehicle has got an
10:05 - idea of one two three so this ran this
10:09 - constructor and this constructor now run
10:13 - this constructor here
10:18 - we don't have to call matching
10:21 - constructors in the superclass so here
10:25 - we've got constructor that we've defined
10:27 - for vehicle it takes an ID and that's
10:30 - calling the constructor and machine
10:32 - which takes an ID but we could for
10:35 - example in car here car the superclass
10:39 - of Corey's vehicle the direct superclass
10:42 - and in car we could specify that the no
10:46 - argument constructor calls the vehicle
10:49 - constructor that takes an ID and we
10:51 - could give that an ID like 999 so if we
10:56 - construct a car here car car oh yeah so
11:00 - we're calling the default constructor of
11:02 - car let's call card info and if we run
11:07 - this if I've got this right
11:09 - then it says car no argument constructor
11:13 - called that's correct
11:15 - and the idea quois 999 because now we've
11:18 - said that a no argument constructor of
11:20 - car calls the vehicle constructor that
11:23 - accepts an IDs is running this
11:25 - constructor and the vehicle constructor
11:28 - that accepts some ID in turn is calling
11:31 - the machine constructor that accepts
11:33 - some ID
11:34 - notice that we can't call the indirect
11:39 - superclass constructor of car in the car
11:43 - constructor so we can't do that as an
11:46 - error we can only refer to the
11:48 - Constructors of direct super classes so
11:53 - this list does work as we've just seen
11:57 - and so to sum this all up constructors
12:01 - are not inherited in C++ you can't call
12:04 - the constructor of a superclass when you
12:08 - construct a subclass but C++ will always
12:13 - run one of the constructors that in each
12:16 - of the super classes above a particular
12:19 - class when you instantiate an object
12:21 - from that class if we create a car we're
12:24 - going to run a constructor in vehicle
12:27 - the direct superclass and we're gonna
12:29 - run a constructor in machine but at each
12:32 - step in the hierarchy you are allowed to
12:34 - specify which constructor will be called
12:37 - in the superclass so that's it for this
12:41 - tutorial to practice this try creating a
12:44 - multi-level class hierarchy we'll at
12:45 - least three different classes in it like
12:47 - this getting more and more specialized
12:49 - and I've had some like tests like I see
12:55 - out of each of the constructors so that
12:57 - you can see that when you create an
12:59 - object all of the constructors and the
13:01 - super classes are running and then try
13:03 - for each level in your class hierarchy
13:07 - specifying which constructor of two or
13:11 - more possible constructors that you
13:13 - define will be cold when you construct
13:16 - an object from a particular class so
13:19 - basically have a go at what I've done
13:22 - here and that will that will make it a
13:25 - lot clearer in your mind if it's not
13:28 - clear already which would be completely
13:29 - understandable and of course you'll get
13:32 - more practice with this when you starts
13:34 - write quite complicated programs
13:37 - yourself so that's it for this tutorial
13:39 - until next time happy coding
13:52 - you

Cleaned transcript:

hello this is John from cave or programming calm in this tutorial we're going to look at constructor inheritance in C++ the bottom line here is that constructors are not inherited in C++ by subclasses but they are called so let let's take a look at that so I'm going to create a class here called machine to be like a sort of generic superclass and I'll give machine a constructor so let's say machine like this and let's in the constructor let's put C out so we can see it running let's say machine no argument construct tour called and accepts him now we can already create a machine object we can instantiate an object from the machine class like that and if we run this we're gonna see the machine constructor running let's create a subclass of machines let's say class vehicle so a vehicle is a type of machine unless it's a magic flying carpet but usually a vehicle is is a kind of machine let's give this a constructor so I'll just copy this save me some typing and rename machine in here vehicle and let's now create a vehicle so the call I'm giving the the variable the same name as a class here which I can do because my variable has a lower case feed and the class has an upper case fee and some people find this confusing and avoid it but I quite like it if you just got one object of a class because the class because I'm giving it an upper case first letter by my convention that I'm using which is a common convention and I give my variables lower case first letters and and C++ is case sensitive we are allowed to do this so let's let's run this now and what we find is that well actually I had meant to I meant to make this extend machine let's do this so vehicle is a subclass of machine and also I want all this text actually in the constructor let's just change this okay so let's run this now so now when we actually create a vehicle this the constructor of machine is called first so we've only got one object here we've only got a vehicle object but and because vehicle is now based on machine C++ will actually call the constructor of machine in order to construct vehicle and it will call it before it calls the vehicle constructor so C++ will call the default constructors of all the super classes when it creates an object from a subclass and that makes sense if you think about it let's give machine a private int ID and the constructor of machine could initialize the ID let's set ID equal to nor because if we didn't set it equal to something it would just stop garbage in it whatever happen to be in the memory at that point so we'll initialize it with zero and let's also give Machine a a method called info which is just gonna basically output the ID so let's say C out ID and ID and because machine has this info method public info method vehicle will inherit that method so we can say vehicle dot info if we run this now we find that for vehicle ID isn't set is indeed set to zero so in vehicle we can't refer to ID at all it's private to machine so we can't do stuff like this C++ won't letters we're not allowed to refer to ID in vehicle because it's private and machine then that means we can only refer to it within the defining brackets of the machine class so if you run this then we get an error and for that reason it's very handy that the Constructors of super classes are called because our machine constructor can initialize the private data of machine and then the private ID of vehicle that's sorry the idea vehicle will be initialized automatically so let's just build this again guarantee error and run it whoops what they do whoops no I want to do that so I've got an error check the error initializer ID does not name a non static I forgot to save my program that's the problem let's run it ok so there we go right so vehicle does have an ID it does have an ID because it's super class machine had an ID it's just that we we can't refer to the ID anywhere in vehicle we can output it with this method that was inherited from machine that refer to the ID and the constructor of ID can initialize that ID but in vehicle were not able to refer to the ID anywhere Neverland nevertheless we can call a method in a superclass that refers to the private data of that superclass and a vehicle does have an ID because it's inherited it from machine let's take this therapy one level further I'm gonna create specialized type of vehicle which I'll call car a safe public vehicle so car now is a subclass of vehicle and it's an indirect subclass of machine and also give car a constructor so I'll copy the vehicle one just to save some typing and we can type car car car dot info so now if if we run this we find that C++ will call all the constructors of all the super classes above car before called calling the car constructor so first it calls the machine constructor which initializes the ID then it calls the vehicle constructor and we can see that running here finally it calls the car constructor the constructor of the object itself and again car has an ID because it's indirect superclass at the top of the hierarchy here machine had an ID but we couldn't refer to that in car because it's private in machine c++ also allows us to specify which constructor in the superclass at any points in the hierarchy is actually run so let's imagine well that's not imagine if I actually give machine a constructor that takes a int ID and uses that to initialize ID so now we can do this we can do machine machine pass it an ID let's say one two three and of course we can call machine dot info so hopefully I've got this right let's run this and we see that the idea of machine is one two three but we can't call come we can't call that constructor with vehicle so if I change this to vehicle we can't call this parameterised constructor and vehicle because we only defined it in machine here and constructors are not inherited in c++ so they're called the Constructors of superclass's are called but they're not inherited we can't actually use it like this what we can do is we can specify in the vehicle constructor what constructor we want to run in its superclass so let's give vehicle a constructor that takes a parameter let's say int ID and I'm going to say here why I should change this actually so this is the Machine para Ram a terrorised constructor hopefully I've spelled that right and I want a copy Lux is so difficult spell and this is the vehicle parameterised constructor now again we've got a similar problem here to what we saw before that we want we want vehicle to have a constructor that looks like this that accepts some ID parameter to initialize vehicles ID with which it inherits from machine but we can't refer to ID directly in vehicle we can't refer to this ID because it's private to machine but what we can do is we can specify here in the constructor initialization this that this vehicle constructor is going to run the machine constructor that takes a parameter just accept some ID so now we we defined this constructor for vehicle and we've said that this constructor will run the particular constructor and machine that takes a parameter let's try running this see if this works and shall we run it so there we see that the vehicle has got an idea of one two three so this ran this constructor and this constructor now run this constructor here we don't have to call matching constructors in the superclass so here we've got constructor that we've defined for vehicle it takes an ID and that's calling the constructor and machine which takes an ID but we could for example in car here car the superclass of Corey's vehicle the direct superclass and in car we could specify that the no argument constructor calls the vehicle constructor that takes an ID and we could give that an ID like 999 so if we construct a car here car car oh yeah so we're calling the default constructor of car let's call card info and if we run this if I've got this right then it says car no argument constructor called that's correct and the idea quois 999 because now we've said that a no argument constructor of car calls the vehicle constructor that accepts an IDs is running this constructor and the vehicle constructor that accepts some ID in turn is calling the machine constructor that accepts some ID notice that we can't call the indirect superclass constructor of car in the car constructor so we can't do that as an error we can only refer to the Constructors of direct super classes so this list does work as we've just seen and so to sum this all up constructors are not inherited in C++ you can't call the constructor of a superclass when you construct a subclass but C++ will always run one of the constructors that in each of the super classes above a particular class when you instantiate an object from that class if we create a car we're going to run a constructor in vehicle the direct superclass and we're gonna run a constructor in machine but at each step in the hierarchy you are allowed to specify which constructor will be called in the superclass so that's it for this tutorial to practice this try creating a multilevel class hierarchy we'll at least three different classes in it like this getting more and more specialized and I've had some like tests like I see out of each of the constructors so that you can see that when you create an object all of the constructors and the super classes are running and then try for each level in your class hierarchy specifying which constructor of two or more possible constructors that you define will be cold when you construct an object from a particular class so basically have a go at what I've done here and that will that will make it a lot clearer in your mind if it's not clear already which would be completely understandable and of course you'll get more practice with this when you starts write quite complicated programs yourself so that's it for this tutorial until next time happy coding you
