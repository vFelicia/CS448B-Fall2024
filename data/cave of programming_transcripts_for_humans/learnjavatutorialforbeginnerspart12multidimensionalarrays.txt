With timestamps:

00:04 - [Music]
00:17 - hello welcome to tutorial number 12 in
00:20 - the series of beginners drama tutorials
00:23 - from cave of programming calm and in
00:26 - this tutorial we're going to look at
00:29 - multi-dimensional arrays in Java so one
00:33 - a one-dimensional array would be for
00:37 - example I could say int array values
00:42 - equals and then I could specify a bunch
00:45 - of integers here like this and the
00:49 - reason this is called a one-dimensional
00:51 - array is because to specify the position
00:54 - of one of the items in this list
00:57 - I just need one number or dimension so I
01:01 - could say you know Sissel values two for
01:05 - example and here I get my array value so
01:11 - I'm just using one dimension here to
01:13 - specify this 1:1 array index a
01:17 - multi-dimensional array would require
01:21 - more than one array index to specify the
01:24 - value so in this tutorial I'm just going
01:26 - to look at two-dimensional arrays but
01:28 - you can easily extrapolate this to three
01:30 - or four dimensional arrays if you're
01:32 - completely crazy so let's have a look at
01:36 - an example of a two dimensional array so
01:40 - the first difference is to create the
01:43 - variable that will point to the array I
01:45 - need two sets of square brackets like
01:48 - this and then I say let's say I'll call
01:52 - this grid and I'll set this equal to and
01:55 - I open like brackets as before and I'll
01:58 - close it down here and I put a semicolon
02:02 - in and now what we're going to have in
02:05 - here well in Java the important thing to
02:10 - realize is that a multi-dimensional
02:12 - array it's just an array of arrays so
02:16 - here each element in this array is an
02:20 - integer because this is a
02:22 - two-dimensional array each element in
02:25 - this array will be another array
02:27 - so for example I could have this one
02:30 - article element I could put that in
02:32 - there and because each element is an
02:36 - array and actually each element
02:38 - technically is a reference to an array
02:40 - unlike in C++ say the different elements
02:46 - of of this array don't have to be same
02:51 - length so I could have like two values
02:53 - here for example and then I don't know
02:57 - one two three four I could have four
02:59 - values here and so on so this is a
03:04 - multi-dimensional array and most often
03:07 - probably you want to have the same
03:08 - number of values in each row but as I
03:10 - say it's optional and to refer to values
03:13 - in this this is basically a table or a
03:16 - grid of numbers and what you do is I
03:19 - could say let's say I want to refer to
03:24 - this value so I type grid which is the
03:29 - name of the array reference here the
03:33 - array variable and then this is Rho 0
03:36 - Rho 1 Rho 2 and you need the row first
03:40 - because if you think of this if you
03:43 - think of these as being each of these is
03:46 - an element of the kind of bigger array
03:50 - the outer array then the first thing you
03:53 - need to do is specify the position of
03:54 - this so and in other words you type the
03:58 - row index first and it's always row
04:01 - column so here this is Rho it's the
04:05 - second row but because we start
04:06 - numbering from 0 this is array index 1
04:10 - and then again this is going to be this
04:17 - is going to be at index 0 within that
04:20 - row and this is going to be at index 1
04:22 - so here again it's it's going to be 1 1
04:25 - so this means row 1 column 1 but don't
04:29 - forget you start numbering from 0 so 0 1
04:33 - for the rows and then 0 1 for the
04:36 - columns
04:38 - I'll put this value and I should get
04:40 - four and I can also of course output for
04:50 - example some maybe it's less confusing
04:52 - if I output value that isn't a 1:1 so
04:55 - let's say this one will be 0 and 0 1 2
04:59 - so this values 0 2 so if I copy that and
05:04 - output this I will say 0 2 so row 0
05:11 - column 2 and I output that and I get 2 3
05:16 - 4 3 again now here so here I'm them here
05:22 - I'm initializing the array at the same
05:25 - time that I declare it and of course I
05:28 - can just create the array first and
05:31 - initialize it later I could say 1 about
05:35 - I could use a string let's say string
05:37 - array so a two-dimensional array of
05:41 - strings call it tetes equals and I say
05:46 - new string and here I have the number of
05:51 - entries that I want in this sort of
05:52 - outer array in other words the number of
05:54 - rows by one here so let's have two rows
06:00 - and then I specify the number of columns
06:04 - that I want in this array let's say 3 so
06:08 - this is an array of an array of strings
06:11 - two-dimensional array of strings and
06:13 - technically a two-dimensional array of
06:15 - references to strings and it could I
06:19 - could output any value in this array of
06:21 - array of strings by saying let's say I
06:24 - could have Tex 0 and then let's output
06:31 - so zeroth row and first column and of
06:34 - course because I haven't set any strings
06:35 - yet that will be null and I could of
06:39 - course assign values to these strings by
06:42 - saying let's say X naught naught and 1
06:49 - equals hello there hello there and let's
06:54 - just put this up here
06:57 - so that I set it before I output it and
07:00 - you get hello there
07:02 - iterating through arrays of strings
07:04 - iterating through two-dimensional arrays
07:07 - of strings or integers or whatever is of
07:10 - course a little bit more complex than
07:11 - the one-dimensional case you could use
07:16 - the for loop with a : style of doing it
07:21 - but let's I think it's actually simpler
07:23 - just to stick to for loops with with
07:28 - loop counters for two-dimensional arrays
07:30 - so let's look at how you do that so what
07:34 - you do is first you iterate through two
07:36 - rows and then you iterate through the
07:37 - columns so you have a nested for loop
07:39 - for loop within a for loop so for the
07:42 - outer array let's let's take grid and
07:46 - I'll say for int I equals naught I less
07:50 - than grid length as if it was a
07:54 - one-dimensional array I plus plus so
07:59 - this is iterating over the rows here and
08:02 - now I want to iterate over the columns
08:05 - within this so I say for and I need to
08:07 - choose a different name for the loop
08:09 - variable here to avoid a conflict so
08:11 - I'll say for into K equals naught in
08:14 - fact just to make it clearer I could in
08:16 - fact not use I I could use I could call
08:19 - this row so row row that's better
08:25 - actually and then here I could say for
08:28 - in Col
08:29 - equals naught call less than now what is
08:33 - the dimension of the rotor we want to
08:38 - iterate over I mean what's the length of
08:41 - the the road I am iterating over it's
08:43 - actually going to be grid array brackets
08:47 - row dot length and then call plus plus
08:52 - and of course as always you can take a
08:56 - closer look at this code
08:58 - and try to get your head around it on K
09:00 - for programming comm which is all one
09:02 - word and let's say I can output now grid
09:07 - and I need row and then the column and a
09:12 - handy thing to do with arrays to make
09:15 - your output look nice is I can change
09:19 - println to print so instead of printing
09:22 - each number here on its own line I can
09:25 - print them all out one after the other
09:27 - on the same line and I can just print
09:30 - out here actually I just add here some
09:33 - space after each number or if you put /t
09:38 - in quotes that will output a tab
09:40 - character so I'm just adding
09:42 - concatenating space here to them to this
09:46 - string that I'm outputting it's not
09:48 - actually strings and integer but Java
09:50 - will understand that I want to create a
09:54 - string here and then after each row so
09:57 - within the outer loop and not within the
09:59 - inner loop I want to output a new line
10:04 - so I can just output a empty six out dot
10:07 - println this this is quite complex but
10:11 - just play around with it look at the
10:13 - codes try and change it and you'll soon
10:17 - get a hang so if I output that it's
10:20 - outputting my grid of numbers here
10:22 - nicely nicely formatted as here okay I
10:27 - mean that's that's about it for
10:31 - multi-dimensional arrays I probably
10:34 - should mention the case where for
10:36 - example you could do something like
10:38 - string array 2-d array let's call it
10:42 - words equals new string and I could just
10:46 - specify only the first dimension here I
10:52 - could say that's gonna that's gonna be
10:54 - two so I'm going to have two rows in my
10:56 - array and leave the last one empty and
10:59 - what that would do was it would not set
11:01 - each row to anything so each row will be
11:03 - null if I do this out
11:07 - since our words zero for example that
11:11 - will output null here so the last array
11:15 - index here is allowed to be empty and
11:17 - then you have to set it manually so to
11:19 - speak to an array so - you have to set
11:24 - up your sub dart sub arrays one by one
11:27 - so I could say words zero equals new
11:32 - string array let's give it a dimension
11:36 - of three like this and then I'm able to
11:44 - say things like words row 0 and then
11:50 - column columns are now within this array
11:53 - so I could say 1 for example equals hi
12:00 - there and then I could output that copy
12:06 - and sysout control space fully auto
12:11 - complete and I can and slack but either
12:14 - so okay that's it for this tutorial
12:17 - quite complex and in a next tutorial on
12:20 - this I think of something else important
12:22 - that I haven't told you meanwhile we
12:24 - will look at classes and objects and you
12:27 - can find this code on cave of
12:29 - programming comm so do visit that and
12:33 - please click like if you liked the video
12:35 - and I hope you'll join me next time so
12:38 - until then happy coding
12:44 - [Music]
12:53 - you

Cleaned transcript:

hello welcome to tutorial number 12 in the series of beginners drama tutorials from cave of programming calm and in this tutorial we're going to look at multidimensional arrays in Java so one a onedimensional array would be for example I could say int array values equals and then I could specify a bunch of integers here like this and the reason this is called a onedimensional array is because to specify the position of one of the items in this list I just need one number or dimension so I could say you know Sissel values two for example and here I get my array value so I'm just using one dimension here to specify this 11 array index a multidimensional array would require more than one array index to specify the value so in this tutorial I'm just going to look at twodimensional arrays but you can easily extrapolate this to three or four dimensional arrays if you're completely crazy so let's have a look at an example of a two dimensional array so the first difference is to create the variable that will point to the array I need two sets of square brackets like this and then I say let's say I'll call this grid and I'll set this equal to and I open like brackets as before and I'll close it down here and I put a semicolon in and now what we're going to have in here well in Java the important thing to realize is that a multidimensional array it's just an array of arrays so here each element in this array is an integer because this is a twodimensional array each element in this array will be another array so for example I could have this one article element I could put that in there and because each element is an array and actually each element technically is a reference to an array unlike in C++ say the different elements of of this array don't have to be same length so I could have like two values here for example and then I don't know one two three four I could have four values here and so on so this is a multidimensional array and most often probably you want to have the same number of values in each row but as I say it's optional and to refer to values in this this is basically a table or a grid of numbers and what you do is I could say let's say I want to refer to this value so I type grid which is the name of the array reference here the array variable and then this is Rho 0 Rho 1 Rho 2 and you need the row first because if you think of this if you think of these as being each of these is an element of the kind of bigger array the outer array then the first thing you need to do is specify the position of this so and in other words you type the row index first and it's always row column so here this is Rho it's the second row but because we start numbering from 0 this is array index 1 and then again this is going to be this is going to be at index 0 within that row and this is going to be at index 1 so here again it's it's going to be 1 1 so this means row 1 column 1 but don't forget you start numbering from 0 so 0 1 for the rows and then 0 1 for the columns I'll put this value and I should get four and I can also of course output for example some maybe it's less confusing if I output value that isn't a 11 so let's say this one will be 0 and 0 1 2 so this values 0 2 so if I copy that and output this I will say 0 2 so row 0 column 2 and I output that and I get 2 3 4 3 again now here so here I'm them here I'm initializing the array at the same time that I declare it and of course I can just create the array first and initialize it later I could say 1 about I could use a string let's say string array so a twodimensional array of strings call it tetes equals and I say new string and here I have the number of entries that I want in this sort of outer array in other words the number of rows by one here so let's have two rows and then I specify the number of columns that I want in this array let's say 3 so this is an array of an array of strings twodimensional array of strings and technically a twodimensional array of references to strings and it could I could output any value in this array of array of strings by saying let's say I could have Tex 0 and then let's output so zeroth row and first column and of course because I haven't set any strings yet that will be null and I could of course assign values to these strings by saying let's say X naught naught and 1 equals hello there hello there and let's just put this up here so that I set it before I output it and you get hello there iterating through arrays of strings iterating through twodimensional arrays of strings or integers or whatever is of course a little bit more complex than the onedimensional case you could use the for loop with a style of doing it but let's I think it's actually simpler just to stick to for loops with with loop counters for twodimensional arrays so let's look at how you do that so what you do is first you iterate through two rows and then you iterate through the columns so you have a nested for loop for loop within a for loop so for the outer array let's let's take grid and I'll say for int I equals naught I less than grid length as if it was a onedimensional array I plus plus so this is iterating over the rows here and now I want to iterate over the columns within this so I say for and I need to choose a different name for the loop variable here to avoid a conflict so I'll say for into K equals naught in fact just to make it clearer I could in fact not use I I could use I could call this row so row row that's better actually and then here I could say for in Col equals naught call less than now what is the dimension of the rotor we want to iterate over I mean what's the length of the the road I am iterating over it's actually going to be grid array brackets row dot length and then call plus plus and of course as always you can take a closer look at this code and try to get your head around it on K for programming comm which is all one word and let's say I can output now grid and I need row and then the column and a handy thing to do with arrays to make your output look nice is I can change println to print so instead of printing each number here on its own line I can print them all out one after the other on the same line and I can just print out here actually I just add here some space after each number or if you put /t in quotes that will output a tab character so I'm just adding concatenating space here to them to this string that I'm outputting it's not actually strings and integer but Java will understand that I want to create a string here and then after each row so within the outer loop and not within the inner loop I want to output a new line so I can just output a empty six out dot println this this is quite complex but just play around with it look at the codes try and change it and you'll soon get a hang so if I output that it's outputting my grid of numbers here nicely nicely formatted as here okay I mean that's that's about it for multidimensional arrays I probably should mention the case where for example you could do something like string array 2d array let's call it words equals new string and I could just specify only the first dimension here I could say that's gonna that's gonna be two so I'm going to have two rows in my array and leave the last one empty and what that would do was it would not set each row to anything so each row will be null if I do this out since our words zero for example that will output null here so the last array index here is allowed to be empty and then you have to set it manually so to speak to an array so you have to set up your sub dart sub arrays one by one so I could say words zero equals new string array let's give it a dimension of three like this and then I'm able to say things like words row 0 and then column columns are now within this array so I could say 1 for example equals hi there and then I could output that copy and sysout control space fully auto complete and I can and slack but either so okay that's it for this tutorial quite complex and in a next tutorial on this I think of something else important that I haven't told you meanwhile we will look at classes and objects and you can find this code on cave of programming comm so do visit that and please click like if you liked the video and I hope you'll join me next time so until then happy coding you
