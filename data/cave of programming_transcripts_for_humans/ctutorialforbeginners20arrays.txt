With timestamps:

00:17 - hello in this video we're going to learn
00:20 - about arrays in C++ as so so far in this
00:25 - series of tutorials we've seen variables
00:27 - that look like this for example so
00:30 - that's just a single value an array is a
00:34 - list of values contained in one variable
00:38 - and how this looks is like this so let's
00:43 - say we want an array of int that means a
00:45 - list of int variables we type int and
00:48 - then the name let's say values here and
00:52 - square brackets after that and in the
00:56 - square brackets we put the number of
00:57 - items that we want in the array so let's
01:00 - have a an array a list of 3 in seer so
01:05 - here we've created an array of three
01:08 - items and each and item in that list we
01:12 - call an element so each element in that
01:14 - list behaves exactly like a normal
01:17 - variable and to access the elements for
01:22 - example to access the first element and
01:24 - we start numbering the elements at zero
01:26 - so here we've got element zero one and
01:30 - two because there are three items we can
01:33 - tie this value and square brackets again
01:36 - and we type in these square brackets the
01:40 - index the position of the element that
01:43 - we want to access in the list so because
01:47 - we've got zero one two and three the
01:48 - first element is at value zero here and
01:51 - I can set that to some value just like I
01:54 - would with any normal integer and so oh
02:00 - yeah its values that's why I'm getting a
02:01 - little area so now we can output that
02:04 - just like we could with a normal
02:06 - variable so let's say values and square
02:09 - brackets to access it again and we type
02:13 - endler and let's run this program
02:17 - so we get 88 so there are three values
02:23 - that we can access them accessing this
02:24 - array of three elements let's set all of
02:27 - them so we've got 0 1 & 2 let's set
02:32 - these two different values I'll have 1 2
02:34 - 3 & 7 and we can output them all here
02:39 - with C outs so 1 & 2 & if we run this
02:46 - then we get exactly what you might
02:48 - expect so we've got when the thing
02:52 - finally runs here are our values that
02:54 - we've output so you don't have to access
02:56 - them in order or anything like that and
02:58 - this is literally created 3 integers 3
03:02 - different elements which we can access
03:03 - wherever we need them individually in
03:05 - the program in any order just by using
03:09 - this subscript this array index we call
03:13 - it and let's let's take a look at what
03:18 - happens if I don't set one of the values
03:20 - in fact before I do that yeah yeah let's
03:22 - do that let's just do that so if I
03:24 - comment out this so here I'm setting the
03:28 - value of the second element with index 1
03:31 - because we start numbering at 0 2 1 2 3
03:33 - if I now run this program you see for
03:37 - the value and the element at index 1 we
03:41 - go just this garbage value and that's
03:44 - because by default and the different
03:47 - integers in an array or whatever values
03:51 - you have in there it could be doubles or
03:53 - whatever are not initialized so they're
03:56 - not set to anything in particular and if
03:58 - you output them or you try to use them
04:00 - without setting them first
04:02 - you just get whatever rubbish happen to
04:04 - be hanging around in the computer's
04:06 - memory so it's important to set them
04:08 - first
04:09 - so some other things that you can do
04:11 - with arrays let's create another array
04:13 - here let's say we could we could use
04:16 - doubles just for change let's say
04:18 - doubles I'll call this numbers
04:24 - and we need to squirt square brackets
04:26 - and we'll create an array of let's say
04:28 - four values here and one thing you can
04:32 - do is you can initialize this array when
04:35 - you declare it so initializing means
04:38 - actually setting values for your
04:41 - variables here we say what we're
04:42 - declaring an array when you do this
04:45 - you're declaring a variable but you can
04:47 - also initialize it when you declare it
04:49 - and that means actually setting the
04:51 - values in it so to do that we said we we
04:54 - type equals and then we have a pair of
04:57 - curly parenthesis and if you've done any
05:01 - mathematics you might recognize this as
05:02 - being very similar to set notation and
05:05 - then we type the values that we want to
05:07 - initialize this array with in these
05:08 - curly brackets so let's type four point
05:11 - five two point three and seven point two
05:18 - eight point one or whatever and now we
05:22 - can output these so let's just copy this
05:25 - so I'll use this and type numbers zero
05:29 - so we'll output the zeroth one and that
05:31 - should be four point five and if we run
05:33 - this here we get four point five down
05:36 - here just to make this output a little
05:39 - bit clearer let's and let's put in some
05:41 - like a title so array of integers endler
05:49 - I can also put an end ler and at the
05:53 - beginning if I want just to have some
05:55 - extra space there
05:56 - well I won't put it X this is to start
05:58 - the program but I think what I will do
06:00 - is let's just have like a sort of and
06:04 - some equal signs just to underline this
06:06 - title and then let's put this down here
06:11 - as well so here we're dealing with
06:13 - doubles now array of doubles and I'll
06:17 - just auto format that there with the
06:20 - command shift therefore control shift F
06:22 - or control shift F on Windows and I'll
06:25 - have another endler at the start here so
06:27 - you can use endler anywhere where you
06:30 - want to have a newline character output
06:32 - you don't have to have it
06:33 - at the end here so that will just create
06:35 - a proper blank line and let's just run
06:38 - that and see how it looks and yes we've
06:40 - got some nice titles there now so a
06:45 - common thing to do is is actually to
06:47 - iterate through an array and we can do
06:50 - that one way of doing that is with a for
06:52 - loop which is quite a common thing to do
06:54 - so we're going to say here for int I
06:56 - equals naught we usually start a loop
07:02 - counter at 0 and we're going to loop
07:05 - while I is less than the number of items
07:08 - in the array which is 4 so remember this
07:10 - this will loop through 4 values 0 1 2 &
07:15 - 3 and that's exactly what we need for
07:17 - the fully indices in the array because
07:21 - we start numbering numbering at 0 and I
07:25 - plus plus it can be a little bit
07:27 - confusing to beginners that that we
07:31 - start numbering at 0 and and sometimes
07:35 - like results like that first element is
07:37 - that there is a position index 0 instead
07:40 - of index 1 this is sometimes referred to
07:43 - as the off by one problem it's not
07:45 - really a problem it's actually quite
07:47 - convenient but it can be confusing when
07:49 - you when you start programming so we've
07:51 - got this loop here that's looping over
07:53 - all the array indices so 0 2 3 for this
07:57 - array of 4 values and we can output now
08:00 - some stuff let's say the fal elements
08:05 - elements at index and that's output the
08:11 - loop counter here and then some just
08:15 - some punctuation and then I'm going to
08:17 - output the actual element in the array
08:19 - so numbers and I endler and let's see
08:26 - how that looks so if I run this now
08:30 - we got this sub nice little table we've
08:34 - got all the different values here that
08:36 - we set here you can also set elements in
08:40 - the new there's no problem as I said and
08:42 - they behave like just normal variables
08:44 - so I could in its loop you know I could
08:46 - assign numbers to something numbers I
08:50 - equals 77 if I did all that that that
08:55 - would set every element in the array to
08:58 - 77 so here I'm setting the values but
09:01 - here I'm overwriting them one by one
09:03 - before I output them so we can set them
09:07 - or get them in a loop it's not a problem
09:09 - sometimes you want to initialize an
09:12 - array with zero values so let's let's
09:17 - take a quick look at that so I'll type
09:20 - it in this shell icing with zero values
09:25 - and we'll have an array of numbers again
09:29 - I think I say int Center and array of
09:33 - int so I'll say int number array and
09:41 - let's have my I don't know eight values
09:44 - or whatever you can have lots and lots
09:46 - of elements in an array you could have
09:48 - tens of thousands or whatever it's not a
09:50 - problem and to actually initialize that
09:53 - so that each value is set to zero at the
09:55 - start we can just set this equal to a
09:59 - pair of empty curly brackets like that
10:02 - and then it's copy this for loop just to
10:05 - output these values so I'll format that
10:09 - and then we're going to say I is going
10:12 - from 0 through to 7 here so what will
10:15 - loop until I is equal to 8 and then we
10:18 - stop looping and it's output here number
10:22 - already
10:25 - and run this so I want to say that and
10:29 - now we see that we've got all zeroes in
10:32 - this array we've set them all to 0 with
10:35 - these empty brackets not really any need
10:37 - for space in there although you can put
10:39 - 1 if you somehow feel move to do that
10:41 - but it's not necessary I think that's
10:46 - all I want to tell you about the basics
10:48 - of arrays at the moment yeah I should
10:52 - mention that you can have any type in an
10:54 - array basically any type at all you
10:56 - could create an array of strings so
10:59 - array or strings and that would look
11:02 - like this let's say so you can say
11:05 - string Tex and let's are 3 of them and
11:11 - actually yes something else that I
11:13 - should mention it's that if if you
11:16 - initialize your array of a star like
11:19 - this so so here I can put initializers
11:23 - in here in its initial values in here
11:25 - just like I did here but because this is
11:28 - strings now I can put stuff in quotes
11:31 - like that
11:33 - 'banahna and orange let's say and if if
11:40 - you initialize it then you don't have to
11:43 - put a number in the bracket so if you
11:48 - have values in here C++ can figure out
11:51 - how many values there are and it can
11:53 - size your array automatically for you so
11:56 - with with if you initialize it when you
12:00 - actually declare it then you don't have
12:03 - to have the initial size of the array
12:05 - array it's as you do if you're not in
12:09 - not initializing it when you declare it
12:11 - and you can loop through that just with
12:13 - a loop like that it would work just the
12:16 - same and output them
12:19 - let's let's actually do that just just
12:21 - because this unused variable warning
12:24 - that we see oh yeah no it wasn't unused
12:27 - variable warning it was just pointing
12:29 - out that I hadn't got a semicolon in
12:31 - there so let's let's just output this
12:32 - anyway just fun so now it's going to
12:35 - have to go up to three because I've got
12:37 - three elements in there so I'm going to
12:40 - give you a little challenge that you can
12:42 - try in a minute if you want to and and
12:45 - as far as I can think there is one last
12:48 - thing that I want to mention which is
12:50 - actually extremely important so let's
12:53 - say initializing with strings here
12:58 - format so that that looks good
13:02 - so one important thing to be really
13:06 - hyper aware of and is that c++ will not
13:11 - stop you accessing elements that don't
13:13 - exist
13:13 - if we type let's say well it's taken
13:16 - existing array up here we've got inked
13:19 - values three so file use the values
13:21 - array has three elements in it but
13:24 - there's nothing stopping us doing stuff
13:26 - like see out values and three so it's
13:33 - got three elements and the array indices
13:35 - start numbering zero so these are the
13:37 - only value value indices we can use zero
13:40 - one and two they number all the items in
13:42 - this array of three values three is not
13:45 - defined it's not part of the array the
13:48 - so called array value the element at
13:50 - index 3 is it's not even in the erase
13:54 - off the end of the array and some
13:56 - languages like Java would stop you doing
13:58 - that and so that you don't mess your
14:01 - program up but this doesn't you see here
14:04 - I've output and where are we here I
14:08 - think it's this one right so let's just
14:11 - double check bad idea
14:17 - but C++ does not stop you doing this but
14:21 - what we're doing here is it's very bad
14:24 - we're just accessing some some memory
14:27 - that's not being allocated in the
14:29 - program is some basically a random bit
14:33 - of computer memory and accessing it it's
14:35 - just stupid there's no possible reason
14:38 - here why you could possibly want to do
14:41 - that but writing to it is even worse and
14:45 - a common source of books and C++
14:47 - programs is that you like you for
14:50 - example we could assign a value to
14:52 - values 3 or values 10 or whatever but
14:56 - that would screw up your program and a
14:59 - terrible thing about it as well is that
15:00 - your program won't necessarily crash if
15:04 - we assign something to values 3 for
15:07 - example the program might work most of
15:11 - the time but then occasionally at my
15:13 - crash and I you could even and crash
15:17 - your whole computer doing that I'm not
15:19 - sure if you could actually mess up your
15:21 - operating system I I read a long time
15:25 - ago that it was a theoretical
15:26 - possibility but I'm not sure if that's
15:28 - still true in moderate modern operating
15:30 - systems but in any case what you
15:33 - definitely don't want to do is you
15:35 - definitely don't want to try to work
15:37 - with values though off the end of your
15:40 - array so be really really careful about
15:42 - that C++ won't stop you doing it unlike
15:45 - Java for example ok so and that's that's
15:50 - a sort of briscoe review of arrays and
15:52 - I'd suggest to practice this first try
15:56 - to glaring some arrays and try assigning
15:58 - values try using those values and output
16:01 - the entire array with an ax loop with it
16:03 - with a loop as I have done in this
16:05 - tutorial and if you want a little bit
16:08 - more practice try to create an array
16:12 - that contains let's say that 12 times
16:14 - table so 12 24 36 and so on start with 0
16:19 - and go up to 12 times 12 so that's going
16:22 - to be 13 and
16:24 - from values in your array and use a loop
16:27 - first to initialize the array with the
16:30 - 12 times table don't over manually use a
16:32 - loop and then use another loop to
16:34 - display the whole 12 times table see if
16:38 - you can do that so that's it for this
16:40 - tutorial and until next time happy
16:43 - coding
16:51 - you
17:04 - you

Cleaned transcript:

hello in this video we're going to learn about arrays in C++ as so so far in this series of tutorials we've seen variables that look like this for example so that's just a single value an array is a list of values contained in one variable and how this looks is like this so let's say we want an array of int that means a list of int variables we type int and then the name let's say values here and square brackets after that and in the square brackets we put the number of items that we want in the array so let's have a an array a list of 3 in seer so here we've created an array of three items and each and item in that list we call an element so each element in that list behaves exactly like a normal variable and to access the elements for example to access the first element and we start numbering the elements at zero so here we've got element zero one and two because there are three items we can tie this value and square brackets again and we type in these square brackets the index the position of the element that we want to access in the list so because we've got zero one two and three the first element is at value zero here and I can set that to some value just like I would with any normal integer and so oh yeah its values that's why I'm getting a little area so now we can output that just like we could with a normal variable so let's say values and square brackets to access it again and we type endler and let's run this program so we get 88 so there are three values that we can access them accessing this array of three elements let's set all of them so we've got 0 1 & 2 let's set these two different values I'll have 1 2 3 & 7 and we can output them all here with C outs so 1 & 2 & if we run this then we get exactly what you might expect so we've got when the thing finally runs here are our values that we've output so you don't have to access them in order or anything like that and this is literally created 3 integers 3 different elements which we can access wherever we need them individually in the program in any order just by using this subscript this array index we call it and let's let's take a look at what happens if I don't set one of the values in fact before I do that yeah yeah let's do that let's just do that so if I comment out this so here I'm setting the value of the second element with index 1 because we start numbering at 0 2 1 2 3 if I now run this program you see for the value and the element at index 1 we go just this garbage value and that's because by default and the different integers in an array or whatever values you have in there it could be doubles or whatever are not initialized so they're not set to anything in particular and if you output them or you try to use them without setting them first you just get whatever rubbish happen to be hanging around in the computer's memory so it's important to set them first so some other things that you can do with arrays let's create another array here let's say we could we could use doubles just for change let's say doubles I'll call this numbers and we need to squirt square brackets and we'll create an array of let's say four values here and one thing you can do is you can initialize this array when you declare it so initializing means actually setting values for your variables here we say what we're declaring an array when you do this you're declaring a variable but you can also initialize it when you declare it and that means actually setting the values in it so to do that we said we we type equals and then we have a pair of curly parenthesis and if you've done any mathematics you might recognize this as being very similar to set notation and then we type the values that we want to initialize this array with in these curly brackets so let's type four point five two point three and seven point two eight point one or whatever and now we can output these so let's just copy this so I'll use this and type numbers zero so we'll output the zeroth one and that should be four point five and if we run this here we get four point five down here just to make this output a little bit clearer let's and let's put in some like a title so array of integers endler I can also put an end ler and at the beginning if I want just to have some extra space there well I won't put it X this is to start the program but I think what I will do is let's just have like a sort of and some equal signs just to underline this title and then let's put this down here as well so here we're dealing with doubles now array of doubles and I'll just auto format that there with the command shift therefore control shift F or control shift F on Windows and I'll have another endler at the start here so you can use endler anywhere where you want to have a newline character output you don't have to have it at the end here so that will just create a proper blank line and let's just run that and see how it looks and yes we've got some nice titles there now so a common thing to do is is actually to iterate through an array and we can do that one way of doing that is with a for loop which is quite a common thing to do so we're going to say here for int I equals naught we usually start a loop counter at 0 and we're going to loop while I is less than the number of items in the array which is 4 so remember this this will loop through 4 values 0 1 2 & 3 and that's exactly what we need for the fully indices in the array because we start numbering numbering at 0 and I plus plus it can be a little bit confusing to beginners that that we start numbering at 0 and and sometimes like results like that first element is that there is a position index 0 instead of index 1 this is sometimes referred to as the off by one problem it's not really a problem it's actually quite convenient but it can be confusing when you when you start programming so we've got this loop here that's looping over all the array indices so 0 2 3 for this array of 4 values and we can output now some stuff let's say the fal elements elements at index and that's output the loop counter here and then some just some punctuation and then I'm going to output the actual element in the array so numbers and I endler and let's see how that looks so if I run this now we got this sub nice little table we've got all the different values here that we set here you can also set elements in the new there's no problem as I said and they behave like just normal variables so I could in its loop you know I could assign numbers to something numbers I equals 77 if I did all that that that would set every element in the array to 77 so here I'm setting the values but here I'm overwriting them one by one before I output them so we can set them or get them in a loop it's not a problem sometimes you want to initialize an array with zero values so let's let's take a quick look at that so I'll type it in this shell icing with zero values and we'll have an array of numbers again I think I say int Center and array of int so I'll say int number array and let's have my I don't know eight values or whatever you can have lots and lots of elements in an array you could have tens of thousands or whatever it's not a problem and to actually initialize that so that each value is set to zero at the start we can just set this equal to a pair of empty curly brackets like that and then it's copy this for loop just to output these values so I'll format that and then we're going to say I is going from 0 through to 7 here so what will loop until I is equal to 8 and then we stop looping and it's output here number already and run this so I want to say that and now we see that we've got all zeroes in this array we've set them all to 0 with these empty brackets not really any need for space in there although you can put 1 if you somehow feel move to do that but it's not necessary I think that's all I want to tell you about the basics of arrays at the moment yeah I should mention that you can have any type in an array basically any type at all you could create an array of strings so array or strings and that would look like this let's say so you can say string Tex and let's are 3 of them and actually yes something else that I should mention it's that if if you initialize your array of a star like this so so here I can put initializers in here in its initial values in here just like I did here but because this is strings now I can put stuff in quotes like that 'banahna and orange let's say and if if you initialize it then you don't have to put a number in the bracket so if you have values in here C++ can figure out how many values there are and it can size your array automatically for you so with with if you initialize it when you actually declare it then you don't have to have the initial size of the array array it's as you do if you're not in not initializing it when you declare it and you can loop through that just with a loop like that it would work just the same and output them let's let's actually do that just just because this unused variable warning that we see oh yeah no it wasn't unused variable warning it was just pointing out that I hadn't got a semicolon in there so let's let's just output this anyway just fun so now it's going to have to go up to three because I've got three elements in there so I'm going to give you a little challenge that you can try in a minute if you want to and and as far as I can think there is one last thing that I want to mention which is actually extremely important so let's say initializing with strings here format so that that looks good so one important thing to be really hyper aware of and is that c++ will not stop you accessing elements that don't exist if we type let's say well it's taken existing array up here we've got inked values three so file use the values array has three elements in it but there's nothing stopping us doing stuff like see out values and three so it's got three elements and the array indices start numbering zero so these are the only value value indices we can use zero one and two they number all the items in this array of three values three is not defined it's not part of the array the so called array value the element at index 3 is it's not even in the erase off the end of the array and some languages like Java would stop you doing that and so that you don't mess your program up but this doesn't you see here I've output and where are we here I think it's this one right so let's just double check bad idea but C++ does not stop you doing this but what we're doing here is it's very bad we're just accessing some some memory that's not being allocated in the program is some basically a random bit of computer memory and accessing it it's just stupid there's no possible reason here why you could possibly want to do that but writing to it is even worse and a common source of books and C++ programs is that you like you for example we could assign a value to values 3 or values 10 or whatever but that would screw up your program and a terrible thing about it as well is that your program won't necessarily crash if we assign something to values 3 for example the program might work most of the time but then occasionally at my crash and I you could even and crash your whole computer doing that I'm not sure if you could actually mess up your operating system I I read a long time ago that it was a theoretical possibility but I'm not sure if that's still true in moderate modern operating systems but in any case what you definitely don't want to do is you definitely don't want to try to work with values though off the end of your array so be really really careful about that C++ won't stop you doing it unlike Java for example ok so and that's that's a sort of briscoe review of arrays and I'd suggest to practice this first try to glaring some arrays and try assigning values try using those values and output the entire array with an ax loop with it with a loop as I have done in this tutorial and if you want a little bit more practice try to create an array that contains let's say that 12 times table so 12 24 36 and so on start with 0 and go up to 12 times 12 so that's going to be 13 and from values in your array and use a loop first to initialize the array with the 12 times table don't over manually use a loop and then use another loop to display the whole 12 times table see if you can do that so that's it for this tutorial and until next time happy coding you you
