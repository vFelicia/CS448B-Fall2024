With timestamps:

00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from Cave of
00:19 - programming. comom I wanted to add a
00:22 - video to this course just explaining a
00:25 - bit about um C++ design considerations
00:29 - in particular in the context of the
00:33 - program that we've developed in this
00:34 - course which is this particle fire
00:37 - simulation type
00:39 - thing so um as as I went along I kind of
00:43 - uh explained how the various classes
00:45 - worked but I didn't really explain why I
00:48 - implemented them in the way that I did
00:50 - which is a bit of an Omission so I
00:52 - wanted to talk just a little bit about
00:54 - designing
00:55 - C++ um I I've never been a big fan of
00:58 - Designing everything up front and then
01:01 - trying to code what you've already
01:03 - written because uh I think even the best
01:06 - software developer in the world is going
01:08 - to discover new things and get new ideas
01:12 - while they're actually implementing
01:14 - something and indeed we've seen
01:15 - historically that if you do upfront
01:18 - design uh where you design everything in
01:21 - advance and then try to implement it we
01:23 - we pretty much usually expect to get
01:26 - time overruns schedule overruns or
01:28 - budget overruns if you have to pay for
01:30 - the development so I I'm much prefer an
01:33 - iterative approach where you you try
01:36 - firstly to get some sort of very basic
01:39 - prototype together or at least you try
01:42 - to demonstrate some of the key things
01:44 - that your software is going to have to
01:45 - do like making a sound or um creating a
01:49 - window and writing pixels on it and then
01:52 - you kind of add bits to that software
01:55 - and you continuously build the software
01:57 - at every stage uh just build it like
01:59 - crazy if you've got a huge program that
02:02 - might have to be overnight every night
02:04 - but with a a smaller program like this
02:06 - we can afford to just add little bits of
02:09 - code and then immediately build it to to
02:12 - check that the code we've added uh makes
02:15 - sense and uh personally I'm a big fan of
02:17 - that approach so I won't talk about
02:20 - upfront design uh because it's not
02:23 - something I'm a fan of and and I'm I'm
02:25 - not good at it I'm just going to talk
02:27 - about um kind of um the thought process
02:30 - I had to go through to put this program
02:33 - together so as you've seen if you if you
02:36 - watched the other videos uh the first
02:38 - thing I did was put together an sdl demo
02:41 - program and that kind of did all the um
02:45 - basic sdl initialization code I don't
02:48 - have that stuff in my head I just looked
02:49 - at various bits of example code and sdl
02:52 - documentation and gradually put together
02:55 - a little demo program because I think
02:56 - it's important to um to test
03:00 - anything in your program that might be
03:03 - contentious that might not work on your
03:04 - system or whatever and here we wanted to
03:07 - create a screen and write pixels to it
03:10 - using a library that we hadn't seen
03:12 - before so it makes sense to kind of get
03:14 - a little demo program together just a
03:17 - really small program to test all this
03:20 - stuff with renderers and pixels and
03:22 - everything creating windows and check
03:23 - that it works and that we understand how
03:26 - to do it so that that was the first
03:28 - stage and then the second stag is once I
03:31 - once I got all this code which
03:33 - initialized sdl just drew some pixels
03:36 - and then um closed down XL um closed
03:39 - down
03:40 - sdl then I kind of looked at it and said
03:43 - well okay this is a good candidate for
03:44 - putting in its own class cuz originally
03:46 - we had all this all this kind of code
03:49 - initialization and destruction uh in the
03:51 - main
03:53 - program but uh it it's it's all related
03:56 - to one function it's all basically aimed
03:58 - at drawing at the screen so it seemed
04:01 - like a good idea to put that all in a
04:03 - separate class get it out of the main
04:05 - function so it's not cluttering up our
04:07 - main program encapsulate it in its own
04:10 - class and for that reason I created this
04:12 - screen class that does all that now
04:16 - there was a bit of code that U wasn't
04:19 - directly related to um to actually the
04:23 - the the business of drawing things on
04:26 - the screen and that was this code that
04:28 - processed our event
04:30 - so it checks what the users pressed if
04:32 - anything and takes an appropriate
04:34 - response and here that was a very very
04:37 - that's you can see that's a very very
04:38 - small amount of code so I figured okay
04:41 - this isn't going to expand let's just
04:43 - put it in the screen class arguably um
04:46 - processing events is also related to um
04:50 - to your window this is kind of a class
04:51 - that deals with window related stuff
04:54 - like drawing so arguably that's not a
04:56 - bad place to put it but if I'd had um a
04:59 - lot of event processing going on and it
05:01 - was complex then I might well have
05:03 - created a separate class uh called
05:06 - handle input or something that is just
05:08 - related to um to handling input but in
05:12 - this case I I put it in a screen class
05:14 - with the drawing
05:16 - code now once I've got that um it was
05:20 - clear that we we were going to need to
05:22 - deal with particles we don't want to if
05:24 - we're dealing with some distinct entity
05:26 - like a particle that bounces around the
05:28 - screen that's a that's a kind of obvious
05:31 - candidate for putting in its own class
05:34 - uh so um I I I created a particle
05:38 - class and that that was pretty
05:40 - straightforward uh we don't want to um
05:43 - sort of have separate bits of code
05:46 - dealing with the same thing the same
05:48 - pixel that's moving around you know okay
05:50 - it's it's actually different pixels
05:52 - being illuminated but conceptually we're
05:54 - thinking of this as being a particle
05:57 - that's moving around so it makes sense
05:58 - to encapsulate that in its own class and
06:01 - we don't want to kind of splatter
06:02 - different bits of code related to the
06:05 - same function throughout the software we
06:07 - don't want some code in one place that
06:10 - um that uh that kind of um moves
06:13 - particles and another bit of code
06:15 - somewhere else that changes the color or
06:16 - whatever we we want to encapsulate that
06:19 - in the class so just kind of looking at
06:21 - it and thinking about it um the a
06:24 - particle class seemed like a good idea
06:26 - if if we had a game and we had um let's
06:29 - say a spaceship in that game then of
06:31 - course that that's that's just
06:33 - conceptually from a human point of view
06:35 - that's a distinct object and so would
06:38 - probably want to represent that by some
06:40 - sort of spaceship object in our class
06:42 - and of course that could be a part of a
06:44 - hierarchy of classes where we could have
06:47 - a a Bas a base class that uh draws
06:50 - something on the screen and then we
06:51 - could add different kinds of behavior
06:53 - and get different subclasses to use
06:55 - different Graphics or whatever just as
06:57 - necessary uh so we could create
07:00 - different objects in our game like that
07:03 - but it's a it's clearly a good candidate
07:04 - for its own class and when I when I had
07:07 - the particle class um it was it was
07:09 - pretty clear that we were going to have
07:10 - to deal with big groups of particles and
07:13 - we've got to put that code somewhere uh
07:16 - we don't really want to put it in the
07:18 - screen class because the thing is that
07:20 - the screen class is uh it's a pretty
07:23 - pretty reusable class we could take this
07:26 - screen class which just deals with
07:27 - setting up XL setting up sdl closing it
07:31 - down minimal event handling and um
07:34 - drawing stuff to the screen from a
07:36 - buffer we could use that in any program
07:39 - so it's it's really reusable and if we
07:41 - started putting stuff specific to our
07:44 - program in this class like code relating
07:47 - to particles we can't reuse it anymore
07:49 - it's it's then forever tied to dealing
07:52 - with particles so once I got my screen
07:55 - class I wanted to keep it separate from
07:57 - other classes with with the idea in mind
08:00 - that um it's it's reusable and we also
08:03 - don't want to tangle it up unnecessarily
08:05 - with other code that really has nothing
08:07 - to do with this basic business of
08:10 - creating a window and um enabling
08:13 - drawing on that
08:16 - window uh so I needed some class that
08:19 - was going to organize particles um that
08:22 - was clear I didn't want to put that in
08:24 - my screen class I wanted to keep that as
08:26 - it is so it's nicely reusable and
08:28 - self-contained
08:30 - and I didn't want to clutter up my my
08:32 - main. CPP here with um code that has to
08:35 - manage a whole swarm of particles so for
08:38 - that reason I created this class swarm
08:41 - and the point of this is just to deal
08:44 - with a whole collection of particles Al
08:49 - together so that that also uh kind of
08:51 - makes sense if you just think about this
08:53 - program you know just just conceptually
08:55 - clearly we've got individual particles
08:57 - here and clearly we've got
09:00 - we're dealing with a swarm of them there
09:02 - so just by thinking about what's in that
09:05 - uh program from a human point of view it
09:08 - kind of Clues Us in to what classes we
09:10 - might consider creating so I created
09:12 - this swarm class that can manage our a
09:16 - whole bunch of particles it doesn't do
09:18 - very much uh it's it's really just um
09:21 - creating particles deleting them later
09:24 - on which we can handily do in the um in
09:27 - the Constructor and D structor here
09:30 - respectively and I've also given it an
09:32 - update method because we need to update
09:35 - the positions of
09:37 - particles and since we've put the game
09:39 - Loop in
09:40 - main.cpp we're going to have to update
09:42 - them in this Loop but if if we've got a
09:45 - class that deals with a whole collection
09:46 - of
09:47 - particles um then it makes sense to get
09:50 - that class to do the business of
09:52 - visiting each particle in turn and
09:54 - updating its motion so rather than again
09:59 - if if the whole purpose of this class is
10:01 - to deal with an an aggregate of
10:03 - particles a whole load of particles so
10:07 - we want to try not to have code anywhere
10:09 - else that's dealing with individual
10:10 - particles otherwise that's kind of
10:12 - defeating the purpose of this class so I
10:15 - I created this update method and then
10:18 - that that deals with each of the
10:20 - particles in turn in the whole swarm and
10:23 - uh in main.
10:24 - CPP we only need to call the Swarm
10:28 - update method method to update each of
10:30 - the
10:31 - particles now a key design consideration
10:34 - here is to keep the Swarm and the screen
10:38 - class separate for the reasons I've
10:39 - mentioned we've got a nice reusable
10:41 - screen class then we've got um a very
10:44 - specific swarm particle swarm class
10:47 - that's really only for this program we
10:49 - can't well having said that even the
10:52 - Swarm uh class potentially could be
10:55 - reusable um inevitably cuz we're using
10:58 - sdl I've ended up splattering sdl code
11:02 - slightly uh throughout much of the
11:04 - program but if we look at um swarm Doh
11:09 - here swarm do
11:11 - CPP uh let's see swarm CPP there we go
11:15 - uh there's there's I don't think there's
11:17 - actually anything stdl specific in here
11:20 - which is really good actually which is
11:22 - what I wanted um because although yeah
11:26 - inevitably this the screen class is
11:28 - going to have have to make uh a lot of
11:30 - use of
11:32 - STL by implementing the Swarm class as
11:35 - separate from the screen class this also
11:38 - means potentially that we could even use
11:40 - the Swarm class in a different program
11:42 - so we could use a screen class in other
11:45 - STL programs we could also use the Swarm
11:48 - class in a different program that uses a
11:49 - different Graphics library to STL so I'm
11:53 - always thinking when I create these
11:55 - classes um can I write them in such a
11:57 - way that they don't depend on other
11:59 - classes or they have minimal dependence
12:02 - on other classes in my program so that
12:04 - they could be taken into another program
12:06 - that works differently and reuse
12:09 - there now of course somehow the the
12:12 - somehow we have to connect the Swarm and
12:15 - the uh and the
12:18 - screen and what what I could have done
12:21 - here was was I could have um given uh
12:26 - the I could have given the screen class
12:28 - some sort of method
12:29 - that accepts a reference to a swarm
12:32 - class but then I'm tying it to the Swarm
12:34 - class neither of them are so easy to
12:37 - reuse anymore well the screen class is
12:39 - not so easy to reuse anymore I suppose I
12:41 - could still reuse the Swarm class but
12:43 - what I did instead was um I I made swarm
12:47 - we turn nothing but a pointer to a load
12:51 - of
12:52 - particles and I thought well it's nice
12:54 - if we don't even have to have the screen
12:56 - class referring to particles so I made
12:59 - it so the screen class just has this set
13:01 - pixel method and then all we need is
13:04 - some code that Loops through the um the
13:08 - buffer of particles and then cause
13:10 - screen do set pixel so we managed to
13:13 - completely completely separate the Swarm
13:16 - class from the screen class there's
13:19 - there's no connection uh between them
13:22 - they're both reusable swarm has to know
13:24 - about particles cuz its whole task is to
13:27 - manage the particles but there's no no
13:29 - connection between that and the screen
13:31 - class there is U there is quite a lot of
13:33 - code in
13:34 - main.cpp uh if you've got a very big
13:36 - program you might want to try to aim for
13:38 - a main. CPP that's cleaner than this
13:41 - then we could have perhaps some sort of
13:43 - separate class that um that does know
13:46 - about swarm and does know about scream
13:49 - and brings those two together somehow
13:51 - that's just going to be a little class
13:53 - with with kind of this kind of kind of
13:55 - code in it um but and that class clear
13:59 - is not going to be very reusable but
14:00 - it's just going to be a small class
14:02 - containing this kind of code here so
14:04 - that's not so bad we've still got uh
14:07 - swarm and Screen are still very reusable
14:12 - classes uh but because it's quite a
14:14 - small program I I opted just to put that
14:16 - in the in the main function it's not too
14:19 - bad you can see pretty much at a almost
14:22 - at a glance with a bit of practice um
14:24 - what's what's going on here the Box blur
14:28 - um algorithm that was something that
14:31 - um that I kind of thought about and in
14:33 - the end I decided to put it into screen
14:35 - we could have had some sort of separate
14:37 - box box blur class or some sort of blur
14:41 - class that implements various blurs and
14:44 - uh somehow we could have tried to
14:46 - separate that from the screen class but
14:48 - I figured if I reuse the screen class
14:50 - it's nice to have the option of blurring
14:52 - the screen anyway I'm not sure there's a
14:54 - huge advantage in this case to
14:56 - separating out the blur from the screen
14:58 - but that's also Al something that we
14:59 - could have thought of instead of
15:01 - implementing the blur code the blur code
15:04 - in the screen class okay so so so that's
15:07 - basically it and and the kind of basic
15:10 - message is try to make your classes
15:12 - depend on each other as little as
15:15 - possible try to encapsulate them and try
15:17 - to always think could I use this class
15:20 - in a different program that maybe uses
15:23 - you know different different apis or um
15:27 - that works very different to the one
15:29 - I've got try to make your classes
15:31 - reusable and self-contained with minimal
15:34 - dependence on other classes and
15:36 - inevitably you can't do that all the
15:38 - time but we've managed to do it somewhat
15:41 - at least in this program okay that's it
15:44 - for this tutorial I hope you enjoyed the
15:46 - course uh until next time oh one more
15:49 - thing actually yeah I've started working
15:51 - on an advanced C++ course and if you
15:53 - want um more information about that uh
15:56 - do go to Cave of programming. comom so
15:59 - until next time um happy
16:01 - [Music]
16:15 - coding

Cleaned transcript:

hello this is John from Cave of programming. comom I wanted to add a video to this course just explaining a bit about um C++ design considerations in particular in the context of the program that we've developed in this course which is this particle fire simulation type thing so um as as I went along I kind of uh explained how the various classes worked but I didn't really explain why I implemented them in the way that I did which is a bit of an Omission so I wanted to talk just a little bit about designing C++ um I I've never been a big fan of Designing everything up front and then trying to code what you've already written because uh I think even the best software developer in the world is going to discover new things and get new ideas while they're actually implementing something and indeed we've seen historically that if you do upfront design uh where you design everything in advance and then try to implement it we we pretty much usually expect to get time overruns schedule overruns or budget overruns if you have to pay for the development so I I'm much prefer an iterative approach where you you try firstly to get some sort of very basic prototype together or at least you try to demonstrate some of the key things that your software is going to have to do like making a sound or um creating a window and writing pixels on it and then you kind of add bits to that software and you continuously build the software at every stage uh just build it like crazy if you've got a huge program that might have to be overnight every night but with a a smaller program like this we can afford to just add little bits of code and then immediately build it to to check that the code we've added uh makes sense and uh personally I'm a big fan of that approach so I won't talk about upfront design uh because it's not something I'm a fan of and and I'm I'm not good at it I'm just going to talk about um kind of um the thought process I had to go through to put this program together so as you've seen if you if you watched the other videos uh the first thing I did was put together an sdl demo program and that kind of did all the um basic sdl initialization code I don't have that stuff in my head I just looked at various bits of example code and sdl documentation and gradually put together a little demo program because I think it's important to um to test anything in your program that might be contentious that might not work on your system or whatever and here we wanted to create a screen and write pixels to it using a library that we hadn't seen before so it makes sense to kind of get a little demo program together just a really small program to test all this stuff with renderers and pixels and everything creating windows and check that it works and that we understand how to do it so that that was the first stage and then the second stag is once I once I got all this code which initialized sdl just drew some pixels and then um closed down XL um closed down sdl then I kind of looked at it and said well okay this is a good candidate for putting in its own class cuz originally we had all this all this kind of code initialization and destruction uh in the main program but uh it it's it's all related to one function it's all basically aimed at drawing at the screen so it seemed like a good idea to put that all in a separate class get it out of the main function so it's not cluttering up our main program encapsulate it in its own class and for that reason I created this screen class that does all that now there was a bit of code that U wasn't directly related to um to actually the the the business of drawing things on the screen and that was this code that processed our event so it checks what the users pressed if anything and takes an appropriate response and here that was a very very that's you can see that's a very very small amount of code so I figured okay this isn't going to expand let's just put it in the screen class arguably um processing events is also related to um to your window this is kind of a class that deals with window related stuff like drawing so arguably that's not a bad place to put it but if I'd had um a lot of event processing going on and it was complex then I might well have created a separate class uh called handle input or something that is just related to um to handling input but in this case I I put it in a screen class with the drawing code now once I've got that um it was clear that we we were going to need to deal with particles we don't want to if we're dealing with some distinct entity like a particle that bounces around the screen that's a that's a kind of obvious candidate for putting in its own class uh so um I I I created a particle class and that that was pretty straightforward uh we don't want to um sort of have separate bits of code dealing with the same thing the same pixel that's moving around you know okay it's it's actually different pixels being illuminated but conceptually we're thinking of this as being a particle that's moving around so it makes sense to encapsulate that in its own class and we don't want to kind of splatter different bits of code related to the same function throughout the software we don't want some code in one place that um that uh that kind of um moves particles and another bit of code somewhere else that changes the color or whatever we we want to encapsulate that in the class so just kind of looking at it and thinking about it um the a particle class seemed like a good idea if if we had a game and we had um let's say a spaceship in that game then of course that that's that's just conceptually from a human point of view that's a distinct object and so would probably want to represent that by some sort of spaceship object in our class and of course that could be a part of a hierarchy of classes where we could have a a Bas a base class that uh draws something on the screen and then we could add different kinds of behavior and get different subclasses to use different Graphics or whatever just as necessary uh so we could create different objects in our game like that but it's a it's clearly a good candidate for its own class and when I when I had the particle class um it was it was pretty clear that we were going to have to deal with big groups of particles and we've got to put that code somewhere uh we don't really want to put it in the screen class because the thing is that the screen class is uh it's a pretty pretty reusable class we could take this screen class which just deals with setting up XL setting up sdl closing it down minimal event handling and um drawing stuff to the screen from a buffer we could use that in any program so it's it's really reusable and if we started putting stuff specific to our program in this class like code relating to particles we can't reuse it anymore it's it's then forever tied to dealing with particles so once I got my screen class I wanted to keep it separate from other classes with with the idea in mind that um it's it's reusable and we also don't want to tangle it up unnecessarily with other code that really has nothing to do with this basic business of creating a window and um enabling drawing on that window uh so I needed some class that was going to organize particles um that was clear I didn't want to put that in my screen class I wanted to keep that as it is so it's nicely reusable and selfcontained and I didn't want to clutter up my my main. CPP here with um code that has to manage a whole swarm of particles so for that reason I created this class swarm and the point of this is just to deal with a whole collection of particles Al together so that that also uh kind of makes sense if you just think about this program you know just just conceptually clearly we've got individual particles here and clearly we've got we're dealing with a swarm of them there so just by thinking about what's in that uh program from a human point of view it kind of Clues Us in to what classes we might consider creating so I created this swarm class that can manage our a whole bunch of particles it doesn't do very much uh it's it's really just um creating particles deleting them later on which we can handily do in the um in the Constructor and D structor here respectively and I've also given it an update method because we need to update the positions of particles and since we've put the game Loop in main.cpp we're going to have to update them in this Loop but if if we've got a class that deals with a whole collection of particles um then it makes sense to get that class to do the business of visiting each particle in turn and updating its motion so rather than again if if the whole purpose of this class is to deal with an an aggregate of particles a whole load of particles so we want to try not to have code anywhere else that's dealing with individual particles otherwise that's kind of defeating the purpose of this class so I I created this update method and then that that deals with each of the particles in turn in the whole swarm and uh in main. CPP we only need to call the Swarm update method method to update each of the particles now a key design consideration here is to keep the Swarm and the screen class separate for the reasons I've mentioned we've got a nice reusable screen class then we've got um a very specific swarm particle swarm class that's really only for this program we can't well having said that even the Swarm uh class potentially could be reusable um inevitably cuz we're using sdl I've ended up splattering sdl code slightly uh throughout much of the program but if we look at um swarm Doh here swarm do CPP uh let's see swarm CPP there we go uh there's there's I don't think there's actually anything stdl specific in here which is really good actually which is what I wanted um because although yeah inevitably this the screen class is going to have have to make uh a lot of use of STL by implementing the Swarm class as separate from the screen class this also means potentially that we could even use the Swarm class in a different program so we could use a screen class in other STL programs we could also use the Swarm class in a different program that uses a different Graphics library to STL so I'm always thinking when I create these classes um can I write them in such a way that they don't depend on other classes or they have minimal dependence on other classes in my program so that they could be taken into another program that works differently and reuse there now of course somehow the the somehow we have to connect the Swarm and the uh and the screen and what what I could have done here was was I could have um given uh the I could have given the screen class some sort of method that accepts a reference to a swarm class but then I'm tying it to the Swarm class neither of them are so easy to reuse anymore well the screen class is not so easy to reuse anymore I suppose I could still reuse the Swarm class but what I did instead was um I I made swarm we turn nothing but a pointer to a load of particles and I thought well it's nice if we don't even have to have the screen class referring to particles so I made it so the screen class just has this set pixel method and then all we need is some code that Loops through the um the buffer of particles and then cause screen do set pixel so we managed to completely completely separate the Swarm class from the screen class there's there's no connection uh between them they're both reusable swarm has to know about particles cuz its whole task is to manage the particles but there's no no connection between that and the screen class there is U there is quite a lot of code in main.cpp uh if you've got a very big program you might want to try to aim for a main. CPP that's cleaner than this then we could have perhaps some sort of separate class that um that does know about swarm and does know about scream and brings those two together somehow that's just going to be a little class with with kind of this kind of kind of code in it um but and that class clear is not going to be very reusable but it's just going to be a small class containing this kind of code here so that's not so bad we've still got uh swarm and Screen are still very reusable classes uh but because it's quite a small program I I opted just to put that in the in the main function it's not too bad you can see pretty much at a almost at a glance with a bit of practice um what's what's going on here the Box blur um algorithm that was something that um that I kind of thought about and in the end I decided to put it into screen we could have had some sort of separate box box blur class or some sort of blur class that implements various blurs and uh somehow we could have tried to separate that from the screen class but I figured if I reuse the screen class it's nice to have the option of blurring the screen anyway I'm not sure there's a huge advantage in this case to separating out the blur from the screen but that's also Al something that we could have thought of instead of implementing the blur code the blur code in the screen class okay so so so that's basically it and and the kind of basic message is try to make your classes depend on each other as little as possible try to encapsulate them and try to always think could I use this class in a different program that maybe uses you know different different apis or um that works very different to the one I've got try to make your classes reusable and selfcontained with minimal dependence on other classes and inevitably you can't do that all the time but we've managed to do it somewhat at least in this program okay that's it for this tutorial I hope you enjoyed the course uh until next time oh one more thing actually yeah I've started working on an advanced C++ course and if you want um more information about that uh do go to Cave of programming. comom so until next time um happy coding
