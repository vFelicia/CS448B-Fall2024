With timestamps:

00:16 - hello this is John from cave of
00:20 - programming calm in this tutorial we're
00:22 - going to load up allocating memory in
00:24 - C++ we've already seen in this course
00:27 - some ways of allocating small amounts of
00:31 - memory by declaring a variable or using
00:33 - the new operator to create an object or
00:37 - let's say an integer or something but
00:39 - we're going to look at this in this
00:41 - tutorial of how to allocate a whole load
00:43 - of memory all at once so we've seen
00:46 - before that you can do stuff like this
00:48 - I've got by the way I've got an animal
00:50 - class here and for this tutorial the
00:52 - relevant bits of this are that we've got
00:54 - constructor and destructor that just
00:56 - have C outs in them so that when we know
00:58 - when they're running we've also got a
01:00 - private instance string name and a
01:02 - setname method so an instance variable
01:04 - they're called name so we've seen that
01:09 - you can do stuff like this we can do
01:10 - animal and let's say pointer P animal
01:15 - equals new animal and later on if you do
01:19 - that with new you have to remember to
01:22 - call delete on the pointer later on to
01:25 - free the memory so if we run this now
01:29 - we're going to get animal created and
01:32 - destructor called so that's coming from
01:33 - the constructor and destructor just here
01:38 - we can also do similar stuff even with
01:42 - primitive types like for example int
01:44 - pointer P int equals new int like that
01:49 - and again we need to do delete P int so
01:54 - that will give us a single integer we
01:56 - can set the value of for example by st.
01:59 - P in T equals 8 and we could do C out
02:02 - think point 2 by P ends like that
02:07 - let's just run that so you can use new
02:10 - on basically any type at all what we can
02:15 - also do though is we can also allocate
02:18 - entire arrays of primitive types or of
02:22 - objects let's take a look at objects
02:24 - first so this is creating one animal so
02:27 - it's allocating the memory for that
02:29 - animal object and it's also actually
02:33 - instantiating an object that we could
02:36 - allocate enough memory for this animal
02:40 - object but not actually put anything in
02:42 - that memory not actually have an object
02:44 - in there and this is doing but this is
02:46 - doing both of those things it's actually
02:48 - allocating memory enough to put this
02:50 - animal object in and it's also
02:52 - instantiating the object in that memory
02:56 - so we can use array brackets with new
03:01 - like this so we can say new animal we
03:05 - can put a red break it's after it and
03:07 - put in the number of animals but we want
03:09 - to create let's say 10 and if we if we
03:13 - use these square brackets after the type
03:15 - here after new to say that we want a
03:18 - certain number of of these objects or it
03:21 - could also be a primitive type here like
03:23 - into double we must remember when we
03:26 - delete when the memory when we free the
03:29 - memory by calling Delete on the pointer
03:31 - we need to put square brackets
03:33 - also after delete and before the pointer
03:37 - like that and this tells C++ that we're
03:39 - not just deleting one instance of the
03:42 - object that the pointer points at we're
03:44 - going to free up a whole load of memory
03:47 - that it's pointing up so a whole load of
03:50 - memory blocks of this size so if you
03:54 - have square brackets there you're going
03:56 - to need them here as well although these
03:58 - don't have to have any number in them
04:00 - but this says how many of these objects
04:03 - you actually want to create memory for
04:06 - allocate memory for and instantiate in
04:09 - that memory space so let's run this now
04:11 - and we get 10 animals created and then
04:15 - when we call delete we'll get 10
04:18 - lots of destructor called down here so
04:23 - we can also do this with primitive types
04:25 - and it's particularly common to use char
04:29 - because if we say char pointer P let's
04:35 - say just Pete man for memory equals new
04:38 - char and in square brackets because char
04:41 - is a single byte we can allocate a
04:44 - specific number of bytes let's say a
04:46 - thousand and then we must remember of
04:48 - course to do delete on this as well so
04:52 - delete P men like that so this also
04:57 - works and it allocates a thousand bytes
04:59 - and we can use this with any type in
05:01 - double absolutely anything that we like
05:04 - so if we actually do this with animal
05:07 - here of course then we could we could
05:12 - move this pointer around in that space
05:15 - to access different animals and there
05:16 - are various ways of doing that we could
05:18 - just use a for loop or something we
05:20 - could do stuff like P animal could use
05:22 - array syntax or say P animal 5 so that's
05:26 - actually the 6 animal in the sequence
05:29 - we've got 10 starting at 0 at P animal v
05:33 - dot speak let's say and that is a method
05:39 - that I created here that outputs the
05:40 - name of the animal so we probably should
05:43 - set it as well let's do that
05:44 - so say P animal 5 dot set name George
05:51 - let's check that that works this is just
05:54 - working with the 6 animal in the array
05:57 - which is at index 5 and there we get
06:01 - here we got my name is George
06:05 - so I'm going to leave it there for this
06:07 - tutorial and I'm going to give you
06:08 - actually a little exercise to do the
06:12 - exercise is to allocate we'll create a
06:16 - class much like animal here something
06:18 - similar to that but as an instance
06:20 - variable of type string and a set method
06:23 - lets you set that string and also some
06:25 - method the less you output that instance
06:28 - variable as well so create a class like
06:30 - that call it person or animal or
06:32 - whatever you like could be anything and
06:34 - then set could allocate an array of 26
06:39 - of them and then for each object in that
06:43 - array which have allocated using new so
06:47 - I'm calling this an array X is like an
06:49 - array so for each and each object in
06:52 - that memory that you've allocated all 26
06:55 - of them set the main to be a string that
06:59 - contains a single letter of the alphabet
07:01 - going from A through to Z so like the
07:04 - American or English alphabet and then
07:06 - call the method on it whatever you've
07:09 - created that outputs that string so you
07:13 - can have 26 animals
07:14 - allocated with the new operator and
07:16 - you're going to set the name on each so
07:18 - they're going to be called ABCDE and so
07:20 - on through to Zed and you're going to
07:22 - also output that name with some method
07:25 - you've added to your class to output the
07:27 - string instance variable I'll just make
07:29 - a couple of little remarks I'll just
07:32 - give you a couple of tips on how to do
07:33 - that one thing that I want to show you
07:36 - is that if you want to set a string to a
07:39 - single character we can do it like this
07:41 - we can say here's a character we'll just
07:43 - call it C equals a let's say then we can
07:49 - say string let's call it name and we can
07:54 - use a form of the constructor that
07:56 - accepts that character but it's actually
07:59 - got a parameter before that and first
08:02 - parameter tells you how many of these
08:04 - characters put in the string so if we
08:06 - set this to one that's saying create a
08:09 - string that has one character in it and
08:12 - that character will be a if we put 10
08:14 - there the string would have 10 A's in it
08:17 - one after the other
08:18 - that's just output that and check that
08:20 - it works so and let's save that and run
08:25 - it and yeah I actually meant to use this
08:31 - yeah we've got the aether but I actually
08:33 - meant to use this child I declared that
08:37 - this let's do that so we can see we've
08:41 - got a string and it's got just the
08:43 - letter A in it if we put like five in
08:45 - there for example would have a string
08:48 - that consisted of five A's let's run
08:51 - this and there we got we've got our
08:52 - string five A's in it and if you create
08:57 - a char like let's remember tries
08:58 - basically an integer type so you can
09:00 - actually increment it like this if you
09:02 - increment the charge you could add some
09:04 - number to it for that matter if you run
09:06 - this because we started with a we've now
09:09 - got B that's because and wherever a is
09:13 - in the table of ASCII characters so no
09:16 - matter what this number is equivalent to
09:18 - if we increment it we're going to get a
09:20 - next character in the set which is B so
09:23 - using those two facts you can create
09:25 - strings with all the letters of the
09:27 - alphabet and use them to set the names
09:29 - of your objects so have a go at that and
09:31 - I'm not going to give you the solution
09:33 - to this but if you do get stuck anywhere
09:36 - then absolutely the thing to do is
09:39 - Google for every every little thing that
09:41 - you get stuck on try to build it up step
09:43 - by step and absolutely don't be afraid
09:45 - to Google for example code for what you
09:48 - want to do and the better you get with
09:50 - using Google the better programmer
09:52 - you'll be because you'll see more and
09:54 - more techniques more and more ways of
09:56 - doing things and gradually those hope
09:59 - you'll gradually remember those and
10:02 - you'll get
10:02 - flexibility with using different
10:03 - techniques so googling it's a great
10:06 - thing to do whenever you get stuck okay
10:08 - so until next time happy coding
10:21 - you

Cleaned transcript:

hello this is John from cave of programming calm in this tutorial we're going to load up allocating memory in C++ we've already seen in this course some ways of allocating small amounts of memory by declaring a variable or using the new operator to create an object or let's say an integer or something but we're going to look at this in this tutorial of how to allocate a whole load of memory all at once so we've seen before that you can do stuff like this I've got by the way I've got an animal class here and for this tutorial the relevant bits of this are that we've got constructor and destructor that just have C outs in them so that when we know when they're running we've also got a private instance string name and a setname method so an instance variable they're called name so we've seen that you can do stuff like this we can do animal and let's say pointer P animal equals new animal and later on if you do that with new you have to remember to call delete on the pointer later on to free the memory so if we run this now we're going to get animal created and destructor called so that's coming from the constructor and destructor just here we can also do similar stuff even with primitive types like for example int pointer P int equals new int like that and again we need to do delete P int so that will give us a single integer we can set the value of for example by st. P in T equals 8 and we could do C out think point 2 by P ends like that let's just run that so you can use new on basically any type at all what we can also do though is we can also allocate entire arrays of primitive types or of objects let's take a look at objects first so this is creating one animal so it's allocating the memory for that animal object and it's also actually instantiating an object that we could allocate enough memory for this animal object but not actually put anything in that memory not actually have an object in there and this is doing but this is doing both of those things it's actually allocating memory enough to put this animal object in and it's also instantiating the object in that memory so we can use array brackets with new like this so we can say new animal we can put a red break it's after it and put in the number of animals but we want to create let's say 10 and if we if we use these square brackets after the type here after new to say that we want a certain number of of these objects or it could also be a primitive type here like into double we must remember when we delete when the memory when we free the memory by calling Delete on the pointer we need to put square brackets also after delete and before the pointer like that and this tells C++ that we're not just deleting one instance of the object that the pointer points at we're going to free up a whole load of memory that it's pointing up so a whole load of memory blocks of this size so if you have square brackets there you're going to need them here as well although these don't have to have any number in them but this says how many of these objects you actually want to create memory for allocate memory for and instantiate in that memory space so let's run this now and we get 10 animals created and then when we call delete we'll get 10 lots of destructor called down here so we can also do this with primitive types and it's particularly common to use char because if we say char pointer P let's say just Pete man for memory equals new char and in square brackets because char is a single byte we can allocate a specific number of bytes let's say a thousand and then we must remember of course to do delete on this as well so delete P men like that so this also works and it allocates a thousand bytes and we can use this with any type in double absolutely anything that we like so if we actually do this with animal here of course then we could we could move this pointer around in that space to access different animals and there are various ways of doing that we could just use a for loop or something we could do stuff like P animal could use array syntax or say P animal 5 so that's actually the 6 animal in the sequence we've got 10 starting at 0 at P animal v dot speak let's say and that is a method that I created here that outputs the name of the animal so we probably should set it as well let's do that so say P animal 5 dot set name George let's check that that works this is just working with the 6 animal in the array which is at index 5 and there we get here we got my name is George so I'm going to leave it there for this tutorial and I'm going to give you actually a little exercise to do the exercise is to allocate we'll create a class much like animal here something similar to that but as an instance variable of type string and a set method lets you set that string and also some method the less you output that instance variable as well so create a class like that call it person or animal or whatever you like could be anything and then set could allocate an array of 26 of them and then for each object in that array which have allocated using new so I'm calling this an array X is like an array so for each and each object in that memory that you've allocated all 26 of them set the main to be a string that contains a single letter of the alphabet going from A through to Z so like the American or English alphabet and then call the method on it whatever you've created that outputs that string so you can have 26 animals allocated with the new operator and you're going to set the name on each so they're going to be called ABCDE and so on through to Zed and you're going to also output that name with some method you've added to your class to output the string instance variable I'll just make a couple of little remarks I'll just give you a couple of tips on how to do that one thing that I want to show you is that if you want to set a string to a single character we can do it like this we can say here's a character we'll just call it C equals a let's say then we can say string let's call it name and we can use a form of the constructor that accepts that character but it's actually got a parameter before that and first parameter tells you how many of these characters put in the string so if we set this to one that's saying create a string that has one character in it and that character will be a if we put 10 there the string would have 10 A's in it one after the other that's just output that and check that it works so and let's save that and run it and yeah I actually meant to use this yeah we've got the aether but I actually meant to use this child I declared that this let's do that so we can see we've got a string and it's got just the letter A in it if we put like five in there for example would have a string that consisted of five A's let's run this and there we got we've got our string five A's in it and if you create a char like let's remember tries basically an integer type so you can actually increment it like this if you increment the charge you could add some number to it for that matter if you run this because we started with a we've now got B that's because and wherever a is in the table of ASCII characters so no matter what this number is equivalent to if we increment it we're going to get a next character in the set which is B so using those two facts you can create strings with all the letters of the alphabet and use them to set the names of your objects so have a go at that and I'm not going to give you the solution to this but if you do get stuck anywhere then absolutely the thing to do is Google for every every little thing that you get stuck on try to build it up step by step and absolutely don't be afraid to Google for example code for what you want to do and the better you get with using Google the better programmer you'll be because you'll see more and more techniques more and more ways of doing things and gradually those hope you'll gradually remember those and you'll get flexibility with using different techniques so googling it's a great thing to do whenever you get stuck okay so until next time happy coding you
