With timestamps:

00:00 - [Music]
00:12 - [Music]
00:17 - hello this is John from Cave of
00:19 - program.com in this tutorial we're going
00:21 - to take a look at instance variables um
00:25 - or data members in C++ I'm actually
00:29 - re-recording this video because in the
00:30 - first version I accidentally typed some
00:33 - C++ 11 syntax which is not um fully
00:37 - supported by all compilers at the moment
00:39 - in
00:40 - 2014 uh although if you are interested
00:42 - in C++ um 11 then I have an advanced
00:46 - course on C++ that covers it at Cave of
00:48 - programming. comom so let's uh create a
00:51 - new project here I'll go to file new C++
00:55 - project I'll select this Hello World um
00:58 - C++ project um I've got actually two
01:01 - computers and one of them has this cross
01:03 - GCC on it but um I don't really know why
01:06 - I don't remember installing it but I'm
01:07 - going to use the default compiler here
01:11 - for my platform let's call this uh let's
01:14 - call it instance maybe data members data
01:18 - members um I've already got a project
01:20 - called that actually so I'll call this
01:22 - data members too okay that was my first
01:25 - version which didn't turn out so
01:27 - well um let's it's it's it's good to
01:30 - make sure that you can compile your
01:31 - project as soon as you've got a hello
01:33 - world thing there uh because
01:36 - occasionally I find Eclipse somehow
01:38 - messes things up so I'm just going to
01:40 - compile this and make sure it does run
01:42 - before I start adding code to it um so
01:45 - this this is a little slow but it it
01:47 - looks good so I'm going to show you a
01:49 - different way of creating a class in
01:51 - this tutorial in the last tutorial we
01:54 - created a simple cat class and I'll show
01:57 - you a bit of a quicker way of doing it
01:58 - in this tutorial
02:00 - so if you rightclick your project you
02:03 - can go to
02:04 - new
02:06 - class uh now um at the top here we've
02:09 - got this name space which we haven't
02:11 - covered yet we'll get on to that later
02:12 - so I'm going to untick that cuz I don't
02:14 - want to use it and we've also got here
02:17 - um it says Constructor and Destructor
02:19 - and we haven't covered those yet either
02:21 - so I'm going to untick those as well and
02:24 - in this class name here I'm going to
02:25 - give it a name I'll call it
02:27 - cat and you can see that this is going
02:30 - to generate C.H and cat. CPP for me so
02:33 - I'll click finish and we've got here
02:36 - here's here's the the header file. H and
02:39 - then we've got an empty class cat we've
02:41 - got this usual um if if not defa defin
02:45 - stuff which just um prevents your header
02:49 - files getting included multiple times in
02:52 - your CPP
02:53 - files we've also got this um cat. CPP
02:57 - which includes C.H so um when the build
03:01 - runs it's going to um it's going to
03:05 - basically in in effect paste C.H behind
03:09 - the scenes into this file because of
03:11 - this include statement so they'll form
03:14 - like one kind of solid
03:16 - file um now the the idea here is that
03:19 - that the the compiler will actually
03:21 - compile the CPP files as separate object
03:24 - files separate. files and then it will
03:26 - link them all together to produce the
03:29 - final program
03:30 - the the fact that we've got the the
03:33 - header files means that we can Define
03:35 - stuff we can Define how our code will be
03:37 - used how the code and the CPP files will
03:39 - be used and we can include those header
03:42 - files wherever we we need to use them so
03:45 - that um uh our um so that the compiler
03:49 - can actually compile our CPP file that
03:51 - includes this without having to look at
03:54 - this that they're only the CPP files are
03:57 - all compiled to object files which are
03:59 - only link together at the end at the
04:01 - final stage to create the
04:03 - program okay so um one thing we need to
04:07 - do in uh in our main kind of file here
04:11 - containing the main function is we need
04:13 - to include our header file so I'm going
04:15 - to underneath the standard includes I've
04:18 - only got one at the moment but before
04:19 - the using any kind of using namespace
04:22 - standards uh any kind of using namespace
04:25 - statements I'm going to
04:27 - include C.H with double quotes here
04:31 - double quotes cuz it's a it's a local
04:33 - header file not a standard
04:35 - one um now I can already go ahead and
04:38 - create an object from that uh from that
04:41 - class so the class is like a a blueprint
04:44 - it's kind of like a plan for creating
04:46 - objects and we can create particular
04:48 - cats using that blueprint um I I'll
04:51 - actually call it gy here just because um
04:55 - uh some people are a bit confused by
04:58 - using variables that have the same name
05:00 - as the class but with a lowercase letter
05:02 - but I personally personally like to do
05:04 - that uh because I'm used to this
05:06 - convention of having uppercase letters
05:08 - for classes lowercase letters for
05:11 - variables um but anyway this this this
05:13 - will work it won't actually do anything
05:15 - it won't output anything but it does
05:16 - work so let's give cat a method so first
05:20 - I go to cat. H and inside these brackets
05:24 - of the
05:25 - class I need to type public and colon to
05:31 - define a public section and we'll see
05:33 - what that does um very shortly and in
05:36 - there I'm going to create the Prototype
05:38 - of a function so let's say void speak
05:43 - and then semicolon so no implementation
05:45 - there just the Prototype just the the
05:47 - bit that specifies the name of the
05:50 - function uh any arguments that it might
05:53 - might take and um the return type then
05:57 - we go to cat. CPP and we provide the
06:00 - implementation so we say void speak this
06:04 - is the same thing again but now we have
06:06 - curly brackets containing code after it
06:08 - and we need to say that this is a member
06:10 - of the cat class so I'm going to type
06:13 - cat colon colon in front of this
06:16 - speak and the auto company is trying to
06:19 - trying to help me there as well and
06:21 - let's put C out in here and
06:25 - meow to make a sort of cat noise and to
06:29 - use C we need to include I
06:32 - stream. um so I I don't think I'm going
06:35 - to need I'm not going to need to use um
06:37 - SE in my header only in this CPP file so
06:41 - in the CPP file I can include IR stream
06:44 - so I'm going to go to the top before um
06:47 - the include cat. H actually it doesn't
06:50 - really matter too much um where you put
06:52 - this include I'll stick it here as long
06:55 - as it's at the top of the file before
06:57 - you try to use things like seal and I'll
06:59 - type hash include angle brackets because
07:03 - it's a a standard header IR stream and
07:06 - then underneath all of the headers I'm
07:07 - going to type using
07:09 - namespace standard which we'll we'll
07:11 - look at later on but that's we just need
07:13 - that to be able to use see out from IR
07:16 - stream now I can save that with a save
07:18 - all button and I can go to um my main uh
07:23 - function again and now I can already
07:24 - call JY
07:27 - doe so Jim is a particular cat object
07:30 - created from the the class
07:32 - blueprint um and we can go speak on it
07:35 - let's just run it see that it
07:37 - works um so there's whoops I mistyped
07:40 - iostream there so let's go to cat. CPP
07:44 - iostream not
07:46 - ieam okay so now it works let's let's
07:49 - run this and we will get meow
07:54 - okay now um the idea behind a class is
07:58 - that you can have not only um functions
08:01 - in it if if we have functions that are
08:03 - part of a class we actually call them
08:05 - methods it's a slightly strange
08:07 - terminology so this speak is a method
08:10 - and the idea behind the class is that we
08:11 - can bundle together methods in other
08:13 - words sub routines with data so if you
08:18 - think about a um if you think about
08:21 - something like a cat any kind of what we
08:23 - call an object in the everyday sense of
08:25 - the word object then um objects like
08:28 - cats they have things that they can do
08:30 - which we represent with functions with
08:33 - methods and they also have a kind of
08:36 - state like they're happy or sad they
08:38 - they weigh a certain amount um they have
08:41 - a certain blood pressure whatever you
08:43 - like basically and we use variables to
08:45 - define the states of our
08:48 - objects so the class is like um a
08:51 - template for objects so we need to
08:53 - specify in here what kind of States this
08:57 - this cat can have what bits of data or
08:59 - associated with the cat um that can have
09:02 - different values in different cats so
09:05 - I'm going to go up here above the public
09:08 - section here um actually I no I'll show
09:12 - you this in a minute what I'll do for
09:13 - the moment is in the public section so
09:15 - underneath the public keyword I'm going
09:18 - to I I can type variables here so I
09:21 - could put for example bull
09:24 - happy so by saying this what I'm saying
09:27 - is that every cat is going to have a
09:29 - Boolean variable every every particular
09:32 - object every separate cat will have its
09:34 - own copy of this Boolean variable so
09:37 - every cat can either be happy equals
09:39 - true or happy equals false either happy
09:41 - or sad now um since this is public I can
09:45 - go to my main function and I can access
09:49 - happy so before I call um speak here I'm
09:53 - going to say Jim do happppy equals
09:58 - true
10:00 - we'll save that and we'll go back to our
10:02 - function and we'll change our function
10:03 - so that it does something uh different
10:06 - depending on whether happy is true or
10:08 - false so we'll go to cat. CPP and in
10:12 - here I'm going to say if happy then
10:16 - we'll output this meow so I need to
10:18 - surround this by curly brackets
10:21 - else let's put here C out and we'll make
10:24 - a sort of distressed anoid cat noise
10:28 - like this
10:30 - and I'm just going to use the auto
10:32 - format there to format that so that's
10:33 - nicely
10:34 - formatted now um if we run our program
10:38 - it's going to say meow as before but if
10:41 - I set happy to
10:43 - false then um then it says uh
10:49 - hopefully so um we can see the idea here
10:53 - is that um whatever variables we Define
10:56 - in our in our class in our header those
10:59 - variables can be accessed in the methods
11:01 - of the class and they can maintain a
11:04 - state for the for the cat so here in in
11:08 - the main function if I created another
11:10 - cat let's call him Bob again I could set
11:12 - I could set bob. happppy equals true and
11:17 - called Bob
11:19 - dope now we've got two cats one uh I
11:22 - refer to with the variable Jim one I
11:25 - refer to with the variable Bob and Jim
11:27 - is um is unhappy
11:29 - and Bob is happy so it's saying
11:34 - meow now what what we usually try to do
11:36 - is we usually try to prevent this
11:39 - happening we don't want people to uh set
11:43 - our um the values of our um class
11:46 - variables our data
11:48 - members uh from outside of the class we
11:50 - want to encapsulate um that kind of
11:54 - functionality we want to encapsulate the
11:55 - variables within the class so that only
11:58 - the the object object themselves can
12:00 - directly access those variables and that
12:03 - means that if we were to change the
12:06 - particular variables that an object like
12:08 - um like this cat has we could have more
12:11 - of these we could have ins doubles
12:12 - whatever we like if we were to change
12:14 - them then we only have to change the
12:16 - code of this class and we're not going
12:19 - to get stuff like this happening outside
12:21 - of the class uh which would necessitate
12:24 - US changing other code as well if we
12:27 - change the variables we want to encap at
12:29 - those variables so they're only used
12:31 - within the class and um and that means
12:35 - that as long as the method names and the
12:39 - prototypes remain the same we can change
12:41 - the variables of the class and we only
12:43 - have to recode the class itself we don't
12:46 - have to worry that someone might have
12:47 - done this um and worry about wrecking
12:50 - their code by changing what instance
12:53 - data we have what variables we have in
12:55 - our
12:56 - class so um to to to arrange that what I
12:59 - can do is I can go to C.H and I can
13:01 - create a new section up here called
13:03 - private and I can move this variable any
13:08 - variables we've defined into the private
13:11 - section like this and that means when we
13:14 - compile it we'll get an error so if I
13:16 - build a project now um we get an error
13:20 - um because it's telling us that we we
13:22 - can't do this we can't access these
13:24 - variables outside of the um outside of
13:28 - the class
13:29 - so let's delete this here let's get rid
13:32 - of those cuz that's not going to work so
13:34 - what where where can we set
13:37 - happy well uh one answer is we could use
13:40 - a Constructor which is a special method
13:42 - that runs when objects are created from
13:44 - your class it runs separately for each
13:47 - object we haven't looked at Constructors
13:49 - yet so um so we won't do that here in
13:52 - C++ 11 we can actually set default
13:55 - values here so this would be the initial
13:58 - value of this variable for all objects
14:02 - um that are created from this class but
14:04 - uh we're sticking to C++ 98 syntax in
14:07 - this tutorial because C++ is not fully
14:11 - supported by all compilers and often
14:13 - with compilers that do support C++ 11
14:16 - not here in
14:18 - 2014 you still have to uh specifically
14:20 - enable C++ 11 support so we won't do
14:23 - that because we can't do it in C++ 98
14:26 - what we can do is give give this a
14:28 - method give cat another method that can
14:31 - set the value of
14:32 - happy so um let's give it a method like
14:37 - um we'll say
14:39 - void um let's pass in a value for happy
14:42 - here so let's say void um in fact no
14:47 - I'll do something even simpler here I'm
14:49 - going to say void make
14:52 - happy and we'll just put the um
14:55 - prototype for that here and we'll also
14:57 - have void make s
15:00 - like that let's Implement those
15:02 - functions so I'll go to cat. CPP and
15:05 - I'll say here void cat callon colum make
15:10 - happy and we'll say in in there we can
15:13 - access any variables that we've defined
15:16 - up here so we can say happy equals
15:20 - true and let's also add void cat make
15:25 - sad and here we're going to say happy
15:27 - equals false
15:30 - so now we can run these methods for our
15:33 - objects to make the cat happy or sad so
15:36 - we'll go to our main method here and
15:39 - after we create the object JY and before
15:41 - we call speak we'll say jim. make
15:46 - happy and uh for Bob we'll say Bob doake
15:51 - sad like that so now if we run this it
15:54 - looks similar to what we had before Jim
15:57 - is happy so says meow and Bob is unhappy
16:00 - so says
16:02 - s um now these these instance variables
16:04 - are not automatically initialized to
16:06 - anything so um this will have a value so
16:10 - if if we didn't call make happy or make
16:12 - sad and we called speak we get um
16:15 - basically a random value for this not a
16:18 - truly random value but we just get
16:19 - whatever happens to be in the memory
16:22 - that this happens to use so you have to
16:24 - initialize variables before you use them
16:26 - and a common thing to do since you don't
16:29 - want to force the user to have to call
16:31 - some method before they can use other
16:33 - methods that's very confusing normally
16:35 - you use Constructors in C++ 98 to
16:39 - initialize these variables and we'll get
16:40 - on to that later so it's worth having a
16:43 - go at this of course um create your own
16:46 - uh cat or whatever you like create any
16:48 - kind of class that you like try creating
16:51 - objects from it give it a method and
16:53 - then give it some um some variables
16:56 - which you then use in your methods in
16:58 - some kind of a way and you'll also need
17:01 - um if you stick to the syntax that we've
17:03 - seen so far you'll also need to create
17:06 - methods that can set the values of those
17:09 - variables to whatever you like so you
17:11 - can use inss um use booleans use doubles
17:15 - or whatever although remember that it's
17:17 - not good to compare doubles with equals
17:19 - equals because um their values are not
17:22 - stored precisely so if you do use
17:24 - doubles you want to really use um less
17:27 - than or greater than if you compare them
17:29 - in an if but anyway uh well worth trying
17:32 - so that's it for this tutorial until
17:35 - next time happy
17:36 - [Music]
17:50 - coding

Cleaned transcript:

hello this is John from Cave of program.com in this tutorial we're going to take a look at instance variables um or data members in C++ I'm actually rerecording this video because in the first version I accidentally typed some C++ 11 syntax which is not um fully supported by all compilers at the moment in 2014 uh although if you are interested in C++ um 11 then I have an advanced course on C++ that covers it at Cave of programming. comom so let's uh create a new project here I'll go to file new C++ project I'll select this Hello World um C++ project um I've got actually two computers and one of them has this cross GCC on it but um I don't really know why I don't remember installing it but I'm going to use the default compiler here for my platform let's call this uh let's call it instance maybe data members data members um I've already got a project called that actually so I'll call this data members too okay that was my first version which didn't turn out so well um let's it's it's it's good to make sure that you can compile your project as soon as you've got a hello world thing there uh because occasionally I find Eclipse somehow messes things up so I'm just going to compile this and make sure it does run before I start adding code to it um so this this is a little slow but it it looks good so I'm going to show you a different way of creating a class in this tutorial in the last tutorial we created a simple cat class and I'll show you a bit of a quicker way of doing it in this tutorial so if you rightclick your project you can go to new class uh now um at the top here we've got this name space which we haven't covered yet we'll get on to that later so I'm going to untick that cuz I don't want to use it and we've also got here um it says Constructor and Destructor and we haven't covered those yet either so I'm going to untick those as well and in this class name here I'm going to give it a name I'll call it cat and you can see that this is going to generate C.H and cat. CPP for me so I'll click finish and we've got here here's here's the the header file. H and then we've got an empty class cat we've got this usual um if if not defa defin stuff which just um prevents your header files getting included multiple times in your CPP files we've also got this um cat. CPP which includes C.H so um when the build runs it's going to um it's going to basically in in effect paste C.H behind the scenes into this file because of this include statement so they'll form like one kind of solid file um now the the idea here is that that the the compiler will actually compile the CPP files as separate object files separate. files and then it will link them all together to produce the final program the the fact that we've got the the header files means that we can Define stuff we can Define how our code will be used how the code and the CPP files will be used and we can include those header files wherever we we need to use them so that um uh our um so that the compiler can actually compile our CPP file that includes this without having to look at this that they're only the CPP files are all compiled to object files which are only link together at the end at the final stage to create the program okay so um one thing we need to do in uh in our main kind of file here containing the main function is we need to include our header file so I'm going to underneath the standard includes I've only got one at the moment but before the using any kind of using namespace standards uh any kind of using namespace statements I'm going to include C.H with double quotes here double quotes cuz it's a it's a local header file not a standard one um now I can already go ahead and create an object from that uh from that class so the class is like a a blueprint it's kind of like a plan for creating objects and we can create particular cats using that blueprint um I I'll actually call it gy here just because um uh some people are a bit confused by using variables that have the same name as the class but with a lowercase letter but I personally personally like to do that uh because I'm used to this convention of having uppercase letters for classes lowercase letters for variables um but anyway this this this will work it won't actually do anything it won't output anything but it does work so let's give cat a method so first I go to cat. H and inside these brackets of the class I need to type public and colon to define a public section and we'll see what that does um very shortly and in there I'm going to create the Prototype of a function so let's say void speak and then semicolon so no implementation there just the Prototype just the the bit that specifies the name of the function uh any arguments that it might might take and um the return type then we go to cat. CPP and we provide the implementation so we say void speak this is the same thing again but now we have curly brackets containing code after it and we need to say that this is a member of the cat class so I'm going to type cat colon colon in front of this speak and the auto company is trying to trying to help me there as well and let's put C out in here and meow to make a sort of cat noise and to use C we need to include I stream. um so I I don't think I'm going to need I'm not going to need to use um SE in my header only in this CPP file so in the CPP file I can include IR stream so I'm going to go to the top before um the include cat. H actually it doesn't really matter too much um where you put this include I'll stick it here as long as it's at the top of the file before you try to use things like seal and I'll type hash include angle brackets because it's a a standard header IR stream and then underneath all of the headers I'm going to type using namespace standard which we'll we'll look at later on but that's we just need that to be able to use see out from IR stream now I can save that with a save all button and I can go to um my main uh function again and now I can already call JY doe so Jim is a particular cat object created from the the class blueprint um and we can go speak on it let's just run it see that it works um so there's whoops I mistyped iostream there so let's go to cat. CPP iostream not ieam okay so now it works let's let's run this and we will get meow okay now um the idea behind a class is that you can have not only um functions in it if if we have functions that are part of a class we actually call them methods it's a slightly strange terminology so this speak is a method and the idea behind the class is that we can bundle together methods in other words sub routines with data so if you think about a um if you think about something like a cat any kind of what we call an object in the everyday sense of the word object then um objects like cats they have things that they can do which we represent with functions with methods and they also have a kind of state like they're happy or sad they they weigh a certain amount um they have a certain blood pressure whatever you like basically and we use variables to define the states of our objects so the class is like um a template for objects so we need to specify in here what kind of States this this cat can have what bits of data or associated with the cat um that can have different values in different cats so I'm going to go up here above the public section here um actually I no I'll show you this in a minute what I'll do for the moment is in the public section so underneath the public keyword I'm going to I I can type variables here so I could put for example bull happy so by saying this what I'm saying is that every cat is going to have a Boolean variable every every particular object every separate cat will have its own copy of this Boolean variable so every cat can either be happy equals true or happy equals false either happy or sad now um since this is public I can go to my main function and I can access happy so before I call um speak here I'm going to say Jim do happppy equals true we'll save that and we'll go back to our function and we'll change our function so that it does something uh different depending on whether happy is true or false so we'll go to cat. CPP and in here I'm going to say if happy then we'll output this meow so I need to surround this by curly brackets else let's put here C out and we'll make a sort of distressed anoid cat noise like this and I'm just going to use the auto format there to format that so that's nicely formatted now um if we run our program it's going to say meow as before but if I set happy to false then um then it says uh hopefully so um we can see the idea here is that um whatever variables we Define in our in our class in our header those variables can be accessed in the methods of the class and they can maintain a state for the for the cat so here in in the main function if I created another cat let's call him Bob again I could set I could set bob. happppy equals true and called Bob dope now we've got two cats one uh I refer to with the variable Jim one I refer to with the variable Bob and Jim is um is unhappy and Bob is happy so it's saying meow now what what we usually try to do is we usually try to prevent this happening we don't want people to uh set our um the values of our um class variables our data members uh from outside of the class we want to encapsulate um that kind of functionality we want to encapsulate the variables within the class so that only the the object object themselves can directly access those variables and that means that if we were to change the particular variables that an object like um like this cat has we could have more of these we could have ins doubles whatever we like if we were to change them then we only have to change the code of this class and we're not going to get stuff like this happening outside of the class uh which would necessitate US changing other code as well if we change the variables we want to encap at those variables so they're only used within the class and um and that means that as long as the method names and the prototypes remain the same we can change the variables of the class and we only have to recode the class itself we don't have to worry that someone might have done this um and worry about wrecking their code by changing what instance data we have what variables we have in our class so um to to to arrange that what I can do is I can go to C.H and I can create a new section up here called private and I can move this variable any variables we've defined into the private section like this and that means when we compile it we'll get an error so if I build a project now um we get an error um because it's telling us that we we can't do this we can't access these variables outside of the um outside of the class so let's delete this here let's get rid of those cuz that's not going to work so what where where can we set happy well uh one answer is we could use a Constructor which is a special method that runs when objects are created from your class it runs separately for each object we haven't looked at Constructors yet so um so we won't do that here in C++ 11 we can actually set default values here so this would be the initial value of this variable for all objects um that are created from this class but uh we're sticking to C++ 98 syntax in this tutorial because C++ is not fully supported by all compilers and often with compilers that do support C++ 11 not here in 2014 you still have to uh specifically enable C++ 11 support so we won't do that because we can't do it in C++ 98 what we can do is give give this a method give cat another method that can set the value of happy so um let's give it a method like um we'll say void um let's pass in a value for happy here so let's say void um in fact no I'll do something even simpler here I'm going to say void make happy and we'll just put the um prototype for that here and we'll also have void make s like that let's Implement those functions so I'll go to cat. CPP and I'll say here void cat callon colum make happy and we'll say in in there we can access any variables that we've defined up here so we can say happy equals true and let's also add void cat make sad and here we're going to say happy equals false so now we can run these methods for our objects to make the cat happy or sad so we'll go to our main method here and after we create the object JY and before we call speak we'll say jim. make happy and uh for Bob we'll say Bob doake sad like that so now if we run this it looks similar to what we had before Jim is happy so says meow and Bob is unhappy so says s um now these these instance variables are not automatically initialized to anything so um this will have a value so if if we didn't call make happy or make sad and we called speak we get um basically a random value for this not a truly random value but we just get whatever happens to be in the memory that this happens to use so you have to initialize variables before you use them and a common thing to do since you don't want to force the user to have to call some method before they can use other methods that's very confusing normally you use Constructors in C++ 98 to initialize these variables and we'll get on to that later so it's worth having a go at this of course um create your own uh cat or whatever you like create any kind of class that you like try creating objects from it give it a method and then give it some um some variables which you then use in your methods in some kind of a way and you'll also need um if you stick to the syntax that we've seen so far you'll also need to create methods that can set the values of those variables to whatever you like so you can use inss um use booleans use doubles or whatever although remember that it's not good to compare doubles with equals equals because um their values are not stored precisely so if you do use doubles you want to really use um less than or greater than if you compare them in an if but anyway uh well worth trying so that's it for this tutorial until next time happy coding
