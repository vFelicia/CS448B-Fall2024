With timestamps:

00:01 - hello in this video video i'm going to
00:03 - give you some
00:04 - tips about programming uh in general
00:08 - um i'm going to give you an exercise
00:10 - soon and in
00:11 - in the next video actually we're
00:13 - probably going to look at
00:14 - um some tips about how to get the most
00:17 - out of the course
00:18 - but in this video firstly before all
00:20 - that
00:21 - i'm gonna just talk about programming in
00:24 - general a little bit
00:25 - so i've got some tips here we're gonna
00:27 - look at these
00:28 - so my first tip for programming and
00:31 - these really will help you a lot
00:33 - this is not just idle chatter these will
00:36 - help you a lot if you do them
00:37 - so strive for great formatting and use
00:40 - auto format
00:42 - so what you should do is when you're
00:45 - developing
00:45 - your code let's open this
00:49 - so when you're writing code run the auto
00:51 - formatter
00:52 - regularly so remember that's um
00:56 - command shift f on the mac it's ctrl
00:59 - shift f
01:00 - on windows and you can
01:03 - alternately although it takes longer you
01:05 - can right click
01:07 - the file that you want to format and go
01:09 - to source
01:10 - format all right so run that all the
01:13 - time run this auto format because it's
01:15 - really important
01:16 - for the sake of understandability
01:18 - readability to keep your code
01:20 - well formatted but equally strive
01:24 - to write your code in a way that's well
01:26 - formatted to start with
01:28 - and you'll know you've got it right
01:30 - because when you run the auto formatter
01:33 - it won't change your code formatting the
01:36 - autoformatter will be happy with what
01:37 - you've already written
01:39 - so try to write your code so it's
01:41 - formatted well in the first place
01:43 - and if you get that right when you run
01:45 - the auto formatter
01:46 - it won't actually change your code but
01:49 - keep running the auto formatter
01:51 - keep doing that and try to get to a
01:53 - point where it doesn't have to do any
01:55 - work
01:55 - that will really help you if you can
01:57 - learn good formatting
01:59 - you've avoided you know one of the worst
02:01 - beginners mistakes
02:03 - that causes so many problems bad
02:05 - formatting
02:06 - really causes um wastes a lot of time
02:08 - for beginners
02:09 - so if you can get it right you know
02:11 - start getting it right to start
02:13 - to start with then that will give you a
02:15 - big um
02:16 - sort of helping hand google error
02:19 - messages
02:20 - so if you make a mistake in your code
02:22 - let's miss off a semicolon here
02:25 - you'll get an error icon here and also
02:28 - if you try to run it
02:29 - let's save it and run it
02:33 - you'll get an error down here in the
02:35 - console
02:36 - on resolve compilation program syntax
02:39 - sarah insert semicolon to complete
02:41 - statement
02:41 - at line eight i can even click on this
02:43 - line and it takes me to the
02:46 - to the right line now here it's pretty
02:49 - obvious
02:50 - um probably uh what the
02:53 - what the message means um well
02:55 - relatively obvious
02:57 - uh it could still catch you out if
02:58 - you're a beginner it's telling us to put
03:00 - a semicolon at the end of the line
03:02 - but often you'll get error messages that
03:04 - are quite cryptic and you don't
03:06 - understand them
03:07 - type those error messages into google or
03:11 - the search engine of your choice
03:14 - and maybe add java as well and then
03:16 - you'll you'll often see
03:18 - web pages that will be very helpful
03:20 - they'll explain to you what mistake
03:22 - you've made
03:23 - um and that's a lot quicker than having
03:26 - to
03:26 - you know you can ask questions in the
03:28 - course but it's a lot faster
03:30 - if you can just get to the bottom of it
03:32 - yourself with a web search
03:34 - so literally what whatever the error
03:36 - message says when you hover over the red
03:38 - icon
03:38 - or when you run your program don't be
03:41 - afraid to type that into a search engine
03:44 - and see what comes up you might need to
03:46 - add java as well
03:48 - to get the right results and that will
03:50 - usually help you
03:52 - it will help you to figure out what's
03:54 - actually gone wrong output values of
03:56 - variables
03:57 - so when you're working through your
03:59 - program let's take a look at this one
04:01 - here i think
04:03 - um put in system.out.printline
04:07 - and output the values of variables and
04:09 - put those in your code wherever you're
04:11 - not sure
04:12 - what the value of a variable is so at
04:15 - this point for example
04:17 - um i might i might
04:20 - be going to write more code further down
04:23 - that depends on total height
04:25 - and i might want to check that this
04:27 - total height calculation actually works
04:30 - so at that point i can output the value
04:32 - of this variable total height
04:34 - and check that it is what i expect it to
04:35 - be and that's
04:37 - something that all the programmers i
04:39 - know pretty much use that all the time
04:41 - they they put
04:43 - system.out.printline in their code to
04:45 - check
04:46 - that variables have the values they
04:48 - expect them to be
04:49 - at that point in the program so you can
04:52 - output
04:53 - the same variable multiple times as you
04:56 - work
04:56 - down through more and more lines to
04:58 - check that
04:59 - at any point in your program it has the
05:01 - correct value that's a really useful tip
05:04 - you'll see me doing that as we go
05:06 - through the course
05:08 - write code a little bit at a time
05:10 - running frequently
05:11 - so don't write a whole like page of code
05:15 - like a big page bigger than this don't
05:17 - write
05:18 - a big chunk of code and without running
05:22 - it
05:22 - so write your code in little bits and
05:25 - then
05:25 - output the values of important variables
05:28 - or just all your variables or whatever
05:30 - you like
05:31 - and then run it check that works and
05:34 - then you can delete the
05:36 - system.out.printline if you don't need
05:38 - it and then add more code to it
05:40 - so what i'm saying is don't write a big
05:42 - piece of code and only then run it
05:45 - write code a little bit at a time add
05:47 - code to your programs a little bit at a
05:49 - time
05:50 - and after you've written a new bit
05:52 - output the values of some variables so
05:54 - you can check
05:54 - that they are what you expect and run
05:56 - the program so build up your program a
05:58 - little bit
05:59 - um at a time that will really help you
06:03 - and you'll also see me doing this in
06:04 - this course i think
06:06 - um write the end of a pair of brackets
06:10 - or quotes before filling them in this
06:11 - will make more sense to you later on
06:13 - but if you've got something that comes
06:16 - in pers in your program
06:18 - like brackets are usually in pairs so
06:20 - this is a pair of brackets here
06:22 - that bracket is paired with that bracket
06:26 - this square bracket is paired with that
06:28 - square bracket
06:29 - and also this speech mark and this
06:33 - they're a pair as well so in general i
06:35 - recommend
06:36 - when you write some opening
06:39 - pair of something write the closing pair
06:42 - at the same time
06:44 - then go in and fill in whatever's in the
06:46 - middle of them
06:47 - you can do that with quotes and brackets
06:49 - the point is to
06:51 - avoid the point is to avoid
06:54 - situations where you've written an
06:55 - opening quote or an opening bracket
06:58 - and forgotten the closing one
07:01 - uh so you might want to come back to
07:02 - this video later on because this will
07:04 - make more sense to you later on
07:06 - but keep everything in pairs right the
07:08 - closing one soon after you've written
07:10 - the opening one
07:10 - and finally make sure you know what
07:12 - you're running because as a beginner i
07:14 - often got confused
07:16 - i'd have multiple projects open i'd
07:18 - click a run button in my ide
07:21 - and i'd run the wrong code and then i'd
07:24 - be changing the code
07:26 - and i'd be looking at the output in the
07:27 - console and thinking
07:29 - why why is why aren't my changes having
07:32 - any effect
07:33 - and it's simply that you're running the
07:34 - wrong program you know so i might be
07:36 - working on this program here
07:38 - but i um you know i click the run button
07:42 - and it runs
07:43 - doesn't run that code you know
07:46 - so make sure you you run the right thing
07:51 - and to be doubly sure so it helps to
07:54 - have the right code
07:55 - selected or the right project at least i
07:58 - think that will
07:59 - probably yeah that changes what you're
08:03 - actually running
08:04 - but if you want to be absolutely sure
08:06 - that you're running the right thing
08:08 - select the file that has the main your
08:10 - main method in it
08:12 - right click it and go to
08:16 - uh go to source
08:19 - no sorry where are we go to run as java
08:22 - application
08:24 - so um i select something that i want to
08:26 - run
08:29 - i right click it and i go to source
08:31 - sorry i go to run as
08:33 - java application and after that
08:36 - you can just use the run button but it
08:38 - helps if
08:40 - the first time you run something if
08:41 - you're not completely sure you're
08:42 - running the right thing
08:44 - actually select it right click it and go
08:47 - to run as java application
08:49 - and that that will that will help a lot
08:51 - because um
08:52 - you'll be if you've got multiple
08:54 - products open it's really easy to get
08:56 - confused about
08:57 - what you're running versus what you're
08:59 - writing at the time
09:01 - that's it for this video um you might
09:03 - want to come back to this later if you
09:05 - start finding
09:06 - programs getting really confusing but i
09:09 - wanted to just run these tips past you
09:11 - to start with
09:12 - okay so until next time happy coding

Cleaned transcript:

hello in this video video i'm going to give you some tips about programming uh in general um i'm going to give you an exercise soon and in in the next video actually we're probably going to look at um some tips about how to get the most out of the course but in this video firstly before all that i'm gonna just talk about programming in general a little bit so i've got some tips here we're gonna look at these so my first tip for programming and these really will help you a lot this is not just idle chatter these will help you a lot if you do them so strive for great formatting and use auto format so what you should do is when you're developing your code let's open this so when you're writing code run the auto formatter regularly so remember that's um command shift f on the mac it's ctrl shift f on windows and you can alternately although it takes longer you can right click the file that you want to format and go to source format all right so run that all the time run this auto format because it's really important for the sake of understandability readability to keep your code well formatted but equally strive to write your code in a way that's well formatted to start with and you'll know you've got it right because when you run the auto formatter it won't change your code formatting the autoformatter will be happy with what you've already written so try to write your code so it's formatted well in the first place and if you get that right when you run the auto formatter it won't actually change your code but keep running the auto formatter keep doing that and try to get to a point where it doesn't have to do any work that will really help you if you can learn good formatting you've avoided you know one of the worst beginners mistakes that causes so many problems bad formatting really causes um wastes a lot of time for beginners so if you can get it right you know start getting it right to start to start with then that will give you a big um sort of helping hand google error messages so if you make a mistake in your code let's miss off a semicolon here you'll get an error icon here and also if you try to run it let's save it and run it you'll get an error down here in the console on resolve compilation program syntax sarah insert semicolon to complete statement at line eight i can even click on this line and it takes me to the to the right line now here it's pretty obvious um probably uh what the what the message means um well relatively obvious uh it could still catch you out if you're a beginner it's telling us to put a semicolon at the end of the line but often you'll get error messages that are quite cryptic and you don't understand them type those error messages into google or the search engine of your choice and maybe add java as well and then you'll you'll often see web pages that will be very helpful they'll explain to you what mistake you've made um and that's a lot quicker than having to you know you can ask questions in the course but it's a lot faster if you can just get to the bottom of it yourself with a web search so literally what whatever the error message says when you hover over the red icon or when you run your program don't be afraid to type that into a search engine and see what comes up you might need to add java as well to get the right results and that will usually help you it will help you to figure out what's actually gone wrong output values of variables so when you're working through your program let's take a look at this one here i think um put in system.out.printline and output the values of variables and put those in your code wherever you're not sure what the value of a variable is so at this point for example um i might i might be going to write more code further down that depends on total height and i might want to check that this total height calculation actually works so at that point i can output the value of this variable total height and check that it is what i expect it to be and that's something that all the programmers i know pretty much use that all the time they they put system.out.printline in their code to check that variables have the values they expect them to be at that point in the program so you can output the same variable multiple times as you work down through more and more lines to check that at any point in your program it has the correct value that's a really useful tip you'll see me doing that as we go through the course write code a little bit at a time running frequently so don't write a whole like page of code like a big page bigger than this don't write a big chunk of code and without running it so write your code in little bits and then output the values of important variables or just all your variables or whatever you like and then run it check that works and then you can delete the system.out.printline if you don't need it and then add more code to it so what i'm saying is don't write a big piece of code and only then run it write code a little bit at a time add code to your programs a little bit at a time and after you've written a new bit output the values of some variables so you can check that they are what you expect and run the program so build up your program a little bit um at a time that will really help you and you'll also see me doing this in this course i think um write the end of a pair of brackets or quotes before filling them in this will make more sense to you later on but if you've got something that comes in pers in your program like brackets are usually in pairs so this is a pair of brackets here that bracket is paired with that bracket this square bracket is paired with that square bracket and also this speech mark and this they're a pair as well so in general i recommend when you write some opening pair of something write the closing pair at the same time then go in and fill in whatever's in the middle of them you can do that with quotes and brackets the point is to avoid the point is to avoid situations where you've written an opening quote or an opening bracket and forgotten the closing one uh so you might want to come back to this video later on because this will make more sense to you later on but keep everything in pairs right the closing one soon after you've written the opening one and finally make sure you know what you're running because as a beginner i often got confused i'd have multiple projects open i'd click a run button in my ide and i'd run the wrong code and then i'd be changing the code and i'd be looking at the output in the console and thinking why why is why aren't my changes having any effect and it's simply that you're running the wrong program you know so i might be working on this program here but i um you know i click the run button and it runs doesn't run that code you know so make sure you you run the right thing and to be doubly sure so it helps to have the right code selected or the right project at least i think that will probably yeah that changes what you're actually running but if you want to be absolutely sure that you're running the right thing select the file that has the main your main method in it right click it and go to uh go to source no sorry where are we go to run as java application so um i select something that i want to run i right click it and i go to source sorry i go to run as java application and after that you can just use the run button but it helps if the first time you run something if you're not completely sure you're running the right thing actually select it right click it and go to run as java application and that that will that will help a lot because um you'll be if you've got multiple products open it's really easy to get confused about what you're running versus what you're writing at the time that's it for this video um you might want to come back to this later if you start finding programs getting really confusing but i wanted to just run these tips past you to start with okay so until next time happy coding
