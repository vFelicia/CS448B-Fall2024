welcome back to procedural generation with Godot in this part we're gonna look at creating an infinite 2d terrain of smooth rolling hills ready let's get started to start making my terrain I'm going to add a line to D this will be the visible terrain on our screen that'll show the the hills that we're making and then we're gonna attach a script to this main node and we're going to start by defining some of our variables we're going to have a number of hills is how many hills we were gonna generate at a time forgot the word bar I mean it how many pills we'll generate at a time slice is going to be how much we slice them up how many increments we divide the hill up into and then he'll range is going to be how much they vary the vertical variance when we create them screen size we're going to need to capture when we run so that we can tell when we're drawing off the screen or on the screen we're going to make use an array to hold all of the points that we're generating using the algorithm in our ready function we're going to initialize the random number generator we're going to initialize the terrain just to make sure it is empty and we need to pick our starting point the starting point for the terrain which is going to be on the left hand side of the screen so the X is going to be 0 but we want the Y to be random so we're gonna pick just a start yvalue it's going to be the screen size the why screen size which we need to capture to didn't even got to do that screen size is going to be get viewport get visible wrapped it up size then we want the Y screen size and I'm going to start it around 3/4 of the way from the top it's just a arbitrary choice we we want the terrain to mostly be the bottom section of the screen so we leave some room up above we don't want to be going off the top so we're gonna go 3/4 of the way down and then we're gonna add plus or minus 100 100 being our hill range so we want to go down by a hundred plus R and I percent hill range times two and that's going to add add some number between 0 and 200 but since we subtracted 100 it's basically minus 102 plus 100 and now we have a starting point so that will be our first item in the terrain we append 0 start why that's where our hills will start on the left hand side then what we're gonna do is run our ad add Hills function which which is going to be the code that actually implements the algorithm add Hills so what is this gonna do so we're gonna start by room here we're going to start by making a variable to calculate how wide our Hills are going to be that's screen size X divided by the number of hills I wrote is e there and then we need to figure out how big the individual slices are going to be and that's just gonna be that with Hill width divided by a slice slice X and then we need to figure out what our starting point is so our starting point is going to be the last point in the terrain which when we first start we only have one point in the terrain right that's our starting point on the lefthand side but we want to be able to add keep adding more Hills as we go to have our terrain continue and we just want to stick it on the end of the last hill that we made so they'll be continuous and there won't be any jumps so now we just need to iterate through the hills and make the hill so we're gonna say for I in range numb so for each Hill we need to do this so first we need to figure out what the height of the hill is going to be that's going to be a random value using the hill range pick our start dot Y and subtract that height we just calculated so that's how high up we're going to go and now we need to do the cutting apart into slices for J and range we want to go from 0 to whatever the hill slices size is and we're gonna do a point at each of these slice width so this is where the map comes in so we're gonna this is gonna be a vector 2 and I'm gonna do this on separate lines just because it starts to get really it just starts to get really long you could easily do this on one line but he'll point the X point is going to be start the start X + J times slice that's how far over it goes plus he'll he'll width so wit times I that's how far we move and then the hill or we move to the right and then the hill point dot y is going to be the start dot y plus the height times and I'm going to use the cosine function in this case you can try other functions to get different patterns but the cosine gives you a nice smooth flowing hill multiply that by hill slices times J see what I mean about the lines getting long in fact I could probably zoom in here a bit so they'll all fit on the screen and then oops I won too many parentheses there so now we have our two points being set and we can add that to our line add point fails point and then when this loop completes and we've done the two hills then we take the start y and we add height to it so we can do the next hill and let's run this now and see how it works there we go there's our two Hills so we start here is our start point it generated the first hill with that random height and then it generated the second hill and when we run it you should see we get a different a pretty wide variety of yeah see there we first Hill was a little taller run it one more time here nope that one we got a really tall hill now to make our terrain be solids that we can walk on it we're going to need a we're needed collision body so I'm going to add a static body 2d there as well so we have something to land on when we when we place our character in the game and so the polygons there the the collision shape of this static body is going to be generated by the by the terrain code so we're going to add that now into our code so we have here we're gonna make when we start out we're gonna start calculating what the polygon is so we'll set a pool vector to array and then whenever we add a hill point a point to the line we're also going to append it to the polygon and then after we have finished so right here then we can make a new shape collision polygon 2d dot new and then we set the shape the shape of that to it so static body 2d dot add child shape will add some we need to add two more points to make it a closed curve because we have the we have the curve of the line on top we need two more to make it closed so we'll add a couple of vectors projector two is here to get the end point so the last point in our terrain is that one and screen size dot y and then we also need the opposite corner which is the start X the screen size dot Y so we're just adding those two and then shape duct polygon equals poly now that should make us and actually here we can go over here and turn on visible collision shapes and we should see if it makes it alright so there's our collision shape being made when we generate excellent okay so now what I have is in the starting project I have a scene called Runner and this is a small kinematic body 2d with left and right arrow controls for it to move so if we take our terrain and instance that runner in here we should be able to land on the polygon and move and there we go and we can you know run along the run along the hills pretty good and then of course we fall off the end so now we have a camera attached to this runner as well that's following it as it moves along so we want to be able to generate some more hills whenever we get to them so that we could keep exploring and never find the end so what we can do is add a check and we can do that in process to see if the runner has traveled far enough that we need to generate new hills and so we're gonna say if the last this is the last point in the Train so the xcoordinate of the last point in the terrain is less than the runner runners exposition plus the screen size the screen width divided by two so we're if this is gonna be if we're within half a screen width of the last point and the terrain then we need to add more hills and let's run that and see what happens oh whoops we are generating all of the hills and the same point why is that oh I see why yeah so we skipped a line here we need to keep adding the terrain here this terrain array is what's keeping our list of coordinates it's how we're finding where our next start point is so we weren't appending it we're just using the line 2d to do the drawing because we're gonna get rid of it in a few minutes and that should do it okay so there we are we travel some more now we've got a continuous line of hills going nice and smooth and this will just keep going as long as we care to do it now I did put some zoom out on the camera just so you can see right we could see how they're getting generated when we get close enough but of course if we're zoomed in the right amount we can't see that far away and we wouldn't see them popping into existence all right so the last thing we're gonna do is we're gonna make those hills look a little nicer by getting rid of the line and using a texture okay so at the top here we're going to load our texture let's have a grass PNG and we're going to use a polygon 2d to display this so down here we can get rid of the line and you could actually go and even remove the node now we're not going to use it but I'll leave it there and here we're we are making our collision polygon we're also going to make I'll call it ground a polygon 2d to display everything and so the polygon 2d the ground ground dot polygon we set it the same way that we set the occlusion shape and then we set its texture equal to our texture and then we just added as a child and we'll be able to see it oops oh and then we got to make sure that when we import the grass we enable repeat and we turn off filter there we go now it will repeat you know basically tile that texture on the hills and we have a nice nicelooking grass rolling hills that we can and frolic along and thanks for watching I hope this was helpful to you and you find ways to use it in your own projects I'll see you in the next video thanks again you