look at that this is part five of space rocks where we make a full and complete game in the Godot game engine and this part we're going to make our bullets collide with the asteroids and make them break up into smaller asteroids just like they're supposed to all right let's get started all right we're ready to start making the bullets destroy the asteroids and to get ready to go what I've done is I've added an asteroid container which is just a basic node to the main scene here I find it to a variable and when I spawn the media to the asteroid that's where I'm putting them as children that's going to help us later when we want to tell if we have destroyed all the asteroids and the players ready to move on to the next level or whatever okay so let's start with the player bullet the player bullet is an area 2d that means over here in the signal it has it can detect one other areas enter and exit it and it can detect when other bodies enter and exit it we're going to say body enter the body enter signal we're just going to connect that to the player bullet script and so when this signal fires off it gives you the body that it detected and we want four to start with we want to just delete that that body but really we only want to delete that body if it's an asteroid so over on our asteroid script what we can do is when the asteroid first is created we can add two group and we'll just call those asteroids groups are just like tags you can assign two objects to track them right so now every asteroid object will have this asteroids tag on it and in the player bullet here when we detect a body entering we can find out if it's one of those groups so if body get groups have asteroids okay so it could have asteroids and it's list of groups then we are going to do two things we're going to q3 meaning we're going to delete the bullets that hit that and right now I'm just going to print body get name just so we can see what is happening so it's like it run here now and I fire the bullet the other bullet disappeared and it's printing out the name of that asteroid right I mean there's a different one there's a different one all right these are the automatically assigned names that Godot gave them when they were instanced that's fine you can see it's definitely detecting it and the bullet was deleted so we want that that asteroid to explode and that might mean a number of different things so we're going to say body dot explode and then we're going to define that over in the asteroid itself that that's right to do whatever explode is defined to do all right so in explode or in the asteroid script we could define our function explode and just say Q free on this and that would work fine we could just do that and it would be destroyed okay that's all good but not really what we want for asteroids right we want to spawn smaller one whenever we hit them with a bullet we need to change up a few things one of the things we need to change here is this init function when we first instance an asteroid it might not necessarily be a fullsized one that we want to that we want to make right and so we're passing the size and we're testing the position we're also going to pass the velocity because if we're taking a big one and it's been hit we're going to want to tell the news the break off of it what direction to go in and let's be to going so so I'm going to change this function a little bit to say it's the initial size the initial position and the initial velocity to keep the names consistent okay and so we have our now we didn't make that variable so I'm going to I'm going to declare a size variable up here makes things easier to track and we're going to set size equal to in its size and then for the velocity we have two choices either it's a new large size after its ponding at the beginning of the level in which case we want be random velocity or it's a new one that we're telling it what velocity we want so we have two possibilities there and this is what we want to do if we're picking a random one so I'm going to take this code and move it down into the in it as well and we're going to stay if the init velocity length is greater than zero and we're just going to use that and itself if it means if we positive velocity we'll use it otherwise we give it a zero velocity we're going to use this and then just like we've been doing we randomized the patient speed figure out what texture sets shape and all of that okay now we need to make some changes in our main script so this code right here instances and asteroid and initializes it right and adds it to the container but we're going to want to do that when we spawn smaller ones to off of the explosions so I'm going to define a function called spawn asteroid and this function expects us to tell it what size position and velocity we want it to have this I'm going to put in here and we're going to just say a dot in it using the size position and velocity and then our initial ones that we spawn at the beginning of the game we just say spawn asteroid big one spawn position and this on the next line and the speed we want to put reviews is just zero zero that way we'll randomized okay and so that'll do the same thing alright spawn them at the random spots and randomize the velocity now we need to figure out what to do when the bullet hits and we want to spawn two smaller lists so in our asteroid when we hit the explode function here we're going to emit signal we call that signal explode and we're going to pass out to the main function the main scene is what's going to catch this get to the signal so we're going to tell it what size we were when we exploded what position we were at when we exploded and what speed we were going when we exploded and so we'll just define that signal up here at the top signal explode so now whenever our that's right is exploded it's going to send out this signal and in main when we spawn an asteroid we can connect that signal using connect and what we want to connect is we explode signal we want to connect it to a function locally and we'll call it explode asteroid and then we just need to define that function and since we're going to be passing in size position and velocity we need to expect those to be coming and now we need to figure out what our new sizes are going to be right if it was a large asteroid we wanted to split into two medium ones it was medium we split into two small ones and so on so I'm going to just declare that in a dictionary up here and it's called the break pattern right what pattern are the apps words going to break up into okay if they're big they're going to go to medium if they are medium quotes never cooperate with me we're going to break up into small if we are small we're going to break up into tiny and if we are tiny there's nothing left so we're going to have null there so there's nothing to come out too tiny that's the end of the chain so when we explode we just need to check what size we're going to so the new size we're going to use is break break pattern whatever size we currently are and so now we'll know what size we want to be if new size so if there wasn't if it wasn't tiny so that we got null then we want to we want to spawn two new ones when we spawned these two new ones we don't want to spawn them at the same position if we do then they'll be overlapping and we have our asteroids are set to be kinematic body 2ds and they're supposed to collide off of each other treat each other as solid bodies and if two solid bodies are overlapping or inside of each other then the collision resolution is going to be broken and we will get asteroids flying off at crazy speeds and weird things like that so we want to make sure we spawn them next to each other and we want to spawn them with different velocities going in.i dealing in opposite directions right like they exploded outwards from the destruction of the big one and so the nicest way that I think we can do that is when the bullet hits and it tells the body to explode we're going to pass in the velocity that the bullet was going and actually I don't care about the velocity I really care about the direction so I'm going to normalize it so that way I know what direction I was hit from and I can make the new ones fly out in a perpendicular direction from that okay so that means when we explode we're passing in the velocity so on the asteroid going to explode we're going to get whatever the thing that hit us was doing right so we'll call it the hit velocity and we will pass that in as well when we extended the signal so here we're going to get on main we're going to get to hit velocity as well so if we are responding to new ones then I'm going to have an offset of negative one or one this is going to make them do the opposite directions right I'll multiply the velocity by these numbers or the position by these numbers and that way they will be opposite so the new new position we want for our our asteroid is whatever position the parent one was plus the hit Bell tangent and what that does is it gives you a perpendicular vector okay I'm going to clamp that to a length of 25 and so it moves 25 pixels away from that center spot x offset which is going to be plus 1 or minus 1 right so they'll be shifted in opposite directions so they'll each spawn across from the across from each other and then the new velocity we want to use is whatever velocity we were going so so if the big asteroid was moving to the right to smaller when the fly off of it will move to the right as well but they're also going to have a tangent to the hit velocity times offset so that they will fly in opposite directions all right and then we just want to spawn asteroid using the new size the new position and the new velocity and that should look great so let's try it out here we go there's two smaller ones flying off very good now if I hit a bunch of them you might see I can get it to happen right you're going to have a lot of you have a lot of little abstracts flying around and occasionally some of the collisions are going to lead to some of these any ones moving extremely fast faster than we are there we go all right faster than we want them to and so what we do to fix that is we should just set a we're just going to set a maximum speed on the asteroid here l equals l dot clamped 300 all right that way we don't have anything bigger than that and value rid of that pose okay so now what we can do is let's say we always find one because we're on level one then we can set process to true on our main and in the process function we can just say that gift asteroid container get child count is equal to zero that means we've destroyed all the asteroids right so we can spawn some more we just do this again I'm just going to do this again for now and we'll make it fancier later when we start having levels and things but that way if we you know just have one asteroid on the first level and as we clear the screen and that asteroid container is empty we will onto new ones right okay so will pretty that up later as well and the last thing we can do here to pretty up our main scene and we're going to add a sprite put the top here and just call this the background and the texture we're going to use is this star filled PNG and you don't want it to be centered and we needed to be stretched a little bit to fit our game window so I'm going to scale this up about a little bit more 30% there we go so we just have a nice nexor lookin background for our game here thanks for watching and I'll see you in the next video you