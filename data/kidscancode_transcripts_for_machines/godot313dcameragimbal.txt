welcome to another Godot recipe there are many ways to handle cameras in 3d first person third person fixed perspective it all depends on what kind of game you're making in this recipe we'll look at how to make a camera that can orbit a target while remaining parallel to the ground let's get started so here we have a camera setup and then I have this window down here set to show us a preview of what the camera sees now let's say I wanted to tilt the camera up a bit to look at something and then I want to rotate to this side but when I tilt it back down I'm now gonna be misaligned and that's usually something you don't want you want the camera to stay level always parallel with the ground regardless of how you rotate or look up and down you don't want that tilt to happen and so the solution to this is something called a gimbal a gimbal is a device that's designed to keep an object always level like that you would use them on ships back in the old days to keep thee to keep a flat surface level even as the ship is rocking in the waves and so we're gonna make a scene here and we're gonna start with two spatial nodes so spatial and then another spatial as a child and then I'm going to add the camera as a child of that so the spatial the outer one is going to be our camera gimbal and then the second one is going to be the inner gimbal so we have the camera is a child of the inner gimbal the inner gimbal is a child of the camera gimbal and here's how that's going to work let's go back to preview so we can see what the camera sees I'm gonna take the camera and I'm going to just set its transform the Z to about 4 so it's offset a little bit from from where the center is so we're looking towards the origin so the way that the camera gimbal works is each of these nodes is responsible for one axis of rotation and it's going to be its local mode so I'm going to turn this to local mode here so when we rotate we're only rotating the nodes local axes not the global ones so the outer node the camera gimbal node only rotates in Y it is for us to rotate horizontally and look at the center now we're never gonna move this one on any other axis okay the inner gimbal is going to rotate on its X and only on X so it tilts up and down and so you see how it's X's are changing so now say I'm angling down a little bit if I switch back to the outer one the outer one see how the X's are still level for this one the outer one only rotates in Y so now we're orbiting around whatever object we're looking at as long as we stick to that then there's never gonna be a problem with our camera not being level anymore you can see how it's always staying pointing at the same point and it's always parallel with the ground to control the gimbal we're going to use the W a s and D keys so I've added input actions for those in the input map and I've labeled them cam underscore so we know these are the input actions for controlling the camera and then I've also added zoom in and out for the up and down mouse wheel so now let's add a script to this we're gonna give it a variable here called rotation speed it's gonna control how fast the camera rotates while we're holding the keys down and we'll start with PI over 2 which is 90 degrees so that's 90 degrees per segment is what that will be and then we're going to in our process function we're going to check the keyboard input and I'm going to do it this way we're gonna pass Delta and along with it I'm gonna do it this way because we're gonna also want to enable mouse control after we do this so I'm just going to start with keyboard so the function to get to check keyboard input needs to rotate those two spatial depending on which Keys we pressed so starting with we're gonna rotate the outer gimbal that's the node that this script is attached to around the yaxis and so we're going to have a variable here called Y rotation and then that's going to get set by which key we press so now we can rotate object local and we want to rotate around the y axis and we want to rotate by that Y rotation x rotation speed times Delta and then for the inner gimbal we want to rotate inner gimbal around its local x axis so we're gonna do the same thing here I'm gonna copy and paste because I've copied and pasted the input code just changed it to the other input keys and we're rotating around X this time and once we have that result we're gonna have the inner gimbal and we're gonna rotate object local but this time around the x axis and then by the same amount X rotation and that should do it let's give it a try so here's a test scene I've made with I made a ground plane and I imported a model so we have something to look at and then I've instanced the camera gimbal into this scene so when we play it we can see that if I press the a and D Keys I will rotate around and if I press W and s my camera will pan up and down left and right so that's exactly what we want we're staying centered on the center of the ship but what you'll notice is that since we haven't put any limits on it you can rotate too far and go completely upside down which is probably not something that we want we want to probably stop it around there and maybe stop it at the ground so that you can't rotate too far up and down we'll fix that in our script will we're going to say inner gimbal the rotation dot X we want to clamp that and we want to clamp it between not quite 90 degrees we don't want to go fully up to 90 degrees so I'm going to say let's say around 1.4 and then zero and what that's going to do is it's going to make it so that when I pan up that's as far up as I can go and when I go down I go straight down to the ground now because that plane is there at the exact zero degrees here we can't see the plane so you might want to limit it to maybe a very very small number something like that so that you can't go below the surface of the water or the ground or whatever you have that's totally up to you now we have our rotation good now we need to work on the zoom so for zooming I'm going to have a maximum and a minimum zoom so we can't zoom in too far or too far away and we're gonna have a zoom speed how quickly the camera will zoom in and out as we scroll the wheel and then this variable zoom is going to keep track of our current zoom levels so we know what to change so we're going to capture the zoom with unhandled input and this is so that we will capture any gooey stuff before this so you have if you have a gooey overlay when you're scrolling in a scroll box or something like that you're not also zooming the camera and so we have two events here we have the cam zoom in and the camera zoom out and zoom in is going to take our zoom amount and we're gonna subtract zoom speed and then zooming out is the opposite we just add the Zoom speed and then we set and then we're gonna clamp it between the minimum and the maximum so it doesn't ever go outside those limits so how are we going to zoom it we're gonna do it by changing the scale of the gimbal system so scale equals vector three one times zoom so we just zoom equally in all directions now what that's gonna look like is this let's go up a little bit now as I click the mouse you can see the increment right a little bit by each click of the mouse wheel but it's a little bit that makes for a little bit of a jerky a factor especially when you're close by so we can make that better by using lerp to interpolate our zoom as it goes we're going to do that in the process will say scale equals and we'll alert the scale up to what we wanted it to lerp to which was that by our zoom speed amount and that's gonna make for a much smoother zoom effect you can even see that at the beginning when it zooms to the initial amount and now we have a nice smooth zoom that we can use while we're rotating the camera around so that's it and we could stop there and say we're happy with the gimbal camera that we have but some of you may want to also be able to control the camera with the mouse instead of the keys so I'm going to show you how to do that as well another variable here called mouse control that we can set to true or false whether we want to be using the mouse or the keyboard and then mouse sensitivity is going to be some amount that we can adjust to make the mounts more or less sensitive and so now in our process here where we're getting the keyboard input if Mouse control is true we want to not capture those keyboard events and then we're gonna go here into our unhandled input and we're going to check for some Mouse events so if Mouse control is true and we get an input event mouse motion then we know the mouse moved so we need to capture the two axes of the mouse movement at the x axis of the mouse is the left and right that's going to be our Y rotation of the gimbal and the y axis the mouse is going to be up and down so that's going to be our X rotation of our inner gimbal so if event dot relative dot X is not zero then we must have moved the mouse sidetoside so we're going to do rotate l'objet object local around the up and when we rotate by event relative X how much we move to the mouse x the mouse sensitivity and then the alternative is that we move the mouse up and down so if we also check that the y axis of the mouse then we're gonna rotate the inner gimbal I'm just gonna go down here and grab that command note that that by event dot relative about Y times mouse sensitivity and now if we try this out you'll see that we can move the mouse up and down left and right and control the camera now something else you'll notice is that if you move the mouse really quickly you're going to have a problem with our clamp that's stopping the movement so if I move up you can see I'm stopping at the limits but I move quickly I can snap through there and once I've done that now I'm stuck there unless I move quickly again and that's because our movement with the mouse can potentially be very very high this event dot relative dot Y could be a large number so we're rotating by a large angle which since and goers are circular it's going to clamp us to the wrong side of the 90 degrees then we wanted and so we can fix that by capping our amount of movement so I'm going to make a variable here right Y rotation and there's going to clamp the event relative x dot y between values about there again that's another one you can play with depending on your size of your screen and and the sensitivity of your mouse but this is good enough for a an example and then we're gonna say Y rotation times mouse sensitivity and now that'll stop that from moving too quickly when we move the mouse really quickly so one other thing I've added here before we wrap up is two flags here to invert the X and y axis if you want the mouse movement to be the opposite of the direction it is now which people often want for different projects so here what we're doing is we're just going to make a direction variable we'll make it equal to one if in vertex is true otherwise we'll make it negative one and then that way we can multiply by direction in the rotation and it will rotate in the opposite direction that it was doing before that'll do it for this camera gimbal tutorial as I said at the beginning this is only one of many possible camera control schemes so keep an eye out on this channel for more tutorials on other methods of camera control if you want a little bit more detail I've linked in the description below to the text version of this tutorial on my goto recipes website where you can see a full version of the script where I've added in export properties for all of the different values so that you can have a nice interface over here in the inspector to turn on and off and set different properties thanks for watching and I'll see you in the next video this tutorial is part of my new Godot recipes website the goal is to collect all the best tips and lessons to help make you a better go to a developer if you like this video I hope you'll go and check out the site and make sure to hit subscribe so you'll be notified whenever I release new videos thanks for watching