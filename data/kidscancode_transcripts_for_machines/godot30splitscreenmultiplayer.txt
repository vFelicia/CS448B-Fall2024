in this tutorial we're going to demonstrate the use of viewports to make a split screen multiplayer game here we have two players the red player on the right and the blue player on the left both of which are moving around in the same world but have a separate view centered on where they are at all times let's start by looking at how the world is set up so I have a character scene here which is just a sprite using a kinematic body 2d and it's script looks like this we're using eightway movement right left up and down but I have created two sets of input actions in the project settings right one and right to left one and left two and so on so that the player one will use arrow keys and player two will use WASD and because I name them this way I can have the script just use whatever ID the character is set to and map that to the actions that belong to it so that way I can use the same script on both players so from this we're gonna create two players player 1 and player 2 which are inherited scenes and all I've changed on the player scene is that I have set the name I've set the ID here so this is player 1 player 2 will have an ID of 2 and I changed the module 8 just to quickly make them two different colors and next we have a world scene which is the tile map I'm just using two different kinds of tiles here the grass for the move tiles you can move through and the stone one for the walls which has a collision shape attached to it and inside the Vista map I have instanced the two players so if you run this scene everything works fine you have the tile map your players can move around everything's fine except for the fact that the tile map is much much bigger than the display window so the characters would go off the screen now if this was a single player game you would attach a camera to the player and just have that camera follow them around as they moved around the map but that won't work with two players because you need a camera following each player and you need those cameras to display separately so that's why we're gonna use viewports now I want to point out that notice we have made the game work on its own even though we haven't done these viewports yet to display the players we have all of the game features working the way we want and if you set things up that way it makes things a lot easier if you try to combine the splitscreen view with your game logic things start to get messy really fast so now that we have a working game that does everything we want it to do the only thing we have to worry about is just what we display on the screen so we're gonna do that by creating a new scene main scene I'm using a plane node as the root of this scene because it just needs to contain the other ones and so on this screen we want to show two viewports next to each other and to keep them aligned we're going to use a view H box container and H box container is a node that organizes controls in a horizontal row and so if we make this the full rectangle and we set the alignment to Center then anything we place in it will get arranged horizontally starting from the center and we're gonna put two things in it so they'll be side by side and I'm going to name this container viewports because it's gonna hold the viewports and the things we're gonna put in here our viewport containers because a viewport by itself is just a texture basically that's being displayed it doesn't have any position or size properties of its own and so it needs to be placed inside of a container if we want to display it in 2d so we're going to add a viewport container to hold our viewport and let's call this container one and then we will duplicate that so that we have two now I'm actually going to arrange them this way because I'm gonna put player 1 in container 1 and player 2 in container 2 but I want player 1 on the right because I use the arrow keys for the four player one so they should be on the right and the WASD player should be on the left now both of these viewport containers are empty so they are just they have no width or anything so we're gonna go in and we're gonna change the properties of these to stretch we're going to turn stretch on that will make the viewport that's inside the container be sized to match the container so we don't do manually set it so we're trying to turn that on both of them and then to set the size of the viewport container we're gonna use the size flags and set the horizontal to expand now notice that made new per container to fill the whole thing until we go over here and set it on container 1 and now they're both equal sized taking up half of the screen and you can even in the H box container put a little separation between them if you want using the custom constants like if you put five here you'll have a little 5 pixel gap in between each container now let's put a viewport inside each of these containers so we'll go add a viewport to each of these and let's also name these viewport two and viewport 1 so that we encode we'll know which one we're referring to now for a viewport to display anything it's going to need a camera 2d which is going to render on to the viewport so each of these viewports needs a camera 2d attached to it so do that on each of them and don't forget on the camera 2d to check the current property now normally if you've used cameras before you you know that only one camera can be current at a time but that means only one camera can be current for its viewport so each of these will be current for its individual viewport we can also zoom a little bit because of the scale of everything if we set the zoom to 0.75 on these cameras they will display a little bit more of the area around the player which is going to look a little better so here is your node setup for our viewports we have the viewport the H box container holding the two keeping them organized side by side to viewport containers each of which has a viewport inside of it and each viewport has a camera 2d now of course if we run it and we won't see anything because there's nothing for these viewports to render so let's add to viewport one I'm going to add the an instance of the world scene so the world remember contains the map and the players so now when we run it we will see the world over here in the viewport one and the players are still moving like they were before the cameras are not following yet and the other viewport isn't working but you see how the world is rendered in there now you may notice that on your screen you're not seeing the world rendered in the viewport in the editor there is a small bug with control nodes so they don't always update on the screen and the way you can refresh them is you switch to a different scene and then switch back you'll see the you'll see it properly what happened is the viewports are now getting resized so see how the viewports size is now 510 by 600 because it's being automatically scaled by the viewport container to be that size and this little blue rectangle is representing the camera's view right because we're zoomed out now if you change something with a layout or something like that with any control nodes typically refreshing the window like that will will redraw it the way it's supposed to be all right so we see our world inside viewport one we want to see the same world inside viewport two but obviously we don't want to have a whole nother instance of the world or we'd have two player ones and two player two's we want the viewport twos world to be set the same as viewport ones two we want it to render the same environment and we can do that in code so I've added a script here and this is what the script looks like so up here I've created some variables to use as references to the various nodes that we're going to use so viewport one and two camera one and two and the world itself and remember that when you're typing these you know you can either when you type the dollar sign you'll see the auto suggestion popup and you can go and pick the one you want you can also if you ever have a node over here in the tree if you grab it with the mouse and drag it into the text editor window it will drop the path in there now it always puts quotes around it which you only need if the names have spaces in them so I'm going to go ahead and delete those quotes but so now I have these references to the different worlds or sorry to the different nodes and then the ready I'm going to set viewport twos world equal to viewport ones world and that way when we run it now both of them will be displaying the map and again the players are not anywhere we can see them because we haven't set the cameras to follow the players so there's you know they're starting off the screen somewhere but both viewports are now rendering the world so now we need those cameras to follow their assigned players so to each of the camera 2ds attach this script this lets us set a target for the camera and if we've set a target it will follow the position of that target that's all we need the cameras to do is just follow their target so you might also I think it looks a little better on the cameras if you disable the drag margin which means the player will stay centered exactly in the center of its viewport as it moves around so now each of these cameras can be assigned a target so in the main that's where we will do that so here in Maine and the ready I have assigned camera one its target to player one and camera two to player two now when we run it everything's going to work the way we want so there we see the players centered on their viewports and when you move player two the camera follows and when you move player one the camera follows and that's it now we have our splitscreen working the way we want now let's just add a couple of refinements so in the main I'm gonna set the camera limits so what I have here the function called set camera limits that gets the size of the world you have that tile map and goes through each of the cameras and sets their left right top and bottom limits to those coordinates so what that does is it makes it so that when you run the player can't go off of the maps and if I get all the way up here to the end see how the camera stops scrolling when I reach the edge of the map and we don't see any of that blank space out there that's not part of the world okay this is a useful thing to use whenever you're using tile maps and have a scrolling camera all right we're almost finished but I want to add one more feature which is a common use of viewports and that is to create a mini map a tiny view of the whole world where we can see the entire map and where we are in it so I'm going to add another viewport container but not inside the H box this time it's going to be it's going to be a separate one that's gonna float on top of the rest of the scene so we had a viewport container I'm going to call this minimap and we're gonna set that to stretch and inside of it we're gonna put a viewport and inside of that we're gonna put a camera to D don't forget to set the current camera to D to current and for this we want the camera zoomed way out so I'm going to try 9 by 9 I think that should be pretty good so that we zoom way out and show the whole map and to size the minimap we're just gonna do this we're gonna eyeball it we're gonna set this to something like about that and then let's put Center bottom on the layout so that it will Center it so our we want our mini map to show the same world as the rest of them so we'll set that in the script we've just put here that set the mini maps viewport world 2d to the same world 2d we're using 4 viewport 1 now if we run this we're gonna see the map there but it's offcenter and we can fix that by setting the position of the camera so I'm going to go over again set the cameras position to be centered on the screen which is 512 by 300 and that's going to Center the camera on the minimap but now we have this grey area around the edges and that's empty space right outside of the map so we could try and adjust and get the size just right but what we can do is a viewport has a property called transparent background and if we turn that on it will not draw any of that grey space so now when we run it will see our minimap down there on the screen and you can see yourself in it as you move around both players independently and we have our working minimap all right that'll do it for this demo I hope this helps you when you need to use viewports in your project please leave comments below if you have any questions and you can also download the full project for this from the link that I'll paste in the comments below thanks for watching and I'll see you next time you