this is one i've gotten a lot of requests for especially since i did the airplane tutorial is how to make a 3d spaceship that flies around in kind of an arcadey star wars kind of style so not realistic physics but more of the dog fighting action kind of game all right so let's take a look for our spaceship models we're going to use this ultimate spaceship pack that was recently released by quaternious it's they're really cool they've got a lot of different ship models to choose from and conveniently they come in all sorts of formats the gltf version is what we're going to use so that's what i'm going to drop in my assets folder of my project right here and then i've chosen to use the executioner model so this is the ship i'm going to use okay but in order to use this i'm going to take the executioner and i'm going to import it and use kinematic body as the root type so that when i create a new instance of one of these it'll already have a kinematic body as its root so new inherited scene and you see i've got a kinematic body and then the mesh is a child of it and now we can add a collision shape to this and you can do the collision shape however you want i'm not really concerned about collisions for this demo we're really talking about the control so i'm just going to do a simple box shape around the around the ship body and not worry about the details because oh and i just noticed by the way something to keep an eye out for when you're importing meshes notice that this mesh is facing the positive zaxis which means that when we fly around we're going to be flying backwards so you take the mesh and rotate it 180 degrees around y so that it will be pointing in the right direction that we want okay and all right so there's my collision shape i'm going to go ahead and save this okay so in the input map i've added inputs for pitch up and down roll right and left yaw right and left and throttle up and down and for all of these i've added the inputs both keys and game controller you'll definitely find that using analog stick input for the controls is going to work better and then throttle up and down i've just done buttons for okay and so we'll use those in the script that we're now going to add to our executioner scene okay here's our script we're going to start with a couple of variables that we can set for the performance of the ship the max speed is going to be our top speed that we can go and acceleration is just going to be how fast we can get there obviously in a real space situation with no no friction there isn't a max speed but again we're this is an arcade style you know star wars type of flying around ship and there's going to be a max speed or else things will be really hard to control and then we're going to keep track of our velocity and we're going to keep track of our forward speed our forward speed is basically how fast we're going to be going that's going to change when we throttle up and throttle down and then velocity is going to be our vector that we that we have out of that and so the first thing we're going to do is we're just going to talk about forward motion first then we'll get to the then we'll get to the controls um so we're going to use git input here so we make a function called get input that's going to check the status of all of our inputs and for here we're going to do throttle up and throttle down and all those are going to do is lurp our forward speed right when we throttle up we head towards the max speed and when we throttle down we head towards zero and that's all we really need to do with those and then we can do our movement and in our in our physics process is where we will do the movement okay so we get the input we set our velocity equal to our forward speed in the forward direction and then we'll just i'm just going to use move and collide from a movement here obviously you can use movement clyde or you can move and use move and slide and i'm not actually capturing the collision info which we would eventually want to do uh in case you ran into things but again i'm mainly just concerned with getting the movement working so i'm just going to leave that like that for now all right to test this out i've made a test scene here with a nice space background and a camera so that we can see if our ship is moving and make sure we don't have any problems so i'm going to hit play the scene and now i can hit my throttle up and throttle down buttons and i should see the ship accelerate and decelerate all right so now we know that stuff is working now we're ready to go back in our script and add some functionality for the rotations so we're going to set three configuration variables for the speed at which it will roll pitch and yaw and then we're going to have a variable for each of the each of those axis inputs that we'll be capturing from the joystick or the keyboard and then in the get input is where we're going to capture these so what we're going to do is we're just going to make each input equal to the input's action strength right so up my up minus down roll left minus roll right y'all left minus you all right and now we'll that will get us each of those inputs and then we can use those inputs in the physics process and we'll do that by rotating the basis and we'll rotate the basis along each of those axes based on what the input was roll is along the z rotating around the z axis pitch rotates around the xaxis and yaw rotates around the yaxis and then it's always a good idea when you're manipulating the basis to orthonormalize it because of floating point errors will eventually accumulate and make your your axes no longer orthogonal and things will start to skew and look weird and now we should be able to try this out and see if it works so i'm gonna yaw i'm gonna roll and i'm gonna pitch okay and now you can see we can control all those together and rotate the ship in whatever direction we want and if we and actually if we throttle up we should see the ship fly away let's point away from the camera and then if i pitch up i'm going to do a loop all right y'all will go in a circle and so on and we can also roll okay so that is our the basics of our control right now let's talk about improving this a little bit if you notice when i was rolling and you know pitching the ship and so on it moves a little too sharp right the ship starts and stops instantly based on the input and that doesn't feel very natural so we want to give it a little bit of we want to do a little bit of lerp there to cause it to not stop instantly and depending on how rapidly you do that you can set how floaty you want those controls to be so we're going to add a variable here called input response and the bigger this number the faster the response the quicker it'll snap to to moving and and and not moving and then we'll use that here when we get the inputs okay so instead of these three what i'm going to do is actually make these lerps so we're gonna when we have a new pitch input which is the same combination of inputs we're gonna lurp it based on that input response okay and what that's gonna do when we try playing this is watch when i roll when i let go of the stick the ship still rolls just a little bit right it comes to a stop pretty quickly but there is a little bit of time there and you can adjust that based on what you set that input response to but now we get a little bit of gives us a little bit of a feel of inertia right and you can you can't instantly change direction there's a little bit of delay when you slam the stick from the right all the way to the left one other thing you might have noticed is that the controls are a little bit awkward because we have three axes of rotation we need to use two analog sticks so i'm using the left stick and the right stick right and the left stick does roll and pitch and the right stick is doing yaw and that gets kind of tricky to control because using both those sticks at the same time and so what a lot of space games do to get rid of that problem and make it so you only need one stick for steering is to link two of the axes and that's what we're gonna i'm gonna show you how to do here we're gonna link the roll and the yaw and to do that we really just want to go up here we want to make the yaw speed somewhere between a quarter and a half of what the roll speed is so i'm going to make it let's 0.75 okay and then down here instead of getting the yaw input from the joystick right instead of that we're just going to say yaw input equals roll input and so now we'll be able to steer with one stick now what this will look like is essentially when you when you roll you yaw a little bit too right pitch is still up and down but now yaw will roll a little bit and it makes your ship spiral a little bit so you sort of turn to the right a bit when you roll to the right and that's really all we need to do and you can experiment with that quite a bit and if you have if your ship has different types of if your game has different types of ships in it you can set them up differently so that different ships have different handling capabilities and fly differently and you could also try doing things like linking pitch and yaw for example instead of rolling yawn but i i recommend you you experiment with it and play around so to see how this might look in practice let's take a look at a little example game i've made where i added some effects and shooting and some other ships and we can switch to a chase camera right and you can fly around and like i said this is where you'll want to experiment with different types of ships and different behavior depending on what you're going for all right i hope this tutorial was fun for you and helps you with the space game that you dream of making thanks for watching and make sure to check below for a link to this example project that you can try out yourself you can find this recipe and lots more on the godot recipes website at goodrecipes.com here you can find a wide variety of recipes for creating the game system you need some help on how to get started with godot in the basics section and lots more i recommend you go over there and explore and let me know if there's something you're looking for that you'd like me to add as i'm always adding more recipes over time thanks for watching and i'll see you in a future video