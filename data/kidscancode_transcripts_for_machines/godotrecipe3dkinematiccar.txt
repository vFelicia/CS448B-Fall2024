welcome back now this is one that's been very frequently requested how to make a 3d car game and now godot has a vehicle body node which is based on rigid body and simulates pretty much everything from suspension to acceleration breaking all that kind of thing but for my mind it introduces a lot of complexity and i think it tends to be overkill for a lot of more casual racing or driving games if you are interested in how the vehicle body node works there's a great series that i will link you to at the end of the video and i recommend you go look at it it's really well done uh but we're going to go with a kinematic body based solution here because it's much easier to set up much easier to control and will give you most of what you need for most like i said casual racing style games now if you've seen my 2d car steering video then you probably will find most of this familiar because since a car stays on the ground for the most part all of its movement happens in the x z plane so it's pretty much a 2d problem anyway and so we can reuse a lot of the code we used in the 2d car tutorial to make our 3d car work and if you haven't watched that one i do recommend you go and watch it as well as i do go into more detail on how the algorithm works there and i won't go as deep on this one all right well why don't we get started to start with we're going to need some models and i'm going to use kenny's car kit which you can find at kenny.nl the link is posted below and this has got a bunch of different car models in it i'm going to use this red coupe here but you can use any of these and we might want to use some of these later for npc cars and things like that so go ahead and download the whole kit and when you download the kit you're going to get a folder that has a models folder in it and in there are the models saved in a variety of different formats gltf is going to be the easiest one to use with godot so in the gltf folder you'll see a glb which is a binary gltf file for each of the card types so you can go ahead and drag those and drop them in a folder in your godot project what i did is i made an assets folders folder and then inside of their cars folder and i've just dropped them all in there and specifically i want to use this sedan sports.glb and if you go over to the import tab you can change the root type here i'm going to change the root type to kinematic body and reimport and what that will do is it'll import the gltf file along with all of its materials and so forth and make it so that when you double click on this to start a new scene the root node will be a kinematic body which is what we want for our car okay so let's see what it looks like if we go over here and just double click on the glb file we're gonna make a new inherited scene from that car and there we go there is our car and you can see the scene the note hierarchy over here for the scene we have our root node which is a kinematic body which the first thing you usually want to check is the orientation because different artists will save their models with different orientations depending on what software they're used to using we want forward to be the negative zaxis which is the way it's aligned already so we're already good there and you can see we've got a few different nodes in here we've got a body mesh which is the body of the car the spoiler is separate because i think those are made to be interchangeable and then we have a different mesh for each of the for each of the wheels all right there's the left wheel there's the front left wheel uh and then there are a couple of intermediate spatial nodes here um unfortunately due to the way it was exported from blender but we don't really need to care about that we're not going to be using the scene hierarchy all that much so don't worry too much about this temp parent all right we're going to be moving the kinematic body around and the only thing that's missing now is we need some collision shapes to apply to our kinematic body that's why we have the little warning symbol there and what i'm going to do is i'm going to set up we want our wheels to be able to obviously roll along the ground and we also want to be able to go over small bumps and things like that irregularities in the ground when you get when it gets time to to adding terrain you might have a variety a variety of different approaches to that so so i'm going to use cylinders for the wheels and rather than go under here and make a cylinder for each wheel i'm just going to make one big long cylinder for the whole front axle because that's all we really need to simulate our car rolling along the ground and then i'm going to do a separate box collider for the body of the car so it can bump into walls bump into other cars things like that okay starting with our box glider here i'm going to show you a trick to makes it easier to size your collision shapes when you're doing things like this so what i'm going to do is i'm going to set this to the left view so we're looking at the car head on and we're going to be in orthogonal mode not perspective which means you don't want to what you don't want to do is rotate the camera because that's going to make the perspective all kind of wonky because you're in orthogonal mode but if you have this button here called auto or orthogonal enabled when you choose left view it's going to automatically change to orthogonal and what that means is you're looking at it as if it was a flat image and that's going to make it really easy to position and size our box to cover the body like we wanted to and yeah i'm just going to estimate it for now we can adjust this later depending on what kind of behavior you want when you have the game working and let's look at the view from the front and then you can see we're going to need to bring that in right and now if we go back to perspective mode you can see we have our box set up to enclose the body good enough for now and so i'm just for right now i'm just going to add one more collision shape with a cylinder shape now the cylinders are by default oriented this way so we're going to change its rotation around the zaxis by 90 degrees so it's oriented right and then if we position this again using the left view we can change the radius of the cylinder we can get it over here and we're going to pan the camera not rotate it and we can position this so that we get it nice and centered on the wheel get the radius the way we want it for the wheel and remember you want to go a little big because these wheels are are beveled on the edge so you want the bottom of the wheel not the front edge and then if we look at it from this side it's obviously going to be too wide so we're going to bring this in to the width of the two wheels and now we have go back over to my left view now we have one cylinder that's perfect right and then we can just duplicate it and with that second one we're just going to pull it over to the other wheel we'll zoom in here make sure we are nicely centered but it'll be exactly at the same height because i'm not moving it in the y so now i know that my two cylinder collision shapes are perfectly aligned um in the y and then from the bottom they'll be lined up too all right and if we if we were to hide the the car there you can see the collision shapes how they're going to be set up all right so that's going to be it for our collusion shapes to get started and the last thing i like to do is give these collision shapes some names that are easier to keep track of and so i'm naming these collision body collision wheels oops i got a typo there collision wheels front and collision wheels rear in case i ever need to refer to them in code or keep track of what collision shape is you know is colliding with something uh naming them will make it easier to remember the collision shape one collision shape two and so on okay and then go ahead and save this car i like to make a cars folder that i can save the different cars that i make in there and any scripts that go along with them i'm calling this one demo car but you can name it something descriptive for whatever car you're making and we're ready to start adding a script but we need to think a little bit about what we want our script to do and if you think about what the inputs for driving a car are there's essentially three we have accelerate we have decelerate or break and we have steering and whether the car is controlled by a human using the keyboard or a gamepad or something to do those inputs or we decide to make an ai controlled npc card that's going to drive around the track by itself that npc car is still making those same decisions do i accelerate do i break do i turn left do i turn right and so the input may come from different sources but the way the car moves once those inputs are applied it's going to be the same regardless of where those inputs come from so we can have a lot of the code will be shared between all different kinds of cars including cars that have different behavior profiles right you might have heavy cars slow cars cars with tight turning radiuses and cars with wide ones and that kind of thing but all those are parameters that go into the same general movement code so for that reason what we're going to do is we're going to make a script called car underscore base.gd and this is going to be the common code that all cars are going to share that we can use for any car and it's going to extend kinematic body that's we're going to attach these scripts to and we're going to start with some parameter variables okay and i'll just go through and explain these real quick gravity is how fast that object's gonna fall when it's in the air and i like to use a custom value here you you're perfectly welcome to go into project settings and use the global physics gravity setting which is what rigid bodies use but you know when we're making an arcade style game with not necessarily a concern for realistic the most realistic physics i like to be able to get some flexibility and maybe i want the some objects to fall faster than others and so on but it works out the same way we use some value the default in the project settings of 9.8 i never find to be fast enough things feel too floaty so i'm using negative 20 here so negative meaning down and 20 is the magnitude of that wheelbase is going to be the distance between your two axles how far apart of the front and rear wheels and that will depend on your model and you can you can eyeball it or you can adjust it once you're driving around and see what kind of behavior you like it's going to have a lot to do with how tight that car can turn right a bus has a really long wheelbase it's not going to be able to make as tight a turn steering limit is in degrees how many degrees can you turn the wheel how many what's the maximum amount those wheels can turn to cause the car to turn engine power and braking are going to be for the acceleration and deceleration right the stronger your engine the higher your faster acceleration is going to be and how fast and then how quickly you can break as well so those are things you can adjust um and then friction and drag the same these are going to be friction is your interaction with the ground and is essentially proportional to your velocity drag is your interaction with the air it's air resistance and it's proportional to your velocity squared so this is why sports cars tend to be more streamlined than buses or trucks or things right because to go faster you want less drag and and so these these can have a lot of adjustment happen so i'm just using some really starting numbers here to play around with when we uh when we start driving around and then i don't want to be able to reverse at the full speed that we're going to be going forward so we're going to cap our reverse speed to some number that's fairly slow so that when you're in reverse you're just usually using that to get out of when you've run into a wall or something okay and that's that now we also have some variables for the kind of ongoing state of the car and those are going to be the acceleration the velocity and then we're going to keep track of how far the wheels are turned and those will be here as a brief aside most of this code that you're going to see is almost exactly the same as the code for my 2d car steering recipe that i made a little while back you can watch the video for that at the link below so i won't go into too much detail you can go back and watch those if you're interested so we're going to start with the physics process here so what we're going to do is we're going to check if we're on the floor because we don't want to be able to steer and accelerate and decide when we're in midair right the wheels aren't touching the ground you can't control the car so this will let us do if we have if we want to have jumps and things like that in the in the game or or allow you to you know fly off the top of hills and things like that so we're going to check we're on the floor we're going to get the input we're going to apply any friction that applies and we're going to calculate the steering that is being applied by the input then we're going to add the acceleration of gravity downwards update our velocity based on our acceleration and then we're going to use move and slide with snap for our movement and here i'll put this on the next line so you can see it a little better so we're going to move by our velocity we're going to use our basis dot y so the local downward vector as our snap vector right so we want this will this will be so that we can have slopes so if you're going up a slope your snap vector is pointing into the slope not down in the global y axis and then vector three dot up is what defines the flat ground and then true is the stop on slip and that is it for our physics process so this was what will happen every physics frame okay and now we're going to want to apply the apply friction that that's going to be common to everything and this is pretty much copied and pasted from the 2d version all right if we're going if we're going really slow then we could we can just stop but friction is going to be based on our velocity drag is going to be based on our velocity squared and then we add them both together to get our full acceleration or deceleration in this case we're going to do calculate steering now calculate steering is going to take whatever input was applied and adjust the movement so so here's what we have here and i might have to make this font a little smaller hopefully everybody can still read it so we're using as described in that 2d recipe we're using this bicycle model where you have where you really just simulate one front wheel and one rear wheel and extrapolate everything from there so our rear wheel and our front wheel have a position they're based basically uh at our car's position plus or minus the wheelbase half the wheelbase right because the total wheelbase is the distance between the two so now we know the locations of our front rear wheel the rear wheel just moves forward by the velocity but the front wheel moves forward by the direction it's pointing right so rotated by whatever the current steer angle is so that means our new heading is the direction from the rear wheel to the front wheel right the rear front wheel moved off to the right sum then our new heading is going to be pointing to the right and then we're just going to check if our new heading right which is the front facing direction of the car that's the direction of the car is pointing but if our velocity is the opposite of that that means we must be going backwards so we're going to make our velocity be our new heading backwards the opposite direction so that's what's going to let us go in reverse so that we're not having our if we always move forward in our heading direction then we'd never be able to go backwards and then now that we have our new velocity calculated what what direction we're going in we're going to use look at to rotate around our up vector to point in the new direction right the new heading is just where we are plus the new heading and that's pretty much it for the movement we will have our get input command we'll go ahead and define that function so we don't get the error up here but we're going to leave it blank because this is going to get overridden in whatever inherited script we want so the player controls will go in here if we're doing the player cars the npc ai logic will go in here if we're doing a computer controlled car so we can't really test this out since we don't have any input so we're going to start with some player input just to get our car driving and make sure that it works so we're going to need some inputs in our input map i've defined four inputs steer left and steer right accelerate and break and these are going to be i've done keyboard controls and i've done gamepad controls and the reason for that is you know when if you're using keys keys are binary they can only be pressed or not pressed and that means that when you want to turn right and you press right or the d key then your wheels will turn the maximum amount and you will do a hard turn to the right or you let go and you go straight you can't do anything in between like you would turn a steering wheel just a little bit to turn just a shallow turn and using the analog stick on the gamepad is going to allow you to do that so you will have better control if you use an analog input of course so what we're going to do is we're going to attach a script now to our demo car and the script that we attach is going to not inherit from kinematic body it's going to inherit from car base all right and then we hit create and now see we're going to extend car base so all we need to do here is we need to override we need to override that get input and we're going to do there's two things we've got to check we're gonna check our steering and we have to check our accelerator brake uh input and so to check the steering we're just going to get the get you're gonna use get action strength on the steer left and subtract the steer right and that will give us our steering so that's gonna be you know get action strength will be one if you're just pressing the the key but if you are using the analog stick on your game controller then it's going to be some value between 0 and 1 so we can get an amount of turning to do and then we're just going to multiply that by the steering limit so if turn is one then you will be turning the maximum amount as term is 0.5 it will be turning half that amount and so on and to make things look nice we're also going to want to rotate those wheels and so what i did was i went and i copied you can you can right click on one of these meshes and copy node path okay and then we can paste that in here and say i want you to i want you to take the front right and front left wheel and just rotate it in its y by whatever that steer angle was and i'm actually multiplying it by two here just to make it a little bit more exaggerated so while we may only be turning 10 degrees the wheel will actually be more visible if it rotates 20 degrees and so this is just exaggerating the amount of the turn so if you're usually gonna be playing with the camera zoomed out you'll see that wheel actually rotate as you move the as you press the keys or move the stick okay and so oops and that's our steering okay and then the other portion of what we need to do is check the is check the accelerate or decelerate and so that means here we're going to set our acceleration to zero by default if we press the accelerate accelerate key we're gonna go forward by we're gonna accelerate forward by the engine power uh if we press break uh we're gonna do the opposite and now all that's left is to try it out so i made a test scene here with just a big plane a static body that's a plane and i stuck a camera up here just so that we can see the car in the world and make sure that our controls work so i'm using my gamepad i'm going to press the a key and steer with the analog stick and there we go we can run around and i can make sharp turns i can make shallow turns right now notice we are not doing any kind of traction so we are on rails kind of here we're not doing any kind of subtraction we're not doing any kind of drifting but that's something that we can add later this video was all about getting the basic movement and controls down to sort of have a starting point where you can take this adjust all of those properties of friction and drag and steer turning radius and all that kind of thing for whatever type of behavior you want and then we can build on that some more so there will be some followup tutorials to this where we add things like a track and move around in a more interesting world we will add some traction and drifting to it to give it that feel when you're going really fast take a sharp turn your rear end slides out and you can drift around corners and things and we will talk about how to do an ai controlled car that will also be able to make its way around a track and navigate just like the human player would do and then you can you can even race against it all right thanks for watching please post your comments and questions in the comments below and click the link below as well if you'd like to see the written version of this on goodorrecipes.com i will be adding it there as well so that you can you can see the code a little better and and copy and paste it if you need to you can find this recipe and lots more on the godot recipes website at goodorresps.com here you can find a wide variety of recipes for creating the game system you need some help on how to get started with godot in the basics section and lots more i recommend you go over there and explore and let me know if there's something you're looking for that you'd like me to add as i'm always adding more recipes over time thanks for watching and i'll see you in a future video