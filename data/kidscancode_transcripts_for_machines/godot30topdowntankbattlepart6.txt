welcome to part 6 of the topdown tank battle tutorial in Godot 3.0 last time we made our tanks shoot and this time we'll be talking about how to make them take damage alright let's get started so now that we have the tanks shooting at each other we need to make these bullets do some damage so we're gonna go into the tank script this is the generic tank script that both of the tank types inherit from and we're gonna make it so that they can take some damage and what that means is we want to add a method that lets any object that deals damage deal its damage to the tank so we've already created a signal that we're going to emit when the health changes we've created a variable to hold the health and actually this one I'm going to change this to max health so the variable that we export variable that we set on each tank will be what its maximum health is its fully healed and then we're gonna have a we're just gonna have a health variable that then it's the one that can change and when it takes damage and then in the ready we want to set our health to the max health value and will emit the signal at that point so that whatever UI we have which we haven't made yet will know to show to display the right value when it sees this so we're gonna omit the health changed and we want to tell it what value to display and since the max health can be changed to you know any value we want and we might have different amounts of damage happening we're just going to use the percentage so I'm going to say health times 100 over max health so that we just pass in to the bar to display a percentage of whatever our health is and then down here we're going to add a take damage method as well and that is gonna be what handles all the damage so I'll say take damage and it's gonna you're gonna pass in an amount of damage to take so we subtract that from the health we're gonna emit the signal will emit the same signal again so I'm just going to stick that right in there as well and then if our health is less than or equal to zero we're going to explode and what is explode mean well eventually we're gonna play some animation and stuff like that but for right now explode just means Q free so that when the health runs out the tank will be destroyed so now our tank can take damage we need to look at our bullet and see how to deal that damage so we've already added on the bullet script that if it hits a body that has that take damage method it's going to call it so we should be able to see our stuff working let's check real quick and see here so I have the players max health set to a hundred I have the enemy tanks set to fifty and then I have both bullets I believe that yeah to do ten damage so we should be able to run it and see our bullets destroying the enemy tank if we hit it enough times so we'll have a head over here and start trading damage yeah there we go okay so now we are dealing the damage now we need a way to see the that health value on the screen I've started making the HUD here so this is a canvas layer and it's children are a margin container which is going to just keep everything from getting too close to the edges of the screen I have an H box container that's going to organize whatever control nodes you put inside of it are automatically organized in a horizontal line and so you don't have to do any management of the anchors and everything like that it'll automatically space them out I have a texture wreck and a texture progress so this texture progress is going to be the health bar that's going to display the a colored bar showing how much health you have or what percentage of your health you have the text direct is just going to be an icon so we know that that's showing our armor or our health whatever we want to call it and I'm just gonna rename these a little bit to make them a little more manageable okay so now I've saved these in a a UI folder where we're gonna put all of our UI scenes you I related scenes okay so let's set up these nodes the margin container I've set it to full rect means covers the whole viewable area of the screen and then I've set the custom constants down here for the four margin values to 20 so it will keep a 20 pixel border around all the sides the container we don't really need to do anything to the texture rect we're gonna stick a texture in there and in the assets folder we've got a little shield image it's gonna look like that and then for the texture progress the way these nodes work is that you assign them a texture and it displays as much of that texture as your value you set on the bar so we're gonna go into the UI section of the assets and I'm gonna grab this horizontal green bar I'm gonna drop that in the progress texture that's the one that shows the values so for example if I go down here and set the value see the minimum zero maximum is 100 that's good because we're doing percentages and let's say our value was 75% then we see 75% of the green bar and we can make that look a little nicer by using this over texture because that's what texture will be laid over on top of it and in the UI folder also there are some glass panels and there's one that's that size too so we'll stick that over so then it's on top and so it looks like the bar is filling a portion of it and as you can see from the horizontal or H box container our things are nicely spaced out there and we don't have to do anything really in the way of layout so let's add a script to this HUD later we might have other things but we'll add up here like score and things like that but we'll come back and do that later when we figured out how we want to do that so we're going to add a script here and just worry about updating the health bar so we're gonna add a function called update health bar and we pass it a value and that means we're gonna take the health bars value instead equal to that value we passed in and that's all we really need to do and now we want to connect that signal so whenever the player's health changes we want to send a signal or connect its signal to the HUD so that it will update the health bar with that value so we go back over to our main we're gonna put an instance of the HUD UI in there so that when we run it we'll see our our HUD up there and it's in a canvas layer so that it does not scroll with the camera and it stays independent of the camera now what we want to do is take the player's health change signal and we want to connect that to the HUDs update health bar and that's all we need to do so now we should see it be at a hundred percent to when we started and when I get over here and start taking some hits we can see it go down by ten percent each time and now the player is dead no notice what we removed the player from the tree so that means our camera doesn't have anywhere to go now and it just snapped back up to the corner because it doesn't have any scrolling location anymore so that's our health bar working but it's kind of boring so let's we're gonna spice it up a little bit by adding some color to it so we're right now using this green bar but we also have a red in yellow one and I've already pre typed these things but if you want to if you want to know a shortcut you can go over here and when you're like say I want the green bar if I rightclick on it I can say copy path and then when I go over here into the UI I can paste it in there that's a quick way to type these out you don't have to type these file paths out but we're gonna load all three bars the red green and the yellow and then when the health bar changes we're gonna check its value and see which one we want to display so as your health gets lower it'll turn yellow and then red so we're gonna set the bar texture equal to bar green by default so normally you'd use green but if the value is less than 60 then we're going to change to yellow so we're going to set bar texture to eat to bar yellow and then if the value is less than 25 then we're gonna set the bar texture to bar red and then we just have to set the right value there so we take the health bar and we set its texture underscore or progress equal to bar texture now we should see our nice green bar and then when we start taking some damage it will change color all right so yeah we turned yellow there now we're red okay so that's nice but another nice thing we could do is animate that change so instead of the bar just jumping from 100 to 90 we can make it look like more like it's draining down instead of just jumping from one value to the next and we'll do that with a tween node so I've added a tween node here to the health bar and I made it a child of the health bar because just planning ahead and thinking what other things we might add here we might have different tweens animating different UI components so we're gonna make it a child here so when we update the health bar we want to set that tween to interpolate the value from the current value to the destination value and do it over a certain amount of time and so the way that looks is instead of setting the value directly right here what we're going to do is set the tween and so these tween method calls can be pretty long because there's a lot of options that go into them so you're almost always going to have to spread this over multiple lines so we want to interpolate a property of the health bar and then I'm going to go down to the next line here we want to interpret we want to interpolate its value we want to start with its current value whatever it currently is and we want to go to the destination value that we passed in for the amount of time I'm going to put now you could get hit pretty rapidly so you might not see this these transitions happening if we do it over too long a time so I'm going to do it over a short amount of time and then I'm just going to use the linear transition type and the in/out technically doesn't matter when you're doing linear and so now it's now that Weena's been configured and we can say we can tell it to start and then that means we don't need this line anymore because now when the tween finishes the value property will be set to the destination value so let's take a look at that and see how that looks when we take a hit now this would be even more apparent if we were taking a large amount of damage but see how it's sliding down now and that looks a little better I think while we're at it let's add one more effect to the hutt I'm going to add an animation player and what we're gonna use this for is to make the bar flash white and red just very briefly when you take a hit so there's some visual feedback that you've been hit and so we're gonna make a new animation here called health bar flash and so the configuration of this if you haven't used the animation player before I recommend I'll put some links in the description below to where you can go and look at some more beginner examples for it so I'm not gonna go into all the details but I'm gonna set the length of this animation to 0.2 again that's a nice short amount of time and I'm gonna set the steps to 0.05 and what we're going to have this do is animate the texture so I'm gonna go to the texture rect and we're going to set the texture progress looks about that one the texture progress we're going to set it to red and then white red and then white just really quickly to make a flashing effect so I'm going to add those keyframes and I'll be right back okay so I've just made keyframes here with the texture progress set to red and then white and then red and then white and then red and so when I hit play you see we get a nice very brief visual flash and so we're gonna play that animation when we take a hit so we'll go down here and we start the tween and then we're also going to play the animation so we'll say animation player DUP play health bar flash now the only issue with this is when we finish with the health bar flash our bar texture is going to be red because that's what it was left at at the end so one thing we can do to resolve that is when the animation player finishes we're going to get an animation finished signal so we can connect that and this will tell us that an animation finished and which one finished is in the anime anime so if anime equals health bar flash then we're going to set the texture progress back to what it's supposed to be so now if we go over here and hit run let's see how it looks now when we take a hit now we get a nice visual effect whenever we get hit with that flashing all right that'll do it for this time we in the next video we'll do something similar for the enemy tanks by giving them a health bar as well thanks for watching and I'll see you next time you