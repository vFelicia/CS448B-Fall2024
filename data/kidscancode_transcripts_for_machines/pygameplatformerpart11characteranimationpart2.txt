welcome back this is part 11 of our platformer game we're going to continue to work on character animation this time around we're going to work on the walking animation in the last video we set up the idle animation for our characters so that when we're standing still we look like we are moving in place gives it a little bit more character and this time around we want to talk about the moving animation the walking animation when we go side to side so we're going to go back over to our player sprite into the animate method alright and we set our idle animation to run if we're not jumping and we're not walking so now we want to set up what animation should play if we are walking if self dot walking is true okay and so how do we know to set self dot walking to true well one thing we can do is we can just say if our X velocity is not equal to zero then we must be moving we haven't stopped moving so walking should equal true otherwise we can set it equal to false not walk frames walking equals false okay and then we can write the code to show the walk animation all right is going to be pretty similar to how we did the idle animation so if we're walking then we need to see if it's time to change frames yet right if it's been long enough since the last update to change frames now this is going to depend on how fast our character is moving what our move speed is and how many frames of animation we have and all those kind of things we're going to put 200 here and see how that looks and we can adjust it if we don't like how it looks and so we are updating so we'll set the last update time to now and we'll pick what our current frame should be and that's actually going to be the same process we did here except we're going to use the length of the walk frames and we're going to do the same thing we did to set the bottom of the sprite to the right location so that we can keep track of where the the bottom of the frame is because it might change size a little bit as we switch from frame to frame and now before we set the image to the next frame we need to pick whether we should go left the left frame or the right frame the right walking or the left direction walking so we want to see which direction we're going so if our velocity is greater than zero our X velocity is greater than zero then we're going to the right so we can set the image to self dot walk frames our current frame otherwise we'll use the left frame okay so that way we've chosen the right direction and then we can set our get our new rect image get rekt and bottom equals butt okay now let's see how that looks so go over to our main and we'll run our program alright we riding like we're supposed to now if I walk to the right there we go we have a nice little walking animation I go to the left okay now you guys see what's happening right here I've stopped pressing the left arrow key my velocity should be zero but I'm still walking does do you know why same thing happens if I go this way so this is something that we didn't deal with before when we were doing the movement but we have to deal with now and what's happening is if we go back over to our sprite when we move right friction is slowing us down rank is friction is a negative direction so our acceleration is getting smaller and smaller and our velocity is getting smaller and smaller but our velocity might not ever reach zero what if it's point zero zero one right if it's very small then our position isn't going to change because we're gonna round you know we're rounding by the pixel when we move our position so so our position isn't changing but it's not zero and so to get our to get our sprite to actually stop moving and zero out we need to set a threshold if the velocity gets below a certain point before below a certain value then it should just get set to zero and we can easily do that by just putting here if if our X velocity sorry if our the absolute value of our X philosophy cuz it could be negative or positive a very small number so if our the absolute value of our X velocity is less than let's just put point one right we're not going to move point one of the pixel then then the X velocity should just get set to zero so we'll force it to drop to zero if it gets too small and what that will do is take care of that coasting problem so if I run when I stop running I will stop as the friction makes me coast to a stop yes I know our character has a lot more personality now I can see him looks like he's moving and if you've adjusted the walking speed or the friction you might want to adjust the animation speed of that walking animation as well if you go over to this value right here this is how many milliseconds we're pausing in between each walk frame so if you made that bigger right then it's gonna look a little more like this maybe that looks a little bit too much like he's coasting right and if you set it to small let's say we only had it at 100 then it's going to animate really fast which might be fine if you had more frames of animation than it would that looks a little too fast so I kind of like the 200 we had in there before but you can adjust that get it to a value you like you know maybe not quite as slow as we had it maybe a little bit faster all right until you find a value you like okay one other thing that I wanted to look at before we wrap up this video is what happens when we are wrapping around the screen here when we go off one side and come on to the other if we slow down and do it slowly you can see that what happens is as soon as the rabbit gets halfway off the screen at teleports over to the other side and that's a little bit not quite perfect it's okay when he's running but no kind of slow there is a little bit of a jump there and I like it to look more like he actually walks off one side and walks back on the other now due to the way that tie game draws sprites we can't draw half the sprite on one side and half the sprite on the other it's not very easily but what we can do is let him walk off and walk back on a little more cleanly okay so what we want to do is go back over to our sprites update all right right here we're detecting when the x position is greater than the width that means we've gone off the righthand side but remember the x position that we're using is where we're mapping that to the center of the sprite the middle bottom so that that's why the center of the sprite is what causes the teleporting to happen but I'd really like to be able to walk a bit further and what I'd like to do is actually walk half way half the size of the sprite so self dot rec dot width over two and if I go that far off the screen then I'm going to teleport back over to the other side width over two and then we're going to do the same thing on the other side in Reverse if we walk off the left hand side width / then we're gonna add + width over to there okay and you see the pattern so if we go back over here to our main we can see what that looks like alright so when I go fast it's okay now if I slow down a little bit you can see I get all the way off and then I start coming on there so it's a much smoother transition there's there's no detectable teleport and it looks more like he's walking off one side and coming back on the other that's going to be a little bit more clean now the one tradeoff here is that it is possible to stop yourself so that where you're standing and there's only a sliver of your character showing on the screen right you can barely see them and so that's kind of a personal preference that's up to you whether you like that effect or dislike that effect is it gonna is gonna allow the player to cheat and get away with something or is it going to make the player get stuck and lost and not able to keep track of where they are that's kind of optional it kind of depends on what direction our gameplay goes I think for right now I'm happy with it that way and and we can call that our video we've made our walking animation and we're ready to move on to the next video I'll see you then you