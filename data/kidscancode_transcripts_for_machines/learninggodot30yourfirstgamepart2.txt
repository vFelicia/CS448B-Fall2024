welcome back this is part 2 of the Godot 3.0 beginner tutorial if you haven't watched part 1 yet please go and watch that first and you'll be all caught up and ready for part 2 in the last video we created our player scene and now we want to make it move and when you need functionality on a node that isn't available from the builtin settings over here in the inspector that is when you need to add a script so we're gonna add a script to this player node by clicking the add script button right here and this dialog box that pops up asks you some questions about how you want this script created and so the language is going to be Gd script it inherits area 2d because that's the type of node that we clicked on the template you can leave that default basically you don't need to change any of these other things it's going to name the script player GD which matches the name of our scene node so that's perfect so just click create and then you will be in the script editor if you haven't encountered GD script before there's a link below to the GD script introduction on the Godot website I recommend you go take a look at it and then come back here and all this will make a little bit more sense to you so in here in our script editor we have some information boxes over here on the side I'm gonna make these smaller because we don't need to look at them very much right now and in here is our script and the default script has some comments to give you some some information about how this group works and a little bit of default code that doesn't do anything just yet so I deleted the comments and I've made the font a little bit bigger so hopefully it's easier for you to read on the screen the first thing we want to do is declare our member variables remember variables are properties that you want to add to this particular node to increase its functionality so for example we might want to have a variable to decide how fast our character moves so I can make a variable called speed and set it equal to some value but that means if we are playing our game and we decide our what we want our character to move a little faster a little slower we would need to edit the script and change this number so instead what we can do is export this variable like this and what this says is I want a speed variable it's going to be an integer so in the parenthesis here you put what type of variable you want it to be and export means I want this to be visible in the inspector so if I were to go over here and click on player now you can see I have a speed right here so I can just click in here and set that and now my speed is 400 and that makes it easier to change that property later so let's click on script to get back to our script and declare our other variables we're also going to have a velocity this is going to track the players movement and we'll be changing that as we press press different keys on the keyboard and then we're going to have a screen size variable that's going to be the size of the game window so that we can know when our player reaches the edges of the screen next is our ready function this is a function that's called whenever the node is added to the scene so it's the initialization code this is the code you want the player to run when it first starts up and we're going to figure out what our screen size is at this point and so the command to do that is get viewport rec dot size so that will get us the size of the screen and if you go and change that in the project settings like we did at the beginning the player will automatically know about those changes now for the movement we need to look at the process function and the process function is one that's run every frame which means about 60 times per second in here is where you want to do anything that you need to happen continuously and we're going to do three things in this process function we're going to check for input which keys the player is pushing we're going to move in that given direction and we're gonna play the appropriate animation to match what direction we're going in so depending on what keys are being pressed like if none of them are being pressed we want our velocity to be zero so we're gonna reset our velocity here then we're gonna check which keys are being pressed and we can do that by using input dot is action pressed and then we say what action we want to talk about now there are already some predefined actions like UI write which stands for the right arrow key these are defined in the project settings in a section called input map and we're not going to go into that for this tutorial but you can go in and assign custom inputs in that input map if you have a particular set up you want to use we're gonna use these defaults for the left right up and down arrow keys now what this function is going to return is either true if the key is currently being held down or false if it isn't so if it is down we want to take our velocity and we want to make its X positive because we're going to the right and then we want to do the same for the other arrow keys so I've copied and pasted in and now I have right going positive in the X Direction left goes negative so you can notice if right and left are both held down at the same time we add one and subtract one which leaves you at zero so you won't move at all and then down and up do the same thing but for the y direction now one problem we'll have is if we hold down right and down at the same time then our velocity vector is going to be one in X and one in Y 1 comma 1 which is going to make the player move faster because it's adding a horizontal and a vertical movement together then it would be moving just horizontally or just vertically so the way we fix that is if our velocity length is greater than zero then we want to normalize the velocity so velocity equals velocity dot normalized normalizing a vector means resetting its length to one so if we're only going to the right our length of our vector will be one if we're going diagonally now our length will be one but we don't want to move at one we want to move at our speed so we're going to multiply that by speed and now we have our velocity set correctly based on whatever keys are being held down so now that we know our velocity we know how much to move so let's change our position the position of our area to d node and we're just going to add the velocity times Delta which is the time step of the frame which we get from process and let's try it out and see if it works so if we click on our player node here's our scene this button right here will play the current scene so if we hit play we're gonna see our game window our character is up there in the corner because we haven't changed this position but if I press the arrow keys I can move around in all four directions and diagonals but we do go off the screen because we're not using that screen size limit to stop us from moving off and so to fix that what we want to do is we want to clamp our position we want to clamp the x value of the position between 0 and the width of the screen and the y value between 0 and the height of the screen so that can't go outside of those bounds so we take the position X and we clamp this is what the clamp function does the value we want to clamp is the position X between 0 and screen size X and then we just want to take that same thing and do it again with Y and then we'll have our character should not be able to go off the screen we run the scene again we stop when we hit the edges now we do go half way off because our position of our character is the center of the node but that's fine that is good enough for us not to get lost anywhere off the screen now we're checking input and we're moving we need to handle the animations and we want to do two things we want to play and stop based on whether we're moving when we stop moving we should stop playing the animation but also we want to pick which direction we're going so that we can play the up animation when we're going up and etc so when we're when our speed is greater than zero we're moving so we're going to take our we're going to take our animated sprite and gonna say play and that's going to play it's animation but if we're not moving we want to take that animated sprite and stop it and that's going to just start and stop the playing whenever we move which is going to look like this so see whenever I move it's playing the animation and then stopping when I let go and that's fine except I'm always pointing to the right because we're playing the right animation to change which direction we're pointing in we want to use on our animated sprite these properties flip h and flip v flip horizontal these are true or false slips the sprite in that direction and vertical flips it this way so depending on what direction we're going we're going to trigger one of these to flip the image of the sprite and then we're going to switch between the up and right animations so back to our script we need to decide which way we're going so if our velocity X is not equal to zero well that means we are moving left or right so we want to take our animated sprite and we want to set the animation that we're going to use to write and we also want to take it and set its flip V to false because we don't want it to be flipped when we're moving side to side and finally we want to take our animated sprite and set its flip H to true if we're going to the left and false if we're going to the right well that's just is the velocity dot X less than zero so if our X velocity is less than zero we're going to the left so flip H will be true if it's false flip H will be false and then we just need to do the same thing for the Y direction so we're going to take check our velocity dot Y and if that's not equal to zero then we're moving up or down so we take our animated sprite and set its animation we want to use the up animation that we made and we want to set its flip v2 whether we're going up or down so velocity dot y greater than zero now if we play the scene again we should see the animation changing based on which direction we're moving in so I go left or right my eye points that way if I go down or up I'm playing that animation once you're sure you have the animation working right and all the movement go back up to you're ready and add hide we want this player to be invisible when the game first starts they're not going to appear until we've pressed the start button and started playing the game so we want them hidden at the beginning so now if you hit play or your player is going to be invisible and now we can start talking about collisions so we want to get ready for this player to be able to detect the mobs hitting it so we're going to make a signal called hit and so we're gonna admit that when the player dies so that the game will know to pop up the game over screen play the death sound all that kind of thing and so first we need to detect did we hit something if we click on our area 2d node down here next to the inspector is another tab called node and in there it lists a whole bunch of signals that the area to denote can produce and since the enemies are going to be rigidbody 2ds their bodies so we want the body entered signal so if we click on that and then we click connect we can connect that to a function in our player and Godot will automatically name this function and we can leave that as the default we don't have to change any of this stuff we can just hit connect and now our player script has a function created called on player body entered so whenever a body enters the boundaries of this player's collision shape right which we defined then the code in this function will be run and what we want this function to do is hide the player we want it to emit that hit signal that we defined so that the game will know that the player died and then we also want to set monitoring equal to false meaning we want this player to stop detecting collisions if we just hide it it's still going to detect when things hit it and we don't want if two mobs hit us you know one after another we don't want to have a double hit so we need to turn monitoring off but you can't just set that one equal to false directly in the middle of a collision so you have to use a command called called deferred and what we want to do is we want to set monitoring to false and what that does is it just sets it to that as soon as it's able to and then we need one more function and this function is called start and what this does is tell the player where to start when the game starts and so we're just gonna have the game say hey player start at this position so we're going to set our position equal to that position we're going to unhide and we're going to set our monitoring equal to true and now we're finished with the player script I know it was pretty long almost 50 lines of code and 15 minutes or more of video but the player is the heart of the game there's a lot going on with the player we had to write a lot of code to get it to do everything we wanted it to do in the next video we're going to start talking about making the mobs for the game