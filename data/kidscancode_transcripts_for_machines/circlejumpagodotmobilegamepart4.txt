welcome to part 4 of the circle jump series in this video we're gonna start making our menu screens so we have a number of different screens we're gonna make one for the title screen one for the GAMEOVER screen and also a settings screen so they're gonna all inherit or they're all gonna share a lot of property so we're gonna hair it from a base scene so I'm gonna make that base scene first with a canvas layer and I'm just gonna call this base screen I'm gonna save that in the UI folder so this is going to be all the things that my screens have in common well they're gonna start with a margin container set to full rect and custom constants set all these to 20 so that's gonna ensure that nothing in my on my screen gets too close to the edge and then we're gonna have some various things going from the top to the bottom so we're gonna use a bee box container for that the UV bucks container we can leave everything default I think so yeah we'll come back and mess with it if we have to probably want to space things out but in that V box container we're going to have a label this is going to be the title clip title here alright that's going to be centered and I need a font for that alright so that's my title of whatever screen I'm on and then underneath I'm going to have a row of buttons that row of buttons is going to be an H box container and I don't have any buttons to put in there yet the default screen doesn't have any but we'll put our ones for the various screens in there H box contain needs to align from the center and we'll probably have some separation and we're going to name this buttons and we're gonna duplicate it because we need to have two rows of buttons with the same properties and then lastly I'm going to add a tween here that's going to be for animating the title coming out or the screen coming on and going off of visibility and we're gonna start with our offset being 500 right we're gonna it's gonna start off over here and then move on to the screen with a script so we're going to add a base screen script this script is going to do pretty much nothing but the animation so we're going to get a reference to our tween and then we're gonna have two methods here appear and disappear and both of them will just be animating between we're going to interpolate the property the cell for self we're going to interpolate offset dot offset X and for a peer we're gonna go from 500 to zero go the next line here will go from half a second and we'll use we're gonna use tween dot trans back and ease in out and then we'll call tween dot start so that's up here and then I'm gonna copy that because the only difference between appear and disappear is that we're going to do the reverse motions we're gonna start it zero and go to 500 okay now we can make our first scene so we'll say a new inherited scene and inherit from the base scene we're gonna set our label up here this will be where we put the title now again these are going to be very nofrills to start with right we want to just get something functional before we spend too much time on making things look fancy and then we need to add some buttons in here and the buttons in the buttons row are going to be texture buttons so the texture button this is going to be I'm going to use the name of the buttons to define what they do because we're gonna have maybe a play button in more than one place so we have a play button the texture we're going to use is in the assets there's our play button and then we want to duplicate that actually before you duplicate that I'm gonna put that in a group called buttons because that will let us refer to these and get a list of all the buttons that we have title screen let's let's name that so we know what that's called so the play button I'm gonna duplicate and this is gonna be a button to call settings and for that we're gonna use a different image from the buttons we're gonna use the little gear drop that in there there's our button now one thing I noticed everything's very smooshed up against the top so in the base screen we'd probably want to space out yeah on this V box container something fairly large so that they'll be spaced out there we go titles at the top buttons near the center so that's pretty much all we have to do for our title screen and then the other scenes are going to be the same so I'm gonna do those real quick inherit another one from base screen which is gonna be our settings and the settings screen we actually need to we're going to need two rows of buttons so we're gonna say settings here we'll save that and then and there are buttons for settings we've got sound and music toggles and we have a Return button that'll take us back to the main screen and we have one more which is our game over screen and here's the game over screen which is gonna have a button that takes you home and a button lets you play again so to bring them all together we're going to make one more new scene I'm just going to use a plane node as a container for holding all these screens and in it we're gonna put our title screen settings screen and game over screen so I'll screw three screens or like a piled up on there but they're off the screen and this is where the switching is going to happen pulling onto the screen whichever one we want to see so we're going to have a we're going to need to send a start game signal to the main scene when we press that button we're gonna need to keep track of which screen is currently on and active and the ready we need to register all of our buttons right we need to connect them up so we're gonna make a function to do that call that here and then we're gonna also gonna have a change screen button which changes to whichever one we want title screen being the one we want to change to first so let's define those the register buttons is going to get get all the buttons that's get tree and we want to get nodes in group buttons right that will get us all the buttons that we made then we can go through them in a loop and connect their signals I'm going to connect the pressed signal to a function will make locally and it's gonna be called on button pressed and then we're gonna send along with it the buttons name so we know which one we pressed okay and then on button pressed name we'll determine which one we pressed so let's match match the name if we press the home button we want to change screen to the title screen if we press the play button then we want to change screen to no we want to have no screen active we're going to omit that signal so the game knows to start if we picked the Settings button we're gonna change screen to the setting screen and then we could press the sound and music ones but I don't have anything to do with those yet so we're gonna hold off on that and then we need to define our change screen function okay so when we change to a new screen first of all if there's a current screen right there maybe or there may not be if there's a current screen we need to make it disappear so the current screen disappear we just call its disappear function that we made and then we want to wait for its tween to complete between completed signal we wait for that to finish then we're going to set the current screen equal to a new screen and if new screen isn't null then we're gonna call current screen dot appear and do the exact same thing we will yield and wait for that tween to finish so now we can actually try it out if we run the screens by themselves we should see the title screen appear if we press settings we go to the settings screen these buttons don't do anything yet but return will take us back to home and play is going to start the game so we would we sent out the start game signal so we need to connect that to Main and we will have the game start but first we need also something to call if the game ends so we will make a game over function which is going to change screen to the game over screen we can call that from main so let's go over to our main and we're going to add in the screens collection and we can start connecting this stuff up so screens is going to have a signal start game we can connect that to our new game function that we already have we can stop calling new game and ready we don't want to do that so that should be enough for us to run it the game comes up when I hit play the game starts now the game starts a little too fast so I think we probably want in our screens function here to give a slight delay when we hit play we change screen to null and then we're going to yield create a timer let's just say for a half second and we'll wait for timeout now let's play the game title screen comes up we can still bounce around from menu to menu but when we hit play the game starts playing now we need to do something when we end when we go off the screen so let's open our jumper and we're going to add a signal died so will this little emit when we die and right now we have a die of functions we are removing ourselves but we need to emit that signal and then in main we can connect that signal just like we did with its captured connect the died signaled to on jumper died and then so what do we need to do when the jumper died when the jumper dies I want all the circles to go away and it's the easiest way to do that is if we go over to our circle scene a circle node we're going to add that to make a group for that then in our main script what we can do is just call get tree let me say call group which let's just call a function on every member of a group so on circles we'll call our implode function on our squill call game over on our screens okay that should do it so let's give it a try here's our play screen we play when we go off the screen we get game over we play again right we can keep playing let's check the timeout on the circle oh we saw the game over screen twice that means our signal our player be sending out the signal twice why is the player sending out the signal twice well over here we call jump or die right when the circle runs out which is fine but on the jumper when we do die we send out the signal but Q free deletes the jumper when the jumper is deleted it triggers this screen exited signal on the visibility notifier and it's calling died again so what we need to do is only send out this signal here and that will solve that let's go ahead and let the circle run out and make sure there we go okay that'll do it for this part thanks for watching I'll see you in the next one don't forget to subscribe so you can see the next update when it comes out we're getting pretty close to having the full working framework of the game so we can start talking about how we're going to get this on to mobile all right I'll see you in the next video you