welcome back this is part 7 of the intro to 3d series for Godot in this installment we're gonna learn how to make a first person character we're gonna start with our same CSG scene we built in the last part so that we have somewhere for our character to walk around in and now for a first person character we don't so much need a model for the character because the player is going to be looking out from the character's eyes so really we just need a camera that moves around based on the players input but it also needs to collide with walls and not fall through the floor and all that kind of stuff so we're gonna start with a kinematic body so let's go over here and add a kinematic body this is gonna be our I'm gonna call this an FPS character now we're gonna add two collision shapes to this and I'll explain why in a second but one of them is going to be called the body and one of them is going to be called the feet and then we need to add the camera now the thing is the way that the control scheme is gonna work is you look left and right when you pan the mouse left and right and you look up and down when you pan the mouse up and down but we don't want to rotate the kinematic character up and down when you look up and down because then you'd be falling on your back or falling on your face so we need the camera to rotate up and down independently of the body so we're going to add a spatial here and I'm going to call this the rotation pivot or actually let's just call this the pivot keep the name short and then we're gonna add the camera to that the camera will live in there so that way let's switch to the local mode here that way when the character so the FPS character is going to turn left and right and of course the camera goes with it but the camera pivot will be what rotates up and down so the camera will now be pointing up but the character is still pointing forward okay now now these collision shapes are going to represent our character's body and for that we're going to use a capsule shape which we need to rotate 90 degrees in X so it's pointing up and to give it a size that's appropriate we're gonna change the radius to 0.5 to make it a little narrower and we can leave the height at 1 that gives us about a 2 meter high box which is pretty good now a capsule character is nice because if there are small bumps on the ground or things like that you will sort of roll right over them because of the rounded bottom but it also causes a problem when you're when you walk up to ledges or things like that if you stand on a Ledge you will just gravity will sort of slide you off of the edge which is not good so that's why we're gonna have a collision shape for the feet and that's gonna be a box we're gonna set the box size fairly small I'm going to use point four point one and point four and then we're going to move that down and we want that to be down near the bottom of the down near the bottom of the capsule shape but not all the way to the bottom because that way if we have a little bit of the rounded capsule shape sticking out below we'll still get that effect where when we go forward and we hit a small obstacle we kind of walk over it but if we're at the edge of the ledge we won't slide down it because the box will stop us ok so that's how we're gonna set up our collision shape and now the pivot we don't want to be looking out the center of our body so we probably want to move this up a bit I'm thinking probably about probably about there will a jet we can adjust it as we go but you're looking out of almost the top of the character so that's all we need to get started let's go ahead and add a script to make it move around okay we're gonna have a gravity this is gonna be 30 we're gonna have a max speed this is how fast we move and we're gonna have a mouse sensitivity this is how sensitive the mouse is when you move it side to side and it translates into rotating the character now in the case of the mouse when you move the mouse you get a value in pixels and we want to translate that into a value in radians that we can rotate the node by so I'm going to use point zero two and then again this is in radians per pixel and so for each pixel that we move the mouse we will rotate by 0.02 radians which is about a tenth of a degree all right we're also going to have a velocity this is for our movement and that I think should be all we need so now we need to get get our input all right so we want our input to be in the direction that we are facing with the camera so if we've turn to the right and we press forward we want to move that direction but we might already be moving we might already be moving in a certain direction then we turn and want to move in that direction and if we want to have friction or acceleration or have you know be able to have an effect where we have a slippery ground or something like that you can't necessarily change direction instantly so our direction of input might not be the same as our direction of movement so we're not going to change the velocity directly we're going to figure out what direction we're trying to move in so we're gonna call this the input direction and that's a vector and it's going to be based on the direction that the camera is facing so I'm going to grab a reference to the camera so let's make an unready of our camera equals two pivot camera and then that way we can just write camera now the code for this is gonna be the same as we used for the third person character where we check the four inputs and map the input dur to that transform so I'm just gonna paste that here so this is just directly from our third person character I just changed it to use the cameras global transform and we're adding that to the input direction and now you might be holding down more than one of these at once so we probably want to normalize this otherwise we would move faster when we try and go diagonally and I'm gonna return input dur so the result of Maya get input is I have what direction we want to move in okay now for our rotation we're gonna capture one handle input if we get an input event mouse motion and we want to check that the mouse mode equals captured right only when the mouse is captured do we care about this we want to rotate the whole body around Y based on the event relative x times the mouse sensitivity so that will rotate us sidetoside and then we want to rotate the pivot around X based on the event dot relative dot y times the mouse sensitivity now before we test the movement why don't we go ahead and test the rotation so if we go over to our room scene we can add an instance of our FPS character here and let's place them in this room over here so we're not make sure you're not inside the floor so let's test this out and see what the rotation looks like all right so I'm moving the mouse left and right I'm moving the mouse up and down that is all good the sensitivity is pretty good for me if you want to adjust it remember the smaller you make the number the less sensitive it'll be so the more you have to move the mouse to get it to turn okay oh and one problem we're gonna have is let's say I start looking up well I can keep looking up and now my head has completely turned upside down which is a little bit wrong so we need to clamp this upanddown rotation to a reasonable limit okay so let's clamp the pivots rotation dot X which is what all right that's what we're changing on the pivot let's clamp that to a reasonable amount and I'm gonna use 1.2 that should be pretty good let's try that out and now if I look up now I'm stopping there at the ceiling if I look down I'm stopping at the floor and I can't look down any further so that's good now we can do our movement so in the physics process we want to increase our velocity Y by gravity we want to get the input so I'm gonna call this the desired velocity and that's gonna be get input whatever direction we get from the input times our max speed that's what we want to go and I'm not going to do the friction stuff yet so we'll leave this part out but we need to set our velocity X equal to the desired velocity dot X and our velocity Z to the desired velocity dot Z so that we get moving in the direction we want but we don't ruin the y that's already been set by gravity and now velocity equals move and slide velocity and then we want to say vector three dot up is our ground normal and then I want a true here for the stop on slope parameter because when we walk up our ramp we don't want it to just sort of slide back down the ramp all right let's try that now all right so now here I am walk forward back and left and right and go through there walk up the ramp all right I hit the crates everything looks pretty good I even made the openings for my doors just tall enough for us to fit through which is a happy coincidence I wasn't planning on that in the last video now for jumping we can use the same code we used in our other character we have our jump we have a jump property jump speed which we can set to how fast we want to go upwards let's say 12 and then we're gonna have a jump property which is whether you've pressed jump or not so jump is going to be false most of the time but if we actually want to use just pressed but if we press the jump key we're going to set jump equal to true and then down in our physics process after moving slide we can test if jump and is on floor velocity that Y is equal to the jump speed and that should really all we need to do to get jumping working good enough okay most firstperson characters have some sort of object in their hand so I've downloaded from Kenny a shotgun model we're gonna add a mesh instance we want this to be part of the pivot as well because we want it pointing out through the camera and we're gonna use this shotgun mesh now the only issue with this shotgun pitch that you're gonna notice is it is ridiculously small and so we need to scale it up to match the scale of our character so on the mesh we're gonna scale by about 8 times and then we're going to flip it around and why by about 180 degrees and then we want to position it so that it's sticking out through our camera and that can be kind of hard to do and this is where it's easier if you take the view and split it into two viewports and then on the bottom viewport I'm gonna pick the camera and go preview mode so now I'm seeing what the camera sees and then in the top up here I can grab this shotgun and I can position it and see how it's gonna look when it's in the camera so I want it down into the right a little bit like it's sticking out ahead of me that's not too bad let's see how that looks when we run the scene so there's our shotgun pointing ahead of us and that's okay but you might want to come in here and tweak this and maybe rotate it so it's pointing a little bit at an angle so it looks more like it's coming you know from your from your side where your arm is not directly a straight ahead and obviously we don't have any arm or hand models here that we can attach to this yet but all of that we'll have to wait for a later day this will do it for this video hopefully this helped you in getting started and creating your own first person character if you like these videos please don't forget to Like and subscribe and I will see you in the next one you