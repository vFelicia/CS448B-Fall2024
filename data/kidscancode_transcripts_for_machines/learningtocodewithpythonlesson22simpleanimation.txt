welcome back to learning to code with Python today we'll learn about how to create simple animation in the last video we learned how to draw simple shapes on the canvas that we created in our window these four lines of code create the window that we're going to draw in the important settings here are the width and the height of the window that you want to create and then we learned how to draw simple shapes like ovals and rectangles and so on today let's look at how easy it is to make those shapes animated to start with let's draw a circle on the screen so we'll go back to our canvas create oval command right and let's draw it will draw it up in the corner 10 10 60 60 so it will be 50 pixels wide and 50 pixels tall and let's go ahead and fill it with a color so it looks a little bit more interesting okay now instead of just drawing that oval I'm actually going to assign it to a variable so once we create the oval this variable will point to that oval and we can do things with the variable alright let's try and make the ball move so we're going to use the canvas dot move command and that command needs three arguments three things need to go in the parentheses the first one is which object you want to move then a number for how many pixels in the X direction in the horizontal direction we'll put one and then the last one is how many pixels in the Y direction in the vertical direction we'll put zero okay so that should move the ball one pixel to the right now moving one pixel is going to be really hard to see so why don't we do it a bunch of times so we'll make a loop and we'll just count to 400 that's our window is 500 pixels wide moving 400 pixels should be fine so this should move the ball one pixel at a time 400 times so let's run it and see what happens there's nothing in my window and then the ball just jumped all the way to the right so why did that happen well anytime you use the Move command you need to tell the computer to re draw the things on the screen to update the pixels on the screen that we're looking at and you do that with the TK dot update command so this says after the ball moves draw the pixels in the new position and then and do it again and do it again so here's what that looks like now we have a nice smooth movement one pixel at a time now this may or may not look so smooth on your computer that's because it depends on how fast your computer is and all sorts of things about how your computer is set up this loop the computer is trying to do it as fast as it possibly can and different computers that might be a different amount of time so usually what we want to do is slow it down a little bit and sort of take a break in between each update of the screen you can think of it like a cartoon or a flip book if you've ever drawn one of those you draw a different picture on each page and then you flip the pages faster you flip the pages the faster the animation goes but that's speed how fast you're flipping the pages is called the frame rate and the best way for us to slow it down a little bit and make it consistent is to use the time dot sleep command and the time dot sleep command is just how many seconds to pause in between each frame of the animation we'll just put one 100th of a second small number just something to make it consistent and we do need to go up here and we need to import time okay now when you run it should look pretty similar might have smoothed out on your computer if you were seeing it move way too fast or kind of jerky now let's make our ball do something more interesting than just move a little bit to the right and then stop we'd like to make a ball that will bounce around the screen and just keep going alright so instead of a counting loop here what we really want to use is a forever loop a while loop so let's change this into while true and let's also go ahead and set some variables for how fast we want our ball to go okay so we can set an X speed and a Y speed and those will be what we'll use in the Move command okay so right now that's just going to move the ball at a diagonal like that and of course when it moves off the screen it's still going the Y is getting bigger and bigger and bigger and bigger so we need to tell the computer that we don't want it to go past the edge of the screen we'd like to see it bounce off the bottom before we do that let's talk a little bit about how things behave on the screen every object on the screen for example our ball has an imaginary box around it and you can think of it like this and that box has two important coordinates the upper lefthand corner and the bottom righthand corner and these sort of tell where the box is on the screen and where the object is inside it so this would be an x one y one right and then this one over here would be X 2 comma Y 2 all right you could also think of it as the X 1 is the lefthand edge the Y 1 is the top the X 2 is the righthand edge and the Y 2 is the bottom so if you think about that now we can see what we need to keep track of to tell the computer wins we want the ball to bounce so if the ball is moving in this direction and this is the edge of the screen we want the ball to stop when this righthand edge is the same as the width of the screen all right when it gets to here we want to stop moving this way and we want to bounce and go back that way and we want to do the same thing with the other three sides of the window and here's an example of that so I have my ball and you see as it's moving around those four coordinates keep changing as I'm moving to the right the right hand coordinate is getting bigger and bigger and bigger and bigger and the width of my window is 800 so I want to bounce when that right hand coordinate hits 800 so this would be when I want to change speed and go back this way and if I was going down then I want the bottom and the bottom reaches the height I want to bounce or when the ball is moving up when it reaches zero the other top is equal to zero so that's what we want to do we want to ask the computer where is the ball check the four edges if it's reached in any of those four edges reverse direction okay so what we're going to do is after we move the ball we're going to check the coordinates and the command for that is canvas coworker coordinates and then what do you want to know the coordinates of we want to know the coordinates of the ball and then I'm going to save that in this pause variable so now the pause variable looks like this it has these four coordinates in a list so since we start out moving to the right and down we're going to hit the bottom edge first so why don't we start with the bottom edge if pause now which one do we want to look at the bottom edge is this last one so this would be number zero one two three so we want to look at position three if position three is greater than or equal to the height of the window which is 400 then I want to stop moving down so I want my wide speed to become negative I want my Y to get smaller and smaller so I want to change the sign of Y speed so I can just say Y speed equals minus y speed and we just reverse direction so let's see what that does so we should bounce off the bottom edge now and then we're going to hit the top edge and not stop but we want to do the same thing if we hit the top edge we want to bounce on the top edge whoo go back to that list is position 1 and if that ever reaches 0 the top of the screen we also want to bounce so that should take care of the top and the bottom now we just need to do the same thing for the left and the right and you see the left is position zero and the right is position two so we will say if position 2 is ever greater than equal to the width of the screen which is 500 in this case or pause zero is less than or equal to zero then we want the xdirection to reverse and that should take care of all of the four walls and that should all work fine if we change the speeds so let's say we wanted to go a little bit faster and we'll make this one five so now we're removing more pixels in each move so it looks like our ball is going faster but we're still going to bounce on all the edges alright we're just about out of time but I want to cover one more thing and that is what if we decide we want to make our window bigger let's say I wanted to make my window 800 pixels wide and 600 pixels tall watch what happens to my ball so we're still bouncing when the xcoordinate reaches 500 so if I change the width and height I've got to go down here and change this one to 600 and this one to 800 and then the next time I change I have to change it in both places it's kind of annoying to have to change it over and over again well what program is do to solve that problem is create something called a constant we're going to make a constant called width that's 800 and we're going to make a constant called height that's 600 okay so these are just special variables that we put in all caps to indicate that they're constants they're not things that we're going to change over time but it's something we want to use in more than one place so now instead of saying I want my width to be 800 I want my width to be whatever width is set to and I want my height to be set to whatever height is set to and I want the ball to bounce at those same values okay so that way if I ever want to change how big my window is I can change it in one place up here at the top and everywhere else it will use that value correctly so now I have the right behavior okay next time what I'd like you to think about is what if we wanted to add a second ball to the screen what would we have to do think about it give it a try and next time we'll talk about the hard way to do it and then we'll go over an easier way to do it good luck see you next time