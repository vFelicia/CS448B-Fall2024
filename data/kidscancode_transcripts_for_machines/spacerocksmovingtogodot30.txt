welcome back this is a new video in the space rocks judo game engine development series and this time around we're going to be talking about moving this project over to the new version of Godot 3.0 now 3.0 is currently in alpha which means it is not stable not considered ready for primetime yet but I've been using it a lot lately and it's looking really good so I'm gonna make this project my experiment for using some of the new features in it and showing how some of the things that are changing from 2 point 1 to 3 how they're going to work so a couple of quick notes first this is running in the latest build as of the day I'm recording this of the 3.0 alpha it will not work with alpha 1 the one that you can download so you will have to build your own version if you want to run this code if you haven't built the Godot engine before it is really easy it's probably one of the easiest opensource projects to build that I've ever come across the directions are here on the website go ahead and take a look clone the repository and give it a shot if you're not up for that another possibility is you can get daily builds at this website and over here you can see a bill just about every day so that you can make sure you've got the latest version of the code of course be aware that sometimes that means things will break but I'll put the links to these below so you can get them and either build or a demo to build yourself so what's changed well if you haven't looked at 3.0 before you'll see that there's a lot of minor UI changes things have been moved around a little bit the color schemes a little different but overall the engine is still the gudo engine you're familiar with specifically moving the game over there were some things that needed to change and some things I changed along the way since as I was doing it it was convenient now it is possible in Godot 2.1 to use the export tool and this will do some conversion of your scenes and things like that however it's not exactly perfect when I tried it with this project the result was a bunch of errors mainly from things like the texture is not being converted the same we used the spritesheet atlas importer tool to grab all of the kennyart from the from the art pack and that doesn't work in the new in 3.0 the texture format is changed the import process has changed for assets in 3.0 so you still have to do a lot of manual changes alright so what's changed well probably the biggest changes happen with the asteroids so I decided this time around as I was converting things to make the asteroids rigid bodies instead of kinematic bodies and the reason I did that is one it makes the code a little simpler we just give them a linear velocity when we spawn them and send them on their way we still use the same process of choosing the texture depending on what size we want and making a collision shape to match but now we're just gonna set a linear velocity when the asteroid is created and let it go and that also lets us do a mass so I can assign and in the global I assigned a value here for the asteroid mass so the big rocks have a much bigger mass than the tiny ones and that means when they bounce off of each other the big ones you know if the little one bounces off a big one the little one will bounce more the big one will barely be affected and that looks a little better it looks looks nicer you'll see when we run it we also we still have the little puffs of smoke coming off when they hit same as we did before but also what I did was in the main instead of having the asteroids wrap around I just created some invisible walls here out of static bodies so these are the edges here they're just for static bodies so the rocks are gonna go off the screen a little bit and bounce back on and I made these bouncy so they'll make sure you know to send it back onto the screen and that looks a little nicer too and then the last thing I changed about the rocks was the spawning instead of putting a bunch of position 2ds like we did before so I just drew a path 2d around the edge and to spawn the asteroid when we when we have a new one for example we will just pick a random spot so when we do a spawn asteroid I'm sorry here when we do in the new level right because we want to spawn new ones we just pick a random offset on that path follow and put the asteroid at its location and that just means they can spawn it that way they can spawn anywhere along the edge and it's a little better that'll be a little better when we have a lot more of them spawning to something big you'll notice in the code is that it looks a lot more it looks a lot cleaner and a lot more losing this in a little bit a lot shorter basically and that's because we're taking advantage of a couple of new GD script features one of which is this dollar sign shorthand so this dollar sign music music is the music note over here is equivalent to saying get node music dot play write that is something we had to write all the time in 2.1 and it also means that if you're going to be referencing this note a lot we don't have to do that on ready var music equals get node music that we had a whole ton of the top of our scripts and so it got rid of a lot of code and in fact I just did a quick count and while this project does the same thing as the 2.1 version it has a little bit less than half the number of lines of code so we've really trimmed it down and made it more concise less code is always better because the more code you have the more places you can have bugs so this is so this is good and let's see so that's mainly the changes to the rocks to the player and the enemy we also made a little change on the bullets so previously we were making the bullets that be that these entities shot children of that entity but what that meant was that if the enemy shoots at me if the enemy gets blown up those bullets that it shot will just instantly disappear and we don't want that we want the bullets to be in the main scene so we've created a shoot signal and that shoot signal is both the enemy and the player have that signal they both have a bullet configured which is just a scene that they load and when they shoot they emit that signal and that signal passes along with it what bullet object is being shot what position the bullet should appear at and what rotation or direction that bullet should go in and then in the main we have an add bullet function here which will which that signal is connected to which is just gonna spawn that bullet in a bullet container here and that will also allow us in the future you know if we decide we want the player to have these laser bullets but also maybe a heatseeking missile or something they can load a different kind of weapon and you know and then when we do the shoot we can emit the signal and say spawn one of those type of weapons instead of the bullet and that'll be a lot more flexible as well if we play the game you'll see it pretty much looks exactly the same as it did before we can fly around we can shoot the asteroids we can shoot the bad guy who shoots back at us and that's all working as before now I had been posting all of the code for this project and the other tutorials here on this github repository but for space rocks now that it's starting to get kind of big I'm gonna I'm gonna move this over to a new repository all of its own and I'll link to that below as well I recommend you clone that and take a look at it when you've downloaded once you've downloaded or built your own version of 3.0 so that you can play around with it and see how those changes worked out alright so as we move forward I've been working a lot on the updates to the official Godot 3.0 Docs and as I do that and I work on some of the different nodes some of the different functionality those will be the perfect time to incorporate that into this project some of the next steps are going to be to add a UI for upgrades so that we can upgrade our ships any other various performances so we start out with our ship being slow and weak and gradually be able to upgrade it to increase those abilities after that we're gonna be working on the title screen and things like that we're going to start talking about how to export your projects so you can run this on desktop platforms and distribute it online and whatever else we think of feel free to post some suggestions in the comments below if you have some additions you'd like to see and I will see you next time you