welcome back this is part three of our table based game project and in this video we're going to talk about making our movement smoother and how that impacts our wall collisions in our last video we had our player moving around and we had our map loading and our wall is placed where we want to wanted them to be but the way we did our movement was the simplest way possible which is one step at a time every time you press the arrow key the player takes one step to that direction and always is on one square so this is really perfect for if you want to do a turnbased game something like a classic roguelike where when I press write and my character takes a step that's when the enemies will take a step towards me everything will change you know as I take a turn and that's fine if that's the direction you're going in but we want to build something a little bit more action II so we're gonna improve our movement and make us give us a little more freedom to move around in real time without having to take one step at a time okay so the first thing I'm gonna do is I'm gonna go over here and I'm gonna make some player settings in our settings file we're gonna set up player speed and now that can be whatever we want it to be I'm just going to put a number in here sort of at random just to see what it comes out as and as we start playing around with it we'll modify this to be speed we like okay and now over to our sprites so actually in our main we're gonna take out all of this key movement Cubase move it this is what's making us take a step every time we press a key we're gonna get rid of that because what we're gonna do is we're gonna go over to our sprite and I want my sprite to move as long as I have the key held down it's going to move and when I let go it's going to stop okay so let's give our player we're going to use for our position we're going to have a velocity so let's give ourselves a VX and a V why okay and those are both going to be zero to start with and let's go ahead and define what our keys are going to do if we make this in our own little method then it'll make it easier to modify later if we want to change how the keys behave okay so what we're going to do is we're gonna check get keys every frame and it's gonna set VX and V Y to zero unless one of the keys is pressed so we're gonna do sorry key get pressed okay that's going to let us see which keys are currently held down and what we're gonna do is we're going to say if it's okay left and here's where we can go ahead and be friendly to those who like the WASD keys we'll make it work with left or a so you press left or a then then your VX is going to be equal to negative player speed right we're going to the to the left that means needs to be a negative number and then we're gonna say L if and I'm just going to go ahead and copy and paste to make this a little quicker and then we will duplicate that two more times okay so if we press write or D then our VX is going to be our player speed and if we pray up or W then rvy it's going to be negative player speed and if we press down or s then we get our V Y will be a positive of our player speed all right let's get rid of well I'm not gonna get rid of it but we're going to change this def move and the collide with walls those are going to have to change for right now and our update lets you do get keys and our rectangles x and y are going to be equal to our games are self dot VX looks light plus equals times the time step of the game remember over here in our game we are in our update all right sorry I main loop we are getting the Delta T of the previous frame so that we will be sure to move at a consistent speed not based on our frame rate independent of our frame rate there's if you're unclear on how that works I have a little video explaining that which I'll link to below and you can review how the frame independent movement works and then we're gonna make these B this is the X and the y that we're changing here not the rectangle because this number is going to be a fraction because we're multiplying by some decimal and so we're going to be moving at a value that is not necessarily an integer and rectangles they got to be integers so we will be losing information if we add that we're going to keep these to be our position and then we can just set our rectangle and now which part of our rectangle we use that's another option we can talk about once we get this all completed and have some graphics and talk about how we want our character to look and interact with the walls and and all that kind of stuff so we'll go over to our mean and run this and now we should see that we can move in the four directions not particularly fast because we put a hundred here that's a hundred pixels per second and since our screen is a thousand across that means it takes ten seconds to cross the screen which if you noticed how fast our guy was moving that's probably about right it's taking about ten seconds to run across the screen which is a little bit too slow so let's increase that speed a little bit let's try five hundred yeah whoa that's super fast okay that might be a little too fast so we'll go over here and we'll split the difference and we'll try three hundred yeah okay that's comfortable at least for now so now we need to make our sprite collide with the walls and you might have noticed which I just did we're not spawning in the right spot which is because we're telling it what row and column to spawn in from our map and in our sprite we just need to make that convert that to the X&Y which is x tile size okay all right so we spawn where we're supposed to spawn now I want to be able to collide with the walls now there's a few different ways we can do this it's also going to make a difference whether we decided we want to allow diagonal movement or not right now we can only move in for two affections we might want to allow diagonal diagonal is pretty easy to add in fact we can just go over here toward get keys and we can change those elif's to ifs and that's really all you have to do except for the fact that we need to change a little bit so that our diagonals aren't faster than our horizontal and vertical right the diagonal problem which I've talked about before and even have a little video on which you can see below as well so real quick we will say if oops left out my zero there so if if both VX and V Y are not 0 then we need to take VX and V Y and multiply them by 707 one which is the square root of 2 I'm sorry 1 over the square root of 2 which is explained in that video it comes from the Pythagorean theorem ok so we are now moving diagonally and we need to talk about clogging with the walls now what we could do is how we did it last time was if we're moving you know any frame where we try to move we're gonna check to see if we collide with a wall if we collide with a wall then we don't let the sprite make that move okay and we could do that so let's try that right here we move ourselves so let's just do a collision so and for this we can use the sprite collide any command the sprite collide any is a bit faster it checks between a sprite and a group which would be gamed walls and it just tells you it just gives you a true or false if this sprite hit anything in this group it doesn't tell you which one it hit but we don't care if we hit a wall we can't move so that means we need to basically undo this movement so if we put that we can just put right so we undo the movement we move back the same amount of pixels we moved forward and what that's gonna do is a couple of things one is it's not gonna let us go through the walls anymore but you're gonna notice that sometimes like here I'm pushing up I can be against the wall but other times like there I can't get right against the wall always because so sometimes the wall has this weird little space where I can't move any closer like that and the reason for that is let's say when I'm right here and I press left my sprite tries to move 10 pixels but I'm only 4 pixels away from the wall so it doesn't let me move so I'm not able to move that 4 pixels and what gets worse is when I go diagonally I just stick against the wall now most of the time and again it depends on how you want your movement to work in your game but most of the time if we hit a wall diagonally like this I want to keep sliding downwards right if I'm going diagonally I'll go over here and go diagonally to the down in to the right when I hit that wall at the bottom I would like to keep moving to the right and not have to press again to make it go to the right all right I want to slide along the walls and the only way to do that and we also need and to fix that little gap problem is going to be to make our collisions a little bit more sophisticated and what I mean by that is the sprite collide will tell us that our that our sprite hit a wall sprite and it can even tell us which sprite it hit so it's going to tell us we hit this one here at the end of the wall this bottom one on the wall we hit it but that's true no matter what direction we hit it from right if I'm moving this way I want to stop against the wall there if I'm moving this way I want to stop against the wall there and if I was moving up and so on so the way to solve that is you have to break down your movement into x and y directions and check your collisions twice so we're gonna move our sprite in however many pixels it's supposed to move in X and we're gonna see if we hit a wall if we hit a wall we're gonna stick our selves to the side of it depending on which side we hit and then if we're and then we're going to move our sprite in the ydirection however much it needs to move that way and if we hit a wall we stick against the wall that way and what that'll allow us to do is if I'm moving diagonally when I move in X I'll hit the wall and stop but when I move in why I'm free to keep going so that's gonna let me slide along the wall okay so let's try that out all right so we're gonna throw this away that's not the way we want to do our wall collision and what we're going to do is this x and y are calculating what our new position needs to be so we're gonna move our rectangles we're going to set our rectangles X equal to that equal to that X so that we can check if we need to collide with the walls okay now we're gonna go collide with walls and we're gonna say we're going to collide with walls in the xdirection then we're going to set our rectangles Y where it's supposed to be and we're gonna collide with walls again in the ydirection so two collision checks one for each axis so that means we need to change this collide with walls and you know I'm gonna go ahead and delete this definitely that is out of date and doesn't work right anymore so colliding with the walls and we're just going to put that we need to specify the direction so if if we're checking an ex collision then we need to do this bright collide between ourself and the walls group false because with the walls don't get deleted if we hit something I don't really care how many walls I hit because if I come in right in between two walls and hit them at the same time it's still the same result I need to stop moving in that direction so if I hit something then we have two choices either I hit it from the right side and I need to press up against its right side or I hit it from the left side and I need to be against its left side so we need to check to see what was our velocity and so I mean VX so if a VX was greater than zero that means our sprite was moving to the right when it collided with the wall so we need to put ourselves against the right edge of the wall so our self dot X is going to be whatever the thing was that we hit dot wrecked left however wide we are so that will put us right against it on its lefthand side because we are moving to the right now in the opposite direction if we were if our speed was less than zero then we were moving to the left and we need to hit against the righthand side of the wall block so we're gonna put ourselves against the wrecked up right and regardless of which direction we hit in we're gonna set our VX to zero because we shouldn't move anymore we ran into a wall and we'll put our rectangle at that new position we decided we should be at and we can go over to our game and even try it out our ex collisions should work our why collisions are not going to work but you can see I can slide along that y is not going to work because we need to do the same process for y so I'm just going to actually take this whole thing and I'm going to duplicate it it's almost the same we got some indenting Auto indenting happening to change that setting it's almost the same thing what's going to change is when we move in the Y we're going to check the collision and then we're going to check if our V Y was greater or less than zero right if are a few Y was greater than zero we were moving down so that means we hit the top of the block so we need to be at the top whatever our height is and if we were moving up we need to be at the bottom and we set our V Y to zero and we set our rectangles Y and now we have both X's working and I should be able to run around and I can slide along the blocks no problem no getting stuck right I get to slide along it diagonally and everything looks good okay that video went a little bit long hopefully it made sense and you have your player moving around the way you want them to move in your map that you built and in the next video we'll talk a little bit more about wrapping up our movement and then talk about a little bit more about what kind of game we might make if you have some guesses post them in the comments below maybe we can see who's closest to guessing the right direction that I'm thinking of taking this project in as always thank you so much for watching please press that like button below and subscribe if you haven't already so that you'll get the next video when it comes out very soon see you next time you