okay welcome back to Godot 101 this is part three where we're going to continue talking about scripting and how you can use scripts to make your nodes behave the way you want if you haven't watched the previous videos please do go back and start there because we cover a lot of the basic concepts in those and I don't want you to get lost all right so let's get started all right when we left off we had our sprite animating by moving across the screen and spinning but it just goes off the edge when it reaches the edge we want to make it out so we need to detect when we've reached the edges of the screen and reverse the horizontal or vertical component of the velocity when we do so so we're going to go back over to our script here and in our script write that GD script that's the one that's attached to down here attached to the sprite node so in the script we need to know what screen sizes and the screen size is something you set over here in the project settings so if you click on scene project settings there's all sorts of information in here and under display you have your width and height of your game screen and it's set up right now for me to 1024 by 600 but I can change that and it'll change how big the game window is so I'm going to I'm going to keep that for now but I want my code to be able to know that and know how big the screen size is so I'm going to make a new I'm going to clear a new variable called screen size and in the ready when that gets launched to me to get rid of this print here I want to get that screen size and so the command to get that is get viewport wrecked see the autosuggest finding it dot size so if you ever need to know what a function does in judo you can highlight it like this and if you click on help contextual help shift f1 is the shortcut we'll go and look up at function you got to remove the parentheses there we go and you can go and see that it's going to give you the viewports boundaries as a wreck to then erect to is an object that describes the rectangular bounding box and has all these properties including a position a size and and and the size is a vector so it's going to have a width nice there's two values okay so that's what we're that's what we're going for here so now we'll have this screen size variable we'll have a width of 1024 and a height of 600 and iris we're going to need to detect when we reach those extents whether the position has reached at so to make things a little easier to track we're going to have a position variable as well okay and so what I'm going to do with that position is at the beginning here I'm going to set position equal to screen size divided by 2 so that will divide both of them the with the night by 2 so it's going to make our sprite start at the center of the screen no matter what size the screen is our position is gonna be set to the center of it and then what we want to do is we just want to set our position to that variable and that variable will change by adding lots of these time cells okay so all that's going to change so far is that we're just going to start at the center and still spin off okay so what we can do here is we can just say if the position X is greater than or equal to screen size width for the position X is less than or equal to 0 then we're going to take the velocity X and we're going to multiply by negative 1 and then we're going to do the same thing with the y I will just simply take this and change these two wives and this is going to be hight velocity what now when we run it we're going to see the sprite jump off the wall but one problem we still have is it's going to go you know it's going halfway off the wall first and that's because in our sprite settings see where this button here marked checked force entered that means that the position property is linked to the center of the sprite okay if we were to uncheck that collectible 2d view here then see it shift like that the anchor point is here so we'd be using that centered is fine but we want to bounce when the edges hit so we need to bounce before the center hits the wall we need to know how big our sprite is and so we can do that in our script as well with a variable I'm going to call this the extents that's we this is going to be the half of the width of the sprite and half of the height of the sprite it's going to be of another vector too cause I only care about half the width and half the height and how far the center is from the edge so the extent is going to be get texture dot get size divided by two and these are both functions that the sprite node has in it and so for example if we go to the textual help again right there's lots of places where you can use get texture but the sprite that gets texture is one we care about gives you back the texture and it gives you back a texture object next your object has get size and get size gives us back a vector to my a twodimensional vector and then I'm going to divide it by two so I only really care about height this texture that we're using is a 64 by 64 icon so our extents are going to be 32 by 32 so now down here we can bounce we're going to have to split this up now and do the floor walls separately so starting with we'll start with this one so if we reach screen size dot with extent that width then we're going to bounce change the velocity multiplied by negative one okay and to avoid getting stuck on the wall in the case where you move you know a little bit past the edge because of rounding errors or infraction we also want to make sure we put the edge against yet so we're going to say position X equals this value and we do the same thing here with less than instead of less than 0 is less than X 10.6 and then we also set paws X to extend stuff ok and then we have to do the same thing again with the Y okay so to try this out let's increase our speed a bit because I want to be a little faster so I can see it hit the edges now we should be staying in the screen nice so the last thing I want to do here is I want to randomize this velocity instead of having it be always the same so we could do that here by setting in the ready our velocity to a random value all right and so there's a lot of ways we could do this we could take two random numbers but what I'm going to do is I'm going to pick a speed and that speed is going to be a R and range so you pick a random number to R and range and then you see it's going to give you back a floatingpoint number between any two floating point numbers so let's just say between 100 and 300 comma 0 so we're picking a random value in the positive xdirection so a random speed straight to the right and I'm just going to rotate that so with a vector you can rotate it by picking a angle let's go look at it sector 2 dot rotated so what rotated does is it wants a angle in radians we need to pick a random number in radians let me say R and range from 0 to 2 times pi PI is a constant is built into it oh so we don't have to tell it what it is all right so I pick a random value between 0 and 2pi which is 360 degrees so our velocity will be in any random direction and so every time we play it it's going to fly off in a different way but wait that didn't look different did it no it's not and the reason is that the in gadot the R and range functions will produce the same values every time which doesn't sound like very good randomization but it is useful for testing sometimes you want to test things and get the same results every time if you really if you want the random numbers to be different every time you can call randomized randomized basically seed the random number generator is a unpredictable value so you don't know what your sequence of random numbers is going to be so like that time it went up that time it went to the left ok that's ok so now we're getting random directions and I'm going to add one more in because I'm going to say spin is going to be a random R and range from negative pi to pi and that is just going to be skin is going to be how fast we rotate so that way I can get some different looking sense and spinning to the right that time this climate is let's see this time the spin is very small barely turning close to zero this one is a little bit higher okay so that'll do it for this time around and in the next video we're going to talk about how we can take this single sprite scene that we've made and use it to spawn multiple sprites using something called instancing I hope you're enjoying following along if you are please try and make sure you're always typing the code yourself even if you're following along if you're doing the work yourself it definitely helps everything get locked into your brain and helps you understand what's happening but if you do need the code I've linked to the code for this step in the comments below and you can download the Godot project and I will see you in the next video thanks for watching