welcome back to game development with pygame we're continuing to work on our shmup game and in this video we're going to improve our collisions so that they feel a little bit better when you're playing so in the last video we added graphics to our games that we have a nice looking ship and we have a nice looking meteor and so on but our problem is that and i'll find a slow one so you can see it let's get a slow one to come at me there i see a slow one on the right hand side so watch what happens when this slow meteor gets close to my ship do you see that so it collided or told me i was dead even though it didn't really look like those two things touched so what's going on so let's look at this diagram when we do collisions normally we're using rectangles the technical term for that is an axis aligned bounding box so each image has a rectangle that outlines the space that it fills and it's a collision if those two triangles overlap so in this picture the meteor counts as hitting the ship even though to your eye if you can't see those rectangles it looks like the meteor is still pretty far away from the ship so that tends to make players frustrated um now one solution you can do is you can make the collisions use a smaller rectangle right so you have it you draw you figure out a smaller rectangle that would cover part of the spaceship and you use that okay another option and it sort of depends on the shape of your of your object is you can use a circular bounding box now this example i've drawn over here the circle works really well for the meteor right it almost exactly outlines it and depending on what size we pick for the circle we can make it so that they get pretty close right the very tips of the wings of the spaceship and the nose of the spaceship are sticking out but in general everything moves fast enough that you're not going to see the difference of those few pixels and in fact it will make the game seem really more fun if the player sees the meteor go super close to them and thinks oh it's going to hit my wing oh somehow i dodged it i must be i must be really really good right it gives them a good feeling as opposed to what happened over there on the left which is i thought i missed it and it still killed me now i'm upset now there are tradeoffs for which of these kind of systems you use the access line bounding box is the fastest meaning the computer can calculate whether two rectangles overlap really really fast so if you have lots and lots of them happening it's never going to slow you down it can do it really fast the circular bounding box is not that much slower it's a little bit slower what the computer has to figure out is if the radius of the circle of one and the radius of the circle the other you know what those are and and are they touching you know so are the edges of those circles touching and for in for our cases um it's gonna be fine we're not gonna have thousands and thousands of things on the screen at the time at a time we're gonna have dozens so it won't really slow us down very much one other option that that we're not going to do but i'll go ahead and tell you about it is something called pixel perfect collision and that means that the computer looks at the pixels of the meteor and the pixels of the ship and checks every pixel to see did any of those pixels touch now that absolutely perfectly tells you whether the shapes touched but it also is very expensive in time for the computer to do and the amount of accuracy you get or the the effect you get is not really that much better than the circular than the circular bounding box while making the computer a lot slower or the game a lot slower so rather than do that there's most cases programmers will choose one of these because it's very rare that you need to do pixel perfect collision so we're not going to do that in ours either so pie game makes it pretty easy to do the different kinds of collisions and so we want to do the circular style of collision so that means that we want to set one more thing on our player sprite and our meteor sprite and that is you need to give it a radius so as long as the sprite has a property called radius then it will know how big of a circle to look at but then the question is well how big a radius should we do i know my my spaceship is 50 pixels wide and only 38 pixels tall so how do i decide how big to make it well there's a little bit of experimentation you can do but let's say we decided to make it half so the radius is 25 so that means the circle will be 50 pixels across well you can do this this little command is pygame.draw.circle is going to draw a circle so we're going to draw a circle on top of our spaceship just so that we can see how big our radius is okay so we're going to draw it on top of the image in red and we're going to put the center of the circle at the center of the sprite and we're going to draw the circle's radius is going to be the radius okay and now we can see what that looks like and we can adjust this value until we have it the way we like it okay so let's do that on the meteor as well while we're at it and then we'll make sure that we have everything right okay so let's set the radius on the meteor and another way you can do this is if you're using a different size meteor for example you might be using a different size one than me so instead we could make the radius be calculated by the size so if we say what's the rect what's the width of the rectangle okay and then we just divide that by two and then it will be the size of the rectangle i mean the size of the of the image and then let's do the same thing again where we're going to take this uh circle drawing command i'm going to copy that and paste it here so that both of my shapes will have big ugly red circles drawn on top of them so i can see the radius of their circles so let's see what that looks like when we run it okay so now you can see on the meteors there's not really any meteor corners sticking outside of those much a little bit on the right hand side but on the player you can see how it see how it's chopped off at the top and the bottom because the circle is bigger than the size of the ship and if we wanted to look more like that diagram we made we probably want to make the radius a little bit smaller so i'm going to go back to the ship here and i'm going to try making the radius about 21 and then actually let's try 20 and see what that looks like and maybe we'll make it a little bit bigger okay so with the radius of 20 now you can see the edges of the wings sticking out there and that's fine again you're not going to notice that much when we do the collisions that those stick out and it's going to give it that fun close action feel so that's probably a pretty good size the meteors i think need to be a little smaller too because we want a little bit of wiggle room on those too so instead of being the width i'm going to multiply the width times about 0.9 so we're going to just make it 90 percent of the width which makes it a little bit smaller let's see how that looks yeah see how you can see a little bit of the corners of the meteor sticking out that's totally fine might even be okay with 85 let's try and see so 85 percent would be 0.85 yeah that's gonna be fine there's a little extra sticking out on the side because it's an irregular shape but again you might be using a different meteor and it's a slightly different shape too so all together this is going to be fine and we'll work with the changes we make down the road so now that we have the radius set we're able to do the circular collision which means we just have to go down here to our sprite collide command where we're checking to see if the player hit the mob and by default that's using the rectangles so instead we just need to add in here as the last option pygame dot sprite dot collide underscore circle so instead of so this is specifying what type of collision we want to use and if you leave it blank it uses rectangle so if you add in collide circle here it will use circle if you were to be doing something like that perfect pixel collision i was talking about this is where you would put that as well although there's a lot of extra stuff you have to do to make that work so now we should be colliding only if the circles touch now if you're very careful you could probably get yeah see how that passed right through my wing but if i run straight into it the circles touched we are good now let's get rid of those ugly red circles i'm just going to comment these lines out they're useful to sort of keep there in case you ever want to adjust things change the way you're doing the circle you can uncomment that and see the circle again and make everything just the way you want it so now we are good and we have cl circle collisions see how the it looked like the meteor actually hit my ship when i did that that's going to look great when we start to have explosions now we don't need to do anything really with the bullet the bullet since it's long and narrow is working fine with a rectangle around it a circle would actually make the bullet collisions work less effectively so that would be not as good so we're not going to change the way the bullets and the mobs collide and in fact since the bullets move faster too it's even less likely that you'll notice anything unusual about the rectangles so we're just fine there you