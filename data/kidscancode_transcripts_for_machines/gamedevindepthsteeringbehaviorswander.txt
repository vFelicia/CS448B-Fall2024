okay welcome back for another game development indepth topic we're gonna be talking about steering behaviors again this is part two we're going to talk about the wander behavior how you can make an agent a sprite a mob wander around in a somewhat random fashion if you haven't watched part 1 of the series before please do that first I'll put a link below here because we're gonna build on some of the stuff that we explained in the first video and it will definitely be less confusing if you do that so we're starting again with our standard sprite that just spawns and moves in a straight line in a random direction and what I want this bright to do now is instead of seeking the mouse like we did in the previous video I want it to just wander randomly around the screen and so one way we could do that is we could take our seek function that we described in the last video and we could just pick a random target so we could add to our sprite here that we're gonna pick a random target and that target needs to be somewhere a random spot on the screen so maybe between the width and the Y will be zero and height zero I highlight so we're gonna pick a random spot on the screen to be our target and then we're just going to have that target move around right so we're going to jump around to different locations but I don't want to do it every frame because that's going to be too fast so we're gonna keep track of when the last time we switch to the target was and just measure the time to the next one so let's make our function called wander and so what this is going to do is we're going to check what time it is and if it's been long enough let's do we'll do half a second okay then last target equals now and we pick another new random target so I'll just grab this alright and we'll duplicate that there and then since we have a new target we can just seek that target all right so now we're gonna use our seek function we made before and instead of sneaking the mouse we're gonna sneak that random target that we just spawned on the screen and so in our update all we have to do is just set acceleration to wander and then we'll wonder in a random direction okay now to try this out we're going to self dot seek we're just going to run this program it's going to write and we're gonna pick every 500 milliseconds we're gonna pick a new target and seek towards that target now I have put in the draw vectors again so that we can see what's going on when we run it so there is our wandering sprite and if I turn on the vectors you can see that well scion dot is our random spots that we're picking and we just steer towards it whenever it changes and that's sine but it does look kind of robotic and artificial there's a lot of really sudden Direction changes and doesn't really look like a person wandering around and so we could look at a better way of doing the wandering behavior you know this is a much more sophisticated way of doing it and it may seem more complicated at first but it's actually really simple to implement and it gives you a lot of flexibility in how you can tune your wandering behavior so let's look at a diagram so just to refresh your memory when we did our seek behavior we had our we had our sprites velocity and then we calculated what our desired velocity was and then the steering force is some vector pushing us in that direction well for the wondering what we want to do is we want to imagine a circle imagine a circle that's some distance ahead of the player in the direction of their velocity and then we pick a random spot on the circumference of that circle and that becomes our target so our desired vector points towards that and so our steering force is going to pull us towards that desired target and if we change this random spot on the circle every frame of the animation we just keep picking a new one every time then sometimes the target will be you know the difference between the velocity and the desired will be big sometimes it will be small so we'll make small turns sometimes big turns sometimes and what this allows you to do is tune it by setting these three variables you can change how big you decide to make the circle you can change how far ahead that circle is and then of course just like this were you can adjust the steering force to say how fast the sprite will adjust its velocity okay so let's look at how we're going to implement that so I'm going to define I'm going to call this wander improved so that we can keep the old one there so you can compare the two when you want to okay so first we need to pick where our circle position is going to be okay and actually let's go up here and set some of these variables so we're going to have our we would call it the wander ring we're going to set the distance and let's set that to 200 pixels ahead of the player and then we're going to have the wander ring radius and this is going to be how big that ring is let's set that to 50 okay so now we can go down here and we can say that our circle position where do we want to go our circle position is going to be whatever our player's position is plus our velocity which we're going to normalize so that it's a length of 1 times the wandering distance so the centre of the circle is going to be some distance ahead of our player that we set in the wandering distance and then our target is going to be that position plus some vector pointing from the center of the circle to its to its edge right so that means we want it to be the length of this to be the radius and we're going to just rotate it in a random direction by a random angle all right so we know that this vector will be a length the length will be equal to the radius of the circle that we chose and it will just be pointing in a random direction and that's going to be our target on the edge of the circle and I'm going to just say find out the seek self dot seek that target okay that's all we need to do but just for the purposes of drawing the vector I'm gonna call this the displacement okay just so that we have something to be able to draw on the screen so we don't need this at all for this to work okay but I am going to go down here and I'm going to replace the drawing of that target circle with we're gonna draw the the actual ring and the displacement line so we can see what it looks like so now we just need to say here and so doing wander to wander improved now when we run you can see we're not moving around so randomly right we're only wandering a little bit and if we turn on vectors you can see there's the ring being drawn that distance ahead of the player and so the desired velocity is just fluctuating around by some plus or minus amount based on how ring how big that ring is and that looks pretty nice and so this is only wandering a little bit right and we can also adjust some of these variables like for example if I wanted my steering force to be bigger and I can also increase the radius of the ring then we have a bigger circle that we're going to look at and now the wandering is going to look like this so you see we have a much bigger circle so those new just the new desired vectors can be spread out much further and then we also have the ring being much closer relative to its size and so we get more we get more turning happening and so depending on what your desired result is how you want this wandering behavior to look you can set those variables differently and you'll get very different results but you'll never get that kind of sudden turn on a dime just reverse and just turn around and go back like the like the mob forgot something that you got when you just picked random targets so that's the wander behavior so hopefully you're starting to see the power of these behaviors you know the seek behavior is a very useful one to use on its own but also we used it to build up our or wandering behavior by by intelligently picking a target and then just using that seek function again and what you'll find as we go into and starts flowing some other behaviors is that it's while these behaviors are strong on them on their own the real power comes when you start combining them together and and we'll explore that as well how you can get some really amazing intelligent seeming behavior out of your your AI agents just by combining simple little things like this I mean look at these functions there's four lines of code and there's five lines of code here they're not very complicated but they give you really nice complicated seeming effects all right thanks for watching please hit like on the video below and subscribe for the next one and I will see you in part 3 you