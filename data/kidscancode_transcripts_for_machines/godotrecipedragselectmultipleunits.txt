welcome back to another Godot recipe this time we're going to talk about how to select multiple units on the screen in the style of an RTS or real time strategy game alright let's get started so let's assume we've got our RTS unit here that's set up so that if it's selected when you click it will move to the place you click now click to move is pretty easy to implement and I've talked about that in another recipe so I'm not going to say anything about that here we're not gonna worry about how this unit works let's just assume you already have a unit that can move to a target if it's given a target and what we want to talk about is how we deal with multiple units like this ok so I've created a world scene have instanced four units in here and the way we want this input to work is I want to be able to draw a rectangle around some number of units and whichever ones I have in this box when I release are going to be the ones that I select and then when I click the selected units will move so let's begin with a script attached to the world node and a few variables we're going to need we're going to need a variable that keeps track of whether we are currently dragging the mouse to create that box or not we're gonna have a list or a an array to contain all of the selected units whichever units I've selected when I release the mouse and then we're gonna have a vector to keep track of where we started dragging the drags start and finally we need a rectangle because when we let go of the mouse and we're ready to select the units we need to detect which units are inside of that rectangle and so that means we're going to need a rectangle shape 2d which is a collision shape which knows how to detect kinematic bodies which is what my units are so we'll begin with the drawing of the box somebody is the unhandled input callback here which means that this will be detecting mouse clicks that haven't already been consumed by the UI whatever UI you might have in your game is going to consume those inputs first and so what we want to look for is if the event is input mouse button and the events button index is equal to button left so if I click the left mouse button and if that happened then either right this event is a mouse click or a mouse release right it's either a downer and up event so if the event was the pressed event then we want to start dragging but only if we don't really have some selected units so I'm going to say if selected dot size is equal to zero then we will start dragging so I'm gonna set dragging equal to true and I'm gonna set the drag start to the event dot position now if the event wasn't pressed and I'm dragging so I let go of the mouse when I was dragging said I'm gonna set dragging to false so that's all we need to do for our click and drag just to highlight a rectangle but it won't do us much good if we can't actually see the rectangle that we're drawing so what we're also gonna do is we're gonna say if we get an input mouse motion and we're dragging then we're gonna call update which is going to call our draw method and in the draw method is we're gonna draw our rectangle but we're also going to put in if dragging in here because two reasons one we might want to draw some other things and second is that when the node enters the tree draw gets called so if I just draw a rectangle in here we'll start the game out with a rectangle already drawn on the screen based on wherever the mouse started and that's not going to look good so now we're going to draw a rectangle so we're gonna call draw rect and pass it a rectangle the rectangle that we're going to use starts at the drag start and it ends at the global mouth position minus the drag start so the difference is going to be the size of the rectangle and then we'll do this on the next line the color we're just going to use a gray and then I'm gonna put false here because I don't want the rectangle to be filled I want it to be just an outline of a rectangle but let's go ahead and give this a shot and make sure we see what we want to see okay so you can see when I let go of the mouse I'm not the the rectangle staying there right so we also want to update when we let go of the mouse so we should update here as well and now I can draw and when I let go the Box disappears so now we can find out what units our rectangle collided with and to do that we're going to use the physics 2d direct space state and this is an object that you can query in Godot to get information from the physics 2d server and the specifically the function that we want is this intersect shape intersects shape is going to return an array of objects or an array of dictionaries identifying the objects that it collided with all we need to do is give it some shape query parameters which look like this and have all sorts of info about how we want to perform the collision and really all we need for ours here is we need to set the shape to our rectangle and we need to set the transform to specify the location of the rectangle all right so over here in the code what we're going to do is we're going to record our drag end we know where where we let go and that'll let us set the size of our collision shape that's the Select rect extends and that's a drag and drag start and because in collision shapes the extents are measured from the center we need to divide by two okay and then we're ready to do our query so we'll start by getting the space let me do that by getting the world 2d direct space state and then our query that we need to make is a physics 2d shape query parameters new we call the set shape to put our select rect in there and then we need to set the transform by constructing a transform 2d with a rotation of 0 and the position will be dragged End + drag start divided by 2 which gives us the center of our drag rectangle so we want to put the shape at the center of the rectangle that we dragged and then we just do our query so we'll set our selected variable remember it's going to return an array to space intersect shape query and now we have array of dictionaries let's print selected so we can see what that looks like so I'll run the scene and I'm going to draw the box over it and let go and now down here in our output you can see what it printed which was a bunch of dictionaries right here we go the first dictionary is that one so it has a Collider and then some metadata but the collider is the key we want for each dictionary it identifies the kinematic body that's our unit and the first thing we want to do when we've selected a bunch of shapes is we want to set them all to be to indicate they're they're selected right the units have a selected property that if it's true we'll draw a highlight around them so let's just loop through that selected array and each item Collider selected equals true and let's give that a try here real quick so now when I draw the box around it they turn highlighted okay we're almost done now we just need to be able to give them all a command to move so up here when we clicked the mouse button down we checked if we didn't have anything selected we would drag so all our turn our alternative here is if we do have something selected and if we do we're gonna give them each in order to move so we'll loop through again that selected array and set item dot Collider target equal to our event position the place we clicked and then we also need to remember to set our selected property to false so they won't be highlighted anymore and then since we since we clicked and gave them all in order let's clear our selected array so we don't have them selected anymore depending on how you're doing your game you want to might want to keep those units selected so you can change this you could use a different maybe rightclick makes them move you can change this around but I'm just trying to keep it simple for this demonstration so there we go if I select them and then click they're all going to move to the spot I specified let's just grab a couple of them all right so you can select as many as you need and they will go where you tell them to go so hopefully this helps you if you're making something like an RTS and you need to know how to select multiple units thanks for watching and I'll see you in a future video this tutorial is part of my nugudo recipes website the goal is to collect all the best tips and lessons to help make you a better at Godot developer if you like this video I hope you'll go and check out the site and make sure to hit subscribe so you'll be notified whenever I release new videos thanks for watching