welcome this is a nugudo game development series where we're making a small mobile game from end to end I'm calling the game circle jump for now we'll see if the name changes by the time we finish it up and put it up on the Play Store but regardless we can go ahead and get started right now in this series we're gonna be making a small mobile game demonstrating some of the things you need to do for that how to export it and so on here I'm showing you a prototype that I made up when I was testing the idea out and so the idea is when you play you start by being attached to these circles and when you tap the screen you fly out and you try and like jump on the next one and if you miss you die if you want to follow along go ahead and download the assets from the link below in the description you can also find a text version of this tutorial there and create yourself a new Godot project and we'll get started so let's start with our project settings we're gonna go to the window settings and we want to set the width and height I'm going to use 480 by 854 which is maybe a cellphone proportion obviously there's lots of phone screens out there so we're going to need to be able to scale we're going to set the orientation to portrait so it'll know to be in that direction when we're on a mobile device and the stretch mode I'm gonna set to 2d with an aspect keep and we'll see how that comes into play later it doesn't really have a lot of impact right now but the other thing we want to do is in the pointing section we want to make sure we check emulate touch from Mouse our game is going to be controlled by touching on the screen so this way when we're playing on the PC or in the editor we can click the mouse and that'll send a touch event to the game so we can process it the same way we don't have to write different code for a mouse in touch the first game object we're going to start with is the player the jumper the thing that'll go from circle to circle and we're gonna use an area 2d for this we just need to detect when it runs into a circle and we're going to add a sprite to that we're gonna add a collision shape 2d to that and we're also going to add a visibility notifier because that'll do is let us know when it X is the screen because you missed all right that'll be the GAMEOVER trigger now in the assets folder we've got some images I'm gonna use jumper dot PNG so throw that into the sprite and it's drawn pointing up so I'm gonna rotate the sprite by 90 degrees so that my zero angle will match up before I save it let's name this jumper and I'm gonna put it in the objects folder okay now you'll notice that the image is just a flat white and this is true of all the other images as well we're going to use a shader to set the colors so that we can have color schemes and changing colors and things like that very easily by just replacing the white pixels with a whatever color we want so we'll come back to that in a few but let's do collision shape actually since it's a triangle I'm gonna change this I'm going to use a collision polygon be a little easier to draw because I can just click click click and click and get a triangular collision shape all right so now we've got our player pretty much configured let's add a script to it and we'll start adding some code we're gonna have a velocity that's gonna be how fast it moves when you're moving in between circles I'm gonna put just a 100 here for testing at the beginning this isn't gonna matter later but for right now and then the jump speed is gonna be what we how fast we go when we hit the jump button and then target equals no target is going to be the circle that we're attached to okay we want to jump when we touch the screen so we're gonna capture unhandled into it and if we have a target we can only jump when we're on a circle and if the event is input event screen touch and event dot pressed because we only care about the touch not the release if it is then we'll call our jump method and now our jump method is going to set our target to know we've left the circle we're no longer attached to one and let's set our velocity equal to the transform X which is the direction that we're pointing in time's the jump speed and then the other thing we need to do is we need to detect when we contact a circle so we're going to connect the area entered signal connect that up and now when we enter an area the target will become that area and the velocity will become zero because we are not going to be moving on our own anymore and that should do it for the code one more thing when we're on the circle we want to be rotating so I'm gonna add in our process that if we have a target then our transform should be set equal to the circles rotating position the circles gonna have an orbit position on it so the targets four bit position dot global transform so we want to be matching that otherwise if we are not attached to a circle then we have a velocity so we should velocity times Delta all right so now let's add that color shader to the sprite so that we can affect its color I hide the collision shape so we can see it and so what we're going to do is we're going to add a material onto our sprite a new shader material we click on that expands the panel and we add a new shader we click on that and now we've got our empty shader editor and the shader code here is gonna be pretty pretty short pretty straightforward we always have to start with what declaring what type of shader it is so this is a canvas item that's for 2d shaders and we want to pass in a color and you do that by declaring a uniform so this is going to be a vector I'll just name it color and we want it to hint with a color chooser and what that will do is you see over here shader pram just appeared and now I have a color chooser where I can set the value of that variable and so now we want to take that value and add it to our fragment shader fragment shader is going to run on every pixel in the texture so we want to set its color RGB equal to the color RGB so I take the color we've chosen but if we just did that you can see it just updated it changes the entire sprites texture to that color we want to preserve the transparency so the a of the color the Alpha value should be pulled from the texture that's passed in UV which is the coordinates dot a and now we'll have a nice change to our texture and we can go in here and we can change whatever color we want our triangle to be now this is a useful shader that we're going to want to reuse on our other objects so over here in the shader dropdown let's choose save and we'll put that in the objects folder and we'll call this color shader and that way we can reuse that easily without having to type it back in all right now let's start making our circle we're also going to use an area 2d for this it's gonna be our circle object we're gonna add a sprite we're going to add a collision shape we're going to also add a node 2d and this node 2d is going to be our pivot for the rotation and underneath it is going to be our this is the orbit position and so let's see how that works so down here I'm going to use the circle shape here there's our circle and the collision shape is going to be a circular collision shape we my match now doesn't really matter at this point because we ROCK actually encode going to allow this circle to be scaled so we're gonna scale the texture and make the collision shape you know the right size to match so that doesn't really matter right now and then our pivot is there in our orbit position also is going to be set by code based on how big the circle is so right now just as an example if the position was 100 actually for this size probably 150 so if that's the orbit position now when the pivot rotates you know the orbit position just circles around the edge and that's going to be where our player jumper gets stuck while it's on the circle is just going to constantly rotate around ok let's save this in the objects folder as well or two objects that we have and we're going to add the shader to our sprite so our sprite needs a material shader material as well and we will just say load and choose that color shader that we picked and now in the shader program we can pick whatever color we want for our circle ok let's add our script to this circle and what we want the circle to do is I'm going to make a variable for orbit position it's more convenient than typing in that long name and we're also going to have a radius this is how big we want the circle to be and we're also going to have a rotation speed which for now we will set to PI and this is in radians of course and in ready I'm going to call our init function so we can test we'll get rid of this part later so when we initialize the circle we can pass it a radius optionally if we don't we'll use the already declared radius and so we use that we use that to set our radius and now that we have that we can take our collision shape to these shape and duplicate it right because we don't want to set the collision size on every circle on the screen at the same time right only we want it to be unique to each one this is equivalent to choosing make unique in the inspector and then we're gonna set that collision shapes radius equal to the radius we chose now we need to scale the sprite as well so right now the image we can get the image size from the sprite its size I'm just gonna use dot X its square so it doesn't really matter and divided by two that's half the size and then we'll set the sprites scale by using 1 1 is the unscaled value and we want to just scale it by the ratio of radius to image size and then the last thing we need to do is we need to set the orbit position X equal to position X equal to the radius plus some margin I'm going to just use 25 for right now we're gonna see how that works and then we'll tweak that and the other only other thing that the circle needs to do is it needs to rotate so in the process function we're going to tell the pivot rotation to increase by rotation speed times Delta so it will be rotating so that whenever the player gets attached it will rotate with it all right so let's test this out real quick we'll turn on visible collision shapes so we can make sure our shape is being set and there's the size of our circle and our collision shape looks like it matches we can just test this out real quick by trying a different number scale it to 5 and you can see the collision shapes scaled as well if we went really small I'm gonna have a tiny little circle up here in the corner okay so that's gonna be it for our circle and now we're ready to try it out by making a main scene that's going to combine the two so I'm just gonna use a plane node for this it just needs to be a container it's gonna hold everything else and I want this in the main folder and let's imp let's instance a jumper and let's instance a circle now let's I'm still on rotate mode all right let's put the circle over here and put the jumper right here and when we run it we should see our jumper get onto the circle and when we click the screen we fly off perfect that's where we want to be for our first part we have the main components put together and in the next part we can start making multiple circles and doing the jumping from circle to circle and so on thanks for watching and I'll see you next time you