this is a quick video on a very common question I see in the forums or on discord and that is how do you detect which tile you hit when you collide with otama alright so I've got a pretty common setup here where we have a tile map and a kinematic character that can move and jump and we wanted to detect what tile were colliding with when we jump around or run into walls and so we can see here that the player is in tile number 9 comma 4 that's this tile right here but I want to detect what how it collided with which is going to be this one 9 5 when I jump and in when I run into a wall and I'm in position 3 5 I wanted to detect that I ran into 2 5 now where people run into trouble is when you are using a tile map and you get a collision it's just going to say you collided with the tile map and so you're going to have to use your character's position and the normal of the tile map where you collided with it to figure out what tile you've corrupt collided with so for this setup in my character script I'm going to have the player emit when it has a collision the collision object and this is a kinematic collision 2d and the kinematic collision 2d contains information about what the object you collided with was and the normal where you collided with it and so that's going to be the information we need so we admit that kinematic collision so that nothing in my player really ties in or even knows that there's a table up I'm just going to omit the collision and let the tile map script deal with what happens so let's go over to the tile map script and so I connect that signal and now I'm going to receive that collision and if the thing I collided with it was a tile map then I can figure out where I am and the character's position we can find using world to map so this tells us what tile the player is standing in to find out which time I collided with I want to subtract the normal why am i subtracting the normal that's because when I collide with this tile that normal is pointing up well it's 0 comma negative 1 right it's a vector pointing up so I subtract from this tile subtract that from this tile then I'll be going down and I'll be finding this tile and so we get the tile at that position and if it's greater than zero we're just gonna move down by one tile and that's because my time app just adds a whole bunch of numbered tiles so we have the 15 we're gonna subtract 1 we'll be changing it to number 14 let's see that in action so there we are every time I jump I'm subtracting one from the tile now because we're subtracting the normal that means when I hit a wall the normal will be pointing this way so we will subtract one tile over and you'll see as I run a long as I'm sliding along the ground I'm generating a bunch of collisions and when I hit the wall I do over there as well so this is a really useful trick to detect for example when you jump up and hit a block above you or when you want to have any kind of tiles that react to the player hitting it so that's a kinematic body what if we have a rigid body instead so I've made this ball rigid body object and I've set its collision context reported to one so that will report contacts you have to do that on rigid body and then in its script in the integrate forces callback is where you're going to get a variable containing the current physics state for the current frame and that state is going to tell you how many contacts you have so we're going to loop through those and we're gonna get the object we collided with we're going to get the position where we collided and we're going to get the normal where we collided and we're going to omit that in a signal just like we did with the kinematic collision so let's go over to our main scene and we're going to instance a ball in there and we're going to connect that collided signal and here's what we're going to do with it so we're going to take that position the normal convert that to world 2 map and then do the exact same thing with the tiles that we did when we had a collision with the kinematic character so let's go over here to our 2d mode and let's put the ball somewhere where it'll bounce and now you can see we're reducing the number whenever we collide with one of these tiles so that's it for this quick oneoff demo hopefully this helps you in working with tile collisions in your project please leave your questions comments below suggestions for other quickie videos like this I'd like to do some more of these for some of the common questions that we see in the forums and on the discord thanks for watching you