welcome back to the Godot topdown tank battle game series this is part 9 and this time around we're gonna be adding obstacles and talking about how we can add all these different sandbags and fences and trees and things like that they're gonna be on the level and be obstacles that the player can't pass through and we're gonna try and do it in a smart way that'll make it flexible and easy for us to design our level just the way we want to alright let's get started so I've added a couple of small things that I'll go over really quick before we get into the main part of the video which is I added this machine gun turret all this is is another enemy tank I extended the tank scene and on this gun turret the only difference it has a turret it has a body as a collision shape detect radius all that stuff just like the enemy tank does but we did set the we just make sure we spent to set the speed to zero so it's not gonna be able to move and it's not parented to a path so it doesn't follow a path so it's just gonna sit still but it's still going to turn its turret and track the player when the player comes inside its area and that looks like this so there we go so I also made a smaller enemy bullet so I have two different enemy bullets now a small and a large one so that I can use whichever one I want I think this one looks a little better with the machine gun turret now the other thing that I changed was when the player does run out of health we're going to just restart the scene for right now since we don't have a game over screen or anything like that yet on the players script I'm sorry on the map script I just said that when the player is dead we reload the current scene one small change I needed to make to the tank script for the sorry the enemy tank script for the machine gun turret is I needed to make sure and only check the lookahead ray casts if you're on a parent parent of a path follow 2d that way the machine gun turret that sits still doesn't need to have a you know look ahead raycast on it since it's not moving we don't need to add it but so it won't check it so the main thing I wanted to talk about for this video was adding obstacles to the map and the art pack has all these great obstacles there's Road barriers and hedgehogs and sandbags and trees and barrels and all sorts of different things all of them are different sizes and shapes so they're gonna have different collision areas and they're not all the same size as the tiles of our tile map and that's gonna be so that's gonna be a problem with adding them to a tile map so what we really want to do actually the other problem with adding them into a tile map is I want to be able to you know rotate them and have them point at an angle and if I were using these in a tile map I would only be able to you know put them at 90 degree rotations like that and like that I wouldn't be able to have a you know barrier like that or have a sandbag angle angled like this which if you want to have a row of sandbags kind of protecting something you want to be able to turn them so I don't want to do these obstacles in a tile map but I do want to not have to have you know 30 different objects that I have to place and I want to be able to design my level without a whole lot of effort and so eventually you know that maybe this will grow into more of a level level design tool but we're gonna start by making one collision object that can take on any of these forms so here is my obstacle scene I've created a static body to D with a sprite in a collision shape I called it obstacle and I saved it in an environment folder for later other environment objects we can place in here so I want this two sprite to use the same asset sheet we've been using so we drop that in there we want region to be on and we want to be able to select all these different obstacles you know whichever ones we want which are spread out all over the tile sheet and you could go in here and you could draw you know around each one and get the one you want pixel snap here get the one you want but that's gonna be tedious for to do and very repetitive to do for all these different obstacles I want the yellow barrier and the red barrier I want the different colored trees I want all the different sandbags there's white ones and tan ones there's there are all these barrels there's the hedgehogs there's a metal one there's a lot of obstacles and I don't want to have to go and draw them all out separately so we're gonna take a shortcut so when you download the art pack from Kinney it includes this XML file which has a list inside of it of all of the individual sprites and their texture locations in the sprite sheet so you can go and find a particular one like the sandbag and find the x and y and the width and height of that sprite so you can pull it out of the sprite sheet and that's all fine and good we could use we could parse this information to find the obstacles we want and in fact what I've done is I put this you know I deleted all the ones I don't want and made a made a copy of this XML file that just has the sprites that I want for the obstacles I don't want all the other ones so these are the obstacle sprites but we have a small problem these coordinates will not work anymore because I rotated the sprite sheet back in the first video I talked about how this is the original form of the sprite sheet with all the sprites facing downwards and since we didn't want to have to rotate every sprite when we added it I saved a rotated version of this where I rotated this 90 degrees counterclockwise so everything's pointing to the right and that's the sprite sheet we've been using everywhere but that means that these coordinates no longer work right this brown tree is gonna be down in this corner right instead so we need to so we can't use those coordinates but we can do a little bit of math and have it calculate what the new coordinates would be after rotating 90 degrees and so I made a little tool to do that fortunately I already had a Python script that parses this XML for some other projects that I've worked on so I just used that you can grab this from the project files below so here's how this works if you've never done this kind of calculation before so we take this sprite sheet the original one and this is what we are using so we rotated it 90 degrees counterclockwise so that means this point a that was up here in the corner becomes this point here when it rotated and since we rotate it around the center that means that this offset here from here to here is the same as from here to here so what we need to do is take a which is zero zero right now and re and offset it as a calculation for how far it is from the center so it's actually minus half the width minus half the height and then over here we're going to add half the width and half the height to get back to the center and we'll have the right coordinates for that and the way that works is pretty simple you actually just swap the X and y becomes Y and negative x so if this was let's just call this a thousand by a thousand if this was 500 500 when you rotate it over here it becomes minus 500 positive 500 right and then we swap the width and the height since things that are of the of the sprite itself right because like this sandbag was wider than it is tall but when it comes over here it's now gonna be taller than it is wide so this calculation right here will give us what this point is but then the only thing we have left to do is rectangles in most programs and definitely in Godot we expect the coordinate to represent the topleft corner not the bottomleft corner so we need to also take this and subtract the height of the sprite from it and that'll give us that point there then we'll have that point we'll have the width of the height that's what we need so now we just need to apply that process to every one of these coordinates in the XML file and I'm doing it this way because I already had actually some Python code that parses this XML as it is so and Python is really my preferred language for these quick little oneoff tool scripts and so I used Python to write this so here is the Python file for this so we are going to give it the filename and the size of the sprite sheet and then this enum name I'll explain in a minute we have some code that parses that XML goes through and finds each name and creates a dictionary with that name as the key and the four values of X Y width and height as its as an array of its values and then down here we have a loop that goes through each one of those and applies that transform that we just described and the rest of this is to print out some Gd script code so that we can copy and paste this into our obstacle script so it's going to create an enum and it's going to print out all of the values and let's look at what it looks like when it runs so we have an enum that is a list of all of the names and then we have a dictionary called regions that has each one of those enum values as the key and the new rectangle that we calculated as its value and you can just copy and paste that right into your obstacle script like this so here's my new obstacle script that I added I have that enum and I have the regions for all of the obstacles that we care about now why did we do it this way we did it this way for two reasons one because I want to be able to to choose that the obstacle type from over here in the end the inspector as an exported variable so we're going to say export items that's the name of the enum bar type and that's going to call an update function that's going to change the sprite so what does that update function going to do it's going to take whatever type you chose and change that variable variables value to it it's going to take the sprite and set its region rect equal to the value from this dictionary that we calculated and it's going to create a rectangle collision shape now direct to rectangle shape 2d so that we have a collision shape that fits the object so we set the extents equal to the sprites region rect the thing we just set size / that's because remember extents are measured from the center but the rectangle size is the full size and then we set the collision shape shape equal to that okay so this means whenever I choose over here in the inspector it's going to try and update this but that doesn't work when we're not running the program so what we want to do is actually make this a tool script so you put tool up here at the top that means that this script will run when you're in the editor so if we go over here to the 2d mode here you're gonna see that I can go over here and choose red barrel and it makes a red barrel with a collision shape I can choose the large tree I can choose the red fence okay and it created that collision shape that fits the size of the object and that means that in our map we can go over here and we can add obstacles I'm gonna add a container node to D just to hold all of these obstacles and this is mainly for hierarchy reasons so here when this starts getting really long I can you know collapse these and I can collapse the obstacles just makes a little easier to keep track of where things are oops and then we're gonna add an obstacle in here and let's put it let's start let's put some obstacles in here so I can put this obstacle and I can go I want this obstacle to be a yellow fence barrier and I'm going to rotate it probably want to put it there or the enemy tanks gonna run into it on a blockage path but I can put that I can duplicate this and make the next one be a large tree which I can put over here right you can so we can start getting really fancy with how we place all of our obstacles and I'm just gonna do those two just get started with now what happens when we run the game well when we run the game we're gonna get an error okay it has a problem saying it can't set a region wrecked because the nodes sprite wasn't found well what does that mean well that's because on our obstacle we have this set get running so when you hit run on your project this set get updates but it updates immediately even though the these nodes haven't been added to the tree yet so they're not ready and because they're not ready they can to be found with get node so there's two ways we can solve this but the one that I like the best is just to let it know that if when you're running in the editor it all works fine right we can it updates when it updates but when you're running in the game you want to wait for this you want this to wait until you're in the tree so there is a engine singleton that has an editor hint property and that editor hint property is true or false whether the script is running in the editor so if we're not running in the editor I want to yield for this script or sorry for this node to get the tree entered signal so that just means that that initial run will not it'll wait to try and set the sprite until obstacle is ready an obstacle will be ready after it's children because that's the order that Godot processes the nodes so that'll solve our problem with getting that error message so now when we run it we get no error and if we drive over here to where the where we place the obstacles there they are there's that yellow fence which I can't walk through and the bullets can't go through and there's the tree so that's it now you can start decorating your level with some obstacles and create some areas that you've got to go around to get into this will give us a lot of options for how we can design our path through the level and the the various goals and enemies in the way as we're trying to get through the whole level but I will do that outside of the video so thanks for watching and I'll see you next time you