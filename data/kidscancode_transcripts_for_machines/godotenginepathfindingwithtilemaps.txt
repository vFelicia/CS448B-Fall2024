hello and welcome to another good old game engine tutorial in this video I'm going to show you how to implement pathfinding on a tile map using the navigation 2d nodes if you're new to Godot be warned I won't be explaining every little thing so you might feel a little bit lost I recommend you start with my Godot 101 tutorials first alright let's get started okay so for this project we're going to have a simple map here with some mobs that are walking from a start position to a goal position and using the navigation 2d node they're going to be able to find the shortest path from the start to the end and we'll be able to remove blocks from the path and they'll find a new one that will let them get to where they're trying to go ok let's look how this is set up so in our main steam here we've created a navigation 2d node and all we did with it is make a tile map the child and I'm not going to go into how you create tile maps in this video we can do that one in a separate one but we have this time up here with two two different types of tiles which I've gone and drawn these initial tabs with and also in the scene we've created a start position and an in position using to position 2d nodes with sprites attached to them to give them something to see and then we have a mob timer that's just going to all this does is control how often the mobs spawn at the start position I have that set to half a second right now and it's an auto start so that it just repeats over and over again so this is the set up and our mob is just a sprite I've just created a sprite of the little army guy and that's it so the way that nav 2d nodes work is they need to have a shape attached to them just like with a collision body you need to have the collision shape attached to it you need to have a shape attached to this navigation be and that's usually done with a navigation polygon instance right so just as an example I could add a child here to NAV and now I have a polygon instance which needs to have its shape defined so I can say so you can either say new navigation polygon or you can go up here to these buttons up here which let you create a new polygon from scratch so if I click the little pencil and I start clicking out here it's going to say do you want me to create a polygon here say yes and then you can draw points where you know wherever you want and connect them up and this becomes your navigation polygon and using the little red button here you can adjust these you can you can insert you see the pop up here you can split the segment using ctrl + left mouse button so if I click ctrl in here I can insert a new point in there and so depending on how you're set up you might draw your navigation polygon too to cover whatever your area that you want to navigate is and now any node that's inside of here can find a path from any point inside the polygon to any other point inside the polygon and that all works fine for a static setup but because we have a map here our time up that we want to be able to add and remove tiles I want the navigation polygon to basically be all the brown road tiles and so as I add and remove them the shape of this polygon is going to change and so we want that to be dynamic and so we're going to tie that into the tile map so let's delete this polygon we don't actually want to do it that way and so the way that we do this is when we've set up our tile map or sorry when we set up our tile set right here's my tile set I have the graph style and I have the brown road tile okay and on the brown road tile I've added a navigator and polygons as a child and so this navigation polygon covers the the tile and you're going to get an error here because it's going to tell you that a navigation polygon needs to be a child or grandchild to a navigation 2d node and so by itself it doesn't work but when we have it here in the in the tile map it will be under a nap 2d so it's going to work fine now the only thing you need to be careful of is since these tiles are going to be laid in the map they're going to be side by side and so this navigation polygon needs to connect to the one of the tile next to it and that means that you need to size these properly so right now I have snapping on on the grid if I turn snapping off you can see I could grab the corners and you know size this however I wanted and the problem will be if if you are not exactly on the borders of the tile if you're sticking over a little bit this way or sticking over a little bit this way the navigation will not work so you need to turn on snap and make sure that you are exactly matching the size of the tile that you're using so that when they are adjacent they will line up properly if you have starting to have problems with your navigation working that's the first place to look is you might not have your your snap grid on and you don't have your polygon covering the edges of the tile okay so we take the two tiles we export this as our tile set and that's the tile set we use in our tile map node and so I have tile number zero which is the grass and I of tile number one which is the road so here's the start of our main scenes code we are pre loading the mob scene so that we can instance it we have a few variables pointing to the nodes that we need to reference in the case of the positions we're just getting the positions for the start and end so that we can spawn the mobs at the right position we're going to set process input to true so that we can detect the mouse clicks and in the input function this is where we're going to do that so if the mouse button is clicked or if a mouse button is clicked first thing we do is we use the world to map function to convert from the mouse coordinates to map coordinates so we basically get what tile we have clicked on and then if you click the left mouse button we're going to put we're going to set the cell to the road tile if you click the rice right mouse button we're going to set the tile to the grass tile and then when you let go of the mouse button we've created a custom signal here called map update and we're going to emit that signal which all of the mobs are going to listen for and if they hear that signal they're going to know that the map has changed and they need to update their path and then finally we have whenever our mob timer times out we're going to instance a mob set its position to the start position and that's all we have so far so here's our mob code so I have a speed variable so we can control how fast they move nav is going to refer to the navigation 2d node which we're going to have to tell the model that when it spawns path will be an array just holding the point that it needs to travel through this is what you get back from navigation is a list of path of path points to travel through and then we're also going to want to be able to set our goal position so we know where we're traveling to so that's it so now where do we start well first we need to be able to set our navigation and so it's null by default but when we set it we're going to want to do a couple of things so we're going to use a set get here and we're going to make a function called set navigation and set nav and set nav is going to be passed some new navigation right so in theory you could have multiple multiple navigation nodes that the sprite is traveling between and whenever you want to change it you're going to send it a new one so we'll set our nav to the new now and whenever we get a new navigation we're going to want to update the path but we're also going to want to update the path whenever it changes so we're going to make a function called update path and what update path is going to do is calculate its new F and you do that by taking the navigation node right which we have set and you use the get simple path method on it and what that does is you pass it a the position you want to start at and that's so that's going to be our whatever our current position is where you want to travel to and then a true or false which is which has to do with path optimization I'm going to set this to false and we can we can look at what it does when you set it to true once we have it working okay and now if our path size returns 0 that means we either have reached the destination so there's no more points to travel through or it means we are stuck somewhere where there's no path to the goal right if there's no way to get from your start position to your in position you will get an empty after return and so if that happens because we've you know trapped a node somewhere because we removed the road it was on we're going to queue free so we just want the mobs to disappear when they've reached the end and if they ever get stuck somewhere they can't move we'll just we'll just have them be deleted ok so now our mob has its path that it needs to travel and now we need to have it follow that path so let's go back over to our main real quick and when we spawn the node here we're going to use those functions we just set up so we're going to set the mobs goal to the end position we're going to set the mobs nav to our nav node right and because we used a set get it's going to run that update path code and then finally we want to connect our map update signal to the mob and have it run the update path function whenever it does so whenever the mob here's the map update signal it's going to update path now back over on our mob we just need to decide what to do with our path so again our path is going to be an array of points to travel through so as we are processing we need to check if so if path size is greater than 1 then we have at least one more path you know one more path node to travel to and so we need to figure out the distance to that so we're going to get our position and find out the distance to path 0 first first one in the list of the next the next ones we're basically going to be removing we're going to be removing items from the path as we reach them all right so the next node we need to travel to is a certain distance away and the reason we do that is so that we can interpolate the movement and move at the city speed to that point so if the distance is greater than 2 which means we've gotten really close right that's going to be close enough and you can adjust that as well it's depending on the size of your sprite that you're moving and the size of the map that you're moving on you can adjust that to get to get smoother transitions between different nodes but this one works fine for our speed and size that we are using so we're going to set our position to whatever current position is and then we're just going to do a linear interpolation to path zero the place we're going so between the place we are in the place we're going interpolated by the speed that we want to travel at times Delta divided by D alright and so that way we'll move whatever fraction it takes to keep the speed steady otherwise if we've gotten that close then we will remove at zero right and so then we'll be ready to process the next one and again if path size is if we've reached it then we can Q free because we've reached the final node so we are there okay and so that should do it for the code for them up and now we're ready to try it out so here come our mobs spawning and they are now calculating their path along the navigation to D and if we remove a path they're going to try and find whatever their next closest one is that makes them go around as you change it you'll see them find whichever ones they can we'll find the closest path that they can make this guy go all the way back around hopefully you get the idea navigation to D is a really powerful node there's a lot you can do with it this is just one example that could be applied to games like tower defense games strategy games where you have a lot of Units needed to travel around the changing map thanks for watching please check below for the source code if you want to try the project out yourself and I will see you in another video you