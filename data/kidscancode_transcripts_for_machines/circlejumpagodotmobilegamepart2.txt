I'm gonna part two of the circle jump game development video series in this part we're going to construct the basic gameplay where our player can jump from circle to circle in a continuous line and we'll also add a few beginning visual effects to spice up the appearance a little bit alright let's get started so let's start by adding a couple more nodes to our main scene I'm going to add a position to D this is gonna be my start position and let's see we're gonna start down here somewhere towards the bottom of the screen and I'm gonna add a camera and this camera is going to basically follow right it's gonna walk on to the circle when the players on it and when you jump to another so code will jump to that one alright so it doesn't really matter where we put it right now and then I'm gonna delete these instances because that was just to test the capturing we're gonna instance this stuff in code so let's see oh and then on the camera right like for example if it's down here I don't care about this face below the camera I want to see more above it so I'm gonna set the y offset to about minus 200 that way now when the camera is fixed on something we can see more of the screen above us will always be towards the bottom of the screen when we're on the camera and let's see let's make a current on and that should do that okay so let's add some things here on my jumper I'm gonna add a captured signal that we can emit when we are captured so on area entered here we're going to emit the signal here and we're going to include we're going to pass along the area that we hit and then on the circle I want to change this to also when I initialize the circle I want to pass the position as well so that we will set that when the circle is initiated so that every time we create an instance we can pass it something and we don't even need this ready anymore now we can add a script to our main scene here and first thing we're going to need is we're going to need a reference to our scenes our save scene so we can instance them so we're gonna grab the circle scene and the jumper will preload the jumper we'll have a variable to store our player in and then in the ready we're gonna say randomize and new game now this is temporary because we're gonna eventually have a UI where we click a button to start a new game but we'll define that now and we'll just call it by default so when we start a new game we need to Center the camera we're going to put the camera to these position to the start position and we need to spawn our player so a player we make a jump jumper instance we set the player's position equal to the start position we've got an add child and then we need to connect we're gonna connect that captured signal to a function here that will call on jumper captured I like to keep just follow the same naming scheme that the engine uses and then we're going to spawn a circle which is something that we will have to define but we want to start it at start position so what is spawn circle do well it takes a position or not if we pass it a position it's going to use that position but if we don't then we will be randomly picking positions but we want to make a circle instance and then if we don't have a position right if we weren't past a position for where to spawn then we're gonna pick a random one and I'm just going to use some guesstimate numbers right now based on the previous circle over on so maybe 150 pixels to the right or left and the Y is gonna be somewhere between 400 and 500 pixels above where the current one is and so we'll set the position to the current circle which is player target position Plus that X&Y that we've just calculated so now we have a we've picked a random position so we'll add the Chad the circle as a child and then we will call init with position on the child and pass it that position so it knows what to do and then we need our function for capturing that signal so on jumper captured we're passing it something right now it's an area but maybe might be something else later we're gonna take the camera to D and we're going to set its position equal to that new object that we just did so the camera will jump and then we need to spawn another circle but now if I call spawn circle here like this right because I want a random circle I'm gonna get an error message from the engine because this on captured is getting signaled right the signals getting emitted when we're in the middle of area entered processing so we're in the middle of physics when that happens and Godot doesn't like you to change the physics state during physics processing like this because adding another area could could change around things could change things that are currently being processed so spawn circle is going to give us an error telling us that we can't do this during this stage but we can solve that vibe just deferring the call and this says do this at the end call this function at the end of physics processing alright let's try this out we run main there we are we're on a circle there's another circle and when I jump to it the camera just teleports right and that's really jarring I'm it's discontinuous I get kind of lost I don't know where I am we can fix that by turning on smoothing and the speed I think a good speed is probably somewhere between five and ten let's let's go ahead and make me in our main scene and now you see the the camera interpolates its position to the new one so we don't lose track of where we are that's pretty good so now we have an infinite series of circles one after another that we can keep going until we go off the screen so something else you may have noticed I bring it up here is the circles pivot point is is always rotating so we don't know where it is so when we hit the circle see we jumped over to there because we place the jumper where the pivot point is and that might be on the opposite side of the circle from where we hit which looks really jarring as well so we want to go into the jumper code in here and on jumper area entered we're gonna say target dot get node pivot right we want to get that pivot node and change its rotation to the vector between them angle and that will snap it to where it is or where we are when we hit see where that looks like now do another quick test and see now I started there I start rotating from the spot I hit that looks a lot less jarring okay and then we also are always rotating clockwise and I'd like it to randomly choose between clockwise and counterclockwise so at least there's some variety there and we can do that by on the init on the circle right we can we can pick our rotation speed our rotation speed right now is set to PI we might change that later but rotation speed whatever it is I want to multiply it by randomly 1 or negative 1 the easiest way to get a 1 or a negative 1 is to raise negative 1 to the 0 or 1 power write negative 1 to the 1 is negative 1 negative 1 to the 0 is positive 1 so now we can know that it's gonna randomly choose a direction whenever we hit ok the next thing I wanted to add is some some things to the circle to make them a little more interesting we're gonna add some animations so an animation player and this first animation we're gonna call implode this is going to be the animation that plays when we jump off the circle I wanted to shrink into nothing and disappear since we've left it you can't jump back to it all right we don't want that so the implode animation we're gonna take the circle and we're going to use its scale they'll keyframe that let's see how long do I want this to last not very long let's try 0.4 we'll see how that goes let's sit this over to there and then I want this scale to be zero zero and we'll keyframe that so that's the animation right it just shrinks down and maybe we'll animate the visibility as well so I'm going to take the modulate and we'll key that and then we'll fade it down to then we'll take the modulate outside down to zero now look you frame that and then it just sort of fades out a little bit that's good over on the circle I'm gonna make an implode function which we're gonna call when we implode and I'm just gonna say animation player it up play implode then we're going to yield for the animation player animation finished so that we let it finish and then we're gonna cue free and then that way when we jump from our jumper we can tell our target to implode right jumping off you you should go away let's play this now when I jump off the circle shrinks away now for the other animation which is going to play when we get captured on a circle I'm going to duplicate this sprite and I'm just going to call this the sprite effect and I'm going to set it to invisible and then on the animation player we're going to make an animation called capture and let's see the capture animation we're gonna make that about half a second long sometimes like to change this to snap 2.01 so I have a little more resolution for moving the keyframes around this one I think I'm just going to start off with it rudimentary we're probably going to change it around a lot as we go I don't expect to get it perfect the first time around but we are going to set its visibility to on so we want to key frame that we're going to set its scale at the beginning of this to a larger value so let's set that to like three three and at the very end I want it to scale all the way down to zero zero all right so just sort of the idea that's going to shrink in like that but we also want some visibility changes as well so I'm going to go to the modulate and I think we're going to start it out at an alpha of zero so we'll keyframe that and then as it comes in let's go all the way to the end at the end I want it to be maybe let's see what it looks like if we have it on full here yeah I think maybe what we'll do is fade it down towards somewhere more in the half range that's something like that that's a that's the first pass not trying to get it looking perfect yet but I just want some effect that I can play when it's captured so now on the circle script where else is going to add a capture function that's going to call that animation player and play the capture animation and we will call that on our main when it hears the signal so on our main script when the jumper is captured we're gonna call object up capture which only plays the animation right now but again just leaving room for us to add more things later on so now when we hit the circle we get that little zooming in ring and that's okay for right now that's good enough for us to it's good enough starting point for us one last thing I want to add this time around is on the jumper I want to give it a trail that sort of streams up behind it let's add a we're going to add a node and then we're going to add a line to D reason I'm using the node here is for the trail is I don't want the line to D to use local coordinate so I'm gonna use global coordinates so we're going to pump our coordinates into that line to D so it will leave a line behind us I'm going to call these the points of the line so trail points and let's make our let's make our jumper and make it a red color and then I make an orange trail it doesn't really matter at this point but I want something that will look good so on the trail points what we want to do is we want to fill this with a gradient and we want the starting point of the gradient to be whatever color we're going to do with an alpha of zero and then we want the end one to be whatever color we're gonna do with an alpha that's full and then we get a nice trail I like to leave the end and beginning caps round that should do it so in the script what we want to do is I'm going to add a reference to the node 2d so I have to call that all the time and I'm going to add a VAR trail length how long I want to trail to be how many points it will have and then in the physics process what we can do is just check if the size of the list of points is greater than trail length then we're going to remove one we're going to say remove point zero remove the first point that was in there and then we'll always add point where we are right now so now our trail the only problem is our trails coming out from C it's being drawn on top of the jumper so we also need to take this and set it Z index lower so that it'll be coming out from the jumper not above it so that'll do it for this time I think we've made some more progress we're getting closer to having an actual game keep leaving your questions and suggestions in the comments below and I'll see you for the next part where we will start working on the UI and I'm also interested in making color schemes where we can we can control what color everything is and make appealing color schemes that the user can choose from when they're playing the game thanks for watching and I'll see you next time you