welcome back to game development with Pegeen this is part 6 of our tile based game and in this video we will be implementing rotation for our player sprite and dealing with several problems that that's going to cause they're gonna make it things work a little differently than they have before ok so we have our player sprite which is this little blue character with a gun that we're gonna we want to make this sprite have free rotation so I want to be able to turn and point in any direction 360 degrees around so that means we need to start talking about how we're going to control that and how we're going to deal with the graphics and collisions and everything like that so I'm first thing I'm going to do is I'm going to go over here to my settings and I'm going to add a new constant for the player it's gonna be his rotation speed this is going to be in remember everything is per second because we're using the delta time on the frames so everything would be multiplied by which is like we we did this movement speed so this is gonna be in degrees per second so it's going to take him a little more than a second to go all the way around and you'll see how it works when we start and this will give you an easy way to adjust how fast or slow you want the player to be able to turn and now we can go over to our sprite here and the settings we need to add to this we needed a variable that's going to track how far we've rotated okay and we're starting out pointing to the right so that's going to be a rotation of 0 degrees we're pointing to the right which means we're pointing along the positive xaxis and then we're going to go down here to our key to our key settings and the rotation speed is going to work the same way as the velocity as long as we have the key Downey moves and when we let go he stops really the same thing with rotation so our rotation speed will normally be zero we're not rotating okay but we are going to add that left and right or a and B are going to rotate us now not make us move so these are going to change left and right are going to change to setting our rotation speed equal to the player's rotation speeds so let's get rid of that these are going to be negative and positive player rotation speed although I think I need to swap those turning to the left is going to turn us in the positive direction pressing right is going to rotate us in the negative direction and now up the up arrow is going to move us forward so that means it's going to change our velocity and we wanted to we want this velocity to now be pointing in whatever direction we are facing right which means there's a couple of ways we could do this you could figure out what angle you're planning at based on the how much we've rotated and then you know multiply that the cosine and the sine times the X&Y right it starts to get tricky with trigonometry but vectors make this really easy what we want to do is we want the player to move forward right so at whatever the player speed is so if we did that right that means move at the player speed in the xdirection and zero in the Y direction that would mean move at the player speed directly to the right all right the way we're facing normally or when we start and we just want to take that vector and rotate it by whatever our rotation is and we're putting the negative here because normal and we're putting the negative here because we're basically rotating this vector in the opposite direction from the direction that we are pointing so that it will match our rotation that we did with the keys you'll see what I mean when we when we do it but we're gonna do that with the up and down and both of these are going to do the same thing so I'm going to just duplicate that oops shift that down delete that and when we move backwards we can also make it we can just say that's negative right opposite direction and I'm also going to divide it by two so we move at half the speed when we move backwards now we're only moving in one direction right the direction we're pointing it so we don't need to solve the diagonal problem anymore we're not going to be moving in a diagonal direction versus a horizontal and vertical we're moving in a rotated speed at any angle okay so that is going to do that so now our velocity is rotated to point in the direction we're facing now we just need to go down here to our update and make sure that just like we update our position by whatever our velocity is we also need to update our rotation by whatever our rotation speed is so our rotation now we're going to take the rotation and we're going to add the rotation speed times the Delta time and I'm going to take the remainder use the remainder function by 360 that way when we've if we rotate 361 degrees that just changes this back to one so or we don't have to have our angle keep getting bigger and bigger and bigger right it's only going to be between zero and you know 360 so that's going to change our rotation so now our rotation variable changes that changes our velocity to rotate at that angle now if we were to run this obviously we have a problem because the graphics aren't going to change but you can see that when I rotate you know I'm I am able to rotate and if I'm holding the the turning and probably the left arrow down so I'm turning and rotating around but we need to do that we need to rotate the image to match so that means we need to take we need to take another step here and after we rotate we need to take our image and we need to transform it and we're gonna rotate the original player image by whatever our rotation is right now that of course isn't quite enough because now our rotation looks like this right every time I turn because my rectangle isn't updating to put me in the right place so I can run around but it's obviously not good right so we need to rotate around we need our player to rotate around its center we need the sprite to rotate around its center right now it's rotating around the corner and so that means that the center is probably the location that we want to track as well we want the center to be where the position our position is tracked from so that position is what changes when we move around that's going to be the center of the sprite and that's going to be a lot easier to calculate things than then using the corner of the rectangle so that means we have to change a few more things so one thing we need to do is we need to say that here when we move our rectangle it's the center that uses that position not the corner but it also means that when we rotate our image remember that image is going to change in proportions so it's rectangle is going to change so whenever we rotate in order to keep the sprite centered we have to calculate what our new rectangle is all right we get the new rectangle and we put that to the center of that rectangle at our same position that our previous rectangle with that and what that allows us to do now is oops I put a dot in there this is supposed to be Center X and Center Y of the rectangle okay so now that looks much better I rotate around my Center I can move forward in whatever direction but now if you notice when I get off of here my camera is still very bouncy and that's because the camera was using the corner of the rectangle we need to update our camera to also use the center we also have some major problems with our wall collisions because our wall collisions we're trying to put the corner of the rectangle against the wall but then we're telling it to calculate its position using the center and so those two things are conflicting and we get all sorts of weirdness with the walls so we can fix the camera really easy if I go over to our camera here and saying when we update we use the center not the corner it's interacts and center Y and that's going to prevent that bouncing problem when we're out in camera land and we rotate say the camera does not move when we turn you know I lose when we move so now let's talk about the walls so we go over here to our wall collision code our wall collision code right now is it's putting the position but it's not putting it in the right place right because we want to put our for example when we hit the when we're moving to the right and we hit the side of a wall moving to the right we want to put ourselves at the left width / because we're using the center but we also want to put our right at the right plus the width / okay and same idea with the height when we're talking about the yaxis okay and then we also need to make sure we put our that here we use the center X or Center Y as that position okay so now you can see I can go up against to the wall and that works but I still have a problem that problem happens when I rotate and to be even more specific that problem happens if I rotate after I've collided with the wall right so let's say I'm going to the I'm moving to the right I hit that wall no problem right but if I'm up against the wall and I rotate and then I try and move like say that then I get a problem right now does anybody can you guess what that is some of you might have already guessed what is causing this problem but the easiest way to see it is to illustrate it by going over here to our game and drawing and drawing our players rectangle on the screen so that we can see what's happening so I'm going to go over here and I'm going to draw after this I'm going to draw a rectangle on the screen in white and I just want to use the players rectangle alright players I can't and the thickness of two so now I have my players rectangle and now you can see what happens to it as I rotate because the proportions of the sprite change so does the size of the rectangle so if I move over against this wall I'm fine until I rotate now the rectangle is colliding with the wall but our collisions check for when we move so as soon as I move it's going to detect a collision now I'm fine and I rotate and I try and move oh but just snap me to the top of the rectangle I remove top of the wall so our problem is that our collision rectangle is tied to our rotation and varies in size and that's going to make it really hard to keep our collisions with the walls working correctly because we don't know how wide and how tall our rectangle is going to be it's going to change and all sorts of crazy stuff is going to happen making us teleport through walls and things we don't want to happen so what we need is we need a rectangle that's not going to move this rectangle we're stuck with it moving it's going to change because the size of the image is going to change but we don't have to use this rectangle as our collision rectangle we can have a different hitbox for collisions than we use for the drawing okay so we're going to need to create another rectangle for our player to use for the collisions and how big we want to make that can well it can sort of vary right we're going to call this the hit rect and I'm going to go ahead and define this here so that we can change it later right so let's say we want to make it 35 by 35 so it's just a rectangle of that size or a square I should say that means we're going to need to import PI games so we don't get an error here autocomplete okay so we've defined that rectangle that our player sprites going to use and now we just make sure that when we go over here and spawn our player we set up that rectangle okay so we're gonna say we're gonna get our regular rectangle and then we're going to say our hit our hip cracked is also is going to be that and then the center of that should be equal to the same right we always want the center of our hit rect to be the same as our image rect but that means now that in our movement what we want to move is our hit rect right so our hit rec center is what we move and to check with the collision all right our hit rect is what we move to check with the collision and that means in our collision code we're also going to use the hit rect okay so this is going to be the getrekt this is going to be the hit rect this is going to be the hit rect and this is going to be the hit right and also we place our hit rect against the wall so they hit rec is what bumps up against the wall when they collide and in our update then after we've moved the hit rec to see if it collides it set the hit rect against the wall we make sure that our regular rect gets set equal to our hit rect okay now here's the problem this function right here sprite collide automatically looks at a sprite and a group of sprites and uses their wrecked parameter you use it's going to use this no matter how many other rectangles we make it's not going to use this right so we need to we need to modify this to tell it to use the hit rect instead and we can do that by just creating a quick little function now I'm gonna put it I'm gonna put it here for now we're actually going to find a home for it later but we're going to make a function called collide hit rekt okay it's just going to take two sprites sprite one is bright too and it's just going to return the collide rectangle right the it's gonna use that with two dot right right so we're just gonna take in this case what we're gonna have it do is the player versus the wall right so every time it tries the collision it's going to compare the players hit rect versus the wall rectangle and send that back instead of just comparing the two rekts if I did this that's exactly what the normal collision does okay so we just go over here and say for these we tell them to use our new function use collide hit rect instead okay so that's going to use that function we just need to make sure that we import that file we just make sure we import that function okay so now let's go ahead and go over here and draw instead of drawing our players rectangle let's just draw our hit rectangle real quick just so that we can see it okay there's our hit rectangle and see when I turn it doesn't move and that hit rectangle is going to hit the wall and it's gonna stay against the wall now it's the camera isn't tracking it so it's not gonna work when we go off but this is just for us to test it right so the hit rect is going to map against the wall just fine just like it used to do when we were a plain square and not a rotating player all right so if I I'm gonna just comment this out and then you're gonna see it's gonna look really nice right I can bump up against walls I can run against them everywhere I go my hit rect is what's determining whether I've collided with a wall or not and because it's a little bit smaller than the sprite we can get close up against a wall too you see how I'm overlapping it just slightly graphically we can adjust that too to get it just the way we want it also because of the way sprites are drawn our player is sometimes underneath the sprite and sometimes on top of it but that's something we'll fix later when we start talking about doing the wall graphics so don't worry about that right now the point is that we have our collisions working again and they are not dependent on how our sprite is rotated in fact they're not dependent on what the sprite looks like at all right they're just controlled by that hitbox and we can customize that hitbox to be whatever we want and it will always remain all right that will do it for this video as always please hit the like button below if you found this video useful and subscribe for the next video because we have a lot more to come thanks and I'll see you next time you