okay welcome back to a game development with PI game this is part 12 of the tilebased topdown shooter game and in this video we're going to get back to writing code and we're going to learn how to load the maps that we've created with tiled into our game in our last video we learned how to use the tiled map editor to make a map for our game and I went ahead and made this little map where I have a little house and laid out all the decorations and things hopefully you were able to play around with it and make some make a map for yourself or if not then you can click on the link below and download this map and use it yourself so we want to load this map into our game and use it as our game map so what we're going to need to do is we're gonna need to install a new Python library so if I open up terminal you should be able to do this whether you're on Mac or PC same way you installed PI game so I'm gonna say pip install PI TM X and that's all it takes now this library called PI TM X is installed and it's a Python library that knows how to read tiled map files okay so if we look at what our map file was that we saved I saved it in our Maps folder called level 1 ok this is what a tiled map file looks like it's not really intended to be human readable but it does have all the information in there about what tile goes where and what they all look like you know where they're located how big the tiles are width and height are 64 that kind of thing has a lot of information in it well PI TM X will read this and understand what it all means and use it to create our map so we don't have to read that so what we're going to do is we're going to go over to our Tom Knapp program right where we wrote a map class that loaded our text mouth file well we're gonna make another one we're gonna make I'm gonna leave that there so that we have it just in case we ever want to go back to our text map okay and I'm gonna make a new class called a tiled map okay and what a tiled map does is it's going to load whatever file name we specify which is going to be a TMX file and the command to load that file is PI T MX dot load underscore PI game the reason they have this load underscore PI game command is that PI TM X is just for reading tiled maps so you may not be using PI game you could still use PI TM x to do things and then there's one option that we need to set called pixel alpha to make sure that we get the transparency that goes with our with our tiles in our table now and then I'm gonna set a couple of properties here that are gonna be useful to know the total width of the map is going to be the width x TM tile with okay this width variable is how many tiles across the map is which we set to 50 and then the tile width is how many pixels wide each tile is which is 64 so 50 times 64 that's how big my total map is and the same thing with the height TM height and TM taught tile height and then I'm just gonna store I'm gonna make a variable called TM x data that's just gonna hold all of this stuff so that we can refer to it okay and that's gonna be the init that will load our map and then I'm also gonna make a function called render and that's going to just take a surface and it's going a PI game surface and it's going to draw all the tiles of our map onto it and so if you remember I closed it so if you remember from the level one every layer of the map is named here right we have the ground layer and if I scroll down a bit you'll see the walls layer the items layer all the things that were there in my tiled map and each one is a list of what tiles are where in that map and each tile has its own ID which is some unique number that tiled assigned to each map tile you know each one is given it is given its own unique number well we can go through and read that and the term for that is a GID global identifier and so if we put here self dot TMX data get tile tile image by GID that's the command that you use to get it to find the image that goes with a certain tile right so when we get to here and we want to do tile number 98 then there's some image that Maps you know that represents taonaya 98 and we want to get that image that maps tiny tile 98 that's what this is that's what this command does but this is a really long get tiled image by GID is a really long command so I'm just a liasing that command to ti4 tile image that way we don't have to type that whole long command multiple times so we need to go through the layers in our map so for each layer in self dot TMX data visible layers alright so tiled is going to have certain number of layers that are set to visible right because over here on our map that's what these check boxes are if I were to uncheck you know say the ground for example it should be a bad idea but if I did the ground is now set to visible so if I save this my game when it loads this map won't display the ground all right so you can have some layers be set to not visible if you don't want to use them for some particular reason so we're gonna go through each of the visible layers in our map and if that layer is a tile layer tiled the tiled tile layer and what we mean by that is again in tiled you can have multiple kinds of layers right when I click on new layer there's actually three different kinds of layers that you can create we've only worked with the tile layer so far we're going to talk a little layer later about what we can use these other types of layers for but we only care about these tile layers which are these grids where you can put tile images so I want to go through each of the layers in the map and if it's a tile layer then I need to get at the X the Y and the ID of each tile in that layer okay so we get the X the Y and the GID and then we're gonna say the the actual tile is equal to TI all right which is that get tile image by GID command if it's a tile then we're going to draw it on the surface so if your stub lit the tile and then the location we're going to blit it is at x times whatever our tile height is and Y times oops x times tau with sorry Y times okay so we've lit our tile at whatever location it's supposed to be at okay so that's our that's our loop to go through and here I'll go ahead and put this on the next line just so you can see everything okay so so now I've in this render command I've gone through the tile data and I've found for each layer I've looked at every single tile and drawn it on the screen and we're going through the layers in the order that they're listed in the file so the ground will be first it's going to draw all the ground tiles then it's going to go to the next layer up and draw all the tiles for them which was the walls and so on so that's render and I need one more function in here to make this work okay and this is going to be make map and this this command is what I'm gonna run when I load the file I'm going to load the file and say make map wood and what make map is gonna do is it's gonna create a surface and I'm just going to call it the temp surface right now it's going to create a surface to draw the map onto okay and it's however big the tile map is and then I'm just gonna say self dot render onto that temp surface and then I'm going to return that temp surface so now I have my teller so I have my child map class all set it can load the file and it can make the map by rendering all the tiles in the proper locations onto some surface that it's gonna give back okay so that's our tiled map class so now we can go over to our main here and we're gonna go down here where we load all of our data right and we've made a map folder now so I'm going to duplicate this line and I'm going to call this the I'm going to call this the map folder and that's going to just be named that's the folder named Maps right because that's where we're saving our TMX files and then now self dot map is got not going to be to make a map it's going to be to make a tiled map okay and this tiled map is going to load that TMX file from the map folder it's going to load that TMX file which is called level 1 TM X ok so now I've loaded my map and then I'm going to make a surface for it the map image is just going to be self dot map dot make map alright so I do make map which is what we just got through writing it's going to go through and do this which runs through and does all the rendering and then I'm also going to make sure I have the map wrecked so I'll be able to locate it on the screen for where to draw it so that's all I need now I have a big image file that just shows the entire map that I drew so now we can go down to the draw section of our game and change oh by the way yeah and so we can go down to the map the draw section of our game and here we go I'm going to I'm not going to bother filling the background because we don't need to I'm just going to on the screen blit the map so I'm going to blit the map image and then the location I want to draw it is going to need to be shifted by the camera just the same as the other things that we've done right but here's the thing we have this camera dot apply command and that takes a sprite and moves the sprite or shifts the sprites rectangle to where it needs to be well this map is not a sprite it's a it only has a rectangle so we need to go over to our camera and we need to add another function here and what this function is going to do is instead of taking a sprite I'm gonna call this apply rect instead of taking a sprite it's going to just take it a rectangle and given that rectangle it's going to return that rectangle moved by whatever the camera offset is okay so now we have two options for using our camera we can apply the offset to a sprite or we can apply the offset to a rectangle so now over here I can save selftaught camera apply rect to the map right okay so I apply my offset to the map rect that went that line is a bit wide because I made my font size a little bigger because then people are asking me to make my font size a little bigger so they could see so all we need to do to draw the map is this okay and then we also need to just make sure here in our new this is where we were creating all of the sprites for things so one issue we're gonna have is we need to comment out this loop right because we don't have a map to go through with all of the ones and M's and peas and so forth but that means we don't have the P location so we don't have the spawn point for the player so just temporarily I'm just gonna spawn the player I'm gonna just spawn the player up in the upper right hand corner let's just say five comma five just so that it will spawn the player somewhere because we're gonna we're going to change around the way that works but for right now we'll do that so that we can see if this is working okay so when I run it this is what I see so there's my player there is my map and if I walk around the map will scroll excellent and just like with everything else when I get down to the edge it stops scrolling I do go off the edge because there's no obstacle there so that's something we will add soon but I can run around on my map everywhere and it's all being drawn properly and that's great but what about the walls right obviously I don't have any obstacles anymore so I am free to run around anywhere I want well now that we have the map loading in the next video what we're going to do is we're going to talk about how we use the object layer to indicate on our map where we want obstacles and other things like the player spawn point and things like that in our game to be where we want them to be on the map and so we're going to do that in the next video so this video we will wrap up here hopefully you have your map loading and working again you can download this map from the link below in the description if you want to use this one otherwise feel free to go ahead and draw your own it's all going to work the same no matter how you decide to draw it and I will see you in the next video please go ahead and hit that like button and subscribe and the next video will be along very soon bye you