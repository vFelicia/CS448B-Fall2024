welcome to Godot 101 this is the intro to 3d series part 2 in the previous tutorial we started a 3d project and we looked at how to navigate and create 3d objects in this part you'll learn how to import existing 3d objects that you've made or downloaded and how to use more of godot's 3d nodes so besides using the built in primitive shapes how do we get 3d objects into our game well if you're familiar with 3d modeling software such as blender you can make your own models but if not there are many sources where you can download objects or even collections of objects for particular game types one of my favourite makers of free game art is Kenny you can find them at Ken ul and if you've watched them at my other tutorials we used a lot of his assets in our 2d projects so for this demo we're gonna be using this collection the Kenny platformer kit and it includes lots and lots of three models for making 3d platformer scenes like this including the platforms things like crates and barrels keys and coins all sorts of fun stuff like that so I'll include the link in the description below go ahead and download the asset pack like this and open it up now when you unzip this asset pack you're going to find that the models are available in a variety of different formats and some of these formats can be read by Godot and some can't the ones that are most common are obj obj you're gonna see very often if you go and download 3d models from various places obj is sort of an older format Dae is known as the Coolatta format and a lot of Godot tutorials will have you use the Colada exporter to generate daes if you're using blender and then there's GL TF which is a more it's a newer format with a lot more features and Godot supports it out of the box too and since we've got it that's the one we're going to use so just drag this folder into your project folder for Godot so I've dragged that folder into my Godot project folder and I renamed it to Kinney platformer kit and you can see this has got all these different model files in here so when we switch back over to the Godot editor you're going to see a progress bar while it goes through and imports all of those models so let's go over to our this folder and see what's going on so here we see I'm going to scroll down to the crate that's the one I want to start with the crate now if I click the import tab you'll see the options you have for importing and what's going to happen is Godot is going to make this model into a scene just like you would do if you were creating a new scene to put your object in and so we can tell it what type of node we want the route to be I'm gonna click this and I'm going to change it to a rigidbody so I want my crate to be a rigidbody and the root name is what it's going to be called when we open it I'm going to go ahead and change that to crate and I'm going to click on reimport now when I double click on the create file to open it it's gonna tell me that this file was automatically imported right and so you can't modify that this is the original file so what we what it's gonna do is create a new inherited scene based on that file and that's what we want so click new inherited and there we see our crate in our 3d space and it's a rigidbody and the mesh is a child of it and now we do have one small problem and it appears that when Kenny exported these models that he left in a bit of an offset and that's going to cause a problem because our crate is offset from our parent rigidbody and so when the rigid body rotates it's going to rotate around its center which means it's going to do this instead of rotating the way it should so we need to fix that by offsetting the mesh back over to the origin so click on the mesh and we're going to set its transform we're going to set the X to minus 0.5 we're going to set the Y to minus 0.25 and we're going to set the z to 0.5 so that it's centered back on the origin and so now when the rigid body rotates right the crate goes along with it now we also need a collision shape for this body so let's add one of those and the shape we want to give it is a box shape and so you can scale the box shape using these handles right to scale it to the size you want or you can click on box shape here and set the extents to the size you want now extents represent the distance from the center and since the crate is 0.5 units across then our extent should be 0.25 in all directions and then we get a collision shape that perfectly fits the mesh so let's save our crate save that scene and let's see how we can use it I'm gonna make a new scene and I'm just gonna give it a plain spatial as a route and this is where we're going to bring our crate in but it creates a rigid body which means gravity acts on it so if we put this in into the scene and run it the creature is gonna fall away so we need something to be the ground and to do that we're just we're gonna add a static body static bodies are physics objects that don't move rename that to ground and then we're gonna add a mesh instance to it I'm going to use a plain mesh so a plain is a flat plain with only one side if you look from the underneath it's not there right it's a it's a flat surface one sided surface now this mesh is 2x2 click here we can make it bigger I'm going to expand this to 10 by 10 so we have a nice large surface for our crates to stand on now another thing about meshes is the color of a primitive mesh is white by default so if you want it to be a different color we need to go into the material so you see here the mesh has a material property and we can assign it a new spatial material click on that and you'll see a whole list of properties we're gonna get into the details of materials a bit later but for right now the one you need to know is that the albedo property is the one that sets the color so I'm gonna click that so I'm gonna click that and I'm gonna give my create a nice dark green color for the ground now this mesh is not going to stop the crates from falling because it doesn't have a collision shape so we needed a collision shape with it as well now there's two ways to add collision shapes two meshes you saw the first way when we did the crate we added a collision shape and gave it a shape another way to do it is to click on the mesh and then here in this menu we can add a collision shape to it by choosing create convex collision sibling that will make a collision shape it's a sibling of the mesh which is what we want so it's a child of ground and it automatically calculates one that fits this object now let's instance a few of the crates in the scene and kind of arrange them in a stack okay so I have a nice wobbly stack of crates let's add a camera to the scene so we'll be able to see it and I'm just going to take that camera and move it up and angle it down at the scene and run it there we go our crates tumble to the ground now let's make this scene a little more dynamic than making the camera move I want the camera to orbit around and just look at this from all directions as its as its running now moving the camera in a circular motion could take a lot of math but there's no reason to do that all we need to do is add a new spatial node that's at the origin and make the camera a child of it because I'm gonna call this camera hub because now if we rotate that spatial the camera is attached to it so it will rotate along with it always pointing at the center so all we need to do is write a little code to make that camera hub rotate so let's add a script to our scene and we're going to just in the process function we're gonna tell the camera hub to rotate around the yaxis and I'm just gonna give it a small value in radians and now when we run that scene our camera is smoothly rotating around the scene one more thing we can add to our scene to make it look a little nicer is some light and in Godot there are a number of different light nodes you can choose from we're gonna use the directional light so we add that and I'm gonna pull this up in the air a bit so we can see it and what a directional light does is it simulates light from a distant source like the Sun so in practice what you get is parallel rays of light coming down from an infinite distance and hitting everything at the same angle and really it makes no difference where you put this node all that matters is what direction you have it aiming so if we want the light to point straight down we would do that all right and so you can see the effect of the light on the objects getting brighter and smaller as I brighten and dimmer as I rotate it back and forth so we put it at an angle so we have some sunlight streaming down actually maybe I will tilt it this way a little bit too but there's no shadows shadows are something you have to turn on if you go over into the the light properties there is a shadow option and that will get some shadows to our objects now let's run it and see what this scene looks like very nice all right so that will do it for this tutorial in this installment you learned how to import 3d models and turn them into objects in your game how to create a scene and add some lighting in the next video we'll go a little more into depth in creating a more complex scene and creating a user controlled character thanks for watching and I'll see you next time you