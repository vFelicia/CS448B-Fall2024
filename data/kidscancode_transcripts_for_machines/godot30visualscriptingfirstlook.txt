hello and welcome to another Godot game engine tutorial in this video we're gonna take a look at the new visual scripting feature of Godot 3.0 if you're interested in trying it out yourself you're gonna need a recent alpha build I've included a link in the description below to where you can find daily builds but before we start I want to stress that this is an early look at visual scripting it's very possible that there will be changes between now and 3.0 release my hope is that after watching this some of you will be interested in testing this new feature out and reporting issues okay let's take a look at visual scripting in Godot to start I've just made a small scene here that has a background and a star which is a sprite that we're going to attach a visual script to to make it move around the scene so we want to attach a script to the star so we're gonna click on the star node and click the attach script button and for language we want to choose visual script right you might have it on Gd script if you have created GV scripts before we're gonna make a visual script and it inherits from sprite that's the type of node that we are using there aren't any templates to choose from for visual scripts so that's gonna stay that and here we're gonna choose sprite for the name and click create and that brings us to the script editor over here on the left you can have a couple of panels one of them shows the various scripts that you have in your project this one right here shows you the base type that's what type of node this script is attached to if for some reason you have changed it or need to change it for some reason you can click here and choose the object type that you want to use then here you have your members these are the things that are going to belong to the script you have functions variables and signals and we'll talk about all those a little later in the video and then here you have a place where you can search for through the list of available nodes and before we move on I want to talk a little bit about terminal the word node is going to be used in two different ways when you're using visual script you might be referring to the scene nodes over here in this in the tree which are the Godot objects that you are adding to your scene to get your different functionality but then in visual scripting you're also going to have nodes which are the blocks that you're going to put here in the center of the script editor and connect with lines to create a graph which is a series of nodes that are connected in some order and so we might be referring to nodes over here which are the nodes of your project or the visual scripting nodes and usually you're gonna figure out which one is which by context but just keep in mind that that word does do double duty to start we need to create a graph where we can place our nodes and one visual script can contain multiple graphs in general each graph is going to represent a different function and so let's start by making a function now over here in the functions you can click the plus to create your own function any function you want you give it a name or you can click this little drawer icon which is going to let you choose one of the builtin functions that Godot offers and the one we're gonna select is the ready function that's the function that's called when the object first enters the scene tree so it's the starting code for the object so click open and now we have a ready function and this is our graph now navigating the graph there's not a lot to it you have a grid here you can drag the node around and you can see right now it's snapping to the grid you can also turn off the grid and place them however you like you can change the size of the grid here if you want the grid to be bigger then you get bigger squares that you can snap around to you can also zoom in and out although at stage at this build of Godot the zoom is a little fuzzy the font doesn't have any antialiasing in it so it looks a little chunky when you zoom in and when you zoom out it becomes pretty much unreadable I'm pretty confident that will be fixed by the time we hit release but just be aware at the time of this recording the zoom isn't isn't great so you're gonna want to stick to the onetoone zoom level so here is our visual script node they're all pretty much going to look similar they have a title what type of node it is and then they're going to have some connections like this little triangle here that allow you to drag a line and connect it to another node now let's look at another node type as an example I'm going to click here in the available nodes and type add so I can find the add node and if I drag that out this is a node that takes two numbers a and B or two objects I should say a and B and adds them together and now you can see we have some more connections these connections are called ports and the ports on the left side are for input and the ports on the left side are the output and these ports come in two different kinds the triangular ones like on the ready function are called sequence ports they control the program flow so after this node executes whatever it does it's going to transfer execution to the next node it connects to these circular ports our data ports and that means you have data comes into them and data comes out you can also change some of the properties of these visual script nodes over here in the inspector for example the add node here we see these data ports are labeled any that means you can pass in any type of data but if you want to specify what type of data this block should process you can go over here to the inspector and it has a property called type so we can change that let's say we wanted them to be integers and now the block visually changes the color indicates what type it is it also has a into label now and it we now know that we need to pass in integers and we're gonna get out an integer so you won't be able to connect an input that is not an integer any longer here and it also means since it knows what type it is you could fill in any of these values if you just want to add five to any number that you put in you could put a five here and then you just plug in an a value it'll add whatever that is to B and you'll get out a plus five all right let's start building our script I'm gonna delete the add block here by clicking the X and what I want to do is I want to take my star and I want to set its position when the script starts so when we hit play I want to make sure the Stars position is put up here in the upper lefthand corner so I want to set its position property so over here in the script if we click on this star in the inspector we will see all the stars properties and one of them is the position so I can take the position and I can drag it out onto the graph and if I let go I'm going to get a setter for the position and it actually shows me the current value right now when you drag a property out you see the message down there at the bottom if I hold in the meta key and drop it I'm gonna get a getter so I can have whatever that value is to input into something else but I want to use this setter so I want to set the position so I want to drag the sequence node and connect these so that after the ready starts the first thing it's going to do is set the position and I can do this in two ways if I have a vector node I can use that as the input for the position or I can just click here and type that I want it to go to 50/50 and it's going to set the position value to 50/50 so over here on our scene if we have the sprite over here when we hit play it's going to place it at 50/50 and be up in the corner but instead of typing these this value in here it makes more sense for us to use a variable so let's create a variable by clicking the plus right here and for the new variable I'm going to click it and type start position that's what I want the variable named and then if you rightclick on it and choose edit variable you have some more options so I want the type of this variable to be a vector 2 so I'm going to choose that and then you can click here and set the value but instead of typing a value in there what I'm gonna do is click export and that's going to allow me to see this variable in the inspector so if I click on the star over here I have start position and I can set it here and now I have this start position variable so if I drag it out onto the graph I will get a reference to it and I can take its value and connect it to the input port of the set node and now notice that the manually typed values disappear right you can't type in a manual value if you have an input port setting the value so now the position is going to be set to whatever the value of that variable is so now let's make this star move so we want to do something in the process function so I'm going to click again the drawer icon here and choose the process function this is going to be the code I want executing every frame and notice the process function has its sequence port but it also has an output data port of the Delta time which is a float value which we can use for things as well so skipping ahead just a bit I've dragged in another position setter here and I've created a variable called velocity which I'm setting to 100 comma zero so I just want this sprite to move to the right so I want to add to this position every frame that velocity times Delta so there's a couple ways I could do this I could take the velocity variable and I could multiply it by Delta then I could get the current position add those two things together and set the position to that or what I can do is I can take this set node and over here the assign operator I can change this to add and see now it says self dot add so that's going to take whatever comes in here and it's going to add that to the position so all I need to do is multiply velocity times Delta so I'm going to need a multiply operator I'll bring that out here so this lets me multiply any two things so I want to multiply the Delta times the velocity and I'm going to slide this over and I'm going to connect that to there so now every frame I want to add velocity times Delta and if we run that we should see our sprite moving to the right now just like when you write code in a written programming language you want to be careful about sticking to a consistent style and keeping your code readable and these nodes will connect and work fine no matter how you drag them around so if this stuff was all around like this it's still gonna work but this is a lot harder to read because you've got to follow these little lines around and they're crossing over each other and that's very messy so in general because inputs are on the left and outputs are on the right your graph is going to tend to go from the upper left and and head down into the right as you connect up nodes so you want to try to do follow a couple simple rules like do not cross the lines try and keep your lines from crossing don't put them all too close together because you know if you put them really close together just like this it's really hard to tell what's connected because you can't see much of the lines all right everything's very clumped up together and hard to read but you don't want to spread them out real far either because then your eye has to follow a long line to find out where it's connected to so find kind of a happy medium that works for you make sure you can see the connections you know something like that is pretty reasonable just avoid you know making trying to make things too messy because it's easy to get yourself lost when creating larger graphs than this and I'll show you some examples at the end of the video of how complicated things can get and what you can do to try and simplify them a little bit so just a couple other things I want to show you is for controlling program flow when you connect one of these sequence ports out you get some options for some different nodes that you can choose like condition is going to do an if statement so this says if some boolean that comes in is true it will go out this sequence port if it's false it will go out this sequence port and once it's done either of those or both it will come out the done port so as an example I just set up this situation so here what I've done is I said get the position and I've used the deconstruct node which I got over here if you type in deconstruct and that takes a vector 2 and splits out as x and y and then I used a greater than comparison to say if that X is greater than actually I'm going to set this to 400 so we can see this sooner if that X is greater than 400 then that's going to result in a true or a false right and that'll go into our condition so if that's true I want to set the velocity to be whatever the velocity is negated so negative so it's going to when it reaches when the xcoordinate reaches 400 it's going to negate the velocity which means it's going to turn around and go the other way so I just did that as a quick example to show you how you can kind of chain these things together to get the conditions you want you can also see that it can really quickly start to take up a lot of space so you need a lot of screen real estate to to do this stuff one solution for that and let's say that we were still doing this same function are the same thing but we want this this section of code here these three blocks these three blocks are what are determining did we reach the point where we want to bounce and so one way to organize your codes to take chunks like this and say well let's make that its own function right and here's how we would do that so I need to make a new function so I'm going to go over here to the functions and click the plus to make a new function and let's just call this bounce right bouncing off the right edge of something and what I want in there is those three nodes so if I go back over to the process and I grab these and I hit cut then I can go back over to my bounce right and I can paste so what I want to do is I want to return the result of this boolean so I need a return with value so the return so all bounce right is gonna do is it's gonna return whatever result I got from that so there's my bounce right function it's gonna compare these things send back a true or a false so now in our process our input to this condition is going to be the bounce right function so I need to just pull that out now I have the bounce right function but I need that to get executed so I'm going to have to disconnect this and insert this in between so let's move the condition over and we can squeeze this in I'll have to do a little shuffling but after we set the position we need to call the bounce write function that's going to then go to the condition and the output of bounce write is going to go to the condition so let's arrange this a little bit and now we should see the same result of the star bouncing when it reaches 400 but instead of those three nodes we took and just replace them with this one and so whenever you have large groups of nodes it really helps clean up your code if you separate those out into functions and in fact it makes you actually think a little more about what your different what your code is doing and what things make sense to pull out into different functions because now our star has a bounce right all right it knows how to bounce right and if you look at this right away you can see you know what kind of things that this node can do what kind of properties it has and its variables and so on so is this easier than writing GD script well I'll leave that up to you to decide for yourself you can wind up with things like this which are quite a bit more verbose than the same thing done in GD script but again this is just an example and you could do a lot more you could do some optimization turn these into different functions on things but it's still inherently more verbose than something like Gd script is hopefully this helps you get started with with visual script and you will download a recent build and try it out there's still a lot of rough patches the visual script needs a lot more testing so the more people are trying it out and reporting issues the better it will get and hopefully you can help contribute to that thanks and I'll see you next time you