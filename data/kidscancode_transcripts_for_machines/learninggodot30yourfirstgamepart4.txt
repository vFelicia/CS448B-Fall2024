welcome to part 4 of learning Godot in part 3 we created the main scene for our game and now it's time to tackle the scripting side so that we can start spawning mobs so in this main node we're going to want to spawn mobs randomly around the borders of the screen and to choose a random spot along that path we're going to use a path 2d so add that and we're gonna call this mob path and now we want to draw the path around there and so make sure you go over here and you have snap to grid enabled so that your lines will be straight and then you're gonna click this button right here the one with the little green plus on it if you hover that says add a point so it's gonna add a point along our curve and we're gonna start in the upper left hand corner and we're gonna draw the path clockwise around the screen make sure you go clockwise if you go counterclockwise your path will be pointing outwards in your mobs will spawn and go away from the screen and that's not good so we're gonna add the first point right here at the corner second point at this corner then this one and then last this one then we're gonna click this last button here that is close curve and that will just make the bottom lefthand corner connect to the top one again so now we have a closed curve that just traces all the way around the borders of the screen and now that the path is defined we want to add a path follow 2d node as a child of the path and what that does is it's a 2d node that can move anywhere along a path and so by choosing a random point along the path that'll give us our mobs spawn location so we're gonna name that mob spawn location now let's add a script to our main and at the top we're gonna create a variable to choose what mob scene to use so we're gonna export packed scene that's the type of object I saved scene is we're going to call that mob okay and then over here when we see mob we can just take our mob scene and drop that right into that spot we're going to add a variable for score and then in the ready we're going to use randomize and what this will do is if we don't do this then every time we run the program we're gonna get the same sequence of socalled random numbers and that's can be useful for testing so that you can make sure you get the same sequence every time but this will allow us to make sure that it is it's random every time and it's unpredictable we don't need the process function but we are going to make a new game function and what that new game function is going to do is set the score equal to zero it's going to take the player and set its start to the start position position all right so we we call the start function on our player remember over here on the player we made the start function and we pass in the position so we're going to use the position of that start position note that we have and then we're going to start the start timer we also need to know when the game ends so we're going to take our click on our player instance click on node and connect our hit signal to the main and we're gonna this time change the name here of the method we want we're going to change we're going to use the game over function that it's going to make and in the game over function what we want to do is take the score timer and stop it game has ended that can stop and we're also going to take the mob timer and stop that because we don't want to keep generating mobs when the game is over now we need to start connecting up these timers the start timer is going to start the other two so we take the start timer and connect its timeout signal what it's going to do is it's going to start the mob timer and it's going to start the score timer the score timer connect its timeout and every time that happens we're going to just increase the score by 1 every time a second goes by you get one point now in the mob timer timeout this is going to spawn mobs so we connect that up and we're gonna have a little bit more to do inside of this function so in here we're gonna create an instance of the mob we're going to pick a random starting point along the path to D and then we're going to set the mob in motion now the path follow to D node one of its properties is that it will rotate automatically as it goes around so as it goes around it's going to turn and we can use that to set the direction of our mobs as well so first we'll choose that random location along the path so we take our mob spawn location and we set its offset and we're going to set that to a random number and since the path is looped it will just spin around until it finds a random spot and then we need to create our mob instance so we're going to make a temporary variable to hold it it's an instance of the mob we have to add it as a child because the node won't be executed until it becomes part of the scene tree so we need to add it as a child of main so it's part of the scene and then we're going to use a temporary variable here to get the direction of that path follow node so we take again our mob spawn location and we're going to get its rotation we're going to set the mobs position equal to the position of that node so we take the spawn locations position and then we want to use that direction to set which way the mob is facing and which way of the mob is moving but we're going to give it a little bit of randomness so they're not all moving just up down left and right so we're going to add a little bit of random value to this I want to add plus or minus 45 degrees but GT script most of its angle functions use radians not degrees so 45 degrees would be PI over 4 so we're going to do between positive and negative PI over 4 to add plus or minus 45 degrees to the direction so now we know which way we're going we'll turn our mobs rotation to match that and then we need to set our mobs linear velocity this is a property of rigidbody 2d that controls the velocity of the object and we want to set this to a vector and I'm gonna fill in those parentheses in a second but we want to take that vector and we want to rotate it by the direction so it goes in the direction we want now what we want the vector to be is its Y can be 0 so it's going to be pointing to the right but its X is going to be a random number and it's between the min speed sorry the mob's min speed which we set over when we coded the mob and its max speed so somewhere between there and in the next video we'll be able to wrap this up by adding our UI our user interface to the main scene