welcome back to Gouda 101 intro to 3d this is part three in this part we're gonna make a user controlled character that can move around and jump in the 3d world all right here's the scene that we made last time I just removed the crates out of it I have my ground plane and my directional light and that is all right now so we're going to use start using some of those other blocks that were in the platform kit so if you look in there there are a bunch of them that start with the word block and those are the different platform pieces if you highlight all of them which I'm going to do right here and you click the import tab you'll see that when they're imported they're gonna be spatial nodes let's change this to static body and click reom port that way whenever they're instanced they're going to start out being a static body so let's start with the block large one if we double click on it it's going to tell us we need to make a new inherited scene just like we did with the crate in the last video so hit that and then you'll see our platform block and all you need to do since it started as a static body is add a collision sibling to it and change its name to block large and save this I recommend you save it in a separate folder because you're gonna have a bunch of these I made a folder called platform objects that I'm saving them in and then when I go back over to my scene I can instance one of these my block large scene that I saved there and there it is now we want to be able to place these so that they line up so what you can do is set configure snap to 0.5 and then when you turn on snap it's going to move at 0.5 unit increments and that means if I do locate this and make another one right I can line them up just right so add a few blocks I'm layout a level feel free to use a bunch of the other ones if you want and get creative you can make it as complicated as you want I'm gonna do a fairly simple one which I'll show you now so there's a little level I made up I just use some of the ramps so that when we test our character we can climb up the ramps jump off things and so on now let's make our character start with a new scene and let's add a kinematic body kinematic bodies worked very much the same as the 2d version if you've followed any duty tutorials and hopefully you have they have a move and slide method just like the 2d kinematic body does we just need to add a mesh instance and a collision shape for the mesh instance I'm going to create a sphere mesh and for the size I'm going to give it a radius of 0.5 and notice that the radius only is in the XZ plane and so the height also has to get set if you wanted to remain circular set the height to one right and then we get a nice sphere shape that is going to have a diameter of one unit and then we can just make a collision shape along with it new sphere shape you can drag again the little handle or I will just go here and make the radius 0.5 then I know it will be exactly the same let's add a material to the mesh so that we can give it a color I'm gonna choose like a blue here a little lighter okay now a sphere it's gonna be very hard to tell which way it's going so let's add another mesh to give a front to this so add another mesh instance and this time I'm going to use a prism mesh so this is a prism mesh shape we're gonna resize it to 0.5 0.5 0.1 I'm going to turn off snap here and then we're going to move it out so you can see it there this it's made a little triangle shape and I'm gonna rotate it I'm gonna rotate this in the xdirection by a negative 90 so that points forward and so forward is along the negative z axis and you can tell that because the local are sorry the global gizmo arrows point in the positive direction so this blue arrow is pointing in positive Z this is the positive z direction so I'm going to move it in the negative Z direction so I'm to stick out the front and mego raise it up a little bit so that arrow will sort of point out the front of our character now before we start coding the movement let's talk about the controls in the project settings in the input map I have added the controls here I've got to move forward event move back strafe right strafe left and jump I'm using WASD and the spacebar for jump because we're going to use the mouse for looking around when they get to that but first we're gonna do the movement so go ahead and add these input actions and then attach a script let's rename this to the character and save it and it will attach a script to it okay so let's start with some of our variables we're going to need a variable for gravity it's gonna be how fast we fall this is the kinematic body so we have to calculate gravity ourselves we're going to use the vector three down constant which is an arrow pointing down negative and the y direction I'm going to multiply it by the strength I want which is 12 that's how strong gravity will be speed is going to be how fast the character moves jump speed is going to be how fast the character jumps up when we hit the jump key and then we're going to have a velocity vector to track our character's velocity so let's start with the physics process so in here we need to add gravity to our velocity and then we need to get our input which we're going to write a function for this and then we need to move using our velocity move and slide velocity and we need to configure the up direction well that's the vector 3 da so that's all we need to move we just now need to define our to get input so here I'm going to set my velocity got X and my velocity dot Y naught Y dot Z to 0 because I don't want the character to be moving when I'm not pressing any of the arrow keys and then we're going to check for the inputs so first we'll do move forward and when we do that we want to move in the negative Z direction so velocity dot Z equals speed and we do the same for the other inputs you okay and that should do it so now if we go over to our scene and we are going to instance the character in here let's find our character put them in a good starting location camera our camera can see them yeah we need to move the camera back a bit there we go maybe up a little bit all right so let's try this out so I'm gonna press the WASD Keys and you're strafing forward and back alright so that's all working fine but the problem we have here is that we can't rotate all right the character is always facing in the same direction and we can't change direction so that's the next part we need to implement okay so let's move the camera camera up a little bit more and angle it down because I want to be able to look down and see which way the character is facing so we can test our rotation okay so I want us be able to see the character rotating and see which way the arrow is pointing now we're gonna go into the character script and add the code for rotating so we want to rotate whenever the mouse moves side to side so we're gonna use the unhandled input we're using unhandled input instead of input because we want to make sure that what in general whatever GUI you use is going to intercept the input events first and an unhandled input is going to be the ones that pass on to the game so if our event is input event mouse motion that means we move to the mouse and we want to rotate based on the mouses motion in the X Direction that's contained in the relative property and since we want to move if we move to the right we're gonna rotate to the right move to the left we're gonna rotate to the left we can do this all in one so we're gonna rotate our character in the Y direction but something to keep in mind is we don't want to rotate the same speed with a small mouse movement as we do with a large amount of movements we want it to be relative to the movement that you input so we're going to use alert for that and so we're gonna lurk between zero and some movement speed let's put that up here at the top we'll call that spin and that's gonna be the base angle of our movement of our rotation speed we're gonna alert between zero and that based on our event relative X the amount that we moved the mouse and that values going to be in pixels so they can be pretty large so dividing by ten is going to scale that back a little bit so let's go ahead and test it out and see what happens so now as I move the mouse sidetoside the character is rotating see if I move the mouse a little bit and move slow but if I move the mouse fast it moves fast but now watch what's going on with the movement right when I press W to go forward I go that way but when I rotate the character I still go that way so our coordinates our movement is happening in global space but what we really want is we want the character to go whatever directons pointing so we want to use the characters local coordinates that's what we're gonna do next so here I've got my character let's look at them from the top let's change the top view there's my character and it's pointing forward right along the negative z axis and when I rotate this character you see those arrows don't change right because they're the global direction and that's what's happening right now is we're moving along these global arrows which doesn't matter which way I'm pointing so what we want to do is use the characters local space and so if we can illustrate that by switching clicking this button and switching to local space mode in local space mode see how when I rotate so do the gizmo arrows so the in the characters local space forward is this way before it is the direction that that white triangles pointing and that's what we want we want to move using local space so how do we do that in code to do that we use something called a transform so you've probably already noticed as we've been setting properties that every spatial object has a transform property and the transform includes the translation the rotation and the scale and those are encoded in this matrix this transform matrix is how the is how the engine is keeping track of those properties so if I rotate the character and you see the rotation degrees start the transform isn't updating you actually have to save it to update when I save it you see other the properties have changed right and so these properties are encoding that rotation and and tell us that the forward Direction is actually is actually this and not that so when you want to access that in code you access the transform dot origin which will tell you this data where it's moved to or the transform basis the basis has the rotation in it it tells you the local direction arrows for the body so let's go back into our character's script and we're going to change what we're doing here in the get input so I want to reset the velocity vector I don't know which way it's going to be going right and based on the characters local based on the characters local coordinates it might be going partially and Zee partially in X we don't know so I'm going to reset the whole velocity to zero but if I do that that's gonna cancel out gravity and we wouldn't be we'd stop falling so I want to capture the Y velocity so that at the at the end I can put that back just so that we don't lose that information and we'll keep accelerating downwards and so on now we need to change what we do when we move forward or back so now instead of just adding to the Z when we press forward we're gonna take our velocity and we're gonna add the transform basis Z transform basis Z is going to be that that blue arrow in the the blue arrow in the local coordinates so that always when it rotates transform basis Z is gonna be this blue arrow well we want to move opposite that blue arrow when we go forward so that's why I'm putting a negative in front of it the basis is a unit vector so we need to multiply by our speed and then we're going to do the same thing for the other inputs so strafe is going to do the X transform forward and back you're going to be the Z transform so let's try that out and see what it looks like when we run so now let's turn to plan angle now I go forward whatever direction I am facing and strafe go side to side and that's good but it's also very hard to control it would be much better if we had a camera attached to the player that sort of followed us around so we're looking over the character's shoulder here's our character let's add a camera to it and let's take that camera and put it behind and above the character I want to get a little bit higher up and let down so we're looking over the shoulder maybe a little farther away set the camera to current and now we should be following over our character's shoulder with our camera now we can walk around on the map and more easily see where we are and we're almost done we just need to add the jumping now so in our script we're going to add a flag called jump that's going to toggle when we press the jump button sit down here and our input we're going to set jump to false unless we press the input and I'm going to use I'm gonna use just pressed jump we want it to only trigger once per button press if we if we did then we'll set jump equal to true and then in our physics process is where we can check to see if we're allowed to jump because after moving slide is when it knows whether it's on the ground or not so if jump is true and is on floor is true then we want to take our velocity Y instead of equal to our jump speed and now we'll run it and see how our jumping works so now we have a jump alright so that is a really good start on a controllable 3d character hopefully this was helpful to you the one of the biggest takeaways from this lesson is the concept of transforms get used to using those transforms because this transform basis is going to be massively useful in all sorts of circumstances as you'll see as we get further into the tutorial series thanks for watching and I'll see you in the next video you