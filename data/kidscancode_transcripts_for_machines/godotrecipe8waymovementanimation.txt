all right i've got a quick one for you this time that many people have asked about in this video we're going to look at how to make a 2d character with eight directional movement that includes animation like you see here for this example we're going to use this isometric mini crusader art pack that you can find on itch.io i've got the link in the description below it has eight directional animations for idle running attacks all that kind of stuff so it's a great one to use for this example now when you download this you're going to get a bunch of individual folders for each animation and in each folder are all the individual frames so and they're numbered 0 is this first animation all the frames are running in that direction then we have the ones in this direction and so on every time it starts over from one to two to three and so on you have a different animations we're going to drag all those into our individual animations in an animated sprite so here's our animated sprite and i've created the eight animations for idle and the eight animations for run dragging each set of images into the appropriate one and you can see up here that it's running if i change to idle three it's facing in that direction and each of the names of these animations are set up to have a number at the end corresponding to the direction with idle 0 and run 0 being the ones pointing to the right and that corresponds to this layout so 0 is facing is the animation facing to the right and then we go clockwise from there around the circle so in order to control our character we're just going to detect the mouse position depending on which one of these sections the mouse is in that's the direction we're going to move and the animation we're going to choose so when we get the mouse angle we're going to get a value and i'm showing it in degrees here although it'll be in radians in our script and we don't really care what the exact value is we want to know which of these sections this is in so in order to get that we're just going to stepify which will let us snap these angles to the closest 45 degrees right so anywhere in between here would be 45 90 and so on and that looks like this so when i'm in this section i have 0 and here is 45 90 135 and so on if i need this to be 0 that's fine i need this to be 1 and this to be 2 i can divide by 45. and now i have each of these divided by 45 i get the number right but something strange is going to happen over here that's because when kudos measuring the angle it's just measuring the shortest angle so this direction is going to be minus 45 degrees minus 90 degrees and so on so over here by 180 we've got the transition between positive and negative so we need to take these numbers which go from negative four around to four and we need that to map to the range that we want which is zero all the way around to eight and we can do that by using wrap and then we wind up with what we need we've got zero in this section one two three four five six seven so now we have all our eight directions that are gonna match our desired animation numbers so here's our script on our kinematic body we're going to keep track of our current animation it could be idle or it could be run those are the only two that i added to the animated sprite of course if you add all the other attack and and so forth you can add those as well um speed is our movement speed and a is just the angle that we're going to calculate to the mouse which i made a variable so that i could do that that troubleshooting drawing all right and then in the process we're going to assume we're on idle unless we have some mouse input and then here's where we do that calculation i just demonstrated we get the mouse position relative to the player we stepify it by 45 degrees and divide by 45 degrees that gets us our minus four to four and then we use wrap i here to wrap it around from zero to eight okay make that a little bigger now and then if we are pressing the mouse button and our mouse isn't too close to the player we're going to move towards the mouse so we're going to change current animation to run instead of idle and we're going to use move and slide to move in that direction and then we're also going to set the animation on our animated sprite to that current animation run or idle plus the number that we got for the mouse direction so idle zero run five and so on and now when we run this with a nice background we have the perfect effect of the animation matching which way we're going in our 8 directional movement now you can do this with the keyboard as well if you're using keyboard controls instead of the mouse you're going to do the exact same thing your direction of movement is going to come from whichever keys you have holding you have held down right if you're pressing right and down you're going to be going diagonally in this direction so you'd pick animation number one right if you're going this way you'd pick animation number zero so use the same technique to pick the angle based on the direction of the input vector all right that's it thanks for watching and i'll see you in the next video you can find this recipe and lots more on the goodo recipes website at goodourrecipes.com here you can find a wide variety of recipes for creating the game system you need some help on how to get started with godot in the basics section and lots more i recommend you go over there and explore and let me know if there's something you're looking for that you'd like me to add as i'm always adding more recipes over time thanks for watching and i'll see you in a future video