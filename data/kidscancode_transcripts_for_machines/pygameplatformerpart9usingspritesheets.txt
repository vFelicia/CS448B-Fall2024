welcome back to game development Piegan in this video we're going to start talking about adding graphics to our platformer game using spreadsheets so it's time to start thinking about adding some graphics to our game now if you watched the shmup video you know we made a folder and we put a lot of different images in there and we loaded those and use them as our sprite images and that's fine that's a that's a simple way to do it but a lot of times you have a lot of art for your game you might have a lot of different images and that image folder can get very full it also can start to be a performance problem because every time you load an image off the disk you're taking a chunk of time you know that's a that's a slow process so the fewer times you have to read data off the disk the better for performance or for in this case loading right because this would be at the beginning of the game loading all the graphics so the way that programmers solved that is by using something called a sprite sheet so I have here the jumper pack from Kenny game art which I'll link to in the notes below and this is a nice low pack with lots of art in it if we look at the little sample it's got player sprites it's got lots of obstacles and enemies and platforms and coins and all the stuff that you might need to make a little jumper game like we are and so if you look at the preview he's included all of these graphics right and so that's a lot of that's a lot of art and so you could go in here and load the individual images for all the different actions of the players and and all the different items and so forth and so on but again that's going to start to fill up your folder with lots of art right so the way we solve that is with this there's something called a sprite sheet and a sprite sheet has all of the images collected in it all together and so we load this one image so we only have one load off the disk and then we in our program slice it up into the parts we need when I need the coin image I just go and find the coin image and grab this little chunk of the sprite sheet and make that the image for my coin sprite and if I want this platform I cut that one out etc so I've copied this sprite sheet into my image folder here in my in my folder where I'm where we're building the jumper game and so I have my sprite sheet you can preview it right there and then I also have this included along with it is an XML file if we look at this XML file you can see that it's just a list of each of the images and where it's located in the sprite sheets of which what the x and y coordinate of its top lefthand corner are and how wide each image is and how tall each image is so you can go through here and find which of the images you want right so if I want the players ready image I would cut out from 6 14 1063 with a width of 120 and a high to 191 okay hopefully that makes sense and wilt as we go through the process you'll see how it works okay so we're gonna go over here to our sprites file where we were defining our various sprites and well technically this isn't a sprite I'm going to stick it in here because it's another class we're going to find we're gonna define a sprite sheet class and what this sprite sheet class is gonna do is you know load the image and let us and give us a way to slice it up into the parts we want this is a utility class for loading and parsing sprite sheets now if you're not familiar with the word parsing parsing means reading through a data file and understanding what it means you know for example if you were trying to read a file that was written in English and you wanted to understand the grammar that's what parsing means so in this case what we're doing is taking a sprite sheet and understanding how to break it up into the pieces that you need so the in it for this class is gonna be pretty simple we're just gonna pass it the file name that we need to load and then we'll call it the we'll call it the spreadsheet this is just pi gonna image dot load we're gonna load the file name and convert it okay and so then we need to define a get image command and that what that's gonna do is let us tell it an X a Y a width and a height for what chunk of the sprite sheet we want now you might be thinking you know we could go and if we look at this XML file that came with the sprite sheet we could set it up so that we read all of this and then if I want the particular image out of it I could say you know if I want you know bunny one ready I could just say give me bunny one ready and it reads from this file what location to use and that would be very functional the problem is so I'm not going to do it that way because if you decide to use a different sprite sheet you may find you go and get a sprite sheet online and the artist who made it didn't include an XML file with it and then you'd have to go and generate this which could get kind of tedious it might come with a text file it might come with you know some other format there's listing listing where the different parts are so what we're gonna do is we're gonna just manually specify these things at least the first time through here and we'll talk about different ways you could do it but we're gonna stick with that for now to keep it more flexible for whatever you might be using so we tell it what part of the image we want so this function will go ahead and document this we'll grab an image out of a larger larger spreadsheet okay so we're gonna make a little surface to put this image on and that's it's gonna be the size we want so it's gonna be this size we specify and then we're just going to flit on to that onto the image it's a chunk of the sprite sheet and the chunk we want so we want to blit it in the corner of the image and the chunk we want is the chunk specified by the rectangle that we specified okay so we take this chunk of this sprite sheet and we lit and onto this image at this location okay and then we can return that image so now I'll just say you know get image whatever we want and that will be our image that we get back okay so now we can go and tell our game to load that and so I'm gonna go in here to our settings and just define what the name of my sprite sheet file is spreadsheet jumper dot PNG and then I can go over here to the main and in our load data section is where we're gonna do this now our image file is in the image folder so we needed to find that image folder all right so we know what it what folder all the images are in and then we're going to load okay so the spritesheet for a game is going to be one of our spreadsheet objects and all we need to pass it is the file name this file name is going to be the file name joined with the image during and keep it simple we need to put that in here so we're to join join the image dirt with the sprite sheet image that we specified okay and then now I'll go over here and load one of these and Oh in case you didn't notice I just noticed that I typed tie game here instead of PG which is gonna give us an error message and now we can run this and make sure we don't have any typos okay now obviously we're not gonna see any graphics yet alright so let's go over here to our player and let's change this into one of our images so if we go over here and look at the art pack individually you can see what some of the graphics look like so we're gonna use this little bunny for our player and to start with I'm just going to use the stand one alright we can obviously animate it walking and do all sorts of stuff like that but to start with I just want to load this ready one and make this my player so funny one ready and if we go look at our sprite sheet here bunny one ready these are the coordinates for it so I'm gonna just copy that I don't have to go back and stuff that image here we want to use the game sprite sheet and say get image and in the parenthesis of get image we want to put those four numbers which I just copied and pasted so I'm going to just stick them in here and replace the Camas and then we should be good to go okay so we got the image and we need to not fill it with yellow so now we should have our player being the sprite we want so let's take a look okay so here's our big giant sprite so two problems we have one is it's a lot bigger than the sprites we've been using so far the little rectangle we defined so we have a size problem and we also need to do the set off on the background and fix the background problem okay fixing the black border is very easy we just need to go in here and say self image set color key okay now the size issue is a little different right so we know that this is bigger than we want to be and if we actually go and look at the image all of these images are pretty large which is nice because it makes it flexible you can use them all whatever size you want but we want to resize them we're gonna want to resize all the ones we're using so that they all fit together so we could just resize this sprite sheet but the problem with resizing the sprite sheet is as soon as we do this as soon as we do that all these images aren't gonna be at the same locations and the same sizes so all these numbers won't work anymore and we won't know where the individual images are and be a lot of work to go through and Reap lot out all of these locations so what we're gonna do to keep things simple is resize them after we load them so we could resize it right here and say when we load the player we resize it but then we'd also need to resize it when we load the platforms and etc etc right that can get kind of annoying so what we're gonna do is in the get image we're just gonna automatically resize it when we load it so so we could do that here we could just say PG transformed scale image now when you scale an image when you use the scale transform you have to specify the new width and height you can't just say divide by two so we could say with / I I I so make everything half the size okay so so it says lid get this image it gets the image and scales it then sends back the scaled image and so that's good so let's see how that looks now okay ah no we got an error message here and if you look at what that is it says integer argument expected got float what does that mean well my height is 191 190 1/2 is not a integer it is a fraction so because we're working with pixels the scale command wants a an integer number for the width and height so we need to round these or truncate these two integers and the quickest way to do that is using the double slash operator which all that does is divide by you know divide and truncate the fraction into an integer chunk it's the decimal part so that'll give us that should give us whole numbers and then we can run it and we should have a halfsize little bunny okay so that looks a little better you're now working with sprite sheets okay so that's going to do it for this video we're now working with sprite sheets loading them and cutting images out in the next video we'll start to work with some more graphics and improve the platforms and then we can start animating the character so that we're using some of these some of these nice animation frames to make it look nice then we can go from there thanks for watching and we'll see you next time you