welcome back to good 101 this is part five of the series and in this video we'll be talking about how to make a Sprite that is controlled by the player as always if you haven't watched the previous videos please do go back and watch them because there will be a lot of things that I'll will assume you already know because we've covered them in previous videos all right let's get started okay so we're going to start with a main scene which I've made just have a node in it nothing but a plain old node that's where we're going to put all of our main code but before we do that we're going to make the player and I've included some art here which you can download at the link below just unzip it in your project folder okay we've got some objects here that we'll be able to use and then I have this F player folder that has a little animated alien guy that we can have walking around that's going to be our player so we're going to start by making a new scene and then we need to talk about how we're going to handle our players movement and collisions and all that kind of stuff so if we look at the node list I'm just going to search for collision and you can see under node T 2D there's an object called a collision object 2D and it has it children area 2D and three different physics body 2DS and these are for doing different kinds of collisions and physics simulations and there's pros and cons for each one or I should say there's there's reasons to use each of these for different kinds of games that you might be making okay an area 2D basically can just tell you when it overlaps something when something uh bumps into it or or overlaps its area the three physics body 2DS help you do you know physics simulations the kinematic body 2D is for moving Sprites uh you see the icon is the little space invader guy because this is the kind of physics that is sometimes called arcade physics it's not intended to be realistic but it does let you make walls that characters can't go through things like that uh the rigid body 2D is for realistic physics something like Angry Birds where you want to hit a stack of blocks with something and have the blocks All Fall Down uh all that kind of thing uh with realistic gravity and things like that that's what a rigid body 2D is for and then a static body 2D is an object that doesn't move and this is more efficient for things like walls and the ground and things that you don't need to animate so that so the engine doesn't need to do the calculations for that body moving around it's just going to sit there that's why it's called Static and we'll get into later in the series how you use each of these but for this first example we're going to use an area 2D because we're going to make our our character walk around and we want to know if it ever uh if it ever collides with an item so we can pick it up so that's going to be our player so we're going to choose the area 2D and we're going to call it player all right we're just going to save this we call it player that's fine and bring my note out here so there's my area 2D now this by itself isn't going to do very much right it doesn't look like anything so we're going to need to add a Sprite to it so we'll go back to our Sprite here and then I'm going to go in the player one and I'm just going to pick the standing one alien green front I'm drop that in there is our little alien now something you might notice if you zoom in really far you're going to notice that it gets really blurry right the pixels are all smoothed and smeared out and in a lot of 2D art that's not what you want so if we go over here on the texture and we click this little right arrow here we can see on the flags that filter is turned on if I turn off that filter now we see the pixels as they were drawn by the artist right and not as apparent with a Sprite like this one but there's some that it's uh makes it really look ugly and you can set that as a default if you go into your project settings and go to the image loader there's an option here to have filter off by default and that way every time you drag a new image in you won't have to go and check that box to turn that off so there's our player he's a little big if we run the scene he takes up a lot of the screen so I'm going to shrink him a little bit right we're going to go on the scale here and let's put him to point 6 okay so there he is but by itself this character won't collide with anything the area 2D the area 2D node doesn't include collisions it can but you have to Define what the shape of the Collision you want to use is so I'm going to rename this to Sprite with a lowercase so I can keep all my names lowercased and I'm going to lock the player so it can't so we can't accidentally drag this Sprite off of it so now we're going to go and we're going to add a collision shape to d as a child of the area and the first thing you'll notice is that we get a little warning symbol here and what that warning symbol tells us is you have to choose a shape you can't use this Collision shape without a shape being defined and that's the very first thing right here on the Vector so if we click down arrow here we have a few options there are all sorts of different shapes you can use capsule shapes Circle shapes rectangle shapes are the most common you can make any sort of shape you might that might fit your object okay so we're just going to pick a rectangle shape we're going to keep things really simple to start with okay so now we get this blue area if we zoom in on our player here you can see this is so this is going to be the Collision area and obviously we want to resize this now if we drag these corners of the square and stretch it do not ever do this okay never do that Collision areas the physics doesn't work right with the shapes being rescaled you can't do that but inside there are some handles that let you grab you can grab these low corners and you can drag them like this okay and now you might notice we're not centered so so we're going to be off a little bit and that's because our Sprite is 128 by 256 he's got this empty area above him uh we need to offset that so we want to click on the position here and just shift it down by 32 so that it's centered and then we can just grab these little handles and stretch them around until they are however we want them right if you want the the player only the center of the body to be a collision you want it to be you know wider you can set it however you want right so I'm just going to leave it like this for now you don't need to do anything fancy I'm going to put it like that so there's our Collision shape and you can see it outlined with blue area okay let's make a script we're going to add script here area 2D player. GD all right now to move our player around we're going to want to use we're going to use the arrow keys and that means we need to set up our inputs so if we look at the project settings under uh input map here there's a bunch of these already in here this is the default input map that good uh loads and so the arrow keys right now left right up and down are set to UI up UI right UI left and they also have Gamepad buttons on there if you happen to have one of those uh and you can go in here and you can add other ones if you wanted you can add other you can add other keys to these actions these are these are called actions and you can create your own actions too like you could name name one shoot and whatever buttons make shoot happen that would be the action you look for in your code so we're just going to stick with the default ones right now UI uncore left right up and down and we're just going to have that move our player so in our ready we're going to set fixed process to true so that we can run something every frame that's going to be our animation and our checking for the keys so that is going to have some code in it so first I'm going to set a a variable um let me click on player here in the inspector so that you can see this is our player node and if I go back to the script I'm going to add a variable for the speed of the player we're going to put export VAR speed equals 400 now when I hit save on this script look at there so now the speed variable has appeared in our inspector and we can we can actually change it right here in the inspector without going and changing it in the code that's what export does so any variable you want exposed into the editor and and viewable in the inspector you can just put export in front of very handy okay we're also going to have a velocity that's a vector 2 and this movement is going to work very similar to how we did the animated Sprite where we're going to set the position of the Sprite to whatever position it's at plus velocity time Delta we just need to check to see if the player is pressing the keys and you do that with input is action pressed and then the name of the action and you can see the suggestions have popped up here so let's start with say UI right right UI right was the right arrow key so if they have pressed that then this will return true otherwise it will return false so this is going to be true or false whether the button is pushed okay and the same for all the other ones and determining which ones are are pressed is what direction we're going to go in right if right and up are both pressed we're going to go up and to the right so we're going to need to figure out what our input Vector is what direction is the player having us move right and this can be this is going to be a combination of the two of the keys so it could be one zero it could be one negative one right depending on what they have pushed it's going to be something like that and so what we can do is we can set the input the x of the input Vector equal to this which could be one or zero right this is the right arrow key and I'm going to say minus the left Arrow key that way if left is true it'll be negative 1 if both left and right are pressed together then X will be zero so we won't move right and so we will just duplicate that line and we're going to have down and up sorry for the long line I have my font kind of big so that you can read it so it does make the lines long but we're just taking the X component of the vector is going to be right minus left and the Y component of the vector is going to be down minus up okay so now we know what our input is and our velocity is going to be need to be set to that direction but we want to take the input that input vector and normalize it because we don't want it to be longer in the diagonal directions right we don't want if it's this to be multiplying by a bigger number than if it was that okay so so we have normalized and then we just multiply by the speed to get it to the right length so now our velocity Vector will point in the direction we want and we can run it there we go I can now run around the screen very simply right we have to deal with the edges but I have basic eightway movement okay now we're going to wrap up by stopping at the screen edges now I've gone ahead I copied and pasted from our previous example of the bouncing Sprites these two variables screen size which is the size of the viewport that we're looking at and extents which was the size of the Sprite so I'm doing get texture I'm doing it on the Sprite node so we get the size of the texture and then I'm setting the position to the center now to to do this what we're going to do is we're going to take and we're going to get a we're going to set the variable position equal to this equal to this stuff okay and we're going to do that so that we can adjust it and we just want to take position X and we want to make sure it can't go lower than the leftand side of the screen or greater than the right hand side of the screen and another word for that is we want to clamp it clamp is a function that will take some variable or some some value I should say and make sure it doesn't go below or above this minimum or maximum so we want to take position X and the minimum that we want it to be is well we'll put zero and the maximum will be screen size. width and pause y we're going to clamp to zero screen size. height okay and then we set position to that position okay and then this is what that will do is it's going to let us go to there and there and and there oh I see what happened okay so I just realized when we set up our player and we adjusted this Collision remember how we shifted this I shifted the wrong one but we want to shift is because this is this is our root node this is where the position we're tracking and see how the players offset so we need to take the player Sprite and we need to move it up we need Move It Up by 64 okay and that will make it now see then now it's centered on the area here's the area 2D it's centered on there and then we need to not shift our we're going to set that back to zero okay sorry about that I was just doing it backwards okay so now when we run this our player will stop our player Center is going to stop at the edges right just like we did before we're just going to have to adjust that by the extents and we'll do that by saying it's extents do width or screen size. width minus extense do width and then this will be the same thing except for height okay okay now we have our character staying on the screen not going off and we are ready for the next video where we will start making this little guy be animated I'll see you in the next video thanks for watching for