welcome back to learning to code with Python in this lesson we're gonna do some more animation and we're gonna learn about a new programming concept called objects and that allows lesson we created an animated ball that bounced around the screen and at the end of the video I asked you to think about what you would need to do if you wanted to have two different balls bouncing around the screen well the obvious answer would be to make a second ball alright we could call it ball 2 and we could maybe make it a different color but now that second ball is going to need its own X beat and Y speed so we probably have to copy and paste this and call these X speed to and X&Y speed to and maybe make them different values now we get to our animation and here's where we're moving the ball finding its coordinates and telling it whether it needs to bounce off the wall or not well we have to do all those things again for the second ball so we would have to paste everything in here make this ball to this canvas dot move has to be for ball 2 at X speed 2 and Y speed 2 and then we need to make sure we bounce the ball with its speed as well so if we run this you'll see that well that works and we have two different balls moving in two different speeds and that's fine if we wanted to add a third one well we have to go through that whole process again four five six balls you'd see this would start to get really long every time we paste in we have to make those changes there's so many opportunities to make mistakes and forget to fix something and then you have to go through you imagine if you had a bunch of these trying to go through here and find where your mistake that you have to fix is would be really difficult as a general rule in programming if you see yourself repeating the same kind of code over and over again or copying and pasting a big chunk of code to use it again it usually means that you're doing something wrong or if not wrong you're doing something the hard way that could be done a better way that better way is by using something called an object an object is just a way in programming to create an item in your program that may have a whole bunch of different properties and behaviors collected in it for example we want to make a ball object that ball object is going to have some properties it's gonna have its its shape and size and color it's gonna have its X speed and its Y speed these are all properties that each ball will have it'll be different for each ball but each ball will have those properties and each ball is going to have a behavior the behavior is that it moves and it checks its coordinates and bounces off the wall and every ball should know how to do that so if we create a ball object what we're doing is we're defining a generic ball and all the properties and behaviors that generic ball should have and then we could create as many balls as we want as long as they all follow and are one of those generic balls then they will have all those properties don't worry if this is confusing at first this is a concept that takes a little bit of practice to get used to and after we've gone through it a few times you'll see it'll start to make sense so how do we start well we need to define what that generic ball is okay and the way you define an object is using the class keyword so we'll call it ball now typically in Python the general rule is that we use capital letters when we're naming classes we keep variables as lowercase because they're easier to type and read but when we're defining the class we use the capital B to sort of set it apart and indicate that we're making we're defining a class here and the capital B ball will be the generic ball that defines what properties all balls should have so I'm gonna go ahead real quick and I'm going to delete all this ball 2 stuff just to keep things a little cleaner so that we can see what's going on so what do we need to do in our definition of the ball well first we need to define all of those properties or the shape and the size and the color and the speeds and all those things and the way you do that is since we want those things to be set up when the ball is created what you can do in Python is you create a special function we define a special function called init it has those double underlines under it because it's a special one that every object can have so the Python knows to look for this function called init and if it exists whenever the object is created it's gonna do whatever it says to do in there so we're just gonna fill in a little bit more code and then I'm gonna explain what it's doing so what we want to do is we want to create we want these commands to happen when the ball is created right but we need to name things a little differently because each object is gonna have its own properties its own speed its own shape its own color etc then these variables need to be named you nicholae we can't just say xspeed because every ball will have its own X speed and that's what this little self name is for so if we call this self dot shape then each ball is gonna have its own shape that belongs to it and each speed is gonna have its own I'm sorry each ball is gonna have its own expeed and why speed that belongs to it so if I make a ball named Joe it's gonna have Joe's shape and Joe's Datuk speed and Joe's my speed so that will set those properties whenever the ball is created and here's how you would create a ball so let's say we want to call it new ball well we're gonna say that new ball is a capital D ball and now when this code gets run this capital B ball is gonna say go ahead and make new ball one of these and give new ball a shape it's an oval of this size filled with orange and give new ball and EXPEED in a Y speed of four and five okay I'm not gonna run this yet because we're gonna get some errors from this code still because we have to clean this up as well because the ball needs to also know how to move around the screen we want all of these commands to be part of the balls definition as well so what we're gonna do is we're also going to find something called move we're gonna say here's how you move yourself okay and that's what all of these things are going to be so I'm gonna cut these out and I'm gonna paste them in over here and then that a little bit there we go okay now we need to just make sure that what we're moving is our self dot shape and we're moving at our self deck speed our self dot Y speed we're checking the coordinates of our shape and then we're updating our self dot wide speed and our self X speed to tell us how to bounced off the walls okay there's our class ball now new ball will have a shape and X feet and my speed and new ball will also have a command called move that'll tell it how to move so that means in our while loop here we can just say new ball dot move and now every time we go through our animation it's gonna say take the new ball and do whatever moves says to do well move says to actually move it with the canvas move command check its coordinates bounce off the wall so if we run this we've now got an orange ball that bounces off the walls again so your first question is probably why did we do all that work to change this around and we still have the same thing well now it's a whole lot easier to create multiple balls so if I want to say new ball that's also a ball and then I only have to say new ball to move in my animation loop and then they will both be there ah where are they well the problem we have is that both balls are the same size and have the same speed so they're just right on top of each other so it would probably be good if instead of the speed always being it speed always being four and the Y speed always being five we instead made these random let's put some random numbers in here so that every time a new ball gets created its speed will be different from the others and that way we'll be able to see them separately good now you may have noticed when we created the new ball here we put these parentheses after the capital B ball class definition well the reason for that is that we can pass in values to the ball to specify certain things that we want to specify so for example let's say that we wanted to be able to say ball I want this one to be red and I want this one to be green we we want to be able to put a color in here and have that going here and instead of filling with orange it'll fill with whatever color we said well that becomes a argument to our init function so after self here we can say color and let's fill with color so now when we create a new ball this value that we give here red gets called color and then in our init function we use it here to call it color and now when we run each ball will be its own different color and we will also be nice to be able to specify the size right now we're always drawing the same size we're always drawing the same size ball so we could also add a number after here for how big we want the ball to be and call that size and then instead of putting the 60 there we'll put the size so we'll draw from 10 10 to sighs sighs and now those two balls will be different sizes and notice we don't have to do anything about the bouncing off the walls for the different size balls because it doesn't matter and close that it doesn't matter how big it is it's just bouncing off when it's coordinates say it's touched all this video has already gotten pretty long so we're gonna stop there and I'm gonna let you experiment with this you can see that if you want to make another ball it's as simple as creating the creating the ball object and making sure that you make sure to tell it to move in your animation loop okay so if you wanted to make multiple balls you can now my question for next time is what if I want to make a hundred of these to bounce around the screen how would I do that think about that and we'll talk about that next time thanks for watching you