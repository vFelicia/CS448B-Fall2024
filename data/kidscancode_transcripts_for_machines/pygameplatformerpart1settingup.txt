welcome back to game development with pygame we are going to start on a new game this time I hope you're excited we're going to make a platformer platformers are really popular everybody knows Mario is it going to be a game where you have a character that can jump around and stand on things and we'll see where we go from there but the first step is we're going to spend a little time talking about how to set up the project and make things organized so that as we move forward and add things it'll be a lot easier to keep track of of what we're doing okay before we start I want to talk a little bit about what our plan is going to be so I opened up the PI game template which is which we made in the first video of the series if you need to refresh your memory there's a link below for the video on how we created this and what the different pieces of it are you know the game loop and the pieces of the game loop and all that kind of stuff okay and this is a great beginning this great starting point for any kind of PI game project but if as you might have noticed if you if you follow it along with our last game once the game gets big and has a lot of pieces in it this the file can get big and have a lot you know there's a lot of scrolling and there's a lot of lines of code so what we're going to do is organize this a little better which is it's easier to do at the beginning if you start out organized it's easier to stay organized if you wait until you've got a whole bunch of stuff and you've got a lot of different things in your update section and a lot of different things in your draw section it gets harder to make it organized once you've made it so we're going to start out planning for this to be a more organized project okay so what I've done is I made a folder okay I made a full record platforms for our platform you okay and in that is where we're going to put all our files for the game and that keeps us separated from any other projects you might have that you're working on okay and I went ahead and made the image and sound folders although I don't have anything in them yet they're empty and here's the tie game template that we made okay and we're going to rename this in a minute but first of all let's talk a little bit about how we're going to organize it one really good way to organize things is to break them up into separate files so for example all of these things right here which are kind of the settings these constants that we're setting up for the options of the game you know that you want to be able to change in one place and it affects the whole game we're going to put those in a separate file so I'm going to make a new file okay and now the settings that py file is we're going to put all this stuff in here so I'm going to cut that out and I'm going to paste it here oops gonna paste it here and then this is going to be the game options and settings whatever we want to call it right now this file is fine I've saved it it's got all this stuff but now over here in our PI game template now we're going to get errors right because it doesn't know what width is and it doesn't know what height is it doesn't know what fps is right so what we want to do is we want to import this file into this file now there's a couple ways we can do that we could say import import settings alright import settings will tell it look for a file called settings dot py which it does and run the code that's in that alright so we go over here would look for this file and I would run this code which makes initializes all these variables right but if we wanted to refer to the variables we would have to say settings dot width and settings dot height because they come from the settings file and that gets kind of tedious so that's one way you could do it another way you could do it is you could say from settings import star and that says import all the things from that file but it doesn't make you append the or prepend I should say since you're putting it in front then the file you've imported in front of the settings so now we get all of these variables variable names load it into this file and now when we want to make changes of things we just have to know we go here and we change these things and they'll change and are in our game okay oh and one other thing we'll do real quick is I'm going to just make a variable for the title so that we can set that and we're going to fill that in later I'm just using that for a placeholder right so now our this file will run just fine all right there's our game window we can close and exit it did the width and height and frames per second and all that like he was supposed to so that's good so now what about all of this okay so for for organizing this I'm going to make another new file okay and I'm going to call that file main dot py okay now you can name this whatever it a lot of people like to call it main so you know that the this is the main file right settings dot py isn't the one you want to run to run your program main is right and so we're going to start moving stuff from the template over into main and what exactly do we want to move well to make this a little easier I'm going to go up here to view and I'm going to click on panes and I'm going to say split right and what that lets us do I make this window wider is have two files right next to each other okay so I'm going to have my main dot py here and my PI game template here because we're going to start moving stuff over here to get it organized it just makes our life a little easier I'm going to hide the file list there so we have plenty of space to move things you know and get them where we want them to be all right now the imports those are a nobrainer we know we're going to want those over here okay I'm actually cutting and pasting because I'm going to throw this file away this is just a copy of my template if if you're using your original but you know you don't want to destroy it so you can cut and paste so this is going to be let's go ahead and put our comment up here this is going to be our jumpy platformer game okay and we'll fill in the other stuff there later so what do we need to do well we're going to make a class game okay in class game is going to have a bunch of pieces in it what are the pieces it's going to have well it's going to need to have an init right and then the init is going to be the stuff that needs to happen when the game first starts up the program first starts up and then it's going to need to have a game loop right so we'll call that run so when we run the game it's going to run the game loop you see how I'm just putting pass here if you haven't seen that before pass is a Python command it just says do nothing okay because I'm not ready to write the code that goes in in it I'm just using that as a placeholder if I put nothing there Python would give me an error message because it would say oh you said Def and then you didn't actually write any code inside there right so pass help lets us just just put a placeholder there right and we can we should almost we should also comment these things just so we know what they're for right initialize game window and other things right we'll fill that in as well so run is going to be the actual game loop okay and then what else are we going to need well we're going to need to have a update update section right this is the this is the this is the game loop update right and we're going to need to have a event section this is the game loop events remember these are the pieces that the game would have every gameloop has to have in it these these three things right update events and the draw this is the game loop draw and then that's going to be passive I left off the pass here okay so you see I'm filling these in or I'm putting them there and I'm waiting to fill them in once I have once I figured out exactly what I what order I want to do them in okay what else do we need oh we're going to want to be able to have a def new the new section is the that's to start a new game right so once you once you've ended the game you you lost whatever game over you want to be able to start again new is the is going to be the code that resets the game sets the score back to zero et cetera initializes everything or I should say initializes the game not initializes the whole program right which is the difference between these start a new game okay so how is this going to work well this class game just is going to define all these pieces of the game and then one when we start our program what we're going to do is we're going to make a an instance of the game object right this g4 short right and then we want to and then we want to run it right we want to have a loop that runs the game and in fact what we could do is we could have actually have a Start screen sort of like a splash screen or or whatever you want to call it right and then we're going to have some sort of loop okay and I'm going to leave that for a second okay and then we're going to say start a new game right and that's going to actually run a game and as you're playing the game you're going to do whatever you do when the game ends then we will drop to here and we can show our game over screen and the game over screen should just you know tell us that the game is over whatever things we want to show the player and wait for the wait for the press a key to play again right which goes back to you know right and if that loop ends then we're going to then we're going to quit okay and actually here's a good point to where we can save ourselves some typing right up here where we import pygame let's change that to import by game as PG all right the as in an import lets you basically rename this so we're importing PI game but we're going to say call it PG so that way here I can actually just load PG run PG quit instead of Pi game got quit you think of all the times that we have to type the word PI game this is going to help make things a little easier to read and ntype okay so what controls this loop well we're going to make a variable we're going to make a game variable so we're going to have to initialize that right so that's going to be all right so now we have a game object with a variable called running that controls whether this loop happens or not okay and we're also going to need a show start screen and a show game over screen right now most of those things will probably wait until until much later for us to fill in but we can have them here so they're ready to go okay okay so part of the reason I've done this is you would see that if we ran this program it would run with no errors it's not going to do anything right it's not going to do anything because there's no code to tell it do anything but it doesn't give us an error right if we hadn't defined show game over screen with past then this line would give us an error and we would have to not do that until we were ready to do it this way we have these blocks here and they're ready to go we can hide them right like this because I'm nowhere near ready to do the code for my Start screen but it's ready the place for it to go is ready so whenever i am i can go and drop it in there and the same with all these other pieces okay so let's start talking about how we move things over okay so this stuff here this is useful right this is the stuff that creates the game window and gets everything started so that pretty obviously needs to go into the init section right now we are going to want to replace pygame with PG so I have a few places there where I can reset that right these are object class variables so we're going to need to say self dot for the screen and self dot for the clock so now the game has a screen on a screen and a clock item assigned to it we're going to probably want to create this all sprites group in the new right because when you create the group it creates an empty one right so that would let us do that okay now so we've got our game loop and our game loop is going to be this right so this stuff is all going to go over here right what are the parts of our game loop well we know we have to do the clock bit right we have to say self clock tick right and then we also want to do the pieces of our game loop right and actually what we really want to do is we want to have this game loop start and end kind of to be our to be whether we're playing the game or not right that's how we know that this when we start our new game it should end correct so so we're going to need a variable to control that and we can say playing equals true right and if we set playing equal to false the game ends so while playing what do we need to do that's where we need to tick the clock I put that in the wrong place and then we need to do self dot events which we've defined so dot update which we've defined and self dot draw which we've defined right so there's our game loop a nice little compact game loop your game loop is to just have a loop that takes the clock checks for events checks rep excuse the updates execute the draw and that's it that's our def run all right so I'm going to hide that and what else do we have so we have our events right events is going to go into this event section so let's grab this and put that in the events section right so for event in PG event get if it's a PG quit then what do we want to have happen well we want to end everything right so if you are playing then we want to say we want set playing to false and then we also want to set running to false because running is the command that ends this loop right so you stop playing the game you also stop running the whole program you get out of everything and that's our event section so as I fill these in I'm just going to close them right now update we want to update the all sprites group right so we'll put that into update now these need to be named self and that's our whole update section alright nothing else to put in there and then we have our draw section our draw section just does these things right so if I stick those over here I have a couple of self dot screen fill black all sprites draw screen and then we want to do PG dot display dot flip okay so now we have all the pieces in here and our game should actually run oops we have a little error says game doesn't have an attribute running well we said here so here's where we set it to true ah hopefully some of you notice this typo the init the init method needs to have underlines on both sides it's double called a dunder init double underscore okay so actually I'm going to go ahead and close that since we're done with that and I just notice one other thing we forgot running is what runs the game right so we just two ways we could think about doing this right now we're calling new to set the new game up but we also need to say run the game now you could do that or you could put self dot run here and say whenever a new game starts it should just run itself right and that keeps things simpler here right and that lets us start the game actually start the game loop okay so there we have our game loop press the X program ends so hopefully this whole process made sense to you if it didn't let's walk through this one more time so when we start up our program it you know import spy game and we just abbreviated that to PG import random because we've we've had that in there because we know we're going to we know we're going to need it and then import everything from the settings file which is where we put all of these things how big the window should be and what our frame rate and colors and that kind of thing and then if we go down here right because class game I'll hide that for a second it goes down here and says make a new game object well what is the game object do well when a new game object is created it does this which is all the stuff we've done before initialize PI game create the game window set the caption create the clock and make a variable called running okay so after you've done that you should show the Start screen well show Start screen is here it's passed so it means show Start screen does actually nothing okay so this does nothing but it just skips to here and it says as long as the running variable is true and we set the running variable to true to start with then you should create a new game well what does that mean create a new game is doesn't do anything right now except create that all sprites group which we're going to use once we start making sprites and run the game and run the game right here says create the game loop make a variable called playing that controls it and then tick the clock check for events all right with the only events that we have defined here are check for the clicking the X which will make those variables false do the update which all we have an update is to update the sprites we don't really have any but they're ready to go and then do the draw which fills the screen draws whatever sprites we might have and flips the display okay if you did click the X then you end the running loop so you go to here you see I'm sorry if the game ends right we don't have anything ends the game because we're not playing then you're going to see a game over screen and game over screen is empty right now if you had clicked the X in the events we have set running to false so this loop will end and we'll just drop to PG quit and everything is over okay so next video we will start using this starting point this main dot py to start building our platform game you