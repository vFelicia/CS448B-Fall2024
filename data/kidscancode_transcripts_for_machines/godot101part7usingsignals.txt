welcome back to zero 101 this is part 7 and we're going to talk about using custom signals to communicate from one node to another alright let's get started so in the last video we made the player able to run around and pick up these gems and now we want something to happen when those gems pick up are picked up we want to increase the player's score and you might want to do some other things but as I said at the end of the last video that means we want the gem when it detects that it's been when it's been touched here when the area enter and it's used the player we want the gem to tell the main scene something but the main script is running over here on the main node and the gem is way over here in this tree and it's being instants inside the game gem container so there's two ways of going about this and one of them is the one that a lot of beginners tend to take so if you see a lot of beginner code in Godot you'll see this happening a lot and here's what they do is they go well we need to talk to the main node and if the gym is going to be inside the gem container that means I need to go up one to the level so I need to find this node in the tree and so they will do something like get node dot dot slash dot right go to levels up and on that node run let's just make a command called will make a function called gym grabbed and then over on the main you go and you add that function so we add gem grabbed and we'll just have that take we'll just have that add to the player's score and we'll just print it out for now just to see that it's working and so this is going to work and see when we grab it there it's printing out the score you know that's fine now our gem is talking to our main node but the problem is that this is very brittle and easy to break because what happens if I decide to change the structure of the tree of the main tree here then maybe it's three levels up or it's changed it also means that when you run remember we can run the gem seen as its own scene right we can run this scene but when you run this scene by itself the gem is the root node so there's no there's no node two levels up so if you have any code that does things like this it's going to break if you try and run the scene by itself and for a lot of things you want to be able to do that right when we were testing the player we just ran the scene by itself so we could see if we could move around so you want to be able to you don't want to break the individual scene functionality and so you want to do this a little differently and the way to do that in Godot is using something called signals so the gym here is a perfect example of how to do this so on the gem what we're going to do and get rid of this calling of the node above and what we're going to do is just like we were able to use the signals over here that are built into the area 2d we can actually define our own signals so we're going to define a signal called gem grabbed just using the signal keyword and when the gem gets wrapped we're going to emit that signal okay now whenever a gem gets grabbed it's going to emit that signal and then we can tell our main script to watch for that signal so what we can do is when we spawn the gem we're going to take the gem that we spawned and we're going to say G dot next we want to connect this gems gem grab signal to to a function on the mane and that function we're going to call it on gem grabbed just sticking with the standard sudo naming scheme of the on for responding to signal so we change this to being called on gem grab I'm Jim grab and then now we can run this and we will have the same kind of functionality there but now it's a lot more flexible because we're using the node signal to define what we want to do when that note tells us something so we can respond to this to the gem signal and this is a much more flexible and robust way of doing that functionality and you should try and use signals whenever you need to whenever you need to communicate from one scene to another especially especially if you ever find yourself doing that yet node dot dot find yourself doing that you're probably going to get yourself in trouble later on and you want to find a way to do it with a signal instead okay well now we have our score increasing and we want to display that on the screen now I don't want to be printing it in the console so let's add a going to add a control node and this control node is going to be called HUD headsup display this control is going to contain all of our all of our displays of information score game over anything like that stuff that we want it laid on top of the screen basically and we're going to use that to put those things in now I want this HUD to be the size of the screen so I'm going to have the control now working with control nodes they have anchor points anchor points are what part of the parent node you want to attach that side of the control node to so you need to change this to begin begin and end so so whatever so whatever coordinates I put those sides that are going to be relative to those ends beginning in it and so if I go down here to margins do the top the left of zero the top of zero if I change the right to zero and the bottom to zero now it's the same size as the parent node and we don't actually grab that and drag it around so let's lock that okay so the only thing we want to show in the HUD right now is the score so we're going to add a label node and we're going to call that score label and a label node is very simple it's just a nose it can display text and so you can type here in the detect property is the one that shows contains what you want to see on the screen so there you can see some text in pretty small font and grabbing the label and resizing it doesn't change the font size of the text to do that you have to either go down here and change the scale we could scale this node up and have bigger figure text on it or we could use a specific font you can go in here and load a specific spot how many slots ready we're going to stick with the default font for now we just want to see this score showing up on the screen so let's just set that starting text to zero that's our score at first and then an R script we're going to update the score label whenever to score changes so we will grab the score label so on ready square label is get node and this is under the HUD score label okay and then here we just do score label dot set text and we want that to be the score and that should be that so now if we play you can see our score going up all right that'll do it for the climb around I hope you enjoyed it and I will see you in the next video you