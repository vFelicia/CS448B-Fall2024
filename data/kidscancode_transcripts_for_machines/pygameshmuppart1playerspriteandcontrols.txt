and welcome back to game development with pygame today we're going to start making our first game we've learned how to create sprites and move them around on the screen and so we're ready to start making a game out of that and the first game we're going to make is called a shmoop if you haven't heard the term before shmoop is an abbreviation for shoot'emup that's any kind of game where you run around or fly around and shoot it stuff that's coming at you space invaders Galaga asteroids these are all examples of shmups you may have heard of and so for this one I thought that we would make a little spaceship that we're flying around and we're shooting at aliens or asteroids and eventually we can have all sorts of fun stuff like fancy explosions and powerups and different kinds of lasers and fun sound and music so let's get started alright let's get started on our shmoop game so I'm going to take my packing template which we made in the previous lessons and I'm going to save that as and I'm going to call this shmup okay so now we're we have a nice starting point for our project and the first thing let's do is set up our screen settings so we're going to make this a vertical game so it's going to be taller than it is wide so we're going to make the width 480 and the height about 600 that should fit on just about everybody screen and this is going to be an action game so we want it to be really fast and smooth we're going to set the FPS to 60 now that means that things are going to need to happen really fast in our loop so that the game doesn't get slow but we should be fine we're going to do anything too fancy in this first time around okay and we'll set the title of the window also to shmoop and we have a lot of things to consider before we're going to finish this game we have to figure out the player and how it moves we have to figure out shooting we have to figure out enemies and how the enemies behave we have to figure out the graphics and the sound music are there going to be powerups things like that and that's a lot of things to do and we can't do them all at once so we're going to do this step by step and the very first step is we need to get a sprite onto the screen to be our player so that we can start talking about movement so we're going to make a player sprite now you could name this you could name this ship if it's going to be a ship but you might have enemy ships that might be a confusing name I'm going to stick with just calling it player and this is going to be a PI game sprite object and if you forgot how the sprite stuff works you can look back at the last a couple of lessons where we talked about working with sprites and if you recall every sprite has a couple of mandatory things required things that you have to do for the sprite to work and one of those is we need to call the sprites the built in sprites init function without that the sprite will not work and then the two pieces that every sprite must have are an image and this image we're just going to make this be a rectangle for now it's a lot easier to just work with rectangles while you're getting everything working and then come back and change those into graphics once you have it working the way you want to so this is going to be our surface is going to I decide to make it fifty pixels wide and 40 pixels tall so it'll be a little rectangle and then I'm just going to fill that with a color and I think I'll do green and then the second mandatory piece is you have to have a rectangle a rect defined and so we will do that by using self image get rekt and let's place that on the screen somewhere convenient we're going to be having our ship down towards the bottom of the screen so let's just put it let's put the center X at width over to that will make it centered on the screen and we'll put the rect bottom equal to height oops height minus 10 that'll put it 10 pixels up from the bottom so it'll be in a nice position to start out at and then it's going to need to move side to side so we're going to set an X speed that will control how fast in pixels that sprite should move and our speed will start at zero and for our update portion of our sprite which is the things that will happen every time the animation loop happens every time the the update happens in the animation loop we need to tell it to just move its rectangle at whatever the speed is okay and right now that's zero so it won't be moving but once we start adding controls we'll have the controls change what that speed is but before we do that let's make sure that our sprite works so we'll create a new object so I'll just use the variable name player and that will be one of these player sprites and we just need to make sure that we add any sprite that we create into the sprites all sprites group so that down here in our animation game loop it gets updated and it gets drawn so let's see if we have any problems nope there we go there's our nice little green player sprite down towards the bottom of the screen ready to talk about how to control it now how do we go about making it move when we're talking about movement we're talking about we want to use the arrow keys or if you prefer a and D you can use those as well but we want to use the keys to control it now that means we want to talk about events remember we have this section of the game loop was dealing with events events again are any any anything that might happen outside of your game that you want the game to know about like someone clicking the mouse button someone pushing a key on the keyboard and then you can write some code for what the program should do when that event happens now we have a couple of options here when we talk about using the arrow keys to control the sprite now one way is right down in here in our event queue we could say if the left arrow key was pressed so there'll be another event for that so if the left arrow key was pressed then we tell the player sprite to move to the left and then we would appear in our player sprite define some command called move left or or maybe just move that could be left or right and that would set the speed to the appropriate speed in the case of left we want it to go to a negative value so it goes this way and in the case of right we want to go to a positive value so it goes this way but that means that when you press the left arrow key the sprite will start moving to the left and then when you let go the o left arrow key it will keep moving to the left and while that might be a way you want to control things in some games where your sprite can't actually stop moving in our case that's going to be kind of frustrating because then we would have to make two more or two more events for the left key getting released and the right key getting released and make those set the speed back to zero so it starts to get kind of cumbersome so instead what we're going to do is we're going to tell our sprite right here in our update section we're going to tell our sprite that your speed should always be zero okay first thing just you shouldn't be moving and then we're going to check and see is the key down if the key is down then you can move so you're always sitting still unless the key is pressed down so the way that we do that is we have to find out what keys are down okay and the way you do that is there's a command in PI game called PI game key get pressed and get pressed will give us back a list and that list will be every key on the keyboard that happens to be down right at this instant so if three or four different keys are held down at the same time you would know about all of them so once we have that list we can say if the key state of Pi game UK left all right that's the left arrow key is down then we're going to set the speed X to negative say it's five and we'll see how we like that speed and if the key state of the right key is down then we're going to set the speed to five okay and that makes things a little simpler so that it always moves as long as you hold it down and as soon as you let go it will stop so if we try that out you can see when I press lefty goes left and when I let go it stops so I can you know if I want to move quickly I can move back and forth between the keys and I can control how he moves now we still need to deal with the edges of the screen if you remember in the sprite example we made this we made the sprite wraparound so that if you went off this side you would come back in on this side but I think for this game I want the sides to be walls so that I can't go past the edge so we just want to tell the sprite here that if the rect if the right edge of the sprite ever tries to get bigger to go past the right side of the screen never tries to get greater than width then we're just going to set the right equal to width so that way the right coordinate can never get bigger than whatever our width is and just the same on the left side we're going to say if it ever tries to get less than zero then we're going to set the rect left equal to zero okay that way I will be nicely stuck on the screen or constrained as programmers like to say so I'm constrained to say on the screen so that's some pretty simple movement if you'd prefer to use different keys for example if you want left to be the a key and you want right to be the D key that's how you would do that if you'd like the sprite to move faster as you can imagine you could do something like that and make the speed a little bit faster and now when we move it's a lot quicker you can play around with that get it the way you like it remember if you make it too fast you're basically going to just teleport from one side to the other and you'll never be able to stop in the middle because you won't be fast enough your fingers won't be fast enough to let go so find a comfortable speed that you like and in the next lesson we will start talking about adding some enemies