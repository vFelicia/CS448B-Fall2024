in this video I want to work a little bit deeper at the kinematic body to denote specifically how to handle collisions with objects so that you can as in this example have goodlooking bounces and responses to the collisions with the objects in your game so let's take a look here at the basic structure of a kinematic body 2d scene so we start with the body itself and then it's going to have two children and sprite and a collision shape the sprite is just going to be the texture so you have an appearance for the nodes you can see it when it moves around on the screen and the collision shape I've just made a circular collision shape here because that matches the shape of the sprite that I'm using and when we move a kinematic body to D we want to use the Move method you give it a vector that represents the distance and the direction that you want to move and it will automatically stop if it collides with an obstacle that obstacle can be any other physics body the kinematic body static body or a rigid body and then it's going to return to you a vector representing how much of the movement was left when it stopped so let's look at that a little more in detail so here's our object that we want to move the gray vector is the vector that we want to move the body along but we have this green obstacle but it's going to collide with so when we call the move method on the body it's actually going to stop when it hits the obstacle and it's going to give us this red vector which represents the remaining motion that it wasn't able to complete and when once we have that we have two choices of what we can do in response that's why I have two examples here so when we hit the surface we can either continue along it sliding along the surface or we can bounce off of it reflecting the movement off of it like light off of the mirror and to do that we need the normal of the surface when you collide with an object you can request it's normal the normal is a vector that represents it's a perpendicular vector to the surface itself so in this way we can tell what direction the surface is facing and what direction the surface that we hit is facing and now we can use that normal to do our collision response and these are the two options if we use that normal to slide the remaining motion then it will move the body parallel to the surface within the distance that the component of the remaining motion is in that direction you see the length of this yellow arrow is not the same as the length of this red one but it is along the x axis the same distance or we can use that normal to reflect the remaining motion which means it's going to use the same angle that it came in on the angle of incidence is going to equal the angle of reflection it's going to bounce off at the same angle these are your two options for how you can respond to the collision with an object so let's look at this in action when I click the mouse I will spawn a ball that green vector is representing its velocity and you can see since I set it to reflect it's going to bounce off at the proper angle I've also created this round obstacle in the middle so that you can see if I spawn a whole bunch of them and they hit it at various angles they will bounce off from the normal of the curved surface just as well as they do from the normal of the horizontal surface and so you can see the length of the green vector doesn't change the velocity remains steady and it just looks like it bounces now alternatively they had space to toggle to slide mode you can see that when the ball hits the surface that green arrow got a little bit shorter because it's only using the horizontal component of the remaining velocity and so if you hit it at a slower speed you are going to only have a little bit of that motion left and that's true of hitting the round surface as well so slide you want to use when for example you have a platformer and you want the player when they land on the surface to still be able to walk along it things like that if we look at the code here you can see there's not a whole lot that's involved I basically have I'm moving the ball at its velocity capturing that remaining motion in this variable motion and then if we collide if we are colliding with an object we get the normal we get that normal vector and then so that we could show both examples I have a reflect variable that's puzzling whether it's going to reflect our slide if we reflect we use the reflect vector method on the motion and on the velocity and if we slide we do the same thing but just use slide and then you move you move one more time to move with the remaining motion that has been altered by your reflector slide now I also included this bounce coefficient in here if you download the project and play around with it you can set this to a lower value set this to lower than one you can see the effect of losing some energy every time it bounces in it'll it'll slow down as it bounces around there's one other very important thing I'll show you so here we have our shape our collision shape is a circle right and you use the inner handle here to set its size but something I see happen quite frequently with students is that they wind up grabbing V outline handles my mistake right and they want to kind of size it like this this need to go out a little bit more right and they wind up having the circle be scaled which you can see here this skate this is now been scaled and the problem is that when you run this you're going to see some problems with your collisions see that especially shows up when you hit the round surface but if you're having glitchy collisions with your kinematic body to be very very important that you go and you check that your collision shape has not been scaled this skill property should never be anything but one by one always use the inner handle to drag it also if you shifted it offcenter you can set this back to 0 0 so it will be centered on the parent kinematic body shape ok this is true of the kinematic body itself as well you don't want to scale that right if you scale that you're going to get some weird collision stuff happening too so that will do it for this video hopefully you have a better understanding of how the kinematic body collisions and collision response works go ahead and download this project at the link below in the description if you want to try it out and experimental is it with it yourself and I will see you in the next video you