in this Godot recipe we'll look at how to make a 2d topdown car controller so here's our car and we want it to move in a somewhat realistic manner so let's start first by talking about what not to do a lot of beginners when they first start working on a car will rotate the car around its center like this so when you try and turn car rotates around its center but that's not how cars work right if you did this then the back wheels would be sliding sideways along the ground the way a car works is that the front wheels are the only ones that turn and the rear just sort of follows along so instead of this motion which when you move forward would make you go that way what we want to do if you're turning is you should go that way now there are a lot of approaches to coating your car physics and they mainly depend on how realistic you want them to be how much detail you want to include for this solution we're gonna go for more of an arcade level of realism so we're not going to worry about a lot of the fiddly little details we just want a fun steerable car that we can drive around the track and so we're gonna prioritize the action over the realism but that doesn't mean we can't incorporate a little bit of realworld physics in our simulation so the approach we're going to take is following this article on engineering net which I highly recommend reading it's very short it literally is six lines of code to handle your car steering and the way it works is you basically simulate the wheels but we only need to simulate two wheels and so it's called a bicycle simulation so instead of doing all four wheels we're just going to have one front wheel and one rear wheel and the front wheel can turn the realreal cannot and they will both move forward in the direction they're pointing so back over to our car what that is going to look like is this so this is this would be the wheel locations and when you turn the front wheel will turn or not and that will guide the car in the direction that it's supposed to go all right here's our car scene I've got a sprite here of the car I've got a collision shape I'm going to use a capsule shape because that will allow the front to be a little bit curved and so if you run up against a wall you'll be able to kind of turn along it and not get stuck by a sharp corner and then we're also going to add a camera so that the camera will follow the car as we drive around and we can also put a little bit of zoom on here I'm going to put to zoom out a little bit and give us a view of the course ahead of us so let's start talking about how we're going to script this and I'm going to break this down into multiple steps so we're gonna do this one part at a time and each of these parts is somewhat optional and you can mix and match to get the kind of car behavior you want but we need to start with movement so a couple things we need to define one is the wheelbase that's how far apart of the two wheels are right what's the distance between the two wheels and this is gonna be based on your sprite and then there's the steering angle that's how far does your front wheel turn when you turn when you press the turn button now we're going to be doing keyboard controls here so you're either turning or you're not so you push the right arrow or the D button and your wheel turns to the right and this is how far it's going to turn if you're using an analog stick you can have this vary based on how far you push the stick but that will be something for another video so this is going to be we're going to call this 15 degrees then we're going to have our velocity vector and we're going to have our steering Direction what direction are we turning in and this could be in this case zero positive 15 or negative 15 for turning left or right that'll be calculated based on our input and so then we're gonna have our physics process in the physics process we want to get our input which will write a separate function for we're gonna calculate our steering which will also write a function for and then we'll use that to set the velocity and then we'll call move and slide with that velocity so let's start with get input the way that get input is going to work is we need to determine whether we're turning or not so we might be going forward if we're not pressing any key turn is going to be zero and then if we press the keys now I'm going to use I've set up actions for these and they are steer left and steer right and I've mapped them to the arrow keys and the WASD keys so that you can use whichever one you want so we do that and then we'll do the same thing for steering left steering left is going to be negative one and then now we know our steer angle I'm sorry our steer direction is that value times the steering angle so we'll have a plus fifteen or minus fifteen based on which key we press and our velocity we also need to set to zero to determine whether we're moving or not and if we've pressed accelerate which is our forward button then we'll set the velocity equal to transform X which is our forward vector times whatever speed I'm just gonna put 500 here because we're gonna come back and change this in a few minutes I just want to put something there temporarily to test it out and make sure that we can turn now we'll talk about calculating the steering and this is the algorithm from that website which is linked below as well if you want to go read the details so the first thing we need to do is figure out what's the location of the front and rear wheels well the rear rear wheel is at our position whatever the position of the car is minus transformed x times wheelbase over to right half the wheelbase it's half the wheelbase behind the cars position cars position is the center of the sprite and then the front wheel is just the opposite all right so right now that's where the wheels are located and then they're gonna move by moving forward at the velocity so rear wheel we add our velocity times Delta that's how far the rear wheel moved forward this frame and then the front wheel we need to pass in Delta through this so when we call calculate steering when you press pass in Delta so that we can calculate the frame movement now the front wheel goes forward by the velocity but needs to be rotated by the steer direction times Delta R so whilst there so now we know that how far the rear wheel moved forward and how far the front wheel moved forward and now they're gonna be in different places right so they have now become offset so we have a new heading a new direction that we're facing and that new heading is just the front wheel the rear wheel location and I'm going to normalize it so that's our new direction that we're pointing and our velocity should now be changed to that so we take our new heading keep the length and then we want to rotate the sprite as well to point in the same direction so let's try this out I've created a world scene here which is a tile map that's got some a course laid out here with a big open area and some tracks for us to drive along and I've added the car to it so let's try this out and now if I press forward the car moves forward if I press turn the car turns now we're turning really sharply ah I know why so over here we got a mistake here I put steering angle 15 degrees since this is a humanreadable angle it's useful to use degrees but the car in the code is going to use radians so this needs to be dug to read there we go and that's gonna be a little better yeah so now you see we're turning we have a turning radius and then when I let go we just instantly stop and that's because we have not implemented any kind of acceleration so our speed is constant and that will be the next part all right so let's add a new setting variable up here called engine power and that will let us make cars accelerate quickly or slowly and then we'll need a variable to track that and get our acceleration and that's also a vector and now we're going to use that acceleration when we calculate our movement so in our physics process we're going to set acceleration equal to zero each frame before we calculate it in our get input I'm going to be doing velocity anymore we're gonna be doing acceleration and we're setting that equal to whatever the engine power is and then in our physics process now we've calculated steering we've got what our acceleration is we can set our velocity based on that at our acceleration to our velocity and we should be good so let's take a look at that so now you can see I come up to speed but now I'm gonna continue to get faster and faster I'm not accelerating I'm not holding the accelerate button anymore because we don't have anything slowing us down we need some kind of friction force to slow us down so cars experience two kinds of friction or two kinds of negative forces that slow them down there's friction which is the force against the ground so if you're driving on sand friction is high if you're driving on ice fiction is low but then there's also drag and drag is the wind resistance and that's based on the cross section of the car right a big square truck has a higher drag than a sleek racing car and so we're gonna do both of those and the other thing that those bias is those are gonna also give us a maximum speed they're gonna give us a point where the engine power can't accelerate anymore against the force of the friction so we're gonna have a friction force and the friction is gonna be the amount that we're slowed down by the ground so I'm gonna set that to 0.9 and it's negative because it's in the going to be in the reverse direction that we're going and drag and drag is going to be a very small number and the reason drag is a very small number is that friction is based on your velocity the faster you're going the higher the friction force drag is based on the square of your velocity so when you're moving in a slow speed friction is going to be more significant but when you're moving at a high speed drag quickly becomes more significant than friction and that's going to really be what determines your maximum speed so in our physics process after we get input we can apply friction and we will write our function for that and this is not too complicated what we have to do is first friction is going to be slowing us down right and that means that when we get to a really low speed it's just going to continually be decelerating it so we could be moving at a very very slow speed and we don't want that at a certain point you have to just stop so if our velocity length is less than five five is a pretty small number then velocity dot should be equal to vector 2.0 and that's just so that we don't have a speed oh you know 0.0001 and then oh oh one and so forth and friction force yeah we're gonna calculate now is equal to velocity times friction right friction is negative so it's gonna be a force opposite the direction we're going and then the drag force similarly is velocity but we also need to multiply the velocity by the velocity length because it's that'll give us a force proportional to the velocity squared times what if our drag factor is and then we set our acceleration based on that acceleration we add the drag force and we add the friction force and that should do it so let's try that out here and now you can see me coming up to speed and then when I let go I coast to a stop and I'm gonna hold down accelerate and you can see I've reached a maximum speed now I can't go any faster than I'm going right now now we're going to talk about brakes applying the brakes so we can slow down and also so that we can reverse and we're going to set braking that's the kind of like engine power that's how quickly the brakes will reduce your speed so it's a deceleration and then I'm also going to set a max speed reverse that is not as high as the forward speed is going to be so we shouldn't be able to go maximum speed in Reverse and so now we have those we're going to in our get input we're going to check for that input as well so if if we've pressing the brake input and our acceleration needs to be transformed got x times braking and then that will slow us down but it's not gonna let us go in Reverse which you'll see if we try here if I press the brakes yeah came to a stop really fast but I'm holding down brake and I'm only kind of creeping backwards and that's not great because it's still trying to decelerate us but we wanted to move us backwards so here in our calculate steering we're figuring out our new heading and our new heading is a vector pointing forward and when we're accelerating those two vectors in the same direction but when we're going in Reverse we want to go opposite the direction of the heading and so to fix that we need to figure out whether we're trying to go opposite or the same direction as our new heading and we can do that with the dot product the dot product of our new heading with our velocity is going to give us a value between 1 and negative 1 a value greater than zero is a vector pointing in the same direction so if V is greater than zero then we're going forward that's what we're doing but if we get a value of D that's less than zero that means we're trying to go in Reverse so we want our velocity to be opposite the new heading and we multiple gonna multiply that by the minimum of velocity that length max speed reverse and so that way we can go faster than the reverse speed and so that should let us go in Reverse so now if I press reverse I'm going backwards and that'll let us get out of those situations where we run into the wall and we can reverse out so one last thing we want to do here I know this is getting to be a little bit long is we want to talk about drifting or sliding and so the way it works right now is that we when we turn we are instantaneously changing our velocity to the new heading but above a certain speed we want that to take longer there needs to be some sliding happening to till we can reach our new turning velocity and so we're gonna set that up here we're gonna set a couple variables one called slip speed this is the speed above which you start sliding and then we're gonna have attraction fast which is how slippery it is when you're above that speed and attraction slow which is what it is when you're below it so when you're going slowly right if either of these are 1.0 then it's gonna be what we have right now and so we could set this you know to two different values based on your speed and so down here what we're going to do is we're gonna set that attraction to the attraction slow unless we're above a certain speed so but if velocity dot length is greater than slip speed then traction should be traction fast and then what that means is here we're going to change this so that our velocity is now going to linear interpolate to that new heading based on our traction and let's take a look at what that looks like when we run it so now when I get going to ice because you see how I'm sliding around but when I get to a low speed I'm turning a little more I'm turning consistently but when I get up to that high speed I start sliding so that about does it for the car steering I hope this was helpful to you there are a lot of settings to adjust with all the traction and the friction and so on so if you download the attached project I have added a control panel which you can enable with tab which will let you adjust all of these settings so you can see as I'm driving around I can change the traction and be no sliding or lots of sliding and you can you know you can change all these different values increase the engine power decrease the engine power and so on and hopefully that will help you find whatever settings you need for your particular style of game thanks for watching please ask your questions in the comment section below don't forget to Like and subscribe and I will see you in a future video this tutorial is part of my nugudo recipes website the goal is to collect all the best tips and lessons to help make you a better at Godot developer if you liked this video I hope you'll go and check out the site and make sure to hit subscribe so you'll be notified whenever I release new videos thanks for watching