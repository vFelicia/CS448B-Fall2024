welcome to the third and final part of the procedural dungeon generation tutorial for Godot 3 and this one we're going to wrap up and actually make our explorable dungeon that we can wander around in and has rooms and corridors all connected together so we have our dungeon rooms and pathway of getting generated this is going to be the last step we need to turn this into a tile map that we can walk around on so we're going to use a tile map node we're going to add that to the main and what we need to do the time up is we need to set the cell size to 32 by 32 because that's the size of the tiles we're using and in the downloads you can go and grab the tiles resource and drop that into tile set it's a really simple tile set that just has two tiles in it a grass tile and a stone tile the stone is going to be the walls and the grass is walkable if you want to use your own tiles that's fine you really just need to make the first tile tile number zero the walkable tile and town number one the tile with the collision shape on it so let's erase that and we're ready to go now since we have the visualization running of the room spreading out in the path being drawn and I want to keep that we're going to manually trigger making the map so here on our input we're going to add a new event and we're going to say press the tab key and pressing the tab key is let's see Sui focus next is the tab key we're going to call make map with that and that's going to generate our tile map so let's put that we can actually collapse find MST we'll probably need some do some drawing later but I'm going to collapse that for now make rooms is good okay so let's define make map so this is the this is the function that's going to create a tile map from the generated rooms and paths so we'll start with map dot clear and what that does that's a tile map node oh also I'm going to go up here to the top and I'm going to add a reference to the map just so that I don't have to type dollar sign tile map and have it do look up every time I want to access them Tom appt node and so calling clear is going to erase any tiles that exist so that if we're regenerating this we clear it out first and what we're going to do is we're going to take this area that it generated we're going to make this fill this whole area in with solid tiles we're all going to set them all to tile number one and then carve out the rooms and path with the walkable tiles tile number zero so first we need to figure out how big is the rectangle that encloses all of the rooms we make and then fill time map with walls then carve empty rows so we're going to make a variable called full rect that's going to be the full rectangle that encloses our entire map so these are easiest way to do that it's going to be to use one of the rectangle two functions called merge so we're going to loop through all the rooms and for each one we're going to get its rectangle and its rectangle is going to be its position room size is the that's the top left and then the size is going to be room dot let's actually do this on the next slides it's kind of long and we're going to get the collision shape to denote the collision rectangle and we're going to get its shape extents and they remember the extents are the half width so we multiplied by two to get the full width and that is our rectangle shape that describes the room and then we just take our full rect and we call merge on it and that creates a rectangle that encloses both of them then we look through the do the next one and the next one and so on for this full rect the top left of the map is going to be world map full erect dot position so that gives us the top left position of our map in our time out and the bottom right is the same for the lower end so now we have the two corners and we can now loop through all of those and change every tile to tile number one so we're going to want to go from top left X to bottom right dot y I'm sorry bottom right dot X and then in Y from top left to the bottom right dot Y and set that cell X Y 1 now we'll have a solid map and we can even test that out if we let it do it and then press tab and now we've made a full rectangle and now we weren't able to see our drawings anymore because the tile map is a child of main and maintenance where the drawing is happening so if you take the tile map node and cut under visibility and click show behind a parent then we'll be able to still see our drawings behind the generated Tama now I will point out here if your map is really really big this might take a little bit of time for it to generate and that might be something you have to deal with if you're doing a large map you could also pre set your map to be solid and then you wouldn't have to calculate any of this you would just carve out the bits you wanted it's probably the more efficient way to do it but for the purposes of our demo we refine the way we're doing it right now okay the next step is to carve the rooms and the corridors so first we'll loop through the rooms and convert their coordinates into map space and then carve out each rectangle into the grass tiles let's go over to our script here and that's going to go here right after we've filled it all we're going to carve the rooms and so what we're going to do is loop through the rows and for each room we need the to get the kind of size of the room and what we're going to do is take the room the room size divided by the tile size and we're going to take the floor of that so that we get a whole number you can only do tiles in whole numbers the position of the room is world to map room dot position and then the upper left of them of the particularly on is room dot position / tile size dot floor s so remember the room dot position is actually the center of the room so this is the center of the room in tile space and then we back to the left and up by the size so now we can loop through these four X and range to sx x 1 + y and range the same for the y and so why am i doing that why am i not starting at zero because i want to leave a little bit of room between the rooms where the collision shapes separate them until so that the rooms are all touching so when i carve them out i want to carve out the inside a little bit so that two adjacent rooms will still have a wall between them and it wouldn't be carved into one big empty space so now we can set cell UL dot x + x uo dot y + y 0 and now when we run this we should see it carving out our rooms so we press tab and now we have rooms carved out everywhere we collected a room so now we need to do the same thing using the path a star node that we have that connects the rooms so everywhere there's a connection say between this room in this room we need to carve a path between these two points so since we're already looping through the rooms and going room by room we can do that in the same room loop so what we're gonna do is before we start I'm going to make a variable so I want to keep track of which corridors I've already done because I don't want to have to carve the same corridor twice so I only want to carve here I'll run this again so that we have a picture to look at so I'm looping through the rooms when I carve out this room I want to carve this corridor when I carve out this room I don't want to have to carve this corridor again so because if I did then not only am i doing everything twice but I might wind up with car being you know you'll as you'll see later say connecting these two rooms I could go this way and then up or I could go this way and then down and if I carved twice I might carve both of those and then I've got double the connections so this will be one corridor per connection so after we've carved the room we will carve the connection and we're going to do that by getting by using our path and getting the closest point to the position that we that the room is at so remember the path uses vector threes so we have to do room dot position X room dot position y zero and then for and then for each connection I'm going to abbreviate to connection to con path get point connection P connections P alright because each room might have more than one room it it connects to so we need to connect carve each of those connections so if not con and corridor is as long as we haven't already done it then we'll do it and then we need to figure out the start point and the end point so the start point is got a convert to map space vector to get point position P dot X just notice that yes and again this is because of the fact that it's got that get point position is going to return a vector three so paths that get point position dot y and then end is going to be the same thing except with the connection so we can copy this line and duplicate it and the endpoint of our corridor is the same thing except with whichever that connecting point is and once I have the start and the end I can carve a path from start to end and now that I've done it that I've done that connection I can say clora doors dot append that point so now that point won't ever get card from again because I've done all the connections so now we need to just define this carved path function carve path this carves any path from position 1 to position 2 in the map get some blank space here so first so this function does is carve a path between two points and this is pretty straightforward we just need to figure out whether we're going in the X what are we going to the right or the left and in the why are we going up or down so the X difference is the sign of position 2 X position 1 dot X right is that sign will return positive or negative and same thing with the Y so now this way we know what direction we need to carve in and then the only issue we're going to have here because we're gonna use this to do a loop right and either count from X going upwards or account from X going downwards but we do need to deal with the fact that if pause x + 2 plus 1 is 0 because they're on the same you know they're vertically aligned or they're horizontal horizontally aligned we can say if X if equals 0 then let's just pick a random one and to pick a random number to pick either random negative 1 or positive 1 we take 0 negative 1 and we round it to a random integer from 0 to 1 X negative 1 to the 0 power is 1 and negative 1 to the 1 power is negative 1 just do that with both x and y and this is also going to help us with something that we're gonna do in a minute as well so you'll see why we did that if it doesn't seem necessary yet so now our choice is we need to decide whether we go so now we need to decide whether we go for example let's say we're looking at these two rooms on the right we could carve in the X this way and then the Y upwards or we could carve in the Y upwards and then the X this way alright so whichever one we decide should the you know should the horizontal portion be at the lower y coordinate or the upper one and vice versa so we can choose that randomly so that sometimes it'll choose to go this way and sometimes it will choose to go that way so we'll do that here by saying so this is choose we'll choose to either do X and then Y or Y and then X so X Y and then Y at Google pause so this is going to be the one option and then if grand I percent 2 is greater than zero right then we have two 5050 chance of doing the opposite so now we know so now we've chosen to either do the X first or the Y first and then we can do the loops so first we'll do the horizontal one so we're going to go from position 1 X to position 2 X by the X difference and when we set cell X and then X Y dot Y comma 0 and then we do 4y and range pause one dot y + 2 dot y by the wide if map dots it so Y X X comma y 0 now we're almost there but let's take a look at what this does when we hit it you see we've got some quarters now but the one thing I don't like about these quarters is they are there are only one tile wide which means that they're gonna be really narrow and I'd prefer if they were if we also went one to the right or the left or the top of the bottom to make them two tiles wide and that's why we used this because we can just add this value to increase or decrease the X&Y and make them carve the second tile or the second adjacent tile so we'll also set cell x and X Y dot y plus y difference this is to widen the corridor and we got to do that in both okay and then now we will have wider corridors there we go so see this one these are two tiles wide and also you'll notice if I press tab and have it recarved right it's choosing randomly sometimes to go one way and sometimes go the other but we always get every room connected and then we get some interesting intersections too when they overlap like this one so get a little tjunction there okay so it's about time to wrap this up so I included in the starter project a character scene that's a topdown character that you can control with the arrow keys that use kinematic body that uses moving slides so that it will collide with the walls and then I've also added a start room and an end room variable so we know where the player should start and where the player's goal should be we're going to keep track of whether we're in play mode with meaning where are we walking around on the map or not or are we looking at it generate and then the player itself will be instance when we transition into play mode so couple things here in draw I loaded a font here and I'm just going to label the star trim in the end room if they exist and if it's play mode I'm going to drop out of draw and not draw the rooms in the path anymore so we don't need those when we're in play mode and then in the input what I've done is when you press the spacebar because you want to restart and generate a new map we're going to delete the player and drop out of play mode and we're going to clear out the star room and end room as well and how do you go into play mode well we're gonna press escape and that's going to instance the player and put it in the start room and that means that now when we run it we're going to generate our path we're going to press tab and generate the tile map which we can see and I'm going to press escape and we have our player here and the player also has a camera that zooms in and out if you want to see more of the map but now I can walk around the map and find my way to the end room wherever it was which is probably going to be far away from me on this one I believe it was way over here to the right because the start and end functions are just finding the leftmost room to be the start room and the rightmost room to be end room however that winds up working all right and so that is our randomly generated dungeon now obviously the dungeon itself is pretty boring it's kind of plain decorating the dungeon and populating it with treasure monsters and things like that is beyond the scope of this demo but it would probably make for a really good future one so if you have thoughts and suggestions on that please leave them in the comments below hopefully this these algorithms and this procedure is useful to you in generating your own dungeons or at least giving you a starting point to think about how you want to do it for your particular project either way I look forward to hearing about your questions and comments below and I will see you in the next lesson you