welcome back to game development with pame this is part four of our tile based game project and in this video and this is a big one we're going to be introducing the concept of a scrolling map and the idea of a camera that follows the player ready let's get started all right the first thing we want to do is we want to make our map loading a little bit more flexible down the road we're probably going to want to load uh multiple Maps um have different layouts to our game World things like that so I'm going to take this code right here where we load the map file and I've made a new file called til map. py and I'm going to define a class called map and we initialize that just by telling it the file name that we want to load and in there we're going to put that that code and instead of loading map. map data we're just going to name that data so the maps data is that list where we put all of the map tiles and then this will be the F name so we load the file name send it the file name it opens the file reads it all in puts it in self. dat but then I also want to add a couple of properties okay so that we can keep track of how big our map is I'm going to call this the tile width and that's how many tiles wide is the map well that's just the length of uh one of the lines so if I take line zero that's how many tiles wide my map is the tile height is just going to be the length of the list as a whole right because the list is a list of lines so how many lines is it long that's the height we'll also have we also we'll probably want to know and it'll be useful to know the pixel width of the map and that's just going to be the tile width times however big our tiles actually are and height will be the same and then won't know what tile size is unless we import settings all right there we go that's our new uh map object to finded so over here all we have to do instead of this is we'll open we'll take this file name and we're just going to say self. map equals map with that file name so we created a new map so we need to import that and then here where we go through and read we're just going to read whatever the maps. DAT is and now we are what did we do we did not indent properly there we go all right so now we're back to where we were we're loading our map and we're a little more flexible all right but what if we want to have a map that's bigger than the screen right so that we can walk around larger area well I've made a quick little map two where I just made a much bigger map and if in my program I loaded that map 2 then we only be able to see the corner of it right I can't get down to the rest of the map so what we want to do is we want the screen we want to scroll when we move across this map or another way to look at it is we want the camera to follow the player and move along with him now technically we don't really have a camera all we have is a game window where we're drawing pixels right but it's very convenient to use the term camera to refer to the portion of the map that you're seeing so that's what we want to do and so we're going to define a camera object over here okay now this camera how is this camera going to work well let's look at a little example so here's a little demo I mocked up the red rectangle is our screen that's how big our game window is and there's our little player in the middle of it but our map is quite a bit bigger it's twice as wide and twice as tall as the screen is and you can see here our player right now is at tile position 16 12 so he's 16 tiles over and 12 tiles down so what do we want to do when we move if I move to the right I basically want the map to shift to the left like that and as I move further it's shifting further so you can see how that looks if I move up same same idea but we don't want to actually change the coordinates of all these tiles right so move down a little bit this tile right here at the edge of the map is at tile position 0 0 on the map I don't want that to move or I don't want that to change it's still in the same place on the map all I really want to do is I just want to draw the map shifted by some offset so see as I move to the side I'm just drawing the map six tiles shifted to the left the player you can see stays mapped to a coordinate on the map so as he gets down he's getting to the bottom right of the map his tile position gets it's bigger but on the screen his actual location on the screen hasn't changed he's still centered on the screen he's still you know being drawn at those pixels so to keep everything consistent the easiest way to do this and and trust me there are lots of ways to do scrolling cameras but we're going to try and stick to a the simple simplest but most flexible one that we can do um in our situation and that's going to be to just keep track of an offset that will be how far to the left or right up and down do we want to draw all the objects on the map and that'll include any mobs we have running around on it anything like that as well we just want to shift our drawing over okay hopefully that explanation made a little bit of sense and you'll see how it works when we start implementing it so so our camera we're going to just tell it how wide and how tall it needs to be okay so and we're just going to use a rectangle to track this okay we're just going to use a rectangle to track it and I'm also going to name those just so they're easy to refer to we have our camera okay now our camera is going to need to do two things it's going to need to shift the drawing rectangle of anything we try and draw and it's also going to need to update itself to track where the player is whenever the player moves it needs to update whatever that offset is and that offset is going to be tracked in the this rectangle this rectangle is just going to keep track of how far to the left or right up and down do we need to shift all the drawing so the apply portion so applying it to an object we're just going to send it and I'm going to call this an entity because we might sh send it you know a Sprite that's running around the screen a mob a wall whatever okay and all it's going to do is it's going to return that entity that entity will have a rectangle right because it's a Sprite and it's going to move that rectangle by whatever our camera coordinates are this move command when you apply it to a rect gives you a new rectangle that's shifted by this amount so in our example so in our example program open up again when I have moved moved one square to the right the offset is now minus1 multiply that by 32 and that's how many pixels we're going to shift so this will be minus 32 so it will move that rectangles or that entity's rectangle 32 pixels to the left for for it to know where to draw okay and now for our for our update uh what we're going to do is we're going to have it follow a Sprite right which is going to be the player we want to update ourselves to follow that Sprite so that means we need to adjust where the X and Y of our where the X and Y of our camera are going to shift to okay so we want to shift remember we're going in the we need to go in the opposite direction of the player the player moves to the right so the offset moves to the left so we're going to take the minus of the Target w.x and we're going to add half the screen size because we want to keep the the player centered uh centered on the screen right and the same thing with the other direction hyp over two and then we just adjust what our camera rectangle is oops pd. rect the rectangle is now going to be that X and Y it stays the same size okay so there's our camera that's all we need so now we need to adjust our game Loop to use that camera so in Def new I'm going to spawn the camera so we'll call it camera and it's going to use the map width and map height so we know how big our total play area is that the camera can occupy and then we're going to go down to our update section and in the update section we need to make sure that the camera updates so we use our update function and we're going to track the player and then the last but not least we need to go down here to draw now right now we're saying all Sprites do draw but we need to change that and in fact all the all Sprites do draw command does is this it says for sprite in all in all Sprites screen blit sprite. image sprite. R that's that's exactly the same thing this is a this is what all Sprites do draw is a shortcut for looping through every Sprite in the group and blitting it on the screen in the location it's supposed to be so what we want to do now is instead of blitting it at this location where the rectangle thinks it is right where the Sprite thinks it is we want the Sprite to continue thinking it's where it is because it's it's tracking where it is on the map and that's fine but what we want to do is we want to change this to camera. apply right and so we take the camera and we apply it to that Sprite okay so now we're ready to test it out and I just noticed that I made a typo here our s. camera is a camera problems of talking while you're typing so we spawn our camera we update it every Loop and then we're going to draw things using the camera so let's see what happens okay there we are now if I move down look my map is scrolling and I can see all the edges I'm still colliding because the Collision code and the Sprite movement code and everything doesn't even know about any of this scrolling right we didn't change it at all the coordinates of the rectangles are just they just keep increasing as I move to the right and they and as I move to the left and they think they're still drawn in the original location they were they don't care but I can run around anywhere on the map and all the walls will still be working correctly and that's great but what about this what about all this area out here I'm at the edge of the map now and so we don't have anything here so what would we draw here we don't want just a big chunk of empty space right what we'd really like to do is have it stop scrolling when you know I reach this little thing is in the way let's try a different corner I want it to stop scrolling when I reach you know about right here right so I can see the edge of my map but if I keep going to the right my player should just move until he hits this wall but the map doesn't scroll anymore so we need to set some limits on the scrolling based on the width of the total width of the map so to do that let's look at our demo again for a second so here I am scrolling around now let's let's let's talk about the left hand side right so as I move to the left the offset is getting closer and closer to zero right when I'm right here the offset is the X offset is zero so we're just looking at the X right now and if I take a step to the left the offset becomes positive one right which is 32 pixels right and it keeps getting bigger so what I want is when I'm over here I want the offsite to keep changing but when I get here I want it to stop so that means the offset the maximum value the offset can have is zero right I never wanted to go into the positive numbers to do the left hand side so I can do that by we will going to give a little Gap here and this is going to be limit scrolling to Map size okay so we need to set of we need to make sure X is never bigger than zero we use that we do that by using the Min function so we're just going to say x is the minimum of whatever zero or X are so if x is one right so if we calculated that we should be shifted by one zero is smaller than one so X will stay zero and we can see that that'll just work for that left hand side now see I didn't scroll I can scroll to the right and the other walls still go past like they were doing before but now as I'm scrolling to the left when I when the offset reaches zero it can't go any bigger and I can't go off there okay now on the right hand side or we can do let's do the same thing with the bottom since the bottom will be nice and simple okay so this does the left right and we do the same thing for uh y to do to the top okay that'll take care of our left and top those are easy okay but let's talk about the right and the bottom so if we look at our demo one more time as I scroll to the right the offset is getting more and more and more negative and when I reach right here which is where I want to stop my offset is minus 32 that's 32 tiles and we know 32 * 32 is 1024 so my offset is now netive 1,24 and I don't want it to get any smaller than that so the minimum that the offset can be is negative 1,24 or in other words negative the difference between the width of the whole map and the width of the camera or sorry the width of the screen so to do that we're going to go oops we're going to go back over here and we're going to set the maximums to these things the maximum and remember on that example we just saw it was negative so we're going to say negative whatever the width of the camera is that's 248 at the moment minus the width of the screen which is 1,24 comma X and the same thing with Y where we're going to say the height minus the height of the screen Y and this one does the right and this one does the bottom okay and that will do all four sides so let's go and try it out now if I scroll down I'm going to stop when I reach the bottom and if I scroll right I'm going to stop when I reach the right uh but there's a little Gap there and I'm going to talk about why that is in just a second but go ahead and try this out so we scrolling in every direction we've got limit to all four sides and that all looks great now why did I get that extra line on the right hand side why was that Gap there well clearly the map thinks it is one tile wider than we think it is right we drew this and it's 64 tiles wide there's no extra space over here and why does that work well first time I ever did something like this I'm embarrassed to say it took me forever to figure it out it's one of those things where you rack your brain for a while and then when you figure out what it is um you feel kind of dumb because it should have been obvious from the start well I'm going to go ahead and tell you um if you have already figured it out well good for you because it took me a while um but that's one of those things where you do more programming you get more experienced and you remember to look for things like this what's happening is when we read the file we're reading in each line of the file right and looking at each line well each line in a text file you can't see it but actually has at the end of it one of those that is a new line character that is what tells the computer that when it reads the uh text file the the next line doesn't the next characters don't continue off to the side like this there's a there's a basically an invisible new line character there but when we read the text file we read that as well so we're reading an extra character here that doesn't count I might as well have a bunch of dots there right so what we need to do is when we read our uh data file we need to strip out those new lines and python has a command to do that called strip and that will take the line strip away any slash ends or back SL end characters new line characters and they won't be there when it looks at the file and that is why we have that Gap there so now that we strip away those ends it's not thinking those are characters that it needs to look at and now our map scrolling is complete so hopefully you understood all that explanation it might be a little abstract the first time around so um I'm going to I'll go through it one more time just to review uh we have a camera object and what that camera object does is it keeps track of how big the whole view area is the size of the whole map and whenever the player moves it calculates an offset for how much the player has shifted right in the opposite direction that the player has gone so if the player moves to the right a certain amount it's offset to the left by that same amount and we use that to draw everything on the screen right when we draw our objects we draw them shifted by that amount it's important to keep in mind that we do not change any of the properties of the objects right so these wall objects when they're spawn they know where they are and what their coordinates are in pixels we never change those so a wall object that is uh in the lower right hand side of the screen is you know 2,000 pixels by you know 1500 pixels and those never change it always thinks it's staying in the same spot we're just drawing it in a different spot than it thinks it is and so that all stays the same and same thing with the player the player's coordinates are getting bigger and bigger and bigger as it moves right and down uh but its pixel coordinates on the screen are what we keep the same right so it stays in the middle um except when it gets towards the edge but the pixel coordinates where we draw it are not the same as the pixel coordinates where it thinks it is right it thinks it's getting all the way down to the end and so it's nice to have the camera be totally independent of the object on the you know in the game they don't have to know the concept of the camera they just need to know the concept of the map that they're walking around on the other great thing that this style of camera allows us to do is when we update the camera to figure out what it's offset is we're using the player but we don't have to use the player say the player shot an arrow we could update the camera using that Arrow Sprite and the camera is going to follow the Arrow all the way to where it flies to and not follow the player we can put any Sprite we want in here and the camera will track that Sprite and it also means that we're really flexible in where we spawn the player right if we spawn the player at the beginning of the game you know down here then capital P then that's where the camera will be when we start the game the player starts out down here and then you can go wherever he wants to in this direction so it's very nice it's very flexible it's a great way to do uh a scrolling camera whether you're doing a tile based game like this you're doing some kind of platformer anything like that so I recommend you take the time to understand how it works um if you have any questions post them in the comments below and as always please press the like button and subscribe so you can see the next video when it comes out and I will see you next time