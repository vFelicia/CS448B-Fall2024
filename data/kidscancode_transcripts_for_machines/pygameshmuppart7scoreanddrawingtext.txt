welcome back to a game development with pygame we are continuing to build our shmoop game and this is part seven where we will add a score to the game and also discuss how you draw text on the screen okay so we're going to add a score to the game then all we need to do is down here before the game loop we should initialize our score variable to be starting out at zero and then we want to give ourselves some points right here every time a bullet hits a mob so now we could say in here just something simple like hits and just add one to it you get a point for every for every mob you blow up but that's a little boring because we have big ones and small ones and it'd be nice if the you know the smaller meteors were worth more much more points because they're harder to hit so if we looked at our our images we have our big meteor which is about a hundred pixels wide and we have our tiny meteor which is only about twenty pixels wide so what I want is for this tiny one to be worth more than the other well if this meteor is a hundred pixels wide if we look back what we did was we set the radius here to be equal to the width of the rectangle times 0.85 divided by 2 so the radius on this on the big meteor is going to be about 42 43 pixels but on the small one it's going to be about only 8 pixels so if we want that radius of 8 to be worth more points than the radius of 43 then what we can do is make the score add 50 minus the radius of whatever we hit so that way for the big meteors that are 43 we'll get seven points and for the little tiny ones we're gonna get 50 minus eight which is forty two point so we're gonna get a lot more points for heating the tiny ones and we can adjust that make it a little more fancy later but that's gonna be good enough for now so now we have a score and the score is being tracked but we have to draw it on the screen where we can see it and that's where things get a little tricky drawing text on the screen and PI game is a little involved and it takes several steps and if you're gonna draw the text more than one time then that means you're going to have to do those steps over and over again so it makes a lot of sense to define a function to handle just drawing text on the screen and then you can reuse that whenever you need it so what we're gonna do is up here at the top here will define we're going to define a a new command called draw text okay and the parameters of that are going to be a surface that we're gonna that we want that text drawn on the actual text which will be a string that we want it to for what we want it to say we'll put a size for how big we want the the font to be and then an x and a y for the location of that text okay so the first thing we need is we need a font now fonts can get tricky because not every computer necessarily has the same fonts on it so if you try to use a font that exists on your computer and then you take that program and try and run it on your friend's computer and they don't have that font then things might not work the way you expect so it's usually a good idea to use a very generically named font and you can do that the easiest way to do that is I'm gonna make a quick variable name here go to font name and I'm gonna use the PI game font match font command and what that match font command does is instead of having to know the exact name of the font my game will search through the list of fonts on your computer and find the closest match to that name so that way you don't have to worry about whether it's Arial bold or Arial TTFN or some other name you can just put a name there and and as long as you stick to something generic like Arial or Times or one of those you're gonna be fine on just about every computer otherwise you're going to need to include a font file along with your game that's specific to your computer and that works great if you want you know really custom looking text on your game but we'll get to that a little later for now I just want to talk about drawing a generic text okay so we have our so we have our font okay so we're going to create a font object that's pygame font dot font using the font name and the size okay so now we have a font object that can create text and what we mean by creating text is pygame everything Piegan does is in pixels so it needs to figure out exactly what pixels it needs to use to draw the text in that particular font so we're going to create a surface for it to render those pixels on to and we just say font render whatever the text we had true to talk about in a second and then a color that we want it to be rendered in okay what this true here means is this can be set to true or false and this tells python whether you want the text to be antialiased or not and what that means is here's a picture of course when you're trying to have curved lines made out of pixels you're gonna get these little jagged lines and so this is called it's called aliasing what that's called when you get the jagged lines antialiasing means taking the font and instead of just drawing it in all black pixels it puts these gray and lighter gray almost to white fuzzy pixels around it so that you know when it's sumed in you can see this but when you zoom out it looks nice and smooth you can see the difference between this ahere and the word alias and this aid down here in a second example it looks a lot smoother and nicer to read so we've set this to true so that our font will look nice okay now we need to figure out the rectangle of that text surface so that we can place it and we're gonna set that rectangles some point on that rectangle to the X&Y now we have a decision here to make to just remember when we place when we place some text like say we're drawing a word Pi game here and this box is around it do we want to Center it on the XY that we give do we want the XY to be this corner you know there's a lot of options for how we can locate things I'm just for now gonna make this be the mid top which means if this is the box this is the rectangle we're gonna put x and y is gonna X comma Y is gonna be this point here at the middle top of the rectangle so put that's gonna be XY and then we just need to take that text surface that we've created that has the nice antialiased drawn text and we want to flip that on to our whatever surface we were aiming at which is usually going to be our screen but whatever surface we specified we're gonna blip that on to this screen so we've lit the text surface at the location of the text rectangle okay now we have our nice draw text and anytime we want to draw some text we can just tell it what we want it to draw and it'll go do all the stuff to get it out of the screen so let's do that down at the bottom in our game loops draw section we can add a little bit to draw the text so you can decide what order to do these in if we draw it after the sprites then the text will be above the sprites so it'll look like the meteors are flying behind the score which will look pretty good so we're just gonna say draw text okay screen is the surface we want to draw on the text that we want is a string of the score the font size that we want is obviously optional I'm gonna put 18 there I think it'll be a good size to read and then the x and the y so we're gonna say with over two so it's gonna be centered horizontally and then I'm gonna say 10 so it's just 10 pixels down from the top of the screen okay now let's see what that looks like so see I have that zero up there looks like I made a little typo up here just be adding to score did any of you catch that before cuz I sure hope you did I didn't try running my program and pay attention to the fact that I was supposed to be adding the points to the score hopefully you noticed that if you didn't now you will so now you can see so I have 204 points let's shoot a big one see now I have 212 so if I shoot this small one there's a tiny one lastly there I got a nice big score for sure that tiny one okay our bullets are kind of big we might want to make those a little smaller to make it a little more challenging to hit that tiny target it's pretty easy right now do these tiny ones but anyway now I can score away to my heart's content