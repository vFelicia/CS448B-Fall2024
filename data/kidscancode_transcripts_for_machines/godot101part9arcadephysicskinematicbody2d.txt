welcome back to video 101 in this video we're going to explore how to create basic arcade physics for things like platformers using the kinematic body to the node type so we're starting with a new project and I've created a new empty scene and we're going to add a node to it and the node we're going to use if you recall we've talked before about different collision objects and we used area 2d in the previous examples and for this one we want to use one of these three physics body two DS and specifically we're going to use the kinematic body and this is the one with the little Space Invader icon because this is the one that's used or best used for arcade style physics you want to run around you want to bump into things but you don't necessarily need fullon physics simulation and the overhead that comes with that all right this is good enough for doing platformers and topdown games and whatever else other kind of games you might think of so we're going to make a kinematic body 2d and that's going to be the player and that's going to need a couple nodes underneath it one is going to be a sprite so we have something to look at and the other one is going to be our collision shapes because we're going to need that as well now for the sprite I've chosen some art from this project that I got from open game art and I'll link in the description below where you can go get it too but it comes with some different some different images of the player and so it's this little red haired boy and it has some different animations for running and jumping and so forth and we'll talk about how to do how to use those later but for right now we're just going to use this idle frame and I'm going to drop that in the texture it's going to rename these two sprite and this one too collision and then we just need to make our collision shape but before we do that you might have noticed how enormous this sprite is all right this blue or purple rectangle is our screen and so this he doesn't even fit on the screen I used too tall this character is about 500 by 700 really nice superhigh resolution that you can use in you know all sorts of games but it's way too big for our purposes here for sure so we definitely want to resize that so I'm going to go to the sprite and I'm just going to change the scale to about 20 percent 0.2 and that's going to give us a much more manageable size for this guy so you can run around the screen and then we just need to make our collision shape now we have some decisions here on what kind of collision shape we want to use all right there's a lot of options rectangle is definitely one of the most common ones but there's also other options now depending on how you want to make things you can you can do this in a lot of different ways you could make a small rectangle that's just covering the seat area so that that's the part that lands on the ground and collides with things you could do a lot of other things I'm going to use the capsule shape this is a very common one to use for this style of character you see it's called a capsule shape because it's basically an elongated round shape of the round ends so we just use the handles here to resize it right I'm going to stretch it out to the size we want and then we're going to grab the sides which also essentially grab the side first and we're bringing it back down and we just want this to cover the main area of the player and this is going to make us stop when we land on the ground it's going to make a stop when we bump into a wall and it covers the shape pretty well that covers the sprite pretty well so let's just save this player scene and we're ready to start talking about how to make it move around so we're going to add a script and create so when you're using a physics body it is recommended in the documentation that you use the fixed process you set that to true and that you do all of your movement and collision code and everything like that in the fixed process function that's because the expressives function runs at a fixed frame rate Delta will should always be the same one sixtieth of a second and all of the physics calculation happens in that time frame so your code will be synced up and you won't have any hopefully physics errors or glitches happen when you're moving a physics body you don't just change it you don't use set pause you don't set its position like you like we did with the area and that's because it needs to do the physics calculation to see when it moves if it runs into something so instead you use the move function and in the move function you put how far you want it to move right typically that's going to be your velocity all right and we'll have a variable for that let's go ahead and set that up bail for velocity and that's going to be a vector two and I usually like to have characters that don't you know instantly start moving when you press the key and then instantly stop I like to have some sort of acceleration so we're also going to have an acceleration vector that is going to be what we apply our motion to and it's going to affect the velocity so when we press a key we're going to accelerate in the direction we pressed okay and how much we do that well that can that can vary so in the move function we're just going to put velocity times Delta so move it whatever your speed is times the time step and then we need to set our acceleration by pressing the keys we're also going to set up a couple of constants for how we want this to function for example the acceleration when we press a key now fast do we speed up to our running speed and for that matter we're going to have a max speed this is the maximum speed that the player will run at pixels per second and all of these and we're also going to have a friction and that's going to be how quickly you slow down okay now all of these can be adjusted to give you a wide range of behavior how your movement works but we're going to stick with that right now so in our fixed process our acceleration we're going to use the left and right arrow keys to run sidetoside so we're talking about the xdirection and we're just going to use the input use action pressed UI right is X and pressed UI left right this is going to give us a what 1 or 0 minus a 1 or 0 will dump both keys you're going to have 1 minus 1 that's 0 you won't move it as you're pressing in both press right you'll have 1 minus 0 and if you press the left you will have 0 minus 1 which is perfect to the left should be in the negative direction you just want to take that acceleration and multiply it by our constant so it will be of the right magnitude next our velocity is just going to we're going to add the acceleration times the time step so our velocity will increase if we're holding it down but if we do that we're going to keep accelerating as long as we hold the button down and our speed will get higher and higher and higher so we want to make sure we keep it at the Mac speed so to do that we're going to take the X velocity and clamp it and the clamp function just lets us set a maximum and minimum value for that for that parameter so for the velocity X we want to set it to the minimum should be negative max speed and the maximum should be positive XP that way we'll never get above 500 in either direction and then we can move and if you try this out you will see that you can run to the left and the right by holding down the arrow keys but of course you don't stop right when you let go of the key you keep going and so we need to have the character stop when you let go of the key and that's what our friction is for so what we're going to do is we're basically just going to check if our acceleration in the xdirection is zero so we are not pressing the keys down right then we're going to apply friction so the acceleration is going to be whatever the velocity is times friction times Delta and so if we're not pressing the keys down then there's going to be friction as negative so so we'll be multiplying by a negative number so it'll be in the opposite direction of whatever direction we're traveling and that's going to let the player close to a stop all right so when I let go it stops okay and I set friction fairly high so he stops pretty fast all right if you make the friction a little lower it'll feel like you're kind of on an on an icy surface and you're it's very slippery but we don't want that now we need some gravity but we don't want to just put it in now because we'll just fall off the bottom of the screen we need something to land on so we're going to make a platform I'm going to make a new scene and the platform is going to be also a physics body but because the because the platform doesn't need to move instead of using kinematic body we can use static body and static bodies are special physics bodies that are just set up to be stationary so they don't include any code for moving it around so they're simpler they just need to sit in a spot and stop things when they run into them we're going to use that for our platform and the platform also needs a sprite and it also needs a Clayton shape now the sprite I'm going to use just to keep things simple right now is I just have a plain green square okay plain green square that just will be whatever size we want it to be and rename these and then we can use the sprite scale to set this whatever sizing one so let's set the scale to let's say 200 wide I want to multiply it by say 20 yeah okay so that's going to be my platform in a collision shape we're just going to use a rectangle and we'll just set the extents of that rectangle to be the extent of our sprite so it looks like a solid thing okay save that and that will be our platform so we'll go back over to our main scene and we'll put a instance of the player you have to click on the node we'll put an instance of the player in there and we'll put an instance of V platform in there okay just going to put the platform in the so the bottom of the screen and we'll have the player spawn up here in the middle of the air and now we can add some gravity to the player so we'll set a constant for how strong we want our gravity to be figure this number the faster they will fall it's positive because we want it to go downwards and gravity is going to affect our Y acceleration so right here we can just say acceleration dot y equals gravity and that's it because we're going to apply the acceleration to our velocity and we're going to move in our velocity so let's hit run on our main scene and you will see you and simply fall down but now you're going to notice a problem I'm pressing the arrow keys I can't move so I fell down and I stopped on the platform but now I can't walk anymore so what's going on well we need to talk a little bit about how the kinematic body collision works so let's look at this example diagram so right now when we're moving we have our start position and we have two forces acting on us gravity which is pulling downwards and pressing the arrow key which is pushing us to the right so our velocity vector is going to be at an angle something like this so when we move we should move from this position to this position and that's what happens when we're falling but when there's a platform in the middle what happens is we can only move this far right we can't move the full distance we want to move as soon as a collision happens the object will stop moving so as soon as it detects colliding and that's that's detected by a function called is colliding so is colliding becomes true as soon as the object collides with another object so we've moved to here and we've stopped but there's still some remaining movement left that isn't happening and the problem becomes when we're standing on the platform we still have gravity pulling up downwards and when we press the arrow key to the right that means our desired move is still a diagonal like this well it can't move diagonally like this it instantly detects a collision is gliding is true and stops moving that's why we can't move right now even when we press the arrow keys because we're trying to move down into the platform because gravity is always pulling us down so the way that we fix that is by using something called the collision normal this is the collision normal a normal is a vector of length one it's called that's why it's called normal whose normalized and it's perpendicular to the surface of whatever you collide with so for example of the ground this would be the collision normal zero negative one if we ran into a wall the collision normal would be pointing right or left in the X direction so what we want to do is take that remaining unused movement and slide it perpendicularly to the collision normal so that way if we're moving diagonally we would hit and fly it along and if we're standing on the platform you'll slide along it to the right when we try and move and we won't try and go down into it okay so that's what we're going to do in our code so this move function where we tell our body how far we want it to move if it collides it will return that unused portion of the movement vector so we're going to save that in a variable called motion and so this is the remaining motion that we didn't get to do could we hit something and so normally you know if you're in free space that would be zero zero because we were able to move the full amount so if we hit something that will have some vector in it so now we're going to say if we are colliding is colliding is true then we need to get the collision normal you can find out what that is just call it n get collision normal now will now will have that normal which since we hit the ground are this we at the platform is going to be 0 negative 1 and then we're going to take motion and set it equal to the motion vectors slid along the collision normal and that slide motion and now that we have that remaining motion vector pointing in the slide direction we can move again by that vector and now we'll be able to move but you're going to notice two things one is it's a little choppy there's something going on and watch what happens when I want run off the edge let's see that it's almost teleported it's all so fast why did it fall so fast well our velocity vector is still pointing downwards even though we hit the ground and gravity is making it point more and more you know point more and more downwards and so our velocity vector is really getting really really large the longer we stand on the ground so as soon as we fall off we're suddenly going to shoot downwards really fast so we're going to fix that by doing the same thing that we did with motion and sliding the velocity as well and what that'll do is let us run along the ground and when we fall you will start falling from a 0 Y velocity and start accelerating and that was a lot lot better so that is the basics of the kinematic body 2d in the next video we will talk about how to make it jump and also how to animate to the sprite so that we can look like we're running instead of just sliding along the ground alright thanks for watching and I'll see you next time you