welcome back this is part 2 of the Godot topdown tank battle game in part 1 we made the player tank and added some controls to it and in this part we're going to talk about making the terrain that we will drive around on top of in the last video we created the player tank which can drive around using the WASD keys and has a turret that points towards the mouse pointer at all times this time what we're going to talk about is how to make the map the the level that the tank is going to drive around on in your assets folder there is a terrain tile set which looks like this that's made up of a bunch of 128 by 128 tiles that are just laid out in a grid like this and we want to use these in a tile map node so that we can draw our level however we want to draw it using these individual tiles now if you know how tile maps work you have to create individual sprites out of each of these squares and you can optionally attach collisions to them which we don't need for the ground but you put those all together and then you convert that into a tile set which is a good resource object and then you use that in your tile map to draw everything now since these are all pretty much identical they're all squares and they're laid out in a regular grid rather than cut them up one by one and make these one by one which is going to be kind of tedious I thought that I would make a script that will just parse this image and convert it into a tile set directly so how do we do that well I'm going to make a new scene and I'm just gonna get a node as its root I'm just going to call this tile set maker and I'm going to save this in a terrain folder now to the scene I'm gonna add a sprite and in the texture I'm going to put the asset image now this I'm doing it this way because this scene I can reuse this in any texture I put in the sprite node he's gonna get sliced up by the script so I suspect later on we'll have some more images that we want to add or some more details we want to add to the map and we might need to use another tile set in here so we can reuse this script so we're gonna add a script to the tile set maker node and what this is gonna do is look at that texture slice it up into 128 528 chunks and stick them into a tile set object and then save that so what we need to do is we need to configure the tile size so that we know what size we need 2 slice this up into so 128 528 is the size of the drawings and the texture that we're going to use is the sprites texture and then we can just do everything in the ready so that when we run the scene it'll do it and we'll be done so first we need to get the size of the image so the texture width is going to be the get width and then we're going to divide by the tile size X so that means if I'm you know 10 tiles wide it'll be the texture size of the texture divided by 128 should come out to 10 and then text height is the same get height over a tile size dot Y then we need to make a new tileset image or it's sorry a new tileset object we do that with the new constructor so now I have a new tileset called TS and now I just need to iterate through however many tiles there are so I count two text width and I run Y from zero to text height and then I'll have a loop to go through everything now the region we want to split up that we're sorry we want to slice out of that texture is the rectangle from x times tile size X comma Y times tile size dot Y and then the width is put this over here tile size dot X so I'll size dot Y so then we have our region that we are cutting out of the texture now when we put this into the tile set it needs to be assigned an ID an ID is just a unique number an integer assigned to each tile so we need to come up with a unique ID and I'm just going to do X plus y times 10 and that'll be that'll make sure every tiles ID is unique to its position so then on our tile set we create a tile with that ID and then we say tile set texture of that ID to the texture and then tile set region will use the rectangle okay and so now when this loop is done I will have every tile created so at the end we can use resource saver to save the image and we're going to save it in the terrains sorry terrain folder I'm gonna call it terrain tiles GREs we save that that object so this saves resource saver will save any kind of any resource type object which tileset is and you just give it the location and filename so that's it so now when we open up the terrain folder here so you can see if I run this script when I close it I now have a Chow resource here in my terrains folder so I'll close that we can use that again later if we ever need it to slice up another image and we're gonna make a new folder now to be our level the the map that we're going to start with now eventually we might make more but we're gonna start with just one so I'm gonna use a node 2d for the root and I'm just gonna call this map oh one just since it's gonna be the first one we'll see how it goes I still not a hundred percent finalized on how I'm gonna design these maps so I'm kind of playing it by ear right now I know I'm going to use a tile map node to be the terrain so in that time app node we need to put our resource that we made and there's all our tiles showing up alright soo mout so I'm here we need to change the cell size defaults to 64 and these tiles are 128 and now we've got our tile set working and we can you know go out here and draw stuff and everything looks fine so we want to draw some kind of level don't worry about this size right this is the the game window is showing right here so the map can be much larger than the game window because we'll we'll attach a camera to the player so that they can scroll them up as they run around so feel free to draw your map out however you want I'm gonna put some roads some various roads going around different places and I'll skip over the boring drawing part okay so here's a quick map I drew up just made some roads going around got a highway running down in the middle I used a little bit of the sand tiles I'm a little bit of the grass because we have the nice transition tiles between them and you know that's fine for now I named this ground because one of the useful things you can do with time apps is you can layer them and have additional tile maps on top of this one that you know place your trees or rocks or buildings or whatever and we'll probably do that later so I'm going to call this one ground and so now we're gonna save this and we're going to put this in a go up a level and make a folder called Maps I'm gonna save our maps in there and that will give us enough to get started now to our map here we want to add our player so I'm gonna instance from the tanks folder my player in there and there's my player over here in the corner and if I were to run the scene my player would start out here and I can only see a little bit of the map so what we want to do is we want to take our player scene and add a camera to it so I'm going to add a cam 2d set the current to on and then I'm also gonna zoom out a little bit let's try 1.4 see how that goes and then if I run my map I should have there we go there's my tank I can zoom around and see my level now one of the things we want to do is we need to put some limits on this camera because when I reach the edge of the map I wanted to stop scrolling right I actually wanted to stop scrolling when it reached about or exactly there right now if I go down any further then that map won't scroll anymore and the camera limits are set if we go back over to our camera here there the limits are set left top right and bottom these are your maximum and minimum x and y values for the the camera and so if I scroll out to to show you so this this purple rectangle here shows the camera what the camera sees right so if I were to move it around which I don't want to move it around separately if I were to move the player around you would see the camera moved to now let's say I didn't want the camera to go past the zero zero point I'm just going to do this temporarily to show you so if I were on the camera set I wanted the left limit to be zero and I wanted the top limit to be zero then when I move my player around see how that rectangle stops scrolling when it hits those limits and so we want our camera to do that as well but we wanted to do it automatically based on the size of the map you drew depending on how big the map was that's how big we want it to be so I'm gonna make a script for this map I'm gonna name it just map GD instead of map a1 because all our different maps are actually gonna use the same script which is just going to tell them how to populate themselves how to set them out the camera limits etc so here's our script for that now this is going to happen in the ready function we're going to want to say set camera limits and then we're going to define what that what that function does here now I'll zoom in a little bit alright so to set the camera limits we need to find out how much of the map is being used so we can use do that by using the ground get used rect and that gets a rectangle telling you how much space your map is taking up right go back over here that'll be this rectangle right if I were to place another tile like for some reason I place the tile over here now that rectangle would be would extend over to there but I don't want that so that means we now know how big our map total is so we also want to know how big the cells of the map are so that we know how that combines all right so we get the cell size from the ground so now we know now we'll know from here that our map is say 200 tiles wide the cell size is 128 so the full width of the map is 200 times 128 and so that's how we can find out what to set our map limits to so on the player camera we want to set the limit left equal to map limits position x times the map cell size dot X and we just do that again for the other three sides okay and there I've duplicated that three more times and set the four limits so now if we run our script again we should see the camera see the camera does not scroll past the edges of the map no matter how close we get to them and we'll go down to the bottom just to show you that the bottom works there's the bottom of the map and I can't go any further so setting your camera limits like that is super useful when you want to avoid having those ugly grey voids around the edges of your level as you move around all right I think that's gonna do it for this installment in the next video we will talk about adding some enemy tanks to this level that will drive around and give us something to avoid thanks for watching and I'll see you next time you