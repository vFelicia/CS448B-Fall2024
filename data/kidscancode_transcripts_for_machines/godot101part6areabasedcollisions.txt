welcome back to judo 101 series where I teach you the basics of the judo game engine this is lesson number six we're going to talk about how to detect when two areas collide or overlap and specifically we're going to make our player walk around and collect gems that are scattered around the screen okay let's get started so to start things off I've made a new scene called gem and it's just an area to be node with a sprite and a rectangular collision shape and so I went ahead and save that as Jim and this will be the scene that will spawn the gems that our character is going to walk around and collect so over on our main scene we just need to link the player so we're going to instance a player in there and then we're going to add a script for the main scene okay so we're going to have a score variable to keep track of how many we have collected in there ready we're going to set process to true and we're going to write a new function called spawn gem and the spawn gems function is just going to take a number for how many gems we want to spawn so we're just going to count to num and we're going to spawn a bunch of gem and to keep things organized what we're going to do is add a node here and we're going to call this Jim container so this is just a node that's going to hold all of our gems organized underneath it so we'll be they'll help us keep track of how many gems are left on the screen all that kind of thing so up here I'm going to say just get a reference to the to that node so I don't have to type get node all the time and so here what we're going to do is we are going to say so we're going to need to spawn gems so we need to actually load the team to you preload for this and we want to get the gem seen so if we go over here you can right click on this and choose copy path and then you can just paste it right in there if you have it inside of folders and things you want to type out the whole path okay so we're just going to make a gem we're going to add it as a child to the gym container and then we need to set its location to somewhere random and to do that we need to know the screen size just like we did on the player we're going to say screen size get view for it correct size and then our random location we're going to just say G dot set pause you so now if we if we do spawn gems 10 and are ready function then we are going to see and jump pop up in random locations which we forgot to do randomized obviously we don't want the random locations always be the same okay so there's our gems now well all we want is we want to know when the player I'll tend to one so that we can make it disappear like it's been picked up now that means that we want to know when the player's collision rectangle has overlap the gems collision rectangle they are both area 2 DS we're going to go over to our gem team and we're going to add a script to it gem and all we want to do in this gem script is tell it to disappear when the player will collapse it so you don't actually need anything in our ready because we're going to use a signal on the gem on any node to click over here on node you can see what signals that body you can or that object can produce and so on the area to D it can detect when other areas enter or exit it and it can also detect when other bodies enter it will exit it since the player is also an area area enter is the one we're going to want as soon as the players rectangle enters the gems rectangle this signal is going to be produced and a signal is something that you can listen for and do something whenever it happens and it's going to tell us the area that that it was so so we're going to take that signal we're going to click connect and then you can choose a node you want to connect that to you want to do something to one of the other nodes you can we're going to leave it on gem we're going to leave the name default name as it is now it's going to create the function for us so on Jim area enter we can say to actually just start with let's just print area we're going to print out what happens when they overlap so going to print out what area it's all so you can see what happens when we run it this is a good way to troubleshoot see when I entered that one it printed out area if you notice that it already printed out some other areas that's because some of these gems are overlapping if all we did was delete the gem when another area entered it these gems would have deleted each other right and we don't want that we want it to only do it when the player enters so we can do that if we look at the name so if we say area get name that's going to tell us the name of the area that overlaps so to try this and see here now when I go on the gem to print player so new the area of the entered was player and in the case of a gem overlapping if we can get that to happen there we go we a couple of gems overlaps so we get the name of them and because there doesent responding a bunch of things named gem good all times these unique names to them just because every every node has to have a unique name in the tree that is in so these gems triggers but we don't care about those all we care about is this is the player so we're just going to say if area dot get name is player and if it is then we're going to queue tree so now when the gems overlap they won't bleed each other but if we hit one it is gone okay now over here in our main we can't well when we have picked up all the gems because the gem container is going to be empty all right when Jim container is empty I want to spawn some more gems so I'm going to make a going to make a level variable here and we're going to tell it to increment that level every time we gobble up all the gems so in the process function what we're going to do is we're going to say if gem container get child count so tell us how many children it has so if the child count is zero the gem container is empty so we're going to increment our level to the next one and we're going to spawn level times ten gems so we'll spawned 20 of them on level two and so on that should let us run around and clear the screen and then have some more to go pick up okay now the next step is what we'd like to do is have you get some points when you select a gem so that means when the gem gets deleted we want to add to the score here's the thing the code that's deleting the gem is over here on the gem itself in the script that runs on the gem and the score is in this script which is on main so if we look at the tree the gem is going to be underneath the gem container and that's where the script that is going to detect that the collision and delete the gem but the score is up here on the main and that's where we're keeping track of the score and where we're going to show the score so we need to we need a way for the node script it's running on a node down here farther down the tree to talk to a node that is farther up and this is a really common thing that you need to do and and there are two different ways to do it one of them is kind of the obvious way that a lot of beginners do it which is wrong and then there is the right way which might not be obvious at first but hopefully I can explain it too clearly enough that you will understand it and start doing it this is a really important concept to get right so I am going to get a Kate the next video talking about doing proper communication between nodes so I will save that for the next video and we will call this one complete thanks for watching and I'll see you next time you