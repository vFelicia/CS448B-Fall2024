welcome back this is part 17 of our topdown zombie shooter game in this video we're gonna be talking about tweening or easing functions those two words are sometimes used interchangeably in game development they refer to the same thing it's a way to do animations that are nicer looking which you'll see from some of the examples that we're going to do and to start with what we're gonna do is use an easing function to cause our health pack item to sort of bob up and down to make it look a little more appealing and noticeable to the player so we could go over to our sprite here and we could add a def update it's going to describe how this item is going to move and we wanted to move upwards and downwards in a little bobbing motion and we don't want to have that look very or we want that to look very smooth and like a naturallooking bouncing motion and the easiest way to do that is using something called an easing function so this webpage is a great example of some easing functions so and what an easing function does is it interpolates meaning it describes how a value changes over time from point A to point B right it could be the motion of an object it could be the transparency of an object or fading out any way you get from some starting point to some ending point so in our example how we get from the starting position to the other end of the bounce on how we go back right so how we go back in between two points and if we just had a constant speed we would be following a linear pattern like this and so the the item would just be moving straight down then instantly change the direction and going back and it would look very harsh so we can use these other other kinds of easing functions to change the rate at which the motion happens for example this is one called quadratic and so you can see it's much more gradual as it gets down and you can do those in either direction right or even in both right and that's very smooth the sine wave is a very nice one because what this could look like and if we do in and out is that the object accelerates up decelerates down towards the bottom and then would do the reverse okay there's all sorts of fun easing functions like the bouncing one where you can bounce through your way in or the elastic one where you go past your point you want to go to and then snap back down and there are lots of fun to play around with and very useful so the problem we have is that tie game does not have any easing functions built into it and we could write them but that could be timeconsuming and it turns out there is a really good Python tweening library out there that will be good enough for us to use so we just need to install it okay like most Python libraries the easiest way to install it is with pit depending on your system you might be using pit before pip3 you're just gonna say pit three install PI tweening and it will go and download it install it and that's all there is to it you can double check to make sure it's installed if you just do an import PI tweening as long as you don't get an error message then it found the library okay so what we can do now is we can import that I'm sorry I'm not from import tight weaning as I'm just gonna name it tween because it's a little easier to type all right now we're ready to go down here and set up our items bobbing animation using the tween engine and so first we're gonna do is we're gonna define which of those tweeting functions we're going to use and I want to use the ease in out sign one and so it'll be easy here to change the name of which function you want to use if you want to see some different effects but I think this is the one that's gonna look the best for what we want to see then we're going to define what the range of the bobbing is actually just to keep things simple why don't we make that a setting so we'll go over to our settings here and in the items how many pixels up and down you know how much up and down do we want the thing to Bob and so that's something we can adjust whenever we want and then we're also going to have the Bob speed how fast is it going to move up and down and you'll see where that comes in as well so those are the two kind of settings that we need to define how our bobbing is going to work okay so what we're going to do is remember that the way that the tweening functions work is they always give you back a value between zero and one okay let's look at an example okay just to manually go through this a little bit so let's say let's say we had something that we wanted to move ten steps right so we're gonna move something ten steps and we want to use a tween to go between those two steps well if I do tween dot linear you're gonna see that's a straight line right we just go a tenth of the way each time so we're moving ten steps so we go a tenth of the way each step now that's obviously the linear thing we wouldn't even need the tween library technically to do that easy to add point one each time but if we want one of those nice animated like curves we saw in that animation we want to use one of the other ones so let's say instead for our ten steps we want to use tween ease in sine okay then this is what we get and so these values are the values along that curve that we saw in the animation so the way that these tweens work is you pass into the function sum value between zero and one from are you at the starting point zero or you it 1 the ending point or anywhere in between and then it will give back to you a value between 0 and 1 for what step along the way you should be at so you give it a value between 0 and 1 you get back a value between 0 and 1 okay so this step is going to be keeping track of where we are between 0 and 1 or between the start and end point so we know what to pass into the function ok and then we are also going to have a direction because we also we're going to want to do this in both directions we're going to lob up and then Bob down so we're going to reverse the direction so we'll change that number between 1 and negative 1 all right so this update is going to do the bobbing motion okay and so what we're gonna do is we're gonna find how much do we need to move all right here let's call it offset all right how much do we need to move from our starting position so we're going to take the Bob range and we're going to multiply it by whatever we get back from the tweening so we're gonna say take the tween use self dot step divided by Bob range so that's the percentage the way along we are and I'm Ness subtracting zero point five and the reason I'm going to do that is remember tween gives us back a value between zero and one but because we're starting in the center of our bobbing motion right from wherever we place the the health pack we wanted to bob up some and down some so this is just shifting it halfway okay and we multiply that by the Bob range so then that just means we can move the rectangle Center Y and just add the position oops I just noticed we didn't save our position there we go didn't do that before so we just take our Y position and we add the offset times the direction right so when it flips it'll go in the other direction then we take our step and we increment it by the Bob speed and if if our step gets greater than Bob range then we are going to set it back to zero and we're going to reverse direction so we just reverse the VAT the sign on the direction okay so just to walk through it again every frame we're gonna calculate how far we are along in the tween so what step we're on as a percentage of the total range shift it by half the value so we start in the middle and then we're going to add that offset to the rectangles position and then we're just going to make sure that as we increment the step if we get to the maximum we go back to zero and start over again and the direction will be in the opposite direction so we'll bounce down so let's see what that looks like oh I forgot I spawned my health pack down here in the corner changed it on my map so there you see the health pack bobbing up and down now if that's too fast for you you can change that Bob step and it will bounce more or less and you can change the range to like I think that range might be a little too high let's go back over to our settings and maybe make the range let's try 15 go into the house so it got stuck all right so I made the range a little smaller but the speed is still the same so that means it's going to cover that range faster so if you make the range a little smaller you probably want to make the speed a little slower too there we go that's not too bad so you can play around with that you could try some of the other you could try some of the other tweens it might be easier to see what the difference is if you make the arrange a lot bigger but you can see if you change some of these you'll get very different effects like let's try this one just to show you so yeah it goes it's a much faster transition so it's moving faster in the middle part of the range right so not as very not not as smooth as the sign one looks alright so we're gonna keep that sign oops sign okay okay hopefully you can see some of the power of these tweens or easing functions now that we're starting to use them well there's a lot of things we can use them for not just the bobbing up and down of the items but if you want to fade in or fade out an image you can use it for that if you want to transition something from one color to another you can use an easing function to do that when things come onto the screen or go off the screen when you when you transition to a menu or another or another screen when you when you want to move from one map to another there's a lot of places where you can use these easing functions to make your transitions and animations look a lot nicer all right so that will do it for this video I hope you enjoyed it and as always please hit the like button below and help us get some more subscribers to the channel and I will see you in the next video you