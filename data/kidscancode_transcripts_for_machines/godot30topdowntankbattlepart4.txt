welcome to part 4 of the topdown tank battle tutorial this time we're going to talk about bullets we have a player and an enemy tank that can both move and aim and now we need them to fire so let's get started so we're going to start with the physics layers if you go into the project settings under 2d physics layer names you can give names to the different physics layers that you can put objects in and so so far I've decided I think we need for environment is gonna be for the obstacles trees rocks whatever whatever obstacles are in the environment the player or the player is gonna be on the layer enemies on layer 3 and bullets on layer 4 and what that'll do is let us do things like make the players bullet not hit itself or make the enemy bullets not hit each other that kind of thing so I've set those up and I've also just quickly added another path for the second enemy here and what I thought would be fun maybe it goes around it goes off the screen briefly so you can see it goes over here comes off the screen and comes back on so it'll sort of just cycle around in a little figure 8 kind of path so we're gonna make a so we're gonna take our existing stuff and the player I put it on the player layer and I said it's mask to environment and enemies so that when it's driving around these are what it collides with and then on the enemy tank I did the same thing except that I put it in the enemy's lair and I said it's collisions to environment and player and I'm still deciding whether I want to put enemies here or not so you know I could have two tanks with overlapping paths and if I leave this unchecked they're not going to see each other so they'll just sort of drive right through each other or if I do this then they would collide so I'd have to be more careful about how I set up the enemy's paths so I'm not entirely sure yet which way would be better for that so I'm going to leave that off for now and then the other one is the detect radius I'm gonna set the detect radius to only see the player layer and what that actually allows us to do is here since it can only detect the player we can actually trim the code a little bit because the only thing it's gonna be able to see are those things are things in that layer and the player is the only one we're putting in that layer right now later if there are more than one human controlled tank then they can both be in that layer and the enemy tank would see either one okay and then I've started making a bullet scene here and this is going to be the master bullet scene that the others will inherit from so it's gonna have the generic bullet related things about it and I'm gonna use an area 2d for its root node I like using area two DS for projectiles because they don't need to collide with things we just need to detect contact so as soon as it overlaps something it's gonna explode and do damage and whatever it needs to do so I like using area 2d for that keeps it nice and simple and the sprite is attached for its appearance and it'll have a collision shape and it's gonna have a lifetime timer that's going to that we can set to determine how long we want that bullet to last and so it'll you know the fire and travel a certain amount of distance and then explode and so I'm saving that in a folder called bullets and called it bullet dot scene and that will be the one we inherit for our individual player bullet or multiple types of player bullet maybe we want to have different kinds of weapon upgrades enemy bullets etc alright so let's attach a script to this bullet and this will be the default script that all the bullets will inherit from as well so what do we need we need need a speed variable I'm going to different speed bullets we need and damage how much damage is a bullet do when it hits and I'm also going to do a lifetime that we can set our lifetime or two we're going to have a velocity needs to move and so let's see so in the ready actually we won't do that in the ready so when the bullet spawns we need to make sure it gets placed at the right location which is the the muzzle position to D that we've put at the end of the each tanks muzzle and it also needs to be pointed in the right direction so the the note needs to be rotated so it's facing in the right direction and then the velocity needs to travel in that direction so whenever the bullet is spawned we need to pass all that information in to it so we're going to make a start function here that's going to initialize it and we're going to pass it a position and a direction and those will be those will both be vector those will both be vectors position will be it's the global position for it to start at and direction will be a direction vector for what direction should be pointing in so we set our bullets position to that position that we passed in we set its rotation to the to the direction we passed in its angle and then we set our lifetime wait time equal to whatever its lifetime is set to and then we set our velocity equal to that direction vector times speed and then that way it will travel in whatever direction we want to go at whatever speed we will have to go and then in our process function we're just going to update the position we just add velocity times Delta and now the other thing that this is going to need is we have a couple of signals to connect right because we want when the a body enters we want to connect that signal and then when the lifetime times out we want to connect that signal and so what do we want these things to do well when the lifetime times out we want it to we want to delete the bullet but we also probably want it to explode and do whatever now I'm not going to be doing the explosion animation yet and everything so I'm just gonna make a explode function that's just going to do Q free for now and then later we'll come back and add the animation and I just want to get this working so when the timer times out that's when we want to explode and when the bullet detects a body entered then we want to make sure it might hit a it might hit a wall it might hit an enemy tank if it's a wall it should just explode if it's an enemy tank it should explode and also deal damage so we need to explode but we also need to check if the body that it hit has a take damage method so if the if the body that it hit is capable of taking damage then we will call that method and pass in the damage amount so now we can do damage to whatever things the bullet hits okay and so that's going to be our generic bullet code that's going to apply to all the different kinds of bullets we can fire and now we need to make a specific one for the play all right so I made a new inherited scene called player bullet and I've added this green shell sprite now one thing to point out is if you look at the sprite sheet the bullets happen to be drawn now they facing to the left so they're gonna be rotated 180 degrees so I just took the sprite node and I rotated it 180 so that my bullet will be pointing in the zero direction I added a rectangular collision shape you could probably do I mean you could do a capsule year2 doesn't really matter the overlap the bullets would be moving relatively fast so they're gonna look like they hit no matter what kind of collision shape you have here as long as it doesn't stick out too far from the shape and so we need to add so I've disconnected the script so that I can add a new one that inherits from that inherits from the bullet script and this is where I could add whatever specific code I need for the player bullet but I don't think I have any specific code to add to the player bullet yet so I'm just gonna leave that as is until we come back to do the next step so now we need this player to spawn these things and so this is a problem that a lot of beginners run into is when they're making some object that fires projectiles is well this this this code is where we have the control code right so you're controlling the player you're gonna click fire and you're gonna want the player tank to spawn a bullet right here and go well that bullet if you add that bullet as a child of the tank then that bullet is gonna rotate when the tank rotates and it move when the tank moves so if you fire a bullet in you know it to the right and then you turn your tank that bullet is gonna swing around to always be in front of the tank and that's not what you want right you want to fire and forget but shell just flies out by itself and it's no longer attached to or responsibilities of the player another thing is that if our another reason that that doesn't work well is if the enemy tank fires a bunch of bullets and then you destroy the enemy tank those bullets would then instantly disappear as well because they're children of the enemy tank rather than continuing to travel on by themselves so you want the bullets to be independent of the things that fire them one way to think about it is that be the tank itself has no idea what or control over what happens to a bullet after it shoots it right it just hands it off and says there it goes I'm no longer controlling this so you need to hand it to another scene and that's probably what our main scene is a good candidate for so if we pass the so if we pass the bullet to the main scene then the main scene can instantiate it add it as a child do any management of it that needs to happen and our tanks that fire them don't have to know anything about that so we're going to go to our player script first and we already created a bullet export variable so we're just going to drag the player bullet and drop it in there so it knows which one it's gonna use and then make sure you have your gun cooldown set and then we can go to the player script actually I misspoke we're gonna start with the tank script because the enemy tanks need to fire two so both of them have this can shoot variable they have a gun timer that counts down with the cooldown of their gun so that is already good for both types of tank so what we need to add is the actual shoot function all right so I'm going to add a shoot function here and what this function is going to do is and so what this functions going to do is spawn a bullet if can't shoot is true and if it is then we're gonna set can shoot to false and start the cooldown timer so gun timer start remember when the gun timer ends can't shoot goes back to true so another bullet is allowed and then we need to get those two pieces of information that we send to the bullet it's the position in the direction and that lines going to get kind of long so I'm going to use a temporary variable here for the direction the direction is a unit vector so I need a unit vector and I need to rotate it so that it's pointing in the direction of the turret so I'm going to use turret global rotation and then I can create the bullet but again we don't want to spawn the bullet here and make it a child of the player or of the tank that's that's shooting it we want to pass it to the main scene so we're going to do that with a signal so we have a signal here called shoot and I'm going to omit that signal and omit the shoot signal and then along with it I'm going to pass the bullet and the two pieces of information the bullet needs which is the position which we're gonna use the muzzles global position and that direction we just calculated so now our tank can any of the tanks can shoot and they emit that bullet and then they're done they're happy they've emitted the bullet the fact that nothing is available to handle that or listening to that right now and actually manages the bullet doesn't matter to the tank so if we go over to our player script all we've got to add is the input action for click which is the left mouse button to call its shoot function and now our player enemy our star player tank would be shooting whenever we click the mouse button it's just that we wouldn't see those bullets because nothing is handling them when they're emitted and we're gonna do that in the map script here's our map script and this is where we're going to need a function to receive those bullets that are being spawned and the main scene doesn't care whether it was a player bullet or an enemy bullet it's just a bullet it just needs to knows it needs to Spahn some bullet and add it add it to the scene so we're just gonna say on tank shoot here and it has three parameters coming with it so we're gonna grab those and use those to spawn the bullet so we're not going to make a new bullet instance lowercase is a variable we're gonna make a bullet instance we're going to add it as a child and then we're going to call its start function with the position and direction that we just passed in and now this method just needs to be connected to any tanks shoot signal so if we go to the player we can connect its shoot meth I'm sorry shoot signal to on tank shoot and then there we go all connected so let's give it a try and see if it works oops I forgot to set the time on the bullet I need to give it a speed the player bullet needs to have a speed say 750 a damage say 10 doesn't matter in right now in a lifetime I'm gonna say 0.5 all right back to our map then run that again and there we go so now we have a bullet coming out you can see it disappears after half a second but if it hits the enemy tank it also hits so our collisions are working our cooldown is working and that's a good start so in the next step we're going to do the same thing with the enemy tank we need the enemy tank to also spawn its bullets and it'll do it whenever the player was is within range and the cooldown is has expired thanks for watching and I'll see you in the next step you