welcome back to the procedural content generation series using Godot 3 in this video we're going to talk about how to use an algorithm called the midpoint displacement algorithm to make 2d terrain the node we want to use for our midpoint algorithm is the line 2d this is a collection of points that the engine will draw on the screen you can actually click and draw lines although we're gonna obviously be generating this in code so it doesn't really matter what you click we're gonna clear it and generate the points automatically you can delete them if you want using the editor buttons so this for the settings that we have here basically you have width which is how wide you want the line to be when it's drawn can leave that and then what color you want to do I like to use like a bright green it'll be nice and visible obviously you can use whatever color you like the capping section is controls how it draws the joints and the end points and you know we can just put round on all of these and it will round off the edges which looks a little nicer and that's really all we have to do for the node settings before we attach a script to it first we're gonna have some variables that are going to control the properties of our algorithm so displacement is gonna be how much we offset the midpoint when we move it up or down in pixels the next one is iterations this is gonna be how many times we want to do it how many times do we want to go through again and and move the next level of midpoints and then I'm gonna use one called height that's where we want to place it on the screen so this is gonna be for the starting points okay and then the first thing we need to do when we start is in are ready I'm going to say in it in it line and that's because we want to initialize the line with the two starting points we also want to randomize so that we have our random number generator ready and now in it line is going to just create two random points we want two random point on the left side of the screen and a random point on the right side of the screen to be our starting two points in our line so we need to get the screen size and so that's get viewport get visible rect sighs and then points is the property of the line 2d that contains an array so if we go over here and look points points is this property it contains a vector to pool vector to array with all of the points in it so if we want to initialize that we set it to an empty array so now our line has zero points in it and then we just need to calculate where we want our start and end point to be so the starting point is going to be on the left hand side so the X is zero and the y we want to pick a R and height minus displacement and put this on the next line because a little easier to read height plus displacement and so that's going to be our first point and then end is the same thing basically except we want it to be on the opposite side so it's going to be at screen size X and then the same R and range so I will just copy and paste this and then we have our two we have a two points and we just want to add those two add point start add point and now one thing to keep in mind when you're doing the line 2d so this points property has the is a vector to array and you could use if you did points dot add you're using the array function to add a thing you know to the array that does not work it doesn't add it to the line you have to use the lines add point and remove point functions if you want to get it to work so that's all we need to do right now let's give it a shot here if we run it here let's call this I'm going to name this terrain line and save it and when we run it we will see that we just get a line across the screen right just pick two random points somewhere on the sides okay now we need our function that runs the midpoint displacement algorithm and this is going to be one step through just go through each point in the line and between each pair of points create a new midpoint and move it up or down so I'm gonna call this add points and so first we need to get what our old points are what our current ones are okay so that's what what we're pulling out right now that's right now has the two points in it but any time we run this is going to take the the points that exist in the line and we're going to zero out we're going to zero out the the line itself so we can go and modify this and then once we've modified it put it back in so for I and range we want to count front from basically zero which is the first point to old points size minus one right so if there are two lines for example two minus one is one I'm going to count to one which means we're only going to look at the first point because we want to look at the point and the one to the right of it and so we want to no point to the right of the last line so we don't the last point the last point doesn't have a point to the right of it so we're not going to look at that point so the midpoint is gonna be old points I whatever one we're on plus old points I plus one and at least / all right add two points together divide by 2 you get the average point between them so now we've found the midpoint of the line between those two of the segments between those two and we're gonna take the midpoint Y and we're gonna add to it we're going to displace it by the displacement and then we want that displacement to go up or down we want to randomly choose up or down so basically we want to multiply by 1 or negative 1 so we want to randomly choose one or negative one and we can do that using this little formula here we want to multiply or raise 1 negative 1 to the 0 or 1 power so we get a random number that random number is going to be even in which case this is 0 or odd in which case it's 1 negative 1 to the 1 power is negative 1 and negative 1 to the 0 power is positive 1 so then we get displacement being positive or negative so this is a handy little formula to know if you ever need a random choice between plus 1 and minus 1 so now we add we add add point old points I so we add the point we just looked at we add the new midpoint we just figure it out and then we keep going and then at the very end we'll just add in that old last one the size minus one one alright now this just goes through and does the algorithm once so it goes in so eventually we're gonna want to repeat it you know this many times but while we're trying it out it's kind of nice to just do it one at a time so if we want to run this one so we can connect this to the mouse button and just say whenever we click we'll do it so we'll add an input event here and say if it's the mouse if event is input mouse button and event pressed then I want to say add add points so now what happens is when I rightclick the mouse it's going to run this so let's try that out run it there's our one line so now we picked a point in the middle and it displaced it now it's gonna when I click again it should displace both of these yeah yep yep okay now if I keep going you see we're gonna get a really jagged line and this is fine if you're doing I don't know a stock market simulation or something and you want a lot of big swings and things but what we want is something that looks a little more smooth like terrain and the way to do that is to get is to we want to smooth it out a bit and so what we want is we want that displacement to get smaller each iteration so as you as you do it more and more the closer the two points get together the smaller the displacement of the new midpoint should be and so we kind of want it to decay and we can use an exponential decay function for that which will make it look really nice and here's how that works so go up here to the top and we're going to add one more new variable and this is a float so I'm going to go ahead and mark here because we want it smooth one point one I'm gonna start with it being one point one the reason I put float there is in case you if you don't specify the hint for what you want to export like if I did this it would export it as an integer and if I tried to type 0.5 in there or whatever the inspector wouldn't accept it so I'm just good little trick to know in case you need it and then I'm going to have a variable called current displacement and this is gonna hold what our you know our changing displacement as we go through it so that means when we initialize the line we want to start with the current displacement being equal to the chosen starting displacement and then in the add points we want to use current displacement here all right autocomplete current displacement here and then after we've done the whole iteration we want to decay the current displacement so we take the current displacement and we're gonna multiply it by 2.0 to the negative smooth whatever are some of the value was set to so this is a this is called an exponential decay function and it will make the current displacement gets smaller and smaller each iteration so let's see what that looks like so there's our line we do one now the next one's will be displaced a little bit less a little less a little less OS and we have a nice smoother looking line and you can change around how you want your smoothing to be right if my smooth was only 0.6 for example you'll see I'm gonna get a much more jagged result right that looks more like a mountain range or something and a higher value is gonna be more of us smooth flowing hills typically is something between 0.5 and one point one works the best you get below 0.5 and it's just gonna turn into that spiky mess again and you get above 1.1 and it's barely gonna change at all a little bit decay too fast and then one more thing we can do if we want to turn this into a solid shape is add a polygon to D as a child and the script will use that to make our shape so if we go to the ready we're going to set the polygons color just to use the same color we chose for the line so that makes it easy to keep them the same and then when we initialize the line we're going to set the polygons to these polygons equal to the same points we want to use the same points that we used except we need to add two more right because if I run it here again real quick iterate this a couple times so I want the polygon to be this whole shape underneath so I need to add this point and this point I need to add the two corners and then it'll be a solid shape so that means that we need to here we need to add or grab the points out of our line 2d and append those additional corner points which is screen size X comma screen size Y that's the bottom right hand corner and then also the zero comma screen size got Y that's the bottom left corner then we can set the polygons points or polygons equal to that and now we'll go ahead and have this instead of doing the input now that we've got our process down I'm gonna remove the clicking and just say when we initialize the line we add the points so right here we're just going to stay for I in range iterations add points so then we can just call that whenever we do it and actually I take that back let's do this let's say that when we press the mouse button will initialize the line again so we can just see our different shapes so see there it makes the polygon under there and so for example if you overlaid a couple of these on top of each other you can get some backgrounds with some different patterns of layers of hills and things you give them different iteration and smoothing values and you can get a wide variety of resulting effects pretty quickly so that'll do it for this tutorial in the next one we'll continue looking at terrain 2d terrain generation but we'll look at how to do and infinitely scrolling smooth hills instead of these jagged and mountainous type of hills thanks for watching and I'll see you in the next video you