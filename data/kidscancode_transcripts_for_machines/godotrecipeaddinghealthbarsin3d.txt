welcome back to good old recipes this time we're gonna be addressing a very common question which is how to attach 2d textures and objects like health bars and things to 3d objects in a 3d space alright let's get started to start with I have a regular old 2d health bar here made with a progress texture that's just configured to change color as it gets smaller as some value decreases and I've demonstrated making 2d health bars before you can check the links in the description below so I'm not going to spend any more time on that but what we want to do for this tutorial is see how we can add this kind of health bar above a unit in 3d so to demonstrate this I've mocked up a 3d mob that spawns and walks in a random direction and when you click on it ten times it will disappear so that health that value is what we want to display in a little bar above the mob to begin our 3d health bar we're going to start with a sprite 3d now sprite 3d displays a texture just like a 2d one does I'll call this health bar 3d and we will drag our texture into its texture property and just like any 3d node as you pan the camera around you're gonna see it from different angles and we don't want that we don't want to see our texture on edge like this we want it to always be facing us no matter how we rotate the camera and you can do that you could do that with some ray casting and rotating the node but there's a an easier way to do that called billboard mode we can enable billboard mode by adding a material and so go over to geometry instance under geometry under material override expand this a little bit material override we're gonna add a new spatial material and in that spatial material under flags we're going to set transparent to on that way our the transparency that's part of our texture will apply we're gonna set it to unshaded we don't want shadows and things like that to apply to this and then we're going to go down to parameters and set billboard mode enabled now when we move the camera you see how our texture is always facing the camera so that part is now working the way we want it to so now on our mob we can go over here and we can attach the health bar 3d to our mob move it up so it's above the mob and an appropriate place you want it and now we have a health bar that displays when we play the game will see our mobs have health bars above them and you can see as we rotate the camera around that billboard mode is now making sure that those health bars are always facing us now we don't actually want our health bar to display the static green bar we want it to display our 2d health bar which can reduce in size and change in color so we're going to render that 2d scene in our health bars texture in order to do that we're going to add a viewport so at a viewport as a child of the health bar 3d and then under it we're going to instance our 2d health bar in our viewport settings we're going to set the size of the viewport to match the size of that texture and so that's 200 by 26 and then we're gonna set transparent to on under rendering or it's going to set usage to 2d this is important if you're if you have a view ports only rendering in 2d setting it to 2d can be a big performance benefit letting the renderer know that it doesn't have to do any 3d calculations into that viewport and then also on render target when you said flipped on that is because by default if we didn't hit this all of our textures rendering our viewport would be upside down so it just flips it vertically so now we have our viewport configured and it's going to render whatever is a child of it which is our health bar 2d and we want that viewports texture to be our health bar texture here in our sprite 3d now we could do that manually right here by adding a viewport texture however that will give us an error because because the viewport is a child of the sprite it won't be ready yet at runtime to be able to be used for the texture so we're gonna need to set it in code so add a script to your health bar 3d and in ready we're gonna set texture texture property of the sprite 3d equal to the viewports texture and that's all there is to it now it'll do it when the sprite 3d is ready which is going to happen after the viewport is ready so now we need to connect this up so that clicking on the mob updates tells this health bar to update so we're also going to add a little bit of code to pass that update notification down to the 2d health bar and the 2d health bar has an update bar function where you just send it the amount and the max and it will fill in the health bar appropriately and so on our health bar 3d we're gonna do the same thing we're gonna call give it an update call so that our mob can say hey 3d health bar update yourself and it will pass that through to the health bar 2d and it's update method all that remains after that is on the mob to tell it when it takes damage tell that 3d health bar to update and that is all there is to it now if we run we should be able to see this all working the way we want there's our bar when I click on my mob it goes down and everything is working the way we want so you can use this technique with any kind of 2d texture or object that you want to render above or around or in your 3d space alright this could be a label displaying some text like a name tag this could be a radial texture this could be any kind of control node or 2d know that you want to use this tutorial is part of my nugudo recipes website the goal is to collect all the best tips and lessons to help make you a better go to a developer if you like this video I hope you'll go and check out the site and make sure to hit subscribe so you'll be notified whenever I release new videos thanks for watching