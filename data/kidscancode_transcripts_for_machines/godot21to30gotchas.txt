hello this video is a brief overview of some of the main things you need to know if you're moving from Godot 2.1 to 3.0 this is not a comprehensive overview of the new engine features that would take much too long instead it's a quick look at the main gotchas where I've seen people get stuck or confused by some of the changes the first thing you'll notice is that the UI has changed a little bit some of the buttons have been moved around the play buttons for example or over here on the right now and the theme has changed a little bit the color schemes a little different something else new is in the editor settings you can even go in here and change to a different theme the preset theme is the one you're seeing there's even a light one if you want to try that out you can have a light theme well although personally I think it looks a little strange some other UI changes your project settings are now under the project menu and they've been reorganized a bit set to in a few different categories one that I really like in here is that your 2d render and physics layers can be named so if you're using a lot of different physics masks for your different types of objects so you can go into layer 1 and rename this two enemies and then it will appear as enemies in all of the settings dialogues in another place I see a lot of people getting confused in 3.0 is when importing assets Godot 3 will automatically import any assets that you place in the project folder you don't have to do it manually so I have this art folder that I've added to the project and it's got a bunch of textures and and sounds in it and they were automatically imported when I opened the when I open the window that actually does it in real time but if you want to change the properties for example this image here this texture I want to change its import settings the import tab is over here on the right and here you have all of your settings for how you want it to be imported and you can do this with multiple images at once if I select all of these I can apply the same setting to them for example if I want caps on for all of them and maybe I want filter on then I can say rien port and it will do that I can also go to some type of asset and set whatever settings I want as the default for that type so that the textures will always be imported with filter off or however you want to do it and there are some presets here as well so it's a little bit more it's a little different from the way it worked before I think you'll probably find it's more convenient over time but at the beginning it does tend to trip people up a little bit so let's look at some of the scripting changes if you add a script you'll notice now that you have some language options we're going to stick to GD script for now and something very convenient if you're used to using Godot is the template the default template is going to be the one you're used to seeing where if you add it it's going to have all the comments in it but if we close this one and we were to go back over to the node TV and let's add another script and choose you can choose empty which will do a completely empty script or you can have no comments which will remove all those comments that you have gotten used to always deleting the first time you make the script so we'll we'll go to with the no comments version so here's our empty script now the first thing you'll probably encounter writing scripts in 3.0 is that in the previous versions when you wanted to use the input function or you wanted to use process or you wanted to use the physics callback which is called physics process now it used to be called fixed process so that one got a rename if you want to use these callbacks in 2.1 you had to enable them you had to set processing to true in your ready function but now in 3.0 if you include these functions they will automatically get processed so you only need to use that set process so for example if I want a set process to false at the beginning of my script I can put that in there ready and then set it to true at some other time but you don't have to set them to true by default if you want to use them just include them and they will work now this next one is one of my absolute favorites so I've added an animated sprite child to this node 2d so imagine we we had some animations in there and we want to be able to in our script start and stop them things like that now in 2.1 what you had to do was you would have to say get node and then the name dot play or whatever you wanted to do with that note and so that meant your if you have a lot of different child nodes that you're accessing your script could get kind of messy and have so many of these get nodes with you know the path to the node which could be you know two or three children deep and so the way that the standard way that everybody addressed that was they would make a variable and assign that to the get node right so they would put you know those put this up there and they would make that variable a reference to the animated sprite and so your 2.1 scripts would be full of these on ready calls at the top and then the variable being used throughout your script and so this is a lot more convenient now in 3.0 when you want to talk to the or when you want to reference the animated sprite use a dollar sign dollar sign is a shortcut basically for get node so if I start typing a you're gonna see I get auto completion it knows what the children are and I can just say animated strike the sprite play and this works with grandchildren nodes you know if underneath the animated sprite there's a I don't know particle 2d and I rename that the trail or something just as an example then when I want to reference that it will find it like this animated sprite slash trail and I want to set that emitting property to true and so it's just a lot more convenient in your script to explicitly see what node you're referencing without having to look at the variable name and then look up above and see which get node that was a reference to which brings us to one of the other big scripting changes or changes to the API in general which is accessing properties directly without having to use the set and get functions so we look at the class help for the particle 2d you'll see that it has a list of members now and so these are properties that you can access directly so instead of saying set emitting true and get emitting you can just use the emitting property and just about all of the nodes have had these member variables enabled on them and it makes for makes things a lot more convenient for example moving this node let's say I have in my well let's make our process function and let's say in here I want to move my node to D I've got a velocity that's a vector I just want to move it ten ten by ten pixels right so I want to move that a little bit each frame and so normally what you would have had to do in 2.1 was you would have to say set pause get pause plus velocity right and this was a very common construction that you would see and so what's changed now is that first these abbreviations are gone so its position not pause and it's rotation not rot anymore but you can also set these directly with the position property so the position property contains the node two these position so if i want to change it by adding the velocity i can just add the velocity like that and this is a lot more concise and clear and makes for much cleaner code when you are changing properties of a node another big change that will get you if you're not prepared for it is the rotation direction has changed so in two point one if I took this sprite and I rotated it by ten degrees it would rotate counterclockwise but now if I rotate ten degrees I'm going to rotate clockwise so positive is now clockwise it also means that in a situation like this the red vector is now now has an angle of zero zero points along the x axis so the green arrow here the green vector would have an angle of negative ninety in two point one this green arrow would have been the zero angle and we would have gotten positive in the other direction and so it's everything is completely reversed from the way you did it before but probably more like you're used to doing it in other programs where the xaxis is the zero direction and clockwise is positive there are lots and lots of changes to individual node types way more than I could get into in this video for example kinematic body 2d has changed quite a bit there is no longer a move function which is been tripping up a lot of people I've noticed on the discord so move is now called move and collide basically works the same as move did and then you have additionally a moving slide which will take care of your sliding along obstacles when you hit them and so I encourage you as you're starting out with 3.0 or if you're trying to convert things over to 3.0 from your older projects read the API reference the docs have all the changes in them the API reference for 3.0 is far far more complete than two point one's was so if you're used to looking in there and not finding information we are significantly more complete and well documented then we used to be thanks to the efforts of lots and lots of people on the documentation team and pull requests that have been coming in over the last couple of months and they're continuing to improve so keep an eye on the docs and that's your place to look first when you're trying to find out what has changed so coming up you'll see from me some more videos on individual components of 3.0 and how to use them I've already done one on particles 2d that you can see linked below so please subscribe and look for those coming soon thanks for watching you