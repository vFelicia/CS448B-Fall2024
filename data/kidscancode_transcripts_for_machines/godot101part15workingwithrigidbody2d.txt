welcome back to goodd 101 in the previous video we looked at the rigid body 2D and how you make one and how it can be used and in this video we're going to look a little deeper in how you work with it and make it behave the way you want it to all right let's get started for this demo I'm starting out with a simple rigid body 2D with a Sprite and a collision shape and my little uh debug draw node which just will draw some vectors on there for us to troubleshoot with Now by default when we run this scene the ship is going to fall and we can see its velocity Vector in the yellow increasing because by default the scene will have gravity on it and we can change that by going into the project settings to the physics 2D Tab and in here is where you can customize what you want the default gravity default physics and all that to be so since we're going to be working in space I'm going to set the default gravity to zero and then there's also a couple of settings for the default linear and angular damping so by default there is a little bit of linear damp well in space there shouldn't be any of that so there's no friction so we're going to set that to zero and the angular damp is the same thing that's how quickly rotating bodies will stop rotating so we're going to set those to zero too and so now that's going to be our ship scene and if we run it our ship is not moving at all there's no gravity acting on it and so we will be moving this ship using Code so here we are looking at the rigid body 2D documentation and all the different methods that we can use on it which we're going to be able to use in our script but something you'll notice right away is there is no position related functions you can only work with with forces and velocities and even the velocity if you click on it there's a big warning can be used sporadically but don't set this in every frame because you're going to mess with the physics if you keep changing an object's velocity and we'll talk about how we can deal with that but you never are going to be setting the position of your rigid body 2D manually you only apply forces based on what you want it to do so let's look at the ship's script now normally in previous lessons you've seen we've used the uh fixed process function to do any of our physicsbased per frame code and you can do that with the physics body too but the physics body or sorry the rigid body 2D has something called the integrate forces function and what this one does you can see in the the description here is allows you to read and safely modify the simulation state so if you're going to make changes to the forces and movement of the rigid body you want to do it in this part of the loop not in the fixed process so that's what we're going to do we're going to use the integrate forces function and in here we're going to check to see if you have the up Arrow key pressed and if you do we're going to apply a force to the body so the first thing we're going to do is we're going to Define our thrust uh and thrust is going to be a vector pointing in the direction that we want our ship to move so we're going to make that I'm going to make this small to start with so we can see it acting so this is going to be a vector pointing downwards and then uh if we're pressing the key is action pressed UI up then we want to set the applied force to the thrust and if we're not then we set the applied force to nothing right so only while we're holding down are we going to apply thrust so if we run this so I'm going to turn on the the debug code here so you can see you're going to see a red vector that's the applied force and you're going to see a yellow Vector that's our velocity and so see if I tap it whenever I tap it we're applying force and our velocity is getting longer and longer as we go let's look at that one more time if I just tap it briefly see our my velocity is low I have no applied forces right now so with no applied forces the body just keeps moving at a constant speed but if I apply some more Force I will speed up so there our engine thrusting but now we want to be able to rotate and rotating means we need to apply torque to the body here's how we do that so we set a value for what our torque quantity is and then we're just getting whether we have the right or left arrow down so it's going to give us a a one a zero or a negative 1 and we just multiply that by the torque and set it on the bot body now what this is going to do is if I hold down the right arrow key you know I'm going to rotate to the right and when I let go of the key I'm going to keep rotating because I've applied that torque to it if I keep holding it down it's going to torque apply more and more and more and I have to apply in the opposite direction to slow it down or go the other way so something we could do is use the damping to slow it back to zero so if we go to the ship here a body can have an override on the damping that the space has in it so remember we set the default damping to zero so this space that we're in has zero angular damp but we can add it to our ship here and let's set that to five okay and now what you'll see is that when we apply the torque and let go it's going to stop again but it's now it's rotating really slow because I I'm holding the arrow key down now and now that damping is canceling out a lot of the torque so that means we need to increase our torque amount and that should give us a good right when I press it I rotate and then I come to a stop pretty quickly when I let go okay so now we're applying torque to the body and when we apply thrust it still goes downwards because that's the way we Define thrust so we just need to rotate our thrust by however much the body is rotated and that way it will point in the right direction so now if we look at our Force our applied force is going to be in whatever direction we are pointing and we can see it changing our velocity the way we want it to and let's go ahead and increase that thrust so that our ship isn't so slow and now we can see we've got a little we've got a good little asteroid style ship control now all right now to show a little bit more about how this works I've taken in the ship and added it to a scene with another rigid body 2D that's this little asteroid that's just going to travel in a spa straight line so you can see when we start it that there's the The Rock and if I thrust there's my ship and if they Collide right they're going to bounce off of each other and you can actually push things around by pushing against them which is a little bit unrealistic for a big rock so what you can do is change the mass of the body and that's going to affect how they Collide so for example if I set the mass of this asteroid to a very large number then the ship is going to no longer be able to really affect its gravity or I'm sorry affect its velocity very much you can see it's I'm pushing against it and its velocity is very slowly changing As I push up against it okay and another thing you can do is I've added a planet here this is an area 2D okay and what area 2DS allow you to do is override inside of their area any of the global physics properties so for example I've taken this circular area 2D and I've set it to its override mode is combined meaning it adds its properties to whatever the global properties are and I've said I want gravity to be a point so it's going to make gravity point to the center of the area and then I've set a value for what I want gravity to be a strength okay and what that means is when the ship enters this area it's going to feel the pull of gravity towards the center of that area so if we thrust over in that direction you will see that gravity will grab a hold of us and pull us towards that object but then I can thrust away and I just thrust away from it right I just got away without any kind of escape velocity or anything because what's happening is we're ignoring the gravity when we apply our Force right our applied force is just the thrust of our engine and it's so it's removing the gravity and so we want the gravity to still apply and to do that we need to use the physics state so when we use integrate forces we get the body's State and if you look at that that's got a lot of information about all the current state of the body and the one we are interested in is What's the total gravity Vector that is currently being applied to the body so if we go over here we just want to add state. getet total gravity to our thrust and we also want to add that to the force when we are not thrusting okay so our gravity will always apply and that is going to let us have a much more realistic chance of getting into a stable orbit around this object because our thrust will be canceling out part of the gravity depending on the strength of your engines and now I'm in a little orbit around this that I could try and circularize if I can point in the right direction there we go okay so now I'm in a little orbit around the planet and if I thrust hard enough I can maybe cancel out part of the gravity but to depending on how you slingshot out you can get outside of that area and so it's up to you to set how big you want your you know your area to be how far out you want the gravity to reach this is not going to be a fullon you know orbital simulation you'd have to do some more calculations for that but it's pretty good and does illustrate how you can use areas to override the physic state of the rest of the space that will do it for this video if you have any questions about rigid body 2DS and how to use them post them in the comments below and I do want to stress here that most of the time if you think you need a rigid body 2D you probably don't games are not about precise realistic physics simulation games are about fun so if you're making a Mario game some kind of platformer if you're making asteroids things like that you don't don't need or want realistic physics you want fun precise controls and a lot of times a rigid body a using a realistic physics engine is the wrong solution for that you're going to wind up fighting against what the physics engine wants to do to get it to do what you want it to do so think about that when you're planning a new project you're thinking about what what you're going to do uh start you probably want to start with using a kinematic body 2D unless you're making Angry Birds or something like that where you really really need actual re looking physics all right I hope that clears that up why you would use one body over another and I will see you in the next video