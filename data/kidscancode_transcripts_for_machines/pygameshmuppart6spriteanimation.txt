welcome back to the pame game development series we are working on a schmu this is part six and in this video we're going to talk about animated Sprites how do you make a Sprite that has a changing image an image that changes over time so where we are right now is we have our ship and we have our meteors flying through space at us and we can shoot them but the meteors a little boring because they're all facing the same way and they would probably look a little better if they rotated if we could have them looking like tumbling asteroids so that means we want to have those Sprites be animated so how we go about that well let's look at our mob Sprite here so we're using this image and as you saw up in the player we used a pame transform command to change this scale of the player Sprite well there's also a rotate transformation you can do on Sprites as well so we could take that meteor image and apply a rotation to it and then it would turn uh and if we did that over and over again we could make it rotate all the way around in the circle um the problem is that we don't want to rotate it every frame of the animation because we're running at 60 frames per second the the Sprite would rotate really really fast so whenever you're doing any animation in a Sprite you also need to figure out a timing for how quickly you want that image to change so we're going to need to set up a few things to make that happen so first of all just to make the Sprite rotate we're going to create a variable called uh I'm just going to call it rot short for rotation um and that's going to be far in degrees the Sprite should be rotated okay so it starts out not rotated and then it's going to start going um and then we're also going to set up a rotation speed okay and that's going to just be a random um a random number that'll control how fast our Sprite is rotating basically how many degrees it's going to rotate every time we do it uh that way we can have them tumbling in different directions okay so we'll make that between minus 8 and 8 um and then to do the timing remember we have a clock object right we that we created back when we initialized the game this clock thing is keeping track of how quickly the game is going and making sure it runs it 60 frames per second well it also means it's counting time so we can use that to count how long it's been since the last time we updated the image and if we do that we set a a particular value there we can say is it time to rotate the image again if it is we'll do it if it isn't we'll wait okay so we're going to call that um the last last update so this will be the time that we last updated okay command for that is get ticks a tick is a tick of the clock so this will get however many ticks it's been since the game started since the clock was started and this will every time we update every time we we rotate the image we'll update this variable to keep track of when that happened now we're ready to update now we're going to need a a few lines of code to make the rotation happen and we need to do it in our update so that it uh will check every frame of the animation if it's time to update yet um but I don't want my update function to get too Crow into to full of code so I'm going to just say that every time we update we need to rotate or check to see if it's time to rotate and that way we can Define rotate separately and that's useful because it keeps everything organized and the rotation code is all separated in this rotate function also if you ever want to turn rotation off you can just comment this right here and then it won't ever do the rotate so there we have that now we're ready to figure out how to do the rotation the first we need to find out is it time to rotate yet so we need to figure out what time it is now and so we'll do the get tix command again and now if whatever time it is now minus whatever time it was the last time we updated right and doing that will mean if now is uh equal to a th000 and last update was equal to 900 then 1,000 900 it's been 100 milliseconds since the last time we updated so this little subtraction here tells you how long it's been in milliseconds so we're going to say if that's greater than 50 then it's time to rotate again so we can take our last update variable and set it equal to now cuz we're rotating now and now is when we need to talk about something important about how this rotate uh transform is going to work so I'm going to show you first the wrong way to do it so don't copy me on this I want you to see why uh we're going to need to do it in a certain way so you might think you could just say well I just want to take the image and rotate it so I'll do transform. rotate on my image and put what whatever the r speed is so like if rotation speed was one then I'm just going to rotate the the image one degree um and you might think that would work but this is what will happen all right so you see how my meteors get completely scrambled around everything starts lagging it's a huge problem fact it lag so much it's hard to close the program eventually we'll close there we go so why did that happen well the thing about this rotate command is when it takes an image and rotates it that process loses a tiny tiny amount of information from the image the pixel information from that image and that's fine if you just rotate it once but every time you do it you're losing a tiny bit so doing it over and over again eventually you're losing so much information that the image becomes scrambled beyond recognition so we don't want to do it that way what we really want to do is rotate the original image the nice clean image and take that and rotate it however far we want it rotated so the way we do that is we're going to go up here and we're going to call the meteor image we're going to make this the original image okay and we're going to set our Sprites image equal to a copy of that so we're going to take the original image and make a copy okay so the image will be a copy of that original but now we have this nice original that we're not going to make any changes to so then back down here in our rotate what we can do is say rotate the original image but we don't want to rotate at the rotation anymore we want to figure out how much we're supposed to rotate it all together so if we're keeping track of how far we're rotating so we rotated 90 degrees then next we're going to need to rotate it to 92 and then 94 and then 96 Etc so we want to take our whatever our rotation is and add the uh rot speed and that'll give us our new rotation but what happens when our rotation gets to be bigger than 3 60 right if we're at 360 degrees and we rotate a degree we'd be at 361 we don't want this rotation to just keep getting bigger and bigger and bigger uh we want it to just loop back around to to one again and we can do that by just taking this and using the remainder operator which just says divide by 360 divide whatever you got by 360 so if we're at 361 and give me what's left over so 360 divided by or 361 divid 360 is one with one left over so it gives me that one left over so now my rotation is equal to one so that's a great way to keep a number from going over a certain amount make it loop around so we count up 359 360 or sorry 359 01 two like that and then we rotate that original image by that amount and that's going to make everything look much better see now I have nice rotating images but you might see see that one see them rotating a little oddly now we have another thing to keep uh track of and that is our rectangles aren't good anymore and what do I mean by the rectangles not being good well I've made a quick little example here of a program that will um rotate a ship on the screen so I took the ship image and I said rotate it just keep Rota it around like we're doing with the meteors now you can see how it's not rotating very cleanly it's bouncing around why is it bouncing around like that well if I draw a rectangle there you can see this a little better so when we originally created the image we created that rect around it but now we're rotating that image and it doesn't always fit inside that rect anymore so what happens is is every time you rotate it you need to figure out a new rectangle that fits around that image and then you want to take that rectangle and make sure you keep it centered at the same spot always so we want this rectangle to change size and shape based on whatever the image is and we also want it to uh stay centered so it looks like the ship is rotating around its Center okay and we can do that uh I'll show you what that looks like looks like this see every time the ship rotates we figure out a new rectangle that encloses it which sometimes gets bigger and smaller depending on you know how it fits around the image but it always stays centered in the same place so my ship looks like it's just turning in a circle and that's what we want to do with our meteors as well okay so if we come back over here to our rotate function here this rotated image is going to be our we're going to call this our the new image so this is the new image that we're going to use and we also need to figure out where where was our Center so our our oops so our rectangle is centered right now at this old center right so now we can set our image to the new image and we can get our new uh get our new rectangle which is image. getet rect so now we have our new rectangle and we'll take our new rectangle and we'll put its Center at the same spot as the old Center was and that will do exactly what you saw that ship doing replace the image with the new one figure out its new rectangle and keep it centered at the same spot the old one was now our rotating meteors are going to look quite nice tumbling through space some fast some slow and everything else will work just fine can still shoot them um and we can still be hit by them okay so one other thing I wanted to do uh for this video is make those meteors a little more interesting by using um a bunch of different images for them if we go back over to our files here um in the art pack there were all sorts of different size meteors big small even tiny ones um and what I'd like is for my Sprites to just be randomly picking one of these so that we have different looking meteors instead of all being exactly the same so I'm just going to move this over here so I can see the list so what we want to do is instead of loading this one image we're going to make a list called meteor images and that's going to be empty right now but that's going to hold all of our images so that we can randomly choose one out of that list so what we need to do is make a a list here of um of the files that we're going to use okay so I'm going to put I'm going to put the meteor um meteor Brown uh big one.png okay I'm just going to copy this in a few times so that I don't have to retype it we'll wrap this around and got one more um and then we can just fix them so there we go so I want big one big two I have medium one and medium two I have small one and small two and I have tiny number one okay so now I have this is the list of all those file names that we want to load so we can now just do a little Loop through the medior list this meteor list of files and each time we want to just do the image load on it so we're going to say meteor images. append and what we want to pend is py game. image. load path. jooin the image dur uh with the whatever file name we're doing um we don't want to forget to do. convert and then at the end of this Loop we'll have a meteor list a list of meteors and meteor images that's full of all the right images and we can go up to our mob here and instead of loading this one image we're going to say random. choice of meteor images and then we should be randomly picking oops looks like I made a typo in my list oh yep missing a comma right there that'll be a problem so now there we go so now sometimes I've got big ones sometimes I've got small ones the big ones are not appearing far enough off the screen so we probably want to move them up a little bit this y that we picked this random Y is probably too small so it will go from there to there so that they appear off the screen now we get the nice big ones the tiny ones okay and that will do it for this video see you next time