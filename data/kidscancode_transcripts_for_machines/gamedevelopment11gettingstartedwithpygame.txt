hi everyone welcome to our new series game development with PI game now this series is going to assume that you have some basic understanding of Python so if you haven't done our intro series of videos I recommend you go and do that first or else some of this will seem a little bit confusing you also need to make sure you have installed PI game on your computer now the process for doing this is a little bit tricky and it's different depending on what kind of computer you have so we've written up some instructions and if you check the link in the description below you can follow those directions make sure PI game is working before you start on this video or you won't get very far okay so first of all what is PI game what is it for well PI game is what's called a game library which and the library is just a collection of tools and these tools happen to be ones that are really helpful for the common things you need to do when you're making games like showing graphics on the screen and animating it playing sound and controlling things using mouse or using the keyboard or a gamepad or whatever you're using for control okay now the most important thing you need to know about a game or the most important piece that goes into making a game at its heart is called the game loop the game loop is what makes the game happen every game at its heart has a game loop running and in that game loop a certain number of things have to happen every frame of the game these three things are going to happen the first one is processing input that's also sometimes called events that just means anything from outside of your game that happens that you want to pay attention to and have the game respond to like a key getting pressed or the mouse getting clicked or a button on the gamepad getting pressed or whatever the case may be and the second step is updating the game that means changing anything that needs to change if a character on the screen needs to move need to figure out where it's supposed to move to if two things run into each other we need to figure out what was supposed to happen when they ran at each other anything that has to change in your game since the last time you updated it and then the last part render is you can think of it as drawing that's draw everything to the screen so we've figured out what changed now we have to draw that if we figured out that the character moved to the right a certain number of pixels well now we need to draw it that number of pixels to the right and then I have drew that little picture of a clock there to indicate that we also have to control how fast this happens right that's normally called FPS frames per second so how many times per second does this loop repeat FPS is important because you don't want your game to run too fast or too slow you want it to be running at the speed that works for what you have set up and what's also important is you don't want it to run at a different speed on every different computer that it runs on just because someone has a faster computer than you shouldn't mean the game runs faster so those are the pieces of the game loop and as we start writing the code I'll go into more detail about what each one does and how we set it up okay let's get started with my game so I have Adam open here and I'm going to start by importing PI game we're also going to go ahead and import random probably going to use that in making a game and I'm going to save this and I'm going to call it tie game template don't forget to put py at the end okay we're going to call this a template because this is going to be the skeleton of a PI game project we're going to reuse that skeleton every time we want to make a new game so to save us retyping the same things over and over again we're going to do that I'm going to put a little comment up there it's this is a tie game template skeleton for a new PI game project okay so the first thing we need to do in our code is we need to tell plugin to create a window so the first thing we're going to do is we're going to set up a couple of constants for the settings of our window and I'm just going to say this is going to be 360 and the height will be 480 sort of a mobile windows size and then we're also going to set a constant for our fps now the FPS remembers how fast your game runs that stands for frames per second that's how many times per second the screen will be updated and we'll be able to adjust that here depending on what we want our game to do first thing we're going to do is we're going to do PI game init that initializes PI game gets ready to go now if you're going to do sound and you almost always want to do sound in your game you also need to initialize the mixer the mixer handles playing all the sound effects and music that you want to have in your game alright now we can create the window and we'll just call it screen it'll be the name of the variable we use and we just say display dot set mode and then what width and height we want that window to be and then we can also do set caption and we can have it say whatever we want to say up here at the top of the window and then the last thing we'll do for setup here is we're going to make the clock tie game time clock and that's going to be the thing that handles the speed and keeps track of how fast we're going so we can make sure that we're running at the right number of frames per second ok we'll go ahead and label some of these things initialize our game and create window that's what this little chunk of code does is now that we have the window we're ready for the core of our game which is the game loop okay our game loop is going to be a loop so we want to have a while loop but we also need a way to stop it so an easy way to do that is to create a variable called running and that'll start out being true and that way if we ever want to set if we ever set that running variable to false the loop will end so that's how we'll end the game of whatever happens to end the game we just set running equal to false and our loop will end all right if you recall from the slide earlier there's three pieces that go into the game loop there's the process input also known as events there is the update and then there is the draw or render section those are the three parts okay so I'm actually going to start with the draw section now we don't actually have anything to draw so we don't have any characters or anything in our game but what we're going to do is we're just going to fill the screen with a solid color and that's going to be our whole draw section and we do that by saying screen dot fill and then in the parentheses we're going to put what color we want to fill the screen with but before we can do that we need to talk a little bit about how you do color in my game on the computer screen every color can be described as a combination of red green and blue light for example the secondary colors are the combinations of the two primary colors red plus green equals yellow and so on if you have all three colors mixed together you get white and if you have no color at all that's black now to choose what color we want to display we have to say how much red how much green and how much blue we want to go into mixing our color and do that by choosing a number between 0 and 255 for each color here are some examples no red no green and no blue well that's just black maximum red maximum Green maximum blue gives you white and after that I've listed the individual colors so for example green is no red maximum green and no blue and for example at the bottom to get cyan you want to have no red maximum green in total that gives you over 16 million colors to choose from because 256 x 256 x 256 is a bit more than 16 million ok back to our PI game program so we want to fill our screen with a color now we could put in the parentheses what triplet of colors we wanted for example for black I could put 0 0 0 but instead of having to type that every time a lot of times you want to reuse the colors multiple times so what we'll do is up here at the top after our constants we're going to define a few useful colors that we can use in our program so I'll put white that was 255 255 255 will put black 0 0 0 and maybe a few other ones that we might want to use as we're getting started okay we can always go back and add and remove different ones who are depending on which ones we need but that means we can go down here and just say fill the screen with black right to finish up the drawing section there's one more thing that we need to explain drawing things to the screen actually telling the monitor to change the pixels on the display that the person is looking at is one of the slowest things that the computer can do and so if you're doing a whole lot of it it's going to slow your game down if you imagine we had a whole bunch of things flying around the screen you know lots of players enemies bullets clouds animations whatever flying around the screen there's a lot of things to draw so every time something moves we don't want to individually have to redraw every single thing if there are a hundred balls bouncing around the screen we don't want to redraw each one individually so what we do is we use something called double buffering and that's just a fancy word for what you can think of as if you imagine Oh a whiteboard that has two sides the front side is the display is the thing that the person who's looking at the computer sees and on the back side is where we can do all of our drawing so if we draw everything on the blacks on the back side and we get everything finished then we're just going to flip that whiteboard over and then the person will see the new frame of the animation everything is drawn where it's supposed to be and while they're looking at that we can be drawing on the back side the next time through the loop the next frame of the animation and then flip it again so every time you finish drawing you need to flip that whiteboard over and so there's command for that the command is just PI game dot display dot flip okay that literally means flip that imaginary whiteboard over and show the other side where you've drawn everything okay and you just want to make sure you remember always do this fast this is after drawing everything flip the display okay if you draw if you flip the display and then you drew something afterwards no one would ever see it okay so you want to make sure you remember just do the flip last and then we're done with the drawing section of our loop so let's talk about the events well we don't actually have a game yet remember this is just a skeleton so we don't have controls we don't know what controls we want to use the keyboard or the mouse or whatever but there's one event one input that we want to make sure that we pay attention to and that is if somebody clicks the X up in the corner of the window if they do that we want the game to close right now if we ran this there's no way to close the window clicking on the X will be ignored so we're going to add one thing for that okay now the thing about events is they could happen at any time right if we're going through this loop and we're in the middle of the update section and we're running that code and the player presses the spacebar to have their character jump we don't want to ignore that and then when it gets around to the event input section again it says well nobody's pressing the spacebar now so it's not going to jump because then players are going to feel like they're pressing keys and nothing's happening right because remember this loop is happening fast if it's happening 30 frames per second right we put 30 FPS then this loop is going to be one thirtieth of a second so if you press the spacebar while you're in the while the computer is doing the update or the draw you want it to remember that and still make the character jump and and not discard that key press so what PI game does is it groups up all the events and keeps track of them any ones that have happened since the last time you asked it if there were any events okay so what we're going to do is we're going to do a little loop here and we're going to go through any events that have happened since the last time we asked if there have been a events and then we can process any of them so that we don't lose any okay now the only one that we're going to do is we're going to check for closing the window okay pressing the little X up in the corner okay and that's just going to be an event each event has a type the event type of the closing the window happens to be PI game quit in all caps PI game has a whole bunch of events defined with different names and this is the one for closing the window so if they do that if they do press that key then we can just say running equals false right so we want this game loop to end so this game loop will end so down here outside of the loop we can just say PI game dot quit which is the PI game command to terminate the window and the program close everything up okay and now we're pretty much finished with our skeleton we don't have anything to put in the update section because our program doesn't actually have any stuff to update we're not actually changing things right we don't have any characters to move around on the screen so we'll leave that part blank we're drawing the screen we're filling it with black we're flipping it over then we're going back around now the one thing we haven't dealt live is that FPS that's speed so remember we have a constant defined for it 30 and we have this clock item here this clock variable that we've created so we can tell PI game that it should keep track of time okay so what we want to do is inside the loop we want to keep this running at the right speed okay and we do that by saying clock tick fps so what this does is it tells PI game however long it took you to process the input to handle the updates to draw the stuff on the screen however long that was hopefully it was less than one thirtieth of a second and if it was then you're going to pause for just long enough to make it so that the whole loop was one thirtieth of a second so if it managed to do this stuff really fast it'll just wait the rest of that thirtieth of a second that way this loop will always run at the same speed now when problems happen or when a problem starts happening is if your update for example is really slow because you're trying to do too many things and this update takes so long that the loop takes more than one thirtieth of a second well then you have something that everybody hates when they play games something called lag so it's important to remember that tie game will keep it running at the speed you want but it can't make it go faster if you're trying to do too many things at once so we won't run into that with our basic games that we get started with but as your game gets more and more complicated that starts to be something that you have to think about different strategies for solving and keeping lag from ruining your game all right let's go ahead and run it because we're done so I'm going to press ctrl R remember it's alt R if you're on Windows for the atom runner to run the program and now there we are there's there's my game my black screen it's actually running this black screen at 30 frames per second and all we can do the only input we can do is press the X on the end and that should close the program hopefully and it did ok so we're done with our skeleton now we're ready to move on to the next lesson and start making a game you