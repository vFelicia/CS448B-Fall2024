welcome back to godot recipes this time we're going to be looking at how to make a rolling cube in 3d rolling a cube is trickier than it seems at first because we can't rotate the cube around its center that won't look right it looks like the edge goes into the ground what we want to do is rotate it around its edge like that the problem is which edge which edge we rotate around depends on which direction we're moving in if i'm moving to the right like this i can rotate along that right bottom edge but if i'm moving to the left i'm going to need to rotate along the bottom left edge now in preparing this video i tried a few different approaches to implementing this rolling uh and there were really three main ones that i experimented with first the pure math solution where we calculate transforms and rotate the transforms around depending on which edge we're rotating around the second approach i used was to put an animation player on the cube and use that to manipulate the pivot point and the rotation and then lastly i tried it using some helper nodes that we then just move to the right position and then rotate that node and that last solution is the one i found to be the most flexible so that's the one i'm going to demonstrate in this video so here's our node setup i'm starting with a kinematic body you could totally do this with an area or with a rigid body depending on what type of game you're going for so the changes would be minor i'm going to stick with the kinematic body it's simpler but feel free to experiment and then i have a pivot node this is just a spatial that i'm going to use to be the pivot that we're going to rotate around and i've made the mesh instance a child of that pivot so that when the pivot rotates so does the mesh then we also have our collision shape and we've got a tween that we're going to use to do the animation now since this cube is always going to be on the ground i'd like the position of the cube to be the bottom center of the cube not the center of the cube so i'm going to take the mesh instance and i'm going to move it up one and i'm also going to take the collision shape and move it up one so that way now our cube position right is right down there at the bottom center and the pivot is there as well but the mesh is offset and the collision shape is offset both by one in y okay so now we're ready to script our movement and here we're going to break it down into three steps so the first step is that we need to put the pivot at the corner that we want at the edge that we want to move in so say we're moving to the right we want to take the pivot and move it one unit to the right and the mesh instance one unit to the left so everything looks unmoved but the pivot is now at the correct corner so that's step one step two is to actually animate the rotation so we'll take the pivot and we'll animate it rotating 90 degrees and now the cube looks like it's in the right position but we haven't actually moved the kinematic body all right so what we really want at the end is that the kinematic body is two units to the right since the cube is a size of two and so we're gonna as the third step put our kinematic body two units to the right and then reset everything so the pivot rotation gets undone its movement gets undone and the mesh instance also gets undone right and now everything is reset back where we started with the pivot at the bottom center everything is good but our cube has moved two units to the right so let's look at our script so we've attached a script to our kinematic body and we have a variable here called speed that's going to be how fast you roll so you can increase or decrease that to change your rolling speed i've got a couple of variables here to reference the various nodes the pivot node the mesh node and the tween node and then in our physics process we're going to check the keys so that we can hold down the right arrow key and we will keep rolling continuously until we let go so we're just going to check the inputs here and each one will call the roll function to roll in that direction now let's look at the roll function so the first thing we're going to do is if the tween is active that means we're in the middle of an animation we're rolling to a new spot so we don't want to start rolling again until that finishes so if the tween is active we're going to just return and then we're going to do those three steps i talked about so the first step is to offset the pivot and the mesh right the pivot if we're moving right we offset the pivot to the right and the mesh in the opposite direction and then step two is to animate that rotation so we want to rotate the pivot around the right axis and so the axis we're going to get is the direction we're going the cross product with the down vector is going to give us the axis we want to rotate around and then we interpolate that property the transform basis of the pivot from its starting position to its itself rotated 90 degrees around that axis how long it's going to take is one divided by speed so you make that speed number bigger it will happen faster and then i highly recommend you play around with which transition types you use i like the way the quad one looks but you can go crazy with all of them and try them out like even do the bounce one where it'll bounce when it hits the end and so on we start the tween and then we wait for it to finish so that once the tween is finished then we can do step three which is to put everything back and be ready for the next move so we actually move the kinematic body two spaces in the direction stick the pivot back at zero zero zero stick the mesh back at its original starting position which was one unit up okay and now everything will be reset and ready to start again so let's look at how that looks okay if we try it out on our test scene here you'll see that we're almost there but there's one thing that's a little odd the cube is rolling but you might notice that it's squishing a little bit you can especially see it when we move to the side see that it shrinks a little bit and then expands again as it rolls well the reason that's happening is because of the way the tween is interpolating the basis from its zero rotation to its 90 rotation and we can actually see this if we set it a little slower and make the speed a little slower you can see how it's shrinking and then growing again and there's a couple of different ways we can fix that one is that we could go into our script here and instead of rotating the full 90 degrees we could rotate 40 and then a 45 and then another 45 and that would work fine what i don't like about that is having two separate interpolations means you can't really it makes it messy to deal with the different transitions and getting a smooth if you don't use linear you're not going to get a smooth rotation so what's better is to take the take that tween node and connect its tween step signal and that tween step signal is called every frame while the tween is running and so what we'll do there is we'll just tell that to take the pivot.transform and orthonormalize it which is the same as resetting its scale which remember the basis takes into account the rotation and the scale we want the scale to get reset and that's going to fix that problem now you'll see i left it on the slow motion so now it just looks like it's rotating all the way around now you might also notice that the other problem we have is that if your texture of your cube it's not symmetrical then you see it's got this little text up here in the corner after i move the rotation of the mesh resets so it looks like it snaps back and if your cube were say different colors on each side you'd also have that problem too where you want to see you want that rotation to be preserved and we could do that in a couple of ways we could add another pivot node around the mesh instance that that we can then keep the rotation or we can reset the rotation or preserve that rotation at the end after we rotate and that's what we're going to do is we're just going to go here to that step 3 and we're going to add a couple of lines that will as it's resetting preserve that rotation of the met of the mesh so we grab its global basis its basis in global space and then reset everything right resetting the pivot resets the rotation of the mesh but then we can stick it back here by applying that basis again so now everything gets moved to the right place but we preserve that rotation that the mesh made and now if we run it you'll see that the mesh stays rotated but we have a problem the next time we rotate right the mesh gets offset weird and that's because the mesh is rotated so up here when we translated it now it's translating in the wrong direction so we need to make this global translate and then we translate it without taking into account the rotation and now we see that rotation gets preserved the mesh will be oriented so the texture looks right no matter how we roll okay one last thing i want to talk about and that's collisions so these red cubes are static bodies and of course i'm going to pass right through them because we're not using move and slide or movement collide to move our kinematic body we're just advancing it two units and so we're going to be going through these solid objects and really this is grid based movement right we don't want to move any half increments or anything like that we want to move exactly two units every time we move so we don't really need collisions in the sense of move until you hit something we need just you can roll there or you can't the space you want to move into is occupied or it isn't and so we can fix that if we go to our cube's code and remember we could be doing this with a kinematic body or any other other kind of body as well so we're going to just cast a ray forward so we get the world space and we call intersect ray with from the middle of our cube to something forward in that direction and instead of multiplying by 2 i'm multiplying by 2.5 to give us a little extra margin because we might be offset from an object by one and we don't want to roll into that one either and then self just excludes the kinematic body itself from the ray collision and if we get a collision we return so that means you can't move there so you're not allowed to move and that's all we need to do to make it so that those cubes will be solid now if i go over here and i'm holding down the key i can't can't go through this cube from any direction all right that's it so i hope this gives you some cool ideas for things to do with rolling cubes in your game you can see i've done some examples here i've got a big enemy cube rolling around there i've made some uh squares with a grid map that you can roll on and change their color all sorts of things you can do drop off here make it fall down to the next level and so on let me know in the comments what you come up with i look forward to seeing them and i'll see you in the next video