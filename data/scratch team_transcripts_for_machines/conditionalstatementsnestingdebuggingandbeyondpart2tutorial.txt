In our first video on conditional statements, we explored what conditional statements were and practiced making an interactive project. We started working on a fish game and coded one sprite (a fish) to react when touching another sprite (the pufferfish). Let's add some code to the pufferfish, too, so the pufferfish changes costumes and winks when it touches the fish. Hmm. The fish is reacting, but the pufferfish isn't. Why? Let's debug what's happening here. The issue is that, as soon as I hit my green flag, the fish and the pufferfish weren't touching. Since the condition “touching” wasn't true, it stopped checking and ended the script. I need to remember to put my conditional statement inside a loop to make a conditional loop. I want it to continually listen to see if they're touching. Now, let's say I want to add code so as the fish is approaching the pufferfish, the pufferfish makes a sort of warning face, like an annoyed face. And when they finally touch, then the pufferfish winks. I'm going to nest my original “if then else” conditional statement inside another “if then else” statement that is checking the distance between the pufferfish and the fish. I'm nesting it under “else.” Now, the program says, if the distance is less than 150 pixels, then show the annoyed pufferfish face. Hmm. Notice that I'm not getting the winking face at all. Why is that? Well, the way this program is currently written, it's first checking to see if the distance between the sprites is less than 150 pixels. And if that's true, it's showing the annoyed costume. Because this condition is true when they're touching, it never moves on to the code in the “else” statement. The order of the nested statements can really make a difference. By switching the order, so the first conditional statement says to check if they are touching, when the sprites are touching, that statement is true and it shows the wink. When it is false and they aren't touching, it moves on to the “else,” which is our second conditional statement checking the distance between the sprites. If the distance is less than 150 pixels, that statement is true and we see the annoyed face. Where can I go from here? Well, I could use additional “repeat until,” “wait until,” or “if then” conditional statements to create a game where a conditional statement is assigning points if a condition is met. And checking the score to see when the player has won. I could play with different conditions. For instance, I could use the “touching color” condition in another nested “if then” statement, and use the eyedropper tool to select the pink of the coral in the backdrop. Then, I can add code, so when the fish is touching the pink of the coral, it displays an eating costume and says, “Yum!” Conditional statements can be used in a wide variety of projects. For example, I could use that same “touching color” condition in a maze game, where a conditional statement reverses a move when sensing the color of the maze walls, preventing a sprite from walking through them. Or I could use a conditional statement in a silly animation. Like here, where a cat is looking for cheesy puffs. The conditional statement triggers new text when they finally touch. The possibilities are endless. What will you create?