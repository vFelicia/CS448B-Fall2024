Did you know you can draw in Scratch using pen blocks? These digital pen drawings, commonly referred to as turtle graphics, are created when a cursor (the turtle) draws on a plane (like the Scratch stage). Turtle graphics were named after a class of educational turtle robots that often came with pen mechanisms, which allowed the programmer to create a design on a physical sheet of paper. Turtle graphics can be created in a variety of programing languages. They most often employ geometry concepts and focus on direction, location and repetition (looping). Using the Pen blocks in Scratch to create a visual artifact, helps you observe results, debug, and iterate. Let's create a turtle graphic. First, choose the sprite you want to act as the turtle. That is the object that will be drawing. You can pick any sprite from the sprite library. Note some sprites are large and may hide the pen line if it's short. And some sprites are round, so it can be hard to tell the direction they face. As you work on your program, you may need to experiment to find the sprite that works best for you. Now, you need to add the Pen extension. In the lower lefthand corner of the editor, click the Extensions icon and select the Pen category. The Pen block category will then appear in the block palette. To start your program, let's add this starter script, which positions your sprite in the center of the stage each time the program is run. You can always play with the values later if you want a different starting position. Now, look at these shapes. And pick one to recreate in Scratch using the Pen blocks. Study your shape. What do you notice? Are the sides the same length or different length? Are the angles the same or different? Are there any points where the steps you’d take might be the same? Repeated? As you think about which blocks to use, imagine if you were poised with a pen in the air over a piece of paper, ready to draw the shape. What is the first thing you would do? You'd need to put the pen to the paper in order for the lines to be recorded. Right? Do you see a block that talks about putting the pen down? What's the second thing you would do? The third? Perhaps you would move the pen a certain distance across the paper. Perhaps you would turn your hand in a particular direction and then move the pen. As you write your program, keep in mind the need to use clear instructions and break the task down into smaller steps. Once I have finished drawing my shape, what if I want to draw it again? Just as we had to think about putting the pen to the paper, we need to be clear about when to take the pen off the paper or we'll end up with errant lines. Let's head to the Scratch editor to look at the Move and Pen blocks again. Experiment to see what each block does by clicking on each block in the block palette or in the script area. Play with the values and see what effect it has. Then, combine the blocks to start your program. Note there's often more than one solution that will accomplish the task. For this example, I'm going to choose to draw the square and I'm going to focus on these Motion and Pen blocks to create the shape in Scratch. When you're creating your shape, you don't have to use all of these blocks. And you can use any of these blocks as many times as you need. Pause the video here as you think about which Scratch blocks you want to use for each step needed to create your shape. Write your program, test, and debug it. Then, unpause the video for a few more tips. Did your shape come out as expected? If not, can you spot the problem and debug/find the error? Do you want to erase all the lines before the program draws again? What block might you use to do that, and where should it appear in your program? Do you need to add further instructions about when the pen should be up and when it should be down? Remember, that sequential order matters. Where have you used blocks like “erase all,” “pen up,” and “pen down” in your sequence? Are you adjusting the direction before or after a move? What happens if you place these blocks at the beginning or end of a sequence, or in a different order? You could insert a “wait” block at key points to slow down the action. Now, you know where to start looking to debug. Keep in mind, there's often more than one solution or program to accomplish a task. You can compare your program with other’s solutions who are drawing the same shape, to see the similarities and differences. Is one method more efficient, using fewer lines of code? Is another person's program full of customization? How could you use a loop like “repeat” to speed up your coding for repeated steps? Do you need to adjust the blocks you've used from more specific to more general, in order to utilize a loop? How could you use a loop to make more complex patterns or shapes from this single shape? And just like drawing on paper, with the Scratch pen blocks, you can use different pen sizes or pen colors when creating digital drawings. Experiment and customize the shape to your liking. Want to see your program run really fast? Try turning on turbo mode by holding Shift and clicking the green flag. What else can you do with the Pen blocks? Here are just a few examples of ways Scratchers have incorporated Pen blocks into their project in creative ways to make moving lines, complex shapes, object allusions, interesting patterns, drawing games and more! What will you create?