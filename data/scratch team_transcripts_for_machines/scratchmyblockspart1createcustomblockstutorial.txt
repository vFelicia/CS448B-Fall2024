Have you seen the “My Blocks” category in the Scratch blocks palette? When you click on it, no blocks are present until you create one. Let's explore how to create a customized block and when and why you might want to use them. Let's say you are creating a Scratch program and you've written a sequence of steps that performs a particular action. That action could be performing a complicated spin move, playing a set of musical notes, drawing a shape with the pen tool, performing some complex math, or anything else. That stack of blocks is known as a “procedure” or a “routine.” Most computer programing languages allow you to create a special name for a group of commands or lines of code and then call for that sequence to run at any point in the main program. In Scratch, we use “My Blocks.” Click on “My Blocks” in the blocks palette and then click on “Make a block.” You can give your block any name you want, but I'd recommend something descriptive so you can recall later what this stack of blocks does. Let's say I want to create a series of blocks that makes my cat sprite spin forward and backward. I'll call my block “cat spin.” Once I click “OK,” you'll see a new event handler block appears on the scripts area that says, “define.” Under this block, I want to add all the code blocks in my procedure. For this example, I've added some repeating code that makes the cat whirl and turn forward in two complete circles and then reverse the whirl, turning in the opposite direction. Let's click on this stack and see how it looks. Now that I've defined what my custom block does, let's use it in my main program. When I want the spin to occur, I'll grab my custom “cat spin” block now available in the blocks palette and place it in my main program. In this program that I'm writing, the cat will spin after each background change and say something after the spin. Let's see how this looks by clicking the green flag. The advantage of writing this procedure separately is that I can use one block to call for a whole set of steps to be run each time I need it. Creating separate procedures using custom blocks makes the code faster to write and read, and easier or quicker to edit. If I wasn't using a custom block, this is how the code would look. Looking at them sidebyside, which is easier to read? And look, if I wanted to change the spin, I only have to edit it in one place, versus editing it in multiple places in my long single code sequence. You don't have to use a custom block just for code that will repeat. If you have a long, complex sequence that performs a particular action, you may want to define it as a custom block so you can more easily identify all the steps involved and edit it later. As a program becomes longer and more complex, it can be easy for a programmer to lose their place as they develop and debug and refine the code over time. If you have planned out your program and know the procedures you want to define separately, you can set up your custom block at the very beginning. Or if you've written a program that is very long, you can revisit your program and identify repeating code or specialized code you want to define as separate procedures, create custom blocks, and use them to make your code more efficient to read, write, and edit. In other videos, we'll explore using My Blocks versus Broadcast blocks (which both can store a set of procedures), go over some tips and tricks for using My Blocks successfully, explore creating more complex custom blocks using inputs. We’ll also discuss that option to run without screen refresh. The possibilities are endless. What will you create?