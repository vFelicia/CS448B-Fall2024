Have you ever wanted to create a Scratch program that is interactive [Ya] or offers multiple outcomes? [Big Boing] Some Scratch programs are static. The outcome is fixed, and the same thing happens each time. Some are dynamic. They're capable of action or change each time they are run. In order to create dynamic programs, the programmer can use conditional statement blocks to give instructions on how the program should respond in different circumstances. For example, here I have a program where a fish can be controlled by my mouse. What if I wanted a unique action to take place if the fish touches another sprite, like the pufferfish? Under the Control category in Scratch, I'll find a number of conditional statement blocks that allow me to adjust the program based on specific conditions “until something is true or false” or “if something is true or false, then.” For this fish game, I'm going to try using a “wait until” block. Under the Sensing category, I'll grab the “touching mousepointer” block and use the dropdown menu to select my pufferfish sprite. Conditional statements can be true or false. If the sprites aren't touching, then this block will report “false.” If the sprites are touching, then this block will report “true.” There are a wide variety of conditions in Scratch that you can choose from in order to complete a conditional statement. Blocks that report “true” or “false” values are known as Boolean blocks. And you can identify them by their elongated hexagonal shape. So I can see the difference between the “wait until” and “repeat until” conditional statement blocks, I'm going to have it play a sound. Let's run the code and see what happens. [Bite] With “wait until,” it waited until my fish was touching the pufferfish, and then the sound played. Now, let's try the “repeat until” block and see what the difference is. [Bite] [Bite] [Bite] [Bite] [Bite] [Bite] Notice that the opposite effect happened. It repeated the sound until the condition was true, until the fish was touching the pufferfish. I'm going to wait until the fish is touching the pufferfish, and then show one costume to start and another if they touch. I'll also have the fish think “Ouch” when they touch. Let's try this code. Did you notice that, once the fish touched the pufferfish, if they touched again, you don't see “Ouch” again? That's because the program is only checking if this condition is true once. If I put this code stack inside of a “forever” loop, let's see the difference. Now, each time the fish touches the pufferfish, you'll see “Ouch!” Because it's continually checking to see if the condition (touching pufferfish) is true. What if I want the sprite to switch back to the initial costume when it isn't touching the pufferfish? Notice the difference when I have the block to switch back to the initial fish costume inside the loop versus outside the loop. When inside the loop, the program is constantly switching to the original costume, but then immediately checking to see if they are touching. And if so, showing the “Ouch” costume. It is checking so quickly our eyes don't see the switch. But if I add a small wait just before the check, you can see what I mean. And there are often multiple solutions to accomplish the same goal. For instance, I could use an “if then” or “if then else” statement instead of a “wait until” conditional statement here. If I make a small adjustment to the “think” block in this “if then else” statement to remove the time notice if I move my mouse away quickly, I can get the costume to switch immediately after they stop touching. What else could you try or add? Tinker and experiment. In our next video, we'll add some code to the pufferfish, too, and practice debugging conditional statements and making more complex scripts by nesting conditional statements.