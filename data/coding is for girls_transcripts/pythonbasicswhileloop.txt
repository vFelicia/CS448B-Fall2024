00:00 - hello everyone I'm Ola and this is
00:03 - coding is for girls last time I promised
00:19 - you that I will talk a little bit more
00:20 - about by them and one of the things you
00:23 - requested is talking about wine lips I
00:26 - have this love/hate relationship with
00:29 - while loops in any programming language
00:32 - on one hand they are so useful in some
00:36 - situation on other and they are very
00:38 - tricky sometimes and they might cost you
00:41 - some headaches while statement in Python
00:44 - is an expression that allows you to
00:47 - repeat some code until some condition is
00:49 - not met anymore
00:51 - the syntax of while loop looks as
00:54 - follows
00:54 - while expression colon and the body
00:57 - where expression is anything in Python
01:01 - that is evaluated to true or false in a
01:04 - way while live and for loops are very
01:07 - similar because in puff scenarios we are
01:10 - repeating some chunk of code many times
01:12 - the difference between while and for
01:15 - loop is in the fact that in for loop we
01:19 - are doing some piece of code for every
01:22 - element in the list or set but in piece
01:25 - of while we are repeating that over and
01:28 - over again as long as condition is met
01:31 - and they know that it might seem
01:34 - complicated right now but worry not I
01:37 - hope that it will be much clearer in a
01:40 - moment let's say we want the program
01:43 - that asks us a question and expects us
01:46 - to answer yes or no and we want this
01:50 - program to be smart enough to know that
01:52 - if we responded with anything that is
01:55 - not yes or no for example if we type Ola
01:58 - or one then program will ask the
02:02 - question again and expect us to provide
02:05 - the answer once again let's open code
02:08 - editor and create a file called
02:10 - wilder file let's start with
02:13 - no question we would like to ask in
02:15 - variable question so let's type question
02:19 - equals are you polish then we would like
02:23 - to specify possible answers we will
02:26 - store them in variable possible answers
02:28 - in a list like this so we will type
02:31 - possible answers yes No
02:34 - now what we want to do is to display the
02:37 - question we can do that with print like
02:40 - this print from question and then we
02:43 - want to display all the possible answers
02:45 - which we store in the list so we will
02:49 - need for it up here since we want to do
02:52 - something for it 11 in the list and it
02:55 - will look like this for possible answer
02:57 - in possible answers print possible
03:01 - answer now we want to know what user
03:04 - responded and we'll store user provided
03:07 - value in an answer variable like this
03:10 - answer equals input and we'll have some
03:15 - greater than signs okay let's save and
03:18 - run in the console item free wild
03:21 - goodbye
03:22 - if we type yes program finishes as
03:25 - expected however if we run the program
03:29 - again and we type hola
03:31 - instead of yes or no the program stops
03:33 - again which is wrong what we really want
03:37 - to do here is to make sure that user is
03:40 - funded in either yes or no but how to do
03:44 - that we will use file up obviously let's
03:47 - open the world to the PI file again and
03:50 - drop this lines within while loop
03:52 - statement lets up while answer not in
03:56 - possible answers this will check if
03:59 - whether user typed is indeed either yes
04:03 - or no
04:03 - everything in this flock will be
04:05 - repeated as long as the condition in
04:08 - wild live is true let's save and run in
04:11 - console python 3 while to the PI and we
04:15 - have an error
04:16 - peyten says that answer is not defined
04:19 - and if we open our file again will
04:21 - indeed see
04:23 - with boot or assign some value to the
04:26 - answer only in mine mine where as we try
04:29 - to use it in line for for the first time
04:32 - it's a little bit too early we need to
04:34 - have some value first one of a solution
04:37 - here is just copy-paste everything we
04:40 - have in wire loop and copy that before
04:44 - the while so at least was assign value
04:47 - to answer but this is not good because
04:49 - we repeat the code we could do better
04:51 - and one of the solutions here is to make
04:54 - sure that the variables is somehow set
04:57 - and what we can do in Python is set it
05:00 - to the empty value which is known so we
05:04 - kind of say to python that we are aware
05:06 - that there is no model yet but it will
05:10 - come later on so don't panic everything
05:12 - is under control I prefer the second
05:15 - solution so before while I will simply
05:18 - write answer equals known some known as
05:22 - you remember means that the value is
05:23 - empty now we can save and run it in the
05:26 - console again write in three wilder file
05:29 - now when we type allows an answer the
05:32 - question will be repeated as we wanted
05:34 - let's try something else for example one
05:37 - and we will click enter the same we
05:40 - cannot go past this point but if we now
05:43 - type no the program will finish this is
05:47 - very handy because this way you can
05:50 - ensure that these are responded with
05:51 - some meaningful for you value and if you
05:55 - might challenge number two
05:57 - in one of my previous video and I will
05:59 - leave the link in the description below
06:01 - if you haven't seen that you probably
06:04 - suspect how this might be very useful
06:06 - for this challenge okay but I think we
06:10 - need more examples of wire loops and at
06:13 - the beginning of this video I said that
06:14 - there are in a way very similar tool for
06:17 - them and the thing is that every for
06:21 - loop you can translate into wire loop
06:24 - unfortunately the other way around is
06:26 - not true let's see how to do that we
06:29 - will create a file called for to
06:32 - wildfire Android a for loop
06:35 - like to translate into oil first and
06:38 - let's do something very simple for
06:40 - example for loop that breeds a greeting
06:44 - for each person in the list so we will
06:46 - start with defining the list of names
06:48 - and let's say we will store it in
06:51 - periodic old people so we'll write
06:54 - people equals and in the list Rachel
06:57 - Monica and Phoebe now we will write for
06:59 - person in people Colin and then in the
07:03 - body will print hi and then the name of
07:06 - the person and we'll use format method
07:09 - so we'll have dot format person
07:12 - it's me run our program in the console
07:14 - so we will type Python 3 4 - 1 2 5 will
07:19 - have three rows saying hi Rachel hi
07:23 - Monica and typing in ok let's write the
07:27 - program that does pretty much the same
07:29 - but with the while loop in case of for
07:32 - loop we use the syntax for person in
07:35 - people so we do stop for every single
07:38 - element in the list but in one loop this
07:42 - syntax is not allowed ok let's write the
07:44 - program that does exactly the same but
07:47 - using go a loop in case of for loop what
07:50 - we did was iterating over people list so
07:55 - we wrote for person in people and we did
07:59 - something for every single person in the
08:02 - list but in walnut we can't do the same
08:05 - because the syntax is not allowed in a
08:08 - while we expect to have expression that
08:11 - evaluates to either true or false but
08:15 - there is a way to do that kind of
08:17 - manually if you watched my video about
08:19 - lists you might remember that every
08:23 - single element in the list has special
08:26 - number index so index is something that
08:30 - says what is an order of the list so in
08:33 - this scenario for example the index 0 is
08:36 - for Rachel Monica is under indexed 1 and
08:40 - he'll be under index 2 so we always
08:42 - start from index 0 and idea of the index
08:45 - will be very useful here because inside
08:48 - the wild
08:49 - you can just take the index and go step
08:52 - by step incrementing that let's say we
08:55 - will start with index 0 then we would
08:58 - like to start our while loop we would
09:01 - like to see if the index is not bigger
09:03 - than the length of the list we use
09:05 - Python building function then to check
09:08 - how many elements list contains so we
09:11 - type Len and here the name of the list
09:14 - people now inside we will print our
09:18 - greeting to fetch name of the person
09:20 - will type people from index ok that's
09:24 - done let's delete 4 from the file and
09:27 - let's save and run in the console
09:30 - Python free for to wild at 5o something
09:34 - is very very bad the program prints hi
09:38 - Rachel over and over again and keep
09:40 - working and working and it doesn't want
09:43 - to stop this is bad and I think I need
09:46 - to kill the program using force I will
09:49 - type ctrl + C to kill it completely so
09:54 - what happened why program does not stop
09:57 - the thing is we fell into infinite loop
10:00 - and let's look step by step what happens
10:03 - here to understand that better at first
10:06 - index is 0 and in the condition in while
10:11 - we are checking if that is slower than
10:13 - the number of people and it is true
10:16 - because Europe is lower than 3 so we
10:18 - print higher and the name of the person
10:21 - under index 0 so that is Rachel now we
10:25 - finish the body of 1 so we go back while
10:28 - and we check the expression but our
10:31 - index is still 0 and it's still lower
10:35 - than 3 so we go inside and print hi
10:38 - Rachel again and then we go once again
10:41 - to while loop and check the condition
10:44 - it's still 0 this is why we are
10:47 - repeating the same thing over and over
10:50 - again index is not trained over time so
10:54 - to make our program work we need to make
10:57 - sure that index is bigger every time we
11:00 - run through the body of the while loop
11:03 - so what we just need to do is the index
11:06 - equals index plus one now in every step
11:10 - we'll increment our index and move
11:13 - forward in a list so at first we start
11:17 - with index zero which is lower than free
11:20 - so we print the first person in the list
11:23 - people so we'll print hi Rachel now we
11:27 - are incrementing index from zero to one
11:31 - we go back to the condition in Wilder
11:34 - now index is one one is still no more
11:38 - than three so we print this time we take
11:42 - a person with the indexed one which is
11:45 - Monika
11:46 - so we print hi Monica and increment the
11:51 - index so now it is equal to we go back
11:55 - to check the expression in while loop
11:58 - index is 2 2 is still lower than 3 so we
12:04 - can print hi now the person under index
12:08 - 2 so Phoebe finally we increment index
12:11 - again and now it is free and it's no
12:15 - longer lower than free so we no longer
12:18 - go inside the body of the while loop and
12:21 - we can proceed with the rest of the
12:23 - program let's go back to our file and
12:26 - add the missing index implementation
12:29 - role of save and run in the console this
12:33 - time it worked we successfully
12:35 - translated for loop into what this
12:38 - example was fun because I had a chance
12:40 - to show you why while loop gets a little
12:43 - bit thunderous and with some small
12:47 - mistake where you can end up in infinite
12:50 - loop in this scenario finding the
12:53 - problem and finding the mistake we did
12:55 - inside while loop was very easy but very
12:59 - often when you use while loop and you
13:01 - have much more complicated code inside
13:04 - you can find yourself in a really really
13:08 - scary place and to prefer if you want to
13:11 - do something for every single
13:14 - in a set or list juices for loop so much
13:17 - easier but I also hope that with the
13:20 - first example when the program forces
13:23 - you to provide one of the allowed values
13:27 - yes or no I'm sure that there are also
13:30 - times when using while loop is much
13:33 - better choice and it's more natural so
13:37 - if you are interested and you want to
13:39 - learn how to program with me make sure
13:42 - to subscribe this channel and stay tuned
13:44 - have a lovely day and see you