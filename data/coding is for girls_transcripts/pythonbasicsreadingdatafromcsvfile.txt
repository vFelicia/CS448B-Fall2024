00:00 - hello everyone I'm Ola and this is
00:03 - coding is for girls recently I showed
00:19 - you how to read and write files in
00:21 - Python and I think it's about time to do
00:24 - something useful with this knowledge
00:26 - programming is all about automating
00:29 - boring things and the thing we will
00:31 - build today is amazing example of that
00:34 - so today and in my next video because
00:37 - that will be probably too long for just
00:39 - one film we will build a program that
00:42 - will read data from spreadsheet or Excel
00:46 - that contains names emails and some
00:50 - other information and we will use this
00:52 - data to generate custom-made emails for
00:55 - every person and then send it to the
00:58 - people isn't that exciting today we will
01:01 - focus on daytime spreadsheets and will
01:04 - try to fit it to pilot and script and
01:06 - then generate custom emails for every
01:09 - person from the spreadsheet please mind
01:11 - that we will try to keep things very
01:13 - simple here so we will skip most of the
01:16 - edge cases and error handling but in a
01:19 - description below I have a example list
01:22 - of things that you might consider if you
01:24 - want to extend this program first we
01:27 - need a spreadsheet I use Google Mail and
01:29 - Google Drive quite a lot so I will use
01:32 - that if you have OpenOffice spreadsheets
01:34 - or Excel you can do exactly the same
01:37 - thing I will open a spreadsheet I have
01:39 - on my Google Drive
01:40 - as you can see I have some data here
01:42 - names emails there are fictional emails
01:45 - if you are curious if the person was
01:48 - accepted to the workshop or not
01:50 - their code name and their language what
01:54 - we want to do here is to save data from
01:56 - this file in a way that will be the best
01:59 - for Python and the easiest solution is
02:02 - to use CSV which is acronym for comma
02:06 - separated values I will choose file
02:09 - download as comma separated values now
02:13 - I have it saved on my machine I will now
02:15 - move the file to desktop and rename it
02:18 - so it's called applications dot CSV if
02:21 - you open the file right now you will
02:23 - notice that every row in the table from
02:25 - the spreadsheet is a separate line in
02:28 - this file and each value from the cell
02:30 - is separated from other values with
02:34 - color and yet this is why it's called
02:37 - comma separated values okay so we have
02:40 - data so first step is to open this file
02:44 - and read in bayson and if you watched my
02:46 - previous video you already know how to
02:48 - do that as always link that the video is
02:50 - in the description below
02:52 - let's open code editor and create a new
02:54 - Python script I will call it read a
02:57 - title to py first we want to open the
02:59 - file which is saved we store the file in
03:01 - csv underscore file variable and we'll
03:05 - open the file using open now we will
03:08 - type the name of the file application is
03:10 - Delta CSB then we will simply read the
03:13 - file line-by-line for a row in csv file
03:17 - column and then print row finally after
03:21 - we printed all rows we want to close the
03:24 - file
03:24 - csv file dot close okay this is our base
03:28 - let's save and give it a go in console
03:31 - let's buy a Python free read date out of
03:34 - the py okay this is a good we read all
03:37 - the lines time to split each line into
03:40 - separate values the values from the
03:42 - spreadsheet cells and to do that we will
03:46 - use something that Python standard
03:48 - library or sundered module CSV provides
03:52 - us if you want to learn a little bit
03:55 - more make sure to check Python
03:57 - documentation about CSV model first we
04:01 - need to import the model we do that by
04:03 - typing at the beginning of the file
04:05 - import CSV now we will use csv reader
04:09 - this is a part of Python standard
04:12 - library that will help us read all
04:14 - values and split them as they were
04:16 - originally in cells let's start the
04:19 - reader in the variable called CSV reader
04:21 - now we will type equals and let's create
04:24 - the reader CSV
04:27 - reader in parentheses we will give the
04:29 - file which is opened so CSV file and
04:32 - then in argument delimiter we'll specify
04:36 - what character in our file tells us
04:39 - which value is in which cell here it is
04:42 - comma now let's replace CSV file here
04:45 - with CSV reader let's save the file and
04:48 - try it in console PI don't reread theta
04:51 - dot Phi as you can see we no longer have
04:54 - a simple line of text displayed as it
04:57 - was in the file now the data is split
05:00 - into lists like in a table from the
05:03 - spreadsheet this is very neat but here
05:06 - is the row that contains table headers
05:08 - and we don't really want these values at
05:11 - all we'd rather keep them and we can do
05:14 - that like this next from CSV Reader
05:17 - after we create the reader it just goes
05:20 - to the next line so we skip the first
05:22 - row completely now let's save and run
05:24 - again python free reach theta dot py
05:28 - this time we don't have header row
05:30 - anymore this is cool okay
05:33 - so we have data but I think the very
05:36 - nice thing to do here is to take this
05:40 - data and feed it to different variables
05:42 - so we know that this is email this is
05:46 - the name of the person this is the
05:48 - information about code name and so on
05:50 - and so on and there is a nice convenient
05:53 - way in python to do that in just one
05:56 - line i haven't showed that to you yet so
05:59 - now it's the time so now we have the
06:02 - list and we want to have number of our
06:04 - goals that stores values from this list
06:07 - and to do that we just type the names of
06:10 - the variables and we separate them with
06:13 - commas so we'll have name comma email
06:16 - comma and so on equals and then the list
06:20 - okay it might sound a little bit weird
06:22 - so let's see that in action so we want
06:25 - to give names for all variables from the
06:28 - list so we want to store each value from
06:31 - the list in separate variable we have
06:33 - name first now we'll type come up then
06:36 - email now after comma we'll have a
06:39 - the person is accepted then coach name
06:42 - and finally language of the person now
06:45 - we type equals and our list stored in
06:49 - variable row we can now print all these
06:52 - values like this print name email
06:56 - accepted coach and language let's save
07:00 - and try it
07:01 - python free read data py yeah it worked
07:06 - nicely
07:06 - now every value is stored in separate
07:09 - variable so the only thing that left is
07:12 - to generate email either acceptance
07:16 - email or rejection email depending on
07:19 - the value in accepted column so let's
07:22 - type if accepted equals yes we'll have
07:27 - emailed for accepted so for now I will
07:29 - just type message equals accepted else
07:33 - message equals rejected okay but we want
07:36 - something more than just text accepted
07:39 - or rejected in the email we actually
07:42 - want text that will use name of the
07:44 - person make the code name and generate
07:47 - some personalized message for every
07:49 - person so let's go to the top of the
07:52 - file and after imports will define
07:55 - templates for our emails we will start
07:58 - with acceptance one and now we will use
08:01 - special kind of variable here it called
08:03 - constant it is pretty much the normal
08:06 - variable and the difference between
08:08 - normal variable and constant is that the
08:11 - value for it never changes while program
08:15 - is running and the convention is to name
08:17 - it using only capital letters so in our
08:21 - scenario rule type accepted message now
08:25 - we will create a text with multiple
08:27 - lines and Python allows us to do that if
08:30 - we use triple quotes like this okay now
08:34 - let's type the message hi now let's use
08:37 - curly brackets to indicate that will
08:40 - inject value here remember we can do
08:43 - that if we use format method for strings
08:45 - now we will type we are thrilled to let
08:48 - you know that you are accepted to our
08:51 - programming workshop your code
08:53 - is curly braket again can't wait to see
08:55 - you there Thank You workshop organizers
08:58 - ok so now it's time for rejection email
09:01 - template so we'll type rejected message
09:04 - triple quotes hi placeholder we are very
09:08 - sorry to let you know that due to a big
09:11 - number of applications we couldn't hit
09:14 - you at the workshop this time we hope to
09:17 - see you next time thank you workshop
09:19 - organizers we will now use these values
09:22 - inside the if statement here if the
09:25 - person was accepted we will use accepted
09:28 - message and we will inject name and
09:30 - coach named using format method so we'll
09:33 - type message equals accepted message dot
09:36 - format name code and in else branch we
09:42 - will use rejected message dot format and
09:45 - this time we just need the name of the
09:47 - person finally let's print all the
09:50 - values we'll do that with print so we'll
09:53 - have print send email to placeholder dot
09:56 - format email then print email content :
10:00 - and in separate line print message let's
10:04 - say the file and check if the script
10:06 - works Python free rich data dot pi yay
10:09 - it worked and we have all emails printed
10:12 - if you take a closer look you will see
10:14 - that each email has correct name and
10:17 - counter name injected in a correct place
10:20 - in email for example here when it was
10:22 - protected so the email say so but civil
10:25 - was accepted and we have her code name
10:27 - here Hana that is properly amazing which
10:32 - took data from spreadsheet and we
10:34 - generated something custom for each row
10:37 - from this data this is exactly what is
10:40 - programming all about automating tasks
10:43 - but before we will finish this video I
10:45 - will show you some small things that we
10:48 - can do better and this is just a minor
10:50 - thing to do but I always like to show
10:53 - you the best ways to do things so the
10:56 - thing with false is when you open them
10:58 - you need to remember to close them after
11:01 - you are done with them but I usually
11:04 - forget that and to prevent that
11:06 - comes with syntax that helps you so
11:09 - instead of opening files and then
11:11 - remembering about closing it we're going
11:14 - to start with open file us and we'll
11:18 - give name and then we'll create the
11:20 - block and inside this block the file
11:23 - will be open and when the block is
11:25 - finished Python will automatically close
11:28 - it for us we will remove the line that
11:31 - opens the file and replace it with with
11:33 - open applications dot CSV as CSV file
11:38 - colon now we'll take everything else in
11:42 - the file and indent it so it is inside
11:45 - the block and finally we can delete line
11:48 - that closes the file it's not needed
11:50 - anymore
11:51 - this syntax is equivalent to what we're
11:53 - doing before but it's slightly more
11:56 - readable let's save it and try and
11:58 - console if that still works it is that's
12:03 - good the only remaining thing now is to
12:06 - actually send emails but this is a topic
12:10 - for my next video and every time I
12:12 - record video for you I really really
12:15 - hope that it will be just five minute
12:17 - but in the end it never happens it's
12:20 - never five minutes it's always ten
12:24 - twelve fifteen and it takes ages to edit
12:28 - so I decided to talk more about email
12:31 - sending in Python in a separate video so
12:34 - if you want to learn how to do that and
12:36 - you want to learn how to program with me
12:39 - make sure to subscribe this channel and
12:42 - stay tuned have a lovely day and see you