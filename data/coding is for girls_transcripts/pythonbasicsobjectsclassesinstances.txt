00:00 - hello everyone I'm Ola and this is
00:03 - coding is for
00:05 - [Music]
00:17 - girls so far we're talking about python
00:20 - basic syntax without even mentioning
00:23 - objects and classes and I think it's
00:26 - about time to change it this episode
00:28 - will be very complicated because classes
00:32 - and objects are something that is not
00:34 - very straightforward it's one of the
00:37 - things that once you understand the
00:39 - concept it's quite natural and easy
00:42 - however when you see that for a first
00:44 - time in your life it's kind of weird if
00:47 - you haven't seen my previous videos
00:48 - about reading from CSV files and sending
00:51 - emails I think it's a very good idea to
00:54 - check them out now because I will use
00:56 - these programs as a base for today's
00:59 - episode to show you how to deal with
01:01 - classes and objects in Python so far
01:04 - we've described everything line by line
01:07 - in our program we don't really have any
01:09 - connection between what our program does
01:13 - with what data represent in fact the
01:16 - data has no real meaning what we did so
01:18 - far is called procedural programming and
01:21 - is one of computer science programming
01:23 - paradigms however there is another
01:25 - Paradigm that is very interesting to
01:28 - learn and this one is is called
01:30 - objectoriented programming the problem
01:32 - with writing software is the fact that
01:35 - it's extremely complex to think about
01:38 - every possibility and relation in your
01:40 - program it is so much easier to split
01:43 - problem into smaller pieces and focus at
01:46 - one part at a time this way you build
01:49 - your program from smaller chunks that
01:51 - are much easier to grasp and these
01:54 - chunks are called objects objects
01:57 - combine State and behavior this concept
02:00 - is somehow closer to the way people
02:02 - think we associate things with what they
02:05 - can do how they behave and what we can
02:08 - do with them when dealing with objects
02:10 - in programming languages we talk about
02:12 - two concepts classes and instances a
02:17 - class is an abstraction or a definition
02:20 - of a given thing you can think about it
02:22 - as a cookie cutter that gives the shape
02:24 - of the cookie but it is not a cookie
02:27 - itself an instance or an object is a
02:31 - concrete thing is a cookie made with a
02:34 - cookie cutter it exists and can interact
02:37 - with other instances in your program if
02:39 - you watch my videos about reading from
02:41 - CSV files and sending emails you know
02:45 - that we're using as a starting point a
02:47 - spreadsheet that contained information
02:49 - about Workshop applicants The Columns
02:52 - there defined our class representing
02:55 - applicant it told us that applicant need
02:58 - to have certain attributes name email
03:01 - address if they are accepted or not who
03:04 - is their coach and what is their native
03:06 - language and each row in this
03:08 - spreadsheet was an instance we had Alice
03:11 - Eve and maray they all fit into more
03:15 - general idea of Workshop applicant
03:17 - defined in columns but they have all
03:20 - data filled in each cell let's open our
03:23 - program that we created last time when
03:26 - we were talking about sending emails and
03:28 - see how we can modify it to introduce
03:31 - object and classes here we've been
03:34 - reading rows from CSV file row by row
03:37 - with data of applicants and then we're
03:39 - sending emails to them let's see if we
03:42 - can create applicant model out of the
03:45 - each row from the CSV file so far we
03:48 - were storing every value from cells in
03:51 - each row in one of the variables name
03:55 - email accepted coach and language these
03:58 - values are a clear candidates to be
04:01 - properties of our new object so our
04:04 - first step will be creating applicant
04:06 - class with the following properties name
04:10 - email accepted cach and language let's
04:14 - talk a little bit about synx in Python
04:17 - to start a class definition we need to
04:20 - start line with the special keyword
04:23 - class then similar to The Way We defined
04:27 - function we need a unique name for for
04:29 - our class in this scenario we will use
04:32 - applicant and please note that we are
04:35 - starting with capital letter this is a
04:37 - convention in Python and we should
04:39 - follow that finally we type colum and we
04:42 - can start the block definition of the
04:44 - class now we can Define either
04:47 - properties that are same for every
04:49 - single instance of this class or Define
04:53 - something called Methods method is a
04:56 - special function that works with the
04:57 - given object normal fun function can be
05:00 - used anywhere in your program however
05:03 - the method need to have existing object
05:07 - and instance on which it works in Python
05:10 - the first argument of the method is a
05:13 - current instance typically we call it s
05:17 - and we can use it inside our method to
05:20 - access data stored in our object in
05:22 - Python there are also methods that are
05:25 - very special their name usually start
05:28 - with to scores and this is because
05:31 - normal people do not name things
05:33 - starting with underscore so this is just
05:36 - in case one which we start with is
05:38 - called underscore underscore init
05:41 - underscore underscore and it's used when
05:44 - we create and initialize the instance of
05:47 - the class and it will be useful right
05:49 - now for us to pass values from our CSV
05:52 - files to store them in the object it
05:55 - will be easy to see that in the example
05:58 - let's open the screen script from
06:00 - previous video where we sent emails to
06:02 - people from the spreadsheet let's say
06:05 - the file as classes. puy now in this
06:08 - line we were reading values from CSV
06:11 - file and we stored them in variables
06:13 - what we would like to do here is to take
06:15 - these values and put them inside the
06:18 - object we will start with defining the
06:20 - class then so just before with statement
06:24 - we will start defining class for the
06:26 - applicant we will type class applicant
06:30 - column now we will Define init method
06:34 - what we would like to do is to get all
06:36 - variables from the CSV files name email
06:40 - and so on and store them inside the
06:42 - object we will start defining method but
06:45 - typing def which indicate it's a
06:48 - function please note that this function
06:50 - is indented that means it is inside
06:53 - block defined by class and it will
06:56 - therefore be a method of the class now
06:59 - we t type name of the method so
07:01 - underscore underscore init underscore
07:04 - uncore we Open brackets and as I
07:07 - mentioned previously the first argument
07:09 - should be a reference to the current
07:11 - object and we call it self then we will
07:15 - provide all arguments which we would
07:17 - normally pass to any function here we
07:20 - will type name email accepted coach and
07:25 - language now we type column starting a
07:28 - block of a method what we would like to
07:30 - do here is make sure that we store all
07:33 - data we just passed as arguments as
07:36 - objects properties we do that as follows
07:40 - we type self. name equals name that
07:44 - means that current object will store
07:47 - name from CSV file in the property
07:50 - called name let's do the similar thing
07:53 - with email self. email equals email now
07:58 - we would like to store information
08:00 - if the applicant was accepted or not
08:03 - however in CSV file we store this as a
08:06 - text either yes or no but in our Python
08:09 - program what makes more sense is to
08:11 - store this value as a bleen true or
08:15 - false this way we don't need to add
08:18 - everywhere if accepted equals yes then
08:21 - do something make sure to check my video
08:24 - about bulen values if next steps feels
08:27 - like magic here inside object would like
08:31 - to store property called accepted that
08:34 - contains ban value calculated from value
08:38 - inside accepted argument so we will type
08:42 - if accepted equals equals yes column
08:46 - then inside in the block will type self.
08:49 - accepted equals true and then else self
08:53 - accepted equals false now we can store
08:56 - values of the code and language like
08:58 - this self. coach equals coach and self.
09:02 - language equals language okay let's save
09:05 - and go back to the line where we read
09:07 - values from CSV file here we will create
09:11 - instance of the applicant with data from
09:13 - the particular row we will store it in
09:15 - variable called applicant and then we
09:18 - type equals and we will create an
09:21 - instance by writing name of the class so
09:24 - applicant open parenthesis and here we
09:27 - will pass arguments our init function
09:30 - expects all except the first one called
09:33 - self as it is an instance itself and
09:37 - python automatically added for us name
09:40 - email accepted coach and language all
09:44 - values just read from CS buau this line
09:46 - takes a class applicant and creates an
09:50 - instance of the object applicant class
09:52 - is our cookie cutter and this line is
09:55 - actually creating our cookie now we
09:57 - created something that is a separate
09:59 - entity an instance okay but what we can
10:02 - do with applicant I mentioned that
10:04 - objects are binding data with behavior
10:08 - so what we could do here is to extract
10:11 - the logic that is responsible for
10:13 - generating email subject and content and
10:17 - put it inside our newly created
10:19 - applicant object we will create two
10:21 - methods on applicant one will be called
10:24 - prepare email subject and will generate
10:27 - as the subject for the email the second
10:30 - one will be called prepare email message
10:32 - and will generate the content of the
10:34 - email inside applicant class will will
10:37 - Define the first method as follows Dev
10:41 - prepare email subject Open brackets self
10:45 - so the instance of applicant and then
10:47 - close brackets and column now it's time
10:50 - to return the value of the subject
10:52 - depending on the fact if the current
10:55 - applicant was accepted or not we will
10:57 - type then if self. accepted column and
11:02 - if the person was accepted we will type
11:05 - return Workshop application accepted but
11:08 - if the person was not accepted and self
11:11 - accepted is false we will return
11:14 - Workshop application not this time okay
11:18 - time to Define second method def prepare
11:21 - email message Open brackets self close
11:25 - brackets and column and the logic will
11:27 - be similar but this time will use the
11:30 - code that generated content if self.
11:33 - accepted return accepted messages format
11:38 - self. name self coach as you can see we
11:42 - are using values stored inside our
11:45 - object and we access them by using self
11:48 - Dot and the name of the property here
11:51 - self. name and self. Coach so the
11:54 - remaining bit here is to return the
11:57 - message if the person was rejected so
12:00 - here we will type return rejected
12:03 - message. format self. name okay let's
12:06 - see how we can modify our code to
12:09 - actually use these newly defined methods
12:12 - inside for Loop we will replace this
12:15 - whole e El statement with the calls to
12:18 - our new methods we will do subject
12:21 - equals applicant as we are storing the
12:24 - instance of the current applicant inv
12:27 - variable applicant Dot and the name of
12:30 - the method so prepare email subject then
12:34 - we open and close parentheses now let's
12:37 - do the similar thing with the email
12:39 - message we'll store in variable message
12:42 - the following applicant. prepare email
12:45 - message open and close parentheses now
12:49 - email message will use values we
12:51 - calculated inside applicant object
12:54 - methods nice okay let's save and see if
12:58 - our program still works as before we
13:00 - will go to console and type python free
13:03 - classes. piy uhoh something is wrong we
13:08 - just got the following error SMTP leap.
13:11 - SMTP authentication code it is something
13:14 - that some of you encountered when
13:16 - working with my previous video about
13:18 - sending emails this error is Gmail
13:21 - specific and to fix that we would need
13:23 - to make sure that less secure apps are
13:26 - enabled in Gmail and I want to say thank
13:29 - thank you to the viewers who pointed out
13:31 - that this is the issue and they were
13:33 - helping others to fix the same bug to
13:36 - fix the problem we'll need to go to this
13:39 - page when being logged in as an account
13:42 - we want to send emails from google.com
13:44 - setting security less secure apps and
13:48 - click turn on that's it I will place the
13:52 - link in the description below once again
13:54 - make sure to use account that is created
13:56 - just for testing purposes now let's
13:59 - check if the program works now Python 3
14:02 - classes dop okay it finished let's check
14:06 - if we got any emails and yes it worked
14:10 - so far we learn how to create class in
14:12 - Python and how to instantiate it we also
14:15 - learn how to create methods that can be
14:18 - used later on in our program on the
14:20 - instance as a last step today I want us
14:23 - to do a small refactoring of the code it
14:26 - will make our code cleaner and I think
14:28 - it's all always good to try to find
14:30 - places where we can refactor code and
14:33 - make it easier to understand now we are
14:36 - doing two different things in the same
14:38 - for Loop we are reading from the CSV
14:41 - file and we are sending email but since
14:44 - we created objects from the CSV rows
14:47 - there is no need to keep it together
14:49 - anymore the current solution is also not
14:52 - good from the logic point of view if we
14:54 - had error in data in the third row of
14:57 - our spreadsheet our program would go and
15:00 - read the first to applicants and send
15:03 - emails to them and when reading the
15:06 - third row there will be error our python
15:08 - script will stop and none of other
15:11 - applicants will get any email next time
15:14 - we run the script the first two people
15:16 - who already get an email would get the
15:19 - same email second time this is not good
15:22 - and I think it's much better to keep
15:24 - reading from the CSV file and sending
15:28 - email separate things what we could do
15:31 - is reading the applicant first and then
15:34 - after that's finished send emails to
15:37 - every applicant we read this way if the
15:40 - reading of the CSV file failed in any of
15:43 - the rows we haven't sent emails to any
15:46 - of applicants and we are safe to try our
15:49 - program once again we will achieve that
15:51 - by creating two separate functions first
15:55 - one will be called read applicants which
15:58 - will open CS file read all the rows and
16:01 - create applicants out of each row and
16:05 - return the list of created applicants
16:07 - the second function will be called send
16:09 - Workshop emails which will take list of
16:12 - the applicants and will generate and
16:15 - send emails to people let's start with
16:18 - read applicants function before the with
16:21 - statement we will type def read
16:25 - applicants open and close parentheses
16:28 - column then we need a list in which we
16:31 - will be adding all applicants we are
16:34 - about to create we will type applicants
16:37 - equals open and close Square parentheses
16:40 - we started as an empty list and we will
16:42 - be appending applicants as we go now we
16:46 - will copy the code that opens and reads
16:48 - CSV file with statement the creation of
16:52 - applicant
16:53 - instance now we would like to add newly
16:56 - created applicant to the applicants list
16:59 - we will do that like this applicants dot
17:02 - app and in parentheses applicant finally
17:06 - after we are done with the for Loop we
17:08 - want to return the list of created
17:11 - applicants return applicants now we can
17:14 - write this applicants equals read
17:18 - applicants and applicants variable will
17:21 - have a list of applicants right inside
17:24 - read applicants function we can now pass
17:27 - this list to the second function we want
17:29 - to create send Workshop emails we will
17:32 - start by defining the function here def
17:34 - send Workshop emails open parenthesis
17:37 - applicants close parenthesis and column
17:40 - now what we want to do is open SMTP
17:43 - connection so let's copy paste this
17:46 - lines from SMTP to login and at the end
17:50 - we should copy the bit that closes the
17:52 - connection as well so SMTP do quit now
17:56 - before it we want to send emails to
17:58 - every applicant and for that we need a
18:01 - for loop again so four applicant in
18:04 - applicants column and now we can copy
18:07 - paste this bit from subject to send mail
18:10 - and paste it here there is one more
18:13 - thing missing here in send Workshop
18:16 - emails in the line where we send the
18:18 - email we no longer has a variable called
18:21 - email if we try to leave it like this we
18:23 - will end up having a name error when we
18:26 - try to run the script so how to access
18:29 - the email of the applicant then
18:31 - previously we store it in a property
18:33 - email on the applicant class so all we
18:36 - need to do is to use it here to access
18:40 - we will tell applicant. email that's it
18:44 - okay we can now delete all old codes
18:46 - from we statement to closing sntp and
18:50 - after this line applicants equals read
18:53 - applicants we can simply call send
18:55 - Workshop emails function like this send
18:58 - Workshop emails and we'll pass
19:01 - applicants as an argument let's save and
19:04 - see if it still works as before so
19:06 - python free classes top yes it's a
19:09 - success that was a lot to take in if
19:12 - you're still confused and you're not
19:14 - sure how classes objects and instances
19:17 - work please do not desper this is a very
19:20 - complex concept and it takes time to
19:23 - grasp it you'll need practice and
19:26 - experience before this concept start to
19:28 - to be familiar for you and there is a
19:30 - whole academic Tory behind classes and
19:33 - objects but to be honest it's not needed
19:37 - to make use of this technique and we
19:39 - will be using more and more classes and
19:41 - objects in the future okay so let's
19:43 - recap objects help us to build program
19:46 - from the smaller pieces we Define
19:49 - classes to describe general behavior and
19:52 - we instantiate with a concrete object
19:55 - with the individual data I hope you had
19:58 - found learning about objects today and
20:01 - if you want to learn how to program with
20:02 - me make sure to subscribe this Channel
20:05 - and stay tuned have a lovely day and see
20:09 - you
20:12 - [Music]