hello this is John from Cave of programming. comom this is the fifth tutorial in our series of beginner Java tutorials and in this Tut we're going to look at for Loops um I'm going to create a new Java project in Eclipse as usual and I'm going to call this tutorial five click next um yes and finish and I'm going to create a new class I'll call this application doesn't really matter as long as it's got um a capital letter um at the start there click finish I will create a main method here by typing main control space and hitting return and I didn't really explain this properly last time but um if you've got badly formatted code like this if you just press control shift and f that will automatically format your code for you or if you if you forget the shortcut you can also just go to just right click and go to source and go to format okay so this is a runnable application and I'm going to type here the keyword for and uh I'm going to have opening and closing round brackets um which are going to um contain the conditions that control how many times the loop will execute for and then I'll have opening and closing curly brackets which will control uh well which is where we will put the code that we want to execute um the reason I'm getting an error here is because um inside the round brackets I need at least two semicolons like this um why you'll see in a minute and I'm going to type system.out.println and I'll just put hello in there so that we've got some code to execute and if I execute this it's just an infinite Loop that will go on until I stop it with the terminate button here now what this actually is is um these semicolons divide um the stuff in here into three sections and in the first section I can um the first section contains code that executes before the loop starts so before this when actually be printed in this case and in there I can declare and initialize a loop counter variable I can say int um I uh is traditional equals zero and then in the second the second Clause here is um a condition and as long as this condition is true the loop will execute so I could say for example I less than five and as long as I is less than five um this Loop will run and here this is a condition that will be executed once after every iteration of the loop um so I could put I equals yeah equals I + one so I'm saying um take the value of I add one to it and then stuff it back in I itself so that with every repeat of the loop I will be incremented and a Shor hand way of increasing I by One Is to type I ++ which is very handy um so now we've got kind of a standard for Loop and if I run that it will execute five times so the first time I is zero and then uh the conditions checked I is less than five yes so this is printed out and then this is executed so now I is one um this is not executed again this is only executed before the loop starts for the first time so what happens next is this is checked I is less than five yes because it's one so this is printed again I is incremented um I is checked again this is printed out and so on until I is equal to five and then this is no longer true and the loop then will stop and it will not go into here it will just um stop um there's um there's one other interesting thing that I'd like to show you here um that we'll maybe get into a bit more later on um if I want to print out the value of I here I can say well I could say for example um I the value of I is and just add concatenate I to it and I will be automatically changed into a string in effect and uh appended to this string and we'll get this but there's another way of doing this um that you will definitely come across um instead of print Ln I can use print F and this is a method that requires I have to pass two what we call arguments to it and the first argument is a string a format specifier and the second argument is um is a value um to to fill in the format specifier I know this is sounding like gobbley go in fact there can be there might be many arguments um but what is a format specifier well so the format specifier is a string that can contain special characters special symbols actually that will then be replaced by the numbers or variables that you have here and I'm just going to show you one for this tutorial so the format specifies begin with percent and they end in a letter and the letter for an integer that you need is D so percent d means okay print this string but replace percent d with the value of the integer specified here after the comma every time and if I run this um you get this output and why is it all on one line well because unlike print Ln print F does not print out a invisible new line character by default so it doesn't make the output go onto a new line and that's sometimes very useful um but other times it's not and if you actually want to print a new line here there's two ways you can do it one one way is you can have a just a blank sis out here so I could type sis out control space and that will have the desired effect or I'll get rid of that with control D I can type another special character well special special character sequence here back sln which means new line um this is a lot to digest but um try it in your own program see if you can get this to work um remember percent D just gets replaced with the value of the variable you specify here and sln just means print a new line I could print I could actually put um sln anywhere if I want it I could have a sln here or whatever doesn't matter doesn't have to be at the end so um that's it for this tutorial um uh uh I hope um you can get your head around full loops and as always I advise not pondering about it for too long but just try typing it out and see if you can get it to work and see what errors come up and fix them and get your Loops working and because programming is like learning a language as I keep saying so until next time um enjoy uh using for loops and I hope you'll join me again for the next tutorial uh when we will be looking at conditionals a bit more and the if statement and until then Happy coding