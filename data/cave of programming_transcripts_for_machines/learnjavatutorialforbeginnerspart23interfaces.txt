hello this is John from cave of programming calm and this is a tutorial on interfaces in Java so there's a lot to say about interfaces and we're just going to get started on them here in this tutorial so let's say I create a class here I'm going to create a new class and I'll call it I don't know I'll call it machine and I'll give actually I won't give machine any methods for a moment but let's also I'll create another class here new class which I'll call person so got two classes here machine and person and machine might have I don't know like a method public void start let's say I'm just trying to create sort of absolutely minimal plausible kind of scenario for using interfaces and I'll say here machine started and person might have a bunch of methods to I don't know what like let's have a public void greet and greet just says this out hello there in fact let's and let's get machine and some just made this a bit more realistic let's give it a private string maybe a private int ID equals seven and let's give person a private string name and I'll also give personal constructor I'm going to right click my class file here and go to source I'm going to go to generate constructor using fields tick name and click and that will generate a constructor formula that sets the name and also calls the super constructor which I don't need so I'm going to get rid of that because person will actually be a child of the object class secretly because all classes are in Java but anyway now I can use these two classes of course I can say machine Mac one at say equals new machine and she's just got one method at a moment so I'm saying that Quan dot well these are actually inherited from the object parent class but I can call start which is the method that I defined for machine and to create a new person as a person 1 equals new person and person's got its constructor where you have to pass in the name because that's why I just defined and say person one dart greet for example but whoops not equals on a call person 1 greet and and so the point is that machine and person are just two completely different arbitrary objects with nothing in common but now supposing I thought okay and both machine and person should have a method called let's say show info so for some reason I've decided that ok machine a person or nothing to do with each other they're not the same kind of thing they don't have a common parent class or anything like that but I've decided that they should both have a method called show info Java gives me a kind of mechanism to kind of formalize that and this is one thing you can use interfaces for so let's right click in my project here I'm rightclicking the default package but could also just rightclick the project folder doesn't matter here and go to new and instead of going to new class I'm going to go to new interface like this and creating an interface is pretty much the same as creating a class so I'll give it a name which had stol'n uppercase letter and I'll call this interface info and I'll click finish and I'm going to give this interface a method so I'm going to say public void show info I'm not going to pass the method any parameters although I could do certainly could do an important thing is I'm not going to define a method body like I could in a class I'd define something like I'd open a bracket curly bracket like that and pull closing on in and define code in here but interfaces don't have any code so they don't even have these curly brackets all they have its the header of of methods this is a header and that's all they have no curly parenthesis parenthesis so I define the show info and what I can do with that is let's say I go to machine I can say machine implements info like that and if I do that and without doing anything else I'm going to get an error here and if I look at the error click on it and go to add on implementing methods and I could also tie this by hand and what saying implements info does is it forces you to have all of the methods with the headers as specified in this interface so I said ok if something implements in the info interface it's got to have a method public footage so info and now Eclipse has just filled in for me the body of this method public void show info and this override annotation here this is optional but I was just checking that this really is an override but I could delete that I don't need it I'll delete this comment and let's let's put something in here let's make it do something like this out machine ID is and I'll say plus ID and now we could do with the same with person I could say person implements info and again the arrow comes up and let's go to add unimplemented methods and in person I'll say SSL person name is and it's just output name there so I'll leave that there as I say it's optional now the great thing about interfaces are so like so far we're just seeing that an interface is like it's kind of like a text contract really the way we've used it so far it's just like the thing that says okay if you implement this interface which could have any number of methods in with different return types different parameters different names and so on if you say implements that interface and it's got to have the methods that you've specified here so it's just kind of like a textual contract in from our point of view and by the way a class can implement any number of interfaces you can have a list of interfaces separated by commas here as many as you like and of course you can separately to that make a class extend and some parent class as you saw in the last tutorial but class can only extend one parent class whereas it can implement lots and lots of interfaces without number but the great thing about interfaces is is that now you can use them basically wherever you would have used a class name the only place you can't use an interface is when you do new because when you do new you're actually allocating memory to store kind of variables and methods I suppose I'm not really sure how it works but when you do new it's got to be followed by a class name with some exceptions that we'll see in a future tutorial and so you can't do new and an interface name normally without doing some other stuff anyway but anywhere else where you've got the name of a class you could use the name of an interface so let's take an example I could say info info 1 equals for example new machine like that it will let me do that and a reason I can do that is because machine does implement this interface up here says implements info and when I've done that this ok this is a variable of type info pointing to an object of Time Machine and I can only use this variable and to access just the one method of machine ok here are a bunch of methods and that kind of in the object parent class of all objects but the only machine specific method that I can access is the one defined in the interface this info interface which is show info so and because I defined show info in this interface I can call it via variables of the interface type and of course I could do stuff like info let's say info 2 equals and I could point it to person one because person 1 is actually a reference to a person object so I could point this reference a type info to that personal jet because person implements info so I've got this one personal jet here person 1 points at it and I'm saying point info to this variable to the same thing that person 1 refers to or points up so again I could say like info 2 dot show info and if I run that it's going to say run as java application I think I'm running the wrong thing no that's good ok and it's and this is calling the show info method in this person object so if that's confusing which probably is if it's the first time you've seen it and it's worth spending some time looking at and I'll show you one more good example here so let's so here I've got this class called app which is just serving as a place to put my static void main method so I've not got an app object but I can create a method here like private static info let's say and I can make this method take a parameter of type info info info and I need the return sight there let's say void so methods aren't usually static you know these these methods on static but I have to make this static phone to use it because there's no app object here I haven't a new app and that's why I'm making it static and in here I could say info dot show info because that's all you can do with this info interface because I only define one method in it although I could define more you could have as many methods in there as you like as I say and now I can call info I totally scaling confusing having all these infos let's call this something different like output info maybe that's better I can call outputs info and I could pass for example as a range of possibilities I could pass machine 1 to it for example because machine 1 implements the info interface or acts 8 output info person 1 for example and so I can pass any object to this method that implements this info interface and then within the method I can access any method that is defined in the info interface but I can't access other kind of methods of the class so there we've got this stuff coming up again this may be just puts this out and here a blank line to mail a bit clearer there we go so we're producing this by doing this and so that's that's as far as I can think that's sort of almost all there is really two interfaces till the mechanics of interfaces and of course this doesn't tell you much about how they are used but we're seeing one possible usage here that if you want to pass if you want to pass disparate to different objects to a method as long as they implement the same interface you know you can make it possible and you can call methods in those classes those objects by using the methods of the interface that's one possibility there are other things you can use interfaces for if you want some examples you could look for example at my got some free tutorials on youtube or on my website Cave of programming comm of the collections packages in Java they're used for kind of storing a manipulating data and they group the different storage objects down under different interfaces like list and set and map and so on so that's another uses to kind of group objects in a way and another kind of possible use is some people actually design whole programs by using interfaces like for example you know if I think you know you could start off designing a program by thinking okay what classes do I need and then I'll say you know let's say I want to have a class not a class well it's so I'm going to have objects they're all for example have methods like start and stop I could do stuff like new interface I could call this like I don't know I started all for example you know and so I just stands for interface which you could you could use if you want to make it clear that it is an interface and then you know you can start defining stuff like public void start here and public void stop and these could have parameters if you want and so on so some people design whole programs like that and that they create the interfaces first and so that you're defining card that objects will interact with each other and then you just create objects that implement those interfaces which is I don't know the name for that technique but it's a perfectly reasonable thing to do and it's just one more thing that I wanted to say which has almost slipped my mind let me think for a second okay got it yeah what I wanted to say it was just like and this is really I think it's a really nice analogy that I thought of for interfaces so I'm going to show you any more code now but if you want like a way of thinking about interfaces that I find useful and you can always think that if you open a bank account then that's kind of like doing new on a new with a class to create an object when you open a bank account usually you look into what bank you're going to use and you you might look at there I know interest rates or what kind of you know what kind of perks they give you or whatever you know where their branches are located you kind of look into the bank and think about it but after you've an open to bank account then you sort of no longer really think about the particular Bank you just expect that the bank will have certain facilities that every bank has like facilities for withdrawing money for paying money in I don't know for cashing checks or this kind of thing so the facilities that the bank has are kind of like and the things that you specify through the interface and you only have to think about particular objects when you do new so if you look at this this example for example I'm here I'm saying info one equals new machine and by doing that I kind of I no longer have access after this to machine specific methods except for the ones that I define in my interface and I could have done in for one equals new personal something and then I would have had access to show info method in person but it's kind of like sometimes you only care about what particular kind of object you're creating here when you do new and after that you just care about what methods the object has you don't worry about the type of it anymore and you access those methods to the interface that's kind of just one way of working it's not how you always work but I like this analogy because if you look for example at C Java collections you'll have the list interface and you only think about what kind of list you're creating when you do new lists and you know new array lists new linked lists or whatever and then the details you know of the particular type of lists you sort of then slightly forget about and you access that object through the interface methods and all this stuff kind of the same methods like add and remove and so on so I don't know if that analogy helps but if you do look at Java collections packages I think it does kind of help to think you know you're only going to worry about the particular type at the time when you create it and later on you just worry about the interface the actual methods that it has which could be the same for a whole variety of different objects anyway I'll leave you lurk some waffling and in the next tutorial we're going to look probably art packages in Java so join me again then and this code will be on cave of programming comm and so join me again next time