hello this is John from cave of programming calm in this tutorial we're going to take a look at arithmetic in C++ we've seen a lot but not all of this before we're going to take a bit of a closer look here before we get on later it's looking at pointer arithmetic so plus/minus and multiplication don't really need any more explanation I don't really think that we've already gone through but it's a bit of a gotcha with division which is that let's say do int value 1 equals 6 divided by 2 and then do see out value on this does what you'd expect so if we run this then we should get 3 but look what happens if we do an 7 divided by 2 we still get 3 even if we change this to double double value 1 equals 7/2 and we run this still going to get 3 the reason for that is whenever you divide an integer by an integer in C++ it will always discard the remainder it won't do floating point division it will do integer division and just throw away 2 remainder if you want this to be a floating point division one of these has to be a floating point number so like if we had 7 point nor divided by 2 that would work and sometimes you can't do that for example because this could be a variable it could both be variables or but like an easier way to tackle this it's just a cast one of them to a double or a float so we can type and doubling round brackets before 7 and we call that casting 7 in this case to a double and then we get true floating point division and we get 3.5 casting is is something that's soft and useful we can use it to come to convert certain kinds of types into certain kinds of similar types you can also cast a double to an int so let's say we have int value two equals seven point three we can actually do that but the compiler will issue a warning it's possible some compiler might even throw an error my compiler just gives a warning with this I'm using a new here to get we got a warning there it seems to have now vanished for some reason but it did actually run and we get seven so it's just it's just thrown away the remainder because we had a double here and we're trying to put it into an int but to get rid of the compiler warning we can cast this explicitly to an int and then and we will still throw away two remainder I will throw away the stuff after there sorry after there after the decimal point and we'll get an integer so this gives us seven and there's no compiler warning when it compiles us we've got this here yeah that's just saying us from something earlier by looks about this different project okay so there's no warning here so this won't do rounding you won't Rand up or down all it does is throw away two stuff after that after the decimal point if you want to do rounding you'll have to use a special maths function to do that and we've also got a bunch of operators like this plus equals minus equals divide equals x equals and also mod equals and we'll look at mod shortly but let's take the simplest version of this let's say we've got int value 3 equals let's say 8 if we do value 3 plus equals 1 that's the same as doing value 3 equals value 3 plus 1 or is the same as value 3 plus plus all of these three things are equivalent so if we do see out now value 3 what we get is it's going to be 9 so let's run this and it says 9 so the value in this lies in there the reason this normally if we wanted to actually do this would do this because it's a shortest syntax value 3 plus plus but we can add all the stuff on here and we can also use this with different arithmetic operators so let's take another example int value 4 equals 8 again sale maybe 10 and value 4 divide equals 5 that's the same as doing value 4 equals value 4/5 so these divide equals x equals negative equals that are the same as these expressions these kinds of expressions they just avoid you having to repeat the variable so we're just assigning we just with here we're doing the division value 4/5 and then signing into value 4 so that is often quite handy just because it's a bit quicker type really so let's let's just run this and we'll see that it's going to be equal to two and the mod operator is another thing I want to show you again this is very very useful for various reasons and some of which we'll probably see later on in these in this tutorial series what mod does is it does integer division and then gives you just the remainder so let's say we have int value 5 equals 12 mod 5 so this is called modulus modulo which is mod 4 short then what we get there is 2 so let's do value 5 here so it's 12 divided by 5 and then just take the remainder and store in value 5 that's what mod does this % so here we get 2 of course if it was 13 it would be 3 and so on let's just let's just have long as we've got 3 their operators they have they have always a precedence excuse me so if you write out you can write out complicated expressions like say double double and I don't know I'll just call it equation equals 5.3 5.3 divided by 4 plus 2 times 6 I hope we can do see out on that equation and C++ will figure out the meaning of this and because certain operators have higher precedence some others so in this case division and multiplication have a higher precedence than plus which means that they will be done first so that's the same as if we if we put round brackets around these bears that makes it clear that first we're doing these and then we're doing the plots so we expect the same as all now 13.3 if I've got my operator precedence correct here there we go it's yeah it's basically the same more or less but this is bad to write expressions that don't have brackets around them and to rely on operator precedence because it's just not easy to remember always which order the operators will be applied in and in general most of the time it's much better if you have a complicated expression like this to put and round brackets around relevant bits so that this this could be even more complex we might want to do I don't know and mod 2 and we might want to do all of this stuff first so here we're saying divide 5.3 by 4 then do mod 2 on it and so get a remainder after we divide by 2 and then add to that and do 2 times 6 and then add 2 times 6 to it so and but it's a lot clearer we've got a problem there because we're playing mod to a floating point let's do something like + 5 and I'll change this to a double just so that we have a double result let's try building that as if that works build project and run so it's always much bad better to put brackets in even if they have to be nested nested brackets are not very readable but they're a lot more readable than if we had the same expression without the brackets so with the brackets we can see okay first we got to do that then we're going to do that and we've also got to do this and then we can add those two things together but if we had that without the brackets it would look like this which yeah for me is is getting to be really quite unreadable because I'm not really sure which has precedence division or mod and I know that multiplication and division have precedence over plus but is getting ridiculous now so don't do this always put round brackets in to make your expressions more readable so I think that's everything that I want to cover in this tutorial I'm going to give you a couple of exercises to help you to get this into your mind one is take a large number of seconds like more than several hours and convert it to hours minutes and seconds so you can do that in various ways using a combination of arithmetic 'el operators used judiciously try to do it in the most efficient where you can but if you can get the right result at the end of the day and then you've succeeded and you can always check it by multiplying seconds by 60 adding it to minutes times sorry multiplying minutes by 60 added to the number of seconds and multiplied hours by 3600 and add that add them all together to get the number of seconds back again and chetley you get the number of seconds that you originally had when you convert it back into seconds if you see what I mean so that's that's a good that's a good little exercise and another exercise is write a for loop that iterates let's say 10,000 times I'll put a dot on the same line on the same line so a bunch of dots one after the other on the same line every hundreds iterations so for example you might want to process a bunch of XML records you might have let's say 100,000 XML records and you want to process them with a program that your ROM and command line and you want to show progress but you don't output a dot for every single record because you'll have a massive console full of huge numbers of dots it's better to output a dawn every time you processed a hundred records and then the dots appear at a more manageable rate and to do that you can use the mod operator so so to do this to output something only every certain number of loop iterations you can do that using the percent the mod operator so and have a go at that and see if you can get it to work I'll leave you with those two exercises for this time so until next time happy coding you