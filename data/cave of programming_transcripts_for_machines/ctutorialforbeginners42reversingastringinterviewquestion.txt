hello this is John from cave of program intercom in this tutorial we're going to look at reversing 8 primitive strings C++ in place in other words we're going to take a string like this so star test equals hello and we're going to reverse it without actually copying it to a new array or actually gonna traverse this particular array the reason this is important is well for one thing is it's just something that you you probably should be able to do if you've got a good grasp of how arrays work but also it comes up a lot as an interview question and I once got a job just because I could do this question I think I even messed it up a bit but because I could at least explain what I was doing and hopefully it was clear that if I'd been able to test the code as I went along I would have got a right answer because of that I got the job so it's well worth knowing how to do this so if you've seen the the previous tutorials and or at least if you know your way around pointers and arrays in C++ then it's worth having a go at this just to see how far you get this is actually kind of more intuitive to do using a for loop and working just with arrays and just leave the pointers out of it but just for fun here to get some more practice with pointers I'm gonna show you how to do this using pointers and the way that I show you is just one way of doing this there are lots of ways of doing this but let's have a look at an example of how we could tackle this so firstly I'm gonna declare a pointer to the start of the array let's say char pointer P I'll call it P star equals although we actually are going to move this pointer equals test select now points to the start of the array to the letter age let's also declare a pointer to the end and to get this I need to know how long the array is so let's say here int land in other words length and length of the array equals equals size of text now because each char is one byte size of the whole array will give me the number of characters in the array in the whole string except that we've got a null terminator character here that doesn't print they're just marks where the end of the string is that's padded by the double quotation marks so to get the number of characters if you want to say and chars we will have to do the size of negative one like that now we can say char pointer Pete end and now supposing you want to point this to the last character in the array if we did equals text plus n chars so number of choice should be 5 that's the number of visible characters in the string if the star here this is a star was pointing our age and we added 5 we go to one going to be here two is the L 3 is elegant four is zero Sarris oh and the fifth will be off the end of the array so if we want to point this to the last character in the array we're gonna have to take the star plus the number of characters negative one like that so no need to put brackets around any of this because it doesn't matter what or that we do the plus and minus in in any case so now you can check it if you want but let's let's just do that just to prove it so the thing pointed to by the PN's now will be the last letter which which is o in in this case in this string let's run this and I think those warnings you know got unused variable P starts here in problems but we see there's a letter O there which is what we wanted and now what we can do is we want we I'm gonna point one pointer to the first let's at one pointer to the last letter and I swap those two characters around then I'm going to move the start point of forward to the next character and the end pointer back to the second to last character swap those around and keep going until start at what keep going as long as start is pointing to a lesser point in the string then the end so to do that I can say while P star is less than end because remember we're allowed to compare pointers like that this is saying well start points to a memory location smaller than what end points to and I'm gonna in this while loop I'm gonna increment start so star plus plus and I'm gonna increment I'm gonna decrement and so I'm gonna say and minus minus now we want to swap before we do that we want to swap the thing pointed to by start with the thing pointed to by end so I can faith say thing pointed to by star P star equals the thing pointed to by P end and that's taken whatever character PN pointed out and moved it into that memory location pointed out by this star pointer here but when we do that we overwrite what's in start and we want to put what ever start putting stuff in wherever end points so let's save were and the character the end points are let's say char save equals thing pointed to by the end pointer then we set star sorry by the start pointer cuz that's the one we're overwriting here so let's say we've saved that character the star pointer to resets we set whatever was at a star location here we've set that to whatever was at the end location so we'll swap we'll take in this case start point set H to start with so we saved the age character here and then we set that memory location to whatever endpoints are which is going to be O and then finally we can say point whatever endpoints at the end set it equal to the character we saved from the starts and our set wherever the end point and the end memory location which is this memory location put the age in there that star originally points that so we've swapped the two characters around we started start pointing at age and end pointing at own and then we've swapped those two characters around and this syntax is very common if you want to swap two things you have to remember to save the thing you're swapping because otherwise you'll overwrite it when you do the first swap so you need to set this set the first thing look the first things memory location equal to that anything but first save that start of thing then you set the end thing to the start thing this is something that again feeling explaining it that you might only get this when you really look at yourself and maybe put some C outs in to see what's happening here but I think that should work what's this warning here I'm curious it says unused variable stop but I think that's just because we haven't built a program that's hangover from the last build now let's output C out text and see if it's worked let's run this so we'll run this and we've got hopefully a reverse string so things to check also you want to check what happens if there's nothing in this string so if it's like that does the code crash and we hope not and we haven't got crash here so then size of is going to be 1 it's still gonna be 1 because we've got the North terminator in there remember size of minus 1 is 0 so that 0 and here the end is going to be pointed to the start plus zero minus one so it's actually going to be pointing before the start so the loop will never execute I think that's correct at least it seems to work and let's put an eighteenyear so what if we got one character now size up will be 2h plus the null terminator minus 1 is going to be 1 so the end points to the start plus plus 1 minus 1 so it points the same point as a start pointer so again the loop doesn't execute at all because start is not less than end and we leave the string unchanged and if you've got two characters then it works just fine small T in the H there and it should work for Strings of any size basically so this is one solution I think if you undo this sort of for loop don't use pointers just use array syntax it does look a bit more elegant and there are a lot of other ways of doing this so to practice this I'd say try reversing your own string first either like go through this code and try to understand it thoroughly puts the else in it if there's anything you don't understand and print what you actually see at that particular point you can also try writing your own code just using for loop and you can start using yeah it could be a for loop and array sort of syntax instead of pointers you can google for code if you go before C++ reverse string in place you'll get lots of example code as well and try try getting something to work and then also try writing in a different way see if you can think of a different way to do this and again it's a really really good drill with arrays and if you use pointers it's a good drill with pointers as well and this question if you go for an interview with a C++ job for a C++ job you might well face this exact question so it's really worth it's really worth getting your head around okay so that's it for this tutorial and until next time happy coding you