hello this is John from Cave of programming. comom in this tutorial we're going to take a look at uh well we're going to have a kind of overview of c c C++ C Objective C and also Java which Java doesn't have C in the name but um in a way it probably should so um back in 1973 I don't really keep these facts in my head not all of them anyway so I've relied somewhat on Wikipedia here but back in 1973 um a a American programmer by the name of Dennis Richie uh C a language called C I think there are languages floating around called A and B I'm not sure about that but C was created and it proved to be very popular now C is based on functions so if you've been following this course on C++ You' you've already seen functions but we've seen that in C++ we can also use classes C doesn't use classes um it uh classes were later development object orientation was a later development um so they weren't um maybe they were around I don't know when C was invented but they weren't incorporated into C at least and C is still used today and there are there are various reasons for that one reason is that c is even faster than C++ because the uh object orientation the classes they add some overhead to the language which isn't going to make any significant difference from most programs but nevertheless C programs can potentially uh run faster than C++ ones at least under some circumstances but of course a major determinant in the speed of your program is just how how well written it is so people are still using C especially for very lowlevel applications like device drivers and stuff like that also I suspect if you've been writing C code since the 70s um you don't necessarily want to go on and learn C++ you want to carry on using what you're using so uh sort of tradition and inertia also come into it but C does still have its place now moving forward to 1979 a um Danish guy whose name I can't properly pronounce so I'm going to call him bana stop develop the C++ language C++ um added on classes to C so it turned C into an object oriented language object orientation was still around was around previously but um it didn't didn't exist in C so he he developed C++ and it became a great success um these these languages um they're all sort of continuously being upgraded and developed C++ new standards come out and people Implement those new standards but the the original version was um uh based was created by this straup guy um whose name I'm sure I'm mangling and uh it was uh it was like um classes had basically been added to se now no one seems to know exactly quite where the name C++ came from uh but there is a book by the British author George Orwell called 1984 and that was written in 1948 and orell envisages 1984 as being a sort of communist um highly controlled dystopian Society where the government even controls language and in 1984 if you want to say something's really good you add plus after it so ice cream plus is good ice cream if you want to really emphasize how great something is you add Plus+ so ice cream Plus+ therefore there's this idea that um C++ maybe got its name because uh it's uh it's C++ in the in the lingo of 1984 of course it's also true that there's the increment operator Plus+ in C++ which we've seen in this course so maybe it was even a conjunction of these two things that inspired the name um a thought occurred to me last night while I was thinking about this lecture can't Banis stra answer this question once and for all I don't know I don't know who gave C++ its name but I've never heard anyone give an answer with any certainty as to where the name came from so C++ is C with classes um and uh it it kind of changes a lot of things in C uh but um with with a few minor differences you can generally compile a c program using a C++ compiler you might need to enable some special options there but see is is really kind of like a strip down version of C++ in in many ways um I think uh I think there are some there are some things in C that don't exist in C++ some things you can't do but they they're very few so whereas we C we're using uh functions as the the kind of organizing uh entity in our programs in C++ we're bundling those functions into classes together with data um and we're using those to organize our programs and C++ has proved to be extremely extremely popular of course which is why I've made a course on it now U winding forward to um 1995 Sun Micro Systems which is now owned by Oracle developed this language called Java a lot of people felt that C++ was too hard basically and not only too hard but it was is really easy to create bugs in C++ and on top of that a C++ program has to be recompiled for every new platform that it's going to run on so if you take a computer program and um you want to run it on a different platform than what you wrote it on like for example maybe you wrote it on PCS and you want to run it on Apple Max often you have to make code changes there because you're you know for example creating windows in different ways or whatever uh but even more than that with C++ you you have to actually recompile the files to a binary format for your new Target system so Java addressed some of these problems by Java um has uh a thing called a virtual machine so there's kind of basically a simulated computer running on top of your existing computer and that means that the the Java binaries uh the Java class files um we call them Java compile sort of compiles to these class files they run actually on the virtual machine the simulated computer not directly on your computer so that means you don't necessarily have to recompile a Java program to get it to run on a new platform um there are disadvantages of that as well well actually I should mention another big Advantage which is that um Java is much less prone to bugs than C++ um because the virtual machine can do a lot of checking it can check if you run off the end of an an array and Java has a thing called the garbage collector that frees memory of' allocated so you don't have to deallocate memory yourself and memory deallocation is a big source of bugs in C++ but then you get disadvantages as well like the virtual machine means that uh Java runs more slowly than C++ program of course it's always possible to write a really bad uh badly coded C++ program that runs more slowly than a Java program but other things being equal Java runs more slowly than C++ whether you actually notice that in the application that you're using depends of course on how many how how what the kind of level of demand is that you're pulling on your machine but Java is is is inherently somewhat slower than C++ um so we get advantages with the virtual machine we can just take the class files often and just run them on a different computer because that computer will have an implementation of the Virtual Machine written I guess in C++ probably um but and then that the actual Java class files they just see that virtual machine and um they can just run on that without any change but then it's it's it's it's slower so Java is an easier language to learn than C++ I would say um I've got a huge free course on Java at Cave of programming. comom uh and it's easier to learn and it's it's become very very popular partly because of the portability partly because of the um ease of use of java it's it's really designed um to be easy for the programmer to work with I did a search on jobs serve.com a while ago and I think the results was something like in the US I turned up um something like uh I think it was like maybe 3,000 jobs for Java at a given moment and uh something like 2third as many jobs for C++ so um Java is not replacing C++ and we'll go go into that a bit more later but it it has taken over a lot of the things that C++ would have been used for at one time now C was developed um by another Danish guy who's name I'm also going to horribly mangle Anders halsberg um uh sometime around 2000 or so uh he's working for Microsoft and C is a is a Microsoft language basically so again CP um I believe uses a kind of virtual machine uh as well so it's it's not the fastest language in the world it's not got the speed of C++ as far as I understand as far as I can tell from having written some programs in it uh and it's closely associated with Microsoft it's it's basically used for programming Microsoft Windows um or it can be used to create uh websites as well but it's it's tied pretty much to Windows although people have implemented um the net platform for uh Linux for example so you can write you can use cop on other platforms but it is very closely associated with Microsoft um on Microsoft if you want to write uh C programs you can use um visual C and there's a visual C Express at the moment at least which is which is free but a bit limited especially when it comes to creating installers Al my information on that could be could be out to date there and um a similar IDE mono has been implemented for other platforms but last time I checked it out a couple of years ago it's now uh towards the end of 2014 mono was uh kind of a bit primitive looking uh so if you use C sh on Microsoft Windows and you're happy being tied to Windows you can use visual C and it's it's a beautiful IDE to work on to work in you can create um programs with a nice visual designer it's really great but you're stuck with Microsoft and um again cuz there's like a virtual machine in there some kind of virtual machine I'm not so sure that it's so easy to access lowlevel facilities of your computer in C and again that's another reason why you might want to use C++ in uh instead and yes you've got some issues of slowness which won't necessarily be noticeable in your final program but they they are kind of there Objective C I've I've never used at all um so I'm relying on Wikipedia uh for this but apparently in the 1980s Brad Cox and Tom love working for um Apple the Apple corporation developed a language um that was um I believe it's it's again kind of based on C++ so Java is strongly based on C++ this is something I don't think I mentioned but should have Java looks a lot like C++ and if you learn C++ it's not a huge stretch to go on and learn these other languages similarly as far as I know Objective C is also ultimately based on C++ and it's closely associated with apple again I believe there are implementations of it for other platforms but basically you can pretty much think that you're tying yourself to Apple if you use Objective C which is which is fine Objective C um I believe use uses some kind of lightweight um virtual machine but I I'm not going to speak much more about that because I don't really know I don't really understand Objective C I haven't used it um so again you may you may even on Apple Mac you may well want to use C++ for the for the speed and the power but it's a good choice Objective C I guess if you want to write um kind of real Apple Mac uh programs that look like they''re being developed for the Mac so now you might be wondering we've got Java we've got um C we've got um Objective C we've got lots of other languages that I haven't mentioned is C++ some kind of anachronism that is is it something that's just hanging around because um out out of inertia because people don't want to learn new languages a while whatever and the answer to that is emphatically no uh there are um kind of almost as many C++ jobs around as Java jobs uh less I would say but still a lot of jobs for C++ and the reason for that is that we just can't do without it C++ is still being developed uh recently we've got um C++ 11 I believe that was developed in 2011 which is why where the 11 comes from um in this course so far I've been teaching basically C++ I guess 98 uh from 1998 onwards C++ hasn't changed that much and the as far as I know the 11 version uh it's not a radical overhaul um but C++ is being continually revised and it's being still used and the reasons for that are the ones that I've mentioned if you want a program that runs as rapidly as it possibly can and can access all the facilities of your Hardware even in ways that no one's thought about before perhaps even if you're using completely new hardware that you may even have just invented yourself with your computer and if you don't want to use C you want to have the luxury of classes and object orientation then you need to use C++ and that's that's not looking like it's going to change anytime soon uh very highend games are usually written in C++ very very powerful intive in Innovative artificial intelligence programs are Li liable to be written in C++ because um anywhere where you need to squeeze as much power out of your computer as possible anywhere where you're at The Cutting Edge of um software development you're going to think about using C++ it gives you that power it gives you that speed so C++ is well worth learning okay it's it's difficult uh but then an advantage of that is when you've learned it other languages sort of seem easy yes to learn Java after C++ requires certainly some effort you're going to have to put some effort in there to learn new syntax but um these other languages as we've seen are heavily based on C++ and um they're all I would say um kind of easier the ones I've used at least than C++ so U for all these reasons C++ is a very great and important language to learn and it's going to be important I suspect for a very long time into the Future Okay so that's it for this tutorial if you've been following this course so far and planning to add probably probably just one more video and if you have followed this course from the beginning uh this is a free course on C++ or if you're watching on um UD demio somewhere in the future I may well have bundled this with a more advanced course to create one massive nonfree course um but if you followed it from the beginning then um yeah big congratulations uh and uh we're going to kind of wind up this course in the next tutorial so um I I've I've given you an overview here but I don't have an indepth knowledge about how all these different languages work I Feel On Solid Ground pretty much with Java and uh C++ but C sharpen stuff my knowledge is less good so if I've said anything in this video that jars with conflicts with what you already know it's quite possible that I'm just wrong but this this I think this is um basically a reasonable overview uh for someone who um uh is just wondering what the heck all these different languages are Okay so until next time happy coding