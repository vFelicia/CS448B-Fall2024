hello this is John from cave of programming calm and in this tutorial we're going to look at polymorphism in Java so polymorphism is a objectoriented concept which has a big name meaning many shapes which tells you absolutely nothing at all but it's actually a pretty simple concept and just one or two tiny little gotchas which we're going to look at so let's create a new class here and I'm going to call it plant and I'm not going to give it any methods or anything I don't think it's not linear and I'm going to also create a new subclass a plan so let's create one called a tree and I'm gonna set the superclass here I'm going to click browse and go to plant and click OK and finish and so it's filled in extends plant for me so I've got one parent class plants and one child class tree and actually let's get rid of these files from my last project here says not to confuse things and I'm going to create a plant class so let's have a variable to refer to it and say plant plant equals new plant and tree tree equals new tree and now what polieville polymorphism means in a nutshell is that if you have a child class of some parent class you can always use the child class anywhere where you would normally use the parent class so let's let's take a look at some examples and if I let's say I have so got up here very poor called planet let's just call it plant one if I say plant plant I could point that if I want that plant one and that's that's just because this reference here is referring to an object of type plant and now I'm saying this reference here refer to the same object at plant one refers to so now I've got two references here to the same object zoning wall natural plant object and but because of polymorphism since tree is a subclass or a child class of plant I'm guaranteed that I can always use a tree wherever I have a plan so here I can also say tree and this is polymorphism in action and let's let's say now that tree has a method as could tree a method let's get plant a method actually so all plants can grow so I'll say public for you to grow and I'll just leave it at that and if laptop is out and there and I'll say plant growing and let's give tree also grow method so I'll override the plant method entry I go to source override implement methods grow and here I'll say sis out tree growing now if here I've got okay I've got a reference pointing to a kind of plant because tree is a plant it's as a child lesser plant so it is a plant and if I say plant to now grow there's no prize for guessing which one which method will be called the one it plans for the one entry but by all means have a go see if you can guess and in fact the thing that's important here is that the object that plant 2 is pointing at is actually this tree so if I say plant to grow because plant 2 is pointing at a tree it's going to use this grow method from tree so if I click run now you see click run and says tree growing and because when you actually run the method what matters is not the variable it's not entitled a variable which every plant or tree or whatever and what matters is the actual type of object containing the actual code the actual variables the guts of the thing and it's going to run it's the object that matters and this object that this reference points out it's a tree which is a kind of plant and so and there's one more kind of complication I think I can think of which is that let's say we've got a method in a tree like say public void shed leaves so this method is and in autumn leaves shedding or fall as you call in America so now if I go back to app if I can say here like tree shed leaves and of course that will just call my shed leaves method I just added to treat so says leave shedding and but now we know that plant two is also a tree but if I look at the plant two and I try to do shed leaves I'm going to get an error and in fact the autocomplete would have told me that as well because there's no shed leaves in this list and the reason for that is that when you're trying to call a method what matters is the type of a variable the type of the reference because and this if you look at for example in isolation a variable of type plant let's call this plan three so this is just a this is just a null reference because I'm not pointed at any object that variable knows what methods it should be able to call if it is pointing in an object and even if you just do plant three dot you can see now down in here we're going to have a grow method and there's no shed leaves method because it's a plant not a tree so the variable knows what you should be able to do and this code incidentally is not going to actually work because I'm not initialized it and but my point is here that it's the variable the type of the variable that decides what methods you can call but as we see here it's when you actually call those methods you're going to the object the actual physical in a sense object that contains the actual code and it's that object that's going to run the relevant code so this is this is polymorphism for you and if you if you think about one of the common situation where you might want to use this is let's say you've got public yeah static void let's say to grow and that takes a plant call it plant and all that does is so this is a this argument is a plant type so I can definitely call the grow method since do grow there then of course I can do let's get rid of that and leave that in so this code is going to be on cave our programming calm and I put a few more comments in here later on to explain this but now I can do do grow and I can plat I can pass they're quite happily the treat because polymorphism guarantees me that wherever a parent class is expected I can use a child class of that poem by tree which extends plan so if I run that it's gonna say tree growing down here okay so that's that's it for this tutorial that's polymorphism uh says big word but it's and when you look at it it's quite enlightening it haven't really helps you learn a lot I think about how variable how variables work our references work versus how objects work but in essences is quite simple so that's it for this tutorial and in the next tutorial we're going to look at a topic which is very important and again will hugely bring on your understanding of references and objects although it's not that exciting at the same time we're going to look at podcasting and down casting so join me again then and this code will be on cave of programming calm and until next time happy coding you you