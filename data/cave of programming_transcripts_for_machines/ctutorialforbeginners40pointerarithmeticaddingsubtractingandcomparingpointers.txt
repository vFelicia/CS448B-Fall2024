hello this is John from Cave of program.com in this tutorial we're going to look at pointer arithmetic in C++ so I'm still thinking about how I'm going to organize the videos in this course but I'm probably going to put this video after one on pointers and arrays uh and if you have seen that video already then you'll you will have seen some of the stuff that we're going to do here but um whether you have or not this this stuff is worth going through a couple of times and I'm going to go through some stuff here that I haven't shown you in any other video in any case um and it's it's import it's quite important stuff to know as well you do use it I have used this in actual programs believe it or not so I've got here a um I've got here an array yes so I'm definitely going to have to put this after the video on pointers and arrays let's create a pointer to the start of this array so I'm going to say string pointer P text equals text so that you'll hopefully remember will now point at the first element in the array and we could do see out D reference the pointer so thing pointed out by PEX and that's going to give us the first element in this Five Element array which is going to be the string one let's just run this and check so it says one um I'm actually going to I'm going to put the number of elements in here cuz I I think I want it later on so we've got five elements one 2 3 4 5 so the number of items in the array we can specify there although it's optional when you initialize an array like this and actually I'd like I'd like to be able to use that number later so I'm going to say int um elements equals 5 and I'm going to put this here elements uh now a common thing to do is if you've got something like this um an INT which you or any value which you don't want to change in your program you don't want it to ever change cuz if if we change the this now it wouldn't be the number of elements in the array anymore then um you can put const in front of it and that means that I I now can't change elements so if I set elements equal to seven now and I try to compile the program uh it will give me a compiler error it just wouldn't compile which is what I want that's like a safety check to make the Cons make sure that this now can't change it's also quite common if You' got a constant to put it all in capital letters so so let's say um n strings meaning number of strings you can put an underscore there if you want but this looks quite funky so let's just use this and let's put that there so we now we now know that that's fixed and it's the number of elements in this array so um so the program works uh so um one thing we can do here is um we can do addition with pointers we've seen this in the video on pointers and arrays but if we incremented P text like this P Tex uh if we add one to it which we can do the shortest way is to say Plus+ we could say equals P Tex + one let's do that first just to see it and then let's do a c out on thing pointer 2 by CeX endler and run this then we get two so um the the shorthand way of doing that again we could do plus equals 1 that would also work or we could just do Plus+ um or for that matter we could do plus equals 3 and then uh so it started pointing here and we add one two and three now it's going to point point at the uh at the string that says four so we can add numbers to pointers and that will move it forward the number of blocks of memory corresponding to one unit whatever one unit is so in this case it's a pointed to a string so it's going to move forward by one string if it was appointed to a Char it would move forward by one by three chars in this case in other words three bytes forward because the Char is one bite um we can also we can do subtraction as well quite happily we can say PX negative equals um 2 so if we move forward three to four and then we go to back one two we expect it to now be pointing at two let's try that so I'm going to run that and it says two we can uh compare pointers as well so um we can say uh let's say string pointer P end equals and let's set it equal to the let's set it to point at the last element in Tex so Texs uh n strings and remember the number of the the last element in the array will be at the position which is the number of elements in the string min1 so it's going to be index four not five and that's because um we start numbering at zero so if we started numbering at one we'd have 1 2 3 4 5 and The Fifth Element would be at five which is the number of strings in the array but because we start at zero we've got 0 1 2 3 4 so we have to subtract one from the number of elements in the array to get at the last element and it's very very important to remember that especially since the compiler probably won't warn you if you put a stupid number in here by mistake and it's a common source of errors in C++ um so now we've got a pointed to the end we can compare these pointers so as we saw in the uh video I think we saw this in the in the video on um arrays and pointers but we can do stuff like this while uh P text is not equal to P end we can say see out thing pointed to by P text endler and P text Plus+ if if we do that um we're going to get uh whoops let's just see we've got an error here somewhere oh yeah I forgot to take the address of it so yeah that that would actually give us the last element and the array but we need the address of that element and because this is a pointer so let's just put the address symbol in there and now we'll try that again and hopefully that will work uh so we get now um 2 3 4 well this is a little bit confusing because um uh PEX doesn't point to the beginning let's just do that PEX equals and let's use this syntax again just to make it really clear and set that equal right to the start here now we're not going to Output the last element here we've got 1 2 3 4 and the reason for that is when it actually gets to the last element the loop stops here if we wanted it to point to the last element we could actually do this and that would work so let's run that 1 2 3 4 5 so um whatever you do don't try to write the value here and don't read it either because it will be garbage reading it will give you garbage writing it will potentially screw up your operating system and you'll have to restart your computer or something in the worst case um but as long as you remember that you mustn't read or write that um I mean you mustn't read or write the value here nevertheless you can point the pointer off the end of the array with which in this situation is quite useful so you can point the pointer wherever you like it's fine it's not going to give you a warning or an error just remember that if it's pointing somewhere where you haven't allocated memory then you mustn't start reading or writing that memory but sometimes this is actually quite useful we could we could also do pointer subtraction we we could um yeah so if I do um let's say uh let's let's do this again set it back to the beginning okay I'll put a comment in here set P text back to start so if we set it back to the start then we could do um p n netive P1 now the result of this um should be a pointer but the pointer that would be the result of doing this wouldn't be any use to it it would point at some memory location uh like memory location five I suppose uh because we're pointing this just off the end of the array and this points to the beginning so the difference between the two will be 1 2 3 4 5 and um that's no use as a pointer we'd have a pointer pointing to memory location five there's nothing interesting in there but we could do int uh elements let's say equals and let's output elements see our elements so if we subtract one point from another we can store that in a um in an integer whoops I should have called that elements let's say elements except that it probably should really be long um but in this case um I know that this is going to be a small number number so um I can successfully do this uh it could yeah pointers they're actually if I remember rightly they're actually um like a long type um more than in so you could store really big numbers in them um I believe uh and so maybe it makes a little bit more sense to do this that makes it a little bit clearer what's happening so we use long cuz we're dealing with pointers and also we'll put everything in Brackets and cast to a long just to really just to make it clear what's what's happening although it worked fine without that and that's going to give us the number of elements of course in the array because uh the difference between the memory location of the first element and a memory location of the element after the end of the array is going to be five so if if we take this first pointer here and we add five to it 1 2 3 4 5 we get a pointer that's just off the edge of the array so in other words if we subtract end from start yeah we're going to get the number of elements in the array I think that's all I I want to cover in this tutorial well there's one more little thing which is going to come in useful a bit later on uh which which is that suppose we want a pointer to the middle of the array we could do something like um let's set pext back to the start and then let's say p text plus equals we'll do Pex Plus equals n strings divide by two and then let's do c out of P texts so C out p t well this is going to give us well let's take a look um it's going to give us a memory location cuz I forgot to put the I forgot to dreference the pointer with a star let's do this again so we're getting three so we've got the the middle of the array so what's happened is um we've done end strings divide by two because we're doing integer division it discards the remainder so the answer to that 5 IDE by two because they're both integers we're just going to get um two we're going to discard the remainder it's not going to be 2.5 just two and then when we add two to PEX so PEX is there one two we get the middle element in the array uh and this kind of thing either this or something very similar uh is going to be very useful in an exercise which I'm going to give you in a future tutorial so um I will give you an exercise that will help you with this later on but um just for the moment uh if you have the uh motivation and energy it's definitely very worthwhile just to practice this a little bit declare a pointer to an array and practice going backwards and forwards in the array so practice addition with pointers practice subtraction practice comparing pointers um just make up some example for yourself and check that it works as you expect and uh see what happens when you subtract pointers get a result in an INT and if you do that to make it really worthwhile think about everything carefully as I've done as I've gone through this tutorial and make sure everything's exactly what you what you expect probably will catch you out um the first time you do this you probably get something unexpected but if you think carefully about why you've got the result that you have you should be able to figure it out so it's a bit of a puzzle there but just make up your own example just like I've done here and go through each of those different possible cases and also see uh check that you can get a pointer to the middle of an array as well that'll give you a really good workout with pointer arithmetic so that's it for this tutorial and until next time happy coding