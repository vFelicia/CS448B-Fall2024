hello this is John from Cave of programming. comom and this is a tutorial on the two string method in Java so all objects in Java um have the object class as their ultimate parent so if I create my own class here it will have object secretly as um as its parent as the class that it actually um derives from um and we're going to look at inheritance um very shortly in this series of tutorials but for now I want to show you some of the standard methods that the object class has and that therefore every um class in Java every object also has so if I create an object here I'll call it obge and I'll just say object equals new object like this and and then if I go object Dot and press control return in eclips to get the autocomplete suggestions you can see that um obge has a whole bunch of methods here and um notify notify all in the various kind of ways I actually go through in my series on multithreading that's quite Advanced so I won't cover that here but in these beginners tutorials I am going to cover um hash code and probably in the next tutorial the equals or do equals method and also um in this tutorial I'm going to look at the two string method so um let's create a class here and I'll just call it um it's going to be very simple so I'll call it uh why not call it frog um and I'm not going to give frog any methods just for the moment but I'll say frog frog one equals new frog like this and again if I do frog one dot um and in fact the auto complete you can see it's going to have all these methods because it has inherited all these methods from the object class that is secretly the parent of the Frog of the Frog class and um in particular it's got a two string method and the two string method is really really useful for helping to debug your applications so let's see how it works um I'll start by giving frog a very simple two string method so um the header of two string looks like this it's public click string to string lowercase o uh lowercase T capital S and it takes no arguments and of course it has to return a string so uh I'm going to just here I'll create a string um and in fact what I'll do is I'll just say return and and for a moment I'll just say return hello like this so I'm just returning a string here uh um and if now if I do sis out down here so control space and if I now do sis out on my frog one like this and I run this um as a Java application it's going to actually output hello because when you do system.out.print Len on an object it um tries to invoke the two string method to get a string representation of that object and if you don't have a any two string method defined for your object so let's just comment this out to take this away again then you can still do system.out.println and what happens is you get this so you get the class name and you get a at sign and you get something here that looks like a memory address but it's actually um called the hash code it's like a kind of unique identifier for all your um objects um in Java and we're going to look at hash code uh in a probably um quite soon in a future tutorial so I'll put this in again for now and the real use of um the two string method is of course you can create a string representation of your object that enables you to identify that object which is really helpful for debugging so let's say that a frog has a name so let's say this is public string name and uh let's give it an idea as well so let's say in fact I should make that private and I'll give it a private int um ID like this and let's say that the Frog Constructor allows you to set those values so int ID and string name and in the Constructor I'll just do this. ID equals ID and this. name equals name um oh yeah it's Capital that should be lowercase I actually your variabl should begin with um lowercase letters in Java really and what I can do here is I'm going to actually use I could do this I could say um let's say return ID plus and some punctuation plus name and there's nothing too wrong with that um and if I do that and I do system. out on frog object I've just got to yeah I've got to give it um obviously a value for the ID and name so let's give it seven fly ID and Bob full of name and if I run this actually maybe Freddy for a frog Freddy to frog so if I run this it's going to say seven call on Freddy and of course if I have um multiple different objects this will allow me to identify which one's which so let's make this five I'll call this one Roger and just do sis out Frog 2 so I'm getting now some useful output down here now there's nothing wrong really with this it's just that it's a little bit inefficient because um you've got a string object here and you're creating um you've got a string object here as well and you're uh this is getting wrapped in a integer um a nonprimitive integer type class and then converted to a string and then you're concatenating all those strings together and turning them into a new string so there's a lot of string objects flying about and a slightly more efficient way of doing it would be to use string Builder so I say I can say string Builder SB um equals new string Builder um and then I can do s sp. append ID um do append let's have some um punctuation and do append name and then I can do return s SP do2 string so um this this avoids um uh the inefficiency of concatenating strings because every time you put a plus between two string um two strings you're basically creating a new string so um as I mentioned in the last tutorial concatenation of strings is pretty inefficient which you might not care about in a simple program but this is um a better way to do it cuz here we've just got one string Builder object and you're using that to build up um a single string from a bunch of different strings without creating any intermediate strings behind the scenes um and if I run that now then I get the same results as before and of course you can use all the stuff that I showed you in the last tutorial here like um uh if you want to return like a formatted string you know you could use for example um well this is this is one version of two string let's just quickly look at another possibility so you could also do um I think I hit the return yeah hit the insert Key by mate there so you could also do for example um if I comment that out I could do return string. format and I could format this as uh let's see percent um I'll give it a a width of four characters ID and that's an integer um and this this should be in quotes So This is a format string specifying how the string should look um and this is this is stuff we covered in the last tutorial and again I'll have a call on there an m% S to Output the name and now I just Supply um ID and name so I'm just using the string. format method here to create a formatted string u in the same style as kind of system dial. printf print format and again we have the same results here and I could if I want I could left align this with a negative sign but you get the basic idea um and that's so that's two string for you and very very useful for debuging and in the next tutorial um we're going to look at the very important um do equals method that allows you to compare objects and and this is all kind of stuff that will come up on on a course or a interview possibly or exam um so apart from being extremely useful it's also very useful for um getting jobs or passing exams okay so that's it for this tutorial and this code will be as always on Cave or programming. comom and until next time happy coding