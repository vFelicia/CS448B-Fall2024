hello this is John from cave of programming comm and this is a beginners tutorial on arrays in Java and in the last tutorial I actually said that we would look at classes and objects this time but I completely forgot about arrays so this time we're gonna I'm gonna it's gonna be the first of several tutorials in which we look at arrays so just to recap I can create a variable that can hold an int like this say int values equal 7 and there's a really important distinction that we need to make now between value types and reference types in Java at the anatomy of what's going on here is that when I type int which is a primitive type in Java with a lowercase letter here I actually mean create enough memory to hold an integer 32 bits to be precise and and here I'm saying and put some value into that memory so this is like a bucket that's big enough to hold an integer now I can actually create a variable that can refer to a whole list of integers by saying int array values and again I'm just using an arbitrary name here and I'm calling it values with an S instead of value because it's gonna be more than one of them but that's you know I could call this not to pluck her or whatever I liked and now the anatomy of this is it's quite different here because this does not actually hold any integers it can't it can merely refer to a list of integers so when I type this it's not like creating a bucket it's like creating a label technically this is a value type a value variable and this is a reference type a reference variable this is a reference this is a value and now the next step of course is I want to actually allocate some memory which I can put some integers into so I can say values equals new int array and in these square brackets which represent the array I can cite the number of integers that I want values to refer to I'll say for example 3 and what's going on here is I'm saying point this reference at this stuff and this stuff uses the new keyword to actually allocate some memory and the amount of memory that I'm allocating is enough to hold 3 integers now you might be wondering ok what are these integers because I've not actually referred 20 values ok here's a value but where are the values here there aren't any well if I I can refer to the first integer in this list of integers this array events just technically by saying values and then I open a square bracket Eclipse is putting the closing square bracket for me automatically and in there I type and the number in the list that I want to refer to and the values are our numbers starting at 0 so usually when you when you number list yourself you start at 1 you go 1 2 3 4 5 usually in programming the first in the list starts at 0 and by the way that creates what we call the off by one problem which is that if you have a list of three things the first one will be 0 and so the last one is number 2 and it's the same kind of problem that we have with centuries because the first century started at year 0 and so the 20th century starts at 1900 and every year in a 20th century starts in 19 which can be a little confusing same problem here so if I run this program now I actually get zero because Java unlike C++ for instance is kind enough to give all values in arrays a default value but of course I can I can put my own values in there I can say values naught equals 10 let's say if I now display that values naught then I get 10 and you're still seeing the original value here before I changed it and we could print out values 1 and of course the last value is values to these folks are haven't set yet are going to be of course 0 but I can't set them I can say values 1 equals I don't know 20 values 2 equals 30 and if you try to refer to values 3 you'll get your program will crash with a hand the exception that will tell you that you've done something wrong which is quite handy because C++ would just fail silently but Java is good enough to warn you if you refer to a value that's actually outside the list now some other things you can do with a race so here we've looked at setting values and getting values and another really common thing to do is that you want to iterate through the array that means go through each value in turn and I'm going to show you just one way of doing that here using a for loop and in the next tutorial we'll look at another way of doing it so what you do is you say let's have a loop variable I'll call it I and I'll set it to naught to start with and I want I I want the loop to keep looping until I is equal to the 1 less than the last value in the array so the length the in Java the size of an array can be found by referring to the dot length variable each array no Sun Lanka is in Java and the number of values in the array is stored in this dot length variable and then I'll increment I every time I go around the loop and now in here all I have to do is say that say suss out values I put I in the kind of array index brackets here and then when I run this it's gonna go through each of the values in my array in turn and one last really handy thing that we can do to initialize an array at the same time as declaring it is I can say int array let's call it numbers for example and then instead of allocating the memory and then specifying the values I can specify the values just in a list in curly brackets here let's say for example 5 6 7 but of course you could have hundreds or thousands of values and then once again it's right through them I'll say I less than numbers dot length and notice I is never equal to numbers dot length because numbers dot length will be three and if I refer to numbers three that will be outside the array which is no good because the last one in the array has index of two because we started numbering zero and I'll say here I plus plus again and then I'll do this all again numbers and of course you could change the numbers here as well as just accessing them if you want it if I run this we get five six seven okay so we're going to look at arrays a bit more next time because it's a big subject and we've kind of covered a lot of material in this tutorial we've looked briefly out and value in reference variables and lots of erase stuff and the best thing to do to get your head around this is just to have a play with it yourself and try accessing arrays and creating arrays and changing numbers and arrays and the next time we'll look at string arrays and another way of iterating through an array so join me again if it's for tutorial number eleven and I'll till then happy coding you