hello this is John from Cave of programming. comom and this is a another beginners tutorial on C++ and in this tutorial we're going to create a basic hello world C C++ program and run it so I'm going to explain um a lot of kind of things to you in this tutorial but there's no need to memorize everything I'm saying here I'm just going to kind of uh begin to introduce you to some ideas and the important thing here is after this tutorial to go away and create your own hello world C++ program so hopefully by this point you've got an IDE installed uh preferably Eclipse but another one's good too and you've got a compiler in so and um if if the two are not talking to each other properly then this is the point at which you'll probably find that out and you'll have to go away do some Googling and figure out how to tell your IDE where the compiler is so um let's let's take a look so here's eclipse and I'm going to go to file new C++ project and if you're using like uh another IDE like visual uh C++ or something then you might have to use a different menu option but usually with C++ uh in your IDE you create a project first and that's not a C++ concept that's to do with your IDE it's a way of organizing your files so you create a C++ project in your IDE and then you can add C++ files to it let's give this project a name and I'm going to call it hello world and in Eclipse here I'm going to select hello world C++ project as as this option here and um all idees as far as I know um uh they will provide you with a way of creating a hello world project uh automatically which um is good because believe believe me just getting a basic C++ program running is a huge achievement and when you've done this uh in my opinion it's sort of if anything gets slightly easier from here on in so um I'm going to create Hello World C++ project and I'm just just going to click next here you can go through all these screens if you want let's just step through them or you can just click finish straight away let's go next and uh here we've got uh debug and release targets which I'm going to talk about in a little while and I'm just going to click finish so here's here's the project and uh we can already run this and to actually run it um in some IDs you can just click the Run button straight away in this version of eclipse uh we've got to go to project and build project so when you create a C++ uh project you need to build it building it basically means doing all the steps that are involved uh in taking your text file and turning it into a program that's called building it so and there are several steps involved but your IDE will do those automatically for you so we need to build the project and we can then run it so I can now click run um this Green Run button here in eclipse and we can see it says hello world down here so we've actually run a C++ program and that text is actually coming from here you can see there are two double quotes here and a good thing to do is replace the text between the double quotes with something else else let's say hello the world so between the double quotes it's just ordinary English text you can use most characters there with a few exceptions uh like um if you put a I don't know maybe um like a back slash in you could have problems because there's some special characters that have a special meaning within strings in C++ but uh basically you can put pretty much anything in there maybe even just the back slash actually just to come come to think of it that might be the only problem let's run that again now it's already built Eclipse will let me run this program uh by just clicking the Run button and it asks me if I want to save it so I say yes and it's just going to build it automatically rebuild it and run it and it says hello there world again now if if you're using a different compiler this could look slightly different the return zero could be missing um this might say void instead of int there might be stuff between these two brackets uh iOS stream here that stands for input output stream it might be iostream Doh it's possible that even this might be missing so it might look a little different and uh that's that's a great thing about getting your your IDE to generate it automatically that it's going to generate one appropriate for your compiler and the main program this is this is the um the main function we call it uh is one of the areas in which there's some diversity from compiler to compiler in C++ uh this would probably work with most compilers if not all but um yeah it's not it's not completely short so um so having done that let's let's take a little bit of a look at this and uh as I say that the takehome thing for this tutorial is to get your compiler to generate this um this program and then run it figure out how to do that and if it doesn't work at this point if you get some weird messages uh make sure you've got your compiler installed and then just Google for how to um how to get your IDE to link to that compiler that you've installed and that's going to be a little different depending on what platform you're on and what compiler and IDE you're using for me it was very simple I didn't have to do any configuration as far as I can recall I just um installed the uh the G new C++ compiler on the Mac and I just unzipped Eclipse downloaded it and unzipped it and somehow it found it but that's not necessarily going to be the case on other platforms so I can't give Specific Instructions but it's it's really important to get into the habit of Googling stuff like this so one one really good thing to do is to type this out yourself from scratch and at that point uh if if you're anything like me you will make uh some terrible mistakes and it won't work and you'll have to refer back to you know you can take a copy of this put it in notepad or something and refer back to that copy and then you can see what you've missed out what you've done wrong which is a very very valuable thing to do so let's let's see if we can reconstruct this from scratch um so the first thing that was in there was just a comment and I don't know exactly what it said but in C++ if you type two forward slashes like this these are forward slashes uh then you can type whatever you like on the same line after it so I could put hello world it's just a comment to yourself and people always say uh programmers that uh commenting your code is very very important and it is but um almost every programmer I I've known was lazy about it uh to be honest with you and also sometimes you end up writing comments changing the code and you forget to change a comment and then the comment is nothing but a confusion so uh I I don't know I'm not a big commenter but I try to make comments if I type some code that I'm then going to look at later and think what the hell is that supposed to do it's really helpful to type some comments before so you could have um you know more comments there a basic program you can put them wherever you like as long as they start with these uh forward slashes but don't worry about memorizing this we'll be we'll be looking at it again and you could just miss those out of course as well and the next line was a started with a hash sign and it said then include immediately after the hash sign and then we had a open um and close uh like diamond bracket and these uh uh brackets in C++ they always come in purs pretty much always so whenever you type an opening bracket you should always put the closing bracket in immediately and your IDE will usually do that for you uh and it's if it doesn't it's really important to make sure that you start off with a pair of brackets and then inside these brackets we're going to type I stream lowercase again C++ is case sensitive so you need to get the case of things correct and what this is actually doing um you won't understand most of what's in this basic program uh until you've been doing C++ for a while we're going to have to look at more Concepts before you can understand the the basic hello world program but I'm going to just make some remarks just to begin to get you used to it and what this is actually doing is it's actually an instruction to take a file uh called iostream and actually literally put it in the um this file or like a some copy of this file before compiling it before turning it into an actual program so you don't see that happening it happens behind the scenes but we're actually picking up another file and bunging it in here um almost literally and then we're going to say using name space standard it's actually STD and then semicolon uh and in C+ plus uh a lot of what well what you're typing will consist of statements and a statement has to finish in a semicolon uh not everything is is a complete statement though but basically in C++ you have to get into the Habit as in Java of typing semicolons at the end of most lines so there isn't one here this for some reason is not considered a statement sorry this one but this is and it has to have a semicolon at the end of it and uh often when you start out you you'll just miss out the semicolons by mistake but um gradually you get used to putting them in um because you need them and then following that we had int and uh uh main in is uh a type declaration we'll talk about that very shortly main is the name of a function a sub routine and then we're going to have two round brackets so again I put the opening and closing one in at the same time even if you're going to type stuff between the brackets put the closing one in where you have the opening one sorry put the immediately put the closing bracket in after typing the opening one and then again another illustration of this is we now have two curly brackets so an open curly bracket and if I hit return Eclipse here is pulling the closing curly bracket in for me uh immediately and if it doesn't if you're using an IDE that doesn't do that well probably get another IDE but uh type it yourself always have pairs of brackets then the next line was like this it said see out uh which is technically an object but again we'll get on to that and then two um this is actually called these to um here although it's the same symbol AS this here this is not cons these are not considered brackets the these are what we call an operator this is actually the um in the insertion operator I think it's called or sometimes put two I just like to call them Chevrons because they look like Chevrons uh so it's the um insertion operator and uh after that two double quotes and again when you when you type type A a double quote or a single quote put the other closing quote in immediately CU they they almost always have to be in purs and um here we can type some text whatever we like so we'll put hello world hello world and then after that another insertion operator and then endler and which stands for end line and then a semicolon uh so you can you think of this these um insertion operators you think of them inserting this stuff kind of into this object the syntax of this thing here C out is uh is a is a little bit weird so um again this this isn't something that uh as a programmer you'd really even think about that much you just get used to typing this with practice with doing it over and over again so you don't have to worry about it too much and this end L it's actually um creating um a blank line at the end of hello world so if we output more text after this we we get more lines of stuff and then finally after that I'm going to type return Z semicolon so it's another statement ending in a semicolon and the zero is actually a code that's uh we say it's returned in this case to your operating system and zero by convention means everything's okay so uh it's not an error code um like we could say one two or three we could say that those are error codes you know in our program but it's a zero to say everything's fine and then uh let's run this again so I'll click the Run button uh yeah I want to save it and it says hello world so this is a complete C++ program you can experiment with this a little bit if you want but we're going to look at that more in um in a future tutorial and probably at the moment any change you make will probably break it because at the moment if you if you're new to this you don't know what you're doing and that's normal it's also normal to have great difficulty remembering all this because when you first see it it just looks like nothing on Earth um and that's why I'm I'm taking it so slowly here so yeah just just try to get this try to get your IDE to generate this and if you can be bothered type it out yourself and see where you go wrong because that's very useful to do um one one last thing that I want to do in this tutorial is just we're just going to look a little bit at the structure of the folders and the files uh that the IDE has actually generated for us and again you don't need to memorize this I'm just kind of mentioning it to begin to get you familiar with it if we expand hello world here um we can see there's a debug folder and um by default most compilers will generate a um a debug actually I'm not sure if it is the default but certainly in this case we developed a debug version of the program so the program we've created is not intended to be given to people it's intended for developing programs and it's got special symbols in it that can help us uh find the bugs and the program but what we can do is we can go to um let's see project build configurations and I go to set active and release and again this differs depending on your IDE but usually you can find that pretty simple way maybe in visual C++ it's just a drop down box on a toolbar or something I I don't know um cuz I haven't used it recently but I'm going to go to build configuration set Active Release and we say here that we've configured it to build a release Target the Target is the program we're creating so we're talking about creating a release Target that we can actually release to people give to people and I click let's click project build project we've now got another folder called release and if I expand that uh this is actually our program and I can run the release version as well and it's says hello World um let's let's now um oh yeah so here's a source folder with hello world. CPP let's just go to the console and take a look at this so I'm going to show you console instructions um while here on my Mac which is uh a Unix like system very very common to jeta to create C++ in a Unix like system for example Unix or the or the Mac OS or uh Linux but um if you're using so if you're using Windows uh then the commands you'd have to type would be a bit different here and I'm not going to get into a tutorial on um console commands but I'll explain a little bit and uh yeah is if you don't know how to use a console for your system it is worth learning uh because that's probably something that you will need later on as a if you're going to be a C++ developer uh so let's go to um let's go to the terminal here in the mac and in Windows it's called um the I think the windows console and you you used to be able to start it by going to the start menu and then there's a in one of the submenus there was something called command CMD or you could go run command CMD uh but anyway so uh I'm just going to go to this program here I'm going to click on the program folder root folder go and right click and go to properties and and uh resource here and there you can see where the the Project's actually created so I'll just copy that copy this path and I'm going to go to the terminal and I'm going to type CD and in double quotes let's paste in that path so this will look a little different on Windows but on Windows it's also CD I think change directory and hit return and then I'm going to do LS on Windows it will be dur uh Di and here we can see the contents of my project folder if I do LS Source uh that's SLC um we call this source code the stuff we're actually typing and I can see what's in it probably dare di Source would work on Windows I think and um or you might have to CD into the actual Source folder I don't know it also works but here here's my actual code and uh yeah in a Unix system I can do cat type h and um uh I'm using the bash shell here so I can type um tab to complete the file name but don't worry about these details um I just want to kind of begin to get you familiar with this and so there's my program let's go back CD CD space dot dot I think on Windows there's no space after CD but anyway so we're in the root folder and let's take a look at the release folder so I'll say CD space release and um LS and we can see in here uh we've got this is actually the program it's not really good to have spaces in the name of a program so if you release that you might want to rename it to get rid of the spaces but I can run it uh on Windows you probably just type the name of it possibly in double quotes if it's got spaces um on on Unix type systems we need slash and hello world usually and it's actually yes it's prefix the space with a backslash to escape it but anyway and if I hit return there it actually runs so you um I I probably could just copy this program here this binary file and give it to someone else who has a Mac and they could probably just run it but it's normal with C++ to create installers uh that put all the right files that you need in the right place and this program it's it's going to be using some shared libraries like it's going to be using Code uh that are in libraries located Elsewhere on my system and uh the the end user might not have those libraries I don't know so uh for that reason it's it's common to um to create installers that make sure everything's in the right place but installers are outside the scope of of this this tutorial and that's a separate thing unfortunately that you have to learn if you want to get seriously into Distributing C++ programs to um to end users yourself uh We've also gotten here um a make file and again I'm probably not going to go into make files uh our our IDE has generated it automatically for us and we if we look at it it looks quite cryptic first uh it it's possible to have a whole career in C++ without understanding mate files but on the other hand many companies use make files to build C++ programs and um so it's probably worth learning if you're going to get seriously into this as a career but uh if you just want to write programs yourself you can probably just let your IDE deal with it and and not worry about it and we've also got um that so the structure the exact structure of these folders depends on your IDE but let's let's take a look at this Source folder here if we go into SLC there's like a sub Source folder within uh this release folder I don't really know why um and that that's probably going to be different if you're using a different compiler or IDE uh but one thing to notice is that there's probably going to be somewhere a hello world. that's called an object file it's a it's a binary file um but later on we say that we link it we link it with the appropriate libraries to create the final program and that's just something that I wanted to make you aware of at the moment okay so so that's it for this tutorial uh don't feel intimidated by all those details uh you can count this as a you can count your progress here as being totally successful when you can just get your IDE to generate a program and run it like I say type it in as well if if you can be bothered to but first get your ID to generate it and run it and we're going to go over all the important Concepts uh again later on so that's it from me this time and uh until next time happy coding