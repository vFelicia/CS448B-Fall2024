hello this is John from K programming. comom in this tutorial we're going to start looking at pointers in C++ this is a language feature that is um that you don't find in too many other computer languages and uh it's it sort of baffles beginners but we're going to take it slowly here we're going to start looking at pointers in this tutorial and we're going to move on uh in subsequent tutorials and look at more stuff that you can do with pointers so let's let's declare an INT here I'm going to say int I'll just call it n value the N just standing for integer and uh I'll assign it a value let's say eight so here we've you can think of this as being like a bucket that we've put a value into it's uh We've allocated some memory and the amount of memory we've allocated is controlled by the fact that we've got an INT here and uh of course we can change that um we can set the value to something else and so on and we can output it let's try that um n let's say int value and n value oops need put to operator there let's just check that this works so um yes I want to save it and now it says in value 9 uh now you can actually you can actually get a you can actually create a variable that stores the the address of this um int um rather than the value itself so to do that I can typee int and I'm going to type an asterisk here like that uh so we read this as uh int pointer or pointer to an INT int pointer is kind of trips off the tongue faster and because this is is a pointer I'm going to prefix it with a p you don't have to do this but um it just helps make it clearer that it is a pointer let's say p i could put n for in as well if I want this is just stuff just to help me remember what it is so PN value now I can set that to point to the address of this int by typing equals and a um Ampersand which uh you can read as address and NV value so I'm saying here um pointer to an INT equals the address of n value so what's actually stored in here here is is not an INT it's not this value it's the address the memory address of this bit of memory here this int and we can output that as well let's do that let's say um here pointer to int address let's say address now let's output this PN value here so if we copy that paste it in there save this and run it then we get a memory address in hexad decimal so this is just a number the ox just says it's hex aimal as we saw in a previous tutorial this is a number in HEX and this is the memory location of that int there so what what can we actually do with this well these are very useful in C++ they have a lot of different uses but one thing we can do is get back the or int so let's paste in another C out here like this and say int value via pointer now if we just put the actual pointer variable name in here of course we're going to get the address again what we can do is something called dereferencing The Pointer and to do that we just type an as risk in front of it and this gives us the value that the pointer refers to so let's try this and when it runs we get eight so we've got several bits of um notation syntax here here we're using a star saying inar or like another way to write it which um maybe is nicer but depends on your preferences relies to put the asteris directly before the variable that's that also so works so we're using the star here to that this is the type of this variable so the type of this variable is we read it from uh from right to left the type of this variable is pointer to an INT and then we use the uh Ampersand here to get the address of a value in this case an integer value and then here if we want to Output the value that that the pointer points to the actual um value at the memory address which is contained in the pointer we use an asteris just before it to dreference it so this gets us the actual value that the pointer points to it gets us the value stored in the memory address um and we've stored that memory address in the pointer um it's uh the easiest way to understand this is just to practice using it because uh I find you can read explanations of this and um it's really hard to remember which asterisk and which and goes where it's only when you use it you type it out that you really start to get a feel for it let's look at one thing in this tutorial that you can do with this that's um sometimes quite useful let's declare a function up here so I'm going to say void and we'll call it um let's call it um I really don't know actually I'll call it manipulate and let's make that take an INT so int value and what manipulate will do is we'll just say value equals 10 like that and let's do a c out value of int in manipulate and let's output that value there endler so um I'll output here let's output some just text just to separate this stuff out a bit and then I'm going to declare let's have another in in here let's say in fact let's let's maybe use a double just to demonstrate this with some something else let's say double value and then we can say value is 10.0 value double in manipulate so I'll declare a value value here a double let's say um let's say d d value that'll do set it equal to 1 2 3.4 and then let's output this value so let's say uh D value I'll put a one before this one D value and output the double value there then let's call manipulate manipulate and pass it that double value D value like that and then let's output that again and save D value again so we're declaring this double here and we're setting the value of it we're outputting that value so we expect to see1 2 3.4 we're calling manipul we're passing this double in and that actually sets the value to something else and it outputs what that something else is and then we're outputting the double value back in the main function again after manipulate and if we run this now we're going to get in main uh so the double value starts off at 1 1 2 3.4 in manipulate we change it to 10 and then output it so maybe we can make this actually a little bit clearer by putting another C out in here let's say here two three and I'll make this four let's run this so when we run manipulate to start with the values 1.2 1 2 3.4 in manipulate we pass that value in comes in here and we output it so again at two it's 1 1 2 3.4 then we change it manipulate 10 and we output it again and then it's 10 and when we output it after manipulate in the main function it's 1 2 3.4 the reason for that is when you pass a value like this into a function um it's it's like pouring pouring data from one bucket to another we're actually copying this we're we're copying the value um in this double here copying it into this value and in this fun we're changing this value we're not changing this we're just changing something that happens to contain a copy of that value so this here is a new double and when we call manipulate and pass that value in we're just taking this value putting it into this copy and changing the copy so that when we get back into the main function when after this manipulate returns our our our original double still has its original value the fact that we check we changed a copy of it here doesn't make any difference to it now usually that's what you want and it it makes things simpler to have functions behave like this but sometimes you want a function to be able to literally change a value and uh there's another way of doing this in C++ called reference variables which we'll look at but um one thing you can do is to use a pointer let's change manipulate so that instead of taking a double value it takes a pointer to a double so I'm going to type here an asterisk so now the type that we pass in here is pointer to a double and if we compile that it's not going to compile um because now we have to pass in not the value itself but the address of the value because pointers contain addresses of values literally memory addresses where those values are stored so we need to type here a um an ampersand to get the address of this so now um we're passing that in and now we don't want to assign it a value 10 cuz this will contain the address of this if we sign out a value 10 we're saying okay change this memory address to 10 which is pointing at some random bit of memory and we don't want that here we want D reference value so I'm going to put an asterisk there and that says change this says change the value that this pointer points at so actually go to that bit of memory and change it now um let's I think we can try running that let's try running this so now we see that um I've got valuable doubling manipulate we've got the memory address let's change this to dreference the pointer as well I I should have probably called it P value really just to emphasize that it's a pointer I think that'll make it a little bit clearer let's do that and now let's save it and run it so now what's happening is we get the double we output its value so 1 2 3.4 we pass the address of it to manipulate that stores it in a pointer variable it stores the address of our original double in this pointer variable we output it we output not the address but the value at that address which is 1 2 3.4 we change it to 10.0 by dereferencing the pointer and changing whatever value is stored at that memory address we output it again we output the D reference pointer so the value at that address and it's of course it's 10 now and then back in the main function we output the double value and now it has changed because we actually went to the address and change the value so in this version of the program now there's only one double we don't have a copy of this double um what this is is the address of the double there's only one double and this pointer points to that double it has the address of that double and we can use it to change the original value stored at that address uh so that's it for this tutorial and um I'd highly highly recommend uh that you practice this yourself so just do what I've done here uh first try typing out a value whatever you like could um you know maybe try an inter a double that's probably simplest and um then try declaring a pointer to that value and um like this and try using a pointer to change the value so of course we could change the value here using the pointer as well you know we could say um star PN value equals some int like that try doing that sort of thing D referencing the pointer and then declare a function that um takes a pointer as its parameter and try passing your U the address of one of your values in your function to that to that um function try changing it in the function and see what you get afterwards so try to do all this and um try to do as much from memory as possible but you you're almost certainly going to have to refer back to this uh to remember it but try to look at it as little as possible and see how far you can get you'll probably find if this is new to you that you'll make a lot of mistakes in getting this to work you probably um you know it's it's not too difficult to actually do this bit um but you probably need to refer to this a few times before you can do it from memory and then this bit when you actually pass the value to a function and that function actually changes the value by using a pointer that's a bit tricky as well and you'll probably make some mistakes first time you do it but um it's it's very very good if you can get to the point where you can type out this code and you can create functions that take pointers and change the value of the variable using that pointer by dereferencing it from memory because once you've done that you've really got not such a bad um uh feeling for pointers I think so um that's all we're going to do in this tutorial and we'll look at pointers more in the next tutorial but um yeah it's it's good to practice this because we're going to get we're going to do more stuff with pointers in subsequent tutorials and it's going to get more complicated but not much more so um so don't worry and uh once you've understood this you can really kind of give yourself a pat on the backat because this is something that defeats a lot of beginners a lot of people know C++ uh to a point but pointers is the point at which they sort of give up so it's really worth persisting with this and I'd say don't agonize about it too much the thing is to um get your fingers to kind of remember it remember what you have to type where in order to get this to work and then the understanding sort of tends to come later on so until next time happy coding