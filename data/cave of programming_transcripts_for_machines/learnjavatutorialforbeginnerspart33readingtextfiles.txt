hello this is John from Cave of programming. comom and in this tutorial we're going to look at reading text files in Java and in fact I'm going to show you the simplest possible way to read a text file line by line in this tutorial and in a future tutorial we'll look at um a more complex but perhaps more flexible way of doing this so um I'm first the first thing I need is some file that I want to read and I've created this file here and it's got a bunch of um lines in it just random text basically and I need to find that file on my disk for start so that I know to tell Java where to read it from and I've saved this file on my desktop so if I look at my desktop here here's my file and I'm just going to rightclick it and on Windows you go to properties and I think on the Mac there's a info get info option or something like that and I'm just going to copy this path to the file here and now in Eclipse I'm going to create a string string and I'll call it file name and I'll set that equal to the path of this file followed by the name of the file which is example. text like that now if you're on Windows here you'll have a little problem at this stage whoops because um the uh within double quotes in Java if you have a slash a backs slash like that this is called then uh a backs slash followed by a letter indicates a special um often nonprinting character within double quotes with back sln means new line so um this is um complaining because it thinks that this for example that back SL e should be some kind of special control sequence and to get around that you can either backslash The backslashes by saying uh by just having two backs slashes where you'd normally use one just put an extra back slash in and then this will be interpreted um as if it really was a backs slash or the other option which is um also a good option if you're not working on Windows but another system that uses forward slashes is just use forward slashes instead of back slashes there and that will work just fine on Windows as well or at least it does on my system so let's replace all these back slashes with forward slashes and um now the next step here is to create a file object which will actually be a kind of java representation of your file so I'll say file let's call it uh text file equals new file and I'll pass it the file name that I want it to work with like this and I'll add the input with control shift o and just save that and once you've got your file object um now the kind of more traditional way of reading a file in object uh reading a file in Java involves uh classes like buffer um reader and file reader and that sort of thing but a slightly simpler way to do it is to use the scanner class so I'm going to say scanner let's call this I'll just call it in actually equals new scanner and I'll pass that the file object that I want to read and let's add the input for Scanner with control shift o and this will give me a error because it throws an exception and if I just click this I could surround it with TR catch and I could put all my code in this try and then if this file not found exception is thrown here I can put sis out can't find file plus file name something like that can't file not found or something like that but instead of doing that here um just to keep this code a bit cleaner I'm just going to throw this declaration I'm going to throw the um exception out of my main method so if I do that if it can't find the file my main program will just kind of stop with a file not found exception um and just to demonstrate that let's just change the name of the file and just run it and here I've got a file not found exception being thrown from my main program okay so um I change that back and then once when you open the scanner by doing this um you should always remember to close it and that's what that warning there is about it says uh the value of the local variable oh is not used that's one thing but then resourcly in is never closed so um I'm just going to close the scanner I'm going to say in. close and I'm saying in because that's what I happen to call my scanner and that will close the underlying file on your system and now we can read this line by line and you can read data from your file using um a variety of methods from the scanner object if I type in. next here you can read you can read integers and um floats and all kinds of things from your file but what I'm going to do here for the moment is just have a loop that will read the whole file line by line and I'm going to say while in which is my scanner has next line so in other words while there isn't another line to read then I'm going to say String Line equals in do next line next line like that and uh no no matter what you're planning to do with this text from your file it's a good idea at this point to just do a sis out and output the line to check that your file actually can be read so I'm just going to run this and here in the console down here you can see the contents of my file now if you work with if you want to work with the other methods of scanner and read integers from your file for example a common thing to do would be like the first line in your file um would be let's say a number um like for example it might be three and that might indicate that you have to read three lines from your file let's just save this and if you have something like that you want to read the number and then you want to use a for Loop to read three lines so here instead of while you'd have four and um you'd read next line three times to read the next three lines for example and the next three lines could be um you know they could be the names of um books or something like that you know some kind of data but let's suppose that we want to read the number just for the moment and um you would do that by saying int value equals and your scanner variable and thenex int and now if I do us this out I can say uh red value and let's output value here so if I run that here is my value as an integer that I read from the top of the file and then I'm going on to read all the lines from the file now there's a there's a little complication here which um you you couldn't easily notice here but notice that there's a blank line here and the the problem will become more apparent if I number the lines so let's say int count and I'll say count equals 2 because um the first line in my file here um the first line that I'm reading with next line is going to be this the second line here's the first line here's the second line and I'm reading this integer and then in my while loop I'm reading the lines one by one so this is line two and let's just say here let's say uh Red Line um in fact let's just give it a number let's say count plus and I'll have a colon and then a plus so I'm just numbering the lines here and I'll increment count every time I read line and now if I if I run this you can see if you look at the console here you read we read the number successfully and we read the rest of the line successfully but the problem is that we read apparently a blank line in between the two and yet if I look at my file there isn't a blank line there not at that point anyway and the reason for that is that um there's actually an invisible character here which next int doesn't read and next line does read and uh that character is um well it depends on your system but it's um You can call it the new line character and on Windows actually it consists of two invisible characters two bites in your um in their underlying code the underlying bites that this file is made up of and in Windows those characters are called the courage return and Line Feed and that's because um on old style typewriters um there was like a movable Carriage that move backwards and forwards to print out your text and when you got to the end of of the of the line you'd physically move the carriage back to the left so that was called a carriage return moving the carriage back to the left and then you'd turn it to scroll the line and that was called a Line Feed and now in Windows we have uh invisible characters the carriage return and Line Feed and when you call next in um whether you've got two invisible characters or one this will not read it it only reads purely the actual integer itself so it's reading this integer but it's not reading the invisible character that actually causes the new line to appear here um so what we need to do to make this work is I just need to read that character and discard it now I need to say after reading an integer I need to say in dot next line and that will read my um carriage return and Line Feed it will read my new line Carri and now if I run this um everything looks great and I've got red value three and then I've got the the lines being numbered starting at line two uh I think there's just one more thing that I want to show you in this tutorial and that's um sometimes you don't want to read a file from an absolute path sometimes you want to put like a file actually in your project folder and you can do that so if I um go to uh my desktop here where I created the file I can drag it into my project folder here and say copy files and let's just maximize Eclipse again and it's important that this file should be in the root directory of your project because that's actually the working directory of your Java program when you click the Run button here and that's where it will read files from if you don't specify an absolute path and I'm going to just comment this out here and let's just copy that and instead of the full path I'll just have the name of the file and it will now read from here so uh just to prove it's reading this file let's double click this open it in eclipse and let's add zebra on the bottom here so I'll change it a little bit and now if I run this it will read from the working directory and you can see there is zebra line 11 down there okay so that's it for this tutorial and um this code is going to be on kof programming. comom and you can also find uh more courses on um that's a free course on multithreading and uh stuff on Java Collections and Android programming uh web Java web programming and also a big course on swing programming and there's some paid some of these are paid courses but uh most of them have um free videos that you can also see for free in any case even if they are paid courses so take a look at uh www.of programming. and until next time happy coding