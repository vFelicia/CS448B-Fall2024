hello this is John from cave of programming calm and in this tutorial we're going to look at anonymous classes in Java so anonymous classes are basically a way of either extending an existing class or implementing an interface in such a way that you can just do it kind of one time there's a oneshot thing which is which is often quite useful so let's take a look at a couple of examples here and I'm going to create the class here to act as a parent class and I'll call it machine and let's give that a method public for you to start and I'll just put this out in there and let's say starting machine so just a really simple class with one method not to create a new object from that class of course I say machine machine one let's say and then this bit is just the variable declarations it's not actually creating a object and I might point this reference variable here at an object a new object by saying equals a new machine and so here we've got an actual object an actual instance of this class a sort of an actual thing that's been created from this blueprint which among other things contains this method so I can now run start by saying machine one not start and of course if I run that we'll see after eclipse has had a bit of a thing down in the console hopefully we'll see starting machine and here we go now the way an anonymous class works is let's say I want to override this start method a machine of course the normal way to do it is you create a class let's say camera and you say the extends machine and you implement the start method and they're overriding the one in the parent class but I can also open a curly parenthesis here and put the closing one down there this looks a bit surprising if you haven't seen it before and in this space here I can actually override methods so I can say for example public and southern override annotation just to double check that I am overriding the write method I could say here override public for it start or I could use a shortcut shortcut in Eclipse here and just rightclick and go to source override implement methods that would also work and then here I can supply a new implementation so I can say and say camera snapping so now if I run this if Sam is running the start method in machine but I've overridden that here and if you look at this object the one that Sam I'm creating we're doing new here you could ask like well what is the class of that object it's not machine ok that the class of the variable the type of this variable is machine but this thing is actually a child class of machine it's not machine itself because it doesn't have the machine implementation this start method as a overridden implementation as though you've done extends on the class so actually the type of this object it's some child class up machine that doesn't actually have a name and that's why it's called an anonymous class with anonymous classes there's no there's no way that you can create a new object from this class here but it's as good as a oneshot thing if you just want one example of some classes a little bit different to an existing class you can use an anonymous class syntax like this let's just take a look at one more example here that's supposing I have an interface let's say interface what should we have interface plant let's say and let's say that the plant interface I could give it lots of methods but I'll just give it one it's an example so I'll give it a public void grow and the X it's an interface of course we don't have any code so there's no Cali parentheses we just have a semicolon there now to to implement this interface iCard create a class and say that it implements plant and then I'd be forced to add a method to that class with this with this header but another way of doing this is to use again an anonymous class syntax so I could say here plants plants 1 equals new plant now this isn't going to work in itself it's going to give me an error saying cannot instantiate the type plan instantiate means create an object from the class of the interface and you can't instantiate interfaces because there's no code there to actually put into an object so this syntax for an interface it's not legal in itself it's just as if I'm kind of pretending here that planteth a is a class but it isn't and so this won't actually work but again what I can do is open a curly parenthesis and put a closing 1 in there followed by a semicolon at the end and now in here actually the quickest way to do this is to click on this error and add unimplemented methods here and now I can implement the grow method of plant right here with this anonymous class syntax I don't need this override annotation if I here it seems strange that we say override to implement the method in an interface it is a sort of overrides I suppose but anyway leaving that side let's get rid of at least the blank lines and this override annotation is not necessary I could delete it and explain here sis our plants growing and now I can declare a variable of this type the type of the interface which I already have done here and then I can say plant one dot grow like that so I can call a method of this anonymous class which actually implements this interface let's say grow there and once again if I just run that now save it and run it then it's going to say plant growing so that's it for this tutorial and in the future we're going to look perhaps some more examples of this because often what you do is you declare an anonymous class while you actually pass it to a method at the same time and that's often used for the kind of the kind of listener event pattern which is a notices is tremendously confusing and difficult for beginners in Java just because there are several different concepts all in one kind of just in a few lines and this is one of the concepts that you'll need to understand how event kind of listeners in GUI programming or often implemented and even if you're not doing any GUI that's graphical user interface programming you can you can do all sorts of things with this technique which are going to show you in huge tutorials thanks again for all the fantastic comments that people have left on YouTube and on cave of programming com it really makes it worthwhile creating these for the so many fans and discos going to be on K for programming calm and I hope you'll join me again next time until then you