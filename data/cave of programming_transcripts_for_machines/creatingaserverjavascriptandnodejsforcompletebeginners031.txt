hello this is john from cave of programming.com this is another video in our course on node.js and javascript for beginners and in this video we're going to look at creating a an http server with node.js and javascript so so far in the course we've looked at basic building blocks of programs essentially we've looked at things like loops and if statements and functions what we're going to do here is kind of jump ahead of ourselves a bit because i know that you're not learning javascript just so that you can write command line programs that say hello and that sort of thing so we're going to write a a server program that's actually going to be able to respond to web browser requests in other words we're going the output of our program is going to appear in a web browser instead of on the console and to do that we have to use various constructs that you haven't seen yet um but what i'm going to do is i'll try to explain a bit as i go along you're not going to fully understand it though yet if you follow if you follow the course from the beginning and you don't have other experience but as we progress through the course you will gradually understand um what we're actually doing here so um don't stress out about my explanations here they're just to kind of begin to introduce you to some new ideas but the point of this really is to write a little server app so you're going to want to either while you're watching this video or afterwards try this out for yourself type it out it's really important and get it working and experiment with it a little bit that's the only way that your fluency will increase okay so i've created a empty file called server.js and i'm going to write you strict at the top as usual now javascript code for node.js it can be packaged up into things we call modules and there are a bunch of standard modules that we can use in node.js javascript so if i go to the internet here and i search for something like node.js http we can find there's this node module and that's what we're going to be using here so there's a load of documentation here and in fact if you search for something like node.js create server then you can find example code for what we're going to do but what i'm going to do is i'm going to write this in a little bit of a kind of more verbose way than what you would normally see because it's going to be easier to explain it that way so essentially i mean the word server in software development is used in at least two different ways it's often used to mean an actual computer that is serving like web content of some sort so serving web pages or whatever so it's the actual computer that does that but it's also used to mean a piece of software that can serve content of some kind so in this case of course we're talking about a piece of software we're creating a little server program that can accept requests we call them from a browser and send back content that is displayed in the browser so the next thing that we're going to write after use strict is i'm going to declare a variable and i'm going to call it http http is actually what we call a protocol it's a specification for how data can be transferred one way of transferring data between let's say a browser and a server program in this case and the http module which is what we're using is named after that protocol so we're going to be using a standard builtin module in node.js that can help us implement a server which works via the http protocol the http specification for transferring data that stands for hypertext transfer protocol if i remember correctly so let's say now this variable could be called anything but i'm calling it http because that's the name of the module that it's going to refer to let's write let http equal require which we haven't seen yet but we'll look at later and round brackets on a semicolon and in there we're going to write well we're going to pass a string http so this basically enables us to get a reference to the http module now we can use it to create a server so i need another variable which it makes sense to call server in this case but again we could call it anything let's write let server equal http dot create server round brackets and a semicolon so we're calling a function here of the http http module now we need to pass a function to create server and so far in this course we've looked at passing strings and numbers to functions we haven't looked at passing functions to functions but sometimes you want to do that so let's say that you implemented a button that you could click somehow on your screen you want to pass code to that button which will be executed when the button is clicked so in that situation you want to pass a function to a function you want to pass a function containing code that you've written that will be executed when a button's clicked to the function to sorry to the button to some function attached to the button so that the button can then call your code when it's clicked and we're kind of doing a similar thing here so we've got a server and we want to tell it what code to run when someone requests data from the server by going to the appropriate url in a browser so we have to create a function now that will be called when a request is made from a browser to our little server program here so i'm going to use a function definition style here and write function let's call it request callback we could call it anything and that has to accept two arguments so we need two parameters here two arguments meaning two things are going to get passed to it which have to then appear in our parameters i'm gonna call the parameters again we can make up any name for them that we want but we should call them something appropriate so i'm gonna call them request and response and we're going to be using the response parameter here so we pass a reference to this request callback function to create server and then create server can actually call this function whenever we go to a url in our browser for the moment let's just put console.log hello in there hello and we won't do anything else now we can start the server up so let's write server dot listen round brackets and a semicolon again we're calling a function here that's attached to this server object so we need to specify a port to listen to so your computer has a bunch of different ports and um each one of them can be used for transferring data between a browser and a server app like this so we just need to pick um a port that's free and they're all numbered so let's pick 8 000 because that's usually free most of them are usually free but i'll just arbitrarily pick 8 000 here and we could also output some text here like console.log and let's say listening dot dot dot so this this function listen is gonna it's gonna return immediately in other words we're gonna after we call this we're gonna carry on executing stuff in our program but it's going to cause our server software to listen in the background essentially it's going to go into a loop that's going to listen for web requests from browsers and respond to them by calling this function now i know if you are a beginner this is all sounding complicated but all i'm trying to do here is kind of um give you an idea about what's going on and sort of get get you used to some ideas begin to get used to them but we're going to be analyzing um all this kind of stuff later on in the course in a lot more depth so let's now run this program i'm going to write node and then my script is server.js and we run it and it says listening so it's running and you notice i haven't got my prompt back to actually stop this program i have to do control c and then it stops let's run it again so the program's running and if we go to a web browser now let's try it and i need to go so unless that program is listening on port 8000 so i need to type local local host which is essentially the name of my computer here colon eight thousand so eight and three naughts like this wait it's gone there we go like this if you can see that localhost colon 8000 let's run it so nothing's nothing's happening but if we go back to my my web browser sort of hanging as though it's loading a page yours might respond differently somehow i don't know but we have actually made a request to our program if we look at the terminal it's actually output hello now what we really want to do is send some data to the browser rather than just having it trying to get data and just hanging like this so let's stop the program so let's go back here do control c how do we send data to the browser well we use our response object remember when we make a request in the browser we call it an http get request so it's like a request to get data from this server program when we do that this function will get called and the response object here allows us to respond to that request so what i can do is i can write response dot write and let's output hello world server or something semicolon and after that let's write let's do response dot end round brackets and this basically is going to tell our browser that that's it that's all the data that we're planning to send so now let's try this so i'm going to start up my program again node server.js go to a browser and go to localhost 8000 and now it says hello world server hopefully it works for you i think actually um chrome is what i'm using here i i it hides the sort of full url from me i think it's actually http colon slash slash localhost colon8000 but it only shows the localhost 8000 bit of it in its version of chrome so what we've done here is we've written a program which if we go to a browser and we go to that url localhost colon 8000 that's the port 8000 that actually makes a request to the server program we've written which is listing on that port and our server invokes this function to send data back to the browser and it just sends back some text which is usually going to be displayed in your browser it's possible another browser might ask you if you want to download a file and you're going to end up with a text file that says hello world server in it but i think most browsers these days will just display text data that are sent sent to them like this and certainly chrome does okay we'll leave it there for this video the thing to do with this if you're new to this is type it out for yourself and get it working hopefully you can get this working and experiment with it a bit if you encounter any error messages that you don't understand try to pick out the most important bits of those error messages paste them into the internet and see what the internet says about them but um you know you might need to add node.js onto the end of them or something as well but you should be able to get that working and it's really important to type it out for yourself you can see my code on github.com caver programming in my node.js public repository but it's no use copying and pasting this you've got to type it out to really begin to get familiar with it and get the thing working let's stop that with ctrl c again okay so we'll leave it there for this video and until next time happy coding