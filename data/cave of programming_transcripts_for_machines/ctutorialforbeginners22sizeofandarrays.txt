hello this is John from cave of programming calm in this tutorial we're going to take a bit of a deeper look at the size of operator which we've seen before but we're going to see like an interesting use of that so just just to remind you if we create a variable like this let's say int value equals 34 we can do this see out size of volume handler and if we run this program might have to build it let's go to project build project and let's run that so we get the number of bytes and each byte is eight bits remember that this this variable takes up and we can also do sizeof int so let's try that and that does exactly the same gives us the size of this type this is just a unused variable warning kick so I'm not using value now in my program size of is actually an operator like the put to operator or like plus symbol it looks like a method sorry a function call or a method yeah it looks like a function call and we're going to see functions and subroutines later on but it's nice actually an operator so one one thing that I wanted to show you here was that you can use that this with a raise let's say we've got an array and let's get rid of this and let's say int values equals let's just have an array of values here so I'm going to say and put some values in status semicolon first and just some random values we can iterate over that with a for loop so we can say int I equals naught I less than this this is going to be less than four because there are four values here I plus plus and we can say see out and values and I let's just output an endless there or in fact we could just pop flush and let's just have some space there to get it all on one line and I put an end ler after that just to well just to flush the buffer but actually it's not necessary here because when the program ends that buffers going to be flushed anyway I imagine so got some problem we flushed her I don't quite know what I did wrong I've done something wrong let's just say this and try building it have I done something really stupid oh it's complaining that scale object values requires one element in initializer I forgot to put the brackets on your right here very silly there we go sorry about that so let's go to project build project and yes now we can run this so we get four seven three four now instead of saying less than I we can use size off here to find out how many elements are in the array let's do size of values and so size size of values endler now if we if we run this then we get sixteen so this takes up sixteen bytes because each int is four bytes and we've got four inch and we can also do see out size of int because we've got into in our array so we're interested in that and if we run this we see that we get of course four as we just seen so if we divide the total size of the array by the size of the elements that are in it then we're going to get the number of elements in the array so instead of having four here we could say size of values divided by size of int so divided by this for its lifetime in C++ and most programming languages and if we run that now then it works exactly as before I'm sure what the warning is here by saying we're comparing signed an unsigned integer expressions that's that's because sizeof is actually returning a eight unsigned int and here we're comparing this this is a signed in by default with an unsigned value here so what we can do to fix that warning is just put in unsigned in there and if we build that now the warning will go away and it works just as before so yeah not all compilers give you that warning that there's nothing really wrong with comparing assigned an unsigned value as far as I can see but I got like warning here so we fixed it unsigned your recall means just that the value can't be negative so an unsigned int can't be negative okay that's it for this tutorial and it's worth practicing this just declare an array if you really want to challenge make it a 2d array and instead of hardcoding the actual index here the actual sorry the number of elements in the array use size off to get it in your loops so 2d array you can do this as well but it's going to be a bit challenging you can have a goal app if you're feeling ambitious otherwise try a 1d array so that's it for this tutorial and until next time happy coding you you