hello this is John from cave of programming calm and this is a tutorial on the static keyword in Java so I'm in eclipse and I've got my main program here and I'm gonna start by creating a class appear which I'll call thing and I'm gonna give thing to member variables I'll make them both public and let's give this a name variable of type string and I'll also give it a another variable of type string called description now description I'm going to make static so before the string type here I'm going to put the keyword static and we'll have a look at what the difference is between this and this so if I and by the way I should mention that usually if you have member variables most of the time you declare in private or protect it which we will look at later in this series of tutorials but just for this tutorial I'm going to main in public to keep things simpler so I'm going to declare a couple of thing objects here so let's have thing 1 equals new thing and I'll have a thing thing 2 equals new thing now with the name variable here each thing object has its own copy of name so I can set thing 1 dot name equal to Bob and thing 2 dot name equal to Sue and of course I can display those will assist out so that say thing one dot thing one name and this control space thing to dot name and of course if I run this it's gonna say Bob and Sue the difference with the static member variable here is that each object does not get its own copy static member variables also known as class variables belong to the class and there is only one copy because there's only one class so if I want to access description I access if I had a class I type the class name description equals I am a thing and I can do this out on that in the same way thing dot description so variables like this which aren't static are called instance variables because every separate instance for example our or in other words and every separate object of the type thing gets its own copy whereas static variables like this are often known as class variables because they are associated with the class so if I run this you'll see down here it says I am a thing and let's also have a look static methods versus instance methods because if I create here a public show name let's say I can do in here sysout name and so I'm just start putting the name using this instance method and I can replace my sis outs down here with a call to thing one show name and I should put the return type here for it and thing to dot show name like this so if I run that it's just going to do the same as before I'm just calling these methods to output the name for each object now as you might suspect with a static variable let's just maximize the Edit area control m in eclipse with a static method sorry you can access avoid a class so if I write public static for Eid let's say college showing show info then I just to assists out in here and I will put hello just for a moment so to run this show info I just say thing the class name in this case dot show info like that so I'm accessing it by the class let's get rid of this this out and if I run this now it's it's gonna output hello so I'm running this static method here via the class now there are a couple of things to bear in mind here one thing is that static methods can access static data because both belong to the class so if I say in here I want if I output description the static I'll put the static variable in my static method that's gonna work so this is gonna say I am a thing just from calling my static method here but I static methods can't output instance variables like name this gives me an error which says kind of make a static reference to a nonstatic field name and that makes sense if you think about it because the static data the static instance variables exist before you've even created any objects from your class so how can this know about the name which is associated with particular objects it can't so let's just pop won't work on the other hand the instance variables can access the static data because sorry the instance methods can access the static data because of course by the time you've got objects of course you already got the class so methods attached to the objects naturally can access data attached to the class so in this show name which is an instance method a normal sort of method I can I can output description here let's just pay plus in there and some punctuation and if I run this I'm gonna get so this is from the static method here I am a thing and the instance methods are outputting I'm a thing Bob I am a thing soup so the instance methods can access the static data now you might be wondering what you can use static for and there are several uses that spring to my mind and I'll I'll show you some of those here of course one one uses that if you've got a method that takes some arguments and outputs some data but never deals with the instance data of the class then you could make it static because you only need really instance methods if they somehow deal with the instance data at the class but there are a few other interesting uses as well so let's say let's have a look at one typical use of static which you can find in many places in Java but a good example is the maths class standard part of the Java library and the master class has constants attached to it for example pi so if I output math dot pi you can see that I'm accessing a variable here well a constant actually I'm accessing some data via the class math which might lead you to suspect correctly that it's static so if I run that here we get PI being output down here just from this so let's see how we can make our own constant in the same way so here if I want a constant I'm still a kind of thing I want to achieve is I want to be able to say something like the name of my class which is thing dot let's say I don't know thing got lucky number or this could be a string sorry lucky number or whatever you like now see pi is a constant which means I I can't reassign it I can't do math dot pi equals three if I save that it's let's comment this out as well so this will give me an error the final field master pi cannot be assigned its constant meaning it's unchangeable and constant values cannot by tradition or convention in Java are represented by uppercase letters and that's why I've written this in uppercase and just to give it make it more readable I've got an underscore in the middle there and to implement that so it's going to be a public variable public because it's accessed outside the class and we're going to look at public protected and private in future tutorials and I'm going to make it of type int although it could be anything you like int and I'm going to call it lucky number lucky number like this and I'm gonna make it I want to access it via the class thing got lucky number so it's going to be static so public static int and I'm also going to declare it final so I'm gonna put a final keyword in here and final is Chavez version of constant and that just ensures that you can't reassign a value to this and if you have a final field you've got a assign a value to it when you create it so here I need to write equals and then let's just set it equal to seven because after you've created the variable you will no longer be able to assign a new value to it because its final is constant so you can see that this will now work and if I run that it's gonna say seven down here so I've just got this constant value which as I say could be a string or whatever that's attached to my class and you see that all over the place in Java like in there the color class in string or jframe died exhale and close and you know math constants and it's a bliss absolutely all over the place another really good use of static is to count the number of objects that you are creating so let's create let's have in here a just for simplicity I'll make it public again but normally this would be private and you'd access it via a getter but I'll say public int count and right and yeah I'm gonna make that static so it's attached to the class not to the particular objects and I'm gonna initialize it to the value zero and I'll give thing a constructor source a public thing no return type for the constructor now this constructor will be run every time you create a in since a thing in other words whenever you do new thing it's gonna run whatever code I put in here so I could take that opportunity to increment count and because count is static it belongs to the class not to the objects and that means that there is only one count which is shared between all objects so any time an object increments count there's only going to be one copy of count and it's incremented for all objects in effect because as I say it's attached to the class so here I've done well let's first of all out put it up here I'll say suss out think count and as I say normally you have a getter called get count probably and and then let's let's say here I just put some text in and say before creating objects counts is like this and I'll put a plus in there and let's just copy that and I'll move it down here after I've created my objects so if I run this it's gonna say scroll up a bit before creating objects count is zero because when I output think count up here it's it's just at its initial value of zero but every time I create an object it runs the constructor and increments count so after I've created my objects here each one of those will increment count and then I'm outputting think count again and it's saying after creating objects countess so this is handily counting the number of objects I've got and that brings me to one final interesting use of count which is assigning an ID to each of your objects the unique ID because supposing here I create a instance variable not not a class not a static variable but an instance variable and I'll call it public in ID and just repeat these shouldn't really all be public but they should be private or protected but this will do for this tutorial and I won't initialize ID here actually your instance variables in Java are initialized to default values this will be zero anyway to start with but I doesn't matter I want ID to be unique for each object so the first object should have ID let's say nought and the second object ID 1 and so on and all I have to do to get that to work is I can I can assign the value of ID and every object has its own ID because it's not static it's an instance variable so I can assign that to the static variable count and the static variable count being shared between all objects is of course incremented every time you create an object but this will keep a kind of record of whatever count was at the time of constructor run for each object each object has its own ID but there's only one sure to count so that means that if I say down here let's say well I could change show name so yeah so in my show name method here I could say object ID and plus whoops plus and that sat on ID and yeah but I have some punch bration in here and a space and then I'll have the ID and then some more space or punctuation like this so show name now whoops I didn't mean to do that show name now it's outputting the id3 for each object as well as its name and if I run that so show name is running down here if I run this program it's saying object ID naught I am a thing there's the static description an instant state again Bob and the second object ID 1 again instance data I am thing static data and then the name su instance data so it's quite a lot to take in for one tutorial but I'm going to put this code on cave of programming comm which is all one word so you can take a look at your leisure if you want to and the approach I always take myself to learning this kind of stuff is just basically use it you know copy and paste it in and get it to work and after a while you sort of start to get a feel for it and if it seems at all obscure now after just using it and working with it a bit you'll start to see that it's it's pretty simple really it's not too bad so that's it for this tutorial in the next tutorial we're going to look at string builder string buffer and some advanced string formatting which we'll need before we go on to some more stuff to do with objects so join me again then you