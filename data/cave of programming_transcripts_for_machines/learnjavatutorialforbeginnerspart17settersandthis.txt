hello this is John from cave mob programming calm and this is a tutorial on setters onset methods in Java sometimes known as mutators and we're also gonna look at that this keywords a little bit so I'm in eclipse I've got my main program already set up here and I'm gonna create a class up here which I'll call frog just to give it a name I'll give frog a string name and int age and we've seen in previous tutorials how to create get methods so I'm gonna give it a get name which returns the name and I'm gonna give it a get age which returns the age like this and your notice I've declared these public and we've not gone into I explicitly yet but basically you type public in front of your methods you won't go wrong so just stick that public keyword in there and I'm gonna create a frog object now so I'll say I'll create a variable called frog one and I'll set it equal to a new frog so I've got my frog object and previously what I've been doing is this I've been saying frog one name he calls it's calling Bertie and frog one age equals one let's say and then later on I can access this data using the get method so I could say frog one name like that and if I run that it's gonna say Bertie so now the idea is that to try to hide away these variables from outside the class so here we're using the Frog class but we're accessing the variables directly and that means that if you use this class you have to know what internal variables it's got and that's undesirable it does complicate things in more complex situations than this so what we want this like we've got some get methods we want to have set methods that allow you to set that data and then all you have to know is what methods frog classes you don't have to worry about its internal variables so let's create a method here that as it doesn't return anything and it's called set name and it accepts one parameter of type string which I'll call new name and what I'll do with this method is I'll simply set the instance variable name equal to new name and that's a setter that's what a setter is because now instead of saying frog one dot name equals Bertie unsafe frog one set name and pass it the value Bertie like that and I've done here the same thing as this and it's really important though not to confuse these two because of course here I'm setting an instance variable with the equals sign whereas here I'm calling a method so here I'm actually making some code run but it just so happens that what all the code does is to take the parameter that I pass it and assign it to the instance variable name and that's what's called set name of course and I could also define a set age so public for you to set age and age and I can say I just I'll call it new age because otherwise I'll have to ages new age I could call it like so age equals new age these are just arbitrary choices and names I could call it the age or you know her age or you know other name whatever I like I just decided to call a new name new age and I can use that down here so I'm safe frog one frog one set age set it to one so now I've avoided referring to that for instance variables in my in another class you know it might not class here and instead I'm just working with frog using its methods set is set methods and it's get methods and I could use any other methods that it happens to have so i've encapsulated the data this is called encapsulation because you're hiding away the kind of instance data here and to enforce that if you want to stop because of the moment I could still type that if I wanted to I can't still access the variables directly if I just put the keyword private in front of them like this and you'll see the arrows coming up so now I can no longer access them directly outside of the class but inside the class is no problem and that's what private does so you could always bond private in in to enforce encapsulation to hide these variables away and one more thing I want to show you here maybe a couple more things actually well see here I've given the parameter a different name to the instance variable because I didn't want to have two names in the same scope so if I call this name now it's between these curly brackets in other words in this scope to use the technical language I've got two names there's there I could access this the instance name and there's this a local variable name and if you just use like name like that if I just use that without any kind of prefix or anything it means the one that's the closest to it basically which is this one so local variables or parameters they they mask the kind of instance variables if they have the same name but if I want to actually refer to the instance variable it's very simple I just prefix it with this dot this dot name means this name up here it means the instance variable the one that belongs to the the object or the class if you like and if I just use name by itself right here name by itself means they're the kind of local variable or the argument or parameter is this in this case so by saying this store name equals name I'm setting this name which is up here equal to name which is here so it's actually pretty simple really if use name by itself it means the means this one and this dot name means the instance variable that's pretty simple and I could do the same with a each here I could change this to age and then to disambiguate because you can't you obviously can't have a equals age that would just be selling this variable equal to itself so I need to say this that age equals and if you wonder what this is this is doesn't really matter at this stage to be honest but what it is is just a kind of reference to the object that you're in so here I've got frog Juan this refers to a particular frog particular object and I'm calling methods using frog juan and within the actual object itself you can use this to refer to the same thing this refers to the object itself so it's basically the same as frog Juan or if I had frog it'll be the same as frog whenever this ran within the context of the Frog object but don't worry about that the really important thing is to get used to this pattern because this is a really important pattern for setters set methods you have like typically public void set something and then a type and then something and then inside the method you say this something equals something and just type that out a few times with different parameters and also gradually sink in your head and you'll get used to just typing out you know public void set age brackets int age this by 8 equals age there just kind of rattles off your tongue and you don't have to worry about it now beginners often make the mistake of using this all over the place I think even on some university courses they tell you to do that but it's not necessary if I had for example a public void set info and that took like a name and age like this if I wanted to I mean I've got the option here I could call obviously I can work with name and age directly or I could also do set name name and set page age like that so what I want to point out is that here you see well actually here I'm accessing the name instance variable directly I don't need this prefix because there's no ambiguity within this go between these two brackets there's no parameter here within these two brackets the only visible variable is this name here because variables are limited to the brackets that they're declared kind of in or these parameters are limited to the scope of the brackets just after them curly brackets here so between these two there is only one name and that's this instance variable here and scope of this it's these two brackets here the class ones so bottom line here you don't need any kind of this because there's only one name and it's this one and similarly when you call methods from within other methods this is a method under calling another method set name you don't need to say this stop you can if you want like that but it's completely superfluous you don't need it and you only need this pretty much 99% of the time it's only called for when you've got ambiguity like that you've got two variables for the same name in the same scope and once an instance variable and you want it pick out the instance variable so that's enough for this tutorial I think and in the next tutorial we will look at and constructors so join me again for that one and if you're watching on YouTube too clip click the subscribe button and you can find this code on cave of Programming TOCOM which is all one word so i'll catch you next time and until you