hello this is John from cave of programming calm and in this tutorial we're going to look at try with resources and this is a Java 7 language feature so if you're using Java 6 or below you won't be able to do this in the last tutorial we looked at reading a file in the the old style in Java and what we found was that you end up doing something like this where you've got a nested trycatch block and like caches all over the place and it really looks terrible and in this tutorial we're going to see a language feature that was introduced in Java 7 that can enable us to simplify this quite a lot so a lot of what we're going to do is going to be somewhat similar but we're going to end up with hopefully a lot less code at the end so I'm still going to declare a file object and let's actually create file here to work with so I'll rightclick my project I'll go to new file I'll call this test text and let's just copy some lines in from my my other project here so I've got this little text file here and I'm going to use this now actually what I'll do it here is now that I think that I'll show you how this works without files because it one about to show you is nothing intrinsically to do with files it just happens to be very handy for working with files so I'll show you it independently of files first let's imagine that we've got a class up here let's call it class I'm just going to call it temp or something like that and I'm going to say here that 10 implements also closeable also closeable by that now the auto closeable interface just specifies that your class should have a 10 sorry closed method a method called closed so if I click this arrow here and add on implementing methods now we've got a closed method here and that throws an exception and let's just put in the SSL closing so that we can see if this method runs now imagine that in my main method I create I want to create some sort of object of the type temp by this and later on I need to close it I need to remember to close it like this because otherwise I don't know what's going to happen but somehow it's going to be bad for my program then here are I've got to handle its exception which could be thrown from this closed methods let's put this let's put a trycatch around it but now this program should work and if I run this it says closing so we we created a temp object and then we called the close method and temp was actually forced to have a close method because it implements Auto closeable and let's just put the cursor on that and press f3 we can go to this definition and we see that Auto closeable has nothing in it except that it says you've got to have a closed method that throws an exception I sort also closable what this interface does okay so let's let's delete that but keep that in mind and I know that's not to lead to actually because I still want to show you something here now instead of instead of having this try block here what we can do is we can get rid of that and when we actually declare the temp object since Java 7 we can surround that we can actually put that in the inner inner after a try and kind of like round brackets like this and this is called try with resources so I put after I've got a keyword try and I've got round brackets like this and within the round brackets and declaring and assigning some variable I'm creating an object using new and assigning it to a variable that implements also closeable and it's the important bits got to implement auto closeable and I open a curly bracket of the try here and let's just click Save and now if I look at the error here it's complaining that it throws an exception because this close method throws an exception actually it doesn't throw it but it could do because of this so let's just click that and say add catch Clause to surrounding try so now we're catching the exception here and now like there's no warning here that I haven't called close which ordinarily there would be and if I run this code we see that it's actually calling closing and that's what this does it actually the fact that we've declared this Auto closable object we then try means that the close is automatically called and we don't have to worry about what will happen if an exception is thrown or what will happen if it X cubes normally because whatever happens this will automatically call closed so we could even say here throw new exception like that and say oh oh no and even if I run that now it's still calling closing even though we've got this exception being thrown here so close is always caught and that's what's so great about this Java 7 language feature the try with resources that works on these auto closeable objects now I'm going to actually leave that there come to think of it and I'll create a new in my project is going to write one I'll create a new main method a rightclick and I'll go to new class let's call this app 2 and click finish and now I want to show you how that works with regard to files so I've got my text file down here and I'm going to say file file get rid of the caps lock file file equals new file test text like so I'll do ctrl shift o to add the import and and now I want to read it as we saw in the last tutorial or if I want to read this line by line I need a file reader and a buffered reader and in the last tutorial what I did was this I said buffered reader buffered reader B R equals new new buffered reader and I passed the file to it and then inside the import and then I that's throwing an exception so there's going to be an error there and then I said if I this is wrong way around the first thing I said was file reader and F R equals new file reader and we pass the file to that and then we pass the file reader to the bufferedreader so we've got three objects here that are kind of buffered readers using this file reader here file reader is using the file here it's like a Russian gold kind of thing and what we can do even in Java 6 or I suppose any version of Java which was save a bit of which will save as a line is that instead of declaring this separately up here because we actually never refer to this again after using it down here so instead of having a separate variable for it here I could take my new file reader here and just declare it in a constructor and the call to the constructor of bufferedreader so it's just that the import make sure it's there so now I'm creating a bufferedreader and I'm creating a new file reader and I'm passing file to it and I'm passing that object directly to bufferedreader to the constructor of bufferedreader all in one line so that saves us a little bit of typing but now what we're going to do is we're going to use a Java seven language feature to try with resources again and I'm going to say here try and I surround this whole line with round brackets the long line but never mind and it opened the curly bracket here and if I click this arrow I can add the catch clause like that and we got file not found and here we could put an error message like sisal can't find file and you probably know the drill by now filed up to string if this executes and this could execute because we can't close the file but the most likely cause of it is is that we couldn't read the file properly so let's put here unable to read file and filed up to strength so I think this I think this error message here will is going to come out even if we're unable to close the file and the user doesn't really care if the file can't be closed they only really care usually if it can't be read but not much to be done about that because this is just so you see see how such synthesis is so small compared to their monstrous mess that we had in the last tutorial which to remind you that like look like this with a nested try catch and to complete our program we just need this bit here that actually reads the file linebyline so we go to app two and paste this in try block control shift f2 format there and now we've got a complete program that reads a file so and it closes the file handle as well because we're using this try with resources if I run that then we're reading the file and if it can't find the file let's say then we'll get a nice error message so what we've done is we've replaced this this Monts monstrosity which I can hardly bear to look at to be honest with you with this here which is much much nicer but it only works in Java 7 although this this bit here will work in Java 6 as well it's just there's no try with resources until two over seven so that's it for this tutorial that's a very handy feature that you can use to simplify your code this code will be on Cave of Programming calm so check out kata programming calm and I'm also in a process of setting up a email list with a weekly newsletter they'll contain my free M tutorials and special offers and stuff so check that out and until next time happy coding