hello this is John from Cave of programming. comom in this tutorial we're going to take a look at pointers and arrays so the stuff we're going to look at here is a little bit complicated but as always the thing to do is just try some of this stuff out for yourself and um go easy on yourself like don't don't expect yourself to understand this all immediately because you won't attain fluency with this until you've used it several times in your own programs that you've tried to write for yourself but the exercises will help fix this in your mind so let's start by declaring an array I'll make this let's say an array of strings let's say string I'll call it texts texts each equals uh we need to put the array brackets in there of course equals and we'll initialize this with some strings let's say one 2 3 uh now if we if we do size of this array let's just try it see out uh size of text that will give us um the size of all the elements in the array and if and we can divide that by the size of uh string to get the number of elements in the array we've seen this before now this this might seem a little bit puzzling because of course strings have different amounts of data in them but here we see it's it's correctly given as three which is the number of elements in the array and yet we've got different amounts of data in each string well here's uh one to five characters and here is three and three but that's because the actual contents of the string is stored in some memory that the string object allocates separately so what we're storing in the array is is a string object of fixed size and the actual text is stored elsewhere basically by the individual string objects so this this works for string arrays just like it does for interrays now to iterate through that we could of course do this let's say for in I equals not I less than um less than this stuff basically let's just copy that and i++ and now we can do um C out and text I so we've seen that before as well this is just using normal array syntax tax and it looks like this 1 2 3 I'm just going to um change that to flush and add some add an empty space here just so we can get all all that stuff on one line now if we declare a pointer of type string let's do that get rid of this line here let's say string pointer and we'll call it P text uh we can set that to point at the first element in the array and there's several way well there there's two ways to do that basically we'll look at the second way a bit later but one way to do it is just to type texts like this just the name of the array because in fact uh array variables and pointers are extremely similar to each other the main differences perhaps it's even the only difference is that um the array variable actually knows how much data it's pointing at yeah has that information in it and that's why we can use size of to get the number of elements in the array a normal pointer like this doesn't know how much data it's pointing at it only knows um the size of um the size of the first block of data that it's pointing at it doesn't know how many blocks there are so this pointer knows that it's pointing at a string because of this but it doesn't know how many strings there are it doesn't know what what size the block of memory is uh and how many strings there are in that whereas this does but apart from that this and this are basically the same and that's why we can assign a pointer directly to point out an array variable now we can iterate through this uh array using this pointer all we have to do here is change this to P text like that and that will work so it says 1 2 3 that's that's one way of um of using a pointer which is a bit surprising when you first see it to iterate through an array but there are other things that we can do as well let's let's take a look at another example so um one thing that we could do is we could let's use this for loop again and I'll just format that so we've we've left the pointer here pointing at the start of the array like this and instead of using I using like array um array element reference syntax here we could output the thing that the PO is pointing to by D referencing the pointer so if you remember from the last tutorial we can do that just by typing P text with a star be before it so if this pointer points at a string Then star and a pointer name will actually give us um the actual value in the address that that pointer points to that will point to the first string so if we run that it's just going to Output the first string three times 111 let's make that a little bit clearer by outputting just a new line here so I'll save that and run it and um we'll get 111 how can we move this pointer to point at the next string well because the pointer knows what size of block of data what kind of data block size it's pointing at we can just say PEX uh we could say equals P text + 1 uh so by adding one to the pointer uh C++ knows that you mean you want you want to make it point at the next block of data in the in the memory it's pointing at so if we run this now after saving it then we get all the strings 1 2 3 and in fact we can use the more succinct syntax that we've just used here to increment I we can just put PEX Plus+ and that will also make the pointer point at um the next each time that executes it will make it point at the next block of data in the memory it's pointing to so that works now for Loops are actually quite flexible so if we wanted um we could put this up here because we want this to to happen uh once after every time the loop has run and and this the stuff in this part of the for loop after the the second semicolon it's two semicolons dividing the stuff up here and the third section here happens every time after the loop has run and we can put more than one um thing in there we can put a comma and put something else that we want to run besides I ++ we can put P t++ let's get rid of that and that will now also do the trick there's um there's another way that we can do this as well using pointers let's try that so um we can we can create a pointer to the to the start of the text like this the start of the array um this is pointer now by the time we finished is going to point to the end of this array because we've we've incremented it so um I don't want to use that again again let's create a new pointer let's say string pointer P I'll call it P um element because we're going to point this to each element one after the other and I I could set that equal to point to the first string in the array like that and uh I can get another pointer string which I'm going to call string pointer P end I want to point this to the end of the array uh so I want to point it to the last element in the the array and I can do that well let's how would we get the last element in the array we'd have to know how many items are in it unless we use size of so the last item in this array is going to be element two because this is element 0 1 and two now to get the address of this element because we we can't just we can't assign the pointer to this but that would give us a nonsense thing that would just take um what this this kind of element whatever whatever data is stored there and put it in the pointer but this is no use what we want is the address of this element and to do that we need the um the Amper sand at the start of it so um this these these brackets are um I forget the exact term but they they're the array element um array element uh operator array element reference operator something like that the an operator that operates on the um on the array variable name to get you the elements in it this is another operator that gets you the address of stuff following it and this works because this operator has a higher precedence than this in other words when we type this C++ will first do this bit it'll first execute this operator and then that one but if you want it to be even clearer you could put this in round brackets like that so now we know we're getting the last element in the array and then we're getting the address of it but we we don't need these round brackets just because um this operator has a higher precedence than this anyway it will be it will execute first so now we've got one pointer that points to the start of the text and one uh of the text array and one pointer that points to the end uh and if we want we could just use the same syntax here um in place of this just just to make it a bit clearer what's going on so we we can put zero in there and that will work just it's just identical to this but since we're using this here if we use this here it makes it a little tiny bit clearer what's going on maybe now what we want to do is we want to Loop through the array and we want to Output every element this points to and after every Loop we want to move this to point at the next element until we find that this is pointing at the same place as this when that happens we want to Output the element and then we want to break the loop so let's maybe um let's use let's try using while loop here let's say while I'll do a while true so this would be an infinite Loop unless we put a break in it and uh we can do c out we can output um the first element by D referencing this element pointer we can say see out star P element and we'll have yeah let's put them all on one line again so I I'll put empty space and then flush then we've got to move P element to point at the next element so we can do p element ++ then let's say if p element equals equals P end if it's now pointing at the last element in the array that means that we've just output the last element in the array and in that case we break the loop so this is also a way of iterating through the array sometimes is very useful let's run this and check that we get the right results it's easy to make mistakes with this yeah I've got one to I've missed all three so I think I've done something wrong what have I done wrong so we pointed it at the first element we output that we incremented it yeah I should have incremented it um after I checked to see if it was at the end so we need to Output the element and we then we say is the element that we just output the last one if so we'll break otherwise increment the pointer okay I think this will work now I'm pretty confident let's run it okay so now we get 1 2 3 it's very easy to make mistakes in C++ even for me and I started doing C++ a long time ago like 15 years or something okay so um we can make this even a little bit more elegant still possibly by um we could find a way of of combining this with this we we could somehow fix that up so that it would work but um but then it's it's starting to look a bit confusing so I think I'll leave it at this okay so this this has been quite a difficult tutorial but um what I'd recommend is like I say go easy on yourself and practice these things first of all Loop through an array using a pointer with array element reference syntax in other words like this then try um looping Loop through an array by incrementing a pointer to the array and then finally uh try looping through the array so Loop through an array and um stopping by by comparing two pointers so um one to the actual element and one to the end so like um uh here we are here we're comparing two pointers we're comparing the pointer that's stepping through the array with a pointer to the end of the array and that's how we stop the loop so um if you want an exercise I'd say try try these three things you're going to struggle with it probably a bit if it's the first time you've seen it for sure um and I remember the first time that I looked at this stuff it was completely baffling took me a long time to get the hang of it but if if you can if you can um get the exercises working with uh only looking back at this text when you need to then um you can basically rest assured that you're progressing quite well and as I say don't don't expect to be completely fluent with this until you've practiced it in actual programs that you've thought up yourself because that's the vital step that you need to really become fluent with C++ but at the moment just working through some exercises and getting stuff working and figuring out what bits youve forgotten or what bits you didn't understand um that is really important I also remember that when I started programming uh I could spend easily sometimes two or three days working through a bug in my program and I just not knowing why it why it did well it did and one thing that helps a lot with that is doing things step by step write a little bit of code then build your program and run it and check that that bit of code works as you expect uh putting some SE out statements in if you want before moving on to the next bit of code it's really bad to write everything all in one block and then build it and run it because it makes it a lot harder to find the bugs in it so you should write a little step build it and run it and then and check that that works properly as far as you can tell before going on to the next step okay so I'll leave you with that we're looking at the most complicated stuff in C++ here pretty much um but um but hang in there because uh after this it's probably going to get easier if anything so until next time happy coding