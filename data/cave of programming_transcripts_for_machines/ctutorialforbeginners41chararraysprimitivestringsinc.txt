hello this is John from Cave of programming. comom in this tutorial we're going to look at Char rays in C++ this is something that I really should have mentioned earlier in the course and I was kind of reminded to mention here because we can do some interesting stuff with pointers and Char arrays but first I need to show you what a Char array is and this is quite important in C++ uh so we've seen that before you can um Define strings of text in C++ like this let's say string text equals hello and we can output it with seal like this text endler let's run that so we've seen this previously um in this tutorial series C++ for complete beginners um but we can also actually um store text in an array of chars so we've seen the Char type before it's um it's one by long and it's often used for storing characters from the asy character set we've seen that previously um but we can have an array of chars let's call it text array and we've seen as we've seen before you could initialize that using this kind of syntax and we put the characters that we want to put in there in single quotes like this might as well add on the o now I've come this far so let's let's run that that also works and see how it we'll output it as you'd hope that it would um but there's a shortcut here because instead of doing this we can just put the text in double quotes and C++ then will happily put these separate characters into the Char array so that also works and it's it's actually very common to do this in C++ sometimes it's more useful to store characters in in a Char array like this um in a in a what you could call A Primitive string than it is to use the string class which um which I've showed you previously now let's let's iterate through this with a four Loop because there's a bit of a surprise here let's say 4 in I equals not I less than and we'll use size of to get the size of the array size of text and i++ and let's output the characters one by one so C out and text I and then I'll have a flush there so if we run this um what we get is well this this looks like would expect but um what about if we output the index as well cuz actually that's going to make it clearer let's try that so I'll put some punctuation in here we'll have each character on a separate line and now if we run it yeah if I get the syntax right as well so I need this put to operator there okay let's try that so we see that um I is run from 0 to 5 that must mean that size of is returning six so that we've iterated from I uh starting at nor all the way up to five and then when it gets to six it says okay I is no longer less than um six is no longer less than size of text and it stops so size of text is actually returning six even though there's only five characters in the string and we can see that the six character here at position in index 5 remember we start the indexes at zero so that's why the six index is five is it appears to be blank nothing's PR printing there but we can find out what it is if we put a cast to an INT in front of this character so if we run this now we actually find that the last character in the strings are zero and we call this the null Terminator um null string Terminator um and the the reason it's there is it's just so so that it's a way of letting um it's a way of allowing a program to know where the string actually ends so um there's an invisible character in the string and that was created just by virtue of the fact that we' put this in double quotes the double quotes append this zero value to the string which doesn't print with see out but it's there and C++ can use it your program can use it to find out where the string actually stops so the length of this string array is actually six even though there's only five visible characters let's um let's maybe put this back out it was to start with um and that means that we could Loop through the string with a while loop if we wanted to not that that's necessarily a useful thing to do but actually sometimes it is uh occasionally so let's let's try that let's say um are use let's say int k equals not and I'm going to Loop while true so let's create an infinite Loop here and let's do c out K in fact let's let's just start put everything on one line cuz it's going to be it'll look a bit nicer let's say see out text and in Brackets here I'm going to put K and flush like that now how do we know when to stop this Loop let's increment K down here so we could do k = k + 1 but you might remember that to increment an integer we can also do k++ and that will just add one to the value of K and now we need to stop the loop when we reach that n Terminator so let's put up here if K is equal to zero sorry if um text k equals zero then we need to stop the loop we can do that with a break I like to write it like this so I like to put the brackets into the if and put break but just so you know if you've only got one line in your if you can miss out the brackets I think that's quite confusing especially since if you get the indentation and you type more stuff down here you know like this you can end up thinking that this is part of the if but it's not the if only applies to the first line so I like to put the brackets in but you can write it like that and that will work let's leave it like this for the moment although I I wouldn't I don't normally like to do that uh so we're going to start k at not we're going to loot while true if um the the character at position K in the in the Char string is zero we're going to break from the loop that means we'll stop the loop and we won't execute this but if it isn't zero then we'll carry on we'll output the character and then we'll increment K let's run this and we find we've got hello down here so it works so to practice this um I'd recommend doing these things first um create a um Char string and output it then output all the chars with a for Loop then output all the chars with a um while true Loop and uh just to kind of try to fix that in your mind about how this works uh one thing I'll say which I'll repeat later on is that um if you do all the exercises in these videos you'll you'll sort of have a lot of stuff in your memory that will be there even if you can't instantly recall it but it will be there somewhere and uh you won't actually feel completely easy with C++ until you've written lots of programs of your own and we're going to finish this course by writing one little complete program but um you'll need to invent programs of your own to write and uh have a go at writing them to really fix to really feel easy with this nevertheless if you do do the exercises it will help tremendously because when you come to writing your own programs at the very least you'll kind of know what kind of thing you need in there even if you have to Google for the exact syntax so I'll leave it there for this tutorial and until next time happy coding