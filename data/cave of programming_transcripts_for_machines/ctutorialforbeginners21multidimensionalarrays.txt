hello this is John from Cave of programming. comom in this tutorial we're going to look at multidimensional arrays in C++ we're going to take a look at twodimensional arrays specifically uh so sometimes um you haven't got a list of values you've got a table of values and uh to deal with that you need a twodimensional array let's take an example we we'll create a twodimensional array of strings so I'm going to type uh the type here let's give this a name um I'll call it animals and um I'm going to put uh square brackets here on the end end and I'm going to have in fact two sets of square brackets and I'm going to create a table of animals so we're going to have let let's make it I don't know 3x 2 or something like that uh so I'll have two rows here so the first um for the first um size here I'm going to put two and then I'm going to have each each of those two rows is going to have three columns in it so I'm going to put three here for the second index and let's initialize that and see how it looks so again as with um one dimensional arrays which we saw in the last tutorial you don't have to initialize the values when you declare the array here here we're declaring it we don't have to initialize it here we could just put a semicolon and um set the values later but here let's actually initialize it to see what that looks like so I'm going to say equals and we're going to have um curly parentheses as we did for a onedimensional array but now the deal with this is that each of the elements in the array is itself an array uh so with a twodimensional array we're going to have it's going to look like a table so we're going to have two more curly brackets in here and then a comma and then following that another pair of Kelly brackets and no comma after the second one um because that's the last one so here we've got two rows um as we specified here and we're going to have three columns in each of those two rows so let's say here fox dog cat and in the second row let's have Mouse squirel parrot so this this is um this is a table and uh we can display the contents of this table using an nested for Loop this is one of those things that when you're beginning C++ and you've got to a certain point uh this is kind of like a thing that seems quite challenging uh but it's really useful and twodimensional arrays for example are extremely important if you do any work with Graphics but they're important in a lot of different contexts as well wherever you need a table you're probably going to use a twodimensional array or else um a vector which is something that we'll look at later in the course or possibly even in the next course which is going to be on Advance C++ so let's create a for Loop that can iterate over the inner loop here over over the um over the outer array I should say so this this here this thing here is the outer array it's an array with two elements and this is the first element and that's the second element so let's iterate over that just as we did in the last tutorial and let's say for in I equals n keep going um while I is less than two because we've got two rows in the in the outer array so that's going to be um we're going to look at the indices Z and one this is a in index zero and this is at index one and i++ to increase I by one and now we're going to have a loop within this Loop and we're going to pay scrupulous attention to indenting stuff with extra tabs whenever we put stuff within Kelly parentheses so let's say in here four and we can't use I again because we've already used it so let's use J int J equals not and this is a common thing to do use i j or k for um for in for Loop counters like this while um J is less than three because now we're going to iterate over the inner arrays J is less than three and j++ and now we can output um in here the elements of the array so we're going to be taking it row by row so for the first row here let's output C out and animals and now we need two Ines to specify the position of the element within the array first one is I this specifies the position within the outer array so um so this gets us um this array or when the index is one it will get as this array and then we need a second index to get the element in the particular column within the within these um inner arrays so here we're going to put J and I'm going to Output flush there and let's have a space after that as well to separate the individ idual elements like that and I'm going to put the new line after this inner for Loop but within the outer for Loop let's just have a new line see out endler because that will mean that every time we iterate through one of these arrays then we're going to put a new line after it so that we we get a sort of it it kind of looks like a table let's save that and let's run it so what we get is this that's um that's our table so this looks a little bit complicated and again some practice is needed before you can really um fully understand it and be comfortable with it one thing we can do here is we can miss out this the first index we can't miss out the second index because um C++ kind of sees this as just a bunch of values one after the other like six values in this case and we need to clue in C++ as to how the array is organized so we're saying here that the um the inner arrays have three elements each we also can't have inner arrays with different numbers of elements in they've got to have the same numbers of elements in C++ and a really common mistake that beginners often make is they confuse these indices so if you end up having like I there or you put I there for by accident or something like that then um then this isn't going to work so you need to have um I's there J's there and then you need to say i j and you need to be very very careful that this is the number of elements in the outer array so that's one and two and this the J value um goes up to the number of elements in the inner arrays 1 2 3 in both cases and um yeah so so this J is going to go not one and two it's not ever going to be equal to three CU that will be off the end of the array and I is going to be zero and one so that's basically it for this tutorial um this is called a twodimensional array because we've got two Dimensions um each of the each of the um each of the subscripts um we think of as a dimension and um and we can go kind of across the array that's one dimension or we can go down it that's the second dimension or or you could say they're they're the other way around you know down is the first and across is the second or whatever um but that's that's why it's called a twodimensional array and you can have threedimensional arrays and so on you can add more brackets here uh but then you're going to end up building some you know hyperdimensional structure that could take up a lot of memory and it's two twodimensional arrays are by far the most common form of multidimensional array with three being less common I've never seen anyone use four or five but you could if if you want to so to practice this um what I'd suggest is that you create a twodimensional array of integers and uh try to print out a multiplication table for the numbers 1 to 10 and for each number um put the value in there that's um equal to its multiplication table up to 10 so so your first row in the array is going to be uh 1 2 3 4 5 and so on up to 10 the second row is going to be 246 and uh so on up to the final row which is going to be 10 20 30 40 try to print out a full multiplication table um 10 by 10 and see where you get uh so you're going to have to use use a a nested for Loop like this to initialize it and um You probably yeah if you start at one instead of zero instead of having 0 * 0 in the upper left corner here you're going to have one by one so you're going to have to carefully um think about your Loop indices or better still maybe just add one where necessary within the actual brackets here where you need it and then use a second nested for Loop to display the full multiplication table uh so see if you can see if you can do that you're going to end up with a table that's like 1 2 3 dot dot dot up to 10 and then it's going to be 2 4 6 dot dot dot and then 3 6 9 all the way up to um 10 * 3 which is 30 and uh so on so H have a go at that it's a little bit of a challenge for you for you and until next time happy coding that