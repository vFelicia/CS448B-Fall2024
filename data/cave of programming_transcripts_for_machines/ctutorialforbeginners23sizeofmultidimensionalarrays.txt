hello this is John from Cave of programming. comom in this tutorial um I'm going to give you uh a solution to a little challenge that I posed in the last tutorial which was on um using size of uh particularly with arrays and I suggested there for um some practice you could use size of to iterate through an array instead of hardcoding the number of values in the array in your full loop and I suggested that you could try this on a multidimensional array if you're feeling particularly ambitious and because that's quite tricky um I'm going to actually give you the solution to that here so um have a go at it um if you feel up to the job it's worth trying and uh what the way we're going to do this actually is first let's investigate a little bit what we here we've got a multidimensional array um it's actually two rows here of um strings in this case although the stuff that I'm about to show you applies equally well to um to other types let's investigate a bit what we can get using size off here so let's say see out size of string for a start endler and let's run this so I've got um an unused variable warning here so the size of a string is 8 bytes it doesn't matter how many characters you put in the string the thing that we're actually storing in the array is um it's what we call a string object and that object uses memory that's allocated elsewhere so so so the actual these actual strings are not stored directly in the array we're storing these string objects in the array and um the memory for each particular object that contains the actual characters that actually exists somewhere else other than in the array so don't worry about that but basically this is the same as as if we had ins in the array we've got objects of a fixed size in the array and each one has eight bytes we can also do size of animals um well size of animals and that will tell us tell us the total size of the array so in in the arrays a hole we've got 48 bytes so each entry is eight bytes and we've got six of them 8 * 6 is 48 bytes and we can get the size of the um of the first row here which is going to be the same size as the second row CU all all the all the rows have to have the same number of values in in C++ so we can do do that by doing Animals zero that's the size of the first row and if we look at that we expect um 24 because we've got eight bytes and we've got three entries so that's 24 alog together bytes so to Lo through the array let's go through the outer array first let's say for in I equals n i less than this is a tricky bit and I'll leave that out for the moment I ++ let's put the brackets in um so we want the size of the total array just divided by the size of um the Sub sub arrays so that's going to be size of um animals that's the size of the total array divide by size of animals n which will give us the size of each of these subarrays they all have the same size and if we divide the total size of the array by the size of any one of its subarray s then we're going to get the number of subarrays in other words the number of rows in the array which is exactly what we want let's go through the inner loop here for INT J equals not J less than um well this is a tricky bit again j++ so now we want the size of um any of the subarrays which is size of animals n that's the size of the first subarray also the same size as second and however many we have divide by size of the items that we have in it which is string so that should work we divide the size of a subarray by the size of the items in it we get the number of elements in the array let's try that see out animals and um we need two square brackets here and we've got I and J in there for our indices and let's output this let's have some space there followed by flush so that we have um some space after each entry and then before the outer loop I'm going to put a new line character just so that we have each of the rows on our own line and let's run this so now we get if we've got it right um that's not what I intended let's just change this to flush so I want to have all the entries within one one row on the same on the same line that's why I put this space to separate the entries on one line now we've got fox dog cat Mouse squirel parrot which is what we have in our um in our uh 2D array our table in other words let's just put unsigned in in here because as we saw in the last tutorial we um we're going to get this warning otherwise with this compiler about uh comparing assigned and unsigned value so there we go and that should work that's it for this tutorial in the next tutorial I think we're going to look at the switch statement which is another kind of conditional statement bit similar to if um elith but um more kind of useful for some situations so until next time happy coding