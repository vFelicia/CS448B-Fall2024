hello this is John from Cave of programming. comom um welcome to another video from uh C++ for complete beginners in this tutorial we're going to look at outputting text in C++ so we're going to edit this uh hello world. CPP file and we're going to see how we can output text in it um so what I'm going to do actually is I'm going to start a new project let's go to file new C++ project and select hello world C++ project and let's call this out outputting text now at this point you're you're probably kind of feeling that um the the main program looks really crazy and um a really good thing to do is type it out yourself from scratch let's in fact delete all that and I'm going to type just the kind of essential basic program myself so whoops what did I do then I'm not sure so you need to start with um a hash sign like this I think in um America this is called a pound sign but um in Britain anyway we call the hash symbol so you need a hash symbol and the word include and then a open um curly sorry an open angle bracket and when I type the open angle bracket Eclipse automatically puts in the closing angle bracket and in the middle of that I'm going to type iOS stream um so iOS stream actually stands for input output stream and by the way don't worry too much about the stuff I'm telling you here what I'm trying to do is get you familiar with this main program little by little but uh the important thing here is just to be able to complete the tasks that I'm going to give you in this tutorial later so um what this is it's actually a file that we're literally taking from somewhere else and we're pting it into our main file before the build is run um that's what's happening behind the scenes and that's what include does but don't worry about that so you need that and then we need to say using name space standard and you finish this line with a semicolon and very often um you'll need to finish lines with semicolons in C++ that's something that you gradually get used to when you start you always forget them and you miss them off uh but um with practice you'll just learn to automatically put the semicolon at the end of lines where they are needed and after after this you can type int space Main and um an opening and closing round bracket so again Eclipse put the closing round bracket in for me and then we put in an opening and closing curly bracket like this so I'm going to type the opening one on the same line as Main and then hit return and you can see Eclipse has put the closing one in for me uh some C++ programmers prefer a style where um this bracket open the opening one would go underneath main like this instead of on the same line um but I I think this this style is you know it's definitely gaining popularity more and more I think so I'm going to follow this style and PE people who like brackets on the same line as um as the function name here they get very annoyed with people who liting them underneath and the people who Li them underneath get annoyed with the people who liting them on the same line but anyway let's let's just forget about that now once I've done that I'm going to type in here return0 semicolon so this is a a statement in C++ we call this a statement and statements have to finish with a semicolon and again this isn't going to mean much to you at the moment uh the important thing at the moment is just to type this out yourself and just to start gaining a little bit of familiar familiarity with it and that's actually a legitimate C++ program but ites doesn't do anything so once you've got this far you can um go to project build project and it should build without any errors it should just say build finished it's in blue here and it should be fine now to Output text we use something called C out we're going to type c out space and then two sort of um uh well they are kind of angle brackets they're the same as this symbol here but in this context we're we're using them not as a bracket but as a sort of Chevron so following that we leave a space and in in double quotes and Eclipse has put the closing double quote in for me and it must be double quote not single quote you can type something like this is some text we'll stop so between the double quotes you just got ordinary text whatever you like and after that we're going to put in um another Chevron space and then endler and then semicolon so endler stands for end line and see out well um I'm not sure what the C stands for C++ for all I know but uh this this means the out refers to the fact that we're going to Output text so you think of this this Chevron as sort of sending this text to this thing here um and um this is sending this end line end L also to this object here and end L it actually um puts like um a blank new line after your text and it also flushes the buffer and what that means is um text can actually accumulate kind of in your program without appearing on the console and uh this end L one thing it does is it flushes the output so that whatever saved output um It's actually kind of saved up by your operating system this will tell your operating system that it should output all the text that's waiting to be output so if you didn't have that there technically it's possible that um this text might not appear at all okay so and you'll notice the SE out it must go before this return statement and it must be within these curly brackets here and this this thing here is actually sub routine it's a function it's a block of code that's going to do something so don't worry if any of that went over your head like I say type out the main program yourself from scratch and try to get your version working and you will probably miss things out and you'll have to go back and look at the automatically generated version and by the way I think the automatically generated version it has this stuff at the beginning here which we can expand with a plus sign it has that stuff but these are just comments you don't need these you can you can leave them off let's get rid of that so I haven't put them you don't need that stuff and in in my Eclipse um the comments appear as green uh so they're not vital to the program at all let's now build this let's go to project build project and um let's let's run it actually I've already built it so that didn't really matter let's select the actual project um yeah you need to make sure you've got the right one selected and click the Run button and yes I want to save it and it runs and it says this is some text so again it's it's a big achievement to get to this point um so um don't think that you're wasting time typing this out yourself it's really not a waste of time you've got to become familiar bit by bit with this main program um we're going to let's let's have a look at what else we can do without putting text which so we can put more of these C out statements in here and what's going to happen is that um C++ it's going to um it's going to execute all the statements so this is a statement it ends in the semicolon this is a statement ends in a semicolon as well and it's going to execute all the statements one after the other within this main program so Within These within this main function uh so between this bracket and this bracket it um so this is where your program will all start and it's going to go through line by line here and execute everything you type here between these brackets so let's put another SE out statement in let's say SE out Chevron this is some more text um full stop of course what what you actually type here doesn't really matter as long as there are no weird symbols in that will confuse C++ somehow like another speech mark or something like that then you can type whatever you want in here basically try typing different stuff let's put in another Chevron and endler and let's run that and yes save it and so there we've got a program with two lines of text and the the thing that's creating the um uh we call it a carriage return the thing that turns the next line into a new line um so after to this line there's a carriage return uh we call it a carriage return because um when we used to have typewriters to to create a new line you had to roll the kind of thing with the paper on and then move it back all the way to the left and that's called a Line Feed and a courage return so here technically we've got a Line Feed and a courage return after this sentence um but we we can actually output text without um without the Line Feed encourage return so to do that let's let's put some um some text let's put it at the top here let's let's type SE out Chevron just two kind of um left pointing angle brackets and let's type um starting program dot dot dot and then let's type another Chevron and end and semicolon so um sorry not end flush yes okay so what flush does is it um tells your operating system to Output this text but it doesn't create a um it doesn't create a line feed um I think I was thinking end I think in visual C++ it used to be end and not flush but I might be wrong about that um but in any case flush works so it's going to flush the text it's going to tell the operating system I've output some text please um clean out your memory and actually output the text from it don't say that up um but it's not going to create a line feed or carriage return so it's not going to go to the next line so to see the effect of that let's run this click the Run button and you can see you've got we've got starting program and then immediately it says this is some text so so because there's no endler here we didn't go to a new line before outputting this um excuse me so try that try that for yourself try flush and try putting multi try creating a program with multiple lines of text in like this you can mix lines ending in flush with lines ending in endler it's absolutely fine and one more thing that I'm going to show you here is um you can also output multiple bits of text with one C out and and at the moment that's going to sound like it's pretty useless but you're going to see later on that that's actually extremely useful so let's go here maybe and let's type another C out another Chevron and let's type um uh I don't know actually let's type banana and then we'll put another Chevron and then in double quotes again we'll we'll um type Apple full stop and then we'll have another Chevron and then let's type orange and then finally let's type Chevron and endler so we'll save that and run it and what what what do you think is going to be the result of running this and you're probably going to guess that it's going to type Banana full stop Apple full stop orange might have a full stop there as well but um there's something not quite right with this and we'll see that so let's yeah select the project click run and you'll see that there's no space after banana apple or orange and that's because we didn't tell it to Output a space so um to do that well we could do something like putting another Chef on and literally have a pair of empty quotes with a space between them and then we get a space after banana if you look at that carefully it all makes sense says banana and then we're outputting the space and then apple and orange so we're outputting that then we're outputting this then apple and orange but let's let's get rid of that put it back how it was before the easiest thing to do is just put a space after that full stop within the double quotes cuz um normally in C++ blank space is ignored the blank space is there and to help you make the program visually appealing and Visually understandable so that you can easily see how it works and um we'll put one after the full stop of apple and after the full stop of orange as well and uh let's try running that so it should look pretty good and there we go apple banana apple orange you might wonder what would happen if you didn't have this flush St would it still work uh or we or if we didn't have the sendler there let's try it and it probably will work let's see save it and click run yeah so this text is actually still coming out but um there's no real guarantee that it will come out unless you have either endler or flush after it somewhere um because especially if you've got a big program that's producing a lot of text if you want the text to appear immediately you need endler or flush we say it's flushing the buffer because otherwise the operating system might save up a big wodge of text and then output it only when it's got a huge big wge of it but this forces the operating system to Output all the text straight away it's flushing its buffer the buffer is like an area of memory where it's saving your text and uh we say flushing the buffer like cleaning out the the buffer the memory and outputting everything that's in it okay so have a go at that and before you do there's there's one more really really really vital thing that I'm going to mention here and that is formatting because you'll notice that um in my main program here I've I've actually got a tab before each of these SE outs so um between these brackets here between these two brackets all the statements are indented with a tab and um you if you've typed it without that tab still works so if I run this yeah it still works but um this isn't right it shouldn't be considered right yes it's a working program but uh indentation correct indentation in C++ or any programming language helps massively for you to be able to understand the program and one of the key things that beginners tend to do wrong is they is they get the indentation wrong and then they can spend hours even days trying to figure out what's wrong with a program when if the indentation was right they would have seen instantly what was wrong with it so it's vital that you get the indentation right absolutely vital just as important as remembering these semicolons and stuff even though in bad indentation won't stop it compiling it's still going to be a rubbish program if you don't get the indentation right so between curly brackets like this you indent everything with a tab and one thing you can do is if you right click your program you can go to um let's see uh it's here somewhere we've got a source format there it is so if you go to Source format and there'll be a shortcut key for that as well um and select that it automatically formats your source so on my Mac um I think it's command shift F let's just get rid of some of that and do command shift F and it's something like control shift F on windows so there's no excuse for bad formatting because even if you get it wrong yourself you should make an effort to get it right when you type it but even if you get it wrong you can automatically format your source and boring that though that may sound you may think I'm going on about unnecessarily it's vital it's absolutely vital so use the auto formatting whenever you've written your program and try to write it with scrupulous for formatting in the first place pay attention to how it looks visually try to make it look nice try to make it break down into logical blocks and get tabs where you need tabs so between these curly brackets indent everything one tab okay that's it for this tutorial and uh until next time happy coding