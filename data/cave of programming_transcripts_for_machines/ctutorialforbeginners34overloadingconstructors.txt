hello this is John from cave of programming calm in this tutorial we're going to learn constructor parameters in C++ and we're going to take a look at method overloading as well or at least we're going to get a first look at it so I've got a hello world project here which I'm just going to build and let's just check that it runs and I'm going to define a new class here I'm going to right click the project and go to new class because I thought I'd create a new one rather than using previous tutorials code from previous tutorials which is getting a bit confusing let's give it one constructor and I'll call it person let's imagine that we're modeling a person with this class so we could be creating an employee database or something like that and let's give it some private variables we'll have string name and int age and I need to include the iostream header here string which as I mentioned previously could be different on your platform and we need using namespace standard so let's and there's also set values for this in a constructor so in person dot cpp here let's say that name equals undefined by default and age equals 0 by default so just to give it give them some values of some sort to start off with I also want to give this a method that enables us to see what's in the class so let's give it a method which I'll call to string so that can return the string that represents the class's data and if we go to person dot CPP I can implement that so let's say string person string and I'll use the string stream class that I showed you in previous tutorial just to build up some information about this about this class and we need to include some where the string stream header list is just do it here in the CPP file so include and we need sir stream we're alright we've already got a statement saying using namespace standard in person dot age so we probably don't need to repeat it here we're already using that namespace let's write to the string stream persons well let's just say name and we can put SS name and SS I'll have some punctuation age and then it's a SS age and then finally we can we return ssstop stroke to convert it to a string then in the main function here let's go to here and let's change this C out so that it outputs well I'll create a person class first a person will call it person one and let's spell that person dot string person 1.2 string I should say get rid of this comment here as well because we don't need it I think that looks good let's save that got a little error here syntax error got a semicolon that I don't need shouldn't have let's just run that check that it works so it doesn't work what led you wrong I've got to include the person header as well so let's do that include by age so using double quotes because it's a header in my actual program rather than being standard header and now I think if we save everything and make it build we've got named undefined age zero so one common way of supplying initial parameters to an object is actually to create a constructor that allows you to pass parameters so what we can do is when we actually instantiate our object like here we can pass it the name in the age that we wanted to have which is obviously more more useful than having them all and kind of predefined so we can't do much with that and we could use set methods to achieve what what I'm about to show you but it's just more convenient to do it with a constructor it requires less lines of code let's go to person dot age and in here I'm going to say let's create one new constructor so person and I'm going to say that the constructor takes parameters let's start off with just the name so string name now you can actually implement constructors exactly here you can fight you can do that with any method this is called like an an inline implementation where you just define the implementation of your method directly here where you already declare the prototypes let's put opening closing curly brackets here and I call this new name actually new name because we've already got a name here we don't want it to conflict and let's just say that name equals new name so there's we don't have to do this here we could define the implementation of a constructor down here but because we've only got a very small amount of code in the constructor I'm just choosing to do it here and all we're doing is assigning name of the person to whatever we pass into the constructor how do you actually pass that in well let's go back to the main function here well actually let's just check to see what it says age was not initialized in this constructor well that's true it's not also got a missing semicolon there well let's give age and that's just set it equal to zero here as well so that's our complete constructor now if we go to the main function let's create another person let's say person person two and this time I'm going to put round brackets after the variable name and in there I'm going to supply a name chopped up but I put Bob for that so the reason we can do this is because we've said there's a constructor here that takes a string as a parameter single string when C++ compiles this program it's for this it's going to say for this person one it's going to say okay we need a constructor that takes no parameters so it looks at the person class and says okay this constructor here takes no parameters so it's going to run that when it sees this when it sees this it's going to say okay we need a constructor that takes one string and it looks in the person class and it says yeah okay this constructor takes one string therefore I'll run this constructor instead of running this constructor so it's going to pick the constructor depending on and the parameters that that constructor uses it's going to pick the right one depending on what you put here or don't put let's output person two as well so person 2.2 string and if I run that we're going to see hopefully that we've got a person to here with named Bob the age is still zero we can have as many constructors as we like as long as they have different parameter and this business of supplying methods that have the same name so the constructor although it's a special kind of method that runs when we when the object is instantiated nevertheless it is still just a method and it also applies to any method that you can add different versions of that method with same net with the same name as long as they have different parameters you can't have two methods with the same name that only differ in the return type and they've got it differ in that and the parameters the type or the number of parameters that they expect let's have another one here let's say person string name string new name that's a and int age and for this one again I could easily define it here but just to show you that we're not forced to I'll create the implementation of this down down in the person dot CPP let's copy the prototype here go to person dot CPP and I'll put it below this constructor person common person well I can now just use my paste paste that in and we can say name equals new name and age equals I better rename this new age really new a new age new age okay and I've changed that also in the header this new age because just for consistency although it probably doesn't actually matter as long as the type is correct in the prototype so let's let's try that one as well go to my main function and let's just copy this and now we'll have su and 3035 and we'll call that person 3 and let us have person 3.2 string now if we save that and run it then we've got another person down here and it's kind of under underlines the fact that once you've got your class you can crane as many different objects of that class as you want you can instantiate this many times this you want and have different objects each with their own unique data so every object gets its own separate copy of whatever data you specify here this class is purely a blueprint for the different objects that you create and creating an object is called instantiation when you create an object from the class you say we instantiate the class so like the idea is that the class is like an abstract thing and instantiating the class it means kind of making a definite particular version of that class a particular object in other words so again to practice this and just create your own class and give it let's say three or even four different constructors that can do different things if you want you can even put and you can put like C out statements in the constructors so you can see very clearly which one runs and you only will run one constructor when you instantiate the object and a particular construct earlier on just depends on the parameters that you've supplied to it and it's also worth besides creating multiple constructors it's worth practicing and defining some of them in line like this just to fix it in your mind that you can indeed define methods here if you want to you can have inline implementations of your methods constructors or whatever actually here in the class and file itself sometimes you see classes were even that even have lots of code in the header here and don't even have a CPP file but I or they have a minimal one but I prefer putting any serious implementation myself in a CPP file which is is a more common way of doing it and that has the advantage that you can easily just look at the class header file and see what functions are available for you to use rather than having to trawl through lots of code looking for how the class interacts with the other code in your program so that's it for this tutorial hope you try that exercise there try this for yourself and until next time happy coding you