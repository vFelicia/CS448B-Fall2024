hello this is John from Cave of programming. comom in this tutorial we're going to take a look at encapsulation before we move on to look at more inheritance uh so I'll I'll declare a little class up here to demonstrate this in Eclipse let's create a class called frog and we've seen that it's it's very common to give our classes private instance variables um so let's give this a private string name and let's give it some public methods as well well let's have a Constructor that sets the name so that in our main function here we'll be able to do stuff like frog frog Freddy so when when you do this you're implicitly calling the Constructor so this isn't going to work at the moment but uh because we're implicitly calling a Constructor when we construct the object and because we're calling this Constructor from outside the class the Constructor will have to be public so let's say here uh frog frog string name and let's use the initialization list to initialize name with whatever's passed in and we'll provide a dummy implementation to make the compiler happy so um this is kind of an an example of encapsulation at work encapsulation means that we encapsulate we hide away the um the instance variables and we only provide some public methods that are going to be documented which the user of the class which may be yourself is going to is going to call in order to um do stuff with the class so we we declare the methods public that means we can call them outside of the class like this Constructor is being called uh implicitly and we encapsulate all the instance variables hide them away so no one can mess with them if we didn't do that uh we could end up with Excuse me a bunch of different objects that are all setting each other's um instance data and what would end up with would be a likely a kind of Tangled Rat's Nest of different objects all directly accessing each other's data which makes for very hard to maintain difficult to read code and that's why we restrict as much as possible access to the class and just have these publicly documented methods that we allow the user to use to do things with the class so we could have another example here let's have a um a public string get name and let's just return name in there so again we're making we're making this uh we're making it public and if we write up documentation for this class we document that get name exists and that it's a public method let's say here frog do get name and let's just check that this works because I'm never completely sure until it's actually um built and running and ideally tested quite thoroughly as well so we've got Freddy there um now it's it's common that it's common to have methods in your object that require some other method um to make them work so so you might have uh some kind of method let's say it's a public method in your object which um which needs some other block of reusable code in order to do its thing but that um so block of reusable code is going to go in a in a method in the class but we don't want users to be able to do stuff with that with that method so just to give you an example here let's say here that we've got a frog void um let's let's call it info and info is just to take a really simple kind of slightly too simple example let's say that info um outputs information about the Frog my name is let's say we've decided that the end user of this class doesn't shouldn't ever need get name for some reason but they they do need info then uh we can call get name here if we need it of course in in this simple example we could just put name there directly uh you can just of course you can refer directly to uh instance variables within the methods of your class but imagine something more complicated is going on here and this info needs to have some method containing some reusable block of code like get name but imagine that we we don't want to make get name public we we can actually make get name private so let's say here see out or not see out anymore but let's say frog. info info let's check that this works so I'll just save it and run it it says my name is Freddy but now um the idea behind encapsulation is besides uh hiding away your instance variables you want to also make private it absolutely anything that you can including functions so if we don't need the user to call get name outside of the class we can put this in the private section up here so this still works uh info can happily call get name even though it's private because get name is part of the class and private means that only the class can use this stuff directly so Within These brackets of the class our methods can call Private methods and can access private data but now that we've made get name private we can't do stuff like frog. getet name here outside of the class let's just prove that so I'm going to build this and we see that we've got an error and again this is encapsulation at work you should make anything that you can whether it's data or functions make it private make as much of your class private as you possibly can encapsulate it within the class uh hide it away from the end user in order to reduce the possibility of the user of the class even if that's yourself creating some sort of Tangled Rat's Nest if the end user doesn't need this make it private if it's only needed within your class and a common thing to do is to declare your private methods in a separate private section to the instance data just so that visually you're not mixing up a load of methods with instance data so you can have as many of these public and private sections as you want in whatever order you like and a common order is that you declare the instance data private at the top first and then you might have um a section with private methods and at the end you might have public methods but that's not the only order because uh some some uh um programmers reason that public methods should be declared at the top so that the the user of the class sees those if they look at the class definition here and then the private data which after all is hidden away is placed at the bottom um because you don't want to draw people's attention to that uh but I I like this form which I think is more common where you um declare your private data at the top and um any public methods are going to follow that and probably your private methods they're probably going to go after the data but it it's a question of whatever you feel is most legible really the order of these private public sections so we don't need to repeat this key word the only reason I've done it is to visually um put the private methods in a separate section to the private instance data just to make this easier to understand what's going on uh so I think that's all I'm going to say about encapsulation here and the end uh message is just make anything private that you can in your class uh so if you want to practice this um try creating a class with some private data and private methods and try calling those private methods within your public methods remember that the public ones are the only ones that you would uh document for the end user they're the only ones that the end user can called can call and everything else is private and you can also experiment with you know having private and public sections in different orders if you want have a go at that and just check that you understand the syntax here but it's pretty simple and we've seen a lot of it before so hopefully that won't give you too much of a a headache so that's it for this tutorial and until next time happy coding