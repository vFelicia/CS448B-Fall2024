hello this is John from cave of programming calm in this tutorial we're going to take a look at something called inheritance in C++ this is something which can get quite complicated and most of the time you don't need the complicated stuff and we're probably not going to cover the complexity of it in this introductory course but it's important that we do look at it because it is an important part of C++ so let's let's create a class here I'm going to define a couple of classes and I'm going to create them both here just above the main function just so that we can see them both in one place so let's create a class called anymore and I'll give any more let's let's just give it maybe one method so we'll say public and let's say void speak and let's make speak do something so I'm going to include and I'm going to include yeah I've got ice cream included already actually because I'm going to use C out so let's say in here C out and just make a generic sort of unhappy animal noise there guru so in my main class here I can create an animal like this animal let's call it a and of course I can call speak like this so let's just let's just run this check this is working you never know so it says guru now what if you've got an existing class and you want a new class that's similar to the old one but just has some extra functionality or it just has a few things changed compared to the old class and that's what inheritance allows you to do so I'm going to create a class here called cut a notice cat is a type of animal and this is important with inheritance so we're going to take classes and we're going to create child classes from them or subclasses we can call them and the subclasses are a type of whatever the so called super class is so animal is going to be the superclass cut is going to be a subclass cat is going to be a type of animal so let's say here class cut and I'm going to say after the class name public animal and just put the brackets in there so and for a moment I'm not going to give cat any functionality but because we put coal on public anymore after the class name here that means that a cat is is basically the same as animal here so let's have a look at that we can say a cat cut and cut speak and we can run this so cat also says guru now we can we can actually add new methods into cats that animal doesn't have so let's say for example a generic animal and it can have all the functionality that any kind of generic animal should have but we might want some specific things in cut by what can a cat do that a generic animal can't well let's say for example a cat can jump let's have a public and employee jump let's just say in here and see out cat jumping obviously we put some real functionality in here in in a kind of real world example so now we can call cat jump let's run this so cut it still has a speed method of animal but we've extended it and we've given it this extra method called jump so although this is quite a small tutorial I think I'm going to leave it there for the moment and we'll carry on looking at this in the next tutorial so to practice this of course just create a class and then create a subclass of that class so remember this is called a subclass and we say that it extends cut or it's inherited sorry the cat is a subclass and we say that it extends animal or we can say that it it is inherited from animal so cat is a subclass of animal and we say that animal is the superclass of cut so there's kind of a hierarchy in your in your mind where animal is at the top here and below it is cut we could actually extend the hierarchy further so remember cut is a type of animal and if we want to create a new subclass here let's just do that actually let's say class and now we need a type of cut well what's the type of car let's say tiger and and we can say a tiger is a subclass of cat we could give that its own method as well what can a tiger do that cut can't let's say and void and attack and tell Oh not many cuts from any house cuts anyway would attack a antelope but a tiger certainly would have a go so let's say attacking endler and so now we could say tiger tiger and tigers got all the methods that cat has like you can say tiger jump we could say tiger speak and we could say tiger dart attack and tell Loeb let's run this and make sure that it works so there we go we've got attacking from our tiger here but cat doesn't have doesn't have an attack antelope method we can't say cut dart attack until oh it's not gonna work and in fact cat doesn't know anything about Tiger here and animal doesn't know anything about cat but tiger it is a kind of cut and they was all about this class and cut it was all about animal so his is a superclass of cat cat is a superclass of tiger Tiger is a subclass of cat and tiger is a subclass of animal Tiger is also an indirect subclass of animal and because like Tiger can do everything that an animal can do here so we've got this like hierarchy going from animal cut down to Tiger yeah so I really will leave it there and and to practice this it's just creating three or more classes and make one class extend the other try to think of an example and a different example for yourself where that might make sense you could think about like for example a machine car is a type of machine and a Fiat is a type of car and so on something like that anything really you could do with plants different types of people or if you've got like a employee structure or whatever beginners often have this reaction to this as I did when I started with this like what what use is it inheritance and do you really use this in real programs and the answer is absolutely yes not every program in C++ will use inheritance I've seen very very big programs that didn't use inheritance at all but they weren't actually well written programs in any case in fact a lot of C++ syntax particularly by older programmers such as myself is unduly influenced by C which is which is what C++ was built on and C didn't have classes at all it just purely wherewith functions so have a go at that define your own little class hierarchy and we will return to this a bit more in the next tutorial so until next time happy coding you