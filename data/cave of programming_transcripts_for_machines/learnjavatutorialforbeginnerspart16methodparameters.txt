hello and welcome to another beginner's Java tutorial from cave of roaming calm in this tutorial we're gonna look at passing parameters to method but in a next tutorial we'll get on to looking at sap methods and setters so I've got my main program already set up here here and let's create a new class I'll create a class called robot and let's have a method called speak so I'll say public avoid speak and this makes the robot say something but I'll just pass this out here and have it say hello so in my main method and now I can already create objects from this robot so I can say robot I need a name for the variable so let's call it Sam equals new robot and I could say Sun speak to make it say hello and if I run this so click the green runbutton there then after my computer warms up a bit it says hello now often with methods so we saw in the last tutorial that you can return values from methods but another thing that you often want to do is you want to pass values into methods because often you want to some have changed the way that the method you want to change what it does slightly depending on some some kind of the value of some variable or you want to pass some data to the method for some reason and then I look at that in this tutorial so in the case of this spiit method I might want to pass in some text and the robot then is going to read that text out instead of saying hello so let's say let's look at how you do that and basically when you when you create a method you'll notice there's there's always and these two round brackets after the name of the method and it's the same when you call the method like here this actually makes this code run here after the name of the method I get again I've got these two round brackets and these these two round brackets are actually a bit like a chute and you can throw data down the chute so here's like the top end of the chute here and this as well a chute comes out so what I could do is that supposing I put supposing I want this robot to say not hello but I don't know hi I'm Sam I could type some text here hi I'm Sam and so this is a bit like this a string and I'm sort of throwing the string down the chute if you like and don't worry we'll look at the technical lingo in a minute but here's the other end of a chute and this is going to now receive this string so I need to have a string here for this to kind of be shoved into dropped into so here I declare a string variable like I could call it text or anything I like but the important thing is say front and passing a string in throwing a string down shoot here I need a string variable to receive it and now I can use this text variable in my actual method body so here I'll just pass it to sis out and if I run that is gonna say hi I'm Sam so to give a more technical explanation what something is this is called passing a parameter to the method so this is a variable and this of course and this variable is available anywhere between these two curly brackets and I've just used it here but because this variable is declared within these two round brackets we call that a parameter so a parameter is like a variable that you pass into a method so here I'm passing a string into this method and it's appearing in this parameter and I'm just using the value of the parameter here so a parameter is called a parameter because I promise to recite something you kind of change or tweak like if you have a synthesizer you can kind of change their different frequency and you know I don't know that the way it sounds despite turning knobs and then you say you're kind of changing the parameters and this is a method parameter that changes Delana method works this is called passing in parameters and let's let's look at how you do that when an integer so if I want to say public void jump and I want to tell it how high to jump so in tight and I'll just output kind of what I'm doing here with this out just to show you doing something so I've said that this method takes one parameter of type integer and outside of outside of this method the name doesn't matter it's only like here within the method that the name matters because you need a way to refer to the value that's passed in so you need to call it something here but when you're calling the method so down here if I say some dot John the only thing that matters is that the parameter is of type integer so I've got a passing an integer when I call the method otherwise I get an error like this so let's pass in the value 7 and if I run that it's gonna say jumping 7 which is output here so I've passed that value in and you can also have multiple parameters you can say like which I say let's have public void and move and I'll have a direction which will be a string it'll be a compass direction direction and like north south east or west and I'll have a number of meters so I int distance or it could be double let's have a double double so floatingpoint value with a decimal point in it of all distance like that and here I'll say moving distance in direction direction like that and in fact I'll say meters let's say this meters so when I call this method I need to supply it with first a string and then a double value and it needs to be in this order that's very important so if I say hey Sam dot move I will need to give it a direction a string actually so let's say west and a distance let's say 12 14 2 meters and if I run that moving to a point 2 meter south space actually 4 meters to say it says moving 12 point 2 meters in Direction west so the important thing is that when you call the method you have to you have to give it a list of things separated by commas that matches kind of order of the parameter list here and the things that you pass in have to have the same type as these parameters and if you have more than one thing and when you declare these parameters here you've got to separate them by commas and similarly when you call the method and you pass in the values you've got a separate them by commas and not probably if you if you if it's the first time you've seen that this will seem quite confusing something ages to get my head around this even though it's simple in a way but just type it out and practice it and you'll gradually it'll gradually sink in you'll get Hank and see how it works now I want to mention one thing that often confuses beginners certainly confused me when I started programming which is supposing let's take an example or supposing you have a supposing I want to call Sandor speak now we know eclipses just automatically put that in for me I delete it I've got it pass in a string to speak because speak method takes one parameter of type string now supposing I have a string here which I could call greeting and I'll set that equal to hello there like that so greeting is a type string and speak expects a string so I can pass greeting in to speak instead of literally typing something between quotes here and that will work so if I run that it says hello there so I'm here I'm creating a string with hello in it some text in it here I'm calling the method and passing the string to it and then that string that text appears here and it gets output here and what's sort of confusing is that so here we've got a string called greeting and here we're outputting a string and you kind of think well here I'm calling it greeting and here I'm calling a text and what's going on there and really what's going on in this case is that so I've got here is my string this is the actual string that I'm dealing with it's the same string all the way through here but and this variable really is just a label that you used to refer to that string so it's a bit like if this was a bike this is a bit like a bit of paper that I've stuck on it and I've written the word greeting on that on that bit of paper that label so it's a Greek play so this will be a stupid thing to stick on a bike but for a string it makes sense so that's that's literally like it's literally like if you you've got lots of bicycles and you want to identify a particular one you write out a sticky paper label write something on it not write a name on it and stick it on the bike and then you can refuse that label to refer to the biting saying you know that's sad that's the bike that I've called what would you call it bike actually I've really got an idea but supposing you called your bike David it's a bit crazy then you could say that's David over there my bike so in this case this string this text is called greeting here it's like a label types stuck on this string and I use greeting here to refer to that text to say okay I mean by greeting I mean this bit of text but when it appears in the method here the method gives it its own label so the method doesn't care what you called it here it doesn't need to know it doesn't matter this method it says okay I'm going to get a string and I'll call that string text and here it's it's using that string by referring to its name which is text hopefully that will kind of help if you're confused just take a while to get your head around this but the bottom line is that this this actually is the same string that you've got here it's just that you call it by a different name in your method and the kind of reason for that really is that you when you write your class you you don't want to care about what people call their own variables like here and similar similarly if you're using a class you don't need to know what what the parameters are called to the method you just need to know their type so you can call them anything you like in your own code pass them in as long as they've got a right type and they are in the right order then Bob's your uncle so to speak and it works very slightly differently with primitive variables so string is non primitive it's a class you know like Cisco an uppercase letter here with primitive variables it's basically the same idea but it's it's actually slightly different in a way because kind of like if I have an int variable down here int value equals 14 let's say and I say some value so that will work just the same jumping 14 and the only difference is that whereas this isn't like a label or this is a bit more like a bucket a bucket called value in as much as here this is a bit of memory that actually contains this value and in the parameter list here I've got another kind of bucket that can also contain an integer and you're kind of sloshing this integer from this bucket value into this bucket height and then outputting it here so technically you know this is a value and this is a reference but I'm only mentioning me mentioning this now just because if you keep hearing this if you're following these tutorials it'll gradually become clearer in your head if you keep kind of thinking about it but for now I would just kind of practice declaring methods and passing parameters in and you'll gradually get a hang okay so in the next tutorial we're going to look at kind of example of this we're gonna look at set methods or setters and if your lecture if you've if you're following a university course and your lecturer has come forward in a time machine from 1970 your lecturer may refer to set of setters as mutaters and we're also gonna look at this which is very confusing to start with so we're going to look at set methods or setters and this but for now I recommend just practicing this a bit so join me again next time and if you're watching on YouTube please click the subscribe button to be notified when I make new videos thank you very much you