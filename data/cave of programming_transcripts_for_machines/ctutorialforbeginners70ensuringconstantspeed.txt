hello this is John from cane of programming comm and this tutorial will gonna look at how we can ensure that our game you are simulation runs at the same speed on every computer that it runs on so the moment we've got this particle explosion it doesn't look very good we can see the individual pixels here I don't know if you can see them on the on this actual video but I'm sitting here and I can see the individual pixels they don't look kind of smoky or blurry or anything so it doesn't look that great and they also form a circle that's a bit too perfect they're all changing color at the same time and they're not really doing anything too interesting but what we have got is we've got a circular explosion at least now one problem with this is kind of hidden in that you won't necessarily notice it immediately but it is there is that this is just running as fast as it can depending on how fast the loop that we've got in main the game loop can iterate so on a really fast computer this explosion will happen really fast on a slower computer really slow so what what would like is we'd like to take account at the time in such a way that this runs at a similar speed on all different computers that it runs on what we need to do is in a particle dot cpp here this is where we are actually moving we're actually moving the particles we need to make we need to move the particles every time the loop iterates by an amount that's proportional to the amount of time that has passed since last time the loop iterated so let's have a look at and see how that actually pans out I'm gonna go to main dot cpp here in main dot CPP we've got any amount of time that has elapsed since the program started running and the first step is I'm going to supply that to this swarmed update the swarm class that manages our particles so that it knows what the time is basically let's put any laps to this swarmed update and let's go to swarm dot H change the prototype here to take a integer value the number of milliseconds that has passed since the program started and in the implementation as well we'll also add that now what I really want to tell each particle as is right through it here in the swarm update method this is where we're iterating through all our particles and updating each one individually I want to give it the amount of time has passed since last time update run so to do that we need to store the time the number of milliseconds that had passed since the program started last time this update method ran and then we can compare that to the number of milliseconds there's now passed when we're running update this time and subtract one from the other and we can get the interval that as he elapsed since last time the update method ran I'm gonna go to Swan dot H here and let's give this a private variable called int let's call it last time in the constructor of Swan dot CPP here in the pot and the constructor initialization this I can initialize last time to 0 and in elapsed here every time we finished using this update method I'm going to set last time to the total number of milliseconds as he elapsed since the program started running when I first go in to update I can then say int interval equals elapsed last time so this again is I don't have a name for every a common sort of design pattern that we have while we're getting an interval and using it to find out how much times he lapsed since the last time we got that interval or it could be some other value and then where we're storing the present value at this interval oh sorry of that time restoring the kind of present time so that the next time we can get the interval again using the time that we just stored so now that we've done that we can pass the actual interval to particle update let's pass that in there and I need to go to particle to age and in the update method here let's give it a interval and in particle dot CPP let's change that as well so int interval and now all I have to do is when I'm not when I add the speed to the X&Y coordinates I need to multiply those speeds by the interval and that will ensure that the amount that we move each particle by when we run the update method is proportional to the amount of time this passed since we last move the particle thus ensuring hopefully that it will move at a similar speed on slower systems on slow system now its movement could be jerky but at least it's gonna be a similar amount of movement to what would find on a faster system and usually folk games that's what you want you don't want things to be just running a wire of a speed they happen to run out you want them to run at some consistent speed you'd rather have jerky motion on a slow system then have that game just running really slowly and it's equally bad especially for a game if you've got something that runs really fast on a fast system too fast for the user to respond to in a game so this really helps sort of sort things out a lot and so let's let's make sure everything's saved and build the project I've got an error here but I'm hoping it's gonna go away let's take a look well I don't see any errors yet so the error is gone away now so that's good let's run this and see how it looks might be a bit fast or slow yeah it seems very fast so let's go to skirt particle age particle dot cpp maybe and here were creating the speed that we want particle to move out let's just put another decimal place after the point in here to make the speed slower because I want to slow this done so we can really see what something there we go that's a lot better now we can see the circle performing so we still got quite a bit of work to do here or they were approaching the end of this now I'm sorry vit there for this tutorial and until next time happy coding you