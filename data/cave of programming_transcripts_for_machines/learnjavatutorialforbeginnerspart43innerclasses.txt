hello this is John from cave of programming calm in this tutorial we're going to look at inner classes in Java so I've created a basic class in Eclipse that has a main method and I'm going to create a new class here and we're going to give this new class some inner classes so I'm going to right click my package here and go to new class and I'll call this class robot just to have some kind of an example to work with click finish I don't want the main method in it actually and I'm going to give robot some instance data and just just again it's just as an example I'm going to give it a private private static no not private not static sorry private int ID that'll do so every robot has an ID and I'm also going to implement a constructor so that we can set the ID and to do that I'm going to right click and go to source and generate constructor using fields tick ID and click OK so I could have just type this myself but I was quicker I got rid of soup here because that's not call to super is not needed so the constructor just takes an ID and sets this private field using the ID passed in so now of course we can create robots already let's give this one more method actually let's give it a public void start method and in start I'll just put a sisal and I'll say starting robot plus ID there so now I can use that by going to my main method here and creating a robot so they equal to a new robot our possibly ID seven and then click do robot start like that ok so that's all pretty straightforward starting robot seven now let's take a look at inner classes so there's this three main kind of cases here that I can think of we've we've already looked at anonymous classes in this series of tutorials and anonymous classes are a kind of inner class we're going to look at three more cases here so in Java you can declare classes actually pretty well anywhere and we've seen in previous tutorials that you could declare class here or here the only rule is that you can only have one public toplevel class in each file and the name of this got matched the name of the file sis is robot in robot Java but I can create a I'm going to Claire a class within the robot class and let's look first at non static in their classes or nested classes they're also called so I can declare class here and say class let's say brain like this and this class will now have access to add the instance data of the robot class so let's give this maybe one method public void think sort of brain thinks and we could have a cyst out in here and say robot plus ID plus is thinking so I'm accessing here I could give class instance data itself but the point I'm trying to make is that I'm accessing nonstatic and accessing instance data of the outer robot class CA within this in a class and then I could do stuff like in my start method of robot I could say for example brain brain equals new brain and brain dot not Brian as my brother's name actually brain dots think now if I run this let's go to aperture and run it says robot seven is thinking so this this is a nested class row and in a class and classes like this what they're what they're probably most often used for is just logically grouping bits of outer classes like here the robot might be made a pervert you might have a brain and legs and heart and so on I don't know about heart but different parts of it anyway and we can we can group those different parts if we want to using inner classes and I can I can use the access modifiers like this probably should be private and that would work just fine now I actually you can also I'm going to show you something here that's a little bit weird but if you've understood what I'm saying so far basically that's that's the end of it really and in fact you can find a really good example of using an inner class if you look at in in this series of tutorials I've got a I've got a video on implementing the iterable interface in collections and if you're watching this on youtube you can find that by going to the cave of programming channel and looking for my collections videos if you're watching on udemy or somewhere else I think on udemy calm I've incorporated the collections videos as part of Java for beginners and you can find the link to the udemy course by going to WWE programming comm but in under the collections section of this series I've got a video on implementing iterable and that uses a inner class like this to implement an iterator which then can iterate through the data of the enclosing class the instance data of the enclosing class and that's a classic example of this and if you want to test your skills with this you could try implementing the iterable interface in Java maybe after watching that video now you might wonder if you can create separate classes of this brain here from outside the robot class and the answer is yes but I've I don't think I've ever seen anyone really do that the most common it is common to use in a classes like this outside of the class that they are declared in but then usually you'll have a method that would create a instance of your inner class and return it and you can see that if you implement iterable for example there isn't another weird syntax I'm just going to show you for the sake of completeness here which is that if we were to make this public like that in a table here we've got an instance of robot here and we could in fact do this we could say robot brain so robot brain is the type here we've got robot with the inner class brain let's let's call this variable brain equals and now we need an instance of the robot class robot dot and we say robot new brain I think I've got that right and I've never actually seen anyone do this so is you don't really I won't really worry about it I just wanted to show you for completeness and then we can use this brain outside of robot so I click run and it says robot seven is thinking again now once again you'll notice that when you create an instance of robot you do not automatically create an instance of the inner classes you have to do it explicitly somewhere and that's pretty much always done within the class itself within some method but you can as you can see do it outside the class with this weird syntax here and but I've just never seen anyone actually do that I don't really know why you'd need to do it and it's much more common to make the inner classes like private or just not give an access specifier in which case they'll default to a guest package level access so this is only going to work if the brain was declared public so let's save that and so yeah so that's that's inner classes and that they're normally used like this within the enclosing class and you might have a method that returns for example brain in this case this could return brain that would also be pretty typical now a second client kind of in a class are static in a classes which are pretty simple actually so we could have here for example let's say battery we could have a a static static class battery and that put brackets in and I could have a method that say public void charge it charges the battery and let's just say in here whoops get rid of that don't on that and that should be I do on that yeah there we go okay so probably void charge and it's just cuts this out in here and just say battery charging now because this is static we can't refer to this ID and by all means type this code up for yourself and and try out chapter that is the case but I could not do for example plus ID here that would give me an error unless they were to declare ID static and a static in a class can access static instance variables of and in closing out a class but what you usually use static in a classes for are it's just a it's just a way of grouping classes together so let's say in this case you've got robots and they can have interchangeable batteries so you might want to create a robot battery outside of this class and then pass it to whatever robots need that charge battery so we could do here outside and a robot class we could say robot battery battery equals new row battery and this syntax unlike this syntax this syntax is actually pretty typical and very common in Java or pretty pretty common and then we can save battery charge and then let's run this and it says battery charging so nonstatic inner classes are used where you need to group together some functionality and you need the class to have access to the instance variables of the enclosing outer class static inner classes are used let's make this public to be explicit static inner classes are used basically where you just want a normal class that isn't associated with instances of the enclosing outer class but you want for some reason you want to group it with the outer class so you could have robot battery robot dot CPU whatever you like but the point is it's grouped with robot and other than that apart from that it's really just a normal class so the static inner classes are like normal classes that just happen to be grouped with other classes and you use this kind of dot syntax now there is finally one last thing that should tell you about which is that you can declare classes even within methods and so I could say yeah like class temp I don't know maybe like that and this word have access to ID so let's give it a method public void do something like that and we could say here Sissel ID is plus ID it would also have access to stuff we declare in here so if I say a string name equals Robert Robert the robot and we could say yes it's out and my name is plus name save that and the error will surely go away what we're done oh yeah and but I forgot this will work but this this has to be final and this follows the same rules for like anonymous classes that if you have a method in an anonymous class and we've seen this before it can only refer to local data if it's final but it can refer to instance data absolutely fine and then so we haven't got an instance of this class yet but we could create one by saying ten attempt equals new ten that's creating instance and then we can say temp dot do something and when we run this start method of course now we are going to do all this we're going to create this temp type and declare an instance of it and run the do something method so I'll run this like this batterycharging there we go my name is Robert all that stuff so again this is sometimes useful it's not completely uncommon maybe it's most often useful if you need a instance of a class to pass to another method and and for some reason you don't want to use on an anonymous in a class which is which you could do I you just want to you just want to Matt you just want a class that you only want to use in this method crate instance of it only in this method because you can't refer to this now outside this method and you can't make it private or public or protected or anything either because the scope of this type as well as these of course the variables is between these brackets here is scoped to this method so that Sena classes in Java this is actually it's actually relatively simple and if it seems confusing that's just because you haven't practiced it and I'd recommend typing out some code and trying to think of some little scenario yourself and create create a class of each different type the nested class like this the static in a class like this and I kind of I'm not sure what to call this but kind of a local class as well and you'll soon get the hang of it and if you want some advanced practice try implementing iterable in Java and you can watch my video on that as I said before that's it for this tutorial and there's going to be more tutorials in this course of course of course it'll be more tutorials in this course certainly and I plan to tackle enum and serialization and stuff like that so stay tuned and you can always find out what my latest videos are by going to WWF of programming comm and you'll find all my latest stuff on there so let's save this time and until next time happy coding