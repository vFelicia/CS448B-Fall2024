hello this is John from cave of programming and this is another video in my JavaScript and nodejs of for beginners tutorial and in this video I just want to talk a little bit about the history of JavaScript so I looked up when JavaScript was actually devised and created and apparently it was about 1995 so I started as far as I remember I think the first web page that actually created would have been 1997 and I started looking at VB script at the time and JavaScript pretty soon after that so I think I started using javascript fairly soon after it was after I actually came out now in the last video we looked at this identity test operator and I don't remember that identity test operator being there in the early days of JavaScript I couldn't actually find out about the history of it in the 10 minutes 5 10 minutes I spent searching I didn't manage to find out when it was added to JavaScript but I don't remember it being there if it was there I don't think many of us used it that's for sure but I think it was added to JavaScript quite late on now JavaScript when it first came out was a scripting language that was intended to add a little bit of functionality to webpages so you'd write a web page in HTML a kind of tag based language that we'll look at a little bit later later on in this course and that represents you know how your web page looks and then in the early days sometimes you wanted to do you wanted to add just a little bit of functionality to your website and typically you'd be either creating an image rollover which were popular in the past and that's where you moved your mouse over an image and it changed when your mouse moved over it or you'd be adding some validation to a web form see how a form people could enter information in and you wanted to make sure that they that they could only enter you know in from it was appropriate like that they didn't type he didn't tie letters into a telephone number field or whatever and of course that that's not ironclad validation a hacker could get around it but it was help it was it was and it is helpful for the average web user so javascript was at first used for that sort of thing and typically nothing much more complicated than that so it you know it would have been strange under the circumstances but if JavaScript continually forced you to convert one thing into another like the value that you get back from a form in a on a web page that's is that coming back as text or as a number probably text and then if you want to compare it to a number you don't have to convert it so the equals equals operator was implemented generally to be extremely flexible in JavaScript but what what's happen I think is that as JavaScript has moved towards being a generalpurpose programming language then this equals equals operator equality test operator has just been felt to be too flexible too helpful and we we have this stricter identity test operator has been added to JavaScript and in fact I think it some people say that the equals equals operator is now the evil twin of the equals equals equals operator so they say that you shouldn't use it unless you really absolutely need it and I concur with that really I think now use the identity test operator with three equals signs wherever possible and generally avoid using the equals equals or their for that matter they're not equal preferred a version with more equal signs because it's a stricter test and it doesn't do unnecessary convert conversions and these conversions you might sometimes find them find it a bit hard to even predict what they're going to do you know it's letting the language get out of your control a little bit it's better to use something stricter so that you're sure of what's actually going on wherever possible now the path from a sort of lightweight silly little programming language used in browsers to a general powerful programming language has been a long and hard one for JavaScript the problem was that in the early days every browser had its had a different implementation of JavaScript and in fact things that worked in one browser didn't always work in another and that is still a little bit of a problem but much less of a problem than it was in the in the early days and often now we're not even writing JavaScript in a browser you know here I'm starting off this course I'm we're doing it on the command line to start with but that was an obstacle to improving JavaScript because if someone let's say the people who are in charge of Internet Explorer which was for a while a very popular web browser if they added some new innovation in JavaScript to their browser the people who were in charge of the netscape browser or whatever they you know they didn't necessarily had the same thing you know i so it was just a mess and what was what were one early attempts a kind of paper over the cracks was people created they created sort of javascript api Zoar libraries like jQuery which gives you a sort of common interface that papers over the cracks so you use jQuery it's still very useful today and it can do much more than just papering over cracks but one thing it does is it gives you a kind of standard interface that works the same on all browsers you know you work with jQuery and it kind of works with JavaScript behind the kind of scenes it is just an addition to JavaScript but it makes JavaScript a bit more seamless and there are also things like CoffeeScript that sort of compile to JavaScript and again give you a sort of uniform way of dealing with JavaScript but what was really needed was a kind of universal language standard for JavaScript and that developed in the form of this thing epimer script a comma stands for something like what does it stand for actually let's take a look I don't want to tell you the wrong thing here echo take a look here ECMO stands for just I'm going to tell me is it computer manufacturer something computer manufacturer all right let's just tie this into Google what does ECMO stand for Europe I thought it was European but I didn't like to say because I was thinking European really usually this stuff comes out of the states okay but European computer Manufacturers Association incredibly so this this ECMO script is a standard for JavaScript essentially it's not a language in itself it's a standard foreign language and we can see okay the fourth edition was abandoned but the fifth edition came out at some point and that kind of took and then you know we see major progress around you know sort of like 2011 2015 and so on you can see that yeah ad strictmode in 2009 so anyway now this has kind of changed the dynamic that's going on here because now people who implement JavaScript in a browser sort of are going to have to pay attention to this Xmas standard and hopefully they'll all implement the same thing so it's a big step forward to creating a unified coherent sense of what JavaScript is that will be supported by all major implementations and I guess it probably helps as well that at the moment the Chrome browser is dominating the scene so what chrome does other browsers are going to have to play catchup way so now we've got this unified standard for JavaScript and a part of it I did I think in a maybe 2011 but I'm not sure don't take my word on that is this equals equals equals operator that helps make it a more strict sort of a language okay so I just wanted to talk about this a bit in case you wonder why three equal signs just to check equality and also it's important to know by this Xmas standard a single equal sign is used to assign values of course equals equals to equals signs that was used to check equality but I was felt unsatisfactory and now in the second script standard we have this identity test operated with three equal signs hopefully there's not going to be one with four equal signs that would just be too much all right so that's it for this video until next time happy coding