hello this is John from cave of programming calm and in this tutorial we're going to start looking at handling exceptions in Java and I'm only going to show you the kind of simplest case here and we're going to look at more complicated stuff in future tutorials so exceptions are a major part of the Java language and one of the parts that in some ways is least well thought out and unfortunately they can make your code look at not look a bit ugly sometimes see I'm sort of have to do the best you can with them but one exception is is it's part of an error handling mechanism and that rod illan talk let's just get straight into an example so I'm going to show you an example that has to do with file handling and don't worry for a moment about the Excite classes that I'm using here because all I really want to do is illustrate handling exceptions and we will get more into handling files in future now in Java as an object called a file is a class called file and I'm going to declare a variable of the type file and set it equal to a new file object and to the constructor of file I can pass the name of a file that I want to deal with and you can imagine that we might be about to read a file or write to it or do something else with it so let's just say here test on text and I'll add the import for file with ctrl shift o now if you want to read the file let's say the next step could be to declare a file reader object so it's a classical file reader and let's just call this fr and I'll set it equal to a new file reader so usually it's bad practice to make variables that only have one or two letters in but in certain circumstances it's it ends up being kind of acceptable and makes your code cleaner and usually file reader is something that use as an intermediate step to reading a file so you don't refer to it much later on in your code or we won't go into that now but just for a moment I just want you to look at how this works in terms of exceptions so I'm going to set this fr variable equal to a new file reader and I'm going to pass it the file object but I declared here so I'll pass the file object to the constructor and again I'll add the import with ctrl shift o and now this is what I wanted to show you because we've still got an error and whenever you see an error like that the important thing is to have your mouse over the error icon at the left here and here we see whether there are two errors here one is that it says F R is not closed and I'll leave that for a moment but the top error is it says unhandled exception type file not found exception and exceptions are actually they're just ordinary objects except that they derive from a class called exception and you use them in a particular way now whenever you get an exception an error like that and it tells you unhandled exception there are two ways you can deal with it and click on the arrow and you'll see the two ways so the first way is this bad throws declaration and let's just click that and see what happens so what's happened is it's said originally that this and had an unhandled file not found exception and when I went to add throws it's actually added this to the header of my main method it says throws file not found exception and that fixes the problem so if I save this and I run it bearing in mind that we haven't got a test X so this file doesn't exist if I run it I get some red text down here and when you see red text like this this is called a stub trace or yeah a trace and the important thing to do is scroll right up and look at the top line and read it from the top line down so here it says exception in thread and main and Java IO file not found exception so this tells us kind of what kind of error we're dealing with and then it's got some more specific information here the system cannot find the file specified and often you will get more specific information and then if we look down a little bit we just go down a bit finally we come to a point where we've got a little a reference to some code that we've written ourselves so I've created at Java myself it's this file here and it says patent doc Java 13 which means line 13 and I can click on that error and I can see exactly where the problem occurred so now I know what happened I know that the problem was test X wasn't found and it occurred at this line 13 on in app dot Java and an exception as being thrown and what that means is and that basically we've ended up with this kind of red text and a reason that this has appeared down here is because we think of this method here as it encounters an error and it reacts to the error by throwing an exception it's as if it's thrown an object straight out of itself and execution of my program has stopped at that point and the exceptions been thrown out of after the main method and that was possible because it's got this throws file not found exception declaration here and when an exception is thrown out of the main method you get a kind of stack trace like this with red text that tells you what the problem is let's take a look and not a method of handling an exception and what I'll do is I'll just right click and I'll go to new package and let's call this demo one and I'll just put this that Java into demo one and I'll create a new main method here so I'll rightclick go to new class I'll call it up again and I'll put it in a package called demo two and we'll look at a different way of handling an exception here so let's copy this stuff and I'll go to my second app and I'll paste this in here let's get rid of these comments which always annoy me and I'll do ctrl shift F to format that and now let's look at the other alternative I'll just rightclick and clearly this error I'll hover over the area and again it says unhandled exception so I click the error and I go to surround with trycatch and this is called this whole thing here is called a trycatch block and what this is doing is it's saying try to do this code and if that code throws an exception then go into the catch block and if this throws an exception we will immediately go into the catch block so if you put other lines down here they wouldn't be executed if that throws an exception but if it doesn't throw an exception of course you will just carry on executing sequentially line by line but soon as you throw an exception it's it kind of throws you straight out of what you're currently doing now in this case we're not throwing the exception out of main what we're doing is we're catching the exception so here we can put code which will be executed if that exception is thrown and the default here is to say e dot print stamp trace and the exception is declared here it's like a probably looks like a parameter to a method but it's not and this exception can be caught by this catch block of the try catch block and we're saying just print and stat trace without exception and if I run that it looks much the same as before and again we can click on the line and find out where the exception was thrown if I were to create that file in here it's just right click and go new file so rightclick the project folder which is the working directory of the program and I can just create a test of text and click finish so now we shouldn't throw that error and if I run the program now we don't get an error we don't get the far not found exception being thrown because the file is found now so the exception is only thrown if an error condition arises I'll just delete that again and you can put whatever code you like in here you don't have to print the stack trace so by default you get this put in and it's very very handy but you could use anything you like for example I could put this out in here system dialed or print Ln and I could say let's say file not found and it's two plus and let's use my file object up here and I'll just do filed up to string which I think will give us a nice representation of the file I'll just run that and it says file not farm test dot text so you can handle an exception any way you like and if I had code in here the safe side continuing and let's put common here this will not be executed if the file if an exception is thrown so if an exception is thrown that line just does not run so it immediately kind of from here if it throws an exception immediately goes into that catch block but if you caught an exception then you can continue so I can say here finished and if I run this even though we've got an exception being thrown we're catching it were handling it and then were continuing with our code and that this is quite a lot to absorb but as usual I would say if you typed it out yourself you'll really quickly see how it works and it's just a matter of getting used to the terminology throwing an exception catching an exception and just typing it and seeing how it works and you don't really need to puzzle over it too much and because typing is your kind of magic shortcut to actually understanding this stuff I find by one throat I want to show you just one more thing here so I'm going to create a app three let's close this well app an app in demo three and I'll rightclick and go to new class let's call this app again and oh I forgot a package that's quite a new package a rightclick and go to new package I'll call this demo three and I'll just drag my anti Java into this and once again I'll have some code in here that tries to open a nonexistent file and this time what I want to show you is I'm going to have another method in here and because I haven't got a instance of my app class I haven't gotten up objet is nowhere in here does the same new app if I want to declare a method here and use it at the moment it would have to be static so empty is a nonstatic method of a class then you have to do new on that class somewhere and rather than do that I'm just going to say public static void open file so I've got a new method here and I'm gonna cut this and put it in this method here and here I'm going to call this method so in main which is the entry point of the program I'm going to call Open File like that and now let's well again if I were to click the error and I were to put a trycatch block in we could just handle it here and that would be the end of it but if I put throws in so I click and I go to add throws declaration it's going to add the throws declaration to the method I'm in so now open file throws file not found exception and now I've got an error in main and because I've got a handle ID section somewhere or I must throw out a many ultimately so this open file is now itself throwing the exception so the exception starts and file reader it gets thrown instead of being caught or handled in a trycatch block it gets thrown out of open file and now I need to either throw it out of main or catch it here and for example I could just go to add throws and I get throw a thread clean out of my program in effect and I run that and it's a sense before or another possibility is again two throws and declaration on main and I handle it now in main I go to surround a try/catch and again I could say something like this out could not open file although it's always good when you when you have an error to have a specific a message as you can to your user if the user was intended to see this the user should never see a stacktrace like this unless you want to horrify them because all users all kind of nontechnical users and even technical ones are horrified by stack traces so don't let your application produce a stack trace if you intend it to be distributed and used by other people and here I would make it say couldn't open files such and such and I'd do something like maybe pass the file name into here so I wouldn't let it just say couldn't open file because that's too vague a message let's just put quick note here yes this message is too vague but anyway the point is that I can if I throw the exception out of open file I can then catch it further up the stack and catch it in main because we think of the methods the method calls as being like a stack well one calls the other which calls another which calls another and it's like this a stack of methods and you kind of take the methods off the stack and run them one by one or at least the java virtual machine does so same way okay I'll run this open file and then I'll carry on with main and so on anyway that's all for this tutorial and it is a lot of stuff but if you play around with it you'll see it's not that complicated and we're going to move on probably in the next tutorial we'll move on to looking at some more exception handling stuff and probably will look at different kinds of exceptions and stuff like that so that's it for this tutorial and you can find this code on Cave of Programming calm if you go to the front page at least in a moment and look down and see links to pages for these tutorials where you can see the source code and I've also got courses on programming desktop applications and stuff like that so certainly check those out ok and that's it for today and until next time coding