hello in this video we're just going to take a little bit of a look and the error message that we produced in the last video so hopefully by now you've at the very least typed out this code yourself and I would strongly suggest at the very least experimenting with this see what you can change you know to make you do something slightly different see if it works as you expect and ideally you've written some program that Kanta gets user input and converts one number in one unit of measurement to some unit some other number in some other unit of measurement or you've invented some exercise for yourself that's similar hopefully you've had a go at that maybe compare 2 miles to kilometers and you shouldn't really encounter any great problems with that miles to kilometers would be basically the same program as far as I can see except that we don't need to subtract anything would just be multiplying it by something I think it was one point six zero nine okay so I just want to show you this thing that's appeared in in a console if I run this and I enter something that isn't a number hit return then we get this error trace this is actually called a stuck trace and the stack is basically how Java keeps track of one method calling another method in other words one method runs and it uses other methods so other subroutines and they sort of all make each other execute in a kind of a well kind of a tree type thing really but let's not worry about that for the moment because we're getting a bit ahead of ahead of ourselves really I just want to begin to familiarize you with this because you're gonna see a lot of these and it looks very intimidating to start with when you get errors in Java they can look quite disturbing so one thing to say is regarding this program I don't think there's any there's not really any way we can fix it at the moment using what we already know at this point so that it can handle in pot that's not a number in a way that's more elegant we totally can fix that just not with what we know so far as far as I can see or not easily so we're not going to worry about it for the moment we'll look at it later on how we would fix this sort of thing but when you see a error message like this very often the first and the last lines are the most important so if we look at the top it tells us what the basic problem is the problem is we've got a Java util dot input mismatch exception now this is a input mismatch exception is actually a class and what we have here is this is showing you that we say that an exception has been thrown and we'll be looking at that later on but you could guess from the name of it input mismatch exception that there's some sort of mismatch with the input that we've entered which is of course the case we entered letters when it was expecting a floatingpoint number the last line in this case actually gives us the error it gives us the line and the file where the error occurred so with really big stuck trace is something that you can end up doing is sort of looking down them for the first line that it mentions this actually in your own code that you've actually written you know so you end up starting from the top and you're looking down it and you're looking at files that you haven't written yourself and eventually you come to one that you have written yourself and that's where you can start investigating the error in this case there's only one line referring to our own code and it's right at the bottom and it's here at Java line 13 so if I click on that it will actually take me to the line there we go is highlighted it and that is where the error occurred so we did scanner dot next float and that was expecting the user to it to input a float but the user me in this case inputted some letters so it threw a wobbly you threw an exception in fact technically speaking wobbly is not a tactic or term okay we've also got a warning here in this program and if we click on it it says resource leak scanner is never closed now that's not a big problem but we shouldn't leave warnings in our programs what it what it means is well it wants me to all it wants me to do is what I'm about to show you which is this let's create a new line in our program in fact I can do this immediately after I've used the scanner since I'm not going to use it again for anything by this point in a program line 14 here I've I've just create a new blank line of course but I'm not using the scanner anymore so I can write scanner dot closed and then the warning goes away and that makes it happy so what scanner dot closed does precisely I'm not completely sure but I don't think it's important that important but it will make the warning go away so I advise you to do it closing things that we've opened in general ease in general is very important in programming in this particular case perhaps not so important but in general it's a good thing to do and what we're closing I suppose is is where we've got something that scanning user input trying to get user input and scanning it and trying to find out what's in it that's what scanner does it in this case it's scanning system dot in trying to get stuff from sisterin system not in and it's trying to turn it it's looking for a number in that user input basically and it didn't find one and by closing it I suppose we're closing I guess system dot n I'm not really sure but it doesn't matter okay so we know where the error is we can't fix it at the moment we know that if you enter letters instead of a number it throws an exception and we're going to be looking at exceptions later on but for now we'll just leave it as is let's try it again now and check that it works there we go still working okay so until next time happy coding