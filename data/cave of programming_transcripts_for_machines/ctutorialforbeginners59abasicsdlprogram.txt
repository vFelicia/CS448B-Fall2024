hello this is John from kale programming comm in this tutorial we're going to set up a project and uses the libraries that lie that I talked about in the last video which hope hopefully you've now acquired one way or the other and if that was the struggle I do sympathize because sometimes it is if you're using Linux especially on the Mac but hopefully you've got up and sorted out so because I'm on the Mac here I'm going to be using my my dot a library and I'm going to be using the header files I downloaded so I'm using Eclipse as well and is this is going to be slightly different if you're using code blobs or visual C++ or another IDE but all C++ IDs are the same basic ideas because it's still C++ after all it's just that you might have to Google for instructions on how to do this for your platform let's create a new project so I'm going to go to file a new C++ project I've actually got a choice of compilers here I've never used this cross compiler sounds good but I'm staying away from it for the moment going to go to the Mac compiler and a hello world C++ project okay and let's call this SDL basic or something I would call STL test but I've already created one of those for my own purposes so let's call it STL basic click finish now yeah let's let's add the path paths to the library and header files first so I'm going to right click project here and go to properties and I'm going to go to c++ build let's expand that and at the top here so again this could be different in different versions of eclipse and it'll be different for a different IDE but once you've seen how this works here you can apply this to any IDE but you might need to do a little bit of googling so here I can configure my debug release targets and I can also set things all configurations so I'm going to change to all configurations here because I want this to work whether I'm compiling a debug or a release version of the program the difference is the debug version contains extra symbols which slow down the program a lot but I helpful if you're going to use the debugger which we're not in this tutorial but but you could do so so we go to all configurations here and I'm going to go to settings and I need to tell eclipse which is in turn is going to inform my program well it's going to mean for my C++ compiler where to find the header files so let's go to includes here down here and I need to add an include path and the include path is it is going to be the directory where I put my header files so on for me here I'm using the Mac and I use this mac ports thing to download this and it put my header files add to Google for to find out where it actually put the things but it put them in let's do it Asturia it put them in user local include so let's go to CD a directory check though really there SDL to here are my header files and so I need to put this directory I need to tell Eclipse here to use that directory to search for header files let's go to include paths click the green plus sign here add that directory in like that now I need to tell Eclipse were to find the SDL where to find STL libraries so let's go to libraries here and I need to add the directory containing the libraries to the library search path here it says elder because it's going to supply a help elf flag to the compiler in this particular case for this get a set up which will tell it what it will add an extra library path for it to search so let's go back and check where my libraries are and that they are in use a local Lib so this directory here if I go to that and then the libraries that the library that I need is Lib STL dot a and yeah I think that yeah that's right and to run my program is going to need live STL die Lib but somehow my system it finds that anyway it's possible that you may you may need to copy or des Eaux or that DLL file I don't know depending on your platform into your programs working directory but or into a standard directory on your system like Windows system or something like that but on my system it found this die lib automatically when I when I run the program so we don't need to think about that for the moment so I need to tell eclipse to search this directory for libraries let's copy that and I'm going to click library search path going to click the green plus here and add in that directory now I need to tell it what library to link with and I need to tell it to link with this live STL to dot a library on Windows it will be STL to Don Lib now although this is called Lib SDR to dieter's this convention that you don't mention the lip when you're specifying libraries and you don't mention the dot a you just mention STL I didn't I'm not sure how this works on Windows probably you just have to tell it to lean with STL you might have to put STR to Lib so you can even try both and see which one works I'm not completely sure it's a while since I've used Windows but I'm going to copy that STL bracha just type it click the green plus by libraries and put SDL in there so like I say on Windows I think you need to specify STL but in part possibly it could be STL to lib I'm not totally sure so but one of those is going to work hopefully so now let's click apply in let's click okay so now my program knows where to find the includes and knows where to find the libraries let's just build this project and see if we get any areas at this stage yet so that this is fine and we can run it it's just a hello world program that runs on the console right now now let's add an include up here let's say include and I use the angle brackets because I won't wanted to look in a standard position for my header file I'm going to say include SD L 2 dot H and that file STR 2 dot H must be present in that include directory that you just specified let's save this I think I'm wrong there I think it's STL let's let's actually just check here so let's go to use a local include so although I downloaded STL SDL yeah it's actually just SD l dot H okay that's why I've got that warning symbol there which is very handy okay so we've got SD l dot H included now that should also work you should be able to build it and run it if you've got that the header the include directory specified correctly now let's try calling a couple of STL functions just to check that it's work so I've got a little program that I already set up and I'm gonna just call this SDLC knit and SDL quit so I've got ice DL in it we're telling it with this constant which is in that STL header file to just initialize graphics mode so let's let's type this out let's say if STL be knit and we've got STL in its graphics cello this sorry STL innit video as you can see I don't remember this well I've done this several times but unless you do stuff tailing day out a while for me anyway it doesn't stick in my head and this this function is going to return a value less than naught if it doesn't succeed that's why we say if SDLC nets brackets STL got a spell wrong in it video is less than naught then we need to return we can return as say one from our main subroutine here that's that's a good thing to do because usually you return 0 to indicate success for a C++ program and anything else is considered an error code but when we're going to be running this program by hand anyway we're not going to it's not like we'll have some system that will run this program and check its error return code so let's put in the SC out and STL in it failed endler and after that let's put if the if doesn't execute and we don't return here we can put STL in it succeeded and after that to shut down the STL system we call STL on the score quit pay close attention to the capitalization so we've got capital STL on the score and capital letter at the beginning of the subsequent word or the rest of its lowercase so yeah there's no fixed condition about how to separate words or break break up class names in C++ and they decide its prefix tough with STL and an underscore which is fair enough and then capitalize the first letter here so we should be able to build this program and run it and if you're using a different graphics API like Allegro or something you should be able to do something similar you should be able to initialize the system somehow and and then D initialize it with some quick type function and you can easily find tutorials for example if I set for Allegro tutorial I haven't done this at least for many years but stuff is going to come up you're going to find stuff that will show you how to create a basic Allegro program for Allegro we've got apparently Allegro in it and you can bear that we've also got some sort of yes and we've got some sort of function that closes down Allegro so it's the same for pretty much any graphics library you just need to get whatever the most minimal program you absolutely can run you need to get that running and building basically at this stage so this is a very very minimal SDL program it doesn't nothing at all but is going to test whether we can successfully link with the right library let's try building that so we build it and we should see any errors if you do see errors then something's gone wrong you're not linking with the right library or you've specified the wrong path your library or something like that so you have to get past this stage if you see any areas that are really peculiar that you totally don't understand absolutely put them in Google and you could also add STL in there for example and see who else has got those errors because someone will have so you're aiming at this stage to get a buildable program that calls you know at least one or two STL functions now let's run it and it should do anything you should just quit so it says STL succeeded we expect to see that success message if if we get in it failed here you could try getting the return value from this function and then doing some googling to find out what that means usually this this won't fail if it does I'm afraid you're on your own I don't know why it would fail and and if it does you need to get into Google I'm afraid and do some googling you know look for STL in it failed check the actual error code from this get the actual integer that it's returning print it out and try to Google for that code you know STL in it error code and look for what it actually means if you run the program and you get a message about some dynamic library not being found then somehow you need to make sure that your program can load the dynamic libraries it needs to run so on Windows you could try putting the dot DLL file in the same folder as your actual program where it's actually compiled or try putting it in a Windows system directory or something like that on Mac again on the Mac or Linux you probably want to make sure that your dynamic libraries are in some kind of standard folder and if you still can't get it to work then again it's a question of going to Google and googling for stuff STL dynamic library location or that sort of thing you can on Linux an amount you can also use various tool was to find out what dynamic libraries your program is trying to load from which directories so again if you google out you'll find information about that but you need to get to the point before going on to the next tutorial of running a program like this that English Eliza's in quits your graphics API and can actually display some message to let you know that it has succeeded at least in initializing the system and then you can quit so good good luck with that if it doesn't work straight off then do persist with it because believe me as a C++ program you're going to have to be persistent and you are going to find yourself at some point with C++ googling for information about error messages but it's worth persisting with because these are this is not theoretical physics these these are not property or philosophy this these are not problems that are insoluble whatever problems you get they can be they can't be solved one way or another it's just you have to be persistent enough to figure out how to solve them so don't don't throw up your hands in despair you know usually you can solve programs with an hour or two of googling at the worst in the worst case that ends up being the thing that takes you multiple days and what I usually do that is I try to look at it for like an hour a day or something until I finally solve the problem but those are the worst problems unfortunately and it's a lot more difficult when you're beginning and you haven't got experience to solve problems and I used to sometimes spend a couple of days just trying to fix one bug but I was a bit in my approach so if you really try hard to be systematic it really really does help a lot so I'll leave you with that and good luck with that I hope you succeed in getting some graphics API that can do pixel access initialized for your system and in the next tutorial we'll look at putting together a basic STL program that actually can put a window on the screen and allow you to quit Graham closed the window so until next time happy coding you