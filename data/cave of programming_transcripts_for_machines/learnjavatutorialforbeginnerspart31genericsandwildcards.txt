hello this is John from cave art program calm man in this tutorial we're gonna look at how to use the wild card with generic part parameterize classes or parameterized however you say so this is a quite advanced topic which you can definitely skip if you just want to get to grips with really basic Java and future tutorials we're going to return to some more perhaps more important topics but nevertheless this is a useful thing to know and this seemed like a logical place to put it in this course so let's take a look and now for the purposes of this tutorial I'm going to create a couple of classes up here let's have a class machine which of course implicitly extends object because if you have a class that doesn't extend anything in fact it extends the object class that's object with a capital o and I'm also going to have a class as maybe some kind of machine so camera will do which is a kind of machine and that's a camera extends machine ok now we saw in the last tutorial some example examples of parameterised classes of generic classes that can work with any type of object and you have to specify the type of object when you instantiate the class so an example is a ray list but if you want to store strings in an in an ArrayList you have these there's these kind of diamond brackets and you put the type of thing that you want to store in the ArrayList here which is string in this case and let's call that list and set that equal to a new array list and before Java 7 I have to say string again here as well so let's just do that and I'll have the import for a realist now there's that's pretty simple but there's kind of something that tends to catch people out here regarding the passing of this to a method as a parameter so let's take an example there I'll create a public static void show list method here I mean I'm just making it static because we don't have an object of the class up so to be able to call this method without doing new map it's gonna have to be static and here I'm gonna say show list and I'm going to change the list so that it takes as its argument a an array list of strings just like this and it's called that list as well and now I can pass that my ArrayList of strings and show list code for example just iterate through the list and say for string string a safe value in list then I could just do this out on that value like this so that should all work and if I had some strings here list I had let's say one and I should do the trick and I just run that and see what happens let's just save anti Java so it goes has one so that's really straightforward actually if you've got an ArrayList holding strings or whatever and you want to pass it to a method it's really easy to do like you just stuff to remember that the type includes the type parameter there now there's a bit of a complication here let's take a slightly different example that's made this an ArrayList of machines so I've got a machine class up here and actually that's also good fat a I'm going to rightclick a machine and I'm going to go to source generate string and let's just create a two string method here and I'm just going to return something that lets us see that it is a machine I say buy a machine like that so now if I change this to machine as well I can now add machine objects in here it's a new machine and it's up two of them although they're going to be identical because machine doesn't have any doesn't have any instance variables at the moment but I was fine now as long as I change this to machine as well we have no problem I can run that and well once I fix the errors because yeah this has got to also be machine here and that should be fine so let's run that and there we go we're putting contents of the list and now supposing you have another ArrayList here which contains a subclass of machine like camera let's let's give camera a two string metal as well so we can distinguish camera from machine and I'll just say yeah ima camera and let's copy this stuff and I'll do ctrl shift after format that and it's call this list 1 and this this 2 and here I'm passing this one and now instead of new and this gotta be this one as well and whoops and that down here will cook Annapolis so now I'm going to pass new camera to this list here like this and then I'm going to just carry on as before passing this one to this function so this actually this doesn't have to be list 1 so this is the same program as before it's just I've created another list and added cameras to it now that runs fine just as before but now the temptation is to thing here well what if I want to pass a list of cameras to this method because the temptation is to think that ok a because because camera already should be camera because camera is a subclass of machine then you sort of think well ArrayList of cameras must be a subclass of ArrayList of machines and anything well surely here I can pass this to to this method this method accepts an ArrayList of machines so I should be able to pass an ArrayList of cameras shouldn't I and that's where you were you had the problem because in fact an ArrayList of a child class type or any more broadly speaking any parameterised class which is past a type parameter of some child class type is not a subclass of a of the same parameterised class with the parent type of class as its type parameter so in this case here machine camera extends machine an ArrayList of cameras is not a subclass of ArrayList of machines so you can't pass it to this method but it would seem reasonable that we shall be able to somehow pass because I would polymorphism means I could I could happily add cameras to a list of machines and you think well surely I should there should be some way that I could pass an ArrayList of cameras here to this method and he further is not the simplest way to do this is to say here question mark and the question mark here is a wild card it's called the wild card and it's context and you read this as ArrayList of unknown type or more broadly speaking you notice it in such a class of unknown type and this this wild card means you can now pass an ArrayList with any kind of type parameter to this method so this line is final now the disadvantage is that then you can only treat the items in the list as of being a type object this object is the ultimate parent of all classes in Java as object to capital though so you can't now call any I can't call any camera or machine specific methods even if you pass in a list of cameras or machines but it does allow you to pass any kind of ArrayList in here so this code is going to since I am a camera because I'm passing him cameras here or of course if I passing machines I am a machine and this works because the objects superclass is the is a superclass of both camera and machine and it has a two string method that enables system dial to print an end to work so now the only way here you could call camera specific methods that say are machine specific methods is if you were to cast as we saw in it in the tutorial you could that then tutorial on down casting and on casting if you know that this is a list of cameras let's say you could down cast this object to a camera object and then you could call camera specific methods but when you get the objects directly out of the list they're going to be a type object because you use the wild card here and you don't know Java doesn't know what type of thing is going to be in our list it could be any kind of type of thing now if you still with me on this there's another couple of interesting things that you can do with these wild cards and one is you can specify an upper bound to the wild card and so let's say I want to pass to this method an ArrayList of machines or an ArrayList of any sub type of machine and that could be useful because let's say I've got a machine as a machine as a method here and say public lorry to start and it's just puts this out here and say machine starting so machine has a a method that we can call and supposing I want to say well whatever we pass to this method is going to be some kind of machine it's not necessarily going to be a machine it could be a camera or anything that extends machine you can use an upper bound on this wild card and syntax life is fairly intuitive you say question mark extends machine and of course I'm talking about the Rae list and machines and cameras here but the stuff I'm talking about here applies to any parametrized classes and any kind of child in parent classes now that's going to work just as before says I am a machine but now I can actually get machine type values from my list so if I say that there's no error and in fact if I do a get on this list my list I'll get I I can actually get machines from that list currently which is one doing in this loop actually so here I could say valued or valued stopped on the other hand if I pass in a list of cameras so that's going to work in same machine starting if I pass in a list of cameras that's going to work as well so it's calling the camera to string method and it's a machine starting because camera is inherited that's starting method from machine I didn't override it camera which is why it's a machine starting but let's say camera has a specific method a method is specific to cameras like public for either snap and let's say he SS out snap she's taking a photo now I can't in here core value double snap because all I can call of machine methods because the reasons clear if you think about it because for Java notice that this list that's passed in contains some kind of object that extends machine but doesn't know which object you know and a method object so extend machine here could have any kinds of methods and Java doesn't know this is got no way of checking what methods it has all it knows is it's some kind of machine so you can add for call machine methods and slightly slightly less useful but perhaps worth knowing about this you can specify a lower bound here I could say and say the wildcard I could say super camera let's say and that means that whatever I pass to this method let's call it show list to whatever I pass to this method now has to be camera or a superclass of camera and the trouble with that is super classes of camera codes have they don't necessarily have a camera methods in them so again when you would trade through the list you're really back to having to treat these as objects so the only value really suck on called camera or machine methods here but I can I can might use the two string method because leave an object has a two string method so let's pass in here I could pass me the list one all this to doesn't matter because this one is full of machines which are a super type of camera and this two is full of cameras which is is camera so that this is kind of an upper bounds of saying that this could be camera or a super type of camera and this could be machine or some type of machine so this is going to work as well so my second method that works fine saying I am a machine down here but again if you wanted to use specific methods of camera or machine then you would have to know yourself what kind of type of thing was in this there a list they need have to cast cast down down cast in this case to the appropriate type either that will use techniques like using you could use get class or instance off which we will probably look at in a future tutorial so that science is a pretty confusing topic and I think I got through I don't know how many years many years of being a professional to have a programmer both permanent guy in a contractor without actually knowing this stuff it's only recently that I have looked into this and this was only idea that I think him Java five or something like that so this is not a vital topic but if you want to know what a wild card does that's the answer and it's just just parentheses here let's just copy that and create a final version of that just use a wild card by itself so this code is going to be on cave or programmer cave of programming comm and you can take a look at this and I'm inspector your leisure if you want to so that should work as well okay and that's it for this tutorial and we covered so we covered like basic usage of generics in the last tutorial which is really vital knowledge and this stuff really is just the icing on the cake and in a future tutorial we will also cover creating around parametrized classes but since that's something that you very rarely have to do I'm going to leave that for a few tutorials down the line and we're going to return to looking in some more basic fundamental things in core Java so that's it for this tutorial join me again next time and next time you