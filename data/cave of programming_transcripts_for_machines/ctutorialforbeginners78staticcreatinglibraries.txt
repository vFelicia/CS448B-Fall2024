hello this is John from cave of programming calm in this tutorial we're going to take a look at creating a static library in C++ so if you've got a bunch of classes or functions that you want to reuse in other programs of course there is the easy option of just copying your code over and you can do that in Eclipse just by rightclicking copying and pasting between your projects but another thing you can do is create the library of code and you can even then distribute that library to endusers you know to other programmers who can use it in their code if you want to and there are two kinds of libraries there are dynamic libraries which on Windows have the extension DLL and if I remember rightly it's gonna be dot s Oh typically on a UNIX type system and erasure there are also static libraries which have the extension dot Lib on windows last time I checked and it's gonna be usually dot a on a UNIX type system like this one which is the Mac dynamic libraries are that they're shared between programs and are loaded at runtime and you put your dynamic libraries either in the working directory of the program the directory of thinks is running in or in some special place on your operating system so on Windows for example you'll have a folder containing a lot of standard dll's or on a UNIX system a loaded standard dot Essos probably several directories we're going to look here at creating the simplest type of static library and now this is a library that you actually build into your code so at the end you would only district if you're creating a program you'd only distribute that one file your executable and that would have your static libraries incorporated into it so let's take a look here at how you can do that I've created this test library program and this is just a normal hello world C++ program and I'm going to use that to test my library code and we're going to go ahead now and create an actual library to test so let's go in Eclipse to file new C++ C++ and all the stuff I say here it applies to other ideas as well it's just that in other ideas of course you have different menus and different ways of doing things but it always involves the same basic concepts so here we can see how I've got options to create a shared or static library in this project creation screen let's expand static library and create an empty project and here on my Mac I need to select this Mac OS X or OS 10 how have you set GCC compiler Oh it is the compiler that I've just been using for this course in general so I'll give this a name I'm gonna give it a nameless completely lowercase because then my library name is going to come out all lowercase anyway which is perhaps the most common option for a library but it's not really important but just that you know have the greatest consistency with other libraries I'll give it a lowercase name I'm not even sure what a windows convention is really to be honest these days but let's call it let's call it animals I don't know maybe you want to give it you know so this is gonna be a library that just has a simple demonstration function and class in it is just gonna not do anything very exciting it's just gonna demonstrate the concept obviously call your library something appropriate to what it is if possible but a lot of them do have terribly cryptic names it has to be admitted ok so we'll click Next now and I'm gonna on tick debug here just because if we create a debug version it's gonna have symbols in it that would enable us to use that Eclipse debugger but I don't think I've ever actually used the Eclipse debugger with a library anyway and what I'd like to create here is a release version which is intended for distribution to end users you know or you could just use it yourself so let's do that I'll click finish now this this is kind of works pretty much as you'd expect really we can go ahead and we can create classes in this library I'm gonna give you an example of class and one function and put it in this library for demonstration purposes so I'll rightclick the project and go to new class for a start let's call this cat so obviously again this is just a silly kind of demonstration and we'll click finish here so now we've got class in our library let's give this cut class a function that does something so I'm gonna give it a void speak many people say cats can't speak my insists my sister insists that they can so you know I don't know anyway right let's get on with it so I've created a prototype of my function in the class and I'm gonna go to my implementation file paste it in there and we'll say let's a member of a cut class and put an implementation in for it here and now I just want to use a C out in here just so that we can you know demonstrate this method actually doing something when we use it now with a library you want to be very careful about what you include and what namespaces you use so if I went to cut that H and included iostream for example we're going to have to distribute the header files not the CPP files just the head of files with the library so that people use it because they're going to need the prototypes of you know classes and functions in order to be able to use these functions in their code so if we included iostream here anyone who included capital H would then also have iostream included and maybe they would rather not have that so since I don't I don't need it in any case in this class I'm going to just include it in the implementation file here which the implementation file this is only going to be included as binary code so hearing includes and not so much of a problem and another thing that I really should have done is I should have put this class in the namespace so let's do that let's say a class I'll call my name space cave groaning you need a angle bracket there and after we finished defining stuff it close the angle bracket and I'll do the same thing with my implementation here let's put it in a namespace right here there we go now we were gonna be using them that the standard namespace here let's just compile that because it's got areas in in the moment what did I do wrong I yeah I should have said a namespace here okay so that should that should fix that we should be able to check that this compiles save that and this every time I record this video I make some mistakes as well I see this is the second time I've recorded this one okay right so god we've got our classes in the namespace we've included iostream now if I said using namespace standard here so using namespace and which I've been doing in this tutorial here that's as I guess it's not really bad but a lot of people disapprove of using this in general because if you're using if you say you're using a whole namespace then if you use another namespace or you want to include some classes from it a different name space and there are classes with the same names in both namespaces then you have a class there and this will be very problematic potentially if we were to put it in a header file because then anyone who uses this header would be automatically using that namespace and that they're not going to like that because that's going to import a lot of stuff into the namespace area that they're using you know and maybe that's gonna some classes or functions in this namespace are going to clash with the ones that the user wants to use so what I'll do here is I'll follow which is kind of something which is kind of considered best practice anyway and rather than just saying using namespace which is fine for a small project usually but rather than do that I'm gonna do the following I'm just going to pre so anything I want to use from the standard namespace with STD so let's say STD C out and I'll make it sort of cut noise in here by this and we then they need to say standard ndele or endler as i've been calling it as someone said that's better to say ndele and i suppose i agree with them really okay so that's that now we've got now we've got basically a functional library doesn't know anything very exciting but we could use it let's also put a function in here so if you've got a load of functions and a load of classes probably it's better to put the functions and a separate header file maybe even divide them up in different headers depending on you know what sort of category of things they're involved with but this is just a demonstration so I'm just gonna bunk a function in right here let's say void say something and I need to create the implementation of this in my implementation file in this namespace so let's let's just have another C out here and here I'm gonna say hello there I should probably thought of something that relates to cats or animals but hopefully you'll get the idea from this demo okay now if we actually build this then as long as we get no errors we shall be able to expand our project our project here expand the release folder and here you can see various files and this is actually the library that we've created so that was pretty simple if you're familiar with C++ it's pretty simple to create a library and we can also see this is the object file that was compiled just from the implementation file of the class basically we've got some other stuff in there it's not so important but that's what would actually be distributing and using in other projects we've also got this cat that H we created and we'd also have to distribute that with the library so now we can go ahead and use these and what you'd normally do is probably copy these to some other folder you know and then you've got a copy of your library which you can make use of but rather than do now I'm just going to make my test project reference these files actually were they happen to be at the moment so to take this library file for example live animals they let's rightclick that on windows that's going to be probably Lib let's rightclick and go to properties go to this resource thing at the top and here's the full path to where that library happens to be now so I'm just going to copy that click cancel and now in my test project and then a rightclick properties and I'm gonna go to c++ build settings and we need to go to the linker settings here this is the thing that links together all your files to create your final executable in this case or could be a library we'll go to libraries here so here we have to specify a path to a folder containing libraries let's click + here paste that in I'm just going to get rid of the initial library name at the end and I've cut that because what we need is this path to the folder containing libraries that we want to use and I click ok so this is in there and under libraries here click plus sign and just paste in the name of that library now we need to remove the dot a Lib and we also need to remove the Lib prefix here all we want is the name of that library right here we don't want the Lib prefixes added onto the beginning or the extension to click ok so it's using the animals library from this directory and I'll just blend apply and ok we also need to tell our test project were to find relevant header files so let's look at our cattle a each right click properties resource here's where it's located so I'm going to copy and here I just need the directory so I'm just gonna copy the directory click cancel go back to our test project right click properties c++ build settings and now we've got this includes in there compiler settings and where it says include paths here i need to add the directory there so this is the directory containing the header files that I want to use in this project click OK and we don't really need to click apply actually but you can and click OK now I can use that library in my test project so let's go to the test project go to the main function here so here I can include my cut my cut dot age or I can include it wherever I want within this project let's say include include capital H and since this is now a header it's in a standard location in one of the locations are set in the kind of compiler settings I'm gonna put this in angle brackets I don't know that it's really actually any difference necessarily in all compilers between angle brackets and quotes we usually use quotes for double quotes for local headers that are in your project and angle brackets for stuff that cells were so I'll stick to what I think is the convention here we even need to say using namespace cave or programming or I could prefix the objects I use with cave a programming colon colon so let's maybe do the other because as I say it is you know this kind of thing is considered by many people to be bad practice although I do use it around my course because it is easier and if I write programs myself I often use it as well but it's true that it could be a problem if you're writing a you know a larger project or something that includes a lot of different libraries so let's not do that at all and here I'm going to say cave of programming colon colon say something and if that might autocomplete even magically work there so if I run this we should get some output that's actually coming from our library and here it is and we can use the classes in there as well so I can say cave of programming colon colon cat and let's create an object from that car let's call the cat Bob which is an unusual name for cat but it will do and we'll say Bob dart speak there we go and run this and we should see something interesting so I only need to prefix the types with the name space and that's just an alternative to writing using namespace kvar programming which avoids the possibility of namespace you know clashes between namespaces basically so let's run this and though we see meow and that's coming from my library so there you go as you can see it's pretty simple if you have got basic c++ down then you can quite easily create a static library okay so until next time happy coding