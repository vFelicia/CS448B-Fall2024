hello this is John from cave of programming calm in this tutorial we're going to put together a very very basic program using the STL graphics library so firstly let's thus take a look at what STL actually is so I'll go to a browser here what we need for this program is we need a basically a games programming library that at least lets us do graphics programming and in particular gives us pixel level access so if you search for c++ game library there are various options that are that are going to come up there's there's a whole list of them here list of game engines Allegro is a good one but there are lots of them I'm going to use one called STL so you can follow these tutorials using any games library basically the less you do pixel level access on the screen need to be able to manipulate individual pixels and although I'm going to show you this example using SDL using STL if you're using some other version of SDL or you want to use a different library I'm going to try to give you the right kind of pointers that you could do that for yourself with some googling and should just mention that learning to Google effectively is a really really really great skill to have as a programmer I use it constantly to look for example code and look for any information I need and if you're if you dive into Google very very readily then it will help you a lot with your programming so I'm going to use this sto which stands for simple directmedia layer and this is a very kind of basic C++ games programming library it doesn't provide you with any 3d facilities or anything that I know of and I can mention actually you could also use probably open G OpenGL to follow this tutorial I think that gives you pixel level access plus the good library to use SDL doesn't give you 3d facilities or anything but i like it because it's been stable for a long time and it's reliable and I've had quite few problems compiling this for every different platform that I've worked with well that's basically yeah Mac Linux and Windows I had no trouble no significant trouble getting STL to work on any of those and I have to say that getting trouble having trouble getting api's to work particularly game api's that's application programming interface by which I mean basically libraries it's a common experience it's not always easy to get them to work but STL is it's one of the easier ones to work with so I'm going to use STL two for this tutorial now what we need here are we need the header files we need static libraries to link our program with an STL also uses dynamic libraries which the static libraries refer to so we also need a dynamic library which would have to be distributed with our program it's possible apparently to statically link an STL program so that you're not using any dynamic libraries at all you just got one file to distribute but then by the license terms you're obligated to distribute your source code as well so it's that's not really that convenient so either way you can't just distribute one single file you've got a distribute at least the DLL or the third iso or whatever with it but anyway that's that's not too bad and this is a common situation with c++ programs which is why unfortunately installers are often necessary to distribute programs but but for this program that we're developing you only have to distribute two files so it's it's not too bad your program plus the dynamic library so what we need is the header files the dynamic library to link with and the sorry the static library to link with and a dynamic library that the static library actually refers to so that's three things that we need basically here now if you go to the STL to downloads page we've got downloads for windows here 32bit and 64bit and we've also got actually these is the runtime binary so we're going to need actual stuff to develop with these these are just the files to run your program so if we look at development development libraries we've got V we've got long for visual c++ for windows you've got one for canoe for Windows for mingw here and now we've got this dmg packaged for Mac and Mac has its kind of own system of packaging programs involving something called frameworks which I don't fully understand and I although in theory we should be able to on a map we should be able to create use that STL framework I couldn't get that to work and a lot of other people as well as saying there at the moment that program just crashes if they try to use this framework so what I've done is I've I've used the kind of Linux version of STL to compile this program because Mac is a UNIX based system so we can use the Linux the Linux version of STL to compile programs which I didn't have too many problems getting working so you need to download the right file for your for your platform so if you're using Windows either the visual c++ version or mingw version there's I don't think there's really any other choice for actual compilers for Windows they were so even if using code blocks you're probably using the mingw compiler so hopefully either of those will do the trick if not if you're if you're using some other wacky compiler or one that's just not used much you could use a different library to follow this tutorial you just have to Google for some examples on how to do pixel access pixal yeah access but hopefully you could figure that out and so for my mark i use the linux version and on linux if you're using linux usually linux users are a bit more technically adept than the average windows user and hopefully you're comfortable with doing stuff on the command line if not you're going to have to get comfortable but you can use I think it's got app type and get to get the Linux STL you're going to have to Google for that though and what I did on my Mac was I installed something called Mac ports so Mac ports and then I use that to get lib STL two very important you get STL and that downloaded SDL for me the sto development libraries and compiled them for me so either way the end target here is that you want to end up with if you're on Windows you're going to need a sta lip or sub STL to live it's probably going to be called and you're going to need STL to DLL probably as well on UNIX or Linux you're gonna need the static live at lib probably STL to die or something like that and you're also to distribute your program you're also going to need live STL to die so probably on the Mac if you if you're using a Mac instead of live XYZ so you're probably going to have X Y Zed eyelid but it is the same thing as the star so and as the dot DLL basically that they're all the same thing so try try to get that source code that's the next step you need to acquire these files you need to have the header files this the static library to link with and the dynamic library as well which you'll need to distribute your program and fill out manner to run it yourself I suppose now I've done that on the Mac as I described I use Mac ports to download Lib str2 and what I ended up with was this and of course this this is not going to be the same on Windows as I just described but if I go to see the slash user slash trying to remember here let's have a look yeah use a local slash in cludes include then I've got this SDL to folder and if we look in there here are all my STL header files so you need all of these whatever platform you're working on and then if I go to slash user slash local slash Lib courses is only relevant for Linux type systems and I go yeah and here we've actually got I've actually got Lib STR to dot a that's my static library which would be called probably STL to live on Windows and here's my dynamic library which I need to destroy with my program live STL to die Lib if we just take a quick look at the Windows one because a lot of people use Windows of course and it will reassure you to see that is as I say let's take a look for example at there and mingw one here I'll just unzip this download that I downloaded from the STL page you can see you've got an include directory here and you need to you need to copy this folder just to somewhere where you can access it so if you have a folder that you normally put your programs in or whatever you can put it there doesn't matter too much as long as it's somewhere you can find it and we've got this live folder here we've got a target for like 64bit machine and also 436 for sorry for 32bit machines the reason it's called x86 is because of course early computers were called you know like 286 386 486 and so on and they were 32bit machines but so this is actually 32bit in spite of being called 86 and it's a 64bit if we look in neither of those folders again we've gotten a dll file that's the dynamic library we've got the static library Lib and we've also got the the header files here so once you've got those you can proceed to the next step which actually come to think of it I'll put in the next video because you're going to want a bit of time to acquire these libraries download them and check that you've got learning everything you need the header files and the two kinds of library especially if you're using Linux or map because then you've got to probably download them and compile them and you need to follow just Google for instructions basically if you go to google search for stuff like you know compile STL Linux that sort of thing then you'll find various instructions on there and I appreciate that it's easy to get overwhelmed with Google results but this is a this is really a vital skill to learn because if you're going to be doing C++ you are going to find yourself wanting to use Google a lot to figure out problems that you've encountered because usually other people will have encountered the same problem so Google is a really good things start getting into okay so that's it for this tutorial in the next tutorial I'll actually use the stuff I've downloaded to create finally a basic STL program which won't do anything yet but we'll check that we can actually get a program running so until next time you