hello this is John from cave of programming calm continuing my free course on nodejs and JavaScript for complete beginners in this video we're going to take a look at control characters and we're going to see how we can write stuff to the console without creating new lines which is what happens when we use console.log and i'm inserting this at this point in the course because in the next video i want to give you an exercise that will bring together a fair bit of what we've seen so far in the course but to complete that exercise you're going to need a bit more information so let's take a look at it first of all I'm going to start all my scripts as usual with use.you strict now if I write console.log here and output for example hello what does this actually do it actually outputs hello and then afterwards it creates a newline character so if we run this let's run node control characteristic Jas which is my file try again I hit the wrong button there now now I've brought back the same command that was wrong what I want is this okay so if you look at what's happening here without putting the text hello and then you see that the prompt of my terminal appears again on the next line and that's because console dot log actually outputs what we call a newline character after any text that it outputs meaning the next stuff you output is going to appear on the next line we can maybe see that more clearly if we output two of them and if I run this script you can see they're coming out on separate lines and that's because we write hello and then there's an invisible non printing newline character after hello and that causes the next hello to come out on the next line and that has a newline character after it as well and that means that my character reappears on the next line after that so these new line characters they don't print they don't the nonprinting characters they don't display a symbol to you but they cause the next stuff you output to appear on the next line and we can actually output those explicitly ourselves let's take a look so I'll maybe comment this out with a multiline comment which is slice star and then star slash so that's a multiline comment and it means that this is interpreted just as a comment and not as stuff to actually execute so that's right console dot log and we'll have a string that's right hi and then I'm gonna put backslash n hi again like this so backslash n is a nonprinting character it gets translated to a newline character we have to have a backslash this is called this is called a backslash whereas this would be called a forward slash and it's important that we have a backslash here so this means output hi then create a new line character in other words go to the next line and then output hi again and then console dot log automatically outputs a new line anyway after the stuff is printed so it'll be another new line after this second hi let's try this and we get hihi on two different lines we can also use backslash T by the way I don't have a semicolon here javascript is designed to be pretty flexible in many ways it often lets you get away without putting semicolons at the ends of lines but you should put them in it's good practice I would say in other words it's best practice is what you should really do because sometimes your code won't work without these new lines let's try something else so this time I'm going to write that's right hello hello and this time I'll separate them with a tab character let's run this so a tab character is like a sort of long space basically and we've got a sort of gap between these two hellos that's been created by this nonprinting tab character which we can create by using backslash T within a string and a good thing about tabs is that they help you line things up they sort of move things to the next tab position or that's often what they do other times they're basically equivalent to typically four spaces or sometimes two spaces or whatever so if I output console log and we have cat slash tdog slash T Mouse and then on the next line we have maybe Apple and orange and banana then we can see our output is lined up as long as the strings aren't too long typically you'll get lined up output there's no real guarantee about it but in this case it's it's work so tabs are quite good often for lining things up like this now what if we want to output some text and we don't want a new line after it because console dot log will always add a new line after after we finished outputting our text whether it contains new lines or whatever itself or not so even just console dot log by itself will create a new line so let's write console dot log with empty brackets and you can see here that between after the last output and before my prompts is a blank line now and that's just been created by this console dialogue but sometimes we don't want that so if we don't want it we can use process as press s because otherwise I think my autocomplete is gonna unhelpfully mess this up this is Visual Studio code I'm using here so if you're right process dot standard out right and I write let's say that's right lion and then let's write something else with process that standard outdoor right like tiger and you'll be able to see the difference so this is this is again it's just a way of writing to the console but the results here are a bit different to consult our log so if I if I run this now we can see we've got lion and then tiger and process that standard outdoor right does not create any new line after it so the next output that I do will be coming out right after the last input and sometimes and that is very helpful console dot log is really intended for debugging so it was originally implemented in browsers and typically you have development tools in your browser you can activate somehow and those contain a JavaScript console and console dot log if you run JavaScript in a browser which we'll look at later in this course will output stuff to the develop the developer console to help you debug JavaScript that's running in browsers but here we're just using it on a command line with the node.js interpreter and there it works similarly to how it does in a browser and it outputs text and then a new line after it now process standard out dot right you don't need to know what this is in order to use it we're going to cover concepts that you need to know to understand this more later on but briefly so process and standard out are both objects we call them objects process is actually a I believe standard out is anyway the process is actually an implicit object so it's an object we say that's available to us when we write nodejs programs and again you don't need to know what that is but we call it an object basically right is a method in other words it's a functional subroutine a collection of statements that is attached to an object in this case the standardout object and its standard out object lets us write to what we call the standard output stream so we've got standard out and standard in and standard out typically kind of represents the console so we can call standard out a it's a kind of stream it's like an output stream so rather than rather than a stream of water let's say it's a stream of data and we can write things to it we can write data to it and then it will usually appear on the console so you don't need to know that to actually use it though that's just to begin to get used to some sort of ideas and terminology that we'll look at later so you can use control characters if you know in strings that you're going to write with processed or standard out as well like if I were to put for example /t your /n you'll see the results of it let's and put /t after lion and slash n after tiger and if we actually output this then we've got lion and then a tab character and then after Tiger is a new line so that my console prompt is reappearing on the next line now if you want to output numbers with process that's standard out right there's a bit of a twist so let's try that let's have a variable let's say so let's say let value equal 7 so we've got a I've declared a variable called value and I've initialized it to the value 7 and I'll use process standard out dot right and we'll output value what does this do let's let's run it in fact it gives me a error trace or stack trace so console dot log because it's intended for debugging in many ways it's very flexible it will output numbers it will output all kinds of things process dot standard out dot write is in many ways less flexible it won't output numbers it will only output strings so this error here if we look at the top of it actually says the chunk argument must be one of type string or buffer it's not it's not liking the fact that this is a number but we can convert a variable that refers to a number we can convert it to a string using the to string method and that looks like this if I write value so still within within these round brackets of right if I write value dot 2.2 string and let's put empty round brackets in there because this is actually a method itself then that actually works let's try it and now it works we've got seven there if I wanted to get this single line to have a new line after in well I could just use console dot log but you can concatenate strings together as well so here I could write plus and I could have a string that only contains a new line for example and I will create a new line afterwards now you can see my prompt is now coming out on the line after that seven okay so we're going to be using these ideas or at least some of them probably all of what we've seen here in the exercise that'll give you in the next video so the thing to do if you are a beginner is practice this trial of this stuff try process standard out dot right try writing numbers with it as well as strings and try embedding control characters backslash T and backslash n within your strings and see what it does check there you get the idea of all this and you can use it to sort of a range text on the screen and I'll give you an exercise in the next video so until next time happy coding