hello this is John from cave of programming calm welcome back to C++ for complete beginners and in this tutorial we're going to look at floatingpoint and variable types in C++ so again I'm going to give you quite a lot of information in this tutorial and you don't have to memorize it all the important thing is just to try playing around with some floating point variables a bit just so it's so it's kind of in your head you don't really need to have all the exact details in your head all the time so we've already seen that you can write stuff like int value equals 6 and you can output that with C out like this value let's spawn and letter and semicolon very important so if I run that we should get 6 appearing down here but what if you want a decimal point in your number you can use the type called float so let's type float and I'll just I'll still call it value again I suppose equals if I let's call it f value because I'm going to have a different floating point type shortly let's say equals 76.4 or something then we can output it in exactly the same way that we did with an INT but the important things that flow can have a decimal point in it if you're in some part of the world other than the UK or the USA you may be used to using a comma instead of a decimal point but as far as I know in C++ it always follows the American Kant standard of having a point here so let's let's run this and and let's change this to F value for float value and I'll run that and here we should be able to see 76.4 now there are a few things to note about this one thing is and that see out it can output numbers in one of two basic formats and one is coming the normal notation which we call fixed where you write all the digits out like this and the other is what we call scientific notation where you you have like a single digit number point something or other and in times of power of 10 and sometimes with big numbers see out can decide to switch to scientific notation and we don't want that and I want to stop it happening here so what I'm going to do and you'll see how this works in a minute is under where I put include iostream and before using namespace standard STD here I'm going to type hash whoops I was the wrong key hash includes and I oh man it like that that stands for inputoutput manipulation and now immediately have to see how I'm going to have one of these Chevron things the insertion operator and I'm going to type fixed like that and this is a value that's that's defined in in this file which we're including here but and we're going to look into includes later on so basically if you just type this stuff it should work and don't don't worry about it too much of this stage so let's run this and it will look pretty much the same as before really you'll notice we've got two on the end here and we'll talk about that in a minute but that the thing here I want to show you so you can also have this as cyan like that and if you run this now then we get this in scientific notation so this this actually means seven point six four times ten to the power of one in this case the NS right isn't it so we've got seven point six times ten that would be 76 so seven point six four and this e stands for exponential and it actually means 10 to the power of one here so sometimes it will display like this just anyway and if you've got a really long number but I won't I'm going to change this to fix so that we always get the numbers written now now now yeah let's run that again so we saw that we had we had a two here and the reason for that is you can only store a certain amount of information in a float or it were in any variable for that matter float allocates a fixed size of memory and if you want to see what that is you could do what we did I think in the last tutorial you could type size of float like that or you could also use size of on your variable so we were typing size of and in round brackets immediately after it and in that we're putting float or we could put F value in there who would also work and if you run that you will see that a float on this compiler at least on this system and has it takes up four bytes so there's only going to be a certain amount of information you can storing four bytes of course as a limit to it and it flows usually you reckon on getting something like maybe five or so I think it's about five how many we've got here one two three four five six seven yes something like five or seven and significant digits I think we've got seven here basically but after that you're just going to have garbage being output so you can only store like the number of actual digits that matter in here so starting from the beginning got seven six and the four and so on and then a bunch of zeros because it's exactly seventy six point four after that and you can't rely on your float for storing numbers you can only rely on it to store these like five six seven digits or so I think it's normally seven and so if you want more precision than a float you're going to have to use a different kind of variable and in fact this let's just turn out put even more digits here because you might wonder what why is that actually stopped at that the two here where the two is garbage anyway but why didn't we go on and output loads of garbage after that why have we only got this number of digits and the reason for that is see out actually has a number of digits that it will output by default a number of significant digits and again I think that's seven or eight let's see one two three four five six seven eight we'll go eight digits 8 significant digits here and this this code I presume vary on different platforms different compilers you don't have to carry this information around in your head and as you can tell I I really don't and although I've done C++ for many many years but we can alter the number of digits that we can output with C out by using sets precision so I'm going to put another like chevron here as I like to call it and I'm going to type set precision and in round brackets after that let's type 20 so that we get 20 significant digits being output and I'm going to use set precision and twos fixed you've got to include this i/o minute here so you've got to type this stuff and near the top of your program let's run that and see how it looks this is even worse so now yeah we've got we've got the 7 1 2 two three four five six seven got seven digits that are good so float has correctly stored seven digits but after light it's just garbage and we're telling C out to output a total of twenty digits here but most of them are just rubbish so let's try that with a different type if you want more precision in your program you can use double which should store something in the region of something like fifteen significant digits approximately something like that let's try double D value equals seventy six point four let's try that again actually same value and we'll output C out and let's just copy this because it's easier than typing here again paste it in here and I'm taking care to keep the indentation correct it's very important and let's output here D value and see how that looks so I'll run this program and you can see here that the double and it gets much more much much many more digits correct nice we've got a load of zeros here which should be there and then after a certain point it's garbage just as float was so we can make this a bit more complicated let's try typing I don't know one two three point four five six seven eight nine and let's try that same value with a float so I'll run this and we'll see that with float we've got one two three four five six seven eight and then it loses the plot but double is doing a lot better here one two three four five six seven eight nine and I know the zeros so we could put more decimal places or more digits before the decimal point than double if you really want a mega precise number here and you have to bear in mind that most of the time you really don't need to use that many significant digits not even in sort of scientific work people tend to go overboard with using significant digits with using numbers after the decimal point how you normally don't need that many for most purposes but if you're working with money or something you're doing lots of complicated transactions then you certainly do want as many decimal places as possible I suppose where the double will be enough for financial software I'm not really sure but if you want even more precision you can use long double long double and let's call this L value equals and that's up something like one two three four five six seven eight nine eight seven six five four three two one zero not sure how long you'll do with that and but how we will do with that but let's see let's let's copy this again and now let's try L value and let's run this so dumb pretty well one two three four five six seven eight nine eight seven six five four three two one and after that we've got some garbage instead of what we should Hubble two zeros so L value is a long double value it does pretty well with storing lots of significant digits and again you know if you're interested let's just change this here to say size of float this is a really good thing to do just type this out yourself get the size of these values that say size of long double and type in here we could just type L value you can use either the variable or the actual type let's try that and see how many bytes we are allocated for a long double so a long W double it's using 16 bytes in a computer's memory just to represent one number so that's a lot of bytes just for one number and so that takehome message from this tutorial is just that you've got float which is fine if you don't need too much precision double which is very commonly used and long double which you don't see very often for like so mega precision and so that's that's all you really need to remember it it's handy also to remember this that you can do set precision and fixed if you need to change the way CL is outputting a number and of course there's other stuff you can do to format numbers but we won't we won't go into it here and there's no signed or unsigned double at least not with this compiler and don't think with any compiler as far as I know but yes you've got is basically these three types so that's it for this tutorial and what I strongly recommend and so that you just try defining some variables at these three types float double long W double also try size up on them to see how many bytes they occupy on your system you might get different results to me cuz it can potentially depends on your compiler and on your kind of computer you're using so and this isn't the number of bytes allocated to type is not necessarily fixed in C++ although you're probably usually going to find the same results as me here like for for a float 16 foot double and I think it's 8 for a sorry 16 for a long double I think it's 8 for normal double but try typing that out yourself just try using it there you could like add them together if you want see how that goes and and yeah and once you've done that it all sort of stick in your memory a bit so you don't have to remember everything that I've told you yet we're just practice using them a little bit in a little test program so that's it for this time and in the next tutorial we're going to look at the remaining primitive types in C++ and don't worry pretty soon we're going to get on some to something a bit more interesting so until next time happy code you