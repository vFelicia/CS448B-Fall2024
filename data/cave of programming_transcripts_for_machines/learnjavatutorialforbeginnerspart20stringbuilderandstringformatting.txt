hello this is John from cave of Programming TOCOM and this is a tutorial on string builder string buffer and string formatting in Java and we're gonna need these concepts before we look at things like the dot equals and the two string methods in future tutorials so I've got a main method in Eclipse here and I want to start by remark that in Java it's common to do things like this I create a string I call it info let's say and I set that equal to an empty string and I'll say info plus equals my name is Bob and then let's have info plus equals and then just an empty space just a space and then info plus equals plus equals I a builder so if I output this text now it's about the semicolon there with a sis out info it's gonna say my name is Bob space I am a builder now this is actually quite inefficient and the reason for that is that in Java strings are immutable once you've created a string you can never change it and it looks here as though you're changing the string you start off here with a string that's equal to just nothing and here it seems that you're appending to it some text and some more text and more text and outputting it but in fact what is happening is info is initially set to an empty string and it's and this empty string is it's going to be a empty string for the rest of its life in this program what's something here is we're creating a new string made from this empty string Plus this text and we're reassigning the info variable to it and here we are creating a new string made from all the previous text this and this where we are and this space and then we're reassigning that to info so basically every time you do this you're not changing the original string you are creating a new string which is somewhat inefficient and if you've just got a little program and there's just a little bit of this going on it doesn't matter but if it's a big program or you're doing this in a in a loop let's say well you're doing it in lots and lots of different places then this could slow down your program or maybe use a lot of memory so to get around that we've got the string builder class and the way string builder works is let's first put a comment on the air saying in there ficient it's only fishing got one N or two ends in it I think one okay now the proper way to do this is we create a string builder object I'll call it SB set that equal to a new string builder and you don't have to supply an initial value for it but you can if you want in the constructor here so this string builder is going to be initialized with this string and now to add text to it I can say SP dot append and that stuff my name is su and SB dot append space like this SP dot append I am a lion tamer and what I'm doing here is this string builder is having text appended to it but in doing the append we're not creating a new string builder were just literally modifying the contents the existing stringbuilder which is more efficient than doing this while we create a new string every time and finally to get my text back I can do SB dot two strings so if I do let's say sis out SB dot two string that will get me the text that this string builder now contains so if I run that it's pretty much the same as you get from doing this except that it's more efficient that's about a comment here more efficient efficient and that's really the whole point of string builder it's really just to give you a more memory efficient way of appending text and there's nothing really more complicated to it than that there is however a kind of shortcut you can use because the append method returns a reference to the stringbuilder object itself meaning you can use method chaining and what that looks like is I can say string builder just call this s equals new string builder and you can do stuff like s dot append my name is I don't know Roger and then you can say dot append space or you could put string variables in here in this and these are pens of course and depends I a sky diver exciting professions and again it's just the same so if I lose this out now I could say s not to string to actually get the string and if I run that the same again so I've formatted this in a way to kind of make it look nice on the screen but really all I'm doing is just chaining methods because append is returning a reference to so I can call append on it again like that and that's basically yet there's also a class called string buffer and string buffer is just a thread safe version of string builder so if you're doing if you're creating multithreaded versions and you need a string builder that's safe to access from multiple threads well I can't say I've ever done this myself but apparently what you would need to use would be string buffer and string builder is historically more its newer than string buffer so in order code you'll see reference just a string buffer rod and string builder but they are exactly the same it's just that this is more lightweight because it's not thread safe so that's that and what I also want to show you in this tutorial is some stuff about advanced string formatting so we've already seen that in strings let's put a comment here formatting in strings you can do stuff like I could embed tabs and backslash n init newline characters by just using back slashes well so for example I can say here is a is some text and I could say backslash where are we I've got a new keyboard which is I'm still not used to backslash n so that's the tab that was a tab and let's have a new line here /n that was a new line so if we've already seen in previous tutorials I think that backslash T and backslash n which are quite handy but /t is the tab character backslash n a newline character and you can also control new lines of course by println will output a new line after the end of text while print without the L end won't so if I run that if there is some text after this sis out more more text then if I just do print I'm going to get this text on the same line whereas with Ln it would be on the next line like this so that's pretty simple but you can also use there are some methods that take a string format and an example of that would be if I do sis out here then I can change this from print Ln print line to print F print format and the way that works is you can have a string here and you can embed in it special formatting characters and the most they're two most useful maybe three most useful are firstly if you want to format a integer here in say percent D and I can put a I can pass this an extra argument with a value it could be a variable or just a literal value is in this case let's say five and what's going to happen is printf is going to look for formatting characters here and then for each format in character it's going to look for an argument here and it's going to put this value in here X so it's going to replace this percent D with this so D stands for actually I don't know but it means number so there's some another one in here total cost is suchandsuch and then number well I say quantity is percent D now I've got to formatting fields in here two percent DS so I need to pass two arguments here let's say five and 120 and if I run that it says total cost five quantities 120 and you might be wondering what the point of doing that is rather than using you know concatenation while these formatting characters allow you more control than mere concatenation would do so I sort of put a new line on the end of there because printf doesn't unlike println printf doesn't output a new line on the end and it's important to kind of separate this mentally so here I've got three characters in a ropes end D semicolon but the percent D is this a kind of selfcontained formatting character and for every % D you've got in your format string this is the format string you're gonna have to have an or an argument here to replace it with so % D the main most useful thing you can do is you can if you want specify a width to about policin so I could say here 10 or maybe that's this of it here and that's gonna mean that this this kind of value is out put in a field that's 10 characters wide so if I pull out you can see it looks like this and you can if you want you can leftaligned it in that field by making it minus 10 like that so let's say you've got a loop for int I equals naught I less than less than 20 I plus plus and he could output here hey sis taste this out and I change this to her for a print line to a print format and I'll say here that's outputs sent to D and then a colon and I have some text here I don't really know what but some text here let's say and then let's just output I now if I run that oh yeah and this also put a new line here but /n if I run this the great thing about it is you can see down here that it all lines up so that if if I'd use concatenation here because single digits obviously take up less width and double digits this text will become misaligned when I got to 10 but here because I've said okay print them or using a width of 2 it's gonna all be nicely aligned and that's kind of what it's useful I could also of course put a negative in there and then get the numbers to align to the left if I want there we go so the way to read this is there's always a percent and at the end there's a single carrot so that specifies what kind of thing you're formatting here on formatting integers represented by D for some reason and in the middle you can have extra kind of Flags specify other things about how to format it now another really useful one is if you just want to put strings in there you can use percent less so sent s and then I've got a supply another argument here here is some text so if I run that it's gonna say here is some sex down here you've got to make sure you have as many arguments as you've got formatting characters formatting fields and probably the most useful of all is the floatingpoint format so if I say yes this out let see total value let's say percent F now % f means floating point so I can part for example five point six here let's have a new line there as well part /n and I'm going to put some comments on here so formatting integers and here let's say formatting formatting floating point values and if I run that so I've got an error here cuz I forgot to change that to print F so if I run that it's gonna output my my floating point value here with a default number with like a default precision but the floating point format is really flex port because if I say between the percent and the F I can give it the number of decimal places I want to use so let's say point two so you need a dot and a two and A two or however many decimal places you want and if I run that it's now got two decimal places and just really straight out if I have more values here makes no difference it's still gonna say it's just gonna give me two decimal places and you can see actually it's also rounding off my value so I've got five point six eight seven and it's because it's I've said output two decimal places it's rounding it to five point six nine which is really handy and you can combine that with a width if you want so there's some another one here and let's say just give it a value here and I'll have it too one decimal place and before the decimal point here I can have a separate whitfill that specifies how many characters to use to output iron so it's a ten and if I run that actually maybe I'll spit much let's say what if I've got one decimal place and I've got a three digits here in total that's going to take up five characters including the point so if I say five there it's gonna output with no extra space around it but if I have six here then and it's gonna write a line in this space here so the six the width here includes all the characters that are outputting so the ones before the decimal point the space of a decimal point itself and the characters after I've just got one value after the decimal point here and it's right aligning within that field and it's left putting it with spaces and if I want it to align it to the left I could put a negative there and now in wall the output space after so I hope that's reasonably clear I'm going to put this code on cave of programming calm so you can take a look at your leisure and in the next tutorial we're gonna start looking at the methods of the object object the object class I should say like for example e dot equals into string as I say she kind of standard method so you need to know about and after that we'll go on to the Curt stuff like inheritance so join me again next time and until then you