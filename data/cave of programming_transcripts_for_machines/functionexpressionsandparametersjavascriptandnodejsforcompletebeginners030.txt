hello in this video we're going to take a look at working with parameters and return values with different ways of defining functions my name's john from the website caveoffprogramming.com and this con this is continuing my series on node.js and javascript for complete beginners so in the last video we took a look at function definitions and expressions different ways of creating functions in javascript if you've watched that video hopefully you practice this a bit so it's starting to seem familiar to you in this video we're going to do the same thing but we're going to bring in parameters and return values so let's maybe write functions that calculate factorials so the factorial of a number is defined like this let's say we have for example three factorial so we write we write it like this so that's three factorial what does it mean well it's equal to three times two times one so you can guess that for example five factorial equals 5 times 4 times 3 times 2 times 1 not that it makes any difference multiplying by 1. this is a simple idea from mathematics can we write a function that calculates this and you might want to pause the video and have a go at it and see if you can do it because it's a good little exercise okay so let's start by creating a function using a function definition and the way we do that is we have function we have a name for it let's call it factorial one because i'm going to have more of these and we have round brackets and curly brackets we want to pass a single argument to this function and that's going to be the number that we calculate the factorial for like three or five or whatever so let's give that a name we could call it for example value and then we can write the function so we're going to have to um iterate over all the different values um sort of counting up to this actual value let's let's try it it's actually easier to do this by writing a function that calls itself but we won't look at that just yet that's called recursion let's do it using a loop so i'm going to have four let let's say let's call this maybe n because it's it's like a number n equals one although we don't really have to bother with one strictly speaking we keep going while n is less than or equal to value and then we increment n so we start off setting the value of n to one we're going to keep looping until it's um equal to the value that we pass in and we'll also loop for that but when it's more than the value will stop so when this condition is false and n is not less than or equal to the value then we don't loop anymore and then we increment n every time we go around the loop so for a start let's just do console.log n and see what values we get for n when we call this function and it's a really good thing to do to to build up your programs bit by bit and check them along the way use console.log to check that they're actually working as you expect at each particular step don't write a load of code and then just run it because that can get confusing write little bits and check that they're working so let's call factorial so we write the name of it factorial one and we pass in some value like three so we expect this to print out one two three let's see if it works so if i run this what do i actually call it let's write node function expression parameters.js and we get one two three so it seems like it's working okay let's try it for five we should have one two three four five and yeah i just altered the wrong thing there so i want to pass in five when i call the function unfortunately i have trouble seeing over my microphone okay one two three four five it's working what we have to do is multiply all those values by each other you know it doesn't matter what order we do them in so three times two times one is of course the same as one times two times three and we could start this at two it makes no difference but just to make it look a bit simpler i'll start it at one all right so let's have a variable let's write let and i'll call this factorial equal one maybe in fact let's change this to 2 because the thought of it being 1 pointlessly sort of annoys me and then what we have to do here is say so we want to say factorial equals factorial times n and then when we finish we can display it console dot log factorial let's see if it's what we expect so for five we get 120 which i think is correct let's try four four times three times two times one so four times three what's that it should be 24 i think um let's run it 24. let's try it for three three times two is six so it's it's working we've got the value that we want but we want to return it rather than display it so if we return it let's say return factorial and when we actually when we actually call the function we can now get a return value so let's say let result one i'll call it equal factorial one of three so notice the function is called factorial one i've got a variable here called factorial so those are two different names and let's do console.log result result one and i'll try it for four so if we run it we get 24. now there is a a bit of a twist here with factorial which is that by definition factorial of zero is supposed to be one and this isn't going to work with factorial zero or is it let's try it so if i say factorial zero we get one so i've started factorial at the value one and then the loop doesn't execute at all so it does actually work otherwise i would have put an if in here to check if value is zero at the start and then just returned one but this works anyway all right so let's look at doing this using function expressions and if you watch the last video and you think you can probably actually work out how to do it then do go ahead and have a go pause the video and try it so let's write let factorial 2 and this time i'll use a function expression so we write equals function we have round brackets and curly brackets in the round brackets we put our comma separated list of parameters in this case we just have one parameter and then we have to do these calculations so normally you try not to duplicate code in a program but here we're just doing the same thing three different ways just for demonstration purposes so i just copy this code it's going to be the same and don't forget the indentation and you should be able to run i think it's option shift f or alt shift f to run the auto formatter on my mac it's up option shift f i'm guessing windows alt shift f probably there's also a menu option here somewhere but you want to make sure you know look it up if you can't figure it out but you want to make sure that you can run auto format in your in in visual studio code make sure it works and use it a lot i recommend it but try to write well formatted code to start with this is incredibly important okay so now we've defined a function using a function expression and we can write let result to equal factorial to and let's pass in uh five should get 120 and then we can write console.log 5. and something went wrong what'd i do wrong console.log five i meant result two okay there we go we've got 120. we could also do this like this so i could write console console.log and factorial let's call one of these functions like factorial two doesn't matter which one and pass in four or something so if i write this so this is actually calling the function and then passing the result immediately to console.log just without the intermediate variable that we have here so this also works if i run this we're getting 24 down there and finally using the other form of what is essentially a function expression again let's write let factorial three so i have to give it a different name so i'm just going one two three at the end of the function name here equals and this time we have round brackets an arrow and curly brackets so basically we've got an arrow instead of the keyword function is the difference and the order is slightly different but it's it's pretty much the same as this one and it is another kind of function expression so if i just copy the content of this and paste it in and let's call it and this time i won't bother with the intermediate variable to get the value i'll just write console.log factorial three and let's pass in uh six which should be six times 120 what is that 720 let's try it okay so i did something wrong there what did i do wrong let's check i forgot to add value as a parameter so i want to be able to pass six to it got to have a parameter here let's try that yeah we get 720. all right so it's all working and as i say if you're a beginner and this is the first time you've seen this you really do need to practice this give yourself you know little challenges add up lists of numbers or whatever you can pass arrays to functions as well and return arrays you just pass in the name of the array and you can you know just return the array that works perfectly well but practice all of this make make some challenges up for yourselves practice all three styles with parameters you can have more than one parameter of course you could have a common separate separated list of parameters with various different names here try it all out and practice it or you will get lost pretty quickly so um we're going to look at some other concepts in this course and i want to get fairly soon to looking at what we can do with javascript in terms of um actually things like running web servers and you know just generally interacting with the world beyond the console uh on the computer essentially but we're probably gonna have to look at some more stuff first so the key to this is practice type it all out try it all out experiment with it a little bit and then you're hopefully not gonna get lost but you will if you just watch the videos okay so until next time happy coding