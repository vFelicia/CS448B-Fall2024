hello this is John from kvar programming comm and this is a tutorial on inheritance in Java so the end of the last tutorial I said we look at the equals method in this tutorial but I realized that and there are some things about equals which to understand them it helps if you know a bit about inheritance I'm going to pospone the equals tutorial and we're going to look here at the very important topic of inheritance and I just want to take a little moment just to thank everyone who's left comments your comments really motivate me to create these free tutorials and they are very much appreciated so thanks very much okay so let's create a new class here I put my main method set up in this kind of class in Eclipse and so far in these tutorials I've been creating classes in the same file but I'm gonna switch now to creating classes and separate files which is what you will do most of the time in your programs so let's just expand this and I'm just creating everything in the default package here and we haven't covered packages yet so I'm going to right click actually the source folder or the project folder it doesn't matter and go to class an apologist for the background noise by the way because people are working on the flat opposite line and wherever I go there's always someone renovating an apartment nearby okay so let's create a class here called machine and click finish and now just because just just from saying public class machine in a file called machine Java I can already create objects from that machine I can create a variable of time machine so machine call it Mac one I can say new machine like this which actually allocates memory for my machine object and I can combine those also into one statement by saying machine maquon equals new machine which is what you do most of the time in Java and let's give this machine some methods so I'll give it a public void start method let's imagine that all machines can be started and I'll say sis out here and for some reason my sis out shortcuts not working so I'll say system to out of print I then I'll just copy that and some of these again later and let's say here a machine started like this and I'll also give it a public for it stopped like this and in there we can say machine machine stopped okay so I can now call those methods using this variable which I pointed at my machine object so I can say that Quan got started but start and Mak want stop and since those methods are just doing sis outs at the moment if I run that it's just gonna display some stuff in my console here which is coming from here so you need to have a good grasp of defining methods and calling them before you move on to inheritance really otherwise you'll get confused and what I'm going to do now is create a new class so that's right click the project folder again and go to new class now let's call this car and click finish now of course I can I can create variables of type car let's call his car one and I can point knows that car objects let's have one object here and car has no method if I do come on no methods well actually does have a few methods and these are actually inherited from a class called object which is actually the ultimate ancestor of all objects in Java but aside from knows there are no methods that I defined here but supposing I go to my car class now and I say car extends machine and what that means is that car is a child class of machine or machine is the parent of car we can say that car is derived from machine or a car is a machine or the car inherits from machine and this is all good terminology and what this means is that and now a car is already identical to a machine so now I can say car one top start and car one don't stop the fact that I've said public class car extends machine means car has now got all the methods that machine has now of course we can add new methods to car so got my car child class which which inherits all the methods of machine and I can add more methods to out and say for example public Floyd I don't know why wind white wind wind shield and let's give that some functionality I'll just put another sis out in there and I'll say wiping wind shield so now of course car is identical to machine it said it's got another method now that machine doesn't have so I can say let's put it between Stan stop Carlin wipe windshield lab so this is inheritance in action even if you're you've got a class which which you don't have the source code to usually is set for on the certain particular circumstances usually you can extend it to create your own version of it and then you can add new methods to it which is really useful you can't do that with some classes for example the string class is it's the final class and it can't be extended but most classes you can extend so lets another thing you can do is you can override methods I'm just going to touch on basics of this here but here for example we've got public void start method and let's copy that and go into car and paste it in and change this to car start it so what I've done here is I've got an a method in a parent class with this header public void start takes no parameters and returns only void and I've defined one exactly the same as that in car and it's important that the header part of the method should be the same if you want to override a method and now when I call start in car it's gonna call the car specific version model in a machine version so we say that this method has overridden the method in the parent class he's basically replaced it now there's there's quite a bit more to say about inheritance as you might imagine but I'm just gonna probably show you one of the thing here and before I do that actually I'm gonna delete that and show you a better way of overriding a method and this is Eclipse cific but there's similar techniques so you can use similar shortcuts in any decent IDE so NetBeans or IntelliJ IDEA possibly not bluej which some University students are forced to use and it's no offense to a great or it but as an IDE that's well out of date by now in my opinion anyway and I'm gonna right click here within the body of car and I'm gonna go to source override internet methods and I'm going to click so these are all the methods of machine and you can see methods of objects as well which is the secret Lille ultimate blurring class of both machine and car but I want to let's say I want to override the start method in machine I just click start and click OK and it fills in the method for me together with a stop this is actually calling the corresponding method in a parent class so this would mean that car still has a start method but it just does it just cause the parent class version basically saying machine started but if I get rid of this body now I can put my own stuff in there oops don't on that let's just copy this being as my sis out shortcuts mysteriously stopped working and PERTs in here car started so we over within this just as before so the shortcut flat is right click in the body to class go to source and override implement methods in Eclipse now you'll notice Eclipse puts this and it's called an annotation it's an act sign and the override and override well this is actually a class name here just why it's got a capital o but we're not going to worry about that now but the bottom line is if you put an out and silent override with a capital o before you're overridden method it will check that it really is an override so if I misspelled this now it will complain and say you know starter is is not in fact a method that exists in the parent class whereas without that override annotation of course it would just create a new method called with a different name which wouldn't do anything so I'm not calling it at the moment so if you want to override a method and you want to check that you really are overriding a method in the parent class and then putting this annotation in just helps you spot errors but it's not it's not necessary so one last thing for this tutorial I just want to say quickly a bit about variables because if we've got like a if I've got a private string name in machine and that set that to I don't know I am machine or maybe it'd be more appropriate say machinetype one there we go now because I declared it private this can only this variable could only be accessed within this machine class so if I went to car the child class and that sir created a method public void show info like this and then supposing I had a cyst out and I try to access name lenders let's say car name plus name it's going to give me an error there is saying the field machine dot name is not visible and that's because I declared it private and we're going to look at public private and protect it a little bit more in a future tutorial all of its own but if you declare something private it's only accessible within the class that means within these brackets the bracket opens here after the name of the class and it finishes here you can only access this name within here but if you get rid of private you can now access this anywhere within the package that machine is in and we haven't looked at packages explicitly yet but Koren a poor both within the default package here so you can now access it and if I run this well let's call that let's call that method let's say car one dot show info and run that then you'll see car can access it car name machine type one yeah did I yeah yeah I was wondering work car name came from because I tight it here okay and if you want to give this an access specifier which you really should ideally you can make it protected and protected means that you can access this anywhere within the package and also from any child class so this will still work so I just wanted to show you that quickly here I'm gonna touch on it more in future tutorials for sure and and don't be don't be tempted to try to override variables because and results will be horrible it's not a good idea you should only override methods okay so that's it for this tutorial and in the next tutorial we're going to take an initial look at interfaces in Java so there's a lot to say about interfaces but we're just going to make a start on them in the next tutorial so join me and then and until then happy coding you