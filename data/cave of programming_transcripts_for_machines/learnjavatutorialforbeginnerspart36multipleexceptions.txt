hello this is John from cave of programming calm and in this tutorial we're going to look at dealing with multiple exceptions so we're going to look at throwing multiple exceptions from a method and we'll also look at handling them as well so I've got a basic program set up in Eclipse and I'm going to also create a new class here and let's call this test and I'll click finish and I'll create just a dummy method here and I'll give it a name let's make it public void and let's just call it run just to pluck a name out of the air unless imagine that run throws some exception or it could throw an exception because you are very rarely going to have a method that automatically throws a exception on this is some sort of not implemented exception but let's just imagine that we've detected some error and then we want to throw a new let's say I owe exception now I'm going to have to add a throws Clause here so let's just click the error and import IO exception click it again and then add throws declaration so if you throw an exception or you think you might want to then you're going to have to have this throws an exception name there but what if you want to throw another exception because it may be that this exception doesn't get thrown in your code because this particular thing doesn't go wrong but it could be that something else goes wrong somewhere in your code so that's coming out so maybe we've got to the inputoutput stage and we didn't throw IO exception but now another error occurs in the same block of code and we want to throw a new let's say for example pass exception so we want to say error at line error or maybe just error in commands list or something like that I'm just kind of making this up this could be a line number let's say so you might throw pass exception if for example you're passing some kind of list of commands or something and they don't conform to the kind of formatting you expected and I've got one handled exception let's click on the error and go to add throws exception and what this is done is now we've got a comma separated list of exceptions here and this is not a list of exceptions that we're going to throw because you can only throw one exception at a time and of course you might not throw any exceptions hopefully if the code is successful and that will you expel out to be normally be the case that you won't throw an exception but what this is saying is that you could throw either one of these two exceptions if something goes wrong in the code so these are two seven things that could go wrong and you'll throw an exception as appropriate so this is not obviously not working code because I've just come into this out but you imagine a detected an error and you've decided to throw one of these exceptions so this is basically a comma separated list and your particular method it might throw any number of possible exceptions so let's have a look now how you'd actually handle that I'll create a object here a tight test so test test equals new test and so we want to call test op run and now I'm forced to handle those exceptions because test op run could throw either of two exceptions although it might not throw any for it if we're in luck and it runs smoothly so we've got a bunch of different options for handling that and we've already seen the add throws declaration option which would throw this out a main in this case it throws it up the stack to the next method in the in the kind of hierarchy of method calls and here we're in that we're in the main method so we're not within a sub kind of method and here we'll be throwing it directly out of the main method which would produce some kind of stat trace of that error gets thrown now let's assume that you don't want to throw out Maine you want to handle it you got two choices while I see this there's more than two choices really which we'll get into and the first thing you could do is surround with trycatch because although you've only got one try block in your trycatch block you can have multiple catch blocks and depending on what errors thrown you'll get into one of these blocks so in this case I'm actually throwing a pass exception at a moment so I could say yes SL couldn't pass command file or something I'm just making up text here this has no relevance to this program and if you run this then we get the error because we throw an exception and we've got this this specific catch block has run rather than this one because the catch block will match its argument here to the actual exception that's thrown so this cut is i/o exceptions and this cut catches pass exceptions and we've thrown a pass exceptions so we've run this code here that's that's one possibility let's comment this out and you can you'll find this code on cave of programming comm so I'll comment this out in case you want to have a look at it and let's let's try that again let's do tests on run because there's another way that we can deal with that and this second way was introduced in Java 7 and it's called a tri multi catch so if I click the error here I can say surround with tri multi catch and now we've got a single catch block but it lists two possible exceptions and it's a pipe in the middle of them and as far as I know you can have multiple exceptions there although I don't actually use this much myself and there's the actual variable which is the actual exception that we could use if we want to print a stack trace or get the error message from the exception so this can handle multiple exceptions in one catch block and that's the try multi catch there is something else you can do however because let's just close that and say test on run again because and we've seen this concept of polymorphism which means that you can always pass a child a child class wherever a pairing class is is expected and that means that surround with a try/catch and let's get rid of one of the catch blocks here now because all exceptions derive from the parent class exception if I change this to exception it can now catch any any kind of exception because this is a parent class and this would we could use any child class here while a parent class has expected an i/o exception and pass exception or child classes of exception so just like with passing methods to a parameter for exam and to a method for example do I say that right just sly with passing parameters to a method weekers we could catch any exception by using a parent class here whichever exceptions thrown this catch block is going to say okay the exception that we want to look at catching is a kind of exception therefore we can catch it with this block and that brings me to a little complication here because supposing I've got a method here public void let's call this something like um I don't know input and now let's say that input throws ioexception and it also throws well what you want to do is I want to make it throw them an exception that's a child of IO exception and there are a lot of them so let's go to a browser here and let's look at exception and I'll look for IO exception in here click I'll click on IO exception in put out by exception and we've got a lot of more specific exceptions here like for example file not found exception so let's imagine that this can throw IO exception for some reason but it could also throw a file not found exception and I'll just add the import bear for that so I won't implement this because there's no need for this example but now if you think about how to handle that and so I go to app here imagine that where we are we're running test dots input which throws file not found exception or in my throw IO exception and imagine that I put in here a try a surround with try catch we have to have file not found exception first and the reason for that is that if we had IO exception first here then IO exception would catch file not found exception as well so what happens is Java works down the catch blocks and says does this match the exception if yes we'll run this code if it doesn't let's look at this catch block does this match the exception if yes then we'll run this blog and if we if we were to have by Oh exception here and file not found exception here then it would say okay this is even if it throws that the file not found exception it would say okay file not found exception is an IO exception it's a child class of it and it would run this and we would never reach this and for that reason I think if we were to say here farm at found exception I were to put IO exception here I think it won't even compile so I'd save that and it will say here unreachable catch blog and that's because we've handled them in the wrong order and although this might seem like a nitpicking point being as let's just read allows them want to delete it we do being is you won't the compiler won't even let you type it the thing is they ask you this on exams and in interviews all the time so it's if you're gonna if you think it might sit an example take an interview it's worth understanding that if you've got a child exception you've got to handle that first before the pairing because otherwise the parent would catch it due to polymorphism and I think in fact with try multi catch if we say test on input and we say here surround with try multi catch I think it won't even let you do it one more shock certainly use as much and it's saying now here that far not funny set file not found exception is already caught by piyo exception so it won't even let you handle it with a try multi catch apparently so that's it for this tutorial and we're going to look at exceptions a bit more because there's still a bit more to learn but not too much fortunately so join me again next time and until next time happy coding