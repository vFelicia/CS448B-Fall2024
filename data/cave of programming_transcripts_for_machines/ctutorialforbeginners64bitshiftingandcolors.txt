hello this is John from cave of Programming to come in this tutorial we're going to take a look at the left bit shift operator and we're going to see how we can pack a bunch of color values into a 32 bit int so we want to be able to specify red green blue and alpha values as hexadecimal values in unsigned chars because their values the values are red green and blue range from naught to 255 which is naught to FF in hex but to actually set the values of pixels on the screen we need a unsigned integer color that's a 32bit value on most platforms in other words 4 bytes and we want to put the Alpha value in one of those bytes the red in another bite blue in another and green in another so the exact order of these is going to it depends on what API you're using and that they can also be the other way around but just for a demonstration here let's let's imagine that we want to put the Alpha in the first the leftmost bite of this integer and that followed by red and followed by blue and green so if we've got values FF and 1 2 3 4 5 6 I've just given these easily distinguishable values we want the resulting hexadecimal value to look like this so because it's in hex and because two digits and X corresponds to one byte then we can easily see the these values in the final integer that's the advantage of using hex you call that onetoone correspondence between two digits in hex and a byte so we want the Alpha value to be here and then a red value and then a green value and finally the blue value how can we accomplish that well we've got this sum unsigned in color here let's start by setting it initially equal to alpha we want to output this we want it to look something like that let's you see out here and color endler and if we if we run this the first problem we find is that I'm not sure what these those errors are but they sort of disappear and yeah we've got some unused unused variable warnings and that's fine I haven't used them yet so when we look at it it's in decimal so I'm going to use IOM in it let's include I oh man it and this allows us to manipulate the output a bit so one thing I can do is type X here and this this object or flag what whatever it is that's going to tell see out to display subsequent values in hex so if I run this now we get a hex value now I'd like to see the whole whole thing I'd like to see we've got an eight digit unsigned int here a eight digits corresponds to the 32 bits they digits in hacks corresponds to four bytes or 32 bits so I'd like to see this left padded with zeros because just just as in decimal we can left pad a number by zeros and it makes no difference to the value so to do that we can set the width here let's say set were set width and set it to eight actually that's yes the thing that's right so we want to set it at eight digits if we run this now now you can see that it's the width is set to eight digits but it's padded with blanks so what I'm also gonna do here is I'm gonna say set fill and set the filled character for the for the extra values in the width here to the to zero and if we run this now we see that we've got a hexadecimal integer formatted as we like so we can see that the these rightmost values the least significant bit here lately significant byte I should say are set to FF and the others are still see now what we can do is we can use the left bit shift operator let's say color equals color left shift by a bit so what this does is simply to move the bits to the left and right pad with zeros so by doing this we're gonna move all the values in the color left by eight bits which is one byte which remember corresponds to two digits in here if we use hexadecimal so any any values there were on the right here would simply drop up sorry on the left would simply drop off the end and with with PAD with zeros and the FF is gonna move along to two places which corresponds to one byte so let's run this save it first and now we can see that we've got the Alpha value there shifted a bit closer to where we want it let's move it by three bytes which is 24 24 bits so now we've got it into the right position there where but what we can actually do is we can build this up as we go along so let's add the Alpha and then shift it if in fact rather than use this syntax in the same way that we wouldn't want to say color equals color plus five or whatever we would want to say color plus equals five we can also do equal shift and that's that means the same as what we had previously so that's actually not right we want to say shift equals okay let's do that shift equals just like plus equals so if we run this now you can see we have the same result as before it's shifting the color left by eight bits and then storing it back in color we can then we can then let that set this equal to zero to start with and then let's say color plus equals alpha and then shift equals by a byte then we can say color and we can add on the the next value which is red here and when we add it it's gonna fill this empty space on there on the right let's say red let's take a look at how that looks so now we've got red and after the alpha value and of course we can shift it again by another byte and then add on green so now we should have the green value as well in the right place and finally we want to shift it again by another byte and add on the blue value so color plus equals blue so if we look at this now we've got exactly what we wanted which is which is this we've got FF 1 2 5 6 3 4 I think I've gotten slightly in the wrong color red blue green yeah we should have a red green blue so let's let's declare the money in the other order although it doesn't actually matter and let's set green 2 3 4 blue 2 5 6 and then we should have 1 2 3 4 5 6 FF 1 2 3 4 5 6 which is exactly what we want so and the bit shift operator left bit shift is it's not used all the time in C++ but it is very useful for some tasks particularly because in C++ you often is kind of a lowlevel language where you often want to shift bits and bytes around like this and there's also a write bit shift operator that shifts the bits to the right as well so we'll leave it there for this tutorial and in the next tutorial we'll look at using this to set pixel values so until next time happy coding you