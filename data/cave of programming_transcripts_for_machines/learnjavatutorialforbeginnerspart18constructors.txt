hello this is John from cave of programming comm and this is a tutorial on constructors in Java so I've got the main method set up here already and I'm gonna create a gonna add a new class here in the same file just to keep things simple which I will call machine now a constructor is a special method which is run every time you create an instance of your class so down here let's go ahead and I'll create an instance of this class I'll say I'll create a variable to refer to it and I'll set it equal to a new machine like this and it's their new machine bit here that's the important bit because that's where the new instance is actually created of this class that's where we actually create an object so now to machine I'm going to add a method I'll make a public method and it's not going to have a return type so usually a method has to have a return type even if it's void but a constructor uniquely doesn't have any return type and the name of your constructor always has to be the same as the name of your class so this is going to be a machine in this case normally a method has a lowercase letter at the start or because your constructor has tired the same name as your class it's of course going to be an uppercase letter so I'll address this out here just so that we can see it's doing something construct our running like this and now I can go ahead and run this program so if I run that we get this output here so just the fact I'm doing new machine is causing the constructor to run automatically which is the whole point of it now something that you often use constructors for is initialization of instance variables for example so let's say we've got a private string name for my machine I could use the constructor to set a default value for that name so I could say name equals Arne for example and because this constructor runs every time an object is created I know that my objects will all have and will all have this initialization running so they'll all have name initially set to Barney in this case and just to underline the fact that it's Israeli the new machine bit Israeli there knew that cause the constructor I I don't even need usually when you do new you create a variable and set it equal to the object that's returned but you could just type new and your class name by itself with round brackets after it and that in itself will create a new object and if I run this you can see that it will run the constructor a second time here so this is the important bit for invoking the constructor one thing that you often want to do is to have multiple constructors because just as a method can take parameters so can a constructor and in the same way that actually you can have you can have different methods with the same name and as long as you've got different parameters to the method then it's okay and Java will figure out which method to call when you actually call it so you could think of this here as being a bit like a call to the constructor and you see we've got a place here where we could put some parameters and this is looking for a constructor that accepts no parameters so it's running this constructor but let's go ahead and add a constructor that accepts a string parameter like this and this could work just like a set method I could say this dot name equals name so this dot name means the instance variable up here and name by itself means the local variable here so I'm just setting this setting this equal to what we pass in and to pass something in but first actually I'll add a sisal so you can see it running I'll say second constructor running and if I just run that as it is I'm only going to get the first constructor which is being run here but let's add a call to the second constructor I'll say machine machine 2 equals new machine and this time I'll pass in a string which I'll say corta Bertie so if I run this it's gonna look for the constructor that accepts a string and it's gonna find it here and it's gonna run this one so when I run that so this code runs my first constructor and this code here where I pass in the string runs the second constructor because that accepts the string that's just bunk in one more for the fun of it supposing I get this private int code I have a so every machine has a name and a code I could have yet another constructor that accepts also a name but it also accepts a code and I can say this stop name equals name just like an asset method which we've covered previously and this stop code equals code and to invoke that selling machine 3 calls new machine and I'm gonna pass in a name chorky let's say and I'll give up code 7 so and see that running sis out what I think I have my laptop think about think what have we call it a con member okay so I'll say third construct running so if I run that then nope we're on the third constructor just because of this line here so you can see that John was automatically selecting the right constructor depending on the parameter list probably a final thing I should mention about constructors sometimes you want to call a constructor from within another constructor so one possibility is that all the more complex constructors could call the simpler ones like for example maybe I've got some code in here some kind of initialization that I want to always run in every constructor and I want to always call this constructor from within the more complex ones or another possibility which I'll demonstrate here is so you might want to use the most complex constructor in all of the simpler ones so let's say for example here here I'm initializing the name to Arnie and I probably also want to initialize the code to some default value and you'd think that you could do that by writing machine Arnie and let's give it a default code of zero so what I'm attempting to do that is to invoke this constructor here which has the main machine so I'm calling it like a method but that doesn't actually work and the one change you have to well there's two changes you have to make to get it to work firstly change change the constructor name to this and I wouldn't worry too much about that that's the second use of this we've seen in this series of tutorials the other one is this thing here to differentiate between an instance variable and a local variable here I'm using this to call a constructor and that's all there is to it they might look complex because it's a strange word to use but it just means call the constructor that accepts these particular parameters and if you wanted to call the default constructor with no parameters it would look like that you just have no parameters there after it but here I want to call the one with two parameters and didn't the other thing I need to do to get this to work is a call to a constructor needs to be the first line in the constructor way of calling it so I need to put it right at the top there and I could have that in the second constructors what constructor as well and say this and this case i liaise with name again I'll give it a default code of zero and then this third constructor of course isn't going to call isn't gonna do this because that will be calling itself which was be a infinite recursive loop which wouldn't be good so that all works and this this might look a bit puzzling because you have to bear in mind that let's say for example you just call the first constructor in your code by running a new machine and what's going to happen is it's gonna go straight into this code here and the first line of that is calling their third constructor here so it says third constructor running down here and then after that it gets on to its own code and says constructor running like that so that's that constructors and in the next tutorial we're going to cover probably static variables and static methods so join me again for that and until then happy coding