hello this is John from Cave of programming. comom in this tutorial we're going to take a look at complex conditions in C++ by which I mean conditions that are made up of more than one Clause so let's put um a multiline comment here um we can put SL star and finish it in Star slash and actually Eclipse helpfully puts in um asterisks for me here um if I hit return which uh are not part of a comment notation you only need slash star and star slash to start and end a multiline comment but um these Stars just kind of make it look nicer so um so far we've seen uh equals equals which is um the equality test um operator we've seen uh not equals so that's not equals we've seen less than this is less than and we've seen greater than greater than now we can combine these conditions into more complicated Clauses so uh let's let's create value here let's say int value 1 = 7 and we'll have another one int value 2 value 2 equals 4 so we've seen that you can do things like if value one is less than 8 then um see out let's call this condition one and uh we'll put here condition one let's say condition one true and endler and we'll have an else as well so else uh we'll say condition one is false condition one false so that's that's less than if if we run this then we find that um we find that value one is less than 8 so this is true if we put greater than 8 then uh we get false now a couple of other conditions actually that worth mentioning are this so there's less than an equal to so uh sorry less than or equal two and greater than or equal to so greater than or equal two um sometimes you you it can be easy for beginners to confuse which way around these symbols go but if if you look at it equals um equals than greater than that would kind of look like a sort of arrow and it it's not an arrow um it's it's this so um this way around looks like something other than what it is but this way round actually looks um that that's actually correct this is less than or equal to well I suppose it looks like an arrow pointing to the left but anyway may maybe that will help you to remember so the less than or greater than has to go first and the equal to uh later and what that means is um if we say value is greater than or equal to Value one is greater than or equal to 7 this will be true if value is greater than seven or it's equal to S so in either of the cases it's true and in this case value one is equal to seven so this evaluates as true it's also true um that it's if we say value one is greater than or equal to 8 um that's that's well that's false so let's run this it's not greater than um 8 and it's not equal to 8 if we say greater than or equal to five that's true it's not equal to five but it is greater than five so the these are um these are very very commonly used in C++ now we can combine all the conditions that we've seen so far into more complicated Clauses let's take a another example here and we'll call this condition two and I'm going to format that with the auto format there so we can say for example um if value one value one is equal to uh seven and value two is equal to four what what is this this this is um this is the and operator we need two ampersands here to represent and because a single Ampersand represents the um the bitwise and operator which we're going to see later on in this uh in this course course but this this um this means a logical and and what it means is that this entire condition is going to be true only if this is true the first clause and this is true the second Clause theyve both got to be true to make this equal to true so if we make one of them false for example we could say and value two is less than um three which it isn't it's four if we run this then we find that um this is false so now the first Clause here that's true value one is equal to 7 but value two is less than three that's false and so because they're not because we haven't got one is true and the other is true as well then the whole thing is false uh the way C++ reads this is it reads complex conditions from left to right so it's first going to evaluate this and um then if if if it's necessary and it and it is necessary for this and it will then evaluate the next condition here uh we we've also got a logical or so let's copy this and take a look at or we'll call this condition three and uh we're going to change the and here to two bars like that and this is or and again a single bar means the bitwise or which we'll also look at later in this course so you need a double bar like that for the logical or now what this does is it says the entire condition is true if either this is true or this is true so either one of them being true makes the condition true now here we see that value one is equal to seven so that's true value two is less than three that's false value two is four but the entire condition is true because just one of these is true so we're saying if this is true or this is true either of them being true will make the entire condition true so if we run this we find that the condition is true uh now again C++ will scan this from left to right so um it's going to say is this true value 1 equals 7 yes it is so it actually won't even bother doing this because um there's no need to it can already see just from this that the entire condition must be true because either one of these being true would make the whole condition true if the first one is true it doesn't have to evaluate the second bit if this was false it would have to say well okay the first one's false but we're doing an or here so um the second one could be true and that would make the whole thing true so in that case it has to evaluate the second one as well but if if it evaluates the first one and that's enough to make the whole condition true it won't even bother checking this second bit and sometimes you actually find codes like a uh sub routine call as we'll see later on in this second bit that is is deliberately not done um if the first bit is true in an or Clause like this but that's a pretty confusing way of writing code which I I wouldn't recommend at all now we can build up even more complicated conditions and it's very easy to get in a mess with conditions one thing uh one little thing is we can say if value um let's say value two is not not equal to 8 then um let's let's maybe copy let's maybe copy this stuff here and I'm going to put condition four here it's it's really important to name your variables and your uh well yeah name all your variables and sub routines which we'll see later with a name that illustrates what they actually do and here because I'm writing a demo program because there's no real purpose behind this to other than to demonstrate this I'm having to call them value but you shouldn't do that in your programs try to give them a meaningful name so here we're saying if value is not equal to 8 uh then this is then we'll execute this if the condition's true value is not equal to 8 that's true then we'll do this otherwise we'll do this so this works and if we look at it we say well value two is not equal to 8 that is true uh value two is actually Four so we're going to do this and if we run this now we find that condition four is true but this is a little bit more confusing than if we made this equals equals and just swap these around so instead of doing a test for nonequality we could do a test for equality with equals equals and just swap those two those two bits of code around and that would be a bit easier to read so it's better to do that try not to use not equals in your conditions unless you you need to or unless unless you really feel that that makes the code easier to read somehow now you can make this even worse because we can combine multiple conditions let's say if value one is not equal to 8 and value two is equal to uh let's say value one is equal to 7 which it is um or uh value one is less than 10 which is true what's this going to do uh it's it's starting to be quite hard to understand you can't immediately look at this unless you're really good you've had lots of practice and say what what it does and uh you even for me I mean I couldn't immediately look at this uh in a in a program and think what it does especially not uh bearing in mind that these are usually going to be values that are calculated in your program they're usually not just going to be uh what what we call hardcoded literal values here we say hardcoded meaning we've actually put it in the program put the value in the program hardcoded it usually these are going to be the results of calculations and uh and that means that this is this can be quite hard to understand so if we look at it was saying if value 2 is not equal to 8 let's just check this little warning sign here um yeah that's that's a good suggestion it says suggested parentheses parenthesis around expression so we'll take a look at that in a second but we're saying if value 2 is not equal to 8 and value 1 is equal to 7 is that true or false uh is value 2 not equal to 8 yes it is it's equal to four so that bit is true is value 1 equal to 7 yes it is so it's true so this whole bit is true and we're saying that or value one is less than 10 which actually is also true in this case let's make the and condition fults so let's say if value 2 is not equal to 8 okay that's true and value 1 equals 10 now this bit's false but this bit's true and remember we're going to evaluate these from left to right so we're going to first do this C++ is going to take a look at this it's going to say is value 2 not equal to 8 um that is true it's four uh so then it it it actually doesn't need to check this because the first oh yeah sorry it does need yeah it doesn't need to check it because um in an and uh what am I saying it you see I'm already getting confused myself yeah so in an and you've got to evaluate both bits of the expression to determine if the whole and is true so it says is value 2 not equal to 8 yes that's true but we have to check the other bit as well is value one equal to 10 no it's not so this whole condition is false but then it says this whole thing is going to be true if either this bit or this bit is true is value one less than 10 yes it is so the whole condition is true reading it from left to right bit by bit when we run it we find that it's true but this is this is confusing it's it's difficult to read it's unpleasant we've got a not equals in there which makes it even more unpleasant and uh we're combining all these conditionals and we're relying on them being evaluated in a certain order uh for it to come out right so um when you have conditions like this uh it's best not to leave them in your program try to simplify them and there are two major things that we can do to simplify these conditions one well one thing actually one little thing would be to try to see if you can write this without not equals that would already be a little bit better um but then we can put parentheses around the individual clauses so let's at least put parenthe uh parenthesis parentheses I guess you say around this um because we can we can make it clear that that's got to be evaluated um before that's got to be evaluated as a block before we go on to do this so if we run this now it runs the same as before and it's true and the warning sign has gone away the warning was suggesting that I put these in and it's a bit clearer to read now another thing you can do that makes it um even clearer is if you really have to have a complicated condition like this um you can at least store the conditions in Boolean variables so supposing I say bu let's call it condition one equals um and I can say condition one is is this bit here let's copy this so this is relatively easy to understand we we've got the not equals in there so this is this is just an assignment operator we're going to evaluate this and store it in this condition when a program reaches this point it's going to it's going to evaluate this condition and store it in here as true or false cuz remember bull stores true or false so um let's put brackets around it to make it maybe even a bit clearer we could we can put brackets in kind of judiciously however we feel maybe maybe we feel that this looks a bit nicer for example that's fine so we're going to say if value 2 is not equal to 8 which um we can see is true and uh value one is equal to 10 which is false so the whole condition is false and we could actually output that here let's output condition one to see that it is false and uh it's it's a really really good habit to get into the practice of as you go through your program if you calculate values or you get user input output them with a SE out like this if it's user input surround it with single quotes as I showed you earlier to make make doubly sure that the values you've calculated in your program are what you expect and do that before you go on to write the next bit of your program uh it's really bad just to build up a really complicated program not checking anything not stopping compiling and checking values as you add as you gradually build up the code and then when you get to the end you find it doesn't work and you've got a big task in debugging it it's much better to build up a program step by step checking that the values are what you expect as you go along and then you can save yourself a big headache later on we can then say bull condition two equals let's make it equal to this condition here value is less than 10 value one is less than 10 is value one less than 10 yes it is so this condition is going to be true let's output it and double check so um condition two we'll output that and we find that it's um we find that it's true remember zero is equivalent to false one is equivalent to true so now we've got one condition that's false and one condition that's true we can now let's copy all this to save some typing I'm going to call this condition five and we're going to get rid of this we can replace all of this now with condition one or condition condition condition two and that's that's a lot simpler to work out because it goes step by step and we see that this is going to be true uh condition five is true because although this is false this is true and this is saying if either of these are true if this is true or this is true the whole condition is true let's format that cuz we mustn't leave badly formatted code in there um for some reason my auto format oh yeah there we go it wasn't working but there we go it's working now um so it's it's easy to read this and now now that we we've checked these values as we develop the program we can get rid of the SE outs and it's easier to understand this than it is this particularly because it it kind of forces you to go step by step through it a little bit more and you don't have to rely on um understanding the order of the condition evaluation anymore it's clear what's being done in what order and it's easier to understand this so um that's it for this tutorial it's worth trying this for yourself if you want you can type out this exact code but it's even better if you declare some variables you can also experiment with strings which can be compared with equals equals and not equals and uh try various combinations of conditions um as I have done in this program try the logical and and the logical or try combining things and check that you get the results that you expect and also try really complicated conditions you can make them as long as you like but try breaking them up um try using the brackets but also then try breaking them up using separate Boolean variables and then combining them to create a much simpler expression like this so there's an art to do to doing this to figuring out how to create conditions that are as simple as possible and you have to strive to do that to try to make your code readable but it's it's really worth trying this and you'll find as you go along or I find that things don't work out as I as I expect just cuz I misread some little symbol or I forgot what the value of something was it's really easy to do that but um by trying this out for yourself and trying experimenting with code and using all of these conditions uh it really helps to get it into your head what what each one does and how you kind of pass them ment Mally how you break them down mentally to understand what's going on uh so that's it for this time uh by the way just a quick mention I originally created this tutorial and realized I've made loads of mistakes not in the code but in reading out what I was actually writing so I'm trying to write and uh talk about it at the same time so I've recreated this tutorial now and these um work spaces here are actually from my advanc C++ tutorial which um it's now uh October 2014 and this is going to be available soon uh so do look out for that if you manage to get through this tutorial okay so um until next time happy coding