hello in this video we're going to take a look at function expressions in javascript so uh my name's john uh i'm from the website i'm i'm the creator of the website caverprogramming.com and we're continuing here our course on node.js and javascript for beginners so i'm going to start with you strict as always sometimes i forget that but really should try to remember it and let's create a function in the most kind of basic way so this is called a function definition which we've already seen in this course we write function and let's create a function that may be just says hello so let's write function i'll call it greet one round brackets and curly brackets so we can use numbers in function names and variable names we just can't start them with a number so this is a valid function name i'm calling it greet one because i'm going to have another two of these and i don't want to have to think of completely different names every time so i can have greek one greek two and greek three and let's just write console dot log and we'll output hello one here how do i actually call this function and when i say call the function this is programming lingo for make the pro make the function actually execute and the answer is we just write greet one the name of it two round brackets and we should put the semicolon in really so if i run this now it says hello one so we've already seen this and this is called a function definition now one thing to be aware of is that so that the node.js interpreter or the javascript interpreter whichever one you're using should we it will normally start at the top basically and read downwards so it's reading downwards it sees your function definition and eventually it comes if you've got one to a function call so now we're calling this function and by the time we do that it's already seen the definition of the function so it works however we can also in this case put the call to the function above the definition of the function so we can call the function before we've defined it as long as we do define it in our program let's try that and it actually does work and this is called function hoisting which is a name that i discovered recently i didn't know it was called that but this this does actually work with a function definition but as we'll see it it doesn't work with the other styles of creating the function that we're going to see so the second way to create a function is called a function expression we write let we need a variable here essentially which will actually be a reference to the function rather than just a simple value so let's call this greet two and i'm going to set it equal to and we need the keyword function then we have the round brackets as always and the curly brackets as always and in there i'm going to do console.log hello2 so we can call that same as before we have the name of the function two round brackets and ideally a semicolon so if i run this it says hello2 if you can see that that works however function hoisting doesn't work with function expressions it only works with function definitions so if i try to call this function before i define it with a function expression then i get a nasty looking error and it says actually on the top line it says cannot access greet 2 before initialization let's put this back down here so that it actually works so here we've got function definition and here we've got function expression we've got a function expression why is it called a function expression well probably because in programming in general an expression is something that evaluates to some value for example if i write two plus two that evaluates to the value four in this case this expression evaluates to a function which we can assign to a variable and then we can call the function so this is a function expression whereas this is a function definition there's another way of writing a function expression that seems to be getting more and more common i'm seeing it a lot in react code react as a framework for creating basically web user interfaces let's take a look at that so again we we have a variable to store a reference to the function i'll call this greet three and we set it equal to and now instead of the function keyword we have two round brackets which again could accept a list a pr a list of arguments we could put a parameter list in there and um we have a equals sign and a sort of right angle bracket sort of diamond bracket and then we have the curly brackets so let's put in the console.log hello3 so to call or invoke this three function we write again greek three and around brackets and if i run this it says hello hello three so there are at least three different ways of defining a function these are three important ways of defining a function if you are a beginner you will start to get lost just by looking at this it's really important that you type all of this out and you know try it out for yourself and try to give yourself an exercise now or some exercises rather and in each case we could supply function parameters we could put function parameters in the round brackets that's where they always go and then we could pass those to the functions in our curly brackets here when we call the functions we'll take a look at that in the next video but if you if you think you understand how this might work then do try it out you know so you have to give yourselves exercises of some kind so for example can you write a function that adds up all the numbers from 1 to 100 and then just prints them out or else returns the value that is calculated you know give yourselves make up some silly exercises that they don't have to be anything really serious or useful but make up exercises and try to practice all of these you know try adding up sequences of numbers or you know squaring numbers like i've done here or whatever springs to your mind converting um a temperature in celsius to a temperature in fahrenheit converting a number of days to a number of months whatever you like make up exercises and try to do them you've got to practice this stuff to learn it so in the next video we'll take a look at how we would handle return values and parameters with these different ways of creating functions but do practices or you will start to get lost so until next time happy coding