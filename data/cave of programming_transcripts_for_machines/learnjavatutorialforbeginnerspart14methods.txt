hello this is John from K programming. comom and welcome to tutorial number 14 in the series of beginners Java tutorials from cave programming and in the last tutorial we looked at at classes and objects and in this tutorial we're going to look at sub routines in Java so here I've got some code I created in the last tutorial and this is just a little person class and this person just has a name and an age so it has some data associated with it and later on I'm creating a couple of objects a couple of people in other words using this class and giving them names and ages and then I'm printing out some inform information down here but of course we all know that um uh people have associated with them not only data like their name and their age and their mood and height and so on but also um we have behavior that we can we have things that we can do and behavior in Java is modeled using sub routines and a sub routine that's part of a class is called a method which is um the terminology is a little bit strange but there you go so let's give this um person class some behavior let's enable them to do something so um I want to make this um person be able to kind of say what their name is um and how old they are and um I'm going to create just a little sub routine here that's going to be part of the class so um I'm going to first I'll show you what to type and what I recommend is that you just type this out without worrying too much about what it means and once you get um into the habit of creating just basic methods then you can you'll start to understand um the meaning behind them so I'm going to type void here and then I'm going to type the name that I want the method to have so I can just make that up and I'm going to call that speak and methods um should always start with a um lowercase letter and you just capitalize the first letter of every word in the sub routine so I've only got one word here so it'll have a lowercase letter um and the only exception to that is what we call a Constructor which we haven't looked at yet but that has to have an uppercase letter because it has to have the same name as the class but we'll look at that later so we have void and the method name and then you have a couple of round brackets like this and then finally we have a open Kelly parenthesis and then a closing Celly parenthesis and when you create a method I would strongly recommend that you type out all this stuff first so don't open the parenthesis and then start typing stuff in here just put all the parentheses you need in first and then you won't forget them at the end and um in this method we can have some lines of code that are going to actually do it's going to actually do stuff um and uh whenever you have parentheses like this a pair of parentheses in Java you should always indent by one tab the stuff that's between the parentheses and if all this stuff about kind of parentheses and formatting seems a bit picky to you believe me it's it's not picky and it will massively help you um to improve your Java if you bear in mind what I'm saying here and if you um do screw up your formatting somehow like if I type um I could type sis out here for example hello like this if you this is screwed up because there's no indentation here and a quick way to fix that in Eclipse is hold down control shift and press f for format and it will automatically format your kind of method so here I've got my my basic method um kind of framework and then here I'm just going to type some code and as you've just seen I could type this out hello um and I can have as many lines of codes in there as I want and if I run that um well nothing will happen now because I've just got um a class and I've added a method but I haven't called it anywhere because to run this Behavior you have to actually call a method or in other words you have to type some code that makes this run so down here I've got two person objects and um I've got this one that I've given the name Joe and this one Sarah here and I'm let's make now that I've added this method to the class both of these person objects now have that method and they they can run it so um let's make this person one object run this method I can type person one and then you use a dot just as with variables here and then the name of the method and the important difference is that um when you're dealing with a variable that's part of a a class or an object you just have Dot and the variable name but with a method you have dot the method name and then you always need these round brackets like this and then of course the semicolon so if I run this now I'm going to get um hello output here um and this is this is coming from my um personal one object and I could do the same again for this person two object I could say person two. spech and um and this this syntax just runs whatever code you put in this method so in this case this is running this code here because that's what I put in the method so I run that and I get two hellos because I'm calling hello twice and you can call it of course as many times as you like on the same object it doesn't matter like I could put person one. spe again here like this um but it's more interesting um to actually make it do something with this data for example so I could say now to access this data here I don't I don't have to do anything special I can just use these names directly in the methods of my class and um and the methods have access to this inst what we call instance data here or the instance variables so here I could say um my name is and I'll say plus um name and then I'll say I'll have a um an and here I'll just say and I I am Plus Age and space years old oh and I I missed out a plus there so what I'm doing here is um I'm just concatenating this data into a long string so I've got this this might look a bit confusing but basically it's just here's one bit of data here that I've typed in literally and after a plus here's another bit of data this is plus another bit of data a string that I've typed in another bit of data after a plus and then a plus and a final bit of data so this is just building up one long string here and if I run this so um my my objects both have their own particular copies of these variables so the first one here is outputting the information that I set there and saying my name is Joe blogs I'm 37 years old and the second one here I set the name to Sarah Smith and the Aged to 20 so now I'm getting that output down there um and you can you can put um as as many lines of code as you like in here for example I could have a um for Loop like I could say for in IAL not I Less Than 3 I ++ and I could put this in Loop and um I could just repeat that three times like that so um methods you can put any code you like in there and they can it can refer to your instance data here um if if you're new to uh methods which you may well be if you're watching this tutorial um it can be really easy to confuse them with um data and as I say the the methods always have these round brackets and the instance variables not so I i' really strongly recommend just adding um some methods to your classes and trying them out for yourself and to finish off this tutorial let's just add another one here like um I could say um what should I what should I call it um I don't know say hello so I'll capitalize the first u letter of each word after the first one the first one has a lowercase letter and then because this is a new word I give it a capital H round bracket like that open the curly bracket eclipse is actually putting the closing curly bracket for me and I could say I know sis out um hello there and again if I run that there's not going to be any change because I'm not invoking this method here I'm not calling it and to invoke it I'd have to have an actual object like this one for example and say um wh got my fingers on the wrong keys there first someone dot say hello like that so I run that and um I've got a hello there and I could have it down here as well so um pretty simple um but it will be confusing if it's the first time you've seen it and actually it took me quite a long time um when I first started programming to get my head around this idea that you could have these Define these methods and then call them somewhere else so I definitely recommend playing around with it and then in the next tutorial we're going to look at um getting data into um into methods and getting data out of it so parameters and return types in other words but I think that's enough for this time have fun with that and join me again for the next tutorial and until then Happy coding