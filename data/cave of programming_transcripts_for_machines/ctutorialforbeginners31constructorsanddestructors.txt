hello this is John from cave of programming calm in this tutorial we're going to look at constructors and destructors in C++ a constructor is a special method that runs when your object is instantiated and the destructor is a special method that runs when your object is destroyed so when you create an object when you create a specific cat in the example I've been working with from your cat class that's when it constructor runs and when the memory for that object is D allocated when the cat is destroyed that's when the destructor runs so let's take a look at that I've created a main function here and I've put two C outs in it so once right at the start it says starting program and one's right at the end just before a return and says ending program so if I just run that now it's just going to say starting program ending program I've also created a cap class like we had in the last tutorial I've given it a private eye i've been calling this a data member it's actually a specific kind of data member it's an instance variable because as we'll see in future tutorials this happy thing here every single cat that we create from that every particular card every particular object that we create from the class will have its own version of this happy variable so every cat could either be happy or sad or get on to the future so this is an instance variable of type baltar called happy and we've given it a method called speak like in the last tutorial and all that does is speak just looks at happy and says if happy is true i'll put me out otherwise if happy is false output like a distressed cat Nori's angry cat noise and you'll notice here that in the last tutorial I actually initialized happy I set it to true or false and here I've removed that initialization so we're not setting happy to anything and it's an interesting question just to start off with and this is relevant to what we will talk about in a minute what's going to happen if we run this program what value will happy have let's go to the main function here and I'm going to create a cat cat let's call it Bob so this is called instantiating we're instantiating a cat from the class in other words we're creating a particular cat object to represent a particular cut from this blueprint the cat class let's call Bob speaks of a time just dot s and do control space the autocomplete just completes it for me I was just holding down ctrl pressing space after typing the first few letters there let's run this and actually says well we've got an error here yeah I've got to body include file in I always forget that fortunately a compiler cut is this kind of error so let's do include cat stage because we need we need to include counter H in any file any CPP file or even a header file where we refer to the cat class so in this canva age we're defining the cap class so obviously we don't need to include capital H in capital H that would be a recursive you know your program would never compile even if it allowed you to try to build it which you might ago I don't know I've never tried it but in can't dot CPP where we're supplying the implementation of the cap class the actual guts of it actual code that does stuff there we need to include capital H and also because I'm using that cut class in the main function I need to include cut H there as well otherwise that compiler just won't know what it is okay let's build that I use a shortcut and in on a map it's control B to build or project actually that's a bit lengthy maybe I should just build a particular one anyway let's let's run that now and it says so it seems and if you look at the implementation here I suggest that happy is false because otherwise it would have said meow and in actual fact in C++ the like instance variables like this bool happy are not initialized automatically you have to give it a value and if you don't do that it's just going to have whatever garbage happened to be in the bit of memory that was allocated for this boolean variable so for whatever reason in the bit of computer memory that this is using the happen to be like a zero or the equivalent of a zero for a boolean and that's why it's false but it could just as well have been it could be could have been the equivalent of true that could mean a one in there and that might change depending on what programs you run and what happens with your operating system so you must initialize variables but as we saw in the last tutorial at least in Eclipse CDT here if I set this equal to true and we actually get warning let's just save that and build air is probably not going to appear now I've actually upgraded my Eclipse here to the latest version which is Luna at the moment if we look at I says initialization non static data member in class initialization so basically we're going to look at static data members later on this is a non static data members and also known as an instance variable and we should be initializing it in the classes while it's telling us although that will run and it will compile and it will save me out as we should expect if the cut is happy so where should we initialize data members then well good place to do it is the constructor so to create a constructor which is a method that will run when that when we instantiate the class let's go to this public session now that usually the convention I'm following I've chosen to follow is that I start my variables and my function names my methods because we call remember a function and method it is part of a class I start them with a lowercase letter but I have to make an exception for constructors and destructors because they must have the same name as the class and that's cat with a capital C C++ is case sensitive so I'm going to type cat ta round bracket semicolon and another thing about constructors and destructors and this is a constructor is that they don't have a return type so all of the functions have a return type even if it's void which means that it doesn't return anything that's still a return type it just says this returns nothing constructors and destructors can't return a value so they don't have any return type not even void they have nothing there so all you need is some name of the class and round brackets like that with a semicolon let's define this constructor let's implement it I'll go to cap dot CPP put this above my other functions just because it's a logical place to do it but you can put them in any order actually so let's say here capped remember no return type colon colon because we need this to associate the function with the actual cat class and cat which is the name of the functions the constructor so in this case it's the same name as the class round brackets open and close curly brackets let's have a see out and let's say here cout created and underneath I'm also going to set happy equal to true rather than setting it when we actually declared the variable because that was as we'll see later on that's kind of a bit of a useless thing to do and a proper place to do this is in the constructor so we've set happy to true and that's going to run if we look at the main function it's going to run at this point here when when the actual object is instantiated when the cut is created from a class let's run this particular cap called Bob is being instantiated from from the class so it says starting program that comes out here then we we instantiate the object and it actually says cat crated because the constructor automatically runs at that point then it says meow because we're running the cat speed Bob does speak here then it says ending program like that we can also define a destructor which will run when the object is destroyed so let's take a look at that we'll go to cut to H and a destructor it's exactly the same as that constructor like that same name as the class must be in the public section and except that it has a tilde at the start so I'm going to put a tilde here like that and then we need to define that let's go to capital CPP and I'll put this below the constructor and above other functions just because again it's a logical place to do it doesn't have to be that and again we need the name in a class colon colon then the name of the particular function which in this case is tilde cat because it's the destructor and it has to have the same name as the class and it has to have a tilde in front of it and it's just put in there cut destroyed their stride so I'll run this and it will build automatically and what's something now is compare the output with the main function here so it says starting program cap created that's at this point then now then ending program and then it says cut destroyed now the reason for this is that if we declare a variable like this we instantiate an object we say the scope of this variable is the nearest pair of enclosing curly parenthesis curly brackets which are these so that's the scope is the region in which this object exists and in which we can actually use the variable and so when we hit this closing curly bracket here at that point the object will be destroyed the memory associated with it will be given back to the operating system so that other programs can use it and so your own program could use that memory for something else potentially and at that point the destructor is called and that's why it's coming out just here after the last lines of the program we can actually change that so usually curly brackets are associated with a statement like a function statement like here or an if statement or a loop or something like that but we can't just graduate ously use curly brackets and a program if we want to and that's not very common to do but sometimes it's done just to specifically deallocate memory at a specific point in your program so I'm going to put curly brackets before and after before where we actually declare the cut object the cut variable before we instantiate a cut in other words and after the last point where we use it which is when we call speak on it here and let's just use the formatter shortcut so it's command shift F on a Mac or ctrl shift F on on Windows I think to actually automatically format this remember we've got to in between curly brackets and these are no exception so this looks a bit strange and it's not very common but we can't do it and now what effect this is going to have it's it's going to mean that cat only exists between these curly brackets so after the closing curly bracket because we declared it within these curly brackets we can't now do stuff with barb we can't call dots Bob speak again down here because it's F is outside the scope of this variable which is just here can't do that and also and the memory associated with this object is going to be D allocated in other words the object is going to be destroyed the particular cat will be destroyed when we hit this closing curly brackets I don't like to talk about cats being destroyed but it's not a real cut so so let's just run that see what happens and remember in the last version out of the program it said cat destroyed after ending program because the cat was destroyed army hid disclosing curly braket that's where the object is destroyed the memory is D allocated associated with it let's run it now and see how that changes so now everything is is as before starting program cap created now but then it says cat destroyed it says that before ending program because the object is destroyed when we hit this closing curly bracket here before we hit this line here so I'm going to leave it there for this tutorial and to practice this what I'd recommend is define a class of your own give it at least one function give it at least one data member like that then add in a constructor and actually type it out yourself because when you create a class if I go to the file right click project and go to new class you can just tick these two automatically generated constructors and destructors and if you have a lot of trouble getting them working it's worth just trying that so you can see them working but it's really really important to tighten them out yourself when you're first starting because that will really help you memorize and what they look like and if you don't do that you'll see you'll sort of tend to forget things like and exact you know formatting you'll forget it is casesensitive a linear tilde or a semicolon or you'll put it in a wrong place or something so it's very important to type the constructor and destructor out yourself when you've done that I'd recommend yeah initialize any variables that you've got in the constructor and actually use them in in a function that you define use them to do something so you can see that their value is what you expect it to be at the very least to start problem in some method I put the value of them and also put statements in your constructor and destructor just so you can see when they're run build that program and try putting curly parenthesis around the instantiation of your object around you know limit the scope of your variable a bit more with curly parenthesis and see what the effect that has and that the great thing about doing all this yourself even if you have to keep referring back to example program like this one which is normal but the great thing is that you do uncover any weak spots in your understanding and you might end up kind of scratching a head for some time but eventually you'll see what you're doing wrong and the longer you puzzle over it actually the better is that ultimately sticks in your mind so it's really good thing to do even if it's a little bit frustrating to type all that stuff out at first it's well worth doing so that's it for this tutorial and until next time counting you