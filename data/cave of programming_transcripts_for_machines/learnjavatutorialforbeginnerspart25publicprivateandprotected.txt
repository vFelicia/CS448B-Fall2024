hello this is John from cave of programming calm and in the last tutorial I actually said that we would look at generics in Java but after I thought about it I realized there were a few things that we should cover first before getting on to generics so I'm going to try to get some tutorials out pretty quickly on some other subjects and in this tutorial we're going to look at the access level modifiers or unset specifiers public private and protected so let's look at the simplest one first let's look at public I'm going to create a new class here some of the rightclick project go to new class and let's call this machine now just reach Ange let's call it plant so call it plant and I'm going to give plant a instance member variables ear so I'm going to call this let's say string name and yeah let's just leave it a string name and I'm going to make string name public now supposing I create a plant instance here in my main method so say plants plant I'll create a variable so that I've got a reference to it and I'll set that equal to a new instance of plant like this now if you've got a instance variable or a member variable that's called published declared public you can access it from anywhere so within plants that say for example in a constructor so public plant like this of course I could access it here I could say name equals let's say say on a plant I'm a plant and a stupid name for a plant how about Freddie okay so if you want to access instance variables within the class you don't need to prefix them with anything but some people like to prefix them with this and then that just mean that's kind of superfluous here but the point is that you can access name within the class of course where you can access it from anywhere else to so I can say plan dot well let's just say suss out yeah it's a cell plant dot name so absolutely anywhere where I've got a reference to a plant object I can access name and this is bad practice usually so bad practice because you shouldn't usually declare instance variables public like this the idea is you usually want to encapsulate them hide them away from the world and make people access them through methods so you can control something with them if you do want to have a public instance variable most often you're going to make a constant and if it's constant usually you'll also make it static so you'll access it with a class so I'll say public static I don't know like ID for example or yeah IDs as good as anything public starting in ID so I'm putting this in uppercase to signify that it's going to be constant and I'm going to say final which will mean that it can't be changed it's constant and I'm going to initialize it to just some number like eight and then you would you could say here could access that again from anywhere but I can't change it from anywhere because it's final I'll say plant ID so if I run that it's just gonna output the name and the idea and this is acceptable practice there's nothing wrong with declaring public constants like this as long as it's final okay meaning constant so that's that's public it's pretty simple meaning you can access the variables anywhere and by the way this here just means the same as plant yeah it's just that if you want want to access a objects member variables from within the actual class then you use this dot to get a reference to it whereas externally we'd have some named reference like this but it's the same thing basically anyway that's so important so the next simplest one is probably private so to illustrate pry though I'm going to create a subclass of plant so I'm going to go here and say new class and let's call this oak because an oak is a plant and I'm going to say oak extends plants and let's just give that constructor as well so public oak like this pressing on key on my keyboard okay there we go now supposing implant I declare something private that's the lip leave these together up here and I'll go down here and usually when you have an instance member variable or class variable a static variable some kind of variable up here basically usually you want to declare it private you want to stop people out listing it from outside the class if I say private string type let's say and so now string is private and private means it's the opposite to public really public means you can access it anywhere private means you can only access it from within this class so I could happily say type equals plant here so I can use type here or if I want to say this type makes no difference but even though oak is a child class I cannot say here type equals 3 so that's giving me an error and it's saying if your plan dot type is not visible because it's private so let's say once won't work type type is private so I can only access type literally within these brackets here because that's that's a scope of a class I can access anywhere else I can't access it here either so system dot out say suss out plant plants dot type that's not going to work either so again I'll say won't work type type is private so private means only within the class and only within the class means within these brackets after your class declaration now often you want to have a variable which can't be accessed on the outside so it's not public and is you can't it's protected from being accessed here for example in a completely different class this is that app class but you want it to be access you want it to be accessible in child classes and that's what protected is for so I saw something here and say protected let's say protected string size and I'll set size equal to this stop actually let's let's post down a bit further so down here let's say this dot size equals large and you'd normally want to like I shall set it equal to medium usually you'd want to use our numerator type for this kind of thing but I'm just trying to illustrate they're probably private and protected stuff here so I won't worry about that so if you've got a protected variable you can access it within the class that's fine so actually you can access it doesn't matter what access level modify you put here you can always access them within the class that's always possible but if I go to oak now and I want to say like this start size equals large oak trees are pretty big then this yeah this is going to work now because size is protected and protected means that you can access it within the class within any subclass and also within any package sorry also within the same package so this works because size is protected and oak is a subclass of plant but so protected lets you access a variable within the class so within these brackets and within any subclass and also within the same package anywhere so let's create a new let's create a new class here and let's call it field like this and let's give let's give field a an oak actually let's give a plant source a plant plant and cause new plant I'm going to make this plant variable private so when you do new plan you can do it happily up here or you could do new plant in a constructor as well and it's let's give it a constructor while we're at it so here now we're in their default package so here I can say plant I see plant dot size and actually I could just do this analysis our plan dot size and this works as well so if I save that this works size is protected and field is in the same package as plant so that's fine unless let's just kind of emphasize this a bit by saying everything's in the default package at the moment so I could access plan dot size within main as well because my app here the class that main is it and there's also an end of the default package let's just create a new package here so let's call this world should be lower case actually I'll call that world and let's just drag these plants into world like this and just let Eclipse refactor it so this kind of emphasizes that plant is in the world package field is in the world package so for that reason I can access the protected variable plan dot size we will go to app which is now in a different package and I try to say see Sal plants dot size then it won't work size is protected site is protected and app is not in the same package as plant so it won't work won't work and so there's this bus public private and protected so private just within the same class public absolutely anywhere protect it within the same class all within the same package and there's one more possibility and that's that you could have no access level modifier no access specifier so I could say here string say and say int height and so I haven't given this a public private or protected and if you do that this is now package level visibility so I can access height of course in plan you can always access stuff within the same class you can always access the instance variables from within the same class to say eight there and I can access that within that say poke I can say this stop height equals ten or something so no access specifier so it works because oak and plant in the same package but you see it is possible to have a child class which is not in the same package by the way let me just show you that because the app class here is not in the same it's not in saint packages plan I can't do this out plant height so and this one work won't work because app and plant in different packages and the height has a package level package level is ability well this is one more possibility here which is that I could create a new child class here let's say new class and let's call this grass and I'm going to say grass extends plant and I'm going to just add the input there ctrl shift though to import world plan and let's give this a constructor so public grass and now supposing I try to do this out sis out this stop height it's not going to work because if I look at plant height has no access specifier that means its visible only in the same package and even though grass is a subclass of plan we still can't access this here this won't work won't work grass not in the same package as plant even though even though it's a subclass so that's a lot and that's coming out so actually runs and that's all I want to say for this tutorial I'm just going to summarize that again now but if your brain is already bursting it seems we were just bored then this is a good place to stop watching but let's just summarize these different possibilities here so um if I put this here and I say let say private only within same class and public from anywhere and protected means same class and same sorry child class so I subclasses why she say so class and same package and no modifier means same package only and of course you can access you can always access things from within the same class so I could say same here same class protected same class subclass same package and of course same package imply so you can access it from within the same class so I think I said and people sometimes get confused between probably private and protected and it modifies on the classes themselves so if you can only when you create a class in a file let's look at plan if you declare it public that means is it's visible from outside that file and it's got to have the same name you can only have one public class in a file it's gotta have the same name as a file you can't declare classes privates I can't say private class something here something like this and because this public private and protected stuff does not apply to classes it only applies these instance variables and but you can miss off the access specifier altogether and then this is just visible within this file and you can have as many classes as you want in one file but as I say only one public class because it has to manage the file name so that's it for public private and protected and I'm going to pull this source code on cave of programming comm and join me again for the next tutorial and until then happy coding you