hello this is John from Cave of programming. comom and this is a tutorial on packages in Java so packages perform two functions one is that they enable you to organize your code in a sensible fashion that enables you to find the files that you need quickly and the other is that they um stop you having conflicts between Class names so um if you um have two classes called for example fish then as long as they are in different packages then that's okay but you can't have two classes with the same name in a same package because that would be a conflict so let's take a look at an example here I'm going to create an got Eclipse running and I've got my main method here as usual and I'm going to go to file new uh class and I'm going to create a class called fish and up here you see I can specify a package Now package names um by convention are usually all lowercase and they can't have any spaces or um they can't have spaces in them and you don't usually put underscores in them or anything like that um usually a uh package name is something um very simple so let's call this ocean so I'm going to put the fish class in the ocean package and I click finish and in app now let's say I want to use the fish class oh actually before I do that I need to tell you that um you'll see that fish now has a statement at the beginning saying package ocean that says it's in the ocean package and if you have a package statement um in your file your class file it should be the first um statement in the file so it's got to come first before your other statements and if you look at your disk so let's rightclick the um project folder go to properties go to the resource um section here here's my um the actual folder that my um my project is physically in on a disk so if I right click that and just copy it cancel that and if I let's go to that on in Explorer uh I'm already there I think actually here we go um so um the convention in Java and Eclipse creates this automatically for you is that usually you have a source SLC folder that contains your Java files and a bin folder that contains your generated class files and if I go into the source folder now you can see that um app. Java which contains my main method um that's in the default package and it's in kind of the root of the source folder but I put fish in the ocean package and anything in the ocean package is going to be in this ocean folder subfolder so there's my fish. Java and that structure is also reflected in the output folder the bin folder here's the generated app. class file and there's the ocean folder with fish. class in it so um now let's actually use the fish class I'll say fish fish equals new fish and um I'll get an error initially but what I have to do is um after any package statements that might be here and um excuse me so actually in this in this case here um because app is in the default package um I haven't got a package statement but if there was one um I have to type other statements after that and um in order to use things from the ocean package I need to type import uh ocean and I'm going to say ocean do fish because I want to use the fish class from the ocean package and now my error is gone and we're fine let's create another um class in this package so I'll right click the package folder here and I'll go to new class and you see that the package is now filled in for me because I right click the package and let's create here um something like I don't know seaweed so seaweed and if I now want to use the seaweed class uh so I want to say something like seaweed weed equals new cweed I'll just do control uh space there and in fact if I do this Eclipse I think will add the import statement for me there we go and so you see Eclipse has added um another input statement or I could have just typed that by hand now an alternative that you should know about to having a different import statement for each class is you can type you can import everything from one package by just saying import uh in this case ocean. star and star um is a wild card that means import any class from that package um so now I can use use both of these classes uh but the great thing about using modern IDE like eclipse is that you actually never have to worry about typing ah sorry that was my doorbell going there I was going to say you never have to worry about typing import statements yourself um because you can use a shortcut and your IDE will handle it for you so um if you right click and go to Source um and go to organize Imports um and you can see the shortcut for that is control shift and O um Eclipse will automatically add any import statements that you need and it will remove any that you don't need so if I select that you can see it's added um all the inputs that I need here um as long as it can find the class files somewhere like either they've got to be defined in your project or they've got to be defined in a jar file that you've included into your project then it will deal with adding the actual import statements automatically so if I remove that again and I could do control shift and O So you need contrl and shift at the same time and then press O then again it's uh that's organized my inputs for me and added the ones that I need now um packages are hierarchical in Java uh so you can have packages within packages um and if that sounds mysterious uh you only have to think that well you have folders within folders on your disk um and it's pretty straightforward and the packages just mapped to those folders the difference is that um whereas uh with folders if you specify a folder name you you usually use slashes to separate the different subfolders with packages you use dots so let's see how that will work supposing I've got an ocean package and I want to create a subpackage within that called um plants let's say so um I'm going to go to file new and um new class and let's have a plant like um uh I don't really know let's say um algae which uh algae or however you pronounce it I guess is a type of plant or is it an animal I'm not really sure um anyway that'll do uh it doesn't matter and I'm going to type here I'm going to say that I want this to be in the ocean package and then I want it to be in a subpackage of ocean called plants I think I'll GE creatures actually uh but yeah not important I'll leave that okay um so if I click finish now um you see that I've got this package here ocean. plants with this class algae in it and if I look on my dis then um in if I if I go to let's say the um Source folder and I go to Ocean um and there's so now in my ocean folder corresponding to my ocean package and that's now got a subfolder in it called plants which has my algae in it um and I could like take my seaweed in Eclipse if I want and drag it into the ocean package like this so click okay and now seaweed is in the subpackage plants of ocean and if I look at seaweed um now at the top it says package ocean. plants Eclipse has updated that for me and in my app here if I want to use seaweed I have to say import ocean. plants. seaweed so this is saying um import the seaweed class from the plants package and plants is a sub package of ocean and uh you separate the different subpackages by Dot so that's um that's I guess more or less the really all is to packages it's it's not that complex although it seems a little bit baffling when you first see it um and there's there's just one thing that I think I should mention which is that if you want to um distribute your code so that other people can use it um which would usually be in a jar file then um you want to make sure that your package name that you put your stuff in um is unique in the whole world so that um people can use your packages and it doesn't matter even if someone someone that uses your code might already have a package called ocean themselves um and then if you have a a package called ocean um it could conflict with their package or at least um they might have a class called fish in a package called ocean and if you give them a jar file that also has a package called ocean with a class called fishing it then they can't use it cuz there's a conflict there and for that reason um there's a convention in Java for creating worldwide unique package names and the way it works is um let's say I wanted to distribute a class called um let's say um I don't know let's say I've create I've created some game and my game's called aquarium so I'll give this class a name called aquarium and I want other people to be able to use this code um what I what you do is you reverse the um you could use the like the name of your company or your own name or something like that but it's a convention that if you've got a website you reverse the name of your website so uh my website is Cave of programming. comom so i' put this in a package called com. Cave of programming um and then I'd probably give this um a specific package just for this particular project so this could be called um I don't know like um ocean uh sorry it's got to be lowercase ocean game or something like that and then um so now um my if I look on a dis so my aquarium here is in this package com. programming. oame um and my website is Cav programming. comom and this particular project is called ocean game at least as far as the package goes and if I look on a dis of course I'm going to see um a com folder in the source folder um with a C programming subfolder with an ocean game subfolder in it and there I'm going to put more sub packages for my game just as I need them for organizational purposes and um wow it's really noisy here there's dog baring now and uh also that's going to be the same in your you're going to have a bin folder that has the same subfolders and if you put those into a jar for distribution your jar file will maintain that package hierarchy within it so if you look at um if you look at code in Java or you look at um a source like the contents of a jar file you'll often be perplexed because you see stuff like com and or and you kind of think what what's common or what do they mean but it's really very simple it's just a reversed website name and that's all it is just basically just a folder um and that's all there is to it uh so that's it for this tutorial uh we got through it in spite of doorbells and dog sparking and in the next tutorial um I'm going to show you the basics of using generics in Java which uh there's something that you don't need to use for your own classes very often but you often need them to use existing classes so uh we'll look at that in the next tutorial and you can find the source code for this tutorial on Cave of programming. comom so until next time happy coding