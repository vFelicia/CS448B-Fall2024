hello this is John from cave of programming calm in this tutorial we're going to look at getters and setters in C++ getters and setters were all the rage in the early days of objectoriented programming and they're still used a lot although some people say that you should try to avoid them in C++ but we're going to look at them here because they are still very important to know about sometimes you need them so getters and setters are just methods for getting setting values in a class getting a set up getting setting instance variables let's take a look at that so I've got this project here basically project I've created I'm going to right click it and go to new supers plus class and let's give this a name I'll call it person I won't put it in the namespace I'm going to tick to say that I want a constructor and destructor because but let's have just the constructor actually we don't really need destructor and I'll click finish so if you're modeling a person in C++ you're going to have some attributes like name and age and whatever other data you need to put in there to capture whatever aspects of a person you want to capture for the purposes of this tutorial let's just give person a let's say let's just give them a name so I'm going to above the public section here I'm going to have a private section and I'm going to type string name so you'll get an error there and that's because we haven't included the the right header for string let's do that so the top above the class here below this defined thing I'm going to put and define preprocessor directive I should say rather than thing really let's put include iostream on some compilers you might need to say iostream dot h or you might you might even need to include string or even string dot H and I'm also going to put using name space standard and I believe with this compiler that will give us string oh yeah it's a lowercase s I always forget because it does vary I think without these wouldn't work yeah so string class is defined somewhere in that iostream for this compiler at least we can we can set a value for name for this person let's let's do that so let's go to person dot CPP here's the constructor let's say that name equals Jorge now we can create a person object here in in our main CPP file let's say here person person so I've been taking care to give my classes uppercase first letters so if I want I can I can give the actual variable the same names the class with a but with a lowercase letter some people think that's really bad but I quite like doing that and now well we can't do much with person at the moment what we could do is we could give it a method and that outputs details about this person let's do that let's say I'll call it two string so Java actually has a method called two string and the idea is that returns a string that shows you information about your objects let's do a similar thing here in C++ so I mean to string turned a string like that and we'll go to we'll go to person dot CPP and implement this two string method let's say string person to string we've seen all of this stuff before and I'm going to just return name for the moment so that we can have a way of getting the data out of that person or we could say something like person's name is plus name that just gives us kind of a way of outputting information we can include the age in there if we add an age or whatever whatever or the detail we have said George is not correctly spelled but it is so I'll ignore that let's go back to the main function here and let's just say C out and person to string so two strings returning the string containing details about a person and because it's returning a string we can just use it and C out so this this will be outputting whatever this actually returns and that's a string so we can output strings with C out so we're good I think we we may need in yeah we've already got iostream in here and using namespace standards let's just run this and with a bit of luck it's going to have already compiled it once so I should just be able to click the Run button and while I'm waiting for that that the thing here is that sometimes you you want to be able to get and set variables in a an object directly and that that's not always the case because if you allow people to get in set well let's just deal with this error so it says person person yeah but to include persons or age I always forget something so I'm glad that the compiler picks it up let's include that person by age sometimes you want to get in set variables within your class let's save it and see if it builds but if you do that it's almost as bad as exposing the actual variable directly we'll see this in a minute but some people say that it's not good idea so it says person's name is George here now what if we want to be able to change that name you want to get it and set it so let's first look at set method if we go to person dot age here I'll give this a method call what it'll have no return type and I'll call it set name this is kind of a standard format so we call it set something lowercase s and because I'm following this convention of capitalizing the subsequent words in every kind of functional variable name I'll give the name and up case N and then we'll go to person dot CPP and implement that so I'll say voyage person set name and we're going to pass this a string name that we're going to use that string to change the name of the person let's say string name in fact beings have already called this name for the moment I'll I'll call it something else and we'll see a better way of dealing with that in the future let's call it string new name and in there all I'm going to do is say name that's the name of the person defined in the class equals new name so this this is called a set method let's take a look at this error method declaration not found yeah I need to define the prototype as well as copy this yeah I just did it already oh yeah but I missed out this string new name okay so what I've got here is I've got a method here that's that's taking a string and that method is simply setting value for name setting a new value for the name of the person associated with the class so let's let's actually use that so here in my main method when we create the person that constructor runs and that says that the name to George it doesn't have to do that though it could just not set it at all but now we could say person set name let's imagine George's had a sexchange and set into Georgina or maybe he's just a transvestite that I don't know but anyway so now we can run that again and we get now person's name is Georgina so that's the setna that it's pretty simple we're just using stuff we've already seen but things it's a method with a name set that takes some some value that you want to set one of the variables of the class to name in this case and it just sets that value to what better you pass in and this is how you use it so it's pretty simple and if you can't remember all this stuff if you even type that first then it's just a question of everything else you've done it has just been to get that to work that was the whole purpose of everything we've done so that's a set method or a setter also called a mutator some people think this is bad because it's almost as though we've exposed this variable directly it's not quite that bad because we could document that we've got this set method and then if later on for some reason we need to change how this class works and we need to change string name to something else or store it in a different way we can still do that without altering without altering this method and hence without altering the documentation of this class because only this only this bit here would actually be documented only the set method prototype and we can change this if we want to so it's not as bad as exposing the variable making it public and allowing people to change it directly but it's getting there and that's why some people think you should avoid this let's give it a get method as well to get our name so I can say strings that will return the string we'll call it get name by this and it won't have any parameters and then we'll implement get name so go to person dot CPP I'll say void no sorry string person get name and all that's going to do is return name so it allows us to get the value of the name for this person and we'll go to get some set of CPP this some main function and let's say C out name of person with get method and let's just use another one of these Chevron's and thus a person put two operators I should say persons I'll get name like that and endler so if we run this then we should get name a person will get method georgina so this to string method i implemented thus and thus almost a get method but the idea behind this is you can put more details in it if we wanted so that's that's getters and setters it's just very simply a method call set something rather lets you set the value of an internal variable in the class well it doesn't have to but usually by creating getting set method you're implying that that variable exists but cuz it doesn't have to exist you could store this name in some other way in an array or something and the end user of this class would never know and we've also got this get method to get value for that and variable so yeah it's best to try to avoid this but sometimes you do need it at least you need a get or a set one of the two so to practice this the thing is just as long as you can remember basically what this program does nevermind to string I just pull that in just so we could see something happening early on but if you can get your program so that you you can have a class and you've got a set something or other and you've got to get something or other then then you've understood if you can do that you've understood the purpose of this tutorial so that a device creating a class could be person could be car could be any any kind of class that represents something and give it some variables and define like again set method for each of the variables in your class and see how that goes so that's it for this tutorial and until next time happy coding you