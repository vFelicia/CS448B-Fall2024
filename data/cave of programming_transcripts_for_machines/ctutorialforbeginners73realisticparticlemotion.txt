hello this is john from cave of programming.com in this tutorial we're going to be tweaking the motion of our particles in our particle simulation here that we were working on in the last tutorial just to make it look um rather more interesting so um let's let's go to particle.cpp here uh so if we look at this at the moment one of the problems with this is um the explosion looks too uniform especially in the early stages um although the particles have a speed that's sort of uniformly distributed or somewhat too uniformly between the middle of the circle and the outer edge and that means that it has a rather sort of blocky circular appearance especially when it starts out now one one thing we can do to change that is in the particle constructor here we're assigning speed to the particles and we're giving that speed a uniform random distribution between naught and some figure that we've decided on here what we can actually do is simply to square the speed so i could say m underscore speed equals m underscore speed times m underscore speed or more succinctly the same thing can be written as an underscore speed times equals m underscore speed now if if we look at that now it's gonna probably be much too fast we don't i think we've got a tiny glowing spot in the center which is um probably the remnants of the particles that haven't shot off the edge let's try changing this to a much bigger figure it's constant that we use in deciding speed see how that looks so i think it's still much too fast and what we're seeing now is just the remnants of the particle in the middle there let's add a naught so we need to experiment a bit to find a good volume now for speed and i think that looks quite a lot better so if you look at this explosion now you'll notice it's a lot more ragged and the reason for that is that by squaring the speed we've meant that the average distance between the particles increases as you go from the inner edge to the outer edge well this is putting it in a language it's a little bit loose mathematically but we get a basically a different distribution which exaggerates more the distance between the particles as you move towards the edge which i think looks quite a lot nicer now another thing we can do is give the particles a bit of curl so um let's let's go to the update method here and before we calculate the x and y components of the speed using uh yeah the speed using the speed and direction we can we can add something to the direction to make the particles curl around a bit let's say m on the score direction and we'll use the plus equals we'll use the interval in here to ensure that this happens in a similar rate on all different systems so interval times and we need to put in some sort of constant here which i don't really know what it should be let's try some figure like this which might be good or might not be let's try running this and see what happens so now the particles are curling rapidly and indeed this thing is imploding a bit let's try something a lot smaller i put another zero in there after the decimal point and still very rapid let's try another zero see how that looks we want something a little bit subtle so they still seem to be sparring very very rapidly oh yeah because i've written four instead of north point north north apologies let's try something more sensible like this okay let's try this so yes now we've got a subtle um curl there relatively subtle the part the explosion is still sort of um imploding in on itself um and we need to do something about that one thing we can do is try slightly smaller values still but we're going to have to fix something else here i think yeah so now the curl is so subtle that you don't even really see it so i quite like this sort of a value i think but we want to change something here um to make this a bit more interesting so there's um there's a couple more things that we could change here actually there's sort of an infinite array of things that we could change but what i'm going to do is i'm going to check in this update method if the particle goes off the edge of the screen because if it does there's not much point still drawing it and it might spiral back to the center but who knows really what it will do it's going to be more interesting if this particle goes out of its um nominal kind of allotted particle space which we decided would run from minus one to plus one uh in the x and y directions then we can reinitialize the particle put it back at the center and choose new new random values for its um speed and direction so let's let's say here if m on score x is less than minus 1 or it's greater than 1 or m underscore y is less than minus 1 or m underscore y is greater than plus one now we want to um reinitialize the particle with some more random values let's create let's create a function up here called init or a method i should call it technically because this function is part of a class let's put the code from the initialization code from the structure from the constructor into init and also initialize the um the location initial location of the particle in there and then in the constructor we can just call init we need to add the prototype to that in particle for that in particle.h as well i notice here i've got a public section for my functions but sort of superfluous really and it's it just because in a structure rather than a class everything's probably by default anyway but it does sort of help to separate visually the methods from the variables there what we can do is have a private section in here to put the speed and direction in and i'm going to make my init method private as well let's have another section for this because it's a function just to visually separate it from the variables so that's void init and let's let's try running that and see how it looks now so now i i think this is rather more interesting and for some for some reason that i'm not sure about i was going to say that it reduces the tendency of the particles to implode but that seems not to be the case after all and so i don't really know why it was but it does look i think more interesting maybe even a bit less curl let's try um naught point naught naught naught before oh that would be more let's try two see how that looks oh i didn't even call knit okay well i i got to sleep at 7am last night for some reason oh that's my excuse okay let's try it now i mean in fact i think what happens is particles tend to go off the edge of the screen but then they reappear in the center and that does seem to somewhat reduce as far as i can see from looking at this now the tendency of the whole thing to implode yeah because particles that eventually go off the edge they start springing out the center again later don't know if it would implode shrink to a you know to a point in the center if we let it run long enough but one more one last thing i think we can do here is um we can take a portion of the particles at any given uh on any given refresh and um we just reinitialize those randomly so let's say if rand is less than rand underscore max divided by 100. so here we've run max as a large integer which we're dividing by a hundred and and randy's going to be an integer from nor up to rand max so if we say that it's got to be less than a hundredth of rand maps that means one in every time one in every 100 times this runs it's going to be true and then we can just do an emit which is going to reinitialize some of our particles randomly now actually this this program is not completely independent of the processing power of your computer because the the blur will is basically running as often as it can within our game game loop and also um this random reinitialization will happen uh kind of just as often as it can because we're not using the interval in any way in there but i don't that probably doesn't matter too much what we've got now is something that's that i think is much nicer i don't know how well it shows up in the in my screen recording here but uh what i can see here is um the particles around the edge of this thing really sort of look like they're seething in an in and out of sort of massive molten lava or something it's kind of like that the surface of the sun which i think is really interesting now i'm going to leave this program there now so we're finished with coding in this course you could do a lot more things to make this even more exciting this is my favorite bit by the way um you're getting you're getting some color variation here because the results of the blur are left behind after the new particles have changed color and it's this color variation that gives this a lot of its excitement but what you could do is you could in the update method of the particles you could alter the colors of the particles separately but hopefully in such a way that they're sort of harmonized with each other or particles that are close by each other maybe or have similar speeds or whatever have similar colors as well but you could try doing something like that to create more striking color effects by having more color variation among particles that could be interesting well in fact the great thing about this program if you like visual things if you're a visual person is that it really does inspire you to just tweak it and try all kinds of new different effects so that's it for that and for this tutorial and indeed that's it for the coding part of this course i'm going to add probably i don't know one or two more videos i'm just explaining a couple more things here and we're going to take a look at the various kinds of c's that are on offer c sharp c plus plus objective c and so on um if if you've actually followed through this course well even if you've watched the videos congratulations if you've actually coded this stuff and got it working then seriously big congratulations uh hopefully this will have improved your c plus plus a lot if you were a beginner when you started the course then then this is an amazing achievement so we've got through all this um you're not going to be a completely fluent programmer yet to to be that you have to practice writing your own programs a lot you have to think about how to design those programs and experiment with different ways of coding different ways of designing find something that works for you and just practice it endlessly um but hopefully you are now in the position that you could go ahead and start writing programs of your own you'd have an idea of how to do that even quite complex programs like particle simulations so big congratulations most people who start a course like this the vast majority never get past the first few lectures i can tell you which i guess is the same with that a textbook okay so that's it for this tutorial and until next time happy coding you