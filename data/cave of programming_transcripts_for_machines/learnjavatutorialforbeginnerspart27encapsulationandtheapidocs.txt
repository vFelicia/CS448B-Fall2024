hello this is John from kave of programming. comom and in this tutorial we're just going to look at the concept of encapsulation in Java and I'm also going to um Talk little bit about using the um Java API documentation so um if you're already like a fluent programming programmer in C++ or something you'll probably want to skip this tutorial but um this is for you if you um don't really understand what the point of public private and protected is um and that sort of thing so I've already covered um public private and protected in previous tutorial but actually neglected to mention why we even use these keywords and uh let's take an example here so um if you create a class let's call it uh let's call it plant and um now your class usually it's going to have some methods and it's going to have some instance variables and um usually your instance variables for example if I have a string name you always try to make them private if you can now the idea behind encapsulation is that you encapsulate the inner workings of that class within the class in other words you stop people outside the class um getting at the kind of guts of that class and you just expose a kind of public API just some certain methods for people to use outside the class so if you've got um a string name um if you just want to use this in a class that's fine and if you want to use it U if you want to let people set it or get to it from outside the class then we use the gets and Setters that you declared that we saw in a previous tutorial um gets and Setters are methods that let you access this otherwise private data and of course you can create those by right clicking going to Source override Implement methods oh sorry no that's the wrong one um and this this again we covered in a previous tutorial but I go to Source uh generate gets and Setters and just tip the thing that I want to generate gets and sets for here we've generated public methods so these public methods can be used from outside the class as we saw in the tutorial on public private and protected um and the idea is um I could change this now if I wanted to and as long as these methods didn't change then anyone who uses this class wouldn't have to worry about the fact that the inner workings of class have changed and that's um a large part of the point of encapsulation um so um if you um now sometimes you you do make um the kind of class data members uh public but usually in that case it's only when they are final so you say like public and usually they static as well public static final um like um we could call this I don't know like a ID or something equals 7 so final means that um this can't be changed and uh let's make this a int there we go so if you do expose a um instance variable um well this isn't instance variable actually this is the class variable it's static then usually that's just cuz it's a constant and you just want to be able to say plant. ID but you can't change it from outside the class um and uh if you have a method that's just used by the class itself let's say you have some public um get data method for example and that gets you data about your plant maybe it returns who knows could return a string or some complex some object of some complex class or something um then um if suppose this uses um some kind of method that's only used by the class internally like it could we could have a um a public um int um get no actually maybe let's say calculate uh growth growth forecast something like that so the idea is that this is not intended to be used outside the class it's just um within the class I'll just return nine for the moment to return something um in that case I want to make this private again I want to encapsulate it prevent people using it from outside and here I could say just to just to complete this string uh data equals some some stuff and plus let's say calculate growth forecast so um and let's just return that now the idea is is that um you want to make everything you can private if you can make it private make it private if it needs to be accessible in a child class then make it protected and finally um the stuff that you actually want your end user to be able to use um make that public but try not to make any um data public except for constants so make everything as private as you can keep everything hidden within the class um and the idea is to reduce um one of another part of the idea is to reduce cross linkages in your um project so you don't want one class kind of getting into another class's stuff and using it and you don't you want to avoid creating a kind of Tangled Rat's Nest you just want to have a few methods that are defined public um and that are clearly documented and that don't change um very often and the rest of the stuff should be kept within the class so that's the idea behind encapsulation uh and as I say the advantages are that you um you hide away the implementation details within your class and just provide a public API application programming interface in other words just some public methods and you also reduce you also prevent classes being tightly coupled which means uh two classes are tightly coupled if they're calling each other stuff all the time and you want to you don't want that at all because you'll just create a horrible tangle uh so um I I hope that helps and I'm just going to show you an example of that now by kind of looking at um the Java API so let's say you want some documentation on a standard Java class if you go to Google um and you say um let's say I want the documentation for the string class I could type Java 7 which at the moment is the latest version of java and string and hit return and I can go to the first link here and here's the API page and there's the name of the class there's the package that it's in this shows you um the parent object of string which in this case is it's just got one parent um object and I can click on that if I want to see the documentation for object here are all the interfaces that the string class implements and underneath that we see some information about the class and often you see here examples of using it which is great and then when you go down now these are all the public fields and you'll notice there's only one bit of public data so this is like um this is a um like a class variable like um like this thing here and you'll notice there's as few of them as possible just one in the case of string and it's in uppercase which indicates by convention that it's final so if I click on that and I go to the full documentation you can see it's declared as public static final so you call it via the string class you'd say string. case and sensitive order and it's final meaning it can't be changed and you you only have if possible you only expose your um your um class variables if they are final and they're constant now underneath of that we've got all the different Constructors that a string has um and you can use the different Constructors by saying new and then supplying different kinds of parameters in Brackets and that will call up the appropriate Constructor for those parameters and then later on we've got the method summary here and um these methods here um they're not like all the methods that you have in the in the string class um in fact um these I think I think I'm right in saying that these are all the um public methods just take a look at one so um this declared public and the point is that okay string might use all kinds of protective private methods internally uh actually I think string doesn't have any protective methods but I'm sure it has private methods but when you look at the API the application programming interface document you um you don't you don't want to know about the private methods um because you can't use them and you shouldn't try to use them you want to know about the methods declared public because that is the public interface of the class it's the stuff that is designed for public consumption and that's s these methods here the methods that you can actually use um outside of the string class and we can also see here some methods inherited from the parent classes this is one parent class in this case and uh if you click on any one of those it will jump down to like the more detailed information um about about this and there's also you know references to other stuff that you might want to know about so that's just a brief introduction to encapsulation which is really a pretty simple idea and to the API um documentation in Java I hope that helps and in the next tutorial we're probably going to look at um casting numerical types and then we're going to go on to look at upcasting downcasting and then probably that generics so uh join me again next time and by tell time