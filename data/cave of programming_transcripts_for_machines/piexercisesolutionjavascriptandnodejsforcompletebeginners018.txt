hello this is john from caveofprogramming.com this is another video in my javascript and node.js for complete beginners course and in this video we're going to tackle approximating pi so we're going to do the exercise that i gave you in the last video so the first step as we've seen is we want to get these numbers on the bottoms of these fractions here so that's we can think of the first term so these are term we call them terms of the equation oh by the way i want to mention that people often ask do you need to know a lot of mathematics to do programming and the answer is no i picked a mathematical example but you could have a career in programming and this might end up being in a way the most mathematical thing you ever do you know so don't be put off by the idea that programming's mathematics because it isn't but anyway you can think of this first term here as one divided by one and that will help because then the numbers on the bottom here are one three five seven nine so the first step is let's see if we can write a program that outputs the values one three five seven nine and if you had a go at this and you didn't manage to do it then do feel free to stop at any point and implement whatever bit of this you think you might be able to implement so um we're going to need a loop let's leave that console.log math.pi in in here um but i'll move it to the bottom and actually i'll comment it out so in other words if i put two uh slashes at the beginning that turns the rest of the line into a comment which is useful for documentation but it doesn't actually do anything in terms of your code so that's quite a useful thing to do and we call this commenting something out where we temporarily turn it into a comment and deactivate it okay so um if i've got a loop i'm going to need a counter let's create a loop counter and set it equal to naught and then i'll have while counter let's put less than five initially just some small value while we're developing this so i've got my brackets on my right counter plus plus so now we've got a loop but there's nothing in the loop um so now let's maybe create a value which will create a variable which we're going to add 2 to every time so the variable is going to um it's going to be have values 1 3 5 7 9 and so on so i'll call this well since this is going to end up on the bottom of our fraction and that's called the denominator i'm going to call this denominator in nato equals 1 to start with then in the loop i can add 2 to that every time so denominator equals denominator plus 2. now if we output it down here um the first value that we see will be one plus two which is of course three but if we output it here above where we increase the value of it the first value will be one which is what we want so let's write here in fact i'll put these two lines together because they're kind of similar con soul dot log denominator all right and let's run this and see if we've succeeded so far so node pi js and we see we've got one three five seven nine that's exactly what we want now the other thing that we we need here is um so we need to form a fraction and uh we actually we could do that step next let's just do that so instead of outputting one three five seven nine we need to output one divided by one one divided by three one divided by five and so on and that's pretty easy to do so all we have to do is change this to 1 divided by denominator and if we run this and we've got 1 divided by 1 1 divided by three or a third one divided by two is a half um sorry one divided by what must what am i talking about this is one that's one divided by three this is one divided by five not point two one divided by seven one divided by nine and so on so um actually uh so the different bits of an equation like in this case one um a third a fifth and so on they're called terms in the equation just in sort of mathematical language so i'm gonna write here let term equal so we'll store that in a variable for convenience and we can output that if we want and our program the output of it is unchanged there we go all right um so now the next thing that we need is we notice that we've got the sort of sign alternates here we've got to add on we've got to subtract a third add a fifth subtract a seventh so we could think of this as being that like we're always doing additions but what we're doing is we're we're adding minus a third and then we add a fifth and then we add minus the seventh and so on to get these alternating plus and minus signs we can create a variable which we multiply which starts off at the value one and uh we multiply it by minus one every time so let's let's try that so i'm going to call this variable sine and set it equal to one and then here where we're sort of changing values of things i'm going to write sine equals sine times 1 and then let's output that so instead of outputting term here i'll output sine and that should give us an alternating 1 and minus 1. let's run it yeah that's working so now if we take our term and multiply it by sign we should get one minus the third and then plus the fifth and then minus seventh and so on so let's write um let term equal sine times one divided by the denominator and then we'll output term again we'll try this and that seems to be working so we've got one we've got minus the third we've got plus a fifth we've got minus minus the seventh plus the ninth and so on and that's exactly what we want now all we have to do is add all of those up and at the end multiplying them by four because this gives us an approximation for pi divided by four so we're gonna have to multiply it by four at the end to get pi so um let's create another variable let's call it sum set it equal to naught and then what we'll do is every time we go around the loop um i'm going to just say sum equals sum plus uh term and then we'll find that our sum should get closer and closer to pi after the program's finished closer and closer to pi divided by four that is so sorry after the lube not the program after the loop's finished we can then write let pi equals sum times four and we can do console.log pi and then let's output let's uncomment this console.log math.pi so we can see how close our pi is to the um actual pi let's try it so at the moment not very close we can see it's in the right sort of area but um the thing is we've not added on enough terms to get a sort of realistic value for it let's try a thousand and then if i run this yep we get it's pretty close now pretty close let's try five thousand and this this will still execute in a blink of an eye even on an old computer and we can see that we're getting closer the first few digits are correct um maybe try 20 000 yeah now we've got we've got a few more digits uh so 14159 doesn't go wrong until here and you can try more if you want like um you know like a million or something how many is that let's take a look so one two three one two three that's a million terms and if we run that then yeah so you can see that the more terms you add the closer it gets to pi this is a kind of known downside of the leibniz approximation that it doesn't um it doesn't converge to pi very quickly meaning you have to add a lot of terms to get a value that's um that's accurate for more than a few digits but you can see that this is basically working and if we were to go on and add more and more of the terms in our equation here we will get exactly what we want now we can write this program a little bit more nicely here so if i was writing this not for explanatory purposes but just for myself i would have condensed this more i wouldn't have put probably term in a separate variable for example i would have just written it down here and so on but one simple thing that we can do is um is we can use a slightly different operator at certain points here so instead of writing sum equals sum plus term we can write sum plus equals term and a plus equals operator will just add on whatever's on the right to the existing value the existing variable value on the left so this this means sum equals sum plus term some plus equals term we're just adding term to sum every time and we can do the same with times instead of writing sine equals sine times minus 1 we can write sine times equals minus 1. it's kind of something that can make your code look a lot nicer here's a simple example um instead of denominator equals denominator plus two denominator plus equals two and if this seems confusing just practice it in a really simple program don't use a loop just take a variable and try using plus equals and times equals just to see what they do and you'll find that they're actually really not so bad at all so i think that's that's it really for this video let's just try this and check that it still works yeah it's still fine and you could you know you could simplify it in a way just by not having a separate variable for term so i mean you could take this and put it down there you know rather than storing it in a variable say sum plus equals sine times one divided by denominator um okay so we'll leave it there for this video if you just found that too complicated don't worry at all and you're not going to need mathematics knowledge here most of programming it's it's about logic and you learn the logic at the same time that you learn programming it's not really about you know mathematical approximations unless you're working in that kind of a field a sort of mathematical field so if you found the exercise too hard don't worry at all it is just an exercise but the important thing is to try to do these things do whatever bits of them you can and if you didn't try to do this exercise make up some exercises of your own just whatever you can think of it doesn't matter even if they're ridiculously simple they don't have to be something like really serious sounding like some serious mathematical thing just make up some silly exercise challenge yourself to do it and see how far you get you know and if you keep doing that your programming will steadily improve okay so we'll leave it there for this video until next time happy coding