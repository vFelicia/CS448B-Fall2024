hello this is John from cave of programming calm in this tutorial we're going to look at something called the constructor initialization list in C++ so I've got this code that I wrote in the last tutorial they said that I've stripped out stuff from the last tutorial involving memory locations so what we've got now is we've got a simple person class from a name and age that has two constructors ones a default constructor that just signs kind of default values for name and age one is a parameterised constructor that takes name and age and updates the instance variables with their values you supply we've also got a two string method that returns some information about our object as a string and we're using that in the main method to output information about these two objects I've got rid of person 1 here but I might put it back again so we've got person 2 person three and we're outputting some information about them using this two string method and the results look like this so we supply values to our constructor names and ages and then we're outputting information about the object in our main method using our two string method that we created now in the last tutorial we define this constructor here by we supply it with parameters and and we use those here and then were using this to disambiguate between our argument names and the instance variable names that were actually setting but there is another way to do this which is actually more efficient I suppose in terms of speed although it's not really going to make a difference to most programs and that is the constructor initialization this so what I showed you so far it's very very useful and sometimes you you need all this stuff it's also very useful to know about this but there's another way that I'm about to show you now which is the recommended way to do this where you were it's possible and in this case it's certainly possible so instead of initializing name and age here using these values using this pointer we can delete this and after the closing round bracket of the prototype of the constructor in the in the point where we actually implement it we can type a colon and then we type the name of a variable we want to initialize that same name so that's this up here and then we put round brackets after name and in there we supply the value that we want to initialize it with which here is gonna be the parameter that we pass in also called name so although this looks ambiguous it's not C++ knows that this means the actual instance variable name and it knows that this one in in the brackets is what we used to initialize that and it's gonna be the argument that's passed in we can do the same with H we can put a comment here age and pass in age like that and that will initialize these instance variables with the arguments that we passed to the constructor so let's run that now and we get the same results as before we can do the same with this kind of default constructor here we're not passing in parameters but we can type a colon here and then type name and initialize it with something so this time it's not a parameter it's just a literal value let's pop empty quotes or we can put unnamed or whatever we like in there then let's put comma in because we want to do age as well and set age to zero and now we can get rid of the easier let's go back to main dot CPP because I want to put in and person 1 again let's say person person 1 so this will use the default constructor we won't pass parameters to it so it will invoke this constructor here which is this one here and it's output that in CL as well so without persons one two and three yeah and let's run that and so the first one will have unnamed with eight set to zero and then the second to that the next that second and third wheel we will have the values that we passed in there now sometimes this is unwieldy like if you have a lot of different things to initialize in your constructor then sometimes it just sort of makes sense to type them out here rather than having a massive ugly list here and you can mix both of these is why you can initialize some things in the constructor initialization this and other things within the body the implementation of the constructor if you need to there's nothing wrong with mixing them but it's best to stick to one style and this is the best style to use where it's feasible to do so if you need to do any kind of complex initialization of these variables other than supplying their parameters like here or literal values then you're going to have to do it in the implementation if you've got more code that needs to run in order to figure out what to initialize them with you would have to do it in the implementation but for simple variable values that take either a parameter or a literal value you can initialize those instance variables in the constructor initialization list now because here we've got very little code actually it sort of makes sense just to put this in the header we don't really even need to have these implementations down here let's just move into the headers let's cut this stuff let's cut the initialization list fill it default constructor and just bunk it in here like that and I've got a saw a very low syntax error let's get rid of the implementation save this and hopefully this will work did I do something wrong yeah I think we need the curly brackets here that's why it's complaining yeah of course we do let's put them in so that's funky Indies so if we're putting the initialization list in we're going to have to supply an implementation even though it's an empty implementation so so that takes care of that and now we don't need the implementation in the CPP file let's do the same for the other constructor here let's copy this I'll cut it actually and we'll get rid of that save it go to person by age and boom this in here and again we're gonna have to put the implementation and so now if I run this should work as before there we go so again it's a small thing but familias is that I was actually doing C++ for a long time before I dared to use the initialization that's just because it's somehow look really complicated but it isn't at all as you can see it's actually very simple and if you just practice typing this a bit you'll quickly get the hang of it so as always I recommend create your own class give it two or three constructors and initialize your instance variables this time in the initialization list to see how that works and that will fix it in your memory try doing it in your CPP file and then also try doing it in a header file with that inline constructor syntax so you can use these on constructors you can't use them on set methods at least I'm pretty sure you can and this is purely a thing for constructors okay so that's it for this tutorial until next time decoding you