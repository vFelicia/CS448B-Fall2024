hello this is John from cave of programming calm in this tutorial we're going to take a look at animating colors the reason that I want to do this here is because of moment we've got a nice block of purple on our screen and we've put together all the essential elements for rapidly updating the screen we've got a loop that that can do that and it's I want to change the colors of the pixels as we go along so we're going to end up with some particles kind of bouncing around the screen which are gonna slowly change color but it's a lot easier to see the color of an entire block than it is of an individual pixel so for that reason I thought well we've got a block of color on the screen let's take a look at sorting out there the color change that were ultimately going to apply to our particles so the moment we've got a purple screen with a single white pixel right in the center there if you can see it so I'm gonna get rid of that white pixel delete that and I'm gonna work on changing these colors that we fill the entire screen with so to do this let's let's pick one color to start with let's maybe animate say green so it's let's set green 2 to 5 5 and set that you red and blue to zero for the moment and just chapter that looks okay and why don't what actually want to do is change the colors smoothly now that the the ideal thing to do here will be to look up an algorithm for mapping RGB red green blue colors to something like HSL hue saturation lightness the hue is the particular shade of color red or green or whatever and if we had an algorithm that could take a number and into a hue we can cycle through all possible hues and see all the colors of the rainbow but since that algorithm will be quite long and involved I'm going to take a shortcut here I'm gonna animate all three colors I'm gonna make them smoothly wax and wane I grow and fade and I'm gonna make them all three colors do that out of synchronization with each other so that we end up with a range of different combinations so to start with that the challenge is just to smoothly animate one color make it wax and wane make it gradually increase to maximum intensity and then slowly decrease to minimum and to cycle through that so to do that I'm gonna use the trigonometric function I'm gonna use sine so to use the sine function you need to include math by age up here which is maybe already included in STL but I'll include it explicitly it's possible that this might just be called math on your system or master age a lot of these dates or fixes were dropped from standard had a slight bias stream for example there's still header files but the dyed suffix was was dropped to make it look nicer basically at some point you might need to include using namespace standard as well to use functions from master H now sign I'm not going to get into the details of trigonometry but we can think of sine as a function which takes a number and it Maps that number in other words it returns a number in the range minus 1 to plus 1 so if we supply sine with an ever increasing number it will return to us a value in a range minus 1 to plus 1 and if I'll you that it returns as we increase the argument that we supply to it will smoothly bounce up and down between minus 1 and plus ones there are no abrupt changes that so what what we want is to supply sign with some volume that increases as the program continues to run and to do that we can use a function called STL underscore get tix and this returns the number of milliseconds since the program started so let's say int elapsed equals STL get tix I'm going to supply that value to my sine function and sine is gonna return a value let's call this green between minus 1 and plus 1 so we could just start plot that and for the moment just to see what it looks like so if I if I run this now and don't just let it run for a bit and then quit it in a console here oh yes we're seeing zeroes because I forgot of course that the return value is a doubles no use using an empath let's try this again so I run this let it run for a bit quit it and then we can see that every time the loop is executed we've supplied a an increased volume to sign the number of milliseconds since the program started running and sign has returned here a value in the range of minus 1 to +1 which it's not easy to see here because quite a lot of milliseconds are passing in between each iteration of this loop but it does actually arrange smoothly between minus 1 and plus 1 it changes gradually maybe we can see and maybe we can slow down the change if we multiply elapsed by some small number here because here were jumping quite a lot like from minus not goodnight up all the way up to nor Polly 3 which is not a smooth change because because we're supplying a much bigger value to sign from one iteration of the loop to the next so a lot of milliseconds passes between one iteration of this loop and the next iteration let's multiply it ups by some small number like naught point naught naught 1 and see what we've got then and see if the return value is appearing to change any smoother so this looks a lot better now we can see we can see that it is a smooth change we've got point naught point nine five then point nine five well it's point nine five put nine six basically at point nine five point nine four point nine three nine point nine three five so you see this this file is smoothly changing it and it will bounce up and down between the minimum and maximum value minus one and plus one what we wanted to do is bounce up and down between the minimum and maximum possible values of green which will be naught and 255 in decimal so first of all if we add one to sign that will give us a value in the range not too let's let's run this again put it take a look so now I values range from naught all the way up to we haven't got many values here and but it will in fact range from north up to two now if we take that and multiply it by half of the maximum value that we want it to reach and off of we cut one half of off of 255 I guess will be one hundred and twenty seven point five but lets us maybe multiply it by one to eight and see what that looks like so if I run this just sort of leave it for a bit and then quit and take a look so now hopefully the maximum value of this will be 255 point something so to actually get the value to point nor from sign would have to supply it with exactly exactly well for sign it will be exactly PI over two I think that's right or three times pi diff by two if I remember my trigonometry correctly yeah sine of 90 degrees is 1 so therefore I think I'm right in saying that well we could we could try that actually we could use we could supply this with math dot actually I think there's a constant in math core and underscore PI divide let's divide that by 2 see if that runs much if I remember this correctly so now if we look at that yeah we get 256 but if we're supplying this not with exactly PI over 2 pi is 3.14 1 4 1 5 9 2 etc if we don't supply it with exactly PI ever then we're we're not gonna get exactly it's not going to return exactly one ever so it's always gonna be some number that's slightly less than one so for that reason I think this would never give us quite 256 it would always give us 255 point something we don't want it to be 256 because that's outside the maximum range of green so let less let's maybe try we could try running it for a bit and getting the maximum by you a green here just to see what it is let's change green now to add in so we can discard the we can discard the by the numbers of the decimal point here let's declare a variable here max which I'll say equal to a low number like zero and let's say inside the loop if green is greater than max then max equals green with a with a if statement usually use brackets but if you've only got one line that you want to execute after the if you can omit the brackets but common source of error errors is to omit the brackets in ifthen to imagine the stuff after after the if statement will also be included within the within the the code block of the if statement but and if without brackets without the curly brackets will only apply to the next line so for that reason I usually pull it brackets in but let's just try this temporarily and at the end let's say after the loop finishes let's say see out max and map service I wanted to show you this because this is a really handy thing to do to get them you can get a minimum value in a similar way as well of a variable if you're doing animation often you want to know what the minimum and maximum values of some number are so let's leave it just for a little while and then quit it take a look so the maximum value is 255 what I'm going to do is as a extra kind of bit of security here let's let's remove this max thing and I'll remove the output of green and remove this and this is and I'm gonna store the green in an unsigned char so if this did happen to return 256 then it would simply map to some number within the range not to 255 because that's all an unsigned char can store you would see like a student jump in the color which doesn't matter too much for this program it's not like when animating the figure on the screen with this so I think that's alright but if you do see if we do see sudden jumps in our color that we might suspect that somehow we've supplied a value to sign here that actually is and causing it to produce the maximum possible value of 256 and then maybe would once made this one hundred and twenty seven point five or something just to ensure that can't happen by I think this is probably all right now let's supply green in here and and by the way and C++ doesn't seem to care if I and it doesn't care about the fact that I've got a double here and an unsigned char here it just puts the file you into the unsigned char whatever part of it fits which should be all of it in this case and discard stuff after the decimal point but if you want to make it clearly you're doing I'm a cast you can and put in in prac in brackets before the value yet I'll run the optin with brackets as well on sign char just to make it clear what you're doing here now that's one less and see how it looks now I suspect on your video this might look quite rubbish because the video may not reproduce colors very accurately but I can see here on my computer that we're getting a really nice very smooth change and as smooth as you can with 256 possible values from black all the way up to maximum green intensity and then down again and up again so that looks like is breathing it's a little bit fast though so I'm gonna change this a little bit put an extra Norton there and it's take another look at it let's run this there we go now it's changing very very slowly quite slowly from black up to maximum green then down slowly again to blacken it up again and so on so that that's why you use the sine function because if it can produce this nice smooth looking sort of change at times at the moment I can barely discern it changing but if I watch for a bit longer I can see that it is in fact changing it might be too slow but I've seen let's change now let's let's change red and green in the same way so I'm gonna copy this paste a couple in and let's have a red yeah sorry red and blue let's have a red and blue and I'd like these colours to change I want to combine them all but I want them to change different rates so let's let's change this constant here let's add this no nor nor and this not not not three just to make them change out of synchronization so that when we combine them we should get various hues of the different colors and I'm gonna put red in here and blue in here let's run that and see how that looks should be interesting so now it's sort of gray in purplish again probably looks a bit rubbish on your video but yeah but it's sort of pink and now it's sort of yellowish now we're going through to full yellow now green and sort of yeah it's really some screen now it's getting a bit blue I think that looks quite nice except that I'm not wild about this pink colour at the beginning maybe it's alright well we could try and see how it looks you could also use a cosine function which is exactly the same except that and cosine will start for a value of zero it starts it and it's maximum value of 1 I'm just curious how that would affect it and it starts up a little greenish color that's maybe well you could play around this with this indefinitely really so I'll leave you to that to investigate that as you wish I think that I think they're fine they're awesome wasn't bad let's stick with that see how that looks so now we've got a nice color changing algorithm and I'm ultimately going to apply that to animated particles that are going to bounce around my screen but I'll leave it there for this tutorial so as always i'd recommend having a go at out of yourself and get it working and the great thing about this is now it was starting to get into territory worrying sort of encourages you to play around with it encourages you to to try different values in here try you know try cosine if you like and you can get creative and anything that springs to mind any way that you can think of to change the colors that might be interesting you can try them and it's well worth having a play around with this and seeing what results you can get so in the next tutorial I'm not sure what we'll do possibly we'll start looking at particles because we've got to get around to that soon so until next time happy coding you