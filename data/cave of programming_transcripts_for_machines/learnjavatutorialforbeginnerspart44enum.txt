hello this is John from cave of programming calm this is a tutorial on the anon type in Java and before I talk about enum I just want to show you what unum is intended to replace often in programming in general you'll have some kind of variable which can only take on certain specific values that represent certain things so let's let's take an example of that I'll type int animal now let's say this int animal can take on different values that represent different animals what I could do is I in my class here I could declare certain kinds certain particular integer values that this variable could then take so I could say public static final int dog equals nought let's say and public static final int cat equals one and so on let's have one more public static final int mouse equals two and you get you get the idea and then later on I'm not sure why suddenly I've got caps lock on there we go yeah and then later on I can set this integer value to one of these so I could say int animal equals cat and I can do stuff with that like switch animal switch anymore let's put the opening bracket there case well actually the quickest way to fill in this switch would be to I don't know why it's not coming up normally let's check that I've got a build automatically switched on normally you get a little warning by a switch statement and that enables you to fill in the case values automatically but I guess yeah I guess it's not working because in fact I'm using an integer not and in none as they should be doing but you can type here stuff like case dog do something sis al dog and stand a break and so on now there's a couple of problems with this at least a couple of problems and one problem is that int this animal I only want it to represent certain of a fixed set of values I've got only certain animals that it can represent in this scheme I've only defined three different possible animals there but it could be signed any value I could sign it any value saw like a hundred or something and it wouldn't be clear what that would mean in this case really I'd like to restrict animal here to just these particular values and if you think an animal is kind of an unrealistic example this is often used for example to represent different kinds of borders with swing components or different colors it's a good example and so on so it's very very common to have a variable that you want to represent different members of a fixed set of values let's just run this and check it doesn't fat where we've got cat another problem with it is you can't tell just by looking at this what you meant to set it equal to you have to know that this exists as well so if I was passing I said I had methods that took this int animal as an argument I might not know that these constants exist and I'm I'm going to be in the dark is taught to do about that really what we want is a special type that can be set to only represent certain members of a fixed set and that's what enum does enum stands remunerate it and if you enumerate something you kind of count through it like 1 2 3 and the enum type represents them fixed set as only particular certain fixed values although not in actually any particular order so let's take a look I'm going to enum is like the syntax for creating nuns in Java is like creates the syntax for creating classes or interfaces they're all similar so I could I don't know if he clips here will give me an option for crating yeah I can go to new anon and let's give this a name I'll call it animal and click finish I think that's all good and if we look at it here instead of having public class such as such we've got public enum suchandsuch or we could have here interface instead only the keyword changes and apart from that this is like declaring a class and it's a lowercase keyword because all the keywords in Java are lowercase and now what we can do with this is I can type cat dog mouse like that just separated by commas and now if I go back to my main application here and I don't need these constants anymore and instead of having an int anymore I can say animal anymore so I've created this animal type just like a class really and I can declare variables at that type and to set the value of it I say animal for example dot cat like that and I can switch on it just as before and now let's garrotted these room for a minute yeah I'll just delete that and now in fact I'm here in Eclipse I can get eclipse I'm sure it's the same another integrated development environments in Java I can get Eclipse to fill in the possible switchcase values for me if I click the warning here and go to add missing Cape case statements there we go I've got case cat dog mouse and default which should never occur and let's put this out here sis out cats cats and sisal dog it up and let's run that and we've got cats here of course if I set it to dog will get dog and or Mouse won't do anything so I'm not persist out there let's from that so all that work this is because of this and this this is probably like 90% or 95% of what you do with enormous it's that simple and that's usually all there is to it notice by the way that normally if I refer to the enumerated type I've got to say animal dot cattle dog or mouse but if you use a user with a switch statement you just use cat dog or mouse by itself and Java infers because you're switching on this particular variable of this type Java infers that it means animal dog or animal cat I'm not even sure if it will even let you type animal cat here I think that will give me an error so you have to be aware of that I think that's quite confusing actually but you need to miss off this bit only if you're using it with a switch and now having having covered the most common case that's the can't look at some slightly more advanced uses every Nam and other things you can do with it in fact the thing with public static final in variables is very very common in Java you'll see it in programs everywhere in the java api absolutely everywhere and enum is not used nearly as much as it should be so you won't see it perhaps as often as you wait as you expect what you really should use it in your own code because you've got the type safety there you can check that and this this can now only be assigned from this fixed set of animals you can't give it random numbers and stuff like that so it's it's really much better it's just kind of underused in Java unfortunately and that the public final static thing we use final because that makes it a constant in Java and Static because that makes it belong to the class which saves memory rather than having instances of those constants for each object but enormous essays is better so if you look at this anon thing here you might wonder what cat dog and mouse actually are or are they something you know how does this work and in fact the way it works is cat dog and man are actually objects at least as far as I understand of the type animal strangely enough so you can see that for example by if I do well if you see if you do sis out on it on an UMP and I mean on type it doesn't really help you if I do sis our animal dog and run it it will just output like that as a string dog which which is certainly useful so it doesn't tell me anything about the class but let's do sis out animal dog dot get to class and see what we get and if I run that we can see that the class of these constants is animal so these are actually objects of the type anymore and although you can't see it here or normally classes in Java implicitly inherit from the object class of jelly capital o but free none they inherit the immediate ancestor at Lisa's java.lang genome and all the classes in the java dot lang package we don't need to import them with an importance import statement they're automatically available in your program so I could do Sissel animal dot dog let's say instance of anymore the instance of operator tells us whether it's an instance of a particular class or not in other words is the object created from a particular class and this should say true and it does but I can also say instance of you num or Java dot Lang you know and if I run that we also get true because because child classes are instances of their parent classes I should say the objects of child classes are instances of the parent classes like if you have a car a particular car is an instance of cars in general it's also an instance of a machine a car is ER a kind of machine which could be represented by a parent class so that's kind of how we known works and let's take a look at a few interesting things that you can do with lean on one thing is you can give the UNAM type a constructor and you can give it methods as well actually but you have to remember to finish this list here with a semicolon so let's let's type here public any more like that and see we get an error here save that and in fact I need to finish this with a semicolon like that and also I think I can't actually declare the construct to public come to think of it it can only be private or you can just miss it off and it'll have package level kind of validity now why would you want to do that given that you can't even make the constructive public and you can't do new on your enum type well the answer is I could supply parameters here so let's say for example a string name I could supply it whatever parameters I want and now each of these objects must be instantiated with a name because I've only got one constructor here and it expects a name and to do that I just supply it in round brackets here so I don't use new with enum but these are objects and you can supply values right here let's say for a cat furgus the cut and for a dog Fido and the mouse Gerry so whatever parameters you declare here you can end supply here and that's no use unless you do something with them so you can also give your unum type like instance data here let's say private string name and then just as you would normally do in a class I can say this dot name equals name so now my animals have got and of course there's not much point doing that unless I do something with it let's give it a actually let's right click here and go to source generate getters and setters and let's create a getter for name so public string get name returns name and now I can do stuff like let's do sisal animal dot mouse get name and run that and hey presto I'm getting the name of my animal you can also override to string here so I can lets I'm not sure if this will work for right click and go to source generate to string I think it might not work for none this operation is not applicable to nuns but in fact it is applicable and I can do public string to string you have to remember the right syntax to overwrite to string and I can do return name like that or return whatever string by like let's say this animal is called plus name let's do that and now if I do sis out on my animal I can doing sis out on this dog and I run this it's going to say this animal is called Fido so exactly is with normal objects you can override to string with within lumps and there's there are some special methods they're inherited from java.lang enum as well so now yeah if I do sis out on this e none I'm going to get there the to string version but often for programmatic purposes you want this as a string you want the actual enum value as a string and the question is if you've over if you've overridden two string how can you get at it any nom supplies you with a special method that gets you the enumerated constant as a string and to do that I can say let's house assists out again here and let's just say the enum constant or let's say num name as a string and I use a method that say animal dot dog again dot name so I learn to get name myself lissa this has nothing to do with that this is a special predefined method inherited from java.lang yuan called name and if I run that so this animals called Fido but the actual you know as a string the actual name of the UNAM is doggin uppercase and that gets me this value here and that here and that's very useful for example if you want to save any nonconstant to a database you probably will want to do it by getting the and this as a string and saving that string to your database and you probably want to define any none set of possible strings in your database we fishin sea but at the setting away from the subject and you can also do the reverse with the value of method so I could do stuff like let's say anymore let's call it animal to equals anymore that's the class and I'm going to use a static method called value of and if I supply that with for example cat as a string then I can do sisal animal two and if I run this then you see here this animal is called Fergus why is it called Fergus because my cats are called Fergus here and here when I do value off and I supply a string corresponding to one of my enum constants then I get the appropriate none as an object it's really important to realize that that these are not strings these are special objects we think of them as a known constants but I can I can turn them into a string using name using the name method where did I use it here and I can get a string and turn it into any nonconstant using value of and I can also override to string to create I'd like a userfriendly version of the UNAM for display purposes or for debugging or whatever I think that's pretty much it for in nums and you won't often need to use this stuff I could define whatever other methods I wanted here and give them more instance data but as a say like 95% of the time you just stick to the simple usage that we saw earlier where you you just define a bunch of constants and use them and even that is not used as much as it should be in Java so that's it for this tutorial there's going to be more videos in this course on serialization and other stuff and you can always find those by going to WWF of programming comm and I always put my latest videos on there so until next time oh yeah actually I'll put this source code on there as well you just need to go to the home page scroll down to the YouTube videos and find the right tutorial in that section and you'll find the source code for this in the page right there so until next time happy coding