hello this is John from king of programming comm in this tutorial and C++ for complete beginners I'm going to look at classes in C++ I've actually been taking a lot tamo to see more C++ would need to learn in this course before we can make for example a simple graphics program and the answer is still quite a bit so I'm going to try to work through everything that we need before we can make something a little bit more interesting hopefully then a console mode program so I'm going to start from scratch here I'm going to create a new project I'll go to file new C++ project let's select hello world C++ project here and I'll call this classes and we'll click finish so classes are there a way of combining or kind of packaging together data and subroutines and you can think of them as a way of defining your own variable types if you like and these coming definitions are not going to make much sense just yet because and what class really is is kind of contained in how you use it so we need to see really how to use it and what you can do with it so let's go ahead and create a simple class I'm going to start by rightclicking a project let's actually just build it first and check it works because I always like to make sure that we're definitely starting with a working project it says hello world that's good and I'm going to rightclick the project and go to new of that and I'm going to select I'm going to select header file here yeah let's start with the header file in fact the stuff I'm about to show you this is a quick way of doing it which involves selecting class here but I'm going to do this kind of more by hand than is strictly necessary in order to show you what's involved and I'd recommend it to start with you do it this way too so we'll select header file click Next and I'm going to create a class to represent a cat like the animal a cat it's going to be an extremely simplified model of a car needless to say but it is going to be a model of a cat so I need to choose a file name here for my header file and it's important to follow some kind of convention with your your source files and I'm going to follow the Java type convention here which is that if I create a class called cut I'm going to give the header file than they cut with a uppercase first letter so I'm going to say cut age because header files have the dot H extension so I'm going to start it with an uppercase first letter and I'm going to give it the same name as the class by intent to define let's click finish there so this looks woofs we've seen all this before this is just stuff that's aimed at preventing multiple inclusion of the same code if you have multiple include state includes directives and different files in your project let's also create a matching dot CPP file so far we've been working with just one dot CPP file in our projects we got one here called classes dot CPP that contains our main function but let's create another one now because we can have multiple ones in our C++ project I'm going to rightclick the project or the source folder it doesn't matter and go to new author in fact that option was already available in the menu but and that's something cuz I've previously selected this let's go to new source file under the c++ section here click Next and I'm going to call this cat again with an uppercase C dot CPP so let's click finish now after the comment here we can expand the comment this bonus is just a comment we could delete it doesn't matter I am going to include let's just get rid of actually so that we want it I'm going to include the header file so I'm going to say hash include double quotes and with op Casey cap dot H so we've got two files here we've got a header file with the usual if not death stuff in it that we saw last time we've got a CPP file that includes the header file in the CPP source file I'm going to start by defining a function here let's call it meow something save or speak let's say speed for each speak an empty round bracket sir it accepts no parameters and I'm just going to put the curly brackets in and I'm going to put a C out and meow which is the noise cat makes in English anyway so I'm using C out here but I can't use C out at the moment because I haven't included iostream so let's let's do that let's put that right at the top since it's a standard header will put the standard headers right at the top of the file before any new headers that we've invented and I'm going to say here include angle brackets this time because it's in a standard location this header file hi your stream and underneath the headers I'm going to type using namespace standard we'll take a look at namespaces in due course but we haven't seen them yet so for the moment just know that you need to type this namespaces is just a way of dividing up different bits of code basically so now we've got that in this speech should work now supposing I want to call that in my main function here if I was supposing I want to call speak let's get rid of the C out here I can't just call speak like this because the compiler hasn't seen speak at this point let's save it all go to project build project I expect to get an error because it doesn't know what speak is we need to somehow allow the compiler to access this speak function that's defined in this separate CPP file how can we do that well you might guess we can go to cut H here and we can put void speak in there in fact we could now that I think of it's certainly possible that we could just type void speak here we could do that let's say that and see if it builds let's build project here and we'll run that and it says Meowth so that works but you're gonna you're going to want to use functions that are defined by other people and you're not always going to know what the prototype should look like so for that reason we've got the prototypes and related functions in particular header files like iostream let's cut that from here put it in cat age so now we've got this kind of selfcontained thing going on we've got a cat CPP containing some functions just one in this case but it could be lots of them and we've got a captor age containing the prototype for that function now all we have to do in this in this main function here is above there let's put below our include iostream let's just put include cat h remember it's got an uppercase first letter and let's build that project build and run it and says now so we just put the prototype of this function here in the header file and then we can include that wherever you want to use it and we can call we can call that function here in the main function we also included cutoff age here in cattle CPP and that's not actually necessary at the moment let's just delete a save everything go to project builds it's going to work fine without it but we need that for we're going to do in just a minute now C++ is a language that's built on a language called C I I imagine I don't know they're probably long discord a and B but C is one really took off and C++ have extra extensions to make it what we call object oriented oriented object orientated or object oriented yeah I think usually you say object orientated actually so anyway it was common in C and you also still see it in C++ to define functions in files like they say you get all your kind of related functions for example all your functions connected to user input or all your functions connected to graphics or whatever and you put them all in one file and then you'd have a header file where you put all the prototypes and then you'd include that wherever you want it to use it wherever you wanted to use those functions that was a common way of organizing code in C and it's still often used in C++ let's just define another function here just to underline the point let's say void jump let's say here these are very minimal dummy functions of course let's say jumping to top of bug case and ler semicolon and we can just put in the include file here we can say for you to jump let's let's run that well that's not going to be any different from before but we can go to classic CPP we can call it if we want jump save it and run it and it should say here jumping to top of book case so this was a typical way to organize C programs and still used in C++ but a kind of disadvantage here is that if you think about what a cat is and here we're trying to write functions to represent the cat it's not just stuff that it can do a cat doesn't just jump and make meowing sounds and so on it also has a state like the cut has a it has a position it has a mood it has you know a level of hungriness and so on as state to it and we want to represent the state by variables and that's why classes were invented to bundle data it represents the state of a thing together with subroutines that represent what it can do so let's let's see and in this tutorial just how we can bundle these functions together into a into a class into a what we call a a cat class now we can create particular instances of cats that can then do stuff so the changes we have to make now they're fairly minimal what we do is let's go to capital H firstly and above these functions I'm going to type class cut I'll give it a capital C you don't have to but it is important to have some convention for how you name classes and stick to it so I'm going to follow a Java type convention and start my classes with a capital letter here and then it's opening close kin brackets here and I'm going to move these function prototypes into this class here so it's this is pretty simpler we've seen this pattern a lot before it's just a keyword and a name and then open and close curly brackets and we've seen similar patterns for sure anyway and above these two functions which notice must be within these curly brackets following class katia above that I'm going to type public and a colon not a semi colon a colon and when I hit return there when I finished typing it the auto formats are automatically moved it backwards like that and that is correct I can run a formatter again just to be sure what yet doesn't do anything so we just we just group these functions within this class within the brackets of this class and we put a public keyword above them and we'll get onto all that means in more detail later on in this course but basically it makes those functions accessible outside of the files that are purely associated with this class so that we can use these functions for example in our main function now we're going to go to capital CPP and just before the function name here and of speak let's start with that one I'm going to prefix it with cat that's the class name it's decía and cold on so two colons and I'm going to do the same with John so this is saying these functions belong to this cut class and what this is is it's kind of like a blueprint for a cat at the moment it's very simple it hasn't got any data hasn't got any stain we've just used it to bundle our two functions together but it's kind of like a blueprint we call it a class and the specific instance is the actual cats that are made from this blueprint we call them objects so let's see how we can create a cat object from this class so I'll go back to my go back to my classes cpp we've already included cat dot H here now we've got errors because we can't just call speak and John like we did before but I'm going to type and this looks like defining a variable which it is I'm going to type cat that's the name of my class which again is here it's not the name of the file of its own I just gave the file the same name as the class but it's important to realize it's not the file name it's the class name that I'm typing now so cat and then I'll give it a variable a variable name and my convention man using this variable names start with lowercase first letters so let's just call this cut I could call it L just cut is is good really and then a semicolon so that's like saying int value or something like that some people think it's confusing if you have a class name the variable name that are exactly the same except that the class name has an uppercase first letter C++ is case sensitive so if you feel like you could give this some other name like you could call it cat one if you like let's call it cat one but I quite like often where possible giving my variables the same names classes and I can tell them apart because I'm giving the classes uppercase first letters but is it's a matter of opinion certainly now to call it functions which are now bundled into this cat class we can say cat one dot and the autocompletes helping us here let's select speak and it's also say cat one jump so this dot notation let's try to use control space autocomplete actually works so just holding down control and pressing space info the autocomplete there I'll type semicolon and this will now run as before so if I run this it runs those two functions but we bundled them into this cat and we have to access them via this cat variable so this is the class this is like a template for a car this is a particular cat we call it an object that's we say it's instantiated from the class so it's like having a blueprint making a cap from the blueprint you call that instantiation and we call the finished actual particular cat we call it an object in the lingo here so we're going to be seeing a lot more of this in future tutorials but this is already very long so I'll leave it there for now it's it's important to practice this yourself try to define your own claps doesn't matter what it does try to define it and whenever you get stuck you can refer back to this code study this code and make sure that you've got everything that you need to have just as I have here to make it work we're try to get your program to build and run try to have two or three methods in your class that you can call in your main program and once you've succeeded doing that especially if you manage to do it all from memory which would take quite a bit of practice I think in this stage then you definitely mastered everything you need to know so far so until next time you