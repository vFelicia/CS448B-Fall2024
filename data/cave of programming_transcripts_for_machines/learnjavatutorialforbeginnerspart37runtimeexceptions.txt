hello this is John from Cave of programming. comom and in this tutorial we're going to look at runtime exceptions in Java so so far we've looked at checked exceptions and there are two kinds of exceptions in Java two kind of basic kinds and this is a question that people like to ask on interviews and exams quite a lot what kinds of exceptions are in j there are two basic kinds and checked exceptions are the kind that you're forced to handle and we've we've seen examples of those so far like if you call thread do sleep for example then this throws an exception which is a checked exception so you have to handle it but there are also exceptions that you don't have to handle that you're not forced to handle and these are called unchecked exceptions or runtime exceptions and an example would be division by zero so let's say you've got a integer here let's say int value equals 7 and let's say I say that value equals value / by 0 this compiles so I'm not forced to handle handle an exception here but this does still throw an exception so if I run this it's going to give me some kind of in this case an arithmetic exception divide by zero and this is called a runtime exception and in fact if we look at arithmetic exception let's go to a browser here it is we find that it's a child class of runtime exception and runtime exception like all exceptions is a child class of java. lang. exception but the thing is that runtime exception and any of its child classes Don't force you to handle them which is why we don't have to put a TR catch in here and the idea is that runtime exceptions are things that are really serious basic fundamental errors in your program so if you've got a run time exception it's something that your program is unlikely to be able to recover from and for that reason it doesn't even force you to catch it if your program is throwing runtime exceptions then there's something really seriously wrong with it which you should have addressed another good example would be a n pointer exception like I could say string text and then without saying text equals new string or textt equals some kind of text I could try using a method of string like text. length something like that I could put in let's say C out text. length now this probably isn't going to compile just because it's going to tell me if I say this it's going to say that text may not have been initialized but if I set text equal to null now the compiler says okay you have initialize text with something but I still can't call a method on it because all I've got here is a reference that points to nowhere I haven't got an object containing actual code I haven't got an object that contains actual implementation for this length method so if I run this I'll get a null pointer exception and although null pointer exceptions are something that you tend to see a lot as a beginner because you sort of kind of tend to lose track of the difference between a reference and an actual having an actual object there in a way they're they're kind of one of my favorite errors because you can usually fix them pretty quickly because if you see a null pointer exception you've literally got some variable that's not referencing anything and that's usually pretty simple to fix most of the time and uh one more example that I want to show you before we look at something uh kind of something else in connection with this is the array array out of bounds exception let's say you have an array of strings let's call this Texs equals new well I could use the kind of shortcut for initializing an array and initialize this to 1 2 3 now there are three strings in this array and we start numbering the different values with index zero so what would happen if I did sis out texts and I tried to access item number three so this is item zero this is item one and this is item two and again if I try to access text 3 and I run that then I get this array index out to bounds exception which again is a runtime exception I'm not forced to handle it but nevertheless it occurs and again this is just like the null pointer exception and then divide by zero the arithmetic exception this is pointing to a really fundamental problem in my program which my program is not going to be able to recover from now having said all that about not being forced to check these exceptions you can still check runtime EX exeptions if you want to but usually you don't want to because usually what you're going to want to do probably most of the time is you're going to want to fix the underlying problem but if you do want to catch a runtime exception you can so I could put a try in here and I could enclose this in a tri block and I could say catch and if I if I were to catch exception then then that will catch any exception that this code throws so sometimes that could be useful and I could do sisile e. get message let's say and maybe that will tell us something useful so if I run this actually the message isn't useful at all in that case but um yeah we I'm sure we could figure out something something useful to do like maybe I don't know I don't know what um two string looks like on um yeah that's kind of more informative on array index out of bounds exception so two string looks kind of more useful or of course I could do e print stat trace and if I wanted I can catch the specific exception so to be more specific I could catch all runtime exceptions by typing runtime exception here and that's going to catch any runtime exception or I could catch the exact specific exception if I'm expecting it like array index out of bounds exception like this so you can still catch R time exceptions but it's less common to do so partly because you're not forced to and partly because they do generally point to fundamental flaws in your program which you really need to fix so that's it for this tutorial and I think we've covered everything that's really important about exceptions for the moment and there's still um some quite fundamental things in Java that we still haven't covered in these tutorials so my intention now is to carry on to fill in a few fundamental concepts and later on probably I'll make some videos uh in which you can which you can use to test your knowledge or Java but we've still got a few basic things to cover although we've we've certainly covered the majority of probably basic core Java by now so that's it for this tutorial and you can find um this code and I'll probably type out a little bit more of what I just wrote again on Cave of programming. comom and until next time happy coding