hello this is john from caveoffprogramming.com in this tutorial we're going to look at reading and writing multiple objects of serializing and deserializing multiple objects and i've got this program that i created in the last tutorial in fact we've got two programs one for reading objects and one for writing objects and i've sort of gutted them so that we're not reading or writing any objects here at the moment but i've got the rest of the framework left in there we've also got this person object from the last tutorial which just has an id and a name property which can be set via a constructor so uh i'm gonna let's imagine that we we've got an array of these personal objects let's say up here person array people equals um and i'll use uh curly parentheses to create a array to initialize an array of these person objects that say new person i'll give this one a name of sue and an id of one and let's have new person id 99 name mike and new person id seven name of bob so we've got three people in this array here and uh it might be surprising to know uh that an array in java is is actually just an object in a sense just an ordinary object and we can simply serialize it and deserialize it as we would any object and in fact the rays are serializable as long as the objects in it are serializable and in other words if they implement the serializable interface which is all you have to do to make an object serializable then you can read and write an array of it so to demonstrate that i can say here os dot write object this object out um actually it's the wrong file let's go to the read objects file right object sorry there we go so let's write this array let's say os dot write object people and in this read objects file let's say people array people actually that's person array so person array people equals and i'll cast to the right type here and i'll just say os dot read object like that so let's save that and run it so i'll run write objects right click and run run as java application and let's go to read objects so right click and run as java application and uh oh yeah it would help actually if i iterated through these and actually displayed them so let's say four person person in people and um sissow person i'm in budapest where it's 40 degrees and so my brain isn't perhaps fully working as well as one might hope but i'll right click this read objects now and go to run as java application and now we can see that we've successfully uh read that array back um you can also if you've seen arraylist before you might wonder if you can serialize and deserialize arraylists and the answer is you can do that in exactly the same way we haven't covered arraylist yet in this series of tutorials and that's because i've put stuff about java collections in a separate section of this tutorial or if you look on caverprogramming.com it's in like a set a different uh section for youtube but um in my java collections videos i talk about arraylists and they're they're basically like a resizable array so very very very useful i'd highly recommend that you check out my video on arraylist if you haven't done so already and if you don't know about them but let's let's create an arraylist here just to demonstrate this so what i'll do is i'll i'll create an arraylist of person objects and with arraylist it's a template class so you have to specify what type of object it's going to store in these angle brackets and let's call this people list equals new array list of person and uh instead of writing these all out again which i could do i'll just use the arrays dot as list method to turn that array while to initialize the array list with it actually and now um i'll leave this original code in writing of the original list so that you can refer to it but what we'll do is i'll now serialize the arraylist as well so let's say os.right object person people list so we're serializing now first the original array and then the arraylist version of it and in read objects after i've read the array here i can now say array arraylist of person let's call this people list again equals and i'll put the typecast in arraylist arraylist of person os.read object and now we can also iterate through the array list in pretty much the same way this is now people list but the rest of the code is the same and if i run this now so let's run right object right click and run as java application so we've written the objects and now let's go to read objects right click and run as java application and now you can see that we've read these all over again so we've written and read them as an arraylist the only annoying thing here is this warning which says type safety uncheck cast from object to arraylist person and i think this has to do with type erasure because with a normal object java can determine what kind of type of object it is and it can figure out whether for example this is a safe cast to do or not when we read when we use read object here our our array is returned as an object but that object contains within it as i understand it the type information that says yes it is actually to be precise an array of person objects that is not the case with arraylists because with parametrized classes in general classes that take these types in these diamond brackets they suffer from type erasure which means that when you compile your java program the information about this type here is actually lost that's called type eurasia so this is like a grammatical thing that helps stop you trying to put the wrong object wrong type of object in your array lists but that information is no longer stored when the program is compiled and so when you serialize an array list and then deserialize it when it's deserialized the type information is no longer there in full because indeed it was no longer there even when the program ran the type this type is erased and that's why we get this warning and probably the easiest thing to do to be honest is just suppress it so you can just put a at sign and suppress warnings capital s suppress warnings annotation and in round brackets and within double quotes we can say unchecked let's save that and uh let's click this error and whoops i've got a spelling state there there we go suppress warnings and that suppresses the warning but it looks a bit ugly and it feels wrong to be suppressing warnings so i don't really like it and short of really going to quite um long lengths there's no easy way around that although certainly you can find ways around it if you want to serialize and deserialize an arraylist one last thing that i want to show you is you can certainly serialize and deserialize these people objects personal objects one at a time or same for any object and that the easiest thing to do is to write in advance the number of the number of objects that you're going to be dealing with so we could say here let's say we want to serialize this array object by object one one object at a time or maybe we could take this people list uh it doesn't really matter let's say here os dot write int and get the size of this arraylist so for an arraylist to get a number of objects in it we say dot size with round brackets because it's a method and for an array we'd use dot length with no round brackets because it's a property of the array object so here we're writing to the file the number of objects that we're about to write and i can now say for person we'll use like an enhanced for loop for each loop person person in people list and we'll say os.right object person and then when we read them back all we have to do is we can say ins num equals object input stream dot read int so all these all this combine reading and writing different objects is fine as long as we remember to read back the exact same number of objects in the exact same order that we originally wrote them in and now let's say for ins i equals naught i less than num and i plus plus we will read those objects one by one so person person person equals os dot read object and we just need to cast that to a person save it and let's do sis out on it again so now next time we run it we should have nine person objects there so i'll run right objects right click and run as java application and read objects right click and run as java application and hey presto we've now successfully read and written them one by one and the key to that the the easiest thing to do rather than trying to figure out when you've run run out of objects to read it's easier if you just write the number that you're going to write and that you therefore number need to read in advance so then you can read that number back and read the right number of objects and that's it for this tutorial one last little thing actually that i want to show you uh so that's not quite it is someone um left a comment on on my last video that shouldn't this os stop close be in the finally block and shouldn't we check to see if it's null well the answer is yeah i sort of agree really it probably should be um the reason i didn't put it in one is because uh at this point if if this this could easily fail because we might not be able to read the appropriate file or in this case here we might not be able to write to the appropriate file but once we've got the file output stream it's unlikely the object output stream will fail i think so this is probably not going to be null and it's probably not going to throw an exception but nevertheless it is possible that it could do so really this isn't great programming and also i don't think we really need to close it i put this in just to get rid of the warning that eclipse gave me about os not being closed but in fact since we are closing the underlying file because we're using this try with resources which will automatically close this object i don't think we need to necessarily close object output stream but again there might be some reason for it that i'm not aware of to do with memory management or something and so if you want uh kind of better practice here either you could check that this is not null and put it in a finally block as well down here maybe before closing it but um probably since i'm using this try with resources it's better if i just cut all this stuff here and put a semicolon here and paste this in and also open the object output stream within this try with resources block let's format this that's formatted as it gets apparently so you can have multiple autoclosable objects within your try and in java 7 and onwards and this will automatically call close on this so now we can get rid of this and our try with resources will handle it for us automatically it's uh it's a hellishly long line and i don't really like putting lots of things in round brackets but i must admit probably technically it's better to do that than just trying to close something um down here although to be perfectly honest if i was writing production code i'd be very tempted just to put os stock closed down there because i don't think it would be a problem but i admit it could be okay so that's it for this tutorial and um in the next tutorial we're going to look at the transient keyword and then after that we're going to move on from serialization and uh probably look at annotations among other things and also passing by value versus reference which doesn't quite exist in java but there's some stuff to be said about that so join me again for the next tutorial and you can always find the latest stuff on www.caveofprogramming.com and until next time happy coding