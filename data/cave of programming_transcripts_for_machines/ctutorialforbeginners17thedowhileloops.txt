hello this is John from cave of programming calm in this tutorial we're going to look at dowhile so let's take a look at what I do while loop is and does I'm going to declare a variable here let's say int value equals seven and I'm going to type du and then open angle open curly bracket and after the closing curly bracket that Eclipse just added here I'm going to type while keyword while round brackets and semicolon and in the round brackets I'm going to put a condition so let's say while value is less than eight and let's put C out in here let's say C out hello I'll do and now the difference between a while loop and a dowhile loop is that the dowhile loop and always executes the stuff in between the curly brackets at least once because it doesn't check the condition until the end so if we run this it's going to be like an infinite loop so it's just going to output hello over and over again if we change this condition so that it's false that's a value less than 5 which is false we're still going to get one hello when I run this so we get one hello because it executes this code then it checks the condition and it will do the loop again if the condition is true but if the condition is false then you're still going to get that first iteration of the loop because it's not checking the condition until the end let's see how we can use this in a new little program I'm going to declare but I'm going to create a program here that asks the user to enter their password over and over again until they enter the right password let's say here's string password equals hello and now this is actually a value that I don't want to change ever in my program so I'm going to type Const in front of string here and what that does is it means that later in the program the value can't be reassigned so I can't do this later on without Const I could do this I could change the value later on but with Const I can't compile it if I try to reassign it it won't compile so let's build this and you see we get an error so if you have a value it's not going to change in your variable in your program make it Const because then it can't it can't be changed later on in the program and with big programs that can really help get the bugs out of them and because then you you know that this value is definitely not going to change anywhere you're not going to change it by accident and although I said that variables should be declared as close as possible to where you use them with cons you often declare them somewhere near the top of the file or near the top of the subroutine or whatever just because it's then you see all your constants in one place and you can change them easily okay so we've got our password and let's say C out enter your password let's put a little and arrow thing in a little lerm actually a greater than sign just to make it look like a prompt and learn and then I'll declare a string together user inputs let's call that input and let's just do a C and get from input and we'll have an if to check that so I'll say if if input equals password then we can say something else we can say something else let's just copy this C out save a bit of time paste it in here and here and so if the passwords right our save password accepted and if it's wrong I'll say access denied din ID so let's run this and check that it works before we introduce the loop here so I'm going to build it build project check it builds ok and run it and enter your password so if I type garbage access denied and if I type below password accepted maybe I'll just change that to a flush because then we can type on same line in the console as so if we use the while loop to try it we want to ask for the password over and over again until the user gets the right password if I used a while loop to do that let's let's see how that would look so I'm going to say while input is not equal to password like this I want to say access denied if it's not equal to the password if they haven't entered the right password and then after that I'm going to have to ask them for their password again and get them to enter it again so like this and now I want here and I don't want to declare another string inside here sit C++ so let me do this normally you can't have two variables at the same name but if one of the variables is inside another pair of brackets like this this variable will actually be different to this one we say that this is masking this one and this sorry this only exists within these brackets while this will exist within these brackets but here we can't actually access this anymore because it's masked by anyway that's a little diversion I just wanted to kind of mention that we say that scope of this variable is these brackets and the scope of this variable is these brackets that's where these variables existing can be used but we don't want to do that really anyway so I'm just going to get rid of string import here because we can just use this one variable to get the input every time once we declared it so we're going to ask for the password and we're going to check it and say password accepted or access denied and then well while the password is still not correct we're going to ask them to enter it again and that's let's put yeah we can get rid of access denied here I suppose so we've already set out sis denied there but then again probably probably the best thing to do here is just get rid of that else so yeah so we asked for the password we get a password if it's correct we can say accepted otherwise we go into the loop the loop says access denied ask for the password again and if then if they enter it correctly we'll go on to the rest of the program if they don't answer it correctly then we're going to do this loop again because this condition will be true so one one thing we could do actually here is just to move this to the end of the loop here so we could get rid of that because this loop isn't going to finish until the password is correct and when the password is correct then we can just output password accepted so just by thinking about it a little bit we can make it look a bit cleaner and go to five let's let's check if that works so I'm going to run this I think I got that right and that's type some garbage access denied more garbage access denied etc and if it's I hello then it works it's worth checking that it works when you just enter the right password immediately as well let's try that and immediately enter hello password accepted so this this program works but it's it doesn't look that good because we've got some repeated code here we've got enter your password twice we've got them we're getting the input in two different places here as well and that's that's not really healthy would like to avoid repeated code and we can do that what it'd do while the the key thing here is that while it's only going to execute if the password is not correct but we want we want the loop to execute once anyway to get the password in the first place we need the loop to execute once without checking the condition so that the user has a chance to enter the password and then would be able to do away with this stuff let's see how that would work so we'll change this to a dowhile will say do open the curly bracket close the curly bracket the condition I'm just going to copy from there and that goes after to do here and then within here so I need them I need the wild keyword as well before the condition at the end and within these brackets we're going to say enter your password and we're going to get the input let's copy this and paste it in just do format there auto format and then then we're going to have to check to see if the input is incorrect I'm going to have to check again because we want to output a message if it's not karelis a while in if input it's not equal to password I'm kind of going through this fully rapidly but I'm going to just go over again in a minute then we can say access denied so it's a bit of a mess at the moment but now we can get rid of all this stuff and we can get rid of this now the string we actually have to declare up here because if we declare it in here we couldn't access it here so let's let's get rid of this one and I think this looks like a good program let's go to project build project and run in chatter that works so now well I'm not seeing any output here but I should do right it looks good oh yeah I've got to get rid of this as well apologize yeah that's sorry the CN let's get rid of that and I'm just using command D or I think it's ctrl D in Windows to delete a blank line they're just quiet and you shortcut okay let's let's run this see if this works yes and I'm going to enter let's try entering the right password immediately so it works and let's try giving it some bad passwords access denied access denied access denied hello password accepted so by using the dowhile loop we've we've avoided duplicating some code and so just just to quickly take this on the top so we've got our password constant here then we declare a string which we're going to use to get input and then we enter the dowhile block so this is going to execute at least once and first thing does it say enter your password then it gets the password then it checks to see if the password is wrong and the reason for that is I don't see how we can avoid having an extra little check in here because we just need to output this message saying access denied if the password is wrong if the password is wrong then this condition is true input is not equal to password and then we'll good we're going to do the loop again we're going to keep doing that as long as this condition is not true if the condition is false then it would only execute the loop once if it's immediately false if the password is correct after that after we've output this the first time then we wouldn't repeat the loop but every time that this is it's true we are going to do that loop again and when we finally get the right password we will then leave the loop so if we do all this stuff under these of final types the right password and this is then false input not equal to password is false because it is equal then finally we say password accepted so to practice this I'd recommend doing pretty much what I've done in the video because that's really good practice first just create a really simple dowhile loop make up an example with an integer or whatever and just chatter you can get that to work you might finally forget the semicolon or you get something in the wrong place so get it working and then I'd recommend trying to write this program just using a while loop and see how that works it's really good practice write a program that asks for the user's password and keeps asking until they finally give give give you the right one and do that using a normal while loop then change it to do while and see how much of that extra code you can get rid of so that's it for this tutorial I'm not sure what we're going to look at in the next one there's loads still to do possibly the switch statement or something but but we'll see okay so join me again next time and until then happy coding you