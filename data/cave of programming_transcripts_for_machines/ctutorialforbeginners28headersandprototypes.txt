hello this is John from Cave of programming. comom in this tutorial uh in C++ for complete beginners we're going to take a look at headers and prototypes so we've seen that you can define a function like this let's put it above the main function here and let's type main uh sorry void do something uh just to give it a name and we'll we'll output see out hello in there so this is just a normal function with just one line of code in it and in the main function here we can call that function here we've defined it we've imp implemented it and now we can call it to actually make it run let's type do something and we could call it as many times as we want in fact let's call it twice just um for no reason and if I run this now we should see a couple of Hells there so I've invoked this this function twice I've called it twice so it's run twice but we've seen that if you were to Define this function below main like this if we now try to build the project it doesn't work because the compiler reads this function down line by line from the top and when it gets to here it hasn't seen this now uh that's that's quite inconvenient and we can actually fix this by um by putting what we call the Prototype of the function above main so what that looks like is here we see that the the line of the function function that defines what parameters it accepts none in this case and what it returns which is nothing in this case and that's that information is all contained in this bit here and that's all the compiler really needs to know in order to allow you to call the function so what we can do is above main we can type void do something round brackets so start defining the function just as normal but then stop at this point where you would normally open open the curly brackets just put a semicolon instead and this this bit of the function is called the Prototype and it shows um what how the how the function operates uh it shows what it returns and what it accepts which is nothing in both cases with that information the compiler can then say okay you're allowed to call that function and I trust you that the implementation will be provided somewhere else in this case the implementation is down here so this line by adding a prototype here we can um this will actually make this main function compile now so let's do that let's go to build project and we see that now the errors go away so I I can now run this now we're going to as we're going to see later on it's common to Define functions in uh separate files all together in fact later on we're going to see that uh you often bundle function together with data in what we call a class but we haven't seen that yet and groups of related functions basically are typically put in their own file uh so what you need is to have all the um prototypes of related functions in some file which you can then include in this file so let's take a look at a simple example of that in this tutorial just to get started with this what I'm going to do is um let's click the source folder here in the project right click it and go to new and I'll go to in fact I'll go to new other and if we scroll down here under the C++ section we've got header file let's select that and I'm going to call this I'll just give this a name I'll call it utils Doh so the kind of file that I'm defining here should start should end with a h and we'll click finish and notice um we've got some stuff in here that has automatically been added by Eclipse so the file that we're actually typing in here you'll notice ends in CPP it's just a text file and this new kind of file that I'm showing you here ends in h but again it's just a text file what we can now do is take this void do something cut it out from here go to utils Doh and paste it in then I can save that so I'm actually pasting it you'll see there are lines here there's a line that says Define and there's a line that says end if and I'm pasting it between these two lines so now we go back to prototypes and includes. H and at the top of the file here let's put it um below the line that says include I stream but above the line that says using namespace standard let's put in another include and I'm going to type uh hash or I think this is called a pound sign in America include and then in double quotes I'm going to put utils Doh and I'm going to save that build the project and now you'll notice that it runs as before so I can run it and it says hello so the way this works is that um this this command actually says to get this file here and literally paste it in to this file here uh in a sort of copy of the file before it's compiled so what the compiler will actually see is this file but where you see include uh the something called the preprocessor will have gone away and found the files mentioned here and literally pasted them in to this file here so what this actually sees now uh what the compiler actually sees well instead of this line will be the same file but with this line in it so there there are a few things to mention here um one is that I've used double quotes here but here the include has angle brackets around it this is also a file uh just called iostream used to be called iostream Doh and on some platforms it still is but on on for various compilers it's just been renamed to miss off the. h just cuz I suppose it looks nicer basically the angle brackets uh well there's no absolutely certain and consistent meaning to the difference between double quotes for an include and angle brackets but uh in general the kind of idea is the angle brackets refer to a file that's in a standard location which you compiler will know about so this is going to be in some special location on your disc that the compiler will automatically look at double quotes uh are usually used for files that are actually included in your project like this utils Doh that I just defined so this this file is in some standard location this one in double quotes instead of angle brackets is actually in my project but in practice the angle brackets and double quotes May well be interchangeable for your compiler it actually doesn't matter too much A lot of the time uh nevertheless it's not bad to stick to the convention since at least the double quotes clue you in that this is a a file you've defined yourself in your project you'll also notice that in u.h here um we've got these if not def Define and end if statements now the way the way this works is when your program is built there are several stages to it and the very first stage is that something called the preprocessor runs and the preprocessor looks for statements beginning with these hash symbols and uh it follows whatever commands you specify in in these kind of hash um symbols and the most common hash preprocessor we call it a preprocessor directive the most common preprocessor directive are these include directives here so the preprocessor will run and it will process the files somehow uh in this case replacing these lines with this with the content of the specified files and that's why these lines don't end in semicolons because they're not C++ statements they're not statements in the C++ language to the C++ compiler they're actually uh statements to a a kind of separate bit of software that runs called the preprocessor which will run before the actual compilation the actual transformation of the text file into binary code before that occurs before that is actually actually happens the preprocessor runs and here and these are more preprocessor commands so again they don't end in semicolons and this is just saying Define this symbol in other words kind of memorize this symbol and uh this symbol it could be anything basically uh in this case it's utils uncore hore um that's that's purely to create some sort of unique symbol um for this file it could be you know anything at all really but um this is kind of a convention that you use the name of the file underscore H because it's utils Doh and then it's it's added another underscore on the end of it just to make it even more unique really so it's saying Define this symbol in other words take note of this symbol that's an instruction to the preprocessor uh sorry here yeah here it's saying if if not def so if this symbol is not defined then Define it and do all this stuff and then end if and uh what this is actually aimed at doing is often in your program you'll end up including uh the same file into multiple different files which will all be combined together when your program is actually compiled and you can end up with multiple includes for the same include file and that would cause you problems if you had that and this is is just a way of ensuring that the contents of this file cannot be included twice because the preprocessor runs it says okay the first time if this symbol is not defined Define it do all this and that's then the end of the if if this Pro if this symbol is defined it says okay I see this symbol is already defined and we're only supposed to be doing all this if it's not defined if not defined so therefore if this symbol is defined when when the utils Doh is included for the second time then we will not do any of this we only do this if it's not defined well uh don't worry if that loses you a bit we're going to be we're going to be getting used to this because we're going to be seeing more of it um but the thing to do for this tutorial is just practice first of all Define a function and just call it in your main function and then try moving it below your main function and uh try try putting the Prototype above so that your program then compiles as I did earlier in this video and if you like you can take one of the um projects from pre a previous tutorial where we Define multiple functions and then move the functions move the definitions of them below your main function and then add the prototypes up here to get it to compile see if you can get that to work and then finally move the prototypes to their own uh header file and if your ID e doesn't create these if not de things then Define them yourself so it it doesn't it's not as important at this stage to really thoroughly understand what these actually do as it is to get used to typing them um in fact you you will probably never really need to use these preprocessor directives a whole lot you'll only probably need to use them in this context so if you can memorize them and you just have a rough idea of what they're there for uh namely to prevent multiple includes of the same header file then that's that's good enough so try doing what I just did basically try using a header in your program and later on we're going to be using headers a lot more and we're going to be uh using multiple CPP files as well to separate out our code into multiple files which is going to make it a lot easier to work with so I'll I'll leave it there for this tutorial there's more to be said about this and we may well cover um this a bit more next time but I think that's enough for now so until next time happy coding