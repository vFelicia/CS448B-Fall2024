hello this is John from Cave of programming. comom and in this tutorial we're going to look at abstract classes in Java and Abstract classes are something that you can use when you want to start creating a class hierarchy but the base class is not is is not going to be able to do anything in itself it's only going to act as a base for other classes and let's let's take an example of this I I might decide that I want to have a base class called machine for my class hierarchy let's say so I'll create a machine class and I might have a bunch of different subclasses like for example a camera is a machine so I might say public class camera extends machine and a car is a a kind of machine so I could say new class car and I could also say that car extends machine now it may be that in whatever program it is that I'm creating both cameras and cars have some functionality in common let's say for example um it may be that both the cameras and the cars in my program have IDs so if if they have something in common that's common to all of the machines in my program then I could add that common functionality to the parent class which makes complete sense so I could say private let's say int ID and and I could rightclick and go to source and generate Getters and Setters and I could generate a getter and Setter for ID and then every machine that extends this class has an ID now so far this is a completely conventional class hierarchy and now I can do stuff like camera cam1 equals new camera and cam1 do set id5 and the same for car like car car1 equals new car and car 1. set ID for or whatever you get the idea but I might say well what what exactly would machine you know why why would I want to create a machine object like I might say machine machine one equals new machine but what the hell is this you know what would I use it for and I might decide that while there's a purpose in having a camera and a purpose in having a car there's there's never going to be any value in having a machine because all machine is is it's a base class that implements some common functionality that any machine has but there's no such thing in itself as an abstract machine I could decide that you know and in indeed in the real world we have cameras and we have cars but unless you go to like a modern art installation or something something you don't have a completely abstract machine you you only have specific machines so I could prevent the user of this class hierarchy from instantiating the machine parent class and to do that I just make it abstract so I say public abstract class machine and what that does is it means that now if I try to type machine machine one equals new machine I can't do it because machine is abstract and as it says I cannot now instantiate the type machine which is which is what I wanted now this this is an abstract class and Abstract classes can have abstract methods because let's say I now want to force all machines to have a method called start because I might think well every machine that I'm going to have in my program has got to have a start method to start it up somehow whether it's a car or camera or whatever it is and you know cameras these days are usually digital and you have to start them up so to do that I could have an abstract method and this this will be appropriate if I want to force all my child classes to have this method to implement it but I I don't want machine itself to implement it because the implementation is going to be completely different for every particular kind of machine then I can say public abstract and let's say that this is going to not have a it's not going to return anything and it's just going to be called start and then instead of having brackets here I just put a semicolon so it's exactly like the Declaration of a method in an interace and now I get an error here because I've got to implement start now in camera so if I click the error I can go to add unimplemented methods and the same for car here and they can have whatever implementation would make sense for this particular class and this is this is of course very much like using an interface and we're going to talk about that in just a second but first let's put in an implementation here for for car as well starting car and you you can even do stuff like um let's say let's say you've got a run method let's say that every machine has a run method public void run and I could I could even like call an abstract method here so I could say star in run like that if I wanted to and I could have more abstract methods here like public abstract do stuff public abstract void do stuff this is like a kind of ridiculous name but just to illustrate the principle and public abstract void shutdown and I could call all of these methods in run even though they're abstract here in machine so I could say stop do stuff and shut down which can be can be quite handy so I'm supplying quite a lot of the implementation in machine but it's just that the bits of implementation that I want to force the the child classes to handle I I just don't declare here I just I just make that um those methods abstract and Force the child classes to implement them so now we've got to implement some more methods in here and now of course I can call stuff I can do stuff like calling car1 do run and this is just going to say starting car because I didn't Supply actual any implementation for do stuff but I could do that and that's uh pretty much all there is to abstract classes but one one thing that I want to just talk about a little bit now let's say just yeah shut down car but you get the idea one thing that um often confuses people is because this abstract method is this is forcing the child classes to handle that and that's very similar to an interface when you implement an interface you force the user of that interface you force the the class that implements that interface to implement certain methods and for that reason people often get confused about when to use an abstract class and when to use an interface and uh there are several things to bear in mind and the the most key thing is that when you make a class the child of an abstract ract class by having the abstract parent class there you're really making a very strong statement about what the child fundamentally is so with an interface we could have like um I could have an interface called uh info for example with a method called show info and a machine could implement this show in info interface and so could a person or so could a building class any anything can Implement show info and we will be we would simply be saying that uh a class implements it has this functionality of being able to display information about itself let's say but when you say that a a child class fundamentally extends a parent class like this extends machine I'm really making a very strong statement and I'm saying that camera is a machine and I'm saying that car is a machine so the parent class determines it its fundamental identity and when you have a abstract class as the parent um class in hierarchy you you really have to make sure that the child classes they are going to be whatever that parent class is a car is a machine so an abstract class implementing extending an abstract class is a much stronger statement than simply implementing an interface and another thing to bear in mind is that a a class can Implement many interfaces but it can only have one parent class so it can only have one abstract class in hierarchy so you're you're only going to be able to extend one abstract class but you can Implement as many interfaces as you like which again kind of reflects the fact that extending abstract class is just a really a more fundamental statement about identity than simply implementing an interface it's as if the parent class determines what your child class is but implementing an interface just determines one thing that it does and it can Implement many interfaces meaning it can do many different things and another consideration is that you cannot have code in an interface but in an abstract class you can provide default functionality we can actually have real functionality in um in an abstract class like machine here but in an interface you're leaving the implementation completely up to the child class so you can't you can't put code in an interface and once again that that really has to do with the fact that if you extend a parent class you're really your child class had has the fundamental identity of the parent class and can even take functionality from it whereas in an interface it's completely up to the implementing class what implementation is in there it's um the interface purely only defines the form of um the methods that your class has and it doesn't provide implementation so that's it for this tutorial and uh abstract classes are a great tool to use when whenever you're starting a class hierarchy and it just makes no sense to have a actually implemented object of the root in that hierarchy so there're a thing that you'll use occasionally but uh probably not nearly as often as you will use interfaces you can find this code on Cave of programming. comom and until next time happy coding