hello this is John from cave bottle programming in this tutorial we're going to talk a bit about libraries and C++ because in the next program hopefully in the next tutorial and I want to show you how to set up a program that that can work with graphics and C++ but first we need to understand what we need to actually obtain in order to get that to work and we need to understand a bit about libraries in C++ so in C++ you can if you create a bunch of code you don't have you don't have to create a program with that code you can also create a library if you create an ally brer e you can then give that code as a compiled binary library to other developers together with the header files and they can then link that code with their program and use it so I've kind of touched on it before although I am gone into compilation and explicit detail but when you compile a C++ program first the preprocessor runs and that processes your in your anything it begins with a hash basically so your include statements your if deaths you can also define statement in there which we will be having used and so on after the preprocessor you then have compilation which produces object files so your source files your CPP files are compiled into object files which produces files that usually have the dot o suffix I'm trying to think if that's the same for every every platform I think is so if if we look at let's just look at a program so if I get the location of this program that I've got here and then we just go to that in the terminal here so I'm on a Mac here but doesn't matter let's take a look so I do CD and I'm going to have to put this in double quotes if we go to the debug folder the folder for ladybug target here and we go to that's got a source subfolder we see that we've got we've got a bunch of dot o files here we've also got these debug files but the most important thing are these dot o files which as far as I can think is also the same on Windows so when you compile your program you produce a bunch of diode files and enter the final stage of compilation it's that you link your program and linking means you combine all of your all of your dough files together with any libraries that you have into an executable which could have suffix texture on Windows or no suffix on for example UNIX platforms there's no particular executable suffix so when you when you link your programs when you link those object files together containing your code you can also link them with external libraries that you've used to develop your program and if you think about it even if you create a hello world program let's say you're using more code then you've actually written yourself there you're using for example the code associated with C out and that has to be contained somewhere on your system in order to be able to run it it has to be code that actually deals with the the console and outputs your text and a C++ program will actually use libraries which we call dynamic libraries that contain that code so let's let's take a look at how this works when you compile a program you choice between using static libraries and dynamic libraries and you'll be using some dynamic libraries kind of implicitly anyway so static libraries of static link libraries if you like they they are files contain C++ code which are actually compiled into your program with it with a important caveat which we'll go into so static library is a bunch of is a bunch of C++ files that have been compiled the codes been compiled into a binary file which we call a static library and the idea is you give that binary file to other computer programmers they can then link their program with it to create their executable and then use the code that was compiled into that static library we can also have dynamic libraries so we can have libraries that contain code which the program finds when actually runs so not when it links but when actually runs and if you see out your program is going to use code in a standard dynamic library that's already going to be present on usually at least on any systems whether well that program is capable of running so in this case with dynamic libraries program your program will find the relevant code at runtime to regalo two kinds of libraries now with static libraries the actual files containing that C++ code so the actual libraries will have a suffix of on on Windows live so we have for example X X Y Z dot lib that would be an example of a window static library and you can create those yourself if you want to it's not at all difficult to do but I won't go into that in this tutorial and on UNIX type system so on UNIX or Linux they they have a suffix a usually and they also start with the prefix Lib usually so we'll have for example X Y Z dot a so that's a UNIX or Linux static library containing actual C++ code which you can compile into your program and use it's also the same same on the map I'm actually although I'm developing I'm going to develop this program that I'm going to show you on a Mac I'm actually going to use the UNIX stroke Linux type system because I couldn't get the kind of Mac we're doing things to work with SDL but Mac is a the Mac Mac system OS Mac OS is based on UNIX in any case now so we can use a UNIX or Linux type system to develop programs with it which makes things a bit easier but as far as I know on in the map static libraries all have a also have a die suffix or at least you can use that kind of library on the Mac anyway now dynamic libraries dynamic so dynamic on Windows India for consistency there we go so on Windows they have the suffix DLL so you'll have X Y Z dot DLL I don't use Windows anymore but in the past my program windows at least it used to be the case that you have a lot of dll's in your Windows system or system32 folder and they are standard libraries either that or either that or libraries copied by an installer which multiple programs can use so programs can load libraries from that location dynamically when they run and it's also the case that if you put a dll file in the same folder as your program in Windows Windows will find that dll file there on UNIX or Linux or Linux or Mac as well dynamic libraries they have and they have a suffix usually a dot s oh and they also start with Lib usually so have lived XYZ dot s so and finally on only the Mac a dynamic libraries can have the suffix dot eyelid so I guess that would be X Y Z dot I Lib I don't think there's any lip suffix there for remember rightly that prefix sorry so we've got DLL and on windows and dire so basically on UNIX or all Mac and on the map is also this die Lib and suffix for dynamic library that's also possible so and the upshot of this is is that we're going to be using an API called STL and you can use other api's which I'll talk about a bit in the next tutorial to follow this these tutorials if you want to but we're going to need an external API to provide us with some graphics facilities and depending on your system you're going to have to locate the right kind of file to compile into your program so one thing I should mention is that it's possible although I said that static libraries contain actual code that's actually linked with your program it's also possible for them to contain kind of stubs that just tell your program to load code from a dynamic library so a common thing to do is to link your program with a static library which basically instructs your program to find go from a dynamic library so that when you distribute it you have to distribute a dynamic library with it even though you've linked it with a static library so the static libraries they don't necessarily have to contain code themselves they can't just contain information about where to find code basically for the program so the next tutorial we're going to start taking a look at STL and with this information in mind I'm going to explain what you need to find to compile a basic STL program so that's it for this tutorial and until next time happy coding you