hello this is John from Cave of programming. comom and in this tutorial we're going to look at throwing exceptions in Java so we've still got some more stuff to look at in the realm of handling exceptions but I thought First We Take a look at how to throw them so I'm going to create a new class here let's create a new class and I don't really know what to call it so I'll just call it test or something something like that and I'll give test a method I don't want a main method but I'll give it some kind of method let's say public void I don't know run or something like that this is just stuff that I'm making up off the top of my head and I'm going to Let's assume that we want a COR run in the main program here so we could say let's say test test equals new test test and then we want to call run so we say test. run and in test. run let's just put assis out so that it does something I'll just say running successfully and let's let's just run this and check that it works which is always a good idea there we go now let's suppose that run actually has to do something that could go wrong so I I don't know what but um let's imagine that it could go wrong somehow so let's say um in value equals um n and let's imagine that this is some kind of but let's not call it value let's call it code and let's imagine that this is um some kind of return value from some complex process and U we'll imagine that zero means success so0 equals success and any anything else like um anything else is um you know like one 2 3 is going to mean failure so let's say anything else equals um error code now you throw an exception when something goes wrong in your code so I mean there there are kind of slightly different schools of thought on when you should throw an exception because uh back in the days when I was learning C++ I always read that you should only throw an exception if something goes wrong that shouldn't happen and in Java the same philosophy is kind of followed but not really so rigorously because for example if you have some code that looks for a file and then you throw a file file not found exception and imagine that that happens whenever the file happens to not be there but it's just a random file which could be there or could not be there then throwing and catching a file not found exception becomes part of the normal operation of the program and arguably that's bad coding but different people seem to have a different opinion on that but the bottom line is an exception for when something goes wrong and some people say that this should be something which is not expected to happen during the normal running of the program but people do differ about that so we'll assume something's gone wrong and we'll say that if code is not equal to zero then this means something's gone wrong so something's wrong and we're going to throw an exception and the way we do that is firstly in the method header here we have to say what kind of exception the method might throw and so you need to pick kind of a suitable type of exception and if you go to Google and you search for Java possibly your version of java let's say seven and exception and then go to the API DOC for for the class exception you can see a massive range of subclasses here which you could throw and some particularly common ones are for example file not found exception and IO exception so you could pick an existing exception to throw from one of these and you could also throw exception itself you could just throw exception although that's considered kind of bad practice let's imagine that you've looked at all these different exceptions and you decided that IO exception is the one you want IO exception IO exception um means input output exception so you could throw this if something goes wrong with the input or output of the program so let's say here throws IO exception and let's let's throws with a lowercase T CU this is a keyword and the keywords have lowercase letters and IO exception uppercase i cuz this this is an actual class exceptions are classes and now here where where the thing actually goes wrong in your code if it goes wrong you can say Throw new IO exception and exception classes they all allow you to specify a message here so we could say here something uh went wrong actually that's a terrible error message how about um could not connect to server something like that and now you you'll see that I now that I've saved that I've I've got an error in Main and notice I'm not throwing that exception at the moment because the code is equal to zero so this won't run all that will happen is it says running successfully but the point is that this this is could be return code and here we're checking has has something gone wrong and if it has only then will we throw an exception and if we throw an exception it will leave this method at that point and bolt straight out of it and we're now forced to handle this here so I'll use what um the stuff we saw in the last tutorial I'll click the error message and Surround with try catch and here we could say e print start trace or we could present some kind of error message to the user or or I could do something like sisal e. getet message and get message will return that me that message that I supplied to the Constructor right here so if I save that the error goes away and if I run it well it says running successfully but if I now changed this to be one let's say and now I run it it's going to say could not connect to server there just one more thing that I want to show you in this tutorial although there's going to be a bit more to say about exceptions which is what if you don't find an exception that you like the look of you don't find an appropriate one you can create one of your own so I might create a package here called exceptions actually but for the moment let's just bunk it in this default package so I'll right click and I'll go to new class and let's call This Server exception I don't think there's already a server exception and I don't want the main method and and I want this to extend exception so I'll type here for the super class exception I'll click browse and I'll browse to java. line exception and click finish so we've got a class server exception which extends exception and I'll also give it a Constructor so I'll right click and go to source and generate Constructors from superclass and I'll just use the Constructor I'll say deselect all and then I'll select just the one that takes a string as its um as its uh sole parameter and you can also Supply other exceptions that are the root cause of this exception but we'll just stick with a message for the moment so I click okay and uh I'll just let that go to super um invoke the super class Constructor here so this doesn't actually do anything new and you could make it do stuff new stuff if you want you could give it new Fields New methods that allow you to provide new information about the nature of the exception but for the moment I'll just leave it as it is and I'll change this I exception to server exception in fact what I'll do is I'll just comment this out and let's just paste this down here and I'll change this now to server ET and I click save and let's look at the error and I'll now I will change this here to server exception as well so it throws a server exception and here I'll also change this to catch server exception and we could we could have made um server exception a subass of IA exception if we think that server exception is a type of IO exception then we could have made it extend IO exception but here I'll just create a brand new exception with the exception class as it's parent and we'll save that and I'll just run that and it's the same result as before if the exceptions thrown it catches my server exception and in this case it's printing the message and we could also say something like e. print stack Trace if we want and then if I run that we'll also get this kind of error message and we can find out where the exception occurred and I can even click um a bit further up the stat Trace here and find out precisely where it originated from and notice that we if we throw the exception we don't run this line because as soon as you say Throw new exception it leaves the method that you're in so that's it for this tutorial and we'll look at exceptions a bit more shortly but until next time happy code in