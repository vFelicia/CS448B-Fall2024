hello this is John from cave of programming calm in this tutorial tutorial we're going to look I'm going to take a closer look at integers in C++ and although this topic is not the most interesting and we're going to get on to more interesting stuff soon it's important to know so you don't have to memorize everything that I show you here but it's good if you at least see it and just play with it a little bit because it will stand you in good stead for the future so I kind of want to run this past you we've already seen it you can type stuff like int value equals 77 777 or whatever and you can do see out value and endler and if we run this program then it's going to output 777 now there's there are limits to how big an integer you can fit into this value and that's because we're only allocating a certain amount of the computer's memory here and so the question is like how big an integer can you actually put in there and what happens if you put one in that's too big let's put a really big number in here just make something up like this that's not going to fit so let's run this program and we can see that the number we've got out is basically nonsense it bears no relation to the number that we tried to put in because we're trying to put too big a number into too little memory and we've also gotten a warning in Eclipse here overflow and implicit constant conversion so I guess this is a constant we're trying to convert it to a an int and it's just not going to go so I'll change you back to something sensible so how do you know like what value is too big to put in an int well we can explore this a bit further in two ways one thing we can do is here below the include iostream statement type in hash and include limits and if this doesn't work for your compiler you might have to do something slightly different like it might be limits to H or something like that and if that is the case well I'm sorry but you might have to Google limits for your particular compiler by fitness will work on hopefully most so tight include limits and that's got to go below this is stream included and before this using namespace standard and you can n do stuff like this see out int underscore max endler get rid of that stray bracket there and let's run this and that will show you the maximum value that you can store in an integer which is this so let's let's put in here max into value there's also like a I need another kind of chevron thing here insertion operator there's also a minimum value that you can store in an int so let's put that in and that's int min so if you run this we can see the minimum and maximum values in that in that we can store in an int and interestingly and notice that they're not the same ones ending in for a tier and maximum value is ending in for seven so that they're not just they're not just it's not one's just not positive any others negative they're actually slightly different values off by one and I think we're going into the reason for that in a video are to down the line because it's worth knowing but and you have to bear in mind that you can't fit all values into this int and if you want to know what else is in so this in max it's like a constant that's stored in this file that we've included in our program here we'll talk about it more later but if you want to know what other values you can use in there go to a browser and if you search for or limits limits H then you can easily find a reference to this that will show you so what so we're using like in min and in max bother others here that you can also use so what if you want a bigger integer well you can change in by typing long you can say long int let's call this L value equals and some huge value that would not fit in an integer and let's do C out and L value and endler and let's see if that works so if we run this now so we build it and run it and yes they these values match if we chosen in here I don't think they would match let's try it because would be overflowing the amount and storing it in so this is not the same as this but if you use long than it works it's also shortened short int let's call it s value and you can fit quite small values than this I'm not sure exactly what if we look at this file here limit stage we've got short max here so this is the maximum value that you can fit in a short and int so let's go back to eclipse and we should be able to fit that in there and let's just do a see out on that I'm going to copy this one and put s value and we'll compile it project builds go to that warning let's let's just run it kind of just hit the Run button actually so yeah that works so most of the time you can just use like int and you don't really have to worry but if you've got a really big number you have to worry and sometimes you want save memory if you've got like a whole load of intz and then you you want to use a short value or there might be some other reason why you want to use it another thing you can do here is you can use the sizeof operator to find out how much memory these types actually use so we could say here size C out and size of an int let's say and then I'm going to type size of and this is this is technically an operator like this is an operator I guess equals is an operator never really thought about it to be honest plus is certainly an operator and this is also an operator although it's got multiple characters in it it's not just one symbol we call these things operators they kind of operate on data somehow and this one requires two brackets like that or that's how you most often use it and then we type int in there or you can also type a variable name in there like value or s value or whatever let's try this though and end learn and if we run this it's going to say sizeof in four what's that for well it's four bytes or in other words it's four times eight bits which of course is 32 bits so the maximum value you can fit in an inn is going to be roughly not quite exactly for reasons that we will get into two to the power of 32 it's going to be in that region are actually a little bit less than that probably I don't know okay yeah so and probably half as much as that come to think of it because basically we need one bit to represent whether it's signed on sign it's negative or positive but we will talk about that more and future in the future so basically at is 4 bytes allocated here for an integer and we could do a similar sort of thing with let's try it with short int and it's type here short int and see how many bytes are allocated for that so we'll run this and we see that the short int is just 2 bytes so the maximum number that you could represent in this would actually be 2 times 1/8 well 2 times 8 is 16 and because we need 1 bit for the sign it's going to be 2 to the power of 15 I suppose if I'm losing you here don't worry I'm almost losing myself but it's just important to know that there are sizes to these thumb to these types and you can't sometimes you need a different size type it's the basic gist here you also can have for example you can use signed and unsigned with these as well like I can type on signed int let's call it you value equals and then it can only be positive call me negative because we could put a negative value here this is a signed in meaning we can have negative or positive values in it as a default as the default is assigned int but if you type unsigned in front of it then you can only have positive values in and that means you can store a bigger number in it because you don't need to use one bit internally to represent a negative or positive sign so sometimes I was a useful as well that's just output that it's not going to do anything very interesting but let's just running so with a signed int here at the top we've successfully represented a negative value you can't have a negative value in an unsigned int it's going to get gobbledygook that's the whole point of it so that's not matching this so if it's unsigned it can only be positive but you can fit a bit more into it so sometimes that's useful and a lot of compilers let you type just long instead of long int like that the fact for all I know they all do so often you see this long or just short by itself and so yeah we've covered integer types and we've looked at limit stock we look at look to the limits dot H file here this is actually an on your hard drive this property file called limit stage that we're bringing in with this kind of include symbol but don't worry about that we've looked at the size of so and it's you know even if you just watch this video is better than nothing because you're going to kind of and come to understand these different types as we carry on programming stuff in this course but if you can't be bothered it's definitely really good if you just practice declaring long and short on int signed and unsigned int try putting values into them see what happens if you put a value in it's too big full of tight try using size of to get information about the type and maybe Google Limit stage and just have a look at what's what's in there and that's good for the moment so this this will feel probably like a lot of information but and take a message here is really just that we've got long it long int or the reinsurance and they can also be signed and unsigned so you often need to pick the appropriate type for your particular program but most often you just use int so practice that if you can be bothered and in the next tutorial we're going to look at some more types or actually I might get into the details of exactly why the negative value of an in maximum negative value is not this is not it's the same but negative as the maximum positive value if you see what I mean and yeah and as always I'd say if it kind of goes over your head don't worry because we're going to get on to more practical stuff very shortly so do keep watching so that's it for this video and until next time you