hello this is John from cave of programming calm in this tutorial we're gonna look at three more primitive types in C++ we've already seen a bunch of integer types and some floatingpoint types I'm going to finish off this little section by looking at three more very useful types well two more very useful types and one that you don't really use that often or at least I haven't but that you should know about anyway so the first type we're going to look at is bull bull is named after a guy who I think his name is George ball or something like that and he was a mathematician who did a lot of work with logic and the boolean type which has this keyword bull to represent it can't story the true or false let's type B value and we can set that either to true or to false and if we output it we get a little surprise let's try this we see out what we get is actually we get one and that's because in C++ zero is equivalent to false and one is equivalent to true so we can also set this to false let's run that and we get zero so zero is the same as false 1 is the same is true you can actually pop stuff like numbers in there and it will accept it and it will regard that as equivalent true so cell putting 1 but don't do that because it's really confusing so it's best not to do that it's best to stick to true and false but it is quite common in C++ to have something that evaluates to 0 or 1 and to regard that as being equivalent to true or false we're going to take a bit more of a lot that boolean values later on when we look at complex conditions in C++ but but for now I just wanted to mention this so ball is a type that you can set to true or false basically and by the way and it's possible in some compilers you might have to put and true and false all in capital letters to get to work that used to be the case in visual C++ but I don't think it's the case anymore as far as I know so another type I want to show you is char and char and is it takes up exactly one byte of computer memory so I miss often read it's often useful just for that reason if you want to allocate a specific number of bytes let's type C value equals and well let's let's set this 255 I want to show you something that first is totally perplexing here let's do C out C value endler and if we run this so we put 55 in it what we actually get is 7 now why why is that well char is and it's kind of partly intended to represent single characters from something called the ASCII character set so let's go to a browser here and let's type in us key and I should do it ASCII and we'll look up we'll go to this ASCII table link or we could go to Wikipedia it doesn't doesn't really matter let's see what's of this link here and we can see that well a byte can only represent 255 distinct values and we see here we've got a table of well this is a table of by looks great 127 different values so those are like the applet plus we've got another bunch of weird characters here up to 255 so each each character that's commonly used in the Latin alphabet like in American English or something plus a bunch of other characters that are quite often used however have a position in this table and if you output a char we see out for example if we put the number 55 in a char we see fiftyfive that is the number it's used to represent the character seven so not the number seven but the actual character seven so what's happening here is that we're putting 55 into the number 55 and it's outputting the character seven so it's it's very common to actually put characters directly in here although it is actually an integer type and two to get the actual ASCII value of a character in C++ the actual and the actual number of that character in the ASCII table not sure what ASCII stands for I can never remember American Standard Code for information exchange there you go then what you do is yeah so we put that the actual character in single quote so if I type two single quotes here and put and seven in there and then I run this program it's going to output seven so it's really important to realize here that a seven in single quotes is not the same as the number seven and this this number seven it is is literally a number if we put it in single quotes like this it's a character it's it's a symbol that has happens to have position 55 in that ASCII table if we actually want to see the and the actual number of the actual position of this character in the ASCII table we can we can put int here and see out just before this C value this is called casting we say they were casting a char here whoops to an int and that will cause the out to and to output this as though it wasn't an integer so if you run this now we'll get a 55 again so you can you can put any character that's in the ASCII table basically anything from you American alphabet plus a load of other characters let's put G in there into a char and you can store numbers in a char but you have to be aware let's just get rid of this int so that we can actually see the G because that's a bit less confusing and says G but a char you have to be a work only and can store a number and it can be minus 128 up to plus 127 that's 256 different values if you include 0 so yeah 256 that's right isn't it I think so yeah okay so let's and let's hear this output the size of a char because as I say the size of char is particularly important because you often use it to allocate a certain number of bytes in memory size of char let's try this and run that so we're going to build we've got an error what'd I do wrong so I've said what I should have put Scout they're not child let's run this so when it when it builds the error goes away so size of char is one byte in other words eight bits so you can only represent quite small numbers in that from minus 128 plus 127 one other type that I want to just show you is W child score T which is very strange name and this is intended actually and for representing its intended for representing a greater range of characters V then you can represent in char so sometimes useful for that again you could put like you could assign it to a character like that let's now put this to see what we get endler so I've never had to use W charty much and but it exists if you need it so again we've got an error because of some reason tight the wrong thing that should we see out there we go so we're getting that again the position of I I guess within the ASCII table here but we could we could actually type cast by to a char we could cast it to a char and then we're actually go I but you can store more characters in W charty because it's the size of its bigger than a char then you could in a char so it's sometimes useful I guess if you're dealing with unicode much and stuff like that that's right yeah w CH r T so I'm going to run this and there we go is actually taking up four bytes in a computer's memory so to practice this I'd recommend declaring some boolean variables try setting them to true for 0 and 1 just because the act of typing out will help to fix that in your mind declare some char variables try setting them to numbers as well as characters and see what happens if you put try to put a large number in a charm more than 127 and you'll see what kind of problems you get there you'll get gobbledygook if you go over 127 or you have a number that's less than minus 128 and just declare w char t try outputting it try changing what see our displays with char or with W char T by adding that anti cast to a char or an INT in front of these values and see how that affects the output I'd recommend just just trying all these things and just because it will help to fix it in your memory and we're going to be using no down ball and char later on probably not W char T because it's just not so commonly used so that's it for this tutorial and until next time happy coding you you