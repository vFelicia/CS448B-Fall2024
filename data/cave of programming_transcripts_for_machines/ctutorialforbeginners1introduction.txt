hello this is John from Cave of programming. comom Welcome to C++ for complete beginners um I'm going to teach you C++ the programming language from scratch in this course assuming no knowledge of of programming and uh in most of this course I'm going to be programming in front of your eyes and to get the most out of it you should also uh type in the code and play around with it a little bit after each video in this particular video I'm just going to talk about uh what C++ actually is and then in the next video we we'll get on to looking a bit more at installation although you're going to have to do some Googling uh to find the right stuff to install for your platform and then we'll get on to actually coding stuff uh so C++ it's a programming language that's been around for a long time um and it's going to be around a long time into the future I'm sure uh but um before you start learning C++ there are some reasons why you might not want to learn it and let's take a look at those first although I don't want to discourage you um some people are going to be better off learning a language like Java and I I have a massive free course on Java uh which you can find at cof programming. comom or python for example uh C++ is considered challenging to to learn it's not the easiest programming language to learn although you absolutely can learn it um as a beginner uh it's it's easy to introduce horrible bugs into a C++ program and uh actually both of these uh facts probably have to do with the fact that C++ doesn't protect you from yourself at all um a C++ program just carries out your instructions it doesn't second guess them and try to figure out what you might have done wrong it doesn't try to protect you from yourself it just carries out what you tell it to do uh so when you're programming in C++ you have to be very careful you have to think a lot and um it's very easy to create horrible bugs in there if you're not careful it's even possible to screw up your computer if you do something really really really stupid although that's not normally something you have to to worry about but it is possible uh C++ is um it's often time consuming to write a C++ program um that's that's not necessarily the case but in my experience uh if if you want to get something done it's often quicker to use uh what you might call a slightly higher level language like Java or or python that um kind of does protect you from yourself more and gives you more sort of um facilities that are immediately easy to use so if you want to write like let's say a desktop program you can do it in C++ and it's going to be very fast usually if if you do but uh it's it's not so easy to write desktop programs in C++ there are other languages that that make it easier um it's C++ is not truly platform independent um you often can with a minimal amount of work get a C++ program to to work on different uh platforms like for example a Mac and a Windows computer and so on but um equally often it requires substantial amount of work to get the same program to run on a completely different kind of computer and that contrasts with Java where with with Java there's a whole simulated computer basically running on your own computer and your Java program will then run on that simulated computer and that means um that you can run a Java program quite easily on many different platforms as long as they're you know they're roughly similar like they have big screens and keyboards or whatever um but this is this is not the case with C++ there's no simulate simulated computer that's going to be the same for every uh every different kind of machine uh with a C++ program your C++ program is running directly on your actual computer and for that reason it's not um necessarily so easy to transfer transfer it to a different platform but there of course there are reasons why you might want to learn C++ let's take a look at those so C++ is very very fast uh you can write um programs that are pretty much as fast as they can possibly be if you write good C++ code because as I mentioned there's nothing between the C++ program and your computer it's directly issuing instructions to your computer and that makes it very fast at least if you uh program well and uh by the same token you can also um access all the kind of lowlevel Hardware type facilities of your computer and C++ if you want to and if you understand them and you know how to do it uh C++ will let you do basically anything with your computer that can be done with it uh so because C++ is is fast and it's it's efficient uh and also in terms of memory if if you write it correctly uh as well as in terms of um speed and processing power that means that you can get a lot of processing done in a short time with a C++ program uh so typically a C++ program is going to be much faster than Java or python or something like that again uh with the caveat that you have to write it well in the first place and that means C++ is good for things like highend games where where you're trying to squeeze as as much power as possible out of your computer although of course you have to be aware that um these really glitzy highend games kind of 3D type games uh usually have a team of people working on them it's not so easy to write those things including artists and so on uh C++ uh is good for artificial intelligence where you're again you're trying to do a lot of processing in um in a short amount of time on your computer or for any kind of real time time application where you're having to do a lot of processing and get it done quickly and sharply it's good for that kind of stuff and for that matter if you do write Windows kind of desktop programs in C++ uh usually you can expect them to run very crisply and to be very responsive because um C++ is fast and you can write device drivers in C++ because again you have the uh ability to access your Hardware in C++ uh C++ also pushes you to understand your computer more um a language like Java uh which is running on a a simulated computer in effect a virtual machine uh that runs on your own computer insulates you somewhat from your actual computer there's no such insulation in C++ so when you learn C++ you do usually uh learn more and more about your computer and uh finally learning C++ is a bit of a badge of honor among programmers I mean you'll get guys who say oh C++ why are you bothering with that Java is so much nicer and so on but I think even those guys are mostly secretly impressed if you know C++ uh so um yeah it's it's challenging but when you've learned it you can really feel that you've really learned something um so to get started with C++ or basically two things you need and uh um a lot of the best stuff is free and I'm going to be using free stuff in this course the first thing you need is um well a bunch of software programs that together we collectively call the compiler uh so um you you need to we're going to write C++ programs as text files uh as what we call Source Code files and then we use some software the compiler to turn those text files into a computer program and there's a choice of different compilers the compiler that I'm going to be using uh for these tutorials is uh the G compiler um the the G is actually pronounced in G uh I believe um it's some sort of strange acronym um and uh that compiler is known as GCC or also g++ um GCC was originally designed for creating a language uh for compiling a computer language called C and um later on extensions were added to C to create C++ and then um extensions were built into GCC to create g++ so now they're the same program you use GCC um to compile C++ programs as well as C and just as a side note here um it seems like no one's really sure why C++ is called C++ but uh in George ell's book 1984 um if something's um really good then you say it's plus plus like um I don't know ice cream Plus+ would be really good ice cream and because C++ was built on top of a language called C therefore you have C++ maybe that's the reason I I don't know so um I'm going to be using the g++ compiler and that runs on Unix type systems and I'm using a Mac which is a Unix type system these days if you're using Windows you can use Min GW it's also free and that stands for I think minimal goo for Windows and it's the same compiler just ported to Windows uh there's also visual C++ um that's uh that's very popular um and you probably can follow these tutorials using visual C++ I believe there's a free Express version that lacks some features but you can use that for these tutorials but there are going to be some differences which I I'll try to point out where I'm aware of them as you go along uh but it's if you're using visual C++ it's going to look a little different things are going to be a little different and occasionally the actual syntax of the language um well not the syntax but some of the things that you have to type are going to be a little bit different with visual C++ but I can highly recommend ganu uh the ganu compiler g++ because uh it's it's widely widely used in the industry possibly even more so in visual C+ plus um it's it's it's an industry standard and it's completely free and you can you can absolutely rely on it uh so U that's the compiler that's the software that turns your source code the stuff you you type into a program uh but you're also going to need an IDE which this stands for integrated development environment and that's kind of the equivalent of you know Microsoft Word if you like for computer programming so you'll type your your source code as we as we call it into the IDE and then press a button and that will behind the scenes use your compiler to create the actual computer program and the IDE that I'll be using in these tutorials is the eclipse CDT uh which stands for um C++ development tool chain or something like that I'm not sure uh so and again Eclipse CDT is free um you can also use visual C++ that's an IDE which comes with its own visual C++ compiler on Windows um a very easy option is to use code blocks but I've never known anyone who uses code blocks professionally but it you definitely could uh so that's another as far as I know free IDE that you could use and uh code blocks makes it pretty easy to install um a compiler as well so if if you end up having trouble getting started code blocks is um maybe a good thing to look at on top of that you can use um idees uh which are um somewhat lower level in a way like emac and Vim uh these are kind of um editors that you can use for C++ programming but it's a lot more complicated and some people swear by these things but personally um I'm not so keen on them uh although I've I've used um Vim for a couple of years but I I prefer something that looks more like a nicely sort of colored um thing with buttons and stuff um so I'll be using Eclipse CDT now in the next tutorial we're going to talk more about um installation and things to install unfortunately I can't give you specific instructions because it depends on your choice of compiler and IDE and it depends on your uh platform so I'm using a Mac but maybe you're using Windows or something else or Linux so you'll have to do some Googling probably but I will give you recommendations about what to install and uh kind of point you in the right direction to hopefully get you started so that's it for this tutorial and until next time happy coding