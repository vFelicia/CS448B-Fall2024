hello this is John from Cave of programming. comom in this tutorial in uh C++ 4 complete beginners we're going to take a look at getting input from the user so we've seen that you can declare a string variable like this we can say string text equals hello semicolon and we can output that text by saying see out and text and endler for a new line and to flush the buffer so if we run this now we get hello um you can also get input from the user which of course is is really useful although we don't know enough uh C++ syntax yet to really do much with input from the user but let's see how you you'd actually do it uh so this this CL is um we call it an object and it's a special object for outputting text and this is called the insertion operator these two Chevrons they're actually um performing an operation uh like um a plus sign is also an operator or equals I suppose is an operator and they're um inserting data into this SE out object you can you can think of it like that so it's the uh insertion operator and um and that object is then displaying stuff down here on the console to actually get um text from the user we can use something called C in and the extraction operator so it's sounding very technical but the important thing is just try out what I'm about to show you and your get the hang of it so let's output some text for a start let's say here enter your name for example we'll put a semicolon and a space there inside the string and then let's put um the insertion operator and flush because I don't want there to be a new line at the end of this we'll see how this works in a minute then well let's get rid of this stuff and um I'm going to get the user input into an empty string so I need to declare an empty string to get the user input into that string so if I type string let's call it input and then a semicolon so I'm declaring a string here this is a string variable it's um it's a kind of object for holding user input never mind about what an object is exactly but that's what it is and uh we're not giving it a value we're not saying equals such and such we're just this is called declaring it we're just saying what the type of this variable is it's a string and now we can type c in and instead of um left pointing Chevrons we type two right pointing like diamond brackets Chevrons whatever you like to call them and this is called This is called the extraction operator it's as if we're extracting information from this C in object which represents um user input on the console I'm firing a lot of Ling at you but don't worry about that um so uh what we can do now is put the string here where where we want to put the user input so we've got our string we've created our string and now we're using C in to get user input so let's see how that works and actually before I do before I run it let's use C out let's say C out and then a string you entered colon and then another um insertion operator and input and that's the string that the user is going to enter and then we'll have a new line character cuz that'll look nice at the end of it so we'll run this let's run it and it says down here on the console enter your name I'm going to click in the console enter my name hit return and it says you entered John so we're getting we're getting the input here at this line in this string when the user hits hits return that input is kind of sent into this string you can think of this um in uh extraction operator as kind of sending stuff into this string extracting it from the user input and then we're we're writing out on the console printing in in the lingo we say printing on the console what the user has actually entered down here so that is this this is going to seem quite complicated when you first see it just now but you PR practice it a few times yourself and you will see how it works it's really not so bad when you've done it a few times it's just you need practice of course let's let's try it with an integer as well because we can also do this with integers let's say int value and I won't give it a value I'm just declaring a variable of type integer here that could hold an integer number and then let's say here C in and the extraction operator and uh value so we're expecting an integer value here and let's type above that c out I'll get rid of this blank line up here so I'm trying to keep this program somehow in logical blocks so we have we can have two blocks of stuff here one for the string one for the integer let's say C out um wrong one there we go see out you entered and volue andler except that should go down here what am I doing let's put that down here and let's put a prompt before it let's say enter a number a number okay so now this and this look the same it's just that I'm using an integer with C in instead of and with see out instead of some text so let's try that so it's going to ask me to enter a enter my name um and then it's going to get the name in this string that I entered then it's going to Echo it back to me then it's going to say enter a number and I've declared a number variable here an integer variable and it's going to get that number from the user input and it's going to repeat it back to me so let's try it so I'm going to hit return sorry I'm going to hit run and it says enter your name so I'll click in the console and enter I'll enter something different just for the hell of it Mike and now it says enter a number I'm going to click here this this console is a little bit flaky um it doesn't work quite like it would work if you actually run the program in Windows console or um in a in a terminal on a Unix system or something but it it just about does the trick for testing so I'm going to click here and enter a number that's say 77 hit return and it says you entered 77 um now this this whole system is not really perfect uh what happens if they enter some text instead of a number that'll screw things up a bit so I'm going to write John and instead of entering a number here I'm going to just put some text says you enter zero and there are there are ways of dealing with that and finding out what they actually have entered whether they entered something suitable or not but we haven't progressed to that point where we can really make use of those techniques but we will do in time so for now the thing to do is practice doing this practice getting some user input from the user um numbers and strings and echoing it back and see if you can make it look nice like this so it's saying enter such and such then telling you what you entered and uh you can make use of flush which remember doesn't create a new line character after this so when we run this program says enter your name and we can ENT enter the um the name on the same line here if I'd used endler there then we would have to enter it on the next line it wouldn't look as nice so by carefully using flush and endler in the right places you can make your program um kind of run in a in a way that looks a bit more appealing for the user so have a go at that it's really important that you try it and in the next tutorial I think what we'll do is we'll look at um we'll have an overview probably of the C++ types different primitive types you can use which isn't so interesting but we really need it it's vital knowledge and after that we can get on to looking at more interesting things like uh control structures conditionals and um loops and that kind of thing so join me again next time and until then Happy coding