hello this is John from Cave of program.com in this tutorial we're going to take a look at instance variables um or data members in C++ I'm actually rerecording this video because in the first version I accidentally typed some C++ 11 syntax which is not um fully supported by all compilers at the moment in 2014 uh although if you are interested in C++ um 11 then I have an advanced course on C++ that covers it at Cave of programming. comom so let's uh create a new project here I'll go to file new C++ project I'll select this Hello World um C++ project um I've got actually two computers and one of them has this cross GCC on it but um I don't really know why I don't remember installing it but I'm going to use the default compiler here for my platform let's call this uh let's call it instance maybe data members data members um I've already got a project called that actually so I'll call this data members too okay that was my first version which didn't turn out so well um let's it's it's it's good to make sure that you can compile your project as soon as you've got a hello world thing there uh because occasionally I find Eclipse somehow messes things up so I'm just going to compile this and make sure it does run before I start adding code to it um so this this is a little slow but it it looks good so I'm going to show you a different way of creating a class in this tutorial in the last tutorial we created a simple cat class and I'll show you a bit of a quicker way of doing it in this tutorial so if you rightclick your project you can go to new class uh now um at the top here we've got this name space which we haven't covered yet we'll get on to that later so I'm going to untick that cuz I don't want to use it and we've also got here um it says Constructor and Destructor and we haven't covered those yet either so I'm going to untick those as well and in this class name here I'm going to give it a name I'll call it cat and you can see that this is going to generate C.H and cat. CPP for me so I'll click finish and we've got here here's here's the the header file. H and then we've got an empty class cat we've got this usual um if if not defa defin stuff which just um prevents your header files getting included multiple times in your CPP files we've also got this um cat. CPP which includes C.H so um when the build runs it's going to um it's going to basically in in effect paste C.H behind the scenes into this file because of this include statement so they'll form like one kind of solid file um now the the idea here is that that the the compiler will actually compile the CPP files as separate object files separate. files and then it will link them all together to produce the final program the the fact that we've got the the header files means that we can Define stuff we can Define how our code will be used how the code and the CPP files will be used and we can include those header files wherever we we need to use them so that um uh our um so that the compiler can actually compile our CPP file that includes this without having to look at this that they're only the CPP files are all compiled to object files which are only link together at the end at the final stage to create the program okay so um one thing we need to do in uh in our main kind of file here containing the main function is we need to include our header file so I'm going to underneath the standard includes I've only got one at the moment but before the using any kind of using namespace standards uh any kind of using namespace statements I'm going to include C.H with double quotes here double quotes cuz it's a it's a local header file not a standard one um now I can already go ahead and create an object from that uh from that class so the class is like a a blueprint it's kind of like a plan for creating objects and we can create particular cats using that blueprint um I I'll actually call it gy here just because um uh some people are a bit confused by using variables that have the same name as the class but with a lowercase letter but I personally personally like to do that uh because I'm used to this convention of having uppercase letters for classes lowercase letters for variables um but anyway this this this will work it won't actually do anything it won't output anything but it does work so let's give cat a method so first I go to cat. H and inside these brackets of the class I need to type public and colon to define a public section and we'll see what that does um very shortly and in there I'm going to create the Prototype of a function so let's say void speak and then semicolon so no implementation there just the Prototype just the the bit that specifies the name of the function uh any arguments that it might might take and um the return type then we go to cat. CPP and we provide the implementation so we say void speak this is the same thing again but now we have curly brackets containing code after it and we need to say that this is a member of the cat class so I'm going to type cat colon colon in front of this speak and the auto company is trying to trying to help me there as well and let's put C out in here and meow to make a sort of cat noise and to use C we need to include I stream. um so I I don't think I'm going to need I'm not going to need to use um SE in my header only in this CPP file so in the CPP file I can include IR stream so I'm going to go to the top before um the include cat. H actually it doesn't really matter too much um where you put this include I'll stick it here as long as it's at the top of the file before you try to use things like seal and I'll type hash include angle brackets because it's a a standard header IR stream and then underneath all of the headers I'm going to type using namespace standard which we'll we'll look at later on but that's we just need that to be able to use see out from IR stream now I can save that with a save all button and I can go to um my main uh function again and now I can already call JY doe so Jim is a particular cat object created from the the class blueprint um and we can go speak on it let's just run it see that it works um so there's whoops I mistyped iostream there so let's go to cat. CPP iostream not ieam okay so now it works let's let's run this and we will get meow okay now um the idea behind a class is that you can have not only um functions in it if if we have functions that are part of a class we actually call them methods it's a slightly strange terminology so this speak is a method and the idea behind the class is that we can bundle together methods in other words sub routines with data so if you think about a um if you think about something like a cat any kind of what we call an object in the everyday sense of the word object then um objects like cats they have things that they can do which we represent with functions with methods and they also have a kind of state like they're happy or sad they they weigh a certain amount um they have a certain blood pressure whatever you like basically and we use variables to define the states of our objects so the class is like um a template for objects so we need to specify in here what kind of States this this cat can have what bits of data or associated with the cat um that can have different values in different cats so I'm going to go up here above the public section here um actually I no I'll show you this in a minute what I'll do for the moment is in the public section so underneath the public keyword I'm going to I I can type variables here so I could put for example bull happy so by saying this what I'm saying is that every cat is going to have a Boolean variable every every particular object every separate cat will have its own copy of this Boolean variable so every cat can either be happy equals true or happy equals false either happy or sad now um since this is public I can go to my main function and I can access happy so before I call um speak here I'm going to say Jim do happppy equals true we'll save that and we'll go back to our function and we'll change our function so that it does something uh different depending on whether happy is true or false so we'll go to cat. CPP and in here I'm going to say if happy then we'll output this meow so I need to surround this by curly brackets else let's put here C out and we'll make a sort of distressed anoid cat noise like this and I'm just going to use the auto format there to format that so that's nicely formatted now um if we run our program it's going to say meow as before but if I set happy to false then um then it says uh hopefully so um we can see the idea here is that um whatever variables we Define in our in our class in our header those variables can be accessed in the methods of the class and they can maintain a state for the for the cat so here in in the main function if I created another cat let's call him Bob again I could set I could set bob. happppy equals true and called Bob dope now we've got two cats one uh I refer to with the variable Jim one I refer to with the variable Bob and Jim is um is unhappy and Bob is happy so it's saying meow now what what we usually try to do is we usually try to prevent this happening we don't want people to uh set our um the values of our um class variables our data members uh from outside of the class we want to encapsulate um that kind of functionality we want to encapsulate the variables within the class so that only the the object object themselves can directly access those variables and that means that if we were to change the particular variables that an object like um like this cat has we could have more of these we could have ins doubles whatever we like if we were to change them then we only have to change the code of this class and we're not going to get stuff like this happening outside of the class uh which would necessitate US changing other code as well if we change the variables we want to encap at those variables so they're only used within the class and um and that means that as long as the method names and the prototypes remain the same we can change the variables of the class and we only have to recode the class itself we don't have to worry that someone might have done this um and worry about wrecking their code by changing what instance data we have what variables we have in our class so um to to to arrange that what I can do is I can go to C.H and I can create a new section up here called private and I can move this variable any variables we've defined into the private section like this and that means when we compile it we'll get an error so if I build a project now um we get an error um because it's telling us that we we can't do this we can't access these variables outside of the um outside of the class so let's delete this here let's get rid of those cuz that's not going to work so what where where can we set happy well uh one answer is we could use a Constructor which is a special method that runs when objects are created from your class it runs separately for each object we haven't looked at Constructors yet so um so we won't do that here in C++ 11 we can actually set default values here so this would be the initial value of this variable for all objects um that are created from this class but uh we're sticking to C++ 98 syntax in this tutorial because C++ is not fully supported by all compilers and often with compilers that do support C++ 11 not here in 2014 you still have to uh specifically enable C++ 11 support so we won't do that because we can't do it in C++ 98 what we can do is give give this a method give cat another method that can set the value of happy so um let's give it a method like um we'll say void um let's pass in a value for happy here so let's say void um in fact no I'll do something even simpler here I'm going to say void make happy and we'll just put the um prototype for that here and we'll also have void make s like that let's Implement those functions so I'll go to cat. CPP and I'll say here void cat callon colum make happy and we'll say in in there we can access any variables that we've defined up here so we can say happy equals true and let's also add void cat make sad and here we're going to say happy equals false so now we can run these methods for our objects to make the cat happy or sad so we'll go to our main method here and after we create the object JY and before we call speak we'll say jim. make happy and uh for Bob we'll say Bob doake sad like that so now if we run this it looks similar to what we had before Jim is happy so says meow and Bob is unhappy so says s um now these these instance variables are not automatically initialized to anything so um this will have a value so if if we didn't call make happy or make sad and we called speak we get um basically a random value for this not a truly random value but we just get whatever happens to be in the memory that this happens to use so you have to initialize variables before you use them and a common thing to do since you don't want to force the user to have to call some method before they can use other methods that's very confusing normally you use Constructors in C++ 98 to initialize these variables and we'll get on to that later so it's worth having a go at this of course um create your own uh cat or whatever you like create any kind of class that you like try creating objects from it give it a method and then give it some um some variables which you then use in your methods in some kind of a way and you'll also need um if you stick to the syntax that we've seen so far you'll also need to create methods that can set the values of those variables to whatever you like so you can use inss um use booleans use doubles or whatever although remember that it's not good to compare doubles with equals equals because um their values are not stored precisely so if you do use doubles you want to really use um less than or greater than if you compare them in an if but anyway uh well worth trying so that's it for this tutorial until next time happy coding