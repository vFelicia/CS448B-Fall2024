hello this is John from Cave of programming. comom in this tutorial we're going to take a look at Nam spaces in C++ namespaces are a way of um avoiding conflicts between classes or even variables uh Global variables that have the same name we'll take a look at how that works here so I've got my Hello World project set up here I'm going to right click it and go to new class and uh I won't put this in the Nam space let's get rid of this this one I typed earlier let's create it without a name space and I'm going to create a class called cat so um oh yeah I should have typed up here actually first then it will fill in header and source for me but anyway let's create that class and uh I'll just give it one method just to kind of have it do something so let's say void speak here and of course the implementation goes in the CPP file so we can say void cat cat colum colum speak and let's have just like a see out in there meow which is what cats uh usually say although if you listen to my sister they have entire conversations in English but I I disagree with her there let's include the um let's include the uh header include iio stream and we've already seen uh examples of using a namespace because after including I stream I think in most modern C++ uh implementations you now have to type using name space standard name spaces were quite a late addition to C++ so it's possible you could have a compiler that doesn't require this but um in all the C++ compilers I've seen in the past few years you now have to do this after including I stream I stream so that that should work and in our um main function here we can now include the cat header let's say include cat. H and now we can say cat cat and cat. spe so we've seen all this before let's just check that that is working because I like to make sure before I proceed any further um because I make mistakes so easily um I should have put double quotes here on some compilers it won't make any difference uh on some compilers um angle brackets and double quotes are the same for your includes but on others like apparently this one the double quotes means a local include like this and the angle brackets as we've seen before means an include from a standard location let's try that again hopefully this will work and I'll run it there we go so it says meow um now what if you want to have another class with the same name that might occur for example because uh let's say you might have your own implementation of string which already exists in the standard libraries or uh you might um you might want to implement something that already exists in include files that you've already got in your project so whatever the reason sometimes you get a clash between Class names and name spaces will help you avoid that so let's see how that works I'm going to rightclick my project and let's create a new let's create a new class and I'm going to call it cat again but I'm going to put it in a different file so that we don't at least we don't have a clash with the file names in because I'm putting all my um files in one folder here which you don't have to do but I am doing let's call this animals. H and the source file CPP can be animals. CPP but again it's a class called cat and I'm going to it says class already exists so it won't even let me Define it but we can get around that by using a namespace uh your IDE will probably provide you with a way of doing this but we're also going to look at typing out the namespace by hand so the fact that I've already got a class called CAP means I can't have another one but what if I do want one what if I just happen to include some stuff that has a C class in it and I want another one I want my own one let's tick namespace here and let's type in here well we we need to give our name space a name and it can be what you want um I'm going to just give it my initials here so like if you're just creating a load of classes for your own use you're not going to distribute them then uh giving your name space your own name or um like uh your initials or something makes perfect sense if you're going to distribute your classes you might want to give it some better name space like it could be the name of a company or it could be um uh something that describes what's in the namespace like you could call it Graphics or something like that but the things it mustn't have any spaces in it and uh I like to follow the convention that it's going to be lowercase and usually just one word but if there's multiple words I'll capitalize the first letter of each subsequent word like we do with variables so let's put this in a names space called jwp click finish there and we can see what's actually happened is my new cat class here it's got in the header file here we've got namespace keyword then the name that we gave to the namespace and curly brackets which entirely enclos the cat the the cat entirely enclos the class and usually between curly brackets you indent stuff that goes between them but because then everything's going to be in a name space and there's only going to be one name space in the file usually although you can have multiple in this case the auto format has not indented the stuff between these curly brackets and that's purely uh just because otherwise everything in the file would be indented if we look at the implementation we've got the same thing here so animals. CPP again name space and the name and curly brackets which enclose everything in the file we can put our other cat in a name space as well uh let's first let's first go to this cat that I just defined give that a speak method as well let's say um void speak again and in animals. CPP I'm going to say here void cat call and call and speak let's give this let's make this do something different to the other speak in the other cat class I'm just going to make it say like an aggressive cat noise and we also need to include up here somewhere we need to include I stream and we need using name space standard which is an example of using a nam space so far we've just been typing without going into what it actually is um but we'll get on to that in just a second so now we've got two cat objects if um let's yeah let's put this cat in a namespace so in cat. h I'm also going to put this in a namespace so um if we go back to our main project I think this still compiles let's just run it make sure so this is still working but what I'm going to do is I'm going to go to C.H and around the class here not around these preprocessor directives we want to leave those alone but around the class and any other classes that are defined in this file usually you have one class in a header file and the implementation for one class in a CPP file but you can Define lots of classes in a header file it's possible and you do see it um so whatever you define in this headit file whatever you want to be in the namespace you can surround with name space let's put it in a name space called I've got one called jwp let's call this um I don't know let's call it cats so just just for a silly example here and I'm going to close the namespace there and we'll have the name the same Nam space also needs to be around the implementation so around the implementation here not around includes again this is a preprocessed directive uh we've got two of them here and we don't want to put it around this using namespace standard but around the implementation I'm going to put um this namespace declaration here let's save all that now if I try to compile the program we're going to get um an error so if I do build these little warning icons will turn into errors that's because to use this cat now we have to say what namespace we want to use um what namespace we want to use like what Nam space do we get this cat from uh so to do that I've got two namespaces remember now namespace cats with a cat class in it and namespace jwp with another cat class in it you can have whatever you want in a namespace but I'm I'm giving these classes the same names just just to underline the fact that Nam spaces are designed to avoid conflicts between identically named classes but that doesn't that of course doesn't mean that you've got to have identically named Cass classes in different Nam spaces that will be crazy it's just that it can happen and namespaces help sort that out so let's say um let's say we're going to use the cat's namespace here then we can say using at the top of the program using namespace cats semicolon and now let's try to build this project hopefully it will work so the error goes away and if we run this it says meow our other name space is called jwp my initials so let's change this to using space j namespace jwp and let's run this and now whoops got some sort of error there let's not run it um let's see what the problem is here so it says um error expected namespace name oh yeah um well I haven't included the header file so uh without the header file it doesn't know the namespace exists so let's also include here let's include the header file in which we Define that namespace which is animals. H so let's put that in animals. h now we should be good to go let's run it and it says because this time it's getting the cut class from the jwp namespace instead of the cat's namespace so two identically named classes in different namespaces and we can select which one we want by saying which namespace we want up here what would we do if um if we want to use both classes which again could occur because let's say you have your own implementation of string but you also use the string from the standard namespace in your program so you want to differentiate between the two instead of or or also in addition to if you prefer these use using namespace statements you can say you can do stuff like this we can say um jwp cat cat 2 and let's say cat. speake or if we want the cat from the other namespace sorry we've got to have a double colon there actually double the name space name followed by a double colon and then the class or we could say um cats colon colon cat cat 3 let's say and Cat 3 dope also I meant to make this cat 2 Dope okay so um besides importing all the classes in a namespace using using a using statement you can also explicitly pick out classes from particular namespaces using this kind of syntax the namespace name followed by a double column let's run this check it works so we've got coming from this cat and then the jwp namespace cat also says so that's this one because we say using namespace jwp up here and meow is is coming from this because that's the cat from the cat's name space different object so if we've got a using statement in here and you use your class without any qualification it's going to pick up the class from uh whatever you specified in or using namespace but if you don't have that um then you need to pick out your classes using this syntax here so like if if I didn't have this in here now only our first C is going to give us an error because here we haven't specified a namespace and uh C++ doesn't know what default to use CU we haven't said using namespace such and such here let's put that back in uh you can Define very in your namespace if you want we haven't really looked at Global variables actually but um in fact I'm not sure that this is really a good place to look at it here let's take a look at a constant because that's a bit simpler so in cat. h we could have a global constant like const um let's say cat I don't know cat name equals uh Freddy this is a ridiculous example let's say con string cat name equals Freddy this is a ridiculous example of a constant but just to illustrate the point and we we're also going to need this we're also going to need to use um IR stream in here but actually what we could do is go to cat. CPP and if we cut this out here and put it in C.H below the defines here then that's good for for the string in here and it's also good for SE out in here because remember when a program is compiled C.H is going to be literally included in this file in a copy of it before it's compiled so it doesn't matter whether we put um include I stream up here in the CPP or in the corresponding Ed file which the CPP includes let's try that and um I need the semicolon there whoops I'm also going to declare another constant um let's give it the same name um just cuz we can in animals. h let's put a constant in here as well and let's call this titles and again um I'll take the IR stream from animals. CPP put it at animals. H and we need there using namespace standard as well so I think that I think that all looks good let's save everything and try to run it so it builds we're fine now in our our main file here we could refer to the to these constants via their name spaces so we could say um what I call it cat name we could say uh jwp colon colon cat name endler and we can also say of course if we want um animals. cat name that's our other Nam space I think we've got J no we've got jwp and cats getting confused myself those are our two name spaces yeah okay and if we refer to cat name without any namespace in here well because we've got a using namespace jwp if we don't specify the namespace it's going to default to this let's run this and we can see that we've got titles frdy and the default is titles because of this okay that's that's it for this tutorial uh so to practice this um I would recommend got got errors down here which is a bit annoying but I don't think they're real cuz it actually builds without errors yeah that it's just Eclipse being weird okay so um to practice this um I'd recommend just doing what I've done there um you don't have to Define classes of the same name because um I just did that to demonstrate that name spaces avoid collisions but create let's say two classes put one in one name space and the other in in another name space and then try to do two different ways of referring to the namespace in your main function try using and try try this kind of syntax as well with a double column and remember the to define the namespace it is really simple you just need name space such and such and curly brackets surrounding your class definition and also your class implementation so I hope you'll have a good at that we're almost at the point now where we can start putting together like an example complete program uh the program that I have in mind is not going to use everything that we've seen but it's going to use uh a first selection of everything but we've still got some more stuff to cover before we get to that that point um so we'll carry on for a few more videos before we get into trying to create an actual program but we will get on to that you know an actual program that does something we will get on to that in time so until next time happy coding