this is john from cave of programming accom in this tutorial we're gonna refactor this basic STL program a bit and we're going to introduce a screen object that's gonna encapsulate some of this code I finally figured out what yellow is in red green and blue I really can't believe I actually forgot that but apparently is red and green combined if I can get this to actually run oh yeah I need to stop Eclipse being full screen here it's yellow I really I really don't know how I managed to forget that but anyway so in a moment we've put everything in one main function and I'd recommend you do that to get a demo program working that just demonstrates the basic things that you need to do with your program things that that you're not sure if you can actually get to work with your particular API on your system like pixel access or like creating us making a sound or whatever it is if there's anything you're not sure that your program is actually going to be able to do on your computer then test it by following a tutorial types to file yourself and get a main function working we're just some coding in a test the principle but now that we've done that we don't want to keep adding code to it because it would eventually by the time we finished the program be really hard to understand what's going on we'd have a huge amount in the main function you could split it up into multiple functions which is kind of the old C style C is the language C++ was based on and it doesn't have classes and objects but we're going to use an object here because after all this is C++ and objects are a nicer way of organizing your code than functions or at least many of us think so so let's rightclick this project here well I should just explain actually and first if we just look at this code it's basically doing three things there are three things that are really important anyway at the moment there's the setup of STL which is quite a lot of code there's the game loop here and then there's tearing down STL we've also got some drawing code here as well so it one kind of candidate for parceling this into a into a class will be we could have a class that there's a setup and a teardown of STL and we could then think about where to put the other bits of code that don't quite fit into that idea but we could have some kind of class which you could call STL or something but to avoid confusion I'm going to call it screen because it's basically working with graphics and we're going to put the setup and teardown code in that and later on we'll think about moving all the code into there as well and for a moment I'm just going to concentrate on getting this into it into a class and later on we'll think about how to arrange bits like like this code for example so let's rightclick the project here and go to new class and I'll create a class called screen and I'll put it in a package called cave of programming you can call the package whatever you want as long as it's not spaces in it and I'll click finish and here's our our class files the header and the CPP file you'll notice that this STL api that i've used just uses functions not at least this version anyway it doesn't use classes and they prefix the functions with STL underscore and that's because you want to avoid that you want to avoid name collisions your your end user the end user of STL which is us in this case might have another function court for example in it or create window or whatever so you don't want that name to come to conflict with the STL functions and for that reason the Craters of STL have prefix these functions with STL underscore it used to be common and perhaps still is in c++ to prefix the names of classes in the same way so you could have a class called c window or something and a prefix c is there just to disambiguate it from window which would otherwise be very very common name for a class that's not really necessary anymore now we've got namespaces namespaces allow us to avoid name collisions in a more elegant way so we can happily call a class window or screen knowing that our namespace will protect us from name collisions because we can select what namespace we use classes from so the first thing I'm going to do is I'm gonna I'm going to take out things like render a texture window and buffer in here and make them make them instance variables in screen door age so let's go ahead and do that so I could I could just copy this actually so that lets let's actually do it from the top I'm gonna get a steal window in here go to screen die so I'll just copy that I'm gonna create a private section here private and paste in that and we also want we also want the renderer sort of got a window the renderer we've got the texture and we've also got this buffer down here which I'm also gonna put into screen because it's pretty closely related to the other stuff that's being done here now a convention that a lot of people follow and that I'll follow as well is that if you have member variables you often prefix them with met and underscore just to make it clear that they are instance variables and not local variables so let let's do that as well I think I think that's that's all good we'll also take the screen width and height constants here and I'm gonna make those static constants public static constants in the screen class public because we might need to refer to them elsewhere static because because we only want one of them for the whole screen class we don't need different values for each different screen object and is there's no problem accessing constants really from for outside your class you can make constants public if it's necessary to do so and here I think we're gonna have to refer to screen width and screen height quite possibly outside of the screen class so will mainland public static constants here let's give screen some some methods so I'm gonna give it a constructor I'm going to give it a method called init which is going to return ball it's going to return true or false false if it fails truth it succeeds we're going to give it avoid close which is going to do the the kind of deallocation code that the closed down code and I'll also give it a method pool process events as well because we can put the event processing into this class as well so it kind of looks like magic and the way I'm just producing these at the moment but I thought about this quite a bit I tried a few different things out and this is a solution I settled on and you'll see how this works as I go along so let's copy these because we need to create the method implementations in the namespacing screen dot cpp here we need to prefix them all with screen colon colon to say what class they belong to that goes right before the method name and we need to get rid of this semicolon and put in the brackets that enclose the implementation so let's just copy those paste them into the right place and finally we'll use auto format to format that there we go so for the constructor I'm not going to make the constructor do the initialization because we can't return a value from the constructor to say whether it succeeded or not we could we could constructor could throw an exception but we haven't looked at exceptions in this course I'm going to save that for my next course intermediate course in C++ so we'll just have this init method that can return true or false to say where it succeeded or not but we will have the constructor initialize the instance variables let's copy them and for a minute I'll just paste them into a random space here because I need to get rid of all these types you'll see what I'm doing in a second but I'm just trying to efficiently edit these and to put them in the constructor initialization list I'm gonna initialize each of them to null and then we need to follow each with a comma so I'll do that with each of them I said the last one doesn't need a comma and then let's cut those so we'll put a colon after the closing round bracket at the constructor to form the initialization list here and paste them in and use the format and if you've got it right it should format it nicely we're getting an error here saying null is not defined let's go to screen dot age and that's because we need to include the SDL by age and if I include SDL dot eighteen screened age then it's because screen dot cpp includes screen dot age that's also going to include STL age in screen dot cpp as well so let's include up here let's include in screen door age will include STL by age and then hopefully yeah those some of those errors will go away so for remit let's put in return true we're gonna put the initialization code in a minute for process events that's part of support return false just so they will compile for a moment and close doesn't need to include anything there so now we can go back to main dot cpp look at all our initialization code and take it all out and I'll also take this stuff that sets the pixel colors just for the moment which isn't gonna stay in the init function but I'll put it in there for a moment because my object for the moment is just to get this comp to compile in a more objectoriented form and we can think about details afterwards let's cut all this and paste it into screen dot let's put it into screen darn it let's this up this render code in there as well for the moment that's also going to move later on but we're just trying to transfer everything in the simplest way possible to our screen class at the moment I just format that now if I say that we should get lots of errors because things like window are not defined we haven't included iostream so see how is not defined I'm going to get rid of all the C outs and instead of returning an error code return false from in it so that we can know that in there has not succeeded if it doesn't succeed then you want information more information on why remember you can always use STL guitarra to get that information I see as you've seen in a previous tutorial so let's get rid of let's change this defaults get rid of this see out this is false if it fails we return false and here's another see out this would have to return false and then finally if everything succeeds we would return true at the end so the next thing we need to do is change things like window 2m underscore window because we name those there and we need to we need to get rid of the variable declarations these local variable declarations one really common error in C++ or Java or lots of programming languages for that matter is that you create an instance variable like this one and then you try to initialize that in a constructor or I mean it's method and by accident you redefine it so you do something like this and this then masks the instance variable and doesn't do what you expected to do so when you try to use the instance variable later it doesn't work so you have to watch out for that don't accidentally read eclair instance variables as local variables we need to get rid of this type definition and just use the instance variable there so let's work through this adding the M underscore prefixes getting rid of the type declarations here so I've got her a window there here's a here's a renderer this texture needs to change to an underscore so we need to destroy the window there here's the texture he's the renderer again here's the window and now we here for update texture we've got M underscore texture we've got clear the renderer for the render copy we've got renderer and texture and underscore and here we present the renter and actually draw it on the screen so that that looks pretty good that might compile in itself but we've got an error in main dot CPP so we've got to do something about this teardown code now this D initialization code I think there's a word I'm searching for to describe you know closing everything down but for some reason it's not coming to my mind but anyway we need to cut this stuff here and put it into our screen dot close method and we need to change these so they all also have that ml underscore prefixes and they refer to our instance variables I'll just do it format on that and save that now I think this would actually compile let's put screen object in the air and let's say screen screen and let's say if screen dot in it equals false or we could say if not screening it C out aerial initializing STL that's not a pretty message for the user but as long as it's only something we're developing on our own machines and it's fine at least it tells us what's happening we need to include the screened a to the top of main dot CPP so we can use the screen class remember you need double quotes not angle brackets because it's a local include it's not in a standard directory say that hopefully these areas will go away very shortly and down here after the game loop we need screen dot close now let's save everything and see if it works I'll go to build project yes and another thing I've forgotten is I forgot to say what namespace I'm using here because we put the screen in the cave of programming namespace I'm not going to prefix screen with that namespace I could do but I don't need to because there's I don't think there's gonna be there's not going to be any other screen class in our program so I can just say yeah using name space cave of programming let's try that so build this hopefully the errors will go away seems to have built without any errors which is good let's run it and see if it works yes so it works that's really good and we could also put this event code somewhere into screen now I thought about putting all of this loop here while not quitting somewhere into screen but that's not really good because in this loop I want to draw particles and I I don't want my particles tied to my screen stuff what I want to do is create a screen class but I can reuse in other programs pot programs that have nothing to do with particles so I don't put the whole loop into screen but this bit is it's just the bit that basically closes the screen if you click the cross on the corner of it so why not put this into the screen class as well let's let's cut this and go to screen dot cpp and inprocess events I'm going to paste that in format that and what I'll do is instead of st. quit equals true if we get that quit e then I'll return false from the function otherwise I'll return true so now we've got this loop which checks all the events and if any of them are type STL query returns false from this otherwise after after finishing checking all the events it will return true so let's go back to main that CP peeks we need this declaration of STL event in here I need to put that in there as well so now all we have to do is every time we go around our loop we call screen dart process events and we say that if this is if not screen process events or if screen process events is equal to false it doesn't matter that means that the quit van was received and that means that we can quit the loop so we can just say break now which will break this outer loop in other words it will stop it running and now we don't even need this quick thing really we can just say while true have an infinite loop and we'll use break to get out of the loop if process events tells us that the stl quit event has been received I'm going through this quite quickly but I made the code available for you to check on cave or programming comm or wherever you're watching this tutorial except on YouTube where I can't attach files to YouTube but everywhere else I'll ultimately attach the code to the lecture where possible let's run this now and see that it works and it does work so after this work we're gonna need to start thinking about rendering a bit more clearly how we're going to do the drawing how we're going to manage that exactly we've got another a few more puzzles to solve as well like how we're going to deal with colors and so on but I leave it there for this tutorial so until next time happy coding you you