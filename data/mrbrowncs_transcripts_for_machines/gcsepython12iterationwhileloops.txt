hello having looked at four loops when are going to continue straight on and look at pythons second iteration construct which is a while loop now we can look at wire loops so in comparison to four loops which I count controlled iteration or socalled definite eration while loops are condition controlled loops also called indefinite iteration so we can't generally speaking look at a while loop and know exactly how many times it's going to loop is going to determine by a condition not by some counter but generally speaking we can also just convert for loops into while loops part the trick is just knowing when to use which and or depend on whether you have a condition or not because we know with if statements if we have we follow an if statement with a we have a condition in an if statement we follow the if keyword with a condition and if this is true we're going to do something if this is not true we're not going to do that something same idea with a while loop so we fall over keyword while with a condition so if I do while true in this case under and print hello we're going to get a scary thing because it's just going to keep looping infinitely so we don't want infinite loops and programing infinite loops are not good because they're going to cause issues at some point sadly if I keep scrolling on my script mode it's not to go anywhere it's just saying hello over and over and over again if I clear this and try and cancel this will stop up here because we don't want to ruin replicas servers or my internet speed because infant loops are not good because we clearly they're not going to be infinite they're going to end at some point when your computer turns off or I just interrupted for program fair but vacant calls were on some errors if memory overloads because maybe you've got a counter maybe you've got count equal zero which you are initializing outside of a loop because that's a global variable and if I do count plus equals one here and make sure I print out count as well it's going to keep counting up and up and the numbers get bigger and bigger and it's going to have a big effect on your memory and so on so you can play around with it it's not going to cause any damage really but we don't infinite loop so we're going to make sure we make this condition come forth at some point if we ever want to stop the loop so indefinite doesn't mean infinite definite just means we don't know how many times it's going to loop but it will stop at some point so maybe if I change this true into a proper condition and do something like wild count naught equals 10 so whenever count is not 10 it's going to leave the miss case but soon as count does become 10 it's going to stop so you can see it counts 1 to 10 because it became 10 and so stopped this is doing the same thing as a for loop right could alternatively have done for I in range or yes to do I because you've already got count for I in range 0 through to 11 it's doing the exact same thing if I just print out count again so that's what I mean about you can often just convert or rewrite a wild leap with a for loop except I've done that wrong if I do four I print I you can generally write a for loop as a while loop but the power of wire loops comes when we're not really dealing with numbers necessarily so maybe we have some user input let's maybe do an authentication a basic authentication program authentication is making sure that someone is who they say they are so the most common example of authentication is a password I really like doing password examples for some reason in reality as you're writing a password program is a little harder because you can't just save passwords randomly so if we have maybe we have set a password and we are getting the user to check to see if their password is that is correct so if we do maybe a variable called guess if they're trying to guess the password maybe when I'm doing input builtin function and I do enter your password like that now I want to see if this password is correct or not correct so far use something like if guess equals equals password and then that's fine attitude print your a and then we can begin the rest of our program maybe the service we've done before can also do elsevier password wrong already but lower case if we get the password wrong we can type wrong password but the issue is with just selection on its own well that's great it works one time if I do to the ABC XYZ presenter wrong password frag amends that's that's it that's not really useful it's not really how it works generally speaking you know if you get your password wrong they give you at least a couple of tries to get it right but let's say our program is generous and gives the user an infinite number of guesses we've cost Kwan we can't program an infinite number of guesses because we need an infinite number of if statements and inputs and have just become absolutely ridiculous so instead we can just change this if into a while loop so already we have a condition while guess equals equals password in this case we want it to be not equal to password because every time they guess and it's not equal to our password we're going to get them to guess again so we now want to copy this input statement and we could just maybe slightly edit it and say wrong try again maybe like that and now we can try this and we want to get rid of else because else no longer it doesn't exist on its own and then afterwards we can once we get it right it's just gonna skip this loop so we can print correct and then we can begin our program so if I run this you should now work as we want it to so it's gonna keep asking once we get it wrong so if I get it wrong on my first try long try going perfect I can try again again I can try as many times as I want to but since I get it right if I type in ABC you should just get correct and we can move on and compete for program hopefully this example makes clear why while loops are called renditions of control loops or also indefinite duration because we are really after behest of our condition especially once we are having some user input involved we don't know when we just look at our loop how many times this is going to execute whereas we're before loop we do have some idea of how many times we know it's going to execute for a definite number of times of a while loop it's more indepth we don't know for sure in our case the user could have got this wrong a million times they could have got it right first try we don't really know how many times it's going to loop until it actually happens I just want to end by showing you a few more things which are not super common but still are worth knowing I did say only we had to add an else left over below this while from something else and I got rid of it and I said you can't have else on e on your own on its own which you can't you can't just have an else random me in your program it doesn't make any sense actually we can follow a a while loop or a for loop with an else statement it's not only for if statements of votes vastly it's used most often for if statements when we have else following a while loop it executes once we have our condition being broken so once our condition becomes false but wait excuse so I could equally have put that print correct in an else statement doesn't really matter hugely if I get it correct it's now gonna print correct Wiese because I have it both in US and also in my main body of my code if we get rid of it and replace this with a for loop just a real quick one a for I in range 0 to 5 or just a 5man case let's get rid of it in but quickly I find out as prints I like we were doing in the last video and if I add on an elf's statement after this this what happens if I print finished what happens when we have else after four is else will get executed the body of else inside the indented block when the loop finishes so if we one of us will get one two four and then finished a keyword which is very rare but sounds like it's more useful than it is is pass so passed is reserved so you can't call a variable pass and what passed ours is effectively nothing it literally just passed it so this is quite useful as a placeholder maybe I couldn't really think what to write in this for loop but if I try and run this I'm going to get an error because it expects it says an indented block or how much they've got an indent here but I've just got nothing no code to run so pass is good because it can kind of be a placeholder until you have code you actually want because all it does is read passing so we go straight to finished in that case even if it has already looped four times if you prefer keywords would actually do something we can use another one so continue is used to so far maybe do something like if if maybe you really don't like for number two we could say if I equals equals two we're just going to continue and we're not going to print it out because if I now print print I and run this code what's going to happen is we're going to get zero one but not two so it is we are setting I to two at some point because we have it in this range but we are just concerns we see is two we are continuing and what continue does is skip to the end of this current loop so just going straight back to the top and loops again so anything below continue we'll get left out or face erosion and finally another keyword is break so you can use break to get out of the loop if you really want an emergency exit you can get out of it maybe you know you've got an option to exit your program you may have an option to exit and you can use break so here I've said when I is to I'm going to break so once we get to I being too we end our loop and that's it so break is quite and continuing as well but they're not brilliant to use if I'm honest I certainly rarely rarely use them usually you are using either break or continue when you have written a not particularly brilliant loop you know if you're planning wasn't very good and you've got a really complex program you may be forced to use something like break or continue pass is not really used unless you're just wanting a placeholder but break and continue on recommend using but if you really need to they are there to be used I guess fullest right now in question one just have a look at this tiny bit of code I wrote it's an example which I've watched I see fairly often of badly written loop code trying to figure out what some of the issues with this there are two arguably three issues with this and then how would you fix them to do what is trying to do and finally question two is trying to program a classic problem which is generating Fibonacci numbers which add up for previous two numbers starting with zero so pause the video and try these three parts are to a B and C just increasing it in doing question you can use both for loops and while loops Java go to and they'll be a sample solution in the description