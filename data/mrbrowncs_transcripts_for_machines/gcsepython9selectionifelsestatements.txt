now let's look at how we can do selection in Python which uses ifelse statements we can't really make any useful program without selection in some capacity so it's good we're covering it now one screen now is our program from the last video nothing too groundbreaking and really it would just sorts of testing things out regarding string handling so far all we've done including in this program is make use of a sequence of program code a sequence is where we are just the right instructions and the instructions are followed one by one by one so the program the interpreter which is running this code when I click run it's just working its way down my page doing one line at a time so it's running line one running line two nothing on it running line three why am i four nothing on it and so on so it's doing it line by line this is fine but we're not really behaving in a way which is natural in terms of most algorithms most human behavior we're not just mindlessly following a sequence like it kind of is here instead we are making decisions and changing what we're doing based on certain conditions which is all which is what selection is all about so you have sequence as one main programming concept or Constructors would say we have selection and finally we have iteration which we'll look at in the future video we'll look at selection just today so in selection we want to change what we are doing change our sequence based on some decision based on some condition which will alter the flow of our program the flow is how the computer makes its way through our code right now in sequence is just doing it line by line we want it to be a little bit more branching okay I figured to demonstrate this we could do a little basic game and first of all here I'm asking a user are they ready that's how some games might begin and we can use this either yes or no to determine our flow of our programs so we can use selection here so the way selection works and Python is we have if statements if statements are how we do selection that's it really it's nice and simple so you're right if lower case it'll go different color if you've got a ID which supports syntax highlighting like I do on a rep lip you then follow if with a condition and the condition is like your decision and it will use for various operations we looked at in previous videos so for example if I want to see if ready is yes I'm going to use for comparison operator which has two equal sign to see two equal signs to see if ready matches yes if it does that's great we can start the game and you follow this condition with a colon this is just how the syntax is for selection you don't press ENTER and this is where you're going to write the instructions which will execute if this condition is true if this condition is is false this instruction and writing could say great for the time being this will never get executed if ready does not equal force it does not equal yes so if ready is no print great never ever gets done so we can start to determine our flow of execution based on certain conditions and you'll notice that without me even doing it I just pressed enter repla has added a little what we call an indent at the start of this line so we've got a tiny bit of a white space so if a white space is just any gap so with white space here after ready after operator that's white space just a any thing which looks empty of a character even if it has got a character just an empty space and this is really important we can't just imagine you can't get rid of this indent because if fight well first of all let's just see if it works so I put in the back of my top so you'd run this are you ready by typing yes press ENTER I get great that's perfect if I typed in anything else just know from time being it'll do nothing because this print is never ever looked at it'll just skip this because the condition was false anyway what was I saying if we get rid off is indent we can try this again so are you ready I don't even get that because we have an indentation error we have an issue with our indentation expected an indented block following this condition it expects to see an indent afterwards because the way Python knows what belongs to what statement is with this white space in other languages for white space does not matter in Python it really does matter and it's also I think what a good thing because it makes our code look a lot nicer looks a lot more organized once we start to have loads of different selection blocks anyway we need to keep this annotation nice and consistent most ideas we'll add it for you anyway but you can decide how a large face indentation is if you really want to must be consistent you can't suddenly change it Midway for your program so it's best just to stick to what the default is and usually that will just be the tab on your keyboard if I get rid of my comments here just to clean it up a little bit and if I now on my keyboard press backspace to go back to the default indentation I can now add a second condition or really I just want to add else so else is very to cover every other case so if you don't have any particular condition else is good because it covers all our options so if I press ENTER now and type okay like that I can now type in anything I want to here and it's gonna give me okay so only yes is going to match a condition here everything else is going to come under okay but yes still works so this is good for any combat any value we don't necessarily expect in a condition we can't have a if statement for every single thing oops we can't have an if statement for every single thing but we can add more conditions and we can do that by just below if and above else again making sure our indentation is back to normal but going backwards I'll talk about what happens if we don't do variant a Schnoor get rid of your notation we can now do elsif which we shortened to Elif so elsif or Elif is just another condition below our first condition so now I can do man already equals e cause I can never do ready equals equal to no and this one we could just say okay and then wait Maeva obviously if we're doing a proper program we build this up a bit so we can add as many conditions as we want to and we should do it reverse if or Elif because we could also just get rid of this and do if unless is rot missin see if it works first of all so if I type in no does not work because I haven't got two equal signs here easily done but if I now type in no it should work hopefully ok waiting that's great so we're matching our second condition here on line 6 and so executing only the code inside this again it's completely ignoring line five and nine nine and line eight as well because it can ignore that because it's matching a condition ready in sequence every single line is executed in selection only the lines which fall under a true condition are executed one I think common mistake which isn't always doesn't always work like a mistake is instead of having Elif just having if and motive statements which really belong to the same block if I run bits at work in the same way and he's initially I look like it works the same way in reality when we have multiple if statements as opposed to an Elif as well beyond our initial if statement it's checking every single statement and it acts as if the conditions are not mutually exclusive here we really want one or the other we don't want both to be looked at once we realize that actually this if is matches our condition we can then print great but then if we have another if stem and it's checking this as well which not only takes time but cajon aliy if this condition also matches somehow because you've changed it in your first if block it might affect your future chain of logic so really if we are sort of if we belong into the same block of selection the same selection block we should use an if eel ifelse ladder because otherwise the flow can get a little bit confusing and maybe don't doesn't always work with else as well because else is for any other condition it needs to know which block it belongs to and as I said as many lives as we want so we could do ready equals don't know and then code on and then print inter yes so I know and so on so we have as many lives as you want make sure you use eel if after a first if not just loads of ifs below it and you can see once we add more statements for the indentation does help separate four bodies if you if these were all on the same indentation level not only would Python not know what they belong to but also it becomes a little bit harder to distinguish between each statement and within one of these bodies we can also add further if statements so if we've got if ready equals yes we can proceed with a game inside this if statement so if I now I don't know do print we could do capital of UK equals negative inputs what is capital city of the UK and below and can do if you want to see if the user is correct if capital UK equals equals at London then we can do something maybe we have a points variable at the top we have initialized to be points equals 0 we could set this make sure going back to initation set this to be points plus equals 1 you've got to if you're using this augmented operator to make sure you have initialized it already that's fine else we could say incorrect like that so Alice covers every single combination of user could type in anything at that point and we can't have a actual condition for every single thing that going to type so else covers all other bases the reason why I have initialized for points outside of my F statement is not crucial right now but is relevant for future videos when we talk about scope of variables because really the notation here is is allowing Python to define or for scope is but we'll come back to that in a future video if this is a knockout game we could have another if statement within this what we call a nested if statement so a nested statement is within another statement so this if is nested within this wider if over here and so we could do another if stones we could do maths answer and we could do input what is 25 mod 5 would be quite an easy one and then do if I'm gonna do the if math maths equals equals should be 0 because 5 goes into 25 for no remainder and then do colon and then print and then do points plus equal 1 else print in correct the only thing here which is an issue is because we have all user ampere as a string I'll need to convert this to or cast it to a an integer or a float so changes to into make sure this is an int and so on so this is not a perfect game clearly it's very messy already even of them just doing it off top of my head but we can try this and we've got these nesting going on so we've got a fair bit of nesting and so this indentation kind of helps you can kind of control the whitespace to an extent in some IDs allows you to minimize certain statements and blocks which is quite useful anyway let's try this and see what happens if I run this are you ready so let's just do yes so we go through a flow of execution so right now we are never ever going to go down to the e lifts and else because I've already met a condition so great what comes into the UK can type in London hopefully this works it doesn't say it works but hopefully it did what is 25 mod 5 I should say zero and it does nothing right now because if you see the logic all it's doing is adding one into its variable behind the scenes but I assume it's working how it should be we could probably once this finishes we should probably print out the score and so on in our conditions we can do maths so here I've done the hard work for Python itself I can replace with zero by doing 25.5 in brackets to make sure there's no issues with order of operations and that would do the same thing is it miss would evaluate to zero and then it would compare maths to zero that's what there's a way how you can maybe adapt your answer your questions based on various factors another thing that's quite useful to do if your user input to sort of standardize fingers you can use a string handling function to convert it to either uppercase or lowercase so it doesn't apply to the number one bit applies to the capital city if I convert this to a dot to lower then empty brackets because this is a method which is applied to this object which is a string once which gets replaced it makes sure that all of your answers are lowercase will ever be art I mean I'll need to go down here and make this a lowercase otherwise aware match and so I could put if I type in yes I type in London with a capital L it will convert this to lowercase and so it will match up with my with my condition over here so in summary the structure for selection is this you may not always need to use ela for example maybe don't even need to use else always but I would say else is really useful because you can't always predict what the users going to type in or what is going to happen else covers other bases so we have a condition this condition needs to be true for the statements within that block to be executed if this condition is not true then this these statements will never ever get executed because they're not even looked at by computer as it works its way down your code either fits for enough condition after if don't just use F here because it can cause confusion make sure you use eel if it if it belongs to the same selection structure and then else covers all other bases as I say it doesn't test any condition this try now is just really one exercise have a read of these instructions here but generally I want you to write a basic program with if Elif and else ideally don't have to do else but it's a good idea to and try and get it to do some calculations based on the areas of shapes three different shapes and each each segment needs to have a different calculation involved the only thing to say is about the circles a little bit trickier I would just approximate pipe but you can also import PI you can look up how to do that if you want to and also for this formula PI R squared you need to do the square root you can do this by using a builtin function sq RT which I haven't taught you alternatively you can just do it with normal exponentiation if you raise a number to the power of 1/2 that is the same as taking the square root so you can complete this task using only the stuff we've covered in the videos and as always there'll be a sample solution in the description not a perfect solution or the only solution that it may guide you if you need help