enviable tutorial in this series we're going to now talk about string handling operations which is a huge huge topic really there are loads of different operations we can do on strings I'm just going to go through the ones which I think are most important and crop up most often the first thing I want to talk about is really a recap of something I've done previously talking about casting also called in this case if it were my strings string conversions if we're using strings as one of our datatypes we're going through so as a reminder a string is a data type which has a we have this random of quotes I have a single quotes or double quotes and really a string is text you also have a character so character is really just one character one letters number or symbol although in Python they don't differentiate between characters and strings really as a character is just one character in a string they're not set of related types like they are in different languages but very often we'll get user input and all we use rooms as a string so this may be have like a number and we're taking in user input so let's get rid of Guido and say enter a number even if we want to use it to enter a number they're not actually going to enter a number if I do if I say Freddy print type number and run this code first of all get prompted enter number like we've seen before I can enter a 65 press ENTER and what this is doing here what function surrounding number is finding out for data type and so the letter type is to prove it to you is a string STR being shorthand for string so all inputs even if they look like numbers to us are classed as strings until we convert them until we do some casting so if I wanted to use this input in some calculation I'll need to convert it to a number you know if I'm happy with it being an integer I can just cast it to be an integer and you do that by surrounding your variable with an int function so the int function converts it from s whatever it is but in this case the string to an integer thorns it to be a float which is a decimal I can convert it to float this one it's not shorthand like this and now if I if I we can't go to float because that's already been used float float VAR we can't use our keywords because otherwise it would confuse it has n we can use them in identifies now if I print these two integer and float bar we should see SR difference so I in touch the enter a game so we get 65 which is Vince German 65 point 0 which is a float so the Institute does not have a decimal throat does if I printed number plus number and then printed integer plus integer just adding itself in both cases but one of them the first line number person on the visa both strings still but if integers are integers and so this is an example of how the + operator is really overloaded it works in two different ways depending on data types the first way it works if I was go through this again first way it works is before numbers so just adds normally so 65 plus 65 is 130 but if it has strings either side of it or characters it will just put them together and this operation is called concatenation and by the way if I do mr. Michaux actually just to be a little bit more simple if I do for equivalent casting for a character which is CHR char and if I do if I put Sailor 265 into versus an integer press ENTER I get capital a this is because what this is doing is its converting the decimal version of the ASCII code so all characters in the computer are represented in binary and we use a character set to deivis ASCII being the most well known which has now been extended into Unicode a character set where every single character has got a unique code so if your unique code for a is 65 unique code for B is 66 because it follows a nice pattern like that and when I say B I mean capital B because I believe I might be wrong here 90 is 96 B I'd see no it's not maybe it's 98 to one other I think it's crossed yeah 98 but lowercase B this time so essentially we are using a casting to convert from the integer value to the character itself so if you want to find the ASCII code or the Unicode code in decimal for any character you can use for char for crunchin CHR to the opposite we use your function or diminish or ordinal number an ordinal number is a counting number so a way of organizing sets and if we put in this maybe just Olivia Traverse capital a like this I'll get 65 and then if I want lowercase B like this I should get 98 which is a lesson for me as well so ways of converting between characters and their codes okay well let me get rid of some miss stuff to clean up a little bit so I can show you a few more things why don't we do a simple program where we get the user to input their name that makes sense and we can do a few different operations on it so for their name and one of the things we can do is find out how long they're neighbors so we can use a function which is shortened to Len for length so if I but if I just do lend it like this and what we might do in the shell just leave on its own outside of him outside of a print statement and I'm put in someone's name dude we don't nothing happened because this needs to be put inside a print statement by the way inside the interactive show you can just do it how it is but if we don't make sure this is wrapped in a print statement so this will find out how long make sure it's in brackets because all builtin functions need to have an argument put in via brackets so we've got a nested function here big weirdo again I can spell his name right and Guido is five letters long five characters long and so we get five outputted and one through it's important to know about strings is we strings are arranged like lists we'll look at lists in a future video but it means we can do what is known as indexing so let me swap to the shell to do this resetting Guido assigning Guido to the name variable over here so we can do indexing and indexing is where we after the name of our variable or just the string itself we have square brackets so not the kind of normal brackets like we have with functions square brackets and inside the square brackets we can put an index number and so if I put an X number of two here and press Enter it's going to return just a character I so each character in a string is given what is called an index number and in almost all programming languages including Python these start counting from 0 so actually the capital G is got the zero index for you has got four one index and the ayahs got the two index and so it's why we put it's why when we put two in our index number we get I as opposed to the second one which is you because we start counting from zero if I do name within X number of zero I've get capital G and if I put name with me next number of the length of name minus 1 I will get the last letter which is o because if I did a name with the length just like sewing without subtracting one I'm gonna get an error because we're going out of range because we start counting 0 veal actual length 5 v index is after our string and so it doesn't we can't access it because it doesn't exist so even if you don't know how long the string is going to be we can get the last letter by doing Len name minus 1 alternatively we can just do name with index of minus 1 so despite they're not really being index of minus 1 because they need to be positive integers take supposed to be the last index so we kind of minus 0 but we kind of minus 1 which is the last letter likewise for the name we need to minus 2 this will be the second last which is D in our case so next thing on its own is really useful of course but it's also part of other functions like slicing slicing is where we're trying to get a substring from our string a substring being part of our original string so here what Guido as substring would be GUI or do or you I or ID all of these different sub strings are part of our original string and we can get access to that substring by slicing it using a very similar method you can type a name go to type in I just washed in itself follow it with our square brackets and inside the first when we type is V index or the first character we want to include in our substring so let's start at the start with 0 let's say I want to get substring Guede as opposed to greet Guido so I follow this first index with a colon and then I'll write for last index I won in the fact this is not Phoenix it's not the last index we want Phoenix after for me one so if I want to end at D D is for zero one two third index but actually I'll write down four here because the second parameter the second value supplied is the one after the one we want to keep so this will get us quit because even if we've got four which is really the index of zero of O is ignoring that it's just stopping before it so if I wanted no rule ways of doing this I've wanted the entire for a substring I could put a nexus 5 and this would work if I just did Guido and didn't Alexa 5 on its own this would give us an error because 5 is out of range but I can include it here because we're not actually using my index with stopping before it if I'm going all the way to the end if I don't need to actually include that second parameter I can just if wanna start say index 2 I can just leave it like that not put a second value in we stop over for in I get ID o in this case we can also like before use negative indexing to try and work backwards to phone to start at of a minus second index of second from last at a leave it like that I get just for last two characters do you know that is my substring there is a third parameter to a slicing operation which is called a step so if I leave for firstly prompted empty here and put a step of su to close it off this will get every second character so I get Gio from Guido because it's going every second character like that another cool thing to do if you want to swap your string around if you want to do a reverse operation you can again leave the first two parameters if you want to man do minus one and this will reverse your string and make it go back to front okay so I'm showing you that I have completely forgotten about my program I started on the left on script let's go back to this let's just necessarily an input let's just set it to be Grace Hopper just so we can use her name as an example so print link frame could say your name is low taxes long like that we could also use some for slicing maybe say your name backwards is and then use onestep like we did down here so I want suffix a couple of the errors we get a output like this name is 12 characters long the name backwards is I'm trying to save us this does like a little bit funny because you know I would think we transfer our missing quotes ideally to make this look a bit nicer the issue is because we're using quote marks to define our string we can't just easily put a quote in our string because it causes it to think for actually about string is ended which are hazard we get round this by doing something called escaping this string would escape the scaping for quote really which is a fancy way of just putting a backslash before our quote mark to tell Python up but actually the following character is to be ignored by it it's just to be shown to the user not processed because otherwise it will use it to stop a string so following something like this and then put another quote down here and make sure I escape this way mark it looks a bit weird in our program but what it will do is it will ignore the quote in terms of stopping my string but we'll just show it to the user here and so looks a little bit better we've still got this gap because the separator is a space but at least it's a little bit different if we want to see if my string has got a particular substring like an this one let's see if it's got grace we can do something like so you can do grace in name actually this one its own will give us a boolean value so let's set this to contains grace equals this because grace in name is going to evaluate to a boolean value either true or false depending on earth is in the name or not so in is an identity operator which works in quite a complicated way but all the zeros are seeing if grace is inside this string so it's wrong as if I'm in print out contains grace which sounds a bit strange but that's okay we should see that this is true which is because grace is in this and if we just put anything before this and then run it again it's still gonna find grace because it's looking for out the entire string for the substring grace if I want to see if the substring is not in our string I can instead just add my boolean operator not before in and then oh in this case because grace is in for sub is in the string I get force but that's enough web demure opposite operation seeing if our substring is not in our string if I want to get the index of where this is I can use something like print name dots find inside like grace with a final single character but you can do it as substring as well this will return the index of the first instance of the substring so 7th index is 0 1 2 3 4 5 6 7 so it starts off finding it over here my 7th index that's quite useful there are loads of different functions and methods for strings and bestest to Google them honestly if you are trying to find any in particular things like making upper case to upper lower does the opposite makes a lower case loads are similar functions like that and by the way there is a difference between can we see up here we've got a what we call a function we have a function name followed by brackets print is a function as well Len and also input as a function whereas down here we have find an upper these are not functions they work in similar ways we the methods technically because we write them after adopt so you write our variable which is an object in this case and we have a dot and we're using this method on our object now that's not really that important right now but it's worth mentioning why I might call this a method find or as I would call N or prints a function a function does not work on an object but a a a method does for this try now I'd recommend you have a go at these two problems so actually doing some programming this time not just predicting so the first one trying to take a in this case a 4digit year and multiplying the first two digits together with the last two digits requires some of our string handling we've talked about some of the slicing and for the second exercise little bit more complex we have got three conditions which you want a password to be and this will become a little less awkward once we do selection in the next video but we can still based on what I've done in this video output something like this based on an input like this which breaks two of our conditions and passes one of them so pause the video have a go at these two exercises there'll be sample solutions in the description