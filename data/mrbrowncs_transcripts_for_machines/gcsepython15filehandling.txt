in the 15 tutorial in this series we're now going to look at how we can handle files so start to deal with external files and not just have our data stored temporarily now we can start to store it permanently so far we sort of have been saving data as we've gone along we've used variables we've used lists which hold data right so if i set a variable called age to 99 i'm assigning the value 99 to the variable age and it means later in my code i'm able to use that value is being held it's not being forgotten straight away so if i just type in here print start to make this a bit more obvious because i can actually access this value from my shell so i'm starting it assigning isn't doing anything but now i can print the value of age like this so we get 99 because it's been held for us but if i get rid of the second line and restart this start it again and now i try and print age in my shell let's do it properly lowercase um i get an issue because age is not defined this is because it's completely forgotten that age ever existed because with this was our second execution our second running of this code the code had changed and it doesn't remember the value of previous variables this is because when you are running a program all the data is being stored in your ram and your ram is temporary storage as soon as a program finishes or as soon as your computer turns off all data inside ram is lost unless it has been saved on secondary storage secondary storage being things like your hard disk so actually the files you can access on your computer and so if we want to save data permanently we've got to make sure we are saving it to an external file we can't rely on it being stored in ram because ram is only temporary we are going to look at how we can handle text files in this video so txt file and also a csv file which two common files but if you are writing a proper application you're likely going to save it to you know your own format or a special file or you're going to do it in binary you're going to maybe encrypt it you know if you're saving passwords you're not going to save it in a standard txt file you're going to encrypt it and try and keep it secret and so we're just sort of getting used to saving it i'm not saying this is how it's done exactly in proper programs but it's fine for now so in reply we can go over to the lefthand side and we currently have our main.py file our python file which is where our code goes and i can at the top create a new file up here and call it i want i could call this text file and a basic text file has got the extension txt like this so notepad would create a txt file like that the issue with a text file coming from something like microsoft word is that it has a lot more formatting and has a lot more metadata and so it can be a little bit harder to deal with a text file or a txt file i should say has just got text just got the ascii characters it doesn't have any other formatting which is why you can't make a notepad file go bold or anything like that so i've opened up my text file i can just type in hello and maybe i want to do um how are you so because i'm just doing a text file i don't need quotes anything like that but if i now go back to my main python file and show you how to open this so the way you open it is with a builtin function called open surprise surprise and inside the brackets the argument first of all is the file name so you've got to make sure you type in this properly so i did file uh the text file dot txt like so and because this file is in the same folder because replica is keeping them together in the same folder i don't have to specify the entire path if you were wanting to write or read to or from a text file stored somewhere else in pictures or downloads and you've got your file and documents you would need to put in the entire path and not just the file name because python needs to know where to look so if i run this nothing will happen because it's just opening it right that's not going to show anything to use about if i want to use this i need to make sure i assign this to a variable so let's call this my file let's just make it a bit wider so i'm assigning this i'm opening this and dumping it under the name my file and now if i just print my file to see what has been assigned we get a load of nonsense really it's just telling us what is being stored it's telling us what it is it's not very helpful to us and so that's because this is an object and we need to use a method to actually be able to show it to the views and this method is read so if i do dot read and make sure i do quotes after brackets after this as well it takes no arguments it doesn't need to take any arguments and now we are getting the contents of our file output to the user now that's great but the issue is maybe you don't want all of this maybe you just want hello first of all so if you just wanted to like what you could do is count how many characters we've got so we've got one two three four five six and inside read we can now add an argument and i can put six so you can put in how many characters you want and it will only print out the number of characters specified so just six in this case if i do seven let's see what happens so i should get a new line that's because even if we can't see it in our text file we have the new line character here the new line character is uh backslash and then n and then pi from the duvis in quotes so we can't see this the python is reading a new line character and so it's going on to a new line if i now put this to eight we should get the new line and h as well and so on and so on so that's okay but that doesn't give us too much control so instead we can change read to read line again make sure i add in my brackets which are empty in this case and i can run this and we get our first line although it's adding in this new line character which could be a bit annoying but that's okay but now i can call this one again and it will kind of track its progress and so it's now going to not just read the same line twice it's going to read both lines or well it's both lines technically but because we've got this new line character is doing three if i wanted to get rid of that newline character i can use string slicing to get rid of it if i do something like this and i want to go up until the negative one index which is the last character i can do that and it gets rid of a new line character okay so that's fine one thing i did forget to do is what is really actually really important is closing off our file so we've opened a file in line two as soon as you finish using it you've got to make sure you close your files so as soon as possible you should be closing your file because um well let's talk about this so where you close the file is just going my file and calling uh the close method on it and it closes connection to your file because what it's doing when you're opening it it's opening a connection to your text file when you're closing it it's tearing down that connection and not when you're reading it it doesn't matter so much when you're writing to a file which we'll look at in a second some issues can occur if you don't close it properly maybe it gets corrupted maybe you know if you forget to close that your data is never actually written because it's stored in a buffer so closing is really important um i will always forget and people always forget so we'll come into a more um concise way a bit later but let's show you how to write to a file but actually before that if i want to just make sure i read all of my lines i can just do thankfully python makes easy i could do four let's call this record in my file i want to print record like this and now if i get rid of these two lines of code i'll just comment them out for now we'll get to the same results except with our newline character and it's going through the entire file so if i now go back and add in a third line it will automatically adjust because it's all it's doing is like if we were going through a list it's going for each list it's going through each row and printing out so i've said record here when we talk about files we talk about records especially when we're talking about csv files we'll talk about later so record is another word for a row and a field is another word for a column so hello exclamation mark is a record and so on in a text file it doesn't apply so much but it does apply it with csv files anyway in terms of writing let's get rid of this for loop and now if i call if i refer to my file here and use a method to write so i'm going to write and i can now in my brackets as an argument supply what i want to write so if i want to write i'm good i like that and now if i run this we're going to get an error because where it says unsupported operation not writable it's not writable because in my first my second line here when i open the file i haven't said i want to write it by default when you're opening it you're only opening it to read from it which is a little bit safer in terms of it getting corrupted but if you want to write to it you've got to make sure you add in a second argument and in this case it is just w lower okay or w on its own say you saying you want to write by default it is just read on its own so in r you don't have to supply that so now i've added for w it will now let me write nothing's happening over here but if i go back to my text file i have now got i'm good the issue is i've now got rid of the original content of my file this is because right the write operation will override anything inside your file so it gets rid of it every time you call it so if i add in a second um right line down here um you'll see that actually we will get to i'm good it's more the actual operation is overriding not the actual right method and so if i change this w to an a a for append when you are appending it you're just adding on each time you are using write so here i've done it a few times i've got loads of i'm good and you can see the replica highlight here because it's writing to it so that's important otherwise if you use write you might unintentionally overwrite your entire file every time which can be quite irritating and you can't recover it so make sure you use a if you're only wanting to add on to it not just getting rid of it and you'll notice in my text file i've just got i'm good i'm good i'm good i'm good after another if you want from separate lines you want to make sure you add in that new line character so the backslash n is not actually written to a file it's being ignored and it's making it go into a new line so we've got i'm good down here which is on a new line if you now try and read again from this file we're going to come into another issue a very similar ones before unsupported operation not readable because we've now said we're appending it that means we're only able to append to it we can't then read from it either so if we get around this is by adding a plus after it so a plus will mean you want to append but also you want to be able to read from it as well so now this will work and i can initially read from it which isn't doing anything and then we can write to it as well so i said you have to always remember to close your file which i i even forget to do sometimes and people commonly forget to do if you do forget it it's not the end of the world your computer is not going to break but it can cause issues like i say like corruption and not all data may get written because it's stored in a temporary buffer and so to kind of circumvent this and make things a little bit simpler you can just use a web keyword this is really really useful so if i do now with open and the same format as before so text file dot txt and i'll follow this with as so if i now call this my file again this is doing exactly the same as doing my file equals open text file.txt but it's now doing it in a with statement and so if i add a colon and press enter now like an if statement or a world statement we now have an indent and so anything within this indent is contained within this with statement and so now if i do for listen i'll just do line in my file and print line it's not really called a record i shouldn't really have called it that and now we get our crazy pro uh text file written out but what is really good about with is it's not uh anything within this body is being applied to the text file and it means as soon as you end this as soon as you get out of this with statement by going back by decreasing the indent and printing hello we can't if i now actually let's just try this if i now do the exact same code but do it outside of a width you'll see that actually i'm going to get an error because this eye operation on a closed file because what we've done since with ends it closes it for you and so you don't have to worry about closing it yourself as soon as you leave this with block it closes and so you don't have to deal with any issues which relate to that so i'd definitely recommend using with and not the way i showed you the start which is really how i think most people learn how to do it okay to demonstrate for handling what might be a potential actual application of this i've added a csv file i've found online which has all of the major european cities in it along with a country and also population so we can do some processing on this and the format here is dot csv so a csv file stands for comma separated value file and you can see why it's called that because we have our values separated by commas here so first of all we've got our city separated by comma then our country separated by comma and then our population and here we have kind of like a table in text format only because our commas are separating it in the same way that a line in a table separate it so we have columns we have ascii name we have country and population those are our column headings then we have our values below and each row here is called a record and each value within varroa is called a field so here the moscow is oscar name field russia is our country field and this population is our population field and so you know it's very common to have data in csv format because it's a it's a fairly standard format it does vary occasionally here we've got our values in quotes which doesn't massively help but yeah it does happen sometimes you have instead of commas you have semicolons so it can vary a little bit and honestly your file handling operations will vary depending on your file it's often a bit of a barge job to try and get your code working with your file so if we make sure we open this so european cities dot csv is what it's called and i open it as a spot european wrong european cities as let's call this my file again and do a colon and now let's just as a starting point just print out each of these if id4 record in my file like this and just print out our record you'll see all of our all of our records in this and you can see straight away they are being separated by a line so we've got a line here this is because we have that hidden new line character at the end of each row which if you want to get rid of if the other ones are just back to back you can before you print it make sure you strip it using slicing so if i just do record equals record and slice it so if we are only getting or we're removing only the last character by using the next minus one we should if i just clear this oops we should get that line stripped if you do it's only going to a new line because print is telling it to and now if i want to separate each field and to sort of have it on its own and maybe print it out in a slightly more readable way we can do is make sure we split it based on the comma so we can use the split method on this so if i do record equals record dot split and now as an argument to the split method i'm going to supply a comma because that's what's separating each of our values what it's going to do in this line is it's working on the object record and it's being saved perhaps we cover something different perhaps we could call this values because really this is going to be a list because what it's doing is splitting it and saving each value under a new index in this list and so if i now do something like print we could do first of all or the first index is going to be the uh city and we could do a common thing we do is in and we could do for country which is our second our second value our first index and then that will do for now so i can run this if i clear this first of all and we get value is not defined because i did it as values not value we should get now a slightly better version it's a bit more readable a few issues first off about we've got our header row being printed which is not ideal because ascii name is in country doesn't really make any sense we've also got quotes around our strings because in european cities we had our original file we had quotes around our strings so let's take this one by one let's get rid of our quotes first of all because that's quite easy we want to get rid of our first and our last character so if i add on another slicing operation to this and we want to get rid of our first character and so we're starting with index of one we don't have a zero character and then equally we don't want the last character and so we can add that to our value and that should fix the first issue which is having the quotes around it so it looks a little bit nicer we still have the header row being printed and there are a few ways we could do this but i think possibly the easiest just using a for loop like this is if we wrap this in a if statements if i just indent this across if we do if um well let's just do values let's just copy this bit here because if i if you know what your header o value is going to be we can make sure we get rid of the ascii name is not a name of any city and so if i do not equals two ascii name which is our header name um it's going to print this out with the exception of our header row so if i clear this again and print this we now thankfully get rid of our header row not the most elegant solution but it gets rid of it at least in terms of printing out it is still there now this list is quite long and there are lots of fairly small cities sector six there's a city i've never heard of um and we may not want to have reading in our birkenhead in her list so maybe we want to limit it to cities with only more than one million people so if i now again add a nested if statement so if i now do if values and i believe this let's have a check what index would this be so population is our third item and so we'll have an index of two and again so this one actually we don't need to slice off the quotes because it doesn't have quotes around the numbers which is good and now if our if this is going to be want to be greater than one million let's check we have enough zeros there yes we do and now we're only going to print values we're going to print cities which have a population grade of one million maybe we want to add an addon our population as well could do uh with a population of and then values two so let's have a look what happens here if i clear this we should have a slightly more no we don't because i need to make sure i convert between my types we have an error because we have a type error because we're trying here we're trying to convert we're trying to compare a string to an integer because what i should have said earlier is all values coming from external files are treated like strings even if they you know look like integers to us they are treated like strings are the same with user input is always a string and so i forgot i need to make sure i cast this to an integer like that and now clear and we can run and fingers crossed this works this time let's have a look so um formatting but dodgy but there we are so it now has hopefully only the biggest countries bigger cities i should say it does and we have population printed as well and let's say we want to take all of these larger cities and write these to a new file so we want to create a new csv file with only the biggest cities we've only admit with over a million what we can do is make sure we're nested within our if statement which kind of excludes the smaller cities still i can now down here create another with block and so if i do with open and this time let's call this one uh large cities dot csv and open this as just quite large not very sophisticated but it will do the job and now i can make sure i write so i'll write a similar way so if i now use object large dot right and now to format this in csv we need to make sure we separate each of our values with a comma so if i just copy this like so and extra add on a comma after every single value and perhaps let's only do two values here so we want our city name and also our country name and so we've added a comma between these two values but because this second value is going to be the last one in our record we need to make sure we add on a new line character as well which is not actually stored it's hidden from us but it will make sure it goes onto a new record as we've got a comma and we've got our new line character that's perfect so if i run this we're going to get we're going to come across an issue uh because there's two potential issues here we have first of all no such follow directory large cities.csv and that's because well partly because we haven't told it we want to append to it and we've only said we are wanting to read by default so hopefully that will fix that issue um so that's great um it's running fine now and it should really have created a new file over here if you were doing this on python on your desktop it will create a new file if one doesn't exist but in red apparently it doesn't so you can create a new one quickly called large cities csv and now if i run this code again we should now get our code get our values written to this new csv file like we do over here perfect so the thing i was going to say is i don't particularly like having a width nested within another with especially when we're doing it as a loop because here we're looping through each record in it and for each record which is above a million we're going to open a new file and then close a new file like in my mind at least this is adding unnecessary work to a computer because it's having to reopen and close it constantly on you know quite a few lines and so really what i would prefer to do is get rid of this statement up here and simply add it to the top so we've can accept multiple sections to it so we can add a comma to our first open and now open the set open our second file which was europe which was uh large cities got csv i make sure i follow this with a like so and we called it as large and now we have with at the top and so it isn't constantly opening and closing it's only going to close once it gets to the end of all of it so this should uh be less intensive on my computer but still will do the same effect for this try now in the description there will be a link to a csv file which contains data about all of the footballers who played in the premier league in the 2018 and 2019 season including things like the name age club country games and home goals and away goals and it's got i think about 500 records but i want you to print out the exact number of records as well as each individual record each row to the user so that requires reading in and printing each record and then counting the total and then question two just amend this code so that now you're only going to print out the footballers who scored more than 10 goals so above 10 so 11 and above and i want you to do it in a format like i've shown here so it's a little bit less ugly than just printing out in for commas and finally third extend this so actually adapt it so you're now going to write to a new file with the same fields as the one at the top but one extra field which is goals per appearance so you need to calculate goals per appearance to two decimal places and write this to a new file