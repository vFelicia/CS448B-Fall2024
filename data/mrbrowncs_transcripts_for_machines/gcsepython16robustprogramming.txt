hello in video 16 on to talk about how we can create two robust programs which is our goal using validation and also exception handling if we did a basic quiz like something like what is 20 divided by 5 we can then check this input by the user so if we do something like if answer equals equals 20 divided by 5 it's always good idea to not hard code it because we can change it later and intimated service is converted to an integer because we can't really compare what we can't compare string2 finish it like that and then I can print correct if they are correct otherwise we can print incorrect so let's see how this works it's a fairly standard program 25 by 5 is 4 press ENTER I get correct if I type in 4 all answer if I type in 5 I get incorrect lovely it's a really simple program in how many lines of code if I get rid of for whitespace we have five lines of code really simple the issue is this program is not very robust so if something is robust its strong it can't be easily broken so really the opposite word to robust is weak this program currently is quite weak because if I you know don't type in a number if I type in G presenter we get a value error because it's expecting here in line two to be able to cast my input to an integer that can't cost G to an integer and so it has an error likewise if I maybe this when we edit this code so instead of actually hard coding it completely we have maybe number a number a a is a variable and we can have 20 in this one and we can be representing 5 and now if I change this so now doing a divided by B and maybe we let for user if I listen every user in purpose to okay so now I'll just changed it so it's um I can better show this so now we're getting used to actually enter two numbers so I can do 20 and then 5 and what is 20 over five well it's 4 so that works fine if I just to maybe either deliberately or by mistake get mr. Ansari 20 divided by five but ones if I were like I did before to G we get another was for saying there we had before but now if I do my first time at twenty my second number zero and then twenty divided by zero you might think well is about twenty but actually we can't divide by zero after all we in maths it just doesn't make sense to divide by zero because we don't get it doesn't make sense it would be how many times a zero going to 20 while who knows so here we get a different error we say we get a division by zero error which is fairly common in programming usually not doing a really kind of obvious example like this it usually happens by mistake if you've got its user input in particular but if you got your denominator changing over time especially based on input then there's definitely a risk of having a divide by zero error which can be a big issue so this program is definitely not robust it is a weak program because we can break it by you know just typing in a slightly wrong input and it breaks our program it stops running which is a big problem this could in some cases lead to a security issue invert perhaps your security breaks when you put in a certain input but also it could just you know stops your program working what you don't want and when you are programming you should always be assuming that your end user is either a complete and doesn't understand what's going on and can't follow instructions or is trying to deliberately break or gain access to your program without permission in other words assume they are stupid or malicious and this means we need to program in a defensive way we are sort of expecting attack and so we're going to program in defensive way to try and keep our program working and keep it working securely I think if we move on it's worth just going through the three types of error so we have logic we have less you've seen that so as first syntax errors we've come across a lot usually by me mistakingly typing something because the syntax is the rules of the language and so if you break votes for computer can't understand it and so nothing really happens if I get rid of one of these equal signs so instead of a double equal sign to compare we are kind of trying to assign it in an if statement doesn't make sense and so it gives us a syntax error so the top of my code is worth fine but because it's sort of checking my code before it runs it nothing happens we just get the arrow shown to us so nice it's telling us where Vieira is which is quite hopeful that's reading that for us logic error is harder because logic error is working normally in the sense that your code will run so if I fix this and maybe change into float because I want to change this division to be floor divisions maybe you don't really know how to divide with rule division so you do two equal signs or two false lashes and so your code will run but maybe not exactly maybe not exactly how you expect it to I didn't end off my common map so it's running fine but it won't work exactly how we wanted to maybe our first number is 20 a fact let's do it again let's say our first number is 25 because I'm getting nice divide 25 divided by 2 you might think that's going to be 12.5 but actually that's incorrect doesn't really make sense you might be looking about thinking well why is that wrong and it's because you've got this floor division because the computer is taking about to be 12 knots 12.5 because of its operation so you haven't quite understood it it's working but it's not as you intended to and our third error is a runtime error and this is a massive category of errors really any error which occurs as you're going any fuen stops your program as you go so this could be something like you get stuck in an infinite loop because you've written a while loop wrongly your condition never becomes false maybe your computer runs out of memory which you haven't really got much control over as a programmer I guess is you've it's cause for issue maybe you've clogged loads a memory somehow so some things we can't predict but also we sort of have with within this category we have what we might call exceptions and exceptions are errors which happened during execution so the 0/0 air we had before that was an example of an an exception and when we tried this with the 25 a zero zero we get this what is an error but really would call an exception it stopping our program can see we're terminating our program so it's not good but really we can handle these we an exceptional I this shouldn't cause our program to terminate so we can make it more robust by handling this exception and we can do this and make our code more defensive by surrounding any sort of potentially problematic code in a trycatch block so we have a try Clause the try Clause is a bit like a sort of a safe area the code can run in and it's not going to cause any issues where it's gonna try the code if it doesn't work then that's fine and to catch any issues so if we have got an exception being raised we can accept it Animus except clauses where we can print you know there's been an error so instead of week syllabus error message we can sort of control this ourselves so I can print error so let's try this again and first number is 20 I mean stay zero and so we get error instead of the big error message and that means it doesn't actually looking different here but we could continue our program without it terminating prematurely because of the exception so we get hello printed out here which is below where these or fairness code was and so we can sort of continue of our lives without having been derailed by what is really a minor error now you do sometimes see people try and surround their entire code with a try Clause which is unnecessary and and it's not a good idea because really you want to be using exception howling when you know there is a potential error coming like it's not just just in case like you've got some error in mind so if you're doing division you should know already but you can't divide by zero and so you might wanna keep that in mind and usually you can you know rewrite this so that you're not using try at all so if you rewrite your condition in a slightly more sophisticated way you can avoid this all together right if you do break was it was answer and is not zero then you can continue so you can usually rewrite conditions to prevent this happening but it is useful and generally speaking so relax are based you know similar to how I said you really surround your entire code with the try clause you shouldn't really have except on its own you should kind of try and link this to a particular exception so instead you could do accept and follow this with a what's called zero division error and now instead of this we could have a slightly less generic message we could say don't divide by zero because it's undefined so now we get a more specific message and we're not just catching any old error which is not always wanted sometimes it is okay to have errors because you want to know what's gone wrong so it's more specific you can have lots of except two clauses each for different errors it's a bit like if Annie left them and you can have and accept as sort of your equivalent of else to any other exception you could do just a generic error message it is a good idea to keep it as specific as you can now on to talk about validation which isn't always going to lead to more robust programs it sort of depends on what you are validating because validation is where to make sure any input is meeting your criteria and in some cases the input being invalid is going to cause issues is going to cause errors like we saw before we had invalid input of a 0 denominator which caused a divide by 0 exception so it can make your program more robust and it's only makes your program more useable and makes me easier for yourself as a programmer too because as I say every user is often going to put in raw inputs so here we've got a fairly contrived start of some authentication program with some mobile security questions authentication being checking someone else who they serve ER and so maybe here we've got multifactor authentication asking some details about from you go and check those details so maybe first of all our requirement for middle name is made what we would call a length check a length check maybe want it to be more than two characters I don't know many middle names or any names which are less than two characters I'm sure they're probably something but just as an example and maybe four pass code if you once before digits we just want it between so we just want a range check between zero and 9999 and for four current dates we just want it to be a specific value which is today's date and because really here we have three conditions we're going to want to validate using a while loop and we have I'm sure done bits of validation before but we can we'll bring an exception handling in a second just for middle name first of all so we want the middle name of the length of this so you wrap it in a blank button function and we want this to be greater than 2 so in other words less than or equal to 2 then we can we are going to just ask for user to input again maybe you tell them as well that actually it should be greater than 2 characters let's check this first of all what's your middle name riders to a we get asked you feel more characters with a man named do a gain that's gonna keep repeating until we enter a valid middle name my middle name is John and we move on in terms of our pass code we want to be within our four digit range and so I've just created a condition here in a while loop but if it's less than 0 or greater than 9 thousand 999 we're gonna just ask again for the pass code now the issue is if I do something like 65 but is within our range but isn't really appropriate and so we shouldn't really want this to be accepted either so we can't do I guess add another or condition to this if you say all the length of our passcode is greater is less or not just not equal to 4 we also want that to be checked again the issue here is pass code is now an integer which because I've cast it up here and so we can't use Len within stress if I just cast is back to a string getting quite messy let's make sure I've got enough for brackets but it should sort of fix that issue and a lot of validation is trying to try things out and see what happens because really if you are assuming your users gonna be perfect you're gonna be tempted to only type in things which work so you'll type in you know 5,000 is a valid pass code and so you might be tempted to try this except one doesn't work because I didn't cast for 2nd version but you might assume it's working fine even if it's not so it's important to try your code with erroneous data so data which or input which is wrong to see what happens so that should actually work now I fix that mistake that should actually be an integer but let's say we don't actually care how long this passcode is we just want it to be a number well this is a good case for using exception handling because all user input is a string but soon as we try and convert it to an integer we may have an exception right because if it's not an integer then we're going to have an exception which we can handle so maybe if I just copy this and show you this if I if I try this right and if my passcode is ABC and not a number we get this value error so instead basement we've looked at before we can wrap this in a try Clause and then have an exceptionally and except clause that we want to accept a value error in this case like so then give it must be a an integer to work and so we has not really right because it's four digits or multiple digits but anyway be sure this is right if I now was your passcode I do a PC again at least we have no error so our program keeps working but it's not really done anything right it's just it must be interested we're not asked to been corrected so we could do we could wrap this in a while loop using maybe a condition is valid is valid is false initially and while is valid equals equals force we're going to keep looping and now if I just shift this across we could add in an else clause else can be used in the field of in cases right usually we're just if and also you can use it with while loops but here it can be used to supplement your try Clause because what happen is if it goes through the try Clause of no issues it will then go to the else Clause so here I can set is valid to be true because we've managed to go through without any issues except never gets run in that case except only ever gets executed if we have an exception which matches the actual name specified here so now if I try this we should order pass code if I do see we should now be asked again and again so we keep going through the process until I enter a valid passcode of course you may want further validation to this there is actually another course we can use finally which is used mostly for cleaning up especially if you're opening files and I want to close files which we don't want to do when use when use with instead here it will just get run whatever you're doing so if I just print hello you will see if we have an exception or no exception this code will get run so fighting ABC will get hello if I do a proper one four five you also get hello so finally is run whatever you're doing if you have an exception or not else is only if we have no exception and for our final screws question we just want a specific value we want today's date well to do this for computer to know what today's date is we have to use another module which is really one shame as quickly because it's quite useful and so the import time module so the time module has got loads and loads and loads of methods we can use and so it was any ages to explain one of them so I won't do and a lots of are really specific make sure the time the import Stemmons right at the top by the way and so we commend use it down here so maybe I have another variable called actual date and I want to set this to the actual date which will calculate using a module within a method of event time and to get this you can do time dot local time which will get you the current time but in a slightly weird format if I just comment out if I comment out some of our code off here just to make things a bit quicker using multiline comments and try this out in fact many to actually print this otherwise it couldn't be very helpful to us we will get sort of a slightly weird format for this today's day 25 so this is a half format of our current time so we have sort of different components here and see year 2020 month five that's going in May and we get all of the features which is working out for us but actually we want to go to format listen it slightly better way that's what we can do we can package this in a another using another method which is time dot SDR then F and then time for string formatting I believe and then our first argument is how we want must be formatted and this will be as a string but we can use formatting codes so if my cent sign is representing some other value here so if I do % d today then I want this to be a slash they don't do % m and a 90% after white for year by 4% and in my second argument I'm going to then use the actual date in previous version in that soft tupple right so now this will get us if I print missing ounce forget the printer we should get a setting nice of formatting of this then we can compare this against the user and tria as we get the correct date I can verify this is true and now we can compare this against the user so I don't show you actually need a capital y therefore you do actually not sure why I did but it's fine so what's happening is it's just replacing % d % hmmm % y with the corresponding values in the values found by the local time method so we can now compare this so I run this and ask me for today's date if I get this one wrong if I do the 18th of May 20 it's incorrect what's today's date what a funny for 17th of May 20 then I can move on and it's validated not really relevant for creating robust programs but just while we're looking at the time module if you want to time your entire programmers in tech see how long it takes to execute from start to end or a position of your choice we can use the time method within the time module to do the rest of us will record the time right now and then at the end if I give exact same thing and there's the right at the end and to end it was time but time I can then work out the elapsed time in between by subtracting the start from the end and I can print this as well so you can see how on a sweater you can also if you want to pause for a certain amount of time there before dramatic effect you can do time sleep and sleep for how many seconds you want within 5 seconds so let's see what happens I could do print sleeping just to see when it's starting like so and it's what happens to us if I just sort of go through this fairly languidly incorrect what says de toilette stever 17 of me 20 now correct it's not sleeping for what should be five seconds and then we'll have a look how long this will take so it took six point nine to four seconds and obviously you'd probably round this if you wanted to have it shown to the user a for Vista now once you pause this video have a look at this block of code and try and predict what these three inputs would result in Bobby answers in the description and question two only to create a sort of password generator which just takes two user inputs first of all number between one and ten and then their favorite color which is needs to be between two and ten characters and so you'll need to validate both of its input and then I want you to write a function which is going to take in both of those inputs as parameters and then return a password of a format the number followed by the color which has been converted to capital letters followed by the year which needs to be generated inside the function using the time module