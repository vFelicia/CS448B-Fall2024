hi this is the first of two videos which are going to look at iteration in Python in this video we're looking at four loops and in the next one we'll look at while loops okay so iteration is I suppose for most formal way of talking about it but we can also call it so we've got iteration right which is the sort of most formal way of referring to what is just repetition and equally we can call this looping so looping is where you're repeating something in code and that means we are iterating and so I've mentioned before we have these three main programming constructs we have sequence selection and iteration so far we've looked at just sequence and selection we're now doing iteration of course oftentimes programs and I suppose life more generally is very repetitive with doing the same sort of stuff over now again maybe with slight differences so maybe we've got a a list with some names in it and we're trying to print out each of the names well we can do what we did previously in the last video and just use the index number so it could be print names of an index of 0 it's our first one and then I can repeat this two more times for Bob and for Charlie like this and print out this way but imagine if this is like a list with hundreds of items in having hundreds of lines of code doing the exact same thing is really not very efficient each of these lines of code needs to be translated by the computer each of these needs to be saved in our Python file we need to either write or copy each of these lines it's not very efficient for any of us well it's over us over computer it's not very efficient for either of those two it will also make you a code horrible to look at because you just have loads and loads of pointless lines which are doing very very similar things and anyway sometimes we don't even know how many times we need to do this repeat maybe we are having the user add items to our list we don't know how long the list is going to be when we are writing our program and so doing something like this isn't going to work unless we have you know an if statement with every single possibility which by definition we can't do so loops are how we can do this in a much more sensible manner in Python we have two iterative structures and the selection we only had VF statement albeit with two other clauses elsif and else but with iteration we have two so we have four loops for loops and we have wire loops so let's start by looking for loops first of all so if I want to convert what I just did before into a for loop I can do for name and names and then do a colon this is a for statement we're beginning with a four keyword which is in a lower case we also have an in keyword which we've used before to check whether something belongs into something else it's quite versatile it's being used in a little bit of a different case say we're seeing we're basically looking for outfits lists called names and each item is going to be called name and this is a variable we are setting up just for this loop and each each loop is going to assign a new item to this starting of beginning and ending up with charlie so if I press ENTER after my colon exactly the same as with if statements we get a little bit of indentation we get a gap at the start of our line this was put in for me by repla if it's not doing it for you you kind of add a tab and backspace to get rid of it and it's hard to get back and this indentation is really important because it is what's telling Python what should go inside the loop what should be repeated in other words if we don't have it Python there's got no way of knowing where the loop ends and where it begins so if I now just do print name I'm using this variable we don't assign it like a normal way it's being assigned for us as it goes through the list and we'll get the same output as we did so that is Bob Charlie each time it's repeating its repeating three times in this case because it's how many items we've got on the list it is just printing out the name and the name gets updated each iteration generally speaking we use for loops when we know in our mind how many times we want to repeat in this case we just want to repeat as many times as there are items in our list so he can print each one individually you know if I added a fifth item to this fourth item should take a count it's just going to update the number but I'm still repeating the same I still know it's going to be the same number of times as the items in the list and so because of this for loops are also referred to as count it's controlled loops and more generally speaking our socalled definite iteration both mean the same thing really that we are we are looping based on a counter really and we are defining that counter ourselves we can look at our loop and know how many times it's going to iterate even if maybe it's that exact number is going to be determined at run time maybe if a user is inputting how many times but we can still look at it and know when it's going to end and this is different to a while loop as we'll see but what I've just done is change my names list from a onedimensional list into a twodimensional list we can see we now have a lists within for wider lists and so if I run my code again let's see what happens maybe let's just collapse this a bit more and run this so instead because we're still iterating through the items we are just getting the lists which are items but we're not getting the exact item within that item so if we want to get maybe Alice and her age and print those out I need to do a nested leap within this loop so if I just get rid of this print statement and do another for loop so when we're nesting it constructs we're putting it in another construct to find out do for item for item in name so we're using in this case this name is now a list because I need you to trace from you're assigning a new list to the name variable or it's a list in this case ever name object and now we can look within that list and assign a new variable called item for the individual item in that sub list so now I can do print and you could do print item so let's see what this does if I just get rid of that white space so we should get each of the items sort of printed individually like that so that's okay but it's not for greatest formatting what I could do is change the end parameter to be an empty string or just a space actually so it isn't going all on two different lines so let's have a look at this fuchsia race is gonna put them all onto one line which is not maybe what I want or maybe one Alice 30 then Bob five then Charlie 77 on different lines so I can do is if I make sure I'm out of this nested loop I want to be out of that iterative structure because I want to while show us in a sec if I do print and this time I'm going to do a string but I'm going to do a backslash and an N this is an escape character and I do a backslash it I am escaping the next character so it doesn't believe this n is an actual M like a character n it's a command to the interpreter so all this does is it goes on to new line so this is a newline character so if I run this now we're gonna get Alice Verde Bob 5 Charlie 77 day 41 on different lines because I've added this new line character now the question is how could we write code so that it says something like Alice is 30 Bob is 5 charlie is 77 because what you could do you could do item and then so the first item is going to be Alice I can you write some comma and then is and then another comma to make sure I'm separating this once again it's going to look funny it's gonna Alex is 30 years the Bob is 5 is it looks stupid because we're just repeating it and it doesn't know which item is the first one in which is the second one doesn't care that's one of the issues with using a for loop like this but syntax is really really simple but it's just giving us our item about anything else if I just switch to the shell just to show you another way of writing for loops which can help us with this issue Friday first I'd like for I in range 5 and the colon let's just break this apart quickly again we've got a variable we are setting and range is a builtin function to Python and it can take at least one argument so if I press ENTER now and if I do a tab because this doesn't know but it's a tab it doesn't know that it's an indent yet and type print I and presenter nothing happen because it's given me a chance to add something else but if I press ENTER again two more times I get 0 1 2 3 4 printed out to me so we have gone here we have I being assigned and in each loop is being assigned a new value from range so range when it's got one argument starts off counting at 0 and goes up and to but not including the number you put inside so it's counting at 0 1 2 3 4 not five because that's what we've put into the argument but each loop we are using that variable n just printing out to the user and we can call that variable anything we want to as long as it's not a reserved name a certain call account is generally convention to call it I also J is used a lot doesn t matter generally speaking we want to have variables which are meaningful but in a loop it doesn't matter so much especially if it's being used as just a counter so range can take multiple arguments if I do first of all wanna start counting it to I've put in two as my first argument then a comma and the second argument is going to be again the upper range but not including VapoRub number so if i want to go up to a five this time i'm gonna put six presenter and again i have to make sure I do my tab which I forgot print count and press ENTER press ENTER again and this time you get two three four five now range should also take a third argument if I do something like four let's do J in this case for J in range and if I do so say I want to count backwards from ten to one the third argument is there to be the step size so how big of a gap should be between numbers by default is going to be one so if I now do is my first if my starting point I wanted that to be ten my own point I want to be one but like with before it's not including that number so I'm gonna put a zero then in my third argument I'm going to put minus one which makes it go backwards a bit like how he did that reverse indexing and I do do a tab and print J and I should get ten going down to one I think more so than with how I showed for for leaf before where we iterating across a list when we're doing range it becomes more obvious why it's called a count controlled loop we are counting up and that's what we were doing really with the list as well we're counting up or down in this case but we know how many times are going to count if we have a look at the loop this will be different to your while loop so let's try and use this in adapting our program here because really what I want is if I just remind myself what this did so we have Alice's thirty is no ideal we want it to be Alice's 30 and not harvesters afterwards and what we could do which as I said it's not the only way of doing this we could do Auto vez in a loop we're happy with you out early because we're getting the sub list if I auto this and go instead for let's say let's do index in range and we want to start a zero because we know there's something in that list and I commend you as my second my end point if I'd leave a length of that name which is that list we are getting in each iteration I know that as we were before the end point is one greater than the number you actually going to go up to and so if we try to index this we know that because we start counting at zero the length is always 1 more than the highest index and so this will work okay if I now we can now use the index which is now a number as opposed to an item to actually index the item ourselves so if I now go something like this well let's just all of a server that works and it was before so if I add it now if I'm now going to use this iterated index to actually index the item in the name array or name list I can run with it should be exactly the same which is but now if I want to maybe only and in is if it's following the first item in the name list well I can do an if statement here to do this if I do could do if if index equals equals zero you're going to print the name plus is like that make sure we have an indentation so we've got a few levels now a few levels of annotation you can see up here and now if that's fine if it's not in X of 0 if it's in X of 1 I'm going to just print out the item like so and now if I run this it should work how we wanted it to so Alice is 30 Bob is 5 and so on so we're just altering what we're doing based on the next number here but we needed to change this to a different kind of for loop so just to summarize what was this doing we have this two dimensional list up here and not absolute Pierre is basically just checking through each item so it's assigning in this case in the first iteration Alyce and 30 under the list name and name it's been going to start counting from zero until one because the length of name in this case is two we've got two items in that sub list but we're not going to go up until we're leaving so we just have 0 & 1 and this will change if I added a third if I added a third item here it might look a bit silly but it would work the same it's not going to suddenly break because we are we haven't hardcoded this we're using the length to work out and the first time this nested loop loops in X is going to be 0 and so we're going to use vaca next number to index name to get the first item which is Alice in this case the thing gonna add is to it and then if it's not the first item we don't add is so we have an else statement and we are game just index it but without for years added on and this backslash n is an escape character which tells python to go into a new line so in total this outer loop for naming names is just looping four times because we have four items at the first dimension in this one in this 2d list but for each of those four iterations its inner list is going to iterate if we get rid of this further item is going to iterate twice because it's going for each sub list and so in total we've got four times two iterations we have eight iterations in total now I would recommend you pause and have a look at these two questions the first one is trying to replicate the following sequences I have specified so have a little play around with four loops and question two is practicing with our double loops so having one nested in another which are particularly useful for 2d arrays so first of all try and populate an array by counting up from 1 to 25 we're making sure each sub list in the second dimension is a group of 5 so 1 2 3 4 5 will be in one it will be an index 0 of your list 6 7 8 9 10 will be an index 1 and so on up until 25 and then to show that two views like I have done here have a separate structure and then print out each individual group on their own line and as always there will be a solution in the description