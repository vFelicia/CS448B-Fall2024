hi in this video we're going to be going through a really really common classic really programming task which is replicating the game fizzbuzz this was used I say was because it's sort of too popular now but was used as a common interview question because it's not too hard to do but if you can't program you can't do this so for quite knowledge is what we've looked at so far in this playlist if you have used this playlist but really for this padding to lists and also printing form lists using different loops and particular while loops and using for modulo operator as well so fizzbuzz as a game you may have all played it in maths I certainly remember playing it on a Friday afternoon in maths whether teacher ran out of things to do what Voigt works is you count up from one so you're counting up from one one two three four five but any multiple of three is replaced by the word phys so you go one two fizz any multiple of five is replaced by the wire buzz so you'll go for buzz and any multiple of both three and five is replaced by the word fizzbuzz so 15 is the lowest number which is both in multiple of three and five and so you'll say fizz bus fizzbuzz when you get to 15 however I want to make things a little bit modified because I want to test out a few more skills so I want your program to begin with views of being asked for how many first buses they want printed usually they're asked for how many numbers they want in a sequence here aren't them to be asked for how many fizz buzzers they want printed so you know even with 4/5 buses you'll still get quite a long sequence up to 60 so the sequence should be generated by program and stored unless so for example I just gave if you want for fizz buzzes then your list will go up to be 60 because 60 is 4/4 fizzbuzz first one 15 second one is 34 third one is 45 and the fourth one is 60 so this should all go in a list which is not a ton of reason for us other than just to practice using lists once you have the list sort of populated with your numbers in it you're going to van iterate through this list and help of a sequence on the same line except for when fizz bias is printed so like this shows at the bottom of the screen you know I want to pause it to have a look at it properly but we've got on our first line so the first line here is asking the user for second line which gets outputted is four starts of a sequence we just come from that list and it's printed so of one after the other on one line except for when we get to fits by so 15 and this goes onto its own line when we go back to the normal sequence on one line until we get to 30 where we get another face bus on its own line being able to replicate formatting like this when printing is a valuable skill as well because by default printing is not going to make it look like this so try and match this formatting exactly and to potentially help you build up your code here are some success criteria which pretty much you can do in order so you're gonna use a user input gonna use iteration and selection you're going to use a list method you're going to use a bunch of operator well you should use much operator and then also use a billion or so called low logical operator add some comments that's always a good idea and then you need to print out the contents of this list in the format I specified on that slide and if you'd like a bit of an extension here are some additional criteria not as hard as in the previous video in a sense for you shouldn't have to look anything up here first of all make sure that user input is sensible so validated to make sure there's a suitable phone number provided because if they input a thousand your sequence is going to become so long that it is not a good idea so you can limit the number very important also make sure it's positive and so on validation is checking to make sure it is suitable you can also instead of a one dlist still by values in a 2d list so if you have the original numbers stored alongside their labels why you might want to do this I'm not entirely sure it's only really for practicing it because for most of the numbers where they aren't multiple of three or five you're just gonna store one x 1 next but it makes a bit more sense when you have your original number and your label maybe you want to keep track of what the original number was that would enable you to do it and storing it in this 2d way is a super harder than in a 1d way and also printing out as a tiny bit harder as well so it's good practice and finally it's in italics because I haven't taught this yet if you know how to write a function trying to write a function for us is a good habit to get into dealing with parameters and return values okay so now I've shown you recommend you pause and have a go at this it shouldn't take too long I'll now go through the answers but I'd really encourage you to try it yourself watching me do it is not nearly the same as you try it yourself and if you want to skip to the solution there'll be a link in the description as well ok so I've started with just my input because I think that's fairly selfexplanatory now but I need to now do a loop to actually start generating our sequence and what type of loop doing would be most suitable here we could do over a while loop or a for loop IVA is okay you can generally interchange them but while loop is generally it should be used when we are not quite sure how many times is going to repeat a for loop is a definite loop we know how many times are going to repeat here we are relying on the user input and Sirte while loop is more suitable because we're not quite sure what's going to happen what we're relying on a condition right because our condition is going to be is our we could set account variable is our count variable going to essentially wanted to loop while our count variable does not equal are specified limit by the user so count is going to be how many these buzzers we generate so we can set these to be together except we're going to be careful because an input is always going to be a string and so we're trying out here we set the initial eyes count to be initially zero count is an integer and fizz buzzes is a string because I haven't casted Bichette stuff but I make sure I wrap around my input costs need to be an integer because otherwise this comparator would always fail we'll get stuck in an infinite loop so we're going to every time you come across a fizzbuzz we're going to increment miss count and eventually it will reach this limit specified by the user we do need another counter here effectively because this count is just for first buzzers but we also need to keep track of the actual number in our sequence so again let's set this to be I guess we supposed to be one initially because we're starting counting from one so now within this while loop we thought the indentation to show that it belongs to a while loop we no need to check to see if that number is going to be one of our three possible labels right so we're now doing our selection so if I do if number equals equals I want to see if it's going to be a a multiple of three so actually I don't need to do to actually I need to get rid office equal sign because we're going to use for module operator and modulo what it does is returns remainder after a division so if this number is a multiple of three the remainder should be zero once we divide it by three right so we could then set this to be zero so we shouldn't have any remainder if it is a clean divide if it is a multiple in other words and so here we are going to basically write this is going to be just leave the time being slowly fizz we could do an oiler because we have enough condition so if that one is not true we might say it is going to be a multiple of five again the remainder should be zero this will be a buzz but if we have it to be a multiple of three and five so in the first buzzy issue here is you know if this number is a multiple of three this condition is going to be true and so we're going to keep the code in here without checking to see if it's also a multiple of five so we need to actually amend this condition to use a boolean value so we use here we want two conditions to be true for this F seven feature because we want to be four fizzbuzz and not just fizz hopefully I'll explain that okay and where you can sort of combine two conditions in one is by you could you know nest another if statement within a massive stone but actually it's more efficient and more sensible just to add in a like that and and keyword because and as a boolean value we're looking down here for a boolean operator as Britain operates not a billion value and wonders if and is true only if both sides of this expression are true so any lefthand side number is a multiple of three and also for one side where we do the same things but with five and this needs to be a multiple of five as well just drag that across so both sides of this operation to be true for the entire condition to be true so here this is fizz bus and then we can check to see if it's just fizz or just buzz pure des he doesn't matter so much number three is just give me four first okay and then we can add an else because if if it's not a multiple of both three and five not my spliff five no multiple of three it's just a normal number here and so we just leave it how it is so we leave it so I'm writing these sort of bodies as comments but because what I need to do in my slightly contrived scenario we are wanting to use a list to store these values so here we were wanting to append the value to a list so we can use the append method on a list to do this which is what I mean by use of a list method we need to initialize our list first of all this needs to be done outside of our off.if to our selection structure so I'll put it up by these values here if we create a list every time we are iterating through that list would be local to that so we don't want that we want to have a want to be accessible by our entire program because later began to print it so he'll put will initialize the list right at the top let's call this sequence and this is going to be initialized to be an empty list so just two square brackets back to back now we can append our values to this sequence so where we do this is by referencing our lists which are called sequence the meth is a method here so we follow it with our . and then the method name which is just a pend we have brackets and inside brackets is what we where we put the value we want to append so here we wanting to append if it's a multiple of three and five we're going to append fizzbuzz as a string I think I did fits barzoni exclamation mark and we do the same with our other sorts of labels here so this will be this one's buzz without the exclamation marks not as exciting and then also fizz I mean if it's our leave if it's just a normal number we're just going to append the number itself doesn't need to be a string here we can append it as it is which is an integer so we're just appending number here now we need to make sure after this whole thing is done after the we end this sequence of selection of different clauses outside of it we need to make sure we increment our number so in every loop we are adding one to our number and do this using movement it so an operator to make it a little bit shorter so number plus equals one because we're now looking at the next number in the sequence you also need to be careful because right now we're gonna be stuck in an infinite loop because count is never gonna equal fizz buzzers because we are not doing anything of count the count is always going to be zero sometimes for user into zero we are screwed so we need to make sure we are increasing the count and we're going to do this when we are getting a fizzbuzz right because that's what we are counting in this case so count also incremented but only when we have fizzbuzz there okay we're not quite done because we're not she printing anything yet but we can't just sort of test this by just at the end of this whole thing once we enter once we leave this wire loop just by printing the sequence the list she's not a very pretty way of doing it but it released allow us to check our code it's a probably a better idea to test it more frequently than I have here already let's just do it easy one just do two and see what we get does this look pretty much right it does so that is good because we go up to 30 is our second fizzbuzz and 15 is our first one so it looks like that cell working well or working okay at least the main thing here is I would save you order off your selection because I've got it wrong first of all as you saw I have to change around my conditions because I realized what actually if we get the order wrong it's gonna check the system or put a three or five and never actually check to see if it is fizzbuzz as well so we need to check that first and then move on to our sort of sub conditions Bulova and also making sure our condition in our while loop is met at some point right if we didn't add a miscount we'd be stuck in for loop so that I'd be obviously a big problem if I this is Tesla and see what looks like if we would have forgotten about just due to only one but it's gonna presume well we're never gonna see off sequence because we're not printing as we go anyway that was not worthwhile showing so now let's we want to print out this sequence in a nicer way even is printing out for war list so once for list is generated we need to Van iterate for again here maybe a for loop is most appropriate because it we now we have this rebus list we know how many items are going to be in the list and so we can just iterate for it and also for loops and five not nice because we can just do for item in our list name to sequence and we'll go through each item one by one so we wanting to print this but if I just print item it's not going to print it in the way we want it to in the way I specified in my sort of criteria if this is gonna run let's see because make sure I fixed my coat so to is nothing set on separate lines which is not what I specified in my description so your honor we want for sort of normal numbers to be at all on one line separated by commas and fizzbuzz run its own line so how are we going to do this well by default print always goes on to a new line so print kind of ends with our new line character which I assume I've taught this in tutorials is for backslash so this backslash n not just about session on its own is put back slash n toes for computer to go into a new line so it ignores this and tells it to go into new line but print by default has this anyway so can we can change this by adding comma after item and using the end value which is hidden by default or isn't you need to actually access to change what was going to be at the end of each print statement so here we want just a comma and maybe two means a space may be an optimist so buddy focus is going to be a backslash n but we don't see that which is what I was trying to say but we can change this to be just a comma or whatever we want it to be okay so that is one thing we can do let's just try this it's not going to quite fix it properly refresh fat so it's now all on one line so it doesn't look like it is because I've only got so much space but that should be all in one line separated by commas it's better but not exactly what I want fizzbuzz is going to be it is embedded in all of the normal numbers so what we could do is just for fizz bars you know make an exception and make sure the print is normal so here's another if statement here embedded nested in was for loop so if the item equals equals there's bars we are going to instead just print the item without any comma after it so it gets its own line and then anything else is going to be else let's have a look at this how is this gonna work and if it's buzzes do you want we want to and so this is not quite work because the the print a new line goes after this fizzbuzz from Astaire's let us make sure we are adding in newline character before this as well so before our item which is fizzbuzz here we are going to add a new line character so i can do something that in fact we can just change this to be fizzbuzz because we know what it is focusing on character should make it sort of a fresh line before each of its bars let's have a look so now that sort of fixed so it were pretty much there the only thing is I didn't particularly want I don't think this comma after 14 because it just looks a little bit strange I'd rather get rid of the comment that was in my specification as well so let's see how what we can do about this alright so taking a second to think about this myself because it's not you know I don't know often when you're trying to formatting printing in a specific way it's a bit of a bad job because every scenario requires different formatting for our more advanced Python features which make formatting a bit easier but for now we can't do this using just what we've covered in the tutorials so far however this for loop is not particularly helpful to us I chose this one because it's most obvious you know if you want to go through a list Pifer makes it really really easy for item and sequel it's easy where you can just have access to the item and print it out however we don't always that's not always sufficient and it isn't in this case because we'd be useful here to have access to the index of the item as well so its position in the list and so we can we could what we could do we could have a counter and use that as an index set to be zero but let's just do it properly and just quickly convert this for loop into a different version which is a bit more useful to us so we want to do 4i findex in range first time so using range as opposed to just telling it well off Lister's and this range is going to start a zero because your next thing starts counting from zero and it's going to go up until the end of the list so then of sequence like so much I've got this two brackets Python always counts up until the last one without including the last one which is why we don't need to do lens sequence minus one to account for the zero indexing so this will work but now we need to change our code a little bit here so this relaxes the item anymore we haven't got that variable to me to start indexing it instead so do your sequence and then have our square brackets and exit using the ie counter in this case however we need to take a slight step back because we want to change have a formatting you're not just rewriting the loop so the reason why I've switched to vneck scenes as a few where should you do this right you could use a factor 15 it's for lowest common multiple for both three and five and so it fizzbuzz always occurs at the same point off the fifteen numbers you could use that but I think it's probably best if we may be trying to create any more general version say if his bus changed as a game in the future so what we could do we could be looking for we could be looking for just we could be looking to see if or evaluate indexing so it's e coups sequence I but let's just edit the code we've got already here but it's a one run look at I'm trying to see if my next value is fizzbuzz because if the next value is fizzbuzz I need to not add for comma right if the next value is another number and other label we don't need we're just gonna have to come or not leaving off the commas here we're just going to print the sequence itself without visiting yourself from index without actually pointing the comma after whereas if we are doing any other situation we're going to print a sequence of a sequence value the item with four comma as the ending point right so here the only points but he fought a newline character otherwise we're going to have a comma but we haven't actually accounted for fizz buds here so visiting one the next one the next item is bus we're going to just repeat with that edit how we're printing previous item but if the ELA current item is fizzbuzz so just eye on its own we're going to print out fizzbuzz on this new line um because the previous print is gonna have this one by default new line we can just print this one has fizzbuzz okay so it's worth giving us a go I do think we're gonna have in it I can tell we're gonna have an issue here because we're going to get an error right at the end so it's printing actually how we want it to right up until the end right we can see we've got for commerce in this or mid line points and not at the end which is perfect but we have an issue where it's going to the end list and X's out of range and this is because in the last instance in the last iteration we are trying to see what sequence I plus one is but we don't we're the end so this is trying to look for a value which doesn't exist so we need to sort of changes to be a kneeler first of all going to have another condition checking to see if our character if our items have you end of the list because otherwise we can't do that little trick we did below says to start us off with an if and we're going now see so maybe your best way of singing this is seeing your item and it's it normally is the same as the last item of the list and we can do this with a nice trick for 1 index is the last item so we can see if our our current value is for last one over this and not maybe not the most efficient way of doing it but it will do the job so here we are going to what we're gonna do just print prints for sequence value which will be fizzbuzz in this case okay but let's have a look doesn't fix it us try and find out instead of looking up a code so yes it appears to fix it which is good it's not a particularly elegant way of solving it but often as I say it sort of a budge drop you just try you know look at each individual case and adapt your code to meet it but it is a skill definitely being able to replicate some formatting in your code because this is not really easy to do and there are a few different ways which you can do it again the kind of order of our selection matters like I did up up top you know I had to check to see if our if a value one is for last Friday before we checked anything else because we would have had the error so if you order does matter EAL if always comes after if but remember if one of these if you have a block like this if one of our missions is true graph clinicians don't get executed at all whereas if you had all if instead of e lifts all of these would be checked which is not really what you want okay so in terms of our core program this is all of it except that we all of our criteria except for misuse and comments I'll quickly add those okay so as it a few comments I mean they're not yeah it can be hard teaching people to learn how to add comments because you know it sort of the early programs comments are not always necessary and it's tempting sometimes to add comments to every line actually that's over explaining it but once you start programming properly if you get a job doing software development you need to add comments because your coders become a mess and it will become really hard to maintain okay so that was ROS all of our core requirements to extend this my first one was to validate the inputs to check the input make sure was valid right now if I run this our code is not very robust that's a strange however applet shows that a strange way so if I type the Navy see here as opposed to a number we're going to get an error because we're trying to convert to an integer doesn't work like that I could alternatively add I could 1 for 550 odd and replicate quite a good job we're actually of Demers quickly but you know that's potentially if on a slower computer that could have taken a while and you know so you only limit the size of the input and also making sure it is a valid number so if we're going to do this generally is having and keeping to ask for user until they get it until the enter a valid input so we're first we're going to ask for Matt's fine but now we're gonna have a while loop a while loop because again we're not sure how many times the users going to get it wrong in fear of the user you get a wrong infinite number of times and so in the condition to control this so well we want so first of all take the size of this right so while this number these buzz is is less than what you want to be so what is greater than SAR limit should be twenty just for an example so while it's greater than twenty we're going to just ask them again right maybe we can even put a message to say you know invalid valid and then we're going to try again right and this will keep looping it's what we keep you know if I keep entering values above twenty so it limits that which is quite hopeful baby if your program is going to take a while to run potentially but in terms of making sure it is a positive number we can use a a method introduced to the last challenge video called it is digit so here we we could have another wildly positive whispers a bit kind of bonus or a nested one so again we can use a boolean value to extend this condition and here we used an before and needs both sides to be true for it to be true so here you know that doesn't make sense right because one side would be going twenty and one side up in number so they never both can be true so here we need or loop which is like it's not uppercase or well the condition will be true before if one side is true even if you have one is false so um here you can use is digits that we're gonna need to edit our code a tiny bit so fizz buzzes door is digit and what this does is this return returns true if it finds a positive integer but if it's false which is what we care about it will return if it's false it will be a negative or a string right so here we're going to ask them again if it is a negative number or a string so let's Raman so we're gonna have an issue because and if it's buzz you want to try ABC so well first of all our code is trying to currently convert straight away to an integer but here we're not sure in our line two if actually this value is a valid ins just same down here actually so what we need to do is make sure we do this casting after we know the input is valid otherwise we will be getting errors right so I can down here just quickly do fizz buzzes and just change it so we are casting a previous value the first buzzes to answer them now we know it's safe following our validation it's a shame we can't get this condition on one line without squeezing this down okay so um ves I don't think will be the fix because what I was concerned about was I don't know what formatted like this the CERN was if we had say for just number 65 type out greater wise not supposed to be an interdistrict okay so we need to actually cast these buses up here which is still not quite as she was expecting but that's fine it might work now essentially if it's buses it's coming in as a string and so needs to make sure it becomes an integer so let's try this now ABC invalidates your footing okay so I've realized what the issue is here a week so we need to switch our conditions here because for a way if a computer will work when it goes through this code is it will it will be checking the first condition right so the first condition before was in fizzbuzz as though if it's a string then clearly we have an issue here right so let's get rid of this and just I've just swap these two sides of our condition around so first of all now it's gonna check to see if this is a digit which if it's not if it's not if it's not a digital assist ring it's gonna because it's all it's gonna automatically mean this condition as true and so it's gonna go forward into our loop but if this is true so it is a number that we can main cast it so let's try this so if you're does matter here because of how we are arranging this so let's try ABC now it just works it does in fact that you know it says it's invalid best naturai 25 which again work it's a mallet but now 19 should be alright and that works ok so just to say that gay I'm not sure how clear that was because I was trying to figure out myself we have this wildly pair right we have a condition with two sorts of size two expressions either side of or before hand I wasn't working I was checking to see if our value is integer than greater than 20 but we were casting it and so if it was a string if you use that inputted APC is trying to cast it to be an integer and it can't do that to make a comparison but changing rolled around first of what's checking to see if it is a digit if it's not a digit meaning it's a string then it's going to because it's all the whole thing is true and so it's going to move on to line five and ask a game however if it is if it is a digit if it is an integer then moves on to check on the second condition which will be able to been casted because it is a number and so we can do that comparison so if you only does matter you could get round that by having a nested while loop inside but it's a little bit cleaner to have one condition like this okay right that was our first of two extension criteria do validation now we want to store values in a to Z list like so we have sort of a we have lists within a list each a list is a pair within the wider list and we have our label next to our value so again a bit contrived but it's just practice demas right so we have sequence initialized here as an empty list we can leave this right between to edit our code down here because right now we're just appending our value straight to this outer list in a way we need to create both sort of inner lists and put the values in the unless the member the enlist in the outer list if that makes any sense I hope it does so we need to now assign another or initialize another list in our while loop this time because in each iteration we want to create a new table list to go in our sequence list mr. bliss will just be a pair to encourage player and again which is initialized its to be empty so stead of appending to the sequence we're going to append first of all to pair so in my slide I had our label as a second item so before this we're going to also pen for the value itself which is just number I can append an integer string and so we need to do the same thing down here for phase and biases for same sort of idea for the elf's value where it's just a number itself it's a bit weird here but we're just gonna forsake of things append this value twice which you can just doing two lines like that but now the important thing is like where we are incrementing our number at the end of this while loop you also need to now append our source of just created pair to our sequence itself so now we're going to append the sub list to the sequence list so append and pass in pair like so so now if I run this and just we size my screen I imagine it's gonna print out it's just we set this quickly margins going to print out the list itself in a sort of 2d structure which might look a little bit strange yeah it is because our code down here is now has only got one index and you should have two indexes to fully be able to print out a 2d list so because we only want two so normally for A to Z list if we wanting to print out every single item we'll need two for loops nested within each other but here we just want one value in the pair so what we need to do is just add in a second index to all of our references down here to get the second item which is where our label is stored like fizz down and up over here if it's bars over here we just want the label right so the second item and so via next will be one because the first item has gone index of zero so if I just append this index on to all of our references we should be able to run this code fairly normal it should be exactly the same if I haven't missed one off let's try so it's good for just tufas buzzes and yeah it's back to how it was before so that is my potential solution to this problem I outlined hopefully how to get with yourself and I had a good go too if we didn't try to do all of it that's absolutely fine there's just practicing and learning and so on so if you want to see this code you can have a look at the description otherwise thank you very much for watching