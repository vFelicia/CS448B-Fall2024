hi we're now looking at relational and logical operations we look to arithmetic operations in our first proper video on Python those are folks on numbers these are focused on boolean values okay I've got to wrap it open of course you can use any IDE which you want to but the interactive show is quite useful for demonstrating operators because they usually just a very small section of a proper program so we've looked at as I say arithmetic operators which work on numbers these ones working more on boolean values so a boolean value is either true or false it's a data type just over to our force so we'd write true capital letters and force like that can set variables to boolean values may be something like logged in equals true bunch of octane you might set that variable to be true so you can keep track of the status because boolean values can only be one of two values either true or false we can easily map this to binary which is how computers work and so really true could be said to be one and force can be zero so if I try to treat plus true presence I get two because really true is representing one and so we're doing one plus one likewise buddy force plus true force is zero true as one I wish you get us one I think that's important to have in the back of your mind okay so first of all we have our relational operators also called comparison operators I'm writing a comment there with a hash suppose nothing's gonna happen and we have I believe six of these let me show you them the whole idea of these operators is to test between two bits of data so the similar to explaining misses just show you so our first one we can do if we do maybe five is less than seven or the less than sign is a relational operator it's comparing two bits of data called the operands either side of there it's comparing five to seven is five less than seven it is so this will evaluate to true and relational operators always evaluate to boolean value so either true or false which correspond to one or zero we can leave the opposite of this for greater than sign so is 5 greater than 7 no it's not so I get false fat time if value something like 5 is less than 5 I should get false because 5 is not less than five it's equal to five so if we want to do a more inclusive operation we can do five is less than or equal to five so the less fun equal to sign we can't leave a little underline what you might do on paper we follow it with an equal sign like this so this should be true conversely if I do five is greater than or equal to five the other way around this is also true so notice how the equal sign always comes after the lesser or greater than sign it's not like five doesn't give a nice arrow unfortunately like this this would be an error this isn't a valid construct in Python we get a syntax error we've broken rules by putting the equal sign before for greater than sign so there's a four of our relational operators down which is nice be able to relate to actually being equal to so we know we're and either to set a variable we set the variable for logging in we could do a name equals whatever but setting a variable right with the operator for setting a variable is just a single equal sign so if we're trying to say what is names we're trying to compare name to this random string we can't use the single equal sign because this is assigning the data to variable name so instead we have to use a double equal sign so if we do name equals equals just a proper name like that press Enter we're now comparing the variable name to this string which is false because John does not match up with this random string so something like 6 equals equals 6 would be true and something I 6 equals equals 7 would be false so it works how you'd expect it to and we can have variables either side we can have any data type we want to either side of this operator the opposite of is equals to comparison operator is not equal to and we do this with a exclamation mark before our first equal sign is a little bit confusing because like I said we can't use a single equal sign for a comparison but yet it's used in but not equals and also the greater than and less fine that you can equal to signs as well so anyway but that's what it is not equals we have an exclamation mark and equals 2 not equal 6 will give us false because 6 does equal 6 whereas value 6 not equal 7 this was true because they are equal so those are our relational operators we'll use these a lot in conditions in looking at loops and also selection statements okay let's now look at our Watson say boolean but logical operators which are also called boolean operators these also evaluate to true and false they evaluated boolean values but really they are boolean because if you've done any logic or boolean logic in particular we have and or not so these are free operators used in boolean logic like I say boolean maps to binary which is what's used in computers and canoe all sorts of logic to run programs really using just these free operators unlike our relational operators these need to have operands need to have data which is boolean so I can't do something like not 17 press Enter when I get false but it's not really telling us much instead of been designed to be used if only somehow not live where it's a lower case and upper case or something like not force or not does is do the opposite of what we're doing service if we're saying not false I want to get true from saying not true I want to get force I can also use 0 and 1 so not 0 it would give me 1 not true but not 1 will give me 0 or false I can't use I'm not 5 that's right at the top I mean it gives us false but it's not really working how it should be working we use truth tables to show all the values of boolean expressions I put the really simple truth table up for not now but we've covered it just in our code so not as an operator only works with one operand only one bit of data which should follow it so here 0 is the operand it follows it but we also have or and and which both work two operands either side of it so let's do all first of all or will evaluate true will return true when either side is true so if I do true or false and press ENTER I get true because the lefthand side of or is true despite the righthand side being force it doesn't mind is still going to return true because one of the sides is true if I do false force or force this will be false because neither side is true and conversely true or true will be true because both sides are true even if only needs one I can for completeness we can put for two stable up as well witches this one except with exception of ugly false or true just for your purse it of the one at the top is what's the truth because one side is true okay let's do ant and is more picky because and would only return true if both sides are true so if I do true and true press Enter this gives me true any of a combination and we can put the truth table up as well will be false because it needs both sides to be true and hopefully you have a play around with it yourself it's quite easy to have errors especially because I instinctively always do capital letters for for boolean operators because other languages do it in capital letters but this it doesn't like this it's got to be lowercase i get a syntax error if I do a even one uppercase letter for and because these have two operands if I do something like force or without the second operand again it doesn't like this it needs to have the two operands to be able to work okay so this is all well and good but for power does come once we start to combine our relational and boolean operators and put them into conditions in loops and selection constructs as will do in future videos so let's set some variables to play around with let's do a B and C but where you can use a shaver so you can assign multiple variables on one line by using commas which is a little bit quicker sometimes let's do five seven and twelve press ENTER so here I could have done this on three different lines but I've set five to a servant to be and twelve to see like that that's a little tip if you want to save some space so you can use something like not a is less than C and let's see what this evaluates to so first of all inside the brackets will be evaluated first like normal maths so a is less than C is five less than twelve yes it is so this will be true but we're doing not true then which will be forced so it works like that I could do something like a not equals B or true or true and see what happens here so first of all let's do each side individually lefthand side a not equals B well 5 does not equal certain so this bit is true so actually even without looking at this this would be true but then because it's only one side needs to be true and all but then here true or true would be true as well so this one would be true but we could just look at one side to get that answer already we can do expressions with just zeros and ones of course we can't use any other number it won't really work as we expect because they don't map to any other number let's have a look at this one so we've got first of all left hand side not to one or zero let's do 1 or 0 first sort of in the bracket so 1 or 0 this is gonna give us 1 because we have one on one of the sides so this would be true or 1 and we do not true so it becomes false other side in fact we don't even need to look at the other side because if we have on with an and one side is false from the other side doesn't matter because it's going to evaluate false anyway we could check the other side just for completeness we've got first of all not one here which is 0 and then 1 and 0 would be 0 anyway so both sides are force and it evaluates to false this try now is a little bit more about prediction than actually programming yourself so for question 1 have a look at these four snippets and try and figure out what they would evaluate to what they would be what votes show on screen if you put them into the interactive shell having assigned for free variables at the top and for question two have a look at this small program for passwords and try and figure out similar to question 1 really well the final value of this correct would be based on a sequence of user input of Big Ben Big Ben and Alice so see if you can figure out what would be going on if you ran this program