hi in the last video we looked at how we can create our own userdefined functions now i want to go back and use some other functions written by someone else builtin ones which in this case are going to allow us to generate some random numbers okay so as i say we talked in the last video about userdefined functions how we can create from using the def keyword do def my function can have some parameters if you want to or not and we can use a return value if you want to or not to pass some data back to the main calling functions if i do something like print hello i can then call my function if i get rid of my indent and call my function to reference it and we'll get hello if i wrap this in a print we'll get hello printed to the user based on that return value so great that's fine but if you want to do something a bit more complex like generating some random numbers i could well write a function for this but generating a decent random number is quite a challenge and what we're going to look at today is not really totally random we're going to look at how we can use what and often refer to as pseudorandom so you may have come across the word sudo talking about pseudocode so sudo is greek for fake so pseudorandom means we're sort of generating fake random numbers so numbers which seem random but actually are not random and we'll talk more about this a bit later but i just wanted to mention that now because if you want to generate truly random numbers you have to use some natural occurring event like radioactivity which is truly random here we're not doing that we're going to use well functions which rely on time and time since i believe 1970 or 1980 um as a seed but anyway we'll come back to that so um we're not going to write our own functions to actually generate random numbers though we can use a random function to help us instead we're going to use builtin functions and these builtin functions are not available to us automatically so there isn't unfortunately a random function we can just use instead we have to import what is called a module so a module is a group of related subroutines related functions and methods which effectively fulfill the purpose of a library so a code library is just a bunch of subroutines which are available to us to use i mentioned how variable various builtin functions like print and output are so so important to us printing an output print and input because they're quite hard to do and there are other functions which are not really hard to do but there's no point else redoing them because someone else has already made them and random is a bit like that some random functions are quite hard to make some are less so depending on how truly random you want it to be but thankfully we are able to import a module to do this and so we do this using the input keyword and we follow it by the name of our module in this case it's random and some modules are available with for default python installation so either available if you've downloaded python or available on an ide like replits other ones you may have to install which are a little bit trickier so if you are doing something like machine learning you may have to install a module in this case random comes with default python we just have to import it and now we have access to other functions other methods which are only available via the random module okay so let's say we want to generate five random integers between one and a hundred i can do a for loop to just repeat this and save us time for iron range uh zero to five will give us five values and then if i print and inside my print statement i'm going to make use of a random sub routine so i'll do random dots and then i'm going to call then this one i want to use is rand int to generate random integer this came from the random module hence why i'm using a calling it like a method and now inside the brackets it takes two parameters so the lowest value we want so if i want it to be a minimum one followed by at a maximum 100 and if i now run this code we're going to get five no we're not because i did that wrong we're gonna get five random values between one and one hundred and if i run again again i'm gonna get different values like i say not truly random but random enough for us to be able to use it perfectly fine in a program and if we don't want it to change every time we run it say i want to be able to send a program to a friend and or want them to be able to access the same values i did i can set a seed so if i do random.seed and if i put any number into the brackets if i just choose um two is my favorite number i can supply a seat of two and what this does is this is the starting point for this random action so it's going to use two to start off and this force for numbers to be the same every single time because we're starting off with the same number and this is why these numbers are not truly random they are instead deterministic if i can spell that right hopefully deterministic because we can supply an input and we know what the output is going to be based on the input so a seed will cause it to be the same if i get rid of a seed it'll go back to changing every single time okay if instead of integers you want to have decimal numbers so reals we can instead use a random random method within the module random so we get random.random this method has no parameters takes no parameters takes no arguments i should say really and we can print this because what this does if i can spell a number what this is going to do is generate numbers with inverrange zero to one but in this case it's going to be decimal numbers we get quite a few decimal places here and if i want to limit how many decimal places we get i can wrap this in a round function and if i leave this with just one i'll make sure i've got enough brackets i am going to this is going to make an integer which isn't very helpful here because it's either going to be zero or one so instead i can supply a second argument which is how many decimal points we want let's do four and now we should get a slightly more manageable set of random numbers if i want to scale these to be across a wider range what i can do is multiply this generated in a way a seed and multiply it by our upper range so let's do maybe a thousand minus our low range let's do 100 and then you add on your lower range which in this case is 100 and then we should get bigger numbers within our range i won't show all of the functions because some are really specific and don't really need to be used for many people but in terms of lists there are two useful ones in particular so i've got a list called hat you can imagine you know a raffle having a hat and some names in the hat and you're going to pick one at random to give a prize to you maybe we can use a random dot choice method and inside we're going to supply our list which is hat as our parameter as our argument i should say always mix those two up and now it's going to choose a random item in our list in that case bob if i on it again i'll get a different one charlie back to charlie because it's random each time so that can be quite useful we can also shuffle our um list so if i shuffle hat like this uh nothing will happen because it's not um that's the shuffling yet so actually we shouldn't really have this in print we get none returned which isn't very helpful so if i shuffle this that's great and if i now just actually again not very helpful if i now print hat after the shuffle we're going to get a different order to one we had before because lists are ordered does matter and in that case it's changing the order for us that's also quite useful so maybe we are changing these names to be of athletes and we want to go through each athlete name and generate a random score for them maybe we're doing long jump in some school sports day maybe and we want to generate a random jump length for them so for world record for long jumpers as far as i'm aware about nine meters just below nine meters and so we may want to generate numbers between the range one and nine i think probably you can manage one meter even if not very good i think i i hope at least so we only generate numbers between this range so we can use what we did before we can let's just do jump length and choose random dot random and make sure we make this scaled by doing so let's do 10 as our upper limit subtracted by a lower limit which is one multiplied added our lower limit which is one again and now we might want to round this a jump length equals round jump length and let's do this to two decimal places and now we can print the athlete followed by their jump length which you've generated randomly so let's run this let's get rid of this white space and see what happens so um we get some values here which is fine it works how he kind of wants it to there is an issue here so we have a new world record holder because alice has jumped nine meters and like i said as far as world record is i think 8.95 because i just looked up and we have values which go beyond it so it's not very realistic for you just going to magically beat the world record and that's because these numbers are distributed uniformly so they're distributed uniformly between one and nine and so you're likely you know just as likely to get a value of nine as you are a value of one and that's not really or as a value of five right so it's not that's not really realistic people tend to gather about a certain amount so maybe the average is five which still seems quite far um but you know it's very unlikely you're going to get nine it's possible someone can get nine but it's very very unlikely so instead of using a uniform distribution we can use a normal distribution also called a gaussian distribution now you may not have come across this in maths it sort of depends what stage you're at but this is where we have a nice smooth bell curve and it's a way of generating probabilities which match normal human life we don't tend to have people who are low massively tall or can jump really really far you have a very few people who can jump really really far or jump really really a short length we tend to sort of group around the mean and that is what a normal distribution is modeling so instead of using the random function again i can get rid of this and instead do random.gauss so gauss is a mathematician who this distribution is named after and this function this method takes two arguments the first one is the average so let's say just the average is five which may not be realistic i'm not quite sure and our second argument is for standard deviation so this is a measure of how spread out people tend to be so let's say the majority of people are going to be within about a meter and a half of that mean and now if i run this we're going to get similar looking values but now they're much more centered around the mean so majority are going to be between um 6.5 and 3.5 we do get here alice who again is smashing it with 7.88 that's a pretty good score but it's not nine you know this is much more realistic assuming she was a professional athlete i suppose so the values are a bit more realistic we can still get some extreme outliers but it's it's not a uniform distribution it follows the bell curve this right now includes two programming exercises first of all i want you to based on the last video create a function called gen random list which is going to take three parameters and it's going to return a list of the size which we specify as our first parameter and then randomly generate values in that list until we hit the length between the lowest and highest parameters which also supplied the second exercise is about using the gaussian distribution we looked at just now and generating some heights for people so i've supplied a a mean of 160 and a standard deviation of seven so you can use this in the gauss function and also if you want to replicate the exact values i used here make sure you use a seed of 10 and you should get the same values here but the names you can obviously change you can add more names if you want to in your list of names so have a read through have a pause and have a go these exercises will be solutions in the description