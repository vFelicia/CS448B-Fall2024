hello in video 13 in Veszprem playlist we're now going to talk about functions and also the concept of having the Scopes of variables both of these concepts actually we have talked about in passing at least but it's now time to talk about them in more detail we have talked various stages about how something you may have learnt in class when you're learning programming theory may not always totally apply to programming when you're doing it practically and this topic of functions is quite a good example because if you've learned programming theory maybe we'll ever learn about sub programs also called subroutines or socalled routines on their own but I'm doing a multiline comment here with frequent mocks as all of this would be ignored by our program if I run it as opposed to just doing one line with a hash tag that symbol hash symbol should say anyway so we have sub programs and subroutines and these are a construct in programming a really really important one which is essentially learn about if you're doing any exams in it but really what these are is a out of line block of code which can be referred to and we call this could be call this calling ionically in the main program so I think sub programs is a more helpful way of putting this subroutines is just a synonym for this so a sub program is just a really a little program within a wider program and using sub programs in code is not mandatory you know if you never uses a program in your life it's not great but you don't need to use them but they are really really important to make your code organized often we solve problems by decomposing a problem into subproblems and a sub program can be a really good way of containing just for code which solves an individual sub problem which may build up to solve your problem into in its entirety so our various having supper abs is a recommended action but if you ever get a job as a developer you'll need to use sub programs everywhere you'll get fired or not even hired in the first place and so but really this use of sub programs and use them heavily is all part of structured programming this is a kind of a style which is developed I mean programming is not on it is not an ancient art it's only been around for so long but it's been around for long enough the program is no wreck making recommend ways of programming and one of the ways is to use lots of sub programs and make sure they have nice interfaces between each other and you do about using parameters and also return statements we'll talk about and if you have learnt about sub programs you may not have learned about two main types of sub programs or subroutines we have functions which is the name of our video now and we have procedures I guess you also have methods which I have talked about as we've gone through all three of these are examples of sub routines or sub programs the difference is a function will generally Y will return so it returned a value a procedure will not and a method belongs to an object so in Python we have functions and we have methods we don't technically have a construct called a procedure where we can replicate your procedure as we go it's a bit like how in Python we haven't really got arrays we've got a list instead which can do the same sort of job and Python as well as all other languages has builtin functions some languages have more than others I won't have mentioned nearly all of them there are loads and loads of Python and you can have more with modules as well but once we've covered are things like prints things like Len things like input as well etc etc so all of these ones have built in we did not write these I did not write for print function which is a good thing because they would be very very hard to write usually these builtin functions I have a really fundamental as an really important to programming or really hard to do but someone has taken the time to do it for everyone there is not a builtin function for every single problem clearly we need to write some ourselves at some point which is what we're going to learn today but for certain things like printing to a screen how on earth would you print to a screen using just alternative constructs write certain things need to be done for you by the creators of Python otherwise it's not really usable print itself is a bit of a funny one because it doesn't really work like a functioning but it doesn't really return a value it said well it does it just show something to the user but we could take input for example as sort of a proper a proper function so if I may be a sign there's two a variable name then afterwards I can print the names to show that it is working maybe inside I just say enter your name so what being function does so here's a function right we have the wave or wave functions instruction Python is we have a name we haven't identified which in this case was not written by us it was written by someone else because it's built in and for following the name we have brackets and inside the brackets are where we can put arguments we always have to have an argument but the argument is some data being supplied to the function to use in this case we're saying in to your name the function is going to take this and show it to the user so the function input I'm sure is calling print within it because it's printing out into your name effectively and now I can type in up step and we go and press ENTER and now we're gonna get Guido printed out because what happened was what this function did was it allowed for user to type something in once a presence of a value is returned by the input function and saved in this case under the name name so under the variable name so input works by taking an argument which has been shown to the user and relatively user types in is returned back to the main program and can be maybe stored in a variable like I have here so let's look at how we can define a function ourself in physical example again of how you know builtin functions so important I don't know how on earth you would program an input function unless you were inventing a whole new language yourself okay so functions in Python have a set syntax like all other constructs and this syntax is when we are defining a function when we are setting up we use for DEF keyword short for definition and then we put our function name we can choose whatever we want to like a variable we have certain restrictions right I can't do two word function names got be singular a singular word I can't use any reserved word so I can't use def again I can use something my function then I follow this with brackets and I can use these I can leave these brackets empty and then you put a colon press ENTER and like with if statements like with while loops we have an indentation in the body of our function here to differentiate what is inside this function and what is outside so we have to do it was done for me by rep lip you can hide it with a tab besides of being there doesn't matter as long as you are consistent so now if I just do something simple like print hello world inside and get out of it makes write backspace to get rid of it indentation and now if I refer to this which we say calling so if I type in my function and with our brackets like this I am calling this sub program fizz subroutine this function so let's run this and check this works so I'm running it we get hello world not very exciting but what's happening first of all the Python interpreter works by going line by line so it's making its way down from line 1 to line 6 in this case most of his lines up or half the lines are empty but it's first of all reading this definition it's not doing anything yet so for print hello world which has shown to me over here is not happening because we have this definition if I comment out this calling statement I get nothing happening because it's only going to run the code inside the function when it's been called which it has done here so it's going right taking note of his definition and then as soon as it comes across something referring to it it's going to sort of jump back to where the function was defined and run the code inside of it it's why it was called why am i definition I called it an out of line Rock of code right clearly it's a block of code a very short one in this case one line but it's out of line so we have our main program down here often called just main or the main routine and whenever we are calling a function we're going to go back and find where it was defined and execute it so function definitions tend to be out of line out of sequence if I get the sequence a bit wrong and instead make this calling statement above my definition it's not going to work we're gonna get an error because it works sequentially at work starting like one and working its way down so it's coming across in line to my function it doesn't know what this is it hasn't seen the definition yet and so it doesn't it can't do anything it's not defined and that's why generally speaking your functions if you have say 20 functions in your massive program you're going to put all of the definitions at the top or even in a separate file sometimes because if you have them sore mixed in with your main program it's gonna be a bit strange and could cause errors so what I have called here a function and what Python would call a function other people may call a procedure because we're just repeating some code we're not we are not returning anything to the user instead what I could do is I could change print and get rid of this that my brackets here and I could just return using another keyword could return a value of hello world in this case so if I print this nothing's gonna happen because we're not in this case we're not printing anything to the user printing is not when you're bringing something you can't then use that print statement it's just been shown to the user when you are returning a value it can be used in your main program so if I set a variable and call this text equals at my function what happen is when I am calling this function the return value which in this case is hello world will get saved under a variable text so it get returned to my main program so I didn't do anything there fine I'll just print text there like how will you do it in thought what exactly how we were doing with input we're going to get our value which was returned to us and news and return values as opposed to using a print inside a function is definitely a good way of doing it because otherwise you can't really use any value which was created in your function so Connie in my function my brackets are empty which is perfectly fine if you have a proper program and you are following the structured programming style you are going to want to eventually pass in data to a function returning is like passing data out of a function and you also want to be able to input data to a function as in passing data and we do this through something called a parameter so if we want to pass in data we're going to use a parameter to do list or parameters and this and B's are like a variable used only in a subroutine so if I set if I type in is my brackets number this is like me setting a variable call number but only to be used in this subroutine so now if I go back to my calling definition well first of all if I press 1 5 run this now I'm going to get an error because it says I get type error my function missing one required positional argument number because I have defined a parameter is now expecting an argument to this so I possibly way we can maybe talk about to one other issue maybe which would come up so if I just missed put in five in my calling statement and now just maybe could let's just return whatever number is times ten and run this so I said two words where we get fifty because what it's doing is it's passing in five to our function and then inside this function just in our return statement that's using the value of this variable which is 5 multiplied by 10 just 50 misses returned to our main routine so I said two words were said parameter and we also had argument an argument was mentioned in my error message so the distinction between parameter and argument is not the most crucial thing in the world they are used mostly interchangeably technically speaking a parameter is the variable name so in this case number is a parameter to the function my function and the argument is the actual data being passed in so five is an argument not a parameter technically although it's being ret is representing or it's being represented by the parameter number I will often make a mistake I'll accidentally say argument when I mean parameter and viceversa so it's not a huge deal but if you hear me say argument I'm really meaning the actual data and parameter is this variable we can have as many parameters as we want to or indeed none to make sure they are have different names and are following the same normal variable Walser fine I'll do number one times number two I now have to supply two numbers here so five and seven five times seven is gonna be 35 I can also set a default if I want to so I can set the default for number two to be five that means if I don't supply the second argument is still gonna work when you have five times five is 25 because it was not been given the argument for that parameter because I've set a default it can still use the default but if I add in a second argument let's just do seven again it's gonna override the default and make it 35 also I can't say this is used massively often but you may see it especially in certain programs where if you have an Asterix before a to name well you just have one parameter in this case often written as args short arguments there can be anything here but with the Asterix before it this is where it may be you're not quite sure how many arguments you're going to get so in this case what we could do is change this to be args and we will then index it so then if I follow this within the next number of 0 which is going to be the first argument inputted and then we have maybe next number of 1 if I now type in 5 7 and 6 and then eight and a nine like that so I've now supplied 5 arguments to this function it's only going to use the first two so I'm going to use five and seven because it's being flexible because we have sort of unlimited number of arguments here but it's just going to reference them so really what's being inputted in this case is a tuple so like a list really and we can exit like this this may be useful if you're not quite sure how many arguments you're going to get and you can code based on this topple it's a bit risky bow because if you do something like args and then index of eight unless you are going to put in nine arguments it's going to cause an issue so we get a tuple in this outer range error and I should set this point why using subroutines is a really really good idea and by what I mean if you want to be a decent programmer you should use them absolutely it's not just it goes a bit beyond recommend it which I said up a start so using a subroutine is really good because you can repeat code really really easily now a oneline function like this is not the best example no real program might have quite a long subroutine am i I've say 50 lines in it and those 50 lines may need to be executed may need to be called quite a few times in your code and if you need to reuse it so often having it defined once I've top of your program and then called several times so actually reference several times is saving your program having a bunch of repeated code over and over again with a calling statement or just referring to one definition if you're using it loads and loads of times this is much more efficient than like I say copying and pasting a load of code and parameters are really powerful because we can change what is going on inside our function every time we are calling the likewise return values allow us to take some data take some output from our function and I've said for parameters like variables while python is really relaxed so actually it can be any object so you can have like a list as our parameter which is reducible for list functions if my if I maybe just doing like a turn the length of my list like that I can now make sure I supply a list I don't need to actually define it first I could just change it like this and we should get 5 as our output because we have 5 items in our list like this this is really nice and by the way just speaking of lists and list functions a value something like my length my list dot append and I try to append five to this and run this and see what happens first of all well we get an error so we get an error it says name my list is not defined now a few things we could say about this first of all just just take a slight deviation look at what is going on over here so we have my list I may have a dot and we have append and brackets 5 so this append 5 is what we would call a method like I said of a start method works on an object a list is an object in Python and we leave discussion of objects on how to create our own methods until we talk about objectoriented programming which is a fairly advanced topic it would be an alevel topic if you're studying in the UK but I digress why are we having a name error like this because I've got my list up here I've defined it as a parameter why can't I then use it over here well this is all to do with scope and the order of things really matters like how earlier when I swapped my definition with my calling statement they didn't work the order of how we define things is really important so here we haven't despite a definition up here we haven't defined my list to be anything and when we use a method we need to have the object created beforehand ok I've created a new basic programs to clean up the mess if it was for last bit of code so here I've got a new function which hasn't got a return value but has got two parameters we have name and a birth year as could welcome and first of all we're trying to figure out the age by subtracting the current year just 2020 as I record this whatare by vs. about mr. attractive a birth year from 2020 to work up our age in printing let's try this so I've called it with Guido and 1980 we get welcome Guido you are 40 years old but if a weird message but it's just an example so we are setting a variable inside our function called H using a parameter value and we have called it down out of the body of our function because you can see being done is different over here so now if I try and maybe well let me try and print age and see what age has been set to because up here we are setting age to be 20 20 minus of birth year so in this case when we have called air it's gonna be 20 to 20 minus 1980 which gives us 40 so really age should be 40 at this point but when I run it we get an error it says name error name age is not defined and this is because well this is all about scope so scope of variables and the scope of variables refers to their visibility which relates to where they can be accessed from in your program so this variable up here age is what we call a local variable so it's got a local scope it's only available inside this function so age will only exist as long as this function is executed soon this function returns a value or doesn't in this case as soon as function finishes age is lost and no one cares anymore because it's local to this function whereas if I set age at the top to be maybe age by default is initialized to zero this would be what we would call a global variable so its global it's got global scope this means this variable can be accessed by anywhere in the program can we access inside this function they can be accessed outside the function can you access from anywhere where's this local variable can be accessed inside the function say my day with if statement same idea with while loops so now if I print this we get you are 40 years old because inside age has been set to 40 which is perfectly fine but when we don't women print it down here because I have initialized it to be 0 in global scope we get age being 0 so this local variable age is completely separate from the outside world from the main programs to be separate from the variable age up here and that is one of the many advantages of using local variables instead of constantly using only global variables is because you can have multiple variables with the same name as long as you've got different local variables maybe you've got 50 functions it's going to be hard to think of separate name four variables in 50 different functions but it doesn't matter because each each function has got local variables which are kept separate from every other function if you are desperate for this variable age which is firstyears inside this to be made global we can proceed our assignment with the keyword global and age and now this variable is made global and so we get 40 as opposed to 0 because what's happening is because this variable is now global it's going to overwrite the actual global variable at the top and return 40 in fact I get rid of this age initialization at the top we are still me at 40 because here we are creating global variable even if it is inside a function now a bit like the break and continue keywords we looked at in volute videos using global as a keyword is sort of what's available you can't do it but I'd read not recommend it enough I disadvantages of using local variables like the fact that you can have multiple variables with the same name and also make sure code a little bit Messier I've definitely got into a real mess programming and had to use global variables but that was more down to my lack of design and maybe lack of planning than a deliberate tactic you often only use it when you are sort of really stuck and I've got some issue with your logic if you are probing properly you shouldn't really ever need to use global variables in this way and by that I mean setting a global variable from inside a function it's fine using outside of the function but inside of M setting to be global as opposed to local is a bit of a strange decision it also makes means really confusing if you've got multiple functions with multiple local variables and some are global some are local it just gets really confusing so generally stick with local variables and use for a turn value and the parameters to pass data in and out don't do that by using global variables there are two parts to this try now first of all have a look at this block of code in the top right we have three functions here and trying to figure out based on my calling statement at the bottom what would be outputted two views or what would be printed out of this so this was very easy for me to write but is a little bit harder to figure out so work backwards and see how you do you mean to jot down intermediate steps it's not easy by any means and for question to write a welcoming a fairly short function actually which will return the factorial of a number which you are going to supply via a parameter so you may not have come across what a factorial is usually we write it as an exclamation mark following a number so you might say five factorial or five bang sometimes people say that and what we start so factorial is just giving you the product of all of the integers from your number down to one so five bang or five factorial is 5 times 4 times 3 times 2 times 1 which gives us 120 0 factorial is a little bit of an odd result because 0 factorial gives you one just by following the pattern because if you divide it does follow the pattern if you have negative numbers this does not work so what I did and I wrote this and there'll be a solution in the description is use a loop to keep asking if you use it until they enter a valid number