hi in our fourth python challenge we're going to be creating a basic guessing game which i'm calling higher or lower i say i'm calling it really um i'm sure this is a fairly wellknown sort of task to do programming although i've put a slight spin on it so it's not quite the same as usual however you will need to before you do this task have understood how to define functions and including with parameters and having return values and also this whole guessing game is sort of predicated on you being able to generate some random numbers within her range so there are two videos in my tutorial playlist which will hopefully carve over content you need to know for this task so to explain how my version of this game should work let me go through some information here which i'll replicate in the description box in case you'd rather just sit and read it as opposed to looking at it on the video section so the whole point here is a guessing game with the computer so first of all the user is going to think of a number in between a range which they can choose so the user might decide that they want for range to be between 1 and 100 and so the user might think of a number 31 or 100 so it can include the upper or lower range so once for users force of this number the computer is going to make a random guess of this number in the range so if a range needs to be actually inputted the number they're thinking of doesn't need to be inputted and once this guess has been shown to the user the user will see if this number is correct and if it is correct from the user is going to input correct and the round will end and once for round does n the number of guesses made by the computer which i'm going to call the score will be printed out so if the user so if a computer guess is wrong first of all but guess is correctly on my second occasion then the score will be two if it takes five guesses the score will be five so until the user deems the input correct however if the computer isn't correct then the user is going to either type in h lowercase uppercase for higher and l uppercase lowercase for lower to give the computer a clue so if i'll type in higher if the number should be higher if i guess was too low i would type in lower if their guess was too high and the computer can use this clue to make another guess within the new interval so the fact that if the user is telling the computer their previous guess was too high or too low means that you can then alter your guess in the next guess to make it more accurate and so this process of guessing getting some feedback guessing get some feedback will continue as a loop until the number is correctly guessed here are some success criteria to hopefully help you get guided towards a good solution here so you should be defining a function called game which has two parameters which i'm calling upper and lower and it should return the value held in a variable called score these parameter values which is what you call the arguments are going to come from user input so initially in your main routine you're going to ask the user for the upper bound and the lower bound and those values will get passed in as parameters to this function and inside the function you need to generate a random integer which will be generated including and between the upper and lower bounds and that value generated is the computer's guess so the value generator can include the upper bound and the lower bound as well so the user should be able to respond to this guess with either correct or higher or lower and when the computer is correct the function will return to the main routine with the score which can be shown to the user but when the commute is not correct the score is going to increment which means just add one and based on the upper and lower response that bound will get updated accordingly for the next guess so think about how you can use if you use telling you it's too high or too low to update the next guess so this task is not easy by any means lots of people have tried this and not everyone has managed to do it in my experience at least first try once you can do it it's not too hard but if you are finding it easy you want to push yourself even more here are some extensions to try so first of all allow the game to have multiple rounds so so far we've only really allowed it to have one round you you know the computer's guessing it gets it correct and the game ends but here we can allow multiple rounds and it only ends when the user decides to quit so when the user does decide to quit the scores from all of the rounds previously should be printed out so in round one vertical might be five in round two the score might be eight and so on and so on and a second possible extension task of course you can think of your own ones if you want to this one is in italics because i'm not going to show you how to do it because this really works in a very similar way except we're doing it in the opposite way so you need to create a second function which works in the opposite way so this time the computer will think of a number or i say think loosely the computer will generate a number and the user guesses and the computer tells the user is too high or too low and then the game can alternate between the different modes and the winner is the one for lowest score of the two modes so initially you could have the user guessing and then you could have computer guessing and going back and forth and the winner is one with the lowest score out of the two okay and before you have a go yourself here is a quick demo because i know there's been a lot of information so far the first thing you'd see is something like this welcome to the game and then you are asked to enter a lower range so let's do one entry an upper range let's do 50 here so now i'm told to think for a number between 1 and 50. let's do 28 i guess it's 44 so i type in l for lower and i guess it's 30 so it's close again i type in l because 17 i now type in h i guess 24 it's higher than 24. it's 125 higher than 27 and finally it guesses 28 so i can type in c for correct press enter and then it kind of completes and says the score is seven so if you were doing the first extension task now you would give the opportunity for the user to quit otherwise have another round and if you're doing a second extension task you can now launch into the user guessing and the computer generating the number and then going back to back like that so pause have a look at our of the requirements again and have a go with yourself and now i'll show you the solution to the main part of this problem okay so the first thing i want to do is define my function which i said was going to be called game and has two parameters the first one being upper and then lower uh if the actual order those two doesn't matter it seems more logical to have lower before upper but anyway and then we're going to have some code down here right and then i'm going to return score and so we can first of all sort of score as a variable and so we need to actually have a value in that variable which of course we're going to change as we go through but we can initialize it to be zero so we can make sure it's always available to be returned in the end and below our definition we can have our sort of main our main program our main routine which is going to call our function and so we're going to call it by saying its name game and we're going to supply some arguments and these arguments are going to come from the user and so let's just for the time being call them up and lower again and because it's returning a value returning score which is an integer we're going to also assign this to be a variable so we are calling our function the function at the top executes and returns a value and the value is stored under score so we've got the same names here which is okay but it may cause some confusion but i think it's probably okay here so in our main we want to well first of all to welcome the user to the game that seems nice and then we're going to ask the user to input the lower range lower and the upper range upper and we can also just we'll validate these maybe later so um our upper value is going to be going to say input and we'll do the same for lower as well so we'll um we'll make sure these have added later because we'll have to because we are expecting these to be integers as like a upper and lower range we can cast these down here but it's wrapping those variables in the int casting function making sure i've got enough brackets there now the issue is if i if i run this into your range if i type in hello we're going to immediately get errors once i do her range as well because we're trying to convert a string into integer so let me i said i was going to do this validation later but let me do it now so um what we can do and i haven't talked with in the tutorials but i have done it in a couple of challenges i believe is do something like well while upper is digit equals equals false because what is digit what method is digit does is checks to see if your value is an integer and if it isn't an integer it's going to give us false i mean really it's a positive integer which is also fine here because we can't have we don't really want a lower range i don't think so um and also we need also well evo if either one is not a digit we're going to get him to ask to enter a game so we need or here not and because it was false and then we're going to get them to put them in again so if they can't proceed we can't do that casting in line 17 until we make sure it's in the right data type so we could just add a message here saying something like is must be positive integers okay all right so that's all of our main program done for now if we do the extension later i'll show you how to we'll build up this a little bit but now the key bit here is inside our function so we need to actually have our game running in this function assuming this code works i should probably check it first i always i'll always move on without checking it okay perfect so um we are going to really this whole this whole game works by repeating repeating so i should say you know probably here print think of a number between and lower and upper now of course this game is relying on the user you know honestly um thinking of one and keeping in my mind if they forget it will be a bit of an issue but now we're going to make a guess and keep asking until the user says it's correct and so we need a while loop for this a for loop is where we have we sort of know how many times it's going to iterate here we don't know exactly it depends on what number of a user thinks of it depends how big this range is and so on so a while loop is more suitable we have a condition the condition being is it correct or not you know we could have a condition like is it correct or not but i think it's easier to have just a boolean toggle i use these a lot in while loops i don't know how brilliant design from a design point of view using them are but i think they're fine so while it's corrected was false and we're going to keep looping until view says it's correct and then we're going to set is correct to be true and it will envelope so we need to make sure we first of all um initialize is correct to be false and you can see down below i should have done two equal signs not one equal sign there one equal sign is for assigning a value two is for comparison so inside this while loop is where the main body of our code will go so first of all we need to make a guess so let's make a guess and this is going to be to make a a random guess unless you want to code it yourself which would be impossible if not well not possible it would be extremely difficult if not impossible um for some people we would need to import a random module so the random module is a whole bunch of different functions methods really which provide random functionality and they're not they're not available by default so i have to import from as a module but now we can use them so after guess i'm going to use a random keyword and then now i can do dot and the function we want here to generate integers in around in a range is randint which can take two arguments at least for lower range which is going to be lower here followed by the upper range which is upper and once we make this guess we're going to increment the score which i haven't actually had assigned yet and i have up here i forgot because we've made a guess we're going to increase the score so in this game a higher score is worse for the person guessing because um you want it to be lower as possible uh okay so um we now need to see if this guess is correct so we first wanted to show the user this guest right so we could do print um i guess guess and we could make it a bit prettier by adding a full stop maybe after this and because we're using concatenation on an integer and a string we need to make sure we cast guess to be a string as well i guess whatever it is full stop um then we could do um is this correct or should it be higher or lower okay and then we need to actually oh we need to get the input first of all so we could do um response equals input like that and now it's probably a good idea to sort of standardize our input by making it all lower case all uppercase depending on well it doesn't matter either way just to reduce the number of conditions we have it's best to try and make things as generic as possible you shouldn't need someone to enter a lowercase h or an uppercase h you know it shouldn't really matter so um we're now in an if statement to see if this response equals equals uh correct or um so that will never be true because i'm just made lowercase so correct lowercase or response equals equals just a like a c like that okay so if it is correct the most important thing to do here because i used this sort of boolean toggle is to then toggle it so that it is now true otherwise we'll be stuck in this loop forever and then we can uh i don't know something like print yes because i got it right the score is and ever the score is like that okay so that is really simple when it is correct it's not quite simple when it's not correct so we'll need an elift here because they're um not um because they're two different conditions so elev response is this time let's do if the response is higher or the response is just h on its own i do h on its own to make it quicker when i'm testing it and here we now need to think more carefully about how we can edit our sort of guess to be uh to be more clever right because we could we could have been told it's higher just guess another random invert original range but here we can now adapt our range to make it a bit smarter it works in a similar way to in a similar way to binary search if you come across that my indentation was off off there a little bit so um if if a response if we are taught so if we make a guess and and we are told it needs to be higher that means we can edit our lower bound because in fact if i just test this up until this point to maybe demonstrate how this works because i think it's fairly obvious but it might be worth demonstrating so if i put my upper range is um 10 and lower range is one i guess 10 so we get so let's say we're thinking of 5 but if i now say lower it's just going to guess again because we haven't coded this yet but if i guess lower then it can exclude 10 right now the range should be one to nine so we um that's for lower but if it's higher so let's say actually we're getting eight and it's guess seven well now the range should be eight to ten or eight to nine really because we have altered um autodown range and so really if i just uncomment this code lower should now be our current guess plus one like i had a go explaining if we are guessing seven and our value is eight we know then if it's if the value is too low because they've said higher we should plus one onto it and the same idea with when it's um lower blower or l we're going to set the upper range to be the guess minus one because you know up here i guess 10 if our number is eight and we say it's lower well then now the range has got to be between one and nine it's not going to include 10. so we can reduce a range like that and it will massively even if our starting range is huge massively cut down based on this so um that is the main sort of premise of our code and in fact our main kind of solution to our base requirements we could test this a couple of times now i've added in my code so upper range let's say 10 i should have really put myself way around so let's say i'm thinking of four so i guess nine well it's lower i get seven again it's still lower i guess two is higher i guess six uh i said four there's a wish you could forget this and lower and then higher again and we finally end up before that managed to get all of it all of them wrong there i panic for a second now i can type in correct and it should end so so the score is seven because it guessed seven times all right let's test that again because that confused me for some reason i've added uh two lines here to actually show us our range each time so hopefully should show us it updating let's not do up a range of 100 no that's not 100 it's too much let's just do 10 again for lack of originality so let's think of a number of five let's guess five straight away let's do number two this is correct no it should be lower uh and now i guess there's two actually it's done really well here but you can see uh it has updated our range so when i say it's five and then it's lower um it has gone one to four let's just do this one more time that's when we do a range of 15 to 5 and let's think of a number 12 guess is 11 so it should be higher okay this is um then i guess 15 lower and now it's guess 12. so you can see this time when it's updating uh based on it being lower it's also working or based on it being higher it's still working as we want it to because our range has gone to 12. okay so our main code is working let's now look at some issues we have with it right so if i now sort of don't really play ball and deliberately i've deliberately or by mistake of course some issues if i type in hello that's fixed because we did that earlier um but if i do uh 15 to 25 this time if i let's say so it's guess 29 let's say i was thinking of 29 but it kind of ignore that and just pretend it's lower i could you know potentially keep pressing in lower until we get an issue here it says the new range of 25 to 24 well how how is it going to generate random number in that range because our low a lower value is higher than our upper value and so you know you could the user not really doing it properly could lead to an error like this and it would cause your program to break so we can do is make sure before we are allowing this random function to generate our numbers because that's what the issue is here if you look at the bottom empty range for round range is coming from our random function here and so we need to kind of protect this function by checking to see if there are any issues before we actually use it so we can do is sort of wrap it in and or not even wrap it in an if because what we can do is we can do if let's say upper equals equals lower well that's an issue first of all in fact we could even just do upper is less than or equal to um lower because first of all they shouldn't be equal we shouldn't really ever have them being equal or certainly in fact no that's not true they can be equal they can be equal if you've guessed all the opportunities but if they become a situation where upper is bigger than lower or sorry upper is smaller than lower that means something's gone wrong here you can see here the upper value is smaller than the lower value which doesn't make sense so we need to if we have this case there's been some issue we could say something like uh i think you have made a mistake and so not only much we can do here i think we need to just get us out of this loop asap so we could set this to be true unless maybe we want to reset the score because otherwise you know the score isn't really valid a bit if we don't have that issue that's fine we can proceed as normal with an else and we can just make sure all of our code down here is now nested within this house apart from return because return is the last thing we're doing so hopefully that's all nested across so fingers crossed this code allows us to check for any issues like this like where we uh to kind of deliberately get it wrong let's have a look and see so let's reset that not sure what's happened there okay let's do a smaller range this time so let's do five and then lower range is one so finger numbers in one and five let's say so it's guessed three straight away let's say i was thinking of three so if it's correct or should it be higher or lower um let's just do lower and you wanted to let's do lower again and i think you made a mistake and we end okay that's good i think we can now comment out our sort of uh new ranges one to two because it's now confusing me a couple of times so where is it down here so i think that is mostly us done except for maybe one other issue is if i just do this again quickly now if i type something other than h or l or c if i type in high here um it's going to keep guessing which is maybe okay actually no i think about it because the score is going up and it's sort of your fault you haven't done it right maybe we could show a message right we could just say um down here else in all of the cases print you must enter h l or c and then it's going to guess again so actually maybe guessing again it's not really a big problem you could sort of wrap this whole code in another while loop to make sure they are entering hlrc and if they're not asking them again because right now it's just going to increase for guesses but i feel like that's kind of okay at this point all right so i think that's our our main code done unless i'm missing something which is possible in terms of our extension which is where we wanted to have multiple rounds like right now if i get it correct the game ends and that's it but actually you may want it to be so that we may want it to be so that we have multiple rounds and so the user can keep going afterwards and this is ultimately why we are using a function right for good format functions is not only are they quite provide a nice clean interface with parameters and return values but we can call our function however many times we want and it will all be absolutely fine we don't have to repeat loads of code if we wanted say five rounds without a function we need to repeat this code five times and it would be really annoying but also if we wanted say an infinite number of rounds we can't copy code infinitely and again having a function makes it a lot cleaner we need another loop so down here at the bottom uh i might i'm gonna quickly edit my upper and lower here because i was irritating me a bit so what we could do before this welcome to the game we could have another while loop and again let's just use a boolean toggle here so while has quit equals equals false again i need to make sure actually uh initialize this just outside so it has quit it's going to initially be initially be false one equal sign there again let's just shift all of this code inside my while loop for the time being because this is our main game um we could now before we uh we could just print for rounds and then and then the number so we could use a counter at the top so round and number could be zero initially don't need to do this but i figure it might make it look a bit nicer around num so at least we know what's going on here maybe we just add a new line to make it a little bit more separate and then we're doing this code as normal is all fine and once we finish the game in this case we're gonna increment the round number so you can keep track of it and then give the user the opportunity to quit right so if we you could say you know quit quitting equals input uh do you want to quit yes or no and then like we did before if quitting like with our yes or no with our higher or lower if quitting equals equals um y we are going to um make sure it's a lowercase we're going to make sure we set has quit what is quitting i should has called it is quitting to be true and we could say thank you for playing right so one of my conditions was we print out the scores thank you for playing uh the scores work now how are we going to print out our scores here because what we've done here so far we've just saved the score so we've called our function we go through the whole rigmarole of our game playing we end it by saying it's correct the value gets saved underscore but you know the whole point here is when we are quitting we want to print out all the scores and right now only one score is being printed at a time which is not really what we want because we can go through five rounds but every single round is just saving any value underscore the previous values are lost so if we you know we could if we were going about over the top like save our save our scores in a file like a text file which a future video will show how to do that feature tutorial but we could also just have a list a list is really nice because i like a variable a variable can only hold one bit of data at a time their list can hold loads of bits of data and you can add on to it right so you you know you don't have the opportunity to um create variables at runtime but list you can just append values to lists whenever you want to so if we just have a list maybe here called scores which we can initialize to be an empty list because nothing's happened yet and now instead of assigning our score our return score to our values to our variable score we can now make sure we are appending uh this to what i call it scores so scores dot append append means just add in um a value to it at the end of the list like so okay and then once we are ready to quit we can then iterate through this scores list which could have one value in it it could have 500 values in it and just print them out as we go okay i think it would be nice to down here use our round numbers in our in our um printing so we can use a for loop here instead of well we're gonna use a for loop anyway instead of saying something like four item in scores or four scoring scores we could say a round num in range zero going up to the length of scores and then we are going to print so round in round round num or maybe our code on there is a bit premature in round say one and then we might want to colon here which means i need to cast this round num and in fact because we start counting our indexes from zero round one will be zero here so in around zero it will be whatever which doesn't really make sense we might wanna hit we might want to do round one plus one here so it starts counting at one and then we can print the score but we need to use our use our list which is scores and index it with ground none in this case okay so hopefully that works how we want it to let's try this i may have made an error here about noticing so welcome to the game round zero so okay right so we need to make sure we around zero seems a bit strange so we could make sure we uh initialize it to be one not zero okay try again from one into a lower range let's do one upper range ten let's say i'm thinking of six so it needs to do lower let's um higher lower again five higher and now it's correct lovely so if score is five in that case do you do i want to quit let's say no uh round two lovely enter low range do one and ten this time uh let's just say again and let's now think of one so eleven seven lower than six eleven five and then it's got one and now let's quit now i've done two rounds i could keep going infinitely but hopefully thank you for playing with scores where round one was five round two was four except now it's uh asked us again i'm not sure why let's see why it's asking us again because i used for wrong the wrong variable here it was has correct i knew it was okay so right now we got stuck in the infinite while loop down here in our has quit loop because i never changed has quit i was changing is quitting which is not the same variable okay but i think the point remains right you can see we could keep playing infinitely we're adding new values to our scores list which is a nice way of keeping track of it and in the end we can um print them out just by iterating through our list so um that is pretty much the solution i believe well done if you have tried it and managed to do most of it if you can do all of it it's fine there's another extension task which i won't show you how to do in terms of actually kind of flipping this having a second function and getting it to now be um the computer generates a round number and you have to guess it so it kind of flips on its head and then you could sort of do a back to back game where round one might be for computer guessing round two might be the user guessing and it works like that i'll leave you to come up with your own solution for that if you have one feel free to share it i'd be interested in seeing it otherwise let me know any questions this solution will be in the description for you to have a look at if you want to otherwise thank you very much for watching