00:00 - hello we are now going to look at how
00:01 - variables are used in Python the
00:04 - variable was at crop up everywhere in
00:06 - python and all of our future videos will
00:08 - rely on these as well we are going to
00:11 - stick to using an interactive shell just
00:13 - for this demonstration because we're
00:15 - still sort of trying stuff out and a lot
00:17 - of the early programming is is playing
00:19 - around so please please be trying for
00:21 - questions be trying for stuff I'm
00:23 - showing you learn just be sat there
00:24 - watching it's important to play around
00:26 - and try stuff out so I Michelle was
00:28 - really good for us so let me just drag
00:30 - this over so I've got a bit more space
00:31 - to do this I apologize it's a bit small
00:33 - it become bigger in the next few videos
00:35 - so I've got my my prompt here I can
00:37 - start typing some code so we did last
00:39 - video we'll just do some basic
00:41 - arithmetic operations that were like 5
00:43 - times 10 the Asterix being
00:45 - multiplication first times 10 is 50 I
00:48 - press ENTER on my keyboard and for code
00:49 - runs
00:50 - line by line I want to did my
00:52 - calculation that result 50 was just
00:54 - shown to me underneath my input like
00:57 - that but what if I want to store that
00:59 - result so we can store results using
01:01 - something called variables and the
01:03 - syntax for variables in Python for
01:05 - syntax being vowels of Python is you
01:08 - have a name so let's call this result
01:10 - you have 8 space or you should do a
01:13 - space and an equal sign and then have a
01:15 - space and then you write your result so
01:17 - in this case the results because for 50
01:19 - here and then press Enter and nothing
01:21 - happens this time you have no output
01:23 - from his code because all we're doing is
01:24 - storing 50 under the name result so
01:28 - result is our first variable like so if
01:30 - I now type in results and press Enter
01:33 - I get 50 back so 50 has been stored
01:37 - under the name result and that name is
01:40 - within reason anything we wanted to be
01:42 - we can't do certain things like we're
01:43 - not allowed to have say a number
01:45 - starting off our name like this if we
01:47 - have 5 result for some reason and in set
01:50 - the 50 press ENTER I get an error I get
01:52 - a syntax error I've broken visuals of
01:55 - Python I'm not allowed to start off with
01:56 - a number it's just how Python works I'm
01:58 - also not allowed to do to several words
02:00 - too funny some like my result equals 50
02:04 - press ENTER again in various in tax on
02:07 - breaking for was a Python it's got to be
02:09 - one word to get around this if you have
02:10 - if you particularly want to give it one
02:12 - word
02:13 - Meital words can perform as one you
02:16 - could just leave my results like that or
02:18 - I like to to make it a bit easier do
02:20 - what we call camelcase
02:21 - in programming we have a lowercase
02:23 - letter first of all which you should do
02:24 - anyway shouldn't really be starting with
02:26 - variables uppercase and you have
02:28 - lowercase and then after your first word
02:30 - you do uppercase like fat so be like a
02:33 - camel's hump you have a logo starting
02:35 - and each word has a capital letter to
02:37 - make it a little bit clearer this will
02:39 - be fine let us just talk about this a
02:42 - little bit so we've got our lowercase
02:43 - words here result equals 50 so this name
02:48 - over here is what we was cool well so
02:51 - first of all it's a variable in this
02:53 - exact case but more generally we would
02:56 - call this an identifier in programming
02:59 - so an identifiers any word we give we as
03:02 - a programmer are giving other language
03:04 - to represent something in this case is a
03:06 - value so 50 here is a value which we are
03:11 - storing under the name result under the
03:13 - identifier result now it's an identifier
03:15 - for us for human the computer doesn't
03:18 - care what we call result doesn't care
03:20 - what we call the variable but it's a
03:22 - good idea to give a a meaningful name
03:24 - otherwise would be really confusing if
03:26 - you called this a b c equals 50 you
03:29 - wouldn't know what it is but result at
03:30 - least tells us for it there's been some
03:32 - calculation in this case 5 times 10 when
03:35 - you are doing this process when we are
03:36 - giving a name and having an equal sign
03:38 - and putting a value on draw a hand side
03:40 - we are said to be assigning assigning
03:44 - this value to the variable to view
03:47 - identifier so until it changes result is
03:50 - always going to effectively be a
03:52 - placeholder for 50 and the key is
03:55 - variable it can vary so i said until we
03:58 - change it we can easily down the line
03:59 - change this variable to something else
04:01 - right now right now result is 50 but if
04:05 - I decide to down the line change 50 to
04:08 - 75 like that we are allowed to vary this
04:11 - is in contrast to what we might call a
04:13 - constant a constant we can't change
04:15 - after we assign it in python there is
04:18 - not a way to do constant in order to
04:20 - have a constant in other languages you
04:22 - can have constants in Python we just
04:24 - have variables which we can change so
04:25 - now if I type the result
04:27 - it gives back to me 75 because that name
04:29 - result is replace holder for 75 which is
04:33 - the last thing assigned to that variable
04:35 - and the very first time we assign a
04:37 - value to a variable it's got its own
04:39 - word this is called initialization in it
04:42 - alaya zation like that for second time
04:47 - so result equals 75 but it's not
04:49 - initializing it because result was
04:50 - previously 50 initialization is only the
04:52 - first assignment to the first assignment
04:55 - so let me clear this and show some
04:58 - examples of variables in action so for
05:01 - example let's have another variable
05:02 - called age age equals that say 40
05:05 - presenta age is not saved as a variable
05:08 - I can now change this because it's a
05:10 - variable and go age equal to say for age
05:12 - in course so if we want to increase for
05:16 - current value of age we do age equals
05:17 - age plus say 10 if you have aged 10
05:19 - years it's unlucky presenter now if I
05:21 - type an age age will be 50 because I've
05:24 - used for current value of age as my
05:27 - value and add to 10 to us it's not
05:29 - always just one value on the right hand
05:31 - side we can have an a we have an
05:32 - expression on the right hand side which
05:34 - can be evaluated using some of the
05:36 - operators we look at acting for last
05:37 - video the key thing is in his right hand
05:39 - side which is being assigned to the left
05:41 - hand side not the other way around so I
05:43 - couldn't do say 50 equals age you'll see
05:47 - I get a syntax error the identifier has
05:50 - got to be on the left hand side so in
05:52 - maths vehicle sign is very flexible you
05:54 - can look at it either way right but in
05:55 - computer science for direction matters
05:58 - or at least in variable assignment it's
06:00 - just for Python is using the equal sign
06:02 - to do this assignment the left hand side
06:05 - is for variable name I have shown how
06:07 - variables can be used to store values
06:09 - store data but also very was really
06:11 - important when you are programming a
06:13 - proper program sometimes it can seem a
06:15 - bit pointless having a variable if
06:16 - you're doing something like in this case
06:18 - foot was 40 plus 10 let's do that you
06:22 - don't need to set say age to be 40 right
06:24 - because you could defend your age plus
06:27 - 10 let's give me as 50 as well
06:28 - setting age as a variable it does not
06:31 - make any difference to that calculation
06:33 - it's just an extra step it's an extra
06:34 - bit of data being stored but variables
06:37 - are really important when you are
06:38 - programming for the future off
06:40 - in fact very very often you're not when
06:43 - you're programming exactly sure what
06:44 - data will be inside your program when
06:46 - it's being used properly maybe you are
06:48 - relying on some user input me before use
06:49 - it's going to input their age and not
06:51 - every users going to be 40 years old so
06:53 - really you'd be sort of leaving age as
06:56 - sort of some question mark really which
06:59 - will come from some input and then you
07:01 - can write your code as if you're using
07:02 - that variable and then the actual value
07:04 - gets inputted during the actual program
07:06 - being used for this try now first of all
07:09 - recommend you play around with some
07:11 - variables especially ones which are
07:12 - relate to your own life so things that
07:15 - your age your birth year and a phone
07:16 - number maybe each one can be very
07:18 - variable if your phone number make sure
07:20 - you don't put say plus four four four
07:21 - start ignore that bit and leave off four
07:24 - first zero which might cause an error
07:26 - question to have a look at these six
07:28 - lines of code see which ones you think
07:30 - are going to cause an error based on
07:31 - what we've looked at which will break
07:33 - the syntax of Python and then try them
07:35 - out to see if you were right or wrong