00:00 - enviable tutorial in this series we're
00:01 - going to now talk about string handling
00:03 - operations which is a huge huge topic
00:05 - really there are loads of different
00:06 - operations we can do on strings I'm just
00:09 - going to go through the ones which I
00:10 - think are most important and crop up
00:12 - most often the first thing I want to
00:14 - talk about is really a recap of
00:15 - something I've done previously talking
00:17 - about casting also called in this case
00:20 - if it were my strings string conversions
00:23 - if we're using strings as one of our
00:25 - datatypes we're going through so as a
00:27 - reminder a string is a data type which
00:29 - has a we have this random of quotes I
00:33 - have a single quotes or double quotes
00:34 - and really a string is text you also
00:37 - have a character so character is really
00:41 - just one character one letters number or
00:44 - symbol although in Python they don't
00:46 - differentiate between characters and
00:48 - strings really as a character is just
00:50 - one character in a string they're not
00:53 - set of related types like they are in
00:55 - different languages but very often we'll
00:57 - get user input and all we use rooms as a
01:00 - string so this may be have like a number
01:02 - and we're taking in user input so let's
01:05 - get rid of Guido and say enter a number
01:08 - even if we want to use it to enter a
01:11 - number they're not actually going to
01:12 - enter a number if I do if I say Freddy
01:15 - print type number and run this code
01:20 - first of all get prompted enter number
01:22 - like we've seen before I can enter a 65
01:25 - press ENTER and what this is doing here
01:28 - what function surrounding number is
01:29 - finding out for data type and so the
01:31 - letter type is to prove it to you is a
01:33 - string STR being shorthand for string so
01:35 - all inputs even if they look like
01:36 - numbers to us are classed as strings
01:39 - until we convert them until we do some
01:41 - casting so if I wanted to use this input
01:43 - in some calculation I'll need to convert
01:46 - it to a number you know if I'm happy
01:48 - with it being an integer I can just cast
01:50 - it to be an integer and you do that by
01:52 - surrounding your variable with an int
01:54 - function so the int function converts it
01:57 - from s whatever it is but in this case
01:59 - the string to an integer
02:00 - thorns it to be a float which is a
02:02 - decimal I can convert it to float this
02:04 - one it's not shorthand like this and now
02:07 - if I if I we can't go to float because
02:09 - that's already been used
02:11 - float float VAR we can't use our
02:13 - keywords because otherwise it would
02:15 - confuse it has n we can use them in
02:17 - identifies now if I print these two
02:19 - integer and float bar we should see SR
02:23 - difference so I in touch the enter a
02:26 - game so we get 65 which is Vince German
02:28 - 65 point 0 which is a float so the
02:31 - Institute does not have a decimal throat
02:32 - does if I printed number plus number and
02:37 - then printed integer plus integer just
02:42 - adding itself in both cases but one of
02:44 - them the first line number person on the
02:46 - visa both strings still but if integers
02:48 - are integers and so this is an example
02:50 - of how the + operator is really
02:53 - overloaded it works in two different
02:55 - ways depending on data types the first
02:57 - way it works if I was go through this
02:59 - again first way it works is before
03:02 - numbers so just adds normally so 65 plus
03:05 - 65 is 130 but if it has strings either
03:09 - side of it or characters it will just
03:11 - put them together and this operation is
03:12 - called concatenation and by the way if I
03:15 - do mr. Michaux actually just to be a
03:16 - little bit more simple if I do for
03:19 - equivalent casting for a character which
03:22 - is CHR char and if I do if I put Sailor
03:28 - 265 into versus an integer press ENTER I
03:31 - get capital a this is because what this
03:33 - is doing is its converting the decimal
03:36 - version of the ASCII code so all
03:38 - characters in the computer are
03:40 - represented in binary and we use a
03:41 - character set to deivis ASCII being the
03:44 - most well known which has now been
03:46 - extended into Unicode a character set
03:48 - where every single character has got a
03:49 - unique code so if your unique code for a
03:52 - is 65 unique code for B is 66 because it
03:56 - follows a nice pattern like that and
03:58 - when I say B I mean capital B because I
04:00 - believe I might be wrong here 90 is 96 B
04:06 - I'd see no it's not
04:08 - maybe it's 98 to one other - I think
04:12 - it's crossed yeah 98 but lowercase B
04:15 - this time so essentially we are using a
04:17 - casting to convert from the integer
04:19 - value to the character itself so if you
04:22 - want to find the ASCII code or the
04:24 - Unicode code
04:24 - in decimal for any character you can use
04:27 - for char for crunchin CHR to the
04:30 - opposite we use your function or
04:32 - diminish or ordinal number an ordinal
04:34 - number is a counting number so a way of
04:36 - organizing sets and if we put in this
04:39 - maybe just Olivia Traverse capital a
04:41 - like this
04:42 - I'll get 65 and then if I want lowercase
04:44 - B like this I should get 98 which is a
04:49 - lesson for me as well so ways of
04:50 - converting between characters and their
04:52 - codes okay well let me get rid of some
04:55 - miss stuff to clean up a little bit so I
04:57 - can show you a few more things why don't
04:58 - we do a simple program where we get the
05:01 - user to input their name that makes
05:03 - sense and we can do a few different
05:05 - operations on it so for their name and
05:08 - one of the things we can do is find out
05:11 - how long they're neighbors so we can use
05:14 - a function which is shortened to Len for
05:16 - length so if I but if I just do lend it
05:18 - like this and what we might do in the
05:21 - shell just leave on its own outside of
05:23 - him outside of a print statement and I'm
05:25 - put in someone's name dude we don't
05:28 - nothing happened because this needs to
05:30 - be put inside a print statement by the
05:31 - way inside the interactive show you can
05:33 - just do it how it is but if we don't
05:34 - make sure this is wrapped in a print
05:36 - statement so this will find out how long
05:38 - make sure it's in brackets because all
05:39 - built-in functions need to have an
05:42 - argument put in via brackets so we've
05:44 - got a nested function here big weirdo
05:47 - again I can spell his name right and
05:51 - Guido is five letters long five
05:53 - characters long and so we get five
05:55 - outputted and one through it's important
05:58 - to know about strings is we strings are
06:01 - arranged like lists we'll look at lists
06:03 - in a future video but it means we can do
06:06 - what is known as indexing so let me swap
06:07 - to the shell to do this resetting Guido
06:10 - assigning Guido to the name variable
06:12 - over here so we can do indexing and
06:15 - indexing is where we after the name of
06:18 - our variable or just the string itself
06:20 - we have square brackets so not the kind
06:23 - of normal brackets like we have with
06:25 - functions square brackets and inside the
06:27 - square brackets we can put an index
06:28 - number and so if I put an X number of
06:32 - two here and press Enter it's going to
06:34 - return just a character I so each
06:37 - character in a string
06:38 - is given what is called an index number
06:40 - and in almost all programming languages
06:43 - including Python these start counting
06:45 - from 0 so actually the capital G is got
06:48 - the zero index for you has got four one
06:50 - index and the ayahs got the two index
06:52 - and so it's why we put it's why when we
06:55 - put two in our index number we get I as
06:57 - opposed to the second one which is you
06:58 - because we start counting from zero if I
07:00 - do name within X number of zero
07:03 - I've get capital G and if I put name
07:05 - with me next number of the length of
07:07 - name minus 1 I will get the last letter
07:13 - which is o because if I did a name with
07:17 - the length just like sewing without
07:19 - subtracting one I'm gonna get an error
07:21 - because we're going out of range because
07:23 - we start counting 0 veal actual length 5
07:26 - v index is after our string and so it
07:29 - doesn't we can't access it because it
07:31 - doesn't exist so even if you don't know
07:33 - how long the string is going to be we
07:35 - can get the last letter by doing Len
07:37 - name minus 1 alternatively we can just
07:39 - do name with index of minus 1 so despite
07:42 - they're not really being index of minus
07:44 - 1 because they need to be positive
07:45 - integers - take supposed to be the last
07:48 - index so we kind of minus 0 but we kind
07:51 - of minus 1 which is the last letter
07:52 - likewise for the name we need to minus 2
07:55 - this will be the second last which is D
07:57 - in our case so next thing on its own is
07:59 - really useful of course but it's also
08:02 - part of other functions like slicing
08:04 - slicing is where we're trying to get a
08:07 - substring from our string a substring
08:09 - being part of our original string so
08:11 - here what Guido as substring would be
08:13 - GUI or do or you I or ID all of these
08:18 - different sub strings are part of our
08:20 - original string and we can get access to
08:23 - that substring by slicing it using a
08:26 - very similar method you can type a name
08:28 - go to type in I just washed in itself
08:30 - follow it with our square brackets and
08:33 - inside the first when we type is V index
08:35 - or the first character we want to
08:37 - include in our substring so let's start
08:40 - at the start with 0 let's say I want to
08:43 - get substring Guede as opposed to greet
08:46 - Guido so I follow this first index with
08:49 - a colon
08:51 - and then I'll write for last index I won
08:53 - in the fact this is not Phoenix it's not
08:55 - the last index we want Phoenix after for
08:57 - me one so if I want to end at D D is for
08:59 - zero one two third index but actually
09:03 - I'll write down four here because the
09:06 - second parameter the second value
09:07 - supplied is the one after the one we
09:10 - want to keep so this will get us quit
09:12 - because even if we've got four which is
09:14 - really the index of zero of O is
09:17 - ignoring that it's just stopping before
09:18 - it so if I wanted no rule ways of doing
09:22 - this I've wanted the entire for a
09:24 - substring I could put a nexus 5 and this
09:28 - would work if I just did Guido and
09:31 - didn't Alexa 5 on its own this would
09:33 - give us an error because 5 is out of
09:35 - range but I can include it here because
09:37 - we're not actually using my index with
09:39 - stopping before it if I'm going all the
09:41 - way to the end if I don't need to
09:42 - actually include that second parameter I
09:44 - can just if wanna start say index 2 I
09:46 - can just leave it like that not put a
09:48 - second value in we stop over for : in I
09:50 - get ID o in this case we can also like
09:53 - before use negative indexing to try and
09:55 - work backwards to phone to start at of a
09:59 - minus second index of second from last
10:01 - at a : leave it like that I get just for
10:05 - last two characters do you know that is
10:07 - my substring there is a third parameter
10:09 - to a slicing operation which is called a
10:11 - step so if I leave for firstly prompted
10:13 - empty here and put a step of su to close
10:17 - it off this will get every second
10:19 - character so I get Gio from Guido
10:21 - because it's going every second
10:23 - character like that another cool thing
10:25 - to do if you want to swap your string
10:26 - around if you want to do a reverse
10:27 - operation you can again leave the first
10:29 - two parameters if you want to man do
10:30 - minus one and this will reverse your
10:33 - string and make it go back to front okay
10:36 - so I'm showing you that I have
10:37 - completely forgotten about my program I
10:38 - started on the left on script - let's go
10:40 - back to this let's just necessarily an
10:42 - input let's just set it to be Grace
10:45 - Hopper just so we can use her name as an
10:47 - example so print link frame could say
10:49 - your name
10:51 - is low taxes long like that we could
11:01 - also use some for slicing maybe say your
11:05 - name backwards is and then use -
11:09 - one-step like we did down here so I want
11:11 - suffix a couple of the errors we get a
11:13 - output like this name is 12 characters
11:15 - long
11:16 - the name backwards is I'm trying to save
11:18 - us this does like a little bit funny
11:19 - because you know I would think we
11:22 - transfer our missing quotes ideally to
11:24 - make this look a bit nicer the issue is
11:26 - because we're using quote marks to
11:28 - define our string we can't just easily
11:30 - put a quote in our string because it
11:32 - causes it to think for actually about
11:34 - string is ended which are hazard we get
11:36 - round this by doing something called
11:38 - escaping this string would escape the
11:40 - scaping for quote really which is a
11:42 - fancy way of just putting a backslash
11:44 - before our quote mark to tell Python up
11:47 - but actually the following character is
11:48 - to be ignored by it it's just to be
11:51 - shown to the user not processed because
11:54 - otherwise it will use it to stop a
11:56 - string so following something like this
11:58 - and then put another quote down here and
12:01 - make sure I escape this way mark it
12:04 - looks a bit weird in our program but
12:05 - what it will do is it will ignore the
12:09 - quote in terms of stopping my string but
12:11 - we'll just show it to the user here and
12:12 - so looks a little bit better we've still
12:13 - got this gap because the separator is a
12:16 - space but at least it's a little bit
12:19 - different if we want to see if my string
12:21 - has got a particular substring like an
12:23 - this one let's see if it's got grace we
12:25 - can do something like so you can do
12:28 - grace in name actually this one its own
12:33 - will give us a boolean value so let's
12:35 - set this to contains grace equals this
12:41 - because grace in name is going to
12:42 - evaluate to a boolean value either true
12:45 - or false depending on earth is in the
12:46 - name or not so in is an identity
12:49 - operator which works in quite a
12:51 - complicated way but all the zeros are
12:53 - seeing if grace is inside this string so
12:56 - it's wrong as if I'm in print out
12:58 - contains grace which sounds a bit
13:00 - strange but that's okay we should see
13:02 - that this is true which is because grace
13:05 - is in this and if we just put anything
13:08 - before this and then run it again it's
13:09 - still gonna find grace because it's
13:11 - looking for out the entire string for
13:13 - the substring grace if I want to see if
13:15 - the substring is not in our string I can
13:18 - instead just add my boolean operator not
13:21 - before in and then oh in this case
13:24 - because grace is in for sub is in the
13:26 - string I get force but that's enough web
13:27 - demure opposite operation seeing if our
13:29 - substring is not in our string if I want
13:31 - to get the index of where this is I can
13:33 - use something like print name dots find
13:37 - inside like grace with a final single
13:39 - character but you can do it as substring
13:41 - as well this will return the index of
13:43 - the first instance of the substring so
13:46 - 7th index is 0 1 2 3 4 5 6 7 so it
13:50 - starts off finding it over here my 7th
13:52 - index that's quite useful there are
13:54 - loads of different functions and methods
13:56 - for strings and bestest to Google them
13:58 - honestly if you are trying to find any
14:00 - in particular things like making upper
14:02 - case to upper lower does the opposite
14:04 - makes a lower case loads are similar
14:07 - functions like that and by the way there
14:08 - is a difference between can we see up
14:09 - here we've got a what we call a function
14:11 - we have a function name followed by
14:13 - brackets print is a function as well Len
14:15 - and also input as a function whereas
14:18 - down here we have find an upper these
14:20 - are not functions they work in similar
14:21 - ways we the methods technically because
14:23 - we write them after adopt so you write
14:26 - our variable which is an object in this
14:28 - case and we have a dot and we're using
14:30 - this method on our object now that's not
14:33 - really that important right now but it's
14:35 - worth mentioning why I might call this a
14:37 - method find or as I would call N or
14:39 - prints a function a function does not
14:41 - work on an object but a a a method does
14:46 - for this try now I'd recommend you have
14:48 - a go at these two problems so actually
14:50 - doing some programming this time not
14:51 - just predicting so the first one trying
14:54 - to take a in this case a 4-digit year
14:56 - and multiplying the first two digits
14:59 - together with the last two digits
15:00 - requires some of our string handling
15:02 - we've talked about some of the slicing
15:04 - and for the second exercise little bit
15:08 - more complex we have got three
15:09 - conditions which you want a password
15:11 - to be and this will become a little less
15:13 - awkward once we do selection in the next
15:15 - video but we can still based on what
15:17 - I've done in this video output something
15:19 - like this based on an input like this
15:21 - which breaks two of our conditions and
15:24 - passes one of them so pause the video
15:25 - have a go at these two exercises
15:27 - there'll be sample solutions in the
15:29 - description