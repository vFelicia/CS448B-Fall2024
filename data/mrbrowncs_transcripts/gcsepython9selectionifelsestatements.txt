00:00 - now let's look at how we can do
00:01 - selection in Python which uses if-else
00:04 - statements we can't really make any
00:05 - useful program without selection in some
00:07 - capacity so it's good we're covering it
00:10 - now one screen now is our program from
00:12 - the last video nothing too
00:14 - groundbreaking and really it would just
00:15 - sorts of testing things out regarding
00:17 - string handling so far all we've done
00:19 - including in this program is make use of
00:21 - a sequence of program code a sequence is
00:25 - where we are just the right instructions
00:28 - and the instructions are followed one by
00:29 - one by one so the program the
00:32 - interpreter which is running this code
00:34 - when I click run it's just working its
00:36 - way down my page doing one line at a
00:39 - time so it's running line one running
00:41 - line two nothing on it running line
00:42 - three why am i four nothing on it and so
00:44 - on so it's doing it line by line this is
00:46 - fine but we're not really behaving in a
00:49 - way which is natural in terms of most
00:51 - algorithms most human behavior we're not
00:53 - just mindlessly following a sequence
00:55 - like it kind of is here instead we are
00:58 - making decisions and changing what we're
00:59 - doing based on certain conditions which
01:02 - is all which is what selection is all
01:03 - about so you have sequence as one main
01:05 - programming concept or Constructors
01:08 - would say we have selection and finally
01:10 - we have iteration which we'll look at in
01:11 - the future video we'll look at selection
01:13 - just today so in selection we want to
01:15 - change what we are doing change our
01:17 - sequence based on some decision based on
01:20 - some condition which will alter the flow
01:22 - of our program the flow is how the
01:25 - computer makes its way through our code
01:27 - right now in sequence is just doing it
01:29 - line by line we want it to be a little
01:30 - bit more branching okay I figured to
01:33 - demonstrate this we could do a little
01:34 - basic game and first of all here I'm
01:35 - asking a user are they ready that's how
01:38 - some games might begin and we can use
01:39 - this either yes or no to determine our
01:42 - flow of our programs so we can use
01:44 - selection here so the way selection
01:47 - works and Python is we have if
01:48 - statements if statements are how we do
01:50 - selection that's it really
01:52 - it's nice and simple so you're right if
01:53 - lower case it'll go different color if
01:55 - you've got a ID which supports syntax
01:58 - highlighting like I do on a rep lip you
02:00 - then follow if with a condition and the
02:02 - condition is like your decision and it
02:05 - will use for various operations we
02:06 - looked at in previous videos so for
02:08 - example if I want to see if ready is yes
02:11 - I'm going to use for comparison operator
02:13 - which has two equal sign to see two
02:15 - equal signs to see if ready matches yes
02:18 - if it does that's great we can start the
02:20 - game and you follow this condition with
02:22 - a colon this is just how the syntax is
02:25 - for selection you don't press ENTER and
02:27 - this is where you're going to write the
02:28 - instructions which will execute if this
02:31 - condition is true if this condition is
02:33 - is false
02:34 - this instruction and writing could say
02:36 - great for the time being this will never
02:39 - get executed if ready does not equal
02:41 - force it does not equal yes
02:43 - so if ready is no print great never ever
02:46 - gets done so we can start to determine
02:48 - our flow of execution based on certain
02:50 - conditions and you'll notice that
02:52 - without me even doing it I just pressed
02:54 - enter repla has added a little what we
02:57 - call an indent at the start of this line
03:00 - so we've got a tiny bit of a white space
03:01 - so if a white space is just any gap so
03:04 - with white space here after ready after
03:07 - operator that's white space just a any
03:09 - thing which looks empty of a character
03:12 - even if it has got a character just an
03:14 - empty space and this is really important
03:17 - we can't just imagine you can't get rid
03:18 - of this indent because if fight well
03:21 - first of all let's just see if it works
03:22 - so I put in the back of my top so you'd
03:24 - run this are you ready
03:25 - by typing yes press ENTER I get great
03:28 - that's perfect if I typed in anything
03:30 - else just know from time being it'll do
03:32 - nothing because this print is never ever
03:34 - looked at it'll just skip this because
03:37 - the condition was false anyway what was
03:39 - I saying if we get rid off is indent we
03:41 - can try this again so are you ready I
03:44 - don't even get that because we have an
03:47 - indentation error we have an issue with
03:49 - our indentation expected an indented
03:51 - block following this condition it
03:54 - expects to see an indent afterwards
03:56 - because the way Python knows what
04:00 - belongs to what statement is with this
04:02 - white space in other languages for white
04:04 - space does not matter in Python it
04:06 - really does matter and it's also I think
04:07 - what a good thing because it makes our
04:09 - code look a lot nicer looks a lot more
04:10 - organized once we start to have loads of
04:12 - different selection blocks anyway we
04:14 - need to keep this annotation nice and
04:16 - consistent most ideas we'll add it for
04:18 - you anyway but you can decide how a
04:21 - large face indentation is if you really
04:23 - want to
04:24 - must be consistent you can't suddenly
04:26 - change it Midway for your program so
04:28 - it's best just to stick to what the
04:30 - default is and usually that will just be
04:32 - the tab on your keyboard if I get rid of
04:34 - my comments here just to clean it up a
04:36 - little bit and if I now on my keyboard
04:38 - press backspace to go back to the
04:40 - default indentation I can now add a
04:42 - second condition or really I just want
04:45 - to add else so else is very to cover
04:47 - every other case so if you don't have
04:49 - any particular condition else is good
04:51 - because it covers all our options so if
04:54 - I press ENTER now and type okay like
04:58 - that I can now type in anything I want
05:01 - to here and it's gonna give me okay
05:05 - so only yes is going to match a
05:09 - condition here everything else is going
05:10 - to come under okay but yes still works
05:12 - so this is good for any combat any value
05:17 - we don't necessarily expect in a
05:18 - condition we can't have a if statement
05:20 - for every single thing
05:21 - oops we can't have an if statement for
05:23 - every single thing but we can add more
05:25 - conditions and we can do that by just
05:27 - below if and above else again making
05:30 - sure our indentation is back to normal
05:32 - but going backwards I'll talk about what
05:34 - happens if we don't do variant a Schnoor
05:35 - get rid of your notation we can now do
05:37 - elsif which we shortened to Elif
05:40 - so elsif or Elif is just another
05:44 - condition below our first condition so
05:46 - now I can do man already equals e cause
05:48 - I can never do ready equals equal to no
05:51 - and this one we could just say okay and
05:55 - then wait Maeva obviously if we're doing
05:59 - a proper program we build this up a bit
06:01 - so we can add as many conditions as we
06:03 - want to and we should do it reverse if
06:04 - or Elif because we could also just get
06:07 - rid of this and do if unless is rot
06:09 - missin see if it works first of all so
06:11 - if I type in no does not work because I
06:14 - haven't got two equal signs here easily
06:16 - done but if I now type in no it should
06:20 - work hopefully ok waiting that's great
06:22 - so we're matching our second condition
06:23 - here on line 6 and so executing only the
06:26 - code inside this again it's completely
06:27 - ignoring line five and nine nine and
06:30 - line eight as well because it can ignore
06:32 - that because it's matching a condition
06:33 - ready in sequence every single line is
06:36 - executed in selection only the lines
06:38 - which fall under a true condition are
06:40 - executed one I think common mistake
06:43 - which isn't always doesn't always work
06:45 - like a mistake is instead of having Elif
06:47 - just having if and motive statements
06:49 - which really belong to the same block
06:52 - if I run bits at work in the same way
06:54 - and he's initially I look like it works
06:56 - the same way in reality when we have
06:58 - multiple if statements as opposed to an
06:59 - Elif as well beyond our initial if
07:02 - statement it's checking every single
07:04 - statement and it acts as if the
07:07 - conditions are not mutually exclusive
07:09 - here we really want one or the other we
07:12 - don't want both to be looked at once we
07:14 - realize that actually this if is matches
07:18 - our condition we can then print great
07:20 - but then if we have another if stem and
07:22 - it's checking this as well which not
07:23 - only takes time but cajon aliy if this
07:26 - condition also matches somehow because
07:29 - you've changed it in your first if block
07:31 - it might affect your future chain of
07:33 - logic so really if we are sort of if we
07:37 - belong into the same block of selection
07:39 - the same selection block we should use
07:41 - an if eel if-else ladder because
07:44 - otherwise the flow can get a little bit
07:46 - confusing and maybe don't doesn't always
07:48 - work with else as well because else is
07:50 - for any other condition it needs to know
07:52 - which block it belongs to and as I said
07:55 - as many lives as we want so we could do
07:57 - ready equals don't know and then code on
08:01 - and then print inter yes so I know and
08:06 - so on so we have as many lives as you
08:08 - want make sure you use eel if after a
08:10 - first if not just loads of ifs below it
08:12 - and you can see once we add more
08:14 - statements for the indentation does help
08:16 - separate four bodies if you if these
08:18 - were all on the same indentation level
08:19 - not only would Python not know what they
08:21 - belong to but also it becomes a little
08:23 - bit harder to distinguish between each
08:25 - statement and within one of these bodies
08:29 - we can also add further if statements so
08:31 - if we've got if ready equals yes we can
08:33 - proceed with a game inside this if
08:35 - statement so if I now I don't know do
08:38 - print we could do capital
08:42 - of UK equals negative inputs what is
08:48 - capital city of the UK and below and can
08:55 - do if you want to see if the user is
08:57 - correct if capital UK equals equals at
09:01 - London then we can do something maybe we
09:04 - have a points variable at the top we
09:06 - have initialized to be points equals 0
09:10 - we could set this make sure going back
09:13 - to initation set this to be points plus
09:16 - equals 1 you've got to if you're using
09:18 - this augmented operator to make sure you
09:19 - have initialized it already that's fine
09:22 - else we could say incorrect like that so
09:30 - Alice covers every single combination of
09:32 - user could type in anything at that
09:33 - point and we can't have a actual
09:35 - condition for every single thing that
09:36 - going to type so else covers all other
09:38 - bases the reason why I have initialized
09:40 - for points outside of my F statement is
09:42 - not crucial right now but is relevant
09:44 - for future videos when we talk about
09:45 - scope of variables because really the
09:48 - notation here is is allowing Python to
09:51 - define or for scope is but we'll come
09:53 - back to that in a future video
09:54 - if this is a knockout game we could have
09:57 - another if statement within this what we
09:59 - call a nested if statement so a nested
10:01 - statement is within another statement so
10:03 - this if is nested within this wider if
10:06 - over here and so we could do another if
10:12 - stones we could do maths answer and we
10:17 - could do input what is 25 mod 5 would be
10:23 - quite an easy one and then do if I'm
10:27 - gonna do the if math maths equals equals
10:30 - should be 0 because 5 goes into 25 for
10:32 - no remainder and then do colon and then
10:34 - print and then do points plus equal 1
10:40 - else print in correct
10:45 - the only thing here which is an issue is
10:47 - because we have all user ampere as a
10:49 - string I'll need to convert this to or
10:52 - cast it to a an integer or a float so
10:56 - changes to into make sure this is an int
10:58 - and so on so this is not a perfect game
11:00 - clearly it's very messy already even of
11:03 - them just doing it off top of my head
11:05 - but we can try this and we've got these
11:07 - nesting going on so we've got a fair bit
11:10 - of nesting and so this indentation kind
11:12 - of helps you can kind of control the
11:13 - whitespace to an extent in some IDs
11:16 - allows you to minimize certain
11:19 - statements and blocks which is quite
11:21 - useful anyway let's try this and see
11:23 - what happens if I run this are you ready
11:26 - so let's just do yes so we go through a
11:28 - flow of execution so right now we are
11:30 - never ever going to go down to the e
11:32 - lifts and else because I've already met
11:34 - a condition so great what comes into the
11:36 - UK can type in London hopefully this
11:38 - works it doesn't say it works but
11:40 - hopefully it did what is 25 mod 5 I
11:43 - should say zero and it does nothing
11:46 - right now because if you see the logic
11:47 - all it's doing is adding one into its
11:50 - variable behind the scenes but I assume
11:52 - it's working how it should be we could
11:53 - probably once this finishes we should
11:56 - probably print out the score and so on
11:58 - in our conditions we can do maths so
12:00 - here I've done the hard work for Python
12:01 - itself I can replace with zero by doing
12:05 - 25.5 in brackets to make sure there's no
12:08 - issues with order of operations and that
12:10 - would do the same thing is it miss would
12:12 - evaluate to zero and then it would
12:14 - compare maths to zero that's what
12:16 - there's a way how you can maybe adapt
12:17 - your answer your questions based on
12:19 - various factors
12:20 - another thing that's quite useful to do
12:22 - if your user input to sort of
12:24 - standardize fingers you can use a string
12:25 - handling function to convert it to
12:27 - either uppercase or lowercase so it
12:29 - doesn't apply to the number one bit
12:31 - applies to the capital city if I convert
12:33 - this to a dot to lower then empty
12:36 - brackets because this is a method which
12:39 - is applied to this object which is a
12:41 - string once which gets replaced it makes
12:43 - sure that all of your answers are
12:44 - lowercase will ever be art I mean I'll
12:46 - need to go down here and make this a
12:47 - lowercase otherwise aware match and so I
12:49 - could put if I type in yes
12:52 - I type in London with a capital L it
12:56 - will convert this to lowercase and so it
12:58 - will match up with my with my condition
13:02 - over here so in summary the structure
13:04 - for selection is this you may not always
13:06 - need to use ela for example maybe don't
13:08 - even need to use else always but I would
13:10 - say else is really useful because you
13:12 - can't always predict what the users
13:13 - going to type in or what is going to
13:15 - happen else covers other bases so we
13:18 - have a condition this condition needs to
13:19 - be true for the statements within that
13:21 - block to be executed if this condition
13:24 - is not true then this these statements
13:26 - will never ever get executed because
13:27 - they're not even looked at by computer
13:29 - as it works its way down your code
13:31 - either fits for enough condition after
13:33 - if don't just use F here because it can
13:36 - cause confusion make sure you use eel if
13:37 - it if it belongs to the same selection
13:40 - structure and then else covers all other
13:42 - bases as I say it doesn't test any
13:44 - condition this try now is just really
13:46 - one exercise have a read of these
13:49 - instructions here but generally I want
13:50 - you to write a basic program with if
13:54 - Elif and else
13:55 - ideally don't have to do else but it's a
13:57 - good idea to and try and get it to do
14:01 - some calculations based on the areas of
14:03 - shapes three different shapes and each
14:06 - each segment needs to have a different
14:09 - calculation involved the only thing to
14:12 - say is about the circles a little bit
14:13 - trickier I would just approximate pipe
14:16 - but you can also import PI you can look
14:18 - up how to do that if you want to and
14:20 - also for this formula PI R squared you
14:25 - need to do the square root you can do
14:26 - this by using a built-in function sq RT
14:29 - which I haven't taught you alternatively
14:32 - you can just do it with normal
14:33 - exponentiation if you raise a number to
14:36 - the power of 1/2 that is the same as
14:38 - taking the square root so you can
14:40 - complete this task using only the stuff
14:42 - we've covered in the videos and as
14:44 - always there'll be a sample solution in
14:45 - the description not a perfect solution
14:47 - or the only solution that it may guide
14:49 - you if you need help