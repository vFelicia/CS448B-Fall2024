00:00 - in video 10 I want to talk about lists
00:02 - and if you have studied programming in a
00:05 - more theoretical sense maybe for an exam
00:07 - you may will have come across the term
00:09 - array and lists are really pythons
00:11 - version pythons implementation of arrays
00:13 - so you can kind of take lists and arrays
00:16 - to be fairly interchangeable we'll also
00:19 - look at both one dimensional and two
00:20 - dimensional lists which are which work
00:23 - in the same way as one dimensional and
00:25 - two dimensional arrays okay before we
00:27 - start talking about a list let's just
00:29 - start talking about more of an umbrella
00:31 - term which lists for under so lists are
00:34 - an example of a data structure and the
00:37 - date structure is an organized
00:39 - collection of data and there are
00:44 - different data structures both in
00:46 - theoretical programming and also in
00:48 - actual languages
00:50 - Python has four main types we have lists
00:53 - we have sets we have tuples and
00:55 - dictionaries we're just going to look at
00:57 - lists in this video but I mention where
00:59 - the other ones differ as we go so why do
01:02 - we have data structures why do we need
01:04 - to have organized collections of data
01:06 - because well I mean we could just set a
01:08 - bunch of variables say we're trying to
01:10 - say our collection of data is our
01:12 - shopping list so the items on our list
01:14 - we could do you know item 1 equals Apple
01:20 - item 2 equals chocolate if you're
01:23 - feeling a little bit less healthy from
01:25 - the Apple and so on we could do a whole
01:27 - whole sequence of variable assignments
01:30 - but this is not really a very efficient
01:33 - use of our our code is going to be very
01:36 - difficult to manage if we try and
01:38 - package this in a nice organized
01:40 - collection it's going to be much much
01:41 - easier and with 2 items this is not a
01:44 - great example but if we took this down
01:45 - and ending a hundreds of items item
01:48 - 150th we've got a massive order having
01:51 - so many variables is not going to be
01:53 - very useful at all so instead we could
01:55 - set a list and again lists are
01:57 - identifiers so we can call this a
01:59 - shopping list
02:00 - when I say identifier I mean I can set a
02:02 - name it's not given to me by the program
02:04 - so I call it shopping list same sort of
02:06 - rules as where variables it's best to
02:09 - start at lowercase best not just out of
02:11 - numbers and avoid words
02:13 - like some or Len words which are built
02:17 - into Python so in shopping lists and the
02:19 - syntax for defining or yeah defining
02:22 - lists is with square brackets this time
02:24 - and my first item here was Apple someone
02:28 - Apple but after I diva string I'm going
02:30 - to put a comma and then I can put my
02:32 - second item in with a chocolate and I
02:35 - can continue this up to item 150 if I
02:38 - want to it would still be quite unwieldy
02:39 - but it's all under one name now if I run
02:43 - this or we haven't done anything yet
02:45 - let's just talk about this a second so
02:46 - I've got two items here I've got item 1
02:48 - and item 2 but first we say is people
02:53 - think of a rink of lists in different
02:55 - ways you might think of a variable as
02:57 - being like a box and box has got a name
02:59 - which we give it to and inside the box
03:02 - you know we've got the in this case
03:04 - Apple as our string is stored inside the
03:06 - box a list is like a series of boxes but
03:09 - stored right next to each other and
03:11 - belonging to the same name if I do
03:13 - switch to interactive mode to just show
03:15 - you a few things
03:16 - presenter I've now to find this list
03:19 - called shopping list
03:20 - we've just two items that we say
03:22 - defining because really we're defining
03:23 - the structure here we've got two items
03:25 - stored in one dimension but I'll talk
03:27 - more about that later I can use in very
03:30 - similar to a variable I can change the
03:32 - values after they have been defined so I
03:35 - can we you know kind of redefine this
03:38 - with just maybe just Apple so one item
03:41 - instead of two oh Santa that's perfectly
03:44 - fine if I was using at Apple which is
03:46 - another data structure I mentioned
03:48 - earlier I can't do this at Apple is said
03:51 - to be immutable you can't change it
03:53 - after its first to find a bit like how
03:55 - constant can't be changed after is for
03:56 - us to find except for in Python we don't
03:59 - have constants I can also have an empty
04:00 - list so if I are maybe not quite sure
04:03 - what I'm going to put in it a bit like
04:05 - how you might initialize a variable to
04:07 - be a value like zero or an empty string
04:10 - we can also set a list to be empty by
04:12 - having no item in it by waiting lists
04:15 - for copy items are separated by commas
04:17 - and so far no comments here I've got no
04:19 - item so that's perfectly fine and wonder
04:22 - how strings can be accessed via their
04:24 - index over cleaned
04:25 - of different characters so if I do Guido
04:28 - as a name here assign Guido to variable
04:31 - names I don't know why PAP low but names
04:34 - we can index this by going names and
04:37 - following it with square brackets and
04:39 - putting an index number but we start
04:41 - counting from zero so capital G here is
04:43 - four zero index the first item but the
04:47 - zero index or nominee item the first
04:49 - character so we get G and so we can
04:52 - index it using that and really a list
04:55 - works in the same way a string is kind
04:58 - of coming from a list really so if I
05:00 - just set another one do a names properly
05:02 - this time just overriding this variable
05:05 - so we kind of both names as a variable
05:07 - and a list at the same time this will
05:08 - just get rid of the variable set Guido
05:11 - and let's do Alice Bob and Charlie ABC
05:17 - like that we've got now four items
05:20 - I kind of a same way use my index number
05:22 - so again zero in this case is not going
05:24 - to be capital G this is going to be
05:26 - Guido like that because we're indexing
05:28 - the zero for item in the list or the
05:31 - zero index if I wanted to get Charlie
05:33 - returned and I used V next number four
05:36 - but as Charlie is four for four item
05:38 - this is going to give me an error an
05:40 - index error because my index is out of
05:43 - range because really charlie is the
05:45 - fourth item but has an index of three so
05:48 - I should have used three not four and we
05:50 - can use all have the same index and
05:51 - drinks we did with strings you know if I
05:53 - want to start to index number two and
05:55 - just continue to the end I can do that
05:57 - that's perfectly fine we get Bob and
05:59 - Charlie if I want to use a negative
06:01 - index to start counting from the end I
06:04 - can do this time maybe a negative index
06:07 - of minus three and then the game just
06:09 - continue this to the end like an hour
06:11 - going to get Alice Bob and Charlie I can
06:15 - reverse the audit in my list using a
06:17 - third argument fever index if I want to
06:20 - swap it round
06:21 - lists have got an order which we can
06:23 - change other structures like except
06:27 - doesn't have an order get to order
06:28 - doesn't matter of the items but they do
06:30 - in lists just to show you a few useful
06:32 - functions and methods there are loads
06:35 - and loads of ones like with strings I
06:36 - won't show you all of them if you need
06:38 - eight
06:39 - pick one basis to google it no honesty
06:41 - because there'll be one built in or some
06:43 - method so you want to sort it or reverse
06:46 - it or something like that you can look
06:48 - up already showed you reversing actually
06:49 - earlier but anyway so useful one is
06:51 - checking the length so in this case I've
06:54 - got an empty list and I can check for
06:56 - length with the Len function so I can
06:59 - type it in list because you get 0 here
07:01 - because nothing's in it if I add 1 to it
07:03 - so you might think you can once you have
07:05 - to find it like this maybe if you want
07:07 - to add an item you use the zero index
07:09 - and set it to below the issue of this is
07:14 - really an error because it says for this
07:16 - assignment index is out of range which
07:18 - is because the 0th index doesn't exist
07:21 - yet because you've got no items at all
07:22 - and so python can't add in the item it
07:25 - can't change the item which doesn't
07:27 - exist so instead we have to use a
07:28 - difference this case in this case a
07:30 - method not function because we apply it
07:32 - directly to our object in this cases
07:34 - lists we do our list name and a dot and
07:37 - then we do our font in our method which
07:39 - is append so if we are appending a item
07:43 - we're just adding the item to the end
07:45 - and we don't have to worry about using
07:47 - any index because we're just putting a
07:48 - TV end no matter how big the list is at
07:51 - the moment now if I type in list and
07:52 - let's just leave a length actually
07:54 - length for the list I should get 1 now
07:56 - we have our item in the list if I want
07:58 - to get rid of this item I can use list
08:00 - dot remove and this will get rid of your
08:03 - first instance of the item if you have
08:05 - multiple instances of this item it will
08:08 - only get rid of the first one and we can
08:10 - check the length again you should now
08:13 - have 0 because it's got rid of hello I
08:15 - like we did with strings we can use the
08:18 - in keyword to get a boolean value to see
08:21 - if we've got a string in our list so if
08:24 - I do
08:24 - let's do Python in list we should get
08:28 - true returns and of course if we were
08:29 - doing this in script mode we'll need to
08:31 - set the sign back to a variable if we
08:34 - want to do a C++ to see if it's not in
08:37 - the list we could do not unless we use a
08:41 - boolean operator not so you just reverse
08:43 - it and because C++ is not in the list we
08:46 - get true that is like a search which
08:47 - doesn't tell us where it is so we can
08:49 - use list dot index
08:51 - and then supply our item looking for and
08:54 - should return us fiend s index exists
08:57 - that if I do list but index and do C++
08:59 - first time like that we get an error
09:03 - because it's not in the list so you may
09:05 - need to do this check first and then
09:08 - have an if statement with this as a
09:09 - condition and then you can use to be
09:11 - index as well to prevent this error just
09:13 - to show you a few more things we can do
09:14 - so we've got two lists to find like this
09:16 - I can use what is either the addition or
09:19 - concatenation operator depending on the
09:22 - data type if I add these together let's
09:25 - see what happens it puts the two lists
09:28 - together so despite the items here being
09:30 - integers it doesn't work like normal
09:32 - addition it works like concatenation of
09:34 - participants together if you want to
09:35 - maybe change ABC so that it also
09:38 - includes XYZ as well so kinda like
09:40 - appending another list to it not just
09:43 - one item in that case we can do your
09:45 - mental assignment and do plus e cos of
09:47 - an XYZ then if I get X if I get ABC
09:51 - again it'll have all of the items and
09:53 - XYZ appended as well so I've got a list
09:57 - which is 1 3 4 5 and I just missed out
10:02 - to by mistake and I want to go back and
10:03 - change it because the lists are ordered
10:05 - and because we have these fixed indices
10:08 - I can't just add in 2 and it would fix
10:11 - itself so a few ways you could approach
10:13 - this one of them might be to try and
10:15 - change the index of this case if you
10:17 - want to change for e 2 2 this would be
10:20 - an X of 1 I changed just a to visually
10:22 - being it doesn't really fix the problem
10:24 - because it's replaces free and so we're
10:26 - also missing for you between 2 & 4 so
10:28 - instead we can use a a method in this
10:31 - case which means I have to put the list
10:33 - name then a dot and then the method here
10:35 - it's called insert and it takes two
10:38 - arguments in four brackets the first one
10:40 - is the index we want to insert it so in
10:43 - this case because I've made a mistake I
10:45 - want to be index 2 to get free back then
10:48 - I'll do a comma and then I'll put in 3
10:49 - which I wants to be put into that index
10:52 - and press ENTER and now if I get my list
10:55 - have a look at it we should have index
10:57 - well index 2 with the item 3 under it
11:02 - okay I want to end by just talking about
11:05 - dimensions which it won't get what
11:08 - sounds a lot harder than it is so I'll
11:10 - try not to overcomplicate it
11:11 - so so far I've just looked at lists
11:13 - which operate in one dimension so
11:16 - thinking like you know an x axis the x
11:19 - axis on its own as a line is operating
11:21 - in one dimension and so far we've only
11:23 - store data in one dimension in one
11:26 - direction really just horizontally so
11:29 - you kind of got like a row of data here
11:30 - one two and three are our items in this
11:33 - list it's only stored in one direction
11:35 - well tentatively we can use two
11:37 - dimensions so to dim list thinking about
11:40 - adding in that y axis alongside the x
11:42 - axis we can now have a second dimension
11:44 - and really in practice this just means
11:46 - we've got a list within another list so
11:49 - I start off my list unusual but instead
11:52 - of putting in like a single item like
11:53 - this I'm going to put in another list so
11:56 - I didn't square brackets I can now just
11:58 - do one two into three in this one I
12:00 - close off this list as our first item so
12:02 - I do a comma then add in a second item
12:05 - to the game going to be another list and
12:07 - let's do four and five and six I close
12:10 - this off and make sure I close off again
12:13 - because really we've got in our first
12:15 - position our first index index zero
12:17 - we've got a list 1 2 3 then our second
12:20 - position our first index we've got 4 5 6
12:24 - again in its own list and it's why we
12:26 - have double square brackets here so if I
12:30 - have a look a bit so 1 dim is really
12:32 - easy to index we index with just one
12:33 - number looks at how we start counting is
12:35 - 0 now with to them if I do exactly the
12:38 - same thing and using the X of 0 press
12:41 - ENTER I get my first item which in this
12:45 - case is a list it on its own so 1 2 3
12:47 - but if I want to access one of the items
12:50 - in this sort of sub list I have to use a
12:54 - second a second index number so I'll do
12:57 - 0 say I want to get a 1 in this case
13:00 - I'll do another 0 because in this list 1
13:05 - is for zero index press ENTER and I get
13:08 - just 1 if I want to get just five I'm
13:11 - going to again just make sure I use my
13:12 - identifier and then
13:14 - because I want because five is in this
13:15 - second list in index one I'm gonna put
13:18 - down one but as I sort of row if you can
13:22 - imagine a table and now we're looking at
13:24 - four column so I've looked over rows now
13:26 - looking at four column we want to get I
13:28 - think I said five which is our index
13:30 - number one in that list against we have
13:33 - one one and this will get us five so if
13:36 - you are wanting to imagine this 2d array
13:38 - as a table we would have you know
13:42 - warranty free as a row then we have four
13:44 - five six as a second row and it means
13:46 - our first index number is going to be
13:47 - our row index and our second index
13:51 - number is going to be our column index
13:52 - because once we have sort of targeted a
13:54 - row targeted an item we can then go
13:57 - inside for item and look at the
13:59 - individual item of in it so this would
14:02 - be really our column index but you may
14:04 - not even need to think of it like that
14:05 - that may have confused you as if it has
14:07 - don't worry because if you've understood
14:10 - it that's fine and really you you learn
14:12 - this by playing around with it a little
14:13 - bit so trying to figure out you know I
14:15 - want to get six this is going to be a
14:17 - first and next one a second index of to
14:20 - get six you can also have in you can
14:23 - also have dimensions further than two
14:25 - you know we can kind of imagine a
14:27 - three-dimensional object we condom we
14:29 - can't imagine a 4d 5d 6d object because
14:32 - it don't exist in our real world they
14:34 - can't exist in Python so afridi all
14:37 - right let me try and do one here okay so
14:39 - I've done a I believe is a free
14:40 - dimensional right here six it takes a
14:42 - little bit of concentration because the
14:44 - character start to blur together so you
14:46 - can see here we first will have our sort
14:47 - of outer list which is fine our first
14:50 - item in this list is a 2d array of
14:54 - itself so we've got so that ends it ends
14:58 - here so we've got within it
15:01 - its first item is a list on its own the
15:03 - second item is another list then we have
15:05 - a comma which is for our outer list and
15:08 - we have the same thing over here as well
15:09 - so let's try this and try it in
15:11 - dexterous it's going to need free index
15:13 - numbers to target of individual items in
15:15 - this in this case we could just start
15:18 - easy and do a sort of triple zero index
15:23 - like this and we should get one because
15:25 - we're looking at our first
15:26 - item and our first item again him in our
15:28 - first item is one great to get 12 it's
15:32 - not gonna be quite as simple because I
15:34 - haven't done this in a nice you know
15:37 - consistent order because I've got two
15:39 - items in our first level our first
15:43 - dimension horizontal so this would be I
15:46 - want to get one because we start
15:47 - counting zero again in each of our sort
15:51 - of vertical list we've got two lists so
15:54 - again I'll have one here and then
15:56 - finally once we get beyond that we're
15:58 - now in this list we want the third item
16:01 - which would have an index of 2 so I
16:03 - should get 12 here which I do which is
16:05 - good and so on so I could do a fourth
16:07 - dimension as well which will just
16:08 - confuse things even more if you've got
16:10 - that many dimensions you've got a kind
16:11 - of question why you've got so many it
16:14 - seems unnecessarily confusing but I'd
16:16 - really recommend you have a play around
16:17 - with this set some or set some lists I
16:22 - should say yourself and practices
16:24 - indexing practice targeting individual
16:26 - items to try and get your head around
16:28 - how this works
16:29 - I will now suggest you pause the video
16:32 - and have a go at these two questions
16:33 - which are not too long question one is a
16:35 - little bit tricky I think maybe you
16:37 - won't find it tricky let's see about
16:39 - predicting the output from two blocks of
16:41 - code and question two is about
16:43 - programming a tiny little program to
16:45 - mimic what might happen at the guest
16:48 - have a door of a party with a look maybe
16:50 - a bouncer checking your list and this
16:52 - will require various wings we looked at
16:54 - in this video and also the if statements
16:56 - from the last video