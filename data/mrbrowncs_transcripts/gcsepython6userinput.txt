00:00 - hi in our sixth tutorial let's start to
00:02 - look at how we can take
00:03 - data from users and start to do various
00:06 - things with it
00:07 - okay so we've talked about outputting
00:08 - there is more we could talk about
00:10 - but that would do for now to input data
00:12 - to a computer
00:14 - we use the input function in python this
00:16 - is also built in
00:17 - like sdr and print we'll look at how we
00:20 - can make our own functions in future
00:22 - videos
00:23 - a function is sort of containing some
00:25 - code and it performs a particular job
00:28 - in this case inputting is allowing us to
00:29 - type stuff in printing is showing stuff
00:31 - on a screen
00:32 - they're performing jobs which invocation
00:34 - built-in functions
00:35 - are difficult for us to do ourselves and
00:37 - so the events of python have been kind
00:39 - and have done certain things for us and
00:41 - we can use these functions in our code
00:43 - so input we have the identifier which is
00:47 - input
00:47 - and followed by our brackets inside
00:50 - brackets is where you put some data
00:51 - which the function can use
00:52 - in the same way that prints advert
00:54 - string
00:56 - inside of a number of a variable so we
00:58 - can run
00:59 - this code now with empty bracket so
01:01 - nothing is supplied to input
01:03 - and we just get a cursor on our shell
01:06 - and i can type stuff in here and press
01:09 - enter but nothing is happening because
01:11 - nothing is happening with our input so
01:14 - what i can do
01:14 - is set this input to be a variable so
01:17 - let's call this
01:19 - user input i can't call it input because
01:21 - input is
01:22 - used by the input function so if i now
01:25 - run this again
01:27 - and type in qwerty again and press enter
01:31 - again nothing's happening because all
01:32 - we're doing is just say saving this
01:34 - value
01:34 - qwerty to this variable so let's do this
01:36 - a third time but now print out
01:38 - use it and put down here and let's run
01:41 - again
01:42 - third time lucky qwerty and now we are
01:45 - saving our variable and then immediately
01:46 - printing out to the user
01:48 - of course in a prop program we do some
01:49 - processing after this step
01:51 - and you'll notice when i run this that
01:53 - initially nothing shows up which isn't
01:55 - very useful to the user
01:56 - if the user has no idea what to input or
01:59 - even if they're meant to input
02:00 - so we can do is have a print statement
02:02 - say above the input but also
02:04 - we can supply a message inside this
02:07 - input the message is going to be text
02:09 - and so will be a string
02:10 - so i can say enter your
02:14 - age or let's do we did price enter
02:17 - into the price like that
02:21 - and now we can stop this and run it
02:23 - again
02:24 - and it will now be clearer to the user
02:26 - what they're doing and you can see we
02:27 - can actually type in the price after
02:29 - this if i type in five
02:31 - and press enter i get five outputted
02:33 - like this
02:34 - and if i get rid of his first print
02:35 - statement let's replace it with the one
02:37 - we had before
02:38 - with my separator which is an empty
02:40 - string an empty string being just two
02:41 - quote marks back to back
02:43 - so if i run this we'll get what we had
02:45 - before except it now adapts to what we
02:47 - are inputting so if i do instead 10
02:49 - press enter we get the price being 10
02:51 - pounds so immediately it's much more
02:53 - useful to us
02:54 - all right let's do a tiny bit of
02:55 - manipulation to this value
02:58 - in the uk the sales tax is 20 for v80
03:01 - 20 of 10 is two and so in total we want
03:04 - the new price to be 12 pounds
03:06 - once you've added the tax in some
03:07 - countries like america you um
03:10 - they don't give a tax front until you
03:12 - actually buy the item which is quite
03:13 - annoying
03:14 - so we could do we could do user input
03:17 - times with the asterix 1.2
03:20 - because 1.2 is increasing the value by
03:24 - 20
03:24 - or we could shorten this using an
03:26 - augmented assignment and just go
03:28 - times equals 1.2 because we want to
03:31 - update
03:32 - user input with this latest value and
03:34 - then if i do something very similar and
03:36 - copy
03:37 - this and just change this to something
03:39 - like the post
03:41 - the post tax price is what
03:44 - i if i now run this let's see what
03:47 - happens so first of all i'm prompted
03:48 - again for for price i can put it in
03:50 - let's put in 10
03:51 - press enter and we get an issue
03:54 - so actually it's printing out the price
03:55 - initially perfectly fine this is this
03:57 - line line four
03:58 - that's working fine but then it stops
04:00 - working
04:02 - in line 6 which is where we are doing
04:04 - this augmented assignment
04:05 - this type of error is a type error
04:07 - meaning we've got some issue with our
04:08 - data type it's because
04:10 - it's saying we can't sequence by
04:11 - non-integer of type float which is a
04:14 - little bit hard to understand but the
04:15 - issue here is
04:16 - for this value of user input if i
04:19 - previous by soon
04:20 - print and use another built-in function
04:22 - called type
04:23 - user input file just comment out these
04:26 - two lines commenting is really good
04:27 - because you can get rid of certain lines
04:29 - make them not run when we are trying it
04:32 - if i try this again
04:33 - we'll see that actually this input is
04:35 - going to be a string
04:37 - so class for class the type of the input
04:40 - user input
04:41 - is a string not a float or an integer
04:44 - which would be fine for this calculation
04:46 - so the issue is it's trying to multiply
04:48 - what it thinks is a
04:50 - some text with the value 1.2 and it
04:52 - can't do that and it can't do that
04:54 - because it's not the correct data type
04:56 - we need to do that casting which i
04:57 - talked about earlier let's get rid of
04:59 - this line that's me just
05:01 - showing something so we need to convert
05:03 - user input
05:04 - to be a float and because float is quite
05:07 - a short word
05:08 - for casting a function for this is just
05:10 - float it's not a shorthand version
05:12 - and we can apply this casting of a few
05:15 - different points it's going to be before
05:16 - user input here
05:17 - so just to make it quite readable let's
05:19 - just add in a line here
05:20 - where we are setting user inputs we're
05:23 - changing the assignments
05:24 - from a string into a float and so we can
05:27 - do this
05:28 - there are a few ways you can do this but
05:29 - i think this is fairly readable we're
05:31 - changing user input which is a string at
05:33 - this point
05:34 - into a float and then this code should
05:37 - work
05:38 - so i'll type in 10 press enter price is
05:41 - 10 pounds and the post tax price is 12
05:43 - pounds
05:45 - it doesn't look particularly pretty but
05:47 - i would personally try and convert it at
05:48 - the earliest opportunity
05:50 - so do it right at the top when you are
05:53 - you want to wrap your input which is
05:56 - where the actual value 10 is coming from
05:58 - as a string
05:59 - wrap that in a float casting operation
06:02 - and then it will change straight away so
06:03 - actually this line 96 is no longer
06:05 - needed
06:06 - you'll see the difference is that it
06:07 - says here the price is 10 pounds with
06:09 - decimal point it's because
06:10 - already at this point that 10 is a float
06:13 - not a string because i've done it in the
06:14 - second line
06:16 - now pause the video on this slide and
06:17 - have a look at these questions
06:19 - two and three require you to do some
06:20 - programming if they are too easy if you
06:22 - can do them really quickly then try and
06:24 - expand and try and increase
06:26 - the challenge by changing the problem to
06:28 - extend it