00:00 - hi the second challenge I'm posing is
00:02 - going to be surrounding palindromes the
00:04 - idea being to practice a few different
00:07 - techniques which are covered in video
00:08 - 789 in my playlist and of course videos
00:11 - before that it's been particularly I'm
00:13 - focusing on constructing basic
00:15 - conditions doing some string slicing
00:18 - using selection and using a couple of
00:20 - built-in functions as well so to do this
00:22 - challenging you to know of this these
00:24 - topics so in this task in this challenge
00:27 - I want you to be able to write a program
00:30 - which allows a user to enter some text
00:32 - and then this program is going to
00:34 - reverse that text and print it back to
00:36 - the screen so for instance Hello would
00:39 - become Olly because that is the reverse
00:42 - so that's the first stage of this
00:44 - program the second stage is where the
00:45 - palindromes come in so it should also
00:47 - check if the text is a palindrome and a
00:50 - palindrome is where we have the text
00:52 - which is the same forwards as it is
00:54 - backwards so race car and kayak are both
00:57 - palindrome so if we look at those two
00:58 - words if you flipped around if you
01:00 - reversed it it's the same word and so
01:02 - that's what a palindrome is hello isn't
01:04 - a palindrome because Hello is not the
01:06 - same as ollie so you can also have once
01:09 - you remove punctuation and spaces you
01:11 - know us to have phrases which are
01:13 - palindromes so for example do geese see
01:15 - God if you get rid of those spaces and
01:18 - punctuation and make it a lowercase this
01:20 - would also be a palindrome as well so
01:23 - that is my core task for you in sort of
01:25 - two stages for second stage does rely on
01:27 - the first stage to help you do this here
01:30 - are some success criteria so it should
01:32 - be some user input
01:33 - we should check to see if this input is
01:35 - longer than two characters we want to
01:37 - use variables with meaningful names we
01:39 - want to use operation to reverse the
01:41 - input use print and keep the user in
01:45 - communication with the program so they
01:46 - know what's going on use if statements
01:48 - with a condition use else as well and
01:50 - have two comments at least to explain
01:53 - what's happening and if you'd like a bit
01:54 - more challenge I've written some
01:56 - extension criteria as well the first two
01:58 - are not covered by any of my videos I
02:01 - haven't shown you how to do this so far
02:02 - which is quite cheeky me been asking you
02:04 - to try and do it but actually a lot
02:06 - programming is trying things and
02:08 - researching and you know
02:11 - going beyond what you know already so
02:14 - the first one is trying to work get get
02:16 - your code to work on phrases and not
02:17 - just words
02:18 - so like Dukey see God by removing spaces
02:21 - and also punctuation and secondly see if
02:24 - you can detect if as input is just
02:26 - numbers or letters and the news fatten
02:29 - your output so for example one two three
02:31 - two one is a palindrome it's the same
02:33 - for words as it is backwards but it's
02:35 - also a palindrome number to try and
02:37 - distinguish between it being a
02:39 - palindrome number and a palindrome
02:41 - string four are a few ways of doing the
02:44 - second one in particular the third one
02:45 - is about writing a function which sort
02:47 - of contains your key code here which I
02:49 - won't show you how to do that because
02:50 - it'd be covered by a future video but if
02:53 - you do know how to do it it's a good
02:53 - chance to practice that skill as well
02:56 - so now I'd recommend you pause on one of
02:59 - these slides and have a go at this
03:01 - yourself I'll now show you a solution if
03:03 - you want to just skip to the solution
03:04 - you can have a look in the description
03:06 - for a link but yours won't may well be
03:09 - different to mine okay right so I'm in
03:10 - Rhett plate which is how I'm going to
03:11 - code this solution and I've gotten a
03:14 - paste in my criterion just to make
03:15 - things a bit simpler so we could just do
03:17 - have a variable text set this to the
03:20 - input do you want some input from user
03:21 - we could just say enter assignment text
03:23 - it doesn't doesn't need to be
03:25 - complicated program here it's basically
03:27 - under this so you have that gap before
03:29 - the user enters it and now I say I want
03:33 - to have a check to see if this input is
03:34 - longer than two characters
03:35 - now this isn't well I suppose but when
03:40 - we do look a loop sin future videos is a
03:43 - slightly better way of doing it but here
03:44 - we can use an if statement switch if
03:45 - statement is for selection here we are
03:47 - doing some decisions some selection
03:49 - between whether this input is longer
03:51 - than two characters or shorter than two
03:53 - characters so we want to condition after
03:54 - our if keyword we want to see if this
03:57 - text is longer than two characters so we
04:02 - need to use a built-in function called
04:03 - Len to find the length of this text
04:07 - string and we want this to be greater
04:09 - than two like so then do our colon press
04:11 - ENTER and now we're going to put our
04:13 - main code here if it's not longer than
04:16 - two we could you know just tell the user
04:20 - the longer two characters I mean the
04:24 - program's going to end at that point now
04:26 - if we had a loop we wouldn't just end
04:28 - the program we could just get them to
04:29 - him input it again so we can now put our
04:33 - main code inside the main body of if
04:35 - because we want it's been augmented
04:36 - characters a voice is not really going
04:37 - to be a meaningful palindrome the
04:40 - program okay so that's the first couple
04:42 - of points out the way really easily my
04:44 - third point about using variables we
04:46 - have to use one variable already it will
04:47 - use more I'm sure and the second bit
04:50 - here about meaningful names this is to
04:51 - say you know your variable should be the
04:54 - name should give you a clue as to what
04:55 - it does because it's really hard as you
04:58 - may know from experience looking at
04:59 - someone else's code first of all trying
05:01 - to figure out what's going on but also
05:02 - that's made much worse if they have just
05:04 - use stupid variable names and giving it
05:07 - you know names of bear buddies and so on
05:09 - so it's good idea to try and keep it
05:11 - relevant I mean here a text doesn't tell
05:14 - you too much but I think it would help
05:15 - you figure out you could be more
05:17 - specific you could be text to check
05:19 - palindrome but it just gets a bit too
05:21 - long and it defeats the point a little
05:23 - bit so we'll kind of say word for
05:26 - deceptive app but we'll keep watch for
05:28 - making sure it's meaningful now we want
05:30 - to be able to use a string handling
05:31 - operation to reverse the input our best
05:34 - way of doing this is with string slicing
05:36 - so the string slicing is where we want
05:38 - to get substring out of one of our
05:40 - strings and we do this using so if we
05:43 - have text we'll do this using square
05:45 - brackets and we can put two different
05:47 - indexes if I want to get index 0 if when
05:50 - I start maybe index to go towards the
05:52 - end and we could just print miss to see
05:55 - what's gonna happen so if I am something
05:59 - like let's do race car as one word it's
06:04 - going to just get rid of off the first
06:06 - so I'm not going to show first two
06:07 - characters because we're starting at
06:09 - counting indexed to remember programming
06:11 - always starts counting at zero and so
06:13 - we've got 0 1 2 we start counting at sea
06:16 - so that's string slicing but we can also
06:19 - use string slicing to reverse it and we
06:23 - have a third parameter in this or
06:26 - indexing operation witches are steps is
06:29 - really
06:29 - if we put a negative step size at
06:31 - negative 1 here what it's going to do is
06:33 - reverse it
06:34 - so if I again type in racecar this time
06:37 - we're gonna have it reversed life I
06:39 - doesn't notice reversed because it's a
06:40 - palindrome if I do it different example
06:42 - if I do hello
06:43 - we should get oli as we'd expect let's
06:49 - just check our conditions work you know
06:50 - if I just do hi we should get to be it
06:54 - should June let us move forward okay so
06:57 - if reverse the input but I haven't
06:58 - really communicated to the user has my
07:01 - next one asked for so if I just edit
07:03 - this print statement I could say your
07:06 - text reverse is and then end off this
07:12 - string do a comma because it's separate
07:15 - it's a separate object to our been
07:16 - reversed text the common remember is
07:18 - going to add a space for us which is
07:20 - quite nice but also I had a coating on
07:21 - here maybe mix a little bit cleaner so
07:23 - it's a bit more community communicative
07:25 - to the user we have already used if and
07:28 - else so we can remove these criteria as
07:31 - well and now he's add a few comments we
07:33 - haven't done our second stage of our
07:34 - program haven't you done anything to the
07:35 - palindrome jet if I hadn't a comment no
07:38 - up here we are checking checking link or
07:43 - input Danny Amana say must be greater to
07:49 - program ends now these comments are not
07:52 - necessarily particularly useful to be
07:54 - honest but in proper programs a bit like
07:57 - how your variable should be meaningful
07:58 - without comments it becomes really
08:00 - really hard to understand what's going
08:01 - on some programs are so confusing
08:03 - they're actually you need a bit of help
08:06 - with our comment so here we could say we
08:08 - are using the step size value as minus 1
08:14 - to reverse the string all right so let's
08:17 - extend our code to actually make it into
08:20 - a palindrome checking program now which
08:23 - we sort of have got the but you never
08:24 - mean what forth because really we're
08:25 - just checking to see if the original
08:27 - string is the same as for reverse string
08:29 - racecar was hello wasn't so again we're
08:32 - gonna have another if statement nested
08:33 - inside this off if statement need to
08:35 - make sure our indentation is kept
08:37 - consistent because this if is going to
08:39 - belong inside bischoff and you can see
08:41 - the indentation the little gap shows us
08:43 - that it is the case so if I do enough
08:45 - conditioner I want to see if
08:47 - or text is the same as our reversed
08:52 - version of the text so exactly the same
08:56 - string slicing operation again and this
08:59 - double equal sign is allowing us - to
09:01 - compare the two sides as opposed to as
09:03 - seen if one is greater or lesser at the
09:05 - other and if they are the same it is a
09:07 - palindrome the alt text is a palindrome
09:11 - way so if it's not else covers all other
09:14 - cases we could do Elif and do text not
09:17 - equals to reverse text but actually we
09:20 - can just do else because it covers all
09:21 - other cases we could say let's hex is
09:23 - not eight-pound one like that could drum
09:28 - is just a check this works so race car
09:30 - should be a palindrome which it says it
09:33 - is perfect
09:34 - whereas hello jingling so one thing
09:38 - which could throw a spanner into the
09:40 - works of our code is if I type in race
09:42 - pal with a capital R at the start we're
09:45 - gonna get told miss is not a palindrome
09:47 - and I realized now it says your nothing
09:50 - is not apparent during the text or not
09:51 - palindrome big issue here is I think the
09:54 - human would say well this is a
09:55 - palindrome because the capitalization
09:57 - doesn't really matter but to a computer
09:59 - capital R is totally different to
10:00 - lowercase R they have different codes
10:02 - inside the computer and so that
10:04 - comparison is failing because they're
10:06 - not the same but actually we want them
10:08 - to be treated the same I would suggest
10:09 - so what you can do here is make sure you
10:12 - are standardization standardizing your
10:14 - input if you--if capitalization doesn't
10:17 - matter you can make sure all of your
10:19 - letters are going to be all lowercase or
10:20 - uppercase so what I would do right at
10:23 - the start here is after I've got the
10:26 - user input I can just convert whatever
10:29 - input this is to be all lowercase or
10:31 - uppercase so I'm setting text again to
10:34 - be the old version of text I'm now going
10:36 - to call a method on message string
10:38 - handling method which will do this
10:39 - function for us and this is called our
10:41 - lower or upper which makes a lowercase
10:44 - or uppercase respectively looking try us
10:46 - again and if I now type in race car
10:49 - it should get we are being told it's a
10:51 - palindrome because it's ignoring that
10:54 - capitalization however it looks a bit
10:56 - weird because we've got in some Tex race
10:58 - car events reversing it but it's making
11:00 - it all lowercase so it's not quite
11:01 - reversing it it's converting it for us
11:03 - so actually you may want to set this
11:05 - variable up here to be something called
11:06 - maybe standardised standardized again
11:09 - having meaningful names and then we can
11:11 - leave this version of text down here but
11:14 - let's just copy and paste for
11:15 - standardized version down in terms of
11:18 - our actual comparison because that's
11:21 - what we care about the standardized
11:22 - version behind the scenes if user can
11:25 - see the original bit of text so
11:27 - hopefully this works
11:29 - yep no bhavanti would be a good place to
11:32 - add another comment just saying a
11:34 - capital letters don't matter so all text
11:40 - is converted to lowercase okay so those
11:44 - are sort of basic core requirements done
11:46 - in a fairly short program here over a
11:49 - few potentially tricky bits right mostly
11:52 - dealing with the string handling and
11:53 - also using for selection and having nest
11:55 - in selection as well if you want to
11:57 - exclude all text or too many characters
11:59 - but now let's try and get us to work
12:01 - with phrases because that was one of my
12:03 - extension bits as well so do you see God
12:08 - is a example of a phrase palindrome so
12:12 - we're getting Tobias is not a palindrome
12:13 - because we have issues here right for
12:16 - what the capitalisation was sort of
12:17 - fixed but we always have the punctuation
12:19 - here which is going to cause some issues
12:21 - because for question mark is not this is
12:24 - not a poor start it is at the end so
12:26 - what I could do to address this is kind
12:29 - of assume my last character is always
12:31 - going to be punctuation like a question
12:32 - mark or a full stop and just remove that
12:35 - last character now I mean there are
12:39 - issues of this right because it not only
12:40 - there's no punctuation always at the end
12:42 - but also if you haven't got punctuation
12:44 - I'm going to remove your last character
12:45 - if you didn't want to go down this route
12:46 - you could use a slashing operation like
12:49 - this we're starting off of a zero index
12:51 - which we can leave off for include if we
12:53 - want to then our colon and then our last
12:55 - index is going to be the last one we
12:57 - don't serve a minus the minus one in
13:00 - debt
13:01 - is our last character so miss case for
13:03 - question mark the hawai - slicing works
13:05 - is we're counting up until bat points
13:07 - we're not including that second index
13:09 - applied and so this should if I just
13:11 - print out standardized and also why
13:14 - don't we print out for a versed version
13:16 - of this as well just to see it we should
13:19 - get rid of it but also but there'll be
13:22 - some issues as well as we'll see so
13:23 - let's try this so even even when we're
13:27 - sort of typing in the case expected here
13:30 - we have punctuation at the end like
13:32 - question mark it is working because it
13:35 - is it has got writ has removed that
13:37 - question mark but you can see reversed
13:41 - version skating not the same as our
13:43 - original version because we haven't got
13:45 - the spaces also need to be removed
13:47 - but anyway it's come back to that
13:48 - because you know this is not really a
13:50 - good solution because if you typed in
13:52 - anything else if you typed in race let's
13:54 - run this again if we typed in a race car
13:56 - without punctuation at the end it's not
13:59 - it's not gonna work because it's
14:00 - removing that last character so let's
14:03 - remove these lines from this sort of
14:05 - slightly naive attempt which you know
14:07 - it's worth ago you won't
14:09 - you definitely programming won't get
14:10 - things first try it so let's instead
14:11 - find another way of removing punctuation
14:14 - now I haven't taught how to do this
14:16 - because it's kind of right there's not
14:18 - much point teaching everything all it's
14:20 - probably impossible to teach everything
14:22 - because there's so much hyphens been
14:23 - around for a long time now so really the
14:25 - solution is when you are programming is
14:27 - to look things up there's no harm in
14:29 - looking things up lots of exams nowadays
14:31 - at university level allow students to
14:34 - look things up during programming
14:36 - assessments because it's unrealistic to
14:38 - learn every single function it's just
14:40 - not how things work in real life so if I
14:43 - if I just googled here remove
14:45 - punctuation Python
14:46 - I'll get lots of responses and choosing
14:49 - for correct you know place to look can
14:52 - be a skill in of itself if you are quite
14:55 - knowledgeable you can just look straight
14:56 - at the documentation which Python
14:58 - develops but a lot of that isn't
14:59 - designed for you know newbies I suppose
15:05 - so this website Stack Overflow crops up
15:08 - a lot and again it's not necessarily
15:10 - designed for newbies either but people
15:12 - can ask questions
15:13 - and there'll be answers to solve the
15:16 - issue they are having and you know these
15:18 - are the answers here from 2008 so it's
15:22 - likely your question has been answered
15:25 - by someone else as it has here so you're
15:27 - gonna read a little bit carefully and
15:28 - you'll see you know as a probably a
15:30 - beginner at this point lots of code
15:32 - doesn't make much sense right now but we
15:34 - have got an answer to our question down
15:36 - here it says for higher versions of
15:38 - Python user following code this line
15:41 - above wouldn't work because this is for
15:43 - Python 2 we're trying to do Python 3 so
15:45 - this line here where we use the built-in
15:47 - function called translate will do the
15:49 - job for us
15:49 - so we can just copy and paste this if
15:51 - it'll be careful you know doing this it
15:55 - can become a bad habit certainly as a
15:57 - teacher I see so much copy and pasted
15:59 - code without any attempt to change or
16:02 - understand what's going on so you know
16:05 - someone will just puts it in and leave
16:06 - it of course you've got to change it
16:07 - right so we've got to incorporate this
16:10 - into our code so we've got standardized
16:12 - one and now with midler case in line 3
16:15 - you want to now remove all punctuation
16:17 - and can lose your news first line of
16:19 - code this s is our variable we're doing
16:21 - on sweet standardized standardized and
16:25 - what translate does is you know as its
16:28 - as it suggests takes one string and puts
16:30 - it and convert into another string the
16:32 - actual arguments here but as we have STR
16:36 - our datatype string
16:38 - it's got another method called mekt
16:40 - ranzz and we have now three different
16:42 - bits of data going on two empty strings
16:44 - and then string type punctuation which
16:46 - is a lookup table so Amos works is
16:48 - really it's looking up all the
16:49 - punctuation and actually why don't we
16:51 - just print out print string to the
16:54 - punctuation and try that except we're
16:57 - gonna have an error but let's just see
16:58 - what the error says first of all because
17:01 - fact do this first so you get a name
17:05 - error says name string is not defined so
17:07 - in this line string to punctuation
17:08 - string is not defined in its expecting
17:11 - string to be a variable or an object but
17:13 - it's not yet and that's because we need
17:15 - to actually import a what we call a
17:17 - library or a module called string and
17:21 - actually you that's one of the issues
17:22 - with maybe using online sources doesn't
17:24 - actually say here you
17:25 - to import string so a newbie can get a
17:28 - bit confused which is why this is an
17:29 - extension task so we've imported ring
17:32 - and now it we can print this again I
17:33 - should have Reap it was before my into
17:35 - some texts bit but here we can see on
17:39 - this line ignore the other lines the
17:41 - punctuation in this lookup table and
17:43 - none of these we want in our actual
17:45 - palindrome so let's just remove line 7
17:49 - or comment it out at least that's always
17:50 - quite useful and uncomment line 8 and
17:54 - let's see how this does now yeah let's
18:00 - have a look at what this does so far so
18:03 - in some text let's do a race car with an
18:07 - exclamation mark at the end it says it's
18:10 - a palindrome so now we have removed this
18:12 - issue with punctuation and it's working
18:15 - better
18:15 - there still if we have safety once again
18:17 - and do it with a phrase as opposed to a
18:19 - single word so geese sea god question
18:24 - mark question mark won't be an issue but
18:26 - the issue is going to be these spaces
18:28 - because the spaces are causing it to not
18:30 - be equal forwards and backwards both
18:32 - wait just before we move on to that if
18:34 - you do use a source from one line like I
18:36 - said can quickly become a bad habit if
18:37 - you do is too often personally I do it
18:40 - fairly often where I think most
18:41 - programmers do I didn't know how to do
18:43 - this start to look at myself but it's
18:47 - always important to reference we got it
18:49 - from so this was answered by Brian so
18:52 - it's not the most useful name but in
18:55 - terms of it you know lots of Brian's
18:56 - about to do so it's a source Brian from
19:00 - and we could give a link couldn't me to
19:02 - this article just to make sure we're not
19:04 - you know using someone else's work
19:06 - without credit if you do you know if you
19:09 - submit any assignments to say school to
19:11 - university without giving credit it
19:13 - can't give given lots of trouble for
19:15 - plagiarism so ok so actually I do know
19:18 - how to do removing spaces that's a
19:22 - little bit more calm and I haven't
19:22 - actually ever had to remove punctuation
19:24 - before I don't believe or not I can
19:26 - recall that spaces yes here we can use a
19:29 - method called replace so again I'm a
19:33 - similar sort of way standardized
19:35 - and we want this to be now replace
19:38 - following our dot and we have two
19:41 - arguments here the first one is what we
19:43 - want to get what we want to replace so
19:46 - here we want to replace the space and
19:47 - space is in a string of the two quotes
19:50 - it's just a space on your keyboard to
19:52 - have wine and space here and we want to
19:54 - replace this with nothing so we show you
19:56 - this with an empty string so here
19:58 - there's no there's nothing in between
20:01 - most quotes here we have got a space
20:02 - even if it's not incredibly obvious
20:04 - unless you look closely
20:05 - don't be now if we try this again for an
20:09 - how many times have done this now do
20:11 - please see good this should finally get
20:15 - what we want which is your text is a
20:16 - palindrome so we've done some
20:18 - pre-processing made it lowercase remove
20:21 - punctuation and removed those spaces so
20:24 - that was our first of three extension
20:25 - criteria well done if you manage to do
20:26 - that it requires some initiative and
20:29 - possibly some you know trial and error
20:31 - in doing that so well done if you did
20:33 - our second one was about printing out so
20:35 - instead of saying your text
20:36 - we're saying it's gonna be either a
20:37 - string or a number so your number is a
20:41 - palindrome
20:41 - so here if I well let's take me
20:43 - obviously if I do one two three four
20:45 - this isn't a palindrome is not and I say
20:47 - it's not a palindrome number so this
20:50 - will happen further down because we're
20:51 - doing our evaluation of it forwards
20:54 - versus backwards down here in this if
20:56 - statement so we want a third nested if
21:00 - statement within this second one because
21:02 - once we've checked if it is a palindrome
21:04 - we want to then check if it's over a
21:05 - number or a string for a few different
21:08 - ways we can do this what I'm going to
21:09 - show you is not the most perfect way of
21:11 - doing it it has issues because well
21:14 - actually it doesn't have issues for this
21:15 - purpose perhaps not always been more in
21:18 - a second so what we can do is use a
21:20 - another method which I'm taught again
21:22 - you'd have to look up called is digit
21:25 - and what was it doing is checking this
21:27 - what was currently a string so whatever
21:29 - we have in standardized so far is just a
21:31 - string because by default all input is a
21:34 - string even if it looks like a number
21:36 - and we haven't made any effort to cast
21:38 - force into an integer so check it's
21:40 - gonna here check it save as an integer
21:42 - and is digit returns true if all of the
21:45 - values in that is an integer it won't
21:47 - work with floats
21:48 - work with negative numbers so there are
21:50 - some limitations there maybe not for
21:52 - this purpose so if I compare this so
21:54 - whatever this is going to self going to
21:55 - be true or false
21:56 - we want this to be so if this is going
21:59 - to be true we're then going to print
22:01 - your number is a palindrome because we
22:05 - know it's a number one integer to be
22:07 - more specific we could say the number is
22:09 - a palindrome and else we're gonna say
22:13 - well it is a string instead we don't
22:17 - need to do enough condition because else
22:19 - covers all other cases here for only two
22:21 - cases because his digits gonna return
22:23 - either true or false so here your string
22:26 - is a palindrome so fingers crossed if we
22:29 - try this it should work so what was all
22:31 - when I give so one two three two one
22:35 - should be a palindrome except that I
22:37 - forgot that each digit should be all
22:38 - lowercase I will forget these things
22:40 - and so let's try this again one two
22:42 - three two one should now work once I
22:46 - correct my code so yeah your number is a
22:47 - palindrome if I try race car again which
22:49 - should beat your string is a palindrome
22:51 - see if this works
22:52 - and it does as well we did have a third
22:55 - optional extension which was to make it
22:57 - into a function I won't show you this
22:58 - because actually it's not too hard once
23:00 - you know how to do it though I'll be
23:01 - covered in a future video so that covers
23:04 - this challenge hopefully you tried it
23:06 - yourself and had a good go tip if you
23:08 - didn't manage to do everything that's
23:09 - absolutely fine because they artfully
23:11 - things up I made some mistakes doing
23:13 - this so that's ok definitely ok v2 so if
23:16 - you have any comments or questions
23:17 - please let me know otherwise thank you
23:19 - very much for watching