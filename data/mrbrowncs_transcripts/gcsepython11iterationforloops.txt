00:00 - hi this is the first of two videos which
00:02 - are going to look at iteration in Python
00:04 - in this video we're looking at four
00:05 - loops and in the next one we'll look at
00:07 - while loops
00:07 - okay so iteration is I suppose for most
00:10 - formal way of talking about it but we
00:12 - can also call it so we've got iteration
00:13 - right which is the sort of most formal
00:16 - way of referring to what is just
00:18 - repetition and equally we can call this
00:20 - looping so looping is where you're
00:22 - repeating something in code and that
00:25 - means we are iterating and so I've
00:27 - mentioned before we have these three
00:30 - main programming constructs we have
00:31 - sequence selection and iteration so far
00:34 - we've looked at just sequence and
00:35 - selection we're now doing iteration of
00:37 - course oftentimes programs and I suppose
00:40 - life more generally is very repetitive
00:43 - with doing the same sort of stuff over
00:45 - now again maybe with slight differences
00:47 - so maybe we've got a a list with some
00:51 - names in it and we're trying to print
00:53 - out each of the names well we can do
00:55 - what we did previously in the last video
00:58 - and just use the index number so it
00:59 - could be print names of an index of 0
01:02 - it's our first one and then I can repeat
01:05 - this two more times for Bob and for
01:08 - Charlie like this and print out this way
01:15 - but imagine if this is like a list with
01:17 - hundreds of items in having hundreds of
01:20 - lines of code doing the exact same thing
01:22 - is really not very efficient each of
01:25 - these lines of code needs to be
01:26 - translated by the computer
01:28 - each of these needs to be saved in our
01:29 - Python file we need to either write or
01:32 - copy each of these lines it's not very
01:34 - efficient for any of us well it's over
01:36 - us over computer it's not very efficient
01:38 - for either of those two it will also
01:40 - make you a code horrible to look at
01:41 - because you just have loads and loads of
01:43 - pointless lines which are doing very
01:45 - very similar things and anyway sometimes
01:47 - we don't even know how many times we
01:49 - need to do this repeat maybe we are
01:51 - having the user add items to our list we
01:54 - don't know how long the list is going to
01:55 - be when we are writing our program and
01:57 - so doing something like this isn't going
01:59 - to work unless we have you know an if
02:01 - statement with every single possibility
02:02 - which by definition we can't do so loops
02:05 - are how we can do this in a much more
02:08 - sensible manner in Python we have two
02:10 - iterative structures and
02:13 - the selection we only had VF statement
02:15 - albeit with two other clauses elsif and
02:18 - else but with iteration we have two so
02:21 - we have four loops for loops and we have
02:25 - wire loops so let's start by looking for
02:27 - loops first of all so if I want to
02:29 - convert what I just did before into a
02:31 - for loop I can do for name and names and
02:35 - then do a colon this is a for statement
02:37 - we're beginning with a four keyword
02:39 - which is in a lower case we also have an
02:41 - in keyword which we've used before to
02:44 - check whether something belongs into
02:45 - something else it's quite versatile it's
02:47 - being used in a little bit of a
02:48 - different case say we're seeing we're
02:50 - basically looking for outfits lists
02:53 - called names and each item is going to
02:55 - be called name and this is a variable we
02:57 - are setting up just for this loop and
02:59 - each each loop is going to assign a new
03:02 - item to this starting of beginning and
03:04 - ending up with charlie so if I press
03:06 - ENTER after my colon exactly the same as
03:09 - with if statements we get a little bit
03:11 - of indentation we get a gap at the start
03:13 - of our line this was put in for me by
03:15 - repla if it's not doing it for you you
03:17 - kind of add a tab and backspace to get
03:20 - rid of it and it's hard to get back and
03:21 - this indentation is really important
03:23 - because it is what's telling Python what
03:25 - should go inside the loop what should be
03:27 - repeated in other words if we don't have
03:29 - it Python there's got no way of knowing
03:31 - where the loop ends and where it begins
03:34 - so if I now just do print name I'm using
03:38 - this variable we don't assign it like a
03:40 - normal way it's being assigned for us as
03:42 - it goes through the list and we'll get
03:44 - the same output as we did so that is Bob
03:47 - Charlie each time it's repeating its
03:49 - repeating three times in this case
03:51 - because it's how many items we've got on
03:52 - the list it is just printing out the
03:55 - name and the name gets updated each
03:57 - iteration
03:58 - generally speaking we use for loops when
04:00 - we know in our mind how many times we
04:02 - want to repeat in this case we just want
04:04 - to repeat as many times as there are
04:06 - items in our list so he can print each
04:08 - one individually you know if I added a
04:10 - fifth item to this fourth item should
04:13 - take a count it's just going to update
04:15 - the number but I'm still repeating the
04:17 - same I still know it's going to be the
04:19 - same number of times as the items in the
04:21 - list and so because of this for loops
04:23 - are also referred to as count
04:26 - it's controlled loops and more generally
04:29 - speaking our so-called definite
04:31 - iteration both mean the same thing
04:32 - really that we are we are looping based
04:35 - on a counter really and we are defining
04:37 - that counter ourselves we can look at
04:40 - our loop and know how many times it's
04:41 - going to iterate even if maybe it's that
04:44 - exact number is going to be determined
04:46 - at run time maybe if a user is inputting
04:49 - how many times but we can still look at
04:51 - it and know when it's going to end and
04:53 - this is different to a while loop as
04:54 - we'll see but what I've just done is
04:57 - change my names list from a
04:59 - one-dimensional list into a
05:01 - two-dimensional list we can see we now
05:03 - have a lists within for wider lists and
05:05 - so if I run my code again let's see what
05:08 - happens maybe let's just collapse this a
05:09 - bit more and run this so instead because
05:13 - we're still iterating through the items
05:15 - we are just getting the lists which are
05:18 - items but we're not getting the exact
05:20 - item within that item so if we want to
05:23 - get maybe Alice and her age and print
05:26 - those out I need to do a nested leap
05:29 - within this loop so if I just get rid of
05:31 - this print statement and do another for
05:33 - loop so when we're nesting it constructs
05:35 - we're putting it in another construct to
05:37 - find out do for item for item in name so
05:44 - we're using in this case this name is
05:47 - now a list because I need you to trace
05:49 - from you're assigning a new list to the
05:51 - name variable or it's a list in this
05:52 - case ever name object and now we can
05:55 - look within that list and assign a new
05:58 - variable called item for the individual
06:00 - item in that sub list so now I can do
06:02 - print and you could do print item so
06:05 - let's see what this does if I just get
06:07 - rid of that white space so we should get
06:09 - each of the items sort of printed
06:11 - individually like that so that's okay
06:13 - but it's not for greatest formatting
06:15 - what I could do is change the end
06:18 - parameter to be an empty string or just
06:23 - a space actually so it isn't going all
06:25 - on two different lines so let's have a
06:28 - look at this fuchsia race is gonna put
06:29 - them all onto one line which is not
06:31 - maybe what I want or maybe one Alice 30
06:32 - then Bob five then Charlie 77 on
06:35 - different lines so I can do is if I make
06:37 - sure I'm out of this
06:39 - nested loop I want to be out of that
06:40 - iterative structure because I want to
06:43 - while show us in a sec if I do print and
06:45 - this time I'm going to do a string but
06:47 - I'm going to do a backslash and an N
06:49 - this is an escape character and I do a
06:52 - backslash it I am escaping the next
06:55 - character so it doesn't believe this n
06:57 - is an actual M like a character n it's a
07:00 - command to the interpreter so all this
07:04 - does is it goes on to new line so this
07:05 - is a newline character so if I run this
07:08 - now we're gonna get Alice Verde Bob 5
07:10 - Charlie 77 day 41 on different lines
07:13 - because I've added this new line
07:15 - character now the question is how could
07:17 - we write code so that it says something
07:19 - like Alice is 30 Bob is 5 charlie is 77
07:22 - because what you could do you could do
07:24 - item and then so the first item is going
07:27 - to be Alice I can you write some comma
07:29 - and then is and then another comma to
07:31 - make sure I'm separating this once again
07:33 - it's going to look funny it's gonna Alex
07:36 - is 30 years the Bob is 5 is it looks
07:39 - stupid because we're just repeating it
07:41 - and it doesn't know which item is the
07:43 - first one in which is the second one
07:44 - doesn't care that's one of the issues
07:46 - with using a for loop like this but
07:48 - syntax is really really simple but it's
07:52 - just giving us our item about anything
07:53 - else if I just switch to the shell just
07:57 - to show you another way of writing for
07:59 - loops which can help us with this issue
08:00 - Friday first I'd like for I in range 5
08:04 - and the colon let's just break this
08:06 - apart quickly again we've got a variable
08:08 - we are setting and range is a built-in
08:12 - function to Python and it can take at
08:13 - least one argument so if I press ENTER
08:15 - now and if I do a tab because this
08:18 - doesn't know but it's a tab it doesn't
08:20 - know that it's an indent yet and type
08:22 - print I and presenter nothing happen
08:26 - because it's given me a chance to add
08:28 - something else but if I press ENTER
08:30 - again two more times I get 0 1 2 3 4
08:33 - printed out to me so we have gone here
08:37 - we have I being assigned and in each
08:39 - loop is being assigned a new value from
08:42 - range so range when it's got one
08:44 - argument starts off counting at 0 and
08:46 - goes up and to but not including the
08:49 - number you put inside so it's counting
08:51 - at 0 1 2 3 4
08:53 - not five because that's what we've put
08:54 - into the argument but each loop we are
08:57 - using that variable n just printing out
08:58 - to the user and we can call that
09:00 - variable anything we want to as long as
09:02 - it's not a reserved name a certain call
09:06 - account is generally convention to call
09:08 - it I also J is used a lot doesn t matter
09:11 - generally speaking we want to have
09:12 - variables which are meaningful but in a
09:14 - loop it doesn't matter so much
09:16 - especially if it's being used as just a
09:18 - counter so range can take multiple
09:20 - arguments if I do
09:21 - first of all wanna start counting it to
09:23 - I've put in two as my first argument
09:24 - then a comma and the second argument is
09:27 - going to be again the upper range but
09:29 - not including VapoRub number so if i
09:31 - want to go up to a five this time i'm
09:33 - gonna put six presenter and again i have
09:35 - to make sure I do my tab which I forgot
09:37 - print count and press ENTER press ENTER
09:42 - again and this time you get two three
09:44 - four five now range should also take a
09:47 - third argument if I do something like
09:49 - four let's do J in this case for J in
09:52 - range and if I do so say I want to count
09:54 - backwards from ten to one the third
09:58 - argument is there to be the step size so
10:01 - how big of a gap should be between
10:03 - numbers by default is going to be one so
10:05 - if I now do is my first if my starting
10:07 - point I wanted that to be ten my own
10:09 - point I want to be one but like with
10:12 - before it's not including that number so
10:13 - I'm gonna put a zero then in my third
10:15 - argument I'm going to put minus one
10:17 - which makes it go backwards a bit like
10:19 - how he did that reverse indexing and I
10:21 - do : do a tab and print J and I should
10:24 - get ten going down to one I think more
10:28 - so than with how I showed for for leaf
10:31 - before where we iterating across a list
10:33 - when we're doing range it becomes more
10:35 - obvious why it's called a count
10:36 - controlled loop we are counting up and
10:39 - that's what we were doing really with
10:40 - the list as well we're counting up or
10:42 - down in this case but we know how many
10:44 - times are going to count if we have a
10:46 - look at the loop this will be different
10:47 - to your while loop so let's try and use
10:49 - this in adapting our program here
10:51 - because really what I want is if I just
10:53 - remind myself what this did so we have
10:56 - Alice's thirty is no ideal we want it to
10:59 - be Alice's 30 and not harvesters
11:01 - afterwards and what we could do which as
11:04 - I said it's not the only way of doing
11:05 - this we could do
11:06 - Auto vez in a loop we're happy with you
11:08 - out early because we're getting the sub
11:10 - list if I auto this and go instead for
11:13 - let's say let's do index in range and we
11:18 - want to start a zero because we know
11:20 - there's something in that list and I
11:21 - commend you as my second my end point if
11:24 - I'd leave a length of that name which is
11:28 - that list we are getting in each
11:29 - iteration I know that as we were before
11:33 - the end point is one greater than the
11:35 - number you actually going to go up to
11:36 - and so if we try to index this we know
11:39 - that because we start counting at zero
11:40 - the length is always 1 more than the
11:43 - highest index and so this will work okay
11:45 - if I now we can now use the index which
11:48 - is now a number as opposed to an item to
11:50 - actually index the item ourselves so if
11:53 - I now go something like this
11:55 - well let's just all of a server that
11:58 - works and it was before so if I add it
12:01 - now
12:01 - if I'm now going to use this iterated
12:06 - index to actually index the item in the
12:10 - name array or name list I can run with
12:11 - it should be exactly the same which is
12:14 - but now if I want to maybe only and in
12:17 - is if it's following the first item in
12:19 - the name list well I can do an if
12:21 - statement here to do this if I do could
12:24 - do if if index equals equals zero you're
12:29 - going to print the name plus is like
12:33 - that make sure we have an indentation so
12:36 - we've got a few levels now a few levels
12:37 - of annotation you can see up here and
12:40 - now if that's fine if it's not in X of 0
12:43 - if it's in X of 1 I'm going to just
12:46 - print out the item like so and now if I
12:50 - run this it should work how we wanted it
12:53 - to so Alice is 30 Bob is 5 and so on so
12:56 - we're just altering what we're doing
12:57 - based on the next number here but we
12:59 - needed to change this to a different
13:01 - kind of for loop so just to summarize
13:03 - what was this doing we have this two
13:04 - dimensional list up here and not
13:07 - absolute Pierre is basically just
13:08 - checking through each item so it's
13:10 - assigning in this case in the first
13:12 - iteration Alyce and 30 under the list
13:14 - name and name it's been going to start
13:16 - counting from zero
13:18 - until one because the length of name in
13:22 - this case is two we've got two items in
13:24 - that sub list but we're not going to go
13:26 - up until - we're leaving - so we just
13:27 - have 0 & 1 and this will change if I
13:31 - added a third if I added a third item
13:33 - here it might look a bit silly but it
13:35 - would work the same it's not going to
13:37 - suddenly break because we are we haven't
13:40 - hard-coded this we're using the length
13:41 - to work out and the first time this
13:44 - nested loop loops in X is going to be 0
13:47 - and so we're going to use vaca next
13:49 - number to index name to get the first
13:52 - item which is Alice in this case the
13:55 - thing gonna add is to it and then if
13:57 - it's not the first item we don't add is
13:59 - so we have an else statement and we are
14:01 - game just index it but without for years
14:03 - added on and this backslash n is an
14:05 - escape character which tells python to
14:07 - go into a new line so in total this
14:09 - outer loop for naming names is just
14:12 - looping four times because we have four
14:14 - items at the first dimension in this one
14:17 - in this 2d list but for each of those
14:21 - four iterations its inner list is going
14:23 - to iterate if we get rid of this further
14:26 - item is going to iterate twice because
14:28 - it's going for each sub list and so in
14:30 - total we've got four times two
14:31 - iterations we have eight iterations in
14:33 - total now I would recommend you pause
14:36 - and have a look at these two questions
14:38 - the first one is trying to replicate the
14:40 - following sequences I have specified so
14:43 - have a little play around with four
14:44 - loops
14:44 - and question two is practicing with our
14:47 - double loops so having one nested in
14:50 - another which are particularly useful
14:52 - for 2d arrays so first of all try and
14:55 - populate an array by counting up from 1
14:58 - to 25 we're making sure each sub list in
15:01 - the second dimension is a group of 5 so
15:04 - 1 2 3 4 5 will be in one it will be an
15:07 - index 0 of your list 6 7 8 9 10 will be
15:10 - an index 1 and so on up until 25 and
15:12 - then to show that two views like I have
15:14 - done here have a separate structure and
15:17 - then print out each individual group on
15:19 - their own line and as always there will
15:21 - be a solution in the description