00:00 - hello having looked at four loops when
00:02 - are going to continue straight on and
00:03 - look at pythons second iteration
00:05 - construct which is a while loop now we
00:09 - can look at wire loops so in comparison
00:10 - to four loops which I count controlled
00:12 - iteration or so-called definite eration
00:14 - while loops are condition controlled
00:18 - loops also called indefinite iteration
00:23 - so we can't
00:24 - generally speaking look at a while loop
00:26 - and know exactly how many times it's
00:27 - going to loop is going to determine by a
00:31 - condition not by some counter but
00:33 - generally speaking we can also just
00:35 - convert for loops into while loops part
00:38 - the trick is just knowing when to use
00:40 - which and or depend on whether you have
00:42 - a condition or not because we know with
00:43 - if statements if we have we follow an if
00:45 - statement with a we have a condition in
00:48 - an if statement we follow the if keyword
00:49 - with a condition and if this is true
00:51 - we're going to do something if this is
00:53 - not true we're not going to do that
00:55 - something same idea with a while loop so
00:57 - we fall over keyword while with a
01:00 - condition so if I do while true in this
01:03 - case under : and print hello we're going
01:08 - to get a scary thing because it's just
01:11 - going to keep looping infinitely so we
01:14 - don't want infinite loops and programing
01:15 - infinite loops are not good because
01:17 - they're going to cause issues at some
01:19 - point sadly if I keep scrolling on my
01:21 - script mode it's not to go anywhere it's
01:24 - just saying hello over and over and over
01:25 - again if I clear this and try and cancel
01:27 - this will stop up here because we don't
01:29 - want to ruin replicas servers or my
01:33 - internet speed because infant loops are
01:35 - not good because we clearly they're not
01:37 - going to be infinite they're going to
01:38 - end at some point when your computer
01:39 - turns off or I just interrupted for
01:41 - program fair but vacant calls were on
01:43 - some errors if memory overloads because
01:46 - maybe you've got a counter maybe you've
01:48 - got count equal zero which you are
01:51 - initializing outside of a loop because
01:53 - that's a global variable and if I do
01:55 - count plus equals one here and make sure
01:59 - I print out count as well it's going to
02:01 - keep counting up and up and the numbers
02:02 - get bigger and bigger and it's going to
02:04 - have a big effect on your memory and so
02:06 - on so you can play around with it it's
02:07 - not going to cause any damage really but
02:09 - we don't infinite loop so we're going to
02:10 - make sure we make this condition
02:13 - come forth at some point if we ever want
02:14 - to stop the loop so indefinite doesn't
02:17 - mean infinite definite just means we
02:19 - don't know how many times it's going to
02:20 - loop but it will stop at some point so
02:23 - maybe if I change this true into a
02:25 - proper condition and do something like
02:27 - wild count naught equals 10 so whenever
02:33 - count is not 10 it's going to leave the
02:34 - miss case but soon as count does become
02:36 - 10 it's going to stop so you can see it
02:39 - counts 1 to 10 because it became 10 and
02:41 - so stopped this is doing the same thing
02:44 - as a for loop right could alternatively
02:46 - have done for I in range or yes to do I
02:50 - because you've already got count for I
02:51 - in range 0 through to 11 it's doing the
02:55 - exact same thing if I just print out
02:56 - count again so that's what I mean about
02:58 - you can often just convert or rewrite a
03:01 - wild leap with a for loop except I've
03:03 - done that wrong if I do four I print I
03:05 - you can generally write a for loop as a
03:08 - while loop but the power of wire loops
03:10 - comes when we're not really dealing with
03:12 - numbers necessarily so maybe we have
03:15 - some user input let's maybe do an
03:17 - authentication a basic authentication
03:19 - program authentication is making sure
03:21 - that someone is who they say they are so
03:23 - the most common example of
03:24 - authentication is a password I really
03:26 - like doing password examples for some
03:28 - reason in reality as you're writing a
03:31 - password program is a little harder
03:32 - because you can't just save passwords
03:34 - randomly so if we have maybe we have set
03:37 - a password and we are getting the user
03:38 - to check to see if their password is
03:41 - that is correct so if we do maybe a
03:43 - variable called guess if they're trying
03:46 - to guess the password maybe when I'm
03:48 - doing input built-in function and I do
03:50 - enter your password like that now I want
03:56 - to see if this password is correct or
03:59 - not correct so far use something like if
04:02 - guess equals equals password and then
04:06 - that's fine attitude print your a and
04:11 - then we can begin the rest of our
04:12 - program maybe
04:14 - the service we've done before can also
04:16 - do elsevier password wrong already but
04:18 - lower case if we get the password wrong
04:19 - we can type wrong password but the issue
04:23 - is with just selection on its own well
04:26 - that's great it works one time if I do
04:28 - to the ABC XYZ
04:30 - presenter wrong password frag amends
04:32 - that's that's it that's not really
04:34 - useful it's not really how it works
04:35 - generally speaking you know if you get
04:37 - your password wrong they give you at
04:39 - least a couple of tries to get it right
04:41 - but let's say our program is generous
04:43 - and gives the user an infinite number of
04:45 - guesses
04:45 - we've cost Kwan we can't program an
04:48 - infinite number of guesses because we
04:49 - need an infinite number of if statements
04:51 - and inputs and have just become
04:52 - absolutely ridiculous so instead we can
04:54 - just change this if into a while loop so
04:58 - already we have a condition while guess
05:00 - equals equals password in this case we
05:02 - want it to be not equal to password
05:03 - because every time they guess and it's
05:06 - not equal to our password we're going to
05:08 - get them to guess again
05:10 - so we now want to copy this input
05:13 - statement and we could just maybe
05:15 - slightly edit it and say wrong try again
05:20 - maybe like that and now we can try this
05:28 - and we want to get rid of else because
05:32 - else no longer it doesn't exist on its
05:33 - own and then afterwards we can once we
05:35 - get it right it's just gonna skip this
05:37 - loop so we can print correct and then we
05:40 - can begin our program so if I run this
05:41 - you should now work as we want it to so
05:44 - it's gonna keep asking once we get it
05:46 - wrong so if I get it wrong on my first
05:47 - try
05:48 - long try going perfect I can try again
05:52 - again I can try as many times as I want
05:54 - to but since I get it right if I type in
05:56 - ABC you should just get correct and we
05:59 - can move on and compete for program
06:01 - hopefully this example makes clear why
06:04 - while loops are called renditions of
06:05 - control loops or also indefinite
06:07 - duration because we are really after
06:09 - behest of our condition especially once
06:12 - we are having some user input involved
06:14 - we don't know when we just look at our
06:16 - loop how many times this is going to
06:19 - execute whereas we're before loop we do
06:21 - have some idea of how many times we know
06:23 - it's going to execute for a definite
06:25 - number of times of a while loop it's
06:27 - more in-depth
06:27 - we don't know for sure in our case the
06:30 - user could have got this wrong a million
06:31 - times they could have got it right first
06:32 - try we don't really know how many times
06:34 - it's going to loop until it actually
06:36 - happens I just want to end by showing
06:39 - you a few more things which are not
06:40 - super common but still are worth knowing
06:42 - I did say only we had to add an else
06:45 - left over below this while from
06:47 - something else and I got rid of it and I
06:50 - said you can't have else on e on your
06:51 - own on its own which you can't you can't
06:53 - just have an else random me in your
06:54 - program it doesn't make any sense
06:56 - actually we can follow a a while loop or
06:59 - a for loop with an else statement it's
07:02 - not only for if statements of votes
07:04 - vastly it's used most often for if
07:07 - statements when we have else following a
07:09 - while loop it executes once we have our
07:13 - condition being broken so once our
07:17 - condition becomes false but wait excuse
07:19 - so I could equally have put that print
07:21 - correct in an else statement doesn't
07:23 - really matter hugely if I get it correct
07:27 - it's now gonna print correct Wiese
07:29 - because I have it both in US and also in
07:30 - my main body of my code if we get rid of
07:33 - it and replace this with a for loop just
07:35 - a real quick one a for I in range 0 to 5
07:39 - or just a 5-man case let's get rid of it
07:42 - in but quickly I find out as prints
07:45 - I like we were doing in the last video
07:47 - and if I add on an elf's statement after
07:50 - this this what happens if I print
07:52 - finished what happens when we have else
07:55 - after four is else will get executed the
07:58 - body of else inside the indented block
08:00 - when the loop finishes so if we one of
08:03 - us will get one two four and then
08:06 - finished a keyword which is very rare
08:08 - but sounds like it's more useful than it
08:11 - is is pass so passed is reserved so you
08:13 - can't call a variable pass and what
08:16 - passed ours is effectively nothing it
08:18 - literally just passed it so this is
08:20 - quite useful as a placeholder maybe I
08:22 - couldn't really think what to write in
08:24 - this for loop but if I try and run this
08:26 - I'm going to get an error because it
08:28 - expects it says an indented block or how
08:31 - much they've got an indent here but I've
08:32 - just got nothing no code to run so pass
08:35 - is good because it can kind of be a
08:36 - placeholder until you have code you
08:38 - actually want because all it does is
08:40 - read passing
08:41 - so we go straight to finished in that
08:42 - case even if it has already looped four
08:45 - times if you prefer keywords would
08:47 - actually do something we can use another
08:49 - one so continue is used to so far maybe
08:54 - do something like if if maybe you really
08:56 - don't like for number two we could say
08:58 - if I equals equals two we're just going
09:00 - to continue and we're not going to print
09:03 - it out because if I now print print I
09:08 - and run this code what's going to happen
09:10 - is we're going to get zero one but not
09:12 - two so it is we are setting I to two at
09:15 - some point because we have it in this
09:16 - range but we are just concerns we see is
09:19 - two we are continuing and what continue
09:21 - does is skip to the end of this current
09:24 - loop so just going straight back to the
09:25 - top and loops again so anything below
09:28 - continue we'll get left out or face
09:30 - erosion and finally another keyword is
09:32 - break so you can use break to get out of
09:37 - the loop if you really want an emergency
09:39 - exit you can get out of it maybe you
09:41 - know you've got an option to exit your
09:43 - program you may have an option to exit
09:45 - and you can use break
09:46 - so here I've said when I is to I'm going
09:49 - to break so once we get to I being too
09:51 - we end our loop and that's it so break
09:54 - is quite and continuing as well but
09:58 - they're not brilliant to use if I'm
10:00 - honest I certainly rarely rarely use
10:02 - them usually you are using either break
10:04 - or continue when you have written a not
10:07 - particularly brilliant loop you know if
10:09 - you're planning wasn't very good and
10:11 - you've got a really complex program you
10:12 - may be forced to use something like
10:14 - break or continue pass is not really
10:16 - used unless you're just wanting a
10:19 - placeholder but break and continue on
10:21 - recommend using but if you really need
10:23 - to they are there to be used I guess
10:25 - fullest right now in question one just
10:27 - have a look at this tiny bit of code I
10:29 - wrote it's an example which I've watched
10:30 - I see fairly often of badly written loop
10:34 - code trying to figure out what some of
10:36 - the issues with this there are two
10:38 - arguably three issues with this and then
10:40 - how would you fix them to do what is
10:43 - trying to do and finally question two is
10:45 - trying to program a classic problem
10:47 - which is generating Fibonacci numbers
10:49 - which add up for previous two numbers
10:51 - starting with zero
10:53 - so pause the video and try these three
10:56 - parts are to a B and C just increasing
10:58 - it in doing question - you can use both
11:01 - for loops and while loops Java go to and
11:03 - they'll be a sample solution in the
11:05 - description