00:00 - hi in this video we're going to be going
00:02 - through a really really common classic
00:04 - really programming task which is
00:06 - replicating the game fizzbuzz this was
00:09 - used I say was because it's sort of too
00:11 - popular now but was used as a common
00:13 - interview question because it's not too
00:16 - hard to do but if you can't program you
00:18 - can't do this
00:19 - so for quite knowledge is what we've
00:21 - looked at so far in this playlist if you
00:23 - have used this playlist but really for
00:25 - this padding to lists and also printing
00:27 - form lists using different loops and
00:30 - particular while loops and using for
00:31 - modulo operator as well so fizzbuzz as a
00:35 - game you may have all played it in maths
00:37 - I certainly remember playing it on a
00:38 - Friday afternoon in maths whether
00:40 - teacher ran out of things to do what
00:42 - Voigt works is you count up from one so
00:45 - you're counting up from one one two
00:46 - three four five but any multiple of
00:48 - three is replaced by the word phys so
00:51 - you go one two fizz any multiple of five
00:54 - is replaced by the wire buzz so you'll
00:56 - go for buzz and any multiple of both
00:59 - three and five is replaced by the word
01:01 - fizzbuzz so 15 is the lowest number
01:03 - which is both in multiple of three and
01:06 - five and so you'll say fizz bus fizzbuzz
01:08 - when you get to 15 however I want to
01:11 - make things a little bit modified
01:13 - because I want to test out a few more
01:15 - skills so I want your program to begin
01:17 - with views of being asked for how many
01:19 - first buses they want printed usually
01:21 - they're asked for how many numbers they
01:23 - want in a sequence here aren't them to
01:25 - be asked for how many fizz buzzers they
01:27 - want printed so you know even with 4/5
01:30 - buses you'll still get quite a long
01:31 - sequence up to 60 so the sequence should
01:34 - be generated by program and stored
01:36 - unless - so for example I just gave if
01:37 - you want for fizz buzzes then your list
01:39 - will go up to be 60 because 60 is 4/4
01:43 - fizzbuzz first one 15 second one is 34
01:47 - third one is 45 and the fourth one is 60
01:50 - so this should all go in a list which is
01:53 - not a ton of reason for us other than
01:54 - just to practice using lists once you
01:57 - have the list sort of populated with
01:59 - your numbers in it you're going to van
02:00 - iterate through this list and help of a
02:02 - sequence on the same line except for
02:05 - when fizz bias is printed so like this
02:07 - shows at the bottom of the screen you
02:09 - know I want to pause it to have a look
02:10 - at it properly but we've got
02:11 - on our first line so the first line here
02:13 - is asking the user for second line which
02:16 - gets outputted is four starts of a
02:17 - sequence we just come from that list and
02:20 - it's printed so of one after the other
02:22 - on one line except for when we get to
02:24 - fits by so 15 and this goes onto its own
02:26 - line when we go back to the normal
02:28 - sequence on one line until we get to 30
02:30 - where we get another face bus on its own
02:32 - line being able to replicate formatting
02:34 - like this when printing is a valuable
02:36 - skill as well because by default
02:37 - printing is not going to make it look
02:39 - like this so try and match this
02:41 - formatting exactly and to potentially
02:43 - help you build up your code here are
02:46 - some success criteria which pretty much
02:47 - you can do in order so you're gonna use
02:50 - a user input gonna use iteration and
02:51 - selection you're going to use a list
02:53 - method you're going to use a bunch of
02:55 - operator - well you should use much
02:57 - operator and then also use a billion or
03:00 - so called low logical operator add some
03:03 - comments that's always a good idea and
03:04 - then you need to print out the contents
03:06 - of this list in the format I specified
03:09 - on that slide and if you'd like a bit of
03:11 - an extension here are some additional
03:13 - criteria not as hard as in the previous
03:15 - video in a sense for you shouldn't have
03:17 - to look anything up here first of all
03:19 - make sure that user input is sensible
03:22 - so validated to make sure there's a
03:24 - suitable phone number provided because
03:25 - if they input a thousand your sequence
03:28 - is going to become so long that it is
03:30 - not a good idea so you can limit the
03:32 - number very important also make sure
03:34 - it's positive and so on
03:36 - validation is checking to make sure it
03:38 - is suitable you can also instead of a
03:40 - one d-list still by values in a 2d list
03:42 - so if you have the original numbers
03:44 - stored alongside their labels why you
03:47 - might want to do this I'm not entirely
03:48 - sure it's only really for practicing it
03:50 - because for most of the numbers where
03:52 - they aren't multiple of three or five
03:54 - you're just gonna store one x - 1 - next
03:56 - - - but it makes a bit more sense when
03:59 - you have your original number and your
04:00 - label maybe you want to keep track of
04:02 - what the original number was that would
04:05 - enable you to do it and storing it in
04:06 - this 2d way is a super harder than in a
04:08 - 1d way and also printing out as a tiny
04:10 - bit harder as well so it's good practice
04:12 - and finally it's in italics because I
04:14 - haven't taught this yet if you know how
04:15 - to write a function trying to write a
04:17 - function for us is a good habit to get
04:19 - into dealing with parameters and return
04:21 - values okay so now I've shown you
04:24 - recommend you pause and
04:25 - have a go at this it shouldn't take too
04:27 - long I'll now go through the answers but
04:30 - I'd really encourage you to try it
04:31 - yourself watching me do it is not nearly
04:33 - the same as you try it yourself and if
04:36 - you want to skip to the solution
04:37 - there'll be a link in the description as
04:39 - well
04:40 - ok so I've started with just my input
04:42 - because I think that's fairly
04:43 - self-explanatory now but I need to now
04:45 - do a loop to actually start generating
04:47 - our sequence and what type of loop doing
04:49 - would be most suitable here we could do
04:51 - over a while loop or a for loop IVA is
04:54 - okay you can generally interchange them
04:56 - but while loop is generally it should be
04:59 - used when we are not quite sure how many
05:01 - times is going to repeat a for loop is a
05:04 - definite loop we know how many times are
05:06 - going to repeat here we are relying on
05:08 - the user input and Sirte while loop is
05:09 - more suitable because we're not quite
05:11 - sure what's going to happen what we're
05:13 - relying on a condition right because our
05:15 - condition is going to be is our we could
05:19 - set account variable is our count
05:22 - variable going to essentially wanted to
05:25 - loop while our count variable does not
05:27 - equal are specified limit by the user so
05:29 - count is going to be how many these
05:31 - buzzers we generate so we can set these
05:34 - to be together except we're going to be
05:36 - careful because an input is always going
05:38 - to be a string and so we're trying out
05:40 - here we set the initial eyes count to be
05:43 - initially zero count is an integer and
05:47 - fizz buzzes is a string because I
05:49 - haven't casted Bichette stuff but I make
05:51 - sure I wrap around my input costs need
05:55 - to be an integer because otherwise this
05:57 - comparator would always fail we'll get
05:58 - stuck in an infinite loop so we're going
06:01 - to every time you come across a fizzbuzz
06:03 - we're going to increment miss count and
06:05 - eventually it will reach this limit
06:06 - specified by the user we do need another
06:09 - counter here effectively because this
06:11 - count is just for first buzzers but we
06:13 - also need to keep track of the actual
06:15 - number in our sequence so again let's
06:17 - set this to be I guess we supposed to be
06:20 - one initially because we're starting
06:21 - counting from one so now within this
06:25 - while loop - we thought the indentation
06:26 - to show that it belongs to a while loop
06:29 - we no need to check to see if that
06:31 - number is going to be
06:33 - one of our three possible labels right
06:36 - so we're now doing our selection so if I
06:39 - do if number equals equals I want to see
06:44 - if it's going to be a a multiple of
06:48 - three so actually I don't need to do to
06:51 - actually I need to get rid office equal
06:53 - sign because we're going to use for
06:54 - module operator and modulo what it does
06:55 - is returns remainder after a division so
06:59 - if this number is a multiple of three
07:02 - the remainder should be zero once we
07:04 - divide it by three right so we could
07:09 - then set this to be zero so we shouldn't
07:12 - have any remainder if it is a clean
07:14 - divide if it is a multiple in other
07:16 - words and so here we are going to
07:18 - basically write this is going to be just
07:23 - leave the time being slowly fizz we
07:25 - could do an oiler because we have enough
07:27 - condition so if that one is not true we
07:29 - might say it is going to be a multiple
07:32 - of five
07:33 - again the remainder should be zero this
07:36 - will be a buzz but if we have it to be a
07:39 - multiple of three and five
07:41 - so in the first buzzy issue here is you
07:44 - know if this number is a multiple of
07:46 - three this condition is going to be true
07:49 - and so we're going to keep the code in
07:50 - here without checking to see if it's
07:52 - also a multiple of five so we need to
07:54 - actually amend this condition to use a
07:56 - boolean value so we use here we want two
07:59 - conditions to be true for this F seven
08:02 - feature because we want to be four
08:03 - fizzbuzz and not just fizz hopefully
08:06 - I'll explain that okay and where you can
08:08 - sort of combine two conditions in one is
08:10 - by you could you know nest another if
08:12 - statement within a massive stone but
08:13 - actually it's more efficient and more
08:15 - sensible just to add in a like that and
08:18 - and keyword because and as a boolean
08:20 - value we're looking down here for a
08:22 - boolean operator as Britain operates not
08:25 - a billion value and wonders if and is
08:28 - true only if both sides of this
08:30 - expression are true so any left-hand
08:33 - side number is a multiple of three and
08:35 - also for one side where we do the same
08:37 - things but with five
08:40 - and this needs to be a multiple of five
08:42 - as well just drag that across so both
08:44 - sides of this operation to be true for
08:48 - the entire condition to be true so here
08:51 - this is fizz bus and then we can check
08:53 - to see if it's just fizz or just buzz
08:57 - pure des he doesn't matter so much
08:59 - number three is just give me four first
09:07 - okay and then we can add an else because
09:08 - if if it's not a multiple of both three
09:11 - and five
09:12 - not my spliff five no multiple of three
09:13 - it's just a normal number here and so we
09:15 - just leave it how it is so we leave it
09:17 - so I'm writing these sort of bodies as
09:20 - comments but because what I need to do
09:22 - in my slightly contrived scenario we are
09:24 - wanting to use a list to store these
09:27 - values so here we were wanting to append
09:31 - the value to a list so we can use the
09:35 - append method on a list to do this which
09:38 - is what I mean by use of a list method
09:40 - we need to initialize our list first of
09:42 - all this needs to be done outside of our
09:45 - off.if to our selection structure so
09:48 - I'll put it up by these values here if
09:50 - we create a list every time we are
09:52 - iterating through that list would be
09:54 - local to that so we don't want that we
09:56 - want to have a want to be accessible by
09:59 - our entire program because later began
10:01 - to print it so he'll put will initialize
10:02 - the list right at the top let's call
10:04 - this sequence and this is going to be
10:06 - initialized to be an empty list so just
10:08 - two square brackets back to back now we
10:11 - can append our values to this sequence
10:15 - so where we do this is by referencing
10:18 - our lists which are called sequence the
10:20 - meth is a method here so we follow it
10:22 - with our . and then the method name
10:24 - which is just a pend we have brackets
10:26 - and inside brackets is what we where we
10:28 - put the value we want to append so here
10:31 - we wanting to append if it's a multiple
10:34 - of three and five we're going to append
10:35 - fizzbuzz
10:36 - as a string I think I did fits barzoni
10:39 - exclamation mark and we do the same with
10:42 - our other sorts of labels here so this
10:46 - will be this one's buzz without the
10:49 - exclamation marks not as exciting and
10:50 - then also fizz
10:52 - I mean if it's our leave if it's just a
10:57 - normal number we're just going to append
10:58 - the number itself doesn't need to be a
11:00 - string here we can append it as it is
11:02 - which is an integer so we're just
11:05 - appending number here now we need to
11:07 - make sure after this whole thing is done
11:09 - after the we end this sequence of
11:12 - selection of different clauses outside
11:14 - of it we need to make sure we increment
11:15 - our number so in every loop we are
11:17 - adding one to our number and do this
11:19 - using movement it so an operator to make
11:22 - it a little bit shorter so number plus
11:24 - equals one because we're now looking at
11:26 - the next number in the sequence you also
11:27 - need to be careful because right now
11:29 - we're gonna be stuck in an infinite loop
11:31 - because count is never gonna equal fizz
11:33 - buzzers because we are not doing
11:35 - anything of count the count is always
11:36 - going to be zero sometimes for user into
11:38 - zero we are screwed so we need to make
11:41 - sure we are increasing the count and
11:43 - we're going to do this when we are
11:45 - getting a fizzbuzz right because that's
11:47 - what we are counting in this case so
11:50 - count also incremented but only when we
11:53 - have fizzbuzz there okay we're not quite
11:56 - done because we're not she printing
11:58 - anything yet but we can't just sort of
11:59 - test this by just at the end of this
12:00 - whole thing once we enter once we leave
12:03 - this wire loop just by printing the
12:05 - sequence the list she's not a very
12:07 - pretty way of doing it but it released
12:08 - allow us to check our code it's a
12:10 - probably a better idea to test it more
12:11 - frequently than I have here already
12:13 - let's just do it easy one just do two
12:15 - and see what we get does this look
12:17 - pretty much right it does so that is
12:23 - good because we go up to 30 is our
12:25 - second fizzbuzz and 15 is our first one
12:27 - so it looks like that cell working well
12:30 - or working okay at least the main thing
12:32 - here is I would save you order off your
12:34 - selection because I've got it wrong
12:36 - first of all as you saw I have to change
12:39 - around my conditions because I realized
12:41 - what actually if we get the order wrong
12:43 - it's gonna check the system or put a
12:45 - three or five and never actually check
12:47 - to see if it is fizzbuzz as well so we
12:49 - need to check that first and then move
12:51 - on to our sort of sub conditions Bulova
12:55 - and also making sure our condition in
12:57 - our while loop is met at some point
12:59 - right if we didn't add a miscount we'd
13:01 - be stuck in
13:02 - for loop so that I'd be obviously a big
13:04 - problem if I this is Tesla and see what
13:06 - looks like if we would have forgotten
13:08 - about just due to only one - but it's
13:10 - gonna presume well we're never gonna see
13:12 - off sequence because we're not printing
13:14 - as we go anyway
13:15 - that was not worthwhile showing so now
13:18 - let's we want to print out this sequence
13:21 - in a nicer way even is printing out for
13:23 - war list so once for list is generated
13:26 - we need to Van iterate for again here
13:29 - maybe a for loop is most appropriate
13:31 - because it we now we have this rebus
13:33 - list we know how many items are going to
13:35 - be in the list and so we can just
13:37 - iterate for it and also for loops and
13:39 - five not nice because we can just do for
13:41 - item in our list name to sequence and
13:44 - we'll go through each item one by one so
13:48 - we wanting to print this but if I just
13:50 - print item it's not going to print it in
13:52 - the way we want it to in the way I
13:54 - specified in my sort of criteria if this
13:57 - is gonna run let's see
13:59 - because make sure I fixed my coat
14:04 - so to is nothing set on separate lines
14:08 - which is not what I specified in my
14:10 - description so your honor we want for
14:12 - sort of normal numbers to be at all on
14:13 - one line separated by commas and
14:15 - fizzbuzz run its own line so how are we
14:17 - going to do this well by default print
14:20 - always goes on to a new line so print
14:22 - kind of ends with our new line character
14:24 - which I assume I've taught this in
14:25 - tutorials is for backslash so this
14:28 - backslash n not just about session on
14:31 - its own is put back slash n toes for
14:34 - computer to go into a new line so it
14:35 - ignores this and tells it to go into new
14:37 - line but print by default has this
14:39 - anyway so can we can change this by
14:42 - adding comma after item and using the
14:45 - end value which is hidden by default or
14:49 - isn't you need to actually access to
14:53 - change what was going to be at the end
14:55 - of each print statement so here we want
14:57 - just a comma and maybe two means a space
15:00 - may be an optimist
15:02 - so buddy focus is going to be a
15:04 - backslash n but we don't see that which
15:07 - is what I was trying to say but we can
15:09 - change this to be just a comma or
15:11 - whatever we want it to be okay so that
15:13 - is
15:14 - one thing we can do let's just try this
15:18 - it's not going to quite fix it properly
15:21 - refresh fat so it's now all on one line
15:27 - so it doesn't look like it is because
15:28 - I've only got so much space but that
15:30 - should be all in one line
15:31 - separated by commas it's better but not
15:33 - exactly what I want fizzbuzz is going to
15:35 - be it is embedded in all of the normal
15:38 - numbers so what we could do is just for
15:41 - fizz bars you know make an exception and
15:44 - make sure the print is normal so here's
15:45 - another if statement here embedded
15:46 - nested in was for loop so if the item
15:49 - equals equals there's bars we are going
15:53 - to instead just print the item without
15:56 - any comma after it so it gets its own
15:58 - line and then anything else is going to
16:00 - be else let's have a look at this how is
16:04 - this gonna work
16:04 - and if it's buzzes do you want we want
16:07 - to and so this is not quite work because
16:12 - the the print a new line goes after this
16:16 - fizzbuzz from Astaire's let us make sure
16:19 - we are adding in newline character
16:21 - before this as well so before our item
16:24 - which is fizzbuzz here we are going to
16:28 - add a new line character so i can do
16:30 - something that in fact we can just
16:32 - change this to be fizzbuzz because we
16:34 - know what it is focusing on character
16:36 - should make it sort of a fresh line
16:38 - before each of its bars let's have a
16:40 - look so now that sort of fixed so it
16:43 - were pretty much there the only thing is
16:44 - I didn't particularly want I don't think
16:47 - this comma after 14 because it just
16:51 - looks a little bit strange
16:53 - I'd rather get rid of the comment that
16:55 - was in my specification as well so let's
16:57 - see how what we can do about this
16:58 - alright so taking a second to think
17:00 - about this myself because it's not you
17:02 - know I don't know often when you're
17:04 - trying to formatting printing in a
17:05 - specific way it's a bit of a bad job
17:07 - because every scenario requires
17:10 - different formatting for our more
17:11 - advanced Python features which make
17:13 - formatting a bit easier but for now we
17:16 - can't do this using just what we've
17:17 - covered in the tutorials so far however
17:19 - this for loop is not particularly
17:22 - helpful to us I chose this one because
17:23 - it's most obvious you know if you want
17:25 - to go through a list
17:25 - Pifer makes it really really easy for
17:27 - item and sequel
17:29 - it's easy where you can just have access
17:30 - to the item and print it out however we
17:32 - don't always that's not always
17:34 - sufficient and it isn't in this case
17:36 - because we'd be useful here to have
17:37 - access to the index of the item as well
17:40 - so its position in the list and so we
17:42 - can we could what we could do we could
17:43 - have a counter and use that as an index
17:45 - set to be zero but let's just do it
17:47 - properly and just quickly convert this
17:49 - for loop into a different version which
17:51 - is a bit more useful to us so we want to
17:56 - do
17:56 - 4i findex in range first time so using
17:59 - range as opposed to just telling it well
18:01 - off Lister's and this range is going to
18:03 - start a zero because your next thing
18:04 - starts counting from zero and it's going
18:06 - to go up until the end of the list
18:08 - so then of sequence like so much I've
18:12 - got this two brackets Python always
18:15 - counts up until the last one without
18:16 - including the last one which is why we
18:18 - don't need to do lens sequence minus one
18:19 - to account for the zero indexing so this
18:22 - will work but now we need to change our
18:23 - code a little bit here so this relaxes
18:25 - the item anymore we haven't got that
18:27 - variable to me to start indexing it
18:29 - instead so do your sequence and then
18:31 - have our square brackets and exit using
18:33 - the ie counter in this case however we
18:36 - need to take a slight step back because
18:39 - we want to change have a formatting
18:40 - you're not just rewriting the loop so
18:43 - the reason why I've switched to v-neck
18:45 - scenes as a few where should you do this
18:46 - right you could use a factor 15 it's for
18:48 - lowest common multiple for both three
18:51 - and five and so it fizzbuzz always
18:53 - occurs at the same point off the fifteen
18:55 - numbers you could use that but I think
18:58 - it's probably best if we may be trying
19:00 - to create any more general version say
19:01 - if his bus changed as a game in the
19:03 - future so what we could do we could be
19:06 - looking for we could be looking for just
19:10 - we could be looking to see if or
19:13 - evaluate indexing so it's e coups
19:16 - sequence I but let's just edit the code
19:20 - we've got already here but it's a one
19:21 - run look at I'm trying to see if my next
19:22 - value is fizzbuzz because if the next
19:24 - value is fizzbuzz I need to not add for
19:28 - comma right if the next value is another
19:31 - number and other label we don't need
19:33 - we're just gonna have to come or not
19:34 - leaving off the commas here we're just
19:36 - going to print
19:38 - the sequence itself without visiting
19:42 - yourself from index without actually
19:44 - pointing the comma after whereas if we
19:46 - are doing any other situation we're
19:49 - going to print a sequence of a sequence
19:52 - value the item with four comma as the
19:57 - ending point right so here the only
19:58 - points but he fought a newline character
19:59 - otherwise we're going to have a comma
20:03 - but we haven't actually accounted for
20:04 - fizz buds here so visiting one the next
20:08 - one the next item is bus we're going to
20:10 - just repeat with that edit how we're
20:12 - printing previous item but if the ELA
20:15 - current item is fizzbuzz so just eye on
20:19 - its own
20:22 - we're going to print out fizzbuzz on
20:25 - this new line um because the previous
20:26 - print is gonna have this one by default
20:29 - new line we can just print this one has
20:32 - fizzbuzz okay so it's worth giving us a
20:35 - go I do think we're gonna have in it I
20:36 - can tell we're gonna have an issue here
20:37 - because we're going to get an error
20:40 - right at the end so it's printing
20:42 - actually how we want it to right up
20:44 - until the end right we can see we've got
20:45 - for commerce in this or mid line points
20:47 - and not at the end which is perfect but
20:50 - we have an issue where it's going to the
20:51 - end list and X's out of range and this
20:52 - is because in the last instance in the
20:54 - last iteration we are trying to see what
20:57 - sequence I plus one is but we don't
20:59 - we're the end so this is trying to look
21:02 - for a value which doesn't exist so we
21:04 - need to sort of changes to be a kneeler
21:06 - first of all going to have another
21:08 - condition checking to see if our
21:10 - character if our items have you end of
21:12 - the list because otherwise we can't do
21:14 - that little trick we did below says to
21:16 - start us off with an if and we're going
21:19 - now see so maybe your best way of
21:20 - singing this is seeing your item and
21:23 - it's it normally is the same as the last
21:25 - item of the list and we can do this with
21:28 - a nice trick for -1 index is the last
21:30 - item so we can see if our our current
21:33 - value is for last one over this and not
21:35 - maybe not the most efficient way of
21:36 - doing it but it will do the job so here
21:38 - we are going to what we're gonna do just
21:41 - print prints for sequence value which
21:44 - will be fizzbuzz in this case
21:47 - okay but let's have a look doesn't fix
21:50 - it us try and find out instead of
21:52 - looking up a code so yes it appears to
21:54 - fix it which is good it's not a
21:56 - particularly elegant way of solving it
21:58 - but often as I say it sort of a budge
22:00 - drop you just try you know look at each
22:03 - individual case and adapt your code to
22:06 - meet it but it is a skill definitely
22:07 - being able to replicate some formatting
22:09 - in your code because this is not really
22:11 - easy to do and there are a few different
22:14 - ways which you can do it again the kind
22:15 - of order of our selection matters like I
22:18 - did up up top you know I had to check to
22:20 - see if our if a value one is for last
22:24 - Friday before we checked anything else
22:25 - because we would have had the error so
22:26 - if you order does matter
22:27 - EAL if always comes after if but
22:29 - remember if one of these if you have a
22:31 - block like this if one of our missions
22:34 - is true graph clinicians don't get
22:35 - executed at all whereas if you had all
22:37 - if instead of e lifts all of these would
22:39 - be checked which is not really what you
22:41 - want okay so in terms of our core
22:43 - program this is all of it except that we
22:46 - all of our criteria except for misuse
22:49 - and comments I'll quickly add those okay
22:52 - so as it a few comments I mean they're
22:53 - not yeah
22:55 - it can be hard teaching people to learn
22:58 - how to add comments because you know it
23:01 - sort of the early programs comments are
23:02 - not always necessary and it's tempting
23:04 - sometimes to add comments to every line
23:06 - actually that's over explaining it but
23:08 - once you start programming properly if
23:10 - you get a job doing software development
23:11 - you need to add comments because your
23:13 - coders become a mess and it will become
23:15 - really hard to maintain
23:17 - okay so that was ROS all of our core
23:19 - requirements to extend this my first one
23:22 - was to validate the inputs to check the
23:24 - input make sure was valid right now if I
23:26 - run this our code is not very robust
23:28 - that's a strange
23:29 - however applet shows that a strange way
23:31 - so if I type the Navy see here as
23:33 - opposed to a number we're going to get
23:34 - an error because we're trying to convert
23:35 - to an integer doesn't work like that
23:37 - I could alternatively add I could 1 for
23:41 - 550 odd and replicate quite a good job
23:43 - we're actually of Demers quickly but you
23:45 - know that's potentially if on a slower
23:49 - computer that could have taken a while
23:51 - and you know so you only limit the size
23:54 - of the input and also making sure it is
23:56 - a valid number so if we're going to do
23:58 - this generally is having
24:00 - and keeping to ask for user until they
24:02 - get it until the enter a valid input so
24:04 - we're first we're going to ask for
24:05 - Matt's fine but now we're gonna have a
24:07 - while loop a while loop because again
24:09 - we're not sure how many times the users
24:11 - going to get it wrong in fear of the
24:12 - user you get a wrong infinite number of
24:14 - times and so in the condition to control
24:16 - this so well we want so first of all
24:19 - take the size of this right so while
24:23 - this number
24:24 - these buzz is is less than what you want
24:29 - to be so what is greater than SAR limit
24:31 - should be twenty just for an example so
24:34 - while it's greater than twenty we're
24:35 - going to just ask them again right maybe
24:37 - we can even put a message to say you
24:39 - know invalid valid and then we're going
24:44 - to try again right and this will keep
24:46 - looping it's what we keep you know if I
24:48 - keep entering values above twenty so it
24:51 - limits that which is quite hopeful baby
24:53 - if your program is going to take a while
24:55 - to run potentially but in terms of
24:57 - making sure it is a positive number we
25:02 - can use a a method introduced to the
25:04 - last challenge video called it is digit
25:06 - so here we we could have another wildly
25:10 - positive whispers a bit kind of bonus or
25:11 - a nested one so again we can use a
25:13 - boolean value to extend this condition
25:15 - and here we used an before and needs
25:18 - both sides to be true for it to be true
25:20 - so here you know that doesn't make sense
25:24 - right because one side would be going
25:25 - twenty and one side up in number so they
25:27 - never both can be true so here we need
25:29 - or loop which is like it's not uppercase
25:31 - or well the condition will be true
25:34 - before if one side is true even if you
25:37 - have one is false so um here you can use
25:40 - is digits that we're gonna need to edit
25:41 - our code a tiny bit so fizz buzzes door
25:44 - is digit and what this does is this
25:46 - return returns true if it finds a
25:48 - positive integer but if it's false which
25:51 - is what we care about it will return if
25:56 - it's false it will be a negative or a
25:58 - string right so here we're going to ask
26:01 - them again if it is a negative
26:03 - number or a string so let's Raman so
26:05 - we're gonna have an issue because and if
26:07 - it's buzz you want to try ABC so well
26:11 - first of all our code is trying to
26:13 - currently convert straight away to an
26:16 - integer but here we're not sure in our
26:18 - line two if actually this value is a
26:20 - valid ins just same down here actually
26:22 - so what we need to do is make sure we do
26:23 - this casting after we know the input is
26:26 - valid otherwise we will be getting
26:28 - errors right so I can down here just
26:31 - quickly do fizz buzzes and just change
26:33 - it so we are casting a previous value
26:35 - the first buzzes to answer them now we
26:37 - know it's safe following our validation
26:41 - it's a shame we can't get this condition
26:43 - on one line without squeezing this down
26:46 - okay so um ves I don't think will be the
26:49 - fix because what I was concerned about
26:51 - was I don't know what formatted like
26:52 - this
26:52 - the CERN was if we had say for just
26:57 - number 65 type out greater wise not
27:00 - supposed to be an inter-district okay so
27:01 - we need to actually cast these buses up
27:03 - here which is still not quite as she was
27:05 - expecting but that's fine
27:08 - it might work now essentially if it's
27:11 - buses it's coming in as a string and so
27:14 - needs to make sure it becomes an integer
27:16 - so let's try this now ABC invalidates
27:20 - your footing okay so I've realized what
27:22 - the issue is here a week so we need to
27:24 - switch our conditions here because for a
27:27 - way if a computer will work when it goes
27:28 - through this code is it will it will be
27:34 - checking the first condition right so
27:36 - the first condition before was in
27:37 - fizzbuzz as though if it's a string then
27:39 - clearly we have an issue here right so
27:42 - let's get rid of this and just I've just
27:44 - swap these two sides of our condition
27:46 - around so first of all now it's gonna
27:47 - check to see if this is a digit which if
27:51 - it's not if it's not if it's not a
27:53 - digital assist ring it's gonna because
27:54 - it's all it's gonna automatically mean
27:57 - this condition as true and so it's gonna
27:58 - go forward into our loop but if this is
28:00 - true so it is a number that we can main
28:03 - cast it so let's try this so if you're
28:05 - does matter here because of how we are
28:07 - arranging this so let's try ABC now it
28:09 - just works it does in fact that you know
28:12 - it says it's invalid best naturai 25
28:14 - which again work
28:16 - it's a mallet but now 19 should be
28:19 - alright and that works ok so just to say
28:24 - that gay I'm not sure how clear that was
28:25 - because I was trying to figure out
28:26 - myself we have this wildly pair right we
28:29 - have a condition with two sorts of size
28:31 - two expressions either side of or before
28:33 - hand I wasn't working I was checking to
28:35 - see if our value is integer than greater
28:39 - than 20 but we were casting it and so if
28:41 - it was a string if you use that inputted
28:42 - APC is trying to cast it to be an
28:47 - integer and it can't do that to make a
28:48 - comparison but changing rolled around
28:50 - first of what's checking to see if it is
28:52 - a digit if it's not a digit meaning it's
28:54 - a string then it's going to because it's
28:56 - all the whole thing is true and so it's
28:58 - going to move on to line five and ask a
29:00 - game however if it is if it is a digit
29:04 - if it is an integer then moves on to
29:06 - check on the second condition which will
29:07 - be able to been casted because it is a
29:09 - number and so we can do that comparison
29:11 - so if you only does matter
29:13 - you could get round that by having a
29:15 - nested while loop inside but it's a
29:17 - little bit cleaner to have one condition
29:19 - like this okay right that was our first
29:21 - of two extension criteria do validation
29:24 - now we want to store values in a to Z
29:25 - list like so we have sort of a we have
29:28 - lists within a list each a list is a
29:29 - pair within the wider list and we have
29:32 - our label next to our value so again a
29:35 - bit contrived but it's just practice
29:37 - demas right so we have sequence
29:39 - initialized here as an empty list we can
29:41 - leave this right between to edit our
29:43 - code down here because right now we're
29:44 - just appending our value straight to
29:45 - this outer list in a way we need to
29:47 - create both sort of inner lists and put
29:50 - the values in the unless the member the
29:52 - enlist in the outer list if that makes
29:54 - any sense I hope it does so we need to
29:56 - now assign another or initialize another
29:59 - list in our while loop this time because
30:01 - in each iteration we want to create a
30:03 - new table list to go in our sequence
30:05 - list mr. bliss will just be a pair to
30:07 - encourage player and again which is
30:08 - initialized its to be empty so stead of
30:11 - appending to the sequence we're going to
30:13 - append first of all to pair so in my
30:17 - slide I had our label as a second item
30:20 - so before this we're going to also pen
30:22 - for the value itself which is just
30:24 - number
30:26 - I can append an integer string and so we
30:29 - need to do the same thing down here
30:31 - for phase and biases for same sort of
30:33 - idea for the elf's value where it's just
30:35 - a number itself it's a bit weird here
30:36 - but we're just gonna forsake of things
30:38 - append this value twice which you can
30:41 - just doing two lines like that but now
30:43 - the important thing is like where we are
30:44 - incrementing our number at the end of
30:46 - this while loop you also need to now
30:47 - append our source of just created pair
30:51 - to our sequence itself so now we're
30:54 - going to append the sub list to the
30:56 - sequence list so append and pass in pair
31:00 - like so so now if I run this and just we
31:03 - size my screen I imagine it's gonna
31:05 - print out it's just we set this quickly
31:08 - margins going to print out the list
31:10 - itself in a sort of 2d structure which
31:12 - might look a little bit strange yeah it
31:14 - is because our code down here is now has
31:17 - only got one index and you should have
31:18 - two indexes to fully be able to print
31:21 - out a 2d list
31:22 - so because we only want two so normally
31:25 - for A to Z list if we wanting to print
31:26 - out every single item we'll need two for
31:30 - loops nested within each other but here
31:31 - we just want one value in the pair so
31:34 - what we need to do is just add in a
31:36 - second index to all of our references
31:38 - down here to get the second item which
31:40 - is where our label is stored like fizz
31:42 - down and up over here if it's bars over
31:44 - here we just want the label right so the
31:46 - second item and so via next will be one
31:47 - because the first item has gone index of
31:50 - zero so if I just append this index on
31:52 - to all of our references we should be
31:55 - able to run this code fairly normal it
31:59 - should be exactly the same if I haven't
32:02 - missed one off let's try so it's good
32:04 - for just tufas buzzes and yeah it's back
32:06 - to how it was before so that is my
32:07 - potential solution to this problem I
32:09 - outlined hopefully how to get with
32:11 - yourself and I had a good go too if we
32:14 - didn't try to do all of it that's
32:15 - absolutely fine there's just practicing
32:17 - and learning and so on so if you want to
32:19 - see this code you can have a look at the
32:20 - description otherwise thank you very
32:22 - much for watching