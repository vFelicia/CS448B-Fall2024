00:00 - hello in video 16 on to talk about how
00:02 - we can create two robust programs which
00:04 - is our goal using validation and also
00:07 - exception handling if we did a basic
00:09 - quiz like something like what is 20
00:14 - divided by 5 we can then check this
00:18 - input by the user so if we do something
00:20 - like if answer equals equals 20 divided
00:25 - by 5 it's always good idea to not hard
00:27 - code it because we can change it later
00:29 - and intimated service is converted to an
00:31 - integer because we can't really compare
00:33 - what we can't compare string2 finish it
00:35 - like that
00:35 - and then I can print correct if they are
00:39 - correct otherwise we can print incorrect
00:42 - so let's see how this works it's a
00:46 - fairly standard program 25 by 5 is 4
00:48 - press ENTER I get correct if I type in 4
00:52 - all answer if I type in 5 I get
00:55 - incorrect lovely it's a really simple
00:57 - program in how many lines of code if I
00:59 - get rid of for whitespace we have five
01:01 - lines of code really simple the issue is
01:04 - this program is not very robust so if
01:07 - something is robust its strong it can't
01:10 - be easily broken
01:11 - so really the opposite word to robust is
01:13 - weak this program currently is quite
01:15 - weak because if I you know don't type in
01:19 - a number if I type in G presenter we get
01:22 - a value error because it's expecting
01:25 - here in line two to be able to cast my
01:28 - input to an integer that can't cost G to
01:31 - an integer and so it has an error
01:33 - likewise if I maybe this when we edit
01:37 - this code so instead of actually hard
01:39 - coding it completely we have maybe
01:41 - number a number a a is a variable and we
01:46 - can have 20 in this one and we can be
01:48 - representing 5 and now if I change this
01:52 - so now doing a divided by B and maybe we
01:57 - let for user if I listen every user in
01:58 - purpose to okay so now I'll just changed
02:01 - it so it's um I can better show this so
02:03 - now we're getting used to actually enter
02:04 - two numbers so I can do 20 and then 5
02:07 - and what is 20 over five well it's 4 so
02:11 - that works fine if I just
02:13 - to maybe either deliberately or by
02:16 - mistake get mr. Ansari 20 divided by
02:18 - five but ones if I were like I did
02:21 - before to G we get another was for
02:23 - saying there we had before but now if I
02:25 - do my first time at twenty my second
02:28 - number zero and then twenty divided by
02:31 - zero you might think well is about
02:32 - twenty but actually we can't divide by
02:35 - zero after all we in maths it just
02:37 - doesn't make sense to divide by zero
02:38 - because we don't get it doesn't make
02:41 - sense it would be how many times a zero
02:43 - going to 20 while who knows so here we
02:45 - get a different error we say we get a
02:46 - division by zero error which is fairly
02:48 - common in programming usually not doing
02:50 - a really kind of obvious example like
02:52 - this it usually happens by mistake if
02:54 - you've got its user input in particular
02:57 - but if you got your denominator changing
03:00 - over time especially based on input then
03:03 - there's definitely a risk of having a
03:05 - divide by zero error which can be a big
03:07 - issue so this program is definitely not
03:09 - robust it is a weak program because we
03:11 - can break it by you know just typing in
03:14 - a slightly wrong input and it breaks our
03:16 - program it stops running which is a big
03:19 - problem this could in some cases lead to
03:21 - a security issue invert perhaps your
03:24 - security breaks when you put in a
03:25 - certain input but also it could just you
03:28 - know stops your program working what you
03:29 - don't want and when you are programming
03:31 - you should always be assuming that your
03:32 - end user is either a complete and
03:35 - doesn't understand what's going on and
03:37 - can't follow instructions or is trying
03:39 - to deliberately break or gain access to
03:41 - your program without permission
03:43 - in other words assume they are stupid or
03:45 - malicious and this means we need to
03:46 - program in a defensive way we are sort
03:49 - of expecting attack and so we're going
03:51 - to program in defensive way to try and
03:53 - keep our program working and keep it
03:55 - working securely I think if we move on
03:57 - it's worth just going through the three
03:58 - types of error so we have logic we have
04:02 - less you've seen that so as first syntax
04:04 - errors we've come across a lot usually
04:06 - by me mistakingly typing something
04:08 - because the syntax is the rules of the
04:11 - language and so if you break votes for
04:12 - computer can't understand it and so
04:14 - nothing really happens if I get rid of
04:16 - one of these equal signs so instead of a
04:18 - double equal sign to compare we are kind
04:21 - of trying to assign it in an if
04:22 - statement doesn't make sense and so it
04:24 - gives us a syntax error so the top of my
04:27 - code is worth
04:27 - fine but because it's sort of checking
04:29 - my code before it runs it nothing
04:31 - happens we just get the arrow shown to
04:33 - us so nice it's telling us where Vieira
04:34 - is which is quite hopeful that's reading
04:36 - that for us logic error is harder
04:39 - because logic error is working normally
04:42 - in the sense that your code will run so
04:44 - if I fix this and maybe change into
04:49 - float because I want to change this
04:50 - division to be floor divisions maybe you
04:53 - don't really know how to divide with
04:55 - rule division so you do two equal signs
04:57 - or two false lashes and so your code
05:00 - will run but maybe not exactly maybe not
05:04 - exactly how you expect it to I didn't
05:06 - end off my common map so it's running
05:09 - fine but it won't work exactly how we
05:11 - wanted to maybe our first number is 20 a
05:13 - fact let's do it again let's say our
05:16 - first number is 25 because I'm getting
05:19 - nice divide 25 divided by 2 you might
05:23 - think that's going to be 12.5 but
05:27 - actually that's incorrect doesn't really
05:30 - make sense you might be looking about
05:31 - thinking well why is that wrong and it's
05:33 - because you've got this floor division
05:34 - because the computer is taking about to
05:37 - be 12 knots 12.5 because of its
05:40 - operation so you haven't quite
05:41 - understood it it's working but it's not
05:42 - as you intended to and our third error
05:44 - is a runtime error and this is a massive
05:47 - category of errors really any error
05:49 - which occurs as you're going any fuen
05:51 - stops your program as you go so this
05:54 - could be something like you get stuck in
05:56 - an infinite loop because you've written
05:58 - a while loop wrongly your condition
06:00 - never becomes false maybe your computer
06:02 - runs out of memory which you haven't
06:04 - really got much control over as a
06:05 - programmer I guess is you've it's cause
06:07 - for issue maybe you've clogged loads a
06:08 - memory somehow so some things we can't
06:11 - predict but also we sort of have with
06:13 - within this category we have what we
06:15 - might call exceptions and exceptions are
06:18 - errors which happened during execution
06:21 - so the 0/0 air we had before that was an
06:27 - example of an an exception and when we
06:30 - tried this with the 25 a zero
06:33 - zero we get this what is an error but
06:36 - really would call an exception it
06:38 - stopping our program can see we're
06:40 - terminating our program so it's not good
06:41 - but really we can handle these we an
06:44 - exceptional I this shouldn't cause our
06:46 - program to terminate so we can make it
06:48 - more robust by handling this exception
06:50 - and we can do this and make our code
06:52 - more defensive by surrounding any sort
06:55 - of potentially problematic code in a
06:58 - try-catch block so we have a try Clause
07:01 - the try Clause is a bit like a sort of a
07:04 - safe area the code can run in and it's
07:07 - not going to cause any issues where it's
07:09 - gonna try the code if it doesn't work
07:11 - then that's fine and to catch any issues
07:13 - so if we have got an exception being
07:16 - raised we can accept it Animus except
07:19 - clauses where we can print you know
07:21 - there's been an error so instead of week
07:23 - syllabus error message we can sort of
07:25 - control this ourselves so I can print
07:27 - error so let's try this again and first
07:31 - number is 20 I mean stay zero and so we
07:35 - get error instead of the big error
07:39 - message and that means it doesn't
07:40 - actually looking different here but we
07:41 - could continue our program without it
07:44 - terminating prematurely because of the
07:47 - exception so we get hello printed out
07:51 - here which is below where these or
07:53 - fairness code was and so we can sort of
07:56 - continue of our lives without having
07:57 - been derailed by what is really a minor
08:00 - error now you do sometimes see people
08:02 - try and surround their entire code with
08:05 - a try Clause which is unnecessary and
08:08 - and it's not a good idea because really
08:11 - you want to be using exception howling
08:12 - when you know there is a potential error
08:14 - coming like it's not just just in case
08:16 - like you've got some error in mind so if
08:18 - you're doing division you should know
08:19 - already but you can't divide by zero and
08:21 - so you might wanna keep that in mind and
08:24 - usually you can you know rewrite this so
08:26 - that you're not using try at all so if
08:28 - you rewrite your condition in a slightly
08:30 - more sophisticated way you can avoid
08:33 - this all together right if you do break
08:35 - was it was answer and is not zero then
08:38 - you can continue so you can usually
08:39 - rewrite conditions to prevent this
08:41 - happening but it is useful and generally
08:43 - speaking so relax are based you know
08:45 - similar to how I said you
08:46 - really surround your entire code with
08:48 - the try clause you shouldn't really have
08:51 - except on its own you should kind of try
08:53 - and link this to a particular exception
08:56 - so instead you could do accept and
08:58 - follow this with a what's called zero
09:00 - division error and now instead of this
09:04 - we could have a slightly less generic
09:05 - message we could say don't divide by
09:09 - zero because it's undefined so now we
09:11 - get a more specific message and we're
09:13 - not just catching any old error which is
09:16 - not always wanted sometimes it is okay
09:18 - to have errors because you want to know
09:20 - what's gone wrong so it's more specific
09:23 - you can have lots of except two clauses
09:25 - each for different errors it's a bit
09:27 - like if Annie left them and you can have
09:28 - and accept as sort of your equivalent of
09:30 - else to any other exception you could do
09:33 - just a generic error message it is a
09:36 - good idea to keep it as specific as you
09:38 - can now on to talk about validation
09:41 - which isn't always going to lead to more
09:43 - robust programs it sort of depends on
09:45 - what you are validating because
09:46 - validation is where to make sure any
09:49 - input is meeting your criteria and in
09:51 - some cases the input being invalid is
09:54 - going to cause issues is going to cause
09:56 - errors like we saw before we had invalid
09:58 - input of a 0 denominator which caused a
10:01 - divide by 0 exception so it can make
10:05 - your program more robust and it's only
10:06 - makes your program more useable and
10:08 - makes me easier for yourself as a
10:09 - programmer too because as I say every
10:11 - user is often going to put in raw inputs
10:14 - so here we've got a fairly contrived
10:16 - start of some authentication program
10:19 - with some mobile security questions
10:20 - authentication being checking someone
10:22 - else who they serve ER and so maybe here
10:24 - we've got multi-factor authentication
10:25 - asking some details about from you go
10:27 - and check those details so maybe first
10:31 - of all our requirement for middle name
10:34 - is made what we would call a length
10:36 - check a length check maybe want it to be
10:39 - more than two characters I don't know
10:41 - many middle names or any names which are
10:43 - less than two characters I'm sure
10:45 - they're probably something but just as
10:47 - an example and maybe four pass code if
10:49 - you once before digits we just want it
10:51 - between so we just want a range check
10:54 - between zero
10:56 - and 9999 and for four current dates we
11:01 - just want it to be a specific value
11:03 - which is today's date and because really
11:05 - here we have three conditions we're
11:08 - going to want to validate using a while
11:10 - loop and we have I'm sure done bits of
11:12 - validation before but we can we'll bring
11:15 - an exception handling in a second just
11:17 - for middle name first of all so we want
11:18 - the middle name of the length of this so
11:22 - you wrap it in a blank button function
11:24 - and we want this to be greater than 2 so
11:27 - in other words less than or equal to 2
11:30 - then we can we are going to just ask for
11:34 - user to input again maybe you tell them
11:37 - as well that actually it should be
11:40 - greater than 2 characters
11:42 - let's check this first of all what's
11:44 - your middle name riders to a we get
11:46 - asked you feel more characters with a
11:47 - man named do a gain that's gonna keep
11:49 - repeating until we enter a valid middle
11:52 - name my middle name is John and we move
11:55 - on in terms of our pass code we want to
11:57 - be within our four digit range and so
12:00 - I've just created a condition here in a
12:01 - while loop but if it's less than 0 or
12:03 - greater than 9 thousand 999 we're gonna
12:06 - just ask again for the pass code now the
12:08 - issue is if I do something like 65 but
12:11 - is within our range but isn't really
12:13 - appropriate and so we shouldn't really
12:15 - want this to be accepted either so we
12:16 - can't do I guess
12:17 - add another or condition to this if you
12:20 - say all the length of our passcode is
12:23 - greater is less or not just not equal to
12:26 - 4 we also want that to be checked again
12:29 - the issue here is pass code is now an
12:31 - integer which because I've cast it up
12:33 - here and so we can't use Len within
12:36 - stress if I just cast is back to a
12:38 - string getting quite messy let's make
12:40 - sure I've got enough for brackets but it
12:43 - should sort of fix that issue and a lot
12:45 - of validation is trying to try things
12:47 - out and see what happens because really
12:50 - if you are assuming your users gonna be
12:52 - perfect you're gonna be tempted to only
12:53 - type in things which work so you'll type
12:57 - in you know 5,000 is a valid pass code
13:00 - and so you might be tempted to try this
13:02 - except one doesn't work because I didn't
13:05 - cast for 2nd version but you might
13:06 - assume it's working fine
13:08 - even if it's not so it's important to
13:09 - try your code with erroneous data so
13:13 - data which or input which is wrong to
13:16 - see what happens so that should actually
13:17 - work now I fix that mistake that should
13:19 - actually be an integer but let's say we
13:21 - don't actually care how long this
13:23 - passcode is we just want it to be a
13:25 - number well this is a good case for
13:27 - using exception handling because all
13:29 - user input is a string but soon as we
13:31 - try and convert it to an integer we may
13:33 - have an exception right because if it's
13:35 - not an integer then we're going to have
13:38 - an exception which we can handle so
13:39 - maybe if I just copy this and show you
13:45 - this if I if I try this right and if my
13:47 - passcode is ABC and not a number we get
13:50 - this value error so instead basement
13:52 - we've looked at before we can wrap this
13:54 - in a try Clause and then have an
13:58 - exceptionally and except clause that we
14:01 - want to accept a value error in this
14:02 - case like so then give it must be a an
14:08 - integer to work and so we has not really
14:12 - right because it's four digits or
14:14 - multiple digits but anyway be sure this
14:16 - is right if I now was your passcode I do
14:19 - a PC again at least we have no error so
14:22 - our program keeps working but it's not
14:23 - really done anything right it's just it
14:25 - must be interested we're not asked to
14:26 - been corrected so we could do we could
14:29 - wrap this in a while loop using maybe a
14:31 - condition is valid is valid is false
14:35 - initially and while is valid equals
14:40 - equals force we're going to keep looping
14:42 - and now if I just shift this across we
14:47 - could add in an else clause else can be
14:52 - used in the field of in cases right
14:53 - usually we're just if and also you can
14:55 - use it with while loops but here it can
14:56 - be used to supplement your try Clause
14:58 - because what happen is if it goes
15:00 - through the try Clause of no issues it
15:02 - will then go to the else Clause so here
15:04 - I can set is valid to be true because
15:07 - we've managed to go through without any
15:09 - issues except never gets run in that
15:11 - case except only ever gets executed
15:13 - if we have an exception which matches
15:14 - the actual name specified here so now if
15:18 - I try this we should order pass code if
15:21 - I do
15:21 - see we should now be asked again and
15:24 - again so we keep going through the
15:25 - process until I enter a valid passcode
15:27 - of course you may want further
15:29 - validation to this there is actually
15:31 - another course we can use finally which
15:33 - is used mostly for cleaning up
15:35 - especially if you're opening files and I
15:36 - want to close files which we don't want
15:38 - to do when use when use with instead
15:40 - here it will just get run whatever
15:42 - you're doing so if I just print hello
15:44 - you will see if we have an exception or
15:46 - no exception this code will get run so
15:49 - fighting ABC will get hello if I do a
15:51 - proper one four five you also get hello
15:54 - so finally is run whatever you're doing
15:56 - if you have an exception or not else is
15:58 - only if we have no exception and for our
16:01 - final screws question we just want a
16:02 - specific value we want today's date well
16:04 - to do this for computer to know what
16:07 - today's date is we have to use another
16:08 - module which is really one shame as
16:10 - quickly because it's quite useful and so
16:12 - the import time module so the time
16:14 - module has got loads and loads and loads
16:16 - of methods we can use and so it was any
16:19 - ages to explain one of them so I won't
16:20 - do and a lots of are really specific
16:23 - make sure the time the import Stemmons
16:25 - right at the top by the way
16:26 - and so we commend use it down here so
16:29 - maybe I have another variable called
16:31 - actual date and I want to set this to
16:35 - the actual date which will calculate
16:36 - using a module within a method of event
16:40 - time and to get this you can do time dot
16:42 - local time which will get you the
16:45 - current time but in a slightly weird
16:47 - format if I just comment out if I
16:49 - comment out some of our code off here
16:50 - just to make things a bit quicker using
16:52 - multi-line comments and try this out
16:54 - in fact many to actually print this
16:56 - otherwise it couldn't be very helpful to
16:58 - us we will get sort of a slightly weird
17:02 - format for this today's day 25 so this
17:05 - is a half format of our current time so
17:07 - we have sort of different components
17:08 - here and see year 2020
17:10 - month five that's going in May and we
17:12 - get all of the features which is working
17:14 - out for us but actually we want to go to
17:15 - format listen it slightly better way
17:16 - that's what we can do we can package
17:19 - this in a another
17:23 - using another method which is time dot
17:26 - SDR then F and then time for string
17:30 - formatting I believe and then our first
17:32 - argument is how we want must be
17:34 - formatted and this will be as a string
17:36 - but we can use formatting codes so if my
17:38 - cent sign is representing some other
17:41 - value here so if I do % d today then I
17:45 - want this to be a slash they don't do %
17:48 - m and a 90% after white for year by 4%
17:54 - and in my second argument I'm going to
17:57 - then use the actual date in previous
18:00 - version in that soft tupple right so now
18:02 - this will get us if I print missing
18:04 - ounce forget the printer we should get a
18:06 - setting nice of formatting of this then
18:09 - we can compare this against the user and
18:11 - tria as we get the correct date I can
18:14 - verify this is true and now we can
18:15 - compare this against the user so I don't
18:18 - show you actually need a capital y
18:19 - therefore you do actually not sure why I
18:22 - did but it's fine so what's happening is
18:23 - it's just replacing % d % hmmm % y with
18:27 - the corresponding values in the values
18:31 - found by the local time method so we can
18:33 - now compare this so I run this and ask
18:37 - me for today's date if I get this one
18:40 - wrong if I do the 18th of May 20 it's
18:42 - incorrect what's today's date what a
18:44 - funny for 17th of May 20 then I can move
18:47 - on and it's validated not really
18:49 - relevant for creating robust programs
18:51 - but just while we're looking at the time
18:53 - module if you want to time your entire
18:55 - programmers in tech see how long it
18:56 - takes to execute from start to end or a
18:59 - position of your choice we can use the
19:01 - time method within the time module to do
19:05 - the rest of us will record the time
19:07 - right now and then at the end if I give
19:08 - exact same thing and there's the right
19:11 - at the end and to end it was time but
19:14 - time I can then work out the elapsed
19:16 - time in between by subtracting the start
19:21 - from the end and I can print this as
19:23 - well so you can see how on a sweater you
19:25 - can also if you want to pause for a
19:27 - certain amount of time there before
19:29 - dramatic effect you can do time sleep
19:31 - and sleep for how many seconds you want
19:33 - within 5 seconds so let's see what
19:35 - happens I could do
19:36 - print sleeping just to see when it's
19:39 - starting like so and it's what happens
19:42 - to us if I just sort of go through this
19:44 - fairly languidly incorrect what says de
19:47 - toilette stever 17 of me 20 now correct
19:50 - it's not sleeping for what should be
19:51 - five seconds and then we'll have a look
19:53 - how long this will take
19:55 - so it took six point nine to four
19:57 - seconds and obviously you'd probably
19:59 - round this if you wanted to have it
20:01 - shown to the user a for Vista now once
20:04 - you pause this video have a look at this
20:06 - block of code and try and predict what
20:08 - these three inputs would result in Bobby
20:10 - answers in the description and question
20:12 - two only to create a sort of password
20:14 - generator which just takes two user
20:17 - inputs first of all number between one
20:20 - and ten and then their favorite color
20:21 - which is needs to be between two and ten
20:23 - characters and so you'll need to
20:25 - validate both of its input and then I
20:27 - want you to write a function which is
20:28 - going to take in both of those inputs as
20:31 - parameters and then return a password of
20:34 - a format the number followed by the
20:36 - color which has been converted to
20:37 - capital letters followed by the year
20:39 - which needs to be generated inside the
20:41 - function using the time module