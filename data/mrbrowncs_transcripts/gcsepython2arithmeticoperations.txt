00:00 - however going to begin looking at Python
00:01 - properly by starting with some
00:03 - arithmetic operations not the most
00:05 - exciting flamboyant topic to start with
00:08 - but they're really important as you move
00:10 - forwards so I recommend as you watch
00:12 - this over trying for different
00:14 - operations as I do it so copying what
00:17 - I'm doing maybe in a different tab you
00:19 - could split screen for video or there'll
00:21 - be some questions at the end which I'd
00:23 - really recommend you try to make sure
00:24 - you have understood what's going on no
00:27 - answer make sure you've watched the
00:29 - first video it shows you how to install
00:30 - it and also it talks about some of the
00:32 - basics I'm going to be working through
00:34 - this on replic if you are doing it in
00:37 - idle you just need to use your first
00:40 - show screen like this and type of code
00:42 - here press ENTER to run it or in this
00:44 - case not run it to make things that we
00:46 - clear out here we're going to ignore the
00:48 - left-hand side for time being and just
00:50 - drag this across over here if it will
00:52 - let me and now we've got what is
00:55 - effectively what we would call the
00:56 - interactive interactive show if it was
00:58 - in idle so you can see here I've got two
01:01 - faces white box is my cursor effectively
01:04 - if I press ENTER a few times for cursor
01:06 - follows down and we left hand side we
01:08 - have a prompt which is sort of an orange
01:10 - ooh rusty color and that's showing us
01:12 - where we can write our code you'll
01:13 - notice if you try and type above your
01:16 - cursor it won't let you because that
01:18 - line is effectively being run by the
01:21 - computer or reference computer already
01:23 - so we can't go back we've already run
01:25 - back code in this case we write any
01:27 - codes who didn't do much if anything so
01:29 - now and we're going to talk about some
01:31 - operations and first of all let's talk
01:33 - about some numeric operation so
01:35 - operations which work on numbers we've
01:37 - got the four basic ones so addition
01:40 - subtraction multiplication and division
01:41 - so let's start of addition which is
01:43 - exactly the same as it would be if
01:45 - you're doing it on paper
01:47 - that's called really Python is just a
01:49 - big calculator so 5 plus 6 is 11 works
01:53 - normally subtraction is the same at beef
01:56 - equivalent of a - it's a 5 minus 4 is 1
01:58 - it works normally also we can use in
02:01 - Python negative numbers so 3 something
02:03 - like 5 plus minus 6 I should get minus 1
02:07 - which works in a similar sense Friday 10
02:10 - minus minus 5 I should get 15
02:14 - because my singing and - number adds it
02:17 - so it works pretty much normally
02:19 - multiplication is different only in the
02:21 - sense of a symbol is different we can't
02:23 - use an X of an X like symbol because
02:26 - that's a letter so instead we use
02:27 - Asterix in Python so something like five
02:30 - asterisks or star ten it gives us 50
02:33 - what's normally again same idea of
02:36 - negative numbers five as minus ten this
02:39 - time should be minus 50 it works as
02:41 - you'd expect if you type something a bit
02:44 - wrong if you knew something about ten
02:45 - other note times d by mistake press
02:48 - ENTER you'll get an error message
02:50 - now these you'll see a lot of you'll
02:52 - become very familiar with me if you
02:53 - don't become familiar with them that sir
02:55 - I worry because everyone does some
02:57 - people get a little bit concerned
03:00 - getting errors which but I guess because
03:03 - in other subjects if you get stuff wrong
03:04 - an error feels like getting something
03:06 - wrong but actually it's very very normal
03:08 - in programming you'll see it over time
03:10 - even if you are an experienced
03:11 - programmer really programming is all
03:13 - about fixing errors and because we're
03:14 - doing it in this mode in this
03:16 - interactive mode and we're doing it line
03:18 - by line so I type in line presenter it
03:20 - runs having an error here is fine we're
03:23 - just playing around at the moment if you
03:24 - were doing proper programs we'd do it
03:25 - inside the script mode which is over
03:28 - here we're just doing it we're just
03:30 - messing around here so if I go down and
03:32 - look at the next operation if actors
03:34 - talk about us we're missing division
03:37 - here actually it's do division so
03:38 - division is we have a forward slash so
03:40 - if I do something like 80 1/9 should be
03:44 - 9 you'll notice here we get nine point
03:47 - zero as our output the output comes
03:50 - below this prompt driveway and you
03:53 - notice we've got nine point zero here
03:55 - and if you look up at the top we are not
03:57 - getting one point zero
03:59 - 11.0 a 15 point zero it's only happening
04:02 - once we're doing division and that's
04:04 - just how hyphens developers decided to
04:07 - implement division we have different
04:10 - data types and so for too many Meredith
04:11 - types in Python are integers and floats
04:15 - integers are whole numbers so 11 is an
04:18 - integer
04:19 - whereas 9.0 is a float also called a
04:22 - real because we have that dot 0 if we
04:24 - got rid of 4.0 if we
04:26 - 9 that be an integer but 9.0 is a float
04:30 - and those are two types two examples of
04:33 - data types there are many more in Python
04:35 - and we have got to be a bit careful
04:36 - sometimes with data types for can cause
04:39 - some issues but thankfully python has
04:42 - built-in ways to convert between
04:43 - different data types if you are really
04:46 - concerned about that having a 0 after
04:48 - your division you could do something
04:50 - like a t1 two slashes to for slashes 9
04:54 - this is floor division so it gets rid of
04:56 - any decimal point effectively show you a
04:58 - better example perhaps if I do maybe 25
05:02 - for division wings to Division 2 should
05:05 - give us 22 12.5 even press ENTER I get
05:08 - 12 is getting rid of 4.5 at the end this
05:12 - is really really useful web apps more
05:14 - useful even is mod so mod in Python is 4
05:18 - % so if I do here instead 25% or mod 2
05:23 - which stands for modulus instead of 12
05:26 - I'll get a remainder which was left over
05:29 - so if I do so 12 goes into 25 2 hot
05:34 - times 2 times 12 is 24 and we have one
05:37 - left over which is 4 why not returned
05:39 - from modulo division and modular
05:42 - division is really really valuable
05:43 - especially in computer science it crops
05:45 - up all the time especially dividing by 2
05:48 - because we're doing in binary and that's
05:51 - just how usually various means work and
05:53 - say encryption or so in parallel
05:55 - programming mode is used already often
05:57 - lots of different algorithms modular
05:58 - division is used so we have the double
06:01 - for slashes is instant division or so
06:03 - called div and the percent sign is
06:05 - modular division also called mod after
06:09 - this for main operation I have forgotten
06:11 - about is where we want to have a power
06:14 - so something like 2 squared we could do
06:17 - what - 2 squared is a bad example it's 2
06:19 - to power 4 I could do 2 times 2 times 2
06:22 - times 2 make sure giving me 16 if I ran
06:24 - that line by pressing enter that's fine
06:27 - but that's not great for doing massive
06:29 - powers again you're feeling some of the
06:30 - encryption or didn't have huge powers
06:32 - who don't want to do it like that it's
06:33 - much better to shorten it by we would
06:34 - demasters right to the little
06:36 - superscript of 4
06:39 - so instead we use in Python to asterixis
06:43 - next to each other to power for do it
06:46 - like that press ENTER and I get 16 that
06:48 - way for a few different words for what
06:51 - four words you microphone about it as an
06:53 - indicee also an exponent you might said
06:56 - 2 to the power 4 it's how you pronounce
06:57 - it if you were saying it and this whole
06:59 - process of raising one number to a power
07:02 - is called exponentiation one of the
07:05 - final things to show for this is how
07:07 - normal mathematical rules also apply so
07:09 - you may have heard of odd masks or bid
07:11 - mass which is your operations which is
07:13 - the same in Python as it is in normal
07:15 - maps so you have your brackets evaluated
07:17 - first then your order or indicee you
07:20 - exponent whatever you want to call it
07:21 - your division then your multiplication
07:23 - addition and subtraction finally sohbat
07:26 - mass or big mass so similarly let's just
07:27 - do something like if I use all my free
07:29 - plus two plus one times two should give
07:33 - us 12 which it does because according to
07:36 - what mass we are evaluating our bracket
07:38 - before you're doing on timesing by 2 if
07:40 - I get rid of that bracket and do just
07:42 - free plus 2 plus 1 times 2 because we
07:45 - are now evaluating multiplication before
07:48 - we are doing addition we are effectively
07:50 - doing 3 plus 2 plus 2 because 1 times 2
07:53 - is 2 so this time we should get 7 which
07:56 - we do so again the rules do track into
07:58 - Python you have got to be a bit careful
08:00 - you can't just only relax your
08:01 - mathematics because you're in - it is it
08:04 - is the same thing even if the symbols
08:06 - are a bit different sometimes ok now
08:08 - I've shown you each of the operations
08:09 - and you may have tried it yourself I
08:10 - really recommend you pause it especially
08:12 - if you haven't tried it yet and think
08:14 - about 8 examples here first of all in
08:17 - your head or using some paper go for
08:19 - each one and try and figure out what
08:21 - Python based on what we've just looked
08:23 - at or evaluate fluency evaluate means
08:25 - carry them out so what would Python do
08:27 - if you typed in each one and press Enter
08:29 - what would be the output shown below and
08:32 - then also once you've decided for
08:34 - yourself actually go into Python and try
08:36 - them to see if you were correct not that
08:38 - important if you're not correct but
08:39 - trying to figure out why python is given
08:41 - the answer it is