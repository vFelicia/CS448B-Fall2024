00:02 - hi there this is a quick tip for why you
00:04 - should always use the neumes for case
00:06 - handling a long time ago when I was
00:08 - getting started with game development I
00:09 - would use strings for almost everything
00:11 - so if I had some states on a character I
00:14 - would do a switch on the state string
00:16 - and he is various strain cases to figure
00:18 - out what to do this would work but many
00:21 - times I would end up stuck with a bug
00:22 - just because I wrote the case string
00:24 - slightly wrong or accidentally
00:26 - capitalized the wrong letter so in here
00:28 - I don't does match up with that state
00:30 - but if I put a capital on the D now all
00:32 - of a sudden it no longer matches and
00:34 - everything breaks so obviously strings
00:36 - are horrible for doing case handling so
00:39 - whenever you do need to do a code
00:41 - similar to this instead of using a
00:42 - string define a private room for your
00:45 - state and here you can define all of
00:48 - your values so for example an item in a
00:51 - attack State and our current state
00:53 - instead of being a string it will be of
00:55 - type state that way our compiler won't
00:58 - always make sure that our state variable
00:59 - always has valid values so in here
01:02 - obviously this is not valid we set state
01:04 - equal state that I don't and here on our
01:07 - switches instead of doing switch on a
01:08 - string we do on a more proper case state
01:11 - arrival and just like that if we now
01:15 - misspelled set of attack I put attack
01:17 - all of a sudden we get a compiler so by
01:20 - using your nomes it makes our code much
01:21 - easier to write correctly another very
01:24 - good use for in ohms is for example when
01:26 - defining item types so in here for
01:30 - example you should not do this if you
01:32 - have a class for the weapon you should
01:34 - not use a string for the weapon type so
01:36 - I'm here for to create a new weapon we
01:38 - would make a new weapon so in here this
01:46 - code would run but it would not be the
01:48 - correct way to do it so here in the
01:50 - correct way is example the same thing
01:51 - with it previously we define a family
01:53 - kinome and for a weapon type and inside
01:57 - this in home we put all the weapon types
01:59 - we want instead of having the orphan
02:01 - type of spring it is now of time what to
02:03 - type and again this keeps our code much
02:07 - easier to write since the compiler will
02:09 - help us if we do something wrong and
02:11 - that's it hope you found this tip useful
02:13 - alright see you next time