00:00 - hello and welcome I'm your code monkey
00:02 - and here let's build something pretty
00:03 - simple but also pretty essential to so
00:05 - many games let's enable the player to
00:07 - climb ladders we're going to cover two
00:09 - methods the first one just approaching
00:11 - the ladder and move forward to climb up
00:12 - so very much like Half-Life another one
00:14 - where you approach leather and then
00:16 - press a button to grab onto it so very
00:18 - much like an element ring we're going to
00:20 - cover both methods and both working in
00:21 - first and third person okay so let's do
00:24 - it if you use unity in any way
00:26 - definitely get my ultimatinity overview
00:28 - course it won't teach you how to use the
00:30 - many tools and features that ENT has so
00:32 - you can be more effective and make
00:33 - better games faster there's no need to
00:35 - build something yourself from scratch if
00:37 - there is already a built-in tool that
00:38 - works great UNT has tons of them that
00:40 - you might not know about the course
00:42 - already has 15 lectures each covering a
00:44 - different two-hour feature of the engine
00:45 - and is constantly getting free updates
00:47 - or if you prefer step-by-step courses on
00:49 - making a specific game check out my
00:51 - Builder defender course I also have a
00:53 - phone course only on using visual
00:55 - scripting there's a single line of code
00:56 - in any of those games and if you're past
00:59 - the beginner stage and you want a guided
01:00 - path to help you make the jump from
01:02 - beginner to Advanced and get my
01:03 - turn-based strategy course it will help
01:05 - you massively improve your programming
01:07 - and Game Dev skills on all courses I'm
01:09 - always available in the Q a section
01:11 - answering all of your questions every
01:12 - single day so check them out to the link
01:14 - in the description okay so here's my
01:16 - starting scene I've got my character in
01:18 - first person and I can move and look
01:19 - around over here I've got a letter
01:22 - leading up to this container and then
01:23 - this big leather going to the top of
01:25 - that building then also have another
01:27 - character controller this one in third
01:28 - person again same thing I can move
01:30 - around and look at the leather for these
01:32 - character controllers I'm using the
01:34 - official Unity star assets these are
01:36 - super awesome free assets made by unity
01:38 - I cover them in detail in another video
01:40 - you have the first person and the third
01:42 - person controllers then for the visuals
01:44 - over here I'm using the Cynthia
01:45 - apocalypse pack really great pack
01:47 - perfect for a zombie or postbuncle lips
01:49 - type of game there's a link in the
01:51 - description if you want to get it okay
01:52 - so let's begin making our leather logic
01:54 - first let's head on the simpler method
01:56 - we want to just approach a leather and
01:58 - start climbing up so here is my scene
02:00 - and over here I've got the unleader
02:02 - object first thing we need is to
02:04 - actually identify if there's a leather
02:05 - in front for that we're going to be
02:07 - using a recast so we need to make sure
02:09 - that this leather object has a collider
02:10 - which it does then for identifying what
02:13 - collider we're looking at for that we
02:15 - can identify it by the end layer method
02:17 - so we could put all of the letters on
02:19 - their own layer that would work you
02:20 - would be more performant but using the
02:22 - layer method can be a bit tricky if you
02:24 - have too many objects since you have the
02:25 - only the number of layers so let's use
02:28 - the script method which is much more
02:29 - adaptable
02:30 - so let's just create a new c-sharp
02:32 - script call this letter
02:34 - then here I'm going to go inside the
02:36 - prefab so that it applies to all of them
02:37 - and just attach the script okay so
02:39 - that's it we don't need to write
02:41 - anything on this script just leave it as
02:42 - empty this is only going to be used to
02:44 - identify this object so now let's go
02:46 - into the player script so on the first
02:48 - person controller
02:49 - let's open up the first person script so
02:52 - here it is again all of this is based on
02:54 - the official entity star assets I just
02:56 - refactored it to match my coding sound
02:58 - so let's go down to find the movement
03:00 - logic so here it is the move function we
03:04 - first test if we are sprinting or not
03:05 - then we get move Vector to test if it is
03:08 - empty or not
03:09 - after that we use that to calculate the
03:11 - speed then blend some animations then
03:13 - we've got the input then we use the
03:15 - input to rotate the transform and
03:18 - finally over here here we have the
03:19 - actual move so before this let's fire a
03:22 - raycast towards the Direction Where We
03:23 - Are Moving
03:24 - so we're going to go into physics
03:27 - and for a recast now we want to fire
03:30 - raycast towards the Direction Where We
03:32 - Are Moving and we want to do it by a
03:34 - small distance just to make sure we
03:36 - don't start climbing from too far away
03:37 - however also the way that the player is
03:40 - set up if we look in the editor over
03:42 - here for the first person controller we
03:44 - can see the way the player set up is the
03:45 - origin is right there on the bottom so
03:47 - if we test exactly from this point we
03:49 - might accidentally hit the floor or some
03:51 - tiny Pebbles so when doing the raycast
03:53 - let's just lift up the point by a little
03:54 - bit so over here we do a raycast we need
03:57 - an origin and direction
03:59 - so like I said let's start from this
04:01 - transform that position and lift it up a
04:03 - little bit so let's find a float for the
04:05 - avoid for distance and put it at
04:07 - something small maybe just point one f
04:10 - so we lift it up by this bit then for
04:13 - the direction it's going to be the third
04:14 - Direction so this one is based on the
04:15 - player input then let's just grab the
04:18 - rake acid so out for the raycast hit
04:22 - and finally distance so we don't grab
04:24 - from too far so we float let's call it
04:26 - in leather grab distance
04:28 - and let's grab the leather within let's
04:30 - say 0.4 units so this like this actually
04:33 - here we want to lift it up a bit so
04:35 - pause the vector three dot up multiplied
04:37 - by that all right so this is our raycast
04:39 - let's do a quick test so if this one
04:41 - succeeds let's do something so over here
04:44 - just say debug.log let's go into the ray
04:46 - cassette and print out the transform
04:48 - okay so with this let's test so here I
04:51 - am I can move around and if I approach
04:52 - and I push towards the leather yep there
04:54 - you go it doesn't find the letter and if
04:56 - I push towards the container yep the
04:57 - container and over here this couch yep
04:59 - it does fine okay great so we are
05:02 - correctly identifying Which object is in
05:04 - front now let's use a try get component
05:06 - to identify and see if it is in leather
05:08 - so here if we have this let's go into
05:11 - this freak acid transform and in there
05:13 - let's call try get component try to get
05:16 - the component of type leather
05:19 - and if it isn't leather then let's
05:21 - change the movement to go up instead of
05:23 - forward
05:24 - so the thing that actually moves over
05:26 - here the control without move is the
05:27 - target Direction so we can modify this
05:29 - and to go up instead of forward let's
05:31 - just swap out the Y for the Z so over
05:34 - here on let's just set the target
05:35 - direction.y equals z then let's zero out
05:38 - the Zen and optionally you can also zero
05:41 - out the X movement if you don't want the
05:43 - player to slide left to right when on
05:44 - leather this one is optional either you
05:46 - want this or not it's very much a design
05:48 - question
05:49 - okay so this is it now due to the way
05:51 - that this specific controller is written
05:53 - it has a separate Vertical Velocity to
05:56 - handle jumping and grounding and then
05:58 - over here on the testing function it
06:00 - also has an is grounded volume so also
06:02 - need to make sure to set these so that
06:04 - it doesn't seem like the character is
06:05 - flying so just set this grounded
06:07 - manually into true and set the vertical
06:10 - velocity to zero to clear out the
06:12 - gravity again this part is specific to
06:14 - the way this controller works but for
06:16 - whatever control you're using the logic
06:18 - won't be very similar it just depends on
06:20 - how you're handling the jump in gravity
06:21 - so with just this it might already be
06:24 - working so let's test so here we are
06:27 - let's go approaching leather and keep
06:28 - pushing forward and if there you go it
06:30 - does indeed start moving up alright
06:32 - great so the character does identify the
06:34 - leather and does climb up it's a bit too
06:36 - slow but we'll fix that in a bit however
06:39 - the main issue is if I move back the
06:41 - character Falls instead of climbing the
06:42 - leather down so we're going to fix that
06:44 - in a bit as well now if you do this and
06:47 - you see the character constantly falling
06:48 - down instead of just staying over here
06:49 - on the letter if you see that then like
06:51 - I said that is going to depend on how
06:53 - you're handling gravity if the character
06:55 - doesn't climb or climbs a bit and then
06:57 - falls down again if that happens then
06:59 - the issue is you probably need to
07:00 - disable gravity while holding onto the
07:01 - leather now we're going to add some
07:03 - logic where we need to keep track of the
07:05 - grandmother States so let's keep track
07:07 - of that and in a super complex game
07:09 - perhaps you could use a proper State
07:11 - machine to handle it
07:12 - but over here this controller is super
07:14 - simple so I'm just going to use a basic
07:16 - volume so just here on the player let's
07:18 - make a private ball let's just call it
07:20 - is climbing ladder
07:23 - okay got a simple bullion by default it
07:27 - starts off as phones now let's make two
07:29 - functions so let's make a private void
07:31 - called grab leather
07:34 - and let's make another one private void
07:36 - drop leather
07:38 - on grab we're going to set the volume so
07:40 - set it to true
07:41 - and again depending on how you handle
07:43 - gravity this is where you would disable
07:44 - it then up here when we touch in leather
07:48 - let's set this one to true so we grab
07:50 - the leather and then we're going to run
07:51 - this logic if we are grabbing the
07:53 - Leather So after the raycast Let's test
07:55 - if is climbing leather
07:58 - if we are climbing the leather then
08:00 - let's run this logic
08:01 - and like we saw a while ago the issue is
08:03 - that it was climbing the leather way too
08:04 - slow that's due to how the speed
08:07 - variable is calculating so it basically
08:09 - takes the input takes how much it's
08:10 - actually moving so the way it works it
08:12 - gets a bit broken if we're moving
08:14 - straight towards the wall but we can
08:15 - manually set the spin so down here if we
08:18 - are climbing the ladder let's manually
08:19 - set the speed and let's set it to the
08:21 - Target speed which is the one that is
08:23 - defined up here so again on this
08:25 - controller it gets a Target speed and
08:27 - basically if it is printing user speed
08:28 - if not using normal speed okay so just
08:31 - with this the rest should already be
08:33 - working so if we touch the leather we
08:35 - grab the leather and if we Are Climbing
08:37 - we just keep climbing okay so here let's
08:40 - approach in Leather And if I go yep
08:42 - there you go it does move up and
08:43 - actually by doing this by adding that
08:45 - Boolean we also fixed the issue of the
08:47 - player falling when moving backwards so
08:49 - if I move backwards yep there you go it
08:50 - does climb down so now I can climb up or
08:52 - climb down and I can also hold on here
08:54 - and nope I do not fall down okay so far
08:57 - so good however the next issue is if I
09:00 - push all the way up to the top yup there
09:01 - you go as you can see the game is now
09:03 - broken the character is right now
09:05 - holding on to an invisible leather so I
09:06 - can climb all the way up to infinity and
09:08 - there you go everything is broken so at
09:10 - some point we need to let go of the
09:12 - leather now this is actually going to be
09:14 - pretty simple we just need to run
09:15 - different logic if we are already
09:17 - climbing and if not so over here if we
09:20 - are not is climbing Leather So if we are
09:22 - not climbing then we're going to try to
09:24 - grab it so we run this logic and if not
09:28 - then we are climbing the ladder
09:32 - so if we Are Climbing let's do a
09:34 - Brickhouse to see if we shouldn't let go
09:36 - let's do the exact same recast so we
09:39 - still got the avoid forward distance we
09:41 - still got the leather grab distance okay
09:42 - we do a recast and if it has the
09:45 - component then we're not going to do
09:46 - anything we're going to keep holding
09:47 - onto it but if it does not have the
09:49 - component so if in front there's a
09:51 - collider that is not in leather if so
09:53 - then we're going to drop from our
09:55 - leather and also if there's no hit if
09:57 - there is no collider in front we'll also
09:59 - going to drop our leather then for the
10:01 - drop leather function over here we just
10:03 - reset this one back into false
10:08 - okay so just like this let's see so
10:10 - let's go approaching leather and climb
10:13 - up and once we get to the Top If there
10:15 - go it kind of works I got up here and I
10:17 - didn't didn't let go of the leather but
10:19 - as you can see it looks quite a bit
10:20 - junky so if I get the top one with that
10:22 - look at that jittering constantly going
10:24 - up and down the issue with that is
10:25 - because as soon as we get to the top of
10:27 - the leather we let go which means we
10:29 - fall down by a tiny bit so we grab it
10:30 - again then we move up let go grab and so
10:33 - on
10:33 - to fix this we can pretty much just as
10:35 - soon as we get to the top we push the
10:37 - player upwards and forwards in order to
10:39 - make them jump over that tiny Gap now I
10:41 - can mention this controller already has
10:43 - a vertical velocity this is how it
10:44 - handles the jumping
10:45 - so I can just set this so when letting
10:48 - go of the ladder let's set this one to
10:49 - something
10:51 - so with this let's test
10:53 - so now if I go and I approach and I get
10:55 - to the top and yep there you go there's
10:56 - a nice jump and everything looks much
10:58 - more natural there you go just like this
11:00 - okay so far so good however with this
11:03 - external logic we actually broke the
11:05 - going down logic now if I climb leather
11:08 - and now I want to go down and I push
11:10 - back and there you go that's the issue
11:12 - pretty much it jumps back the problem is
11:14 - that over here on this raycast we're
11:15 - still using the same Target Direction so
11:18 - for holding onto the leather and we do a
11:20 - raycast pointing to the Target Direction
11:21 - which in this case is going to be
11:23 - backwards then obviously there's nothing
11:25 - behind us so this is going to fall so
11:26 - that is why we dropped the ladder and
11:28 - add a jump we can solve this by instead
11:30 - of using the current Target direction we
11:32 - just cache the direction when we first
11:34 - grab the leather
11:35 - so let's go up here to make a field to
11:37 - store that
11:38 - so let's make a private a vector 3
11:40 - called the last grab leather Direction
11:43 - so we have this and then down here let's
11:46 - go into our graveloader function and
11:48 - over here let's receive this one and
11:51 - we're going to store it
11:53 - okay so then over here on the grab
11:55 - leather when we call this function let's
11:57 - press in the entire Direction when we
11:59 - last grab the leather so we do that and
12:02 - then when we are climbing the ladder for
12:03 - this week instead of using the corn
12:05 - direct Direction let's use this one the
12:07 - last grab will either direction
12:08 - that way even if we try moving backwards
12:11 - we're still going to make the raycast
12:12 - forwards so let's see so here we are
12:15 - let's try going up okay I'm holding on
12:17 - to the leather now I go back and there
12:19 - you go I can go down up and down and so
12:21 - on all right great so far so good now
12:23 - for the next issue is if we are holding
12:25 - onto the leather and I go down I try
12:28 - going down to the floor so now I'm still
12:30 - pressing down but I'm not looking over
12:31 - the leather so the character is pretty
12:33 - much just colliding with the floor
12:34 - instead of letting go and moving
12:36 - backwards so when we have this when you
12:38 - have the character moving down and
12:39 - colliding with the four we should really
12:41 - let go so for this we're going to need a
12:43 - different raycast first of all we need
12:45 - to test if we are climbing down the
12:47 - ladder and if so we want to recast down
12:49 - instead of towards the leather so that
12:51 - means we need to know if we are climbing
12:52 - down and thankfully one way that we can
12:54 - do this is with the super useful vector3
12:56 - dot product this lets you calculate if a
12:59 - vector is pointing to a similar or
13:00 - opposite direction for example this is
13:03 - exactly the crucial part to making the
13:04 - backstab system that I covered in
13:06 - another video so here we can similarly
13:08 - calculate the vector 3 Dot and we
13:11 - calculate that taking into account the
13:13 - current Target direction as well as the
13:15 - last ground leather Direction let's do a
13:17 - debug.log on this to see what it says
13:19 - okay let's see so here on let's go and
13:22 - as I approach ladder and I move up there
13:24 - you go I've got a positive value and if
13:26 - I climb down there you go negative value
13:28 - and again this one works even if I'm
13:30 - pointing to the right and pointing back
13:31 - there you go it always works perfectly
13:33 - it even works if I'm actually facing the
13:36 - other way now if I press s I'm moving up
13:38 - the ladder and if I press W I'm moving
13:40 - down the ladder okay so with this we do
13:42 - know if we are climbing up or down now
13:44 - over here we just need some different
13:45 - brake cast logic so over here we test if
13:48 - this if the vector 3 dot if it is under
13:50 - 0 meaning we are climbing down the
13:53 - ladder
13:54 - if so then here lets we recast pointing
13:57 - down
13:58 - so let's do a physics style recast and
14:00 - now here we can really just use the
14:02 - transform.position
14:03 - let's Point down so Vector 3 dot down
14:06 - let's keep track of the raycast set
14:08 - raycast hit
14:11 - and finally for the distance so let's
14:13 - find a fold for the leather floor Drop
14:16 - Distance
14:17 - put it at something small maybe 0.1 F so
14:20 - for this distance
14:24 - here actually we need a different name
14:26 - so the form will break a set okay so if
14:28 - we have this if this collider does hit
14:30 - something so that means there's a
14:31 - collider right underneath the player if
14:33 - so then we simply drop the another
14:36 - okay so that's it let's test so here I
14:38 - am now let's go pick up the leather and
14:40 - go up now I won't down and as soon as I
14:43 - get the Fuller yep there you go with
14:44 - this drop all right great so I can go
14:46 - all the way up top yep it does work I
14:48 - can pick it up in there and go down any
14:50 - of this work I can jump pick it up in
14:52 - the middle and continue and yep
14:53 - everything works perfectly and to make
14:55 - all this work it just takes the unleader
14:57 - component and since I attached that
14:58 - component into the prefab that means all
15:00 - these letters are already climbable so I
15:03 - can now go up to this really tall
15:04 - building and start climbing
15:08 - and once I get to the top yep there you
15:09 - go with that really nice view so I
15:12 - managed to get to the point and now from
15:13 - here I can do anything I want all right
15:15 - awesome now with that working it's
15:17 - pretty trivial to handle the other
15:19 - interaction method where it requires a
15:20 - button input instead of automatic all it
15:22 - takes is over here when we are not
15:24 - climbing the ladder when we're not doing
15:26 - that instead of doing it automatic we're
15:27 - simply going to require a button input
15:29 - so let's go if input dot let's say get
15:32 - key down
15:33 - let's say just like in many PC games
15:35 - when you press the E key for interact so
15:38 - that's it that's pretty much all it
15:39 - takes so we press the E key and we're
15:41 - going to run the exact same code
15:42 - so now if I go and I approach the letter
15:44 - and I keep going towards it nope there
15:46 - you go I cannot automatically climb now
15:48 - if I press e there you go I start
15:50 - climbing up and down and everything
15:51 - works perfectly now you would obviously
15:53 - add some kind of visual button problem
15:55 - so the player knows when they can grab
15:56 - the leather as long as they are close
15:58 - enough and they press the button there
15:59 - you go they can climb so here it is the
16:01 - same logic fully working with that
16:03 - second method and for letting go either
16:05 - up top or on the bottom for that you
16:07 - could also make it input based but
16:08 - personally I think it makes more sense
16:10 - to be more Dynamic but still it would be
16:12 - the same thing instead of doing an
16:13 - automatic just do it based on a button
16:15 - press and finally here is all that same
16:17 - exact logic working in third person it
16:20 - really is only the same you just test
16:22 - the movement Direction grab the leather
16:24 - I also had the really nice leather climb
16:26 - animation to make it look a bit nicer in
16:28 - third person everything else is very
16:29 - much the same so here it is a fully
16:31 - functioning leather system with two
16:33 - input methods working both first and
16:35 - third person
16:36 - you can download the project files and
16:37 - play around the project for yourself and
16:39 - if you want these visuals it's from the
16:41 - Cynthia apocalypse facts so check the
16:42 - link in the description again if you use
16:44 - unity in any way definitely get my
16:46 - ultimate TNT overview course or if you
16:48 - want to make a certain type of game
16:50 - check out the others alright hope that's
16:52 - useful check out these videos to learn
16:54 - some more thanks to these awesome
16:55 - patreon supporters for making these
16:57 - videos possible thank you for watching
16:59 - and I'll see you next time
17:03 - foreign