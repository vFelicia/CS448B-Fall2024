00:00 - hello and welcome I'm your kodm here
00:02 - let's see a HEV overview on how to make
00:03 - an RTS game I will cover the basic
00:05 - Mechanics for how pretty much any game
00:07 - this rounder is made and how I would
00:08 - build them then I'll also cover some
00:10 - mechanics more specific to this game
00:11 - that I've been playing they are billions
00:13 - it's an excellent game where the clue is
00:14 - actually in the title you build and
00:16 - defend your base from billions of
00:17 - infected zombies it's really awesome I
00:20 - played it back when it came out and I'm
00:21 - really enjoying playing it again the
00:22 - reason why I'm playing this game again
00:24 - is actually for research as I'm actively
00:26 - planning my upcoming RTS course this is
00:28 - going to be my Unity dots course I'm
00:30 - really looking forward to finally making
00:31 - a game using dots the proper way and
00:33 - this genre of RTS plus City Builder Plus
00:36 - defense this is really the perfect genre
00:37 - for learning all about dots so if you're
00:39 - interested in learning all about Dent
00:40 - dots learning how to use it as part of a
00:42 - complete project or if you're looking
00:44 - for a guid path on how to make an
00:45 - awesome RTS game then check the link in
00:47 - the description the course page is
00:48 - mostly empty since like I said I'm very
00:49 - much in the early stages of planning the
00:51 - course but you can sign up with your
00:53 - email and I'll let you know when it's
00:54 - done and since that is going to be a DOT
00:55 - course it is also going to be an
00:57 - intermediate sladan course so if you
00:59 - want to prepare for it then check out my
01:01 - C course that will take you from
01:02 - beginner to advance okay so here in this
01:04 - video Let's see a high level overview on
01:06 - how to make a game like this I made a
01:08 - page on the website with links to the
01:09 - various tutorials that I'm going to
01:10 - reference it's linked in the description
01:12 - many of these are topics that I have
01:13 - covered in detail previously so if you'd
01:15 - like to make a game in this genre then
01:16 - hopefully this video and all these links
01:18 - will help point you in the right
01:19 - direction and if you enjoy this format
01:21 - then check out my other videos in this
01:22 - playlist where I already covered how you
01:23 - could build various games I've covered
01:25 - the city Builder T based strategy sty
01:27 - action and a bunch more by the way
01:28 - there's a sale going on right now on the
01:30 - cinty store if you're a fan of their
01:31 - style you can get tons of packs to make
01:33 - an infinite amount of games so you can
01:34 - make a military game maybe some gorgeous
01:36 - Arc fantasy maybe a Roman or a Spartan
01:39 - game you can make some awesome modular
01:40 - mechs or build a really nice UI they
01:42 - also have flash sales with 70% off so
01:44 - right now it's their apocalypse pack
01:46 - then coming on later is the SciFi worlds
01:47 - and then fantasy Kingdom definitely
01:49 - browse the sale to see if there's
01:50 - anything that fits whatever game you're
01:51 - working on what whatever game you're
01:53 - trying to make the link in the
01:54 - description is an affili link so if you
01:55 - buy anything through there it's the same
01:56 - price to you and I get a nice commission
01:58 - okay so let's see a hell of overview on
02:00 - how to make a game just like this one
02:01 - here is the mechanical list that we're
02:02 - going to cover so naturally we've got
02:04 - Union selection we need to do some kind
02:06 - of path finding there's going to be fog
02:07 - of War a bunch of buildings we need to
02:09 - do some resources we need to spawn some
02:11 - units handle some horde zombie AI the
02:13 - world map and so on so let's start off
02:15 - with the absolute Basics unit selection
02:17 - this is core for pretty much any kind of
02:19 - RTS game usually you can click on the
02:20 - mouse then hold it to make a square and
02:22 - basically it selects all the units
02:23 - inside it this is something that a lot
02:25 - of beginners have trouble with but it's
02:27 - actually quite easy to do the simplest
02:28 - option is really would just some Physics
02:30 - queries inside the physics class you
02:32 - have all kinds of functions and for this
02:34 - use case the main one is just the
02:35 - overlap box this one returns anray
02:37 - containing all the colliders within a
02:38 - certain box area so as long as all your
02:41 - units have some kind of collider then
02:42 - all you have to do is when the player
02:43 - clicks you calculate the lower left
02:45 - point the upper right Point complete the
02:46 - Box inside of it and it will find all
02:48 - the units within that area that's really
02:50 - it it's super simple I actually made a
02:52 - tutorial on how to do this in 2D in 3D
02:54 - it's very much the same thing just
02:56 - different functions then when the units
02:57 - are selected you want to move them so
02:59 - for that you need some kind of pathf
03:00 - finding and when it comes to pathf
03:01 - finding in most games you usually
03:03 - Implement ASR pathf finding I made a
03:05 - tutorial on how to implement that
03:06 - algorithm that one is really great for
03:07 - culating a point from point A to point B
03:10 - however in a game like an RTS where you
03:12 - have hundreds or thousands of units
03:14 - culating the path for each individual
03:15 - unit that can become really expensive it
03:18 - is doable as long as you write some
03:19 - really efficient code some of the old
03:21 - school RTS games did use Asar
03:23 - pathfinding however in RTS games with
03:25 - lots of units one alternative pathf
03:26 - finding algorithm is called flow field
03:28 - pathfinding this really excellent video
03:30 - by Turbo makes games covers the overview
03:31 - on how the algorithm works the
03:33 - difference is how in AAR usually have a
03:35 - start and end point whereas in flow
03:37 - fields in this you just have an end
03:38 - point you define the end point and then
03:40 - calculate the direction from each grid
03:41 - position of where it has to move in
03:42 - order to reach that final end point
03:44 - basically this approach means you only
03:45 - need to calculate the pathfinding once
03:47 - just to find the target endpoint and any
03:49 - unit anywhere in the entire world can
03:51 - figure out how to get to that endpoint
03:52 - the only thing the unit AI need to do is
03:54 - really just follow all the errors which
03:56 - when you have literally thousands of
03:58 - zombies when you have that definitely
03:59 - saves a ton of time as opposed to
04:01 - calculating the path fing from point A
04:02 - to point B for each individual unit then
04:04 - another crucial RTS mechanic is fog of
04:06 - War so in the beginning you have no
04:08 - visibility outside your base and then as
04:10 - you explore you gain some visibility in
04:11 - those areas and there's usually also two
04:14 - types of fog of War there's active this
04:16 - one includes what your units can see
04:18 - right now and there's explored fog of
04:20 - War this one includes all the areas
04:22 - where your units have been at some point
04:23 - in the past now for implementing this as
04:25 - always there are many methods for
04:26 - example I implemented fog of war in my
04:28 - first team game Survivor Squad and the
04:30 - way I did it there is actually in an
04:31 - interesting way I basally made a grid
04:33 - system on top of the world and as I was
04:35 - calculating the line of sight for each
04:37 - unit I would see what grid positions
04:39 - that unit can see and then I would Mark
04:41 - those grid positions either visible or
04:42 - invisible then after that's done I
04:44 - really just had an algorithm that went
04:46 - through that grid system and Dally
04:47 - generated the mesh that only contained
04:49 - all the hidden grid positions so that's
04:51 - one way to do it and I got it working
04:52 - with some Prett fast code basically just
04:55 - generating a black mesh on top of
04:56 - everything and one reason why I got it
04:58 - working so fast is because I used strs
04:59 - instead of classes I actually talked
05:01 - about that story in my C course on the
05:03 - electure on strs the difference between
05:05 - strs and class is actually quite
05:06 - important especially in terms of memory
05:08 - but another alternative is to use a
05:10 - camera and a render texture in case you
05:12 - don't know this is how you can render
05:13 - what the camera sees onto a texture I
05:15 - made a tutorial on it the example that I
05:17 - Showcase in that tutorial for render
05:18 - textures is for making a mini map but
05:20 - you can use that exact same method for
05:21 - making a fog of war effect you can place
05:23 - the camera on top of your wor looking
05:25 - down and then for each unit for each
05:27 - building you add a circle Sprite on top
05:29 - of it and then you make sure the camera
05:31 - only sees that Sprite and just like that
05:32 - you have the texture with your fog of
05:34 - War shape then you can just render that
05:35 - texture on top of the world and that's
05:37 - pretty much done for making the
05:38 - persistence fog War you can just set the
05:40 - camera to don't clear meaning it is not
05:42 - going to erase everything on every frame
05:43 - so that way the texture basically grows
05:45 - and grows over time so with either of
05:47 - those methods you can get a really nice
05:48 - fog of war effect then another thing
05:50 - almost every RTS games is buildings of
05:52 - some type that you can place for this
05:54 - you simply get the mous position and
05:55 - spawn the building prefab on that
05:57 - location so in technical terms it's
05:59 - actually quite simple simple now one
06:00 - game design question that you have to
06:02 - answer yourself is will your game be
06:03 - grid based or free form both options are
06:06 - perfectly valid I've covered both
06:08 - options and tutorials on this channel
06:09 - it's really up to you to decide then for
06:11 - those buildings those building prefabs
06:12 - they are going to have some kind of
06:13 - logic and this can really be a simple as
06:16 - just attaching a script directly to the
06:17 - building prefab that logic can be
06:19 - responsible for things like unit
06:20 - spawning resource generation I'm going
06:22 - to talk about those in a little bit but
06:23 - the buildings can also simply exist so
06:25 - just exist no logic like for example in
06:27 - this game all the houses they have no
06:29 - logic all the game cares about is that
06:30 - the house exists so there's also a place
06:32 - for quote unquote dumb buildings in your
06:34 - RTS game design now along with that you
06:36 - are going to have various building types
06:38 - and as to how you define those building
06:40 - types the simplest way is really just
06:42 - with a script M object this is a really
06:44 - awesome Unity feature it's how you can
06:45 - define a structure and create objects of
06:47 - that type that exist in your project
06:48 - files these are great for representing
06:50 - pretty much any kind of data like for
06:51 - example building types I've also used
06:53 - scripal objects for defining a crafting
06:55 - recipe or I've used it for defining
06:57 - weapon parts in my weapon attachment
06:58 - system so here you can Define just a
07:00 - script M object for the building type
07:02 - and in that object you can sort all the
07:04 - resource requirements in order to
07:05 - construct that building and how long it
07:07 - takes to build than any other data
07:08 - related to that building then pretty
07:09 - much all RTS games are going to have
07:11 - some kind of resource manager this is
07:13 - actually pretty simple to do you really
07:14 - just need to create a resource manager
07:16 - class that sores something like maybe a
07:18 - dictionary to store all of your resource
07:19 - amounts then when placing that a
07:21 - building just ask resource manager if
07:22 - there are enough resources to afford the
07:24 - cost and if so then spend those
07:26 - resources and just spawn the building
07:27 - making a resource manager is actually
07:29 - really very simple it's all just numbers
07:31 - linked to a certain resource type and
07:32 - for those resource types you can once
07:34 - again justify them using stal objects
07:36 - then of course if you have resources you
07:38 - need some way to generate them this is
07:40 - another game design question for some
07:42 - games like Age of Empires or Command and
07:43 - Conquer for those you have units and
07:46 - those units physically go out and
07:47 - manually gather each resource so that's
07:49 - one option in that case the resource
07:51 - generation is handled pretty much by
07:52 - that villager AI but another option is
07:55 - like in this game where the resource
07:56 - generation is automatic it's really just
07:58 - a simple flow time M that is working on
08:00 - the building logic when that timer
08:01 - elapses it just instantly adds some
08:03 - resource to the resource manager that's
08:05 - really it then another thing buildings
08:06 - can do is simply spawn some units for
08:08 - this you first just need to handle the
08:09 - logic for clicking on a building so this
08:11 - can be a super simple rcast then
08:13 - selecting the building probably brings
08:14 - up some kind of UI menu I would handle
08:16 - that connection using an event so
08:18 - basically when you click on the building
08:19 - it fires off some kind of event then you
08:21 - have a separate UI menu that listens
08:23 - that event when building is clicked and
08:24 - then shows itself and on that UI menu
08:26 - you can click some buttons to add a unit
08:28 - spawning to some kind of queue and for
08:29 - starting that queue you can use a simple
08:31 - list or an array or you can literally
08:33 - just use a c q this is a collection that
08:36 - c has that quite a lot of people
08:37 - actually don't know exists I covered it
08:39 - in a lecture on other collections in my
08:41 - C course this is a fivefold collection
08:43 - meaning first in first out that's
08:45 - exactly what you want for this kind of
08:47 - RTF spawning queue then for spawning the
08:49 - unit is really just another simple flow
08:50 - timer when timer is left just spawn the
08:52 - unit prefab and give it some kind of
08:54 - preset move position next for mechanic
08:56 - specific to this game we have the hord
08:58 - this is the main selling point for for
08:59 - this game how you can get attacked by
09:01 - literally thousands of zombies all at
09:02 - once in technical terms it's actually
09:04 - quite simple the hord is triggered that
09:06 - certain days so a level designer would
09:08 - Define what day spawns what horde this
09:10 - also means that the game has some kind
09:11 - of time of day system that can be
09:13 - literally just a simple float increasing
09:15 - on every time the time then it's up to
09:17 - you as developer to Define how long
09:19 - let's say a day in your game is in real
09:21 - life could be something like 30 seconds
09:22 - or maybe one minute then as a day takes
09:24 - from one day to the next at that point
09:26 - you can fire a c event and have some
09:28 - kind of hord manager class listen to
09:30 - that event and see if it is time to
09:31 - spawn the horde and for defining the
09:33 - hord data for that you can literally
09:35 - just have a map prefab and inside you
09:37 - can place empty game objects to Define
09:38 - all the hord spawn positions and then
09:40 - you can just link that position with
09:41 - something like perhaps a scripal object
09:43 - where you define the composition of the
09:45 - horde so how many slow zombies how many
09:47 - fast zombies how many big ones and so on
09:48 - so the hord is really just spawning tons
09:50 - and tons of zombies at preset points and
09:52 - level at preset times so in technical
09:54 - terms really simple this really just a
09:55 - game design sort of thing and of course
09:57 - those zombies need to do something so
09:58 - you need some kind of zombie AI
10:00 - thankfully this is actually pretty easy
10:02 - zombies are intentionally dumb so they
10:04 - are really perfect for making some super
10:05 - simple AI in fact this is actually the
10:07 - main reason why my first team game
10:09 - Survivor Squad why that game had zombies
10:11 - in it initially my goal was to make a
10:13 - SWAT game where he controlled a SWAT
10:14 - team and basically had to breach a house
10:16 - and take down all the bad guys but since
10:18 - I wasn't very skilled back then back
10:19 - then I could not make some compelling
10:21 - human complex AI so after a while I
10:23 - really just SW the game to be all about
10:24 - zombies which greatly simplify the AI
10:27 - requirements zombie AI is usually just
10:29 - as simple as having a zombie finds a
10:31 - Target and just moves straight to that
10:32 - Target so this game that means just
10:34 - follow the flow field that targets
10:35 - straight towards the HQ and while moving
10:37 - there constantly look for nearby enemies
10:39 - or objects for that you can literally
10:41 - just do a physics query to find all
10:42 - those objects I spoke about multiple
10:44 - ways to find Targets in a previous
10:46 - tutorial so the zombie really just
10:47 - follows the flow field and if it finds
10:49 - something in between then just stop and
10:51 - attack that Target when that Target is
10:52 - dead then just keep moving towards the
10:54 - HQ so making zombie AI is really super
10:56 - simple if you have issues with running
10:58 - some good AI for your game
10:59 - then the simple approach is really just
11:01 - swap your human enemies for some zombies
11:03 - and just make some simple Z then almost
11:05 - every RTS game has some sort of villager
11:07 - or resource gatherer unit the controls
11:09 - for that is really the same thing as for
11:11 - the soldiers click to select and click
11:12 - to give some orders now I actually made
11:14 - a video a long time ago on how to make a
11:15 - simple resource Gathering unit that
11:17 - video is super old but the logic there
11:19 - is still solid it is still how I would
11:20 - do it nowadays villagers just need to
11:22 - know when the player selects a specific
11:24 - point and then just move between that
11:26 - point and the resource Point gather the
11:28 - resources and drop them off at some drop
11:30 - off point so in terms of villager AI
11:32 - it's also super simple although in terms
11:33 - of game design it is optional for
11:35 - example in this game this does not have
11:37 - controllable villagers they do exist but
11:39 - it's really just a visual thing you
11:40 - can't control them they just move around
11:42 - automatically just to make the game seem
11:43 - a bit more alive they move around and
11:45 - look like they're doing something but
11:47 - resources are all generated on timers so
11:48 - it's all in the buildings it's not in
11:50 - the villagers speaking of resources
11:51 - let's look at the map now the map has
11:53 - resources like trees water stone and
11:55 - iron and in terms of creating the map
11:57 - you always have two options you can do
11:59 - it manual or procedural generation both
12:01 - options are perfectly valid on the
12:03 - manual side you just have to manually
12:05 - place out all the rocks and imov all
12:06 - objects literally just move the prefabs
12:08 - and place them manually you can Define
12:10 - which of those prefabs work as resource
12:12 - positions or in terms of procedural
12:13 - generation that's an entire topic that I
12:15 - definitely would love to cover in detail
12:16 - in dedicated videos sometime in the
12:18 - future there are so many possible
12:20 - options you can do it based on noise you
12:22 - can just stag tons of noise textures on
12:24 - top of one another in order to make
12:25 - something interesting or you can do it
12:27 - based on wave function collapse this one
12:29 - is a really interesting method while
12:30 - also being relatively simple where you
12:32 - can literally just pick a random point
12:33 - in the map see if it's empty if so spawn
12:35 - some resource there so there are tons
12:37 - and tons of ways for dynamically
12:38 - generating Maps but if you want to
12:40 - create some kind of campaign for your
12:41 - map if so then chances are you probably
12:43 - want some manually created Maps then for
12:45 - some kind of skirmish mode for that you
12:46 - can have randomly generating then this
12:48 - game also has a really nice world map
12:50 - this is where you actually pick the next
12:52 - mission in technal terms is really super
12:54 - simple just spawn some 2D elements and
12:56 - listen to clicks on them then for
12:58 - drawing these curve paths
12:59 - for that you can literally just draw
13:01 - texture or if you want something a bit
13:02 - more adaptable for that you can
13:04 - Implement a simple spline either
13:05 - Implement your own like a cover in
13:07 - tutorial or actually nowadays Unity has
13:09 - a spine package so you can just use that
13:10 - one then for smoothly revealing the path
13:13 - for that you can look at my tutorial for
13:14 - how hes doesn't it basically us a
13:16 - particle effect in order to draw the
13:18 - path as it moves and then simply uses
13:20 - all those particles in order to make a
13:21 - mass to make the actual path reveal
13:23 - itself and finally the most important
13:24 - thing in any RTS game which is
13:26 - performance RTS means tons of units
13:28 - which means heavy on performance so this
13:30 - is something you constantly have to pay
13:31 - attention to if you're making something
13:33 - like a simple Adventure game you can
13:34 - write some pre- sloppy code and it will
13:35 - still run more than fast enough but on
13:37 - General like this if you want to have
13:39 - tons of units you definitely need to
13:41 - keep performance in mind at all times
13:43 - you need to get really good at using the
13:44 - profiler in order to learn how to find
13:46 - hotpots in your game and then learn how
13:48 - to improve the performance within those
13:49 - hotspots so learn about for example how
13:52 - a four is faster than a 4 in learn about
13:54 - how to avoid generating garbage every
13:56 - frame learn how shrugs can be faster
13:58 - than classes and so so you have to learn
14:00 - all those tricks in order to make your
14:01 - game super performant and of course
14:02 - speaking in terms of performance you
14:04 - also have Unity dots it requires a
14:06 - different way of thinking you need to
14:07 - think in a data oriented manner as
14:09 - opposed to an objectoriented manner but
14:11 - just by doing that you get a ton of
14:12 - performance by default dots is
14:14 - absolutely perfect for making these
14:15 - kinds of games RTS games so if this is
14:18 - your genre you'd like to make then
14:19 - definitely learn how to use dots like I
14:21 - mentioned in the beginning definitely
14:22 - stay tuned for my DOT scores okay so
14:24 - that's a hell of overview on how to make
14:25 - an RTS game using Dr buildings as an
14:27 - example I made a page on website with
14:29 - all of the tutorial links that I
14:30 - mentioned hopefully with this high level
14:32 - overview and with all of these tutorial
14:34 - links hopefully these can help point you
14:35 - in the right direction for building game
14:37 - just like this and like I mentioned the
14:38 - reason why I've been playing this game
14:39 - is actually for research for my upcoming
14:41 - RTS game course it will be my Unity dos
14:44 - course so if you like to learn how to
14:45 - use dots how to use it in a complete
14:47 - project or just how to make an RTS game
14:50 - if so then check the link description
14:51 - and sign up with your email I'm still
14:53 - very much in the early stages of
14:54 - planning this whole course and when it's
14:56 - done I'll let you know and since dots is
14:57 - an advanced topic I will assume you have
14:59 - at least an intermediate level of
15:01 - knowledge so if you don't have that or
15:02 - if you want to get a refresher then
15:03 - check out my C sh course all right
15:05 - thanks for watching and I'll see you
15:07 - next time