00:00 - in this video we're going to learn about
00:01 - loops in c-sharp loops are an integral
00:04 - part of programming and something you
00:06 - need to be very familiar with since you
00:08 - won't be using them all the time we're
00:10 - going to cover four types of loops that
00:11 - you can use depending on the situation
00:12 - let's begin okay so first of all you
00:20 - know when code runs it runs from top to
00:22 - bottom so first this instruction runs
00:25 - and this one until the end of the code
00:26 - block now loops let you run code inside
00:29 - of a code block multiple times here
00:32 - we're going to cover four types of loops
00:34 - while do wild four and for each we're
00:39 - also going to cover the two keywords
00:40 - related to loops continue and break this
00:44 - videos patreon sponsor is bad adventure
00:46 - bad adventurer is a game development duo
00:49 - currently working on their first game
00:51 - Wayfarers edge it's a RPG focused on
00:53 - exploring and settling unknown frontier
00:55 - lands in a low fantasy and Wild West
00:57 - theme check them out at bat Adventure
00:59 - calm thank you to the patreon sponsor
01:02 - and thank you to these awesome
01:03 - supporters for making this video
01:04 - possible go to patreon.com/scishow
01:07 - code monkey to get some perks and help
01:09 - keep the videos free for everyone so
01:11 - let's start off with these symbols to
01:13 - understand which is the while loop okay
01:15 - so here we are in an empty script and
01:17 - first we write the keyword while and
01:19 - then we input our condition inside
01:22 - parentheses and then we have our code
01:24 - block so this is the basic definition of
01:28 - a one loop and for testing before we do
01:31 - and let's define an int variable and
01:33 - start off at 0 and then we're going to
01:37 - run the code inside of this code block
01:39 - whilst I is under 3 and inside of our
01:42 - code block we're going to do I plus plus
01:45 - so while the I variable is under 3 we're
01:48 - going to run the code in here which is
01:50 - going to increment our I variable then
01:53 - let's just had a simple log just to see
01:55 - what's going on inside so we debug load
01:57 - on the value of I all right so let's
02:00 - test so here we are and yep you can see
02:03 - in our console that we have our code
02:05 - block being executed three times we're
02:08 - doing the log after we increment our I
02:10 - variable so in here first we have 1
02:12 - we have a 2 then we have a 3 and then we
02:14 - break out of our loop because the next
02:16 - time that occurrence or I only at 3 and
02:18 - 3 is not under 3 so it breaks out now
02:21 - for example if instead of starting at 0
02:23 - let's say we start off at 5 and we test
02:26 - and there is the loop code block doesn't
02:28 - run at all since it tests for the
02:30 - condition before it runs all right so
02:33 - this is the 1 loop it has a condition
02:35 - and it does something whilst that
02:37 - condition is true now the next type of
02:39 - loop is the do-while this is extremely
02:42 - similar with one very key difference the
02:45 - difference is that the condition is
02:46 - tested after the loop runs so first we
02:49 - write the keyword do then we add our
02:52 - code block and then we write while and
02:55 - our condition so let's try doing the
02:57 - same thing so I under 3 and in here with
03:00 - 2 I plus plus and the debug mode and now
03:04 - for testing let's leave the eye at 5 as
03:07 - we did previously and if you remember
03:09 - when we did that with the while loop we
03:11 - did not to get anything since our code
03:14 - walk did not run at all since it first
03:15 - test for the condition and 5 is not
03:18 - under 3 so it did not run this not even
03:20 - once however in a do-while loop that
03:22 - commission is only tested at the end so
03:24 - if we run this code and if there it is
03:27 - we can see that our loop code ran once
03:29 - this is the key difference between while
03:31 - and do-while on the while you test the
03:34 - condition before the code block runs and
03:36 - on they do while you test the condition
03:38 - after the code block runs so if you have
03:41 - some code that you want to run at least
03:43 - once and then perhaps loop through it
03:45 - then the do-while might be useful in
03:47 - that scenario so here you have the first
03:50 - two types of loops you have the one loop
03:52 - and they do well now one thing you have
03:54 - to be very careful when using whiles or
03:56 - do else is you need to write your
03:58 - condition very careful here for example
04:00 - on the while if we start off at 0 and I
04:03 - don't increase this then this condition
04:06 - here will remain true forever
04:07 - since I won't always be 0 so if we run
04:10 - this code then this condition won't be
04:12 - true forever so our game won't be stuck
04:14 - running this code block over and over
04:16 - again and we'll have to fortunately
04:17 - close it so when working with ones and
04:20 - do aisles you have to be very careful
04:22 - not to create some endless loops now the
04:24 - next loop type helps prevent
04:26 - that from happening and it's the loop
04:27 - type that I tend to use the most I'm
04:29 - talking about the form loops at first
04:31 - they might seem confusing but there are
04:33 - actually quite simple so you start off
04:37 - by writing the for keyword then you open
04:39 - the parentheses and in here you have
04:42 - actually three code blocks separated by
04:45 - a semicolon now the first one is the
04:47 - initializer which is run only once as
04:49 - this line executes so here normally you
04:52 - want to initialize a certain iterator
04:54 - variable so by normal convention you
04:57 - name an eye for integrator or index and
05:00 - you normally want to use an int so you
05:02 - define the variable in here and you
05:04 - initialize so you usually set it to zero
05:06 - then you have the semicolon and you have
05:09 - the second block now the second block is
05:11 - our condition this is tested every time
05:13 - just before it's loop runs so the same
05:16 - behavior as the one so in here let's say
05:18 - I under three then another semicolon and
05:22 - finally we have the unless code block
05:24 - which runs after the loop runs so
05:26 - normally here you increment your
05:28 - iterator variable so not only just
05:30 - something like I plus plus so this is
05:34 - how the form loop sort of helps you
05:36 - avoid endless loops that you might get
05:38 - with Wiles and do Wiles in here you have
05:40 - to write the in last code block so most
05:42 - of the times you don't forget to
05:43 - increment your iterate although
05:45 - obviously you can still end up with an
05:46 - infinite loop if you do something like I
05:48 - - - or simply mess around with a
05:51 - different variable okay so let's look at
05:53 - the for loop in action and really should
05:55 - work pretty much the same as our while
05:57 - loop so in here let's just do a debug
05:59 - logged on our I variable let see any of
06:03 - there it is we have zero one two so the
06:06 - first time that the code wok runs we're
06:08 - going to have our I initialize to zero
06:10 - so it runs and we print out a zero then
06:13 - after the in loop code block runs we're
06:15 - going to increment our iterator variable
06:17 - and after doing that then we test out
06:19 - the condition so at that point we have I
06:21 - equals 1 which is some wonder 3 so we
06:24 - run it again then we run this again and
06:26 - test it again run and so on so that's
06:28 - how we end up with 0 1 2 so the for loop
06:31 - tests for the condition before it runs
06:34 - it could walk much like the while and
06:36 - not like they do while now over here on
06:39 - the
06:39 - statement you can actually define more
06:40 - than one variable so you can find an int
06:43 - I equals zero and a J equals five
06:46 - something like that and you can also
06:48 - define it of any type so you can define
06:50 - it of something like a float but
06:52 - normally for most scenarios you'll still
06:55 - just use just one iterator making an
06:57 - intimate eye and on the third statement
07:00 - you can also do more than just increment
07:01 - a single amount so you can do for
07:03 - example int 1 sequence 2 so this will
07:06 - increase the iterator by 2 every time it
07:09 - runs the code block and you can also do
07:11 - I - - or whatever statement you wish to
07:14 - run at the end of each loop for loops
07:16 - are great for iterating through an array
07:18 - so here for example let's define an
07:20 - array all right so I've defined an array
07:25 - of characters ABCDE and we can use a
07:28 - fourth cycle through it so we define our
07:31 - iterator start off at 0 then we go once
07:33 - the iterator is under the array link and
07:36 - we increase the iterator so this will
07:38 - cycle through the entire array so here
07:41 - we can print out the index and then
07:43 - print out the char or rank on that index
07:46 - so let's see and if there it is we have
07:49 - our 0 a 1 b c d e and so on so here for
07:53 - example let's look at what happens when
07:54 - you do plus equals 2 so we increase the
07:57 - iterator by 2 every time and let's see
07:59 - any up here we have our log skipping
08:02 - over every other character so it skips
08:04 - the 1 and the 3 now speaking of a race
08:07 - we have the last type of loop which is
08:09 - the for each loop this one is great for
08:11 - easily cycling through a list or array
08:13 - so first we write the keyword for each
08:15 - and then we define our iterator element
08:20 - so let's a fan of type char to go
08:22 - through our array so a char C then we
08:25 - use the keyword kin and then the enlist
08:28 - or array or collection that we want to
08:30 - cycle through so here let's cycle
08:31 - through our char array and that's pretty
08:35 - much it so this won't cycle through our
08:37 - array and for each time it runs we're
08:39 - going to have a different element
08:40 - assigned to this variable so here we can
08:43 - do a simple debug log on our char ring
08:49 - and let's test any of there you go we
08:51 - have all of our characters so if you
08:54 - don't need the index then the for each
08:56 - is a more simplified way of cycling
08:57 - through an array the for each works with
09:00 - own collections so for example it works
09:02 - on this array it also works on a list or
09:05 - queue or religious about any collection
09:07 - if you want to go more advanced you can
09:09 - also make your own classes support for
09:11 - each you just need to implement two
09:13 - interfaces so one is the eye innumerable
09:15 - and you also need to implement
09:17 - ienumerator however one thing you cannot
09:20 - do inside of a for each is modify the
09:22 - actual list so here on let's convert
09:24 - this from an array into a list and now
09:28 - here as we're cycling through let's do a
09:30 - mug and then let's do char array dot
09:32 - remove let's remove this character and
09:34 - if we run this if there is we get an
09:37 - error so we cannot modify our collection
09:39 - once in the middle of a for each so if
09:42 - you want to go through a list or
09:44 - collection and remove some elements then
09:47 - one approach you can do is use the
09:48 - normal four and let's say we want to
09:54 - remove the character or index one so we
09:57 - do a simple if if the index equals one
10:00 - then let's go into the char list and
10:02 - remove at index one so this does not
10:05 - work inside of a for each but it does
10:07 - work inside of however if we run
10:09 - like this here you can see that we have
10:12 - another issue you can see that the
10:13 - indexes are indeed working so we went
10:15 - from zero one two three
10:17 - however we went from A to B to D to e so
10:21 - essentially we skipped over C even
10:23 - though I wanted was to actually remove B
10:25 - so the reason why that happened is
10:27 - because as we remove the character on
10:29 - index one all of the other elements
10:31 - after that one were relocated back on
10:33 - the list so as B was removed C went into
10:37 - index one but then we ran our iterator
10:39 - statement and doing so increase the
10:42 - iterator by one which means that by
10:44 - doing that we end up skipping the
10:45 - element that was actually relocated
10:47 - so essentially if you do this if you
10:49 - remove at something you gotta keep in
10:51 - mind that the iterator won't still run
10:53 - so instead of testing for an index let's
10:55 - remove if we find the B character and in
10:58 - order to
10:59 - from skipping over something after we
11:01 - remove them let's move backwards on our
11:03 - iterator okay so now let's test any of
11:07 - there we go now it correctly went
11:08 - through all the elements so first we go
11:10 - into da then we go into the B which is
11:13 - on index one and since it's V we're
11:15 - going to remove it from the list but
11:17 - then in order to not skip the C which
11:19 - gets relocated back into one then we
11:21 - simply go backwards and we test the
11:23 - index one again
11:24 - so again if you're removing elements
11:26 - while cycling through a list pay very
11:28 - close attention to what your code is
11:30 - actually doing now another thing you can
11:32 - do with loops is to skip to the next
11:35 - element or break out of the loop so here
11:40 - for example an hour for each we're
11:42 - cycling through all of our characters
11:43 - okay and before we do our log let's test
11:47 - if this character equals the B character
11:51 - so if it is a big character then we want
11:53 - to skip it and the way we can do that is
11:56 - by using the continuing keyword so this
11:59 - will skip the rest of the code block so
12:00 - essentially it won't skip our debug log
12:02 - and go straight on to the next character
12:04 - so let's see any of it is we have AE CDE
12:08 - so we essentially skipped over B for
12:12 - example I normally use continue when
12:14 - cycling through a list of enemies in
12:15 - order to skip the enemies that are
12:16 - either too far or they're already and
12:19 - continue it works on all other and loop
12:21 - types so you can use continue on a while
12:23 - I wanna do or on a for another thing you
12:26 - can do is break out of a loop so here
12:28 - instead of skipping by using continue we
12:31 - can instead use the keyword break and
12:33 - now if you run any of their it is we
12:36 - just have the a character so essentially
12:38 - as soon as we hit the B character we
12:40 - broke out of our loop and continue the
12:42 - code after that so here we saw a B then
12:44 - we hit break so that means we then I'll
12:46 - run this code and went straight down
12:47 - here and again break works on on leather
12:50 - loop types
12:50 - now one more important thing to know is
12:53 - nested loops so this is when you have a
12:56 - loop inside of another loop so for
13:00 - example you have a for inside of a for
13:07 - so for example this is how you would
13:09 - cycle through some sort of grid so the
13:11 - first four increments the X and goes
13:14 - until the width and then the second
13:16 - inner loop increments the Y in goes
13:18 - until the height now one important thing
13:21 - to know is what happens here when using
13:23 - break so here if the x equals one then
13:31 - we're going to break out let's see and
13:32 - there it is essentially we only run the
13:35 - code when the X is zero so as soon as it
13:37 - becomes one it breaks out so it doesn't
13:39 - run our second loop at all however if
13:42 - instead of breaking here if we break
13:43 - inside of our nests and loop so let's
13:45 - say when I equals one and yep you can
13:49 - see that the x equals one also rent so
13:52 - here we are breaking out of this loop
13:54 - but do not break out a down loop so the
13:56 - break only breaks from the loop that
13:58 - it's actually in it does not break any
14:00 - other loops above it all right so here
14:02 - we looked at loops in c-sharp
14:04 - we saw four different types well do one
14:07 - for and for each they each work
14:10 - differently which makes the best loop to
14:12 - use the pen on your exact situation and
14:15 - we also covered how we can skip elements
14:17 - in a loop or break out of a loop early
14:19 - so with this knowledge you now know one
14:21 - of the core fundamentals of program this
14:24 - video is made possible thanks to these
14:25 - awesome supporters go to
14:27 - patreon.com/scishow natee code monkey to
14:29 - get some perks and help keep the videos
14:31 - free for everyone if you liked the video
14:33 - hit the like button subscribe the
14:34 - channel for more unity and c-sharp
14:36 - tutorials posting your questions have in
14:38 - the comments and I'll see you next time
14:42 - [Music]