00:00 - in this video we're going to learn how
00:01 - to instantiate prefabs in unity dots
00:04 - we're going to build our prefabs using
00:06 - normal game objects as usual and then
00:07 - we're going to convert them into
00:09 - superfast entities that we can spawn
00:10 - during runtime let's begin
00:15 - [Music]
00:19 - hello and welcome I'm your code monkey
00:22 - and this channel is all about helping
00:23 - you learn how to make your own games
00:25 - with nf2 torrents made by a professional
00:27 - indie game developer so if you find the
00:29 - video helpful consider subscribing okay
00:31 - so here I will cover several ways we can
00:33 - convert a game object prefabs into
00:35 - entity prefabs and several ways to store
00:37 - them for later use
00:39 - that's it's all very much in development
00:41 - so the best practices aren't yet known
00:43 - so that's why I'm going to show as many
00:44 - different ways as possible this video is
00:47 - made possible thanks to these awesome
00:48 - supporters go to patreon.com/scishow
00:51 - code monkey to get some perks and help
00:53 - keep the videos free for everyone ok so
00:55 - here let's start off with a most
00:57 - straightforward way possible so here in
00:59 - my scene let's first build our prefab so
01:01 - lets create a new 3d object and let's
01:04 - make it a quad here my project I have
01:07 - this simple material and just use it
01:10 - alright so just like that here it is a
01:12 - very basic sprint just a mesh filter
01:14 - with a quad and a mesh renderer now for
01:16 - here I have a prefabs folder to just
01:18 - drag it in there and there you go
01:20 - knowing how deep layer so let's call
01:22 - this the prefab game object alright
01:25 - there's our pre found so we can now
01:27 - remove it from the scene and yep there
01:30 - it is ok so now that we have our prefab
01:32 - game object we want to have reference to
01:35 - this prefab that gets converted into an
01:36 - entity when we run the game so let's
01:39 - look at the easiest way possible so here
01:41 - let's make a new script and call it the
01:43 - prefab entity component now inside let's
01:47 - remove model behavior and instead using
01:50 - unity that entities and this will be a I
01:53 - component data and as always this is a
01:56 - struct and now inside let's have a field
02:00 - for a entity called 3 5 and alright so
02:04 - here it is a very simple component which
02:06 - holds an entity however if we go up here
02:09 - and we add the automated attribute
02:11 - generate authoring components and now we
02:14 - go back into the editor
02:16 - and let's make an empty game object and
02:18 - just drag our prefab in T component
02:20 - script and if there we go just like that
02:23 - you can see that that field shows up as
02:25 - a game object field so let's drag the
02:28 - prefab game object as that reference and
02:30 - yep there it is so now any convert
02:33 - to entity script and now if you run the
02:35 - game just like this and here is the game
02:37 - running and we have nothing on the
02:39 - hierarchy so no game objects however on
02:41 - the entity debugger and over here yep
02:43 - you can see you can see that our game
02:45 - object was correctly converted into an
02:47 - entity and it contains our prefab entity
02:50 - component which in itself contains a
02:52 - reference to our prefab game object
02:54 - which again has also been converted into
02:56 - an entity so here it is our prefab as an
02:59 - entity so the randomization everything
03:00 - exactly as intended so here we have our
03:03 - prefab being correctly converted from a
03:05 - game object into an entity and then
03:07 - store it in a nice component field that
03:08 - we can then use so now let's try to use
03:10 - it let's make a basic spawner system so
03:13 - we make a new C sharp script call this
03:15 - the entity spawner system now in here
03:19 - let's make this a component system okay
03:25 - so here let's make a simple timer to
03:27 - sponsor entities all right so here are
03:38 - just some simple logic essentially
03:39 - spawning something every half a second
03:41 - and I'm here in order to spawn our
03:43 - entities let's do a entities dot for
03:45 - each and now in here we can grab our
03:49 - component which was the prefab entity
03:51 - component and in here we can simply call
03:58 - entity manager that instantiate and
04:01 - we're going to instantiate it we use the
04:02 - prefab and component to access our
04:05 - prefab entity all right so just like
04:08 - this we have our entities being spawned
04:10 - now let's just put them in random
04:11 - positions
04:32 - all right so here all we're doing is in
04:35 - saturating our prefab entity and then
04:37 - setting the component for the
04:38 - translation onto a random position all
04:40 - right so let's see and yep there's our
04:43 - prefab being in Senshi ated and if we
04:45 - pause and look at the hierarchy yep
04:47 - there we go we have no game objects so
04:49 - of these are being accentuated as
04:50 - entities and here on the entity debugger
04:53 - we can see indeed our incented entities
04:55 - so just like this we have a game object
04:58 - prefab being converted into an entity
05:00 - and then we're using that entity in
05:02 - order to spawn more entities awesome so
05:05 - here we have the simplest and most refor
05:07 - way of converting prefabs into entities
05:09 - and later spawning them we just make a
05:11 - component with an entity field and we
05:14 - add the generate authoring component
05:15 - attribute in doing so we get a film that
05:19 - we can actually put a game object inside
05:21 - and the conversion system automatically
05:23 - converts it into an entity okay so now
05:26 - let's look at another approach first
05:28 - let's make a script where we can place
05:30 - our prefab reference so let's make a new
05:33 - script let's go on this from the prefab
05:35 - entities and now in here this will
05:39 - indeed be a mana behavior okay so first
05:43 - we have a simple game object field so a
05:45 - public game object for our prefab game
05:49 - object and back in our scene let's
05:53 - create a new game object for our prefab
05:55 - entities and we use our script and there
05:58 - you go we have a field for the normal
06:00 - game object and we just drag our
06:02 - reference okay so far so good and now
06:04 - here back in our code we're going to
06:07 - also add using unity dot and three and
06:10 - now we're also going to implement the
06:12 - interface I convert game object to
06:15 - entity this is the interface that is
06:17 - used by the conversion system in order
06:19 - to convert a game object into an entity
06:21 - so implement the interface which eases
06:24 - this function now that this does is it
06:29 - converts this game object into an entity
06:31 - and afterwards we have the entity that
06:33 - has been
06:34 - very so we can use it to add more stuff
06:36 - so now during the conversion process we
06:38 - want to convert this game object into an
06:40 - entity and now the way that we do that
06:42 - is using the game object conversion
06:45 - utility and this one has a function
06:48 - called convert game object hierarchy and
06:50 - here we take the root which is going to
06:52 - be our prefab game object okay and then
06:55 - we need some settings so for the
07:02 - settings we grab them using this
07:04 - function which grabs the settings from
07:05 - this world which is going to be the
07:07 - world from this entity manager and now
07:09 - we need a blob asset store and just like
07:20 - this so now this one returns the
07:22 - converted entity all right so here we
07:27 - have our entity that has been converted
07:28 - from our prefab game object and now in
07:31 - order for us to use this entity in some
07:33 - source pawner we need to store it
07:35 - somewhere so one very simple way to
07:37 - store something is to use a static field
07:39 - so here what's an a public static entity
07:43 - for our prefab entity then we set our
07:48 - static field so prefab entities are
07:50 - prefab entity we set it to this prefab
07:53 - entity all right so after the conversion
07:55 - and storing it in our field now we can
07:57 - go into our spawner system and here
08:00 - previously we're using this method where
08:02 - we're grabbing it from the components
08:03 - but now instead of doing this we do the
08:08 - same code for spawning our entity except
08:11 - we grab our prefab from our static field
08:15 - so there it is just like that and
08:17 - finally in order to make sure that the
08:19 - conversion system calls our function
08:21 - we're already implementing convert game
08:23 - object to entity so I need to do is back
08:26 - here in our game object that has our
08:28 - prefab entities we also add the convert
08:30 - to entity script alright this should be
08:32 - working
08:32 - let's test any of there you go we have
08:35 - our entities being instantiated the same
08:37 - as previously again no game objects all
08:40 - of them has new entities so we're here
08:42 - we saw a different approach of
08:43 - converting a game object into an entity
08:45 - and we also saw a different approach
08:47 - for storing our converted entity in this
08:49 - case in a static field which over here
08:52 - has the benefit that we do not have to
08:54 - do an entities for each in order to grab
08:55 - a specific component we can access the
08:58 - static field from anywhere in our code
08:59 - alright so this is our second method
09:01 - using the I convert game object to
09:03 - entity and the game object conversion
09:06 - utility now let's look at another
09:07 - approach so let's make a new c-sharp
09:11 - script let's call this our prefab
09:13 - entity's version two okay and now in
09:17 - here let's remove these but again leave
09:19 - monobehaviour using unity dot entities
09:23 - and now in here we're going to implement
09:25 - the interface
09:26 - I declare reference prefabs so this
09:32 - interface must implement this function
09:34 - which as you can see takes in a list of
09:36 - game objects so let's add our prefab
09:39 - feel just like we did on the previous
09:40 - version and now when we have this
09:44 - function being called we simply go into
09:46 - the referenced prefabs list and we add
09:49 - our new game object so this is adding
09:52 - our prefab game object into the
09:54 - reference list for the conversion system
09:56 - and now in here we're also going to
09:58 - implement the convert game object to
10:00 - entity and are here on the conversion
10:03 - function we're going to use the
10:06 - conversion system and use the function
10:09 - get primary entity this one as you can
10:12 - see takes an object so we get the
10:14 - primary entity that is referenced by
10:16 - this prefab game object this will return
10:20 - an entity for our prefab entity so here
10:28 - we're adding the prefab game object as a
10:30 - reference in the conversion system and
10:32 - then when the conversion system calls
10:34 - this function we're asking the
10:36 - conversion system to get the primary
10:37 - entity that matches the reference for
10:39 - this game object and just like before
10:41 - let's sort in a basic static field
10:48 - all right so there it is and now in the
10:51 - Spanish system will use that film
10:52 - instead and now here back in our code
10:55 - here we have the previous game object so
10:58 - let's replace this prefab entities with
11:00 - the second version and there we go in
11:02 - the inspector it works exactly the same
11:04 - so we have our game object film and
11:05 - there it is alright so let's test any up
11:08 - there it is we have our entity prefabs
11:10 - being instantiated here it is in the
11:12 - entity debugger of them being
11:14 - instantiated awesome ok so here we saw
11:17 - yet another approach for converting a
11:19 - game object prefab into an entity
11:22 - profile we honor a game object as a
11:24 - reference prefab then it gets
11:26 - automatically converted and we just get
11:28 - the entity after it has been converted
11:30 - now there is yet another approach that
11:32 - we could take but for our simple
11:34 - scenario it's a bit overkill so I'll
11:36 - just briefly mention it you can make a
11:38 - system and in that system you can make
11:43 - it of type game object conversion system
11:49 - so this system takes the basic on update
11:52 - as if a component system and it's called
11:55 - on a plate but really it's only ever
11:56 - called once during the game object
11:58 - conversion stage so this is how you make
12:01 - a custom system that works in the middle
12:03 - of the conversion system and now in here
12:06 - you can access authoring components well
12:07 - in the middle of conversion and use the
12:10 - same get primary entity that we did in
12:12 - fact here in order to set all the
12:13 - references so again this is a more
12:15 - advanced topic and a bit overkill for
12:17 - the simple scenario of in sending an
12:19 - entity but just in case you want to run
12:21 - some code during the conversion stage
12:22 - then all you need to do is extend this
12:24 - system alright so here we looked at four
12:27 - possible ways that we can convert a game
12:29 - object prefab into an entity prefab the
12:32 - first method is simply using a normal
12:34 - component with an entity field and then
12:36 - adding the generate authoring component
12:38 - the second method we implement convert
12:41 - game object to entity and we use the
12:44 - game object conversion utility in order
12:46 - to convert our game object into a prefab
12:49 - on the third method we implement declare
12:51 - reference prefabs and we add our game
12:54 - object into the reference list and
12:56 - finally the last method we extend the
12:58 - game object conversion system and hem
13:00 - our conversion again unity dots is still
13:03 - very much in development so not entirely
13:04 - sure what the best practices will end up
13:06 - being so here we have all options now
13:09 - after converting our prefab into an
13:11 - entity the next thing we need is to
13:13 - store that convert an entity and again
13:15 - we also have multiple ways of doing that
13:17 - here we already looked at two ways first
13:19 - we can certainly convert an entity into
13:21 - a normal component and secondly we can
13:23 - store it in a static field when using
13:26 - the component we need to access the
13:27 - component to get the entity prefab
13:29 - whereas with a static field we can
13:31 - easily access it from anywhere however
13:34 - we have another way of accessing the
13:35 - component instead of doing in entities
13:44 - for each if we only have one prefab
13:46 - component as we should then we can
13:48 - access it as a single bit so instead of
13:50 - our for each we just use get singleton
13:54 - up type prefab entity components this
14:00 - returns our prefab entity component and
14:04 - then we can use pretty much the same
14:07 - code as previously so you grab the
14:11 - prefab inside of our component our
14:13 - prefab entity spawn it and so on so
14:16 - let's test any of there you go
14:18 - everything still works so here using
14:20 - Singleton's you have another method of
14:22 - grabbing the prefab entity now yet
14:25 - another approach we have of storing the
14:26 - prefab entity is using a blob
14:28 - asset pob assets are really interesting
14:31 - so I won't be covering them in a
14:32 - dedicated video in the future okay so oh
14:35 - no here we covered four different ways
14:37 - of converting game object prefabs into
14:39 - entity prefabs and we also covered four
14:41 - ways we can store and use our converted
14:43 - entity prefab
14:44 - again as I said the entire that stack is
14:47 - still very much in preview so not
14:48 - entirely sure which one will end up
14:50 - being the correct standard practice so
14:52 - for the time being use the approach that
14:54 - you prefer this video is made possible
14:56 - thanks to these awesome supporters go to
14:58 - patreon.com/scishow to code monkey to
15:01 - get some perks and help keep the videos
15:02 - free for everyone as always you can
15:04 - download the project file the new tony's
15:06 - from unity
15:06 - ma calm subscribe the channel for more
15:08 - ent tutorials puzzling question heaven
15:11 - comes and I'll see you next time
15:14 - [Music]