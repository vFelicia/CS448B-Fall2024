00:00 - hello and welcome I'm your codm and here
00:02 - is how I added modding to my kitchen
00:03 - chaos game now this video is a showcase
00:06 - SL tututorial on how I added this and
00:08 - how you can add complex mods to your
00:09 - game in a previous video I already
00:11 - covered how to get started with unity's
00:12 - user generated content tool and in there
00:14 - I mentioned how user generated cont can
00:16 - really be anything it's really just btes
00:18 - it's up to you as a developer to decide
00:20 - what content you want to allow as mods
00:22 - every game is unique so I can't really
00:23 - make a step-by-step tutorial that covers
00:25 - how to add modding to every single
00:27 - different game type every game
00:28 - implementation is going to be different
00:29 - so I don't want you to look at this
00:31 - video as a step-by-step tutorial but
00:32 - rather just learn the Core Concepts
00:34 - behind out to add modding to any game
00:36 - which in reality modding is actually
00:38 - pretty simple your players will have the
00:40 - final build of your game then you
00:41 - probably have some special modding
00:43 - folder and your players will add some
00:44 - files to that folder inside your game
00:46 - files then your game needs to
00:48 - dynamically load those files that the
00:49 - player added in some way depending on
00:51 - their type after you load them then you
00:52 - give the player some UI to create
00:54 - whatever mods you want to enable with
00:56 - your game using the player assets then
00:58 - you create some sort of file that
00:59 - contains those rules or whatever that
01:01 - the player selected and then optionally
01:03 - take that file and upload it to
01:04 - something like Steam Workshop or unities
01:06 - user generated content tool so in
01:08 - general terms those are the steps for
01:10 - how to implement modding in any game by
01:12 - the way in the future I will be
01:13 - following this tutorial myself when I
01:15 - add modding to my seam game dinky
01:16 - Guardians which has just come out in
01:19 - fact let me actually take this time to
01:20 - ask you what types of mods would you
01:21 - like to see in that game I'm obviously
01:24 - thinking of letting the player mod new
01:25 - resource types and crafting recipes
01:27 - perhaps even some new machines with some
01:29 - custom on logic and maybe even some
01:31 - completely new game modes and scenarios
01:33 - kind of like factoral does it so I have
01:36 - plenty of ideas myself but you'll let me
01:37 - know your ideas for mods so as a demo
01:40 - here I have my game kitchen chaos this
01:42 - game was fully built from scratch in my
01:43 - free complete course and then I also
01:45 - expanded it into multiplayer in the
01:47 - second course now this game is all about
01:49 - controlling a character and cooking some
01:50 - food some customer requests come in and
01:52 - the player needs to prepare the food and
01:54 - cook it in various ways to match a final
01:56 - recipe soly the game is all about
01:57 - recipes and objects here is the recipo
02:00 - script M object which is made from
02:01 - scratch in the complete course as you
02:03 - can see it really just has a list of
02:05 - kitchen object so and then the kitchen
02:07 - objecto this is the type for every
02:08 - individual kitchen object type so every
02:10 - ingredient all of that is made up of
02:12 - this and in turn this one contains a
02:14 - prefab so we transform for the prefab
02:15 - that is ineni this is what contains the
02:17 - 3D mesh then it has a simple Sprite icon
02:20 - and finally string for the object name
02:22 - so as a developer I decid that this is
02:23 - what I want to make modable I want
02:25 - players to be able to create new kitchen
02:26 - objects so here in my demo I've got a
02:28 - bunch of completely new kitchen objects
02:30 - that I created as simple mods for
02:32 - example this one over here this one is a
02:33 - battery it doesn't really make sense in
02:35 - the context of this game but it's a
02:36 - great example of how after you build the
02:38 - tools then your players can mod anything
02:40 - they want it doesn't have to match the
02:41 - actual game itself so I've got a
02:43 - container counter which has my modable
02:44 - item and I can interact with it and pick
02:46 - it up just like I can pick up any of the
02:48 - built-in items here you can see how this
02:50 - is a working kitchen object and
02:52 - importantly the mod includes the battery
02:53 - over here the 3D mesh it includes the
02:55 - texture it includes a 2d icon and the
02:57 - name itself all of that data all of that
02:59 - was added by a player so none of this
03:01 - was included in the original game build
03:03 - then I also created a recipe with that
03:05 - custom kitchen object so for example one
03:07 - of the customers is requesting a recipe
03:09 - with a battery so I just pick up a plate
03:11 - I put the battery on the plate and yep
03:13 - there it is again a complely custom
03:14 - object and I can deliver it and yep
03:16 - success everything worked perfectly so
03:18 - here we can see a custom mod so a player
03:19 - created object and all of it is working
03:21 - on top of the game that I built
03:22 - following all the rules then here is the
03:24 - super basic in-game UI for how to
03:26 - actually create a mod I basically just
03:28 - created a special folder and I called it
03:30 - mods input now in the original build the
03:32 - game this folder would have been
03:33 - completely empty and then I as a player
03:36 - I created all these assets and I dump
03:37 - them inside this folder you can see over
03:39 - here I've got some mesh files some obj
03:41 - I've got some icons some pgs and some
03:43 - textures so some jpegs then in unity
03:46 - this simply why simply Cycles through
03:47 - all the files in that folder it
03:49 - identifies which files are meshes which
03:51 - files are textures and which ones are
03:52 - icons so in here I can just select
03:54 - whatever I want like for example select
03:55 - the battery I can select the texture for
03:57 - the battery mesh I can select battery I
03:59 - icon and give the object a name then I
04:01 - can create a mod and now there's a
04:03 - second folder this one called mods
04:04 - complete and on this one yep here it is
04:06 - the battery that I just created then
04:08 - back in the main game window and yep
04:09 - there it is the mod was correctly loaded
04:11 - and here is my custom battery my custom
04:13 - mod okay so that's the concept now let's
04:15 - see how I implemented all of this but
04:17 - again keep in mind every single game is
04:19 - different so pay attention to the
04:20 - concepts that I'm doing and not exactly
04:22 - the specifics so like I said the first
04:24 - step for adding modding to your games is
04:25 - being able to load some assets
04:27 - dynamically in order to support custom
04:29 - objects need to be able to load a 3D
04:31 - mesh then I also need to be able to load
04:32 - a texture for that mesh also need a
04:34 - Sprite for the icon and then just a
04:36 - basic string for the name out of all of
04:38 - those the trickest one to load is just
04:39 - the Dynam loading the 3D mesh that one
04:41 - was actually surprisingly difficult
04:43 - normally I use fpx files for my meshes
04:46 - it's really the most Wily used format if
04:48 - you've bought any asses from the store
04:49 - chances are they are in fbx however it
04:52 - turns out that fbx files are actually
04:53 - really complex and loading them at
04:55 - runtime is really difficult now there
04:57 - are some pay tools on the store that
04:58 - apparently can do that so so that's
04:59 - still an option but for modding I also
05:01 - don't specifically need the mesh to be
05:03 - in fbx it can be in other formats for
05:05 - example obj which is apparently quite a
05:07 - bit simpler and while Unity doesn't have
05:09 - a built-in method for unloading them
05:11 - there is a simple free asset on the
05:12 - store that does exactly that so I
05:14 - originally started with this battery
05:15 - mesh I grabb this one from the polygon
05:17 - military pack in order to convert this
05:19 - fbx onto a obj it's actually quite
05:22 - simple you can just drag the mesh onto a
05:24 - scene then you can open this mesh with
05:26 - probuilder so just go into tools
05:27 - probuilder and open the pro window then
05:30 - you can ProBuild Riz this mesh and then
05:32 - here you can click on export click on
05:34 - the plus icon and up here you can select
05:36 - all the various types that you can
05:37 - export into so exporting into obj
05:39 - exactly what I want so just export this
05:41 - and yep you convert a fbx into a obj so
05:44 - with that yep here I have the obj file
05:46 - then here is a code for using that asset
05:49 - which takes a path for the obj file and
05:51 - then simply loads it as a game object
05:53 - then that game object simply has a
05:54 - regular mesh filter component and from
05:56 - that I can easily grab the mesh data so
05:58 - that handles that load a mesh by the way
06:00 - for getting that path you really just
06:01 - need to cyle through a directory here is
06:03 - the code that I have on that UI window
06:05 - that is doing just that so You' got a
06:07 - path for the mod inputs folder for that
06:09 - one I'm just using application. datapath
06:11 - this contains the path to the game data
06:12 - folder so just add and then I put it on
06:14 - a subfolder mods input so just creating
06:16 - a directory info from that one and then
06:18 - just calling get files and get files
06:20 - just this extension so in this case I'm
06:22 - all looking for obj that returns a file
06:24 - info array and then inside this file
06:26 - info you've got two things you've got
06:27 - the name which is just the name of the
06:29 - file and then You' got the full name
06:30 - which contains the Full path to that
06:31 - object the F path is what you use over
06:33 - here on the OBG loader okay so like I
06:35 - said that handles dyamic loading the
06:37 - mesh then for dynamically loading a
06:38 - texture that one is actually super easy
06:40 - un already has a built-in method for
06:42 - doing just that here is some simple code
06:44 - so basically just get the path to the
06:46 - actual texture then just use file. read
06:48 - all bytes in order to read all the bytes
06:49 - of that file and load it onto a b array
06:51 - then with that you can create a brand
06:53 - new texture 2D make it a completely
06:55 - empty texture and then just call texture
06:56 - td. load image and pass in the by the
06:58 - right and that will load this texture
07:00 - and loaded onto this texture to the
07:02 - image then you can use this texture in
07:03 - the material that we can apply to the
07:05 - previous mesh okay so the next data that
07:07 - we need this is Sprite this one is also
07:08 - super easy once again we just get the
07:11 - path and we read the bytes from that
07:12 - path then we unload an image onto a
07:14 - texture Tod so exactly the same as
07:15 - previously then we just use sprite.
07:17 - create in order to basically convert
07:19 - this icon texture into an actual icon
07:21 - Sprite and finally the string for the
07:23 - object name this one doesn't really
07:24 - require anything special so I just used
07:26 - a regular text mesh Pro input field
07:28 - component and just grab the text so with
07:30 - all of that we can easily grab all the
07:32 - data that we need we can Dynam load all
07:34 - of it based on whatever the player drops
07:35 - in that mods input folder and then I
07:37 - opted to put all that data all the mod
07:40 - data in a single mod file now you don't
07:42 - have to do this this step is optional if
07:44 - you want you can keep the mesh and the
07:45 - textures and whatever objects you have
07:47 - you can keep all of them as separate
07:49 - files but to make things easier I just
07:50 - merge them all into a single file now
07:52 - I'm going to show the code but if you
07:53 - want to learn about this process of
07:55 - saving multiple pieces of data in a
07:56 - single file if you want to see that in
07:58 - more detail I covered that in the save
08:00 - file screenshot video so here I have my
08:02 - save mod function as you can see it
08:04 - takes various paths as parameters so
08:06 - path to the mesh object a path to the
08:08 - texture the icon and a string for the
08:09 - object name here it has all the paths
08:11 - and then the code is just what we saw
08:12 - for saving we really just want to read
08:14 - those objects just load them and then
08:16 - grab all the bytes that we're going to
08:17 - use in the final save data so here I'm
08:20 - using the obj loader so I'm using that
08:21 - asset in order to load the mesh obj onto
08:23 - a game object then I grab the mesh from
08:26 - that game object and then I simply made
08:27 - a mesh that struct here it is it just a
08:29 - super basic structure just holds the
08:31 - vertices youv and triangles this is
08:32 - really all the data that makes up a mesh
08:34 - so here we grab the load mesh and we
08:36 - store all the vertices triangles and UVS
08:38 - then with this mesh data over here I
08:39 - opted to save this data as Json now this
08:42 - is obviously not the best in terms of
08:43 - space compression but for this simple
08:45 - demo it works great so I just convert
08:47 - all that data into a Json string and
08:49 - then I take that Json string and convert
08:51 - into an array of bytes then I just save
08:53 - those bites in my save file and add
08:54 - extra data to my header again I covered
08:56 - basic save and loading with Json in
08:58 - another video and I also covered how to
09:00 - make a complex save file with extra data
09:02 - in the save file screenshot video what
09:04 - I'm doing here is literally the exact
09:05 - same thing that I'm doing there so this
09:07 - just saves all the mesh data then for
09:09 - the texture we really just read the
09:10 - bytes over here we don't even want to
09:11 - load a texture same thing for the icon
09:13 - and for the name bite array so we really
09:15 - just convert a string into some bytes
09:17 - then here we are constructing the file
09:19 - header with all the data and finally
09:21 - completing all the bytes for the final
09:23 - file like I said this is optional you
09:24 - can have your mods made up of multiple
09:26 - files or you can put them all into a
09:28 - single file like I did here and then
09:29 - simply fil out write all bytes to write
09:31 - all these bytes onto a single file and
09:33 - also like I mentioned the unity user
09:35 - generated con tutorial on that video I
09:37 - mentioned how that tool Works simply
09:38 - with some bytes and Y over here as you
09:40 - can see we do have a list of bytes now
09:43 - in the demo all I'm doing is just saving
09:44 - these locally but you could definitely
09:46 - take these bites and instead of saving
09:48 - to a local file you could upload it to
09:49 - unity's ugc or perhaps something like
09:51 - seam Workshop again remember how mod
09:53 - data is really just bites it's up to you
09:55 - as a developer to decide what those
09:57 - bites represent then for loading here
09:59 - here is my loading function it's really
10:00 - just doing the exact same thing but
10:02 - reverse logic so it starts out with a
10:04 - bite array which I load with file. load
10:06 - on bytes and then I may have some output
10:08 - parameters for the things that this
10:09 - going to Output so it grabs the complete
10:11 - bite list then grabs the correct bytes
10:13 - based on the offsets first it grabs the
10:15 - header it parses that Json back into an
10:18 - actual object with the header loaded I
10:20 - then know the file data and all the
10:21 - sizes for all the various data types so
10:23 - over here I'm grabbing the icon bite
10:25 - list and then like we saw once I have a
10:27 - bite list or a bite array with that I
10:29 - can easily load that icon bytes into an
10:32 - actual icon Sprite for the object name
10:34 - that is really just converting bytes
10:35 - back into a string for the texture once
10:37 - again we just go into texture 2D and
10:39 - call load image to convert bytes into a
10:41 - texture and finally for the mesh data
10:43 - like I said I opted to store this as a
10:45 - simple Json file so I just grab that
10:47 - Json data and construct the brand new
10:49 - mesh using the vertices triangles and
10:51 - UVS and yep with all that this load
10:52 - function this one loads all the objects
10:55 - on a given bite array it loads all that
10:57 - and outputs all the save data that that
10:59 - was saved in the mod file then with that
11:00 - data here is a simple function for
11:02 - creating a kitchen object as so over
11:04 - here I've got all the parameters that I
11:06 - need in order to turn that data into a
11:08 - kitchen object as so here it just
11:10 - duplicates a default material and then
11:11 - sets the Bas map texture then enenes a
11:14 - debug prefab it gives it a name it goes
11:16 - into the mesh filter and assigns the
11:18 - mesh we just loaded it goes into the
11:19 - mesh render and assigns the material
11:21 - then uses script M object create
11:23 - instance of type kitchen object so in
11:24 - order to create a brand new Script Mod
11:26 - object and just fills in the data for
11:28 - that Script Mod object so the object
11:29 - name the prefab and Sprite and then goes
11:31 - into the prefab and tells it okay now
11:33 - you belong to this kitchen object as so
11:35 - so finally with all this we end up with
11:37 - a mod kitchen object so for unloading
11:39 - all the mods like we saw I'm here going
11:41 - through the entire mods complete folder
11:43 - CLE through all the mods in that folder
11:45 - then I'm going to load all of those
11:46 - create a kitchen object as so for all of
11:48 - those and then just for testing here
11:49 - I've got some nice code I just manually
11:51 - Place some container counters and set
11:53 - them to this kitchen object I made sure
11:55 - to add this brand new kitchen object so
11:57 - to the kitchen object so Val list on the
11:59 - plate otherwise I couldn't add it to a
12:00 - plate and again just for testing I
12:02 - created the brand new re PSO that takes
12:04 - just get this kitchen object to make it
12:05 - all work and that's really it since the
12:07 - rest of the game was written to work
12:09 - with kitchen object SOS regardless of
12:10 - where they came from everything else
12:12 - already works perfectly so here is the
12:14 - demo again and I've got my three
12:15 - counters with my three modable objects I
12:17 - can go up here and Y there you go I'm
12:19 - picking up a crystal that I added as a
12:20 - modable object I can pick up a pig and a
12:23 - battery so all of these all these
12:24 - objects these were all added afterwards
12:26 - so none of these files none of these
12:28 - meshes and textures none of this was
12:29 - included in the original game build and
12:31 - then I've got the testing recipes that I
12:33 - created so for example someone wants a
12:34 - crystal so I can pick up a plate add the
12:36 - crystal to the plate and deliver it and
12:37 - yep success it works all right awesome
12:40 - now once again like I said it's up to
12:41 - you as developer to decide what you want
12:43 - to enable as modding for your games in
12:45 - this case all I did was just enable just
12:47 - brand new kitchen objects but of course
12:49 - you can follow the exact same logic to
12:51 - expand upon it and allow modding for
12:52 - multiple different things for example
12:54 - you could expand upon this and mod the
12:56 - actual recipes instead of just making
12:57 - testing recipes you could make the
12:59 - entire level modable so that players
13:01 - could create their own levels you can
13:02 - enable players to create brand new
13:04 - counter types you can enable players to
13:06 - edit all the rules so for example the
13:07 - level timer how many recipes are spawn
13:09 - and so on again it's up to you as a
13:11 - developer to figure out what you want to
13:12 - enable as modding all right so to recap
13:14 - to add moding to your game every game
13:16 - will be unique so these are the general
13:18 - steps you need to follow your players
13:19 - will have the final build of your game
13:21 - then you probably have some special
13:22 - mding folder where your players can add
13:24 - some files then your game needs to
13:26 - dynamically load those files in some way
13:27 - depending on their type after you load
13:29 - them then you need to give the player
13:31 - some UI to create whatever mods you want
13:33 - to enable for your game then you can
13:34 - create some file that contains those
13:36 - rules or whatever that the player select
13:38 - for the mod and then optionally you can
13:39 - take that file and upload it to
13:40 - something like seam Workshop or unties
13:42 - user generated cont tool so in general
13:44 - terms those are the steps for how to
13:45 - implement modding to any game now if you
13:47 - want to learn how this game was built
13:48 - from scratch check out my two free
13:50 - complete courses first on making the
13:51 - game in single player and then
13:52 - multiplayer and also for uploading your
13:54 - mods check out unity's user generated
13:56 - Contour then check out my new game and
13:57 - let me know what I've what support you'd
13:59 - like me to add any future update all
14:01 - right hope that's useful check out these
14:03 - videos to learn some more thanks to
14:05 - these awesome patreon supporters for
14:07 - making these videos possible thank you
14:09 - for watching and I'll see you next
14:14 - [Music]
14:17 - time