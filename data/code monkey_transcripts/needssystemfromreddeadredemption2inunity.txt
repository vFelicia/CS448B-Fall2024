00:00 - in this video we're going to make the
00:01 - neat system from Red Dead Redemption 2
00:03 - we have our intercourse and the outer
00:05 - ranks for our health stamina and data we
00:08 - can spend them level up and replenish
00:09 - using items then we're also going to
00:11 - apply this system to the previously made
00:13 - that I effect let's begin
00:17 - [Music]
00:22 - hello and welcome I'm your code monkey
00:24 - and this channel is all about helping
00:25 - you learn how to make your own games
00:27 - with in-depth tutorials made by a
00:29 - professional indie game developer so if
00:30 - you find the video how fun consider
00:32 - subscribing
00:33 - alright so reddit redemption - just came
00:35 - out on PC and I figured this was a great
00:36 - time to look into some more systems when
00:39 - the console version came out I made a
00:40 - video on how to make a nice that eye
00:42 - effect so I can spawn a bunch of enemies
00:45 - then I can enable that I then I can tag
00:48 - my enemies and then when I exit their
00:50 - ego they all get shot so there's a very
00:52 - nice effect that was made completely
00:54 - from scratch in a previous video so go
00:55 - check it out the game slows down the
00:57 - screen is stinted the player marks the
00:59 - enemies then goes back it shoots them
01:01 - alright great effect now in here we're
01:04 - going to make the Aeneid system this is
01:06 - a very interesting and very unique
01:08 - system essentially it's split in two so
01:10 - we have the inner core mount and the
01:12 - outer ring amount so as I'm sprinting
01:15 - I'm spinning the ring amount and as the
01:17 - ring amount is completely empty it
01:19 - starts draining my core amount and once
01:21 - that one is come only empty there you go
01:23 - I can no longer sprint and now the ring
01:25 - amount is rejoining very small so the
01:27 - region is based on how much the inner
01:29 - core amount is full so as I spend it all
01:32 - there go the region it's very slow now I
01:34 - can consume this item to replenish the
01:36 - core mount and there you go now the
01:37 - region works much faster so that's the
01:40 - interaction between the outer ring and
01:42 - the inner core amount we have the health
01:44 - the stamina and eat that I so as I
01:47 - sprint the stamina goes down as I spawn
01:50 - some enemies and they shoot me I have
01:52 - the health amount need going down and
01:55 - then I have the Deadeye there you I
01:57 - enable it and it's coming down and I can
01:59 - tag my enemies and you can see the core
02:02 - constantly going down and if the core
02:04 - reaches empty that eye is automatically
02:07 - cancelled and it's activated there you
02:09 - go all empty and there you go just like
02:10 - that now the region is very slow so i
02:12 - can consume some items in order to
02:13 - replenish my region now this inventory
02:17 - system in here was also created fully
02:19 - from scratch in a previous video so go
02:21 - check that out so you can see that I can
02:23 - easily spawn some specific item types
02:25 - and I can click to consume them which
02:27 - then has a specific effect then with the
02:29 - button I can also move on up each of my
02:31 - stats so I press this one and there you
02:33 - go see my stamina
02:34 - constantly going up and just like this I
02:36 - have max stamina and if I person a
02:38 - little button I can cause to go down and
02:40 - all the needs work in the same way
02:41 - alright so here is our very nice neat
02:44 - system just like it works in Red Dead
02:46 - Redemption 2 we have the tongue the
02:48 - stamina and very cool that I effect
02:50 - alright so this is our goal let's get to
02:53 - it
02:53 - okay so here's our starting point I have
02:55 - my cowboy character here and I can walk
02:58 - around I can spawn enemies that will
03:00 - approach and try to shoot me right now
03:03 - as you can see there's no health or
03:04 - stamina meters so I can spawn a bunch of
03:07 - enemies and I can also use the data
03:08 - effect from a previous video there you
03:10 - go activated and boom boom boom and
03:12 - there it is alright great so this is our
03:14 - starting point now with this let's begin
03:16 - by making the UI elements now over here
03:18 - in the hierarchy I have my canvas so in
03:21 - here let's make a new game object let's
03:24 - call this the UI means and let's extend
03:29 - it to occupy the entire play area so
03:30 - extend set everything to 0 ok now let's
03:34 - start with just our stamina core so
03:36 - inside make another game object called
03:38 - the stamina 4 and now inside let's make
03:42 - a new UI image and here let's use the
03:45 - circle sprite there it is so this circle
03:48 - won't be our ring so let's rename this
03:50 - to the Ring image and now here we can
03:52 - actually use the awesome features from
03:54 - the UI image so here we have the image
03:57 - type and we can select it and change it
03:59 - from simple into filmed and here on the
04:01 - film you can see we have various fill
04:03 - methods and radium 360 is exactly what
04:06 - we want so here we have the fill amount
04:08 - and as you can see look at the sprite
04:09 - yep we have a very nice rotating sprite
04:12 - now instead of having the origin on
04:14 - bottom let's put it on top and you
04:16 - examine like that that's how we want our
04:18 - effect to go ok so for example this one
04:21 - being for the stamina let's in like this
04:23 - we have our character using full stamina
04:25 - and as you spend it it goes down as it
04:27 - regens it goes back up very simple very
04:29 - nice so this is the current ring amount
04:31 - now underneath it we have the total ring
04:34 - image so let's duplicate this call it
04:37 - the total ring image and this one is
04:40 - going to be tinted in black and this one
04:43 - goes under so let's put it behind down
04:45 - yep just like that
04:49 - so you can see we have our current
04:52 - amount and a total amount now on top of
04:54 - DC we have the simple circle background
05:06 - and now on top we have the core image so
05:10 - in this case for the Sam now let's drag
05:12 - the stamina icon just like that this one
05:15 - is also film but it's not radio but
05:17 - rather a vertical so the origin is at
05:19 - the bottom and just like this stem in
05:21 - this phone and just like this it's empty
05:23 - now let's size it accordingly and
05:27 - underneath we have the total core image
05:31 - alright so just like this we have the
05:33 - entire composition for our stem they
05:35 - need UI element we have in here the core
05:37 - image that we can modify the film amount
05:39 - as it depletes and it regenerates then
05:42 - underneath we have the total core image
05:44 - to show the total amount then we have a
05:46 - simple background and behind it we have
05:48 - the ring image which is radial so we
05:50 - move this in order to fill it up and
05:52 - spend it and beneath it we have the
05:54 - turtle ring amount which we're going to
05:55 - increase as our stamina levels up
05:57 - alright so let you see this in game and
06:00 - if there it is there's our awesome UI
06:02 - element ok great now that we have the
06:04 - original working let's see on with some
06:06 - simple logic so over here let's make a
06:08 - new c-sharp script let's call this the
06:11 - needs system and open it up now in here
06:15 - we're first going to start off simple
06:17 - with just a single need for our stamina
06:19 - and this will also be a simple class to
06:21 - get rid of motor behavior all right now
06:26 - the first thing we're going to need is
06:28 - the ring amount and eternal ring amount
06:31 - that's our current and our total then we
06:34 - also need a core amount now let's make a
06:38 - constructor and in our constructor let's
06:41 - at all of the default values we're going
06:43 - to make them in the range of 0 to 100 so
06:46 - up here let's define a cost for the
06:48 - maximum
06:51 - and let's start off with a bit less than
06:53 - half all right so just like that so on
07:00 - the total we have 40 out of the possible
07:01 - 100 the ring amount starts off commonly
07:04 - foam and then we have our core amount at
07:05 - our maximum so now let's try to use this
07:07 - need so in here we make a public going
07:10 - to return a boolean and call it try use
07:13 - need and we're also going to receive a
07:16 - fold for use a lot so in here first we
07:20 - do a test if the ring amount is bigger
07:22 - than or equal to our use amount if so
07:26 - then that means we can afford it just
07:28 - based on the ring amount so we simply
07:30 - reduce it and if not that means we want
07:36 - to use more than we have available in
07:37 - our ring so we need to check if our core
07:40 - can also withstand this use amount so
07:42 - first we reduce the use amount by our
07:45 - ring amount and now we test if the core
07:48 - mount is higher than what remains so if
07:50 - the core amount is bigger than the use
07:52 - amount then we can still use it
07:54 - so we first set the ring amount to zero
07:57 - since it's all completely spent and we
07:59 - reduce the core mount by our use amount
08:01 - and if not then we simply return false
08:07 - in order to indicate that we don't have
08:09 - enough to spend that certain amount all
08:13 - right so that you do it we try to use a
08:15 - certain use amount of our need and if we
08:17 - can't afford in the ring then we
08:18 - similarly take it from the ring if we
08:20 - can't then we try to check if the core
08:22 - has enough if neither the ring nor the
08:24 - core has enough then we simply return
08:25 - false and we cannot use this need so for
08:28 - testing let's have some logs on the
08:29 - amounts
08:36 - all right we have some logs so we can
08:39 - verify this now let's see how we can
08:40 - test it back in our editor and let's
08:42 - make a new script convert our testing
08:44 - script let's make a testing game object
08:47 - to run this script so testing and drag
08:49 - the script onto it okay now in here
08:52 - let's first add a serialized field for
08:54 - our character so back in the editor we
08:58 - have our film let's drag the reference
09:00 - okay now here let's make our private
09:03 - void awake and let's construct our neat
09:06 - system all right we have created the
09:11 - neat system now we make a fresh Boyd
09:13 - update and here let's do a simple input
09:16 - test and if we press left shift then
09:20 - let's start spreading so let's make a
09:23 - private ball call is sprinting and here
09:28 - we set it to true and Anki up we set it
09:31 - back to false then we check if we are
09:34 - sprinting then it's in here that we want
09:37 - to try to spend our neat amount so
09:39 - you're going to need system and we call
09:41 - try use need so we need our use amount
09:45 - and we try to use this name x time down
09:50 - time so if we can use this need then we
09:55 - keep sprinting and if not then we stop
09:58 - sprinting
10:04 - all right so here we have our very
10:06 - simple logic so if we press on the left
10:08 - shift we start sprinting if we won't let
10:11 - it go then we stop sprinting and if we
10:13 - are sprinting then we check if we can
10:14 - constantly use our sprint need use
10:16 - amount if so we keep sprinting if not
10:18 - then we stop sprinting so very simple
10:21 - let's test okay so here I am walking
10:23 - normally and here is the console so you
10:25 - can see and as soon as I press the left
10:27 - shift there you go we start sprinting
10:29 - and you can see the ring amount
10:30 - constantly going down let's ring amount
10:32 - goes down to zero then the core amount
10:34 - starts being spent and once that one
10:37 - reaches zero so as you can see I'm still
10:39 - sprinting and when that one reaches zero
10:41 - I should go back to normal
10:42 - and there you go the movement speed goes
10:43 - back to normal and we cannot nogger use
10:45 - all right awesome so here is our logic
10:48 - fully working so with a logic working
10:50 - let's connect it to your UI visual first
10:53 - we need to make our visual script so
10:55 - let's make a new c-sharp script call it
10:58 - the UI needs system drag the script on
11:01 - to our game object okay now in here
11:04 - first we need to grab references to our
11:06 - elements okay so here I've grabbed all
11:18 - of our references so first we grab the
11:20 - stem and I need then inside the salmon
11:22 - indeed we grab the ring image then the
11:25 - turtle ring image and the core image
11:26 - again here is how the UI is set up so we
11:29 - have our main container then inside we
11:30 - have the stamina need then we grab the
11:32 - turtle ring the ring and the core image
11:34 - okay so now in here let's make a
11:36 - function to receive a need system okay
11:42 - all we do is set this field in here now
11:45 - let's make a function to update our core
11:46 - and ring visual so we go into the ring
11:50 - image and this is an image so all we
11:53 - need to modify is our film mount now the
11:55 - film mount works with a normalized value
11:57 - so let's go into the neat system in
11:59 - order to make a function down return the
12:01 - exact value we need
12:02 - so on our neat system let's make a
12:04 - public float call it get ring normalized
12:07 - value
12:09 - and we're simply getting to return the
12:12 - ring amount divided by the maximum
12:16 - that's the ring amount and another one
12:19 - to get the core amount and finally one
12:23 - also for the total bring em up okay we
12:29 - have our very nice three functions to
12:30 - return normalized values so we can go
12:32 - back into the UI and in here we can
12:35 - simply set all of them so we go into the
12:37 - need system in order to get in this case
12:40 - the ring normalized value and the same
12:42 - for the rest all right so that should do
12:46 - it so we set our need system then we
12:49 - update it and we set the fill amount of
12:51 - the various images based on what they
12:53 - need system contains so all we need for
12:55 - this to work is to call this function
12:57 - whenever something changes so for that
12:59 - let's use a very nice event back on the
13:01 - nead system let's go all the way up here
13:04 - and we're going to make a public event
13:06 - type event handler if an Emer is inside
13:10 - the system namespace so we have our
13:13 - event let's count on values change
13:17 - alright so we're going to fire this
13:19 - event whenever our values change so
13:21 - right here we call invoke on this method
13:24 - passing this and event our it's not
13:26 - empty so we triggered this event in here
13:30 - and also in here when we change it just
13:32 - like that okay so we have our event
13:34 - correctly being fired and now we can go
13:36 - back into the UI needs system and when
13:39 - we set the innate system we go into it
13:41 - and we subscribe to the on valley's
13:43 - changed event and whenever that one is
13:46 - triggered we simply update okay so every
13:51 - single thing should be working the only
13:53 - thing we need for all of this to work is
13:54 - to call this function in here so for
13:56 - that we go into our testing and here in
13:58 - our testing let's add another serialize
14:01 - field for the you I need system and when
14:07 - we create our need system we simply call
14:09 - set neat system and test this one all
14:12 - right there it is so let's test okay
14:15 - here we are and we have a complete
14:16 - stamina need now let's move and start
14:19 - sprinting and there you go you can see
14:21 - the rain constantly going down
14:23 - and as it gets depleted it starts
14:25 - depleting the core amount and there you
14:28 - go once everything reaches zero I should
14:30 - go back into a normal movement speed
14:33 - there you go almost on any of there you
14:35 - go back into normal and I can no longer
14:36 - sprint so I'm pressing shift and nope
14:38 - doesn't work alright awesome so we have
14:41 - our basic logic working alongside the
14:43 - visual so now with this working let's
14:45 - handle the region so in our neat system
14:47 - let's make our region based on time so
14:49 - since it's based on time let's make a
14:51 - function that we're going to call on our
14:52 - update since this one does not implement
14:55 - motor behavior we're going to do that
14:56 - elsewhere so in here we make a public
14:59 - voi update okay now in here let's do
15:03 - some very basic region so the way the
15:08 - region works is we increase the ring
15:10 - amount by the region speed multiplied by
15:14 - our time dot off the time however this
15:18 - would be if we only have the ring amount
15:19 - but again based on the design of the
15:21 - game the region is based on how much we
15:23 - have on our core amount so we have the
15:25 - region speed before it's x adult time we
15:29 - multiply it by the get core normalized
15:31 - value so if the core is phone we get
15:34 - this much region speed if the core is
15:37 - empty then we have a lower amount so
15:39 - here in order to make sure that the
15:40 - region is always a bit more than just 0
15:42 - let's do a math dot max so at least we
15:48 - have a basic of 10% of our region speed
15:50 - now the last thing we need is simply to
15:52 - make sure that the ring amount is
15:54 - clamped between the min and the maximum
15:56 - so we do a simple clamp with the current
16:00 - ring amount on a minimum of 0 and a
16:02 - maximum of our total ring amount okay so
16:07 - that's it and after that we simply fire
16:09 - off the even so the UI is notified
16:11 - ok so now we need to call this function
16:13 - from somewhere so for that one it's
16:15 - going to our testing script I mean here
16:17 - all we need to do is go down into our
16:18 - update and we're going to the need
16:20 - system and call our update function okay
16:23 - that should do it
16:24 - let's test ok so here we are and our
16:27 - ring is completely phone now let's start
16:29 - sprinting and there you go the ring gets
16:31 - depleted let it go and if there you go
16:33 - we have our nice region so it's written
16:35 - correctly now let's try it
16:37 - deplete the core and see the region
16:38 - speed so there we are we deplete the
16:40 - ring once the ring is done then we start
16:43 - going down on the core and once the core
16:45 - is down then we stop sprinting and there
16:48 - you go I cannot sprint and it's growing
16:50 - very slowly so as you can see we have
16:53 - our nice region dependent upon how much
16:55 - we have on our core amount so here we
16:56 - can sprint again and there you go we
16:58 - have the basic region code working right
17:01 - awesome so this is one way to do our
17:04 - region however if you like the game you
17:07 - don't see that region isn't actually
17:08 - constant it's on a thick system to sort
17:10 - of simulate heartbeats so the more
17:13 - fields your core is the more beats per
17:14 - minute so let's make some very simple
17:16 - take code I've done video covering a
17:19 - very nice time take system so go check
17:21 - that out for a complete explanation in
17:23 - here I'm just going to make a simplified
17:25 - version so we have a float for the
17:28 - region timer so on our update we're
17:42 - calling the handle region function and
17:44 - in here we simply decrease the timer by
17:46 - our delta time and whilst it's under
17:48 - zero we increase it by our maximum and
17:51 - we trigger the region tick which is
17:53 - doing what we were doing previously
17:54 - except in here we now have a reference
17:56 - to time down to time so we are retaining
17:59 - a specific fixed amount and then in here
18:01 - we also do not regenerate based on our
18:03 - core normalized value but rather the
18:06 - core normalized values what's going to
18:07 - influence how many texts we have per
18:09 - second so we can also get rid of this so
18:13 - he simply increased by a certain region
18:15 - speed and then we need something to
18:17 - complete the region timer max
18:27 - so in here we have the bass respond
18:29 - timer of 1f so that's how quickly we're
18:32 - going to take once our core is full and
18:34 - then we have our penalty and this is the
18:37 - amount that we're going to add extra if
18:38 - our core is completely empty and if it's
18:41 - in between then we have our in-between
18:42 - valve
18:43 - so at verse is going to take once per
18:45 - second and at worst once for two seconds
18:47 - so now we need is to complete our region
18:49 - timer whenever the core changes so here
18:51 - first on cert we'd calculate it and then
18:54 - we try to use if we use our core amount
18:56 - then we calculate it as well all right
18:59 - so this should be working
19:00 - let's test okay we're on let's try
19:03 - spending our ring amount and there we go
19:05 - it goes down as the Sprint goes and
19:07 - there you go it's regaining like that so
19:08 - every second tick tick tick and there
19:11 - you go it's wrong now spend it and let's
19:13 - also deplete our core amount so it's
19:16 - going down and down and we still need to
19:19 - deal with the region but let's try and
19:22 - goes down and okay it's empty and now
19:24 - let's see and ticks and two seconds and
19:27 - two seconds and decide and there it is
19:29 - so we now have our region working as if
19:32 - for a heartbeat and if the core is gone
19:34 - then it takes on a lot and if the core
19:36 - is empty then it takes much less okay
19:38 - now let's just make sure that the region
19:40 - only ticks when we are not using it so
19:43 - to do that we can simply store a float
19:45 - for the last use time and when we try to
19:50 - use we set that so we set it to time
19:52 - time okay so now we know the last time
19:56 - that we used our need sent in here we
20:00 - can simply have a boolean called it can
20:03 - region
20:10 - so in here we can only regen if the
20:12 - current time is more than the last each
20:14 - time plus a certain delay so we're only
20:16 - going to regen 0.2 seconds after the
20:18 - last use time so now in here we can
20:20 - simply go in here and we're only going
20:23 - to handle the region if we can't region
20:28 - okay that should do it let's test okay
20:30 - so here we are and let's spend our ring
20:32 - in there you it's going down there's no
20:34 - region and if I let go then the region
20:36 - starts so we no longer have region once
20:38 - we're still using all right awesome so
20:41 - just like this we have pretty much our
20:43 - neat system working we can spend and
20:45 - regen the basic amount we also have the
20:47 - illogic working between the ring and
20:49 - core amounts now let's add some code to
20:51 - be able to level it up leveling up just
20:54 - means that we increase the total ring
20:55 - amount so it's very simple in here we
20:58 - can simply make a public void set total
21:01 - ring round and now we need to do is set
21:05 - our inner variable so that it is
21:07 - extremely simple then once we do that
21:10 - well it's also clamp the current amount
21:12 - just in case we want to lower it so we
21:17 - can leave the ring amount based on this
21:18 - new total and since we changed our
21:20 - values let's trigger our event all right
21:23 - so that's really it now let's go into
21:25 - our testing script and in here let's do
21:27 - some input for testing so when I press
21:31 - this key and let's try to increase our
21:33 - total amount so for LAN let's have the
21:35 - neede system for the current total
21:36 - amount okay we have our get total and
21:41 - now in here we go into the need system
21:43 - and we can set our new total ring amount
21:45 - to be on the current one once let's say
21:50 - 10 so when we press this key we are
21:54 - increasing the total ring amount let's
21:55 - make another one to decrease it all
21:59 - right so that's really all there is to
22:00 - it let's test okay here we are and
22:02 - there's our ring amount and I can press
22:05 - this button to increase it and there you
22:06 - go we're increase then then you saw our
22:08 - region happen so increase it all the way
22:10 - up to maximum and there you go we have
22:12 - our maximum and we can spend it and it
22:15 - regions and so on and by pressing
22:17 - another button we can make a deal go
22:19 - down and said and there you go and just
22:21 - like this we have a
22:22 - very small neat amount there it is and
22:24 - it starts spinning the core right away
22:26 - all right awesome
22:27 - now finally let's add all of the other
22:30 - needs so here in our neat system this
22:33 - last that we build essentially
22:34 - represents you just a single need so
22:36 - it's actually put this inside a nested
22:38 - class and call it just a need
22:48 - okay so I've copied everything into this
22:51 - nested class now this one represents a
22:53 - single need of any time and now I'm here
22:55 - on the needs system class itself let's
22:59 - make it a new for all of our neat times
23:02 - so we have the health stamina and that I
23:05 - now let's or our need instances in a
23:07 - nice dictionary okay so we have a
23:15 - dictionary and we add all of our needs
23:17 - on all the different keys now let's make
23:20 - a function to return need of a certain
23:21 - type and all we do is return from our
23:27 - dictionary and that's pretty much it so
23:29 - we have our inner class to represent a
23:31 - single need of any time and then on our
23:34 - neat system we have a dictionary holding
23:36 - all of our needs so let's go into our
23:38 - testing in here we can see a bunch of
23:40 - errors so before we try to use name we
23:43 - first go into the neat system we get the
23:44 - name we pass any time in this case the
23:47 - stamina and then we try to use our name
23:50 - just like previously so that's all we
23:53 - need to change you know let's also make
23:57 - an update that won't update all of our
23:59 - needs
24:05 - okay so we have an update that updates
24:07 - all the needs so here on the testing we
24:09 - no longer have any errors now let's end
24:12 - on the UI now in here we're going to
24:14 - need to have various ring images and so
24:16 - on for each specific need so let's go
24:19 - into the editor and here let's convert
24:21 - the stamina need in to a prefab call the
24:24 - PF need single ok so we have this need
24:29 - then one on the side and another one on
24:31 - the other side let's call this the
24:36 - stamina need then next week we'd have
24:38 - the dead I need and finally D help me so
24:44 - here we just need to change the core
24:46 - images alright we have our three
24:48 - separate needs of them using the same
24:49 - prefab and now in the UI let's handle
24:52 - each need
25:14 - all right so here on the UI I made a
25:18 - similar pattern so we have a nestled
25:20 - class to handle a single need visual so
25:23 - it receives a knee type and the
25:24 - transform and in here we have on the
25:26 - code as previously so we set the need
25:27 - system subscribe to the on values change
25:30 - and we update it and then awake we
25:32 - similarly created then we pass in the
25:33 - transform so now we just need to pass in
25:36 - the need system alright so there it is
25:41 - just like that
25:42 - all we need is to call this function
25:44 - which we're already doing over here in
25:46 - the testing there you go we're sending
25:48 - the need system all right so we should
25:50 - have connected everything correctly in
25:52 - order to handle all of our three needs
25:54 - now let's test ok so here we are with
25:57 - all three of our needs divisions working
25:59 - now let's see the stamina and you have
26:01 - the center is still working it goes down
26:03 - and regions ok so far so good
26:05 - now let's try out the other ones
26:50 - okay so here we are with all the needs
26:52 - is played and working what's fun a
26:54 - couple of enemies and let them shoot me
26:56 - so there he goes
26:57 - and once he shoots me there you go
26:59 - there's the health going down no the
27:00 - health core is going down now let's try
27:02 - out the Deadeye and there you go data is
27:04 - going down so tag all of them and click
27:06 - the button and there you go that eye
27:07 - engages and as you can see they're both
27:09 - rejoining and these stamina so works the
27:12 - same and now let's go and did that is
27:15 - currently being spent and the rain goes
27:17 - down there you go ring is down and now
27:20 - the core starts going down and after a
27:22 - while the core is almost depleted and
27:24 - once it depletes without me touching
27:25 - anything it forcibly cancels so there
27:27 - are you we have all our three different
27:30 - knee types all correctly working so the
27:32 - enemies shoot them and they shoot me in
27:34 - there yo there's my home and so on and
27:36 - so forth alright great so over here we
27:40 - have our very nice effect
27:41 - now finally here I have the inventory
27:43 - system this was fully created from
27:45 - scratch in a previous video so go check
27:47 - that out to see how this was made
27:48 - so we can create items and use it here
27:51 - on testing I simply create the new
27:53 - inventory with a reference to the UI
27:54 - inventory and create it and set it and
27:57 - whenever an item is used it triggers
27:59 - this function in the inventory code I of
28:02 - the three item types so the burger the
28:04 - energy drink and candy and now here we
28:06 - can use those items in order to
28:08 - replenish our course
28:21 - so here when we use an item we do a
28:24 - switch on the item type and if it's a
28:26 - burger we're going to replenish our
28:27 - HealthCorps amount energy the stamina
28:30 - and the data so here this function very
28:32 - simple it just takes a fold for the
28:33 - replenish it adds to the core mount and
28:35 - it triggers our event alright so there
28:37 - it is very simple let's test ok here we
28:39 - are with our inventory and all of our
28:41 - needs so let's find some enemies and
28:43 - lose some health and there you go they
28:45 - come to me they start shooting and
28:47 - they're you and they keep missing but
28:50 - there you go there's my core going down
28:51 - Oh enable that eye and get rid of all of
28:53 - them and click and shoot and there you
28:55 - go
28:55 - so my core has been spent in the region
28:58 - is very slow but now I can click on it
29:00 - and there you go replenishes my core by
29:02 - eating some burgers so do the same thing
29:04 - on the stamina there you go still full
29:06 - and we have our nice region now spend
29:08 - some more spend it completely and there
29:11 - you go it keeps going down when it sound
29:13 - ok now the region is slow you know let's
29:15 - take some energy drinks and there you go
29:17 - with the region goes up and same thing
29:19 - for the data so then I goes no no it
29:22 - takes a while to regen and let's eat
29:23 - some candy and replenish our core right
29:25 - awesome so over here we have our
29:27 - complete need system we have our three
29:29 - neat types the health stamina and the
29:31 - Jedi we can activate each of them
29:34 - individually so they all work
29:36 - independently and they work with the
29:38 - correct logic between the ring and the
29:40 - core amounts so if I get hit it spends
29:42 - the help name if I sprint it spends East
29:45 - I'm gonna need and if I enable that I it
29:46 - spends East that I need then we have our
29:50 - region based upon our current core
29:52 - amount and we have our items to
29:54 - replenish that core month there you go
29:56 - goes off and region improves as always
29:58 - you can download the project fanzini
30:00 - tony's from in tucumán comm subscribe to
30:02 - the channel for more Eng tutorials post
30:04 - any questions you have in the comments
30:05 - and I'll see you next time
30:11 - [Music]
30:13 - you