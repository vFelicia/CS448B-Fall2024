00:00 - in this video we're going to create an
00:01 - awesome looking construction shader
00:03 - effect
00:04 - it's an excellent effect for any game
00:05 - with construction like a tower defense
00:07 - or rts games
00:08 - it will also teach you how to be clever
00:10 - when working with graph in order to
00:12 - make some more complex effects
00:13 - let's begin
00:19 - all right so here let's check out the
00:20 - awesome construction shader effect
00:22 - so here i am in my demo scene and i have
00:25 - a simple building manager implemented
00:27 - so as i press the button if there you go
00:29 - a building gets placed and it starts
00:30 - being constructed
00:31 - it looks like the building is slowly
00:33 - being printed reality it gets created
00:35 - aligned by a line after a while yep the
00:37 - home building is done
00:38 - and this is a real nice shader effect so
00:39 - it's applicable to any visual so this is
00:41 - a wood harvester now let's place a stone
00:43 - harvester
00:44 - and if there you go line by line looks
00:45 - really cool and over here let's place a
00:47 - gold harvester
00:48 - and yep there you go you can see that
00:50 - the effect looks really awesome
00:52 - so it works with any sprite there you go
00:54 - a nice tower and over there a nice hq
00:57 - and yep it prints really satisfying left
00:59 - to right and yep there you go
01:00 - looks awesome so this is the effect
01:02 - which is also easily customizable with a
01:04 - whole bunch of parameters
01:05 - so the main one is over here the number
01:07 - of segments so this is how many vertical
01:09 - segments there are
01:10 - so if i put this with just two yep there
01:12 - you go it prints the bottom part and
01:13 - then the top part
01:15 - i can put it at 10 to get a nice amount
01:17 - or i can put it at 30 to look really
01:18 - insane
01:19 - so very customizable then you can also
01:22 - change the color of the printing head so
01:23 - instead of blue let's make it a green
01:25 - make
01:25 - a nice orange red and so on and we can
01:27 - also change the thickness of the colors
01:29 - instead of point zero one let's make it
01:30 - point zero two and there you go it's a
01:31 - bit
01:32 - bigger and quite a lot bigger and yep
01:33 - just like that lastly you can also play
01:35 - around with this texture in order to get
01:37 - some different shapes so this one goes
01:38 - left to right
01:39 - and now this one is going from the
01:40 - center to all the sides
01:42 - and this one going outside back in so as
01:44 - you can see the whole effect is really
01:46 - customizable with tons of parameters now
01:48 - by the way i also use this exact effect
01:50 - in my course for the builder defender
01:51 - game
01:52 - the course is 10 hours long with over 15
01:54 - lectures nicely organized into distinct
01:56 - topics
01:56 - it teaches you everything on how to make
01:58 - a game starting completely from scratch
01:59 - until the final polished game
02:01 - the lectures are presented as clear
02:02 - step-by-step tutorials just like my
02:04 - normal videos
02:05 - it teaches you how to make a building
02:07 - system resource management enemy ai
02:09 - world building post processing polish
02:10 - and much much more
02:12 - so if you are looking for a guided
02:13 - step-by-step course on making a complete
02:15 - game from start to finish then check the
02:16 - link in the description to pick up the
02:17 - course
02:18 - alright so this is our goal let's get to
02:20 - it okay so let's begin by making our
02:22 - shader
02:23 - now in the shaders for only just right
02:24 - click go into create we're going to
02:26 - create a new shader
02:27 - and in this case go into the 2d renderer
02:28 - and make a sprite only graph
02:30 - let's name it the construction effect
02:34 - and just open it all right so here we
02:37 - are in graph
02:38 - now if you're not familiar with
02:39 - shadowgraph go watch my getting started
02:41 - video first it's linked in the
02:42 - description now we're going to begin
02:43 - with a texture just so we can see it in
02:45 - action
02:46 - so let's begin by making a texture 2d
02:48 - name it our main
02:49 - text reference underscore main text
02:52 - then let's default it to the building
02:54 - texture and now let's drag it in here
02:57 - then we simply sample it
02:59 - and pass the rgba over there onto the
03:01 - colors and change the preview into a
03:03 - quad
03:04 - all right so we have our basic shader
03:06 - now let's just hit on save asset
03:08 - then over here on the scene view let's
03:09 - simply make a sprite with a sprite okay
03:12 - there it is
03:13 - and now let's make a material so by the
03:15 - way here's a quick tip instead of right
03:16 - clicking on the folder and creating
03:18 - material
03:18 - right click on top of the actual shader
03:20 - so right click create and go in here and
03:22 - create a material
03:23 - and automatically uses our shader so
03:26 - let's name this our construction effect
03:28 - then on the sprite itself let's use this
03:30 - material
03:31 - all right so far so good we have a
03:32 - sprite and it's using our custom shader
03:35 - now let's continue now in order to
03:36 - achieve our effect of showing the
03:38 - construction happening going from one
03:39 - side to the other
03:40 - one thing we're going to need is a
03:42 - gradient texture so let's add a new
03:44 - texture to 2d field
03:46 - let's call it the progress texture
03:50 - and here on the default i have a texture
03:53 - i made previously
03:57 - and here it is it's just a very simple
03:59 - gradient so it's fully black on this
04:02 - side and fully right on this side
04:03 - now it's red simply because we're only
04:05 - going to be using the red channel
04:07 - so in reality this is simply a texture
04:09 - going from zero to one
04:10 - so there it is very simple now we're
04:12 - going to take the red
04:14 - color channel and now the one key thing
04:15 - that we're going to do here is we're
04:17 - going to add a step node
04:21 - so what this does is it steps through
04:23 - our texture and only shows values under
04:25 - a certain amount
04:26 - so since our texture is going from left
04:28 - to right over here with zero and over
04:29 - here with one
04:30 - as we increase over here on the input
04:32 - you can see that increases going from
04:34 - left to right
04:35 - so this essentially is the basis for the
04:37 - whole system it's just a gradient
04:39 - texture and a step node
04:40 - now let's make a property for this step
04:42 - value so create a new one this will be a
04:44 - vector one so essentially just a float
04:46 - let's name it our progress and here
04:49 - let's change the mode and make it into a
04:51 - slider going from zero to one okay so
04:53 - far so good
04:54 - and then just drag it in here and this
04:56 - is the one that we use in here
04:57 - so we have our texture we sample it and
05:00 - then we do a step node and use the
05:02 - progress so let's put this at something
05:04 - like point four
05:05 - and if we can see this is forty percent
05:06 - film all right so with this let's simply
05:08 - apply it to our texture
05:10 - alpha so let's take all these let's here
05:12 - add a multiply node
05:13 - so we're going to take the original
05:15 - alpha there it is that one and we
05:17 - multiply it by this one and there you go
05:18 - this is the shape that we get
05:20 - so we take this and then let's add a
05:22 - combined node and we're going to take
05:24 - the original red the original green and
05:26 - the original blue
05:28 - and just use this alpha and then use
05:30 - this rgba in there and if there you go
05:31 - we already have that effect
05:33 - now in this case since this is a
05:34 - construction effect personally i like
05:36 - this to have a bit of a different color
05:38 - so one easy way to do it is simply
05:40 - delete the red
05:42 - and there you go now it gets a slightly
05:43 - bluish color so personally i prefer this
05:45 - since it makes it more clear that the
05:47 - sprite is being constructed
05:48 - but if you wanted you can also take all
05:50 - of them and apply a simple tint
05:52 - but in this case like this looks pretty
05:53 - good so we have a progress texture
05:56 - then we're applying a simple node based
05:58 - on what's on the progress variable
06:00 - and then we simply take that we multiply
06:02 - it with the original alpha
06:03 - we combined with the colors while
06:05 - ignoring the red and we simply use that
06:06 - on the color
06:07 - alright so let's see how it looks like
06:09 - this and yep over there we can already
06:11 - see our effect in action
06:12 - so down here we have the progress slider
06:15 - so as we move it in there it's all fully
06:17 - empty and as we slightly increase it yep
06:18 - there you go it gets printed from left
06:20 - to right
06:20 - all right so we already have a really
06:22 - nice base for our effect awesome
06:24 - okay so what we have here is essentially
06:26 - just a single segment working
06:28 - now for the final effect we want to
06:29 - split the sprite into multiple vertical
06:31 - segments
06:32 - so back in the shader here let's think
06:35 - of exactly how can we make some segments
06:37 - now here you need to think in terms of
06:39 - discrete operations rather than thinking
06:41 - of the whole final effect
06:42 - so first of all the segments are meant
06:44 - to be placed vertically essentially
06:46 - if we have two segments then first we
06:48 - want to fill the bottom half of the
06:49 - sprite and then we want to fill the top
06:51 - off
06:51 - so that tells us that essentially we're
06:53 - going to need a vertical gradient
06:55 - so let's make that now one approach is
06:57 - we could make a different texture
06:59 - going from the bottom to the top so that
07:01 - would work but would require us to make
07:02 - a component different texture
07:04 - however we can do that more easily by
07:06 - just rotating this texture that we
07:07 - already have
07:08 - so let's duplicate these nodes along
07:10 - with the step so just hit ctrl d in
07:12 - order to duplicate them all right here
07:14 - they are
07:15 - and now in here we can add a rotate node
07:17 - so there you go this outputs the uv
07:19 - which we connect in there
07:20 - so like this it still looks exactly the
07:22 - same but over here we can apply
07:24 - something on the rotation so as this one
07:26 - increases yep we have our gradient
07:27 - increasing
07:28 - so now here you can probably tell that
07:30 - the value is set in radians
07:32 - so at zero it's going left to right as i
07:34 - approach about that about 1.38
07:36 - it's going from bottom to the top so in
07:38 - our case we want a
07:40 - 90 degree rotation so in radians as you
07:42 - know
07:43 - pointing to the right we've got zero and
07:45 - pointing to the left we've got pi
07:46 - and the false circle is two pi so in our
07:49 - case we want just a 90 degree rotation
07:51 - so we want pi divided by two which is
07:55 - 1.5707 and so on alright so just like
07:58 - this we have a perfect 90 degree
08:00 - rotation so by modifying the progress in
08:02 - there
08:03 - yep there you go that one goes from left
08:04 - to right and down from bottom to the top
08:06 - now again let's think of what we need in
08:08 - order to achieve our goal
08:09 - now for this one up here we do want it
08:11 - to go smoothly from left to right
08:13 - however in this one down here we wanted
08:14 - to transition between distinct states
08:16 - rather than smoothly moving from one to
08:18 - the other
08:19 - so in order to do that let's first
08:20 - define a property for the number of
08:22 - segments
08:23 - so we create another one again a vector
08:25 - one so just a normal float
08:27 - let's call it our segments and here
08:29 - let's set it to two segments
08:31 - and now in here we want to split this
08:33 - into the number of segments based on the
08:35 - current progress
08:35 - so that means that we need to convert
08:37 - the current progress which is a
08:38 - normalized value going from zero to one
08:40 - we need to convert that into the scale
08:42 - of these segments so we simply add a
08:44 - multiply node
08:45 - and we multiply the current progress by
08:48 - the actual number of segments
08:54 - so if the progress is set to 1 then the
08:57 - output in here will be the same as the
08:58 - amount of segments
08:59 - and if it's at 0.5 then we have half the
09:01 - segments and so on
09:03 - however in here this step node takes a
09:05 - normalized value
09:06 - so we have to normalize that value in
09:08 - there and we do that
09:10 - by using the divide node and we divide
09:13 - this value by the actual number of
09:14 - segments
09:15 - and then we connect this one onto that
09:17 - one okay so it seems like we end up
09:19 - pretty much in the same place where we
09:20 - started
09:21 - however now let's think about what this
09:23 - is doing now in here we are multiplying
09:25 - the progress by the number of segments
09:27 - and then we are normalizing that value
09:29 - so in order to get the strict values
09:31 - we can simply add a four node in between
09:33 - these two
09:34 - so just push this one to the right add a
09:37 - four node
09:38 - and we're simply going to forward this
09:39 - value so we take this one we take a
09:41 - floor
09:42 - and then we connect to the divide and
09:44 - just like that
09:47 - and yep with this now the step node is
09:49 - indeed working so as the progress is at
09:51 - zero then that one is fully on zero and
09:53 - that one is also on zero
09:54 - and as the progress increases like let's
09:56 - say at point three
09:58 - that one smoothly increases to point
09:59 - three but that one does not move that
10:01 - one is split into two segments
10:03 - so even if i put on point four nine the
10:06 - four is still zero so it's still on the
10:07 - very first segment
10:08 - and only as i increase to point five
10:11 - does it yep indeed it fills up that one
10:13 - and as i go up to point nine yep still
10:15 - with that one and as i go up to one yep
10:17 - now it's fully filmed
10:19 - alright so with this we have now
10:20 - implemented discrete vertical segments
10:22 - awesome
10:23 - now we really just need to combine this
10:24 - with our left and right motion
10:26 - so let's get a bit more space just push
10:28 - all of this more to the side
10:29 - all right now in order to combine these
10:32 - two again
10:33 - remember that shader effects are really
10:35 - all just about numbers and basic
10:36 - operations
10:37 - so what we have here is just a bunch of
10:39 - ones and a bunch of zeros and over here
10:41 - a bunch of zeros and a bunch of ones
10:42 - so if we want to combine these we just
10:44 - add a very simple multiply note
10:46 - so we multiply this one by this one and
10:48 - yep we have our combined output
10:50 - so here we have already successfully
10:52 - introduced segments
10:53 - onto the vertical bar however we have
10:55 - not added them to the horizontal bar
10:57 - what we want is for this one to go from
10:59 - left to right as many times as the
11:01 - number of segments
11:02 - so right now it only goes from left to
11:04 - right once as we increase the progress
11:06 - down to 1.
11:06 - however with two segments then it should
11:08 - be essentially completely filled at 0.5
11:10 - then reset back to the left side
11:12 - and as it increases for another 0.5 it
11:14 - should fill up again
11:15 - so let's do that now in order to do this
11:18 - it is very simple
11:19 - with a basic modulo operation so we add
11:22 - a modular node
11:23 - now if you're not familiar with modulo
11:25 - it is simply the remainder of the
11:27 - division
11:28 - so we do a modulo of the progress and in
11:31 - this case we're going to want to do it
11:32 - with 0.5
11:34 - and then we simply add a multiply node
11:36 - and we multiply this output
11:37 - by the number of segments
11:42 - all right so there it is so now
11:44 - essentially when the progress is let's
11:45 - say at point one
11:46 - if there you go it only fills up a tiny
11:48 - bit and as that one approaches point
11:50 - five so at point four
11:51 - yep it's almost full and as it goes into
11:54 - point five yep there you go it resets
11:55 - back
11:56 - and as it goes up to 0.99 there you go
11:58 - it's completely full again
11:59 - so now as the progress comes from 0 to 1
12:01 - this one is going to fill in
12:02 - exactly 2 times which is the number of
12:04 - segments now here we are doing a module
12:07 - of 0.5
12:08 - since we just have two segments so the
12:10 - correct value is just one divided by the
12:12 - number of segments
12:13 - so just add a divide node and divide one
12:17 - by the number of segments and this is
12:19 - what we use in there
12:27 - all right so our logic is looking good
12:29 - over here we have a horizontal bar that
12:31 - goes from left to right as many times as
12:33 - the number of segments that we have
12:34 - so we have that and then we combine both
12:36 - of them and then this output
12:38 - really is what goes over there onto the
12:39 - alpha now over here we still have one
12:42 - issue which is that if the progress is
12:44 - under 0.5 so let's say at 0.4
12:46 - if there you go that one is working
12:47 - correctly however this one is completely
12:49 - empty
12:50 - so right now the logic is fully working
12:52 - but it's only working after the first
12:54 - segment so if i put this at 0.6
12:56 - it does work correctly so what we need
12:58 - is to have this one
12:59 - and then to have another one that goes
13:01 - one segment ahead
13:02 - so let's make another step node for the
13:04 - vertical and we use this red channel
13:07 - okay
13:07 - good
13:14 - except for the input on this one we
13:16 - essentially just want to add another
13:17 - segment
13:18 - so let's make an add node and we're
13:20 - going to take the output from here
13:21 - and we're simply going to have another
13:23 - segment so just one divided by segment
13:25 - so just copy this one add on to that one
13:27 - and use this one
13:28 - in there alright so yep there it is so
13:31 - now we have this one down here that is
13:32 - one segment ahead
13:34 - of this one so as this one is at let's
13:35 - say at point four
13:37 - that one is empty that one is half full
13:38 - and as this one reaches let's say point
13:40 - six
13:41 - this one is four when this one is half
13:43 - full and if we use more segments all of
13:45 - the logic still works so let's say five
13:46 - segments and there you go that one is
13:48 - always one ahead of that one
13:50 - so at point six then at point four and
13:52 - so on and yep
13:53 - the logic works perfectly however like
13:55 - this we still have one
13:56 - issue which is that even if we were to
13:59 - use this one which goes one segment
14:00 - ahead
14:01 - all right that one works good so if we
14:03 - go up to point four nine
14:04 - yep it's working good it's filling in
14:06 - the first one but if we go to
14:08 - point six and there you go we can
14:10 - eliminate the bottom segment what we
14:12 - want is to only apply the left right
14:14 - motion on the topmost segment so the
14:16 - bottom one is supposed to be
14:17 - visible at all times so you can see
14:19 - what's happening right now if we save
14:21 - the shader
14:22 - and here we are and we have our progress
14:24 - and there you go as we increase and as
14:25 - we go
14:26 - up 2.5 yep there you go it looks good
14:28 - it's printing the first half of the
14:30 - bonding and as we go to point five yep
14:32 - there you go it goes back and now it's
14:33 - printing both segments at once
14:35 - so again what we want is to really only
14:37 - use the last segment
14:38 - when applying the horizontal movement so
14:40 - back in the shader here
14:42 - doing that is actually quite simple so
14:44 - we have this one which is
14:46 - as you remember one segment above of
14:48 - this one
14:49 - so it's always one ahead and again
14:51 - remember that shaders are all about
14:53 - simple mathematical operations
14:54 - so if we just want the top one then we
14:56 - can simply take this shape and subtract
14:58 - this shape
14:59 - so just go in here add a subtract and
15:01 - we're going to take the one that is
15:02 - commonly filled
15:04 - we take the one that is one behind and
15:05 - there you go we only have the top
15:07 - so then this is the one that we apply in
15:09 - there in order to multiply
15:10 - so now as that one is at let's say 0.4
15:12 - yep it's printing the bottom segment
15:14 - and as it goes up to 0.6 yep now it's
15:17 - printing the top segment
15:18 - so again we just need to leave this one
15:20 - as the same as before
15:22 - so we just take these two okay and then
15:23 - we have an add node
15:25 - and we're going to add the topmost shape
15:28 - and combine it with the bottom most
15:30 - shape
15:30 - and yep there it is now we have that
15:32 - effect and connect this one there
15:34 - and now we can actually see it in action
15:36 - so let's save the asset
15:38 - and over here at zero everything is
15:39 - empty as we increase yep starts
15:41 - increasing the bottom segment and as we
15:43 - go past point five
15:44 - yep there you go now it's increasing the
15:46 - top segment so there you go yep
15:47 - the effect is working perfectly and
15:50 - again we made the song really nice
15:51 - really dynamic based on this number of
15:53 - segments so if we add this to let's say
15:54 - 10 segments
15:55 - and as we increase yep there you go you
15:58 - can see our effect is constantly
15:59 - printing so it is really starting to
16:01 - take shape
16:02 - all right awesome so with this the
16:04 - effect is already working it's
16:05 - constructing the building line by line
16:07 - however the issue is that it always goes
16:09 - straight from left to right
16:10 - it would look better if it constructed
16:12 - from the left and then on the second one
16:14 - go from the right and then from the left
16:15 - and so on
16:16 - all right so let's do just that so back
16:18 - in the shader here
16:19 - what we're going to do is over here we
16:21 - have our horizontal logic
16:22 - and we're essentially just going to
16:24 - duplicate this so just click ctrl d
16:26 - duplicate all of these all right good so
16:28 - using the same texture all right
16:30 - everything looks good
16:31 - so we do the exact same thing using a
16:33 - step node and all this logic all that is
16:34 - good
16:35 - however in this case we want the texture
16:37 - to go the other way so once again we
16:39 - have the option that we could make a
16:40 - separate texture
16:41 - going from right and left or once again
16:43 - we can play around in the uv
16:45 - so one approach could be by doing the
16:47 - rotation and rotate by pi
16:49 - but let's look at a different approach
16:51 - so let's add a
16:52 - tiling and offset node so we connect
16:54 - this one in there
16:55 - and over here we change the offset on
16:56 - the x to minus one and now we see an
16:58 - issue that everything is set to black
17:00 - so let's go into the texture import
17:02 - settings for this texture
17:04 - so here it is my construction progress
17:06 - texture and down here we have a really
17:08 - nice wrap mode
17:09 - and by default it's set to clamp but we
17:11 - have all these options
17:13 - and in this case instead of clamp let's
17:14 - choose mirror and if we hit apply
17:16 - and go back into the shader and if there
17:18 - it is now we have from right and left so
17:20 - as we modify the offset you can see that
17:22 - the actual texture shape is mirroring
17:24 - so minus one makes it perfect all right
17:27 - so just like this we have this tab node
17:29 - going from left to right
17:30 - and this one from right and left so as
17:31 - we increase the progress let's put it at
17:33 - quite a bit
17:34 - let's put it at 0.1 there you go just
17:36 - that one let's put it at 0.2
17:39 - any input increase like that 0.3 and yep
17:41 - there it is so that one left to right
17:43 - that one right and left
17:44 - alright so now all that's left to do is
17:45 - add some logic in order to use either
17:47 - this one and this one and then combine
17:49 - it with this one
17:50 - so we can add that logic by making even
17:52 - lines go left to right
17:54 - and odd lines go right and left so to
17:56 - test if it's an odd or even line
17:58 - let's add some nodes here so first let's
18:01 - take a multiply node
18:03 - and multiply the progress by the number
18:05 - of segments
18:06 - all right so we have the full value
18:08 - rather than the normalized value
18:10 - so we do this then we for it so in order
18:12 - to make it a whole number
18:14 - and then we add a modular node and we're
18:17 - going to take this and make a marginal
18:18 - low of two
18:19 - so the end result in here won't be zero
18:21 - if the line is even and one if it's odd
18:24 - so for example if we are on the third
18:26 - segment so the output in here won't be
18:28 - in let's say 3.4 we're 40
18:30 - on the third segment then we forward it
18:32 - so 3.4 becomes three
18:33 - and then we do a modulo so you do three
18:35 - divided by two and the remainder of that
18:37 - division is one
18:38 - so that one is an odd segment so we have
18:41 - this logic
18:42 - and then we add a comparison node so
18:44 - this one is really useful
18:45 - we take this one we compare it with the
18:47 - a and we're going to compare the a with
18:49 - zero so again this will either output
18:50 - either zero or one
18:52 - so we have this one we test if it's
18:53 - equal okay and out here we have a
18:55 - boolean
18:55 - output and then we can add a branch node
18:59 - so this one takes a boolean and then
19:01 - essentially what this does is if this
19:02 - one is true then the output will be what
19:04 - is
19:04 - received in here and if it's false it
19:06 - outputs this one
19:08 - so yep that's exactly what we want
19:16 - so over here we put the left one if it's
19:18 - true and we put the right one if it's
19:20 - false
19:21 - then we take these two and we put it on
19:23 - the multiply all right so that's it
19:25 - let's save the shader and test and okay
19:27 - here's the building
19:28 - and we have our progress at zero okay
19:30 - and as we start increasing yep it goes
19:32 - from left to right
19:33 - and as we reach to the right side if
19:35 - there you go the second line goes right
19:36 - to left and then left right right and
19:38 - left left right and so on
19:40 - all right so here we have a really nice
19:41 - logic all perfectly working
19:43 - awesome alright with this we have almost
19:45 - a complete effect
19:46 - by the way i have a simple script here
19:48 - that we can use to test
19:49 - so here is the script very simple we
19:52 - just have a forward progress
19:53 - and it's constantly increasing and by
19:55 - the way this is how you assign
19:57 - properties to a certain value
19:58 - so the shader has a property with the
20:00 - name underscore progress
20:02 - so here it is we can see progress with
20:04 - reference underscore progress so this is
20:06 - how we set it we call set float give it
20:08 - the name and give it the value
20:09 - and yep over here we can see our shader
20:11 - in action so it goes right and left left
20:13 - to right and so on and yep
20:14 - it's already looking very nice alright
20:16 - so this is almost a complete effect
20:18 - it does indeed construct the building in
20:20 - a really nice way now let's take this
20:21 - the next level and add a really nice
20:23 - glowing printing head
20:25 - adding that is actually extremely simple
20:27 - what we have to do is essentially just
20:29 - duplicate all of these nodes
20:30 - so let's grab all these and hit ctrl d
20:33 - to duplicate
20:35 - and drag them all down here all right so
20:37 - we have the exact same logic up here and
20:38 - down here
20:39 - now the one thing we're going to change
20:41 - down here is we're going to add a tiny
20:42 - amount to the progress value
20:44 - so let's make that tiny amount a
20:46 - property let's call it the head
20:48 - thickness
20:52 - we're going to use a really tiny value
20:54 - so with this you can already guess where
20:56 - this is going
20:57 - we're going to go here where we have our
20:59 - progress and we just make an
21:00 - add node and we have the progress and we
21:03 - add it by this very tiny amount so we do
21:05 - this and then output it in there
21:11 - so now we just need to apply this logic
21:13 - wherever we're using the progress so
21:15 - down here we're using it the same so
21:17 - let's bring it down here
21:18 - remove this one and connect this one
21:20 - okay then down here we also have
21:22 - progress
21:26 - all right that's it and the last one is
21:28 - all the way up here
21:29 - so once again just copy this one and put
21:31 - it in there all right so essentially
21:33 - what we have is that all of the logic
21:34 - down here is a tiny tiny bit
21:36 - ahead of all the logic up here so now we
21:39 - can just add a simple
21:40 - subtract node and we're going to take
21:42 - the output from this one which is a tiny
21:44 - bit ahead
21:45 - and we subtract it to this one which is
21:47 - a tiny bit behind
21:48 - and we combine those two and with this
21:51 - we get just a tiny sliver of the shape
21:53 - of the head so in here let's switch the
21:54 - segments from 2 to 10 so we can see
21:57 - and if there go just like that so now we
21:59 - have this now let's just multiply it by
22:01 - a simple color
22:02 - so let's make another property for a
22:04 - color for the head
22:06 - color and here on the mode let's make it
22:08 - hdr so we got a real nice glow
22:10 - and then give it something like let's
22:12 - say a blue and give it some intensity
22:15 - all right so we take this color then we
22:17 - simply add a multiply node
22:19 - multiply this head to this column
22:25 - and then all we need is another add node
22:28 - and we add the head onto it
22:33 - all right so there it is now let's save
22:35 - it and if there it is we have our
22:37 - printing head looking really awesome
22:39 - there you go constantly increasing and
22:41 - the head is constantly at the edge
22:42 - and of course we have our property so
22:44 - let's say increase the head thickness
22:46 - and there you go now it's much more
22:47 - massive and like this it's
22:49 - much more tiny so there you go very
22:52 - easily customizable and of course we can
22:54 - also modify the color
22:55 - so let's make it a nice green there you
22:57 - go nice orange and yep there it is it
22:59 - looks pretty awesome
23:00 - alright so with this everything is
23:02 - working as the progress increases
23:03 - it constructs the building in a very
23:05 - satisfying way so it prints left to
23:07 - right segment by segment and there's a
23:08 - really nice glowing printing head
23:10 - and also the other parameters still
23:12 - exist so for example over here on the
23:13 - segments let's say 10 segments is too
23:15 - much
23:16 - let's put it just two and there you go
23:17 - it goes just one and two
23:19 - let's put in three and yep we've got in
23:20 - three let's put in 30
23:22 - and there you go it's a really insane
23:24 - printer so you can see how this final
23:26 - effect is really really nicely and
23:27 - customizable so lastly i'm just going to
23:29 - apply this to a bunch of buildings
23:31 - so all it really takes is really just
23:32 - applying the same material so over here
23:34 - i have a simple prefab
23:36 - that i can easily spawn and all i need
23:38 - to do is just apply that material and
23:39 - yep there you go
23:40 - and now if you run this so here i am and
23:43 - i have a simple building manager so as i
23:45 - click
23:45 - if there you go it starts printing the
23:47 - building and after a few seconds the
23:49 - whole building gets printed and if there
23:51 - you go it spawns the actual building
23:53 - so there's a wood harvester and over
23:54 - there we've got the stone harvester
23:56 - then a golden harvester and then we have
23:58 - a nice tower
23:59 - and a real nice hq and there you go you
24:01 - can see the effect looks really really
24:03 - nice
24:04 - so they all get built they all get
24:05 - spawned and they all look really great
24:07 - so here it is the final effect it looks
24:09 - excellent and is perfectly suited for
24:10 - just about any game with some
24:12 - construction
24:12 - now again this shader was originally
24:14 - created for the complete builder
24:15 - defender course
24:16 - so if you want to see how this is used
24:18 - as part of a complete game go check out
24:20 - the course link in the description
24:21 - it teaches you everything on how to make
24:23 - a game starting completely from scratch
24:24 - until the final polished game
24:26 - if you found this video helpful consider
24:28 - liking and subscribing as always you can
24:30 - download the project files and utilities
24:31 - from unt codemonkey.com
24:33 - this video is made possible thanks to
24:34 - these awesome supporters
24:36 - go to patreon.com unitycodemonkey to get
24:39 - some perks and help keep the videos free
24:40 - for everyone
24:41 - subscribe to the channel for more unity
24:43 - tutorials post any question comments and
24:45 - i'll see you next time