00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're continuing to expand
00:03 - upon our 10 minute game and make it into
00:05 - a simple RTS we're going to add building
00:07 - construction let's begin
00:12 - so one of the core elements of an RTS
00:14 - game is Bay's melding over here we have
00:17 - some resource nodes a storage and a
00:19 - barracks building we want to add the
00:21 - ability to be able to construct more so
00:24 - we're going to start off by creating
00:25 - multiple storages right now the storage
00:27 - is just a simple transform so the first
00:29 - thing we need is to create a class to
00:31 - handle it so over here a new c-sharp
00:33 - script and we're going to convert our
00:35 - building storage now we're trying to
00:38 - create multiple storages so the first
00:40 - thing we're going to need is enlist to
00:42 - keep track of all of our storages so in
00:44 - here we can simply do a private static
00:46 - list to contain all of our building
00:50 - storage instances and in here on our
00:53 - private void awake we simply add instant
00:56 - list and this one and here in case this
01:00 - is the first one point simply do if it
01:02 - is known we instantiate the list ok ok
01:07 - so now one of the functionalities of the
01:08 - storage is for the workers to drop off
01:10 - their resources so let's make a function
01:14 - to return the closest storage so in here
01:16 - we simply do a public static function
01:18 - we're going to return a building storage
01:20 - and we're going to call it get closes
01:22 - now in here we're going to receive a
01:25 - vector3 for the position that we want to
01:27 - test that closes to and as a helper
01:30 - function let's also do a public vector3
01:33 - to return our position so in here just
01:37 - some simple code to get the closest
01:52 - okay so we cycle through our list if we
01:55 - do not have any closest then this one
01:57 - becomes the closest if we do have a
01:58 - closest then we check to make sure that
02:00 - this particular index is closer than the
02:02 - closest and then we solve at the closest
02:04 - and that's we will return ok so we have
02:07 - the basics for our building search class
02:09 - now we need to modify the worker to be
02:11 - able to work with this instead of a
02:13 - transform so here is our worker code and
02:16 - down here we have a state called moving
02:19 - to storage and here Agis has the game
02:22 - handler to give him a storage transform
02:24 - so we're only there going to modify this
02:26 - function and it will return a building
02:28 - storage building storage then we simply
02:33 - test the distance that get position okay
02:39 - so we are doing exactly the same as
02:40 - previously except now we are using a
02:42 - proper class so we simply test if it is
02:45 - close enough if it is he drops the goal
02:47 - and goes back to idle if not he moves
02:49 - towards the storage position now we
02:50 - could either modify this function right
02:52 - here in order to ask the game Helena to
02:54 - return a building storage or we can just
02:57 - directly ask the building storage class
02:59 - using the function that we wrote our get
03:01 - closest and we give it our position so
03:04 - now here in the editor let's just drag
03:06 - our script onto our storage transform so
03:08 - drag it onto there okay and just like
03:10 - that everything should still be working
03:12 - exactly the same except now it uses a
03:14 - proper class instead of the transform so
03:16 - let's see
03:16 - hit play okay there he is mining and yep
03:19 - you went to sorry she dropped here the
03:21 - goal and everything worked perfectly
03:22 - fine okay so now that we have this
03:24 - working let's try creating a storage
03:26 - from code in order to do that the first
03:28 - thing we need is to convert this into a
03:29 - prefab that we can later instantiate
03:31 - so here is the prefab PF storage and now
03:36 - on the storage class let's create a
03:38 - function to create a new storage
03:48 - okay so that's it very simple we just
03:51 - instantiate the prefab now let's have
03:53 - the prefab onto our game hammer so in
03:55 - here we're going to add a reference that
03:57 - we're getting later going to ground and
04:00 - now here on certain let's instantiate a
04:01 - new transform okay and let's see if
04:06 - they're using both storages all right he
04:09 - used that one now you went to mine now
04:11 - and now he used that one which is the
04:12 - closer storage alright so we have both
04:15 - of our Sarge's working at the same time
04:17 - so now that we can create multiple
04:19 - storages let's deal with construction so
04:22 - here we're going to have a new class to
04:24 - deal with the building construction
04:26 - let's come with a construction area so
04:30 - for the visual let's just use a random
04:32 - Blue Square and add a new prefab so we
04:37 - have this prefab with a Blue Square and
04:40 - our script attached to it so onto our
04:42 - script
04:42 - we're going to set up the construction
04:44 - progress using ticks then the worker
04:47 - will increase the tech count and when
04:49 - the takeout goes about the tech
04:50 - contracts it won't be constructed so for
04:53 - that we're going to need some variables
04:55 - one for the current construction tick
04:57 - then one for the construction tekneqs
05:01 - then we're going to have a public void
05:04 - add construction tick and let's also do
05:08 - a public float get construction tick
05:12 - normal so in here we just increase the
05:17 - construction tick and on the normalize
05:22 - we simply return the construction tick
05:24 - divided by the construction take max now
05:27 - again these are two integers since we
05:29 - want to return a float between 0 and 1
05:31 - we have to convert it to one of these
05:33 - values into a float so we can simply
05:35 - multiply it by 1f and right now the
05:37 - result will be a float now we're going
05:39 - to make it so that when the construction
05:41 - tick is completed we trigger an action
05:44 - so let's also store a private action
05:46 - which is on the system namespace for the
05:50 - own construction
05:53 - and then here if the construction tic if
05:56 - it is bigger than the max then this has
05:59 - been fully constructed so we trigger
06:01 - that one and then we need to destroy
06:03 - this construction area okay so this is
06:06 - some pre simple logic now let's add a
06:08 - create function so we can spawn a
06:10 - construction area we're going to do very
06:12 - much the same thing that we did for the
06:14 - storage and here we're going to need
06:26 - more than just the positions so let's
06:27 - also receive a vector3 for the size of
06:30 - our construction area and end for the
06:33 - construction take max and finally the
06:36 - action for the own construction complete
06:38 - and on order to pass these values into
06:41 - our class let's have a public void setup
06:45 - function okay so here this first we have
06:55 - our public static create function which
06:57 - takes a position size construction tick
06:59 - marks and on construction complete we
07:01 - insensate the prefab we grab the
07:04 - component from the transform and we call
07:06 - the setup function and pass in these
07:08 - values then these values get set locally
07:11 - and then all we need to do is trigger
07:13 - this function and when it passes the
07:16 - tick max it won't trigger the unconcern
07:18 - complete all right so let's set up a
07:20 - simple test make sure that all this is
07:22 - working first here on the game handler
07:24 - we need another reference to the prefab
07:27 - okay so now down here let's create a
07:30 - construction area going to give it a
07:36 - size of let's say 5 5 then for a tick
07:39 - max and let's say 50 takes and since
07:42 - this is just for testing let's pass in a
07:44 - function and we're going to use the CM
07:47 - debug class again this part of the code
07:51 - monkey utilities that you can grab for
07:52 - free from unity code monkey comm so in
07:54 - the class we have a very nice text
07:56 - pop-up function which pops up and it's
07:59 - perfect for this testing okay so we have
08:03 - correctly set up our construction area
08:04 - now let's grab a
08:06 - reference to this object and now let's
08:09 - make a function periodic which again
08:10 - part of the code mock utilities and we
08:12 - are going to create it from trigger an
08:14 - action every 100 milliseconds so every
08:19 - 100 milliseconds we are going to add a
08:20 - construction tick to our construction
08:22 - area and supposedly after 50 ticks the
08:25 - construction area the prefab should be
08:27 - destroyed and we should see a pop-up
08:29 - here so let's see okay so there's our
08:32 - construction area now if we wait five
08:34 - seconds we should see yep there you go
08:36 - there's the pop-up and the construction
08:39 - area has been destroyed now in here
08:41 - let's also just add a very simple
08:42 - progress bar so we can actually view our
08:44 - progress
09:00 - okay so here is a progress bar using the
09:03 - world var class which is part of the
09:04 - code mock utilities and it's very simple
09:06 - to add a simple bar and when we add a
09:09 - new construction tick we set the bar
09:11 - size to the construction teknorg west
09:13 - okay so there's the bar and as you can
09:15 - see the progress in increasing when it
09:17 - reaches the end give there go ok great
09:19 - so we have everything we need to make
09:21 - this work so now all we need is for the
09:23 - worker to be the one that calls the add
09:25 - construction tick so back into our work
09:28 - class in here let's add a few more
09:30 - states so we are going to construction
09:34 - airy and building construction area ok
09:48 - so we have a function to set our
09:50 - construction area we set the member
09:51 - variable we set the state to be going to
09:53 - construction area and we tell them to
09:55 - move towards the construction area
09:56 - position so when we are moving let's do
10:02 - a simple business check if we are close
10:06 - enough then we set the state to be
10:08 - filming our construction area ok so when
10:20 - we are building our construction area we
10:22 - play the animation very much in the same
10:24 - way that we were gathering our resources
10:26 - when we finish playing the animation we
10:28 - trigger this action this action will add
10:30 - the construction tic then we check if
10:32 - our construction area is built if so we
10:34 - set it to no and we go back to our idle
10:36 - State if not then we keep building and
10:38 - building and building
10:39 - ok so all this code should be working
10:41 - now all we need is to figure out where
10:43 - we're going to call this function so on
10:45 - the game handler let's make a function
10:47 - to create a construction area so first
10:52 - we need to create the actual
10:54 - construction area object which is what
10:56 - we're doing in here and now in here on
11:01 - this action that is triggered on
11:03 - construction in here we can actually go
11:05 - into our building storage and create a
11:07 - new building storage so we create a
11:09 - construction area then the construction
11:11 - area deals with adding all
11:12 - the ticks then when it is all completed
11:15 - we instantiate a new storage so now we
11:17 - need this to actually tell the worker to
11:19 - go build this construction area so we
11:22 - grab the closest worker and then we tell
11:26 - the worker to set the construction area
11:28 - to this construction area ok so now we
11:31 - have the code to be able to instantiate
11:33 - a new storage construction area now we
11:36 - need to call this function so for that
11:38 - let's just quickly do it on our update
11:44 - so when we click on the left mouse
11:46 - button we are going to instantiate a new
11:48 - search construction area on the mouse
11:50 - warm position later we're going to
11:52 - create an actual UI to be able to come
11:54 - this from but for now this should work
11:56 - so let's see if all of this code is all
11:58 - working perfectly ok so here we are now
12:01 - if I click in here yep there's the
12:03 - construction area the worker winter now
12:05 - he's hammering away every time he
12:07 - hammers he can see that the tics
12:08 - increase and the progress is increasing
12:10 - and when it is fully done yep there's a
12:12 - new storage and yep he is now using the
12:14 - new storage figures there that one is
12:16 - closed so he's going back to that one
12:18 - and so on so we now have three different
12:21 - storages all of them working perfectly
12:23 - fine and every time we click we can
12:25 - instantiate a new one so there you have
12:27 - it we expand upon the ten-minute game by
12:29 - adding building construction which lets
12:31 - it expand our base in the next video
12:33 - we're going to give orders to our units
12:35 - as always you can download the project
12:37 - files in assemblies from Unity code
12:38 - monkey comm if you have any questions
12:40 - post them in the comments and I'll do my
12:41 - best
12:42 - answer them subscribe for more videos
12:43 - and I'll see you next time