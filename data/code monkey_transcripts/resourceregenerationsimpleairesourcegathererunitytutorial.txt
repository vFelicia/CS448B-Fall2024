00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're continuing our
00:03 - resource gatherer a I we're going to set
00:05 - up some simple resource regeneration
00:07 - let's begin
00:11 - so here's our scene I have two gathers
00:14 - in here I can select them and tell them
00:16 - to mine so I can tell this one to mine
00:18 - this girl note and I can tell this one
00:20 - to chop this tree so right now they grab
00:23 - the resource until the node is depleted
00:25 - then they look for another nearby node
00:26 - in the previous video we had multiple
00:29 - resource types but when looking for
00:31 - another resource node the gatherers are
00:32 - currently ignoring the time so if we
00:34 - gather is mining go on that no gets
00:36 - depleted and the next nearby one is a
00:38 - tree he won't switch to that that is
00:40 - probably not the behavior that we want
00:42 - to create so let's look at that so here
00:45 - in the editor I'm going to drag this one
00:47 - in there and I'm going to place a tree
00:49 - next to it okay so now I select this one
00:52 - tell him to gather wood from this tree
00:54 - he goes there he chops down the tree one
00:56 - two three the tree is now empty he drops
00:59 - in a storage and now he decided to go
01:01 - and mine some gold so right now they are
01:03 - gathering resources regardless of what
01:04 - the type you told them to mine maybe
01:07 - that's the Sarabande behavior in your
01:08 - game but in this case we want them to
01:10 - stick to the same resource time so
01:12 - that's actually quite simple to change
01:14 - let's go into our game handler in our
01:16 - code in here now down here we have a
01:19 - function to get the nearby resource node
01:21 - this one in here get resource node near
01:23 - the position it checks if the node is
01:26 - nearby this position within max distance
01:28 - okay and now in here we get a position
01:32 - and then we're going to get a game
01:33 - resource the resource ID for our
01:35 - resource type this is the one that we
01:37 - want to search so in here we are
01:39 - duplicating our original list which
01:41 - contains all of the resource nodes and
01:43 - we are removing the ones that do not
01:45 - have resources or are too far so in here
01:48 - let's just simply add another condition
01:49 - and test if the temp resource node list
01:53 - I if this resource node dot get resource
01:58 - type if it is different from the
02:00 - resource type that we want if it is
02:02 - different then we're simply going to
02:03 - ignore it so in here or too far or
02:06 - different resource type so in here we're
02:10 - ignoring it if it no longer has
02:12 - resources if it's too far or if it's not
02:16 - of the type that we want so let's update
02:18 - the static function as well and let's
02:22 - find the references for
02:24 - function and it's right here on the
02:26 - gather AI so we want to keep gathering
02:29 - the same resource type so let's send the
02:32 - resource ID that we're currently
02:33 - gathering so get resource type yep like
02:36 - that
02:36 - okay so let's test okay so I'm going to
02:39 - tell him to gather wood from this tree
02:41 - he goes there starts chopping down three
02:43 - one two three the tree is depleted and
02:46 - yep now he stopped since there are no
02:48 - more trees nearby that one
02:49 - let's test to make sure that the goal he
02:52 - still searches for the second one so
02:54 - tell him to go there he goes one two
02:57 - three all right goes to storage now he
02:59 - should go for that one yep exactly he's
03:02 - going for that one he's mining it one
03:04 - two three
03:05 - now vs origen yep he stopped okay great
03:08 - so the gather is now correctly looking
03:11 - for nearby resource nodes but only if
03:14 - they match the type that he was ordered
03:15 - to all right so that was a quick fix
03:17 - just to make sure that our AI is working
03:19 - exactly as we wanted to
03:20 - so now let's handle the resource
03:23 - regeneration so when note is depleted we
03:25 - wanted to regenerate after some time
03:27 - there are several ways we can do the
03:29 - regeneration we could set it to
03:31 - regenerate one unit for a short amount
03:33 - of time or start a timer and when the
03:36 - timer is depleted we fully regenerate
03:39 - that note let's go with a ladder
03:41 - behavior so here on the resource node
03:43 - script first we need to store the
03:46 - resource amount max so we know the total
03:48 - to revert back to so resource a lot max
03:50 - and here we set the max to three which
03:54 - is what we're setting previously and set
03:56 - it to be full okay now let's go down
03:59 - here and make a function we're going to
04:01 - make a private void reset resource
04:03 - amount and here we're simply going to
04:06 - set the resource amount to be resource
04:08 - amount max so appear when we're grabbing
04:12 - resources from this node when it is
04:14 - depleted so it is under zero so in here
04:17 - node is depleted so we are updating that
04:20 - sprite and after that let's add a timer
04:23 - to reset the resource amount so for that
04:25 - I'm going to use the function timer
04:27 - which is part of the code monkey
04:29 - utilities which as long as you can grab
04:31 - for free from Yenta
04:32 - calm and create a new function timer
04:36 - which will trigger the reset resource
04:38 - amount function and let's say after five
04:41 - seconds so this class creates an object
04:44 - which calls an action in triggers a
04:47 - function after a certain amount of time
04:48 - so after five seconds this function
04:51 - won't be caught and on the reset
04:53 - function let's also reset the sprite so
04:56 - let's make a function dedicated to that
04:58 - so a private void update sprite and in
05:02 - here we're going to test our resource
05:04 - amount so if resource amount if it is
05:07 - bigger than 0 then we have resources if
05:09 - not then the node is depleted though it
05:11 - is depleted or a peer node has resources
05:14 - so let's update it accordingly so in
05:17 - here this is what we're going to do and
05:19 - up here we're going to call update these
05:22 - price and when we reset the resource
05:25 - amount it's also update the sprite and
05:26 - in here let's use a different sprite in
05:29 - case we do have resources skews the goal
05:33 - note sprite and D tree node sprite ok so
05:37 - everything is looking good in here now
05:39 - let's go and test it out ok so let's
05:41 - grab them telling to gather that wood
05:43 - and this one go gather it some gold
05:45 - alright let's see so that one has been
05:48 - depleted and now that one has been
05:49 - depleted as well so let's wait five
05:51 - seconds yep that one was regenerated and
05:54 - that one as well now that is a pleadin
05:56 - the other one is depleted and so on as
05:58 - you can see that one is back to the room
05:59 - ok great so we now have our nose being
06:02 - fully regenerated after 5 seconds and as
06:05 - you can see in this gathering here he's
06:07 - consistently mining and mining again I
06:09 - can select him and now tell him to go
06:11 - mine dhawan which was previously
06:13 - depleted and again he's mining the
06:15 - plates and goes works perfectly ok great
06:18 - so we have no regeneration working
06:21 - perfectly fine on both times now just
06:23 - for fun let's try the other method of
06:26 - creating a constant regeneration so in
06:29 - here let's make another function and
06:31 - let's call it private void regenerate
06:34 - single resource amount and in here
06:37 - essentially we're going to regenerate
06:39 - but only by one amount so do a resource
06:42 - amount plus
06:43 - once and after we do obviously update
06:46 - the sprite but we have to make sure we
06:48 - don't go over the maximum so if it is
06:52 - less than the resource amount max then
06:54 - we're going to do this if not we're not
06:56 - going to do anything okay that's a very
06:58 - simple function now all we need to do is
07:01 - call this function every certain amount
07:02 - of time so on the constructor up here
07:05 - again we're going to use a helper class
07:07 - from the code monkey utilities we're
07:09 - going to create a function periodic
07:11 - which won't trigger the function down
07:15 - here they regenerate single resource
07:17 - amount and we're going to trigger it
07:19 - every in let's say 2 seconds now let's
07:22 - count out the previous regeneration
07:25 - logic ok and just for testing let's
07:28 - create a text updater so up here let's
07:31 - go into the CMD bug class and create a
07:34 - text updater the text updater will
07:38 - constantly print out the resource amount
07:41 - on vector 3.0 and on this transform pair
07:47 - okay great
07:49 - so we should be able to see a text
07:51 - object displaying the current resource
07:53 - amount so let's see if that goes down
07:54 - and up accordingly ok so we can now view
07:57 - how many resources each note has so
08:00 - let's some like this one time to go
08:01 - there and he goes and poof he grabs one
08:04 - that one goes down
08:05 - Down Goes Down and now as you can see
08:07 - it's going back up yep exactly and it
08:09 - doesn't go past the three so it goes
08:12 - down regenerates goes back up so let's
08:14 - do the same thing in here goes down and
08:16 - back up okay so just for fun I've
08:19 - increased their speed and their
08:20 - animation speed so we can see them very
08:22 - quickly yup there you go very quickly
08:24 - they go and they cut down the tree and
08:27 - the mine and so on and so forth and as
08:29 - you can see it goes down and it goes up
08:31 - every two seconds and they're mining and
08:34 - regenerate okay right now as you can see
08:36 - we got a minor issue in here sometimes
08:38 - if they mine as you can see it goes
08:40 - under negative that's because right now
08:42 - they are mining three resources
08:44 - regardless of whether or not the
08:45 - resource node has three so let's just
08:47 - very quickly fix that so on the gather a
08:50 - I down here so here we are going to
08:54 - storage if the inventory
08:56 - also lets Emily and you go to storage if
08:59 - the inventory is full or the resource
09:01 - node dot has resources or it no longer
09:04 - has resources so let's see that send
09:08 - them both to the same area they're
09:11 - mining and yep that one mine just two
09:15 - and went back that one mine too and one
09:17 - pack and yep they are no longer going
09:19 - into negative numbers so there you have
09:21 - it
09:22 - we added some very simple resource
09:23 - regeneration using two different methods
09:25 - and with our gatherers only look for
09:28 - resources of the same type in the next
09:30 - video we're going to take everything
09:32 - we've made so far and put it all
09:34 - together in a simple building
09:35 - construction if you have any questions
09:37 - post them in the comments and I'll do my
09:38 - best to answer them subscribe for more
09:40 - videos and I'll see you next time