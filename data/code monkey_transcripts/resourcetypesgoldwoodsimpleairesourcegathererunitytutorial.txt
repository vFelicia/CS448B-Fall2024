00:00 - hello and welcome I'm your code monkey
00:01 - and in this video we're continuing our
00:03 - resource gathering aai we're going to
00:05 - set up multiple resource types let's
00:08 - begin
00:11 - so we previously made our scene here we
00:13 - have two gathers I can click on either
00:16 - one to select them and when I have one
00:19 - gather selected I can click on note to
00:22 - tell more term on the gather won't go to
00:24 - that mind money take it to surgeon so
00:26 - what if there is a node nearby the one
00:28 - that he was or to mind here American
00:30 - Utley search for it goes there and mines
00:32 - but when there are no more he owes and
00:35 - reverts back to Anam okay great so
00:37 - everything is working so far but the
00:39 - resource type is currently hard-coded
00:41 - right now we can only support one
00:43 - resource type which in this case is gone
00:45 - so let's see what we need to do to
00:47 - support multiple resource types so let's
00:50 - go into our code now in our game
00:52 - resources class which represents our
00:54 - main resource Bank you can see that gold
00:56 - is hard-coded into every variable this
00:59 - is named gold going on and so on
01:00 - so let's begin by making an enumerator
01:04 - types so in here let's make a public in
01:07 - ohm and let's name it resource type an
01:11 - enum contains multiple specific values
01:14 - now we could define this in here or
01:16 - elsewhere in its own file for example
01:18 - but since a resource are part of the
01:21 - game resources it makes sense to put it
01:23 - in here to keep things nice and
01:24 - organized so let's begin by making gold
01:27 - and then let's also have wood alright so
01:30 - this in ohm is what we're going to use
01:31 - to differentiate between the various
01:33 - resource types now we could have an int
01:36 - for each resource type like we have for
01:38 - the golden here but in order to keep our
01:40 - code adaptable let's set up the resource
01:42 - amount using a dictionary so let's make
01:46 - a private static a dictionary now a
01:49 - dictionary contains a key and a value so
01:52 - for the key let's use resource type and
01:54 - for the value let's use an int and this
01:58 - will be a resource amount dictionary all
02:02 - right now we need a function to
02:04 - initialize our dictionary so let's do
02:07 - that now
02:08 - let's make a public static void init
02:11 - function this will be the basic
02:13 - initialization function for our game
02:15 - resources so in here and let's first
02:18 - make the dictionary so dictionary calls
02:21 - the new
02:22 - dictionary all right and now let's
02:24 - initialize all the keys and set them to
02:26 - zero so let's I don't throw all the keys
02:29 - in the dictionary and set them all to
02:31 - zero so let's do a for each resource
02:34 - time resource type in system dot and new
02:38 - get values of type of resource time so
02:46 - using get values we can cycle through
02:48 - all of the valid values of the resource
02:50 - type so if we add something else in here
02:51 - it will automatically side not throw it
02:53 - in here so when we're cycling through it
02:55 - let's just go to the dictionary and go
02:58 - to the key of our resource type and set
03:00 - it to zero all right so now let's remove
03:03 - the own integer since this is no longer
03:05 - needed but we're going to keep this
03:08 - implementation for now the cond amount
03:10 - and so on
03:11 - so in here instead of increasing the
03:13 - previous integer we're going to increase
03:15 - the dictionary resource type dot-com so
03:19 - let's do that
03:19 - and the same thing in here alright so as
03:23 - far as the outside world is concerned
03:24 - everything in this milestone works
03:26 - exactly the same it exposes this
03:28 - function and this function so everything
03:30 - internal changed but the outside is
03:32 - still correct so we can test to make
03:34 - sure that everything still works as
03:36 - previously with the way we have the
03:38 - setup we need to make sure that this
03:39 - function is called before anything
03:41 - happens now there are many ways to do
03:43 - that the simplest one is simply to go to
03:45 - the game Handler and before we do
03:47 - anything let's simply call the
03:49 - initialization on the game resources
03:51 - class all right just like that okay
03:54 - let's test all right so here's our scene
03:56 - so like the various and I can set to go
03:59 - there's have to go there they are mining
04:02 - mining and when they add to the storage
04:04 - yep it correctly works exactly the same
04:06 - as previously okay great
04:08 - so everything is still working but
04:10 - internally the game resources class is
04:11 - using a dictionary of resource types
04:13 - instead of a hard-coded int now let's
04:16 - change the functions and the event so
04:19 - back in our code here let's modify all
04:21 - of this if you're using visual studio
04:24 - you can easily rename something by
04:26 - hitting ctrl R R this won't
04:28 - automatically rename when
04:30 - this instance is used so in here we want
04:33 - to do on resource amount change rather
04:36 - than just in gone and the same thing in
04:38 - here so for this function lets you add
04:41 - resource amount and here get the
04:46 - resource amount okay again a quick test
04:50 - make sure everything works and yep there
04:53 - you go to someone's okay so now in these
04:55 - functions we need to know the resource
04:57 - type that we want to add so let's add a
04:59 - parameter for that so in here let's
05:01 - receive a resource type resource type
05:04 - for the amount add and I only get
05:06 - resource amount let's do the same thing
05:08 - and that resource type is obviously what
05:11 - we're going to use in our dictionary so
05:14 - now let's find where these functions are
05:16 - referenced if you're using Visual Studio
05:18 - you can right click and click on find
05:21 - all
05:21 - references and here we can see we got a
05:23 - reference in here and now it's red since
05:25 - we have to tell them what it is so in
05:27 - here we grabbing resource amount type
05:30 - don't and let's go back to the game
05:33 - resources and find the other reference
05:36 - for this one here is on our UI we have
05:39 - this reference which will also be using
05:41 - resource type comm all right so we
05:44 - change the name of our functions change
05:46 - their signature to support the resource
05:49 - type and modify it on the references so
05:51 - everything should still work so let's
05:53 - test yep there you go everything some
05:55 - words can select and tell them and so on
05:57 - ok great so now everything is still
06:00 - working exactly the same but we're one
06:01 - step closer to supporting multiple
06:03 - resource types so now let's go to the
06:06 - gathering I and up here as you can see
06:09 - we are also storing an integer for our
06:12 - gold inventory amount let's do the same
06:15 - thing we did on the game resource and
06:17 - create a dictionary to hold our resource
06:19 - time now let's make a private dictionary
06:23 - dictionary of game resources dog
06:26 - resource type and in this will be the
06:29 - inventory amount dictionary now let's
06:34 - instantiate it in here
06:44 - all right so we now have our dictionary
06:46 - being instantiated at zero now let's
06:50 - make a function for getting the total
06:51 - inventory amount let's make a private
06:54 - int to get total inventory amount and in
06:59 - here we're essentially going to
07:01 - calculate the nth total I'll start off
07:05 - at zero and then return the total now in
07:08 - order to calculate the total we're
07:09 - essentially going to do the same thing
07:11 - we did in here we're going to cycle
07:13 - through all of the possible resource
07:14 - types and increase the total by what is
07:18 - currently carrying of that time okay
07:20 - great on our inventory tax let's update
07:23 - with this so inventory amount let's
07:27 - store in here equals our total inventory
07:30 - amount and this is what we're going to
07:32 - test if it is better than zero then
07:34 - that's what we're going to this point
07:35 - okay so let's see where else we are
07:38 - using this integer so let's go down here
07:41 - and we are seeing if it is bigger than
07:42 - three which really means when the
07:44 - inventory is full so let's make that
07:47 - function make a private ball is
07:50 - inventory phone and in here we're going
07:54 - to return the get total inventory amount
07:57 - if it is bigger than three so now go
08:01 - down here and that's the function that
08:04 - we're going to use instead of using the
08:06 - integer okay great
08:07 - again down here we are using the integer
08:10 - and we grab a resource and for now let's
08:13 - keep grabbing just going resources but
08:16 - in here what's going to the inventory
08:18 - amount dictionary of the resource type
08:21 - dark gold and that's we're going to
08:23 - increase as previously okay and finally
08:27 - down here we need to reset the integers
08:29 - so let's make another function and we're
08:32 - going to call it drop inventory amount
08:35 - into game resources which one
08:39 - essentially called this line as well as
08:41 - resetting it back to zero so let's make
08:44 - that function so let's go up here on to
08:47 - our inventory code right there
08:49 - okay let's make a private toy drop them
08:52 - into the game resources and we're going
08:54 - to copy this line in here alright so
08:56 - let's go up there okay now in here what
09:01 - we want to do is again cycle through all
09:03 - of the possible types in our inventory
09:05 - and first things first we're going to
09:08 - add the resource amount to the game
09:11 - resources so in here the resource type
09:13 - we're going to add that based on the
09:16 - amount that we're currently carrying
09:18 - okay and after dropping it into the game
09:21 - resources let's reset the inventory
09:24 - amount back to zero all right so let's
09:27 - see if we still have any references to
09:29 - our total inventory and nope it's only
09:31 - in here so we can now remove this and
09:34 - see no errors are left all right great
09:37 - so we have successfully transition our
09:40 - gatherer from working with an integer to
09:42 - now working with a dictionary now let's
09:44 - test and everything should still be
09:46 - working yep there you go I can sum
09:49 - control them everything some compiles
09:51 - they some behind and everything some
09:52 - works you mind three drops three and yep
09:55 - there you go three six okay great so we
09:57 - now have the game resources supporting
09:59 - multiple resource types the gatherers
10:01 - also supported so the only thing left is
10:03 - the resource node itself so on the code
10:06 - for the resource node in here we have
10:09 - the constructor that we receive a
10:11 - transform so let's receive that
10:14 - transform but then also receive game
10:16 - resource or resource type of the
10:18 - resource type contained in this note so
10:21 - let's store it in here now on the grab
10:27 - resource let's return the resource type
10:29 - that has been grabbed so we're going to
10:31 - return a game resource to our resource
10:33 - type and we're going to return this
10:37 - nodes resource type yep exactly
10:40 - okay now let's also do a switch for
10:42 - changing the sprite renderer so in here
10:44 - if it is depleted do a switch on our
10:48 - resource type
10:52 - Caze gone then we do the same thing as
10:55 - previously and kaze wooden let's use a
10:59 - different sprites right here okay
11:04 - alright so we now have to modify
11:06 - together to make sure he grabs the
11:09 - resource type when he calls this
11:10 - function so let's go in here and here
11:13 - when we are grabbing this resource let's
11:15 - put this in a different function so
11:18 - let's go down here and make a private
11:20 - boy grabbed resource from node and in
11:26 - here this function we're going to call
11:28 - from up here after he finishes the
11:31 - mining animation and let's copy this and
11:35 - down here what we're going to do is grab
11:37 - the resource now that will return a game
11:40 - resources the resource type resource
11:43 - type that's what we've grabbed and
11:46 - that's what we're going to increase in
11:47 - our dictionary alright
11:49 - and after we do let's also update the
11:52 - inventory tax and that way we can go up
11:55 - here instead of doing all this we can
11:57 - just call this function when the
11:59 - animation is completed so this way we
12:02 - can easily do something else so in here
12:04 - we can make this switch on our resource
12:07 - node dot gets resource type won't make
12:11 - that function later and in here case
12:15 - game resources now resource type goal
12:18 - then you're going to play the mining
12:20 - animation if it is a wood resource type
12:25 - then play the animation wood chuck here
12:30 - is the resource node and here only to a
12:32 - Foley you're going to return game
12:35 - resources the resource type get the
12:37 - resource type and you're simply going to
12:39 - return this resource another resource
12:42 - type okay great so now the one thing
12:45 - missing is in here on our game handler
12:47 - so in here on let's instantiate a new
12:49 - resource node in this case this one is a
12:51 - gold node since it is on the goal node
12:53 - transform let's make another one for the
12:56 - tree no transform array let's I come
12:59 - through it and create them using the
13:02 - wood resource type
13:06 - all right so we now have almost
13:09 - everything correct as you can see the
13:11 - scene is still working okay great all
13:14 - right so now let's place a tree on our
13:15 - scene
13:16 - so let's duplicate the goal node I'm
13:19 - going to use this tree sprite in here
13:21 - okay great let's modify the box going
13:24 - either to be able to click roughly on
13:26 - the tree trunk all right like that let's
13:30 - go to the game Handler and drag the tree
13:32 - onto the tree no transform right all
13:34 - right and all it says and everything
13:37 - should be working with the tree so let's
13:39 - see all right so there he is he goes
13:41 - there and he starts chopping down the
13:44 - tree yep like that great all right so
13:46 - the only thing missing is in here as you
13:48 - can see he dropped but he gone did an
13:49 - update since that was not gone but
13:51 - rather that was wood so let's see that
13:53 - in here on the text on the UI and let's
13:57 - simply add wood underneath so just some
14:00 - very simple let's print the wood amount
14:03 - right underneath the gold amount let's
14:07 - put in here would grab the resources of
14:09 - type wood all right very simple and it
14:11 - should be correct all right here it is
14:14 - wooden gold ok great there's my gathers
14:17 - I can click on him and now if I click in
14:19 - there he goes he mines one two three
14:24 - the tree is now depleted he goes he
14:26 - drops in yep as he can see he dropped
14:27 - wood now if I click on this one tell him
14:29 - to go there and he's going to grab gold
14:32 - one two three he goes and yep there you
14:35 - go gone three wood three so there you
14:38 - have it we added support for multiple
14:40 - resource types we can now gather wood
14:42 - and gold but the code is set up in such
14:44 - a way that it would be very easy to add
14:46 - more resource types in the next video
14:48 - we're going to set up some very simple
14:50 - resource regeneration as long as you can
14:53 - download the project found the new
14:54 - tony's from unity code monkey calm if
14:57 - you have any questions post them in the
14:58 - comments and I'll do my best
14:59 - enter now subscribe for more videos and
15:01 - I'll see you next time