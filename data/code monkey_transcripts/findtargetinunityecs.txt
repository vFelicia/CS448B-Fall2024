00:00 - in this video we're going to see how we
00:01 - can find a target for each of our units
00:03 - in a pure ECS game in unity we're going
00:06 - to tag our entities and create systems
00:08 - for finding a target and moving towards
00:10 - it let's begin
00:14 - [Music]
00:18 - hello and welcome I'm your code monkey
00:21 - and this channel is all about helping
00:22 - you learn how to make your own games
00:24 - with enough tutorials made by a
00:25 - professional indie game developer so if
00:27 - you find the video helpful consider
00:29 - subscribing so one of the main benefits
00:31 - of ECS is getting massive performance so
00:34 - that makes it perfect for games with
00:36 - lots of Units like for example an art
00:37 - yes
00:38 - that means it's essential to have your
00:40 - units be able to look for targets so
00:42 - let's do that in our pure ECS game we're
00:45 - going to start off with entities with a
00:47 - simple unit texture and others with a
00:48 - target texture then we're going to see
00:51 - how we can tag each entity to identify
00:53 - its type using a simple component then
00:56 - make a system that won't only run on
00:58 - entities with that unit tag and look for
01:00 - entities with a target tag after that
01:03 - we're going to create a component to
01:04 - keep track of when the unit has a target
01:07 - and finally another system to move the
01:09 - unit towards the target in order to
01:11 - destroy it alright so those are the
01:13 - various steps we need to be able to do
01:14 - our system so let's get to it here is
01:17 - the starting point I just have a simple
01:19 - unit texture and a bunch of targets
01:21 - being randomly spawned we want them to
01:24 - locate the closest target and move
01:25 - towards it so let's see how this is set
01:28 - up here in the scene I simply have this
01:30 - game having our object so let's see this
01:32 - script here is the script where we're
01:34 - setting up all of our ECS code now if
01:37 - you're not familiar with ECS check out
01:39 - my getting started video which covers
01:40 - how ECS works and what all of this does
01:43 - check the link in the description so the
01:46 - first thing we do is get a reference to
01:47 - the entity manager then we have a
01:49 - function to spawn a unit and another one
01:52 - to spawn a target as you can see the
01:54 - components for the unit and a target are
01:56 - very similar we just have a translation
01:58 - for the position welcome to world and
02:00 - render manner to be able to see it and a
02:02 - scale in which the unit is larger than
02:04 - the turret so up here we're simply
02:06 - spawning a single unit and various
02:08 - targets all right so this is our
02:10 - starting set now the first thing we need
02:13 - in order to be able to find the closest
02:14 - target is to be able to identify which
02:17 - entities are units and which are targets
02:19 - as you can see right here they both have
02:21 - the exact same components so right now
02:23 - it's impossible to realize which one is
02:25 - a unit and which is a target so in order
02:28 - to identify them we're going to create
02:30 - simple
02:31 - that won't work as tax so down here we
02:34 - just need to make a strut let's call it
02:36 - unit and it implements I component data
02:39 - and it is completely empty so this empty
02:43 - component works as our unit tag then
02:46 - let's make another one for our target
02:49 - and that's it alright so now we can go
02:53 - up here and on our spawn unit function
02:56 - we're going to edit with the title unit
02:59 - component and down here on the target we
03:02 - add the typo target component so just
03:06 - like that we now have two different
03:08 - archetypes one that contains the unit
03:10 - tag and one with the target time this
03:12 - way we can now identify which entity is
03:14 - which so we can now run the code and
03:17 - here everything still looks the same we
03:19 - have random targets and our random unit
03:21 - but if we check on our analysis entity
03:24 - debugger here you can see we have two
03:27 - chunks one chunk that contains a unit
03:29 - tag and one that contains a target time
03:31 - as you can see in here we just have one
03:33 - unit and here we have ten turrets so
03:36 - just like that we have two specific
03:37 - types of entities now let's see how we
03:40 - can make a system in order to cycle
03:41 - through them so here let's make a new
03:44 - script
03:45 - this will be our finds target system now
03:49 - in here we get rid of model behavior
03:51 - since we are working in ECS instead
03:55 - we're going to extend a component system
04:01 - now here we have our on update function
04:04 - and it's in here that we need to cycle
04:06 - through all of our units and only our
04:08 - units this code is not meant to run on
04:10 - the turrets so for that we use the
04:12 - entities and now here we have the filter
04:16 - let's have the filter with all meaning
04:18 - it'll only select the entities with all
04:21 - of these components so in here recently
04:22 - class in the unit tag component and then
04:26 - we do it for each so this for each
04:29 - action will only run on entities that
04:32 - contain the unit component now in here
04:34 - let's use the delegate that receives a
04:36 - parameter for the entity
04:41 - so here we have our code running on all
04:44 - entities with the unit tank now here's
04:46 - just make sure that it is working
04:48 - correctly let's just do a simple debug
04:50 - log and pass in the entity okay so let's
04:53 - see and we should be able to see only
04:55 - one entity being display any up here in
04:57 - the console you can see only one entity
04:59 - is running that code okay awesome
05:01 - now just for testing to make sure this
05:03 - is all working right let's spawn another
05:05 - entity so in here instead of just one
05:07 - let's want to let's see and if there you
05:10 - go our code is now running on entity 0
05:12 - and entity 1 and if we go into the empty
05:15 - debugger you can see that the 0 and 1
05:16 - are indeed our units so 0 and 1 are
05:19 - units and the 2 is a target okay awesome
05:21 - so we now have this system running only
05:23 - on specific entities and we're
05:25 - specifying those entities using the unit
05:27 - tag component so now in here let's see
05:30 - how we can cycle through all the targets
05:31 - and in order to do it it's actually
05:33 - quite simple we just go here inside our
05:36 - 4-inch and we do another 4 inch so again
05:40 - we grab the entities and in this case we
05:42 - want with all of the target tag and we
05:47 - do for each on that
05:53 - so here we have code cycling through all
05:56 - the entities with a target time again or
05:59 - to verify this is working correctly and
06:01 - let's do another log on our target
06:04 - entity any of you can see our code is
06:07 - cycling through each unit and through
06:10 - each unit that goes through each target
06:11 - okay so we have pretty much all of our
06:14 - cycling logic working now all we need to
06:16 - do is to calculate which one is closed
06:19 - so let's go into our system and now in
06:22 - order to get the closest that means we
06:24 - need the position for both the target
06:25 - and the unit so up here let's have a
06:28 - reference the translation component and
06:32 - down here also and now we need is to
06:38 - find which one is our closest target so
06:41 - for sirs let's define an entity variable
06:44 - to hold our closest target entity now by
06:49 - default entity is a struct so we cannot
06:51 - simply add no instead we need to add
06:53 - entity dot know then here when we're
06:56 - cycling through our targets for the
06:59 - first one is very simple if the closest
07:01 - target entity
07:02 - equals entity known then we have no
07:05 - target so we said we call this target
07:09 - entity to this target entity and if not
07:12 - then we need to calculate which one is
07:14 - closest so here we do a if math and do a
07:17 - distance between the unit translation
07:19 - value so this is the current unit
07:21 - position and the target translation dot
07:24 - value now in order to get this distance
07:26 - we cannot use the reference inside
07:28 - another cycle so we need to go here and
07:31 - store a foe 3 for the unit position
07:34 - which will be the unit translation value
07:39 - okay now we want to make sure that this
07:42 - distance is closer than the one that is
07:44 - already closest
07:45 - however in here we only have an entity
07:48 - so we also need to store a or three or
07:51 - the closest target position and here
07:57 - when you set we also set the target
08:00 - translation that value okay then here we
08:02 - check that so if this current target is
08:07 - closer than the closest target and this
08:09 - one becomes a new closet and that's it
08:15 - this is our logic for finding the
08:16 - closest target using peer ECS so down
08:20 - here after the cycle we have our closest
08:23 - target now let's have a visual debug
08:26 - line in order to be able to see it so we
08:28 - do if the closest target if it is not
08:32 - known then let's wait the bug dot draw a
08:38 - line between the unit position towards
08:44 - equals this target position all right so
08:49 - let's see and see for unit is indeed
08:51 - pointing towards eco cistern and he
08:54 - appears our unit and five random targets
08:56 - in E as you can see it is correctly and
08:57 - find out as it closes let's reset the
08:59 - scene and try again any of there that
09:03 - one is the closest and that one is list
09:06 - okay awesome so we have successfully
09:08 - written a system that looks for targets
09:10 - closes to eighth unit now we need to
09:12 - think about how we're going to set the
09:14 - target on that unit now in normal
09:16 - object-oriented code you would have a
09:18 - unit class which would have a field to
09:20 - hold the current target so in ECS your
09:23 - first approach might be to store the
09:25 - active target in the unit component
09:26 - however in this case and we are using
09:28 - this as a simple tag that is probably
09:31 - not the best way to do it so let's go
09:33 - with a different approach which is we're
09:35 - going to have a component to home that
09:37 - target so when the unit finds a target
09:39 - it adds that component and when the
09:41 - target is destroyed it removes that
09:43 - component so let's see how we can do
09:45 - that in here we simply create a new
09:47 - struct let's call it as
09:50 - yet and we also have I component data in
09:54 - this case we're going to add a field and
09:56 - the field will be a public entity for
09:58 - our target entity okay so we now have a
10:03 - specific component that we're going to
10:05 - add to our units when they find a target
10:06 - it's now here when we have our code
10:08 - looking for a target and we find our
10:10 - target and here we have the hash target
10:13 - component so in order to do that we use
10:15 - the post update commands this is an
10:18 - entity command buffer in order to add a
10:21 - component into our entity we're it add a
10:28 - new component of our hands target and
10:31 - we're going to fasten the target entity
10:32 - as our causes target entity so when the
10:37 - update finishes this code will run which
10:39 - will have this component to this entity
10:40 - so that way our norm only unit component
10:43 - still works perfectly like a tag and our
10:45 - targeting data is held in a different
10:47 - component so now for example instead of
10:50 - doing our debug drawn line here we can
10:52 - do it on a separate system so let's make
10:55 - here a simple debug system so we just
10:57 - make let's comet has target debug and we
11:01 - implemented component system and here we
11:08 - just cycle through all entities that
11:10 - have the has target component in here we
11:18 - do our debug dot draw a line between the
11:22 - entity position and towards the target
11:25 - position now in here we need to get the
11:27 - position for the target so we need to go
11:30 - and grab the entity manager in order to
11:33 - get component data and here we can pass
11:36 - in our target entity so has target dot
11:39 - find the target entity in order to get
11:43 - the translation component
11:46 - so you grab the translation for the
11:48 - target then we use that to draw our what
11:51 - so this is how you get component data
11:53 - for a specific entity so you have our
11:56 - target entity stored in our component
11:58 - then we have our has target debug
12:00 - component system in order to simply draw
12:03 - a line between the entity and its target
12:05 - okay so let's test and here we have a
12:08 - quick error because we're adding the has
12:10 - target multiple times that same empty so
12:12 - let's see why that is here it is on our
12:15 - fine target system essentially we're
12:16 - running this on every unit and if we do
12:19 - find a call to start we add a new has
12:21 - surrogate component so the simple
12:23 - solution is to make sure that this fine
12:24 - target system only runs on units that do
12:27 - not have a target so we can use a
12:28 - different filter in here we can use the
12:31 - with none of time has target so this
12:37 - code will normally run on entities that
12:39 - contain the unit component the
12:41 - translation component and no has target
12:44 - component so as soon as we have a house
12:46 - target the next time the update comes it
12:48 - will not run this code so again we cycle
12:51 - through our targets grab the closest at
12:53 - the hands target component the hazard
12:55 - component contains a field for the
12:57 - target entity and then we have our debug
12:59 - component which won't simply do a debug
13:01 - drawn so now let's see and we should be
13:04 - able to see online pointing to the
13:05 - closest target and if there does the
13:08 - unit is correctly locating the closest
13:10 - target and if we go into the entity
13:12 - debugger here you can see our unit
13:15 - entity there you go there's the unit a
13:17 - component and it also has the highest
13:18 - rated component which has a target
13:20 - entity all right so everything is
13:23 - working we have our unit finding targets
13:25 - now let's go back into the code and make
13:28 - another system in order to move our unit
13:29 - towards the target and destroy it so for
13:32 - that let's create a new system this will
13:35 - be our unit move to target system and in
13:40 - here
13:46 - here we do a cycle entities for each and
13:52 - we're only going to cycle through
13:53 - entities that have the highest high
13:55 - rated component now here we're going to
13:59 - do very much the same thing that we were
14:01 - doing here on our debug we need to get
14:04 - the target component and then we move
14:12 - our entity towards the target so that
14:14 - means we also need to get a reference to
14:16 - the translation component we simply move
14:27 - our translation towards the target
14:29 - Direction multiplied by a move speed
14:33 - multiplied by time Delta time all right
14:36 - so we have our unit moving towards the
14:38 - target then let's check the distance if
14:43 - we are within a certain distance then we
14:49 - want to destroy our turret so for that
14:51 - again use the post update commands in
14:54 - order to destroy the entity we're going
14:57 - to destroy the has target our target
14:59 - entity and then we're also going to do
15:02 - another post update command in order to
15:04 - remove a component from this entity so
15:07 - here we need a reference remove the
15:12 - component from the unit entity of type
15:14 - of as target all right so that's pretty
15:19 - much it so when you cycle through every
15:22 - entity that contains a has target
15:24 - component since it has the house target
15:26 - that one has a target entity so we grab
15:29 - the translation from the target entity
15:31 - we calculate Direction define a move
15:33 - speed move the unit towards the target
15:36 - then we check the distance and if it's
15:38 - close enough we destroy the target
15:40 - entity and then destroy the he has
15:42 - target component all right so as you can
15:44 - see our logic is very nice and easy to
15:46 - follow so let see so here he is moving
15:50 - he finds that one gets close destroys
15:52 - gets close destroys finds the next
15:53 - closest keeps moving towards it as
15:56 - gets close destroys and moves to the
15:57 - next one right awesome
15:59 - so as you can see we have our unit
16:01 - finding their targets and moving towards
16:03 - that target the target gets destroyed
16:05 - when he gets near and everything is
16:07 - working great so here you see a simple
16:10 - example of how to organize your code
16:12 - using a pure ECS system so you have tags
16:15 - for the unit and our target we have a
16:18 - component to keep track of which units
16:20 - have a target then we have a system
16:22 - which runs through all those units
16:24 - without a target and finds a target and
16:26 - we have another system which only runs
16:28 - on units that already have a target and
16:30 - moves in towards that target it's now
16:32 - let's try this out with a bunch of units
16:34 - and also a target spawner so let's go up
16:37 - here and spawn a bunch of units
16:40 - let's also spawn some targets every once
16:42 - in a while so we have a simple timer
16:50 - running every 100 milliseconds spawning
16:52 - ten targets let's see and just like that
16:56 - with multiple units finding multiple
16:58 - targets we find an error right away and
17:00 - the error is the entity does not exist
17:02 - now the error in this case as you can
17:05 - see only happen when we spawn multiple
17:06 - units and the reason is because we have
17:09 - two or more units going towards the
17:11 - exact same target so we have this system
17:14 - running on multiple units and the thing
17:16 - is when the first unit reaches its
17:18 - target it destroys a target entity
17:20 - however the second unit is still going
17:23 - for that same target however that entity
17:25 - has now been destroyed so here we need
17:27 - to make sure that we check if the target
17:30 - still exists before we move towards it
17:32 - so that's quite simple we just go here
17:34 - and we go into the entity manager and we
17:39 - can simply test if a certain entity
17:41 - exists so in this case our has target
17:43 - target empty if it does exist then we do
17:47 - all this okay and if not then we want to
17:51 - remove the unit has target from this
17:53 - unit okay
17:57 - that should fix our error let's see and
17:59 - yep now we have a bunch of targets being
18:01 - spawned and our units constantly moving
18:04 - towards the closest target so they are
18:06 - all independently
18:07 - around looking for the target causes to
18:10 - them as soon as he found the target they
18:11 - moved towards it and they destroy that
18:13 - target so we have each entity working
18:16 - independently so here you have learned
18:18 - how to tag entities in order to identify
18:20 - them make a system to cycle through all
18:22 - the entities that you want create a
18:25 - specific component to handle target data
18:27 - and another system to handle units that
18:29 - do have a target now in here all we used
18:32 - was pure is yes and only is yes I did it
18:35 - that way just keep the video easy to
18:36 - follow and understand how to cycle
18:38 - through entities so that's why I'm here
18:40 - in order to find the target we're
18:41 - cycling through all the entities and
18:43 - then through all the targets as you see
18:45 - this works however in order to get the
18:47 - most benefits we should use the complete
18:49 - dot stack stack so that means that now
18:51 - that we have on this code working we
18:53 - should Java fire our systems in order to
18:55 - benefit from massive performance so that
18:58 - we can have multiple units looking for
19:00 - targets at the same time so stay tuned
19:02 - for the next video we're going to do
19:04 - just that as always you can download the
19:06 - project fountain attorneys from unity
19:08 - code monkey com if you liked the video
19:10 - subscribe to the channel for more unity
19:12 - tutorials post any questions you have in
19:14 - the comments and I'll do my best
19:15 - enzmann alright see you next time