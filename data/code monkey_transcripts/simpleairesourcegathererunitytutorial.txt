00:00 - hello and welcome I'm your code monkey
00:01 - and in this video we're going to create
00:03 - a simple resource gatherer ai let's get
00:05 - sir
00:08 - so here's my scene I have a unit in here
00:12 - a gaunt node here and a storage area
00:14 - here the goal is for the unit to go
00:16 - towards the goal node play an animation
00:18 - carry the gone to the storage and drop
00:20 - it so let's go and see the code that I
00:22 - already have in here I have a basic game
00:25 - hammer script it's not doing anything
00:27 - it's completely empty and I have a unit
00:29 - interface which contains all the
00:31 - functions necessary to implement our AI
00:33 - as you can see I can tell the unit to
00:35 - move to a certain position I can tell it
00:37 - to play the mining animation and I can
00:39 - test if the unit is idle
00:41 - so let's make our gather AI script and
00:44 - our scripts folder make a new c-sharp
00:46 - script and name it together-er-er AI so
00:49 - in here let's start off simple we're
00:51 - going to add some fields to store the
00:52 - gold node and storage transform so let's
00:55 - make a serialized film private transform
01:00 - for the gold node transform and make
01:04 - another one for the e storage transform
01:06 - on our private void awake let's first
01:10 - grab the reference to our unit so let's
01:12 - go here make a private eye unit unit
01:16 - this is the interface that contains the
01:18 - functions we need so the unit is on the
01:21 - game object docket component of a unit
01:24 - this game object contains a component
01:27 - which implements this interface so now
01:29 - that we have a reference to the unit
01:31 - interface to the goal node transform and
01:33 - storage transform let's make some very
01:35 - basic AI we're going to first go into
01:39 - our unit and move them towards our don't
01:42 - know transform dot position going to
01:44 - stop within ten units and when he
01:47 - arrives there he's going to execute an
01:50 - action that action is going to trigger
01:53 - when he arrives at the corner transform
01:55 - so the action we want is to play the
01:57 - mining animation is going to play the
02:00 - animation looking at the goal node
02:02 - transform dot position and when the
02:04 - animation is completed it's going to
02:06 - trigger this action and
02:08 - action will move the unit towards our
02:10 - storage transform dot position okay so
02:15 - we are moving our unit towards the goal
02:17 - node transform when we get there we
02:19 - trigger this action which plays the
02:21 - mining animation when the mining
02:23 - animation is completed it triggers this
02:25 - action and in this action he's going to
02:28 - move towards the storage transform
02:29 - position and when he gets there he's not
02:31 - going to do anything else so let's see
02:33 - if all of that is working correctly
02:34 - first I'm going to go into my unit and
02:37 - add the gatherer AI this script up here
02:40 - is the script which implements our
02:41 - interface and let's drag the storage
02:44 - transform in here and the go note
02:46 - transform okay what's this okay there he
02:49 - is
02:49 - goes towards the mind plays the
02:51 - animation and moves towards the storage
02:53 - okay great so that's the core of the
02:56 - behavior that we want to create so now
02:58 - let's make together and more adaptable
03:00 - so let's first go into our script here
03:02 - and instead of having the goal node and
03:04 - source transform in here I'm going to
03:06 - remove it from here and place it on the
03:08 - game hammer so the gallery I by itself
03:11 - will not have those references instead
03:13 - together will ask for those references
03:16 - when he needs it we're going to have the
03:18 - private in-home for our state and a
03:22 - private state to store our current state
03:24 - now for all developed states that this
03:27 - AI can be in let's say it's I don't
03:29 - moving to resource node gathering
03:34 - resources and moving to storage by
03:38 - default on awake we start at state title
03:43 - let's comment out this code so on the
03:47 - private void update we're going to do a
03:50 - switch on our state and execute
03:53 - different logic depending on the state
03:54 - so first of all k-state title on either
03:58 - let's look for a nearby resource node in
04:01 - order to do that we're going to ask the
04:03 - game handler to give us the closest
04:04 - resource so it's first going to our game
04:07 - Handler and here we want to make a
04:09 - function to return the closest resources
04:11 - syn here we're going to do a public
04:13 - transform gift
04:14 - resource no and this is simply going to
04:18 - return our goal No transform now in
04:21 - order to make things easier and let's
04:23 - make this static so we can access this
04:25 - function using the class name so let's
04:28 - go up here make a private static game
04:30 - handler for the instance on our awake
04:34 - let's set the instance let's make this
04:37 - private and make a public static
04:40 - transform gift resource no static and
04:43 - this will go into the instance and
04:46 - return get resource no all right so we
04:50 - can access this function which will
04:52 - return our goal node transform so this
04:54 - function is what we're going to call in
04:56 - here going to go into game handler dot
04:59 - get resource node let's store it as a
05:01 - member variable so go here private
05:03 - transform resource know transform and
05:07 - that's what we're going to store after
05:10 - we store the resource node let's set the
05:12 - state to state dot moving to resource
05:15 - node and down here case state dot moving
05:19 - to resource node
05:20 - let's first test if our unit is idle so
05:24 - if the unit dot is idle then let's move
05:27 - in towards the resource node
05:28 - unit dot move to our resource node
05:32 - transform dot position
05:34 - let's stop within ten units and when you
05:37 - were right there let's set the state to
05:41 - state dot gathering resources okay so
05:44 - now I stay start gathering resources if
05:48 - the unit dot is item we want to do unit
05:54 - dot play animation to mine going to load
05:57 - towards our resource node transform dot
05:59 - position and when the animation is
06:02 - complete let's increase a variable to
06:06 - store the gold amount that this unit is
06:08 - carrying so let's do cone inventory
06:12 - amount plus plus and that's what we're
06:15 - going to store up here so private int on
06:18 - the inventory amount so in here after we
06:21 - test for item if the gold inventory
06:24 - amount is bigger than zero then we're on
06:26 - carrying something so in here we're
06:28 - going to move to storage if not if this
06:32 - is the first time when we are carrying
06:33 - zero then let's gather resources so in
06:38 - here again we are going to request the
06:40 - game handler to give us the storage
06:42 - position so we're going to have a
06:44 - transform for the storage transform and
06:47 - we're going to go into game Handler and
06:48 - we need to create a function called get
06:51 - storage static let's make that now go
06:55 - down here and make a public static
07:00 - transform gets or static and we're going
07:03 - to return instance up get storage and
07:05 - let's go up here make a private
07:08 - transform get storage and we're simply
07:11 - going to return the storage transform
07:13 - alright so in our gathering I'm let's
07:16 - set the state equals state dot moving to
07:19 - storage and when moving to Serge we're
07:22 - going to do something similar to in here
07:24 - instead of moving towards the resource
07:26 - node we move toward a storage and when
07:27 - we get there we reset back to idle this
07:30 - is move to storage and let's store the
07:32 - storage transform up here and of course
07:37 - when we arrive we also set the gold
07:39 - inventory amount to zero all right so
07:42 - let's see how our logic is set up so the
07:45 - gatherer first starts off at idle when
07:47 - he's I don't he searches for a nearby
07:49 - resource node he asked the game handler
07:51 - to give him that
07:52 - when he gets a resource he sets the
07:54 - state to moving towards that resource
07:56 - if the unit is idle he's gonna move
07:58 - towards that resource node when he gets
08:00 - there he's gonna swap the state to
08:01 - gathering resources if he's in state
08:04 - gathering resources first he does if
08:06 - he's I don't if he already has gold in
08:09 - his inventory then he's gonna move to
08:11 - the storage if not he's gonna play an
08:13 - animation when the animation is complete
08:15 - he's gonna increase the gold inventory
08:18 - amount which on the next update he's
08:20 - gonna run the same thing and move
08:21 - towards the storage and moving towards
08:23 - the storage he tests if his idle he
08:25 - moves towards that storage position when
08:26 - he gets there he resets the gold
08:28 - inventory amount and resets the state
08:30 - back to I don't starting the whole thing
08:32 - over again
08:32 - so let's he found that is working there
08:35 - he is
08:36 - goes to the goal node mines it goes
08:38 - towards the storage
08:39 - drops it and again goes back to the node
08:42 - mines it drops it and so on okay great
08:44 - so we have a simple resource gatherer a
08:47 - I let's do a quick test with multiple
08:49 - resource nodes to see if the code is
08:50 - working with any resource node we give
08:52 - it let's make two more gold nodes put
08:55 - one in here and one in here let's add
08:59 - references in our game handler so all
09:03 - new two and three and on the get
09:06 - resource node and let's return a random
09:08 - one so let's make put them all in a list
09:11 - and return a random one all right so
09:23 - let's see if he's going to all the nodes
09:24 - okay he's going to that one mines it
09:27 - goes to storage okay he's going to
09:29 - another one and yep it's working so
09:32 - there you have it we created some basic
09:34 - area structure for a resource gatherer
09:36 - in the next video we're going to keep
09:38 - track of our resource amounts if you
09:40 - have any questions post them in the
09:41 - comments and I'll do my best to answer
09:42 - them subscribe for more videos and I'll
09:44 - see you next time