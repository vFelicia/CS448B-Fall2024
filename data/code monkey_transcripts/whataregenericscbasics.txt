00:00 - in this video we're going to learn about
00:01 - generics in c-sharp this is an extremely
00:04 - powerful feature so you can build a
00:05 - specific class and make it work with any
00:07 - time for example I use generics
00:09 - extensively when making the grid system
00:11 - so that each grid position can hold
00:13 - whatever custom data you want let's
00:15 - begin
00:18 - [Music]
00:23 - hello and welcome I'm your code monkey
00:25 - and this channel is all about helping
00:26 - you learn how to make your own games
00:28 - with NF tutorials made by a professional
00:30 - indie game developer so if you find the
00:32 - video helpful consider subscribing so
00:34 - generics are a great feature of c-sharp
00:36 - in order to help you write more generic
00:38 - code that can be used in many scenarios
00:40 - what they allow you to do is write your
00:42 - class or functions in a way that you
00:44 - don't specifically define any particular
00:46 - type so then when you use that class or
00:49 - function you can pass in what type you
00:51 - want it to work with you can define an
00:52 - entire class or interface as a generic
00:55 - or just a single method or delegate now
00:58 - you might have never heard the word
00:59 - generics but if you've written some code
01:01 - then chances are you've used them if
01:03 - you've ever used a list then you've
01:05 - probably used a generic we need the
01:07 - finalists you also defined it to the
01:09 - type of elements that will go inside of
01:10 - that list that's the generic parameter
01:13 - you can make a list of any type you want
01:15 - another example is when I made the grid
01:18 - system in a previous video I also made
01:20 - it work with generics meaning that that
01:22 - system can hold whatever type you want
01:24 - in each word position yet another
01:26 - example is the video where I covered
01:28 - handling events in unity dots in the end
01:31 - I showed a nice class I built which uses
01:33 - generics in order to be usable in any
01:35 - scenario so first you define the event
01:38 - component with on with the data that you
01:39 - need and you pass that in as the generic
01:41 - type by doing so you can use the same
01:43 - generic class while having it be
01:45 - customized to the particular event
01:47 - you're trying to capture this video is
01:49 - made possible thanks to these awesome
01:50 - supporters go to patreon.com/scishow to
01:53 - code monkey to get some perks and help
01:55 - keep the videos free for everyone all
01:57 - right so let's look at how generics work
01:59 - okay here we are in an empty script
02:02 - let's start off simple and just make a
02:04 - function so we're going to make a
02:06 - function that takes two elements and
02:08 - simply returns an array containing those
02:10 - elements so when it's right now so we
02:12 - make it private and now for the return
02:15 - type let's make it return an int array
02:16 - and we're going to receive an int for
02:20 - the first element and also an end for
02:22 - the second element and inside all we're
02:26 - going to do is return a new int array
02:28 - holding both of our elements here it is
02:32 - very basic and now up here we can call
02:35 - our create the write function
02:37 - and we pass in our two nice ends all
02:49 - right so here des is very basic
02:51 - let's test any of there we have our log
02:54 - so we have two almonds first five and
02:56 - then the six okay
02:57 - so here we wrote this function in order
02:59 - to solve a specific problem and it works
03:01 - great however now let's say that we need
03:03 - to solve the exact same problem but this
03:05 - time we wanted to use strengths so
03:08 - naturally we cannot do create array and
03:10 - then pass in a string and then another
03:12 - string here obviously we have errors so
03:17 - what we can do is duplicate our code and
03:19 - make another function but this one that
03:21 - works with strings so just like that now
03:26 - this would work but you can already see
03:28 - the issue if we keep doing this then
03:29 - eventually we're going to need to make a
03:31 - new function every time we want to use
03:32 - it on a different time so this is where
03:35 - generics come in with generics we can
03:37 - write the function just once and make it
03:39 - work on any type so let's remove this
03:42 - one and now on this create array
03:43 - function instead of hard-coding the int
03:46 - type what we're going to do is after the
03:49 - function name we open and close using
03:51 - the greater and less than symbols and
03:53 - now inside we write the name of our
03:55 - generic type usually the standard is
03:57 - just right T what we're saying is that
03:59 - when we call this function we're going
04:02 - to pass in the type and that type won't
04:03 - be used wherever T is used so in our
04:06 - return type instead of returning an
04:08 - array of n so we're going to return an
04:10 - array of T and the first element will be
04:13 - F type T and the second element also of
04:15 - type T so instead of working with n so
04:17 - now we're working with this generic type
04:19 - and now up here on our function we're
04:21 - going to call and we're going to pass in
04:23 - the type in this case it's an int and
04:25 - over here we passing it with a string
04:28 - and just like that now this is working
04:31 - exactly the same as previously so we can
04:33 - add some logs just to verify
04:40 - any appeared is the first rays are
04:43 - working correctly and you can see that
04:45 - it's of type in 32 array and the second
04:48 - one using the same function is a type
04:50 - string array so now we have just one
04:52 - function declaration and we're making it
04:54 - work with two different types and also
04:56 - here the compiler is smart enough to
04:57 - know to infer the type so for example
05:00 - here we can actually omit the type
05:02 - definition and there you he's smart
05:04 - enough in order to understand that this
05:06 - is working with intz and over here we
05:08 - remove this and we can see that indeed
05:10 - it's smart enough to see that it's
05:11 - working with strings so now here if i
05:19 - say that i want to create an array and
05:20 - use the generic of type int then i pass
05:23 - in a 5 for the first parameter and then
05:25 - a string on the second parameter over
05:28 - here yep you can see that we have a nice
05:30 - error so it's telling us that the type
05:32 - does not match we cannot implicitly
05:34 - convert string onto an INT since this
05:36 - function is now expecting an int for the
05:38 - second element so by using generics
05:40 - instead of hard-coding our type into our
05:42 - function we made it work with any type
05:44 - now instead of having just one version
05:46 - to work when ends then one with floats
05:48 - on its strings and so on all we need is
05:50 - just this one and it works in all
05:51 - scenarios now one note here the standard
05:54 - is to use the name t for your generic
05:56 - type but this can really be any name you
05:58 - want so you could for example say my
06:00 - custom name and just like this here we
06:05 - have valid code that does exactly the
06:07 - same thing but normally you should
06:09 - really stick with the standard and if
06:11 - you want a more custom name than just T
06:13 - you can at least make it start with T so
06:15 - for example T my custom type now what
06:19 - you can do is also define multiple
06:21 - generic types so you do t1 then a comma
06:25 - then t2 and as many as you want
06:31 - so here we're defining two different
06:34 - types then one film receiving of time t1
06:36 - and one field are receiving of time t2
06:38 - so we can test that up here test multi
06:41 - generics let's say that the first one is
06:43 - an INT and the second one is a string so
06:48 - yep just like that any of everything
06:50 - works the first element is of type in 32
06:52 - and the second one is a string now one
06:54 - use case of generics that you've seen me
06:56 - use before and that I covered in the
06:58 - delegates video is the action and func
07:00 - delegates so they are inside using
07:03 - system and you have a action and you
07:12 - have a pump now we can inspect the
07:16 - definition so you can see that the
07:18 - normal action is just a basic time we
07:20 - get with no parameters however over here
07:22 - you can see that you have a whole bunch
07:24 - of versions that use a lot of different
07:26 - generics so here is one example of an
07:28 - action that takes two different types of
07:30 - two different parameters and you can see
07:33 - that you have versions with tons of
07:34 - parameters and again you can see that
07:37 - they match the standard naming
07:38 - convention of t1 t2 t3 and so on now the
07:41 - other one is over here the func and you
07:44 - can see that it takes at least one time
07:46 - for the parameter which is the result so
07:48 - if we inspect we can see that it's a
07:49 - delegate which returns T result which is
07:52 - the type that we define it in here then
07:54 - again we have tons more versions that
07:56 - define the number of parameters and the
07:58 - type of our result so you see that you
08:02 - can also use your nards when working
08:03 - with delegates which is what these two
08:05 - are doing so you can make your own
08:08 - delegates and make it work with 81 and
08:13 - 82 just like that so over here we have
08:19 - the fine exactly the same thing that we
08:21 - have in our action and then the func
08:23 - over here is pretty much the same as
08:25 - this
08:30 - just like this so we define a type of
08:32 - tea result that's what we return and
08:35 - then a t14 our single parameter if you
08:37 - want to learn more about delegates check
08:39 - the video and linked in the description
08:40 - so over here we already covered using
08:42 - generics with functions and with
08:44 - delegates now we can also use them when
08:46 - writing an entire class so in here we
08:49 - can make my class and again we define a
08:53 - generic so we're defining the class I
08:56 - make me work with a generic type and now
08:59 - here we can use that type anywhere in
09:01 - our toys for example of type T and let's
09:03 - call it Val so now up here we can create
09:07 - an instance of myclass let's say we want
09:11 - to home intz we're making you my class
09:15 - and then if we access my class and try
09:18 - to see our family field and yep you can
09:20 - see that it doesn't need have a field in
09:22 - this case of type int and now within our
09:25 - class we can use the type T on any
09:27 - functions or fields or anything we want
09:29 - so for example we can use this exact
09:32 - same function that we used up here and
09:34 - now on this function we do not need to
09:36 - define the generic by default it already
09:39 - knows that the T is going to be the T
09:40 - that is defined when we instantiate the
09:42 - class now another thing we can do is
09:45 - also add constraints on to our generics
09:47 - for example let's say we have an
09:50 - interface so here we have a simple I
09:56 - enemy interface and just has a damage
09:58 - method and now here in our class we can
10:01 - receive a generic of type T and then we
10:04 - can add a constraint in order to ensure
10:06 - that whatever type we use for T it must
10:08 - implement IME so we do my class where T
10:11 - implements I enemy and now since T won't
10:16 - have to implement a enemy that means we
10:18 - can use the functions defined in the
10:19 - interface by directly accessing our team
10:22 - for example here we can make a my class
10:25 - constructor
10:26 - going to receive a T for our value and
10:29 - then we can go into the valley since
10:31 - it's of type T which implements a enemy
10:33 - and we can call damage
10:36 - so up here we have some valid code and
10:39 - now up here if we're trying to create an
10:42 - instance of our class using an int you
10:44 - can see that we have an error since our
10:46 - in parameter does not implement the I
10:48 - enemy interface but now we can make a
10:51 - class that does implement that so now
11:02 - here we have two separate classes that
11:04 - both of them implement I enemy and now
11:07 - we can use any of these on the way up
11:08 - here on our my class as our generic type
11:12 - just like this so I can make in my class
11:17 - of type enemy minion then I can also
11:19 - make one of type enemy Archer since both
11:22 - of the types actually implement the eye
11:24 - enemy interface so just like that and if
11:30 - we run this we can see that it will
11:31 - indeed call the damage function on the
11:33 - interface which won't call this one and
11:36 - then this one and if there it is we have
11:39 - enemy minion damage in and me Archer
11:41 - damage now there are a bunch more
11:42 - constraints that we can add to our
11:44 - generic type you can check the page in
11:46 - the official Docs for all of them for
11:49 - example you can see where T is strapped
11:51 - in order to ensure that team must be
11:53 - structs you can also do class in order
11:56 - to ensure that it must be a class then
11:59 - you have new this ensures that a team
12:01 - must have a parameter unless constructor
12:03 - then you can also combine constraints so
12:09 - for here what we're saying is that type
12:11 - T must be a class it must implement a
12:14 - enemy and it must have a parameter
12:17 - unless constructor so with constraints
12:19 - you can make your generics be as
12:21 - constrained or as free as you want now
12:24 - lastly you can also use generics in
12:26 - interfaces so down here on our eye enemy
12:29 - interface we can also use a generic type
12:32 - so let's say T and then on damage we
12:34 - receive a parameter of type T and then
12:39 - when we implement our interfaces we must
12:41 - also define the type
12:46 - so we need to correctly implement the
12:48 - interface down here and let's say we
12:50 - need to implement my enemy that receives
12:53 - them in and yep just like this now we
12:57 - don't have any errors so now this
12:59 - interface works the same as any other
13:01 - generic types so you can use it as a
13:04 - parameter you can use it as a return
13:06 - value or in this case use it as a
13:08 - property all right so here you'll learn
13:11 - now about generics in c-sharp as you can
13:13 - see this is an extremely powerful
13:14 - feature that helps you write cleaner
13:16 - code with fewer dependencies you can
13:18 - write one class that's almost one
13:20 - specific problem and use generics so
13:22 - that it's reusable in many different
13:24 - scenarios this video is made possible
13:26 - thanks to these awesome supporters go to
13:28 - patreon.com/scishow to code monkey to
13:30 - get some perks and help keep the videos
13:32 - free for everyone as long as you can
13:34 - download the project files in a Tony's
13:36 - from EMT code monkey comm subscribe to
13:38 - the channel for more unity tutorials
13:39 - post any question you have in the
13:41 - comments and I'll see you next time
13:43 - [Music]