00:00 - in this video we're going to take our
00:01 - grid map and convert it to use generics
00:03 - this gives us a lot more options with
00:05 - what we can do rather than being stuck
00:07 - on using a specific type with this base
00:09 - we can easily make games like
00:10 - minesweeper or terraria or easily
00:12 - organized complex logic let's begin
00:18 - [Music]
00:22 - so why our goal here is to create a grid
00:25 - that works with generics so we can use
00:26 - it for just about anything if you're not
00:28 - familiar with generics they are a really
00:30 - awesome feature of CCR that essentially
00:32 - lets us use any type we want so that
00:34 - means that we can make our nice grid in
00:36 - here and do something where each grid
00:38 - position can hold various letters and
00:40 - numbers so as I put the mouse over this
00:43 - grid position and I hit a kink and there
00:45 - you go I've added a letter into the
00:47 - underlying grid object now I add another
00:50 - letter now if I want I can press the
00:52 - number and there we go it is added into
00:54 - a different part of the same grid object
00:56 - so I have my generic grid and each width
00:59 - position is holding a custom parade
01:02 - object another type is just using a
01:05 - simple boolean so as you can see
01:06 - everything is false and when I click it
01:09 - turns into true and I've also modified
01:11 - the heatmap visual Noor to work with the
01:13 - generic with boolean so as I click it
01:16 - turns from black to green so with
01:18 - generics we can set up our grid to work
01:20 - with whatever type we want that means
01:21 - simple types like inns and bones but
01:23 - also complex custom types that contain
01:25 - whatever logic and data we want so
01:28 - previously we made this nice red class
01:30 - it splits the map area into a grid each
01:33 - holding a specific value we also use
01:36 - this where it wants to make a heat map
01:37 - visual so when I click there you go the
01:39 - underlying value changes as well as the
01:41 - original representation so go check out
01:43 - both those videos to better understand
01:45 - our starting point now the underlying
01:47 - code for all of this is over here we
01:50 - have a grid array of ends now that work
01:53 - great since over here the heat map is
01:55 - based on a nice numeric value so we have
01:58 - from 0 to 100 however in are not the
02:02 - best datatype for every single problem
02:03 - like for example let's say we want to
02:05 - make a grid map for our path money so we
02:07 - wanted to find areas which are walkable
02:09 - in areas which are blocked technically
02:11 - we could do that with int and use a one
02:14 - for wanker bone and 0 for block however
02:16 - that would be pretty messy code a better
02:18 - approach would be to simply store a
02:20 - boolean instead another use that
02:22 - wouldn't be suitable for intz would be
02:24 - if we want to store a list of objects
02:25 - within that cell for example that's
02:27 - exactly what I made when I created the
02:29 - quadrant system in ECS
02:31 - it stores how many entities are in a
02:33 - specific quadrant so our in base
02:35 - is a great starting point but we can
02:37 - greatly expand what we can do with it if
02:39 - we make it work with generics all right
02:42 - so let's get to it
02:43 - so here is our starting scene and here
02:46 - in the project files I have the basic
02:48 - grid as well as the heat map again this
02:51 - was all fully created from scratch in a
02:53 - previous video so check the link in the
02:54 - description if you haven't seen it yet
02:56 - so we're here we have a testing game
02:58 - object that contains a testing script
03:00 - and in here in our script you can see
03:03 - it's very simple just on cert we are
03:04 - instantiating our grid and we are
03:06 - setting it on the heat map visual then
03:09 - when we click we are adding a valley to
03:11 - the grid which then updates the visual
03:13 - so let's make it smaller for testing
03:15 - okay so here is our grid and as you can
03:18 - see it splits our world into various
03:20 - grid cells and if I click there you go
03:22 - I'm modifying the underlying grid as
03:24 - well as the visual okay now what's going
03:26 - to our grid class and okay here it is
03:28 - now we're going to modify it in order to
03:30 - use generics if you're not familiar with
03:32 - generics they are a really awesome
03:34 - feature of c-sharp when you make it
03:36 - class you can define it to use a generic
03:37 - and what you are saying is that you want
03:40 - it to be usable by a multitude of types
03:42 - if you use the list then you're already
03:44 - familiar with generics so here for
03:47 - example you know that making lists you
03:49 - put lists then you put the type inside
03:52 - then you comment something and you
03:54 - create it so just like this we created a
03:57 - list object that can only receive ends
03:59 - however you can also do here is a nother
04:05 - list except this one only works with
04:07 - billions however both of these objects
04:10 - use the very same base class
04:12 - here is the pay's list class which as
04:14 - you can see uses a generic so this is
04:16 - what we're going to use now let's go
04:18 - into our grid class and then here
04:20 - instead of being just grid let's add
04:22 - grid that receives a generic and call it
04:25 - grid project so this means that when I
04:28 - essentially the grid class I won't tell
04:30 - it which type it should use so I could
04:32 - use this same class to instantiate
04:33 - record events or boolean or any custom
04:36 - type I want so now here in our code and
04:39 - let's replace all references of int on
04:41 - our grid array and replace them with our
04:43 - sometime so over here over here and so
04:46 - on over here we have the ad Valley that
04:55 - we made this but this one is specific
04:57 - for the heatmap however in here we want
04:59 - to create a generic grid class so we do
05:01 - not want anything specific for the
05:03 - heatmap so we get rid of this one and
05:05 - also the ad Val
05:06 - okay so only been changed to use a
05:08 - custom grid object and here on the gate
05:11 - Valley we have an error since we are
05:13 - returning a default value now for the
05:15 - integer we return the zero but in this
05:17 - case we don't know what type we're going
05:18 - to have so we can use the C sharp
05:20 - keyword default in order to return the
05:22 - default of the grid object so if our
05:25 - grid is made up of ends this will return
05:27 - 0 if our grid is made up of boolean's
05:29 - this will return false and if it's made
05:30 - up of any custom type it won't return no
05:32 - ok so that's pretty much it
05:34 - now our grid script instead of working
05:37 - just with ends it can work with any type
05:38 - we want ok so let's go into our testing
05:41 - and let's test it out instead of making
05:45 - it just a grid let's make it a grater
05:47 - receives boys so that's how we define it
05:52 - that's how we instantiate it for now
05:54 - let's comment out the heat map visual so
05:57 - here on the grid let's make sure we are
05:59 - enabling our debug and then here
06:01 - everything should work since our debug
06:03 - is using 2 string which is automatically
06:05 - implemented in every single type so
06:08 - instead of seeing a bunch of zeros we
06:09 - should be able to see a bunch of false
06:10 - let's see and yep as you can see our
06:13 - grid is now correctly working with
06:15 - boolean awesome so with this working now
06:17 - let's make a different version of our
06:19 - heat map in order to work with boolean
06:20 - so let's duplicate our script and here
06:24 - on let's call it heat map ball visual ok
06:28 - so now in here instead of using a
06:29 - regular grid let's use a grid that
06:32 - receives a type volume then here on the
06:35 - set read again something of type boolean
06:37 - and down here on the update visual we
06:41 - can't get value which since we have a
06:43 - great work moon Bowens instead of
06:45 - returning in in this one return a
06:46 - boolean so we have the boolean for the
06:49 - grid value and then we need the
06:51 - normalize in order to define the color
06:52 - that we're going to show so if it's true
06:54 - let's return one F so we Green Square
06:57 - not 0f so a Plex were okay so far so
07:01 - good now here in the testing let's add a
07:03 - serialize field for the heatmap boolean
07:05 - visual and then here we can call set
07:10 - grid and passing our newly created grid
07:13 - and then here on the position instead of
07:15 - setting add value we call the grid dot
07:18 - set value on this position and let's put
07:21 - it to true so wherever we click we are
07:23 - changing from false to true and finally
07:26 - here in the afternoon let's duplicate
07:27 - this visual or our new volume video all
07:32 - right so everything should be working
07:33 - let's see okay know where everything is
07:36 - false and everything is in black okay so
07:38 - far so good now if I click yep there you
07:40 - go that one went to phones to true and
07:42 - the grid turned green so I can click
07:44 - anywhere I want and turn a false into
07:46 - true so as you can see our grid is now
07:49 - working with boolean values so we have
07:51 - successfully modified our grid to work
07:53 - with a custom type and make the heatmap
07:55 - work with that red generic awesome now a
07:58 - boolean is a very simple type however
08:00 - using generics we can set this to use
08:03 - any type we want so over here let's
08:05 - define an object that we're going to use
08:07 - in our grid so it's simply College a
08:10 - type heat map grid object this the
08:15 - object that we're going to instantiate
08:16 - on every position in our grid inside
08:19 - let's simply and have a polygon for our
08:21 - value any function to increase it and
08:27 - now we can create a grid that uses this
08:29 - specific grid map object so we can go
08:32 - all the way up here and again it's
08:34 - extremely simple to work with generics
08:36 - we simply change from boolean to our
08:38 - heat map great object and just like that
08:41 - home of our functions in our grid now
08:43 - work with this particular object for now
08:46 - let's get rid of the visual just like
08:48 - that and now if we run the code and
08:52 - there we go we have a known error now
08:55 - the reason is because our object is now
08:57 - a class which is a reference type as
08:59 - opposed to something like your boolean
09:00 - which is a value type so that means that
09:03 - the default value for every position on
09:04 - our grid won't be no so if we run the
09:07 - code with debug enabled you can see the
09:09 - debug goes in here accesses
09:11 - object and constitu string so if that
09:14 - one is known we have our error so we
09:16 - want to make sure we do two things one
09:18 - make sure that the debug works with no
09:20 - and to initialize our print with a
09:22 - created object so first here on the grid
09:25 - it's extremely simple to deal with the
09:27 - no we just do a very simple no check so
09:29 - we can simply use the null check
09:31 - operator just like that on both places
09:33 - where we are accessing the grid array so
09:36 - even if those are no we're going to make
09:37 - sure that we do the right thing and now
09:40 - up here let's write some code to
09:42 - initialize our grid so we're going to
09:44 - cycle through the width and height and
09:50 - now here we have our greater right
09:51 - position and we can set our default
09:52 - object so in here the question becomes
09:55 - if we don't know the type how can we set
09:57 - a correct starting object for a value
10:00 - type we can just use our default keyword
10:02 - but if we have a custom type we want to
10:05 - new it so one way to solve this problem
10:07 - is to receive a function to create the
10:09 - grid object so here in our constructor
10:11 - all let's receive a parameter which will
10:13 - be a func now a func is a delegate very
10:17 - much like the action except a func has a
10:19 - return value so we're going to have a
10:21 - phone that returns a tea grid object and
10:26 - let's call this we create grid object so
10:29 - you receive that in the constructor and
10:31 - in here we simply use it so this
10:33 - function will create the grid object
10:35 - with whatever type we want so if we were
10:37 - doing this with an int we would pass in
10:39 - a function that would return a 0 and if
10:41 - we're creating a grid with a custom
10:43 - object then we can go into our testing
10:45 - code and here we are creating this and
10:48 - then for the func
10:50 - let's pass in a function that simply
10:52 - does a new our heat map grid object okay
10:56 - so that's it
10:57 - so now let's test any of their ego I
11:00 - mean it's hard to read but you can
11:02 - already see that every grid cell has an
11:03 - object so every single grid zone
11:05 - contains a heat map grid object instance
11:08 - right awesome now let's make our heat
11:11 - map grid object contain all the logic
11:13 - necessary for our heat map so down here
11:15 - we have our value field and we have our
11:18 - simple add value function that just adds
11:20 - to it now let's finish our logic so in
11:23 - here we need a min and
11:24 - maxximum so when we add the value we are
11:32 - clamping it between our min and maximum
11:34 - and then for our heat map we also need a
11:36 - normalized time so just like that so now
11:43 - we have this specific object type that
11:45 - works with our generic grid and this
11:47 - specific object holds all the logic that
11:49 - we need in order to make our heat map so
11:51 - that means that our grid script in here
11:53 - is completely generic and it is
11:55 - completely decoupled from any heat map
11:57 - code now we can go here on to our quick
11:59 - function and now in here we simply go
12:02 - into our grid and we call get value pass
12:05 - in the mouse world position this is you
12:08 - can see returns a heat map grid object
12:12 - and here we want our code to be nice and
12:15 - clean so we should really rename this
12:17 - function since we no longer work with a
12:19 - direct Val so let's go in here and
12:21 - rename all of these instead of being
12:23 - valley to return get grid object alright
12:32 - so now our function is now having more
12:34 - appropriate name since we're working
12:35 - with objects rather than thumbs now back
12:38 - in the testing here we are getting our
12:39 - grid object now again since we are using
12:41 - a working side we need to make sure this
12:43 - is not no and if it's not known then we
12:47 - simply call our add value function all
12:50 - right that's pretty much it now one more
12:52 - thing over here on our object we can
12:55 - override to string to return our current
12:57 - value so just like this our automatic
13:02 - debug won't work perfectly and now if we
13:05 - run the code and if there we go now our
13:07 - great show zeroes all over however the
13:09 - grid isn't working just with basic ins
13:11 - but rather with our custom object type
13:13 - which inside holds an int now I have the
13:16 - code in order to click and increase
13:18 - however if I click and there you go
13:20 - apparently nothing changed well the
13:22 - reality is something did change but the
13:25 - debug is only updating when the event is
13:26 - fired so let's see where that event gets
13:29 - fired so here is the grid class and here
13:32 - is the event and if we go down here we
13:34 - can see the event is fired right in here
13:36 - now this works when don't
13:38 - with simple types like ins since we want
13:40 - to modify the value that is stored
13:41 - directly on the grid so using simple
13:43 - family types we would use this function
13:45 - a lot
13:45 - however with custom objects we want to
13:48 - modify the values inside that object so
13:51 - here on the testing the way we are
13:52 - modifying is first we get the object and
13:54 - then we modify the inside of that object
13:57 - so that means that we end up by passing
13:59 - this function so what we really need is
14:01 - a function to trigger the event then
14:04 - when something changes inside our object
14:06 - we're going to trigger that function
14:12 - okay so here it is we have this nice
14:14 - function which triggers our event so now
14:17 - over here on our heat map grid object in
14:20 - here when we modify the event Li we want
14:22 - to trigger that event so that means that
14:24 - we also need a reference to our grid
14:26 - object so this one won't require a
14:28 - constructor okay so we receive the grid
14:39 - in here and now we can go into add value
14:41 - and call our trigger function except in
14:43 - here now you can see that we need an x
14:45 - and a y so let's receive that as well
14:51 - okay so there it is now our grid map
14:53 - object has all the logic related to the
14:56 - heat map and when it adds value it
14:58 - notifies the grid that something changed
15:00 - so that other objects can update their
15:01 - own State so now what we need is to make
15:04 - sure that we call this with the
15:05 - corrected values so let's go all the way
15:07 - up here and here we have our grid
15:09 - constructor and now in here we need to
15:11 - actually know some values like the X to
15:13 - Y in the grid in order to pass it to
15:15 - this object some way to go into our grid
15:17 - into the constructor modify our func in
15:21 - here let's add a couple more parameters
15:22 - so first our grid object will need a
15:25 - reference to this grid so the first
15:27 - parameter is a grid of type grid object
15:31 - then we're going to require an end to
15:34 - pass in our X and another end to pass in
15:37 - our Y so this is going to be our method
15:40 - signature for our cream grade object so
15:43 - then down here
15:43 - when we create we simply pass in those
15:45 - votes so first for the grid that's this
15:47 - one
15:48 - then we pass in the
15:50 - and finally the why so we pass in that
15:53 - then here we can use that and just like
16:01 - that
16:02 - here is our funk method signature and we
16:05 - pass all of it on to our constructor
16:07 - then our constructor simply stores our
16:09 - values and now we have enough
16:11 - information in order to be able to call
16:13 - this function which should update
16:14 - everything else all right so this should
16:16 - do it
16:17 - let's test okay here we are and
16:19 - everything is that you're all right now
16:21 - if I click and there you go it correctly
16:23 - updated the underlying Val so that means
16:26 - that our event was correctly fired so I
16:28 - can click on a lot of places and there
16:30 - you go everything is correctly
16:31 - responding to my inputs all right
16:33 - awesome so now that this is working
16:36 - let's make it work with the heat map
16:37 - visual let's do the same thing again and
16:39 - duplicate this just so we have a bunch
16:41 - of code that we can see how we get there
16:53 - so here I have named that heat map
16:55 - generic visual and I've added a new game
16:57 - object okay now here in the script first
17:00 - we make our grid work with our heat map
17:03 - grid object all right there it is and
17:08 - now down here when we update our visual
17:10 - we get a great object which returns a
17:12 - heat map grid object and then we
17:16 - calculate the grid value normalized
17:18 - based on we go to this and get the value
17:21 - normally so we access the function
17:23 - inside our custom object type and that's
17:26 - pretty much it
17:27 - now this visual is working with our
17:29 - custom grid object that we created in
17:31 - here all right so let's test okay so
17:33 - here we are and everything is black and
17:35 - the debug is disabled and if I click yep
17:39 - there you go it increased by five so it
17:40 - went from black to red and I can keep
17:42 - increasing becomes yellow and finally
17:44 - becomes green so as you can see whenever
17:47 - I click the underlying value changes
17:49 - which then updates our visual
17:51 - representation in order to show the
17:52 - correct color so we made that our grid
17:54 - worked with any object type and then we
17:56 - created a heat map specific type to hold
17:58 - all the heat map logic and made the
18:00 - visual work with it so that means the
18:02 - grid
18:03 - completely decoupled from the heatmap
18:04 - implementation right awesome now let's
18:08 - look at another simple example to see
18:09 - how we can use our grid for just about
18:11 - anything alright so here it is I've made
18:26 - a very nice string grid object now in
18:28 - here you can see that I hold the string
18:30 - 14 letters in a string for the numbers
18:32 - then I have these two functions in order
18:34 - to add a letter or a number to it and as
18:37 - you can see I'm overriding the two
18:38 - string in order to display two letters
18:39 - and then underneath the numbers so now
18:42 - up here on testing over here you can see
19:03 - that I'm in sending the world using our
19:05 - new string grid object and then in here
19:08 - I'm testing for a bunch of key presses
19:09 - testing for some keys and then suddenly
19:12 - calling the two separate functions so
19:14 - let's see this in action okay here we
19:17 - are and first of all the great shows
19:18 - nothing since by default our string is
19:20 - empty now let's say I put the mouse over
19:23 - there and I press the a king and there
19:26 - you go it added a nice character and now
19:29 - on the same place I'm going to press B
19:30 - and there you go it added another string
19:33 - and now in here I'm gonna press two and
19:36 - there you go it added a letter so as you
19:38 - can see I'm adding values to the
19:40 - underlying grid object and I can make
19:42 - the grid object as complex as I want so
19:44 - here I made at home two types of values
19:46 - letters and numbers and every single
19:48 - grid position in here contains its own
19:50 - grid object so I can put a bunch of
19:52 - letters all over and a bunch of numbers
19:54 - all over so you can see how you can use
19:57 - custom grid objects to add as much
19:59 - complexity to the grid as you want now
20:02 - we could for example use this class with
20:04 - a simple innum to define a sprite type
20:06 - and render the sprite on screen by doing
20:09 - so we would essentially have a very nice
20:11 - town map class and that's exactly what
20:13 - we're going to do in the next video so
20:15 - now you know
20:16 - how generics work and how powerful they
20:18 - can be with this class and knowledge of
20:20 - generics you can now build just about
20:21 - anything you want so go for it and make
20:24 - a system that uses a very custom grid
20:26 - object that fits perfectly within your
20:28 - game as always you can download the
20:30 - project fanzini tony's from in tacoma
20:32 - comm subscribe the channel for more ent
20:34 - tutorials post any questions you have in
20:36 - the comments and I'll see you next time
20:39 - [Music]
20:41 - you