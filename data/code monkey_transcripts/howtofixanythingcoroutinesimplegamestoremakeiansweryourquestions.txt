00:00 - hello and welcome i'm your code monkey
00:02 - and i've been making videos on this
00:03 - channel for over four years now i've
00:05 - covered tons and tons of topics and over
00:07 - 500 videos one thing that i always made
00:09 - sure to do since the very beginning is
00:11 - read through all the comments every day
00:12 - the first thing that i do when i wake up
00:14 - is i go through all the comments and
00:15 - answer any questions that i find
00:17 - usually i reply directly to that person
00:19 - but if at least one person has a
00:20 - question then chances are there's more
00:22 - people wondering the same thing so in
00:23 - this video let's check out some
00:24 - interesting questions that i saw that
00:26 - maybe you would also like to know the
00:27 - answer to if you find this format useful
00:29 - go ahead and hit the like button i've
00:31 - already answered probably over a
00:33 - thousand questions so if you find this
00:34 - helpful i've got many more questions and
00:36 - answers that i can highlight in future
00:38 - videos but before i get to any specific
00:40 - questions let me just answer a general
00:41 - comment that i see many times usually
00:44 - it's some form of i didn't understand
00:45 - anything or alternatively this doesn't
00:47 - work my answer to those is always the
00:49 - same you need to first identify and
00:51 - specify what it is exactly you don't
00:52 - understand i'm trying to help people but
00:55 - there's not much i can do someone just
00:56 - says that so what specifically didn't
00:58 - you understand how exactly does not work
01:00 - is that a certain object that is not
01:02 - spawning or maybe just not visible is
01:04 - the code not compelling is there some
01:06 - errors in the console basically without
01:08 - knowing exactly what doesn't work or
01:10 - what they didn't understand without that
01:11 - there's really not much i can do to help
01:13 - the only way to learn is to first
01:14 - identify what it is you're trying to
01:16 - learn so if somebody asks me how c-sharp
01:18 - events work i can point them to my video
01:20 - and elaborate further on that if someone
01:22 - tells me they have a null reference
01:24 - exception i can also tell them my method
01:26 - for finding the culprit using debug.log
01:28 - if an object isn't glowing i can point
01:30 - them to the blue checklist and so on but
01:32 - if someone just says it didn't work or i
01:34 - didn't understand anything then from
01:35 - that comment i really don't have enough
01:37 - information to be able to help
01:39 - maybe that person doesn't understand unt
01:40 - basics maybe they don't know what is a
01:42 - component or what is a game object maybe
01:45 - they don't know what is a c sharp
01:46 - delegate or was it variable maybe they
01:48 - understood the code but not the why so
01:50 - anyways my point to this is if you've
01:52 - ever watched a video and you thought to
01:53 - yourself you don't understand anything
01:55 - stop the video and take some time to
01:56 - identify exactly what it is you don't
01:58 - understand if you do that i guarantee
02:00 - you will learn much much quicker okay so
02:02 - with that general comment out of the way
02:04 - let's look at some specific questions
02:06 - and a while ago i made a video and
02:07 - posted it for youtube channel members
02:09 - and patreon patrons if you remember you
02:12 - can ask a question in that video check
02:13 - the link in the member page or click the
02:14 - button below to join the youtube
02:16 - membership so starting off with a
02:17 - question posted from that video
02:19 - here ken asks about a project taking
02:21 - longer and longer to open as you add
02:23 - more and more assets
02:24 - basically if you import a bunch of mega
02:26 - bundles that have thousands of assets if
02:28 - you do that then your project becomes
02:30 - huge and pretty difficult to work with
02:32 - my solution to that is one that i
02:33 - covered in another video
02:34 - basically you should only import the
02:36 - assets that you really need so what i do
02:38 - is i have a test project where i import
02:40 - tons of assets so that project is truly
02:42 - massive and takes a long time to open
02:44 - since it has thousands of assets then in
02:46 - that project i find the specific answer
02:48 - that i'm looking for and when i do i
02:50 - just select that asset i export just
02:52 - that asset along with any textures or
02:54 - materials that it requires i do just
02:56 - that make a simple ent package with that
02:58 - single asset and that is the only thing
02:59 - that i import into my main project so
03:01 - basically my main project ends up only
03:03 - containing the assets that i actually
03:04 - use instead of a massive library where
03:06 - 99 of it is never used
03:08 - just doing that very simple process
03:10 - really helps keep the project lean and
03:11 - fast so that's the process for keeping
03:14 - the project fast with regards to assets
03:16 - but over here ken also mentions a unity
03:18 - tool that can help with a similar issue
03:20 - the assembly definitions
03:22 - these are some simple messages you can
03:23 - create in your project which lets you
03:25 - separate your code into multiple
03:26 - assemblies
03:28 - meaning that when you go to compile your
03:29 - code unity only compiles the assemblies
03:31 - that need recompiling instead of
03:32 - recompiling your entire code base every
03:34 - time so on a massive project if you
03:36 - organize things correctly and each thing
03:38 - in its own assembly if you do that then
03:40 - making changes in the code won't compile
03:42 - super fast i have a lecture on my
03:44 - ultimate unity overview course
03:45 - explaining how to use assembly
03:46 - definitions in detail definitely super
03:48 - useful on those massive projects that
03:50 - course covers tons of things like for
03:52 - example this one that are really hard to
03:53 - include in regular videos because of the
03:55 - youtube algorithm so if you're
03:56 - interested in learning about those more
03:58 - niche things check out the course this
04:00 - next question is a simple one
04:02 - it's on my video on how i made a
04:04 - function timer class in my utilities
04:05 - it's a super simple class that takes in
04:07 - a delegate and runs it after a certain
04:09 - amount of time it's really easy to use
04:11 - and lets me add some timing to the code
04:13 - in a really simple way and the question
04:15 - comes from something who asks simply why
04:17 - not using co routine code routines are
04:19 - indeed useful for triggering actions
04:20 - after some time you have yield return
04:22 - wait for seconds to wait for a certain
04:24 - amount of time so that's one way to do
04:26 - it however the reason why i personally
04:27 - doesn't like co routines is because of
04:29 - the pattern that they force it to use
04:31 - for a co routine to work you need to
04:33 - change the function return type to i
04:34 - enumerator you also need to use the on
04:37 - return then you need to call start co
04:38 - routine somewhere to start it and you
04:40 - also need a mono behavior to run it for
04:42 - me i find that entire pattern to be
04:44 - quite clumsy and a very rigid set of
04:46 - requirements so for me i much rather
04:48 - create just an extremely simple class
04:50 - with a basic follow timer and a delegate
04:51 - that i can use in any way but on the
04:54 - other hand if you like using core
04:55 - routines then don't let me discourage
04:56 - you if the goal is to trigger an action
04:58 - after some time then either method works
05:01 - this next question is related to
05:02 - animations it's from the video on how to
05:05 - aim and shoot at the mouse in 2d
05:07 - in the video i teach how to create a
05:09 - game object rotate it to facing mouse
05:10 - position and trigger an animation to
05:12 - shoot
05:13 - then for the question this person asks
05:15 - how am i able to shoot and restart the
05:17 - animation before the animation ends and
05:19 - actually this question isn't really
05:20 - correct in the video in this demo i am
05:22 - not able to restart the animation before
05:24 - it ends the reason why it looks like
05:26 - that is simply because i made the shoot
05:28 - animation super fast like literally just
05:30 - one or two frames however what you can
05:32 - learn from this question is that the
05:33 - animator has a special state called any
05:35 - state which is indeed intended exactly
05:37 - for this use case
05:39 - if you make a transition from any state
05:41 - to something else then that transition
05:42 - won't be tested regardless of which is
05:44 - the current active state so in this
05:46 - particular case if you had a shoot
05:48 - animation that is pretty long and you
05:49 - wanted to make sure that the player
05:51 - could cancel the previous shoot
05:52 - animation with another shoot action
05:54 - to do that you could simply make a
05:56 - transition from any state onto the shoot
05:58 - state that way even if you shoot while
06:00 - the shoot animation is still playing it
06:02 - would indeed shoot again so always
06:04 - remember to use the any state in the
06:05 - animator it's super useful and
06:07 - absolutely essential for making your
06:08 - animations nice and responsive to player
06:10 - input this next question is an
06:12 - interesting one all about simple games
06:14 - to remake it's from the video 7 steps to
06:17 - become a game developer it's a pretty
06:18 - nice video where i cover 7 concrete
06:20 - steps you can take to start making games
06:23 - if you're the kind of person who films
06:24 - overwhelmed by all of the options and a
06:26 - simple step-by-step guide like this one
06:27 - can be helpful
06:29 - and in the video step 1 is start by
06:30 - making a ton of extremely tiny simple
06:32 - games the goal is basically to learn
06:34 - through quantity making tons of tiny
06:36 - games will teach you a lot more than
06:38 - making a single large game when you're
06:39 - just starting out so this question comes
06:41 - from srinivasa paduri sorry if i messed
06:44 - up your name and the question is pretty
06:46 - much can you share some games to
06:47 - replicate in the step 1 and my answer to
06:49 - that is pretty much any of the classic
06:51 - games we'll do for example snake is
06:53 - pretty simple you just move a snake with
06:54 - simple movement you'll learn about
06:56 - collisions and you eat some fruit
06:58 - then arcanoid is also pretty simple it
07:00 - helps you learn about physics and angles
07:02 - pong is similar to that one but also
07:04 - helps you create some basic ai or of
07:06 - course just recreate a bunch of simple
07:08 - mobile games things on the scale of
07:09 - flappy bird even for a beginner you can
07:12 - definitely build that in one week and
07:13 - learn quite a bit if you want something
07:15 - a step above that then perhaps look into
07:17 - pac-man maybe into pinball maybe missile
07:20 - command
07:21 - basically if you're on that stage try
07:22 - making as many super tiny games as you
07:24 - can this is pretty much how i
07:26 - unintentionally started my game dev
07:28 - journey as you might know i started by
07:30 - making flash games back in 2008. i
07:32 - covered my gamedev journey in another
07:34 - video it's a really nice one so if you
07:35 - haven't seen that one go ahead and give
07:36 - it a watch in the 5 years that i was
07:38 - making flash games i ended up making
07:40 - about 40 unique games i made everything
07:42 - from shooters to strategy racing tycoon
07:44 - games and everything in between i really
07:47 - believe that doing that process is what
07:48 - helped me massively grow my gamedev
07:50 - skills i certainly believe that i
07:52 - learned a lot more making those 40
07:53 - unique games than if i had attempted to
07:55 - make just one single giant game so if
07:58 - you're in the beginner stage i really
07:59 - recommend you try doing that try making
08:01 - tons and tons of extremely simple games
08:04 - and when you're done with that that is
08:05 - essentially step one so check out the
08:06 - other steps in that video
08:08 - this next question is all about various
08:10 - rotation methods and comes from my
08:11 - recently released turn based strategy
08:13 - course
08:14 - in there one of the lecture is all about
08:16 - handling the unit rotation making it
08:18 - rotate towards the move direction so the
08:19 - unit rotates and moves forward to do
08:21 - that i explained that there are
08:23 - basically three methods you can modify
08:25 - the transform.rotation this one involves
08:27 - working with quaternions which i always
08:29 - find pretty confusing so i tend to avoid
08:31 - this method
08:32 - the next one is you can modify the
08:33 - transform.euler angles this lets you
08:36 - work with regular angles that you're
08:37 - probably familiar with you know the ones
08:39 - that go from 0 to 360 and finally you
08:41 - can rotate the object by modifying the
08:43 - transform dot 4 directly this is the
08:45 - method that i find simplest so it's the
08:47 - one that i used in the course
08:48 - and this question comes from clayton
08:50 - rumley who asks what about
08:51 - transform.lookat
08:53 - is this one a good alternative or is
08:54 - there any reason why you shouldn't use
08:56 - it and the answer is yep that is indeed
08:58 - a great alternative transform down look
09:00 - at does exactly the same thing as
09:01 - modifying transform.forward the only
09:03 - difference is that when modifying the
09:05 - transform.foreign for that one you use a
09:07 - direction whereas for transform.lookout
09:09 - for that one you use the target position
09:11 - but either way both methods work
09:13 - perfectly so whenever you need to rotate
09:15 - a certain object these are the multiple
09:16 - ways you can do that if you want to
09:18 - learn how to make a complex game step by
09:20 - step then check out that turn based
09:21 - strategy course link in the description
09:23 - it will help you transition from the
09:24 - beginner stage into advanced alright so
09:26 - those are a bunch of your questions and
09:28 - my answers to those like i said this is
09:30 - a new format that i'm trying out if you
09:32 - like this format go ahead and hit the
09:33 - like button let me know in the comments
09:35 - since i've been answering questions like
09:37 - this for the past four years i have
09:39 - hundreds or even thousands of
09:40 - interesting questions so there's tons
09:42 - that i could include in videos like this
09:43 - one which may answer some questions that
09:45 - some of you might also have so like i
09:47 - said do let me know in the comments if
09:48 - you find this helpful and if you'd like
09:50 - to see some more like this thanks to
09:51 - these awesome patreon supporters for
09:53 - making these videos possible thank you
09:55 - for watching and i'll see you next time