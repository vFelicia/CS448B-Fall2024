00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to create
00:03 - a graph in unity
00:04 - let's get sir
00:08 - so we're going to create a graph in our
00:10 - UI let's first set up the visual for our
00:13 - graph window going to go into my UI my
00:17 - UI canvas and create a new empty game
00:19 - object name it window were inside let's
00:24 - create an empty game object and name it
00:26 - background and the image component and
00:29 - put it in black we're going to have
00:32 - another game object for our graph
00:34 - container and all of our graph dots
00:37 - won't be children of this particular
00:39 - transform and inside we're also going to
00:42 - have another background ok so let's set
00:45 - up the sizes so for my graph container
00:47 - background I'm going to expand it
00:49 - completely to occupy the whole thing for
00:52 - my graph container I'm going to anchor
00:54 - it on the lower left side and for my
00:57 - background I'm going to occupy the
00:59 - entire size of my window graph and my
01:03 - window graph size that's what I'm going
01:04 - to modify ok so visually we have our
01:07 - window in here I've got my window graph
01:09 - game object which are certain width and
01:12 - height the background occupying the
01:14 - entire space the graph container which
01:16 - is anchored to the hole on the left side
01:17 - and inside it as a background that is
01:19 - also occupying all the size of the graph
01:21 - container ok so inside our graph
01:23 - container is where we're going to place
01:25 - all of our dots so let's make a new
01:27 - c-sharp script and name it window graph
01:30 - so go in a c-sharp script window graph
01:34 - ok so in my code here first let's grab a
01:36 - reference to my graph container so I'm
01:38 - going to get a private rect transform
01:41 - for my graph container and I'm going to
01:44 - grab it on my private void awake at the
01:47 - graph container equals transform dot
01:49 - fine
01:50 - the grab container getcomponent
01:55 - I write transport I am also going to add
01:58 - a private sprite for my circle sprite
02:02 - which is what we're going to use to
02:04 - display each dot on our graph I'm going
02:06 - to make it a serialized feel so I can
02:09 - set it in the editor so let's make a
02:11 - function to create a circle for each dot
02:14 - so go and make a private void create
02:17 - circle and it's going to receive a
02:20 - vector - for my anchor position so in
02:23 - here let's create our circle and going
02:25 - to game object create a new game object
02:27 - name it circle and add the time for a
02:32 - image the image is in using unity engine
02:36 - dot u I go into my game object dot
02:40 - transform dad set parent the parent will
02:43 - be the graph container and don't keep
02:46 - the wrong position go into my game
02:48 - object I'll get component a type image
02:51 - and set the sprite to my circle sprite
02:53 - then let me grab a reference to the rect
02:57 - transform which is a game object I get
03:00 - component type rect transform let's set
03:04 - the anchor position to the 1 receive
03:07 - ended function and set the rect
03:11 - transform dot size Delta to let's say 11
03:15 - by 11 and let's anchor it to the lower
03:18 - left corner X transformed anchor min
03:21 - equals new vector 2 since we want on the
03:24 - lower left corner the main is gonna be
03:26 - on 0 0 and the maximum also be on 0 0
03:29 - keep everything on the lower left corner
03:32 - okay so we can now create a circle let's
03:34 - create one just for testing and we're
03:37 - going to place it on let's say 200 200
03:40 - back into my scene here and drag the
03:43 - window graph into my window graph game
03:45 - object and add the circle as my sprite
03:48 - so let's test and there you go as you
03:51 - can see the circle has spawned in there
03:53 - ok great so we can now spawn a circle
03:55 - and this is what we're going to use to
03:56 - display every value on our graph so back
04:00 - into my code here we're going to have a
04:02 - function
04:03 - and make a private void and call it show
04:06 - graph and this will receive a list of
04:09 - intz and call it value lists this is
04:13 - going to receive a list of all the
04:14 - values that we want to graph so inside
04:17 - it I'm going to cycle through the list
04:19 - and now in here we need to calculate the
04:21 - positions on the X and y axis for each
04:24 - value on our list for the x axis which
04:27 - in this case and let's say it represents
04:28 - time so something like each hour or day
04:31 - in your game we're simply going to
04:33 - increase it based on the list index so
04:36 - for my float X position let's say it is
04:40 - the I and x let's say X size go up here
04:45 - and the fine exercise let's say 50th
04:48 - this is the size distance between each
04:51 - point on the x axis now for the y axis
04:55 - which in this case let's say it
04:56 - represents money earned in the time
04:59 - frame so let's first decide upon a
05:02 - maximum for our graph maximum for our
05:05 - values so let's make a y maximum and
05:10 - let's just say it is a hundred F so on
05:12 - the values that we receive in here the
05:15 - highest will be a hundred that will
05:17 - define the top of our graph we also need
05:20 - to grab the height of our graph so let's
05:23 - go and make a graph height which will
05:26 - actually be the graph Container dot size
05:29 - Delta dot Y so the Y position for each
05:33 - value in here my float Y position won't
05:37 - be based on this valley that we're
05:39 - cycling so value list of I it won't be
05:43 - that divided by the maximum that I have
05:44 - set the Y maximum which will essentially
05:48 - give me a normalized value within my
05:50 - villain list and I'm going to multiply
05:52 - that by my graph height so if the value
05:55 - that I'm cycling in here is exactly why
05:58 - maximum if I do receive a hundred then
06:00 - too Umble okay the exactly at the graph
06:02 - right if I receive a zero in here then
06:04 - it won't be on zero so matters going to
06:07 - our weight here and create a value list
06:09 - I'm going to create a list of
06:12 - call it value list and let's give it
06:14 - some values okay I have my vilnius here
06:20 - let's remove our default circle and use
06:23 - show graph with this value list and down
06:26 - here when we show the graph obviously we
06:28 - need to create our circle on a new
06:31 - vector2 with the x position and the y
06:34 - position okay so let's go into our scene
06:37 - and we should now see a graph using
06:39 - these values so essentially goes up a
06:41 - bit and goes down a bit then goes up
06:43 - again let's see if that appears
06:46 - correctly and there you go here we have
06:48 - our families our first values second
06:50 - value the first one which as you can see
06:53 - here is a five and then you got a 98 so
06:55 - you can see that the five is very near
06:57 - the bottom of our graph and the 98 is
06:59 - very near at the top of our graph
07:01 - alright so it seems the values are being
07:03 - correctly displayed might as shift the
07:06 - first value a bit to the right so it
07:07 - doesn't hug the left side but everything
07:10 - else looks correct so go in here and on
07:13 - my let's just make it excise plus I
07:16 - times excellent okay yep there it is
07:18 - alright so now that we have our dots
07:20 - let's create some lines to link up all
07:22 - of our dots so back into our code and
07:25 - let's make another function and say it's
07:27 - a private void and name it creates dot
07:31 - connection in here I'm going to receive
07:35 - a vector two for my dot position a and a
07:39 - vector two for my dot position B
07:41 - essentially I want to create a rectangle
07:44 - that won't go from A to B so let us
07:48 - create a game object equals new game
07:53 - object name is dot connection give it an
07:58 - image type game object I'll transform
08:01 - that set parent to my graph container
08:04 - let me grab a reference to my rect
08:08 - transform equals game object I get
08:11 - component rect transform let's set up
08:14 - the anchor to the lower left side so
08:17 - right transform anchormen
08:19 - equals new vector2 on 0-0 same thing for
08:23 - the anchor max let's set up a size Delta
08:27 - of let's say a hundred F and three F so
08:32 - essentially a horizontal bar and for now
08:36 - let's position it anchor position at the
08:39 - dot position a just for testing this is
08:42 - good for now so obviously on our show
08:44 - graph here we need to call this function
08:47 - in order to do that we need the position
08:49 - of the first dot and the second down now
08:51 - when we're going through our cycle here
08:53 - we only have one dot so first of all
08:56 - let's modify this function to actually
08:58 - return the game object that we have
09:01 - created return our game object and now
09:05 - in here let's make game object circle
09:08 - game object which is the game object
09:11 - that we have created now we need to sort
09:13 - reference to the previous game object so
09:16 - let's make a game object last circle
09:19 - game object and it's going to start off
09:21 - as no and in here we're going to set it
09:24 - to our circle game object but before we
09:27 - do that
09:28 - if once game object if it is different
09:30 - then no that means this is not the very
09:33 - first dot so we can connect the last one
09:36 - to this one so it's in here that we're
09:38 - going to create a dot connection between
09:40 - dot a which let's say it's the last one
09:43 - that get component rect transform grab
09:48 - the anchored position and this circle
09:51 - game object get component right to
09:53 - transform dot okay so we are going
09:57 - through the list creating a circle on
09:58 - this position and then we check if we
10:01 - have a game object that was created
10:02 - previously so if we're not on the index
10:05 - 0 if we are then this will be known and
10:07 - don't do anything but every other index
10:10 - won't have a previous game object so it
10:12 - won't connect this one with the last
10:14 - circle game object right here and when
10:17 - we create our not connection we are
10:19 - creating a new game object we are
10:20 - setting the parent grabbing the
10:22 - transform putting the anchor on the
10:24 - lower left side setting the size Delta
10:26 - to be a basic horizontal bar and setting
10:29 - the anchored position on
10:31 - so let's go back into our scene and we
10:34 - should see a rectangle bar on top of
10:36 - every single dot yep there you go okay
10:39 - so we are correctly connecting all of
10:41 - the dots as you can see the only one
10:43 - that doesn't have is the very last one
10:44 - because it is connecting with the
10:46 - previous one so now that the connections
10:48 - are being correctly spawned we need to
10:51 - apply the rotation and place them in the
10:53 - correct position so essentially this bar
10:56 - will be rotated in the direction of this
10:58 - point and it will be placed on the
11:01 - middle point okay so back in my code
11:03 - here let me first go into my game object
11:05 - and get the component for my image and
11:08 - set the color to a new color set it in
11:11 - white but with half transparency so it
11:14 - looks a bit different from our dots now
11:17 - let us grab the vector two for our
11:19 - direction between position a and B so
11:22 - I'm going to grab the dot position B
11:24 - mine is not position a and normalize the
11:28 - whole thing I'm going to need a float
11:30 - for my distance which will be a vector
11:32 - to distance between my dot position a
11:35 - and dot position B so in order to rotate
11:38 - I'm going to go into right transform dot
11:41 - local Euler angles and the X and Y is 0
11:45 - and the Zed is the rotation that we want
11:47 - to apply so in this case I'm going to
11:49 - use the code monkey utilities which is
11:52 - always you can grab for free from Unity
11:54 - code monkey com
11:55 - so using code monkey diet view tones I'm
11:58 - going to go into the utens class and I
12:02 - have a function there which is get angle
12:04 - from vector flow so essentially it takes
12:07 - this vector and converts it into an
12:09 - angle going between 0 and 360 so the
12:13 - only thing missing is our position right
12:15 - now it's a dot position a but we're only
12:17 - want to put it on that position a plus
12:20 - the direction towards our dot position B
12:23 - but we only want half
12:24 - so plus Direction times the distance
12:26 - times 0.5 so we place this exactly in
12:30 - the minimum between a and B okay so this
12:32 - should now be working we set the collar
12:34 - to be slightly transparent we count only
12:37 - the direction between
12:39 - and being we also come late the distance
12:42 - between a and B we positioned our rect
12:45 - transform in the midpoint between a and
12:47 - B so it's a plus direction towards B
12:49 - plus half the distance and we rotated it
12:52 - towards our direction now the only thing
12:55 - missing is the size Delta in here which
12:57 - will be our distance so let's see how
12:59 - our graph is looking and there you have
13:02 - it a very simple graph that you can use
13:05 - to display information in your game like
13:07 - profit per hour or number of guests per
13:09 - day you just grab a list of all your
13:12 - values and display them in a window in
13:15 - the next video we're going to add some
13:17 - visual separators on our x and y axes as
13:21 - always you can download the project
13:22 - files and utilities from unity code
13:24 - monkey comm if you have any questions
13:27 - post them in the comments and I'll do my
13:28 - best to answer them ok see you next time