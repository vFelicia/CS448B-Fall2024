00:00 - hello and welcome i'm your code monkey
00:02 - now in the last video i already covered
00:04 - how to do a drawing system to draw sort
00:06 - of like a pen so that one is a very free
00:08 - flow system here instead let's build a
00:10 - pixel art system so you can draw each
00:12 - pixel individually and then of course
00:14 - you can take those pixels turn them into
00:16 - an image to easily add modding to your
00:18 - games or anything like that so i'm going
00:20 - to cover drawing but also saving it as a
00:21 - png so you can use it in any way you
00:23 - want this one is actually pretty easy to
00:25 - do thanks to the super awesome grid
00:27 - system that i've built quite a while ago
00:29 - and in the end you can download the
00:30 - project files for the final scene and
00:32 - easily apply it to your game if you
00:34 - prefer a more guided path with
00:35 - step-by-step lectures then check out my
00:37 - complete courses learn how to make a
00:39 - builder defender game using c-sharp just
00:41 - like i make my own steam games or learn
00:44 - how to make games internally using
00:46 - visual scripting or learn all about
00:47 - unity with the ultimate overview course
00:50 - which contains over 13 lectures each
00:52 - covering a different tool or feature of
00:53 - the engine to help you make better games
00:55 - faster i'm always available in the
00:57 - courses q a section answering your
00:58 - questions every single day so check out
01:00 - all the courses with the link in the
01:01 - description okay so here let's build a
01:04 - simple pixel art drawing system
01:06 - now i've actually pretty much already
01:08 - built this before when i made the heat
01:09 - map video and i also did something very
01:11 - similar with the tilemap video
01:13 - so if you've been watching the channel
01:15 - for a while then you've already seen me
01:16 - use my grid system in so many occasions
01:18 - and this is yet another one where that
01:20 - system is perfect so once again yet
01:22 - another reminder of why you should write
01:24 - good clean code so you can reuse it many
01:26 - years in the future and use it in tons
01:28 - of different scenarios okay so here
01:30 - let's do it let's begin by making a
01:32 - script
01:33 - let's call it the pixel art drawing
01:35 - system
01:37 - then just make a game object and attach
01:40 - it
01:40 - okay so here the first thing we're going
01:42 - to do is set up the grind
01:56 - okay so i'm creating my grind now again
01:58 - if you're not familiar with this grid
02:00 - system go watch the entire playlist it's
02:02 - pretty easy to understand if you watch
02:03 - those videos so we have a grid and a
02:05 - grid object and the way it works is
02:07 - essentially every single position on the
02:08 - grid won't have an instance of this
02:10 - class so now let's think about what kind
02:12 - of data do we need for the grid object
02:15 - we're trying to draw some pixels and
02:16 - each grid position is essentially going
02:18 - to be one pixel so in here really all we
02:20 - need is just a color so let's just add a
02:22 - simple color
02:24 - now let's just do a quick test to see if
02:26 - all this is working correctly so on the
02:28 - grid class i've got a built-in debug so
02:31 - it shows a bunch of text and things so
02:32 - just set this one to true and yep we've
02:34 - got our 10 by 10 grin which is also over
02:37 - id2 string function
02:40 - and here just return the column without
02:42 - red just the red channel
02:46 - okay and all right so far so good we've
02:48 - got zeros on everything all right
02:50 - now let's do a quick test to be able to
02:51 - click and modify each position so for
02:54 - that let's do a simple price void update
02:56 - let's listen to the mouse button click
02:58 - so get mouse button down on the left
03:01 - mouse button
03:02 - when we do then we need the mouseworm
03:04 - position so i've got a nice function in
03:06 - my utilities to do that
03:08 - so my details class get the mouse wrong
03:11 - position
03:13 - here's the function in case you want to
03:14 - know how it works and also cover this
03:16 - topic in a dedicated video previously
03:21 - so you've got a mouse position now just
03:23 - going to the grid in order to get the
03:24 - grid object on this mouse position
03:27 - and then we just need the function to
03:28 - modify the color
03:37 - okay so we get the amazon position we
03:39 - get the grid object on that position and
03:41 - then we call the function set color and
03:43 - we change the column to red okay let's
03:45 - see so here i am everything on zero i go
03:47 - and i click on this one and there you go
03:49 - turns from zero into one all right
03:51 - awesome so essentially what we have here
03:53 - are our individual pixels and we can now
03:55 - click and modify any of them
03:57 - so the next step is to turn this debug
03:59 - visual into some actual proper visuals
04:02 - so for that i'm going to reuse the tile
04:03 - map class that i made in another video
04:05 - again go watch the whole playlist if you
04:07 - don't understand it the grid system and
04:09 - the grid time map are super easy to
04:11 - understand if you just watch the videos
04:12 - right from the beginning on the very
04:14 - first video this week class was created
04:16 - from scratch so here is the tilemap
04:18 - visual just rename it
04:21 - now here for the logic for the town map
04:23 - we had a specific timelapse for itv so
04:26 - it sorted some coordinates for some
04:27 - specific time map object values then
04:30 - just some logic to actually receive the
04:32 - grid object with the underlying data
04:34 - then it listens when any grid that only
04:36 - changes and if so then on late update it
04:38 - goes to update the mesh then for the
04:40 - mesh here it just cycles through the
04:42 - entire x then the entire y it generates
04:44 - a quad with a certain size based on the
04:46 - get cell size and then for each one of
04:48 - those essentially just adds a quad on
04:50 - that position
04:51 - so i'm just going to remove all the
04:52 - references to the tile map here so don't
04:55 - need any of this
05:19 - okay so i just removed all the
05:21 - references to the tile map so everything
05:23 - is very nice and simple now here we are
05:25 - generating each quad so it's in here
05:27 - that we have to decide what color we
05:29 - want to be
05:30 - now the tricky thing with this system is
05:32 - i really wanted to support pretty much
05:33 - any color so here the grid object has a
05:36 - color value which can be any color but
05:38 - as you know the mesh can only display
05:40 - things that are actually on the material
05:41 - you cannot just say print a random color
05:43 - it has to be somewhere on the material
05:46 - so first thing we need is actually make
05:47 - a texture with all of the possible
05:49 - colors
05:50 - and over here that's exactly what i've
05:51 - got so i'll literally just open up
05:53 - photoshop open up the color picker and
05:55 - just took a screenshot so here i've got
05:57 - all the colors going everything from red
05:59 - green blue and so on going from white
06:01 - into more saturated so i've got tons of
06:03 - colors now here we have an important
06:05 - question over here on the grid object we
06:08 - could technically keep storing just a
06:10 - color value so we color struct with rgb
06:13 - we could do that and then we convert the
06:15 - color into a position on the texture or
06:17 - we can just take the simpler approach so
06:19 - instead of storing the color itself all
06:21 - we do is really just store the position
06:23 - on the texture so let's go with that
06:24 - simpler approach so in here just swap
06:26 - out the film type instead of being a
06:28 - type color let's sort of type color 2
06:31 - and name it the color uv so just change
06:33 - this
06:42 - so now that we have a vector 2 for the
06:43 - color uv here
06:45 - then over here when we draw the quad
06:47 - it's insanely simple we just need to
06:48 - assign the uv to the actual uv that is
06:50 - stored on the grid object
06:54 - so just going to the grid object and
06:56 - let's get the color uv
07:04 - and we can use the grid uv 0 0 and 1 1
07:07 - as exactly the same since all we want is
07:09 - really just an exact color okay so just
07:11 - like this it should already be working
07:13 - up here on our testing instead of always
07:15 - using the same color let's make a simple
07:17 - color selector with a keyboard
07:27 - okay so just press a bunch of keys in
07:29 - order to change this one and then just
07:31 - do the same thing set column uv
07:33 - all right so let's test and here of
07:34 - course we also need an object with the
07:36 - visual so let's attach it and for this
07:39 - to work we need to add a mesh filter
07:42 - and a mesh render
07:46 - and we just need to assign the material
07:48 - and also on the script we need to pass
07:49 - in the grid to the visual after it's
07:51 - created
07:52 - so we need to call this function that's
07:53 - pretty much all the setup we need
07:55 - so we can add up here a serialized field
08:00 - and then on private.start we call set
08:03 - grid and pass in the grid
08:05 - all right so here we are and by default
08:07 - every pixel is in white that's because
08:09 - on the texture by default we've got e0
08:11 - so it's going to be this color now i'm
08:13 - going to press a key to select my color
08:15 - so now i should be painting in red and
08:16 - as i click if there go nice red squares
08:19 - everywhere okay so now i press another
08:21 - color so that is going to set a
08:23 - different color v and i print and there
08:25 - you go yep it does paint correctly
08:28 - alright awesome
08:29 - so just like this we already have the
08:31 - basics only working we could just add
08:33 - some buttons to select the color and
08:35 - really let the player draw anything so
08:36 - we're going to build that in a bit but
08:38 - now with this basic drawing let's
08:40 - actually go into the next task let's
08:42 - convert this into a png so we could then
08:44 - use it as a player sprite or player logo
08:46 - or anything by the way if you find the
08:48 - video helpful please hit the like button
08:50 - it's a tiny thing but it really does
08:51 - help thanks so first up let's do that
08:54 - logic on a key press what's that one
08:58 - so here let's do save image let's make
09:01 - this function
09:04 - okay now the first thing we need is to
09:06 - create the texture 2d that is the class
09:08 - that holds an image so a texture 2d
09:12 - and we're going to set it to the same
09:14 - size as the grid
09:21 - okay so now what we need is just to
09:23 - cycle through the whole thing and get
09:24 - the pixel color
09:26 - so pretty much the exact same thing that
09:27 - we're doing here so let's copy this loop
09:35 - so we cycle through the x and the y then
09:38 - with the grid object over here we've got
09:40 - the color uv so this one is a vector2 so
09:42 - we need to convert that into an actual
09:44 - pixel
09:45 - so that one is really easy we really
09:47 - just need a reference to the actual
09:48 - texture so here let's set a serialized
09:51 - field of type texture td
09:54 - for the color texture 2d
09:57 - and here we just drag the color
09:59 - reference so now using this
10:01 - we can simply do go up here and we call
10:04 - get pixel
10:06 - this one takes an x and y so we just
10:08 - need to do some math in order to convert
10:09 - the quantity uv into a pixel x and y
10:20 - okay so we just convert the normalized
10:22 - uv into an actual pixel value now here
10:25 - one very important note on the get pixel
10:27 - for this one to work we need to make
10:29 - sure that the texture is marked as read
10:31 - write so on the conversation you have up
10:33 - here on the settings here under advanced
10:35 - you see one for read write enabled so
10:37 - make sure this one is ticked okay so
10:39 - we've got the actual pixel so we have
10:41 - the actual color that we want to print
10:43 - so then really on the texture studio we
10:45 - created we're just going to call
10:46 - setpixel
10:48 - on this x this y and the color won't be
10:51 - the one that we get from here
10:56 - okay that's it so we're going through
10:57 - the entire grind and constructing this
10:59 - texture 2d with the exact colored pixels
11:02 - then afterwards we just do texture to
11:04 - the dot apply in order to apply our
11:06 - changes and now with this we can easily
11:08 - encode it into a png
11:10 - so we can go into the texture 2d
11:13 - and we call the function in code we can
11:15 - code into any of these but png is really
11:17 - nice
11:19 - so this one returns a byte array
11:20 - [Music]
11:24 - and with this we can go into the basic i
11:26 - system.io in order to file right on
11:29 - bytes and let's write the byte array
11:32 - and write a path
11:38 - okay so that's pretty much it let's try
11:40 - drawing something and saving okay so
11:42 - here let me draw just something
11:46 - okay that's pretty good now just press
11:48 - on p and there you go now it should have
11:50 - saved and yep in the project files here
11:52 - it is my pixel art file now it's super
11:54 - tiny because we just made really a 10 by
11:56 - 10 grid but yep here is our image
11:58 - all right awesome so for the final piece
12:01 - of the puzzle let's just load this image
12:03 - so that is also pretty easy
12:05 - let's make a different script just to
12:06 - handle loading
12:09 - here in order to load let's just do a
12:11 - five void start and on start first thing
12:14 - we need is also a texture 2d
12:17 - now here for the width and height you
12:19 - can leave it at zero when it loads it
12:20 - gets the correct size
12:22 - and for the texture format make sure you
12:24 - select the exact same one
12:27 - then just go into texture 2d and we can
12:30 - use the unload image function
12:33 - this one takes an array of bytes so we
12:35 - just need to get that so essentially
12:37 - just do the exact opposite of this one
12:46 - okay so now really just show this
12:48 - somewhere
12:52 - so we just go into the mesh renderer xsd
12:54 - material and modify the main texture to
12:56 - this texture that we just loaded so here
12:58 - we can just create an object let's make
13:01 - this a simple quad
13:02 - put it off to the side and really just
13:04 - attach the pixel art mode and yep over
13:07 - here is the unloaded image now again
13:09 - since we're just saving a really tiny
13:11 - image just 10 by 10. over here unt by
13:14 - default tries to use some bi-linear
13:15 - interpolation if you want to be pixel
13:17 - perfect then in here on the texture 2d
13:19 - just set the filter mode
13:22 - and just set it to filter mode dot point
13:24 - and yep here it is our nice image that
13:26 - we just saved and we are now loading as
13:28 - another example here i've got my
13:30 - character and i can walk around this
13:32 - world and over there is a nice bus stop
13:35 - and instead of being just a boring
13:36 - default image i can press a button and
13:39 - you have to look at that my drawing is
13:40 - now showing up on this billboard all
13:42 - right awesome so you can imagine
13:45 - combining this with some sort of web
13:46 - server or maybe the same workshop and
13:48 - you could have the player draw something
13:50 - and easily share it with others here is
13:52 - my final drawing demo
13:53 - so i just built upon that i added the
13:56 - color picker down here as you can see
13:58 - the texture now has multiple
13:59 - brightnesses so it's not just with one
14:01 - level of saturation also on the edges
14:03 - there are some transparent parts so i
14:05 - can click on it in order to select the
14:07 - color and you can see the color over
14:08 - there the color picker on that side so
14:10 - as i click and i move around i can
14:12 - select any of these colors now as for
14:14 - how this color picker works this one is
14:16 - just placed on a simple quad mesh then
14:18 - i'm doing a raycast and getting the
14:19 - texture coordinate so this is exactly
14:22 - the same thing that i covered in my
14:23 - rubber mechanics simulator video in
14:25 - there i use this method to clean a part
14:27 - and here i'm doing the same thing just
14:29 - to select a simple color so i can pick
14:32 - any color i want let's say i want a nice
14:34 - yellow and then i can just click and
14:36 - drag in order to draw anything i want
14:38 - then over here i also added these
14:40 - buttons in order to change the brush
14:41 - size so i can make it really big and
14:43 - paint tons of pixels or make it really
14:45 - small and just paint the handful
14:48 - so i can draw whatever i want
14:50 - and then over here i also got a really
14:52 - nice save button so i can press on it
14:54 - and there you go it automatically saves
14:55 - the png and over here it loads it to see
14:57 - what it looks like
14:58 - so here is the pixel png found with my
15:00 - image
15:01 - and here it is in the game then of
15:03 - course like i said you can use the png
15:05 - in any way you want
15:06 - so this bombard demo is really just an
15:08 - example of loading that image on that
15:10 - place
15:10 - but you can also use it maybe to let the
15:12 - player draw their own face maybe draw
15:14 - their own icon for a shop maybe draw
15:16 - some decals on a car or anything you
15:17 - want so as you can see there's tons of
15:19 - possibilities for using this system so
15:21 - this one is a really nice pixel drawing
15:23 - system and if you want a more free flow
15:25 - drawing system you can go watch the
15:27 - previous video alright hope that's
15:29 - useful check out these videos to learn
15:30 - some more thanks to these awesome
15:32 - patreon supporters for making these
15:34 - videos possible thank you for watching
15:36 - and i'll see you next time
15:41 - [Music]
15:44 - you