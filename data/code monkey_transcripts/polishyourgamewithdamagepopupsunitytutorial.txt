00:00 - in this video we're going to create some
00:01 - nice damage pop-ups to show how much
00:03 - damage the player don't the damaged
00:06 - pop-up will have various effects like
00:07 - scaling and fading to make it very
00:09 - satisfying let's begin
00:14 - [Music]
00:18 - hello and welcome I'm your code monkey
00:21 - and this channel is all about helping
00:22 - you learn how to make your own games
00:24 - with nf2 torrents made by a professional
00:26 - indie game developer so if you find the
00:28 - video helpful consider subscribing
00:29 - alright so this is what we want to
00:31 - create I have my character here that I
00:33 - can move around and shoot there are
00:35 - enemies being spawned and what we want
00:36 - is some damage pop ups when we hit them
00:38 - examine like that it pops out and shows
00:41 - the damage that the enemy took the
00:44 - damage pop up then moves away and
00:45 - vanishes it's different for critical
00:48 - hits and everything looks very great and
00:51 - very satisfying okay so this is the goal
00:55 - let's get to it okay so to do that we're
00:58 - going to first create a prefab that we
01:00 - want Senshi ate when the unit takes
01:02 - damage so let's make a new empty game
01:04 - object and in this the PAF damage pop up
01:07 - let's add the text mesh Pro component
01:13 - here is our text object let's set up to
01:19 - have a nice outline and change the color
01:26 - okay that's our prefab with a nice color
01:29 - nice outline and a nice number as you
01:32 - can see it's aligned on the left side on
01:33 - the bottom with wrapping disabled and
01:35 - over foil on overflow okay to use this
01:38 - as a prefab let's drag it into our
01:40 - project folder in there yo there's our
01:42 - prefab right now let's write some code
01:45 - first let's make a new c-sharp script
01:48 - this won't be our testing script just
01:52 - drag it onto any game object like that
01:54 - and let's delete our prefab from our
01:56 - scene okay now let's edit this script
02:00 - okay so in here let's just test spawning
02:03 - our prefab so for that let's do a
02:05 - private void start and in here we want
02:09 - to call instantiate to spawn our prefab
02:11 - now in here we need a reference for that
02:14 - prefab so let's go up here make a
02:16 - private transform for our pf' damage
02:19 - pop-up make it a serialized field so we
02:23 - can set it in the editor
02:26 - so here in the editor we can now drag
02:28 - our prefab reference there it is it's
02:31 - now instantiate using our damage pop-up
02:34 - reference let's put it on vector 3.0 and
02:37 - put quaternion that identity so it is
02:40 - not rotated okay so let's test and see
02:42 - if our prefab is indeed being in sin she
02:44 - ate it on these zero zero and yep there
02:47 - it is there's a prefab in sin she ate a
02:49 - non zero zero okay so now let's make a
02:52 - clasp to handle our pop-up so make a new
02:55 - c-sharp script
02:56 - this will be our damaged pop-up and
02:58 - we're going to drag this script on to
03:01 - our prefab so let's open the prefab here
03:03 - we are on the main damage pop-up and
03:05 - simply drag our script okay now let's
03:09 - open the script in here and let's start
03:13 - off by making a setup function so we do
03:15 - a totally void setup here we will
03:18 - receive the damage value that we don't
03:20 - set so an input the damage amount now we
03:23 - want to set our text so first we need a
03:25 - reference to the text mesh Pro object so
03:28 - we're going to grab that reference on
03:30 - our private void awake
03:39 - okay so we have the reference to our
03:41 - text mission we can simply go and set
03:43 - the text to our damaged amount you need
03:47 - to convert it into a string and just
03:49 - like that okay so now let's go back into
03:52 - our testing class and in here we
03:54 - instantiate the damage problem let's
03:56 - prep the reference to that or the damage
03:58 - pop-up and now we need to grab a
04:03 - reference to the script so the damage
04:05 - pop-up script is from the transfer
04:09 - market component of type damage pop-up
04:12 - and then we call our setup function so
04:17 - right now let's give it a value of 300
04:19 - okay so let's see if our prefab doesn't
04:23 - need say 300 and yep there it is the
04:26 - prefab wasn't sent yet on zero zero and
04:29 - it does say 300 okay great so back in
04:32 - our code here well it's clean this up to
04:35 - make sure that all of this code is
04:37 - contained entirely in the damage pop-up
04:39 - class so let's make this class
04:41 - responsible for creating the prefab so
04:44 - in here let's make a public static this
04:46 - will return a damage pop-up and let's
04:49 - call this the create function this will
04:53 - be the function responsible for creating
04:55 - our damage pop-ups so in here we're
04:58 - going to do exactly what we were doing
04:59 - in here so let's copy this code now in
05:04 - here the first thing we need is a
05:05 - reference to our prefab so for that I'm
05:08 - going to go into the game assets class
05:11 - so here is that class this is a class
05:14 - that I use in pretty much on my projects
05:16 - it allows me to have references to my
05:17 - assets anywhere in my code it was built
05:20 - in a previous video so check that out
05:22 - for an in-depth look but essentially
05:24 - it's very simple there's this script
05:26 - with a static instance and the script is
05:29 - attached to an object in my scene
05:31 - so in this code I can add a new field so
05:34 - in this case I want a transform for the
05:37 - PF damage pop-up
05:40 - so I went the film to this class now I
05:43 - can go back in the editor and here you
05:46 - can see the reference for the damaged
05:48 - pop-up so I can drag my reference and
05:50 - with this reference set I can now go
05:52 - back into my script and here I can grab
05:54 - the reference from that class so game
05:55 - assets grab the instance and the damage
05:57 - popper
05:58 - so essentially this is a very good way
06:00 - to keep one object that holds all my
06:02 - references and be able to access those
06:04 - references anywhere else in my code so
06:07 - in here we have the reference for our
06:08 - prefab and here let's receive a vector3
06:12 - for the position and an in for the
06:15 - damage amount so the position is what
06:17 - we're going to use in here to spawn our
06:19 - prefab any damaged amount is what we
06:21 - call on our setup and just like that
06:26 - this function is internally contained in
06:28 - this script so I can now go back into
06:31 - the testing code in here I no longer
06:34 - need this reference all I need in order
06:37 - to instantiate the new pop-up is going
06:38 - to the damage pop-up class and create a
06:41 - new pop-up so let's put it on vector 3.0
06:44 - and again say 300 so let's see if the
06:47 - pop-up is still spawning exactly as
06:49 - previously and if there it is the pop-up
06:51 - will spawn and it is indeed in there
06:53 - okay great so our code is now much more
06:56 - clean and much more easy to use now one
06:59 - thing we probably want is for the pop-up
07:01 - to always be on top so if we go into the
07:04 - prefab in here on the text mesh pro
07:06 - component we can go into the extra
07:09 - settings and here we can sort our
07:11 - sorting layer so let's create a new
07:14 - sorting layer to put it on top of all
07:16 - the others here are the sorting layers
07:20 - and we simul create a new layer this
07:22 - will be the top layer which won't render
07:25 - on top of the default layer so now we
07:27 - can go back in here and down here set
07:29 - the sorting layer from default and put
07:31 - it on the top so since our characters
07:34 - are being rendered on the default layer
07:36 - this should make sure that our pop-ups
07:37 - are always on top let's see and if there
07:41 - is there's my character standing behind
07:42 - the pump okay great so with that working
07:46 - now let's work on making the puppet move
07:48 - over time so let's go into the damage
07:51 - pop-up class
07:53 - and here let's make our private Boyd
07:58 - update so in here we move the pop-up up
08:01 - by going into transform dot position and
08:04 - we increase the position by new vector3
08:06 - we don't move it on the X and we want to
08:08 - move it on the one let's define here a
08:11 - fold for the move Weinstein you move it
08:17 - up by that amount and x time down to
08:19 - time okay so this should move our pop up
08:22 - upwards at a constant speed
08:24 - let's test to make testing better
08:26 - instead of spotting one on start let's
08:28 - spawn one every time we click the mouse
08:30 - so let's make a protoid update let's
08:35 - check if input not yet mouse button down
08:38 - so when we click on the on left mouse
08:40 - button
08:40 - let's funny pop up on the mouse position
08:43 - so we go into damage pop-up and we
08:45 - create now we need the position and for
08:48 - that I can use a function from the code
08:50 - monkey utilities this function returns
08:57 - the current mouse world position as long
09:00 - as you can download the utilities for
09:01 - free from unity code monkey comm so with
09:04 - passing the mouse world position and
09:06 - then let's pass in a certain value so
09:09 - here let's put just a honey okay so
09:12 - every time we press the left mouse
09:13 - button we should be able to see a damage
09:15 - pop up on the mouse position and that
09:18 - pop up will also be moving upwards over
09:20 - time so let's see okay here we are
09:23 - here's my Karen and if I click give
09:25 - there you go there's the pop up saying
09:27 - the amount and it is indeed going up so
09:29 - I can shoot and if they're all going up
09:32 - and going up non-stop and they never
09:34 - stop okay so far so good
09:36 - alright so now obviously we don't want
09:40 - the pop up stone live forever so let's
09:42 - make them disappear slowly after some
09:44 - time so for that let's define a private
09:47 - quote this will be our disappear timer
09:51 - so this will store the number of seconds
09:54 - until the pop-up shoots start
09:56 - disappearing so on our update let's
09:58 - count down that time so we reduce it by
10:01 - time
10:02 - time okay and now if it is under zero
10:07 - then we want to start disappearing in
10:13 - order to disappear we're going to modify
10:14 - the text alpha so for that we modify the
10:16 - text mesh color so now we need a color
10:20 - object so for that let's also store it
10:23 - in here our private color for the text
10:25 - color and we're going to grab this color
10:28 - on our setup so we grab the color based
10:30 - on the text mask on okay so in here in
10:34 - order to start disappearing we simply go
10:36 - into the color and we reduce the Alpha
10:38 - by a certain amount so it float for the
10:41 - disappear speed and we reduce it by the
10:47 - disappear speed multiplied by time dot
10:49 - all the time
10:50 - and finally we set the text measure
10:53 - color to this text color okay so now
10:56 - finally all we need is to set the
10:57 - disappear timer so let's go in here and
10:59 - set it to one F so this time we won't
11:02 - count out in one second after one second
11:04 - has elapsed this code won't start to run
11:06 - and this code won't start to reduce the
11:09 - text color alpha so as to make the text
11:11 - disappear slowly so one final thing is
11:14 - to test if the text color the Alpha is
11:16 - under zero then that means the pop-up is
11:19 - completely invisible so we can safely
11:21 - destroy alright that you do it let's see
11:27 - so here we are and if I click there's
11:31 - the pop-up going up and yep there you go
11:32 - after one second it started to vanish in
11:34 - if I pause the game there you go there's
11:36 - no pop up anywhere to be seen
11:37 - so again I can spawn more and there you
11:40 - go after a while they go up and they do
11:43 - that yep there we go okay well so with
11:49 - the basic pop-up moving up and vanishing
11:51 - now let's have a nice difference for
11:52 - critical hits
11:54 - so on our create function in here will
11:56 - receive the position the damage amount
11:58 - and let's also receive a boolean for is
12:00 - a critical hit we're going to pass this
12:05 - over to the setup function now let's go
12:08 - into the setup function and here a ball
12:10 - for T is critical hit
12:13 - and now if it is critical let's increase
12:16 - the font size and set the color to red
12:19 - so first we set the text mesh dot font
12:22 - size by default it's going to be at 36
12:27 - which is what we are currently using but
12:31 - let's do if it's not a critical hit so
12:41 - for a normal hit we set the font size to
12:42 - 36 and for a critical let's say 45 let's
12:46 - also set the text color so we can
12:48 - actually define the function in here so
12:52 - the normal color won't be this one so
12:54 - let's copy this hex code and here I can
12:57 - use a function from the utils class to
13:00 - get the color from string and I pass in
13:01 - the hex string so this is the normal
13:03 - color and nice yellow and for the
13:05 - critical hit let's grab a red cone okay
13:09 - this color shouldn't be good so let's
13:10 - copy this code and here instead of
13:13 - setting the text color we set the text
13:15 - mesh to the define text comment okay so
13:19 - that's pretty much it now we should have
13:21 - a nice difference for when we get a
13:23 - critical hit so now let's go into our
13:25 - testing code and here I'm let's define a
13:28 - poll is critical hit and let's only do a
13:32 - random so so we're just doing a random
13:39 - chance of 30% to be a critical hit so
13:43 - just like that we should be able to test
13:44 - let's see okay so here we are now if I
13:47 - click there you go there's a normal hit
13:49 - going up and vanishing and a bunch more
13:51 - hits and you have there you go that was
13:52 - a critical hit as you can see the font
13:55 - size is bigger and it is tinted in red
13:58 - okay great everything is working so far
14:01 - now let's add some more cool effects so
14:05 - first let's make the scale increase and
14:07 - then decrease so here now let's define
14:09 - our maximum for the disappear timer so
14:11 - we can do a different scale in the first
14:13 - half and in the second half so we do a
14:15 - private concert for the disappear timer
14:19 - max let's use the same that we were
14:22 - using in here okay so now we have the
14:26 - maximum and we know we are accounting
14:28 - down into zero so for that we can go
14:31 - into our update and here let's check if
14:35 - we're above half of the maximum so if
14:37 - disappear timer if it is bigger than the
14:41 - timer max multiplied by half so
14:47 - essentially we're in the first half of
14:49 - the pop up and lift up then we are on
14:55 - the second half so in the first half
14:59 - let's increase the scale and on the
15:00 - second half decrease it so on the first
15:11 - half of the pop-up lifetime we are going
15:13 - to increase the scale and on the second
15:15 - half we're going to decrease it so he's
15:16 - going to get bigger and then smaller
15:18 - okay let's see that effect okay here we
15:22 - are right click and there you go it gets
15:24 - bigger and then smaller okay now instead
15:27 - of moving up let's move them up and to
15:29 - the side so in here instead of using a
15:32 - float for the move Y speed and let's
15:34 - store a vector3 one set up let's define
15:39 - that vector
15:44 - so this vector contains both the
15:46 - direction as well as a spin and now on
15:49 - update let's move it by this vector
15:51 - instead of by the move Y speed okay and
15:55 - then let's decrease this vector okay so
15:59 - we move our transform by the move vector
16:00 - and then we reduce the move vector on
16:02 - every frame so I've said the valleys to
16:05 - make it some nice snappy movement so
16:06 - let's see okay here we are and when I
16:09 - click there you go as you can see it
16:11 - moved to the right moves quickly at
16:13 - first and then it slows down okay so far
16:17 - our effect is looking great now we still
16:19 - have one issue which is as you can see
16:21 - sometimes they don't always have the
16:24 - correct sorting so if I put two the
16:27 - second one should be on top but
16:28 - sometimes they don't go so let's see for
16:31 - that we just need to make sure that
16:33 - later pop-ups go on top of earlier ones
16:35 - so we can simply go in here and create a
16:39 - private static end for the sorting order
16:43 - and on our setup we increase the sorting
16:48 - order then we set the text mesh Tori
16:53 - order to the new sorting order so every
16:56 - new pop-up will correctly be on top of
16:58 - the earlier ones
16:59 - so all that's left is to take all this
17:02 - code and apply it to our player so here
17:05 - is the player code here I'm doing your
17:08 - ray cast to see if I hit the any enemy I
17:09 - get the enemy that I hit then I
17:12 - calculate a random damage amount and
17:14 - check if it is a critical so it's in
17:17 - here that we can add our nice damage
17:18 - pop-up by simply going into the image
17:20 - pop-up and create for the position let's
17:26 - spawn it on top of the enemy so the
17:28 - enemy handler has a get position
17:30 - function
17:30 - let's pass in the damage amount and is
17:33 - critical and that's it as you can see
17:37 - it's very simple to add this extra fact
17:38 - into already existing code now let's
17:42 - remove our testing code and test out the
17:46 - player shooting enemies okay here's the
17:49 - player moving around and if I shoot into
17:51 - nothing nothing happens and I should the
17:52 - enemy any of there you go there is a
17:54 - nice damage pop-up showing how much
17:56 - damage
17:57 - enemy took and there you go and the
17:59 - effect looks very nice very satisfying
18:01 - and everything works exactly as intended
18:04 - I can shoot the enemies and yep
18:06 - everything looks great we got critical
18:08 - hits we got random damage and yep it all
18:11 - looks great so there you have it we
18:15 - created some very nice damage pop-ups
18:17 - that we can easily add into our game the
18:20 - various effects of moving the pop-up
18:21 - changing the scale and making it
18:23 - disappear make the whole effect look
18:25 - great as always you can download the
18:27 - project files in utilities from Yenta
18:29 - code monkey comm if you liked the video
18:31 - subscribe to the channel for more unity
18:33 - tutorials post any questions you have in
18:35 - the comments and I'll do my best to
18:37 - answer them alright see you next time
18:40 - [Music]