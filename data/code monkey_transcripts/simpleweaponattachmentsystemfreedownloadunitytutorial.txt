00:00 - hello and welcome I'm your code monkey
00:01 - and here is a simple but really nice
00:04 - weapon attachment system I've got a
00:06 - weapon that I can rotate around I've got
00:08 - these buttons for the very spots and as
00:10 - I click on them I can modify them load
00:12 - out to anything that I want
00:14 - I've got multiple weapon bodies so I can
00:16 - modify a piston only roughly a rifle B I
00:18 - can randomize all of this even though
00:20 - this is pretty simple I did the math and
00:21 - just with this I can already create 237
00:24 - 000 unique weapons so anything from
00:26 - Pistons to SMGs snipers rifles and so on
00:30 - then when I find the load that I like I
00:32 - can save it and yep over here are my
00:34 - nice save files all of them with a nice
00:36 - screenshot and I can click to load any
00:38 - of these weapons then I can also go into
00:40 - play mode and have a character equip my
00:42 - custom weapon you can go ahead and
00:44 - download the project files and inspect
00:45 - the system for yourself the reason why I
00:47 - made this is because right now there's
00:48 - an awesome sale happening on the Senti
00:50 - store pretty much all of their packs are
00:52 - currently at Half Price personally I
00:53 - love their low poly style I covered lots
00:56 - of potential games you could build with
00:57 - these ads in the sale of review video
00:58 - and on top of the Wrangler discounts
01:00 - they have a flash deal every week with
01:01 - an even deeper discount this week the
01:03 - massive discount is on the military pack
01:05 - which is exactly what I use to make this
01:06 - system this one has over 1500 prefabs
01:09 - with a modern military setting it
01:11 - includes lots of very customizable
01:13 - characters several intro bone buildings
01:15 - and environments it has tons of Tanks
01:17 - planes helicopters and regular cars and
01:19 - of course it has tons of weapons
01:21 - including lots of modular Parts which is
01:22 - what I use to make this system check out
01:24 - the entire ceiling the military packing
01:26 - in the description the special deep
01:27 - discount is only running this week so
01:30 - now let's inspect the system that I
01:31 - built it came out quite well thanks to
01:33 - using these awesome assets and building
01:35 - this was actually pretty easy I thought
01:37 - it would be quite a bit more complex but
01:39 - it ended up being a relatively simple
01:40 - system
01:41 - I burnt it in about 10 hours total
01:43 - Muslim logic was actually done during a
01:45 - live stream the rest of time was spent
01:47 - on design and publish so if you want to
01:49 - see how I work in real time you can go
01:51 - ahead and watch that live stream and you
01:53 - can download the project files Link in
01:54 - the description it contains all of the
01:55 - logic you can use it with whatever asset
01:58 - pack you want but if you also pick up
02:00 - the military pack and import it into the
02:01 - same project everything should load
02:03 - correctly so let's see how this symbol
02:05 - system works
02:06 - here I have a weapon and I can swap
02:09 - between the various bases so I can
02:11 - modify a pistol a rifle a or a rifle B
02:14 - now here I see the various attach points
02:16 - for this system so I can modify the
02:18 - barrel scope stock grip and so on then
02:20 - when I'm happy I can save this loadout
02:23 - and if it shows over here on the side
02:25 - then load it out with a real nice
02:26 - screenshot I cover the full tutorial on
02:28 - how to do this in a previous video so
02:30 - here I pretty much just reuse the code
02:32 - from that video I can click on any of
02:34 - these to load these loadouts then I can
02:37 - go into play mode and it appears my
02:39 - character using my weapon with my chosen
02:40 - leather
02:41 - all right great so let's look at all the
02:44 - code that makes this work now I
02:46 - refactored the code quite a bit after
02:47 - the live stream so if you're watching
02:49 - live stream the way that the code is set
02:50 - up now is a bit different and once again
02:52 - this is an excellent example of how
02:54 - refactoring is a perfectly normal part
02:56 - of the process what you saw in the live
02:58 - stream is exactly how I work so first I
03:00 - focus on making it functional and then I
03:02 - clean up the code so instead of having
03:04 - just one script do everything the code
03:06 - is now much better split into multiple
03:08 - Parts there is a weapon complete script
03:10 - that represents the final complete
03:12 - weapon there is a weapon body which
03:14 - holds references to all the various
03:16 - attach points and then there's a weapon
03:18 - part for each part
03:19 - so here on the weapon complete script
03:21 - there is a simple function in order to
03:23 - set a brand new part for each part the
03:25 - data is obviously stored in a nice group
03:27 - model object if you don't know about
03:29 - them go watch my dedicate video they are
03:31 - extremely useful
03:32 - you can create objects at home whatever
03:34 - that you want so in this case they hold
03:35 - all the data for each part
03:37 - here is the entire definition
03:39 - and really there's just a type enum to
03:42 - identify what weapon part it is so it is
03:45 - a barrel a stock grip or so on it holds
03:48 - that and then as well unless you
03:49 - reference to the prefab now also one
03:51 - note here as you can see I made this
03:52 - system just based on visuals but of
03:54 - course you can add whatever that you
03:55 - want in this workable object so if you
03:58 - wanted the parts to modify some kind of
03:59 - weapon stats then you could Define that
04:01 - data here in the same script long object
04:03 - so back in the weapon complete script
04:05 - over here for the set part this function
04:07 - first destroys the currently attached
04:09 - part then just goes into the so grabs
04:11 - the prefab in order to spawn it for
04:13 - spawning it it needs to know where it
04:15 - should spawn that object and for that
04:17 - it's actually handled in a dictionary so
04:19 - if we go up here we see we have a
04:21 - dictionary where the key is of type part
04:23 - type and the value is of this class that
04:25 - I made and this one you can see up here
04:28 - it has the weapon part of the cell and
04:30 - the spawn transform so these are the
04:31 - objects that have been spawned on this
04:33 - part right now
04:34 - as well as this type of part-time attach
04:36 - point
04:37 - and this one here is definition once
04:39 - again just has a part type and then a
04:40 - reference to the transform of where that
04:42 - part attaches so if I inspect the weapon
04:45 - bunny for example here is the referral B
04:46 - body
04:47 - inside I've got a game object for the
04:49 - attach points and inside I've got pretty
04:51 - much just empty game objects defining
04:52 - all of the attached positions so you can
04:54 - see the grip is attached in there so
04:55 - this one's actually reversal like this
04:57 - you can see there's the grip then over
04:58 - there you attach the stock then the
05:00 - scope the barrel and so on also one
05:02 - important thing over here
05:04 - as I said in the code I'm using a
05:05 - dictionary but as you might also know
05:07 - dictionaries do not show up in the
05:09 - editor if you make a serialized field of
05:12 - type dictionary then nothing shows up so
05:14 - to solve that I just expose a simple
05:16 - list of this type then here on the rifle
05:18 - body yep there it is my part-time
05:20 - attachment list here on the elements
05:22 - which as you can see they've got a part
05:23 - type and then the corresponding
05:25 - transform so there you go all the
05:27 - various attached points and then through
05:29 - code over here on the web and complete
05:31 - when we have the awake it just
05:33 - initialize that dictionary it goes in
05:35 - the weapon body gets a list and
05:37 - instantiates the dictionary with all of
05:38 - these keys
05:39 - so that's how I solve the problem where
05:41 - dictionaries do not show up in the
05:43 - editor so with that continuing over here
05:45 - the set part
05:46 - with dictionary now I've got a reference
05:48 - to what should be the parent for the
05:49 - spawn part transform so I just go inside
05:52 - dictionary using the key for the spawn
05:53 - part type for the part that we want to
05:55 - spawn
05:56 - just instantiate it change the parent
05:58 - and also make sure to reset the Euler
06:00 - angles into position just make sure
06:01 - everything is positioned correctly
06:03 - just to that and then finally update the
06:05 - dictionary honestly this is only most of
06:07 - how this system works it's really just
06:09 - this one simple function that makes most
06:11 - of it work
06:12 - it's really just a clever use of
06:14 - scriptable objects attach points and
06:15 - weapon part types as you can see this
06:18 - function is very generic just takes a
06:19 - generic weapon part of the cell then the
06:21 - weapon part defines the part type and so
06:23 - on so just this one function can handle
06:26 - changing barrels changing stock magazine
06:28 - and so on here in the body all of the
06:30 - various attached points they were
06:32 - positioned manually
06:33 - however the one tricky part was actually
06:35 - ending the muzzle
06:36 - this one is tricky because the position
06:38 - of this attached point is originally
06:40 - related to the size of the barrel
06:42 - so if I have this rifle and I've got a
06:44 - tiny barrel then the Muslim position
06:45 - should be here
06:46 - so if I attach something to the barrel
06:48 - light and let's say a silencer now if I
06:51 - make the barrel bigger you can see the
06:52 - Muslim position needs to change
06:54 - and how I solve this problem was also
06:55 - pretty simple
06:56 - for that I made yet another scriptball
06:59 - object type except for this one instead
07:01 - of extending certain object this one
07:03 - extends weapon apart so it extends that
07:05 - one and simply adds an extra film for
07:07 - the muzzle offset this way over here I
07:09 - have all of my various weapon parts Corp
07:11 - objects there you go which is those two
07:13 - Fields however for the barrels you can
07:15 - see they belong to a different script
07:17 - and they have the extra muzzle offset
07:18 - this is a much better option than adding
07:21 - the muzzle offset to all of the weapon
07:23 - parts that way things that don't need
07:25 - any kind of offset they would also have
07:26 - that unnecessary data whereas this way
07:28 - only the barrels have that data this is
07:31 - an excellent example to remember how you
07:33 - can always extend script objects just
07:34 - like you can extend any c-sharp class
07:37 - then for the UI each body also has a
07:39 - corresponding UI prefab so here it is
07:42 - it's a canvas that is World space the
07:45 - reason why I made them in World space is
07:46 - so that I can move the weapon around and
07:48 - the buttons move with it so that looks
07:49 - really nice I've used World space canvas
07:52 - in a bunch of videos they are really
07:53 - simple
07:54 - you really just make a canvas and you
07:56 - set the render mode into one space
07:59 - finally as the weapon rotates in order
08:00 - to make it action and look towards the
08:02 - camera for that I have a very simple
08:04 - script here it is you can look at camera
08:06 - script really just on late updates at
08:08 - the transformer.thorne equals to the
08:09 - same as the camera main transform
08:11 - forward I also did this exact same thing
08:13 - although with a bit more options in my
08:15 - free course I use the same world space
08:17 - canvas method for the various progress
08:18 - bars in that game
08:20 - and the script for handling the buttons
08:21 - is also pretty simple
08:23 - for defining what button references what
08:25 - part type for that I just created a nice
08:27 - serializable class and once again expose
08:30 - a serialized model list for it so here
08:32 - in the editor I've got the weapon body
08:33 - UI and yep I added all of the films with
08:35 - all of the parts so the barrel and I got
08:38 - a reference to the barrel button and
08:39 - inside the text and so on
08:41 - and then I just sign on through the list
08:43 - and add a click listener to the button
08:45 - and simply go into the weapon attachment
08:47 - system and modify the part on that part
08:49 - time some of the buttons are really
08:51 - pretty simple
08:52 - they are just basic clickable buttons
08:54 - that I can click to modify any part
08:56 - and I also made different prefabs for
08:58 - different bodies since each body has a
09:00 - different number of attach points
09:02 - speaking of bodies that was the most
09:03 - recent thing about making this system
09:05 - handling the various base bodies
09:07 - basically you cannot attach every module
09:10 - part to every base body for example over
09:12 - here on the pistol it does not make
09:14 - sense to have a stock or maybe a longer
09:16 - Barrel
09:17 - and some of the modular Parts on this
09:19 - asset pack are only meant to work with
09:20 - certain types so there's roughly in
09:22 - Rifle B those are very different this
09:25 - roughly is kind of like an M4 whereas
09:27 - the rifle B is kind of like an AK
09:29 - so they have different modular pieces
09:31 - because they have very different body
09:32 - shapes
09:33 - to handle that I just defined another
09:35 - script object for the various body
09:37 - shapes
09:38 - they hold the body type the prefab that
09:41 - spawns just about itself the prefab for
09:43 - the UI without various buttons and then
09:46 - for handling the limitation on the parts
09:47 - each of these bodies has the enlist
09:50 - object this is another Circle object
09:52 - this just holds a list of weapon part so
09:54 - and this one basically is the list of
09:56 - all the parts that I've rallied with
09:57 - this specific body
09:58 - so this is how I can very easily Define
10:00 - that for example rifle a if I go over
10:03 - here and I check the weapon list
10:05 - you can see it only has weapon a stock
10:07 - weapon a MAG and so on and it does not
10:09 - have the script No Object Parts over
10:10 - here for the weapon B
10:12 - so with this I can modify I can choose
10:14 - any of these base bodies and yep they
10:16 - only use the parts that are available to
10:18 - that body
10:19 - another fun feature is just over here
10:21 - the randomize button this one was super
10:23 - easy to implement
10:25 - it's really just this function so it has
10:28 - the weapon complete to give it a list of
10:29 - all of the weapon part types
10:31 - so for example over here the pistol that
10:33 - would return a list which is Scopes
10:34 - muzzles and Max
10:36 - then just Cycles through all those part
10:38 - types generate a random amount between 0
10:40 - and 50 and just calls change part to
10:43 - change the part that many number of
10:44 - times
10:45 - so really just some super simple logic
10:48 - and yep it randomizes all the parts and
10:50 - really creates some nice interesting
10:51 - results
10:52 - this one is another example of a feature
10:54 - that was super easy to add thanks to how
10:56 - all the code is set up in a nice clean
10:58 - way then for the mechanic to click to
11:00 - drag to rotate the weapon
11:02 - that one is handled over here in this
11:04 - script
11:05 - just on update to see if the mouse is
11:07 - down
11:08 - which by the way of course you could use
11:09 - the new input system I covered it in
11:11 - detail in another video
11:13 - I normally start my projects within
11:14 - Legacy input manager and after a while I
11:17 - converted to use the new input system
11:18 - that's exactly what I did in my free
11:20 - complete course
11:21 - so anyways here I'm using the input
11:23 - manager I simply test if the mouse is
11:25 - down if so I grab the mouse position and
11:27 - then I have field which stores the in
11:29 - last Mouse position so by doing some
11:30 - math I can basically calculate the mouse
11:32 - Delta meaning how far the mouse moved
11:35 - since the last frame
11:36 - and then with that I simply use it to
11:39 - modify the local angles in order to
11:41 - actually rotate the weapon then during
11:43 - the live stream also notice a very
11:45 - strange bug basically if I clicked
11:47 - outside of unity so the ENT win the last
11:49 - focus and then clicked back inside of it
11:51 - sometimes the mouse Delta was huge and
11:53 - sometimes the weapon would just randomly
11:55 - flip 180 degrees that was very strange
11:58 - but it was a simple fix just over here
12:00 - just clamped the mouse down to values so
12:03 - if they are super huge in any direction
12:04 - really just clamp them to a normal
12:06 - amount and everything worked perfectly
12:07 - so making the weapon rotate is really
12:09 - basic really just this grip so less than
12:12 - 15 lines of code
12:13 - if you want to see a system similar to
12:15 - this one then check out my how to
12:16 - inspect objects tutorial
12:18 - that one is a really fun system to add
12:20 - to any game where you want to inspect
12:22 - objects that tutorial is a bit more
12:24 - complex than this one since it involves
12:25 - rotating objects within the UI but the
12:27 - core concept is really the same as here
12:30 - okay so then handling the saving and
12:32 - loading
12:33 - now I covered how I normally handle
12:35 - saving and loading in a video quite a
12:37 - long time ago but despite that video
12:38 - being quite old I still do the exact
12:40 - same thing nowadays
12:41 - so inside the weapon complete script
12:43 - over here I just defined a class for a
12:45 - save object and inside I just put all
12:48 - the data that I need to save which in
12:50 - this case really is just the weapon body
12:51 - so so I know which one is the base body
12:53 - and then just a list of all the parts
12:55 - attached to that loadout now at this
12:58 - point when I made this in the live
12:59 - stream I wasn't actually sure if Json
13:00 - would automatically serialize a script
13:02 - Mall object but thankfully it does so up
13:05 - here for the save function it is all
13:06 - super easy it really just creates a save
13:09 - object assigns all of the various SOS
13:11 - and we'll just use the Json identity to
13:13 - convert into Json and yep that's it
13:15 - everything works perfectly now if you
13:17 - don't know about Json I also covered it
13:19 - in a previous video then for the loading
13:21 - it's also equally easy just takes a Json
13:24 - string as a parameter then use the Json
13:26 - utility to convert back into a save
13:28 - object and then with that save object
13:30 - just cycle through it and set the parts
13:31 - that were loaded so that's it and with
13:34 - that I can very easily save and load any
13:36 - Loadout that I want now just for fun I
13:38 - decided to add another nice save feature
13:40 - which I covered in another video adding
13:42 - a nice screenshot alongside the save
13:43 - file I pretty much just copy paste the
13:45 - code from that video
13:47 - the image is gathered through a second
13:49 - camera
13:50 - the logic for saving the images just
13:52 - like I covered in the video on how to
13:54 - take a screenshot it just listens to the
13:56 - end frame rendering comeback and over
13:58 - here on this function assigns a render
14:00 - texture to the screenshot camera just
14:02 - calls read pixels to read the screen and
14:04 - with that it gets a brand new texture 2D
14:07 - and finally here is the byte structure
14:09 - for the final file so it saves the bytes
14:12 - for the Json save data then also saves
14:14 - the bytes for the PNG screenshot takes
14:17 - those calculates a new header that
14:18 - contains just the Json byte size and
14:21 - really just packs all of those bytes
14:23 - together and finally saves the final
14:24 - file and for loading really just reverse
14:26 - the same thing so it reads all the bytes
14:28 - it reads first the header size then
14:30 - reads the header Json and finally the
14:33 - screenshot texture
14:34 - again I covered all this in detail in
14:36 - the other video once again thanks to the
14:38 - power of reusing some nice link code
14:40 - because that it was pretty easy to
14:41 - implement and this save system really
14:43 - works quite well having a nice
14:45 - screenshot image is much better than
14:46 - having a list of file names
14:48 - and finally the placing so I just made
14:50 - another scene with a character from the
14:52 - same asset pack
14:53 - then I made some super basic pistol and
14:55 - rifle animations for this I use umotion
14:58 - to do it since Unity by default cannot
15:00 - create humanoid animations
15:02 - for unloading the weapon with the custom
15:04 - Loadout it's on this script
15:06 - it really just calls the function to
15:08 - unload and spawn based on this Json
15:10 - so this one once again grabs the save
15:12 - object from the Json instantiates the
15:15 - weapon prefab
15:16 - loads all the parts saved in the Json
15:18 - and returns it and then back in this
15:20 - script it simply parents it to the
15:22 - weapon containing transform
15:23 - so inside the character as a child of
15:25 - the hand bone here is a weapon transform
15:27 - so this is a position
15:29 - and the weapon is simply made as a child
15:31 - of this one and over here you can see
15:32 - the weapon with various attach points
15:34 - and with the various scopes for our own
15:35 - loadout so with this I can randomize any
15:38 - kind of weapon that I want then go into
15:40 - play mode
15:41 - and up here is my character with a nice
15:44 - custom weapon Loadout now in this case
15:46 - I'm just using a static character with
15:47 - some fixed animations but you can
15:49 - imagine how you can use this logic and
15:51 - apply to some kind of third person
15:52 - controller like for example the third
15:54 - person shooter that I covered in a
15:55 - previous video
15:56 - after that they also covered the
15:58 - animation rigging part in another video
16:00 - so you can see after we have the weapon
16:02 - customization system working it is
16:04 - really simple to add it to a brand new
16:05 - character and of course you can use it
16:07 - with a character like this one in third
16:09 - person or you could also use it in the
16:11 - first person
16:12 - put on that together and here is a
16:14 - really nice complete weapon attachment
16:15 - system go ahead and download the free
16:17 - project files to try it out again the
16:19 - reason why I made this system is because
16:21 - this military asset pack is currently on
16:23 - flash deal on the synthy sale the Deeper
16:25 - Discount only lasts for this week if you
16:27 - have any idea for which you need a bunch
16:29 - of weapons or any idea for a modern
16:31 - military game then definitely check it
16:33 - out it could make any kind of shooting
16:34 - game with this pack or maybe something
16:36 - like an RTS or use the include vehicles
16:39 - in some kind of plane or helicopter
16:40 - simulator so there's tons of possible
16:42 - ideas the project files includes all the
16:45 - code for this system and it will
16:46 - automatically load the military asset
16:48 - packs if you import it into the same
16:49 - project and beyond that check out
16:51 - everything on sale on the cine store if
16:53 - you like their Style just like I do then
16:55 - definitely give it a look there's tons
16:56 - of awesome self on all kinds of themes
16:58 - that you can use to make an endless
16:59 - amount of unique games
17:01 - alright I hope you found this video
17:02 - interesting thank you for watching and
17:04 - I'll see you next time
17:12 - [Music]