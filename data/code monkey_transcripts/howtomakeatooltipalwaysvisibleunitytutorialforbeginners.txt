00:00 - hello and welcome I am your code monkey
00:01 - min this video we're continuing to make
00:03 - a tool tip in unity we're going to make
00:04 - sure our tooltip never leaves the screen
00:06 - and is always on top let's begin
00:11 - okay so this is the tooltip we created
00:13 - in a previous video as you can see it
00:15 - shows up when I pass the mouse over a
00:17 - button and the background correctly
00:19 - scales to fit whatever text I give it
00:21 - now one way issue we have is if we have
00:24 - a button right next to the side of the
00:25 - screen so with the window right at the
00:28 - edge of the screen if I pass the mouse
00:29 - over and I move to the right and as you
00:32 - can see the text is now hidden and we
00:33 - can't really read it so let's solve that
00:35 - problem so here in the code the code
00:38 - that moves our tooltip is up here on the
00:40 - update we are accounting leading a local
00:43 - point using the rect transform utility
00:45 - to convert our mouse position into a
00:47 - position inside our canvas now there are
00:50 - two ways we can validate our position we
00:53 - can try to validate the screen position
00:54 - before converting it so we would modify
00:56 - the input of emotion or we can correct
00:59 - the anchored position after we actually
01:01 - place it on the normal position
01:03 - we're going to correct it afterwards
01:05 - since that way we no longer need to
01:06 - worry about screen space conversions and
01:08 - the code won't be easier to follow
01:10 - so first let's grab the new anchored
01:12 - position so a vector - for a anchored
01:15 - position we're going to grab it from the
01:18 - transform the Kid component type right
01:20 - transform and grab the anchored position
01:22 - all right so we now have a nice vector
01:25 - to position that contains the exact
01:27 - position following the mouse so in here
01:30 - we need to test if we're going past the
01:31 - right side of the screen so we test if
01:34 - our anchored position dot X was this
01:37 - size of our background so up there we
01:40 - have the background rect transform so we
01:42 - get the rect
01:43 - dot width so this position will be the
01:46 - position of the mouse plus the
01:47 - background size so if this one is bigger
01:50 - than the width of our canvas so here we
01:53 - need a serialized field for a private
01:57 - rect transform for our canvas rect
02:00 - transform using our canvas rect
02:03 - transform we can access the rect dot
02:05 - width so if our x position plus the
02:08 - width of our background is bigger than
02:10 - the canvas width then we have gone past
02:13 - the edge of our screen so we simply
02:15 - reset the anchored position that X to be
02:18 - on the width minus the size of our back
02:21 - and that way it is exactly hugging the
02:24 - right side and finally we simply do a
02:27 - transform get component of our rect
02:29 - transform and set the anchored position
02:31 - to be our anchored position all right
02:33 - so let's test and okay here I am with my
02:36 - tooltip and if I pass over and I move to
02:38 - the right and yep there you go once it
02:40 - gets there it no longer hides behind the
02:42 - screen and it now correctly locates in
02:45 - order to make sure that tone tip is
02:46 - always able to be read
02:48 - now just only don't note here the
02:50 - calculation to see if we have gone past
02:52 - the screen in the case that we are using
02:53 - in here we are testing the X plus the
02:56 - width is bigger than the canvas right
02:58 - transfer and our width and the reason we
03:00 - can do this is because we have anchored
03:02 - to the in left position if we were
03:04 - anchoring to the middle then it would be
03:06 - wrecked out with divided by two so in
03:08 - order to keep things simple we simply
03:10 - anchor it to the left side and that way
03:11 - it goes from zero to canvas not width
03:14 - all right so now that we are correctly
03:16 - not hiding the tooltip on the x-axis and
03:19 - let's make sure it also doesn't leave on
03:21 - the y-axis so in here we do very much
03:23 - the same thing except instead of the X
03:25 - we modify the Y and set the width we
03:27 - modify the height so here I have shipped
03:33 - the window to the corners and I have
03:35 - given three lines to the attacks and
03:37 - let's see and yep there you go it has
03:39 - three lines and normally they would all
03:41 - go past the height but right now they
03:44 - are correctly staying inside the screen
03:46 - so if I move the attack damage to the
03:48 - right you can see it doesn't leave to
03:50 - the right side and also doesn't leave up
03:51 - all right so our tooltip no longer goes
03:54 - past either edge of our screen that way
03:57 - it is always readable and visible now
03:59 - one small issue we still have with our
04:01 - tooltip is with regards to the sorting
04:03 - order right now it all works correctly
04:05 - and the tooltip is on top however if we
04:08 - were to instantiate another window in
04:10 - runtime so I can simulate it by simply
04:12 - pausing and duplicate the window and you
04:14 - can see I've got the window on top of
04:16 - the tooltip and right now let's shift
04:18 - this window a little bit to the right
04:20 - and just like that this is the window on
04:22 - top and if I pass the mouse button and
04:24 - yep there is the tooltip is now hidden
04:26 - by the second window the UI sorting
04:29 - order is based on hierarchy so when you
04:31 - in sin she ate something in runtime it
04:33 - automatically play
04:34 - is it as these last sibling so in this
04:36 - case and ends up on top of the Tilted so
04:38 - let's fix that by making sure the
04:40 - tooltip is always the last sibling
04:42 - so over here we go to the show taunted
04:44 - function I have the game object in here
04:46 - so in here all we need to do in order to
04:49 - set the tooltip on top is simply do a
04:51 - transform dot set as last sibling this
04:55 - one put it as no less sibling within the
04:56 - same parent so right now in here and
04:59 - let's first duplicate this window and as
05:02 - you can see the tooltip is not on top so
05:04 - let's put this and a window are there on
05:06 - the right as you can see by default in
05:09 - the editor our tooltip is hidden behind
05:11 - this window however when we run the code
05:14 - pass over that one and there you go it
05:16 - is on top of both of them so I can now
05:19 - past and see that that button that is
05:20 - almost hidden is the patron button and
05:22 - as you can see I can also pause it and
05:24 - here duplicate the window and you can
05:27 - see the tongue tip is now no longer on
05:29 - top so I pause it but when I run the
05:32 - show code it automatically sets as my
05:33 - assembling so it is always visible and
05:35 - always on top so there you have it we
05:37 - took our tooltip and made sure it never
05:39 - leaves the screen and is always on top
05:41 - in the next video we're going to polish
05:43 - up our tooltip by adding various
05:45 - functions in order to update the text or
05:47 - do a small admission as always you can
05:49 - download the project files in the Tonys
05:51 - from unity code monkey comm if you have
05:53 - any questions post them in the comments
05:55 - and I'll do my best answer them
05:56 - subscribe for more videos and I'll see
05:57 - you next time