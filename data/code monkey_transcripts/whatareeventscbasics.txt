00:00 - in this video we're going to go over
00:01 - what are events in c-sharp how they work
00:03 - and how they're used we're going to see
00:05 - the benefits of events and how they are
00:07 - essential to keeping our code nice and
00:09 - clean but Vienna
00:13 - [Music]
00:17 - hello and welcome I'm your code monkey
00:20 - and this channel is all about helping
00:21 - you learn how to make your own games
00:23 - with enough tutorials made by a
00:24 - professional indie game developer so if
00:26 - you find the video helpful consider
00:28 - subscribing okay so if you've seen a
00:30 - bunch of my videos you've probably heard
00:31 - me mention two things one I always
00:34 - highlight the importance of writing
00:35 - clean code and two I use events to d-cup
00:38 - on various systems and keep my code
00:39 - clean if you want to write good quality
00:42 - code you need to learn and use events
00:44 - the good thing is they're actually very
00:46 - easy so events aren't just a way of
00:48 - saying something happened without
00:50 - knowing or caring about who is listening
00:52 - if anyone you have publishers and
00:55 - subscribers the publisher has its event
00:58 - and these subscribers can subscribe to
01:00 - that event multiple subscribers can
01:02 - subscribe to the same event then when
01:04 - something happens the publisher fires
01:06 - off the event and all these subscribers
01:08 - get notified that the event was fired
01:10 - the key thing is that the publisher does
01:12 - not know who these subscribers are so
01:14 - there might be lots of them or there
01:16 - might be none
01:16 - they might process the event or
01:18 - completely ignore it the publisher
01:20 - doesn't know and doesn't care who is
01:22 - listening and what they did with that
01:23 - information so this allows you to write
01:25 - code in the publisher that is decoupled
01:28 - from whatever other code you also want
01:29 - to run that isn't essential this video
01:32 - is made possible thanks to these awesome
01:33 - supporters go to patreon.com/scishow to
01:36 - code monkey to get some perks and help
01:38 - keep the videos free for everyone one
01:40 - way you've seen me use events a lot is
01:42 - to keep the illogic and visual separate
01:44 - normally you don't want your logic code
01:46 - to be tightly coupled with the visual
01:48 - you want a logic to work on its own
01:50 - regardless of whether or not there's a
01:52 - visual component the visual should just
01:54 - display what is happening inside and
01:56 - logic so to keep those separate the
01:59 - logic class fires off events which may
02:01 - or may not be caught by a class at
02:03 - Hamill's the visuals for example I made
02:05 - the unlevel system quite a long time ago
02:07 - and as always implement the logic and
02:09 - events and connected that test visual to
02:12 - those events and recently I made a video
02:14 - on a skill tree and I use the exact same
02:17 - level system class the difference is
02:19 - only individual on the level system I
02:22 - had a dummy character some buttons and a
02:23 - bar and on the skill tree I have a
02:25 - moving player and the experience bar
02:27 - with a level counter since I used events
02:30 - I didn't have to modify any of the code
02:32 - inside the unlevel system because I use
02:34 - the same logic and only change the
02:36 - visuals so using events allowed me to
02:38 - very easily reuse that class in a
02:40 - completely different project all right
02:43 - let's look at some code so over here I
02:45 - have my basic script now the way you
02:47 - define an event is very simple first you
02:50 - define the accessor so in this case
02:52 - let's make it public and then you use
02:54 - the event keyword so this is how you
02:57 - define that this film is going to be an
02:59 - event then we need to know the type and
03:01 - now the center time for events as used
03:04 - in the.net standard is the event handler
03:07 - which is inside using system now if an
03:13 - handler as you can see it's just a
03:14 - simple delegate with two fields we have
03:16 - an object for the center and the event
03:19 - args which we'll cover in a bit so we
03:21 - define the type and then we just pass in
03:23 - the name so in this case um let's call
03:25 - it on space press normally you also name
03:29 - it starring with on and then whatever it
03:31 - represents so on space pressed on enemy
03:34 - killed on play win and so on so here we
03:36 - have defined our event now let's see how
03:39 - we can trigger and how to subtract first
03:41 - let's do the trigger so in here let's
03:43 - make our update function and let's test
03:47 - for the spacebar bring down and when we
03:52 - press the spacebar and let's fire off
03:54 - our event so to do that we call our
03:57 - event as if it were a function so on
03:59 - space pressed and we just count now for
04:02 - the similar let's just pass in this and
04:04 - for the event args since we don't have
04:06 - any extra information we can use the
04:09 - constant event our X dot empty and
04:11 - that's it so over here we are firing off
04:14 - our event whenever we press the spacebar
04:16 - so let's try it out okay here we are the
04:18 - game is running here is the console and
04:20 - press space and there we go we have an
04:23 - error we have a known reference
04:25 - exception now the reason is because
04:27 - right now we do not have any subscribers
04:29 - so the underlying structure for our
04:31 - event is set to no so when we fire an
04:34 - event we need to first test that the
04:35 - event is not know so if on space pressed
04:39 - if there is not now
04:40 - then we actually do fire off our event
04:43 - now I can press the spacebar and there
04:45 - you go we do not have an error and since
04:48 - C sharp 6 we can shorten this in order
04:51 - to use the null conditional operator so
04:54 - we just do question mark and then call
04:56 - invoke so this does the exact same thing
05:00 - it invokes event only if on space
05:02 - pressed is not no and again here I am
05:05 - and I'm pressing space and there we go
05:07 - no errors awesome so now that we have
05:09 - the event being fired let's do something
05:11 - with it now in order to subscribe to the
05:13 - event first we define a function that
05:15 - will receive that event now the function
05:18 - signature needs to be the same as event
05:20 - so in this case we're going to make a
05:22 - function that takes a object and the
05:24 - event args parameter so here we have our
05:31 - function which matches this signature
05:33 - and when we have different relatively
05:36 - simple debug log ok now in order to
05:41 - subscribe we access the event so on
05:44 - space pressed and we do plus equals and
05:47 - we add our function so this is how we
05:52 - add our function onto this event so when
05:55 - this event is invoked it won't call the
05:57 - functions attached to that event which
05:59 - in this case is this function so when we
06:01 - press space it's going to run this code
06:02 - and do a lock let's see so here we are
06:04 - and now I press space and there yo we
06:07 - have our log so our event is being fired
06:09 - when we press space and it's being
06:10 - captured by that function which then
06:11 - does a lock ok great now here we are
06:15 - triggering and listening to the event on
06:17 - the same class but the benefits are when
06:19 - we listen from somewhere else so let's
06:21 - do that in the editor and let's make
06:24 - another script and let's attach this
06:29 - script into the same game object ok
06:34 - and now in here first we need to get a
06:36 - reference to our other script so since
06:39 - they're on the same game object we just
06:40 - do get component of our testing event
06:42 - script and now with this reference we
06:47 - can access our event on space pressed
06:49 - and just like before we do pause equals
06:51 - and then we add our function and now if
06:54 - you're using Visual Studio you can use
06:56 - code completion to really speed this up
06:57 - so we're here as you can see I can press
06:59 - tab and there you go it automatically
07:01 - creates the function and now here let's
07:07 - do the same debug log ok so that's it
07:12 - now back into the publisher script and
07:15 - let's get rid of this one so this script
07:20 - is only responsible for firing off the
07:22 - event and then this script accesses now
07:24 - one end subscribes to that event let's
07:26 - see okay so here we are in our press
07:29 - space any of there you go we have our
07:31 - message and if in here we remove the
07:33 - subscriber script and I'll run again and
07:36 - I press space and there you go we do not
07:38 - have any errors and everything is still
07:40 - running exactly the same so the
07:42 - publisher class does not require the
07:44 - subscriber to exist alright so here we
07:46 - have our example we have this class
07:49 - which fires off this event and this
07:52 - class is absolutely no knowledge that
07:53 - this other class exists so this one just
07:57 - fires off the event whether someone is
07:58 - listening or not which again this is
08:00 - perfect for separating logic and visuals
08:02 - you need visuals to know about logic but
08:05 - you do not want the logic to know about
08:07 - the visuals you want a logic to be able
08:09 - to work with or without the visuals so
08:11 - you just have your logic fair enough
08:13 - events in your visuals if they exist
08:15 - listening to those events now here we
08:17 - are subscribing to the event but as you
08:19 - can imagine we can also unsubscribe so
08:21 - uncertain let's subscribe and then after
08:24 - receiving the event once
08:25 - let's unsubscribe so to unsubscribe
08:27 - instead of pause equals we do minus
08:29 - equals
08:34 - so that's it let's test ok here we are
08:38 - and let's press space and there you go
08:40 - we have the unlock function but now
08:43 - press space again and there you go no
08:44 - more messages
08:45 - so we unsubscribed so we stopped
08:47 - receiving the events now in here we're
08:49 - using the event handler which as you can
08:51 - see has two fields an object and an
08:54 - event args the event Rx is the standard
08:56 - way for passing more information through
08:58 - the event so the way we do that is first
09:01 - we make a class that derives from event
09:03 - args and now in here we define whatever
09:08 - fields we want so let's say we have an
09:10 - end for this place County and now up
09:14 - here when we define the event we can use
09:16 - the generic version and pass in our
09:19 - specific event args as the generic
09:21 - parameter so in this case on Swiss press
09:23 - event arts so now our event won't
09:26 - contain an object of this type on the
09:28 - second parameter so down here you can
09:30 - already see the error in here we need to
09:33 - pass in of type on space pressed event
09:35 - args so we do a new and we create our
09:37 - object so just like that so whenever we
09:46 - press space we are incrementing this
09:48 - local field then we're firing out the
09:50 - event and constructing a on space
09:52 - pressed event args and passing in a
09:54 - specific parameter and now we go back
09:56 - into our subscriber and here we modify
09:59 - our signature to receive our new time
10:04 - and now we can access that new type and
10:08 - we can get for example D space count so
10:11 - just like this we're passing extra data
10:13 - along with our event now let's see so
10:17 - here we are in press space and yep there
10:19 - it is we have our event being filed and
10:21 - passing along some extra than that
10:23 - awesome now another thing about events
10:26 - is you do not have to use event handler
10:28 - this is just the normal dotnet standard
10:31 - events work with delegates and if an
10:34 - handler is simply D standard delegate so
10:36 - here we can define our own delegate
10:42 - so here we the finally delegate it
10:44 - returns void and takes a parameter for a
10:46 - float now if you're not familiar with
10:48 - delegates they are essentially function
10:50 - signatures let me know in the comments
10:52 - if you'd like to see a video dedicated
10:53 - just to delegates now we can make an
10:55 - event of this time so again we passing
11:01 - the event keyword and then our specific
11:03 - delegate type and we can fire up very
11:08 - much in the same way so we can't invoke
11:09 - and in this case we take a fold
11:11 - parameter okay so we have our event
11:18 - being fired and now back in the
11:20 - subscriber and here let's subscribe to
11:22 - our new event so on float event plus
11:26 - equals press tab and there you go
11:28 - there's our automatic event which as you
11:31 - can see takes a full parameter and just
11:39 - like that alright so let's test okay so
11:43 - here we are on press space and there you
11:45 - go we have our vent being fired on with
11:47 - a fault parameter and again if we're
11:49 - working with delegates then we can also
11:51 - use the default delegate called action
11:53 - so you make a public event and we can
11:57 - use the time action so action as you can
12:03 - see as you see don't forget that returns
12:05 - void and action also has a generic
12:08 - version so you can define it with a
12:10 - bunch of different types so in this case
12:12 - and what's the final action that takes a
12:13 - boolean and an integer and then down
12:17 - here we fire off the event just like we
12:19 - do every time so there it is we have our
12:25 - event working with an action that takes
12:27 - a boolean and an int and then here we
12:29 - subscribe the same way
12:35 - and let's test and here we are and yep
12:39 - we have all of our events working so you
12:41 - can see how you're not forced to work
12:43 - event handler you can use whatever
12:45 - that'll get you want personally I like
12:47 - to stick with the standard so use event
12:49 - handler and then if I need extra info I
12:51 - create an event arts but you can use
12:54 - whatever time we get you want now
12:55 - another thing specific to unity our
12:57 - unity events these were pretty much the
13:00 - same way with difference being that they
13:01 - are shown in the editor so in here we
13:04 - make a public of time unity event and
13:08 - unity event is inside unity engine that
13:11 - events so here we have our unity event
13:18 - then we invoke it exactly the same way
13:21 - so we called out invoke in this case we
13:23 - have no parameters and also note how
13:26 - this does not have the event keyword and
13:28 - now if we go back into the editor with
13:31 - our object selected you can see over
13:33 - here in the inspector we have a field
13:35 - for our unity event so we can click the
13:37 - plus icon and in here some liked an
13:40 - object so let's select this same object
13:41 - and then we can select a function from
13:44 - that so let's make a function to call
13:46 - here in our subscriber script let's make
13:49 - it so here we have a function with no
13:57 - parameters returning void and it's
13:59 - public and now back into the editor over
14:02 - here we can select that function so
14:04 - click in here then we go into our script
14:06 - testing event subscriber and down here
14:08 - we have our testing unity event function
14:10 - so select it and now let's tests so here
14:13 - we are in press space and if there you
14:15 - go everything is working correctly here
14:17 - we have our testing unit event main
14:19 - trigger so the main benefit of unity
14:21 - events are that you can easily set them
14:23 - in the editor so if you're trying to
14:25 - make your game more fun to designers
14:27 - this may be a good tool alright so here
14:30 - we looked on how events work how they're
14:32 - used and what are the main benefits as
14:33 - you saw events are excellent for helping
14:36 - you keep your code nice and organized it
14:38 - allows objects to work with other
14:39 - objects without being tightly coupled
14:41 - this video is made possible thanks to
14:43 - these awesome supporters go to
14:45 - patreon.com/scishow to code monkey to
14:48 - get
14:48 - parks and help keep the videos free for
14:50 - everyone as always you can download the
14:52 - project files in Italy's room in tucumán
14:53 - calm
14:54 - subscribe to the channel for more unity
14:56 - tutorials post any questions I have in
14:58 - the comments and I'll see you next time
15:01 - [Music]