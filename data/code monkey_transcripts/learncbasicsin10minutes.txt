00:00 - in this video we're going to learn
00:01 - c-sharp basics in just 10 minutes
00:03 - variables ifs functions classes and more
00:06 - alright let's begin
00:07 - [Music]
00:11 - okay so let's learn the basics on how to
00:14 - write c-sharp code now the first thing
00:17 - you need is somewhere to write and
00:18 - compile your code the easiest way is
00:20 - simply to use Visual Studio which has a
00:22 - free version creating a simple console
00:25 - app is the easiest way to start playing
00:27 - around and writing some c-sharp okay so
00:29 - when you do you have the basic starting
00:31 - file with the main function and you can
00:33 - press the start button up here to run
00:35 - your code and as soon as you do the code
00:38 - compiles and yep it runs it opens the
00:39 - window and it costs now in this channel
00:41 - I cover a game development in unity
00:43 - which runs the code pretty much exactly
00:45 - the same except it does in a game engine
00:47 - rather than a console app alright so
00:50 - let's write some code something that you
00:52 - will use all the time is simply printing
00:54 - a message so you can do that by
00:55 - accessing the console and running the
00:58 - right line function and then just write
01:01 - something so just like this and hit
01:03 - compile and yep it runs the code it
01:06 - prints a message and it causes
01:07 - immediately now you can stop it from
01:09 - quitting instantly by adding a simple
01:11 - console.readkey so run again and if
01:15 - there it is now the console doesn't
01:16 - close instantly so you can easily verify
01:18 - the output okay now one of the core
01:20 - fundamentals of programming are
01:22 - variables which are containers of data
01:24 - so to define a variable first you write
01:26 - e type then the name and then optionally
01:29 - you can initialize it with a value so
01:32 - this variable is of type int it's named
01:35 - I and has the value 56 there's a
01:37 - multitude of types you can use for your
01:39 - variables so you have hints for whole
01:42 - numbers you have floats for
01:44 - floating-point numbers double is also a
01:47 - floating-point number but doing more
01:48 - precision though for boolean logic so
01:51 - values like true and false char for a
01:54 - character and string for a string of
01:57 - characters or text so those are the
01:59 - basic types and you'll learn more as you
02:01 - go on you can do a simple string
02:04 - concatenation with plus so for example
02:06 - here print that message then plus the I
02:08 - and yep there's the output printing our
02:11 - variable contents another fundamental
02:13 - building block are functions so you
02:15 - define a function by first writing the
02:18 - return type now if you want to return
02:20 - nothing you can simply use void then you
02:22 - the name of the function and then you
02:25 - have parameters within the parentheses
02:27 - if there are any so this function here
02:33 - returns nothing and takes no parameters
02:34 - and this one takes an in parameter and
02:37 - returns a volume to use a function you
02:41 - simply write the function name and then
02:43 - the parameters inside the parentheses if
02:45 - there are any this is related to the
02:47 - fact that we are calling a non-static
02:48 - function from inside a static function
02:50 - static SAR a bit more advanced so don't
02:52 - worry about them for now but in here you
02:53 - can simply fix it by making these two
02:55 - also static so you can call a function
02:57 - like this or our second function and we
02:59 - pass in the perimeters within our
03:01 - parenthesis now if a function has a
03:03 - return value you can also store it in a
03:05 - simple variable alright so that's the
03:07 - basics of functions now let's learn
03:09 - about ifs and conditions so it's very
03:12 - simple you just write the if keyword
03:14 - then you write your condition and then
03:16 - you open and close a codemod
03:21 - so a condition is anything that
03:23 - evaluates on to a point so you can do
03:25 - comparisons like this so I less than 10
03:28 - you can do greater than you can do equal
03:32 - to less than or equal to greater than or
03:35 - equal to and not equal to so the
03:39 - exclamation point here means is not you
03:42 - can also count function so down here we
03:43 - have a function that returns a boolean
03:45 - so we can also call this and again we
03:48 - can use an exclamation point to invert
03:49 - the result then you can also combine
03:52 - conditions so mainly you do that with an
03:54 - end which is two ampersands
03:56 - or an or using two pipes so here this
04:01 - whole thing won't be true if I is under
04:03 - 10 and I equals 5 then you can also
04:06 - group conditions by using parentheses so
04:11 - here we are testing if I is under 0 and
04:13 - I equals 5 or I bigger than 10 and I
04:18 - equals 15 so first this one evaluates
04:20 - and this one evaluates and then you
04:22 - evaluate the entire or so you write your
04:24 - condition and then you have the codon
04:26 - walk which runs if this is true so in
04:29 - this case 5 is under 10 so if we run it
04:32 - there you go we have true then after the
04:34 - codon walk we can also add
04:36 - skee world and another code walk so this
04:38 - is what we'll return if the condition is
04:40 - not true
04:41 - so here make this 15 set so this won't
04:44 - be false any of there you go we have our
04:46 - fault another way of doing conditional
04:48 - logic is with a switch so you do a
04:54 - switch on something and then you have
04:56 - the various cases depending on the value
04:57 - inside here so you write case then the
05:00 - value on this case then in here you
05:02 - write for every code you want and then
05:05 - you do a break to indicate the end of
05:07 - the case you also have the special
05:09 - default which is the code that won't run
05:11 - if the value does not match any of the
05:13 - other cases then you have collections
05:14 - like a raisin lists those are our data
05:17 - types that hold a collection of
05:18 - variables so to define an array you
05:20 - write the type of the array and then
05:22 - square brackets so here we have an array
05:26 - of int and now by default the array
05:29 - won't be set to null so we need to
05:31 - initialize it and to initialize an array
05:34 - with you knew of our array type and in
05:37 - here we need to give it a size and let's
05:39 - say fun so we are initializing this
05:42 - array with five positions that can hold
05:44 - five ends and all of those positions are
05:46 - set to zero which is a default you can
05:48 - also omit the size and initialize the
05:51 - array right in here
05:52 - so just like that we are initializing an
05:55 - int array containing all of these
05:57 - elements with these values so this is
05:59 - our array which is a fixed sized
06:01 - collection now if you need something
06:03 - with a dynamic size you can use lists so
06:07 - you're right listen and the type inside
06:09 - the angle brackets and again by default
06:11 - this won't be known so we need to create
06:13 - the object so we do a new list and again
06:16 - if you want in here we can also
06:17 - initialize some very now the main
06:19 - difference between a list and array is
06:21 - that the array is fixed but unless can
06:23 - expand and contract so here we can do in
06:25 - place and add a value then we can also
06:29 - remove them all right so these are your
06:31 - basic collections now let's learn about
06:33 - loops the easiest way to cycle through a
06:35 - collection is with a simple for each we
06:39 - do for each then we write our iterator
06:41 - variable and then the collection that we
06:43 - want to cycle through so this won't
06:46 - cycle through the whole list and write
06:48 - it on the console if there is one
06:50 - so this works on any collection so it
06:52 - works on the list as well as the array
06:54 - then you also have a simple 4 so the 4
06:59 - is split into three distinct parts each
07:02 - of them is separated by a semicolon now
07:05 - the first part initializes a iterator
07:07 - variable then we have our end condition
07:10 - so if this is false then the cycle ends
07:12 - and the last part is run after each
07:14 - cycle so usually this just increments
07:16 - our iterator so we can cycle through our
07:19 - own list count which is going to count
07:21 - down the total number of elements so in
07:23 - here we can do a simple right line to
07:25 - print the index position and then the
07:27 - element inside that list in that index
07:29 - position yep there we go on index 0 we
07:32 - have the element 1 then you also have a
07:34 - while so you do 1 then the condition and
07:39 - then the code mark so this code mark
07:41 - will run once this condition is true so
07:44 - in this case don't run 5 times then you
07:46 - also have a do-while they do while is
07:51 - very similar except it tests for the
07:52 - condition only at the end instead of at
07:54 - the beginning now you can write comments
07:56 - in a single line with two forward
07:58 - slashes or you can do this to open or
08:02 - close comments now comments are useful
08:05 - for adding some text in your code
08:07 - however do keep in mind clean code
08:09 - principles so I the only your code
08:11 - should be fully and easily understood
08:13 - without any comments if it's not then go
08:15 - and rename your variables to make it the
08:17 - code intent more clear you can define
08:19 - your own types and one of the more
08:21 - useful ones are in yems so you write the
08:24 - keyword in them then the name so this is
08:28 - an enumeration of certain specific
08:29 - values so we have this variable with
08:32 - this type meaning it can hold these
08:34 - possible values for example enums are
08:40 - extremely useful for doing a simple
08:41 - switch on a bunch of specific states and
08:44 - c-sharp being in object-oriented
08:46 - language means that you can create your
08:48 - own quests so write the keyword and then
08:51 - the name then you can create an object
08:52 - of this type by first defining the type
08:54 - then the name and then you do a new and
08:57 - you instantiate your object now by
09:00 - default you have a parameter unless
09:01 - constructor but you can also write your
09:03 - own
09:05 - just like that and then inside your
09:07 - class you can do anything you like like
09:09 - defining feelings and functions so just
09:14 - like that then something very important
09:16 - which are accessories and scope now for
09:19 - accessor z' you have mainly public and
09:21 - private private means that this function
09:24 - is only accessible from inside this
09:26 - class so if up here I try to access that
09:29 - function there you go there is an error
09:33 - because that function is private but if
09:35 - I swap it to public now I can access
09:37 - that in here and if you don't specify
09:39 - anything like for example on this void
09:41 - main' then the default won't be private
09:43 - now these accessories can be applied to
09:45 - functions but also to all of these
09:46 - feelings so these films are private so I
09:50 - cannot go up here and modify it there
09:53 - you go an error and now regarding
09:55 - variable scope a variable this find
09:57 - inside a function only exists inside
09:59 - this function so here we're defining an
10:05 - int variable named I and then we are
10:07 - calling this function and here we have
10:09 - an error because I does not exist whilst
10:11 - inside of this go it's defined here so
10:13 - the variable only exists from here to
10:15 - down here so in order to use a variable
10:17 - over several functions you can find up
10:19 - here as a member variable and just like
10:22 - this now we can use this a my down here
10:24 - alright so that's the basics of c-sharp
10:25 - in just ten minutes these are the
10:28 - absolute basics so if you want to learn
10:29 - more then check the playlist linked in
10:31 - the description where I covered some
10:32 - more advanced topics in greater detail
10:34 - now programming is all about experience
10:37 - so go ahead and write some code like the
10:39 - video if you found it helpful and
10:41 - subscribe the channel for more videos
10:42 - person equation having it comes and I'll
10:44 - see you next time
10:50 - [Music]