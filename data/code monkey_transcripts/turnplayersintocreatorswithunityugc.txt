00:00 - hello and welcome I'm your code monkey
00:01 - and here let's learn how to use a very
00:04 - exciting new Unity tool called user
00:05 - generated content basically this lets
00:07 - you add modding or any kind of user
00:09 - content onto your game nowadays games
00:11 - are more and more driven by user content
00:13 - people love making things and watching
00:15 - other people play what they create and
00:16 - this tool makes adding that feature to
00:18 - your game super easy it's up to you as a
00:21 - developer to decide what content users
00:22 - can build for your game it can be new
00:24 - levels new weapons perhaps new NPCs or
00:27 - quests it can literally be anything you
00:29 - want user generated content is just data
00:32 - and you as developer can decide what
00:34 - that data represents then for your
00:36 - players as creators they can create mods
00:38 - and upload them and as just players they
00:40 - can browse all the mods that creators
00:42 - have made and install the ones they want
00:44 - the API is really easy to use if you've
00:46 - used any of the other Unity gaming
00:48 - Services apis you won't find this very
00:49 - familiar the dashboard makes it really
00:51 - easy for you as a developer to manage
00:53 - all of the user generated content
00:55 - there's a Creator Center webpage where
00:57 - creators can manage off their own mods
00:59 - it also has moderation tools so you can
01:01 - make some users into moderators to keep
01:03 - track of what content your users are
01:05 - generating for creating mods you can
01:07 - either create some in-game tools
01:08 - yourself and have the players build and
01:10 - upload mods from directly inside the
01:12 - game alternatively they can upload them
01:14 - through the Creator Center webpage and
01:16 - coming soon is a really exciting ugc
01:18 - Unity Bridge which lets players use
01:20 - Unity itself in order to create and
01:22 - upload mods directly from Unity oh and
01:25 - by the way all this this is also engine
01:26 - agnostic so if you're using a real or
01:28 - Godot or a custom engine you can still
01:30 - use this tool in this first video I will
01:32 - teach you how to use the API from
01:34 - scratch just uploading and downloading
01:36 - some basic data and seeing all the other
01:38 - things the API can do I will also show
01:40 - you the dashboard Creator Center and
01:42 - moderate tools and then in a future
01:44 - video I will showcase a fully complete
01:46 - download that I'm working on using my
01:48 - kitchen chaos game where players can mod
01:49 - it by adding custom recipes and custom
01:51 - objects so watch this video to learn the
01:54 - basics and stay tuned for that one to
01:55 - see a practical use case also finally in
01:57 - the end of this video I'll also address
01:58 - how this young compare shares with Steam
02:00 - Workshop how this tune was different and
02:02 - what it can do better this video is
02:04 - sponsored by unity and this tool the
02:06 - user generated content this is now in
02:07 - open Beta check the link description to
02:10 - sign up and get started also YouTube
02:12 - videos cannot be updated so go check the
02:14 - pin comment where I won't be updating it
02:15 - with any news like for example when ugc
02:17 - bridge is out or when the student is out
02:19 - of beta alright so let's begin by
02:21 - looking at the absolute Basics just
02:23 - learning how to create some content
02:24 - upload it and then download it as a
02:26 - player first thing we need to do is link
02:28 - our ENT project so that's the same thing
02:30 - as using any other ugs tools so inside
02:32 - Unity on the top left corner up here
02:34 - make sure you are signed in if you see a
02:36 - button saying sign in then click on it
02:38 - and sign in if you have issues then
02:40 - close Unity open ENT Hub make sure you
02:42 - are signed in there before opening the
02:44 - project so sign in then go into edit
02:46 - project settings over here go into the
02:48 - services Tab and then we can either
02:50 - create a brand new Unity project ID or
02:52 - we can use an existing one now in my
02:53 - case I have already created the project
02:55 - so I'm going to be using this one and
02:56 - just link the project ID and if there is
02:58 - project was linked successfully okay
03:00 - great now we can go into the NT
03:02 - dashboard and sign in now here on the
03:04 - left side let's go under live Ops now
03:07 - here up top make sure you select the
03:08 - same project then on the left side let's
03:10 - go into live Ops then over here let's
03:12 - scroll down to find user generated
03:14 - content and now let's go ahead and
03:15 - enable ugc all right that sense so now
03:18 - let's follow this setup guide first
03:19 - thing we need is to install the ugc
03:21 - package so for this one let's open up
03:23 - the package manager and right now at the
03:26 - time of this recording since this tool
03:28 - is in open Beta the package is actually
03:29 - marked as preview pre-release so if you
03:32 - don't see it you need to enable preview
03:33 - packages so on the top right corner go
03:35 - into the three dots and go into project
03:37 - settings and over here make sure you
03:39 - enable pre-release packages and now you
03:41 - should be able to see the user generated
03:43 - content package alternatively you can
03:45 - just install it through the name so
03:46 - click on the plus icon add package by
03:48 - name and use this name
03:50 - com.unity.services.ugc okay so go ahead
03:53 - and install this package now here I am
03:55 - in a completely empty scene let's create
03:56 - a nice script to test it so I'm going to
03:59 - create a brand new c-sharp script call
04:01 - this test Unity ugc let's make a game
04:04 - object with the same name
04:06 - keep things nice and clean let's reset
04:08 - the transform attach the script and open
04:10 - it okay so now here if you've already
04:12 - used any of the other Unity gaming
04:14 - service systems then this API won't look
04:16 - extremely familiar which is awesome once
04:18 - you know how one of their tools works
04:20 - you will easily learn how to use all the
04:21 - others so if you've already seen my
04:23 - video on using Lobby or relay or
04:25 - Matchmaker or game server hosting or if
04:27 - you've seen my free multiplayer course
04:29 - then the code we're going to write here
04:30 - is going to look extremely familiar
04:32 - personally I really love how Unity made
04:34 - all these tools follow the same pattern
04:36 - it makes them all super easy to use if
04:38 - you know one you know them all so just
04:40 - like in all those other tools We Begin
04:42 - by initializing these services and
04:43 - authenticating the user so let's begin
04:46 - by making a simple function private
04:48 - avoid let's call it init and sign in
04:51 - then over here we want to initialize ENT
04:53 - services so let's go inside UNT Services
04:56 - which exists inside the namespace
04:58 - unity.services.com and let's call the
05:00 - function initialize async now this is an
05:03 - async com which is available so let's
05:05 - await this in order to be able to use a
05:08 - weight we need to mark this function as
05:10 - async now if you don't know about async
05:12 - away then it's pretty simple basically
05:14 - this lets you run your code
05:15 - asynchronously meaning that when the
05:17 - code comes here and runs this function
05:19 - it is basically going to contact Unity
05:21 - servers to initialize these services and
05:23 - that will not freeze the game so the
05:25 - execution won't contact the servers and
05:26 - then continue running the rest of it
05:28 - everything will keep running until it
05:29 - receives a response from the server and
05:31 - then it continues running this function
05:32 - you don't need to know the specifics
05:34 - about a weight in the sync you just need
05:36 - to know that on these async function
05:38 - calls you should add the away keyword
05:39 - and if you wanted that then you must
05:41 - Mark the function as async okay so with
05:43 - this we are initializing the services
05:45 - afterwards we need to log in so let's
05:48 - authenticate let's use the
05:50 - authentication the authentication
05:52 - Service inside
05:54 - unity.services.authentication and let's
05:55 - access the instance and call the
05:57 - function sign in we've got all kinds of
06:00 - sign in functions and normally for most
06:02 - CGS tools I just sign in anonymously it
06:04 - is super quick super simple and for
06:07 - regular players that works great they
06:08 - can easily download any user generated
06:10 - content but in order for your creators
06:13 - to be able to manage their own mods on
06:14 - the web portal they need to have a
06:16 - persistent auth method so they can log
06:18 - in in the web portal using the same auth
06:20 - they used in game if not if they are
06:22 - only using Anonymous sign in then they
06:24 - can really only manage their created
06:25 - mods through the game depending on the
06:27 - game that might or might not be a
06:29 - problem but if you want to make your
06:31 - user account a bit more robust and you
06:32 - should probably be using one of these
06:34 - persistent auth methods I'm going to use
06:36 - that in a little bit but for now just
06:37 - for a quick test let's do it just with
06:39 - an anonymous account okay so we sign in
06:41 - again let's await this call and
06:43 - afterwards we can access the
06:45 - authentication Service the instance and
06:47 - get the player ID so let's just do a
06:48 - debug download say signed in and print
06:51 - the player ID okay great no let's just
06:54 - call this function just for testing
06:55 - let's make a part of it away can only
06:57 - call this okay let's do a quick test to
06:59 - see if we are signing in and if there's
07:01 - a login we are indeed signed in okay
07:03 - great so now that we are signed in we
07:06 - want to create some content and for
07:08 - Content like I said this can be whatever
07:10 - you want it can be unlevel it can be a
07:12 - weapon it can be a quest or an entire
07:14 - game mode content is really just data
07:17 - and that data can be anything it's up to
07:19 - you as a developer to decide that so
07:21 - here for a simple test let's just use
07:23 - the most basic data just some text here
07:25 - in my project files I've got a super
07:27 - simple text file it literally is just a
07:29 - DOT text file and inside we can see it
07:31 - contains just some basic text okay so
07:33 - let's use this as our content let's make
07:36 - a function to that so private world and
07:38 - let's call it create content then here
07:40 - first thing we want is to be able to
07:41 - read that file and the way that is shown
07:43 - in documentation is to use file which is
07:46 - inside using system.io so we're going to
07:49 - file and then we call open this one
07:51 - takes a path so I'm going to find the
07:53 - path to that file so that's using
07:55 - application.datapath and then in my case
07:58 - I put it inside a folder the folder is
08:00 - called test ugc and then I called it my
08:03 - mod.text okay so it's a file and for
08:05 - this one let's open it as open let's
08:08 - give it file access to read and file
08:10 - share also for reading okay so this will
08:13 - open the file and this will return of
08:14 - type file stream for the content file
08:16 - stream and also One external important
08:19 - thing when working with file streams you
08:22 - need to make sure to dispose of them so
08:23 - you don't end up with a member link so
08:25 - you can either dispose them manually so
08:26 - you can do whatever you want and then
08:28 - call this pose so that's one way or you
08:31 - can just add using keyword and just like
08:33 - this as soon as this function ends and
08:34 - this variable is disposive it will
08:36 - automatically dispose the memory but
08:38 - this is very important make sure you
08:40 - don't forget using keyword otherwise
08:41 - you're going to end up with memory leaks
08:43 - okay so with this we have our file
08:44 - stream and now for creating and
08:46 - uploading some content we access the ugc
08:49 - service so this one inside Unity Dot
08:52 - services.ugc we access the static
08:55 - instance and we call the function create
08:57 - contents async this will take some
08:59 - parameters of this type so let's create
09:01 - of type create content args we need to
09:03 - give it a name so let's give it test
09:05 - content then let's give it a description
09:07 - so test description and finally the
09:10 - Stream So This is the file stream that
09:12 - contains the content so let's pass in
09:13 - the content file stream and once again
09:16 - this is an async call so let's await in
09:18 - order to awake let's mark this function
09:20 - as async okay so this is going to create
09:22 - and upload our content then let you see
09:24 - what we did with unlock just make sure
09:25 - that it worked so created content and
09:28 - then let's print out the content which
09:30 - is going to be returned from here so
09:32 - this returns of type content call it
09:34 - content and let's print out the content
09:36 - dot ID and finally just like with all
09:39 - the other UNT gaming Services tools
09:41 - let's make sure to wrap this in a try
09:43 - catch to catch any exceptions so let's
09:45 - just do a try run our code then we've
09:48 - got a catch let's catch of type ugc
09:51 - exception
09:52 - and if something bad happens let you see
09:54 - what the evil dialog on the error and
09:57 - let's put this one over here okay great
09:59 - so this really only takes to create a
10:01 - mod we create a file stream to read our
10:04 - data and then we simply upload it to ugc
10:06 - now for testing let's just call this
10:08 - function from somewhere so for testing
10:10 - let's do a simple and prep void update
10:12 - and over here just as for a simple input
10:14 - so let's go get key down let's say the T
10:17 - key for testing and let's call create
10:20 - content okay so with this let's test so
10:23 - here we are looking at the console we
10:24 - can see that we've signed in okay great
10:26 - now if I press the testing key and if
10:29 - you look at that it did work it created
10:30 - content and generate this new ID now
10:33 - back in the ugc dashboard we can go over
10:35 - here into the content Tab and up here we
10:36 - do see our test content so yep
10:39 - everything worked all right awesome now
10:41 - over here we can view the content so I
10:43 - can click on it to go inside now here
10:45 - one note if you click on the content you
10:46 - see this error then go into the service
10:49 - settings then on the left side go into
10:51 - the web portal setup and over here for
10:53 - site visibility and let's swap this and
10:54 - make it enabled and save and that's it
10:57 - saved so now back to the content and you
10:59 - should be able to see this here we can
11:01 - view the content we can inspect to see
11:03 - the player ID of the player who created
11:05 - it we can read the name description and
11:07 - see all kinds of stats also for some
11:09 - reason it doesn't show here the ID for
11:11 - this content it shows the environment
11:13 - where it was created and the version ID
11:14 - but it does not show the content ID
11:16 - although if you want to find that you
11:18 - can actually unlock in url so in the URL
11:20 - at the very end you won't find Yep this
11:22 - is the content ID then here we even have
11:24 - a download button so we can download the
11:27 - file and note how this does not have a
11:29 - DOT text extension like I said content
11:32 - can be whatever you want what we are
11:34 - downloading here is really just some
11:35 - bytes so this could be an entire level
11:37 - or a game mode or a brand new weapon or
11:39 - in our case we know we just uploaded
11:41 - some basic text
11:42 - so if I just opened this one with
11:44 - notepad yep there's our mod text alright
11:46 - awesome then optionally when creating
11:48 - content we can include some more data so
11:51 - when we are creating the create content
11:52 - args up here at the end we can add the
11:54 - currently braces and now inside we've
11:56 - got all kinds of things we can modify
11:58 - for example we can set as public and set
12:01 - this to go public right away then we can
12:04 - also include a thumbnail this one takes
12:06 - a stream type
12:08 - so the way you have the thumbnail is
12:09 - pretty simple we just use exactly the
12:11 - same thing so we do another file stream
12:13 - let's call this one the thumbnail file
12:15 - stream in my case here in the project
12:17 - files of the same folder I've got the
12:19 - mod and I've got a simple Gamepad icon
12:21 - so I'm just going to use this so
12:23 - gamepad.png once again open it for
12:26 - reading okay so that's the thumbnail
12:27 - file stream and let's pass in as the
12:29 - thumbnail then you can also include a
12:31 - list of tags now importantly this list
12:34 - is a list of string however it is not a
12:37 - list of text for the tag name if we go
12:39 - back to dashboard on the left side we go
12:41 - down into service settings over here
12:43 - we've got labels these are the tags I'm
12:45 - going to cover that in more detail in a
12:47 - little bit but just on the names that
12:49 - you see here these are not the names
12:50 - that you use in that parameter inside
12:52 - each of these tags has an actual unique
12:54 - ID and that's the one that you should
12:56 - use but again I'm going to cover that in
12:58 - a little bit then you can also add some
13:00 - custom ID for your content so again this
13:02 - is up to you this is a basic string it's
13:04 - up to you to Define what it means and
13:05 - same thing for some metadata but for now
13:07 - let's just upload it just like this
13:09 - let's go on with super test content my
13:12 - new test description and let's upload it
13:15 - set following to true and give it the
13:16 - thumbnail okay so let's run this and see
13:18 - here we are signed in Press On T and if
13:21 - there you go we create the content it
13:23 - uploaded and generated a brand new ID
13:24 - and back here on dashboard if we go into
13:27 - content and if there it is we see our
13:29 - brand new super task content we can see
13:31 - by default it is public and it does have
13:33 - a nice thumbnail so with this you can
13:35 - see how easy it is to create and upload
13:37 - some user generated content literally
13:39 - just takes one line of code and it's
13:40 - done now let's see the other side how to
13:42 - download some user generated content for
13:45 - that first we actually need to find it
13:46 - so let's make a function for that a
13:49 - private void call it find contents and
13:52 - over here we can go inside the ugc
13:54 - service and we can call the function get
13:56 - contents async it's this one with plural
13:59 - not this one without the S so it's this
14:01 - one in plural and basically this will
14:03 - return a bunch of contents it takes an
14:06 - optional parameter of this type get
14:07 - contents args so you can construct it to
14:10 - inspect it here we see how we can add
14:12 - some filters for searching we can
14:14 - include the total number of results we
14:15 - can limit how many results you get we
14:17 - can give it an offset search for
14:19 - something specific or only get certain
14:20 - tags so we can do all kinds of searching
14:23 - on this one function or alternatively we
14:25 - can actually remove this optional
14:26 - component and this won't simply return
14:28 - all the results now also note the return
14:30 - value on this function it returns of
14:32 - type page results so let's grab this so
14:35 - page results
14:36 - it's going to be of type content and
14:39 - again this was in a weight of Hong Kong
14:41 - so let's mark this as async okay now
14:44 - note just by the type here this is Page
14:47 - result meaning this does not necessarily
14:49 - contain all the results now if you have
14:51 - thousands of mods you really don't want
14:53 - to get them all at once so that is why
14:54 - the result is paginated so if you wanted
14:56 - to get them all and you had thousands
14:58 - you would have to make multiple accounts
14:59 - to this and pass in a different offset
15:01 - but in our case we just have one so this
15:03 - is fine let's just cycle through all
15:05 - these results so just do a simple for
15:07 - each content inside content
15:10 - go inside the page results and grab the
15:12 - results which is a list of content so
15:14 - you do this and let's just do a simple
15:16 - debug download
15:17 - let's just print out the content.id
15:20 - then let's also print out the
15:22 - content.name
15:23 - and let's also print out the
15:25 - content.description and as always let's
15:27 - wrap this inside a nice try catch catch
15:30 - of type BGC exception okay just like
15:33 - this okay so let's see if this finds our
15:35 - content so up here on our testing key
15:37 - and let's not create let's just find
15:39 - contents okay let's test so here we are
15:41 - in press and now this actually gives an
15:43 - error that the project is hidden to
15:45 - solve that let's go back to the
15:46 - dashboard and let's go into the web
15:48 - portal setup and over here under site
15:49 - visibility let's swap it from hidden and
15:51 - make it enabled so back in here let's
15:54 - press the testing key and if there you
15:55 - go it did find our content so here it is
15:58 - with the names description and the
15:59 - content ID okay so that's great we found
16:02 - it however this is just fine the content
16:04 - and returning the ID it does not
16:06 - download it just yet for that let's make
16:08 - another function so let's go here a
16:10 - private void let's call it download
16:12 - content and now in here we use ugc
16:15 - service the instance and let's call
16:17 - download content data async however over
16:20 - here we can see this requires a Content
16:22 - object now technically we have a Content
16:25 - object up here when finding contents so
16:27 - we could download it directly after
16:29 - finding it but if we just want to
16:31 - download some content actually what we
16:33 - need in order to generate some content
16:34 - is just get the content ID so here in
16:37 - the console I still have the content ID
16:38 - that we search for so for example let's
16:40 - grab the unless one over here so here's
16:42 - the ID let's just copy this and over
16:44 - here let's just find a string for the
16:46 - count ID and pass in the string okay so
16:49 - with this ID we can take this string
16:51 - Content ID and convert it into an actual
16:53 - content for that let's just go into the
16:55 - EGC service the instance and let's call
16:58 - get content so not contents not the
17:00 - power one so let's go into this one this
17:03 - one takes get contact hours so let's
17:05 - create one and over here we can input
17:07 - the content ID so let's pass it down
17:08 - this one is once again it's available
17:10 - and it's going to return of type content
17:12 - so let's put content content equals and
17:16 - let's await this and as always if we
17:18 - wait let's async Okay so with that we
17:21 - have the content and over here we can
17:22 - use that so let's hit the content then
17:24 - for download content let's put it on
17:26 - true we want to download it and the
17:28 - thumbnail in this case we don't need it
17:29 - we just want to download the content so
17:30 - let's put it on phones and just like it
17:32 - says here the download that will be put
17:34 - inside the content parameter so this
17:36 - column returns nothing so let's just put
17:38 - a simpler weight okay so this is
17:40 - actually going to download the data and
17:42 - now we can access that data by going
17:44 - inside content and let's access the
17:46 - downloaded content this one as you can
17:48 - see is a a byte array now in our simple
17:51 - test all we're doing is just uploading
17:52 - some text so let's just convert these
17:54 - bytes back into text and how we can do
17:56 - that is we have our byte array we can go
17:58 - inside
18:00 - system.txt.encoding let's use utf-8 and
18:04 - let's call get string and this one
18:06 - basically converts an array of bytes
18:08 - into a string so let's convert this rare
18:09 - bytes into our string so string for our
18:12 - mod text and then let's just do a simple
18:15 - download so our mod text and then we
18:18 - have the mod text now as always when
18:20 - working with gdgc let's make sure that
18:22 - everything is nice and safe so let's put
18:23 - this inside a try catch so everything
18:26 - inside a try and let's catch for a ugc
18:29 - service exception and just do a debug
18:32 - download okay so that's it so we've got
18:34 - the content ID string we use that we
18:36 - call get content async in order to
18:38 - convert it into a content and then we
18:40 - call download content data async in
18:42 - order to actually download the bytes and
18:43 - then we do whatever we want with those
18:45 - bytes in this case over here we are
18:46 - converting into a string and doing a log
18:48 - all right right so let's go up here and
18:50 - simply run this function send so let's
18:52 - comment out this one and run this one
18:54 - and let's test okay so here we are and
18:57 - press a button and if there you go it
18:58 - takes a little bit for the download but
19:00 - here is the mod text this is my mod
19:02 - contents which is exactly what we
19:04 - uploaded alright awesome okay so with
19:06 - that here we can now download any
19:08 - content now one concept you might be
19:10 - familiar with in terms of modding tools
19:13 - is subscribing to something that's
19:15 - actually an optional step it's not
19:17 - mandatory as you can see you can
19:18 - download something without being
19:20 - subscribed but if the player subscribes
19:22 - then it's easier to keep track of what
19:23 - content the player wants to keep
19:25 - downloaded and updating now subscribing
19:27 - is very easy let's just make a private
19:30 - void subscribe content and now here we
19:33 - just go inside the ugc service and let's
19:36 - call create subscription async this and
19:39 - as you can see it takes a Content ID so
19:41 - let's use the same one that we had so
19:43 - let's use this one
19:44 - and that's running it this one will
19:46 - subscribe to that content so let's async
19:48 - await this as always put the try catch
19:51 - okay so this is going to create a
19:53 - subscription then we can make another
19:55 - function to cycle through everything
19:56 - that the player is subscribed to
19:58 - so let's make a proud void download
20:01 - subscribe content and once again let's
20:04 - go inside the ugc service and now first
20:07 - we need to get the subscription so get
20:09 - subscriptions async this one takes some
20:12 - optional parameters but so far we want
20:14 - all of them so let's just get all of
20:15 - them let's await and we can see that
20:18 - this is actually going to return once
20:19 - again page results of type subscription
20:21 - so let's grab that page results of type
20:24 - subscription all right so we have this
20:27 - then let's just do a for each of type
20:29 - subscription in the pageresults.results
20:32 - so we cycle through all of them and we
20:34 - have all of our subscriptions
20:36 - and inside the subscription we actually
20:38 - have access to the content and inside
20:41 - the content we have access to the ID so
20:43 - over here we can do literally the same
20:44 - thing with it up here for downloading
20:46 - some content so let's just copy the
20:48 - exact same code
20:49 - so we go and for the content we get it
20:51 - with this ID we grab the content
20:54 - downloaded and do whatever we want with
20:56 - it so once again let's just put this
20:58 - inside a try catch and now for testing
21:00 - let's run once just to subscribe and
21:02 - then one suggest to download so let's go
21:04 - up here and instead of downloading
21:06 - directly let's just subscribe to the
21:07 - content okay let's test so here we are
21:10 - and press a button any of it subscribed
21:12 - we forgot to add a debug.log but yep it
21:15 - did subscribe so now let's run the other
21:17 - function so comment this one and let's
21:18 - run download the subscribed content so
21:21 - here we are and press a button
21:23 - and if there you go it did find all
21:25 - these subscriptions which was just one
21:26 - mod and it did download the mod contents
21:29 - alright great next like I mentioned a
21:31 - while ago you can include tags in the
21:33 - content but like I said that list of
21:35 - string was not the tag name it's the tag
21:37 - ID and to get the tag list sectionally
21:40 - super simple
21:41 - so let's do a private void get tag list
21:44 - and we go inside the ugc service the
21:47 - instance and let's just call get tags
21:50 - async this is going to return in list of
21:52 - tags so in list of tag for the tag list
21:55 - and let's await this
21:57 - so this returns only to tag let's just
21:59 - do a for each
22:01 - and let's just see we debug download on
22:03 - the tag let's print out the tag name and
22:06 - then the tag ID okay just like this
22:09 - and I'm here in the dashboard on the
22:10 - left side if we go under service
22:12 - settings over here we've got labels
22:14 - these are the actual tags we can click
22:16 - on the button in order to edit them and
22:18 - right now this zone is in beta so
22:20 - there's a bunch of testing tags over
22:21 - here let's add a manual one just for
22:23 - testing so let's come with testing tag
22:25 - and let's press enter and there you go
22:28 - the tag was indeed added so now back in
22:31 - the code let's just run this function
22:32 - for testing
22:34 - so comment this one and run this one
22:36 - okay and press our button and you look
22:39 - at that all of the various tags and
22:41 - again note how the default tags these
22:44 - all have some strange IDs but we can see
22:46 - down here the one that we had properly
22:48 - this one has a proper ID so here we've
22:50 - got the name testing tag and then a
22:52 - really nice unique ID so this is how you
22:54 - would get the tags get the tag name and
22:56 - the tag ID and then back in our function
22:58 - for creating the content over here we've
23:00 - got the various options and we could add
23:03 - the tags ID we could do a new list and
23:06 - for example we could copy this tag let's
23:08 - paste this one like this and let's
23:10 - create another piece of content so let's
23:12 - call it test tag content okay let's run
23:15 - this
23:16 - so like this let's test here create and
23:21 - there you go create the content and here
23:22 - in the dashboard let's refresh yep
23:24 - there's the content and this won't
23:26 - create our content with this tag okay so
23:28 - here we already covered lots of things
23:30 - we covered how to create content so how
23:32 - to upload how to find contents how to
23:34 - download it subscribe and download
23:36 - subscriber content and get the tag list
23:38 - now there's a bunch more stuff we can do
23:40 - with the API here are the docs here's
23:42 - the quick start guide which has all the
23:44 - things we've already done and then over
23:45 - here all the various things you can do
23:47 - so as you can see we can create content
23:49 - we can update content so that's useful
23:51 - we can delete update just the metadata
23:53 - then do a search for Content get the
23:55 - player's content page through all the
23:57 - results search for a bunch of content
23:59 - and over here is also a really useful
24:01 - helper function here's a function which
24:04 - takes some content and simply converts
24:06 - it into an actual Sprite so what it does
24:08 - is really just creates a texture 2D just
24:10 - an empty texture 3D and uses the unload
24:12 - image function in order to convert the
24:14 - bytes into an actual texture and then
24:16 - just call sprite.create in order to
24:17 - create a Sprite based on that sure so
24:20 - this super useful with this you either
24:21 - have a texture or a Sprite Which you can
24:23 - then use to easily display in the UI or
24:26 - anything then down here more things
24:28 - related to subscribing and unsubscribing
24:30 - and even rating content and then some
24:32 - representations these are essentially
24:34 - different versions of your content like
24:36 - for example you make a mod that has a
24:38 - certain data when used on PC but
24:39 - different data when used on PlayStation
24:41 - that would be a different representation
24:42 - and finally down here A bunch of
24:44 - moderation API calls this still has a
24:47 - very robust set of moderation actions
24:48 - you can take so using all of these API
24:51 - endpoints you can either approve content
24:53 - you can report it reject it and so on so
24:56 - you've got all this stuff you can do
24:57 - through the package API and
24:59 - alternatively there is also a web
25:01 - service API using all of these various
25:03 - API endpoints using this you can build
25:05 - pretty much anything so you can either
25:07 - use Unity Zone Creator Center tool or
25:10 - you can just implement this directly
25:11 - onto your own website now let's just
25:13 - inspect the rest of the dashboard so if
25:16 - we go on to the overview over here we
25:17 - can see a bunch of SATs we can see how
25:20 - much content we have how many downloads
25:21 - subscriptions reports the creators and
25:24 - so on then we can obviously view all the
25:26 - various content next is on the
25:28 - moderation tab over here we can view
25:30 - some moderation settings so we can set a
25:32 - report threshold set it to either
25:34 - flexible or strict we can assign a bunch
25:37 - of specific moderators so we can click
25:39 - on ADD moderate then we just need to
25:41 - assign the player ID then we've got a
25:43 - list of band players that we want to
25:44 - bend for some reason and then the
25:46 - moderate logs this is where you'd see
25:48 - how some moderator bans some content for
25:50 - some reason next is the service settings
25:53 - tab first up you can set it to use Unity
25:56 - CDN this means it won't be using unity's
25:58 - cloudcon delivery now if you don't know
26:00 - about it this is unity's content
26:02 - delivery Network it's randomly used in
26:04 - their addressable system for delivering
26:05 - content to your players like for example
26:07 - game updates or DLC I've got several
26:10 - lectures on my ultimate TNT overview
26:11 - course covering both addressables
26:13 - addressables remote and cloudcon
26:15 - delivery so if you want to learn more
26:16 - definitely check out the course then
26:18 - here like we saw so you can also add
26:20 - tags there are categories which is a
26:22 - sort of a different thing that is coming
26:23 - in the future and then here you've got
26:25 - IDs for the various authentication
26:27 - providers next we've got the web hooks
26:30 - so like I said this Zone can integrate
26:32 - with your own website in many ways with
26:34 - this you can easily set up some web
26:36 - hooks so for example you can set your
26:37 - website to receive some data when some
26:39 - content was created then using that
26:41 - perhaps you could connect to the Discord
26:43 - API and post some kind of message that
26:45 - something was created so you can really
26:47 - build on top of this and build anything
26:49 - you want on your own interface your own
26:50 - website your own anything
26:52 - and then of course we have the web
26:54 - portal setup you can set up some basic
26:56 - settings making it as visible and then
26:58 - click on preview however when you do you
27:00 - might see this there are no
27:01 - authentication providers so we need to
27:03 - assign this in order to actually use
27:05 - this Creator Center so this is like I
27:07 - said a while ago which is in order for
27:08 - this to work we need some kind of
27:10 - persistent sign-in method now like I
27:12 - said a while ago in order for this to
27:13 - work we need some kind of persistent
27:15 - sign-in method if we use the anonymous
27:17 - sign in to upload some content then we
27:19 - can't accident over here on the query
27:20 - Center since we don't know what the
27:22 - generated Anonymous user ID is so right
27:24 - now we can't log in here we need a
27:26 - non-anonymous method and the unity
27:28 - authentication package supports many
27:29 - persistent sign-in methods if you're
27:31 - making Android games you've got Google
27:33 - and Google play games if you're on iOS
27:35 - you've got apple and the apple game
27:37 - center and then if you're on PC you've
27:39 - got same Facebook or Oculus or you can
27:41 - even make it work with anything that
27:42 - implements the open ID standard so for
27:44 - example if you have some website for
27:46 - your game you can make it work with that
27:47 - login now you can use any of these as
27:49 - persistent sign-in methods also quick
27:51 - note since I recorded this video UNT
27:53 - player counts as Internet beta this is
27:55 - Unity Zone authentication solution which
27:57 - works on all platforms so this is
27:59 - another development option if you're
28:00 - working on PC if you're watching this in
28:02 - the future then check the pin comment
28:03 - for any updates in my case for demo I'm
28:05 - developing this on PC and I don't have
28:07 - an app ID for this tutorial so I can't
28:09 - use steam so I opted to test with the
28:11 - Facebook method now this actually took a
28:13 - ton of work to figure out how to use it
28:15 - there's no guide anywhere or rather
28:17 - Unity itself has a guide but it doesn't
28:18 - seem to work I've found lots of issues
28:20 - however after a much strong error I
28:22 - finally got it working I made a post
28:24 - over here on the forums that covered how
28:26 - I finally got it working basically the
28:28 - only way it works is by using what
28:29 - Facebook console device login then doing
28:31 - a bunch of things so if you want to see
28:33 - the actual implementation of how I did
28:34 - it then you can watch this post but like
28:36 - I said with regards to ugc it works with
28:38 - any of these methods so it doesn't have
28:39 - to be Facebook you can use any of these
28:41 - with that here I've got a function to
28:43 - authenticate with Facebook and here
28:45 - really I'm running yep it did work okay
28:46 - great now with this I can upload the
28:48 - same content that we saw a while ago and
28:50 - now it won't be linked with the Facebook
28:51 - account that is linked with this player
28:53 - ID so over here we're going to run the
28:55 - create content function which is going
28:57 - to create this call it persistent
28:58 - account content okay so let's see here
29:00 - we are signed in press the button to
29:02 - upload and there you go created the
29:03 - content okay great now the only thing I
29:05 - need is to go under service settings and
29:07 - over here make sure to input the
29:09 - Facebook client ID and now if we go into
29:11 - the web portal and we preview it yep
29:13 - here we've got a regular login with
29:15 - Facebook button and yep I've signed in
29:17 - and here is the creator Center and up
29:19 - here I do see my persistent account
29:20 - content over here I can view some stats
29:22 - so how many people are subscribing
29:24 - viewing rating reporting and downloading
29:25 - and so on then under content management
29:27 - I can see all the mods that I have
29:29 - uploaded and over here directly from the
29:31 - AI portal I can actually directly add
29:33 - some content so I can just drag the
29:35 - content over here give it a title
29:36 - description tags and so on so as you can
29:39 - see this website the Creator Center this
29:40 - one is extremely useful to be able to do
29:42 - so much without actually having to go in
29:44 - game and then next to the Creator Center
29:46 - over here is the moderation Center so
29:48 - this is where mother is will come in to
29:50 - see what assets work content has been
29:52 - flagged and decide what to do with it so
29:54 - this will importantly created Center and
29:56 - moderation Center are super useful and
29:58 - there is yet another even more useful
29:59 - thing that is coming soon in the future
30:01 - which is their web portal basically
30:03 - that's a browser for the players rather
30:04 - than the creators so they can browse for
30:06 - all the mods install them come and do
30:08 - all kinds of things some of these
30:09 - web-based cmosis are super awesome
30:11 - really makes it easy to handle and
30:13 - manage mods in your game there's also
30:15 - one more really awesome thing that is
30:16 - not available right now but won't be
30:18 - coming in the future which is the ugc
30:19 - bridge basically this is a plugin that
30:21 - you can add to the unity editor itself
30:23 - and with that you can create mods
30:25 - directly from inside unity and actually
30:27 - upload them so you don't need to add
30:29 - modding tools onto your game code you
30:31 - can just use Unity editor itself as the
30:33 - tool for building your mods that really
30:35 - enables so many more use cases so much
30:37 - more complexity you can add validation
30:38 - you can add all kinds of logic all kinds
30:41 - of requirements for how your mods should
30:42 - go and your users can use the entire
30:44 - power of unity to actually edit and
30:46 - build their mods so that way you can use
30:48 - all the power of DNT editor without
30:50 - having to build all that tooling
30:51 - yourself finally let's cover the pricing
30:53 - for this tool just like all the other
30:55 - ENT gaming Services units I think the
30:57 - pricing is actually extremely Fair we
30:59 - can scroll down to find user generated
31:01 - content alright so here it is and it's
31:03 - based on two things it's on storage and
31:05 - download so basically how much data you
31:07 - are storing in all of the user generated
31:09 - content and how much of it is being
31:11 - downloaded per month here we can see the
31:13 - free tier and then the pay tier now
31:15 - whether this free tier whether this is
31:16 - enough or not is really going to depend
31:18 - on what kind of mods you allow for your
31:19 - game for example if you allow players to
31:21 - create massive open worlds with tons and
31:23 - tons of AK textures then perhaps this
31:25 - amount might not be enough but in the
31:27 - vast majority of cases mod files are
31:29 - really tiny for example in my steam game
31:31 - Battle Royal Tycoon I added mod support
31:33 - for making custom VIPs and in this case
31:35 - each VIP is really just a character
31:37 - sprite and some text so in total as you
31:39 - can see only it's only just 36 kilobytes
31:41 - so that's a tiny amount meaning that
31:43 - with a free tier I can literally have
31:45 - millions of user generated VIPs some
31:47 - based on that I would say these three
31:49 - tiers do seem quite capable if you're a
31:51 - small scale in the dev like me then you
31:52 - probably will never have to spend one
31:54 - cent and of course speaking of the
31:55 - workshop let me address the question
31:57 - that many of you might have which is
31:58 - also the first question that I had when
32:00 - I first heard about istio which is how
32:02 - does it compare with the Steam Workshop
32:03 - and the first answer is simply that this
32:05 - tune is multi-platform meaning it works
32:07 - on every platform that UNT supports
32:09 - whereas Steam Workshop only works if
32:11 - your game is on scene with this serial
32:13 - you can use it with a game that you
32:14 - publish on it you can publish on mobile
32:16 - web consoles or literally anything so
32:19 - based on how easy this tool is to use
32:21 - you could definitely make some fun
32:22 - experiments on game jams and upload it
32:24 - to Edge the second answer is how the Sim
32:26 - Workshop hasn't really improved in the
32:27 - last decade whereas this tune was being
32:29 - built right now to support the needs of
32:31 - the games today so it has all those
32:33 - extra very useful features that we saw
32:34 - like the Creator Center and the upcoming
32:36 - web portal also the very robust
32:38 - moderation tools which are definitely a
32:40 - must nowadays it also has web hooks
32:42 - which can be triggered based on all
32:44 - kinds of conditions so using this you
32:45 - can easily extend it with whatever extra
32:47 - automated tools you have like for
32:49 - example posting something on your games
32:50 - Discord when someone uploads a new
32:52 - content and perhaps best of only is the
32:54 - ugc unity bridge by allowing players to
32:57 - build mods directly inside Unity itself
32:58 - it really enables all kinds of
33:00 - interesting use case it allows you to
33:02 - support extremely complex scenarios and
33:04 - add all kinds of validation and you can
33:06 - do all that directly inside Unity using
33:08 - the regular Unity workflow so the Sim
33:10 - Workshop is definitely indeed great and
33:11 - this tune builds upon that Foundation to
33:13 - help you take your game modding to the
33:14 - next level alright so that's unity's
33:16 - user generated content tool personally I
33:19 - really love it as soon as I heard about
33:20 - this you know the first time I was
33:22 - immediately interested I've implemented
33:24 - some kind of modding in pretty much all
33:25 - of my Sim games people love making
33:27 - things and it's one of those things that
33:29 - can really help you take your game to
33:30 - Next Level it can keep your game alive
33:32 - for many years after release so nowadays
33:35 - ugc is a really powerful thing and
33:36 - thanks to this tool it is actually
33:38 - surprisingly easy so check the link in
33:40 - the description to get started using
33:41 - user generated content also YouTube
33:43 - videos cannot be updated so go check the
33:45 - pin comment where I won't be updating it
33:47 - with any news like for example when ugc
33:49 - bridge is out or when this tune is out
33:51 - of beta and stay tuned for the upcoming
33:53 - video where I will showcase how I added
33:54 - some complex mods to my kitchen calcium
33:56 - alright hope that's useful check out
33:59 - these videos to learn some more thanks
34:01 - to these awesome patreon supporters for
34:02 - making these videos possible thank you
34:04 - for watching and I'll see you next time
34:09 - foreign