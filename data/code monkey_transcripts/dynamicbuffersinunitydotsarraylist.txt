00:00 - in this video we're going to learn about
00:01 - dynamic buffers in unity dots this is
00:04 - how we can hold a list of multiple
00:05 - values inside of our dots component
00:07 - we're going to learn about dynamic
00:08 - buffers and use it so our player can
00:10 - target multiple enemies at once let's
00:12 - begin
00:16 - [Music]
00:20 - hello and welcome I'm your code monkey
00:22 - and this channel is all about helping
00:24 - you learn how to make your own games
00:25 - with NF tutorials made by a professional
00:27 - indie game developer so if you find the
00:29 - video helpful consider subscribing okay
00:32 - so here we are working with unity dots
00:34 - and ECS so first of all if you're not
00:36 - familiar with dots and ECS
00:37 - check out the videos linked in the
00:38 - description now as you know we can only
00:40 - store certain types inside of our ECS
00:42 - components mainly we can only store
00:44 - value types and no reference types so
00:46 - for example that means we cannot home an
00:48 - array or a list however there is one way
00:51 - we can sort a list of values with
00:53 - variable size and that's with dynamic
00:54 - buffers this video is made possible
00:56 - thanks to these awesome supporters go to
00:59 - patreon.com/scishow to code monkey to
01:01 - get some perks and help keep the videos
01:03 - free for everyone now first we're going
01:05 - to learn what our dynamic buffers and
01:06 - how they work then at the end we're
01:08 - going to go through a nice demo with a
01:10 - player character that attacks a single
01:11 - enemy and we're going to use dynamic
01:13 - buffers to make them attack multiple
01:14 - enemies at once okay so let's try it out
01:17 - Here I am in my basic empty scene now
01:20 - the first thing we need is to define a
01:22 - buffer element so this is a type that
01:24 - we're going to store inside of our
01:25 - dynamic buffer so here let's just make a
01:28 - new c-sharp script and call this our int
01:30 - buffer counter okay now in here we're
01:34 - working with ECS and let's get rid of
01:35 - all this instead we have using BLET
01:38 - entities and now our in puffer element
01:41 - will implement a buffer element tag so
01:45 - this is the interface that handles
01:46 - buffer elements and now inside what you
01:49 - have a public in and call it Val and in
01:52 - here as always with ECS this is not a
01:54 - class but rather a struct so we have our
01:57 - struct implementing buffer element data
01:59 - and inside we just have a simple int for
02:01 - our Val now let's make an entity to test
02:04 - this out back in the editor let's just
02:06 - make a new c-sharp script just our
02:08 - testing and let's make a game object and
02:13 - drag our testing script okay now in here
02:16 - let's test out by making a very basic
02:18 - entity
02:27 - okay so here we're having the default
02:29 - normally in creating a basic empty
02:31 - entity and now in here we can start by
02:34 - adding our buffer element and now the
02:35 - way we do that is we use our entity
02:38 - manager and we call the function add
02:41 - buffer we pass in our buffer element
02:44 - type so in this case our in buffer
02:45 - atonement and plus in our entity okay so
02:49 - here we're adding our buffer of type int
02:52 - buffer element into our entity now this
02:54 - function as you can see returns a
02:56 - dynamic buffer and now with our dynamic
03:01 - buffer we can add a bunch of elements so
03:04 - in here we can work with it just pretty
03:05 - much as if it were a normal list so
03:07 - access the dynamic proper and count add
03:11 - an inside pass in a new buffer element
03:14 - and here we can set a value okay so
03:18 - there it is very simple we create our
03:20 - empty entity we call add buffer that
03:22 - returns a buffer and then on the buffer
03:24 - we add individual elements all right so
03:26 - let's test any up here we are with our
03:28 - entity debugger and there it is our
03:30 - created entity and as you can see it has
03:32 - the info for element and then we have
03:34 - three values inside one two and three so
03:36 - just like this we have a component with
03:38 - a variable size awesome all right now
03:41 - back into our code over here we are
03:43 - getting our dynamic buffer and calling
03:45 - the function add and creating a new
03:47 - buffer element but if our buffer only
03:49 - has one value like we did in here which
03:51 - is have a int value then we can simplify
03:54 - this by using our dynamic buffer and
03:56 - calling the function we interpret this
03:59 - reinterprets our buffer element into a
04:01 - specific type so in this case we can
04:02 - reinterpret it as an array of int so
04:05 - this returns a dynamic proper of the new
04:08 - type int and now here we can use this
04:14 - buffer directly with ends without having
04:15 - to create into buffer elements
04:17 - so for example let's access the buffer
04:19 - on index one and change it from two and
04:22 - put it into a 5 all right so let's test
04:25 - and yep there's our entity with a 5 on
04:28 - index one so this is a helpful way that
04:30 - we can easily work with the underlying
04:33 - value instead of always having to create
04:34 - a new buffer element all right now
04:36 - thing that we can do is simply cycle
04:38 - through all the values in a dynamic
04:40 - buffer okay so here we're doing in
04:45 - normal for as if we were working with a
04:47 - normal array so we simply start on zero
04:49 - go until the dynamic buffer going and
04:51 - then here we're just increasing the
04:53 - values so very simple as if it were a
04:55 - normal array and let's see any app over
04:57 - here we can see that all of the elements
04:59 - have increased by one right so here we
05:01 - saw a bunch of operations that we can
05:02 - deal with a dynamic buffer and in order
05:04 - to do them we need to access the actual
05:06 - dynamic buffer reference so right now
05:09 - we're getting it because we get it as
05:10 - soon as we add a buffer to our entity
05:12 - but let's say we're running this code
05:14 - elsewhere other than when we add our
05:16 - buffer and the way that we can get our
05:18 - dynamic buffer we can simply ask our
05:20 - entity manager in order to get the
05:23 - buffer pass in our buffer type which is
05:26 - our buffer element type and pass in the
05:29 - entity so just like this first we're
05:35 - adding our buffer into our entity but
05:37 - we're not storing the return value from
05:39 - this instead then we ask the empty
05:41 - measure to get the buffer we pass in our
05:42 - buffer element type and passing the
05:44 - entity which returns a dynamic buffer
05:46 - and then we can do everything we've done
05:47 - previously so for example if you're
05:49 - working inside of a system you do an
05:51 - entities for each you get a reference to
05:53 - the entity and with the empty manager
05:55 - you can get the buffer from that entity
05:57 - now another thing as he saw the buffers
05:59 - have expendable size so in here I can
06:01 - add as many elements as I want however
06:03 - that also comes at a cost as you
06:05 - increase the size past its capacity it
06:07 - has to allocate new memory and copy the
06:09 - previous events into the new memory
06:11 - location dots is all about performance
06:14 - and efficiency so obviously you want to
06:16 - avoid this as much as possible
06:17 - and to reduce the chances of that
06:19 - happening you can define a size for your
06:21 - buffer so for here in our in buffer
06:23 - element definition here we can add the
06:26 - attribute in turn on buffer capacity and
06:29 - this isn't takes an int for the capacity
06:31 - so this is how many buffer elements we
06:34 - want to store in our buffer and for the
06:36 - example let's say just five so in this
06:39 - case when an entity holds a buffer of
06:41 - this type it won't be created with
06:43 - enough space to hold five elements so
06:45 - you can still do whatever operations you
06:47 - want on the buffer and as long as the
06:48 - elements remain within
06:49 - you will not see massive performance
06:51 - tips on the other hand you can still go
06:54 - pass this amount if you absolutely need
06:55 - it but if you want your code to be as
06:57 - fast as possible then you should pick a
06:59 - number that won't do for your use case
07:00 - okay now let's look at how we access a
07:03 - buffer from inside of the system so
07:05 - let's create our script and call this
07:08 - our test buffer system
07:10 - okay now inside let's make this a
07:12 - component system all right now in our
07:18 - update let's do a very simple entities
07:20 - dot for each and in here we can simply
07:24 - use dynamic buffer and pass in our in
07:27 - buffer element type and just like this
07:30 - we use it as if we were using any other
07:32 - component so here for example let's
07:35 - cycle through the buffer elements and
07:36 - increase them alright so here we cycle
07:44 - through our normal buffers so we're not
07:46 - even reinterpreting and we're simply
07:48 - increasing the buffer value any of their
07:50 - days over here in our NT debugger we can
07:52 - indeed see all of our values constantly
07:54 - increasing so this is how you use a
07:56 - dynamic buffer inside a entities for
07:58 - each now so far we've been adding
08:00 - buffers directly by writing the code but
08:02 - we can also use the conversion work form
08:04 - in order to make it any editor so over
08:06 - here we have our in buffer element and
08:08 - now for most elements if you implement I
08:10 - component data you can also add a
08:12 - generate authoring component C you add
08:14 - this attribute and you can simply drag
08:16 - the script on to your game object
08:18 - however as of right now this does not
08:20 - work for I buffer element data so in
08:22 - this case we need to handle the
08:23 - conversion ourselves so let's make a new
08:26 - script and call this our int buffer
08:29 - element authoring this will be our
08:32 - authoring component and now in here we
08:34 - add using unity dot entities and we
08:37 - implement I convert game object to
08:39 - entity and we have a public int for our
08:45 - value now when we convert our entity we
08:48 - use our desk manager in order to add a
08:51 - buffer of type int buffer element into
08:54 - our entity
09:02 - alright so in our authoring component we
09:05 - have a value array of our intz then by
09:07 - implementing this interface the
09:09 - conversion system will call this
09:10 - function and in here we're adding the
09:12 - buffer just like we did previously and
09:14 - then we take our dynamic buffer we cycle
09:16 - through our value array and we add them
09:17 - as int buffer elements and also in order
09:20 - to be able to add it we also need to
09:21 - implement monobehaviour so now we can go
09:26 - back into the editor and in here we
09:28 - create a new game object and now we can
09:30 - drag our int buffer element authoring
09:32 - component and there you go we have our
09:34 - value ray so here let's say - let's put
09:36 - a 5 and a 6 and in order to convert this
09:39 - automatically we needed convert to
09:41 - entity script all right so let's see if
09:43 - we have another entity being
09:44 - automatically accentuated within buffer
09:46 - element with two elements let's see and
09:49 - if there it is here's our game object as
09:51 - you can see it was automatically
09:52 - converted and we have our two elements
09:54 - in the system is still working on both
09:56 - of these now another thing we can do is
09:58 - access the buffer of another entity so
10:00 - for here we made our system modify the
10:02 - dynamic buffer of that specific entity
10:04 - but another thing you can do is access
10:06 - the buffer of another entity all right
10:09 - so now let's try it out and make two
10:10 - separate entities now we're going to
10:13 - identify them with empty tag components
10:17 - so here I created two scripts tag
10:20 - allison tag Bob now these are simple
10:25 - tags so just completely empty tag
10:26 - components in order to use them with the
10:28 - conversion workflow we automatically
10:29 - generate the authoring component all
10:33 - right we have both of our attack
10:34 - components so here this object let's
10:36 - name him Bob and we drag the Bob tag
10:39 - another one for the analyst and drag the
10:42 - tag Alice alright so now we have two
10:44 - different components we have Bob and
10:47 - Alice and for now let's remove our own
10:49 - testing component and let's go into our
10:52 - test buffer system and here let's make a
10:55 - new system call with our test buffer
10:58 - from entity system
11:03 - and now here let's icon just through Bob
11:06 - so we do entities that for each but
11:12 - before we do our for each we add the
11:14 - filter with all of type tag Bob so here
11:19 - we're only going to cycle through the
11:21 - entities that have the Bob tag which is
11:23 - only one and now here we want to get the
11:26 - buffer from Alice so to do that we use
11:29 - the function get buffer from entity and
11:32 - we pass in our end buffer element this
11:36 - is you can see returns a buffer from
11:38 - entity and now the way that we access
11:42 - the buffer from a specific entity is
11:44 - essentially using this like an array and
11:46 - as the array index we need to use an
11:48 - entity so in order to get the entity
11:51 - from Alice we could do it by several
11:53 - ways for example we could store a
11:56 - component inside of Bob containing a
11:58 - reference to Alice's entity or we can
12:01 - just do a very simple entities so here
12:12 - we're doing it for each on the entities
12:14 - that have the Alice tag and we assign
12:16 - onto this one the one that we find and
12:18 - now we can access this one on our buffer
12:20 - entity so with this we have our dynamic
12:23 - buffer now here we just increase it as
12:32 - previously so now let's test alright so
12:35 - here we are we have Bob and Alice and as
12:37 - you can see Bob has the buffer elements
12:38 - but they do not change but unless any of
12:41 - their yo the buffer elements stored in
12:43 - cervelas are constantly increasing so
12:45 - this is how we access a buffer from a
12:47 - different entity we just get buffer from
12:49 - entity passing our buffer element type
12:51 - and then we access it as if accessing an
12:53 - array using the entity as the index all
12:56 - right now let's look at dynamic buffers
12:57 - inside of jobs so let's make a new
13:00 - script called test buffer job system
13:07 - alright here we have our basic job
13:09 - component system and now let's create a
13:12 - job
13:13 - now here we implement a job for each
13:17 - with entity underscore EB that's the one
13:21 - that takes in the element buffer and we
13:23 - pass in our specific type so in this
13:24 - case our int buffer account and here on
13:30 - the execute as you can see it takes in a
13:32 - dynamic buffer so on definition of the
13:34 - job you pass in the buffer element but
13:36 - in here you receive the dynamic buffer
13:37 - that contains our buffer elements then
13:40 - here you can play around with it the
13:41 - same as previously and then here we make
13:46 - a new job alright here it is let's test
13:52 - any up here we have both of our entities
13:54 - with the dynamic buffer elements
13:56 - constantly increasing running on a job
13:58 - awesome ok so we covered a bunch of
14:01 - different uses and actions we can take
14:03 - with dynamic buffers now over here I
14:05 - have an interesting scene to demonstrate
14:07 - the use case of dynamic buffers so right
14:09 - now over here is my player and you can
14:11 - see a bunch of zombies being spawned and
14:13 - moving towards him after two hits they
14:15 - die and as you can see the player can
14:17 - only attack a single zombie at once so
14:20 - after a while he becomes completely
14:21 - overrun so he only has one active target
14:24 - and only when that target is dead does
14:26 - he try to find another so essentially we
14:28 - have a system looking for the closest
14:29 - target and storing that target entity in
14:31 - a component in the player so here you
14:33 - can see the component the player single
14:35 - target the type component data and
14:37 - simply contains a target entity then we
14:39 - have the targeting system
14:41 - it simply cycles through all these
14:43 - zombies and looks for the closest one
14:44 - and sets that target entity and then the
14:47 - attack system which has a simple attack
14:49 - timer it checks the player single target
14:51 - component if it has a target then it
14:53 - spawns a Qunari in order to attack that
14:56 - target so again here is the demo and the
14:58 - limitation is we're only attacking one
15:00 - enemy at a time now that we've learned
15:02 - about dynamic buffers let's use one so
15:04 - the player can target multiple enemies
15:05 - at once so first we create our dynamic
15:08 - buffer element so let's create a new
15:10 - script call this our player target
15:12 - element and inside we're going to
15:16 - implement our interface
15:22 - all right so here's our buffer element
15:24 - data that contains a target entity and
15:27 - let's define it as a buffer capacity of
15:29 - five so here in the scene I have the
15:31 - player game object as you can see it has
15:34 - the various components and using the
15:35 - conversion workflow so let's make a
15:37 - authoring component so let's make a new
15:39 - script code our player target element
15:42 - authoring now let's do the same thing
15:45 - that we did with our previous authoring
15:46 - component except in here all we want is
15:52 - a D buffer so we do not want any public
15:55 - fields and said we are simply going to
15:58 - go into our entity manager and we have
16:00 - our buffer of this case the player
16:02 - target helmet so all this authoring
16:05 - component does is add an empty buffer
16:07 - and in the editor we just select the
16:09 - player and drag our authoring component
16:11 - and there you go now this entity will
16:13 - have a player target element buffer and
16:15 - over here on the targeting system we
16:17 - were cycling through the player single
16:19 - target and let's modify this to work
16:21 - with our dynamic buffer element alright
16:44 - so here I modified the code in order to
16:45 - work with the dynamic buffer so the
16:47 - logic is still pretty much the same
16:49 - except instead of the closest we get
16:51 - five targets that are valid within the
16:52 - range so the first thing we do is clear
16:54 - our dynamic buffer then we cycle through
16:56 - all the zombies we don't the ones in
16:59 - range into this zombie entity and list
17:01 - and after cycling through all of them we
17:04 - add them once the length is under five
17:05 - so we're going to add up to five targets
17:07 - within range and now let's go into the
17:09 - attack system so here it is and we're
17:12 - working with the players in on target
17:13 - and let's replace this with our dynamic
17:15 - buffer
17:24 - and here we do pretty much the same
17:26 - thing we just cycle through our dynamic
17:28 - buffer okay so here I've changed
17:30 - everything from working with a simple
17:32 - component to working with the dynamic
17:34 - buffer that holds multiple components so
17:36 - now let's test and see if he attacks
17:38 - more than one enemy all right so here we
17:40 - are and yep you can indeed see the
17:42 - player attacking multiple enemies at
17:44 - once so as they get within range up to
17:46 - five enemies are gonna be attacked
17:48 - instantly so here you can see a
17:49 - practical application of how we took one
17:51 - system that supported a single target
17:53 - and updated it to support multiple
17:55 - targets so now you know how to use
17:57 - dynamic buffers so go ahead and build
17:59 - your awesome dots games this video is
18:02 - made possible thanks to these awesome
18:03 - supporters go to patreon.com/scishow to
18:06 - code monkey to get some perks and help
18:08 - keep the videos free for everyone as
18:10 - always you can download the project
18:11 - fastening tony's from unity karma comm
18:13 - subscribe to the channel for more unity
18:15 - tutorials post any questions in the
18:16 - comments and I'll see you next time
18:19 - [Music]
18:22 - you