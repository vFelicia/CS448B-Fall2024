00:00 - hello and welcome I'm your code monkey
00:01 - mendes series with creating spiderman in
00:03 - unity 2d in this video we're going to
00:05 - add the ability to shoot webs as
00:07 - projectiles let's begin
00:11 - okay so this is the scene so far I have
00:14 - Spider Man walking around there are
00:16 - enemies being spawned and I can kick and
00:18 - punch them and after some hits they go
00:21 - flying away and also by hitting space I
00:24 - can do a web sip to move around the map
00:26 - very quickly so I can do attack them and
00:29 - so on okay great so now let's add
00:32 - another web-based ability we're going to
00:34 - shoot some webs as projectiles that we
00:35 - can later use to web up and deal damage
00:37 - to enemies so here in the editor let's
00:40 - begin by making a prefab that we're
00:42 - going to instantiate so in here let's
00:44 - begin by making an empty game object
00:46 - this will be the web projectile and I'm
00:49 - going to add a sprite renderer component
00:51 - and add the web projectile sprite so
00:55 - there it is that's the sprite so let's
00:58 - make it into a prefab by making a new
01:00 - prefab and we're going to call PF web
01:03 - project out we're going to use the
01:05 - physic system to detect collisions so in
01:07 - here let's add a box Collider 2d and
01:10 - also a rigidbody 2d we're going to move
01:14 - our projectile by modifying the
01:15 - transform instead of using add force so
01:18 - in here on the rigidbody on the body
01:20 - type and start being dynamic and let's
01:21 - set it to kinematic alright so that's a
01:24 - setup require to have physics working on
01:25 - this object so now let's do a script to
01:28 - control this so make a new c-sharp
01:30 - script and we're going to name this key
01:32 - web projectile so first let's just do a
01:35 - very simple movement let's define a
01:38 - private consulate for the spin of this
01:41 - projectile let's give it a small amount
01:44 - so we can see it visually moving we're
01:46 - going to have the private vector3 for
01:48 - the direction that this projectile will
01:50 - be headed towards let's make a private
01:53 - void setup function and in this setup
01:56 - function we're going to receive the
01:57 - direction so on the private void awake
02:02 - let's call that set up and give it a
02:07 - vector3 just moving to the right so 1 0
02:10 - okay that's the direction and now on our
02:13 - private Boyd update we're going to move
02:15 - the transform towards that direction so
02:17 - transform that position increase the
02:19 - position by the direction multiply
02:21 - by speed multiplied by time downtime
02:25 - okay so let's see the code in action and
02:28 - we should have this projectile moving
02:30 - towards the direction which is to the
02:31 - right yep there's a projectile as you
02:34 - can see it is moving to the right okay
02:35 - so now that the projectile movement is
02:37 - working we want to look for a collision
02:39 - so for that I'm going to create a very
02:42 - simple wall so in here create an empty
02:44 - game object this will be my wall I'm
02:46 - going to add a sprite renderer component
02:48 - and drag a white pixel this way I can
02:52 - see a visual square okay like that and
02:55 - make it look like a wall now add the box
02:58 - Collider component and make this a
03:00 - trigger now we can go back into the
03:03 - projectile code and in here in order to
03:06 - test for collisions we're going to use
03:08 - the private void on trigger enter 2d
03:11 - this function is called when this box
03:13 - Collider hits another physics object
03:15 - with the trigger set to true so in here
03:18 - when we do hit something let's simply
03:19 - just destroy this projectile so do a
03:21 - very simple destroy this game object
03:24 - okay so let's test and see if the
03:27 - projectile does vanish one hits the wall
03:29 - there's a projectile moving slowly to
03:31 - the right and when he gets there yep he
03:33 - vanishes great so we now have collisions
03:35 - fully working so with that let's make a
03:37 - create function to be able to easily
03:39 - spawn projectiles so let's go all the
03:41 - way up here and make a public static web
03:44 - projectile and we're going to call it a
03:47 - create this one will insensate various
03:49 - projectiles for the arguments let's
03:52 - receive a vector three for the position
03:54 - that we want to spawn the projectile at
03:56 - and a vector three for the direction
03:58 - that we wanted to move towards so in
04:00 - here we want to in Senshi eight and we
04:03 - need a reference for the prefab to
04:05 - instantiate so for that I'm going to go
04:07 - into the game assets class that we've
04:08 - been using if you haven't seen this this
04:10 - is a very simple class that has an
04:12 - instance in our scene so using the
04:14 - static instance we can easily access
04:16 - these references so in here I'm going to
04:18 - add another field for the spider-man web
04:20 - projectile and back into my projectile
04:24 - in here I can instantiate going into the
04:26 - game assets that instance and grab the
04:29 - web projectile I'm going to instantiate
04:31 - him and
04:32 - position and with a quaternion dot
04:34 - identity so this returns a transform for
04:38 - the web projectile transform then I get
04:42 - into the transform get the component of
04:44 - type web projectile and that returns the
04:46 - web projectile then we call this set up
04:51 - to set the direction we give it two
04:52 - direction and we'll return this web
04:54 - projector
04:55 - okay so we now I have a nice easy simple
04:57 - static function to create various
04:59 - projectiles so in order to test this
05:01 - let's go into the game Handler and over
05:04 - here on start let's just fire
05:05 - projectiles all over the place so in
05:07 - here make a function periodic which
05:10 - again is part of the code monkey
05:11 - utilities that you can wear up for free
05:12 - from unity code monkey calm and I'm
05:15 - going to create a function periodic
05:17 - which triggers a certain action every
05:19 - certain amount of time so let's say
05:21 - every 50 milliseconds we are going to
05:23 - trigger this action and in this action
05:25 - we're going to go into the web
05:27 - projectile and in sin she ate a new
05:29 - projectile let's start from the
05:32 - spider-man get position and let's give
05:35 - it a random direction so use Utahns
05:37 - class to get a random direction okay so
05:40 - every 50 milliseconds we should be
05:42 - firing a projectile in a random
05:43 - direction let's see and yep there they
05:46 - are projectiles going in every direction
05:48 - and whenever one hits the wall they
05:50 - vanish all the others keep going okay so
05:52 - now as you can see the rotation is
05:54 - incorrect so let's fix up over here on
05:56 - the setup let's rotate the transform so
05:58 - in community transformer angles and
06:02 - modify the owner angles give it a zero
06:05 - zero on the x and y and now on these Zed
06:07 - go into the utils class and get the
06:10 - angle from vector of this direction okay
06:13 - and yep the rotation is now correct and
06:15 - you got webs being shot down all over
06:17 - the place and again when they hit the
06:19 - wall they won't vanish correctly now if
06:21 - we pause the game we can see that
06:22 - there's a massive amount of projectiles
06:24 - firing all over all right there you go
06:26 - and yep they're there and if we go down
06:29 - in the hierarchy yep you can see a
06:31 - mountain of projectiles essentially if
06:33 - they don't hit a wall they keep going on
06:35 - forever obviously we don't want objects
06:37 - only forever so let's go back into the
06:39 - code so in here on let's have a maximum
06:41 - distance this can be variable before now
06:44 - let's set up as
06:45 - constant so constant float for the
06:49 - distance traveled max and let's say
06:54 - maximum I want them to travel 100 units
06:56 - then we have a private float for the
06:59 - distance travel and on our updates let's
07:03 - simply increase the distance traveled by
07:05 - the speed times time time so this is how
07:09 - much heat this object has trouble so if
07:12 - the distance travel if it is bigger than
07:14 - the distance traveled max then
07:17 - essentially the projectile has traveled
07:21 - too much destroyed so I'm going to
07:24 - destroy this game object okay so that's
07:27 - pretty simple
07:28 - let's test and see if they now destroy
07:30 - after some time okay there they are they
07:32 - are being spawned they are going in yep
07:34 - there you go there's about a hundred
07:36 - units from there to there and when they
07:37 - get there yep they vanish and now we can
07:40 - pause and check out the hierarchy and we
07:42 - no longer have objects all over the
07:44 - place okay great
07:45 - so now let's make them spawn manually
07:47 - from spider-man so let's head into the
07:50 - spider-man class and here on the normal
07:52 - let's set a node function for the handle
07:54 - shoot web projectile so let's go down
08:00 - here and make that function now in here
08:05 - let's test for an input so in here I'm
08:07 - going to test for get he down of key
08:11 - code let's say F so when we press F we
08:15 - want to fire a web projectile now we
08:18 - want to fire it towards the mouse so
08:20 - let's currently take a vector3
08:22 - for the projectile deer which won't be
08:24 - the utens class to get the mouse
08:28 - position mine is this position and
08:31 - normalize the whole thing so using that
08:34 - we can simply go into the web projectile
08:36 - class and create a new web projectile
08:38 - spawning from this get position and
08:41 - towards the projectile direction okay so
08:43 - let's go back in here and comment out
08:45 - this code and see if we can manually
08:48 - spawn webs okay here I am everything
08:50 - works the same I can move I can punch
08:52 - and kick okay and I can also webs it and
08:55 - now if I click have yep there you go
08:57 - he's firing one project
08:58 - now obviously we need to change the
09:00 - speed of the projectile but yep they are
09:02 - being spawned from there now in here
09:04 - when we are shooting the projectile
09:05 - let's also play an animation so I'm
09:07 - going to go into the spider-man base
09:10 - class and play the shoot web animation
09:14 - we need to play towards the projectile
09:16 - direction when it completes it won't
09:19 - fire this action okay so here before we
09:23 - play the animation let's modify the
09:25 - state so let's add another state and the
09:27 - state won't be shooting web projectile
09:31 - so this is what we want to set in here
09:33 - when you play the animations at the
09:34 - state equal state dot shooting or
09:36 - projectile when the animation is
09:38 - complete let's set the state back to
09:40 - normal so now let's go up here into the
09:44 - update in case we are on state shooting
09:47 - web projectile if we are then let's
09:50 - handle shooting more projectiles so
09:52 - essentially once we're shooting a
09:53 - projectile we cannot move but we can
09:55 - shoot more projectiles so let's see if
09:57 - the animation is playing okay so here I
10:00 - am moving around if I press F yep there
10:02 - you go he's firing projectiles and
10:04 - projectiles vanish when they hit the
10:06 - wall or after reaching a certain
10:07 - distance so in here I can move around
10:10 - I can still words if I can still tag
10:11 - everything still works and firing
10:13 - projectiles all over the place okay
10:14 - great so now that we have our
10:16 - projectiles working let's add a particle
10:18 - on the floor when they get destroyed so
10:21 - for that we're going to keep our code
10:22 - clean and the logic separate from the
10:24 - extra effects so with that in mind let's
10:26 - use some events so in here on the web
10:28 - project now let's make a public static
10:31 - event an event handler event and we're
10:34 - going to call this on web reached max
10:37 - distance so this won't be fired when the
10:39 - web reaches the max isn't then let's
10:42 - also have another event for the on web
10:44 - hit object in case we want different
10:46 - behavior so now it's very simple to fire
10:48 - these events so in here when the
10:50 - projectiles travel too much if the event
10:53 - does have subscriber so it's not know
10:56 - then let's fire the event using this an
10:57 - event our X dot empty okay and well
11:00 - let's fire this actually before we
11:01 - destroy the game object
11:02 - just in case whoever captures this event
11:04 - once you get the position from this
11:06 - object then let's do the same thing on a
11:08 - only
11:11 - just like that okay
11:13 - so using that we cannot make another
11:15 - class to capture these events so here
11:17 - let's make a new c-sharp script this
11:19 - will be the web for particles now this
11:23 - will be a very simple class so remove on
11:25 - this the amount of behavior and make it
11:27 - a static class since we don't want to
11:28 - instantiate this let's make it have a
11:31 - public static void init function to
11:33 - initialize this class and in here
11:35 - essentially we're going to go into the
11:36 - web projectile and capture those events
11:39 - so capture this event and the other one
11:41 - as well so when these events are
11:45 - triggered let's spawn a web particle
11:47 - over here I have a web on the floor
11:50 - there you go just like that that's a
11:52 - simple sprite so let's make this into a
11:54 - prefab that we can instantiate make it a
11:57 - prefab DPF web floor again do the same
12:03 - thing and add the web for into our game
12:07 - assets and then we can simply go back
12:09 - into the web for particles and here
12:11 - let's use that to instantiate any web
12:14 - for particle so use object instantiates
12:17 - we're going to instantiate into game
12:19 - assets that instance and grab the prefab
12:22 - for the web on the floor and now for the
12:24 - position that I'm going to spawn I need
12:26 - to capture the sender so the sender is a
12:29 - web project um so well projectile equals
12:33 - sender as a web project now we could
12:36 - also obviously have a custom event
12:38 - arguments but this works and pretty
12:40 - simple so using the web project I'll
12:42 - grab the transformed position and again
12:45 - put an entire identity and just like
12:47 - that so just like that we are spawning
12:49 - this prefab into the web projectile
12:52 - position whenever this event is fired so
12:54 - it's the exact same thing for this other
12:56 - event and just like that so now all
12:58 - that's left is in the game hammer in
13:00 - here on our way to let's go into the web
13:02 - for particles and initialize that class
13:06 - so this one calls in it and this one
13:08 - subscribes in those events and when
13:10 - those events are triggered he insensate
13:12 - this sprite okay so let's see ok Here I
13:16 - am if I press F there goes a particle
13:18 - and yep it gets there and it changes
13:20 - into a nice sprite that shows
13:23 - a projectile winter and it stopped on
13:25 - the floor and again I can also hit a
13:28 - wall and I can spam to hit the wall and
13:30 - just like that now we could have a
13:32 - different sprite for when hitting a wall
13:34 - versus when hitting before but you know
13:36 - that's just polished so lets you see and
13:38 - yep exactly
13:39 - everything is firing and we can still
13:41 - webs if around the map and we can sell
13:43 - punch and kick so there you have it we
13:45 - have the ability for our spider-man T
13:47 - should work projectiles we made those
13:49 - webs go in a straight line and added
13:51 - collision detection to stop when hitting
13:52 - a wall in the next video we're going to
13:54 - fire webs towards the enemies and web
13:56 - them up and cause damage as long as you
13:58 - can download the project files in it
14:00 - somebody's from indie code monkey calm
14:01 - if you have any questions post them in
14:03 - the comments and I'll do my best answer
14:05 - now subscribe for more videos and I'll
14:06 - see you next time