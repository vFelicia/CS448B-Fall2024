00:00 - in this video we're going to create a
00:01 - procedurally generated endless-runner
00:03 - map we're going to make several handmade
00:05 - parts and connect them all together to
00:07 - infinity let's begin
00:12 - [Music]
00:16 - hello and welcome I'm your code monkey
00:18 - and this channel is all about helping
00:19 - you learn how to make your own games
00:21 - with NF tutorials made by a professional
00:23 - indie game developer so if you find the
00:25 - video helpful consider subscribing
00:27 - so this is what we want to create we
00:29 - have our endless runner that starts
00:31 - stopped so I hit space and he starts
00:33 - running and constantly running to the
00:34 - right and here as you can see we have an
00:37 - infinite randomly generated level the
00:40 - level is made of handmade parts so each
00:42 - of these is one section that was
00:45 - individually created and like this drop
00:46 - right here and we simply stitch them
00:49 - together and as the player gets closer
00:51 - to the end more get generated and so on
00:53 - and so on so this goes on forever
00:55 - alright so this is our goal let's get to
00:58 - it so here is my starting scene I just
01:02 - have the player sitting around and when
01:04 - I press space he's gonna start running
01:06 - so pressed there yo he starts running to
01:08 - the right I can jump I can catch coins
01:10 - and if I touch the spikes I die and it
01:13 - allows me to reset so you can see that
01:16 - the scene has physics using gravity and
01:18 - automatic runner player movement I've
01:19 - done a video on a simple character jump
01:22 - so check out the link in the description
01:24 - to see how these simple jump works ok so
01:27 - now let's think of how we're going to
01:28 - take this in order to create an infinite
01:31 - procedurally generated map in order to
01:33 - be infinite that means we need to
01:34 - constantly be creating it through code
01:36 - so here I have my starting platforms and
01:39 - then I need to add something over here
01:40 - at the end so then the question becomes
01:43 - what do we create in order to add at the
01:45 - end there and the answer is manually
01:47 - don't live on parts so we construct a
01:49 - couple of different prefabs that make up
01:51 - level sections and then we randomly pick
01:53 - one and spawn it right at the end of the
01:55 - current map ok so let's get to it
01:58 - here is the editor scene as you can see
02:00 - I have the player and then a level start
02:03 - this contains all of the main level as
02:06 - you can see a simple prefab for the
02:08 - coins another one for the spikes and our
02:10 - platforms so let's start off by making a
02:13 - first part so down here make a new empty
02:16 - game object and we're going to name this
02:18 - in level part 1 now inside we're going
02:21 - to add another platform this platform as
02:25 - you can see it's very simple just the
02:26 - sprite renderer with
02:27 - box Collider and the layers it's on the
02:29 - platform's layer now the origin for this
02:33 - game object this is going to be the
02:36 - place where the last platform ended so
02:37 - essentially the origin for our level
02:39 - part one won't be placed right here so
02:41 - drag it in there and now we can locate
02:43 - our inner platform and let's put it to
02:46 - make a small gap okay that you do it so
02:49 - this is the origin and this is where we
02:51 - place our platform so this should do it
02:53 - to make a nice simple test so again
02:56 - we're going to be in sin cheating
02:57 - prefabs so let's make this into a pre
02:59 - found and now let's make a script in
03:02 - order to generate it so we go in here
03:04 - make a new you see sharp script this
03:05 - won't be the in level generator let's
03:09 - make a game object that won't run this
03:11 - script so in here an empty game object
03:13 - for the unlevel generator and we drag
03:16 - our script okay now in here let's make a
03:19 - perfect void awake and we're going to
03:22 - spawn our level part so in order to do
03:24 - that we need a reference to it so add a
03:27 - serialized field for a private transform
03:30 - for the unlevel part one here in the
03:34 - editor and let's drag our prefab
03:35 - reference okay and then we just
03:37 - instantiate so in sin she ate the
03:40 - 11-part one then we need a position so
03:44 - let's manually see where it should be
03:45 - and we're going to place it in there so
03:48 - on one three four and nine okay so that
03:55 - should do it so we should be able to see
03:56 - our eleven part one being accentuated
03:58 - right at that point so let's remove the
04:01 - prefab from our scene and all its tests
04:04 - and see if that part indeed get spawned
04:06 - right in here so let's see here we are
04:09 - start running run to the right any of
04:11 - there you go this is the end of the
04:13 - starting platform and there's the new
04:15 - one okay great now let's put this spawn
04:17 - in a separate function so in here we'll
04:20 - make a private void spawn level part and
04:23 - we're going to receive a vector3 for
04:25 - these fallen position
04:27 - so anyway we're going to do pretty much
04:29 - this and we use the spawn position as
04:32 - the spawn position so here for testing
04:35 - let's spawn our first level part on the
04:37 - same position and then let's also spawn
04:42 - another one to the side so let's put it
04:45 - 70 to the right and another one seventy
04:50 - plus seventy okay so we should be able
04:53 - to see three and level parts being spawn
04:55 - let's see okay here we are on the start
04:58 - start running there's okay yep there's
05:01 - our first part and right there our
05:03 - second and right there our third and the
05:05 - map ends okay great
05:07 - so we can now successfully spawn as many
05:10 - parts as we need however all of our
05:12 - spawn positions are currently hard-coded
05:15 - into our code that's obviously not good
05:17 - not very stable so let's see how we can
05:20 - make these spawn positions based on the
05:22 - editor instead of being numbers in code
05:24 - so here on the 11-part start we can I
05:27 - have an empty game object inside it and
05:30 - let's call this the end position this
05:33 - will serve as our in position from where
05:36 - this level part ends and where the next
05:37 - one should begin so let's place it right
05:40 - at the end of the Alliance platform so
05:43 - here we have the end position and let's
05:44 - put it right in there in order to make
05:47 - it visible in the editor and let's
05:48 - simply add a background and make 2d
05:52 - gizmos and if there you go there's our
05:54 - nice end position so this won't be the
05:56 - place where the next level part will be
05:58 - spawned so let's do the same thing for
06:00 - our custom level part here we are in
06:04 - here and let's also add a end position
06:06 - make sure that it's named in position
06:08 - and put it right there at the end of
06:10 - that okay since we're dealing with
06:13 - prefabs don't forget to come here and
06:15 - apply all our changes
06:16 - okay so this should be working now in
06:19 - order to see what we can do with this
06:21 - instead of placing it right there
06:22 - horizontally let's move these two up a
06:24 - bit so essentially right here is the
06:28 - origin of this level part and then it
06:30 - ends in there so it ends higher than it
06:32 - begins so essentially with every single
06:34 - level part being spawned slightly higher
06:37 - we won't have
06:38 - an infinite clamp so this is our editor
06:40 - setup again make sure to update the
06:43 - prefab and now let's go back to the code
06:46 - and in here let's first add a reference
06:48 - for our starting level part so a
06:51 - civilised field or the private transform
06:54 - for the in level part start here in the
06:59 - editor and let's drag our reference
07:01 - here's our let's on generate and drag
07:03 - the 11-part okay and on awake before we
07:06 - start generating our level let's first
07:08 - grab the end position from this starting
07:10 - level part so you go to the level parts
07:12 - start and find the end position so this
07:17 - is what we want to use in order to spawn
07:19 - the next level part so we use this
07:21 - inside here and then on this spawn level
07:25 - part we also need to return the
07:26 - transform so we can know how to locate
07:28 - the next one so in here we return a
07:31 - transform and here we grab transform
07:37 - from the in last level part transform he
07:42 - said it as what we get from there and
07:44 - then from this one to use that as the
07:46 - end position so we find the end position
07:50 - and we spawn a bunch of them okay so we
07:56 - should be correctly spawning every level
07:58 - part one instance at the end of the
08:00 - previous one so since we put it higher
08:02 - we should see a nice climb with a bunch
08:05 - of middle part so let's see okay here we
08:08 - are let's start running and start
08:11 - running this is and there's the end of
08:12 - the start and there starts a new one and
08:14 - the new one slightly higher and another
08:16 - one slightly higher and so on
08:18 - ok great so we can now correctly spawn
08:21 - our level parts and manually define
08:23 - where they will so now that we have
08:25 - endpoints placed on our own level parts
08:27 - let's work on making it infinite what
08:30 - that means is essentially every time the
08:32 - player gets closer to the end we spawn
08:33 - some more and keep spawning spawning
08:35 - spawning so let's go back into our code
08:37 - and the first thing we can do is
08:39 - simplify our spawn level part code so
08:42 - let's make a simple function that takes
08:44 - no parameters and automatically
08:45 - calculates the spawn position so a
08:48 - private
08:49 - Boyd spawn level parts all we need this
08:54 - is stored up here a private vector3 for
08:57 - the last in position and in here we
09:02 - spawn in level part on the last end
09:04 - position so this will return a transform
09:08 - reference for the last level part
09:11 - transform and then we set in last and
09:14 - position to be on this one and we find
09:17 - it so this one automatically spawns the
09:24 - in level part and locates it correctly
09:26 - so here all we need is to set the honest
09:29 - and position to the starting and
09:31 - position so the start end position then
09:36 - instead of on this code all we need is
09:37 - to spawn the 11-part okay let's make
09:41 - sure if it's working so here we are grab
09:43 - a bunch of coins jump over this and yep
09:45 - there's that one and there's now okay so
09:47 - we now have a very nice simple function
09:48 - now we want the level to be constantly
09:50 - spawned as the player moves along so
09:53 - since we are spawning level parts we can
09:55 - simply define a value for the minimum
09:57 - distance of the player to the very last
09:59 - level part so for that let's make a
10:01 - constant so a private concert for the
10:04 - player distance
10:06 - spawn level parts and here we just put a
10:11 - certain amount so if the player is
10:13 - within this many units of the US level
10:16 - part then let's spawn some more so to
10:18 - test our distance let's make a fresh
10:20 - voice update and on the update we need
10:23 - to test distance between the player and
10:25 - the almost position so that means we
10:27 - need a reference for the player so again
10:29 - another civilized field for the private
10:31 - player reference here we drag our
10:35 - reference okay and now in here if the
10:39 - vector 3 dot distance between the player
10:41 - yet position and the last and position
10:45 - if that distance is under the player
10:48 - distance spawn and level part then we
10:52 - want to spawn another plugin part so
10:55 - very simple
10:57 - so as the player gets closer to the end
10:59 - he spawns another one now an awake let's
11:02 - just preload a bunch of parts so we'll
11:04 - find an end for the starting spawn level
11:08 - parts and let's say we spawned five we
11:12 - do a simple four okay
11:18 - that should do it so just like this our
11:20 - level should now be infinite as the
11:22 - player moves towards the in last end
11:23 - position he's going to spawn more more
11:25 - and more so let's start ok here we are
11:29 - with the game view and the scene view
11:30 - side by side as you can see we have the
11:33 - starting level part then we have a bunch
11:35 - of them being spawned as you go all the
11:37 - way in from there so as we get closer to
11:39 - this one we should be able to see more
11:40 - being spawned so let's start playing
11:42 - there goes the player and he keeps going
11:47 - and going and as he gets closer to the
11:49 - last one yup there you go another one to
11:51 - spawn he gets close and another one is
11:53 - pawn and closing another one so just
11:55 - like this we have created a infinite
11:58 - level and an infinite climb and we can
12:00 - do this forever
12:01 - all right great exactly as intended
12:05 - so the functionality is fully working
12:07 - but obviously it's extremely don't if
12:09 - one we have is just one level part
12:11 - however since we set things up in order
12:13 - to use prefabs it's extremely simple to
12:16 - manually create a bunch of interesting
12:17 - ones and then we randomly pick from them
12:19 - so let's make a bunch more level parts
12:22 - so all we need is to make a new game
12:24 - object the in level part two for testing
12:28 - let's try placing it right there at the
12:30 - end and now we add another platform and
12:33 - the only requirement for each level part
12:36 - is that each of them has its own end
12:38 - position so now I can for example say
12:41 - that this one will have a slight drop
12:52 - and then I can also place the coins so I
12:54 - drag the coin profound so place a coin
12:57 - there another one there another one up
12:59 - there and yep just like that and if I
13:02 - want I can also play some spikes
13:07 - okay so again as you can see it's very
13:10 - easy to manually create a eleven part
13:12 - and again the only thing that we need to
13:14 - be careful is in adding the end position
13:16 - so make sure it's at the end of this
13:18 - platform so the next one knows exactly
13:19 - where it should connect then we need
13:22 - this to make this a prefab so just drag
13:24 - it in there there you go this is now our
13:26 - prefab so now that we have our two
13:28 - prefabs and let's see how we can
13:29 - randomly choose one so here on the
13:32 - eleven generator let's go up here and
13:34 - here we have a reference for the part
13:36 - one now we also need a reference for the
13:38 - part two so instead of adding individual
13:40 - ones let's rename this to the 11-part
13:43 - list and here we receive a list of trans
13:46 - ones so here in the outer as you can see
13:49 - we got our level part list let's put two
13:51 - and we drive local part one and level
13:54 - part two there it is like that okay now
13:58 - back in the code and let's go down to
13:59 - the spawn level parts here we have a
14:02 - function that is automatically and takes
14:04 - care of everything then we have this one
14:06 - so for this one let's also receive a
14:08 - transform for the eleven parts and
14:10 - that's the one that he's going to
14:11 - instantiate okay and then this function
14:14 - won't take care of choosing a random own
14:16 - in order to do a transform for the
14:18 - chosen level parts we go into the
14:22 - 11-part list and we pick one we grab a
14:26 - random range starting at 0 going into a
14:30 - level parts list up count and just like
14:33 - that so here we are grabbing a random
14:36 - level part and that's the one that we
14:37 - pass in to spawn okay so that should do
14:40 - it
14:41 - let's test ok so here we are let's see
14:44 - for both of our level parts are being
14:46 - randomly spawn so we start running and
14:48 - here we go at the end the start and yep
14:50 - there's the second one being spawned
14:52 - right away so I can jump I can grab
14:54 - these coins and yep just like that and
14:57 - there's the number one there that small
14:59 - jump was the number
15:00 - and again we got another one falling
15:02 - down and that one is up so that's the
15:05 - first part another first part and
15:07 - another second and so on so as you can
15:09 - see we are now correctly randomly
15:10 - picking between two different parts okay
15:13 - so everything is pretty much working now
15:16 - that's left is to create a bunch of
15:17 - level parts that we won't randomly spawn
15:19 - so let's do that
15:58 - so here I have created a bunch of
16:00 - different level parts all we need to
16:03 - make this work is just going to the
16:05 - unlevel generator and add them all to
16:07 - the list so in here drag all six parts
16:11 - drag them onto the list and that's
16:13 - pretty much it so let's test and see if
16:15 - all of our random parts are being used
16:18 - okay here we are started running on the
16:20 - starting level part and yep there's
16:22 - another one and right there jump over
16:25 - that one and there's a different one
16:27 - right there and there's another one
16:29 - right there and yep there it is
16:31 - alright so this is pretty great so just
16:34 - like that you can see that our level is
16:36 - infinite and made up of handmade level
16:38 - parts the eleven parts have coins and
16:41 - spikes and it's up to you to add more
16:43 - things on to it you could add more
16:46 - objects to interact with like for
16:47 - example on moving enemies or moving
16:49 - platforms and if you wanted you could
16:52 - make different level parts per different
16:53 - level so you would have some level parts
16:56 - for an easing level and some for a heart
16:58 - level all you would need to do would be
17:00 - to change the level parts that you use
17:02 - as always you can download the project
17:04 - files in utilities from unity code
17:06 - marcom if you liked the video subscribe
17:08 - the channel for more unity to turrets
17:10 - post any questions you have in the
17:11 - comments and I'll do my best Internet
17:13 - alright see you next time
17:14 - [Music]