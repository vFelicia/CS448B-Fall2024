00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're continuing to
00:03 - make the demo man from Team Fortress 2
00:05 - in unity now that we have the two
00:07 - primary weapons completed we're going to
00:09 - add limited ammo and the ability to
00:11 - reload let's get started
00:17 - ok so I have my demo man here he is
00:20 - currently firing sticky grenades we
00:22 - check and fire and explode on command ok
00:25 - and if I go into my cone here I can
00:29 - switch to my bouncy grenades and there
00:32 - they are they're bouncing off walls and
00:34 - everything still works the same ok great
00:38 - now before we move further we're going
00:40 - to refactor some of our code until now
00:43 - the player handler class was responsible
00:45 - to handle weapon firing but since we
00:47 - want to add more inputs to our demo man
00:49 - it makes no sense that I'm firing in one
00:51 - class and rest of the inputs in another
00:53 - so we're going to set everything up in
00:55 - our game handler class right here where
00:57 - we have the exponent burn X the player
01:00 - handler will only be responsible for
01:02 - playing the animations and handling
01:04 - player movement so in order to make
01:06 - things easier I implemented this
01:08 - interface in the player handler to
01:10 - expose these functions which we will use
01:12 - to handle our reload so we have a
01:15 - function can play animation shoot can
01:18 - play animation reload we can play the
01:20 - animation to shoot play the animation to
01:22 - reload and get the gun endpoint position
01:24 - this way we can keep on related logic in
01:27 - the same class
01:28 - so let's first go back up here and we're
01:31 - going to change from using the player
01:34 - handler on shoot to placing everything
01:36 - on our update let's take care of the
01:39 - primary weapon fire so in here if input
01:43 - dot get mouse button down of mouse
01:46 - button 0 so the left mouse button we're
01:50 - going to test if the player interface
01:53 - can play the animation to shoot then
01:58 - we're going to play the animation shoot
02:01 - and before that we need a vector 3 for
02:05 - the target position which we're going to
02:08 - go into the utils class which is part of
02:11 - the code monkey utilities which you can
02:12 - grab for free from unity code monkey
02:14 - comm so we're going to go in here and
02:17 - get the mouse world position that's
02:20 - going to be our target position so play
02:23 - the animation shoot point it towards
02:25 - that and instead of using this event
02:28 - since we're no longer
02:30 - our inputs on the player Hamelin in here
02:33 - when we play the animation to shoot
02:35 - we're going to spawn our grenade but
02:38 - obviously we need these values so for
02:41 - our shoot position won't be the target
02:43 - position and for the gun end point
02:46 - position I'm going to go into the player
02:48 - interface not yet gun and point position
02:51 - and yet we'll be on shoot since we're
02:55 - using okay so let's test it out and
02:59 - everything should be working exactly the
03:01 - same except right now everything is a
03:03 - lot more clean and we have our logic our
03:06 - input logic here in the exact same place
03:08 - let's test it out here's my demo man I
03:12 - can fire bounty grenades and everything
03:13 - works exactly the same okay great
03:17 - we have successfully cleaned up our code
03:19 - now for our ammo control we're going to
03:22 - leave that responsibility to the
03:24 - individual grenade classes so let's
03:26 - start off with a bouncy grenade and in
03:29 - here let's set up some static variables
03:32 - to hold our ammo so I'm going to start
03:34 - with private static int ammo which will
03:38 - contain our current ammo amount and
03:40 - let's also had a private Const int for
03:44 - our ammo max which in the case the
03:46 - bouncy Bernays will be for we can have
03:49 - at most four grenades at once so now in
03:52 - here when we are creating a new bouncy
03:54 - grenade let's reduce our ammo amount and
03:58 - let's set up some public functions to
04:01 - make sure we have enough ammo to be able
04:03 - to create our bouncy Burnette so in here
04:06 - I'm going to make a public static ball
04:09 - has ammo and it's going to return if our
04:12 - ammo is greater than zero I'm also going
04:16 - to have a public static void reload ammo
04:19 - which will simply set our ammo to
04:22 - our animal maths and finally a public
04:26 - static bull can reload which will return
04:31 - if our ammo is less than ammo max okay
04:36 - great
04:36 - we have all the functions implement our
04:38 - unlimited ammo system so let's go back
04:41 - into our game handler now in here before
04:43 - we actually fire let's test if we have
04:45 - enough ammo
04:46 - so if bouncy grenade that has ammo then
04:55 - I'm going to shoot and let's also go in
04:59 - here and set our starting value to be
05:02 - ammo max so we are testing if we have
05:04 - ammo if we do we create a new bouncy
05:07 - grenade and as we create a new one the
05:09 - ammo gets reduced so after firing four
05:11 - times this should return false and we
05:14 - should no longer be able to fire any
05:16 - more bouncy grenades so let's test and
05:18 - see if that behavior is correct okay
05:22 - here's my demo man I can fire one
05:24 - grenade - grenade three grenades four
05:27 - grenades and nothing else okay great
05:30 - now let's set up the reload so back into
05:34 - our code here on our update we're going
05:37 - to test if my input got get King down of
05:43 - the key code R which is going to be our
05:46 - reload button so if I press R let's see
05:50 - if first of all if my player interface
05:52 - dot can play the animation to reload
05:55 - then I'm going to go if the bounty
05:58 - grenade dot can reload meaning if we
06:02 - have less than the maximum amount of
06:04 - ammo then we're going to actually really
06:07 - so going to the player interface not
06:09 - play the animation to reload give it the
06:12 - target position and now in here we can
06:16 - also send a action that won't be
06:19 - triggered when the animation completes
06:20 - since if we interrupt the animation we
06:23 - don't want to actually reload but when
06:25 - the animation actually completes this
06:27 - will be triggered and it will do bouncy
06:29 - grenade dot
06:30 - reload ammo okay there you have it when
06:34 - we press the our key
06:36 - we're going to check if we can play the
06:38 - animation to reload which essentially
06:40 - means if we're not in the middle of any
06:41 - other animation we're going to ask the
06:44 - class if we can reload we're going to
06:46 - play the animation to reload and when we
06:48 - finish playing the animation we're going
06:50 - to actually reload the ammo value okay
06:53 - so let's go back into our scene see if
06:56 - we can fire four grenades reload and
06:58 - fire four more so one two three four and
07:02 - I can't fire anymore
07:04 - I press the arm makes it real no
07:06 - animation I can fire two three four more
07:09 - yep there you go
07:11 - I can reload fire four grenades reload
07:14 - fire for grenades yep okay great so the
07:19 - bouncy grenade launcher is now correctly
07:22 - set up to handle ammo and reload so
07:25 - let's now take care of the sticky
07:27 - grenade launcher back into our code here
07:29 - and we're going to implement a very
07:30 - similar system that we implemented in
07:33 - here so for my sticky grenade instead of
07:37 - having a maximum of four it's going to
07:39 - have a maximum of eight going to
07:42 - implement these same functions and in
07:46 - here when we fire again reduce our ammo
07:49 - now the sticky grenades have one extra
07:51 - property you can only have eight active
07:53 - at once
07:54 - if you fire more than eight the first
07:56 - one is automatically destroyed so let's
07:58 - take care of that right now in here when
08:01 - we are creating a new remain let's test
08:03 - if we already have eight grenades
08:05 - available so if sticky grenade list dot
08:09 - count if it is bigger than eight we're
08:13 - going to explode the very first grenade
08:15 - so simply sticky grenade list up in X 0
08:18 - dot explode grenade and then we're going
08:22 - to go into the list and remove at index
08:25 - zero so we're going to explode that
08:27 - grenade and remove it from the list so
08:30 - back into our game handler let's replace
08:32 - the bouncy grenade with the sticky
08:33 - grenade class and we're essentially
08:35 - going to use the same functions to test
08:38 - if we have ammo if we can create if we
08:41 - can reload and we're actually going to
08:44 - reload the only difference is in here
08:46 - instead of creating a bouncer your name
08:49 - actually just commented so we can easily
08:53 - swap between two PF sticky grenade okay
08:58 - so let's go back into our scene and see
09:01 - if we can successfully successfully fire
09:03 - a grenade and when we fire the ninth the
09:05 - first one should explode so there's one
09:08 - two three four five six seven eight and
09:11 - I can't fire any more so I reload and
09:14 - now the first one should explode boom
09:16 - there it is another one another one
09:18 - another one and I can click the right
09:20 - mouse button and they all explode we're
09:23 - gonna it again fire some more explode
09:25 - fire reload fire and the first ones go
09:30 - okay great so there you have it
09:33 - first we refactored our code to keep all
09:35 - classes nice and clean then we took the
09:37 - grenades we created previously and added
09:39 - limited ammo and reloading on the next
09:42 - video we're going to cover the island
09:44 - there melee weapon as always you can
09:47 - download the project files and utilities
09:48 - for free from unity code monkey comm if
09:51 - you have any questions post them in the
09:53 - comments and I'll do my best to answer
09:54 - them ok see you next time