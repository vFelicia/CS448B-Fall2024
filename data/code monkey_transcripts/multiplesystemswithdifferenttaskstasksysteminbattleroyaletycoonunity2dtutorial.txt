00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're continuing to
00:03 - check out the inner workings of the task
00:04 - system in Batam Riau tycoon we're going
00:07 - to take the task system we have created
00:08 - so far and figure out how we can use
00:10 - multiple task systems with multiple task
00:12 - types let's begin
00:17 - so we previously made this scene in here
00:20 - we have a complex task that is being
00:22 - executed by the worker the task is to
00:24 - take a weapon to a weapon swap the task
00:27 - can only be executed if the weapons mod
00:29 - is available which is represented when
00:31 - this is an inquiry
00:32 - now the weapons mod itself destroys the
00:34 - weapon that is placed there after five
00:36 - seconds just so it can always keep being
00:38 - empty so if I click on left mouse button
00:40 - I spawn a weapon he occupies that and he
00:44 - goes there
00:44 - now let's move my way just so he can see
00:46 - and spawn another one and another one
00:49 - and when that one vanishes he where I
00:50 - was the other one
00:51 - so he's validating the task to take this
00:53 - weapon to a slot and he only executes it
00:55 - once that slot is available all right so
00:58 - that's our fully functioning tasks
00:59 - system so far the game is still in
01:02 - development so if you like the concept
01:03 - go to the same page add it to your
01:05 - wishlist and phone let's look at the
01:07 - tasks system so in this class in here we
01:10 - have all of the tasks system code we can
01:13 - add can add tasks request tasks queue
01:16 - tests and so on and the main thing we
01:19 - have in here is the task type so right
01:22 - now you can create a task system and it
01:24 - can work with any one of these tasks if
01:26 - you want to add another task to the
01:28 - system it's quite simple we just had
01:30 - another task down here and everything
01:32 - works but if we do things this way then
01:35 - after a while this class won't become
01:37 - huge and contain tasks for completely
01:39 - different logic systems that's not very
01:41 - clean code so let's modify the task
01:43 - system to keep the task list handling in
01:46 - here but the task types defined
01:48 - elsewhere so let's first of all rename
01:50 - this to be called task base since this
01:53 - will be the base task class for every
01:56 - other test we want to create and up here
01:59 - on the task system we're going to make
02:01 - this class with a generic time and we're
02:05 - going to call that generic type t task
02:07 - that won't be the type of task where t
02:10 - task must extend task base so let's copy
02:16 - the task base outside and the same thing
02:18 - with that task so let's copy it out here
02:21 - now again in here let's rename all
02:23 - references of task base in here to be of
02:25 - type T task this is so we can create a
02:28 - specific task system
02:30 - the specific tasks class so let's rename
02:33 - all this alright so we now have the task
02:40 - system set up to use a custom generic
02:43 - class we're going to apply the same
02:46 - thing to the queue task this will also
02:48 - receive 80 tasks where t task implements
02:52 - task phase and here we're not using task
02:56 - base rather t task and down here when we
03:00 - create a queue task is a type T task and
03:03 - same thing in here all right so we have
03:10 - successfully converted the entire task
03:13 - system to now work with generics you'll
03:15 - see why this is important in a second
03:17 - so now we want to take these specific
03:19 - tasks away from the task system so let's
03:22 - go into the game hang on and down here
03:25 - let's make a public class we're going to
03:29 - call it task we're going to copy all of
03:32 - these specific classes that we created
03:33 - previously they're all going to be
03:35 - defined in the game handler class
03:37 - instead of in the task system itself and
03:39 - here all we have is an empty task based
03:41 - class for anything we want to apply to
03:43 - every single task type so in here first
03:46 - of all we need to define the action
03:48 - which is in the system namespace all
03:50 - right and now as you can see the test
03:53 - system has an error because we need to
03:56 - use it with a generic and the generic
03:58 - type we're going to use is a tied task
04:00 - that is defined and here and the type
04:03 - task of course needs to extend the CM
04:06 - task system dot task baits and all of
04:10 - these instead of being of type task base
04:11 - URF type task which obviously itself is
04:15 - a type task base so go up here and we
04:19 - need to set on with these references
04:45 - all right so we now I have completely
04:48 - modified everything to use this test
04:50 - type that is defined in this class in
04:53 - here and now as you can see this all
04:56 - implementation is defined in here
04:59 - instead of being in task system the test
05:01 - system itself does not care how the
05:03 - tasks are implemented he just cares that
05:05 - they extend that space and everything
05:07 - works with it so if you go into game
05:10 - handler we got the task types defined in
05:12 - here and they are executed the same way
05:15 - as previously alright so it says and
05:17 - everything should be working exactly the
05:19 - same as before
05:19 - all right here he is and you're peeking
05:22 - so move it to position I can click he
05:24 - goes and occupies that and everything
05:26 - some works perfectly
05:27 - so everything still works the same but
05:29 - now we have the test types completely
05:31 - decoupled from the task system itself so
05:34 - now you can see the real purpose of
05:36 - doing all of that which is so we can
05:38 - create another task system with a
05:40 - different test type we're still going to
05:42 - have our first worker executing the
05:44 - first type of tasks but we're going to
05:47 - spawn a second worker that won't execute
05:49 - a different type of tasks the second
05:51 - worker won't grab a weapon from a
05:53 - occupied weapon slot and simply take it
05:55 - away
05:56 - so let's go up here and set things up
05:57 - for that so let's create the task that
06:01 - the transporter worker will execute so
06:03 - let's go down here we have this task for
06:05 - the first task system and now let's make
06:08 - another public class call it transporter
06:12 - task is going to also implement a space
06:15 - so in here let's make a subclass
06:18 - following the same pattern that we
06:19 - defined up here and we're going to call
06:22 - it take weapon from slot to position and
06:26 - this will extend the transporter tap
06:29 - inside we need the information that the
06:32 - worker will require so first of all
06:36 - right there three for the weapon slot
06:38 - position then we need a polling factor
06:41 - three for the target position then we
06:44 - need a public action to grab the weapon
06:48 - and a public action to drop the weapon
06:51 - and the action will take the work of
06:53 - task a i as an are you okay great so the
06:57 - transported test type is now set up now
07:00 - we can go up here to create the second
07:03 - task system so here let's say the
07:07 - transporter task system instead of being
07:10 - a test system using the task type we're
07:13 - going to create that system using the
07:15 - transporter task type and down here
07:18 - we're going to instantiate it the same
07:19 - as before alright so as you can see we
07:22 - got two different task systems working
07:25 - with two different task types this
07:27 - system will not accept a task of this
07:29 - type and this system will not accept a
07:31 - test at this time this way our code is
07:33 - very clean and nicely separated now
07:35 - obviously we need to create a second
07:38 - worker that will execute the second task
07:40 - types so in order to do that we need a
07:43 - worker that won't execute different
07:45 - tasks so let's duplicate our worker task
07:47 - AI so let's name this one worker
07:51 - transporter task AI ok so here we have a
07:55 - duplication of our regular worker task
07:58 - AI and now in here as you can see this
08:01 - worker will not be working with this
08:02 - type of task for rather the other the
08:05 - transport type of task that's a test
08:08 - system that he will actually receive so
08:11 - if you go down here when you request the
08:12 - task the task will not be of this time
08:14 - for editor of the transporter task type
08:16 - and you will not have these types as a
08:19 - possibility but rather the transporter
08:23 - task dot tape weapon to slot from slot
08:26 - to position that is the only time that
08:28 - it can now execute and we're going to
08:31 - copy that in there then let's make a
08:33 - function to do that we can remove all
08:35 - these and essentially we're going to do
08:38 - the same as this one so let's name this
08:40 - with this
08:43 - alright so in here we move to the weapon
08:48 - spot position we grab the weapon then we
08:52 - move to the target position and we drop
08:54 - the weapon now when we wrap the weapon
08:57 - as you can see this is an error since we
08:59 - have to use this script so let's go in
09:02 - here on the task type on the definition
09:04 - in here on the action instead of using a
09:06 - worker Taski eye we're using a worker
09:09 - transporter task AI and now in here
09:12 - everything is working so this one
09:14 - receives a transporter task and executes
09:17 - it exactly okay great and now on the
09:20 - game handler let's actually create that
09:22 - second type of worker so we're going to
09:24 - create a worker as previously and let's
09:27 - put it on 550 yeah sure and set up
09:29 - adding the component of worker task AI
09:31 - we're going to add a transporter task AI
09:34 - so this one let's copy and put it in
09:37 - here and when we set it up instead of
09:40 - giving the first task system we're going
09:42 - to give it the transporter task system
09:44 - so let's store a reference to that for
09:47 - the worker transporter task AI and this
09:51 - is what we're going to set it up we need
09:53 - transport there task system alright so
09:55 - the second worker should now be working
09:57 - we are currently not adding anything to
09:59 - this task system so the second work
10:01 - should just stay I don't but let's
10:03 - compile and see if everything is working
10:05 - okay so there's the worker and if I
10:07 - click I can still tell the first worker
10:09 - to move but the second one since he's
10:11 - working with a completely different task
10:13 - system he's not listening to the first
10:15 - task system okay great now let's
10:17 - actually set up the task for the second
10:19 - worker
10:20 - so let's s the second worker only so
10:23 - we're going to spawn a weapon occupy
10:25 - this weapon slot and then create the
10:27 - task for the second worker to take it
10:29 - away so let's go down here into the
10:32 - weapon slot and let's remove the code to
10:34 - automatically destroy since we no longer
10:36 - need this
10:37 - alright good and up here let's spawn a
10:41 - weapon a pistol game object some light
10:44 - spotted right here and we're going to
10:46 - tell the weapon slot to set the weapon
10:49 - transform to this one so as soon as it
10:51 - starts it won't be
10:52 - occupied with this new only created
10:55 - pistol and let's put it on top of there
10:58 - okay right so now as soon as we spawn
11:01 - and as soon as we set the weapon
11:02 - transform when we do that in here now if
11:05 - this one if this is not known then that
11:09 - means something has been added to this
11:11 - weapon slot so it's in here that we want
11:13 - to create the tasks that won't tell the
11:15 - transporter to take whatever is in here
11:17 - and take it away so we're going to
11:19 - create a transporter tasks that take
11:22 - weapon yep
11:23 - that's the task and we're going to
11:25 - create that task which will then be out
11:29 - to the transporter task system so let's
11:31 - go up here and actually make this a
11:33 - static so we can access it from inland
11:36 - inside there so now let's fill out the
11:41 - information for this task for the weapon
11:44 - spot position it's this get position for
11:47 - the target position let's simply push it
11:50 - somewhere to the right so get positioned
11:51 - towards new vector3 and let's push it
11:54 - somewhere on the right for the grab
11:59 - weapon we're going to do very much what
12:01 - we did in here so let's copy this code
12:03 - to keep things simple so a difference
12:08 - being that it doesn't take a worker
12:10 - tasks a ride but rather a work a
12:11 - transporter task AR and for the game
12:14 - object that we're going to move it won't
12:16 - be this weapon transform which is the
12:18 - one that is currently inside so we're
12:20 - going to use to set the parent to that
12:22 - worker transporter and to set the parent
12:25 - back to know now we know I'm gonna need
12:27 - to arrive there anything is wrong okay
12:28 - just like that great and when he does
12:30 - grab the weapon that's when we're going
12:32 - to set this weapon transform back to no
12:36 - alright so we should now be correctly
12:38 - adding a task to take the weapon away
12:41 - whenever a weapon is that so when you
12:44 - call this if you call it without a noun
12:46 - that means something has been added to
12:47 - this weapon slot and we're going to
12:49 - create a task to take whatever is in
12:52 - here and send it away we're going to
12:54 - send it somewhere on the right and we're
12:56 - adding it to the transporter task system
12:58 - and we have
12:59 - this worker the secondary worker the
13:02 - transporter worker is the one listening
13:04 - to that transporter task system alright
13:07 - so let's see if that is all working all
13:09 - right there's the second worker he's
13:11 - going there he grabs it you can see that
13:12 - it's now empty and he's taken away and
13:15 - there he goes okay great so the second
13:17 - worker is working perfectly now let's
13:19 - set it up so we have both workers
13:21 - working at the same time but each of
13:23 - them doing different tasks all right so
13:25 - now in here and let's simply stop it
13:27 - from being occupied at start so at start
13:29 - the weapons watch should be empty and
13:31 - when we press the left mouse button
13:33 - a pistol should be spawned and it won't
13:36 - kill the task to go to the slot and so
13:38 - on and so forth
13:39 - so now both of them should be working at
13:41 - the same time alright as you can see I
13:44 - got my two workers in here I have the
13:46 - first worker and the transporter worker
13:48 - in middle I have a weapon slot now when
13:51 - I click the left mouse button
13:52 - he should spawn a weapons right and this
13:55 - worker won't take the sprite to their
13:57 - place it the weapon in the weapon slot
13:59 - as soon as it's dropped in there this
14:01 - one won't grab it and move it away so
14:03 - let's see if all of that is working I
14:05 - click and yep that one is occupied he's
14:07 - going as soon as he drops this one
14:10 - receives the task he grabs the weapon
14:12 - and he's moving away he drops it and
14:15 - he's requesting another task
14:16 - so I know they're grabbed drop down and
14:19 - is doing the same and I can spawn
14:21 - multiple now that one is waiting now
14:23 - that one is empty he goes he drops it
14:25 - and so on and so forth ok great so now
14:29 - let's add multiple weapon slots to see
14:31 - the whole thing in constant movement
14:33 - alright so let's go up here make a
14:35 - couple more weapon slots we're going to
14:42 - create the weapon slot place instead of
14:44 - just having one so it's the weapon slot
14:46 - looks like this
14:53 - all right so we are now adding multiple
14:56 - slits to the weapon SWAT list and in
14:58 - here when we are when we are looking for
15:01 - a valid wasn't slot so let's go alright
15:25 - so we are going through all the weapon
15:27 - slots in the weapon salt list if we find
15:29 - an empty one then we send them as normal
15:31 - if not we keep searching if we go
15:33 - through all of them and not a single one
15:35 - of them is empty then we simply keep
15:37 - waiting all right so everything else
15:39 - should be working perfectly
15:40 - so let's test all right here are the two
15:43 - workers with the weapon slots in the
15:45 - middle and when I spawn he goes and he's
15:47 - gonna drop in that one when he drops no
15:50 - one goes and he takes it away somewhere
15:52 - to the right and he drops it in there
15:54 - okay great so it's working perfectly
15:56 - fine with just one now let's try
15:57 - spawning multiple pistols so there you
15:59 - go spawn spawn spawn and the tasks are
16:04 - automatically be queued whenever
16:05 - something is empty so let's find a
16:07 - couple more and as you can see he goes
16:09 - he drops him in there and that one when
16:13 - something is drunk he receives a task
16:15 - goes he drops that one and now you can
16:18 - see that he's waiting because I want
16:19 - them are occupied when that one grabs
16:21 - it's empty grounds he goes and he drops
16:24 - ok great so we have a pretty complex
16:27 - system on working perfectly using two
16:30 - different task systems this worker
16:32 - doesn't care doesn't know that someone
16:34 - is taking something away he only knows
16:35 - if this one is occupied or not and this
16:38 - one the same thing doesn't know if
16:39 - someone is grabbing weapons and dropping
16:41 - them in there no one knows if the weapon
16:43 - slot that he wants if it is empty or
16:45 - occupied if it is occupied he simply
16:48 - execute this action and takes it away so
16:50 - we have two systems working in tandem
16:52 - but each of them is completely ignorant
16:54 - of the other one so the code is very
16:56 - nice and cleanly separated so this is a
16:58 - very clear example of how to use the
17:00 - test system to easily create very
17:02 - complex
17:03 - behaviors where different workers are
17:04 - doing different things and as you saw
17:06 - with the creation of the second task
17:08 - type we didn't need to touch the task
17:09 - system at all all we need to do is set
17:12 - up the task types how to spawn the tasks
17:14 - and how to execute them everything else
17:16 - works flawlessly so there you have it we
17:18 - modify the task system to keep it clean
17:20 - and decoupled from the specific task
17:23 - types we can now easily make multiple
17:25 - tasks systems that work with different
17:26 - task types and every different tasks
17:29 - with different executions so in this
17:31 - series we cover the creation of a task
17:33 - system which is an easy way to execute
17:35 - specific tasks you can see the system in
17:38 - action in Batam Riau tycoon it is used
17:40 - for executing all the various tasks that
17:42 - you can see in like taking weapons to
17:44 - their spawn positions cleaning up the
17:46 - arena or grabbing a weapon from the
17:48 - workshop a time slot repairing it and
17:51 - sending it back to the Adam slot so it
17:52 - can be transported away by transporter
17:55 - units again the game is still in
17:57 - development so if you like the concept
17:58 - you're the same page add it to your wish
18:00 - list and phone I hope you enjoy the
18:02 - series and learn something useful from
18:04 - it now go ahead and apply it to your own
18:06 - games if you have any questions post
18:08 - them in the comments and I'll do my best
18:09 - answer them subscribe for more videos
18:11 - and I'll see you next time
18:24 - you