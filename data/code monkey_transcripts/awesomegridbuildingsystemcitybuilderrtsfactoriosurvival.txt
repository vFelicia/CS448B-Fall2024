00:00 - hello and welcome i'm your code monkey
00:02 - in this video let's learn how to make an
00:03 - awesome grid building system
00:05 - so we have a grid in our world and we
00:07 - want to build something on it
00:09 - and that something can obviously be
00:10 - anything you want to build on a grid
00:12 - so for example you can use it to place
00:14 - enemy positions in an rpg
00:16 - or maybe resource nodes in a survival
00:18 - game play spots in a farming game or
00:20 - maybe some traps in an
00:21 - action game this is an extremely
00:23 - versatile very useful system
00:25 - you can definitely look forward to me
00:26 - making some more complex tutorials using
00:28 - this system as a base
00:30 - for example i'm currently building a
00:31 - factory automation game that uses this
00:33 - system as the underlying base
00:35 - so if you're watching this in the future
00:37 - check the playlist linked in the
00:38 - description where i'll be adding any
00:40 - systems i build on top of this one
00:42 - the example that i won't show here is on
00:43 - placing buildings kind of like a city
00:45 - builder
00:46 - and just for fun i won't be making this
00:48 - in 3d but it works pretty much
00:49 - exactly the same in 2d as well the
00:51 - underlying gridless supports both 2d and
00:53 - 3d
00:54 - i will showcase the working 2d version
00:56 - in the end now i've already made
00:58 - a building system once before that one
01:00 - is a free-form building system
01:02 - it works based on physics so as long as
01:04 - there's no collision the building can be
01:05 - placed anywhere
01:06 - go watch that video if you want to see
01:08 - how that one works and that method is
01:10 - also what i use in my complete builder
01:12 - defender course
01:13 - so that's a great freeform system but
01:15 - here let's go with a more rigid
01:17 - grid-based approach
01:18 - and for that obviously the very first
01:20 - thing that we need is a grid
01:21 - like i always say you should always
01:23 - reuse as much code as possible
01:24 - so as you might expect i'm going to be
01:26 - using the grid system that we made in a
01:28 - previous video
01:29 - it's quite amazing how versatile this
01:30 - grid class is i've used it in dozens of
01:32 - videos by now and it's extremely useful
01:34 - if you're new here go watch the video
01:36 - link in the description to see how this
01:37 - class was made completely from scratch
01:40 - so let's begin making our system let's
01:41 - make a new empty game object
01:43 - name it the grid building system
01:46 - and let's make our script so an
01:48 - euc-sharp script
01:49 - for the grid building system
01:52 - on the object let's reset transform keep
01:54 - things nice and clean on zero zero and
01:56 - just drag the script okay
01:58 - now here first things first let's start
02:00 - off by making our grid
02:02 - so let's make a private void awake and
02:04 - on the way
02:05 - let's instantiate the grid
02:19 - alright so here is the basic
02:20 - instantiation code again go watch a grid
02:23 - video if you're not familiar with all of
02:24 - this
02:25 - we're just defining a grid width a grid
02:27 - height and a certain cell size
02:29 - then we're instantiating the grid
02:30 - creating a new one passing in the width
02:32 - height cell size the origin
02:34 - and then a constructor for each grid
02:36 - object
02:38 - and for that one it's right here the
02:39 - grid object which stores a reference to
02:41 - the grid the x and the z
02:43 - like i said you'll watch the grid video
02:44 - to see how all this was made
02:46 - everything here was created coming from
02:48 - scratch in a separate video
02:49 - so what this does is it creates a grid
02:51 - and on each grid position it contains a
02:53 - grid object
02:54 - so let's visualize this to see what it
02:56 - looks like for the visualization let's
02:58 - go inside the grid class
03:00 - and in here i've got a very simple show
03:02 - debug volume so if i set this to true
03:04 - it will automatically draw some lines
03:05 - and create some moral text
03:07 - so on the grid object let's also just do
03:10 - a public override override the two
03:11 - string
03:13 - and here let's return just the position
03:14 - so x then a comma
03:16 - and a z okay so we should be able to
03:19 - visually see the grid
03:20 - let's see and if right away we can see
03:22 - the grid positions and if we enable
03:24 - gizmos
03:24 - we can now see each area for each word
03:27 - position so as you can see over here
03:28 - we've got zero zero then one zero two
03:30 - zero three zero and so on and here it is
03:32 - all of them going all the way up to 99
03:35 - all right
03:35 - so here is our fully working grid in 3d
03:38 - space
03:38 - now in each of these positions we have
03:41 - an instance
03:42 - of this grid object so on each of these
03:44 - grid objects we can store any data we
03:46 - want
03:46 - for example saying that there is a
03:48 - building on this grid position so to
03:49 - begin
03:50 - let's just instantiate a building on our
03:53 - grid building system let's make a simple
03:55 - priority update
03:56 - on update let's listen to the mouse
03:58 - button down so when the left mouse
04:00 - button is down
04:01 - let's spawn a building and for the
04:03 - building let's go up here and let's add
04:05 - a serialized field
04:07 - make it just a transform for the test
04:09 - transform
04:11 - so now to drag the reference over here
04:13 - in my project files already prepared a
04:15 - bunch of visuals
04:16 - so for example this building right here
04:18 - so here in the prefab we have the
04:20 - building
04:21 - then down here we have two objects so
04:24 - one of them is the area which as you can
04:26 - see the scale is at 10 10 which is the
04:28 - exact same scale that we set for the
04:29 - cell size of each width position
04:31 - and very important i've got the anchor
04:33 - which is the pivot
04:34 - so the pivot on the visual is right in
04:36 - there so it's not down the center it's
04:37 - on the lower left corner
04:39 - which is going to match perfectly with
04:40 - our grip i made a video on how to move
04:42 - the pivot if you're not familiar but
04:43 - essentially you just move the children
04:45 - and that way now the building the pivot
04:46 - is right in there
04:47 - oh and also the buildings that i'm using
04:49 - here are from a really nice asset pack
04:51 - there's a link in the description if you
04:52 - want to pick it up so just drag the
04:54 - reference of the building on there okay
04:56 - now here we've got our transform so
04:58 - we're going to go when we press left
04:59 - mouse button we're going to instantiate
05:01 - our test building and then we're going
05:03 - to need a position and rotation
05:06 - so for the position i have a class to
05:08 - get me the mouse position in 3d space
05:11 - so here it is get the mouse on position
05:13 - and what it does is a camera main screen
05:15 - point
05:16 - using the mouse position and so on so
05:18 - just getting the mouse position in a 3d
05:20 - world
05:22 - so i just use that put it in there and
05:23 - with no rotation so quaternion identity
05:26 - so now as we click we should be able to
05:28 - place down a building let's see
05:29 - okay so here i am and if i click if
05:31 - there you go it places down the building
05:33 - exactly on the mouse position
05:34 - all right so far so good however the
05:37 - building is meant to place
05:38 - on the grid position and not on a random
05:40 - position right in the middle
05:42 - so let's solve that what we really want
05:44 - is to snap
05:45 - this mouse worm position into a position
05:47 - on the grid now on the grid collapse
05:49 - itself i've got a function that takes a
05:50 - wrong position and outputs a grid
05:52 - position
05:54 - so going to the grid and get the xz
05:57 - so this will return the grid position of
05:59 - a certain order position so we just pass
06:01 - this
06:03 - so by calling this one now i have the x
06:05 - and z for the grid position
06:07 - so in order to snap it i just convert
06:08 - those into the original grid position
06:11 - so just do a grid in order to get the
06:13 - worm position pass in these
06:15 - x and this z and this is the one that
06:17 - we're going to use here
06:20 - okay so now it should be placed exactly
06:21 - on the correct width position
06:23 - so if i put it let's say right down the
06:25 - middle there and i click any of the go
06:27 - placed perfectly exactly on the accurate
06:28 - position so wherever i put it
06:31 - it always snaps to the exact perfect
06:32 - position
06:34 - all right awesome so we have our grid
06:36 - and we can place buildings on it
06:38 - now the issue of course is that i can
06:40 - place multiple buildings on top of one
06:41 - another
06:42 - that is not intended so that means that
06:44 - on each grid object we need to store
06:46 - some data
06:47 - based on what building is already on
06:49 - there so over here on the grid object
06:51 - let's add another field let's name it a
06:54 - transform for the transform that is
06:56 - placed on top of this grid
06:57 - object then just some simple function to
06:59 - set it and get it
07:07 - so when to set transform and when to
07:09 - clear it which we're going to use
07:10 - later when we implement the mulch and
07:12 - let's also
07:13 - modify the two string to also include
07:15 - what transforms on there so just make a
07:17 - new line and then the transform
07:19 - and also the way that the debug visual
07:21 - is set up the grid class needs to know
07:23 - when something changes so just here just
07:25 - trigger a grid object change passing
07:27 - this one and this one
07:29 - just so that the red knows when
07:30 - something changes and then it updates
07:32 - the text
07:33 - okay so we have our transform and now
07:35 - let's make a simple function to test if
07:37 - we can build
07:38 - so just say public returns a boeing
07:40 - let's call it can build
07:42 - and here's very simple we just return if
07:44 - the transform is known
07:46 - so if transform is null then we can
07:47 - build if it is not known then we cannot
07:49 - build
07:50 - okay so now here on our update we get
07:52 - the grid position all right
07:54 - now before we instantiate let's go into
07:56 - the grid and we get the grid object
07:59 - on this x and this then so this returns
08:02 - our grid object
08:05 - and now here we go into the great object
08:07 - and we ask if we can build
08:08 - and if so then we are going to build it
08:11 - and after we instantiate
08:13 - let's do a bone transform to grab our
08:15 - reference
08:18 - then we go into the grid object and we
08:20 - set the transform to this one
08:22 - so we build and we set it and if not
08:24 - then that means that we cannot build
08:26 - so for this let's spawn a fun pop-up
08:28 - message
08:38 - so here i'm using this function from the
08:40 - utilities which you can grab for free
08:41 - from intake on monkey.com
08:43 - or of course you can make your own
08:44 - warning message like for example the
08:46 - tooltip that i covered previously
08:47 - just a bit of fun just telling the
08:49 - player why it cannot build okay so with
08:51 - this let's test
08:53 - okay so here i am and if i click yep
08:55 - there you go it gets placed and over
08:56 - there on the text we can indeed see that
08:58 - it worked
08:59 - so we can see that this grid position is
09:01 - now filled with a building clone all
09:02 - right
09:03 - and now if i click again nope there you
09:05 - go now i see the nice pop-up saying that
09:07 - i cannot film because that one is
09:09 - already occupied
09:10 - alright awesome so with this we already
09:12 - have a really good start
09:14 - we can place down buildings anywhere you
09:15 - want and we make sure that we only place
09:18 - them on clear ground
09:19 - so this is working but so far it's only
09:21 - working with this shape however in most
09:23 - games when you have a building system
09:25 - you don't usually have just a single
09:27 - one by one shape some things you want to
09:29 - place will occupy more than one grid
09:30 - position
09:31 - so let's handle that and by the way if
09:33 - you find the video helpful consider
09:35 - subscribing and hitting the like button
09:36 - it really helps out the channel for that
09:38 - one the first thing that you need
09:40 - is some way of defining each building
09:42 - type and for that over here i've got
09:44 - some building type scriptable objects
09:46 - i covered scriptable objects in detail
09:48 - in another video so go watch that if
09:50 - you're not familiar with them
09:51 - essentially they are a great way to make
09:53 - some objects to store some data
09:54 - and also this is the same method that i
09:56 - use to define the building types in my
09:58 - complete builder defender course
10:00 - so this is an excellent way to define
10:01 - various types here is the script with
10:03 - the definition
10:04 - as you can see it's pretty simple just a
10:06 - handful of fields over here we have a
10:08 - name a transform for the final prefab
10:10 - a transform for just the visual then an
10:13 - integer for the width another one for
10:14 - the height
10:15 - now here we're working on the xz plane
10:17 - so really the height is really more of
10:19 - the length but personally i prefer the
10:21 - word height
10:22 - then the other thing we have is also
10:24 - some functions running the direction
10:25 - we're going to see those in a bit
10:27 - so essentially we have the scriptable
10:29 - object where we can so our name and our
10:31 - prefab and we width and the height
10:33 - and here in the editor we've got all
10:34 - various scriptable objects again go
10:36 - watch that other video if you're not
10:37 - familiar with this
10:38 - so we have multiple building types and
10:40 - some of them like for example the town
10:42 - hall
10:42 - occupies more than one grid position
10:44 - here it uses a width and height of two
10:46 - by two
10:47 - so let's test our current code using
10:49 - this first let's refactor our code to
10:51 - work with the
10:52 - scriptable object instead of the
10:54 - transform directly so here for the
10:56 - serialized field
10:57 - let's make it of type placed object type
11:00 - scriptable object
11:02 - and then down here for transform just go
11:04 - inside that and instantiate the prefab
11:07 - okay so that's it that's all it takes
11:08 - now in the editor let's select the
11:10 - object and over here let's drag the town
11:12 - hall reference
11:13 - okay let's test okay so here i am if i
11:16 - place it in here
11:16 - and yep so far so good it worked
11:18 - perfectly and if i
11:20 - try to place on this position again nope
11:22 - i cannot build
11:23 - however right away i'm looking at the
11:25 - text you can see the issue that we have
11:27 - so you can see that only this value on
11:29 - this grid position was set
11:30 - so this one on 32 is not being occupied
11:32 - by anything same thing for that one and
11:34 - that one
11:34 - so if i go ahead and click on this one
11:36 - yep there you go now they are
11:37 - overlapping
11:38 - so this is the issue that we want to
11:39 - solve for that essentially we're going
11:41 - to need to fill
11:42 - in multiple positions on the grid with
11:43 - the same reference over here we
11:45 - instantiate our prefab on right then we
11:48 - go into the grid object and set the
11:49 - transform
11:50 - however we also need to know what other
11:52 - grid positions will this building occupy
11:54 - so when working with the building with
11:55 - the size of 2 2 if i click here on t1
11:58 - i want to occupy 2 1 3 1 2 2 and 3 2.
12:01 - so what that really means is we start on
12:03 - the origin position
12:04 - then we're going to fill everything
12:06 - along side the width and also everything
12:08 - alongside the height and here on the
12:10 - scriptable object i've got a function to
12:12 - do exactly that
12:13 - again for now we ignore the references
12:15 - to the direction all that matters is
12:16 - really just this
12:18 - so this function takes an offset so
12:20 - that's the base offset like for example
12:22 - the
12:22 - position where we're clicking on and
12:24 - then simply cycles through the whole
12:25 - width
12:26 - cycles through the whole height and then
12:28 - adds it to the list so just the offset
12:29 - plus the x and the y
12:30 - it just does that and then returns a
12:32 - list of vector2 ends
12:34 - now we can go back into the grid
12:35 - building system and here let's call in
12:38 - that function
12:39 - so we're going to go into the placed
12:40 - object typescript object
12:42 - and call on that function to get the
12:44 - grid position list and now we need to
12:46 - pass in the offset which is going to be
12:48 - our xz
12:49 - and this requires a vector to in so
12:51 - let's press in the x and these n
12:53 - and then for direction again right now
12:55 - we're not worrying about it so let's use
12:56 - the default direction which is down
12:58 - we're going to see the direction in a
12:59 - bit all right so this returns a list of
13:02 - vector 2
13:02 - ends so this is the
13:06 - grid position list so all the grid
13:07 - positions that this building will occupy
13:10 - and now we need to do is over here when
13:12 - we set the transform instead of setting
13:13 - just on one grid object
13:15 - let's cycle through all of those so for
13:17 - each vector to
13:19 - int for each grid position
13:22 - in the grid position list
13:25 - for each of those we're going to go into
13:27 - the grid and get the grid object
13:29 - on this grid position and then we do our
13:32 - set transform
13:35 - all right so now we are setting the
13:36 - transform on all of those so let's see
13:38 - okay so here i am as i click yep there
13:40 - you go now it does fill in all the
13:42 - positions so if i click here nope can't
13:44 - nope nope and no all right great
13:47 - so placing is working i cannot place any
13:49 - more on any of these positions
13:51 - however we still have one issue if i
13:53 - click over here on the left side and i
13:55 - click
13:55 - and if there you go now we've got
13:56 - another overlap so the issue is that
13:58 - right now we're only testing if we can
14:00 - build on the clickable position
14:02 - the answer is we need to apply the exact
14:03 - same logic that we just saw we need to
14:05 - test if we can build not just on where
14:06 - we click but on all the positions that
14:08 - will be occupied by the new building
14:10 - so here we've got the word position list
14:12 - we just need to call kin build on every
14:14 - single one of those
14:24 - all right so here's the logic so we just
14:26 - go through every grid position on the
14:28 - grid position list all right and then we
14:30 - test for every single one of them if we
14:31 - can build
14:32 - and if there is just a single one that
14:34 - we cannot build then we said this can
14:36 - build boolean into phones
14:38 - we break out of the cycle and then down
14:40 - here either it passed all of them or it
14:42 - didn't pass at least one of them so if
14:44 - we test
14:45 - so over here let's build in here all
14:46 - right and if i click here here here or
14:48 - here
14:48 - nope all right everything works and now
14:50 - if i click here and nope cannot do it if
14:52 - i click here can't do it
14:54 - can't do it and can't do it but if i go
14:56 - here and click
14:57 - yep now it does work all right awesome
15:00 - so we now have the ability to place on
15:01 - buildings with different sizes
15:03 - now next let's handle rotation for that
15:06 - let's test with the gas station which
15:07 - has a width of two and height of one
15:10 - so here if i place the gas station yep
15:11 - there you go it's like that
15:13 - so let's rotate this one as we saw
15:15 - previously on the scribble object i
15:17 - already defined an
15:18 - enum for the direction so just down left
15:20 - up and right
15:22 - now on the grid building system let's
15:23 - store the current direction so let's go
15:26 - into the placed object type
15:28 - and store a direction so the current
15:30 - direction that we want to build
15:32 - and let's default it to down all right
15:36 - now for the rotation we need to swap
15:37 - this so let's go into our update
15:39 - and in here let's listen let's say input
15:42 - get key down
15:43 - when we press the r key
15:46 - then we want to rotate the direction so
15:49 - over here on the scriptable object i've
15:50 - got this function to swap out and get
15:52 - the next direction
15:53 - so down goes into left left into up and
15:55 - so on so here we just get the direction
15:57 - go into
15:58 - that function and pass
16:01 - in the current direction okay so now
16:05 - we've got a direction that should always
16:06 - be swapping
16:08 - let's do a quick test
16:11 - so just print out the direction let's
16:13 - see by default it should be on down so
16:15 - if i press the r
16:16 - it should say left yep left and then go
16:18 - into up then to right then down and so
16:20 - on
16:21 - all right everything works now as we saw
16:23 - on these functions on the building
16:25 - object type it already takes a direction
16:27 - so here instead of putting in the
16:28 - default one let's choose the one that
16:30 - we're currently using
16:31 - let's see how this function is set up so
16:33 - here on the grid position list as you
16:36 - can see the only difference is swapping
16:37 - the width and height for height and
16:39 - width
16:39 - so on the down and up we've got some
16:41 - horizontal values and on the left and
16:43 - right we've got some vertical values
16:45 - then we've got the grid position list so
16:46 - all very simple just like this we should
16:48 - already be filling in the correct grid
16:50 - positions
16:51 - let's see all right so by default we
16:53 - have direction down so if i click here
16:54 - it should occupy this one and this one
16:56 - click and yep it did work all right now
16:59 - i press the r
17:00 - now i'm looking left so now if i click
17:02 - here it should occupy this one and this
17:04 - one let's see
17:05 - click and yep it did work now i press
17:07 - again now it's pointing up so it should
17:09 - place here and here so click yep it did
17:10 - work now again for the right
17:12 - it should place if i click here here and
17:14 - here so click any up it did work
17:16 - all right so all the grid positions are
17:18 - all correctly being rotated
17:19 - now let's actually rotate the visual
17:22 - over here on the scriptable object
17:24 - there's another function to get the
17:25 - rotation angle of a certain direction
17:27 - so if it sounds rotated by zero if it's
17:29 - in the left by 90
17:31 - all right so let's use this and apply it
17:33 - to the instantiated prefab
17:35 - over here on the grid building system
17:37 - when we instantiate it
17:38 - we're calling instantiate passing in
17:40 - this prefab then we pass in this grid
17:42 - one position
17:43 - and then the quaternion identity this is
17:45 - what we need to change
17:47 - let's go into quaternion and we're going
17:50 - to create a new euler angle
17:52 - and we're working in 3d so we just want
17:54 - rotation on the y
17:56 - axis so 0 on the x then for the y let's
17:59 - go into the placed object type
18:01 - and we get the rotation angle
18:04 - pass in the current direction okay and
18:06 - then on the z also zero rotation
18:08 - okay so like this it should be rotated
18:11 - so first the default rotation click yep
18:14 - it works now press the
18:15 - r and i'm going to click here and yep it
18:18 - did work it did rotate
18:19 - 90 degrees so it worked but you can
18:22 - obviously see the issue
18:23 - we're rotating around the transform
18:25 - pivot which is right here on the corner
18:26 - so as we rotate 90 degrees yep it
18:28 - occupies down here
18:30 - so after we rotate we essentially need
18:32 - to offset it by a certain amount
18:34 - so in this case we need to offset by the
18:36 - width over here on the z
18:37 - axis so here is another function of the
18:39 - script on logic to do just that it
18:41 - calculates a rotation offset of a
18:43 - certain direction
18:44 - so if it's pointing down there's no
18:46 - offset so it gets placed exactly where
18:47 - it is
18:48 - if we rotate to the left then it gets
18:50 - offset on the y which is running the z
18:52 - by as much as the width and same thing
18:55 - for the up and right
18:56 - so here we just need to apply that over
18:58 - here to the spawn position
19:15 - okay so here it is we go into the
19:16 - scripting object we get the rotation
19:18 - offset for the current direction
19:20 - and we get a vector2 end then we
19:22 - complete the final placed object one
19:24 - position so we get the grid worm
19:25 - position so the same one that we've been
19:27 - using previously
19:28 - and then we simply apply our offset to
19:30 - it so the offset is on the x and on
19:32 - these end
19:33 - and we just multiply the offset by the
19:35 - grid cell size
19:36 - so now everything should be correct so
19:39 - here first of all place down click here
19:40 - yep it worked now press the
19:42 - r so now on the left now if i place here
19:44 - yep correct
19:45 - place again up let's place here yep now
19:47 - it's pointing up
19:48 - place again now for the right click here
19:50 - and yep it is pointing to the right
19:52 - all right so we've got all four of our
19:54 - rotations now let's just add some logic
19:56 - to swap the building type
19:58 - so for that we can just go up here
20:00 - instead of exposing the placed object
20:02 - type let's expose the array of it
20:07 - so here i'm exposing a list and then
20:10 - let's hide the
20:11 - private one so it's the selected one and
20:13 - all of them
20:17 - then on awaken let's see found it to the
20:18 - first one on the list
20:24 - and then here just listening to some
20:26 - outfit inputs and swapping this one out
20:28 - for a different one on the list
20:29 - now finally just need to populate that
20:32 - array
20:34 - okay let's test now by default we should
20:37 - be placing the building
20:38 - yep there it is now i press the two key
20:40 - now place a fire station press the three
20:42 - you know gas station and now that one
20:45 - non-five that one and on six
20:46 - yep i've got to mention and i can rotate
20:48 - it and there you go it rotates
20:50 - everything
20:51 - and everything is indeed working
20:53 - correctly all right so we can already
20:55 - build anywhere
20:56 - now let's handle our demolish so this is
20:58 - pretty simple but requires a bit more
21:00 - data
21:00 - for example let's say i want to demolish
21:02 - this mansion
21:03 - and i put my mouse here and i do a
21:06 - demolish
21:07 - so this grid position contains a
21:08 - reference to the transform so i can
21:10 - easily destroy it
21:11 - but then let's think of what happens
21:12 - with the grid position i can clear this
21:14 - one since i clicked directly on it
21:16 - but right now i don't know what other
21:18 - position should also be cleared
21:20 - so that means that we need to keep track
21:22 - of what positions each building is
21:23 - occupying
21:24 - so in order to handle that let's
21:26 - refactor our code to work with a proper
21:27 - class instead of just a simple transform
21:30 - so let's make a new script for this one
21:32 - let's name it the placed
21:34 - object and we're going to attach this
21:36 - script onto all of our objects
21:38 - so for example this is why i separated
21:41 - the prefabs from the visuals
21:43 - so the visuals just have the visuals
21:45 - whereas the prefabs have the visuals and
21:47 - any other knowledge that you want to add
21:49 - so this is always a great way to do
21:51 - things now in this script let's store
21:53 - all the data that we need for this
21:55 - building object
21:56 - so essentially the data that we're going
21:57 - to need is going to be the object type
22:00 - then we're also going to need the origin
22:02 - and the direction
22:09 - okay so these are all the fields that we
22:11 - need now we're going to need to receive
22:13 - this data so on the grid building system
22:15 - over here we are instantiating our build
22:17 - transform
22:18 - and instead of doing it in here let's
22:20 - make a function on the placed object
22:22 - that is responsible to create it and we
22:24 - pass in all the data that we need
22:48 - all right so here i made this nice
22:49 - static function it returns a placed
22:52 - object
22:52 - and if we've got to create we receive an
22:54 - input for the world position
22:56 - then for the origin another one for
22:58 - direction and then for the building type
23:00 - that we want to place
23:01 - then we simply do instantiate the exact
23:02 - same thing that we saw previously
23:04 - and then we simply do a get component in
23:06 - order to get the placed object
23:08 - component and we fill in all the data
23:10 - and finally we return it
23:12 - so now this class is responsible for
23:14 - creating the transform and holds all the
23:16 - data related to the building
23:17 - so now on the grid building system
23:19 - instead of manually instantiating it
23:21 - let's go into the placed object
23:23 - and we're going to call create and pass
23:25 - in all the data
23:32 - okay so we have this and this function
23:34 - returns a placed object for the created
23:36 - placed object
23:38 - and over here on the grid position
23:40 - instead of the transform let's refactor
23:42 - a code to receive a placed object
23:44 - instead
23:44 - so here let's replace the transform with
23:46 - a placed object
23:50 - and logic for this one is always pretty
23:52 - much the same thing
23:57 - okay so i really just swapped out the
23:58 - transform for a placed object
24:00 - and then down here the sept placed
24:02 - object and passed pressing the placed
24:03 - object
24:04 - okay so now we can finally handle our
24:06 - demolish let's do that on the right
24:09 - mouse click
24:14 - so you get the grid object on the mouse
24:16 - run position then we need to see
24:18 - if there's something on it so let's make
24:20 - a function to return the placed object
24:24 - okay now we can call this to see where
24:27 - we clicked on
24:32 - and if this one is not known then we do
24:34 - have something that we can mulch
24:35 - so first for demolishing the visual
24:37 - let's go into the placed object and
24:38 - let's make a function
24:40 - let's call it destroy self to destroy
24:42 - this object
24:44 - and here we just do a game object and
24:46 - we're going to destroy it
24:47 - so destroy this game object okay so this
24:50 - will destroy the visual
24:52 - so now here go into the placed object
24:55 - and we call this ryself all right that
24:57 - won't destroy it now we need to cycle
24:59 - through all the grid positions for this
25:01 - object and clear all of them
25:02 - so for that we're going to use pretty
25:04 - much the same watch that we use here so
25:05 - first we grab the grid position list
25:08 - and then we grab go into that one and
25:10 - we're going to clear it
25:11 - so we get the grid object and we're
25:13 - going to clear the grid object the
25:15 - placed object all right
25:16 - except here for the grid position list
25:18 - instead of grabbing it from the current
25:20 - xn we're going to grab it from the xz on
25:22 - this placed object
25:23 - so let's actually make a function there
25:24 - to expose this
25:33 - all right so that's really it since this
25:35 - placed object already has
25:36 - all the data it needs it knows what
25:38 - object it is where the origin is in the
25:40 - direction
25:41 - so using all of this data we can get all
25:43 - the grid positions that this object is
25:45 - occupying
25:46 - so now back on the grid building system
25:47 - for the grid position list
25:49 - we just go into this place object and we
25:51 - ask it to give us the grid position
25:53 - all right so that's it now everything
25:55 - should be working let's see
25:57 - so here i am and i place down normal
25:59 - building and yep there you go now i
26:01 - right click
26:01 - and yep there it is it did clear it and
26:04 - it did clear the object so if i click
26:05 - again yep now i can build again
26:07 - all right so that is working now let's
26:08 - see for one with an irregular shape
26:10 - so let's see place down the gas station
26:13 - occupying both of these
26:14 - now if i right click on this one yep it
26:16 - did clear both of them now if i click
26:18 - here place on both these now right click
26:19 - on this one
26:20 - and yep it did clear both them and same
26:22 - thing for dimension there it is
26:24 - occupying all four
26:25 - and i'm going to do it on this one and
26:26 - yep deletes all them all right
26:28 - so our demolish and build is all working
26:30 - perfectly awesome
26:32 - and finally just to complete the
26:33 - building system over here i have a
26:35 - visual codes
26:36 - so it snaps to the positions as i move
26:38 - the mouse and when i click if there you
26:40 - go it places down the building
26:42 - and i can see all of them i can rotate
26:43 - it and looks great
26:45 - so here's how it works just an empty
26:46 - game object with this script
26:48 - and this script is listening to when the
26:50 - selected type changes just so it can
26:52 - destroy and create new visual
26:53 - so it refreshes the visual and on late
26:55 - update it simply grabs the mouse where
26:57 - on position snap to the grid position
27:00 - and same thing for the rotation and just
27:01 - applies the lerp just to make it
27:03 - slightly animated
27:04 - so using that everything gets snapped
27:06 - into the grid position and for the
27:08 - visual you can also see that it's
27:09 - slightly different
27:10 - for that essentially i put the ghost on
27:12 - a different layer and then over here on
27:14 - the renderer i add the next
27:16 - render objects for the ghost this one is
27:18 - only rendering things on the ghost and
27:19 - it's using a different material
27:21 - so over here is how it looks without all
27:23 - of the debug so i've got a building as
27:24 - you can see it snaps onto the
27:26 - underlying grid and if i move and i can
27:28 - rotate and everything looks pretty great
27:30 - so i can place on any building of any
27:32 - type and if i place on top then of
27:33 - course
27:34 - doesn't work but like this yep all of
27:36 - them occupying the correct grid
27:37 - positions
27:42 - all right so here is our system working
27:44 - fully in 3d
27:46 - and then over here i've got a working 2d
27:48 - version now the logic for this one is
27:49 - pretty much exactly the same
27:51 - except for the grid class that i'm using
27:52 - is the 2d grid class
27:54 - then the mouse position is also
27:55 - calculated differently and the prefabs
27:58 - they have sprites instead of having 3d
28:00 - meshes so there you go i can place
28:02 - any of them anywhere and yep all the
28:03 - logics don't work so if i place this in
28:05 - there nope cannot build place in there
28:06 - and it does work
28:07 - so as you can see it's very simple to
28:09 - make this same system work exactly in 2d
28:11 - you can download the project files and
28:13 - see how the class works for yourself
28:14 - alright so there you have it a really
28:16 - awesome grid building system
28:17 - like i said this can be used for
28:19 - anything it doesn't have to be buildings
28:21 - you can use it to place down enemy
28:22 - positions in an rpg maybe some resource
28:25 - nodes in a survival game
28:26 - maybe some plots in a farming game or
28:28 - maybe some traps in an action game this
28:30 - is an extremely versatile very useful
28:32 - system
28:33 - as i said definitely look forward to me
28:34 - making some more complex tutorials using
28:36 - this one as a base
28:38 - for example i'm currently building a
28:39 - factory automation game that uses this
28:41 - system as the underlying base
28:43 - if you're watching this in the future
28:44 - check the playlist link in the
28:46 - description where i will be adding
28:47 - systems built on top of this one
28:49 - as always you can download the project
28:50 - files and utilities from
28:51 - unitycodemunk.com
28:53 - if you found this video helpful consider
28:54 - liking and subscribing this video is
28:56 - made possible thanks to these awesome
28:57 - supporters
28:58 - go to patreon.com unitycodemonkey to get
29:01 - some perks and help keep the videos free
29:03 - for everyone
29:04 - post any question comes and i'll see you
29:05 - next time
29:13 - [Music]
29:17 - you