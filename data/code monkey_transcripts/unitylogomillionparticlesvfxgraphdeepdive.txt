00:00 - in this video we're going to do a deep
00:01 - dive into the unity logo effect created
00:04 - in the visual effect this is part of the
00:06 - official samples and it's a great
00:08 - showcase of millions of particles
00:10 - behaving in the pen tool we're going to
00:12 - inspect the graph and see how it
00:13 - actually works let's begin
00:18 - [Music]
00:22 - hello and welcome I'm your code monkey
00:25 - and this channel is all about helping
00:26 - you learn how to make your own games
00:28 - with enough tutorials made by a
00:29 - professional indie game developer so if
00:31 - you find the video helpful consider
00:32 - subscribing okay so here we're going to
00:34 - look at the unity on logo effect from
00:36 - the official unity visual effect grab
00:38 - symbols there's not like the
00:40 - descriptions where you can grab the
00:41 - symbols and try them out for yourself
00:42 - and if you're not familiar with the
00:44 - visual effect graph then check out my
00:46 - getting started video alright so here's
00:48 - the effect in action there's this fear
00:50 - of moving around spawning particles and
00:52 - in the background you can see that those
00:53 - point particles take on the shape of the
00:55 - unity logo each particle as you can see
00:57 - is individually simulated which shook is
00:59 - the power of the visual effect graph
01:01 - doing something like this with this many
01:03 - particles is simply not doable with the
01:05 - own particle system this video is made
01:07 - possible thanks to these awesome
01:09 - supporters go to patreon.com/scishow to
01:11 - code monkey to get some perks and help
01:13 - keep the videos free for everyone so
01:15 - it's a great looking effect let's see
01:17 - how it works okay so here in the project
01:19 - files we have our samples then we have
01:21 - the unity logo and let's open up the
01:23 - unity level effect all right here is the
01:25 - entire graph now while the effect is
01:28 - actually very impressive it's actually
01:30 - one of these simpler ones so the effect
01:32 - is essentially built in just two parts
01:34 - so there's a sphere moving around that
01:36 - acts as the spawn position for the
01:37 - protocols and there's a vector field in
01:40 - the shape of the entire logo which is
01:41 - where the particles are attracted to so
01:43 - everything else is just adding more
01:45 - randomization and color to those two
01:47 - actions so let's first look at how the
01:49 - logo is done now like I said it's using
01:52 - a vector field a vector field is a field
01:55 - containing vector isn't like you might
01:57 - see for example on a weather map showing
01:59 - wind direction so that would be a 2d
02:01 - vector field and the 3d vector field is
02:03 - essentially a cube made up of voxels
02:05 - where each voxel contains a vector
02:07 - pointing in a certain direction and in
02:09 - this case of those vectors are built
02:11 - pointing to the shape of the unity logo
02:13 - so those vectors are what the particles
02:15 - used to move in unity you can store
02:18 - effector film as a 3d texture or as a
02:20 - dot vf5 so here in this folder you have
02:22 - the Unity on logo and as you can see
02:25 - it's a texture of 64 by 64 by 64 with
02:28 - the RGB okay now in order to analyze the
02:30 - logo effect let's just quickly disable
02:32 - the sphere so in here I'm going to this
02:35 - can
02:35 - this feared connection and there you
02:37 - know this fear is just on the middle and
02:39 - also the save on the collision and let's
02:41 - disable the gradient so now the particle
02:43 - spawn as white and down here let's
02:46 - disable D blend color alright so now we
02:48 - can focus only on inspecting how the
02:50 - logo works now here in the update we can
02:53 - see that we have three update box now
02:55 - the first one is colliding with the
02:56 - spear so that one's already disabled now
02:58 - the second one we can also disable for
03:00 - now and the third one is the one that
03:02 - has the actual shape of the unti logo so
03:09 - here you can see that this block is of
03:11 - type vector field force so it's applying
03:14 - a force to each particle based on a
03:16 - vector field now the vector field is in
03:18 - here being selected with this exposed
03:20 - property so I'm looking in the
03:22 - blackboard we can see the vector field
03:24 - properly is a texture 3d and it's set to
03:27 - this one here with the unity logo and
03:29 - since this one is exposed we can also
03:31 - sound like the VFX game object and open
03:34 - up the inspector and in here we have our
03:36 - vector field so since this one is
03:38 - exposed you can also override this and
03:40 - select a different one now the other
03:41 - input here is for the field transform so
03:44 - these are essentially the
03:45 - transformations that are applied on top
03:47 - of the vector field so right now it's
03:49 - attached to a property but we can break
03:52 - this off and now we can play around and
03:54 - manual and modify these values so for
03:57 - example we can modify the scale to make
03:58 - it really tiny so make it just 1 1 1 and
04:01 - if there you go and look at that effect
04:03 - now it's extremely tiny so essentially
04:04 - we're modifying the size of the vector
04:06 - field and again the vector field is the
04:08 - thing that actually attracts the
04:09 - particles so we can modify anything of
04:11 - this like for is a modified the X and
04:13 - there you go it starts moving to the
04:14 - side modify the wine to move it up and
04:17 - down and we can also rotate it yep just
04:19 - like that
04:20 - so all these transformations are applied
04:22 - on top of the vector field so let's
04:24 - connect this property again so connect
04:26 - this one to this one and now let's see
04:28 - how this property is working because
04:29 - this one is actually extremely
04:30 - interesting so we have this property and
04:32 - in the whiteboard we can see that it's
04:34 - of type transform and then we can
04:36 - inspect on the inspector our game object
04:39 - and here we can see indeed we have a
04:41 - vector field transform and now for the
04:43 - really interesting part is down here
04:45 - attached to this game object is another
04:46 - script of time VFX properly by
04:49 - and this is how you can link a VFX
04:51 - properly with a normal game object so
04:54 - here we can select this property binding
04:55 - and we can bind this property to this
04:58 - target and this target takes a transform
05:00 - which is an object in our scene so
05:01 - instead of modifying these values
05:03 - individually we can have a probably
05:05 - binder will ink a field with a transform
05:07 - and that we can modify this transform so
05:09 - here in the scene view and we can just
05:11 - move it and yup there you go you can see
05:13 - that the effect is actually moving so by
05:15 - modifying this game object you can see
05:17 - that we are updating our effect in real
05:19 - time now what makes this super cool is
05:21 - how you can easily animate your effects
05:23 - by animating a basic game object so in
05:25 - fact that's exactly what's being used as
05:27 - we play the scene here with the scene
05:29 - plane you can see that there is a slight
05:31 - rotation left and right and none of that
05:33 - is done by actually modifying the effect
05:35 - but rather just by animating that linked
05:37 - object so here in the scene there's a
05:39 - timeline game object and we can inspect
05:42 - the timeline and see that yep indeed
05:44 - there it is we have our transform proxy
05:47 - and it's being animated on the rotation
05:49 - so it rotates left rotates right and by
05:51 - animating that object then our effect
05:53 - gets animated as well so binding
05:54 - transforms in your scene to transform
05:56 - properties in your effects is a really
05:58 - excellent and easy way of adding some
06:00 - awesome animations alright so that's
06:02 - pretty much how the unity and logo works
06:04 - it's just a vector film attracting
06:06 - particles now here on the update you can
06:08 - see that there is also another vector
06:09 - field so this one is essentially just
06:12 - applying some noise so for example let's
06:14 - is able to undo the unity logo and right
06:16 - now we don't see anything and now if we
06:17 - nave on this one yep there you go now
06:19 - you can see it's pretty much just random
06:21 - noise so it's a vector field sending all
06:23 - the particles in all different
06:24 - directions and now here you can also see
06:26 - that there are some nodes attached to it
06:28 - and all its really doing is it's taking
06:30 - the total time which is constantly
06:32 - increasing then it multiplies itself by
06:34 - a certain value and simply a point is a
06:36 - result of that transformation onto our
06:39 - film transform rotation so in there you
06:41 - can see that the vector film is actually
06:42 - rotating constantly so if I'm working
06:44 - the scene look from a different point of
06:46 - view yep there you go you can see the
06:47 - rotation happening so in here we can
06:49 - increase this any of there you go now
06:51 - it's rotating faster and if we were to
06:53 - disconnect this one yep there you go now
06:55 - you can see how the randomness is
06:56 - commonly static so with rotation it
06:59 - looks a lot more interesting alright so
07:01 - this one is pretty much is that
07:02 - just adds a bit of noise and then this
07:04 - one has a shape of the Indian logo so
07:06 - when you combine both of them if there
07:08 - it is it takes on the shape of the unity
07:10 - logo while also keeping some rotation
07:12 - making it feel very flowy so that's the
07:14 - unity logo part of the effect pretty
07:16 - much as a vector film and some
07:18 - randomness on top now for the vision
07:20 - let's note down here on the output most
07:22 - of it is pre standard so with just
07:24 - orienting particles along with their
07:26 - velocity then it set the scale based on
07:28 - their current velocity and then the one
07:30 - special thing down here is the color
07:32 - blend which is based on the particle a
07:35 - lifetime and it's also pointing with
07:37 - another color based on the sphere
07:38 - position so now it's time to look at the
07:40 - second main element which is how the
07:42 - sphere works now up here and let's just
07:44 - reset the sphere connections so
07:46 - connecting this fear output onto that
07:48 - input and if there you go now the sphere
07:50 - is moving around in our scene and now
07:52 - let's just focus on the sphere so in
07:54 - here let's disable the vector fields and
07:56 - enable the sphere collision and since
07:59 - the particle size is based on velocity
08:00 - right now we can't see anything so much
08:02 - it's not a very tiny force and a
08:04 - pyramids also set in a lifetime to a
08:06 - tiny amount and increase how many are
08:08 - spawned and here just increase the GR
08:13 - intensity and yep now we can visually
08:14 - very easily see all of our sphere moving
08:16 - all right now we can look into it now
08:19 - the really interesting thing is how all
08:21 - this movement is handled solely through
08:23 - these nodes down here so like you saw
08:25 - previously it's possible to create some
08:27 - movement by linking a moving game object
08:29 - and acting as the input for the sphere
08:31 - or transform and now here we are seeing
08:33 - another approach of animating our
08:35 - effects which is just using some basic
08:36 - map so let's first analyze the part here
08:39 - on the aleph time now this one is really
08:41 - just a simple branch node it uses a
08:44 - boolean to decide whether to use this
08:45 - value or this film now the difference
08:48 - here is that one is using the total time
08:50 - for the entire effect and the other one
08:52 - is using the total time for each
08:54 - individual particle so that's a logic to
08:56 - it however it doesn't really make much
08:57 - of a difference but anyway this whole
08:59 - group that's how it's doing
09:00 - oh it does is it krabsy total time then
09:03 - over here is the group with the actual
09:05 - sphere movement and now if you're
09:06 - familiar with math and trigonometry then
09:08 - this won't be very easy to understand
09:10 - but even if you don't you should sound
09:11 - be able to get it now there are two
09:13 - parts to the sphere there's the movement
09:15 - up here and this
09:16 - down here now the size part is actually
09:19 - extremely simple it's just these notes
09:21 - so you can see that we have a simple
09:23 - noise node now what it does is it
09:25 - generates some random values in this
09:27 - case it's generating those values in a
09:29 - single dimension
09:30 - so imagine a noise image that is one
09:33 - pixel tone and each pixel is randomly
09:35 - going from pipe to what all these films
09:37 - are on here essentially manipulate how
09:39 - that noise is generated then our
09:41 - coordinate in here is the value that
09:43 - we're actually grabbing so by using the
09:45 - time from down here as our coordinate
09:47 - time is almost increasing so the
09:49 - coordinate is almost increasing so we're
09:50 - always getting a different value and
09:51 - then the output from the noise here is
09:54 - going to be a value between 0 and 1 and
09:56 - then in here we have an alert node so
09:58 - this one interpolates a value between x
10:00 - and y based on the input in here on the
10:03 - s and for the inputs we are getting them
10:05 - through this property so we can expand
10:08 - it and see yep we have a property it has
10:11 - an x and y which you are using to set
10:13 - the minimum and maximum size so here in
10:16 - the blackboard we can inspect this one
10:17 - there is this fear min/max radius it is
10:20 - a simple invite you to and again it's
10:22 - exposed so we can modify this in the
10:24 - inspector so we selected down here we
10:27 - have the sphere min Max for example
10:29 - let's put this at point one and this one
10:30 - at one and now this fear goes from
10:32 - really big to real small so interpolate
10:35 - between the minimum and maximum based on
10:37 - the noise and then we simply input that
10:38 - onto the sphere radius so all of these
10:41 - nodes down here are essentially just
10:42 - creating a nice pulsating effect so as
10:45 - the sphere moves around it also randomly
10:47 - becomes smaller and bigger now we can
10:49 - just disable the size pulsating so we
10:51 - can focus only on movements and let's
10:53 - just disconnect the timing here any of
10:55 - there you go now our coordinate is the
10:57 - same so the size never changes alright
10:59 - so that's how is the size is set up now
11:01 - let's look appear into how the movement
11:03 - works now the movement is handled
11:05 - internally through all of these nodes
11:06 - and now essentially it's all based on
11:08 - the sine and cosine waves now I'm not a
11:11 - mathematician but if you're not familiar
11:13 - here is a very basic explanation the
11:16 - sine is a value calculated based on an
11:18 - angle design goes from minus 1 to plus 1
11:21 - so if the angle is 0 then the sine will
11:24 - be zero and if the angle is 90 degrees
11:26 - or one half of pi the design will be
11:29 - was one and if it is at 270 degrees then
11:32 - the sign is minus one so if you picture
11:34 - a rotating angle you end up with a nice
11:37 - wave function going constantly from
11:38 - minus one to plus one and if you rotate
11:40 - the angle faster then you essentially
11:42 - increase the frequency of the wave and
11:44 - the cosine is pretty much the same thing
11:46 - except instead of getting the opposite
11:48 - side of the triangle it gets you
11:49 - adjacent
11:50 - so what matters is that it's a wave
11:51 - function that returns a value between
11:53 - minus 1 and 1
11:54 - so here we are using the sine in order
11:56 - to grab what can become DX and we're
11:59 - using the cosine in order to grab water
12:00 - and become the Y and the Z now to
12:03 - simplify things let's disconnect the
12:04 - cosine here and you've just like that we
12:07 - can see our sphere moving simply and
12:08 - left and right so that's the sine wave
12:10 - at work now note here that we are
12:12 - applying a sign to a vector so one thing
12:16 - that really tripped me up quite a bit
12:17 - while I was researching this was how
12:19 - sine works with vectors I was thinking
12:21 - that it was essentially calculating the
12:23 - angle of the vector and then calculating
12:25 - the sine of that however that is not the
12:27 - case what it does is individually
12:29 - currently to sign for each of the x y&z
12:31 - and it films the output vector with the
12:33 - sine of those values so in this case
12:35 - we're only grabbing the output on the Y
12:37 - which is simply going to be the sine of
12:39 - the input on the 1 so the input isn't
12:42 - really being used as the vector 3 but
12:44 - rather as just three floats now in here
12:46 - we can disconnect the sign from the time
12:48 - and here you can see that if I modified
12:50 - Zed yep nothing happens since we're not
12:52 - using it modify the X and yep nothing
12:54 - happens either it's only found modified
12:56 - Y that yep you can see that it's going
12:58 - left and right now again another basic
13:00 - math thing just in case you're confused
13:02 - the number used in here to currently
13:05 - design is represented in radians so at 0
13:07 - the output is 0 so the sphere is right
13:09 - down the middle then as we increase you
13:12 - can see that reaches the edge yep just
13:13 - about that so in order to get an output
13:16 - of +1 then essentially we have to have
13:18 - the input of pi divided by 2
13:20 - so essentially 1.57 then as we increase
13:23 - and we reach pi which is 3.14 we go back
13:26 - into the middle so the result is 0 and
13:29 - as we keep increasing goes left side and
13:31 - at 2 pi it goes back to 0 so just be
13:34 - aware that this one is using radians and
13:36 - not oiler angles so it doesn't go from 0
13:38 - to 360 brother from 0 to 2pi all right
13:41 - so that's the sine wave
13:43 - which is outputting on the y-value but
13:45 - here it is combined into the x value
13:47 - with these other two so the append
13:50 - vector is essentially just creating a
13:51 - vector it takes this one as the X then
13:54 - this one as its Y and this one as its Z
13:56 - so this one just creates the actual
13:59 - vector now in this vector all of the
14:00 - fields are going to be between minus one
14:02 - and plus one and then in here we have a
14:05 - simple multiplier where we're
14:06 - multiplying our vector by the sphere
14:08 - motion amplitude then the resulting
14:10 - vector from that simply goes into the
14:11 - sphere Center which is the sphere
14:13 - position now this effect is using two
14:16 - properties in here the sphere motion
14:17 - speed and emotion amplitude so now let's
14:19 - connect these in back yep there it is
14:22 - now these two properties are pretty
14:24 - straightforward so from working to the
14:26 - inspector since those are exposed yep
14:29 - there you go we have the sphere motion
14:30 - speed and the amplitude so if you modify
14:32 - the spinned as we increase yet there you
14:35 - go the sphere constantly moves faster
14:37 - and faster and faster and by modifying
14:39 - the amplitude we simply change how much
14:41 - it goes in this case and left to right
14:43 - so put it really small and barely moves
14:45 - yep just like that so two basic
14:48 - properties that we can interact and
14:50 - modify the effect and now if we just
14:52 - connect the cosine and if as you can see
14:54 - it's mostly the same behavior except
14:56 - it's moving up and down and back and
14:57 - forth so that's pretty much how the
14:59 - whole movement of the sphere works the
15:01 - input is in here increasing over time
15:02 - then it applies some wave functions to
15:05 - that value it multiplies them by a
15:07 - certain speed and a certain amplitude
15:09 - and simply uses it all in order to go to
15:11 - the center so with this one and let's
15:13 - also connect the pulsating effect and
15:15 - yet there's this fear working me exactly
15:17 - as it was so you can see how you can
15:20 - animate things in your effect either by
15:22 - animating a link game object or just by
15:24 - using some really clever math so that's
15:26 - a sphere which is outputting in here and
15:28 - then it's used in various places so the
15:30 - main one is the sphere goes in here into
15:32 - where the particles are spawned then it
15:35 - also goes into this walk in here which
15:37 - caused the particles collide with the
15:38 - sphere so if we disable this one if
15:41 - there you can see that they no longer
15:42 - collide so as soon as they spawn they
15:44 - are left behind and finally it also goes
15:47 - into this part down here which creates
15:49 - some color pointing so let's see how
15:51 - this part works so for that let's enable
15:53 - our vector fields so enable this one
15:56 - in the shape of the unity logo and name
15:58 - on this one in the shape of the random
16:00 - vector field and appearing let's reset
16:03 - the particle on lifetime
16:04 - any of there's our effect with the
16:07 - sphere moving around as well as the
16:08 - unity logo so the particles get spawned
16:10 - on the position of the sphere as it
16:12 - moves and they get attracted towards the
16:14 - unity load now if you remember up here
16:16 - we disconnect this gradient so all the
16:18 - particles are being spawned as a simple
16:20 - white but down here if we enable the
16:22 - point color over life so enable this one
16:24 - and if there you go now you can see that
16:26 - the particles do take some color so the
16:28 - color is in here on the blend it uses
16:30 - this property which is exposed and you
16:32 - can see that it's using this gradient so
16:34 - each particle goes through all of these
16:35 - colors over its lifetime that's going
16:38 - into this color input and then it also
16:40 - has a very interesting complement so
16:42 - what this planning is doing in here is
16:44 - its planning the color of the particles
16:46 - when the sphere passes over them so in
16:48 - there you can finally see that even
16:49 - though the particles are changing color
16:51 - you can still see where these fear is
16:53 - moving now the input in here is from the
16:55 - sphere as it moves yep then we take that
16:57 - sphere input we get the position of the
17:00 - current particle and we do a simple
17:02 - distance compare it to the sphere center
17:04 - then we simply subtract the radius and
17:07 - then we use that Valley in order to
17:09 - sample a specific value on a curve so
17:12 - what this is doing is essentially if the
17:14 - particle is right on top of the sphere
17:15 - then this node will output zero and if
17:18 - the particle is too far away from the
17:20 - sphere then it'll output one so we can
17:22 - break off this connection and many will
17:24 - modify this to see what happens so if
17:26 - this one is at the other then is going
17:27 - to sample the curve right on the on left
17:29 - side there so the output in here will be
17:31 - zero which means it will not blend with
17:33 - this color so without pointing then the
17:36 - output color won't simply be the one
17:37 - that it was fun with and if we change it
17:39 - to one thence essentially using this
17:42 - color which is a gradient over the life
17:44 - of the Paragon so the output from this
17:46 - one into this one won't depend on the
17:47 - distance of the particle to the sphere
17:49 - then it grabs a position on this curve
17:51 - and then it outputs in here and
17:53 - depending on that you neither uses this
17:55 - color or the starting cone so if we
17:58 - connect this one back and if there you
18:00 - go now they get spawned with a different
18:02 - color and you can see how the effect of
18:04 - where the sphere goes over some
18:05 - particles they go back into their
18:07 - original cone all right so here is the
18:09 - four
18:10 - complete effect it looks pretty complex
18:12 - but hopefully now you understand how
18:13 - it's made up of a bunch of relatively
18:15 - simple systems all interacting with each
18:17 - other this is a really good looking
18:18 - effect that works as an excellent sample
18:20 - to showcase the power of the visual
18:22 - effect graph again remember how
18:23 - throughout all this time we've been
18:25 - playing around with hundreds of
18:26 - thousands of particles and it's not
18:28 - running any rock-solid framerate so here
18:30 - it is the effect looking real nice
18:32 - alright so this was a bit of a different
18:34 - new type of video this is the first time
18:36 - I've done a deep dive on an official
18:38 - sample provided by unity let me know in
18:40 - the comments if you found this type of
18:41 - video useful if so then I'm gonna look
18:44 - into doing more deep dives into more
18:45 - effects as well as other ent projects
18:47 - like the dot sample or the ELA script so
18:50 - let me know in the comments this video
18:52 - is made possible thanks to these awesome
18:54 - supporters go to patreon.com/scishow to
18:56 - code McKee to get some perks and help
18:58 - keep the videos free for everyone
18:59 - subscribe to the channel for more unity
19:01 - preserves post-nuclear salmon comes and
19:04 - I'll see you next time
19:10 - [Music]