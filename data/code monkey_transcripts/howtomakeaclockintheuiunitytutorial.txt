00:00 - hello and welcome I'm your code machina
00:01 - in this video we're going to create a
00:02 - analog clock visual in our UI let's
00:05 - begin
00:08 - so let's start off by making the clock
00:10 - in the UI so here is my canvas create an
00:14 - empty game object to hold our clock
00:16 - inside let's create a UI image this
00:20 - won't contain our clock background now
00:25 - let's add the first clock hand it won't
00:27 - be just a simple image so a new UI image
00:30 - so me the clock hand and here let's make
00:34 - it a rectangle now we're going to set
00:36 - the pivot on the bottom and the anchor
00:39 - on the middle so we can now go into zero
00:41 - zero and we have our clock hand like
00:43 - that with our clock and set up this way
00:46 - we can modify our rotation on the Zed in
00:49 - here and by going into the negative we
00:51 - can rotate our clock hand around our
00:53 - clock we need to set negative rotation
00:56 - in order to achieve clockwise movement
00:58 - so this is the field we need to modify
01:00 - through code alright so this is the
01:03 - absolute basic setup now let's look at
01:04 - the code so now in here let's first
01:09 - create a part void awake and in here we
01:12 - want to grab the transform for our clock
01:15 - hand so we're going to store it in here
01:22 - okay now that we have the reference for
01:24 - our clock and transform let's go into
01:26 - our private eye update and here just for
01:29 - testing let's simply rotate the hand
01:30 - around so on every update we're going to
01:33 - set the clock hand transform dot Euler
01:36 - angles going to set the owner angles as
01:39 - you remember we only need to modify the
01:41 - Zed on the set in here and let's make it
01:43 - rotate round based on the time time that
01:46 - real-time since start up and let's
01:49 - multiply it by 90 F so every real second
01:52 - it won't move 90 degrees and again in
01:54 - order to go clockwise we need to go into
01:56 - the negatives so based on this we should
01:59 - be able to see our hand rotate 90
02:00 - degrees per second which would take 4
02:02 - seconds to comply rotate around the
02:04 - clock so let's see and yep as you can
02:07 - see we have our clock hand correctly
02:09 - rotating around the clock and taking 4
02:11 - seconds to do it alright so now let's go
02:13 - back into the code to define our time
02:15 - variable so in here how you define time
02:17 - in your game won't depend
02:19 - on what you're trying to achieve you
02:20 - could use something like a tick system
02:22 - and define how long each stick should be
02:24 - or in here we're simply going to use a
02:26 - float and make one day equal one F so up
02:30 - here we make a product note for our day
02:32 - this is the current day inside our game
02:35 - then let's also define a constant for
02:38 - how long a day is in real time so we
02:40 - make a private concert and let's call
02:43 - this real seconds per in-game day and
02:47 - we're going to define it as five seconds
02:50 - so five seconds in real life only equal
02:52 - one day inside the game so now on to the
02:55 - update we're going to have to increase
02:57 - our day variable based on our content so
03:00 - we increase our day by the time that a
03:03 - time divided by the real seconds per
03:07 - in-game day the doctor time homes the
03:09 - number of seconds since the last frame
03:10 - so we won't have our day increase by one
03:13 - for every five seconds all right so now
03:16 - that we have our development with our
03:17 - defined in game time let's apply to our
03:20 - clock the first thing we're going to do
03:22 - is keep our day variable to between zero
03:24 - and one which will help us keep our math
03:26 - simple so in here how much is defined a
03:28 - float for the day normalized and it will
03:30 - simply be our day plus a mod of 1f that
03:35 - way when our day variable is holding
03:37 - something like 5.5 it won't simply
03:39 - return point five so now that we have
03:41 - our day normalized we can go in here on
03:43 - to the Euler angles and when using Euler
03:46 - angles we have 360 degrees to completely
03:49 - rotate around the clock so what we
03:51 - really need to do in here is take our
03:53 - day normalized variable and we multiply
03:57 - this by 360 F let's define here a float
04:02 - for the rotation degrees for a day and
04:06 - this is our map and again in order to go
04:09 - clockwise we have to put 8 minus so
04:12 - using this when we are at midday our
04:14 - de-normalize will be at 0.5 F so point 5
04:17 - f x 360 won't give us 180 so 0.5 hour
04:21 - from the day normalize won't correctly
04:22 - match up with midday now in here we are
04:24 - trying to display a 24-hour clock so
04:27 - just one phone revolution per day you
04:29 - could change it to a 12-hour clock just
04:31 - by coming in here
04:32 - and multiplying it by 2 F which would
04:34 - make it have 2 revolutions per day
04:36 - whatever type of quality choose will
04:38 - depend on what game you're trying to
04:39 - make so in here we're going to leave it
04:42 - as a 24-hour day clock so let's test our
04:45 - code there it is and yep as you can see
04:48 - the hand is going and taking five
04:49 - seconds do a complete revolution so we
04:53 - now have our fully working with one hand
04:55 - which represents our hours now let's add
04:57 - another hand for the minutes so here
04:59 - let's rename this from clock hand into
05:01 - the hour hand and duplicate it and make
05:04 - a minute here now the hour hand won't be
05:07 - shorter and the minute hand will be an
05:09 - order okay so we now have a hour hand
05:13 - and a minute hand it's now back into our
05:16 - code let's rename our clock hand into
05:18 - the clock hour hand transform and then
05:22 - make 140 minute and down here all we
05:28 - need is some very simple map so we have
05:30 - our code for the hour hand which is the
05:32 - same and for the minutes the only
05:34 - difference is that we rotate 24 times
05:36 - per day so here just say float for the
05:40 - hours per day we have 24 hours in one
05:43 - day we're going to do the exact same
05:46 - thing on our minute hand and multiply it
05:50 - by hours per day so just like that our
05:53 - minute hand will rotate 24 times for
05:56 - every one rotation of our our hand ok so
05:58 - let's see the result and yep there it is
06:01 - the clock is now working with both the
06:03 - minute and the our hands we can go back
06:05 - into our code and here easily modify the
06:08 - real seconds per in game day so instead
06:10 - of one day being 5 seconds let's say one
06:12 - day is 1 minute
06:14 - and as you can see this be change the
06:15 - coordinates there you go one hour and
06:17 - two hours and so on we can also very
06:21 - quickly add a text component so in here
06:23 - we add a new UI text let's say the time
06:26 - text
06:34 - so that's our text ey object now let's
06:38 - go into the code first gravity reference
06:47 - and on our update tone we need to is
06:49 - again some very simple math so we define
06:52 - our string for the hours string which
06:54 - will be based on our day normalized x 24
06:58 - ever again 24 hours per day so we take
07:01 - it and we do a two string and give it a
07:04 - string format of 0 0 so we always have
07:06 - the leading zeros now this in here will
07:08 - automatically round our number which is
07:10 - not what we want so in here we need to
07:12 - do a math F dot 4 so in case we end up
07:16 - with an hour of say 1.8 that is supposed
07:18 - to be our 1 not our 2 so we have the
07:21 - string for our hours now let's define a
07:23 - string for our minutes so for the
07:27 - minutes we take our de-normalize
07:30 - multiplied by hours per day so this will
07:32 - give us a number between 0 and 24 we can
07:35 - then do a mod of 1 F so now we have a
07:38 - value between 0 and 1 and all we need to
07:41 - do is take that value and multiply it by
07:43 - 60 F since again in 60 minutes inside
07:46 - one hour then we do the same to string
07:51 - and give it two leading zeros and again
07:54 - we need to for this all right so we now
07:57 - have both of our strings so all we need
07:59 - to do is go into the time text text and
08:01 - give it the our string plus and our
08:05 - minutes string all right let's see and
08:08 - yet there it is as you can see
08:09 - everything is increasing the minutes go
08:11 - up to 30 16 yep 360 works but only find
08:15 - hour is on three goes up and it's now in
08:17 - fourth and yep correct and again by
08:20 - modifying the time scale we can easily
08:22 - modify the speed of our clock and again
08:24 - goes up into 24 hours okay great so
08:27 - there you have it we created the analog
08:29 - clock visual in our UI it correctly
08:31 - displays the hour and minute hands while
08:33 - having the code easy to adapt to
08:35 - whatever time scale your game requires
08:37 - as always you can download the project
08:39 - files and utilities from unity code
08:40 - monkey comm if you have any questions
08:42 - post them in the comments and I'll do my
08:43 - best
08:44 - so sore for more videos and I'll see you
08:46 - next time