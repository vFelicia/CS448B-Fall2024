00:00 - hello and welcome I'm your code monkey
00:02 - in this video we're continuing to create
00:03 - the waiting queue in battle royale
00:05 - tycoon we're going to make our guess AI
00:07 - more robust and fix some issues that you
00:10 - might have noticed let's get started
00:14 - okay so in the previous videos you might
00:17 - have noticed there are some issues with
00:19 - how our guests move around the queue
00:21 - sometimes the guests won't stop in the
00:23 - middle position and wait for another
00:25 - guest to show up and take the spot in
00:27 - front of him
00:28 - other times the guest won't go directly
00:30 - to his position instead of going to the
00:32 - entrance first and then his position
00:34 - we're going to create a specific class
00:36 - to handle our guests and to fix both
00:38 - those issues
00:39 - the game is stone development so if you
00:41 - like the concept go to the same page add
00:43 - it to your wish list and phone so let's
00:45 - start off by making a class to handle
00:47 - the guest qai so in here making you see
00:50 - sharp script and let's name it p.m.
00:53 - waiting queue guest a I inside let's
00:57 - remove the monobehaviour references
00:59 - since we want this to be a very nice and
01:01 - clean class let's start off by making a
01:04 - constructor see I'm waiting queue guest
01:06 - a I in our constructor and let's receive
01:10 - a guest object which we're going to
01:12 - store and eternally light has also
01:15 - received a vector3 for the entrance
01:19 - position and as soon as this a is
01:22 - created I'm going to go into the guest
01:25 - and move them towards the entrance
01:27 - position this class will be created when
01:29 - a guest is added to the queue and
01:31 - destroyed as soon as he leaves the queue
01:33 - so this a high class only exists while
01:35 - the guest is in the queue that way our
01:37 - code is very clean
01:38 - alright so now in our waiting queue in
01:40 - here when we add a guest to our queue in
01:43 - here we want to create a new instance of
01:46 - the guest a high class so see I'm
01:48 - waiting till yesterday I can't cast a
01:50 - and we're going to instantiate a new one
01:54 - with our guest so previously we're using
01:58 - a guest list so right now let's replace
02:00 - that guest list with a guest list so
02:02 - this is the object we want to contain
02:05 - inside of this listen and let's rename
02:08 - this to guest a I list
02:10 - okay so let's fix all of these errors
02:18 - okay so I have commented out all the
02:20 - Earth's from now just so we can test if
02:23 - we are in Senshi ating our guests say I
02:25 - correctly and the guests should be going
02:27 - into our entrance alright here's my cue
02:30 - let's see if we guest comes in and there
02:32 - you go they go in they stopped exactly
02:34 - attendants okay great now when they
02:36 - reach the entrance position let's send
02:38 - them to their own position we're only
02:40 - going to give him a position after he
02:42 - arrives at the entrance position the bug
02:44 - were trying to solve is the one where
02:46 - two guests get added to the queue but
02:48 - the second one arrives first and still
02:50 - goes to the second position so then he
02:52 - stays there waiting for the other one
02:53 - which arrives later to pass him and go
02:56 - to the front we want the position given
02:58 - to a guest based on when he arrives at
03:00 - the entrance position rather than based
03:02 - on when he was added to our queue so
03:05 - let's go into our guest a yawn and in
03:07 - order to have the guest request a
03:09 - position let's have the waiting queue to
03:11 - the constructor so see I'm waiting queue
03:13 - waiting queue into our constructor and
03:17 - we're going to store a reference and
03:20 - here now when he arrives at the entrance
03:23 - position in here we can have an action
03:26 - that won't be triggered when you rise at
03:28 - that position so when he does and let's
03:30 - go into the waiting queue and trigger a
03:34 - function called guest request set queue
03:37 - position we're going to call that
03:40 - function using this reference so go in
03:43 - here and send this and then here let's
03:46 - make a public void called set the queue
03:50 - position which will receive a vector3
03:54 - for our queue position this is what's
03:57 - going to be called by the waiting queue
03:58 - through this function and in here we're
04:01 - going to move our guests towards this
04:05 - position so in our waiting queue let's
04:07 - make this function so go down here after
04:12 - yeah the guest let's make a public void
04:14 - guests requests at queue position and in
04:17 - here we're going to receive a guest a I
04:20 - which is guessing I that requests in a
04:23 - position so this is the guest asking for
04:25 - the queue to set his queue positioned
04:27 - let's send him to the position
04:28 - that matches his index so going to the
04:31 - guest ayaat set the cube position and
04:34 - give him the position list that matches
04:37 - with the guest a I enlisted indexed on
04:41 - this yes
04:42 - Taeyang and a pyramid send this as our
04:46 - waiting queue okay so the bug is still
04:48 - happening but what's test and see if our
04:50 - guests are going to their position on
04:52 - the queue all right here's the guest
04:54 - when he gets there he requests the
04:56 - position and he goes in there okay goes
04:59 - okay good now let's finally fix that bug
05:02 - essentially we need to know what the
05:04 - guest is already in the queue or still
05:06 - moving towards the entrance so in our AI
05:09 - in here let's make a private room for a
05:13 - state and the possible states will be
05:16 - going to entrance position and waiting
05:21 - in middle of queue and have a private
05:27 - state state and in here when we create
05:30 - we set the state to going to the
05:33 - entrance position and when he gets the
05:35 - entrance here is where we're going to
05:38 - first set the state to our state that
05:42 - waiting in middle of queue before
05:43 - requesting our position now in here
05:46 - let's make a function public bull is
05:49 - waiting in middle of queue and in here
05:54 - we're simply going to return if the
05:56 - state equals Q so we can test if the
06:01 - guest is waiting in the middle of the
06:02 - queue or still heading towards the
06:04 - entrance so in here when the guest
06:05 - requests to be given a queue position
06:08 - let's calculate which position we should
06:10 - actually give him so in here we're going
06:12 - to cycle through the list and put him
06:14 - ahead of everyone who is still heading
06:16 - to the queue so before we send him his
06:18 - index let's go for in T equals zero less
06:22 - than just a I list dot count I postpone
06:26 - start so in here if the guests stay on
06:30 - list of this index if it is this one
06:33 - then we're simply going to break since
06:35 - we don't care about the ones that are
06:37 - already behind
06:38 - if not then we're testing guests there
06:40 - are before him so if the guests that we
06:44 - are testing in here if that guest is not
06:48 - waiting in the middle of the queue then
06:51 - that means this guest is in the queue
06:53 - before him but he's still heading
06:55 - towards the queue so let's swap their
06:57 - positions and after we swap let's break
07:00 - since we don't care about the ones
07:01 - behind
07:02 - and finally after we have swapped
07:04 - everything then we send him to his
07:06 - correct index position so now this guest
07:08 - should be in front of everyone else who
07:10 - isn't already on the queue okay so now
07:12 - regardless of when the guest was add to
07:14 - the queue he should get the correct
07:16 - position based on when he reaches the
07:18 - entrance position
07:19 - okay so right now our main issue is the
07:21 - fact that guests aren't notifying the
07:23 - queue when they reach their specific
07:24 - position so when you move a guest into
07:27 - his own position when he gets there he
07:29 - needs to call the waiting queue function
07:31 - so this is the function that we need to
07:33 - trigger when we receive a guest although
07:35 - in here we're going to get the guest a I
07:38 - instead of our previous guest object and
07:41 - here the code is going to be very much
07:44 - the same if the STI matches with the
07:47 - first one then we're still going to
07:48 - trigger the event that a guest is
07:50 - waiting in front of the queue so in our
07:52 - AI when the guest reaches his position
07:56 - let's go into the waiting queue and call
07:59 - this function with this one so trigger
08:02 - the section right here okay all right
08:05 - let's see if the event is being fired
08:07 - the guest goes in goes to his position
08:09 - fires the event okay great the event is
08:11 - firing now we just need to actually
08:13 - return the guest object so in our
08:16 - waiting queue in here when we get the
08:18 - first in the queue let's return the
08:20 - object so going to guess our list dot
08:24 - get guest and in here let's make a
08:27 - function public's um guests get yes and
08:32 - it's simply going to return our internal
08:34 - guest object okay here's the cue here's
08:37 - a guest going to the entrance reaches
08:39 - the entrance goes in front fires the
08:41 - event and goes towards the building okay
08:44 - everything is working correctly
08:46 - now there's one issues still happening
08:48 - which is the guests are not being
08:50 - relocated if you can
08:52 - previously we had a bug with against
08:54 - relocation basically guests were going
08:56 - directly into their position on the
08:58 - queue instead of going first to the
08:59 - entrance and then to their position they
09:01 - were doing that because the function was
09:04 - being calmed when the first one moved so
09:05 - everyone got relocated to their
09:07 - positions even the ones that were in the
09:09 - middle of heading towards the entrance
09:11 - but now that we're using our AI class we
09:14 - can easily separate the ones that are
09:15 - going to the entrance from the ones that
09:17 - are already inside
09:18 - so in here when we were relocating our
09:20 - guests we're dealing with guests a guy
09:23 - in here so yes all right and in here
09:26 - we're only going to send him into a new
09:28 - position if guess the I dot is waiting
09:31 - in the middle of the queue so if they're
09:33 - heading towards the queue then we're not
09:35 - going to move them and simply go guess
09:37 - the eye and send him to his position so
09:40 - go up here the exact same code as in
09:42 - here and remove the previous guest code
09:45 - all right let's see if they're being
09:48 - relocated there they are they're all
09:50 - waiting the first thing goes in second
09:52 - goes and everyone relocates okay great
09:54 - so the ones waiting get relocated but
09:57 - the ones that are heading towards the
09:58 - entrance keep going towards the entrance
10:00 - as normal so there you have it we have
10:02 - created a new class specifically to
10:04 - handle the AI of our guests in our queue
10:06 - we managed to fix several bugs that were
10:09 - due to the previous way in which you
10:10 - were moving guests regardless of what
10:12 - state they were in with the AI in its
10:15 - own separate class with only one
10:16 - responsibility our code is more robust
10:19 - and very clean again the game is still
10:21 - in development so if you like the
10:22 - concept go to the same page add it to
10:24 - your wishlist and phone as always you
10:26 - can download the project files in
10:28 - utilities from unity code monkey comm if
10:31 - you have any questions post them in the
10:32 - comments and I'll do my best to answer
10:34 - them subscribe for more videos and I'll
10:36 - see you next time