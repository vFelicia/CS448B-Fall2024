00:00 - hello and welcome I'm your code monkey
00:01 - in this video let's learn how to do a
00:04 - very basic NPC interaction system so
00:06 - this can be just interact with an NPC to
00:08 - talk to them maybe then you open a chat
00:10 - dialog or maybe some kind of shop
00:11 - interface the main goal is to know when
00:13 - the player is near an interactable NPC
00:15 - and then start the interaction with an
00:16 - action although this exact system can be
00:18 - applied to interact with anything not
00:20 - just NPCs so in the end I will also
00:22 - showcase how to use this to open doors
00:24 - and press buttons this is a pretty
00:26 - detailed tutorial I won't cover how to
00:28 - identify nearby objects how to interact
00:29 - with them prioritize closer ones shown
00:31 - into rack UI element and more I will be
00:34 - doing this using a 3D demo but the
00:36 - concepts are equally applicable to 2D as
00:38 - well you just need to use a slightly
00:39 - different function if you prefer a more
00:42 - guided path with step-by-step lectures
00:43 - then check out my complete courses learn
00:45 - how to make a builder Defender game
00:47 - using c-sharp or learn how to make games
00:49 - internally using visual scripting
00:50 - perhaps if you're past the beginner
00:52 - stage and want to make the jump to
00:54 - Advanced then check out my turn-based
00:55 - strategy course to learn how to manage a
00:57 - more complex project and write some good
00:59 - clean code or learn all about Unity with
01:02 - the ultimate TNT overview course which
01:03 - contains over 15 lectures each covering
01:05 - a different two-hour feature of the
01:07 - engine I'm always available in the Q a
01:08 - section answering your questions every
01:10 - single day so check them all out with
01:12 - the link in the description okay so
01:13 - let's build this NPC interaction system
01:15 - here is my demo I have a character in
01:18 - first person and I can walk around
01:19 - pretty basic for the character
01:21 - controller I'm using the free official
01:23 - ENT Stern assets that I covered in other
01:24 - video This is the first person
01:26 - controller and for the visuals over here
01:28 - I'm mainly using the cinti city asset
01:30 - pack then over here for this mini
01:32 - building and that pile of money that is
01:34 - from The Heist pack and for the
01:36 - animations I'm also using a general pack
01:37 - there's links in the description if you
01:39 - want to get them so I can control my
01:41 - character and over here are a bunch of
01:42 - NPCs so let's begin making our
01:44 - interaction system first thing we need
01:46 - is to know if an NPC is nearby so if my
01:48 - player character is standing right here
01:50 - I want to see if this NPC is near me so
01:52 - that I can interact with them so let's
01:54 - begin by making a script so an easy
01:55 - sharp script let's call this the player
01:58 - interact
01:59 - here is the player game object just
02:01 - attach and open okay now here there are
02:03 - seven ways to do that one way would be
02:06 - to check the distance to each NPC
02:09 - so for example I could have a list of
02:11 - transform for the NPC on list
02:14 - I could have something like this then on
02:16 - a private void update I would test
02:18 - Vector 3 dot distance between this
02:19 - transform dot position and the NPC on
02:22 - the list
02:23 - dot transform dot position
02:25 - so I could use this to check if the
02:27 - player is close enough to the NPC ink
02:29 - that would work but that also means you
02:30 - need a reference to every single NPC so
02:33 - this is not a very scalable approach if
02:35 - your game has hundreds of NPCs then
02:37 - you're going to need to add hundreds of
02:39 - references and hundreds of discs and
02:40 - checks so for a much better approach
02:42 - let's not do this and instead we're
02:45 - going to use the physics system so over
02:47 - here we can go inside physics
02:49 - and in here there's a bunch of overlap
02:51 - functions what these do is it queries
02:54 - the physics world and returns all the
02:55 - collectors that overlap that area so
02:57 - this is perfect with this we can test
02:59 - and see if there are any NPCs near the
03:01 - player and if so then we're going to do
03:02 - something over here we have various
03:04 - functions each of them with different
03:06 - shape so for our case for a distance I
03:08 - think sphere makes the most sense so
03:09 - let's use this one this one takes a
03:11 - position so for the position let's use
03:13 - the transform of that position so the
03:14 - player position then for the radius
03:16 - let's use some kind of interact range
03:18 - let's put maybe two units
03:22 - also if we wanted there are more
03:24 - versions to this function for example we
03:25 - could use a layer mask so we could put
03:27 - all of the NPCs in a single layer and
03:29 - only test against that layer that would
03:31 - be one approach the only limitation with
03:33 - that is you only have 32 layers total so
03:35 - if you have too many object types you
03:37 - might run out of layers
03:38 - so in this case let's not use a layer
03:41 - mask let's hit all of the objects and
03:43 - all the layers and then we can cycle
03:44 - through them and check which ones are
03:46 - NPCs so we have this which is going to
03:48 - return an array of colliders let's put
03:50 - this inside the input so if input gets
03:53 - you down let's say for the E key just
03:55 - like in so many PC games okay
03:58 - so you press e key and we get all the
04:00 - collectors let's store them so this
04:02 - returns a con leather ring
04:06 - just for testing let's cycle through all
04:07 - of them and do analog so let's do a four
04:09 - inch collider collider in the collider
04:12 - ring and for each of them do a debug
04:14 - down log on the Collider okay that's it
04:18 - and then over here in the editor all we
04:19 - need to do is make sure that our objects
04:21 - our NPCs already have a collider and up
04:24 - here you can see they do have a caption
04:25 - call leather if they don't have a
04:27 - collider then they pretty much don't
04:28 - exist in the physics world so that
04:30 - function would not work so in order for
04:31 - this to work they must have a collider
04:33 - okay so let's test so here we are I'm
04:36 - far away from the NPCs and if I press
04:37 - the E if they're going with the unlock
04:39 - so you can see a bunch of Road objects
04:42 - so all the ones behind me the capsule so
04:44 - this is the player's capsule and so on
04:46 - so none of them are the NPC since the
04:48 - NPC is way too far away but now let's
04:50 - move forward to the protein PC by a
04:52 - little bit and press the button again
04:53 - and yet now here we do see the NPC
04:56 - alright awesome so just with this we
04:58 - already know if an NPC is within range
05:00 - and now that we know that the next thing
05:02 - is to actually interact with it so let's
05:04 - make another script for that and use
05:06 - c-sharp script call this the NPC
05:08 - interactable
05:10 - let's attach to the NPC now in this case
05:13 - in this demo all of these two NPCs they
05:15 - are both part of this prefab so I'm just
05:17 - going to add the script onto this one
05:19 - okay now let's open and over here let's
05:21 - make a super simple function just for
05:23 - testing and for this one we're going to
05:25 - want to call the function from the
05:26 - player so let's make it public if we
05:29 - don't know why I'm saying this go watch
05:30 - the video on why you should not make
05:32 - everything public you should only make
05:34 - something public when you have a
05:35 - specific reason for it like in this case
05:37 - we want to interact with this function
05:38 - from the player class so we need to make
05:40 - this probably so if only provide
05:42 - interact
05:44 - and up here let's just do a debug
05:46 - download so just say interact
05:49 - okay that's it for this script now back
05:51 - here in the player script so we second
05:53 - through all the collectors okay and on
05:55 - the commanders let's try to get that NPC
05:57 - interactable component so we can go into
05:59 - the collider and we can use try get
06:01 - component we're going to get the
06:03 - component of type NPC interactable
06:09 - so if this succeeds then this collider
06:11 - has an NPC interactable so this is an
06:13 - NPC and if someone went into right so
06:15 - let's just go there and call the
06:16 - interact function okay that's it super
06:19 - simple Let's test so here I am far away
06:21 - from the NPC and if I press the inky and
06:23 - nope nothing happens now as I approach
06:25 - the NPC and press and there you go
06:27 - interact alright awesome so with this we
06:30 - already have the system working exactly
06:31 - as we wanted now we need is to handle
06:33 - the interaction in any way we want so
06:35 - for example over here I've got a nice
06:37 - chat bubble element this was made in a
06:40 - previous video it's just a fun chat
06:41 - bubble with syntax and a nice text
06:43 - writing effect in that video I made this
06:45 - class with a super easy to use static
06:47 - function so we just need to call this
06:49 - and it automatically instantiates the
06:51 - objects such as the text and so on so
06:52 - over here on the NPC interact script
06:54 - let's just do that so just go into that
06:56 - script called the create function let's
06:59 - create on this transform
07:00 - for in low composition let's put chat
07:03 - bubble a bit up and a bit to the side
07:07 - then a nice icon and then some text
07:13 - okay so with this we have a nice chat
07:15 - bubble now again just for fun let's make
07:17 - it play an animation over here on the
07:19 - NPC it has an animator and on the
07:21 - animator it has a basic add-on animation
07:23 - and also a tonking animation the
07:26 - transitions are set up is all based on
07:27 - this parameter so just a trigger
07:29 - parameter called Tonk so when this
07:31 - happens it goes into this and after the
07:33 - exit time goes back into idle so we're
07:35 - here in the code super simple we just
07:36 - need first of all a reference to the
07:38 - animator so the animator animator let's
07:40 - grab it up here on private voidaway just
07:43 - grab the animator get component animator
07:45 - okay so we have the animator and then
07:47 - over here animator and in this case I
07:49 - made that parameter e trigger so let's
07:51 - make the tone trigger and finally for
07:53 - another fun thing let's make the NPC and
07:55 - look at the player over here on the NPC
07:57 - I have a simple script to make it look
07:59 - towards a certain position this is made
08:01 - using unity's animation rigging package
08:03 - it's a super awesome package to let you
08:05 - add Dynamic Logic on top of your
08:07 - animations it's really great really easy
08:09 - to use doing something like this like
08:10 - just rotating the head to face the
08:11 - player is super easy I covered it in
08:13 - detail in another video and in here all
08:15 - I have is the character the character
08:17 - has a rig has a head constraint it's
08:19 - just a basic multium constraint it's
08:21 - constraining the head object towards
08:22 - looking at this object so if I put the
08:25 - animation in preview and I can move
08:26 - around this object and you can see yep
08:28 - the character unlocks straight towards
08:30 - this position so we need is really to
08:32 - place this object on top of the player
08:34 - when the player interacts with it and
08:35 - that's exactly what this script is doing
08:37 - so here just have a public function to
08:39 - look at a certain position and then just
08:41 - interpolates a way to make it nice and
08:42 - smooth this is using alert which is a
08:45 - great way to smooth things also covered
08:46 - it in detail another video so on the NPC
08:49 - let's say he reference to this script in
08:50 - order to call this function so over here
08:52 - let's make that so private that one is
08:54 - an NPC head and look at
08:57 - so over here on let's get it on the
08:59 - awake
09:02 - and then on interact let's call the
09:05 - function
09:07 - in order to look at the position which
09:09 - means that over here we do need the
09:10 - position now we could technically hard
09:12 - code the player reference we could add
09:15 - up here a kind of serialized field and
09:17 - drag the player's reference or we could
09:18 - use some kind of Singleton something
09:19 - like that or perhaps a better approach
09:21 - would be to receive it over here in the
09:23 - function so let's do that since it's
09:25 - much more adaptable so in here let's
09:27 - receive the interactor transform so we
09:29 - transform for the interactor transform
09:31 - then on the player script over here on
09:33 - the player interact let's pass in this
09:35 - transform okay and over here you can
09:37 - look at position let's look at this one
09:39 - dot position but let's add an offset on
09:41 - the Y so the NPC doesn't look at the
09:43 - player's feet
09:44 - so let's add Vector three dot up
09:47 - and multiply it by certain player height
09:49 - so player height let's say 1.7 units and
09:53 - look at that okay great so we had three
09:55 - nice elements on top of our NPC
09:57 - interaction so let's see if our interact
10:00 - code is working correctly with this and
10:01 - triggering all these interesting actions
10:03 - let's see okay here we are and if I'm
10:06 - far away and I press the button nope
10:07 - nothing happens okay great now as I go
10:10 - towards the NPC and I press the button
10:12 - and yep there you go play the animation
10:13 - the nice chat bubble everything looks
10:15 - great then on this other NPC again same
10:18 - thing just look at it and there you go
10:20 - the head rotates place the animation the
10:22 - chat bubble and all of that all right
10:24 - great so as you can see the system is
10:26 - already looking pretty great now we can
10:28 - also add a nice UI element to know when
10:30 - we're close enough to interact for that
10:32 - over here I already have a canvas set up
10:34 - like I usually do so it's an overlay
10:36 - canvas scale with screen size with this
10:37 - okay now inside let's make an empty game
10:40 - object come with the player interact UI
10:43 - then inside let's make a simple visual
10:46 - so let's just zoom out a bit
10:49 - inside let's add a UI image let's also
10:52 - add a text
10:54 - let's put an e
11:02 - all right there it is just a basic UI
11:04 - element we want to show our height
11:06 - depending on if the player is near an
11:08 - interactable object so for that we're
11:10 - going to enable and disable the game
11:11 - object in order to not break it and
11:13 - disable and name on The Parent Game
11:15 - object let's put these inside a
11:17 - container so a container let's just put
11:20 - it on zero zero and drag these ones
11:22 - inside okay so that way the script can
11:24 - say enabled and we can just enable or
11:26 - disable divisions all right so let's
11:28 - make the square to run this
11:30 - so let's make an easy sharp script with
11:31 - the exact same name layer interact UI
11:33 - let's go up here and attach it now here
11:36 - on let's do two basic show and height
11:38 - functions
11:39 - so we're going to need a reference to
11:41 - the container
11:46 - all right there it is super simple just
11:48 - a game object for the container and on
11:50 - show we set active true unhide set of
11:52 - two false here in the editor let's just
11:54 - write the reference okay now here in
11:56 - order to call these two functions now we
11:58 - do want to keep our code nice and clean
12:00 - so what we don't want to do we do not
12:02 - want to run the physics Logic the
12:04 - physics query we don't want to run that
12:06 - on the player interact UI that should
12:08 - say on the player not on the UI script
12:10 - so let's leave it over here on the
12:12 - player script and let's just make a
12:13 - function to expose that logic
12:15 - so let's make it public let's return a
12:18 - NPC interactable
12:20 - and let's call it get interactable
12:23 - object
12:26 - then on this one you do exactly this
12:27 - logic so let's copy so you have this we
12:30 - get component and return the NPC
12:32 - interactable
12:33 - and if we have none then just return
12:35 - null okay so we have this now over here
12:38 - on the UI element we just need to call
12:39 - that so we could make the player a
12:42 - Singleton that would be one approach or
12:44 - alternatively just make a serialized
12:45 - field so let's go with that just make a
12:47 - player interact player interact just
12:51 - make it a serialized film then on proud
12:53 - void update
12:55 - we asked that question so playing track
12:57 - that we get the interactable object
13:00 - and if this one is not known then
13:02 - there's something that can be interacted
13:04 - so let's show and if not let's hide
13:08 - all right so that's it super simple we
13:10 - just need to drag this reference it's
13:11 - over here let's drag the player
13:13 - reference that's it let's test so here
13:15 - we are far away from the NPC and as you
13:17 - can see there's no UI okay great and as
13:19 - I approach the NPC if there goes as I go
13:21 - in range that one does show up so now I
13:23 - know that if I click here no can do it
13:25 - and if I click here if there go
13:27 - interaction okay great now one more
13:29 - thing let's add support for multiple
13:31 - interactions over here I already have
13:33 - two NPCs let's make sure we can interact
13:36 - with both of them exactly as we want to
13:39 - identify them let's go over here to the
13:40 - NPC interactable and let's make a simple
13:43 - let's make it a generalized film a
13:44 - private string let's call this the
13:47 - interact text
13:50 - and then let's make a function to return
13:52 - it so public string get interact text
13:55 - and we're just going to return this
13:58 - then over here in the editor let's go on
14:00 - to this one let's film that in so let's
14:02 - say Tonk with Bob and then for the other
14:05 - one let's say tongue with Alice
14:09 - okay that way we can differentiate
14:11 - between both interactions and on the UI
14:13 - script let's show this so let's go into
14:15 - our UI script
14:17 - and here let's just add another text
14:19 - object below
14:25 - okay just like this
14:27 - over here on UI script let's work with
14:29 - that so let's add using first of all we
14:31 - need the TM Pro over here let's make
14:33 - another serialized film for text mesh
14:36 - Pro you going this is the interact text
14:41 - then on this one when we show let's pass
14:43 - in the object
14:46 - so that over here we can receive the NPC
14:48 - interactable
14:50 - and then we can just go and set the text
14:53 - equals NPC interactable and let's get
14:56 - the interact text
14:57 - okay that's it and now to test a
15:00 - potential issue with this let's go over
15:01 - here to the player interact and let's
15:03 - increase the interact range from two to
15:04 - four we're going to see why in a bit so
15:06 - let's see okay so here we are and let's
15:09 - approach Bob and you better go talk with
15:11 - Bob and if I approach Alice yep there we
15:13 - go talk with Alice okay so it seems like
15:15 - it's working however over here I'm
15:17 - talking with Alice and even if I get
15:19 - close to Bob there you go I'm still
15:20 - talking to Alice
15:22 - the issue here is due to the way that
15:23 - the collisions work it's basically
15:25 - depend on the order in the physics world
15:26 - and not necessarily the closest so let's
15:29 - add that logic to make sure to check all
15:30 - of the interactable objects around the
15:32 - player but make sure to prioritize the
15:34 - closest one
15:35 - over here we have our interaction now
15:37 - let's store in list of NPC interactable
15:42 - and then when we find something with an
15:44 - interactable let's add it to the list so
15:46 - let's add this NPC interactable
15:49 - but let's now return it not yet
15:51 - then afterwards let's cycle through that
15:53 - list and find the closest one
16:08 - alright so here it is
16:09 - so we basically create a list then we
16:11 - sell through all the call letters we try
16:13 - to get the component and we add them
16:15 - onto this list then we cycle through
16:16 - this list again and we check if this is
16:19 - the first one that we're finding if so
16:20 - make this the closest but if there's
16:22 - already a closest NPC if so then let's
16:24 - check the distance and check if the
16:26 - distance between this one is closer than
16:28 - the one to the closest then this one
16:29 - becomes the new causes and then we just
16:31 - return down so this won't test all of
16:34 - the colliders within this array and
16:35 - return only the closest one and with
16:37 - this now we should be able to see the
16:39 - interaction with Alice and Bob depending
16:41 - on which one is closest also by the way
16:43 - quick note you might be wondering why am
16:44 - I not refactoring this code and you'll
16:46 - see one in a bit so don't worry about
16:47 - that let's just test this okay so over
16:49 - here if I approach Bob yep talk with Bob
16:51 - and if I approach analyst yep talk with
16:53 - Alice over here talking with Alice and
16:55 - as I approach Bob yep I can swap between
16:57 - one and the other depending on which one
16:58 - is exactly the closest okay great so
17:00 - everything is working the system now
17:02 - supports multiple interactions within
17:04 - the same range and we only make sure to
17:05 - interact with the closest one finally
17:07 - like I said I don't want to just make an
17:09 - NPC interaction system I want to be able
17:11 - to interact with anything
17:13 - so over here on this side I've got a
17:15 - button and a nice sphere and over there
17:17 - I've got a door with a bunch of cash
17:19 - so I would like to press a button to
17:21 - open this door and grab all that cache
17:22 - so let's do that for that over here I
17:24 - already have some scripts so I've got a
17:26 - simple door interactable this one just
17:29 - got a simple tunnel door which sets the
17:31 - animator in order to open or close the
17:32 - door and then the button also has a
17:34 - button interactable script and over here
17:36 - just changes the color from that sphere
17:38 - mesh render and puts it in another blue
17:40 - or yellow and toggles it okay so to
17:43 - implement this into our interaction
17:44 - system you might think to do the obvious
17:46 - approach which is over here we are
17:49 - trying to get the component of type in
17:50 - PC interactable and if so we interact
17:52 - with it so over here you can just do the
17:54 - exact same thing for all the others so
17:56 - we can try to find a door interactable
18:00 - and if so let's go into the door and
18:02 - turn on the door
18:04 - so here let's make sure to make this
18:05 - public
18:07 - and up here we can talk on the door okay
18:11 - and then for the button
18:15 - then go into the button and let's also
18:17 - expose that one so the push button make
18:19 - it public
18:21 - and over here let's push the button
18:23 - okay so just like this let's see if it
18:25 - works so first of all let's go back to
18:27 - the NPCs and let's talk with Bob okay
18:29 - that one still works now let's try to
18:31 - turn on the button so go and press and
18:34 - there you go it does work and let's go
18:35 - open the door and he appears a bunch of
18:37 - money okay so everything seems like the
18:39 - works so all the logic works the only
18:41 - thing that isn't working is the UI
18:43 - element so I'm near the button but
18:45 - there's no UI element but still
18:47 - everything technically works so this is
18:49 - one possible approach however right now
18:51 - our code is extremely complex we've got
18:54 - a ton of ifs for all kinds of
18:55 - interactable objects and now this player
18:58 - interacts script now this one is tightly
18:59 - coupled with the door and the button so
19:01 - if we were to reuse this script on
19:03 - another game that did not have doors or
19:05 - buttons and everything would break and
19:07 - of course anytime we want to add another
19:09 - interactable object we would need to
19:10 - come back here and add some more code so
19:13 - this approach works but it's obviously
19:15 - not ideal and some of this this specific
19:17 - scenario is exactly where C sharp
19:19 - interfaces become so useful I cover them
19:21 - in detail another video definitely go
19:23 - watch that if you don't know know
19:24 - anything about interfaces now here on
19:26 - let's just make an interface for all of
19:28 - the interactable objects so let's right
19:29 - click create new c-sharp script call it
19:32 - I interactable
19:34 - that's it just make the script don't
19:36 - attached to anything and on this script
19:38 - let's get rid of all of this this is
19:40 - going to be an interface so this is not
19:42 - a mono Behavior we don't want it to be
19:43 - that and this is not a class this is an
19:45 - interface
19:47 - okay so we have our interface and in
19:49 - here we just have two functions so let's
19:50 - do them just like we did on the NPC so
19:53 - we've got a void interact and let's
19:55 - receive a transform for the interactor
20:00 - and then let's also make one that
20:02 - returns a string for the get interact
20:04 - text
20:05 - okay so this is our interface super
20:07 - simple now let's go into the NPC script
20:10 - so we're here on the NPC interactable
20:12 - and on this one let's Implement that
20:13 - interface so we're going to implement
20:15 - the I interactable
20:17 - in this case that's it we already have a
20:20 - void interact and a string at interact
20:22 - text so in this case we don't even need
20:24 - to do anything the interface is already
20:25 - implemented now let's just implement
20:27 - this on the door and the button so over
20:29 - here on the button so let's Implement
20:32 - our interface
20:33 - and now we're going to get our error so
20:35 - let's use to implement the interface so
20:37 - here it is we've got to interact and a
20:39 - get interact text so for this one let's
20:41 - return push button
20:43 - and for the interact let's just call the
20:45 - push button function okay then on the
20:47 - door over here the exact same thing so I
20:50 - interactable
20:51 - let's once again implement the interface
20:53 - for the get interact text return
20:56 - open close door
20:59 - and on the internet What's called the
21:01 - tunnel door okay so all of our objects
21:03 - now implement this common interface so
21:05 - now we can go back into the player
21:06 - interact script and over here instead of
21:08 - doing all kinds of ifs depending on all
21:10 - the types of objects instead let's just
21:13 - test for one so just test for the I
21:15 - interactable interactable so if it does
21:18 - have an interactable component then we
21:19 - go and we just use the interact function
21:21 - just like this so everything else can be
21:24 - removed so that's it as you can see we
21:25 - cut down quite a lot of code and like I
21:27 - mentioned previously let's refactor this
21:29 - function the only reason why I didn't do
21:31 - it a while ago is because it would break
21:32 - when we use other types other than the
21:34 - NPC interactable but now that we are
21:36 - using a common interface now this is
21:37 - super easy so we just need to replace
21:39 - all of these references with this
21:42 - let's also rename the names
21:45 - so interactable
21:49 - and then up here we use this function
21:51 - instead of doing the exact same thing
21:54 - so let's just grab the I interactable
21:59 - and we get it and if the interactable it
22:02 - is not known
22:03 - if not then interactive bone dot
22:05 - interacts
22:09 - okay so that's it super simple except
22:11 - here we see an error so we need to
22:13 - expose the transform so The Simple
22:15 - Solution is to just add a get transform
22:17 - on the interface definition so over here
22:19 - let's make a function that Returns the
22:21 - transform called get transform
22:23 - then you just need to make this on all
22:25 - these
22:26 - so a public transform get transformed
22:28 - and just return this transform
22:31 - so add it onto the button then over here
22:34 - onto the door and on the NPC
22:36 - interactable over here the same thing
22:38 - and on the player interact over here we
22:40 - can use that function so the get
22:42 - transform in order to get the position
22:46 - alright so we have refactored all of our
22:48 - code to work with a generic interactable
22:50 - interface
22:51 - so the button the door the NPC they all
22:54 - share this common interface and then the
22:56 - player interact script only works with
22:57 - this interface now with this let's test
22:59 - and see if everything is already working
23:01 - the last thing is just over here on the
23:03 - UI script so we're here instead of NPC
23:05 - interactable let's receive just an
23:06 - interactable
23:08 - and then it's the exact same thing just
23:10 - get interact text and so on okay so
23:12 - that's it so let's test all right so
23:15 - here we are let's approach the NPC and
23:16 - there you go the UI element shows up and
23:18 - there you go I can talk to Bob let's go
23:20 - over here and yep I can talk with Alice
23:22 - and now if we go over here and I
23:25 - approach a button and there you go I've
23:27 - got the UI element saying to push the
23:28 - button and I push any up it does work
23:30 - and then as I approach the door there
23:32 - you go open and close and yep everything
23:34 - does work all right awesome so this as
23:37 - you can see we can interact with any
23:39 - object of whatever type it's not limited
23:41 - to just NPCs we can interact with
23:43 - anything as long as it implements that
23:45 - interface and has a physical letter in
23:47 - order to find it so adding more and more
23:49 - object types more and more NPCs all of
23:51 - that is super easy now if you're working
23:52 - in 2D all of this works pretty much
23:54 - exactly the same the only difference is
23:56 - over here with the physics overlap
23:57 - sphere if you're working in 2D instead
23:59 - of physics you use physics 2D and then
24:01 - over here you've got different overlaps
24:03 - you've got overlap area box capsule or
24:06 - you also got a circle so that's pretty
24:08 - much the only difference you would use
24:09 - physics CD instead of physics and for
24:11 - the qualities you'd use 2D colors
24:13 - instead of 3D and that's it everything
24:14 - else in this system works exactly the
24:16 - same alright so here is a really awesome
24:18 - interaction system to talk with NPCs
24:20 - push buttons open doors or literally do
24:22 - any interaction you want again if you
24:25 - want a more guided path with
24:26 - step-by-step lectures then check out my
24:27 - complete courses alright hope that's
24:29 - useful check out these videos to learn
24:31 - some more thanks to these awesome
24:33 - patreon supporters for making these
24:35 - videos possible thank you for watching
24:37 - and I'll see you next time
24:42 - [Music]