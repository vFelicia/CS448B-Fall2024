00:00 - in this video we're going to take our
00:01 - grid system and create a very nice town
00:03 - map it will support adding simple tiles
00:05 - to our grid and define how they should
00:07 - be displayed in the end we're going to
00:09 - add saving and loading to a file so you
00:11 - could easily make a level editor for
00:13 - your game let's begin
00:17 - [Music]
00:21 - okay so in this video we're continuing
00:24 - from our grid system and applying a town
00:26 - map onto it we're going to have our next
00:29 - texture atlas and click to place very
00:31 - Styles but first of all let's talk about
00:33 - the built-in Talman
00:34 - unity already comes with a very nice
00:36 - town map that is extremely easy to use
00:38 - and supports a lot of nice features for
00:40 - a lot of simple scenarios the default
00:42 - Unity town map won't do just fun so if
00:45 - all you want is a simple sprite in a
00:46 - grid like structure then use that
00:48 - however if you have a more complex
00:50 - design or simply want to learn how it
00:52 - actually works then keep watching as I
00:55 - said we're going to be using the grid
00:56 - system we created in a previous video so
00:58 - check the link in the description if you
00:59 - haven't seen it already we added support
01:02 - for generics so implementing a town map
01:04 - is actually very easy alright so here
01:06 - let's begin by making our town map class
01:08 - so a new script call it our town map now
01:12 - in here let's get rid of monobehaviour
01:14 - since this will be a simple class let's
01:17 - make a constructor and in here let's
01:21 - just create a great instance of intz
01:37 - okay so here it is we just have our
01:40 - tongue lip we receive on our parameters
01:42 - then we create our grid using those
01:44 - parameters and over here at the end we
01:46 - have our nice simple func which returns
01:48 - the default on which in this case and
01:50 - let's just put it at zero okay so now we
01:52 - need a script to test this so in here
01:55 - let's make our testing script let's make
01:59 - a testing game object okay now in here
02:05 - all we're going to do is go into our
02:06 - start and we just create a town all
02:15 - right that's it let's test yep there's
02:17 - our nice stirring grid all right now
02:19 - let's make our grid work with a custom
02:21 - object rather than just int now
02:23 - previously we already made our grid work
02:25 - with generics so making it work with a
02:27 - custom object is actually very easy to
02:29 - do so in here let's define our class for
02:32 - the object that will be in our grid so
02:35 - we're going to call this the town map
02:37 - object now inside let's define an anoon
02:42 - here we have an enum for our town map
02:45 - sprite and we have none and ground and
02:49 - now let's also make the basic functions
02:52 - like we did in the previous video
03:10 - all right so just like that
03:13 - in here we have to find our next object
03:15 - that won't be in sin she ate it in every
03:17 - single one of our great positions so we
03:19 - have Deconstructor where we receive the
03:21 - bread the X and the y and then we have a
03:23 - function to set the town map sprite this
03:25 - also calls the trigger on object change
03:27 - functions so that the visuals can also
03:29 - update so all we need to do in order to
03:32 - make our grid work with this object is
03:34 - simply change in here so the grid is now
03:36 - of type town map object we make that in
03:39 - there make this type in here and in here
03:41 - we will turn a new town map object
03:44 - passing the grid DX and dy all right
03:47 - just like that now let's go into our
03:49 - testing code and in here let's make a
03:52 - update and we're going to test for input
03:55 - get mouse button down so when we press
04:00 - the on left mouse button let's modify
04:02 - our grid so in here I'm getting the
04:08 - mouse room position from a function in
04:10 - the utilities as long as you can
04:11 - download the utilities for free from in
04:13 - Tacoma comm here is the function in case
04:15 - you want to do it yourself and as you
04:17 - can see it just takes the camera and
04:19 - there's a screen to work point on the
04:20 - mouse screen position so using that now
04:23 - we want to go into the town map and
04:24 - modify the grid under this warm position
04:26 - so let's do that appear first we need a
04:29 - reference and now on the town map we
04:33 - need a function to be able to set a grid
04:35 - position
04:46 - all right so here is the function we
04:48 - simply go into our other line Grint we
04:50 - get the object on this position and if
04:52 - it is not now then we simply call the
04:54 - set our Maps write function which is
04:56 - down here so here I'm cussing we simply
04:58 - use that and when we click let's set it
05:02 - to grunt all right that should do it
05:05 - let's test okay so here we are and you
05:08 - can already see the grid working with
05:09 - our custom object type since instead of
05:11 - 0 it is now saying none
05:13 - it's say none because that's a default
05:14 - in home value now when I click there we
05:17 - go I change that one from now on into
05:19 - ground so right now I can click to
05:21 - modify the underlying and on that
05:23 - alright awesome ok so with this working
05:25 - now let's make our visual now previously
05:28 - we made our grid work with a heatmap
05:30 - visual so if you remember we had a nice
05:33 - object with a minimum and maximum of 100
05:36 - so the underlying value was an INT so we
05:39 - can use this as our base in order to
05:40 - create our town map visual so I simply
05:43 - duplicate the script call it a town that
05:45 - little okay so here again the script is
05:50 - very simple we just have our mesh and we
05:52 - have a mesh filter attached to this
05:54 - object then we have a function which
05:56 - receives a grid
05:57 - we are subscribing to the on grid value
06:00 - changed and when that event is fired we
06:02 - update our visual we update our visual
06:05 - by creating a mesh and setting it
06:07 - correctly if you want to know how this
06:09 - was created from scratch then check the
06:10 - link in the description so using this as
06:12 - our base and let's go up here instead of
06:13 - working with a heatmap word object we're
06:16 - going to work with a tile map town map
06:18 - object so this is the base for our grits
06:21 - and let's change all these ok and now in
06:24 - here when we update we grab the current
06:27 - grid object and now here let's just for
06:29 - the town map sprite so we go to the grid
06:31 - object and let's have a function to
06:34 - return the town map sprite
06:38 - okay here it is now we use it in here
06:44 - and then let's set our UV based on what
06:48 - we have on our thumb up right so in here
06:52 - we define the vector 2 for UV and if
06:55 - detail Maps price equals none then let's
07:00 - display a black solid Quan so we go into
07:03 - the UV and we set it to vector to zero
07:06 - and if not then let's display a green
07:10 - square so let's set it to vector 2.1
07:12 - okay so that's pretty much it now in
07:15 - order to test we need to create an
07:16 - object to hold our town map visual so we
07:19 - do that we drag our script now in here
07:22 - we also need to add a mesh filter and a
07:25 - mesh renderer and in the mesh renderer
07:28 - let's choose the black red yellow green
07:31 - material alright just like that ok and
07:33 - now finally we just need to call the
07:35 - separate functions so let's go to our
07:36 - testing script here and let's add a
07:39 - civilised field for our town math
07:42 - division and then here we go into the
07:46 - town map and we're going to make a
07:48 - function to set the town map zero okay
07:54 - let's make this so in here
08:00 - here we can't separate any person oh
08:03 - great all right so again we have our new
08:06 - town map visual script it is attached to
08:09 - a game object here we just create the
08:11 - mesh and update it in order for this to
08:13 - work on we need this to consecrate so in
08:16 - order to do that we have a reference on
08:18 - our testing script and then we go into
08:20 - our town map and you tell it to set the
08:22 - town map visual to be this one okay so
08:24 - just like this it should be working we
08:26 - should be able to see the grid with none
08:28 - display a black wad and if it's a ground
08:30 - it won't display a green one and yet
08:33 - there it is everything with black quads
08:34 - now I click and there you go we turn
08:36 - from black to green all right awesome
08:38 - and now if we pause and look at the
08:40 - scene wireframe so we go up here and
08:43 - instead of shading know it's like
08:44 - wireframe and as you can see we are
08:47 - drawing our grid using quads so each
08:49 - cell size is a different quad so that's
08:52 - great but in this case we don't want our
08:54 - town map to display the non sprites at
08:56 - all only the ones that have ground so in
08:59 - here we don't want to waste all of this
09:00 - rendering power we only want to display
09:02 - the green ground so let's go into our
09:05 - code and here on the town map visual
09:08 - here we are testing if we have a non
09:10 - sprite and if it's not none now in here
09:13 - in order to not draw something we have
09:14 - two options now the perfect option would
09:17 - be to really not right at all so
09:19 - essentially we would only generate our
09:21 - mesh with the size of the visible quads
09:23 - but if the grid is small or performance
09:26 - is not absolutely essential then we can
09:27 - keep things simple and here all we need
09:30 - is to set our quad to occupy no space at
09:32 - all so I can go in here and set the quad
09:35 - size if it is none selected vector 3.0
09:39 - so at that point on 4 vertices won't be
09:42 - at 5 s 3.0 so essentially they won't
09:44 - draw anything at all so just like this
09:46 - let's test and there it is now the none
09:48 - no longer have a visual but if I click
09:50 - yep there you go the green one still
09:52 - shows up and if I pause and here we are
09:54 - looking at the wireframe and as you can
09:56 - see there aren't any quads on any of
09:58 - these positions only on the one that we
09:59 - drew so just like that we are no longer
10:01 - wasting a bunch of GPU resources all
10:04 - right awesome now instead of just a
10:06 - green square let's actually display a
10:08 - sprite over here in the textures folder
10:10 - I have this now
10:11 - texture appleís as you can see it
10:13 - contains four different towns so let's
10:15 - make a material for it and now here on
10:21 - the original let's use this material
10:23 - instead okay using this material with
10:25 - this texture and now here in the code we
10:28 - need to actually set up the values for
10:30 - the UV 0 and UV 1 as you can see that's
10:32 - what this function receives at the end
10:34 - there it receives a UV 0 0 and UV 1 1 so
10:37 - it's a UV for the lower left corner and
10:39 - the upper right so let's split this and
10:47 - here in order to display the full
10:48 - texture it's very simple we just set the
10:50 - zero zero on vector 2.0 and the one on
10:52 - what all right so just like this we
10:55 - should be able to see the whole texture
10:56 - let's see okay everything's invisible
10:58 - now click any of there you go there's
11:00 - the ground displaying our font texture
11:02 - alright great
11:03 - now obviously instead of displaying the
11:04 - whole texture we want to display just a
11:06 - single time that way we can draw a
11:08 - different sprites so let's do that
11:11 - again here we have our four different
11:13 - towns so it's going to our noon to add
11:15 - values here we are in our town Maps
11:17 - right so we're going to have none which
11:19 - is nothing then we have the ground and
11:21 - then let's say that so we have three
11:24 - possible town values with one of them
11:25 - being completely invisible so now here
11:28 - what's going to our testing and let's
11:30 - make it so we can select which sprite to
11:31 - add
11:41 - okay so here I've had a bunch of keys
11:43 - just to try out changing our town map
11:45 - sprite and then we simply set that one
11:47 - okay so here we are starting with
11:49 - nothing okay
11:50 - and if I click right now it's set to
11:52 - none so it doesn't happen so now let's
11:54 - press D Y and now I am selecting the
11:56 - ground now I press any of there we go
11:58 - now I'm placing the ground and I press
12:01 - you okay the next one will be a path and
12:03 - now I can place some path sprites
12:04 - alright awesome so here we have our
12:06 - three different types so now that we
12:08 - have all those valleys added to our enum
12:10 - let's actually display them here we
12:12 - already have the town maps right they
12:14 - were grabbing from our object and if it
12:16 - is none then we still do this
12:18 - so we display nothing and now if it
12:20 - isn't done we're going to need to
12:22 - manipulate the UV to select which town
12:24 - we want to display so for that let's go
12:26 - all the way up here and let's define a
12:28 - struct that we're going to set in the
12:30 - editor inside we have in a new field and
12:35 - then let's also have the coordinates for
12:38 - our UV so we have two vector two ends
12:43 - for the UV 0 0 and 1 1 in pixels so
12:46 - we're going to input the pixel
12:48 - coordinates of the unloader left and
12:49 - upper right corners and now here we just
12:51 - need to make the 0 wise field of an
12:53 - array of this and here to make sure that
12:58 - it shows up in the editor we have to add
13:00 - the attribute serializable which is
13:03 - inside system just like that ok now
13:07 - let's go to the editor and okay there it
13:09 - is you can see our UV array in there now
13:12 - here let's put it a size of 2 so we're
13:14 - only going to set two of them now in
13:17 - here we have the town map sprite so for
13:19 - this one let's choose the ground choose
13:21 - the palette and what's input deep pixels
13:23 - okay so here it is so for the ground
13:25 - we're going to use the second type so
13:28 - each of them is 64 by 64 so over here
13:31 - you can see the first one the X would be
13:33 - in here on 0 here on 64 here 128 here
13:36 - 192 and here 256 and for the Y we simply
13:40 - have 0 and 64 so just like that we have
13:42 - the correct coordinates to use this one
13:44 - as our ground texture and this one as
13:47 - the path texture so it's at this part
13:49 - that you can see where the Bolton Unity
13:50 - town map is already very user
13:52 - friendly is very easy to use in that one
13:54 - you just click and drag sprites whereas
13:55 - in here we need to manually set although
13:58 - if you wanted you could make a custom
14:00 - editor script to do exactly unlike the
14:02 - built in town so now that we have all
14:04 - our data set up we can go into our code
14:06 - and now we can use this data all the way
14:09 - down here into our UV however again we
14:12 - input in pixels and in here we need
14:14 - normalized values so let's convert them
14:16 - before we use them in here let's make
14:19 - another struct this won't be our UV
14:21 - coordinates so here we have the
14:25 - coordinates for the UV 0 0 and 1 1 and
14:27 - now in here let's define a dictionary
14:30 - where our key won't be a ton of sprite
14:33 - and the object won't be of type UV
14:36 - coordinates so now we can go here on our
14:40 - wake and now let's film these values so
14:49 - now here we need to convert our pixel
14:51 - coordinates into normalized in order to
14:53 - do that all that we need is an OD
14:55 - texture size ok so we go into our mesh
15:04 - renderer component access the material
15:06 - and access a main texture then we grab
15:08 - the width and height so now in here all
15:11 - we need to do is take our pixels so I'm
15:14 - Kal map sprite UV let's see the UV 0 0
15:17 - pixels DX and we simply define it by the
15:20 - texture width and just like that alright
15:28 - so we have successfully converted from
15:30 - pixels into a normalized value so
15:33 - essentially with the design that we did
15:34 - here we have a nice user-friendly
15:36 - structure that we expose in the editor
15:38 - and then we have our nice internal
15:40 - structure that we use to run our code so
15:43 - now we can simply go down here with our
15:45 - dictionary let's grab the UV coordinates
15:49 - grab the UV coordinates from this sprite
15:52 - and we simply use the UV 0 and UV 1 and
15:57 - that's it just like that
15:58 - alright so we should now be able to see
16:00 - each different visual ok see you are
16:03 - everything at now
16:04 - now I press the Y key okay now I'm
16:06 - placing the ground now I click any of
16:08 - there you go it only plays exactly that
16:10 - ground so click more and I'm placing
16:12 - more ground now I'll impress you okay
16:15 - now I want to play see path and click
16:17 - and there you go now I'm placing d-pad
16:18 - correctly so here we are with no debug
16:21 - visuals and again let's play some ground
16:23 - and there you go some ground now let's
16:24 - place path and there you go
16:26 - very nice just like that and I can press
16:28 - none to essentially erase it so as you
16:31 - can see the town map is using our sprite
16:32 - atlas and correctly selecting a part of
16:35 - the texture depending on what Valley we
16:37 - have in our note right awesome so now
16:39 - let's just quickly see how easy it is to
16:41 - add another visual type in order to do
16:44 - that we just go here into our town map
16:45 - and add another enum value okay we have
16:50 - not value now on our testing let's add
16:52 - another key okay there it is and now
16:57 - finally we just need to go into our
16:59 - editor over here on our town map visual
17:01 - script let's add another one and set it
17:04 - and just like this we have at another
17:06 - time let's see okay can someplace the
17:09 - ground I can place the path and now I
17:11 - can place some dirt so just like that we
17:13 - add another type into our town map great
17:15 - now let's look into how we can save our
17:18 - town map in order to persist between
17:19 - place so for that I'm going to use the
17:22 - safe system that was created in a
17:23 - previous video go check out that video
17:26 - for an in-depth look into how we format
17:28 - our safe object with Jason and save it
17:30 - into a file here is the class as you can
17:33 - see we have our safe folder and save
17:35 - extension on the initialize we just make
17:37 - sure the folder exists then we have a
17:39 - function to save which receives a file
17:41 - name and the save string to save as you
17:43 - know Jason is stored in a string are you
17:46 - choose to overwrite or not so that's
17:47 - what this does make sure that this a
17:49 - file is unique and here we simply save
17:51 - it now in here functions to load from a
17:53 - specific file name or just the most
17:55 - recent one and the way we'll know this
17:57 - we just read all the text and then down
18:00 - here we have functions to save a safe
18:03 - object and the way that it does is it
18:05 - takes an object of type save object
18:06 - which can be anytime and we simply use
18:09 - the jason utility in order to convert
18:10 - that save object into Jason so that
18:13 - returns a string which then is saved on
18:14 - the function up here and then for the
18:16 - unload object function
18:17 - it does exactly the opposite we simply
18:20 - go into our jisun utility and convert
18:21 - from string into our save object as you
18:24 - can see in here we are also using
18:25 - generics in order to be able to save and
18:27 - load any object time so with this nice
18:29 - class we can easily add saving and
18:31 - loading for our Tama so let's go into
18:34 - our town map in here on our town map
18:36 - object okay let's go down here to define
18:39 - a same object and here we have all the
18:44 - fields that we need in order to store
18:46 - and now we make a function to save it
18:48 - which won't return a save object so here
18:54 - we are setting the values on the save
18:55 - object based on the ones that we have on
18:57 - this object alright so this is our nice
19:00 - save function and now let's go into the
19:02 - town map itself and in here let's make a
19:05 - save function and the way we're going to
19:07 - save it is by cycling through the home
19:09 - map so here we are cycling through all
19:16 - the town map objects on our grid now
19:19 - here we can go into the town map object
19:21 - in order to come save this will return a
19:23 - town map object save object so we add
19:26 - this into a list so at the end here we
19:32 - have a phone list with all of our save
19:34 - objects and I mean here let's have a
19:37 - save object for the town map itself in
19:39 - order to hold this list and here we can
19:45 - create this save object and we pass in
19:48 - that ok we just convert our listen to
19:52 - all right the reason why I'm using an
19:53 - array here is because Jason
19:55 - automatically works with a race but you
19:57 - need to do some work to make it work
19:58 - with own list so in this case let's
20:00 - Emily convert into an array to keep
20:01 - things simple so with that we now have
20:03 - our final save object which contains all
20:06 - the save objects for each single great
20:08 - sound position and now in here we can
20:11 - simply save our phone so we go into the
20:13 - save system and call save object and we
20:16 - pass in our save object alright so that
20:19 - you do it now in here one thing we need
20:21 - to make this work is to go down here
20:23 - into the town map save object and we
20:26 - need to make this serializable
20:28 - the reason is because we were using this
20:30 - same object inside another array so if
20:32 - we don't make it serializable then this
20:34 - would be empty and on this one since
20:36 - this is the main safe object we don't
20:37 - need to add it okay so that's pretty
20:39 - much it now let's go into our testing
20:41 - let's add a key in order to save ok so
20:47 - let's press P to save now let's test ok
20:51 - here we are let's paint a bunch of
20:52 - things so there's a bunch of ground
20:55 - what's your past and much inert okay now
20:57 - press P and there you go we have saved
21:00 - and I can look here in the project files
21:02 - we have a nice saves folder and inside
21:04 - we have a safe and over here you can see
21:06 - all the text that makes up our safe so
21:08 - as you can see our that is on there now
21:10 - if we wanted we could only save the
21:12 - values which are not default which would
21:14 - help cut down size but for now let's
21:16 - keep things simple so now that we have
21:18 - saving working let's see on weight
21:20 - loading here on turnip we have our save
21:22 - function and now here let's make our
21:30 - load function here we're going to go
21:35 - into our save system and calm load let's
21:39 - look at the most recent object so again
21:42 - we're using generics so in here we're
21:43 - going to load a type save object okay so
21:47 - this returns a save object now here
21:51 - again the save object contains an array
21:53 - of all of our town map objects save
21:55 - object so we cycle through it so here we
22:01 - have a town map object save object and
22:03 - then we simply go into our grid to get
22:05 - the grid object that is only save object
22:09 - at X and not Y and here we tell it to
22:12 - load so here we receive the same object
22:17 - and simply set our town map sprite to
22:19 - the one that is only save other and the
22:23 - x and y are already set in the
22:25 - constructor so here we just do that and
22:27 - we pass in that all right great so this
22:29 - should be working and now in here you
22:31 - could make this code a lot more robust
22:33 - so for example on the town map save
22:35 - object and here you could also include
22:37 - the width and height in order to support
22:39 - loading of different size
22:41 - of town ops only takes in order to soar
22:43 - and more information is just that fields
22:44 - unsaved objects so you'd add more fields
22:46 - in here for any film that you want to
22:48 - say for the Talmud and then down here
22:51 - more fields in here for any extra
22:54 - information you want to store on each
22:55 - town map object so as you can see this
22:57 - system is very easy to use in order to
22:59 - save and hello all right so that's it
23:01 - now one final thing is we need to make
23:03 - sure that our visual changes so for that
23:06 - we can use a nice event so let's make a
23:10 - event called unloaded and here when we
23:13 - load let's fire that event alright we if
23:17 - we have subscribers then we call the
23:18 - event and we pass in this okay so now
23:21 - for that we can go into the visual and
23:24 - here when we set the grid let's set the
23:26 - grid and also receive a reference to the
23:28 - camera so that we can subscribe to the
23:34 - unloaded and on the onload event reduce
23:38 - to the same as yellow we just update the
23:41 - mesh and finally in our testing code
23:43 - let's add a button to load the previous
23:45 - timer just like that okay alright so
23:51 - let's see okay here we are and
23:53 - everything is empty and after a personal
23:55 - note button there you go it correctly
23:58 - loaded exactly the same as we saved now
24:00 - I can add more stuff loaded again and
24:03 - there you go it raised that one and it
24:04 - completely loaded the entire state of
24:06 - art Elma so now I can modify it save it
24:10 - modify it again okay it raise it all
24:12 - press mode and there you go it load the
24:15 - previous state so I can modify anything
24:17 - I want paint anything delete anything do
24:19 - everything then I can save then I can
24:22 - erase the whole thing and unload any up
24:24 - there it is awesome so we have
24:26 - successfully built our own town map with
24:28 - the ability to have our underlying grid
24:30 - with whatever object type we want and
24:32 - also enabled saving and loading as you
24:34 - saw on the data for saving the town map
24:37 - is saved here in our project files
24:39 - so you can see how this would be very
24:40 - easy to make a level editor that your
24:42 - players could share with others now
24:44 - again as I said the built in town map is
24:46 - already very powerful so if your use
24:49 - case is very simple it might be easier
24:50 - to use down however by using this one
24:53 - you can use this for vision
24:54 - and then use another grid for keeping
24:56 - track of all your logic meaning that
24:58 - both your design logic and visual will
25:00 - use the same base class which helps
25:02 - reduce complexity and makes it easier to
25:04 - understand while developing your game
25:05 - regardless of what approach you take a
25:07 - place now you know how a town map works
25:09 - there's no magic in programming so even
25:11 - if you end up using the easy-to-use
25:12 - class it helps you understand how it
25:14 - works underneath it all as always
25:16 - acknowledge the project founds in
25:18 - utilities form in Tacoma comm if you
25:20 - liked the video subscribe channel for
25:21 - more unity to torrents post any
25:24 - questions you have in the comments and
25:25 - I'll see you next time
25:27 - [Music]