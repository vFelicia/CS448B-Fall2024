00:00 - hello and welcome i'm your code monkey
00:02 - let's learn about three different
00:03 - methods that we can use to find targets
00:05 - all methods work pretty much the same
00:07 - for both 2d and 3d
00:09 - these are applicable to just about any
00:11 - scenario where you need to find targets
00:13 - so you can use this for example in an
00:14 - rts where units need to find targets
00:17 - or in a tower defense game for the tower
00:19 - to find something
00:20 - or even on the player itself to enable
00:22 - them to do some calm abilities with the
00:24 - enemies that are nearby
00:25 - we're going to first explore each method
00:27 - individually to see how they work
00:29 - and then in the end we will explore the
00:31 - pros and cons for each method so make
00:33 - sure you stay tuned to the end the video
00:35 - all three methods are valid depending on
00:37 - the scenario so it's up to you to choose
00:39 - the right one for your particular use
00:41 - case
00:42 - over here i have a very simple demo
00:44 - scene so
00:45 - just a normal sort of tower defense game
00:48 - this scene was initially built for my
00:50 - tower defense ai video
00:52 - so there's this tower and i can press a
00:54 - button to spawn some minions
00:55 - they spawn on the right and they move
00:57 - towards the left now the goal is for the
01:00 - tower to find the enemies as they get
01:01 - within range and start attacking them
01:03 - okay so let's begin with the first
01:05 - simplest method which is
01:07 - using a collector with a trigger let's
01:09 - make a new c-sharp script
01:12 - name this our targeting system for the
01:15 - collider
01:16 - and let's select the tower and attach
01:18 - our script
01:19 - okay now like i said this first method
01:21 - is using a collector
01:23 - so let's add a circle collider again if
01:26 - you're working in 3d
01:28 - then use a spherical layer instead here
01:30 - make sure you set is trigger to true
01:33 - since we do not want this collector to
01:34 - be a solid object
01:36 - and simply modify the radius to get a
01:38 - good attack range
01:39 - so maybe something like this so as the
01:41 - enemy gets within that area the tower is
01:43 - going to start attacking
01:44 - okay now let's open up this script and
01:46 - here this is going to be very simple
01:48 - let's just get rid of these
01:49 - and instead make a private void on
01:51 - trigger entry 2d
01:53 - again if you're working in 3d then you
01:55 - add the ontrigger enter instead
01:58 - now this function is triggered when
01:59 - another collider enters inside the shape
02:01 - of this collider
02:03 - so it gets triggered exactly once on the
02:05 - very first frame that the collision
02:07 - starts
02:08 - so let's first do a quick test just to
02:09 - make sure it's working so a debug.log
02:11 - just say something okay let's run this
02:15 - in c
02:16 - okay so here i am and let's spawn an
02:19 - enemy
02:19 - here he comes and let's look in the
02:21 - console as the enemy gets within range
02:22 - yep there you go we have our target
02:24 - okay so with this we are correctly
02:26 - identifying the collision now if you
02:28 - have issues with the collision check out
02:30 - the video link in the description where
02:31 - i go over the various causes for issues
02:34 - with collisions
02:35 - essentially you need at least two
02:36 - colliders and one rigid body for the
02:38 - collision to actually trigger
02:40 - so in this case my actual tower has a
02:42 - collider
02:43 - the circumference that we just added and
02:45 - on the enemy
02:46 - it has a box leather and then also a
02:48 - rigid body so with this we have our
02:51 - collision being detected
02:52 - now we also need to identify that this
02:54 - object is actually an enemy
02:56 - we don't want to attack friendly units
02:58 - that go inside this range or really any
03:00 - other objects
03:00 - so the simplest way to identify the
03:02 - object that went in is to simply ask if
03:04 - it has a certain component
03:06 - so the enemies are being made using this
03:08 - prefab
03:09 - and this prefab also has a very simple
03:11 - enemy script so we can simply use this
03:13 - to identify that what entered inside of
03:15 - our collider was indeed an enemy
03:18 - so when we have the ontrigger enter
03:19 - let's see if we go into the collision
03:22 - and we do try get component try to get
03:26 - the component of type
03:27 - enemy
03:30 - and if this is true then we know that we
03:32 - collide with an enemy
03:34 - so now here all we have to do is just
03:35 - attack and now in the demo that i have
03:38 - prepared i have my tower object which
03:40 - has a tower script
03:41 - and over here on this very simple tower
03:42 - script i've got a function to set the
03:44 - target
03:45 - so let's just call this one so over here
03:47 - on the targeting system let's first grab
03:49 - the
03:49 - tower so private tower for the tower and
03:52 - grab it on the awake
03:54 - so just get component of type tower
03:58 - so just grab the tower and after here
04:00 - after we verify that it's an enemy
04:02 - we call set target and pass in the enemy
04:05 - all right that's it let's test
04:07 - so here we are and let's spawn an enemy
04:10 - and he's coming in as soon as he gets
04:12 - around here if there you go now the
04:14 - tower is indeed attacking the enemy
04:16 - alright awesome so here we have the very
04:19 - first method for finding targets
04:21 - we use a con leather which can be of any
04:22 - shape here we use a circle collider but
04:25 - it works with a box leather or really
04:26 - any collateral shape
04:28 - so using this method we have a collider
04:30 - set to trigger we'll listen when other
04:32 - colliders enter inside the area of
04:34 - disconverter
04:35 - and if so then we have our actual target
04:37 - we set the target and we attack the
04:39 - object
04:39 - alright so this is the very first method
04:42 - now for the second method
04:44 - this one is going to be cycling through
04:45 - a list and testing for the distance
04:48 - so let's first make a separate script so
04:50 - in uc sharp script
04:52 - calling the targeting system for the
04:54 - list
04:55 - distance let's select our tower attach
04:58 - our new script
04:59 - and let's remove the previous one okay
05:02 - now for this one it is not based on a
05:03 - collider so we can also get rid of our
05:05 - targeting collider
05:06 - now here the one piece of data that
05:08 - we're going to need is the range
05:10 - so let's make a serialized field for a
05:13 - private float
05:14 - for the actual range this is our attack
05:17 - range
05:18 - and here in the editor now we can set
05:19 - the value so let's set it to 60 which is
05:21 - the same we were using
05:23 - and now here let's make a simple private
05:25 - void update
05:27 - and on update we want to essentially
05:29 - cycle through all the enemies in our
05:30 - world
05:31 - now for that i have the enemy script
05:34 - here and this enemy script
05:35 - already has a static list of enemies so
05:38 - there's this list
05:39 - and this function to get that list and
05:42 - on this list
05:43 - down here on the enemy awake the enemy
05:45 - gets added onto the list
05:46 - and when the enemy dies then the enemy
05:48 - gets removed from the list
05:49 - so this list contains all of the unlive
05:52 - enemies in the world
05:53 - so here we just cycle through the
05:54 - homeless so do a for each
05:56 - enemy enemy in and go into the enemy and
05:59 - get the enemy list
06:02 - so we cycle through the entire enemy
06:04 - list then we just do a vector 3 dot
06:07 - distance
06:08 - calculate the distance between this
06:10 - transform position
06:11 - and the enemy transform position and we
06:14 - simply do an if
06:15 - and if the distance is under the range
06:18 - then we have the enemy within range and
06:21 - if so then we simply attack the enemy so
06:23 - the same thing we get a private tower to
06:26 - get the tower reference
06:30 - so we grab the tower and here just tower
06:32 - set the target
06:33 - and pass in this enemy now in this case
06:36 - our enemy list is already pre-filtered
06:38 - to contain only the enemies that are
06:40 - alive
06:40 - so here we don't need to verify that it
06:42 - is an enemy and we don't need to verify
06:44 - that it's alive
06:45 - so that's it it's this simple let's test
06:48 - here we are and if i spawn an enemy here
06:51 - he comes and as he gets
06:52 - around here within range and yep there
06:55 - we go we have our target
06:57 - so our targeting system is indeed
06:58 - working the enemy spawns
07:00 - it does a vector3 dot distance between
07:02 - this position and the enemy position
07:03 - if it is within a certain radius then we
07:05 - have our target all right
07:07 - awesome so this is our second method
07:10 - now for the third method and by the way
07:12 - if you find the video helpful consider
07:14 - subscribing and hitting the like button
07:16 - it really helps out the channel now the
07:18 - third method is using a physics call
07:21 - so let's begin like we did by making a
07:23 - new c-sharp script
07:24 - for the targeting system and let's name
07:27 - this the
07:27 - physics overlap here's the tower and
07:30 - let's attach this one and remove the
07:32 - previous one
07:33 - okay now here let's make a very simple
07:36 - private void update and on update
07:40 - the method we're going to use is the
07:42 - physics 2d
07:44 - dot overlapped circle
07:47 - again when working in 3d the logic is
07:49 - pretty much the same except you use the
07:51 - physics class instead of the physics 2d
07:53 - so what this function does is it asks
07:55 - the physics system for all the
07:57 - collaterals that are
07:58 - inside of this area so it requires a
08:00 - point and a radius
08:02 - for the point we just use this transform
08:04 - position and for the radius let's do it
08:06 - like the other script
08:08 - so let's expose a certain range and we
08:11 - use the range in here
08:13 - and here let's set the range to the
08:14 - exact same thing so 60 okay
08:16 - now here this function returns a
08:18 - collector 2d
08:20 - so for now let's just do a debug.log to
08:22 - see what this outputs
08:23 - so a debug.log on the result of our
08:26 - overlap circle
08:27 - and let's test and if right away we do
08:29 - see it working
08:30 - so it's an overlap circle in there and
08:32 - right now there is no collateral in
08:33 - there so it's returning no
08:35 - we can verify that it is indeed working
08:37 - if we add a collector onto the tower so
08:40 - let's add just a basic box letter 2d
08:42 - and if there you go it does identify
08:44 - that collider however there's one thing
08:46 - so it's correctly identifying the tower
08:48 - collider which is indeed within our
08:50 - radius
08:51 - however the function that we use here
08:52 - returns just a single result
08:55 - so it will only return the very first
08:57 - collision and no more
08:58 - so depending on the order in which the
09:00 - scripts are run
09:02 - that means that the enemy might be
09:03 - ignored so here comes an enemy
09:05 - and either the enemy or the tower won't
09:07 - be ignored so right now it's only
09:08 - finding the enemy and not the tower
09:10 - so for that two enemies it will only
09:11 - find one of them so instead of using
09:13 - overlap circle
09:14 - we can use the second one which is
09:16 - overlap circle all
09:18 - so this is the same overlapping logic
09:20 - except returns all of the colliders
09:22 - within this circle
09:28 - so we've got an array of our colliders
09:29 - and all we have to do is just cycle
09:30 - through it
09:34 - then in here we just need to identify
09:36 - which ones are the enemies so like we
09:38 - did previously we can simply do a get
09:40 - component
09:41 - so collider 2d try get component of type
09:45 - enemy
09:47 - and if it is then we do have an enemy
09:50 - this is an enemy so once again let's
09:53 - grab our tower reference
09:58 - so we grab the tower and here tower set
10:01 - target
10:01 - and pass in this enemy again you could
10:05 - then
10:05 - do all kinds of logic with this list
10:07 - that you have here for example finding
10:09 - the closest within the range
10:11 - or just like this which will essentially
10:12 - pick the last enemy within range
10:15 - so let's test this method here we are
10:17 - and let's spawn an
10:18 - enemy here he comes and as soon as he
10:20 - gets about here
10:21 - and yep there you go it does target the
10:23 - enemy and the enemy does get damaged and
10:25 - gets destroyed
10:26 - so here we have the third method only
10:28 - working this one is doing an overlap
10:30 - circle around this area
10:31 - and as soon as the enemy collider goes
10:32 - inside it then we have our collision and
10:34 - we have our enemy
10:36 - all right awesome so here we saw three
10:38 - separate methods for finding targets
10:40 - now let's think about their pros and
10:42 - cons now the first method on using a
10:44 - trigger collider
10:46 - the main pro is its simplicity so it's
10:48 - very easy just add a collider and a
10:50 - single function and it all works
10:51 - very easy to implement another pro is
10:54 - how it's very visual and designer
10:55 - friendly
10:56 - so you don't need to make any extra
10:58 - editor scripts you can see the range by
11:00 - default whereas for the other methods
11:02 - that use a float for the range it
11:03 - doesn't automatically have any visual
11:05 - yet another pro is how it's event based
11:08 - so rather than querying the physics
11:09 - system on every update it simply runs a
11:12 - code when a collision happens
11:13 - so that's much more efficient the main
11:16 - con is how it requires you to add a
11:17 - collider onto your object
11:19 - so if you use this method a lot you end
11:21 - up with tons of colliders which may
11:23 - cause a performance impact
11:24 - also if you already have a trigger
11:26 - collider then you can't use it just like
11:28 - this
11:29 - since you can't have multiple trigger
11:30 - colliders in the same object and listen
11:32 - to events on a specific one
11:34 - so you would need to make a separate
11:36 - child game object with a detection
11:38 - collider and handle the logic there
11:40 - another potential con is how it requires
11:42 - working with the physics system
11:44 - so if your target objects do not have
11:46 - collaterals then the collision event
11:47 - will not trigger
11:48 - those are the pros and cons for the
11:50 - trigger collider method
11:52 - now on the second method the unless
11:53 - distance the main pro is that it's very
11:56 - easy to implement
11:57 - you don't need to touch the editor at
11:58 - all everything works inside of your
12:00 - codebase
12:01 - so for me as a programmer this is the
12:03 - reason why i use this one a lot
12:05 - another pro is that it's very versatile
12:08 - you're doing a cycle going through every
12:09 - single enemy so that means you can
12:11 - easily validate more than just a
12:13 - position
12:14 - for example you can easily make it so
12:15 - one type of enemy has an attack range of
12:17 - 10
12:18 - but another enemy of a different type
12:20 - has an attack range of 20.
12:21 - another pro is that it's not dependent
12:23 - on the physics system
12:24 - so you can use this method to identify
12:26 - objects that do not have
12:27 - any colliders at all then the main con
12:30 - is potential performance issues
12:32 - as you can see this method cycles
12:34 - through all of the objects
12:36 - so if you have a handful of them then
12:37 - it's unlikely to cause any issues
12:40 - but as the unlist grows bigger this
12:41 - starts to take more and more time to
12:43 - complete
12:44 - so if you have a hundred enemies then
12:46 - this method is definitely not good
12:47 - another con is like i said the
12:49 - visualization isn't automatic
12:51 - so this exposes a float for the range
12:53 - and by default you don't see that in the
12:55 - editor
12:55 - you need to guess how far it goes or
12:57 - make a custom editor to showcase that
12:59 - another con is also related to
13:01 - performance which is that you need to
13:03 - run the code constantly
13:05 - now this con has a simple fix which is
13:07 - to just test less often than on every
13:09 - frame
13:10 - so if you combine it with a simple timer
13:12 - and search through the list at most
13:13 - something like 10 times per second
13:15 - that helps a lot but again it's still
13:17 - more complex than the previous method
13:18 - which is event based and in last method
13:20 - which is the physics overlap
13:22 - the pros and cons are similar to the
13:24 - list distance method
13:26 - the main pro is that it's easy to
13:27 - implement just like the list method it
13:29 - all works through code so there is no
13:30 - need to touch the editor
13:32 - another pro is that it supports massive
13:34 - amounts of enemies
13:35 - whereas in the unlist method it becomes
13:37 - worse and worse the bigger the list is
13:39 - here it asks the physics system for the
13:41 - collaterals within an area so it doesn't
13:43 - need to query
13:44 - every single object that exists and the
13:46 - main con is just like the enlist method
13:48 - which is potential performance issues
13:50 - since this is not event based you need
13:52 - to call the function on update
13:54 - if you do a physics query on every
13:56 - single update then it can cause some
13:58 - slowdowns
13:59 - but just like the enlist method you can
14:00 - minimize this con by adding a simple
14:02 - timer and searching much less often than
14:04 - on every frame
14:05 - another con is again the visualization
14:07 - is not automatic
14:08 - so if you want to see it you need to
14:10 - make a custom editor
14:11 - and another potential con is how it is
14:14 - dependent on the physics system
14:16 - so the objects that you're trying to
14:17 - find need to have a collateral in order
14:19 - for the physics query to work
14:21 - if they do not have collaterals then
14:22 - they are not detected
14:24 - okay so those are the three methods as
14:26 - you can see they all have their pros and
14:28 - cons
14:29 - now for me i usually go with the second
14:31 - or third method
14:32 - the first method requires working in the
14:34 - editor and modifying the game object by
14:36 - adding an extra collider
14:38 - so after some time you might forget
14:40 - which script that collider is related to
14:41 - so it can become quite messy
14:43 - whereas the other two methods are done
14:45 - internally with code so
14:47 - all the logic is in the same place for
14:49 - me as mainly a programmer i like to keep
14:51 - my games through code as much as
14:53 - possible
14:53 - so that is why i prefer those too
14:55 - usually my approach is to use the enlist
14:57 - distance method since it's so easy to
14:59 - add and then if i come across any
15:01 - performance issues then i might change
15:03 - it to the third method
15:04 - so there you have it three nice methods
15:06 - for finding targets each with their pros
15:07 - and cons
15:08 - if you have other methods you don't like
15:09 - to use go ahead and post them in the
15:11 - comments i'm interested to see how other
15:13 - people handle targeting
15:14 - as always you can download the project
15:16 - files and utilities from
15:17 - mintycodemonkey.com
15:18 - this video is made possible thanks to
15:20 - these awesome supporters
15:21 - go to patreon.com unitycodemonkey to get
15:24 - some perks and help keep the videos free
15:26 - for everyone
15:27 - if you found this video helpful consider
15:28 - liking and subscribing post any
15:30 - questions have in common
15:31 - and i'll see you next time