00:00 - in this video we're going to make a
00:01 - persistent particle system this is a
00:03 - great system for when you want to spawn
00:05 - some particles and have them stay on the
00:07 - map like some blood or footprints let's
00:10 - begin
00:13 - [Music]
00:17 - hello and welcome I'm your code monkey
00:20 - and this channel is all about helping
00:21 - you learn how to make your own games
00:23 - with in-depth tutorials made by a
00:24 - professional indie game developer so if
00:26 - you find the video helpful consider
00:28 - subscribing okay so here's what we want
00:30 - to create over here I have my character
00:32 - I can move them around and when I do you
00:34 - can already see two uses of the
00:36 - persistent particle system when I move
00:38 - you can see dirt being kicked around and
00:40 - vanishing and you can also see some
00:42 - footprints where I went through so as
00:44 - you can see the dirt vanishes but the
00:46 - footprints stay always on the map now
00:48 - another uses with the weapon so whenever
00:51 - I shoot there you go there are some very
00:53 - nice shell particles exiting my weapon
00:55 - and once they stop they stay on the
00:57 - particle system and finally over here I
01:00 - have an enemy and when I shoot him there
01:03 - you go you can see some blood particles
01:04 - and if I shoot him some more he turns
01:06 - into a flying body and leaves behind a
01:08 - nice trail of particles and as you can
01:10 - see once the particles stop moving they
01:12 - remain permanently on the map so these
01:14 - are various uses for the persistent
01:16 - particle system we have particles being
01:18 - spawned they move then they stop in
01:20 - their final destination and they stay
01:22 - there forever alright so this is our
01:24 - goal let's get to it all right so here's
01:27 - our starting scene over here I have the
01:29 - player and I can move them around and
01:31 - shoot and as you can see there are no
01:33 - particles anywhere and over here is an
01:36 - enemy and again I can shoot him but no
01:39 - particles come out and after a while I
01:41 - kill him and there goes the flying body
01:43 - and again no particles ok so this is our
01:45 - starting point now the way we're going
01:47 - to build our system is by making a
01:49 - custom dynamic mesh so if you're not
01:51 - familiar with how to make a custom mesh
01:53 - through code then check out the video
01:54 - linked in the description that video
01:56 - won't teach you everything you need to
01:58 - know about how a mesh is made and what
02:00 - are the elements required to make it so
02:02 - here for our system let's start off with
02:04 - basics and draw a simple quad so first
02:07 - let's make our script a new script let's
02:09 - call this the mesh particle system and
02:12 - here we make a new game object and drag
02:16 - the script on to okay now to make our
02:18 - mesh visible we need to add a mesh
02:20 - filter that's the component that holds a
02:23 - mesh and a mesh renderer which is a
02:26 - component that defines how the mesh is
02:27 - displayed
02:28 - okay so far so good what
02:30 - open up the script okay now in here and
02:32 - let's set up our mesh okay so here's our
02:45 - starting mesh code again if you're not
02:47 - familiar with this then go first check
02:48 - out the mesh video a link in the
02:50 - description
02:50 - once you see that video you won't be
02:52 - able to understand what all this is so
02:53 - essentially we have the vertices the UVs
02:55 - the triangles and all of it makes up our
02:58 - mesh so we create the mesh and we apply
03:00 - it to our mesh filter and if we run this
03:02 - code here with the code running we can
03:05 - see that indeed we have a mesh inside of
03:06 - our mesh filter
03:07 - there you go zero vertices zero
03:08 - triangles but it's in here okay great so
03:11 - now in here let's make a simple quad
03:13 - okay so I've heard a nice function in
03:15 - order to add a quant again in following
03:18 - with what we've learned in the previous
03:19 - video about how a mesh works for quad we
03:22 - need four vertices for UVs and six
03:24 - triangles so here on this function we
03:26 - are modifying these arrays so here we're
03:29 - just setting up the vertices and the
03:31 - triangles so here we define a certain
03:33 - rotation that we want to add into our
03:34 - sprite in this case let's start off
03:36 - simple so at 0 and here we just apply
03:39 - the rotation onto our quad size in order
03:41 - to come up with the all of the corners
03:43 - so by applying the various rotations we
03:45 - can take our quad size and build our
03:46 - quad so in here we are placing the
03:49 - vertex on the lower left corner then we
03:51 - place on the upper left corner then on
03:54 - the upper right corner and finally on
03:55 - the in lower right corner and then we
03:58 - have the triangles which simply connect
03:59 - them so we connect the zero so we're
04:01 - left into the one so upper left and into
04:03 - the two which is on the upper right
04:05 - again if one of this seems some series
04:07 - make sure you check out the previous
04:09 - mesh video and all of this will be clear
04:11 - so let's see this in there it is we have
04:13 - our nice pink square it's pink because
04:15 - we did not add a material nor the UV but
04:17 - if we pass over here with our wireframe
04:20 - enabled you can see our quad is correct
04:22 - so we have our four vertices with our
04:24 - two polygons triangles okay so far so
04:27 - good now in here let's make sure that we
04:29 - take care of our base index
04:31 - automatically so that we can spawn this
04:33 - in order to add a new quad every single
04:35 - time
04:54 - okay so here I've had been in for the
04:56 - current quad index as well as a constant
04:58 - for the max quad amount each mesh is
05:01 - limited to a total of 65,000 vertices so
05:04 - since we are making quads essentially we
05:06 - have a total of 65 thousand divided by
05:09 - four so we have around a total of
05:11 - fifteen thousand maximum quads we can
05:13 - put in a single mesh so with that
05:15 - maximum then we simply update in here if
05:17 - we go past that two meshes phone so
05:19 - let's not do anything we're going to
05:21 - handle this later and then here we
05:23 - simply calculate the vertex index based
05:25 - on the quad index x force since we have
05:27 - four vertices per quad and now the
05:29 - triangle we multiply by six and then at
05:32 - the end of all of this we simply
05:33 - increment the quad index this function
05:35 - also takes in a position which is simply
05:37 - applied into our vertices and finally
05:39 - here when we initialize our vertices we
05:41 - multiply them by the max quad amount so
05:45 - just like that they all have the correct
05:46 - size okay okay so in here we are
05:48 - spawning two quads so we should be able
05:50 - to see two quads let's see and here we
05:53 - are and indeed you can see two different
05:54 - ones and here we can see the two quads
05:57 - being rendered and they are all part of
05:59 - the same mesh okay great
06:01 - so now that we can spawn multiple quads
06:02 - let's deal with the UV okay so here I've
06:10 - added the UV as you can see they use the
06:12 - same indexes as the vertices and in here
06:14 - I just set it to display the entire
06:16 - texture so on the lower left corner we
06:18 - are on 0 0 and on the upper right we are
06:20 - on 1:1 now here back in the editor all
06:22 - we need to do is create a new material
06:25 - and in here we just drag the sprite just
06:28 - like that and we drag the material into
06:31 - our mesh render
06:32 - ok so let's see and if there is we have
06:34 - our UV being applied so we can see our
06:36 - quads using our texture awesome so now
06:39 - let's add a quad every time we fire our
06:41 - weapon so for that I have a script which
06:44 - fires an event so we can use that
06:49 - so I had the serialized filmed for the
06:51 - character aim handler script so here
06:54 - just drag the script reference on to it
06:56 - now in here we can simply go into it and
06:59 - subscribe to the on shoot event so here
07:04 - how this character aim handler is
07:05 - implemented is not relevant to our mesh
07:07 - particle system all we need is to have
07:09 - enough information in order to be able
07:10 - to spawn our particles so just for
07:13 - testing I'm going to add a text pop-up
07:16 - so I'm using this function from the
07:19 - utilities which as always you can grab
07:20 - for free from unity code monkey calm so
07:23 - with this we should be able to see when
07:24 - this event is being fired so let's see
07:26 - and here we are when I shoot yep there
07:28 - you go we have the nice event being
07:29 - fired okay great
07:30 - again always remember to keep your code
07:32 - nice and clean and all your systems
07:34 - decoupled so the mesh particle system
07:36 - doesn't care how this character works
07:38 - all it cares is that it has an event so
07:40 - that it can do its thing so this event
07:43 - passes in a gun endpoint position so
07:46 - let's point a pawn on it so we simply
07:47 - call at wand and we pass in the gun
07:50 - endpoint position let's get rid of these
07:53 - two and just like that and here since
07:55 - we're adding a quad after being in sin
07:57 - she ate every time we modify our local
07:59 - arrays we need to update them on the
08:01 - mesh so let's copy this and add it down
08:03 - here okay so we should be able to see a
08:08 - quad spawned whenever we fire our weapon
08:10 - so here I am looking around and I shoot
08:12 - and there we go there's a nice quad
08:14 - being spawned exactly where it's
08:15 - supposed to so click and click and there
08:18 - you go so I can now spawn as many quads
08:20 - as I want whenever I shoot all right
08:21 - great so now that we have this working
08:24 - let's make our quad move so back in our
08:26 - particle system script let's go down
08:28 - here to make a function so we can update
08:31 - each quad so let's make it a public void
08:34 - and we're going to call this update pond
08:36 - and now in here we will receive an int
08:38 - for the quad index then receive a
08:41 - vector3 for the new position and then we
08:43 - can also receive on the other so it
08:45 - holds for the rotation and if we want a
08:47 - vector3 for the quad size so in order to
08:52 - update it we do exactly the same code we
08:54 - were doing in here so let's copy from
08:56 - here and let's put it in here and now up
08:59 - here on this one we call
09:03 - passing the quad index then the position
09:07 - then a rotation and the quad sighs and
09:11 - then we update our mesh arrays just like
09:16 - that okay so we now have a function to
09:18 - add a new quand so essentially it
09:20 - modifies the current quad index and then
09:22 - increment it and then we have a function
09:24 - to modify whatever quad index we give it
09:27 - so now here just for testing let's make
09:29 - it constantly move so here when we call
09:31 - add quad and let's make sure that it
09:33 - returns the current spawned quad index
09:35 - so this one returns an int and we're
09:38 - going to store an end for the spawn quad
09:40 - index and then we return this so that
09:45 - means that here when we spawn a new quad
09:47 - when the character shoots we can have an
09:49 - int for our spawn quad index then we can
09:56 - use this quad index in order to call our
09:58 - update quad to constantly move our quad
10:00 - so here just we're testing I'm going to
10:02 - use the very useful function updater
10:04 - again from the utilities so this one
10:07 - takes in an action that gets called on
10:09 - every update so on every update let's
10:14 - call update quad we pass in our spawned
10:17 - quad index and then let's simply
10:19 - increase the position all right so with
10:28 - this very simple code we should be able
10:29 - to add a quad whenever we should and
10:31 - then that same quad won't constantly be
10:33 - moving up into the right on every single
10:35 - frame so let's try okay here we are now
10:38 - if I shoot and there you go there's the
10:40 - quality it gets spawned and it's moving
10:41 - up and away and shoot some more and
10:43 - every single one of them is
10:44 - independently being moved away all right
10:46 - awesome now let's play around with the
10:48 - rotation and scaling to make sure that
10:50 - it all works
10:57 - all right so here I just had a two
11:00 - fields one for the quantize and for the
11:01 - rotation and again we're doing the same
11:03 - thing increasing on every frame so let's
11:06 - see if this is working okay here we are
11:08 - and let's shoot any of their yo the quad
11:10 - was in sin she ate it and it is
11:12 - constantly increasing in size and
11:13 - rotating on every single frame awesome
11:16 - and again we can spawn a bunch more and
11:18 - yep each one of them is independently
11:21 - being rotated and increasing in size
11:23 - okay now these shells are actually not
11:25 - supposed to be squares but rather
11:27 - there's some rectangles so let's do that
11:29 - now so here we should also modify the
11:31 - add quad in order to receive a starting
11:33 - point for the rotation and a vector
11:36 - three for the quad size and we simply
11:40 - pass it in here okay so now in order to
11:48 - make it a square let's simply put point
11:51 - five on the X and one on the Y and let's
11:53 - see what this looks like and here we are
12:00 - and click and there you go as you can
12:02 - see it is not correct instead of a
12:04 - rectangle we got a square that is
12:05 - slightly rotated so here when we set the
12:08 - vertex positions we need to do some
12:10 - different math in case the squad size is
12:12 - skewed or not okay so if it is skewed we
12:23 - have to apply the rotation only to our
12:25 - actual rotation and then we multiply it
12:27 - by our quad size impacting for each
12:30 - vertex so minus minus minus plus and so
12:32 - on so I need to do is come true on the
12:34 - skew alright let's test here we are and
12:39 - shoot any of there you go we have our
12:41 - sprite displayed as a rectangle now
12:43 - let's apply rotation and scaling and
12:45 - here we are and shoot any of there you
12:47 - go it is rotating in scale okay awesome
12:50 - now instead of always displaying every
12:51 - single quad as an entire texture let's
12:54 - make sure we add some proper UV for each
12:56 - specific texture so over here in our
12:59 - script let's go up here to the finest
13:01 - truck that we're going to set in the
13:03 - editor
13:06 - so we have a struct for our particle UV
13:09 - pixels and we have two vector two ends
13:12 - one for the zero zero so 11 left
13:14 - coordinate and one for the 1 1 so the
13:16 - upper right corner so essentially we're
13:17 - going to input pixel coordinates for the
13:19 - 11 left and upper right and then to UM
13:21 - be automatically calculated into
13:22 - normalized values so in here let's make
13:25 - a serialized field of an array of
13:28 - particle UV pixels and to make it show
13:33 - up in the editor all we need to do is
13:34 - mark this struct as system dot
13:37 - serializable okay now in the editor in
13:41 - here you can see that we have a field
13:42 - for the particle UV pixels array and for
13:45 - surgeon let's just put 1 so here we have
13:48 - one element Aereo for the UV 0 0 & 1 1 &
13:50 - 4 now let's try displaying the entire
13:52 - texture so here is the bullet shell
13:54 - casing as you can see it's a simple 10
13:56 - by 20 texture so here for 0 0 0 0 0 and
14:00 - for the 1 let's put down 10 by 20 okay
14:03 - that's our field setup so now here our
14:05 - script has all of the UV data inside
14:07 - this array but the mesh works with
14:10 - normalized valves so we need to convert
14:11 - them from pixels into those normalized
14:13 - values so here making a nice internal
14:18 - struct this one contains vector 2 wins
14:21 - for the UV 0 and UV 1 and these won't be
14:23 - the normalized values so now I have a
14:31 - array of UV coordinates so let's fill
14:33 - this out
14:56 - okay so here we have our conversion we
14:59 - go into the mesh renderer in order to
15:01 - grab the material then from that
15:03 - material we grab the texture and with
15:05 - the texture we grab the width and height
15:06 - and then with that we create the new UV
15:09 - chords so we take the values in pixels
15:12 - and divide by the width and height in
15:14 - order to get the normalized bounce so at
15:16 - the end we can set the UV chords array
15:18 - to be this list without - alright
15:21 - alright
15:22 - so essentially with this design here
15:24 - where we have two different struts we
15:27 - have one that is a very nice
15:28 - user-friendly structure that we expose
15:30 - in the editor so we can input pixels
15:32 - which are easy and then we have our
15:35 - internal structure which converts those
15:36 - pixels into normalized values that we
15:38 - can then use to run our code right so
15:41 - with all this now we just need to apply
15:42 - this to our quads so when we add a
15:44 - column let's also receive an int for the
15:47 - UV index okay now we go down here and
15:53 - now instead of showing the entire
15:55 - texture for everyone let's apply it down
15:57 - so you go into the UV court array and
16:00 - access the UV index so this returns a UV
16:03 - chords
16:11 - all right so here we're applying
16:13 - everything so on the lower left corner
16:15 - we have the UV zero zero for the upper
16:17 - right we have the 1 1 and for these we
16:19 - calculate the new movies ok so with this
16:21 - we should now be able to define which
16:23 - part of the texture we show in our quad
16:25 - ok so we should be able to see the phone
16:27 - quad just like previous on let's click
16:29 - and if there is everything some works
16:31 - great all right now let's see the proper
16:33 - use case for all of this
16:34 - here instead of having this material
16:36 - let's make a material of the pod which
16:38 - as you can see is a spreadsheet with
16:40 - various stages so here on let's drag the
16:44 - bullet material and here you can see the
16:46 - texture is 128 by 16 so if we put that
16:50 - value 128 by 16 and we click and again
16:53 - we still see the exact same entire
16:55 - texture but that's not what we want so
16:57 - let's stop and instead let's make it
16:59 - just 16 by 16 and now we shoot and there
17:02 - you go now we can only see the very
17:03 - first particle so here just film it up
17:06 - with all of them alright so I've been
17:17 - put all of the pace on coordinates for
17:19 - all of the various elements and now here
17:21 - for testing let's choose a random UV
17:23 - index ok so you hear around let's shoot
17:29 - and there you go there's one more
17:31 - particle and there's another one and as
17:33 - you can see it's different and that one
17:34 - is different and different and different
17:36 - and different so just like this we can
17:38 - input our UV coordinates and they get
17:41 - calculated automatically and used based
17:43 - on a certain index all right awesome
17:45 - ok so with this working now let's make
17:48 - some scripts to hand on the blood and
17:49 - the shell particles so here let's make a
17:52 - new script call this the shell particle
17:55 - system Handler and now here this one
17:59 - already has all the coordinates for the
18:00 - bullets so let's leave this one and set
18:02 - duplicate this what's going this new and
18:06 - each on particle system Handler and drag
18:08 - this script on to it and drag the
18:10 - correct material all right so here we
18:12 - have this one with the correct
18:13 - coordinates the correct material and
18:15 - this script and for now this other one
18:17 - is disabled we will deal with the pallet
18:19 - later so now in this script we're going
18:21 - to have a logic for every single shell
18:23 - so let's start off with a
18:25 - function to spawn any simple shell let's
18:29 - also make this a singleton class so we
18:31 - can easily call this function alright so
18:40 - now we want to use this function so
18:42 - let's take our testing code away from
18:44 - the particle system and into a proper
18:46 - testing class so here we just make in
18:48 - you see sharp script code our testing
18:50 - let's make a testing game object drag
18:53 - the script onto it okay and now here
18:55 - let's who are testing so let's copy all
18:57 - this ok so now our mesh particle system
19:06 - no longer contains any references to the
19:08 - player or anything other than the
19:09 - particle system and here on the testing
19:12 - we have a reference to the player and we
19:13 - are subscribing to the on shoot event so
19:16 - in here let's s our shell so we go into
19:17 - the shell particle system handler we
19:20 - access the instance and we call spawn
19:22 - shell so here we pass in the position
19:24 - and a direction okay so this simple now
19:28 - let's deal with this here on the shell
19:30 - system handler let's create a class that
19:32 - will handle a single shown not only
19:38 - constructor let's receive the position
19:40 - and direction let's also receive the
19:46 - mesh particle system ok so when we
19:51 - create a single we go into the mesh we
19:53 - call our add quad function so this will
19:57 - return our private in for this quad
19:59 - index
20:08 - all right so we instantiate our quad
20:11 - with our position rotation and quad size
20:13 - and then we're going to have a update
20:15 - function and in here we're going to
20:18 - handle our movement so we update the
20:26 - position updated rotation and update our
20:27 - quad alright so this is our single class
20:30 - which represents a single shell so now
20:32 - we can go back up here into our main
20:34 - class and we're going to have a list of
20:38 - single and now on this one we have a
20:44 - private void update and on our update
20:47 - we're simply going to cycle through all
20:48 - of our shells and we simply call the
20:52 - update function ok that's it now in here
20:56 - all we do is go into the single list and
20:58 - we add a new single and passed in the
21:01 - position direction and the mesh particle
21:03 - system so just like that we have this
21:06 - very nice class which takes care of
21:08 - everything related to the shell
21:10 - particles and all we need to do is call
21:12 - this function which we are doing over
21:14 - here in our testing script so we are
21:16 - spawning shells whenever we shoot with
21:18 - our character and they won't be moving
21:20 - up and to the right so let's test ok so
21:23 - here we are let's shoot and there you go
21:25 - there's a particle it was correctly
21:27 - spawn and it's correctly moving all
21:28 - right all right awesome so now we have
21:31 - everything so working like previously
21:33 - except everything is encapsulated into
21:35 - its own nice class now instead of just
21:37 - making them we go up into the right
21:39 - let's make it based on the rotation of
21:40 - the player
21:50 - okay so here I calculated each direction
21:53 - based on the two values that this event
21:55 - fires so it triggers the shoot position
21:57 - which is where we click and the gun
21:58 - endpoint position so using those who we
22:01 - can get the shoot Direction then here
22:03 - just stop setting it backwards so it
22:05 - doesn't spawn the shell exactly on the
22:07 - gun endpoint position but rather more
22:08 - towards where the weapon should be fired
22:10 - and then we have the shall move
22:11 - direction which we just take the shoot
22:13 - direction and we apply a negative 90
22:15 - degree angle so let's see this so here I
22:18 - am and if I shoot if there you're the
22:20 - particle and left-right from there and
22:21 - went upwards so like this it's going up
22:24 - and then it's going to the left and it's
22:26 - going down just like that
22:27 - right great so now that we have our
22:30 - shells correctly moving away let's make
22:32 - them stop after a while so here just had
22:35 - some slow down speed code okay so here I
22:50 - just had the move speed field then we
22:52 - increase the position by the move speed
22:54 - the same thing with the rotation and
22:56 - then we simply slow down to move speed
22:58 - on every frame so the particle should
23:00 - move quickly and then slow down okay so
23:02 - we are and shoot any of there we go the
23:04 - particle goes away and then stops so
23:06 - shoot a bunch and there you go just like
23:07 - that
23:08 - all right now just add some
23:09 - randomization okay so here we are and I
23:16 - shoot and shoot at same place and there
23:18 - you go I had some randomization on the
23:21 - angles as well as the move speed all
23:23 - right awesome so in here we are spawning
23:25 - shells and we are moving them and now
23:27 - when they're done moving let's update
23:28 - and remove them from our single list so
23:31 - here let's add a public bone is movement
23:35 - complete every similarly return if the
23:38 - move speed is under a certain amount so
23:43 - then we go all the way up here we call
23:45 - update all right and then we ask if the
23:47 - single if the movement is complete then
23:50 - we want to remove it from the list
23:52 - so it's convert this from a 4h into a
23:54 - four
23:57 - all right so we are update we call is
23:59 - moving complete and then if it is
24:01 - complete then we want to remove it from
24:03 - the list so you remove it and then go
24:07 - backwards on the index all right
24:09 - so in here just for testing let's add a
24:11 - debug log on the single list count so
24:15 - you should be able to see this increase
24:16 - once the shell is active and decrease as
24:18 - they stop okay so here we are and on the
24:20 - logs you can see that we have no shells
24:22 - active so now we click there we go we
24:24 - have one and after a while it stops and
24:26 - there you go zero so keep shooting a
24:28 - bunch of them are active and now after a
24:30 - while you have there you go zero active
24:32 - so just like that our code is now
24:34 - spawning and cleaning up after itself
24:35 - awesome so just like this you can
24:38 - already see our very nice particle mesh
24:40 - system so they are ongoing and they
24:42 - spawn and they stay there so I can move
24:44 - over them and they remain in there so we
24:46 - have the code working for persistent
24:48 - particles but we can also use this for
24:49 - particles that disappear so over here I
24:52 - have a nice third spreadsheet so these
24:54 - particles are meant to disappear so here
24:56 - on let's duplicate the shell particle
24:58 - system and this will be our dirt
24:59 - particle system okay so here I have the
25:08 - other particle system handler on a new
25:09 - game object using this script with a
25:12 - dirt material so now here on the system
25:14 - panel let's go into this single and
25:16 - let's add the behavior for the dirt
25:18 - inside of the shell the main thing we're
25:20 - going to remove is the rotation since we
25:22 - don't want the dirt to rotate and just
25:24 - like that okay now on testing so here we
25:27 - can ask the character if it is moving
25:30 - and if it is moving then let's go into
25:33 - the dirt particle system and one access
25:35 - the instance and let's rename that
25:37 - function in order to be not spawn shell
25:39 - so in here just rename this into spawn
25:41 - dirt so we spawn it based on the
25:45 - character position and with direction of
25:48 - the character that I can't move
25:50 - direction x -1 so there it won't be
25:53 - kicking backwards okay so just like this
25:56 - we should be able to see our third
25:57 - sprites being spawned let's see okay
26:00 - here we are and move and there go the
26:02 - dirt particles are indeed being spun now
26:04 - they are way too many since it's going
26:05 - one for each frame so let's reduce that
26:21 - okay so here I've made a nice dolly
26:23 - function we simply store the next spawn
26:25 - time on a float and whenever we spawn we
26:27 - increase that so let's see okay so no
26:31 - particle since we're I don't now move
26:32 - and there you go the particles get
26:34 - spawned and they no longer go exactly
26:36 - one per frame right awesome
26:37 - however again these are guns are not
26:39 - meant to be persistent so let's see on
26:41 - with that in here we have our code for
26:43 - icing on dirt particle okay we check it
26:45 - move incomplete okay and then let's also
26:47 - add a Pollock boy let's call it destroy
26:49 - song and we're going to destroy a
26:52 - particle is actually very simple we
26:53 - simply go into the mesh particle system
26:55 - and we're going to make a function
26:57 - called destroy pond and we pass in the
27:00 - quad in X okay so let's make that
27:02 - function so here we are in the mesh
27:04 - particle system and let's go make a
27:06 - public void destroy quad we receive an
27:08 - int for the quad index in order to
27:11 - destroy it it's actually very simple
27:13 - we simply complete the vertexes so we
27:19 - simply based on the quad we modify all
27:22 - those vertexes in order to go into
27:23 - vector 3 0 so essentially we reduce the
27:26 - entire size of the quad so nothing is
27:27 - visible okay so we have the destroyed
27:29 - quad now back into the third particle
27:31 - system and here we simply need to call
27:33 - this and let's go on the way up here
27:34 - when movement is complete we call the
27:36 - single only to destroy itself and remove
27:39 - it from the way alright so let's see if
27:41 - they vanish ok here we are let's move
27:43 - and there you go there's the particles
27:45 - and after a while if there you go they
27:47 - all start to vanish so after a while
27:49 - when they stop moving
27:50 - think I'm gonna vanish right awesome so
27:52 - we now have disappearing particles now
27:54 - here if we look at the dirt texture you
27:56 - can see that it's actually a spreadsheet
27:57 - it has various frames of animation so
27:59 - let's make sure we add that so first I
28:02 - need to add all of the pixels in here on
28:04 - the mesh particle system
28:14 - all right so I have added all of the
28:16 - pixels for each single fried sheet
28:18 - position on the entire texture and now
28:20 - here the way that we set up our mesh
28:22 - particle system makes it very easy in
28:24 - order to do frame animation in here we
28:26 - already receive the UV index so all we
28:28 - need to do is actually increase it so
28:29 - here on the dirt let's go into our
28:31 - single in order to modify the behavior
28:33 - in here so first we store a private int
28:35 - for the UV index and here we start off
28:39 - at 0
28:55 - all right so here I just added some
28:57 - simple flip book animation so we have a
29:00 - timer and the timer max so in here we're
29:02 - going to run every 10 frames per second
29:04 - so whenever the timer goes past the max
29:06 - we simply reduce the timer so here
29:09 - that one we reduce the timer and we
29:11 - increase the UV index and that's where
29:12 - we pass on the update quad so that's it
29:15 - very simple then let's test okay here we
29:17 - are and move any of there you go as you
29:19 - can see we have our nice dirt particles
29:22 - being spawned and they are being nicely
29:24 - animated on a frame-by-frame basis all
29:26 - right that's the effect awesome so here
29:29 - we are with a small prod and pure
29:31 - particles and there you go there's a
29:32 - nice effect all right awesome now one
29:36 - thing we still need to fix is in terms
29:37 - of performance looking at the stats you
29:39 - can see how it goes out massively every
29:41 - time we increase so just like that the
29:43 - more particles we have the much higher
29:45 - this and we also need to fix over here
29:48 - the bouncer ego once we go up here they
29:49 - are vanished that's because the bounce
29:51 - so let's fix both those things first for
29:54 - the bounds we can simply go into the
29:55 - mesh and set the bounce and here we can
29:59 - simply put a very massive size and just
30:03 - like this if we go all the way up here
30:05 - there yo now the mesh and all other
30:06 - vanishes and works all the time and ever
30:08 - so you can go down here shoot and all
30:11 - the particles are still up there and
30:12 - down there alright great if you want you
30:14 - can calculate this into a proper bounce
30:16 - but for most cases just making it huge
30:19 - won't make it work so now for the
30:20 - performance
30:22 - the biggest issue is whenever we update
30:24 - a quant we are uploading it to the mesh
30:26 - so if we have several quads being
30:28 - updated on the same frame we end up
30:30 - calling this and passing our own welcome
30:32 - arrays into our mesh multiple times per
30:34 - frame that is obviously very wasteful so
30:37 - let's make sure we only do this at most
30:38 - once per frame so for that we can go up
30:41 - here and let's make a red phone and call
30:45 - this update vertices update TV and
30:49 - update triangles okay now let's go down
30:52 - here and make a prayer void update and
30:57 - our update if we have update vertices
31:02 - then I simply updating mashed-up
31:04 - vertices equals our vertices all right
31:08 - just like that do everything for all the
31:10 - others all right there it is now let's
31:15 - also make sure this runs at the end so
31:16 - instead of updating let's put it on late
31:18 - update and now in here whenever we
31:20 - modify something so on destroy pawn
31:22 - let's set the update vertices in to true
31:26 - then here when we update everything
31:28 - instead of calling this lets update the
31:30 - vertices update the UVs then we also
31:35 - update the triangles so just like this
31:39 - we simply set bones if we wanted we
31:41 - could then break this into three
31:43 - separate functions to update the
31:44 - vertices the UVs are triangles but for
31:46 - now let's leave it like this so we just
31:48 - set it to true and then at the end of
31:50 - the frame if it is true then we update
31:51 - them if not then we'll leave it alone
31:53 - all right so just like this we should
31:54 - greatly have improved our performance
31:56 - and here if we look at the stats
31:58 - previously we were going all the way up
32:00 - to eight milliseconds and now if you
32:02 - move there you go only two and we can
32:04 - move and shoot and a whole bunch of
32:06 - particles and there you go it's now much
32:07 - better all right so now I'm just going
32:10 - to add all the other particles the same
32:11 - way that we have these two
33:21 - all right so I have implemented all of
33:24 - the particles so first of all we still
33:26 - got the shells very nice then we still
33:28 - got the dirt and you can already see the
33:31 - footprints so after some time the
33:33 - footprints get spun there you go they
33:34 - stay there and then we have the bond so
33:37 - whenever I shoot them if they're go
33:38 - somewhat particles going out and when I
33:41 - kill him
33:41 - and it spawns a flying body and there
33:44 - you go he flies away and the flying body
33:45 - spawn some more particles so just like
33:48 - this we have a whole bunch of types of
33:50 - them being spawned and after all the
33:53 - movement ends everything stays nice and
33:54 - stable and they stay on the map forever
33:57 - so just like this we have a very cool
34:00 - persistent particle system awesome
34:02 - however in here we still have two slight
34:04 - issues first is simply the amount of
34:07 - quads in here we defined a max what
34:09 - amount of 15000 so as soon as we go past
34:12 - that in here we are no longer going to
34:14 - spawn any more quads we could solve this
34:16 - by dynamically creating a new mesh every
34:18 - time one of them is full and the second
34:20 - problem has to do with sorting so over
34:23 - here you can see someone now it spawned
34:25 - some shell particles so over here is the
34:28 - enemy now behind them I'm going
34:30 - to place a whole bunch of shell
34:31 - particles there's always some footprints
34:34 - and stuff okay so now when I shoot him
34:36 - and there you go over what particles
34:38 - being spawned and just like that you can
34:40 - see that the blood particles which
34:42 - respond afterwards actually show up
34:43 - behind both the shells and the
34:46 - footprints the issue here is because we
34:48 - have various separate meshes so one of
34:50 - them has to be on top of the other so in
34:52 - order to make sure that new particles
34:54 - stay on top of other particles we would
34:56 - need to use a giant texture appleís that
34:59 - contains both the bullets the footprints
35:01 - the blood and anything where we want
35:03 - place them all inside a giant texture
35:05 - Atlas and use a single mesh with that
35:07 - giant texture Atlas to spawn every
35:10 - single one of our particles so if we
35:12 - merged all of this in the same mesh it
35:13 - would solve our sorting issues so those
35:16 - are the two issues that we still have
35:18 - with this class this video is already
35:20 - super long so let me know in the
35:22 - comments if you'd like to see a video
35:23 - covering the solutions to both those
35:24 - problems and expand upon this further
35:26 - now in the future is something that I
35:28 - really want to do is take this whole
35:30 - system and convert all of it into
35:32 - superfast ECS so stay tuned for that as
35:34 - always you can download the project
35:36 - files in utilities from unity code
35:37 - monkey comm subscribe the channel for
35:39 - more unity tutorials post any questions
35:41 - that have in the comments and I'll see
35:42 - you next time
35:46 - [Music]
35:48 - you