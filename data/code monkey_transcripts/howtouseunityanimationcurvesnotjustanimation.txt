00:00 - in this video we're going to explore the
00:01 - power of animation curves
00:03 - now don't be phoned by the name these
00:05 - are extremely versatile and can be used
00:07 - for just about anything
00:08 - we're going to look at three interesting
00:10 - examples of unconventional use cases for
00:12 - animation curves
00:13 - let's begin
00:18 - all right so let's check out animation
00:20 - curves now like i said don't let the
00:22 - name fool you
00:23 - this is an excellent feature that is not
00:25 - limited to just animation
00:26 - they are called animation curves but
00:28 - really they are really just curves
00:30 - and curves are just numbers so you can
00:32 - use them to solve a multitude of
00:34 - problems
00:34 - first let's see how they're used in the
00:36 - standard way and then we're going to see
00:38 - some more unconventional interesting use
00:40 - cases
00:41 - we're going to see how we can use them
00:42 - to define how much health to give the
00:44 - player as in levels up
00:46 - then see how we can use a curve to
00:48 - affect the speed of a dodge roll
00:50 - and lastly see how we can combine
00:52 - multiple curves and use them in an
00:54 - interesting enemy spawning system
00:56 - so we're going to see how the power of
00:57 - animation curves can be applied to those
00:59 - interesting cases
01:00 - now if you've worked with the particle
01:02 - system then you've already worked with
01:04 - animation curves
01:05 - so here i have a very basic particle
01:07 - system just a random explosion
01:09 - and then down here we have the particle
01:11 - system on the inspector and here for
01:13 - example if you expand
01:14 - over here the size over lifetime you see
01:16 - over here we have this one
01:17 - and this shows up down here and yep this
01:19 - is pretty much an animation curve
01:21 - so this one as you can see each particle
01:23 - starts off pretty big and then becomes
01:24 - smaller over time as we have in here
01:26 - we could add something put it down here
01:28 - and all of a sudden they become small
01:30 - then they become huge and then disappear
01:32 - and if there you go big small big so in
01:34 - this case the x-axis
01:35 - stands for the lifetime and the y-axis
01:38 - stands for the size so over here on the
01:40 - left side we start off with one
01:42 - meaning the original particle size and
01:44 - as time goes on
01:45 - over here we have one on the x axis so
01:48 - that's the end of the particle lifetime
01:50 - and at the end the particle lifetime we
01:52 - set it to zero size so essentially
01:53 - starts off big and then disappears
01:55 - so here we have a curve for the size
01:57 - then down here we have another one for
01:59 - the velocity over time
02:00 - so starts off fast and becomes slow and
02:02 - then constant and again you can add as
02:04 - many points as you want over here and it
02:06 - all becomes really strange really weird
02:08 - look at that
02:08 - yep very strange then on each point you
02:11 - also have various types
02:13 - so if you right click on both tangents
02:14 - over here you can set it to free and
02:16 - linear constant or weighted
02:17 - so you can click and drag this and see
02:19 - yep that's how the curve changes
02:21 - alright so this is the standard use case
02:23 - for animation curves
02:24 - you can very easily animated particles
02:26 - and various other systems
02:28 - however an animation curve really is
02:30 - just a graph with an x and y axis
02:32 - so you just have a graph and then on
02:34 - that graph you can place various points
02:35 - to create some really specific shapes
02:37 - and then you can use the x and y axis to
02:39 - represent whatever you want
02:41 - for example the x axis could represent
02:43 - the player level and the y-axis could
02:45 - represent an amount of help
02:46 - so as the player increases in level the
02:48 - health gets great and grid
02:50 - so let's see some interesting use cases
02:52 - of what we can do with animation curves
02:54 - let's start off with that example so
02:56 - over here i have a basic player
02:58 - character with a health bar and its
02:59 - current level
03:00 - and down here some stars where if the
03:02 - player touches them yep there you go he
03:04 - levels up so now level 3
03:05 - level 4 and so on now let's say that we
03:08 - want the player to gain a ton of health
03:10 - over the first few levels and then we
03:12 - wanted to gain a smaller amount of
03:14 - health on the lateral levels
03:15 - now doing that manually setting each
03:17 - level and corresponding health value
03:19 - would be quite time consuming and very
03:21 - tricky to visualize
03:23 - and doing that with a mathematical
03:24 - function would also be quite tricky to
03:26 - come up with the accurate function to
03:27 - match
03:28 - exactly the behavior that we want so
03:30 - animation covers to the rescue
03:32 - first here is the script attached to the
03:34 - player so it's a pretty simple
03:36 - character controller and then there's a
03:38 - public function to set the health amount
03:40 - another one in order to get the level
03:42 - number we have these two functions and
03:44 - then we have an event that gets fired
03:46 - when the player levels up
03:47 - the implementation for how the player
03:48 - works doesn't really matter you can use
03:50 - whatever implementation you want i've
03:52 - already covered a character controller a
03:54 - health system and a level system in
03:56 - previous videos for example
03:57 - now the important thing is that we have
03:59 - this event
04:00 - and then we can ask for the level and
04:02 - then use this one in order to set the
04:04 - health amount
04:05 - so we have everything we need to
04:06 - implement our specific design
04:08 - now let's make a script to handle it so
04:10 - let's create a new c-sharp script
04:12 - name this the set health perm level here
04:15 - is the player game object
04:17 - and just drag the script onto it okay
04:19 - now here let me first grab that player
04:21 - script
04:24 - all right so i just do get component of
04:26 - that type of player okay
04:28 - and now in here let's first start off by
04:29 - making the animation curve
04:31 - so that's very simple the way you do it
04:33 - just private of type animation curve
04:36 - and let's name this the health per level
04:39 - animation
04:40 - curve right so that's it and in order to
04:42 - expose it in the editor
04:44 - let's add a serialized field all right
04:46 - now back in the editor
04:48 - and yep over here we have our script and
04:50 - there's our animation curve and as you
04:51 - click on it yep this window shows up
04:53 - so again here you can see we have an x
04:56 - axis and a y
04:57 - axis and you can zoom out zoom in pan
04:59 - around and do anything you want
05:01 - and down here you have some templates so
05:03 - for example make a linear increase
05:05 - now this one we're going to set it to be
05:07 - the health amount based on the
05:09 - level so down here the x axis will be
05:11 - per level and the y axis will be the
05:13 - health amount
05:14 - now if you want you can normalize all of
05:16 - your values and make sure that you work
05:17 - with something from 0 to 1
05:19 - or you can simply zoom out and use the
05:21 - whole curve
05:22 - so for example let's say that on zero so
05:25 - on the first level
05:26 - we want it to start off at 50 health so
05:29 - you can set the points by either
05:30 - clicking and moving
05:31 - or you can right click go on to edit key
05:34 - and here set them directly
05:35 - so the time is the x so in this case we
05:38 - want on level zero
05:40 - and for the value we want it to be let's
05:42 - say 50.
05:43 - so at level zero he's going to have 50
05:45 - health and then for this one
05:47 - let's edit the key put it on the end so
05:49 - for the time
05:50 - again this is the x-axis meaning the
05:52 - level so on 30 which is the max level
05:55 - let's put it at a value of say 150. all
05:58 - right so here we see our curve
06:00 - so at level 0 we've got 50 health and at
06:03 - level 30 we've got 150
06:05 - and right now we have a linear curve so
06:07 - we have our curve set up
06:08 - now all we need to do is see how we can
06:10 - get a value from a position in the curve
06:13 - so over here in the script the way that
06:15 - we graph that is we access our
06:17 - curve and then we call the evaluate
06:19 - function
06:20 - and this one takes a time which again is
06:22 - the x axis
06:23 - so let's put it right down the middle so
06:25 - at 15.
06:26 - so this should give us the value on the
06:28 - y axis right down the middle of our
06:30 - curve
06:30 - so let's add a debug.log and test
06:34 - and if there it is and it does make
06:35 - sense so with our curve which we made a
06:38 - perfect linear curve
06:39 - right down the middle so at level 15 yep
06:41 - we have a hundred help
06:43 - all right so that's how you grab a value
06:44 - from a curve now let's connect this to
06:46 - the actual player
06:48 - so over here is the player component and
06:50 - the player has that event so let's just
06:51 - subscribe to the event
06:54 - and then when that happens we go into
06:56 - the player in order to get the
06:58 - level so this gives us the player level
07:02 - and then then for the player health and
07:05 - for that one
07:06 - we're going to go in the healthcare
07:08 - level animation curve in order to
07:09 - evaluate
07:10 - and evaluate on the player level all
07:13 - right so with this we have our player
07:15 - health
07:15 - and over here you can already see an
07:17 - error and the error is because animation
07:19 - curves works only with floats
07:21 - so the home curve is made up of float
07:23 - values so in this case we want to store
07:25 - an end for the player help
07:26 - so we can simply just do math.round to
07:29 - end
07:29 - so we just round down that value and yep
07:31 - we have our player help
07:33 - then go into the player and call set the
07:35 - health amount
07:36 - and set in this player help all right
07:39 - that's it very simple we get the health
07:40 - we ask the animation curve for the value
07:42 - on that position
07:44 - and then we use that value let's also do
07:46 - unlock for testing and test
07:48 - so debug.log on the player health as
07:51 - well as the level
07:54 - all right here it is let's test okay
07:56 - here we are and we have that amount of
07:58 - health
07:58 - and as we increase if they're going
08:00 - level two and level three
08:01 - and yep you can see that the health bar
08:03 - is increasing very slowly and very
08:05 - smoothly
08:06 - so writing like this yep we have all of
08:09 - our code working
08:10 - so as it levels up it grabs the new
08:12 - position from the curve
08:14 - and it applies that as to our health
08:16 - system down here in the console yep we
08:18 - can see that everything is working
08:19 - so level one two three and it always
08:21 - grabs the correct value
08:23 - okay so all the logic is working and now
08:25 - that the logic is working all that's
08:26 - left to do is to set the curve exactly
08:28 - as we want it
08:29 - so based on the original design we want
08:32 - to gain tons of health in the first few
08:33 - levels
08:34 - and then slow it down for the last few
08:36 - so let's also put the last few a bit
08:38 - higher
08:39 - so on level 30 let's put it at 200 okay
08:42 - so like this
08:42 - and now instead of being a linear curve
08:44 - let's set a point right down the middle
08:45 - so just double click
08:47 - and then move it let's say something
08:48 - like in here and then just play around
08:50 - this one
08:51 - maybe something like this and then click
08:53 - on that one and also set down
08:55 - set the handle kind of like this and yep
08:58 - like this it looks like a pretty nice
08:59 - curve
09:00 - so essentially in the first few levels
09:01 - we're going to gain a ton of health
09:03 - and for the last few we're going to gain
09:05 - a small amount of help okay so let's
09:07 - test
09:07 - so here we have that amount of health
09:09 - and as we grab you there you go increase
09:11 - quite a bit and quite a bit and quite a
09:13 - bit
09:13 - and yep it's growing quite a lot so by
09:15 - level 8
09:16 - already have a massive health bar and as
09:18 - it increases
09:20 - as the level goes it's going to start
09:22 - growing by smaller and smaller amounts
09:24 - so at level 19 now if i pick up if there
09:27 - you go it barely moved
09:29 - so on the last few levels we no longer
09:30 - gain as much health as on the first few
09:32 - all right so with this you can see how
09:34 - easy it is to make the perfect curve to
09:36 - match your needs
09:37 - so thanks to the animation curve we set
09:39 - up a very interesting graph to our logic
09:41 - now if you're crazy you could play
09:43 - around with this even further so for
09:44 - example say on the first few levels yep
09:46 - the
09:46 - player gains a ton of health but then
09:48 - all of a sudden for no reason
09:50 - down there he goes back down and then
09:52 - back up
09:53 - so let's see okay so here it is and
09:56 - first few levels yep the bar is growing
09:58 - like
09:59 - a massive amount and after a while
10:02 - all of a sudden the bar starts growing
10:03 - smaller and as we keep leveling up
10:08 - yep there you go now the bar is slowly
10:10 - increasing and increasing faster and
10:11 - faster
10:12 - and almost at max level if there you go
10:15 - back into the maximum
10:16 - so as you can see some really really
10:17 - strange behavior but again it perfectly
10:19 - works
10:20 - so here's an example of something that
10:21 - would be very difficult to do
10:23 - either by manually setting on level zero
10:26 - you've got 50 on level one you've got 70
10:29 - and so on so manually would be a ton of
10:30 - work
10:31 - and coming up with a formula to get this
10:33 - exact shape would also be a ton of work
10:35 - so using this using animation curves we
10:37 - made this work very easily
10:38 - alright so that's one example using
10:40 - animation curves to define how we give
10:42 - health to the player based on the level
10:44 - now let's look at another example so
10:46 - here i have a player character and i can
10:47 - move around normally
10:48 - and now this example is i'm applying it
10:50 - to the character roll speed
10:52 - so if i press space yep there you go he
10:54 - does a really nice notch roll and there
10:56 - you go
10:57 - moves around a bit and then stops so
11:00 - right now the wrong speed is based on a
11:02 - linear curve so it started off at a
11:03 - certain amount and on every frame it
11:05 - drops by a certain amount
11:07 - so let's see how we can modify this to
11:08 - use a animation curve to make a more
11:10 - interesting behavior
11:11 - so here is the player script again i
11:14 - covered the character control in a
11:15 - previous video so go check that out if
11:17 - you want to see how all this works
11:19 - but for our example we only need these
11:20 - ones down here so we've got a function
11:22 - that gets called when it starts rolling
11:24 - another one that gets called on every
11:25 - update in order to handle the wrong
11:27 - speed
11:28 - so it's in here that we're going to want
11:29 - to use an animation curve in order to
11:31 - make the world speed go down a bit
11:32 - faster
11:33 - so it drops the wrong speed then it
11:35 - applies it to the rigid body velocity
11:37 - and then if it's under a certain minimum
11:38 - it goes back into the normal state
11:40 - so let's use a curve first let's go all
11:43 - the way up here
11:44 - let's define a private animation curve
11:47 - this will be our roll speed curve and
11:50 - let's make it a serialized field
11:52 - okay so now we take this and then down
11:55 - here
11:56 - instead of using math to pick it down
11:58 - here when we start rolling we give it a
12:00 - certain amount instead of giving it a
12:01 - fixed value
12:02 - let's go into our wrong speed curve and
12:04 - evaluate on position zero
12:07 - so it's going to start off with that
12:08 - amount okay and then down here instead
12:11 - of
12:11 - reducing the roll speed we do the exact
12:13 - same thing we set it to equals
12:15 - and we're going to evaluate the curve
12:18 - and now in here in our case we are
12:19 - indeed using time for the
12:21 - x-axis so we need to keep track of the
12:23 - wrong time
12:24 - so all the way up here just to find
12:26 - another private fold for the roll time
12:30 - then down here when we start we start
12:31 - off at zero f
12:33 - and then here we increase by time dot of
12:36 - time and we evaluate at this position
12:39 - all right so that's pretty much it very
12:40 - very simple we have our curve over here
12:42 - we evaluate on zero
12:44 - so we should probably use the runtime to
12:46 - make things more clear
12:48 - okay so evaluate the curve and then as
12:50 - the wrong time increases we're going to
12:52 - evaluate on different points on the
12:53 - curve
12:54 - apply to the wrong speed and once it
12:56 - goes under the move minimum
12:57 - then it goes back into the normal
12:59 - alright so that's it now let's go into
13:00 - the editor
13:02 - and there we have our wrong speed curve
13:03 - so click on it and let's start off with
13:05 - a very basic linear drop
13:07 - off so not an increase let's put it
13:09 - pretty much what we had previously so
13:10 - right click in order to set this
13:12 - so let's put it on time of zero let's
13:14 - put it at 100 units
13:16 - so that's how fast it is moving and then
13:17 - on this one let's make it drop down to
13:20 - 40
13:21 - and after one second so in order to
13:23 - automatically zoom we can either
13:24 - zoom back and try to find it or just
13:26 - close it and reopen
13:28 - and if there we go with automatically
13:29 - scales okay so with this we have a very
13:32 - basic
13:32 - linear drop down so on zero we've got
13:34 - 100 and down here we've got 40
13:37 - and actually the wrong speed minimum is
13:38 - 50 so let's put it a bit under that
13:41 - so in here let's right click this one
13:42 - and set a4 and let's put 49
13:44 - okay let's test all right here we are in
13:47 - rome
13:48 - and yep there you go it works pretty
13:49 - much the exact same thing as previously
13:51 - so just a linear drop off and yep it
13:53 - works pretty decent
13:55 - so this works all right but it doesn't
13:56 - really look that good
13:58 - so it's just a very boring very linear
14:00 - drop let's make it feel more punchy by
14:02 - starting off super fast and then quickly
14:04 - dropping down
14:05 - so let's start off faster than that so
14:07 - let's right click edit the key put this
14:08 - one at
14:09 - let's say 200 and now let's make the
14:11 - drop a lot more intense in the beginning
14:13 - so just here and just drag it sort of
14:14 - like this all right let's run like this
14:17 - so here we are and roll and yep there
14:19 - you go now it starts off faster and
14:20 - becomes slower
14:22 - the way we set it up we can also play
14:23 - around over here on the x axis
14:25 - so right now it's taking pretty much one
14:27 - second to do it and let's make it more
14:28 - punchy by taking much
14:30 - less time so let's say just half a
14:31 - second so here we are and yep there you
14:33 - go the roll is now feeling much more
14:35 - like a roll so it's a bit more punchy
14:36 - than the
14:37 - linear drop off and again like
14:39 - previously you can go crazy if you want
14:41 - so let's for example zoom out let's
14:43 - stretch this to the right
14:45 - and let's say start off then become
14:46 - smaller and then
14:48 - all of a sudden for no reason just
14:49 - becomes faster again and then slower
14:51 - again
14:51 - alright so that's a very strange curve
14:53 - let's see so let's roll
14:55 - and you look at that very weird so it
14:57 - rolls once then stops and rolls again so
14:59 - we've got a very strange double row
15:01 - again very strange but using an
15:03 - animation curve we can easily test and
15:04 - figure out
15:05 - if this makes sense or not so in this
15:07 - case this is strange but if you want to
15:09 - do it you can see how easy it is to do
15:10 - using animation curves
15:12 - alright so that's another example and as
15:14 - you saw very easy to add
15:16 - now let's look at the unless example so
15:18 - this one here
15:19 - is all about enemies so there's an enemy
15:21 - wave spawner and every certain amount of
15:23 - time enemies get spawned
15:25 - i can move around and i can shoot them
15:27 - so just like this very simple
15:28 - now right now they come in waves and
15:30 - every wave has the exact same number of
15:32 - enemies
15:33 - and all the enemies have the exact same
15:34 - health amount so we're going to make two
15:37 - curves in order to customize both the
15:38 - number of enemies as well as the amount
15:40 - of health that each one has
15:42 - so here is the enemy wave spawner and as
15:44 - you can see it's a pretty simple small
15:46 - script
15:46 - we just have a very simple timer count
15:49 - it down by a certain amount of time
15:50 - and every six seconds we are calling the
15:52 - spawn wave function
15:54 - and in here we are always spawning five
15:55 - enemies then we got the spawn enemy
15:57 - which takes a health amount
15:59 - so every six seconds we are spawning
16:01 - five enemies all of them with 30 health
16:03 - so it's very basic now instead of using
16:05 - a static number for the enemies per wave
16:07 - let's use the amount from a curve so
16:09 - again up here just to find a private
16:11 - animation curve
16:13 - for the enemy spawn amount curve
16:16 - and again expose it
16:19 - so we have this and then down here on
16:21 - the spawn enemy amount
16:23 - we simply go into the curve and call
16:24 - evaluate now here
16:26 - let's also add just a simple end for the
16:29 - wave
16:29 - index just run away we increase the
16:33 - index and we use that one to evaluate
16:34 - our curve
16:35 - and again this one requires an end so
16:37 - let's just do math f
16:38 - round to end round this float into an it
16:42 - okay
16:43 - so there it is very simple now back in
16:45 - the editor
16:46 - here we have the enemyresponder and
16:47 - again let's set the curve
16:49 - let's start off by setting again the
16:51 - time is the x which in this case is the
16:53 - wave index so on the first wave let's
16:55 - start off with five enemies
16:57 - and again close and reopen or to
16:58 - automatically zoom and let's add another
17:00 - point
17:01 - and now this one let's put it on wave
17:04 - two
17:05 - we're going to spawn seven enemies okay
17:07 - there it is
17:08 - and now again you can always right click
17:10 - in order to set it perfectly
17:11 - or you can just pretty much eyeball it
17:14 - so there we got the two
17:15 - let's move all the way over to the three
17:17 - and on the three let's put something
17:19 - like
17:20 - maybe 10 enemies alright so that's it on
17:22 - the first wave we've got five
17:24 - then on the second wave we've got seven
17:26 - and on the third wave we have ten
17:28 - so let's test here we are first wave
17:30 - with indeed five
17:31 - enemies so just kill them all and wait a
17:34 - bit and here comes the second wave which
17:36 - is one two three
17:37 - four five six seven yep there you go and
17:39 - now on the next one it should have 10
17:41 - enemies
17:42 - and if there you go there's quite a lot
17:43 - more alright awesome
17:45 - and by the way the way that curves work
17:47 - is they become a constant
17:49 - so now since there's no more values
17:51 - after that point in the curve
17:53 - right now they won't always have the
17:54 - same amount so they won't always have
17:56 - 10.
17:56 - so after the curve ends it's just a
17:58 - constant of the last point alright so
18:00 - our logic for the spawn enemy amount is
18:02 - fully working
18:03 - now let's add the second wave for the
18:05 - enemy health amount
18:06 - so let's make another animation curve
18:08 - for the enemy health amount
18:10 - curve then we go down here and it's a
18:13 - spawn enemy function that takes the
18:14 - health amount
18:15 - so it's in here when we call it we
18:17 - suddenly do the exact same thing just
18:18 - evaluate on the wave index
18:21 - and again this one requires an int and
18:24 - yeah that's pretty much it
18:25 - so you can see how it's really simple to
18:27 - add some curves in order to make some
18:28 - really awesome behavior
18:30 - so back in the editor there's our two
18:32 - curves let's modify the enemy health
18:33 - amount
18:34 - and again let's create a point and first
18:36 - let's edit it
18:37 - put this on wave one let's start off
18:39 - with 30 health
18:41 - then let's make another point let's put
18:43 - it on wave 2
18:44 - and let's put it on 50 health and then
18:47 - as we increase let's put just one more
18:49 - let's put it on wave 3 we've got let's
18:51 - say 70 help
18:52 - all right so using both of our curves we
18:55 - now have an
18:56 - ever increasing enemy spawn amount and
18:58 - an ever increasing enemy health amount
19:00 - so just a very standard pretty much
19:02 - linear difficulty curve
19:04 - let's test okay and on the first wave
19:06 - yep they have the small amount of health
19:08 - so just stuttering
19:09 - now on the second one there should be
19:10 - more enemies with more health and yep
19:12 - there they are
19:13 - more enemies with a bit more health and
19:15 - as we go into one more
19:17 - and if there you go now they've got even
19:19 - more enemies and even more health
19:21 - alright so the logic is all working now
19:23 - again with the logic working now it's
19:24 - the time to really play around with the
19:26 - animation curves
19:27 - so for example over here on the enemy
19:29 - spot amount
19:30 - let's say that on this curve let's edit
19:33 - it let's put it on wave three
19:36 - and on wave three let's just add just a
19:37 - single enemy so there you go that's the
19:39 - curve
19:40 - and then we go into the health amount
19:42 - and on wave 3 we're going to have
19:43 - essentially pretty much like a boss
19:45 - enemy so let's put it at like 500 so
19:47 - massive amount
19:48 - so start off with a small number of
19:50 - enemies increase then become smaller
19:52 - and then let's add another one
19:53 - afterwards let's put it on wave four
19:56 - and let's say we have three enemies and
19:58 - let's put them all with a tiny amount of
20:00 - hell
20:01 - so add another curve put it on four and
20:03 - this one let's say just 10.
20:05 - all right so this is the curve for the
20:07 - spawn amount and this is the curve for
20:09 - the health amount
20:10 - so you can see we've got some really
20:11 - interesting curves now let's see how
20:12 - this happens
20:13 - so here we are and first wave yep looks
20:16 - pretty normal normal amount of enemies
20:17 - with normal amount of health
20:19 - now for the second wave if there you go
20:21 - a bit more a bit more help but still a
20:23 - normal wave of enemies
20:25 - and now let's see the third wave and yep
20:26 - there you go we've got one
20:28 - massive enemy so just keep shooting and
20:30 - eventually yep there you go take him
20:31 - down
20:32 - and now for the next wave yep a massive
20:34 - amount of enemies all of them with
20:35 - pretty much no health so they all die
20:37 - with pretty much one shot
20:39 - alright so here it is and the logic is
20:41 - all working
20:42 - awesome okay so here is another
20:45 - interesting use case for animation
20:46 - curves you can see how
20:48 - easily we implemented this really
20:49 - strange behavior where we made some
20:51 - normal waves then a boss wave then a
20:53 - wave with tons of enemies and so on
20:55 - so you can imagine how you can expand
20:57 - this to apply this to pretty much
20:58 - anything you use in your game
21:00 - alright so these are animation curves as
21:02 - i said before don't let the name fool
21:04 - you they are awesome and can be used for
21:06 - much much more than just animations
21:08 - we saw three interesting examples first
21:10 - using them to define the health per each
21:12 - level
21:13 - then setting the row speed based on a
21:14 - curve and lastly using curves for the
21:16 - enemy's spawn amount and the health
21:18 - amount
21:19 - so i hope this video gave you some ideas
21:21 - on how animation curves can be hugely
21:23 - helpful in your own projects
21:24 - if you found this video helpful consider
21:26 - liking and subscribing this video is
21:28 - made possible thanks to these awesome
21:29 - supporters
21:30 - go to patreon.com unitycodemonkey to get
21:33 - some perks and help keep the videos free
21:35 - for everyone
21:36 - as always you can download the project
21:37 - files and utilities from
21:38 - unitycodemonkey.com
21:40 - subscribe to the channel for more unity
21:41 - tutorials post any questions i have in
21:43 - comments and i'll see you next time