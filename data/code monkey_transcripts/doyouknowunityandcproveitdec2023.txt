00:00 - hello and welcome I'm your KMI so do you
00:02 - know if caller can ever be null do you
00:05 - know what is the purpose of a namespace
00:07 - do you always have to extend mono
00:08 - Behavior or do you know what will happen
00:10 - on January 19 2038 so can you answer
00:13 - these questions whether you answer yes
00:15 - or no either way hopefully you will
00:16 - learn something a while ago I built a
00:18 - system that I've wanted to build for a
00:19 - really long time I manually wrote a ton
00:22 - of interesting questions and then wrote
00:23 - some super detail answers then I made a
00:25 - system that automatically every 3 days
00:27 - picks a brand new question you can find
00:28 - the latest question directly on the
00:30 - website or you can just go to your user
00:31 - page and enable question of day emails
00:34 - that way when a question is generated
00:35 - you automatically get an email I think
00:36 - this is a pretty fun way to learn and
00:38 - personally I've already enjoyed using
00:40 - this system since I wrote so many
00:41 - questions there's a bunch of them that
00:42 - when they spawn I don't even remember
00:44 - writing them in this video let's go
00:46 - through the last 10 questions try to
00:47 - answer them and go through all the very
00:49 - detailed answers to see if we can learn
00:50 - something and if you haven't seen the
00:52 - Humble Bundle with tons of tools and
00:53 - definitely check it out for just 35
00:55 - bucks you can get tons of tools that do
00:57 - all kinds of things you've got some
00:58 - visuals some things for anim some things
01:00 - for 2D soft body cars handling feedback
01:03 - forms slicing things and even completing
01:04 - templates or if all you want are just
01:06 - some visuals and the cind store has just
01:08 - started their holiday season sale all
01:10 - with tons of Assets in their gorgeous
01:11 - sound they even have a fun holiday gift
01:13 - basket or alternatively the unity
01:15 - accessor is also having their new year
01:16 - sale I haven't yet had the time to look
01:18 - at this one but I'm sure tons of awesome
01:19 - stuff are currently on sale so if you
01:21 - need anything check out all the links in
01:23 - the description so starting off with
01:24 - question number one what is the
01:25 - significance of January 1st 1970 so is
01:28 - that the Skyrim release data on the mag
01:29 - Inox Odyssey or is it the start of Unix
01:32 - sign if you want pause the video and
01:34 - choose your answer for this one January
01:36 - 1st 1970 I'm prey sure is the start of
01:38 - Unix time and Y that is indeed correct
01:41 - Unix time SS are something that is
01:42 - extremely useful if you've ever had to
01:44 - deal with time zones and converting
01:46 - things back and forth then you know that
01:48 - it is a complete nightmare to work with
01:49 - all kinds of time zones there's a really
01:51 - hilarious video from 9 years ago where
01:53 - Tom Scott goes insane trying to deal
01:54 - with time zones so in order to avoid you
01:56 - going insane by the exact same reason
01:58 - said Unix SS are much much easier to
02:00 - deal with this basally contains the
02:01 - number of seconds left since January 1st
02:03 - 1970 so for example if your game deals
02:06 - with real world time in any way like for
02:07 - example storing when the user completes
02:09 - some kind of achievement or when the
02:11 - user created some kind of mod for that
02:13 - you can sort the time as a unit time
02:14 - samp and then you can easily convert
02:16 - into whatever time zone you want and in
02:18 - C it's super easy to get it just use
02:20 - daytime offset now. two Unix time
02:22 - seconds and then as some examples here
02:24 - are some videos that I made like the one
02:25 - for the free online leaderboard You'
02:27 - probably include a timestamp for when
02:29 - the use achieve that score that way you
02:31 - could filter out all scores then like I
02:34 - said for modding in order to save the
02:35 - data for when that mod was created you
02:37 - could include that directly in the mod
02:38 - file or for making all kinds of Unique
02:40 - Mechanics soring the time is usually
02:42 - something you can do and again using a
02:44 - Time simp is super easy so basically
02:46 - whenever you need to handle time in any
02:47 - way a simple unit time simp will work
02:49 - wonders so question number two can you
02:51 - modify the transform. 4 directly in
02:53 - order to rotate a transform so yes or no
02:56 - in my case I do know the answer is yes
02:58 - because this is indeed my favorite
03:00 - rotation method if you read it then it's
03:02 - going to return the forward Vector for
03:03 - the object that you have selected but
03:05 - you can also set it in order to rotate
03:07 - it so for me the simplest way to make it
03:09 - look at something is just calculate a
03:10 - simple direction towards that Target and
03:12 - set the Transformer forward to that
03:13 - Target personally I still have trouble
03:15 - understanding how quion work and Oiler
03:17 - angles are sometimes a bit tricky so for
03:19 - me whenever I want to rotate something
03:21 - usually transform. for that's the method
03:23 - that I most prefer and again you can
03:25 - modify transform forward but also all
03:26 - the other ones like transform. right or
03:28 - transform. up for for example this one
03:30 - can be super useful when dealing with
03:31 - collisions and normals this is exactly
03:33 - what I did in this video on the Scout
03:35 - prob launcher from ours in there I made
03:37 - it that whenever the prob is thrown
03:39 - whenever it land on something it
03:40 - automatically use the C normal in order
03:42 - to point in the opposite direction so
03:44 - that way it perfectly fits perfectly
03:46 - matches whatever terrain whatever
03:47 - surface it lands on and like I said you
03:49 - can also modify transform that right so
03:51 - when working in 2D usually that's the
03:52 - best one because usually pointing to the
03:54 - right that is going to be default for
03:55 - any Sprite you draw on to the next
03:57 - question let's say I saved my gim D in a
03:59 - text file and I am now trying to load it
04:01 - so does this work so I've got a string
04:03 - saved Health Data and I've got the
04:05 - string 100 and then I've got an in
04:07 - health amount and I'm simply setting it
04:08 - to the saved Health Data so does this
04:10 - work yes no or yes but Health amount
04:13 - will be
04:14 - zero this one is a fun question to teach
04:16 - you the basics about how types are
04:18 - different in this case you cannot
04:19 - directly convert a string onto an end so
04:21 - I do know the answer is no and if that
04:23 - is exactly the answer is because you
04:25 - cannot implicitly convert a string onto
04:27 - an INT in order to do that convert the
04:29 - string onto a value you can use in.
04:30 - parse or in. Tri parse or for float you
04:33 - got float. parse and so on so for
04:35 - example in this case you would take the
04:36 - saveal data and call in. parse that does
04:38 - return an INT if it can indeed parse
04:40 - that text or alternatively you can use
04:42 - something like Json this is a widely
04:44 - used data format it is all string based
04:46 - and it automatically handles the
04:47 - conversions for me I use Json a lot
04:49 - whenever I want to save anything it's
04:51 - the simplest way to save pretty much any
04:52 - data it's how I normally handle saving
04:54 - and loading and I very much rarely have
04:56 - to manually par some numbers I got a
04:58 - video on Json one on saving and loading
05:00 - this video is pre-owned but it's still
05:02 - exactly up to date it is still exactly
05:04 - the same system that I use for saving
05:05 - and loading nowadays even in my latest
05:07 - game dinky Gardians it uses pretty much
05:09 - exactly the same thing that I covered in
05:10 - this video and how to save multiple
05:12 - things save a file the save file
05:14 - alongside the screenshot or really any
05:16 - data you want this also really
05:17 - interesting and then also somewhat
05:19 - related do you know you can also
05:20 - Implement implicit type conversions to
05:22 - your own custom types you can just
05:24 - Define a implicit operator and that way
05:26 - you can convert your custom time like
05:27 - for example something called Health
05:29 - amount you can automatically convert
05:31 - that into an INT if you do a lot of
05:32 - things with custom types that have some
05:34 - kind of mathematical conversion or
05:36 - really just conversion into any other
05:37 - type then looking into this implicit
05:39 - operator that can be super useful save
05:41 - you a ton of time next question what is
05:43 - the color on the Sprite renderer after
05:45 - running this code so first we've got a
05:47 - variable color my color and it's set to
05:49 - color. Red then we assign the Sprite
05:51 - render do color to my color and then we
05:53 - modify my color to color. Blue so by the
05:55 - end after running these three lines of
05:56 - code is the color on the Sprite render
05:58 - is that going to be red blue or don't
06:00 - you know and I know this is a fun
06:03 - question talk about the differences
06:04 - between reference and value types so in
06:06 - this case I do know the color is going
06:07 - to be red and if there it is that's
06:09 - correct and the trick here is that color
06:11 - is a struct which is a value type and
06:13 - not a reference type so when you assign
06:15 - a color or really any struct any value
06:17 - type when you assign that onto a spr
06:19 - renderer you pass in a copy at that time
06:22 - so when you later on modify it does not
06:24 - modify the copy that the Sprite renderer
06:25 - holds it just creates a brand new copy
06:28 - this is something that you absolutely
06:29 - must know the differences between value
06:31 - types and reference types if you don't
06:33 - know that difference then at some point
06:34 - you're going to go crazy when you try to
06:35 - modify something and you don't
06:37 - understand that you are modifying a copy
06:38 - not the actual object I've got a very
06:40 - useful video on that topic If instead
06:42 - color If instead of being a struct if
06:44 - this one was a class then when you
06:46 - assigned it you would assign a reference
06:48 - and if you modify the original data so
06:50 - if you modified some parameter inside
06:52 - the my Coler if you did that then you
06:54 - would be modifying the actual underlying
06:55 - object which again the spread R would
06:57 - also be pointing to the same object so
06:58 - that one would also Al update but in
07:00 - this case since color is a struct then
07:02 - modifying that is really just modifying
07:03 - a copy so it does not affect the
07:05 - original Sprite render okay question
07:06 - number five what is the purpose of a
07:08 - namespace so is it to confuse you maybe
07:11 - is it to get better performance or is it
07:13 - to keep your code
07:15 - organized and for this one let's say the
07:17 - goal is to confuse you and hope
07:19 - obviously that is not correct the answer
07:20 - is obviously to keep your code organized
07:22 - so it does not give you better
07:23 - performance setting a namespace does
07:25 - absolutely nothing when it comes to
07:27 - Performance Nam spaces are used to help
07:29 - you keep keep your code more organized
07:30 - with various systems cleanly separated
07:32 - so for example a direct example directly
07:34 - from unity all of the UI code all of
07:36 - that exists inside the namespace
07:38 - unityengine.ui now for example all the
07:40 - file handling is inside system.io all
07:43 - the entity stuff is inside unity.
07:45 - entities and so on so as your project
07:47 - grows code organization becomes more and
07:49 - more important so you can definitely use
07:50 - namespace to keep your code base nice
07:52 - and under control you can define a
07:54 - namespace and then inside you can Define
07:56 - any class and anything like that then
07:57 - you just need to add using your
07:59 - namespace and then you can access the
08:00 - type directly inside that namespace and
08:03 - this is also one very useful way to
08:04 - avoid name collisions one common
08:06 - Collision that I encounter pretty much
08:07 - all the time is this one there's a
08:09 - random class both inside un engine and
08:11 - one inside system so if you write this
08:13 - code it's actually going to throw an
08:14 - error because it does not know which
08:16 - random you are trying to use normally I
08:18 - always want to use the random from the
08:19 - UN engine so really you can just write
08:21 - the full name personally I prefer this
08:23 - one as opposed to the one in system that
08:25 - requires creating requires setting up a
08:27 - seed and so on whereas this one is much
08:28 - more similar to use so Y when you have
08:30 - conflicts between various class types
08:32 - then using the full name that is one
08:34 - great way to solve it however like I say
08:36 - here every tool can be either used or
08:38 - abused if you make a different names
08:39 - space for literally every single class
08:41 - and you're probably doing way too much
08:43 - at that point it's probably hurting you
08:44 - more than it helps but when use
08:46 - correctly namespace can indeed help you
08:48 - keep your code base much more organized
08:50 - and then yet another benefit and this
08:51 - one that does speed up code compilation
08:53 - it's not the namespace by default that
08:55 - do that instead it is something called
08:57 - assembly definitions that Unity has
08:58 - where it can basically create an
08:59 - assembly definition for an entire name
09:01 - space that lets you split your code base
09:03 - into multiple assemblies and whenever
09:05 - you modify some code it will only
09:07 - recompile the code on the assemblies
09:08 - that need recompilation so for super
09:10 - huge games this is super useful for
09:12 - example if you're only working on your
09:14 - UI code you put a proper namespace for
09:16 - your UI code and then different
09:18 - namespaces with different definitions
09:19 - for things like your gameplay code your
09:22 - gameplay logic your AI and so on and
09:24 - then when you modify the UI it only
09:25 - recompiles the UI code does not
09:27 - recompile everything else and that makes
09:29 - makes the code base the code compilation
09:31 - makes it much much faster if you want to
09:32 - know about assembly definitions I have a
09:34 - lecture on it in my ultimate unity
09:36 - overview course then here's a fun
09:37 - question where is the modulo operator
09:39 - particularly useful so is it for looping
09:42 - back on a list is it for counting
09:44 - elements in a list or is it for creating
09:46 - a new list with a particular size this
09:49 - is one of the most useful things
09:50 - personally I don't know much about math
09:52 - but I do know about this because it is
09:53 - extremely useful and the main way that I
09:55 - find particularly useful is for looping
09:57 - back directly on the list so y that is
09:59 - the correct answer and Yep this is
10:01 - exactly what I do so many times it's
10:03 - very useful when you want to look back
10:05 - to the beginning after reaching the end
10:06 - so in this case you take the index you
10:08 - increment by one then you use the modulo
10:10 - which is R the remainder of the division
10:12 - you do the modulo with the count for the
10:14 - internal list and that basically means
10:16 - that as the value over here matches the
10:18 - value in here basically it's going to
10:19 - loop back into zero like I said I don't
10:21 - know much about math but I do know that
10:22 - the mod operation that one Returns the
10:24 - remainder of division so as you increase
10:27 - your index it will automatically loop
10:28 - back to zero this is super great for
10:31 - things like pulling systems you can
10:32 - constantly loop back and reuse all the
10:34 - items but it's also not just for lists
10:36 - this is really just a mathematical
10:38 - operation so another place where I use
10:39 - this quite a lot is in making day night
10:41 - cycles so you can take your daytime you
10:43 - can increase by Delta time and then get
10:45 - the remainder for some kind of daytime
10:47 - Max so as the day constantly increases
10:49 - at some point and Loops back to zero and
10:50 - then continues so this is pretty much
10:52 - the basic logic for how I handle day
10:54 - night CLE in pretty much all my games
10:56 - and unity also did something similar in
10:58 - their happy harvest 2D sample this is a
11:00 - really awesome sample if you don't know
11:02 - about all the tons of 2D tools
11:04 - definitely go watch this if you want
11:05 - next question when you create a new
11:07 - script do you always have to extend mono
11:09 - Behavior so yes no or only if you want
11:11 - to use it as a game object
11:13 - component and for this question I'm
11:15 - going to answer only if you want to use
11:16 - it as a component although technically
11:18 - the answer no that one is technically
11:20 - also true since you don't always have to
11:23 - extend it only if you want to use it as
11:24 - a game object component so monab
11:26 - behavior is basically the base lass that
11:28 - you need to EXT and if you want to
11:29 - attach it to a game object it is also
11:31 - what automatically handles functions
11:33 - like start and update to have those
11:35 - automatically called by unity however it
11:37 - is not necessary you can definitely use
11:39 - just basic C classes that works just
11:41 - fine for example in my case in the
11:43 - various videos that I have on the grid
11:44 - system the grid system is just a regular
11:46 - C class it is used by the Constructor it
11:49 - is not attached to any game object there
11:51 - are many times in games where you don't
11:52 - really need to use something as a
11:54 - component you really just need some kind
11:56 - of container for logic to do all kinds
11:58 - of things and and if it doesn't need to
11:59 - be attached to a game object then maybe
12:01 - you don't need mono behavior for example
12:03 - in my game thinky Guardians I've got the
12:05 - offw logic that is basically the logic
12:07 - for Wendy dinkies and all the objects in
12:09 - that world when those are on a different
12:12 - world from the one where the player's on
12:13 - right now since that simulation
12:14 - continues happening all the time and for
12:16 - those those are really just regular C
12:18 - objects those do not Implement mod
12:20 - Behavior although they do have an update
12:22 - method but instead of having that update
12:24 - method being called by inter directly
12:26 - instead I've got a dinky off manager
12:28 - that one cyes through all of those C
12:30 - objects and manually calls the update
12:31 - function that way I have a bit more
12:33 - control over how often I want to call
12:35 - that update in my case in order to make
12:37 - the offer objects in order to make that
12:38 - quite a bit more performant I made it so
12:40 - it only updates 10 times per second
12:42 - instead of something like 60 FPS and
12:44 - just a nice tip making normal C classes
12:46 - that one allows you to use their
12:47 - Constructor which you cannot do if you
12:49 - do extend mod Behavior okay question
12:51 - number eight what is the main difference
12:53 - between the out and the ref keywords
12:55 - meaning what is the behavior inside the
12:56 - function so is it that out does not need
12:59 - to be set whereas ref must be set or is
13:02 - it out must be set and ref does not need
13:04 - to be set or is there no difference
13:07 - these are two super useful keywords it
13:09 - allows you to have quite a bit more
13:11 - control over the code that you write
13:13 - this actually something that used to
13:14 - trip me up for quite a while but at some
13:15 - point I got it locked in in my brain and
13:18 - now I do know that the out must be set
13:20 - and ref does not need to be set and if
13:22 - that is correct and yeah this one is a
13:24 - tricky one since only 60% of people got
13:26 - it right basically the ref keyw this one
13:28 - passed the as a reference meaning it
13:30 - basically passes in a pointer to the
13:32 - original position in memory so if you
13:34 - change that variable directly inside the
13:36 - function it will also change outside
13:37 - since both won't be pointing to the
13:39 - exact same object however you are not
13:41 - forced to change it you can receive a r
13:43 - parameter and never touch it at all
13:45 - whereas the out qword that one tells the
13:46 - compiler this parameter will be set
13:48 - before leaving this function out
13:50 - basically means output so if you call
13:52 - some function and pass in some output
13:54 - you do expect some output to come out of
13:55 - it I've got a super tiny quick tip video
13:57 - on this topic so so as an example when
13:59 - using ref you can basically Define your
14:01 - function then you just need to have the
14:03 - ref keyword and basically this parameter
14:05 - will be used as a reference then if you
14:07 - modify this parameter inside of it it
14:08 - will also modify it outside of it again
14:10 - a while ago we were talking about the
14:12 - differences between value types and
14:13 - reference types and here we can see an
14:15 - direct example about it so int this one
14:18 - is a value type meaning normally when
14:20 - you pass in an in to a function it will
14:22 - actually pass in a copy and not a
14:24 - reference to the original object but
14:25 - over here since we are using the ref
14:27 - keyword instead of passing in as a copy
14:29 - now we are passing in a reference even
14:31 - though int is a value a value type so by
14:33 - doing this even though we are using an
14:35 - in since we passed in as ref we still
14:37 - modify the original value however like
14:39 - the question asks you do not have to
14:41 - modify it so you can just receive a ref
14:44 - and then not touch it at all this is
14:45 - perfectly valid code it's wasteful since
14:47 - you're not going to do anything but it
14:48 - is perfectly valid whereas the example
14:51 - with the out key word here's one example
14:53 - try to get the player name this usually
14:55 - when you want to use something like the
14:56 - out keyword usually I like to make
14:59 - functions that try to do something then
15:01 - they return the bullion whether they
15:02 - succeed or not and optionally have an
15:04 - out parameter if it does succeed at
15:06 - doing something so in this case it
15:07 - checks if it has a player if not then it
15:09 - basically sets the player name to empty
15:12 - and simply returns false because it
15:13 - could not get the player name if not if
15:15 - the player does exist then get your
15:16 - player name and return through so then
15:18 - to use it you can just have a bulling
15:20 - because this one is going to return true
15:21 - or false if it does have a name or not
15:24 - and then you can check if it does have a
15:25 - name then do a log on the player name
15:27 - this is pretty much exactly how Unity
15:29 - Tri get component works it does pretty
15:31 - much exactly the same thing it returns a
15:33 - bullion and has an out parameter however
15:35 - like it says here unlike ref when you
15:36 - use out you must assign the parameter so
15:39 - if you do this if you have an out
15:40 - parameter and you start and you end the
15:42 - function without ever assigning it if so
15:44 - this going to throw a compile error if
15:46 - you define an out parameter you must set
15:48 - it before you exit that function so
15:50 - these two parameters out and ref these
15:52 - are great ways to return multiple pieces
15:54 - of data from one function since normally
15:56 - you can only have a single return type
15:58 - you can only have a single type over
16:00 - here technically of course you can make
16:02 - a custom class a custom type to hold
16:04 - whatever data you want but you can only
16:06 - have a single type here whereas you can
16:08 - have multiple out parameters to return
16:09 - multiple pieces of data and just related
16:11 - to it is the in keyword this one force
16:13 - the parameter to only be used as input
16:15 - this is actually a keyword that you have
16:17 - to use if you're working with dots in
16:19 - order to handle all of the read write
16:21 - logic dots requires you to use the in
16:22 - keyword to Define read only components
16:24 - and alternatively if you're using C 7
16:27 - you can also use something called tupon
16:28 - so you can basically Define a type that
16:30 - inside holds multiple types and then you
16:32 - can access those types with item one
16:34 - item two and so on or alternatively you
16:36 - can give them proper names along with
16:37 - their proper types and you can indeed
16:39 - make functions that return that tupon
16:41 - with all of those pieces of data so as
16:43 - you can see C has tons of ways to get
16:45 - tons of data from any function you want
16:48 - then the next question can color ever be
16:50 - null so is it yes always is it no or yes
16:53 - as
16:54 - nullable and now this is one that sort
16:56 - of ended up as a trick question even
16:58 - though that was my goal so can color
17:00 - ever be null and the answer is no
17:01 - because it can never be null but the
17:03 - answer is also yes because you can make
17:05 - it null if you make it a nullable so
17:07 - technically both these are also correct
17:09 - basically color is a struct and structs
17:11 - can never be null again definitely make
17:13 - sure you know differences between those
17:14 - two so color cannot be null just like
17:17 - ins cannot be null BS cannot be null and
17:19 - so on however you can make any of those
17:21 - into null if you use a nullable variable
17:23 - so in C you just add a question mark
17:25 - directly after the type and that makes
17:27 - it a nullable with this you can make
17:29 - anything into null for example a vector
17:31 - 3 you can make that into a null you can
17:33 - have a vector three nullable for the
17:34 - Target position and then you can check
17:36 - if this one is null then I assume that
17:38 - means no target position and if it does
17:40 - have value then that is the target
17:41 - position for example on the video where
17:43 - I made the third person shooter
17:44 - controller for that one it does a ray
17:46 - cast in order to find the mouse position
17:48 - in the world however of course the ray
17:50 - cast has to hit something if there's no
17:51 - collider than the rast is never going to
17:53 - hit anything so in this demo the simple
17:55 - thing that I did was just made some
17:56 - invisible walls directly all over the
17:59 - world that way the r cast always hits
18:01 - something but alternatively I could have
18:02 - also done this I could have tried doing
18:04 - the r cast and then if it doesn't hit
18:06 - anything then I would just set the
18:07 - target position to null and then I would
18:09 - have the shooter logic that one test
18:11 - okay does Target position have value if
18:13 - so shoot towards that position if not
18:15 - then there's no value and final question
18:16 - what will happen on January 19 2038
18:19 - exactly at 3:00 a.m. 14 minutes and 7
18:21 - seconds so is it going to be the
18:23 - Armageddon I hope not since at that time
18:25 - I will only be around 40 is it going to
18:28 - be the end of Unix time or is it finally
18:30 - going to be the humif 3 release date now
18:33 - even if you don't know just by looking
18:34 - at these questions you can probably
18:35 - guess the answer is yep it is the end of
18:37 - Unix time and for this one hopefully
18:39 - nothing will happen but basically this
18:41 - is the point where the 32-bit number
18:42 - used for Unix time SS when that one
18:45 - pretty much rolls over like I mentioned
18:46 - in the previous question time stamps are
18:48 - insanely useful they're a super simple
18:51 - way to store time but of course since
18:53 - it's an INT that is constantly counting
18:54 - up since January 1970 if so if you use a
18:57 - 32 bit int number if so then at some
19:00 - point that is actually going to roll
19:01 - over and the maximum number that you can
19:03 - have is this value right here which if
19:05 - you convert that into a date it is going
19:07 - to turn into this date in January 19
19:09 - 2038 so this is pretty much exactly the
19:12 - same thing that happened on YK which
19:14 - actually at this point makes me question
19:15 - how many of you are young enough to not
19:17 - know what Y2K is basically that was the
19:20 - year 2000 and there was a home problem
19:22 - that could have happened because a lot
19:24 - of computer systems pretty much stored
19:26 - the last two digits of the year which of
19:28 - of course it works if you're in like
19:29 - 1970 1971 72 73 and so on but as soon as
19:33 - you get to 1995 96 97 98 99 and then
19:36 - goes back into zero if you don't handle
19:38 - that then all computers could go pretty
19:40 - crazy by suddenly thinking that we are
19:42 - now 100 years in the past so a lot of
19:44 - people had to work really tiredly to
19:46 - update all of those systems to make sure
19:48 - that they could handle difference going
19:49 - from 99 to 0 in most case I assume they
19:52 - just made four digits for the year so
19:54 - 1999 going into 2000 that wouldn't cause
19:57 - any issues and anyway so over here it's
19:59 - going to cause the exact same thing if
20:01 - no one handles it then it's suddenly
20:02 - going to turn into a massive negative
20:03 - number but a super simple fix is just
20:05 - instead of storing those unit time SS in
20:08 - a 32-bit int it can either be an
20:10 - unsigned 32-bit number or a simple
20:12 - 64-bit number so for example in C that
20:14 - would be the type long and for this I
20:16 - actually experienced this bug myself in
20:19 - my game game Corp in the original flash
20:21 - version I was storing the money
20:23 - including cents in a simple int so for
20:25 - example if something was a dollar it was
20:26 - storing the value 100 and eventually
20:29 - some people played the game long enough
20:30 - and found success inside the game enough
20:32 - to surpass $2.4 million and all of a
20:35 - sudden that flipped and they end up with
20:37 - negative 2.14 million so this is
20:39 - definitely something that I did not
20:40 - consider when I made that game and I
20:42 - definitely learned my lesson always be
20:44 - aware of the limits of whatever type you
20:45 - choose make sure that during gameplay it
20:47 - never goes past those limits and if so
20:50 - use a different type all right so those
20:52 - are a bunch of questions I hope you
20:53 - found them interesting I hope you learn
20:55 - something with this like I said you can
20:57 - always find the latest questions
20:58 - directly on the website or simply go to
21:00 - your user page and enable the question
21:01 - of day and you will automatically
21:03 - receive an email whenever a new question
21:05 - is generated that happens every 3 days
21:07 - so it's always a fun way to learn
21:08 - something new all right so thanks for
21:10 - watching and I'll see you next time