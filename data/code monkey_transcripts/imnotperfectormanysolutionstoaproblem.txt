00:00 - hello and welcome I'm your code monkey
00:01 - so usually I try to answer all the
00:04 - comments in my videos if you have a
00:05 - problem with the tutorial and you post
00:06 - it in the comments I'll probably see it
00:08 - but the internet is huge so every once
00:10 - in a while I randomly Google Unity Code
00:12 - Monkey to see if anyone is talking about
00:13 - or having questions with it on my videos
00:15 - sometimes their posts on Reddit Twitter
00:17 - or DND forums and when I did that
00:20 - recently I found out this red post on
00:22 - program humor it's a funny meme that is
00:24 - apparently related to my free course
00:25 - basically how this person was enjoying
00:27 - following along with the course but then
00:29 - was disappointed at some point because
00:31 - of five nested if statements looking
00:33 - down here on the comments there's a
00:34 - reference any timestamp it's referring
00:36 - to my 10 hour free course and it's on
00:38 - the lecture covering the delivery
00:40 - manager here it's a code for identifying
00:42 - if the player is delivering the correct
00:43 - recipe and just like the meme says the
00:46 - code indeed does have quite a lot of
00:47 - nesting in total it is five levels deep
00:50 - so first it Cycles through the wedding
00:52 - recipe list then it checks if it has the
00:54 - same number of ingredients if so then
00:56 - seconds through all the ingredients on
00:58 - that recipe then cycle through of the
01:00 - ingredients on the plate and test
01:02 - different as that ingredient and if so
01:04 - then yep it finds the ingredient and if
01:06 - just one ingredient is not found then
01:07 - the play contents is not matchy recipe
01:09 - but if not then the player delivered the
01:11 - correct recipe
01:12 - so that's what this logic is doing and
01:15 - this post is actually the perfect
01:16 - example for me to say two very important
01:18 - things which is how I'm not necessarily
01:20 - perfect and secondly how there are
01:22 - always many solutions to a ceiling
01:23 - problem what I mean by that is that even
01:25 - though I have quite a lot of experience
01:26 - I've been programming for over 20 years
01:28 - but just because I do something in some
01:30 - way it does not mean that it is the
01:32 - absolute best way or more importantly it
01:34 - does not mean it is the only way
01:36 - speaking specifically about this example
01:38 - now in general if you want to write good
01:40 - clean code you should minimize the
01:42 - amount of nesting in most cases 5 is
01:44 - likely way too much so this is
01:46 - definitely a good point but remember the
01:48 - most important of all of the clean code
01:49 - rules is simply to help you minimize
01:51 - complexity and make the code easy to
01:53 - understand that's the ultimate goal of
01:55 - the rules like don't do more than three
01:57 - levels of nesting or pick the right name
01:59 - for the variable or focus on decoupling
02:01 - the going with these rules is simply to
02:03 - help you write better code that is
02:05 - easier to manage and understand so with
02:07 - that in mind looking at this code the
02:08 - question is is this understandable I can
02:11 - say that I made this course four months
02:12 - ago so it's definitely been a while
02:14 - since I was really deep in this code
02:15 - base and yet honestly within 10 seconds
02:18 - of looking at this code I could
02:19 - immediately tell what he was doing I can
02:21 - see that it's cycling through the list
02:22 - of waiting recipes I can see that it's
02:24 - testing the same number of ingredients
02:25 - see if all of them match and if so the
02:27 - recipe matches so for me even though
02:29 - this technically breaks the role of
02:31 - going over three levels of nesting it
02:32 - still achieves the ultimate goal of
02:34 - being understandable however again like
02:36 - I said I'm not perfect I'm just one
02:38 - person so while this is perfectly
02:39 - understandable to me it might not be to
02:41 - you and if so that's perfectly fine
02:43 - perhaps you really prefer to follow that
02:45 - rule like in law if so then you could
02:47 - refactor the cone you could do it like
02:49 - this so first of all instead of checking
02:51 - if they have the same number of greens
02:53 - you could check if they don't have and
02:54 - if not you continue this way the rest of
02:56 - code is not inside the second lesson
02:58 - level and then after that you can
03:00 - obviously extract the logic into a
03:02 - separate function so here's a symbol
03:04 - function do the plate contents match
03:05 - recipe and then the second one does the
03:07 - plate have a certain ingredient so now
03:09 - with this code it all works it's only
03:11 - the same does the exact same thing and
03:12 - now it only goes up to two levels of
03:14 - nesting the logic is nicely separated
03:16 - into separate functions so the big
03:18 - question is is this code easier to
03:20 - understand now for me personally I find
03:22 - them both equally valid I have no
03:24 - trouble following either of these but
03:26 - again that's just me if you prefer the
03:27 - second one then absolutely go ahead and
03:29 - do that remember that what you see in my
03:31 - videos is not the only way to do
03:33 - something there are always a ton of
03:35 - methods and different approaches to
03:36 - solving any problem for example I've
03:39 - made some videos on multiple ways you
03:40 - can find Targets or multiple ways you
03:42 - shoot projectiles in most cases there's
03:45 - always more than one way to achieve a
03:46 - certain result now what I can promise
03:49 - you is that when I make a tutorial on
03:50 - something like for example how to pick
03:52 - up objects the code in that video
03:54 - achieves a desire result so in that
03:56 - example the code in that video does
03:57 - teach you how to pick up objects but it
03:59 - absolutely does not mean that's the only
04:01 - way to pick up objects maybe your game
04:03 - has a specific design where you need to
04:05 - pick up objects in some specific way and
04:07 - if so perhaps a different approach would
04:09 - be better in your specific scenario so
04:11 - always remember that tutorials are
04:13 - really just starting points they're
04:14 - meant to guide you in the right
04:15 - direction and give you ideas but every
04:18 - game is different so every
04:19 - implementation will be slightly unique
04:21 - and also even though I'm quite
04:22 - experienced I'm definitely not the best
04:23 - program in the world I'm constantly
04:25 - learning one example is a very long time
04:27 - ago I made an inventory system in there
04:30 - I taught the tutorial on how to make it
04:32 - just like I would do it back then and
04:34 - back then I preferred making systems as
04:36 - much code base as possible so for the
04:38 - items I defined them using an enum and
04:41 - that does work the code in that video is
04:43 - perfectly functional and it's a
04:44 - perfectly valid way of doing an
04:45 - inventory system
04:47 - but if I were to make that inventory
04:48 - system again nowadays I would use
04:50 - scriptable objects for the item
04:51 - definitions kind of like I did in the
04:54 - hydronia crafting video I would do that
04:56 - simply because nowadays I do value using
04:58 - the editor a bit more and being less
05:00 - strict on just using Code so once again
05:02 - multiple valid ways of achieving the
05:04 - exact same result as you were as a
05:06 - developer you might change what is your
05:07 - preferred way of doing something and
05:08 - that's perfectly normal and like I said
05:10 - I'm not perfect so well in this case
05:12 - personally I don't think the way I did
05:14 - it is a mistake in other case it
05:16 - absolutely could be possible for me to
05:17 - make some mistake I have a lot of
05:19 - experience but I'm definitely not John
05:21 - Carmack that's the same for me as for
05:23 - any instructor whenever you watch some
05:25 - deteriorly you might indeed notice some
05:26 - say the instructor missed or maybe just
05:28 - some better way of solving the same
05:30 - problem that works best in your specific
05:31 - scenario that's perfectly possible some
05:33 - of that to say take what you learned
05:35 - from my videos or any tutorials simply
05:37 - as guides to help you on your Game Dev
05:38 - Journey but don't be afraid to adapt it
05:41 - to your own personal style and way of
05:42 - working remember the ultimate goal is
05:44 - really to learn how to make games so
05:46 - grab whatever normal you can find from
05:48 - any source and use it to help you
05:49 - achieve that goal alright hope that's
05:51 - useful check out these videos to learn
05:53 - some more thanks to these awesome
05:55 - patreon supporters for making these
05:56 - videos possible thank you for watching
05:58 - and I'll see you next time
06:03 - [Music]