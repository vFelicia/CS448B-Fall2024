00:00 - in this video we're going to make a
00:01 - pixelated shader in shadowgraph we're
00:03 - going to pixelate our sprite and easily
00:05 - animate it through code let's begin
00:10 - [Music]
00:14 - hello and welcome I'm your code monkey
00:17 - and this channel is all about helping
00:18 - you will learn how to make your own
00:20 - games with in-depth tutorials made by a
00:22 - professional indie game developer so if
00:23 - you find the video helpful consider
00:25 - subscribing okay so this what we want to
00:27 - make over here is my character I'm
00:29 - looking perfectly normal now by pressing
00:31 - a button and there you go my character
00:33 - becomes completely pixelated so the
00:35 - sprite is now made up of very blocky
00:36 - pixels and by pressing another button
00:38 - there you go we can animate the pixelate
00:41 - amount and now it goes back to normal
00:42 - so click pixelated and back to normal
00:45 - here is the shader inspector where you
00:48 - can see our pixelated amount so at zero
00:50 - the sprite has no pixelation so it looks
00:53 - perfectly normal and as we increase it
00:55 - becomes more and more pixelated so by
00:57 - just dragging the slider we can make it
00:58 - more or less pixelated alright so this
01:01 - is our goal let's get to it ok here we
01:04 - are in our empty scene let's begin by
01:06 - making our shader so we simply going to
01:08 - create a new shader go into the 2d
01:11 - renderer and make a sprite McGrath let's
01:14 - call this our pixel a trailer alright so
01:19 - here we are in shooter graph and we have
01:21 - our sprite light master node now for
01:23 - starters we need a texture so let's make
01:25 - a new property of type texture TD and
01:27 - we're going to call this our main text
01:32 - okay here it is with the reference
01:34 - underscore main text this is the exact
01:36 - name you need to use for the primary
01:38 - texture now we drag the texture onto our
01:40 - board and we need to sample it so we get
01:43 - a sample node and we just pass in the
01:47 - RGB onto the color node and you're right
01:50 - click and select the quad okay there's
01:51 - our basic texture so let's test it out
01:54 - go up here to save it and now we make a
01:57 - new material here we have our material
02:03 - and we just select in here onto shader
02:05 - graphs and select our pixelated shader
02:07 - alright there it is with our texture
02:09 - selected so let's test if there's a
02:11 - character I'm working perfectly normal
02:13 - alright so far so good now let's make
02:15 - our pixelated shader now in order to do
02:17 - that what we need to do is play around
02:19 - with the UV values so here on the sample
02:22 - texture now you can see that it takes a
02:23 - UV input and we can also create a node
02:27 - simply
02:27 - giving so this homes ruv and as you can
02:30 - see by the colors the X&Y are constantly
02:33 - increasing so for example we can use the
02:36 - preview node in order to easily see the
02:38 - values so the preview node which takes
02:39 - an input and then shows it in here what
02:41 - it's receiving so before that we can add
02:44 - a split node in order to split our rgba
02:47 - into separate and then in here you can
02:49 - see the red going from black to white so
02:51 - from 0 to 1 then you can see the green
02:53 - going from down to up so the R is
02:55 - increasing along the x-axis and DG along
02:59 - the y-axis and these are all normalized
03:01 - values so this is 0 and this is 1 now if
03:04 - we just pass our basic UV onto the UV
03:06 - node there you go nothing happens since
03:08 - it's receiving perfectly normal movies
03:10 - so before we pass it in there we're
03:12 - going to modify something in here now in
03:15 - order to have our pixelated effect what
03:17 - we're going to do is make sure that this
03:18 - gradient isn't perfectly smooth but
03:20 - rather it has very discrete values and
03:23 - we're going to do that is by multiplying
03:25 - then foreing and the vine okay so let's
03:27 - see how we do that first we go up here
03:29 - and create a new vector one which is
03:31 - essentially a fault
03:32 - and we're going to call this our pixel
03:34 - pixelated amount okay so here we have
03:38 - our property let's drag it onto the
03:39 - board all right and now here the first
03:41 - thing we're going to do is take our UV
03:43 - and multiply it by this pixelated amount
03:45 - so we make a multiply node we multiply
03:49 - this one onto this one and now for
03:51 - example we can use the preview in order
03:53 - to see what it's doing so we put the
03:54 - preview in there and let's look at the R
03:57 - and there you go so right now it's
03:59 - falling black because we're multiplying
04:00 - by zero but let's try multiplying by 10
04:03 - and there you go right now it's a lot
04:05 - more intense since again pure white
04:07 - represents 1 so all the values above 1
04:09 - are going to show as white so by doing
04:11 - this essentially we made it go from 0 to
04:14 - 10 so after we multiply then we can
04:17 - start getting some jagged values by
04:20 - utilizing a floor node so for in case
04:23 - you don't know it's a simple
04:24 - mathematical operation it essentially
04:26 - discards the decimal values so for
04:28 - example 1.7 becomes just 1 so first we
04:32 - multiply everything by 10 then we take
04:34 - this output and we for all of it and
04:36 - there you go right now you can already
04:37 - see the discrete values and then let's
04:40 - put the output into
04:41 - split so we can preview it and just like
04:43 - that you can already kind of see the
04:44 - effect so over here we have an area that
04:46 - is full-on zero and over here an area
04:48 - that is fawn above one so in here we
04:51 - already have a bunch of discrete values
04:52 - going from over here we have zero then
04:55 - here we have one and two and three and
04:56 - so on but we can't see it since in here
04:58 - we only see normalized values so after
05:01 - we multiply and we for it then we can
05:03 - simply divide it in order to go back to
05:05 - a zero to one scale so we add a divine
05:08 - node and we're going to divide this
05:10 - output by the same as our pixelated
05:13 - amount and just like that you can
05:14 - already see the UV having some very
05:16 - distinct segments and if we pass it on
05:18 - to our preview node yep there you go
05:20 - exam like that so essentially we are
05:22 - splitting our UV node into ten different
05:24 - segments and now if we pass this along
05:27 - into the UV node and there you go you
05:29 - can already see the effect now obviously
05:31 - ten is way too small so let's increase
05:33 - it by quite a bit and if I put out a
05:35 - hundred yep there you go the shape is
05:37 - visible but it is indeed pixelated all
05:39 - right awesome
05:40 - so let's test it out just like this and
05:43 - yep there's our character and looking
05:44 - very pixelated great all right now let's
05:47 - make the pixel later mounted slider so
05:48 - we can easily change it so here we just
05:50 - go into our properties and change the
05:52 - mode from default into a slider set the
05:54 - minimum at zero and maximum let's say at
05:56 - 200
05:57 - okay let's see okay here it is with our
06:00 - inspector so if I increase a slider yep
06:02 - there you go unless pixelated and I
06:04 - decrease and there you go you can see
06:05 - the nice effect all right awesome now
06:08 - the name should probably be backwards
06:10 - meaning when pixelated amount is at zero
06:12 - it should not be pixelated at all and
06:14 - when at maximum it should be fully
06:15 - pixelated also the value really should
06:18 - be normalized so just going from zero to
06:19 - one so let's do both of those so here in
06:22 - our shader let's define a constant for
06:24 - our max pixelated amount so we do a
06:28 - vector one and let's put that 200 now
06:31 - you could also expose this if you want
06:32 - it but in this case making it a local
06:34 - constant won't do just fine
06:36 - and now on the pixel and amount let's
06:37 - make it go from zero just to one so
06:40 - let's defaulter at 0.5 and now before we
06:43 - do any of this we first multiply our
06:46 - pixelated amount by our constant so this
06:49 - one by this one yep and now it's this
06:52 - output that we use both
06:53 - here and then on our divide note yep all
07:02 - right so this should be working with
07:03 - normalized families now in order to flip
07:05 - it over here we can add a 1 minus node
07:08 - so this one does exactly as it sounds
07:11 - like it takes 1 minus a certain value so
07:14 - we take our pixel in amount and we do a
07:15 - 1 minus node and then we apply it to our
07:17 - multiplication any of just like that so
07:20 - now for here I'm pixel in amount we can
07:22 - go from 0 all the way to 1 and yep just
07:26 - like that so let's see okay here we are
07:28 - with our character and our pixelated
07:30 - amount slider as you can see it goes
07:31 - from 0 all the way to 1 so at 0 we have
07:34 - almost no pixelation and if we move it
07:37 - past 1 there you go it becomes insanely
07:39 - pixelated so just like this we have a
07:42 - nice leather working with enormous own
07:44 - right awesome now over here on 0 you can
07:47 - still see some pixelation the reason for
07:49 - that is because even when we set it to 0
07:50 - we are using our constants so in this
07:53 - case just 200 samples so one way to
07:55 - solve this would be to simply increase
07:57 - this to a very large number so that
07:59 - would solve it but it wouldn't really be
08:01 - very pretty so another approach we can
08:03 - take is to add some nice logic so here
08:05 - in our shader let's do a test to see if
08:08 - the pixelated amount is 0 so in order to
08:10 - do a simple if we can add a compare node
08:14 - so we do a comparison between our
08:17 - pixelated amount and 0 so this one
08:19 - outputs a boolean and then we can also
08:22 - create a branch node so this one as you
08:25 - can see takes a boolean and then has a
08:26 - true and false which comes out here on
08:28 - the output so this is essentially an
08:31 - if-else so if the boolean over here is
08:33 - true it will return the true if it's
08:35 - false it on return the false so when
08:37 - this one is true it means that the
08:39 - pixilated amount is 0 and we do not want
08:41 - to pixel it so when it is true we want
08:44 - to output the original UV so this one in
08:46 - here and when it is false we want to
08:48 - output the pixilated UV which is this
08:50 - one in here so now we move it all the
08:53 - way in here ok so that's it then we take
08:59 - the output from this branch and we pass
09:01 - it on to the UV and yep just like this
09:04 - so here we're using two very nice nodes
09:06 - to work with Bali
09:07 - logic all right this should be working
09:09 - let's test okay so here we are and let's
09:11 - drag the slider all the way down to zero
09:14 - any up there you go with zero it has
09:15 - absolutely no pixelation whatsoever it
09:18 - is receiving the exact perfect original
09:20 - UV and as I increase just a tiny bit
09:22 - there yo pixelation becomes visible so
09:25 - at zero
09:26 - no pixelation as soon as i increase the
09:28 - effect gets a point right awesome
09:30 - so now when we have zero we have a
09:32 - perfect sprite now let's see how we can
09:34 - animate this valley to play around and
09:36 - over here I have this script as you can
09:38 - see it's extremely tiny only 30 lines
09:40 - long and what we have is a material
09:43 - reference for our material and then on
09:45 - keypress we are setting a target
09:47 - pixelated amount so here on let's put a
09:50 - maximum of 0.7 so when we press T we're
09:53 - going to set the pixel amount to alert
09:55 - on to towards 0.7 and when we press the
09:59 - Y it will go back to zero which is
10:00 - essentially no pixelation so here we're
10:03 - just playing around with these twofold
10:04 - values and nor to a point to our
10:07 - material this is what we do we go into
10:08 - the material we call set float we pass
10:11 - in the reference name and then we set
10:13 - our float amount so there is a very
10:15 - simple script let's see okay so here we
10:18 - are in yep there's our character looking
10:20 - completely normal and I press this
10:22 - button and there you go it becomes
10:24 - completely pixelated with a nice
10:25 - animation and now I press this button
10:27 - and there you go it goes back to normal
10:29 - so press pixelate prax and back to
10:31 - normal so here we have our nice
10:33 - pixelated effect being animated through
10:35 - a nice script and again here it is in
10:37 - sheet graph and we're doing is playing
10:39 - around with the UV and doing some simple
10:41 - math in order to get some fixed value
10:43 - increments and with that we get some
10:45 - nice pocket pixels so here is the effect
10:47 - again and as you can see it looks great
10:49 - as always you can download the project
10:51 - files in each choice from ent code
10:52 - monkey comm subscribe to the channel for
10:54 - more ent tutorials post any questions
10:57 - you have in the comments and I'll see
10:58 - you next time
11:02 - [Music]