00:00 - hello and welcome i'm your code monkey
00:02 - and in this video we're going to look at
00:03 - why you should not make all of your
00:05 - variables public
00:07 - if you want to expose some variable in
00:08 - the editor you really should keep it
00:10 - private and instead add the serialize
00:12 - field attribute in order to expose it
00:14 - in order to understand why that is the
00:15 - better method you need a basic
00:17 - understanding of clean code principles
00:19 - if you prefer a more guided path with
00:22 - step-by-step lectures then check out my
00:23 - complete courses
00:25 - learn how to make a builder defender
00:26 - game using c-sharp just like i make my
00:28 - own steam games
00:30 - or learn how to make games internally
00:31 - using visual scripting
00:33 - or learn all about unity with the
00:35 - ultimate overview course which contains
00:36 - over 13 lectures each covering a
00:38 - different tool or feature of the engine
00:40 - to help you make
00:41 - better games faster i'm always available
00:43 - in the courses q a section answering
00:44 - your questions
00:45 - every single day so check out all the
00:47 - courses with the link in the description
00:48 - also if you need some tdr check out the
00:50 - humble bundle link in the description
00:52 - with a massive amount at a super deep
00:53 - discount now first of all if you're not
00:55 - familiar with the term clean code i
00:57 - would highly recommend the book code
00:59 - complete
00:59 - once you read it you will increase your
01:01 - skills as a programmer tenfold
01:03 - it is definitely the one thing that i
01:04 - have read with regards to programming
01:06 - that had the biggest positive impact on
01:08 - my code quality
01:09 - a really important part of writing clean
01:11 - code is minimizing access as much as
01:13 - possible
01:14 - so every field every variable or class
01:17 - really should be as limited as possible
01:19 - while allowing it to achieve its purpose
01:21 - this is one of the best methods you have
01:23 - for managing complexity and ensuring
01:25 - your code is still
01:26 - easy to understand even as it grows when
01:28 - working with unity
01:29 - the editor and the fact that you can
01:31 - expose certain fields is extremely
01:33 - useful
01:34 - you can test out various values and
01:35 - easily iterate upon your game
01:37 - that's one huge benefit now when you
01:39 - want to expose a film the editor you can
01:42 - simply make it pollen so for example
01:43 - public float speed so you just do that
01:47 - and in period shows in the editor so you
01:49 - can now again
01:50 - very easily just modify this even modify
01:52 - this one runtime so very good for
01:54 - iteration
01:55 - however doing it this way means that
01:57 - this field is now accessible to every
01:59 - other part of our code
02:00 - so every other class in our code base
02:02 - can now read and modify
02:04 - this field now this can cause a lot of
02:06 - nasty issues and make your home codebase
02:08 - a complete mess with tons of scripts
02:10 - accessing and modifying tons of other
02:11 - scripts
02:12 - so perhaps you accidentally modify this
02:15 - field from another class
02:16 - and the whole thing breaks because it
02:17 - wasn't supposed to be modified
02:20 - or maybe just a bunch of scripts are
02:21 - reading from this field but you want
02:23 - those scripts to get a different value
02:25 - than what's exactly stored here or you
02:26 - just simply want to know when the field
02:28 - is read or modified
02:30 - now if you make everything public and
02:32 - you read and write from anywhere
02:34 - then very quickly your game will become
02:35 - a mess of unmanaged spaghetti code
02:38 - for example you have a player class with
02:40 - a public speed field
02:41 - and then the ui class is reading
02:43 - directly from that field
02:44 - at the same time the upgrade class
02:46 - sometimes modifies that
02:47 - maybe the enemy class also directly
02:49 - changes it to slow the player down to
02:51 - the specific attack
02:52 - and maybe there's multiple enemy types
02:54 - all of them with a different amount of
02:55 - slowdown
02:57 - now you find a bug where the speed is
02:58 - incorrect in order to find the cause you
03:00 - now have to search every single one of
03:02 - these classes since the bug could be
03:04 - anywhere maybe the enemy is setting the
03:06 - player speed when it shouldn't
03:07 - or maybe the upgrade logic is incorrect
03:09 - and it's applying a slowdown instead of
03:11 - a speed up
03:12 - it could be on any of these classes or
03:14 - any other class in your code base
03:16 - because any of those could possibly
03:17 - modify the field and since they are
03:19 - accessing the film directly it's very
03:21 - tricky to identify where and when
03:23 - the variable is changing the point is
03:25 - you now have to keep
03:26 - all of this logic of your entire code
03:28 - base in your brain as you try to search
03:30 - for the cause of the problem
03:31 - so ideally your code should be as
03:33 - limited as possible
03:35 - now if this field is meant to be used
03:36 - solely inside this class and nothing
03:38 - else then really this should be private
03:41 - doing so means no other class anywhere
03:43 - else in the code base can read and write
03:45 - this variable which is exactly what we
03:46 - want for example if i define
03:49 - another class
03:56 - here if i've got a second class with a
03:58 - reference to my first one and i try to
04:00 - access the speed variable there you go
04:01 - it's inaccessible due to its protection
04:03 - level
04:04 - whereas if this was public then i could
04:06 - modify that one from anywhere else in my
04:08 - code
04:08 - so that's what we're trying to prevent
04:10 - making it private then we simply cannot
04:13 - do what we're doing here
04:14 - writing clean code is all about managing
04:16 - complexity you want to minimize as much
04:18 - code as you need to keep in your brain
04:20 - at all times
04:21 - and when you make something as private
04:23 - when you see private
04:24 - you know for a fact that no other piece
04:26 - of code outside of this class can
04:28 - interact with this field
04:29 - so again that is really good for helping
04:31 - us manage complexity that means that if
04:33 - there's an error anywhere related to
04:35 - this class in this variable you know for
04:37 - a fact that the error has to be
04:38 - somewhere inside of this class since no
04:41 - other class can access that field
04:43 - but as soon as you make it private it
04:44 - removes one of the biggest benefits in
04:46 - unity which is to expose it in the
04:48 - editor
04:49 - like for example you have a player
04:50 - character and you want the speed
04:52 - variable to be exposed in the editor so
04:53 - you can easily play around and find the
04:55 - perfect speed value
04:56 - what that means is that in this case you
04:58 - want to keep the variable private so
05:00 - your code stays nice and clean
05:02 - but you also want it to be exposed in
05:04 - the editor and only in the editor
05:06 - so the solution to that is to keep it
05:08 - private and simply add the attribute
05:10 - serialize field and now the variable is
05:13 - still private
05:14 - so i still cannot access it from a
05:16 - second class
05:17 - so nope i still can't do this however
05:20 - now it does show up over here in the
05:21 - editor
05:22 - so i can now very easily iterate upon
05:24 - this value in order to find the perfect
05:25 - one
05:26 - and again the whole point is that this
05:28 - is not private
05:29 - so that still means that this field can
05:31 - only be accessed and modified by the
05:33 - code inside of this class
05:34 - and again that really helps you manage
05:36 - complexity so if there's any error
05:38 - whatsoever involved in this field you
05:40 - know for a fact that the error has to be
05:41 - somewhere inside of this class because
05:43 - you know guarantee that no other class
05:46 - anywhere else in the code base can
05:47 - modify this field
05:49 - so you can now safely iterate upon this
05:50 - value in the editor while knowing that
05:52 - all the code is still nice and clean
05:54 - with minimal complexity
05:55 - back to the previous example if you
05:57 - still wanted to modify the speed of the
05:58 - player
05:59 - you would instead make a public function
06:01 - to change it and now you could easily
06:02 - analog to see when this function was
06:04 - being called and who was calling
06:06 - it you could add some validation to make
06:08 - sure the field wasn't set to an invalid
06:10 - value
06:10 - and you could fire off an event inside
06:12 - that function for when the speed changes
06:13 - which the ui would then listen to
06:15 - instead of reading the field directly on
06:17 - every frame
06:18 - pushing this even further you would
06:19 - probably make the enemy apply some sort
06:20 - of slow down state instead of directly
06:22 - setting the speed
06:23 - the main point is the film variable is
06:25 - now directly inaccessible from outside
06:27 - of this class
06:28 - so any bugs would have to exist inside
06:30 - of this class and you could safely
06:32 - ignore the rest of your code base while
06:33 - you're focused on fixing this one bug
06:36 - sometimes i see people say something
06:37 - like well why don't i just make every
06:39 - single field public
06:41 - but that is really the opposite of what
06:43 - you should always be thinking
06:44 - you should always make your fields
06:46 - private by default and only make them
06:48 - public if you have a very good reason
06:50 - why
06:50 - it needs to be public so the question
06:52 - should be why should this not
06:53 - be private as your code becomes bigger
06:56 - and more complex keeping this simple
06:57 - rule in mind will help you immensely
06:59 - now i want to make one note here which
07:02 - is if you've seen the official tutorials
07:04 - made by unity you might have noticed
07:05 - that they do use the public parameter
07:08 - now the reason for that is not because
07:10 - the people at unity don't know better
07:12 - everyone that i've met from unity is
07:13 - very capable and very good at their job
07:15 - now the reason for that is simply for
07:17 - simplicity when teaching some complete
07:19 - beginners
07:19 - it is much easier to simply teach people
07:22 - to just make something public when they
07:23 - want to edit something in the editor
07:25 - rather than having to teach them clean
07:27 - code principles and attributes
07:29 - so as you are starting out keeping it
07:30 - simple takes precedence over writing
07:32 - some good clean code you can always
07:34 - learn that later
07:35 - so my hope with this video is that it
07:36 - gets recommended to beginners just after
07:38 - they learn the absolute basics
07:40 - so if it's your first time writing code
07:42 - then using public won't avoid
07:44 - any unnecessary complexity in the
07:46 - learning process
07:47 - however as you get more capable and
07:49 - you'll learn more and more then you
07:50 - should start to learn how to write
07:52 - better code rather than just writing
07:53 - code that works so if that's the stage
07:56 - that you're at right now then i hope
07:57 - that
07:58 - this video has shown you the benefits of
07:59 - writing clean code and why you should
08:01 - not abuse public
08:02 - again if you're looking for a more
08:04 - guided path with step-by-step lectures
08:06 - then check out my complete courses
08:08 - alright hope that's useful check out
08:09 - these videos to learn some more
08:11 - thanks to these awesome patreon
08:13 - supporters for making these videos
08:14 - possible
08:15 - thank you for watching and i'll see you
08:16 - next time