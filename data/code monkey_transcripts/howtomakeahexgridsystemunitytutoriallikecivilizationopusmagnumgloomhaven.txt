00:00 - hello and welcome I'm your code monkey
00:01 - here let's look at how to take a square
00:04 - grid and convert it into a hex grid we
00:06 - want to change the shape of the grid and
00:07 - also be able to identify what grid
00:09 - position belongs to a certain world
00:11 - position so a while ago I launched my
00:13 - turn-based strategy course it's a really
00:15 - awesome course that will help you take
00:17 - your skills from beginner to Advanced
00:18 - the reviews have been extremely positive
00:20 - so I'm really happy with how it came out
00:21 - throughout the whole course I'm
00:23 - constantly talking about writing good
00:24 - clean code and focus on keeping a good
00:26 - code architecture because of that the
00:28 - final set of the course is very
00:30 - adaptable and easily expandable so in
00:32 - the last lecture I asked what would
00:33 - people like to see in future free
00:34 - updates and the most common request is
00:36 - hex grid so that's what I've been
00:38 - researching now if you just want a
00:40 - simple math answer to test if a certain
00:42 - point is inside a hex I already covered
00:44 - that in a separate video that one is
00:46 - focused solely on the math for doing
00:47 - that test it's really great and I
00:49 - definitely encourage you to watch that
00:50 - video especially if you're not a math
00:52 - expert just like I'm not learning how to
00:54 - do that is relatively simple and will
00:56 - help you boost your math skills the goal
00:58 - in this video is a hex grid which
01:00 - doesn't actually require that logic for
01:02 - testing a point it's mostly just say it
01:04 - doesn't check like I said I'm harder to
01:06 - work on the free expansion for the
01:07 - course making hex reads work with the
01:09 - entire rest of that project but since
01:11 - this is such a requested and useful
01:12 - topic I figured I'd also make a
01:14 - standalone video based on the grid
01:16 - system that I've built over many videos
01:17 - on this channel and for this topic it's
01:19 - actually surprisingly difficult to find
01:21 - some good info on it if you search for
01:23 - Unity hex you will only find two things
01:25 - tutorials making visual hexes either
01:27 - mesh based or with a town map and
01:29 - tutorials on making hex logic but based
01:31 - on using mesh objects and doing some
01:33 - expensive raycasts those tutorials are
01:35 - great if that's exactly what you're
01:36 - looking for but while that approach does
01:39 - work it's not scalable if you create an
01:41 - object with a mesh and a physics on
01:42 - leather you will very quickly reach the
01:44 - limits of that method so you won't be
01:46 - able to make a game with a massive grin
01:47 - so over here on let's do it properly
01:49 - with some basic math now before we get
01:51 - to the code let's do a quick overview of
01:53 - what we're trying to build here over
01:55 - here is a simple image of a basic Square
01:57 - grid so all the positions are placed
02:00 - neatly in a simple square shape each
02:02 - grid position has a certain cell size
02:04 - for both the width any height now over
02:06 - here is the hex grid that we want to
02:08 - build the main difference between them
02:10 - is this offset on the X for each odd row
02:12 - so row 0 starts off here which would be
02:15 - on Samsung like zero zero however for
02:17 - Row one we need to offset it by a little
02:19 - bit and the offset position is going to
02:21 - be half the cell size and the other very
02:23 - important thing is the Z or the Y
02:25 - position by the way all the logic here
02:27 - works exactly the same in 3D or 2D
02:29 - meaning it's exactly the same in X Y or
02:31 - an exact plane so the code can easily be
02:34 - converted into either xbase or Y based
02:36 - so like I said over here the only
02:38 - difference is the Y offset when a
02:40 - squared we're in each row is exactly one
02:42 - cell size above the previous one however
02:45 - over here on the X grind the Y offset
02:48 - for over here the first row is not
02:50 - exactly the cell size if we were to
02:52 - offset upwards by the sound size then
02:54 - instead of being positioned in here it
02:56 - would actually be positioned in here and
02:57 - if we used half cell size then we would
02:59 - end up here so it's neither of those in
03:01 - order for this to be offset perfectly
03:03 - the offset has to be 75 the size so that
03:07 - is half the cell size plus a quarter of
03:08 - cell size or 0.75 of the size now these
03:11 - numbers are extremely important to get
03:13 - right in order to make sure that our hex
03:14 - grid matches perfectly with that we're
03:16 - going to be able to position all of our
03:18 - hex grid positions then we need to
03:20 - incorporate that into our coordinate
03:22 - conversion logic meaning converting to
03:24 - and from grid positions to warm
03:26 - positions so in order to convert from a
03:28 - grid to a wrong position that one is
03:30 - pretty simple we take the X Y grid
03:32 - position like for example over here grid
03:34 - position one zero we take that one and
03:36 - we just multiply it by the cell size so
03:38 - in this case if we got a cell size of 10
03:40 - then position 1 0 would be in one
03:42 - position 10 0. and then on top of that
03:44 - we also need to test if it's an odd or
03:46 - even row so if it is an odd row like for
03:48 - example we're testing four zero one then
03:51 - we do the same basic math so in this
03:52 - case this would be one position 0 10 but
03:55 - then we check if this is an odd row if
03:57 - so then we add an X offset and that X
03:59 - offset is going to be by half the cell
04:00 - size so converting grid positions to one
04:03 - position is actually only pretty simple
04:04 - the tricky part is on the warm position
04:06 - to grid position for that when we
04:09 - receive a warm position we need to test
04:10 - which position that it belongs to now
04:13 - with the square grid that is pretty
04:14 - simple we can just round the position
04:16 - and it works so position over here is
04:18 - going to round to here position down
04:19 - here runs to there so all of it works
04:21 - however on a hex grid just rounding does
04:24 - not work for example here if we are
04:26 - above this line and we test the point in
04:28 - here just rounding it will likely give
04:30 - us this point here which would obviously
04:32 - not be correct so for this to work we
04:35 - first round the point to get a rough
04:36 - close the squared position so let's say
04:38 - rounding would round into this one then
04:40 - we take that node and we grab all six of
04:43 - its neighbors so the one to the left
04:44 - left down this one this one this one and
04:48 - this one we grab all six neighbors of
04:50 - the rounded grid position then we cycle
04:52 - through all of them and we do a simple
04:53 - distance check to the origin so check
04:55 - distance this one this one this one this
04:57 - one and we would find out that this one
04:58 - is indeed the closest with that logic we
05:01 - can indeed convert a worm position into
05:03 - the closest accurate grid position okay
05:05 - so that's everything we need to build so
05:07 - let's do it if you use unity in any way
05:09 - definitely get my ultimate TNT overview
05:11 - course it won't teach you how to use the
05:13 - many tools and features that ENT has so
05:15 - you can be more effective and make
05:16 - better games faster there's no need to
05:19 - build something yourself from scratch if
05:20 - there is already a built-in tool that
05:21 - works great UNT has tons of them that
05:24 - you might not know about the course
05:25 - already has 15 lectures each covering a
05:27 - different two-hour feature of the engine
05:28 - and is constantly getting free updates
05:30 - or if you prefer step-by-step courses on
05:33 - making a specific game check out my
05:34 - Builder defender course I also have a
05:37 - phone course only on using visual
05:38 - scripting there's a single line of code
05:40 - in any of those games and if you're past
05:42 - the beginner stage and you want a guided
05:44 - path to help you make the jump from
05:45 - beginner to Advanced and get my
05:47 - turn-based strategy course it will help
05:49 - you massively improve your programming
05:50 - and Game Dev skills on all courses I'm
05:53 - always available in the Q a section
05:54 - answering all of your questions every
05:56 - single day so check them out through the
05:57 - link in the description okay so let's
05:59 - implement the design for our hex grid
06:01 - system like I said it's going to be
06:02 - based on my grid system which I've built
06:04 - over several videos on channel over here
06:07 - I have my grid class working so I got a
06:09 - grid with a certain width and height and
06:11 - as you can see it has a simple square
06:13 - shape now the goal is to convert this
06:15 - shape into a hex shape so here is the
06:17 - code creating that we're in all I do is
06:19 - Define a certain width certain height
06:20 - and a certain cell size then just create
06:23 - a grid using my grid class give it the
06:25 - width height the cell size position on
06:27 - Vector 3.0 then just cycle through the
06:30 - entire thing and just instantiate a
06:31 - prefab on each grid position again if
06:33 - you you don't understand this code go
06:35 - watch the other videos on the grid
06:36 - system this system was built from
06:38 - scratch starting from the very first
06:39 - video now the first thing we're going to
06:41 - do is handle the conversion from grid
06:42 - position to warm position first we want
06:44 - to do that so we can generate the
06:46 - correct worm position so we can position
06:47 - all of our visuals but before we do that
06:50 - let's actually duplicate this class I
06:52 - don't want to destroy my Square query
06:53 - system that one is still useful so here
06:56 - on my grid system just going to
06:57 - duplicate this and call this the grid
06:59 - xxz
07:01 - then inside the script just need to
07:03 - change all of these references so grid
07:05 - hex said
07:07 - just in there over here on the
07:08 - Constructor on the funk and I think
07:11 - that's it
07:12 - okay great so this is script
07:14 - and on the testing script just change
07:16 - the class name so from that one into
07:18 - that one so just replace all these and
07:20 - let's also rename this variable to grid
07:22 - hex XZ what it says just make sure
07:25 - nothing breaks and yep we still have a
07:27 - square grid okay so far so good now here
07:29 - in the editor I'm going to swap out the
07:31 - visual so I'm using this one which has
07:33 - just a basic square and I'm going to
07:35 - swap it out for this one which has a hex
07:37 - Sprite I drew this perfect hex in
07:39 - Photoshop Photoshop actually has a great
07:41 - tone for making perfect hex shapes I
07:43 - mentioned that in the previous hex video
07:45 - or you can also download the project
07:47 - files for this video and the Sprite
07:48 - won't be included so over here just
07:50 - swapped out the prefab and let's run and
07:53 - yep it is indeed spawning the hex visual
07:55 - but obviously it does not look correct
07:57 - we can see that we have a gap in here
07:59 - because we are placing this hack still
08:00 - in here when it should be offset and
08:02 - slightly on Lower so let's first
08:04 - implement the offsetting of odd rows
08:06 - let's go over here into the grid hex XZ
08:08 - script and let's scroll down to find the
08:11 - function so here it is the one to get a
08:13 - warmer position so it takes in an X and
08:15 - a z and returns a world space Vector 3.
08:18 - again we can refer back here to our
08:20 - diagram so if it is on then we want to
08:22 - offset it by half the cell size so over
08:25 - here we're going to return this position
08:26 - so we get that multiplied by the cell
08:28 - size plus the origin position in the end
08:30 - and then plus Let's test if it is an odd
08:33 - position
08:34 - how it has a super simple we can do a
08:36 - modulo of two
08:38 - so if this one is one
08:40 - then we do know this is an odd row by
08:42 - the way if you don't know the marginal
08:44 - operator this is the modulo in math so
08:46 - it's basically the remainder of the
08:48 - division so that's how we can tell if
08:50 - this is an odd row or an even row so if
08:52 - it is an out row then we're going to add
08:54 - our offset and like we saw the offset is
08:57 - on the X so let's put one zero zero and
09:00 - the offset amount is going to be by half
09:02 - the cell size so cell size times 0.5 F
09:05 - and if it is not an out row then we
09:07 - don't want to add an offset so let's use
09:09 - Vector 3.0 okay so that's it and just
09:11 - with this let's see if the offset is
09:13 - already working correctly and yep it is
09:15 - indeed working so the even rows are
09:17 - still placed exactly where they were but
09:19 - the odd ones are now offset okay so
09:21 - that's good but of course there's still
09:23 - the issue that I mentioned before for
09:25 - the square grid we do offset it on the Z
09:27 - by the size same as the wind but on the
09:29 - hex we're in we need to offset on this
09:31 - end by half the size plus a quarter of
09:34 - the size so in total 0.75 the size so
09:37 - again here in our conversion we for the
09:40 - X we're going to move by the sound size
09:42 - that is correct but then for the Zen
09:45 - so new Vector 3
09:47 - offset this time on the Zen for this one
09:50 - we're not going to offset just by the
09:52 - sound size but 0.75 F of the cell size
09:56 - and actually this number here 0.75 this
09:58 - will be used in several parts of our hex
10:00 - logic and as always we never want to use
10:02 - mysterious magic numbers like this if
10:04 - you were to return to this code after
10:06 - some time you would have no idea what
10:07 - this 0.75 represents so let's go up here
10:10 - and make a proper constant with a proper
10:12 - name
10:14 - let's call it hex vertical offset
10:18 - multiplier
10:19 - and we put in that 0.75 f
10:23 - okay so now we use this so let's go down
10:26 - here instead of this magic number let's
10:27 - use our constant okay great just with
10:30 - this let's test
10:31 - and if it's working okay great all right
10:34 - so with this the easy part is done we
10:36 - have successfully managed to convert
10:37 - grid positions into warm positions all
10:40 - right awesome now let's go into the more
10:42 - complex part converting a worm position
10:44 - back into a grid position for a nice
10:46 - visual just so we're able to see what
10:48 - the logic is doing over here on my hex
10:50 - prefab I've got the standard hex Sprite
10:53 - then I've got another one also a hex
10:55 - Sprite except this one is going green
10:58 - basically we want to show or hide this
11:00 - game object so we're able to see which
11:02 - grid position the conversion process is
11:04 - actually selecting so over here on the
11:06 - testing script let's just add some
11:07 - visuals to our grid object
11:12 - then just a basic show and height
11:14 - function
11:21 - okay it just finds the selected game
11:23 - object and sets it to active or not
11:24 - again we're doing this just so we have
11:27 - some nice debug visuals so over here
11:28 - then we need to assign it
11:40 - so instantiated we grab the reference
11:42 - then we go into the grid object on this
11:44 - position and we assign the original
11:45 - transform and tell it to hide itself
11:47 - then let's show the selected for the one
11:50 - underneath the mouse position so let's
11:51 - do a private void update and on update
11:54 - let's get the mouse run position now if
11:56 - you don't know how to do that check out
11:58 - my quick video tutorial on it and there
12:00 - I made this function so I can use it
12:01 - here so get the mouse run position
12:03 - then I go into the grid hex
12:07 - and I get the red object on this mouse
12:09 - run position right on this one to show
12:11 - and now I just need to hide the previous
12:13 - one so I just need to get that one
12:16 - so private for the grid object the last
12:18 - grid object
12:20 - okay with that then now over here
12:24 - if it is not known then we tell the Hind
12:26 - and then we tell it to show
12:36 - okay that's it so with this we should be
12:38 - able to have a nice visual which is
12:40 - going to be very helpful as we try to
12:42 - handle our world to Great positional
12:43 - logic let's see and yep it is working so
12:46 - as I move the mouse I am selecting the
12:48 - underlying hex grid position okay
12:51 - now obviously as you can see the logic
12:53 - is not working so the mouse is over here
12:55 - and it's liking down down there so it is
12:57 - not correct the logic is still based on
13:00 - rounding which works for a square grid
13:01 - but obviously does not work for a hex
13:03 - grid so going back to the implementation
13:05 - overview I covered in the beginning for
13:07 - this to work like I said we need to
13:08 - round the position and grab the rough X
13:11 - and rough Zen then we take that grid
13:13 - position and we grab all six of its
13:15 - neighbors with that we test the distance
13:18 - to each of them and when doing that
13:20 - we're going to be able to find which one
13:21 - is the actual horses neighbor which will
13:23 - be the closest hex position so when we
13:26 - do the first rounding that is just the
13:27 - rough X and rough Zed and not the final
13:29 - one so over here on the function to get
13:31 - the X Zen which by the way just in case
13:33 - you haven't seen the other grid system
13:35 - videos when we call grid grid object
13:37 - when we call this this one is then
13:38 - calling the get xn so in the end we end
13:41 - up going through this function okay so
13:44 - this one is just following the values
13:45 - now this is not going to be the final
13:47 - value this is just going to be the rough
13:49 - one unless actually round set of four so
13:52 - let's grab an end for the rough X
13:56 - and we're going to round this one
13:58 - and this is going to be an end for the
14:00 - rough Zen and again let's also round it
14:04 - so we have the two rough values now
14:07 - let's make a list for all the neighbors
14:09 - that we want to test
14:11 - so let's say a list of vector 3 int
14:15 - neighbor XZ list
14:21 - and now here an extremely important
14:23 - thing is you have to remember that the
14:24 - hex grid has an offset so back to our
14:27 - diagram here if we are testing something
14:29 - over here and we round out to this
14:31 - position 2 2. if we go into this one
14:33 - then we can see that the first ones we
14:35 - want to test here the left and right
14:36 - Neighbors
14:37 - so just minus 1 on the X and plus one on
14:39 - the X so let's do -1 on the X
14:43 - and we're going to do a vector 3 end of
14:46 - the rough x z
14:52 - then here we add the rough XZ to this
14:54 - offset Okay so we've got the left one
14:56 - then the right one is going to be pause
14:58 - one okay and now here comes the tricky
15:01 - part which is for the ones above and
15:02 - below
15:03 - for these ones if we go minus one on the
15:05 - X yep we do get this one but then if we
15:07 - try going plus one on the X then instead
15:09 - of getting this one we end up with this
15:10 - one that is not what we want we want the
15:13 - six neighbors so in this case would be
15:15 - -1 and plus zero however that also
15:18 - depends if we have an even row or an odd
15:20 - Row for the odd row as we can see we
15:22 - want minus one on the X and plus zero
15:24 - however when working with an odd Row for
15:27 - that one we want plus zero n plus one if
15:30 - we do minus one and plus zero then we
15:31 - end up getting these two and not these
15:33 - two so again this is the tricky part
15:35 - definitely make sure you get the offsets
15:36 - correct if you make a mistake you might
15:39 - see issues because you won't be testing
15:40 - the exact six closest neighbors so over
15:43 - here let's grab that neighbor
15:45 - science first put all of them so on a
15:47 - plus one we testing minus one and the
15:50 - plus zero
15:52 - and then the two neighbors below so it's
15:55 - minus one on the Zen
15:57 - ten differences on this one it won't be
15:59 - either minus one or plus one depending
16:01 - on if it's an odd or even row
16:03 - so let's define here a bow
16:05 - call it odd row and we grab the rough
16:08 - Zen
16:09 - and again the same thing module of two
16:13 - see if any equals one if so then this
16:15 - one is an odd row then over here if this
16:18 - one is an odd row if it is odd then we
16:20 - want pause one
16:22 - and if it is not then we want minus one
16:25 - and same thing on this one
16:27 - all right so this should be working
16:29 - again be very careful make sure you
16:31 - don't get the neighbors wrong let's do a
16:34 - quick test just make sure this is all
16:35 - working correctly
16:36 - let's print out all the neighbors
16:45 - okay so here just add a simple album
16:47 - let's see all right so I put the mouse
16:48 - over there on position two two so we can
16:51 - see down here so we are testing position
16:52 - two two all right
16:54 - and the neighbor is going to be 1 2
16:56 - which is the one to the left 3 2 which
16:58 - is the one to the right all right then
17:00 - we have one three so three is going to
17:02 - be the row above and one is going to be
17:04 - to the left so it's going to be this one
17:06 - then two three is going to be this one
17:07 - and then down below we have one one and
17:10 - two one so it works on even rows now
17:12 - let's put the mouse position over here
17:14 - so with this one it is now position on
17:15 - one one
17:16 - so this is zero zero one zero and over
17:19 - here we have one one okay that is
17:21 - correct
17:21 - then we're testing left and right so
17:23 - zero and two so zero one two one yep
17:26 - correct then we test two two and one two
17:28 - so row two is going to be this one so
17:31 - this one is zero and we're going to test
17:32 - one and two so yep that is correct and
17:35 - then down here on row 0 we also test one
17:37 - and two yep also correct all right so
17:39 - we're correctly grabbing all of our
17:41 - neighbors now after this the code is
17:43 - going to be super simple so we just
17:44 - cycle through all the neighbors yep and
17:46 - then we're just going to do a basic
17:48 - decent share to find the closest
17:52 - foreign
18:05 - so here it is just some basic closest
18:07 - logic so we cycle through all the
18:09 - neighbors then we test distance from the
18:11 - worm position that we're trying to test
18:12 - we test from that one to the warm
18:14 - position of this neighbor so if that's
18:16 - distance is closer than the one that was
18:18 - previously closes then this one becomes
18:20 - the new closest so we cycle through all
18:21 - the neighbors and then we return it okay
18:24 - so that's really all the logic as you
18:26 - can see it's all super simple the only
18:27 - tricky part just over here the neighbors
18:29 - but as long as you make that correctly
18:30 - other than that it's just a simple
18:31 - lesson check also one thing that I
18:33 - forgot a while ago over here when
18:35 - calculating the rough values for the
18:36 - rough for the Z we also need to
18:38 - incorporate the hex vertical offset
18:39 - multiplier so over here we also need to
18:42 - divide by this one
18:43 - if we don't do that then with a bigger
18:45 - and bigger grid then the rough set would
18:47 - become more and more inaccurate so it
18:48 - wouldn't actually work so let's test any
18:51 - up here we can already verify that it is
18:53 - indeed working so if my mouse over there
18:55 - if I go anywhere inside the hexagon yep
18:57 - I'm inside and if I go outside yep I'm
18:59 - on this one so it works on an odd row
19:02 - and if I go here yep it works on an even
19:04 - row
19:05 - so wherever I place my mouse position I
19:07 - can go to the edge go to zero zero to
19:09 - there and all of them it's always
19:11 - perfect which one is selected underneath
19:13 - the mouse position
19:14 - so it works if we test on the horizontal
19:17 - sides so over there it swaps over there
19:19 - it swaps it works on diagonals that one
19:21 - that one that one and that one and it
19:24 - also works on a really massive grid so
19:26 - here I am regardless of what size it is
19:28 - I always know which grid position is
19:30 - under the mouse position always always
19:32 - perfect whether I go into the corners
19:34 - into the sides of the edges all of that
19:35 - works perfectly alright awesome now at
19:39 - this point I should point out that
19:40 - obviously you can massively improve the
19:42 - performance of this system over here we
19:44 - are generating a ton of garbage by
19:45 - generating the neighboring list every
19:47 - single time so you could probably catch
19:49 - these Neighbors in some way to avoid all
19:51 - of this then perhaps instead of checking
19:53 - the distance against every single
19:54 - neighbor you could add some basic checks
19:57 - to limit how many neighbors you test so
19:59 - there's plenty of ways to make this more
20:00 - performant and then of course for the
20:02 - visuals over here just to keep it simple
20:03 - I instantiate a new game object for each
20:06 - grid position however obviously that is
20:08 - not very scalable so instead a much
20:10 - better approach would be using the tile
20:11 - map that I covered in a previous video
20:13 - that one is based on dynamic only
20:15 - generating a mesh and attaching it to
20:17 - the underlying grid system just like
20:18 - this one so with that instead of having
20:20 - one game object per each grid position
20:22 - you would have just one game object for
20:24 - the entire grid that would be much much
20:26 - more performant so you can watch that
20:28 - video to learn how to do that or you can
20:29 - just watch my video on how to
20:30 - dynamically generate a mesh through code
20:32 - that is really only need to make this a
20:34 - lot more performant alright so now you
20:36 - know how to make a hex grid system if
20:38 - you want a fun challenge go watch my
20:40 - grid system videos and convert one of
20:42 - those systems to this hex grid system
20:43 - for example the grid building system
20:45 - that would be a fun one to convert and
20:48 - also I want to apply this to the ASR
20:50 - pathfinding that I covered previously
20:51 - since I won't use this same underlying
20:53 - grid system it should be pretty easy to
20:55 - convert and of course like I mentioned
20:56 - beginning the reason why I researched
20:58 - this topic is because people ask for it
20:59 - in my turn-based strategy course I'm
21:01 - harder to work on the free expansion of
21:03 - the course heading hexologic to that
21:05 - entire game if you haven't picked up the
21:07 - course definitely go ahead and give it a
21:08 - look I worked really hard on making it
21:10 - an excellent course specifically to help
21:12 - guide you and take your skills from
21:13 - beginner to Advanced so if you're
21:15 - interested in turn-based strategy games
21:17 - or really you just want to improve your
21:19 - programming and Game Dev skills while
21:21 - learning how to write good clean code
21:22 - then check it out and if you already
21:24 - have it then this hex grid update won't
21:26 - be a commonly free expansion to the
21:27 - course hopefully within the next few
21:29 - weeks alright hope that's useful check
21:31 - out these videos to learn some more
21:33 - thanks to these awesome patreon
21:34 - supporters for making these videos
21:36 - possible thank you for watching and I'll
21:38 - see you next time
21:43 - [Music]
21:45 - thank you