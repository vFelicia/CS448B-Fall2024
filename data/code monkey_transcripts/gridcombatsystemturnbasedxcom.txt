00:00 - in this video we're going to make a
00:01 - turn-based grid combat system in unity
00:04 - our units will be in two teams placed in
00:06 - a grid with a certain move radius and
00:08 - the ability to do attacks each units
00:10 - won't do its move and then its attack in
00:11 - a turn-by-turn bastes let's begin
00:16 - [Music]
00:20 - hello and welcome I'm your code monkey
00:23 - and this channel is all about helping
00:24 - you learn how to make your own games
00:26 - with NF tutorials made by a professional
00:28 - indie game developer so if you find the
00:30 - video helpful consider subscribing okay
00:32 - so here's what we want to make over here
00:34 - we have a nice map with a bunch of
00:36 - characters so these are on the blue team
00:38 - and these are on the red team
00:39 - now it's turn-based so right now the
00:42 - active turn is for this unit on the grid
00:45 - we can visually see how far he can move
00:47 - so I can click on any of these valid
00:49 - grid positions I click any of there you
00:51 - go he moves towards it now for each turn
00:54 - I can do one movement and one attack so
00:57 - over here is an enemy and I can click on
00:59 - him to attack so if I click yep there
01:01 - you go it does an attack and now for
01:03 - this system I went to the design of one
01:05 - character at a time rather than one
01:06 - phone teamed and one full team so as
01:08 - soon as the character on the pool team
01:10 - finished it picked a character from the
01:11 - red team so now it's this one and again
01:13 - I can see how far I can move note how
01:16 - the movement is using pathfinding so
01:18 - because this creighton here is walking I
01:20 - cannot actually reach that position but
01:22 - again I can move anywhere that I want so
01:25 - let's go all the way up there and now I
01:27 - can attack so let's attack that one and
01:29 - yep there you go now it's back into the
01:30 - blue team and again I can move and now
01:33 - that one is too far so I cannot attack
01:35 - him so I can press space in order to
01:37 - skip my turn and now it's back into this
01:39 - one and now this one I can try moving in
01:41 - there now try hitting him and no piece
01:43 - too far so now skip again and so on and
01:44 - so forth so here is a base for a nice
01:47 - turn-based great combat system
01:49 - everything is functional and we couldn't
01:51 - later expand upon this with some special
01:53 - abilities and some AI for the enemies to
01:55 - make a game pretty much like X huh right
01:57 - now there's a spring sale happening on
01:59 - the assets or turns of great assets
02:01 - icons sound effects and awesome tools at
02:03 - a great discount use them to make your
02:05 - game really stand out check it out by
02:07 - clicking the link in the description and
02:08 - if you pick up anything through there
02:10 - you'll also be helping out the channel
02:11 - alright so this circle let's get to it
02:13 - okay so here's our starting scene we
02:16 - have a map with some units and some
02:18 - objects now the map is built using the
02:21 - grid system that we made in a previous
02:22 - video so I can turn on gizmos and
02:25 - visualize the grid I'm also using the
02:27 - pathfinding which again was also made in
02:28 - another video and I'm also using the
02:30 - town map which we're going to use to
02:32 - display our reach
02:33 - about areas so if you haven't seen those
02:35 - videos then check the links in the
02:37 - description this combat system won't be
02:38 - built on top of those which once again
02:41 - is a great showcase of the power of
02:42 - writing clean code so we made that grid
02:44 - system a long time ago and we've reused
02:46 - it in so many different scenarios
02:48 - because we made sure to write our code
02:50 - in a clean and reusable way here in the
02:52 - editor there's a simple game object and
02:54 - has this script attached to it so this
02:57 - is a script that is setting up the grid
02:59 - the path finding and eat Alma here is
03:01 - the script and it's pretty simple we
03:04 - just define a certain map weight and map
03:06 - height then we construct our grid our
03:08 - grid pathfinding and our movement town
03:10 - map so with those systems in place we
03:12 - have our nice base this video is made
03:14 - possible thanks to these awesome
03:16 - supporters go to patreon.com/scishow to
03:18 - code monkey to get some perks and help
03:20 - keep the videos free for everyone now
03:22 - let's make our grid combat system we're
03:24 - going to first work with a single unit
03:26 - and give it a simple move order so in
03:28 - the project funds let's create an EC
03:30 - JavaScript call this our grid combat
03:33 - system let's make a game object to run
03:35 - it and attach our script okay now in
03:39 - here let's first make a field to add our
03:42 - unit reference so we make a sterilized
03:45 - film of type unit for it combat we're
03:48 - going to see how that class is set up in
03:50 - a bit so we have film for a unit and
03:55 - back in the editor over here we can now
03:57 - simply drag our reference okay so first
03:59 - of all let's make some simple movements
04:01 - sending a unit to a target position now
04:03 - each unit is based off of this prefab
04:05 - here so the end has a main unit great
04:08 - combat script and the rest of the end of
04:10 - the setup like we did in the modular
04:12 - character controller system so it has a
04:14 - bunch of modules like this one here
04:16 - which moves the unit towards a target
04:17 - position using plat finding and this one
04:19 - is moving to unity by modifying the
04:21 - rigidbody velocity but essentially for
04:23 - the logic of our combat system all we
04:25 - need is the main script in here and this
04:28 - script is already set up to interact
04:29 - with all the rest so in our unit great
04:31 - combat script on we really care about
04:33 - right now is the ability to call this
04:35 - function so we moved to a Terry position
04:37 - and we have a comeback alright so let's
04:39 - go back into our main script here we are
04:41 - and let's do a simple voi update and on
04:46 - the update let's test for
04:47 - left mouse button play so when the left
04:51 - mouse button is down in here and let's
04:52 - grab the mouse wrong position so for
04:55 - that there's a function in the utilities
04:56 - which is long as you can download for
04:58 - free from me in Tacoma com
05:00 - so I can go into the Tonys to get the
05:03 - mods wrong position here is the function
05:06 - in case you want to write it yourself
05:07 - now with the mouse wrong position let's
05:09 - down the unit to go there so going to
05:12 - the unit credit combat and we use that
05:14 - function we saw tell me to move to the
05:16 - target Mouser opposition all right so
05:19 - just like this it should work let's test
05:21 - okay here we are with all the units idle
05:24 - and now I move my mouse and I press the
05:26 - unlit mouse button any of there you go
05:27 - the unit correctly went into that
05:29 - position and now if I click behind that
05:31 - crate and yep there you go as you can
05:34 - see it is indeed using path line alright
05:36 - so we have our basic movement working
05:38 - awesome now one of the main things that
05:40 - we want to apply to our combat system is
05:42 - to have some limited movement so the
05:44 - unit cannot for example move an Internet
05:46 - month so I cannot come in there and he
05:48 - should not be able to move this whole
05:50 - distance so back in our code here let's
05:52 - calculate all the valid positions that
05:54 - unit can actually move to now the way
05:57 - we're going to do that is to come late
05:58 - the path to each position and then we're
06:00 - going to check the length of that path
06:02 - so let's write that code on our start
06:05 - and for testing let's start off small so
06:07 - let's say our unit can only move at most
06:09 - five steps and now in here we want to
06:12 - test all the positions within that
06:13 - radius so first we get the unit and we
06:17 - access its position but now we don't
06:21 - want the worm position but rather its
06:22 - position on the grid so for that we need
06:24 - to access the grid again the grid is
06:27 - being set up in this script so it's in
06:29 - here and it's being constructed in here
06:31 - and we already have a nice simple
06:33 - function to return that grid so let's
06:35 - access this function so we go into that
06:39 - script access the static instance and
06:42 - get our grid so using the grid we can
06:48 - access the function in order to get the
06:50 - x and y position of a certain world
06:52 - position
06:54 - so we get the unit ex in the unit wine
06:57 - now with the units x and y we can simply
07:00 - do a basic cycle so we do a four we
07:03 - start off with the X start off at unit X
07:06 - minus Emacs move distance and we're
07:08 - going to go until the X is under unit X
07:12 - plus D max move distance and do the same
07:16 - thing for the Y alright so here we are
07:24 - cycling through all the grid positions
07:26 - there are around our unit position
07:29 - within a certain maximum distance now
07:31 - first let's check if this position is
07:33 - walkable so for that we need to access
07:36 - the tough finding grid so the position
07:46 - is either walkable or not walkable now
07:48 - if it is well cable then let's complete
07:50 - the path to that position so if there is
07:57 - a valid path then we get the actual path
07:59 - test account so if we get the path we
08:09 - calculate the path count towards the
08:11 - maximum distance and it's either within
08:13 - the move distance or it's outside our
08:15 - move distance so if it's in here then
08:17 - it's valid if it's any of these others
08:19 - then it's invalid all right so our logic
08:21 - should be working now in order to
08:23 - visually see it we can use the town map
08:25 - now here in the actor I've already set
08:28 - up my town map it's prepared using two
08:30 - towel types so there's none which is
08:32 - invisible and move which means we can
08:33 - move towards it over here we can use
08:35 - that we get the movement on map and we
08:40 - set this town map sprite and we get this
08:46 - X and this Y in this case set it to move
08:49 - and all the others we set it to
08:51 - invisible
08:57 - all right so just like this everything
09:00 - should be working we should be able to
09:01 - visually see all the great positions
09:03 - that we can move to and all the ones we
09:04 - can't all right so let's test any up
09:07 - right away we can see that our logic is
09:08 - indeed working so we can see which valid
09:11 - positions we can move to and we can see
09:12 - which ones are within our max range of
09:14 - five of our actual unit now let's just
09:17 - verify that everything is actually
09:18 - working correctly so here let's place
09:21 - some more crates and if there it is just
09:24 - like that we can see that it is indeed
09:25 - working so these crates are plugging so
09:28 - we can no longer move to this area all
09:30 - right so we can now validate all of our
09:32 - possible move positions awesome now we
09:34 - need to make sure that we can only
09:35 - actually move towards the valley move
09:37 - position because right now visually we
09:39 - can see it but I can self like in here
09:40 - and Yap he goes in there so let's do
09:42 - just that now one of the best things
09:45 - that we added when we made our grid
09:47 - system was the ability to make it work
09:48 - with generics so each grid position has
09:51 - a grid object of a specific type now so
09:54 - far we've been using this empty word
09:56 - object so really just stores the create
09:58 - the X&Y and then we're doing some debug
10:00 - drawn lines so we can visually see the
10:02 - grid now let's replace this with a
10:03 - proper grid object to store all the data
10:05 - that we want so let's copy this class
10:09 - then let's go into the combat system and
10:11 - then you know let's create it all right
10:17 - so we have our basic red object in here
10:19 - and now we need to do over here is
10:21 - modify the type instead of using this
10:23 - time let's use the one on the grid
10:25 - combat system all right everything is
10:32 - working correctly and now in this grid
10:33 - object well it's all of the data that
10:35 - we're going to need so for example let's
10:37 - have one a simple private ball for is
10:41 - Valley blue position and some functions
10:44 - is set it
10:49 - all right we have our simple bullion and
10:52 - now all the way appear when we are
10:54 - completing our valid positions if it is
10:56 - valid then we go into our grid in order
10:59 - to get the grid object on this X Y and
11:06 - we call our set function and in this
11:09 - case this one is true and then on the
11:12 - other case it's false so let's do that
11:13 - up here okay so we set them all as
11:21 - invalid then we go through and the ones
11:24 - that are valid we set them to Val so now
11:26 - that we have validated our move
11:28 - positions let's go down here on our unit
11:30 - grid combat instead of moving it
11:32 - directly to there let's first validate
11:34 - that position so we access our grid we
11:45 - have the grid object on the mouse wheel
11:47 - on position we check if it is a valid
11:49 - move position and if so then we do tell
11:51 - our unit to move towards that position
11:53 - okay so just like this it should be
11:54 - working
11:55 - let's test so here we are let's try
11:57 - clicking in an invalid position so out
11:59 - here I click and nope nothing happens
12:01 - the unit does not move now I click in a
12:03 - valid position any of there we go he
12:05 - goes towards that position all right so
12:07 - our logic is working awesome so here we
12:10 - have our grid movement being correctly
12:12 - validated except right now we're only
12:14 - calculating it on start so as my unit
12:17 - moves it should update the actual
12:18 - newfound position so let's do just that
12:20 - first we take all this code and we
12:23 - actually make it into a proper function
12:25 - so instead of being on the start so we
12:29 - have our update from with move positions
12:30 - function and then on our start we call
12:33 - that function and now here on our update
12:36 - we need to call it also when the unit
12:38 - reaches its position and we should also
12:40 - block our movement once the unit is
12:42 - actually moving so for that let's make a
12:44 - simple state machine just like we did in
12:46 - the enemy AI video
12:54 - all right so we have a simple I known
12:56 - for our state and if you want to store
12:58 - that then on a weekly serif as its state
13:00 - dot normal and on update we do is switch
13:03 - on our state if we are normal then don't
13:04 - listen to inputs and if we are on
13:06 - waiting then we are simply waiting so
13:09 - now I mean here when we turn to move
13:10 - let's modify the state and in this case
13:13 - we're going to put it state waiting and
13:15 - then this move to function already has a
13:17 - comeback that gets called when the unit
13:19 - reaches its position it's just a simple
13:21 - action don't get I cover delegates in
13:23 - another video if you want to learn more
13:25 - but essentially this function won't get
13:27 - triggered at the end so it's in here
13:29 - that we can reset the state back into
13:31 - state dot normal and after resetting the
13:35 - state then we can update our valid move
13:37 - positions all right so that should do it
13:41 - let's test ok so here we are and we can
13:43 - see all of our move positions now let's
13:45 - move down here and wait any of the Rio s
13:48 - and this gets there now he updates now I
13:49 - can move to these positions so let's go
13:51 - in here and yep it updates and now I can
13:53 - go in here and there you go now the
13:55 - validation is working so I click out
13:56 - here and nope it does not go anywhere so
13:58 - clean there and yep there he goes all
14:01 - right so everything is working awesome
14:02 - so we already have quite a lot of our
14:05 - system we already have our unit moving
14:07 - in a grid and it's moving in a
14:09 - turn-by-turn basis so after I move I
14:12 - cannot click anywhere I have to wait for
14:13 - the unit to get there and only then can
14:15 - I actually move again so our turn logic
14:18 - is already working and while so
14:20 - validating just how far you can move so
14:21 - I cannot move this unit all the way
14:23 - appear only into the valid move
14:24 - positions so without working now let's
14:26 - set up our attacking so we want to be
14:28 - able to click on an enemy in order to
14:30 - attack him if he is within range
14:32 - so first let's handle clicking on it now
14:35 - one way we can do that is using
14:37 - colliders and great casts in order to
14:39 - choose the enemy to attack however using
14:41 - that approach would mean that the
14:43 - collider size would have to perfectly
14:44 - match the annoying grid size so instead
14:47 - of colliders and Ray casts a simpler way
14:49 - we can do is simply store our unit on
14:51 - the grid object itself so here in the
14:53 - grid object that we made we can simply
14:55 - add another field and this will be a
14:57 - film for the unit that is actually
14:59 - standing on this grid object so we add
15:02 - of time
15:03 - quit combat and it's UniCredit combat
15:05 - that is on top of this great object and
15:07 - now some function to set and get alright
15:16 - so we have our field and then a function
15:18 - to set a function to clear and a
15:19 - function to get it so now we need to
15:21 - initialize this so let's go all the way
15:23 - up here and we're going to add another
15:25 - serialize field and this won't be an
15:28 - array of our unit for combat and now
15:32 - let's go into the editor and in here
15:34 - let's drag all of our unit references
15:36 - okay there they are
15:37 - and now in here on our start let's
15:40 - update all of our grid objects so let's
15:43 - second through it so we cycle through
15:51 - all of our units and we get the grill
15:53 - get the grid object on that units
15:55 - position and we set that field okay so
15:58 - now down here we can check when we click
16:00 - on a unit position so we get our grid
16:13 - then we get the grid object underneath
16:15 - the mouse and then we check if there is
16:17 - a unit inside of that grid object if so
16:20 - then that means we have clicked on top
16:21 - of the unit then we test if the target
16:24 - unit is an enemy to the current one so
16:29 - we clicked on an enemy of the current
16:30 - unit and if so then we want to attack
16:33 - him so we tell the this unit in order to
16:36 - attack the other unit and again the
16:39 - attack also has a delegate that triggers
16:41 - on the attack complete so we can do the
16:45 - same thing to modify our state so he
16:50 - attacks a target in it then he goes back
16:52 - to normal and then we have our not an
16:57 - enemy and not a unit here so if we
16:59 - attack then we break and if not then we
17:01 - keep going down here and we test for
17:03 - simple movement all right so just like
17:05 - this should be working so if we click on
17:07 - an enemy we should be able to attack him
17:08 - let's test ok so here we are and if I
17:11 - click outside move area no cannot move I
17:13 - click yep I still got some right more
17:15 - movement now if I click on top
17:16 - an enemy if there you go he correctly
17:19 - attacks the enemy and effect me I'm
17:21 - talking to himself nope doesn't do
17:22 - anything click on top of and mi and nope
17:25 - does not do anything alright so I can
17:27 - now click on an enemy in order to attack
17:28 - him great now we still have a few things
17:31 - to note so first it's we also need to
17:34 - validate the attack range so right now
17:36 - this one is very far but I can still
17:38 - click in order to attack him and when we
17:40 - move we need to actually update the
17:42 - underlying grid object since right now
17:44 - I've moved this unit but the underlying
17:46 - grid object so has this unit placed on
17:48 - its actual starting position so let's do
17:50 - both notes first for the attack we just
17:53 - need to use the function that checks if
17:54 - it can attack so if this unit that can
17:59 - attack the target unit so you can either
18:07 - attack or cannot attack and this
18:09 - function is wrong just doing a basic
18:11 - vector three distance and in here if we
18:13 - cannot attack and let's spawn a simple
18:15 - pop-up all right that should do it
18:20 - and now for updating the grid down here
18:23 - when we have a valid move position what
18:25 - we're going to do is remove them from
18:26 - the current position so we go into the
18:28 - bread we get the grid object of this
18:31 - unit and then we clear that in acrid
18:35 - combat then we take the target grid
18:40 - object and then we set the unified
18:43 - combat to this one all right so that's
18:51 - it
18:51 - let's see if our attack is working ok
18:54 - here we are know the attack distance is
18:56 - pretty much the same as the move
18:57 - distance so if I come like he should not
18:59 - attack so quick and nope cannot attack
19:01 - ok great now if I move close to him and
19:04 - I four click yep there you go now I can
19:06 - indeed attack him so I can move into a
19:08 - random position and click any of there
19:10 - you go everything is validated all right
19:12 - so here we have movement and attacking
19:14 - working awesome so here we have our
19:16 - system almost fully built everything is
19:19 - working perfectly except it's only
19:21 - working for a single unit so the very
19:23 - important thing that we are missing is
19:25 - our turn system now I already covered a
19:28 - simple turn-based battle system in a
19:30 - this video so here let's do something
19:32 - pretty similar over here in our grid
19:34 - combat system we already have a nice
19:35 - array of one of our units now what we
19:38 - need is to have them split into two
19:39 - teams and go from one team to the next
19:41 - one so let's make some simple two lists
19:47 - so we've got Blue Team and Red Team now
19:50 - in here when we are cycling through them
19:52 - we can do that as well all right so very
20:00 - simple we just initialize our own list
20:02 - we cycle through and we add them
20:03 - depending on the team they're in now up
20:06 - here we're also going to need some
20:07 - indexes in order to figure out which one
20:09 - is our active unit and we start them
20:13 - both off at minus one okay now let's
20:16 - make a function to select the next
20:18 - active units so first we check the team
20:22 - on the current active one so if the
20:31 - current one is either no or it's on the
20:33 - red team then we get the next one on the
20:34 - blue team and if now we get the next one
20:36 - on the right team so let's make that
20:38 - function alright so we get the next
20:50 - active one of this team so we just
20:52 - increment our index and then we return
20:54 - that one on that position and then here
20:56 - when we select we set the unit quick
20:58 - combat to be done alright so all of our
21:02 - logic should be working so the first
21:05 - time that we call this this one won't be
21:07 - known so it's going to pick one from the
21:08 - blue team then next time we call then
21:10 - this one will be on the blue team so
21:12 - we're going to pick one from the red
21:14 - team and then so on and so on so we have
21:16 - this function to correctly pick the next
21:18 - active character and now most of the
21:20 - rest of the code already works using
21:21 - this field so everything else should be
21:23 - working so we just need to calm this so
21:26 - peer on our start we set everything and
21:28 - before we update our available positions
21:29 - well it's not like the next active unit
21:31 - and up here and let's no longer expose
21:34 - this in the editor since it's going to
21:35 - start off as no okay that should do it
21:39 - now for testing let's make them swap
21:41 - after just moving once per turn
21:43 - so down here we have our movement okay
21:45 - and after the end finish is moving then
21:47 - let's some like the next active Vienna
21:49 - okay let's test and here we are in it's
21:53 - this one's turn someone let's move in
21:55 - here and yep as he gets there now it's
21:57 - this one's turn and again everything is
21:59 - being validated so I click all the way
22:00 - in here nope nothing's now let's move
22:02 - that one in here and yep that was the
22:04 - red team and I expected the only team so
22:06 - the blue team move and the red team move
22:07 - all right so all the logic is working
22:10 - and all of the terms are correctly
22:11 - moving now that our logic is working
22:13 - let's make them move and attack on the
22:15 - same turn so in here we can just store
22:17 - two simple billions when we saw like the
22:23 - next active one let's set both these to
22:25 - true and down here we found a time all
22:38 - right so we found a team move any attack
22:40 - and now just say function to test if the
22:43 - turn is over so if we cannot move or
22:53 - attack then we end this turn and we're
22:56 - going to do our test
22:57 - every time that we move or attack so we
22:59 - can also use this function in order to
23:00 - skip the turn so here on our update
23:05 - let's also do a simple input yet key
23:08 - down when you press space then let's
23:11 - give our turn all right everything
23:14 - should be working
23:14 - let's test so here we are in start off
23:17 - with this yep so far so good let's try
23:19 - moving in there and yep he moves now
23:22 - let's try attacking and if there you an
23:24 - attack you know it's this one so now
23:26 - this one I can first attack and then I
23:28 - move and since I finished now it's this
23:30 - one so now this one moves and now I try
23:34 - to attack but I cannot because he's too
23:35 - far so I can press space and if there
23:37 - you go I skip the turn and now it's this
23:39 - one and now this one can move and now
23:41 - let's attack this one and so on and so
23:42 - forth all right awesome so all of our
23:45 - turn logic and all of our combat logic
23:47 - is correctly working now for just some
23:49 - punch in here I already have implemented
23:51 - camera panning so I can press the way s
23:54 - and E in order to move the camera so
23:56 - that one is being handled using
23:57 - Sen machine now I covered how to use sin
23:59 - machine in a previous video so check it
24:01 - out if you don't know how to use it
24:02 - again it's being handled by our normal
24:04 - game handler script we have our handle
24:06 - camera movement and then we have a nice
24:08 - function in order to set the camera fall
24:10 - position
24:10 - so just for Polish let's call this one
24:12 - whenever our turn changes so here when
24:15 - the turn is over let's go where we
24:17 - select the next active unit and after
24:20 - selecting let's go into our game Handler
24:22 - and call this function to pan the camera
24:25 - onto our unit all right just like that
24:30 - let's see okay here we are let's move
24:32 - this one in here and now let's skip and
24:35 - if there go the camera pen so that one
24:37 - now I can move it can skip any up pencil
24:39 - down and so on alright so here we have
24:41 - just a bit of nice polish okay so here
24:45 - we have our system fully working we have
24:47 - two teams the blue team and the red team
24:48 - now each unit can move an attack in its
24:51 - own turn and I can also skip a turn if I
24:54 - want so I can move this unit then I can
24:57 - do an attack and after the attack is
24:59 - finished then now it's a red team's turn
25:00 - so now I can move an attack and there
25:03 - you go now it's backing to the blue team
25:04 - so they change between the red team and
25:07 - the blue team now for the movement you
25:09 - can see the event positions that we can
25:11 - move to all the positions are
25:12 - accumulated using pathfinding so we can
25:15 - only move to valid positions so here
25:17 - this crate is walking so I cannot go
25:18 - into that position so I can click on a
25:20 - valid position move in there and now
25:22 - click in order to attack an enemy and
25:24 - now the attack right now we set up to
25:26 - always hit but we could easily add some
25:28 - sort of hit chance based on distance in
25:30 - flanking in order to make this pretty
25:31 - much like X huh so you can click to move
25:34 - click to attack and if there you go as
25:36 - soon as it ends it ends its turn now I
25:38 - can again move an attack and so on now
25:40 - right now something that could be a
25:42 - performance bottleneck is how we
25:43 - calculate all of the possible paths that
25:45 - the unit can take so depending on how
25:48 - far your units can move this can be
25:50 - quite costly or not as much now one way
25:52 - we can easily solve that is to use the
25:54 - path finding that we made using unity
25:56 - dots that one if you remember works
25:58 - thousands of times faster than this one
26:00 - so if you wanted to build upon this
26:01 - system then that's one of the things
26:03 - that you could actually improve beyond
26:04 - that here is a fully functioning
26:06 - turn-based great combat system let me
26:08 - know in the comments if you'd like to
26:09 - see me expand upon this
26:10 - to make a complete game like Exxon this
26:13 - video is made possible thanks to these
26:14 - awesome supporters go to
26:16 - patreon.com/scishow
26:17 - code monkey to get some perks and help
26:19 - keep the videos free for everyone as
26:21 - always you can download the project
26:22 - found a little is from unity comic calm
26:24 - subscribe the channel for more unity
26:26 - tutorials push the nuclear 7 accounts
26:28 - and I'll see you next time
26:31 - [Music]