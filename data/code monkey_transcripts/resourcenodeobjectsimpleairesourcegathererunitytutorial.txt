00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're continuing our
00:03 - resource gatherer I let's create a
00:05 - resource node object to keep track of
00:07 - amounts and handle resource depletion
00:09 - let's get started
00:13 - so here's the scene so far we have our
00:16 - gather in here he goes to a gold
00:18 - resource node mines it whereas the
00:20 - resource drops it on the storage and it
00:23 - gets added to the resource bank in here
00:26 - so we're keeping track of the total
00:28 - resource amount but not the amount in
00:30 - each node let's make each node limited
00:32 - in order to do that let's first create a
00:35 - resource node object so make a new
00:38 - c-sharp script and let's name it
00:39 - resource node inside let's remove all
00:43 - this since we want a nice simple clean
00:46 - class and first let's make a constructor
00:50 - so a public resource node on our
00:54 - constructor we are going to receive the
00:56 - transform for this node and sort
00:58 - internally so a transform and call it
01:00 - resource node transform and we're going
01:03 - to store it internally all right now
01:07 - let's also make a public vector3 called
01:11 - get position and we're going to return
01:13 - our resource node transform that
01:15 - position we're doing this so we can
01:18 - interface directly with this object and
01:20 - never have to deal with transforms so we
01:22 - have our symbol class which is only in
01:23 - the reference to the transform now let's
01:25 - go into our game Handler and let's
01:28 - create and store a reference to our
01:29 - resource node objects make a private
01:32 - list of resource node resource node list
01:37 - we're going to instantiate it on our
01:40 - awake and inside we're going to add a
01:45 - new resource node for each of these goal
01:49 - node so we now have a list of resource
01:52 - nodes containing the references to these
01:55 - three transforms let's s just make sure
01:57 - that there are no errors in our code yep
02:00 - okay everything is still working
02:01 - perfectly fine now let's change or
02:04 - gather a eye to interact with the
02:05 - resource node object instead of a
02:07 - transfer the gatherer requests a
02:09 - resource node through this function
02:10 - which returns a transform so let's swap
02:13 - this out for a resource node and he
02:16 - won't return a random one from this list
02:18 - in here do the same thing for the static
02:22 - function okay so the game handler is now
02:24 - returning resource nodes instead
02:26 - transforms now let's go to our gatherer
02:28 - ai and here as you can see we got an
02:31 - error in here instead of a transform we
02:33 - are simply going to store a resource
02:35 - node object which is of type resource
02:37 - node instead of doing position we use to
02:41 - get position and same thing down here
02:44 - alright there are no errors in here
02:46 - let's test and see if everything is
02:47 - working exactly the same and yep
02:50 - everything seems to be working perfectly
02:52 - fine except now the script is working
02:54 - with our custom objects instead of
02:56 - directly interfacing with transforms so
02:59 - we now have a class to handle our
03:01 - resource node objects let's add a
03:03 - resource amount field to represent the
03:04 - amount of resources present in this node
03:06 - so make a private int resource amount in
03:11 - here let's start off with three and now
03:14 - let's add some functions to deal with
03:16 - that amount so let's create a public
03:19 - void grab resource and here we are going
03:23 - to lower the resource amount and after
03:28 - we do let's spawn a pop-up to see the
03:30 - internal resource amount in order to do
03:32 - that lets go into the using code monkey
03:35 - to use the code monkey utilities which
03:37 - is always you can grab for free from
03:38 - unity code monkey calm and in there I'm
03:41 - going to go into the CM debug class to
03:43 - spawn a text popup on the mouse position
03:46 - and I'm going to display the resource
03:49 - amount so whenever we grab the resource
03:52 - we lower the internal mountain we show a
03:54 - pop-up so we can see what value is in
03:56 - there
03:57 - let's also make a public boom has
04:00 - resources and here we're simply going to
04:04 - return if the resource amount is bigger
04:07 - than zero all right so we can now test
04:10 - if this node still has resources so back
04:12 - in our gather a I in here when we are
04:16 - playing the animation when the animation
04:18 - is complete it triggers this action and
04:20 - in here let's go into our resource node
04:23 - and call the function where I've
04:25 - resource so let's test and we should see
04:28 - a pop-up when together-er-er finishes
04:29 - the animation there he is animation and
04:32 - yep there's the pop-up saying that it
04:34 - has to that one again
04:37 - has to now it goes back that one I
04:39 - should say one and yep there you go one
04:42 - okay great okay so we now have a counter
04:45 - representing the amount of resources in
04:47 - the note let's handle depletion we
04:49 - already have a function in here to test
04:51 - if the node has been depleted so let's
04:54 - test for that when looking for a valid
04:56 - node so on our game handler when the get
04:59 - resource node we are just returning a
05:00 - random one but what we want to do is
05:02 - only return if it is still valid
05:04 - so let's clone our list of resource node
05:08 - Tim resource node list equals a new list
05:13 - which is a clone of our resource node
05:15 - place this is just so we can do a cycle
05:17 - for int temp resource new list account
05:22 - and in here let's remove the invalid
05:25 - notes from this list all right so we are
05:39 - cloning our original resource list we go
05:41 - through the list and we remove the ones
05:43 - that do not have resources and return a
05:45 - random of the ones that do have
05:47 - resources except in here we also need to
05:50 - test if the count is bigger than zero
05:53 - then we return a random one if not then
05:55 - we don't have any resources left so
05:57 - we'll just return no so nothing is
05:59 - available now on the yellow Rai in here
06:03 - when we are looking for a nearby
06:05 - resource node previously we were
06:07 - assuming we always found one but now it
06:09 - may return null if there are none
06:11 - available so in here we are only going
06:14 - to switch the state if our node is not
06:17 - no so if we do have a resource node
06:20 - available then move towards it if not
06:22 - keep waiting okay so this should be
06:24 - working let's just go into the resource
06:26 - node instead of starting with three and
06:28 - let's start with just one and let's test
06:31 - there he is he goes he mines it now has
06:34 - zero goes back I guess this one mines
06:37 - and it zero again and finally that one
06:41 - mines and zero and now he waits because
06:44 - all of them have been depleted great
06:47 - we now have limited amount
06:48 - in our resource notes now I'd swap the
06:51 - sprite when the node is depleted so in
06:53 - here when we grab the resource mount
06:55 - let's test if it is 0 so if resource
06:58 - amount if it is under 0 then let's swap
07:04 - out the sprite so go into our resource
07:07 - node transform get our sprite renderer
07:12 - component and just swap the sprite to
07:15 - the depleted sprite which is in the game
07:18 - assets okay so I'm going to into my game
07:22 - assets class to grab the goal node the
07:24 - plaited sprite the game assets class was
07:26 - created in a previous video so you can
07:28 - check it out to see how this works
07:29 - essentially it allows me to grab a
07:32 - reference to this sprite object through
07:34 - this class alright so now let's see if
07:37 - the sprite changes okay there are years
07:39 - he minds and poof the sprite changes to
07:42 - this play that it has been depleted same
07:44 - thing for that one it's gone and I like
07:45 - that one's life ok great so as you can
07:48 - see the nodes get depleted now our
07:50 - codone trade supports the gatherer
07:52 - holding more than one resource amount so
07:55 - let's make him home three units and set
07:56 - the notes to also have three units so in
07:59 - our gatherer we are only going to move
08:02 - to storage when we have more than three
08:04 - units and on the resource node and let's
08:07 - also start with three units and we can
08:09 - now get rid of the pauper all right so
08:11 - let's test ok there he is mines once
08:14 - twice three times and poof it is now
08:17 - depleted and he goes in takes three two
08:20 - storage same thing for this one - three
08:22 - times
08:23 - depleted drops three goes again - three
08:26 - takes it there and it's the fleet so
08:29 - there you have it we create the resource
08:30 - node object to make our code cleaner and
08:32 - keep track of resource amounts in each
08:34 - node in the next video we're going to
08:37 - hand on player control if you have any
08:39 - questions post them in the comments and
08:40 - I'll do my best answer them subscribe
08:42 - for more videos and I'll see you next
08:44 - time