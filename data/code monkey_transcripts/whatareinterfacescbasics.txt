00:00 - in this video we're going to learn what
00:01 - our interfaces in c-sharp this is an
00:04 - excellent feature that helps us write
00:05 - cleaner more reusable code by defining a
00:08 - set of methods that we can then
00:09 - implement in various classes let's begin
00:15 - [Music]
00:19 - hello and welcome I'm your code monkey
00:21 - and this channel is all about helping
00:23 - you will learn how to make your own
00:24 - games with enough tutorials made by a
00:26 - professional indie game developer so if
00:28 - you find the video helpful consider
00:29 - subscribing so interfaces are one of the
00:32 - main features of c-sharp and writing
00:34 - object-oriented code essentially they
00:36 - allow you to define functions and
00:38 - properties but without any
00:39 - implementation the interface works as a
00:42 - contract it ensures that when a class
00:44 - implements that interface they must
00:46 - implement those functions this allows
00:48 - you to have several different classes
00:50 - that can be used the same way by using a
00:52 - common interface and you don't care what
00:54 - else that class is doing maybe it's a
00:56 - tiny class that only has the interface
00:58 - functions implemented or maybe it's a
01:00 - mega class with a thousand lines of code
01:02 - when you use it as an interface you can
01:04 - guarantee that it will have those
01:05 - functions regardless of what the rest of
01:07 - the class is doing alright so let's
01:10 - check out some basic code first and then
01:12 - we're going to look at a practical
01:13 - example of how we can use interfaces so
01:16 - that our player here can shoot both the
01:17 - enemy the building and the crate this
01:20 - video's patreon sponsor is bad adventure
01:22 - bad adventurer is a game development duo
01:25 - currently working on their first game
01:26 - Wayfarers edge
01:27 - it's a RPG focused on exploring and
01:30 - settling unknown frontier lands in a low
01:32 - fantasy and Wild West theme check them
01:34 - out at bat Adventure calm thank you to
01:37 - the patreon sponsor and thank you to
01:38 - these awesome supporters for making this
01:40 - video possible go to patreon.com/scishow
01:43 - code monkey to get some perks and help
01:45 - keep the videos free for everyone so
01:47 - here we are in an empty script now the
01:49 - first thing we need is to define our
01:51 - interface now we can define it in a
01:53 - separate file or in this case just write
01:55 - it in here
01:56 - so first we write our accessor so let's
01:59 - make this our public and then instead of
02:01 - using the class keyword we use the
02:03 - interface cubed then we write the name
02:05 - for our interface now standard practice
02:08 - is to start the name of an interface
02:10 - always within an eye so in this case and
02:12 - let's name it I my interface and that's
02:16 - it just like this we have our interface
02:18 - definition now inside our interface we
02:21 - can define a function and now normally
02:24 - when defining a function inside of a
02:25 - class you would do something like this
02:31 - but this is an interface and not a class
02:33 - so first of all in an interface you
02:36 - don't define an accessor by default all
02:38 - of the interface elements are public so
02:40 - get rid of the private then we have our
02:43 - return value so in this case void is
02:44 - correct then the name of our function
02:46 - and finally the parameters then again
02:49 - the interfaces do not have any
02:51 - implementation so we get rid of the
02:53 - entire code mark and just put a
02:54 - semicolon one side note here in c-sharp
02:57 - eight they add the ability to add a
03:00 - default implementation so if you're
03:02 - easing c-sharp eight you can actually
03:03 - define an implementation of your method
03:05 - that won't be used if the implementing
03:07 - class does not define that method this
03:09 - allows you to add extra methods to the
03:11 - interface without breaking existing
03:13 - classes however c-sharp eight is still
03:15 - very new and not yet support the
03:16 - immunity so in this video I'll stick to
03:18 - not using default implementations but if
03:21 - you're watching this in the future and
03:22 - c-sharp eight is a standard then default
03:24 - implementation is yet another useful
03:26 - feature of interfaces okay so just like
03:29 - this we have to find a method in our
03:30 - interface we don't define the accessor
03:33 - since by default everything in an
03:35 - interface is public and we don't find
03:37 - any implementation so now let's see how
03:40 - we get a class to implement this
03:41 - interface down here let's define our
03:44 - class so let's make it a public class my
03:47 - class and now here we have a con
03:50 - and then our interface I my interface
03:53 - and just like this we can see that we
03:57 - have an error since we are implementing
03:59 - this interface we are required to
04:01 - implement all of the functions defined
04:02 - in this interface so let's do just that
04:05 - first of all the accessor which again
04:07 - with interfaces it must be a public then
04:09 - the function signature so void test
04:12 - function and with no parameters and
04:16 - finally we implement our method body
04:22 - just like this okay so now we have this
04:25 - class which correctly implements our
04:27 - interface now let's try it out let's go
04:30 - up here for our testing and first let's
04:33 - instantiate the new my class
04:37 - so we have an instance of myclass and
04:40 - now let's make a function that has a
04:42 - parameter of our interface type so this
04:47 - function receives a parameter of type I
04:49 - my interface and then here when we
04:54 - access my interface you can see that we
04:55 - have the interface function right here
04:58 - so we called the function on the
05:00 - interface and now up here after we have
05:02 - instantiated our class we can now use
05:05 - our test interface function and here it
05:09 - expects say I my interface object and we
05:12 - can pass in my class since my class does
05:14 - implement that interface
05:16 - okay so let's test running out this code
05:18 - and see what happens and if there it is
05:20 - we have our my class test function log
05:22 - so it correctly printed our message so
05:26 - up here we created an instance of
05:27 - myclass then we're passing in my class
05:30 - as a parameter of type my interface and
05:32 - then we're using the interface to call
05:35 - the interface function which is calling
05:37 - the function on the class that
05:38 - implements our interface and running
05:40 - this line of code again interfaces our
05:42 - contract so that means you must
05:44 - implement those functions and you can
05:46 - also have multiple classes implementing
05:48 - the same interface but with different
05:50 - implementations so let's try it out and
05:52 - make another class and here we're also
05:56 - going to implement I'm my interface and
06:03 - now up here let's create an instance of
06:06 - my second class and we call the same
06:11 - test interface and pass in my second
06:13 - class so we have a function which
06:16 - receives a my interface and in here
06:18 - we're sending it with two different
06:19 - object types and if we test and yep
06:23 - there it is both of our classes
06:24 - implement the same interface so we can
06:26 - call the same function on both of them
06:28 - but they implement the interface in
06:30 - different ways so we get different
06:31 - results awesome so here we define a
06:34 - simple interface method now inside of
06:36 - our interfaces we can also define
06:38 - properties so for example in my int then
06:43 - we the get and with set so here we have
06:46 - a simple property however we cannot
06:48 - define fields
06:51 - so then this and you can see interfaces
06:54 - cannot contain fields now another thing
06:57 - we can define our events so just like
07:05 - that
07:05 - so these are all the things that you can
07:07 - define in an interface you can define
07:10 - functions and events and you can define
07:12 - properties but not fields now in terms
07:15 - of implementing an interface it can be
07:17 - done with a class like we saw in here
07:18 - but we can also implement our interfaces
07:20 - instructs in the exact same way one of
07:23 - the most useful things about interfaces
07:25 - is how you can implement several
07:27 - interfaces when dealing with inheritance
07:29 - one of the main limitations is how you
07:31 - can only inherit from a single base
07:33 - class however with interfaces you do not
07:35 - have that limitation so here we can
07:37 - define a second interface and over here
07:46 - on this class we can implement on my
07:48 - interface and also I my second interface
07:53 - so just like that
07:55 - yet another limitation of C sharp is how
07:57 - structs cannot inherit from baseless but
07:59 - again structs can implement interfaces
08:02 - also an interface can implement another
08:05 - interface so for example I can make my
08:07 - interface implement the second interface
08:10 - now on here when I implement just on my
08:12 - interface you see that I have to
08:14 - implement also the other function so
08:16 - this means that whatever class
08:17 - implements the final interface it must
08:20 - also implement everything else defined
08:21 - in this one and in this one alright so
08:24 - here we looked at the theory behind
08:26 - interfaces now let's check out a
08:28 - practical scenario okay so here I am in
08:31 - the Nicene I have my player character
08:33 - that I can move around over here is an
08:35 - enemy character and over here is a crate
08:37 - now I can left-click in order to shoot
08:39 - some bullets and now what I want is for
08:42 - the bullets to damage both of these
08:44 - objects here in the same you can see
08:47 - both objects and you can see that they
08:49 - are both completely different so this is
08:51 - an enemy with the enemy script and this
08:54 - is a crate with a great script these two
08:57 - classes are completely separate they
08:58 - don't share any base class or anything
09:00 - so this is where interfaces are
09:02 - extremely useful
09:04 - let's look at out the scripts are set up
09:05 - over here in the project phones we have
09:08 - a bullet a enemy and a crate script
09:11 - let's inspect the boat there it is oh it
09:14 - has is this the bullet works by using
09:16 - physics so it gets fired and here we're
09:18 - checking for collisions so it's in here
09:21 - that we want to cause some damage if we
09:23 - hit a valid object then over here on the
09:25 - enemy script we already have a very nice
09:27 - damage function and the crate has one as
09:30 - well now for this type of shooting a
09:32 - bullet and testing for the hits I cover
09:34 - this in a previous video so check the
09:36 - link in the description if you haven't
09:37 - seen it yet
09:38 - and I'll back in the boat script over
09:41 - here we can identify what type of object
09:43 - we hit so we go into our Collider and we
09:45 - do a gift component and let's see if
09:47 - it's an enemy so you do get component
09:52 - and if enemy is not know then we have
09:55 - hit a enemy there is just like that and
10:00 - then we can do the exact same thing for
10:02 - our crate so can either get component
10:05 - that type crate and just like this so by
10:13 - looking at this code you can probably
10:15 - guess where we're going with this but
10:16 - let's test ok so here we are and I can
10:19 - shoot my boats and if I aim towards the
10:21 - enemy and shoot and if there you go we
10:23 - have a nice hit and over here is a crate
10:26 - aim and shoot and yep there you go I've
10:28 - hit the crate ok so we have our code
10:31 - working we can actually damage both
10:32 - types of objects but now let's say we
10:35 - want to add another object type
10:36 - something like a building doing it this
10:38 - way would mean that we would have to add
10:40 - all of our possible damage object types
10:43 - all in here in this function so
10:45 - eventually this would become a massive
10:47 - horrendous function so this is where
10:49 - interfaces come in instead of copy
10:51 - pasting all of this code for every
10:53 - single object type what we can do is
10:55 - let's go into the editor and here let's
10:58 - create a new C sharp script and let's
11:01 - call this AI damageable
11:03 - this won't represent an object that can
11:06 - be damaged so inside let's go and make
11:09 - this a interface called eye damage of
11:12 - all and on we're going to have is a void
11:16 - damage function
11:17 - that's it very simple now let's go into
11:20 - the enemy class so we have our enemy we
11:23 - are extending monobehaviour and now
11:24 - let's also implement i damageable and
11:27 - now we already have the damage function
11:29 - so we don't actually need to write
11:30 - anything else and the same thing on our
11:33 - crate so in here just implement I damage
11:36 - one all right so that's pretty much it
11:38 - now if we go onto our boat now instead
11:42 - of having all this copy pasted code
11:43 - we're going to go into our compiler to
11:46 - get the component of time I damageable
11:48 - so this will return an object i
11:50 - damageable see if we have it then we
11:56 - have hit a damageable object and we can
11:58 - call the damage function on our
12:00 - interface and that's it
12:02 - let's test okay here we are shooting
12:04 - bullets let's shoot the enemy there you
12:06 - go he got hit should the crate and there
12:07 - you go it got hit alright so we can now
12:10 - target both types of objects and now
12:12 - let's add another object type so over
12:15 - here I have a tower and it's holding the
12:17 - tower script and right now if I shoot it
12:19 - you can see nothing happens okay and now
12:22 - I can simply open up the tower script
12:24 - and just add damageable
12:25 - and that's it it already implements that
12:28 - function and now if you run so here we
12:31 - are and shoot any of there you go we can
12:33 - now damage the tower so just like this
12:35 - we have another object and made it
12:37 - damageable by just implementing a simple
12:39 - interface and you can also see how the
12:42 - implementation doesn't have to be
12:43 - exactly the same for example in the
12:45 - enemy here when I shoot him he spawns
12:47 - blood particles but the tower and the
12:49 - crate do not so over here you can see a
12:51 - very nice practical use case of how
12:54 - interfaces help you write cleaner better
12:56 - code instead of having lots of copy
12:58 - paste itself we just made sure that the
13:00 - damage works based on the interface and
13:02 - not on the specific object type another
13:04 - recent example is how I use interfaces
13:06 - extensively in the video on making a
13:09 - modular character controller in that
13:11 - video each module is defined as an
13:13 - interface then there are various
13:14 - implementations of each interface so for
13:17 - example there is an interface to set a
13:19 - target move position and then two
13:21 - classes that implement that interface
13:22 - one goes directly towards the position
13:24 - and one uses path fine so now that you
13:27 - know the basics of interfaces go check
13:29 - out that video to see how they can be
13:30 - used
13:31 - this video is made possible thanks to
13:32 - these awesome supporters go to
13:34 - patreon.com/scishow to code monkey to
13:37 - get some perks and help keep the videos
13:38 - free for everyone as long as you can
13:40 - download the project funds in a tony's
13:42 - from unity code monkey calm subscribe to
13:44 - the channel for more ENT deterrents post
13:46 - any questions I have in the comments and
13:47 - I'll see you next time
13:49 - [Music]