00:00 - in this video we're going to learn how
00:01 - to test if the player is grounded being
00:03 - grounded means the players touching the
00:05 - ground which is essential for a
00:06 - platformer in order to test if the
00:08 - player should be able to jump we're
00:10 - going to cover three ways of doing that
00:11 - test and in the end we won't choose
00:13 - which one is best let's begin
00:18 - [Music]
00:22 - hello and welcome I'm your code monkey
00:25 - and this channel is all about helping
00:26 - you will learn how to make your own
00:27 - games with enough tutorials made by a
00:29 - professional indie game developer so if
00:31 - you find the video helpful consider
00:32 - subscribing so here is my player
00:35 - character I can move them left and right
00:37 - and I have also implemented jump with
00:40 - the space key so when I press space I
00:42 - can indeed jump so this seems correct
00:44 - however if I spam the space key just
00:47 - like that all of a sudden I can find so
00:50 - we need to make sure that we can only
00:51 - jump when the character is actually
00:53 - touching the ground so let's see how the
00:56 - code is set up here is the player class
00:59 - it's free simple all we're doing is
01:01 - doing some input tests so here on the
01:04 - fixed update we are doing our hand on
01:06 - movement if the left arrow is now we set
01:09 - the velocity to move to the left if the
01:11 - right arrow moved to the right if none
01:12 - of them we stopped and here if we press
01:15 - space we got our jump velocity which
01:17 - modifies the velocity pointing up so
01:21 - what happens is every time we press
01:23 - space we are doing this which is gonna
01:24 - make him jump so it's in here that we
01:27 - need to check if the player is touching
01:29 - the ground before we do the actual jump
01:30 - so let's make our function to test if
01:33 - the player is grounded so down here we
01:35 - make a private ball since this will be a
01:38 - question every rank on this is grounded
01:42 - as I said we're going to test out three
01:45 - different methods so let's start off
01:47 - with the simplest one which will be just
01:49 - a simple ray cast now in a ray cast in
01:52 - case you don't know is just a line going
01:54 - from point A to point B and the physic
01:56 - system tests if that line hits any
01:59 - colliders so we do a physics 2d dot ray
02:02 - cast so as you can see we need an origin
02:06 - a direction and a distance so for the
02:08 - origin it will be the center of our
02:10 - collider so we go into our box Collider
02:13 - reference and we grab the bounds dot
02:17 - center of our box Collider okay for the
02:20 - direction we want to point down so a
02:22 - simple vector Q dot down and finally for
02:25 - the distance since the origin is at the
02:27 - center of our box Collider we can use
02:29 - half the height of the collider as our
02:31 - distance so we go into the boxing either
02:35 - going to the
02:35 - pounds and half the total height is
02:38 - exactly what is stored on the collider
02:41 - extents so we can just use the extents
02:44 - that Y and that's our total distance so
02:47 - we have a line going from the center
02:49 - pointing down by half the height which
02:51 - perfectly matches the bottom of the
02:53 - collider
02:54 - however being that mathematically
02:56 - perfect could cause some issues so let's
02:58 - add a little extra so in here a extra
03:01 - height test let's just put a very small
03:04 - amount just enough so that it tests
03:07 - right outside of the player coin so in
03:10 - here we test by that distance pause that
03:11 - okay all right so all of this might seem
03:14 - complex but it's really very simple all
03:16 - we're doing is a simple test from point
03:18 - A to point B where Point a is the center
03:20 - of our box Collider and point B is the
03:22 - very bottom now we need this for this
03:25 - function to return whether the player is
03:26 - grounded or not so we are grounded if
03:29 - the raycast hits something and we are
03:31 - not if the raycast hit nothing now we
03:34 - can visualize the recast with a simple
03:36 - debug to draw right this takes a start
03:40 - point and a direction so the start will
03:43 - be the origin of our race so let's use
03:45 - this the direction also contains the
03:49 - distance so we simply take vector T dot
03:52 - down and then we multiply by our
03:55 - distance and that's our red then we can
03:59 - also add a color so let's add different
04:01 - colors to test if we are grounded or not
04:03 - so in here we define a color for the
04:06 - gray color and if we hit something we
04:09 - want the right to be in green if not we
04:10 - want to be in red so to get the result
04:13 - of this raycast as you can see it
04:15 - returns a raycast set to D so recast hit
04:17 - to D and we know if we hit something if
04:23 - the raycast e dot Collider if it is
04:26 - different from known then that means we
04:28 - have hit something so if we hit
04:30 - something let's put the break color with
04:34 - color green so we see green if we are
04:38 - grounded and if not let's put the red
04:40 - color as color
04:42 - not rep and finally at the end from this
04:45 - function we return if we are grounded so
04:47 - we just do a return if the recasted
04:50 - Euler is different from not okay so
04:53 - again what we are doing here is doing a
04:55 - recast and then drawing an array to make
04:58 - sure that we see the result of our
05:00 - recast so that's left is to go up here
05:03 - into our jump code and we're only going
05:05 - to jump if we press the spacebar and our
05:07 - character is grounded okay let's test
05:12 - okay so here we are now first of all in
05:15 - order to be able to see our debug array
05:17 - we need to go up here and enable gizmos
05:19 - and there you go you can now see the
05:21 - rights going from the center of the
05:23 - character pointing straight down and
05:24 - going outside by just a tiny bit you can
05:27 - see that it's in green since our
05:29 - character is indeed grounded and if I
05:31 - jump and as you can see we have an error
05:34 - the color is still green which means we
05:36 - are so grounded so if I swam space we
05:38 - can still jump so this isn't working
05:41 - exactly as intended so let's see what's
05:43 - happening to identify the issue that's
05:45 - going to our is grounded function and
05:48 - down here let's do a debug log of the
05:51 - rake acid Collider so we can test to see
05:54 - what our raycast is hitting let's test
05:57 - and yep right here on the console you
05:59 - can already see exactly what the issue
06:01 - is the issues that the raycast is
06:04 - hitting the player box Collider instead
06:06 - of hitting the platform now we obviously
06:08 - want to ignore the player from the
06:10 - ground check so let's fix that one extra
06:13 - parameter we can use in our recast is
06:15 - the use of a layer mask which means we
06:17 - can test to make sure that our break has
06:19 - only hits on certain layers so let's use
06:22 - layers to identify which ones are our
06:24 - platforms so here in the editor is
06:27 - select a platform go in here to the
06:29 - layer and add a new layer now in here on
06:32 - my channel layer for the platforms then
06:35 - we go back into the transfer select all
06:37 - of the platforms and set them all to the
06:39 - platform's layer okay so now we have a
06:41 - layer that we want to collide with so
06:43 - now let's go back into our code and here
06:46 - we need to know the layer mask so we can
06:48 - go up here and use something very useful
06:50 - from unity first at a serialize field so
06:52 - we can set it the knee
06:53 - very private and now we can use a layer
06:56 - mask let's call this the platform layer
06:59 - mask so let's in the editor how that
07:03 - looks
07:04 - here is the player script and here is
07:06 - the platform layer mask and as you can
07:08 - see we can select from the various
07:10 - layers and in this case we're only going
07:11 - to some like the platform layer and you
07:13 - have there you go only down okay now
07:16 - back into the code so down here we can
07:19 - outclass the platform layer mask as our
07:21 - layer mask so that means that this rake
07:24 - has will only collide with objects there
07:26 - are on this layer so let's test again so
07:30 - here we are and indeed you can see on
07:32 - the console that we are not hitting the
07:34 - player but rather we are hitting the
07:35 - platform so now we can try to jump and
07:39 - yet there you go the Ray turn into red
07:41 - and as you can see the console suddenly
07:43 - turn into no since there is no hit while
07:45 - he's jumping ok awesome so far so good
07:49 - so this is the first method for testing
07:51 - if our character is Grum now we do have
07:54 - several potential issues with this
07:56 - method the first issue we have is with
07:59 - regards to slopes so here on the left
08:01 - side I have a soft platform and if I go
08:04 - to it and yep you can see that the is
08:07 - grounded function is now returning false
08:09 - the reason why is because the player is
08:12 - touching the ground but only on this
08:14 - corner of his box Collider so we can
08:16 - pause this son like the player so we can
08:18 - visually see the box in leather and yep
08:20 - there you go
08:21 - so you can see that the box Collider is
08:23 - hitting right here on the corner
08:24 - but our rake house is not going far
08:26 - enough in order to actually collide with
08:28 - the platform since we're doing the
08:30 - raycast in the center we aren't doing
08:31 - enough extra distance in order to
08:33 - account for the slope so one solution to
08:35 - this is the simple increase the extra
08:37 - distance check so if you know the
08:39 - maximum slope this would be a potential
08:41 - fix so in here let's put the extra high
08:44 - test and let's say at 5 let's test again
08:47 - and as you can see the array is now much
08:50 - longer and now if we go into the slope
08:51 - we can indeed correctly identified that
08:54 - we are still theoretically grounded so
08:57 - this is one potential solution however
08:59 - let's see how we still have one issue
09:02 - over here on the right is an edge so we
09:05 - can jump into it go into the edge
09:07 - and I can still jump up here personally
09:10 - find everything worse I can spam and
09:11 - only jump when I'm down there okay
09:13 - however if I stand right on the edge
09:15 - there you go there's a red way again and
09:20 - we are no longer grounded despite the
09:21 - fact that is you can see the buxom
09:23 - weather is indeed correctly interacting
09:24 - with the platform so the issue once
09:27 - again is due to limitations of doing
09:28 - just one raycast
09:30 - which since the raycast is in the center
09:32 - it is not accounting for when we are
09:33 - only holding on from the edge so this
09:36 - brings us into our second method for the
09:38 - technical ground which is the Box cast
09:40 - here in the code the Box cast is
09:42 - extremely simple to change in the
09:45 - physics 2d class we have the array cast
09:47 - which tests with array and we also have
09:49 - a very simple box cast which tests with
09:52 - a box essentially imagine a virtual box
09:55 - Collider being moved in a certain
09:57 - direction so here the first parameter is
09:59 - exactly the same which is our origin
10:02 - however then instead of having direction
10:04 - we have the size so for the size of our
10:07 - box we can simply go into the box
10:09 - collide TD that bounce dot size then we
10:15 - need an angle which in this case we
10:17 - don't want the testing box to be rotated
10:19 - around so we don't even add zero
10:21 - then we need a direction which is indeed
10:23 - the same vector to point down and now
10:27 - for the distance since we are moving a
10:28 - box we don't need a large enough
10:30 - distance to account for slopes so we can
10:33 - simply go by distance of the extra
10:35 - height test and finally we have the
10:37 - layer mask which is the same as the
10:39 - platform layer mask so now the extra
10:42 - height s can be relatively small okay so
10:45 - that's it for switching from a recast
10:47 - into a podcast now down here in order to
10:50 - see what our code is doing instead of
10:52 - array we need for rays to draw the box
11:10 - okay so here we have our three raised
11:12 - only three since we don't actually care
11:14 - about the tongue right so let's do our
11:16 - test and see what things look like okay
11:20 - here we are and as you can see this is
11:21 - our virtual box it is correctly hitting
11:24 - the floor and if I jump there we go it
11:27 - turns into red and it plays the
11:28 - animation so if I spam it doesn't work
11:30 - okay great
11:31 - here we can go into the slope and as you
11:35 - can see works perfectly fine since we
11:37 - are using a ray cast so we are correctly
11:39 - hitting right at the corner there so the
11:42 - slopes work and finally let's go and see
11:45 - the problem that we had with the edge so
11:48 - all the way down here and if we go if we
11:50 - stand right on the edge there you go
11:52 - everything still works we can still jump
11:54 - even though we aren't right on the edge
11:57 - so as you can see this is working in
11:59 - every possible scenario so this method
12:02 - is the one I would suggest you use for
12:04 - making your own platform however just
12:06 - for educational purposes I won't cover
12:08 - one last method and this last method
12:11 - might seem like the best way for
12:12 - beginners since it's more visual but if
12:15 - you made it this far in the video I'm
12:16 - hoping you fully understand that the box
12:18 - aligner is without without the superior
12:20 - method so with the last method we're
12:23 - going to essentially just use a second
12:24 - hitbox so here we have our player
12:28 - character and inside let's make another
12:31 - empty game object this will be our
12:33 - ground check in here we had a box
12:36 - Collider and it is pretty much the same
12:39 - except shifted down so as you can see
12:41 - one of them the one on top is the player
12:43 - box Collider and the bottom one is the
12:45 - ground check in here let's make this a
12:48 - trigger so it doesn't collide with our
12:49 - physics okay now let's make a script for
12:52 - it so we go in here create a new C sharp
12:55 - script this won't be our ground check
12:58 - let's drag it onto our ground check game
13:01 - object now here in the code we can
13:04 - access the collision functions so we go
13:06 - into a private void on trigger state
13:09 - Udine
13:11 - so this function gets called whenever
13:13 - the collider is hitting something so in
13:16 - here we just need to do a simple test so
13:18 - we grab a boolean colic is grounded and
13:21 - it simply becomes true if the collider
13:23 - is not known so in here we do a public
13:27 - ball is round however the code just like
13:31 - this will have the same issue of
13:32 - colliding with the player so in here we
13:34 - also make a civilized film for the
13:36 - private layer mask for the platform
13:40 - layer mask so if the collider is not
13:45 - known and the collider matches the
13:48 - platform layer mask then we're going to
13:50 - be grounded and finally we also need a
13:53 - private void on trigger exit to dien set
13:57 - the is rounded back into false okay that
14:01 - should do it and here on the is grounded
14:04 - function for time being let's count out
14:07 - this code and instead we're going to
14:12 - grab the ground check component from
14:14 - channel so we do transform that point
14:16 - our ground check transform then we get
14:21 - the component for the ground check and
14:24 - we simply return the is grounded boom so
14:27 - return that ok so this is our third
14:30 - method and let's see if it works ok so
14:34 - my team here we are and if I jump there
14:37 - you go the jump still works perfectly
14:38 - fine and I cannot spam ok good if I go
14:42 - into the side let's see the slopes and
14:45 - you the slope is working perfectly fine
14:46 - I can jump and I stop ok and finally for
14:50 - the edge if we go all the way down here
14:53 - down to the edge and everything still
14:55 - works fine so the reason why beginners
14:58 - might do this method is because it seems
15:00 - simple since you can clearly see the
15:02 - first and the second box on whether and
15:04 - the code is pretty much only a few lines
15:06 - whereas the box cascode seems somewhat
15:08 - more complicated but I hope this video
15:11 - clearly explained how recasts work and
15:13 - how the bus caste works so you should be
15:16 - able to fully understand the box cast
15:17 - and why it is the Superion method so
15:20 - just like now we have three methods for
15:22 - testing if the player is grounded
15:24 - this is essential for any platformer in
15:26 - order to test if the player should be
15:28 - able to jump this video covered three
15:30 - methods but for most cases you should
15:32 - stick with e-box casma as always you can
15:35 - download the project files in utilities
15:36 - from E&T code monkey comm if you don't
15:39 - like the video subscribe to the channel
15:40 - for more ent tutorials post any
15:42 - questions you have in the comments and
15:44 - I'll do my best answer alright see you
15:46 - next time
15:47 - [Music]
15:55 - you