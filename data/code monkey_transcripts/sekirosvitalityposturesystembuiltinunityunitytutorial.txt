00:00 - hello and welcome I am your code monkey
00:01 - in this video we're going to create the
00:03 - vitality and posture system from Sakura
00:05 - shadows I twice let's begin
00:10 - okay so this is what we want to create
00:12 - this is the vitality and posture system
00:15 - from Socorro Shadowside twice the red
00:17 - bar is our health bar and this bar is
00:19 - the posture bar over here I have some
00:22 - buttons to interact with the system for
00:24 - example I can increase and decrease the
00:27 - posture as you can see it increases the
00:29 - examine like in the game going from
00:30 - middle onto the sides and the color also
00:33 - shifts from yellow into red once it
00:35 - reaches the limit there you go posture
00:38 - broken and we have a nice omelet then
00:41 - for the health we can also damage it and
00:43 - there you go we have a nice animation
00:45 - showing the amount of damage from the in
00:47 - last hit then we can also heal it back
00:50 - up all right so let's get to it so let's
00:53 - start off by making the visuals in our
00:55 - UI over here in the project folder I
00:57 - already have a bunch of textures that
00:59 - we're going to use so let's go into the
01:01 - canvas and start by creating an empty
01:03 - game object let's call this the hell
01:06 - posture you want inside let's make an
01:09 - empty game object this will be the
01:11 - health bar top but the image component
01:14 - and drag the vitality bar top
01:17 - okay now underneath it let's put a
01:20 - simple image
01:29 - and in order to be able to use the
01:31 - sprite options let's use a simple sprite
01:34 - which will be our white pixel and now we
01:39 - can go here into the filmed select
01:42 - horizontal from left to right and now we
01:43 - can change the fill amount and finally
01:46 - let's have the health bar background
01:48 - which is just a solid color okay so this
01:57 - is our health bar we have the background
01:59 - which is a somewhat common we have the
02:01 - bar which you can modify the filament
02:03 - and we have the health bar on top ok so
02:07 - now for the posture bar so we're here I
02:09 - have the texture for the bar which we're
02:11 - going to stretch and the background so
02:21 - place the background then on top of the
02:22 - background let's put the posture bar
02:27 - however we don't want it to look like
02:29 - this we want to make it work exactly
02:31 - like in the game which is it stretches
02:33 - from the center to the sides so in order
02:36 - to do that we go into our texture we go
02:39 - into the sprite editor and here we drag
02:42 - the sides into there and just like that
02:48 - the center portion gets stretched but
02:50 - the edges stay correct so let's apply
02:52 - and now we can go into the posture bar
02:55 - and change this from simple into sliced
02:57 - and yep just like that it works as you
03:00 - can see if the width goes down the bar
03:02 - expands from the center to the sides and
03:05 - the sprite is in white since we're going
03:07 - to tint this as the posture increase so
03:09 - start off with a yellow orange and then
03:11 - it starts getting red as it gets more
03:13 - full okay so our visuals are all
03:16 - correctly set up for the posture bar we
03:19 - just need to modify the width and for
03:21 - the health bar we just need to modify
03:23 - the film a month now let's deal with the
03:25 - code let's first make the script that
03:29 - won't handle our visuals so in the
03:30 - scripts create a new C sharp script and
03:32 - this will be our and health posture UI
03:35 - visual
03:38 - let's drag it onto our window okay now
03:42 - in here first let's grab all of our
03:44 - references
03:57 - okay so we have our health bar we're
04:00 - going to grab the image component and
04:01 - for the posture we grab the right
04:03 - transform component so now let's make
04:05 - some functions
04:06 - let's make first a public voice call it
04:09 - set health and in here we're going to
04:11 - receive a parameter for the health
04:13 - normalized okay so this function will
04:18 - receive a normalized value for the
04:19 - health so it won't be one if we want for
04:22 - health and zero if we want empty so on
04:25 - we need to do is going to the health bar
04:26 - image and set the fill amount to our
04:28 - health normal okay that's it for the
04:32 - help function now for the posture make
04:35 - another probably going for the set
04:37 - posture and again we receive a fall for
04:41 - the posture and normalize now in here
04:45 - we're going to modify the posture bar
04:46 - right transform modify the size Delta
04:48 - which takes a vector two so we need our
04:51 - width and then our height so for the
04:53 - height we keep it exactly the same and
04:55 - now we need to calculate the width so in
04:58 - order to do that combination using a
04:59 - normalized value all we need to do is a
05:01 - constant for our bar width so let's go
05:04 - up here make a private concert for the
05:07 - posture bar width so let's view in the
05:13 - editor the width of our foam bar here is
05:17 - the posture bar and as you can see it is
05:19 - foam when it gets up to about that so
05:22 - let's say 560 so our posture bar width
05:25 - won't be 516 and then all we need to do
05:29 - is in here we passed the posture
05:31 - normalize and multiply it by the maximum
05:34 - okay so both these functions should be
05:36 - working so let's create some testing so
05:40 - for example let's make a prayer to it
05:42 - start
05:46 - so here on let's set the health so we
05:49 - call sat home let's put that 80% so we
05:51 - pass in point 8 F and let's also set the
05:55 - posture and let's put it at 20% so point
05:58 - 2 out okay so the health should be
06:01 - mostly full and the posture mostly empty
06:03 - let's see and yep there they are the
06:06 - health bar is mostly following the
06:08 - posture is mostly empty alright so the
06:10 - basics of our visuals are working now
06:12 - let's work on the logic so for that
06:14 - let's create a new C sharp script
06:17 - this will be our health posture system
06:21 - now we're separating the visual from the
06:24 - logic in order to keep our code nice and
06:25 - clean so let's open this script and then
06:29 - here first of all let's remove
06:30 - monobehaviour since this will be a very
06:32 - simple class now the first thing we need
06:37 - is to store the current state for the
06:39 - health and posture so for that let's
06:41 - sort of them as hints so we get a
06:42 - president for the health month and a
06:45 - private int for the posture among now
06:49 - let's also store the maximum values
06:50 - we're going to store them as normal
06:52 - variables so we can easily modify it to
06:54 - support upgrades or tougher enemies so
06:56 - in here we simply do a primitive for the
06:58 - health amount max
07:00 - and the same thing for the posture okay
07:06 - these are the fields we need right now
07:08 - so let's make a constructor
07:15 - and in here we set the health amount max
07:17 - let's put it at 100 for the posture
07:21 - mount max so it's also putting on a
07:23 - hundred for the starting health we start
07:25 - off with the health amount max and for
07:28 - the starting posture we start off at
07:30 - zero all right so this is our setup now
07:34 - let's make some functions to return
07:35 - normalized values of our health and
07:37 - posture so in here make a public float
07:40 - this will be the get health normalize in
07:45 - order to get a normalized value all we
07:47 - need to do is return the current amount
07:49 - divided by the maximum so return the
07:51 - health amount divided by the health
07:53 - amount max however these are two
07:56 - integers so we must remember to convert
07:58 - them into phone so in here convert the
08:01 - first one in default and the result
08:02 - won't be a fault if we didn't do that
08:05 - and we were dividing an INT by another
08:07 - int we would get an incorrect value int
08:10 - cannot hold decimals so anything with
08:12 - the value would simply return a zero
08:14 - alright so let's do the same thing for
08:17 - the posture normalized okay so
08:24 - everything seems correct
08:25 - now let's link up the visual to the
08:28 - logic so for level is going to the
08:30 - visual script and in here and let's make
08:33 - a function to set the logic so we make a
08:35 - polaroid set health posture system and
08:39 - in here we're going to receive a health
08:42 - posture system object let's store it as
08:47 - a variable
08:54 - okay so far so good now let's set up our
08:57 - visuals for testing so here on our start
09:01 - let's create a health posture system so
09:03 - we create a variable equals a new health
09:06 - bustard system and let's set this one to
09:09 - be the one that we're going to use so
09:10 - set the health foster system and we pass
09:12 - in this project again this is just for
09:17 - testing in a proper game you would
09:18 - obviously run this code to create the
09:20 - health pasture system somewhere else
09:22 - like for example on your character
09:23 - script you would create it in there and
09:26 - then pass it on into the visual which
09:27 - would display it so after setting the
09:31 - health posture system let's have the
09:34 - health - what we grab from the help
09:36 - foster system gets normalized and same
09:39 - thing for the posture we go into the
09:40 - system and get the posture normal okay
09:44 - so let's see if our health is completely
09:46 - full and the posture completely empty
09:48 - and yep there's the health Cibola phone
10:00 - and the posture completely empty alright
10:02 - so far so good so now that we have the
10:06 - logic and visuals linked up let's add
10:08 - some functions to damage our health and
10:09 - increase our posture so let's go into
10:12 - the system and in here first make a
10:15 - public void health damage we're going to
10:20 - receive an end for the damage amount
10:24 - then all we need to do is reduce the
10:26 - health amount by the damage amount all
10:30 - right now a function public void posture
10:34 - increase we're going to receive an int
10:37 - for the amount and we simply do the pass
10:40 - your mom was equals our amount so we can
10:44 - now damage our health and increase our
10:46 - posture so when these values change we
10:48 - need to somehow notify the visuals so
10:51 - for that let's use some events
10:56 - so going up here let's make a public
10:59 - event event handler and let's call this
11:02 - on health change and let's also make one
11:06 - call on posture change
11:10 - okay now let's call these events on our
11:12 - function so in here on the health damage
11:14 - if the event has subscribers so if it is
11:17 - not known then we're going to call it
11:19 - pass in this reference and event are
11:21 - empty do the same thing for the posture
11:26 - and just like that we have two nice
11:30 - events that won't get notified whenever
11:32 - our valleys change so using that we can
11:35 - now go back into our visual and here we
11:38 - can subscribe to the events to update
11:40 - our bars so here when we're setting the
11:43 - health posture system let's use this to
11:44 - go into the health posture system and
11:46 - subscribe to the on health change event
11:50 - so when the health change we want to
11:52 - update the house so it's exactly what we
11:54 - were doing in here we set the health and
11:57 - we give it the help normalize and let's
11:58 - also subscribe to the on posture changed
12:01 - event and here we update the posture and
12:13 - it's that simple so when the health
12:17 - changes on our health posture system it
12:19 - will fire the on health changed event on
12:21 - that event it will call this function
12:24 - and this function will set the health 2d
12:26 - help normalize okay so now let's make
12:28 - some nice tests to see if the bars are
12:31 - indeed updating as the eval exchange so
12:34 - here for testing let's create a function
12:36 - periodic this is part of the code monkey
12:39 - Tony's that you can grab for free from
12:41 - unity code monkey calm so in here I can
12:44 - create and it won't trigger an action
12:47 - every certain amount of time so let's
12:50 - say every 200 milliseconds let's cause
12:52 - some damage so we're going to trigger
12:55 - this action
12:57 - and in here we're going to go into the
12:59 - help foster system and cause some health
13:01 - damage okay so every 200 milliseconds
13:06 - this action won't trigger and it won't
13:08 - cause five health damage so let's see if
13:11 - the bar correctly updates every time it
13:13 - takes some damage okay there's the bar
13:17 - and yep as you can see the health is
13:19 - going down and every time the health
13:21 - system gets damaged the bar correctly
13:22 - updates all right good
13:25 - so that we have this working let's
13:27 - figure out when the character is dead
13:29 - and also when the posture has been
13:30 - broken so back in our system for testing
13:35 - for death it's extremely simple
13:36 - here we are decreasing the health amount
13:38 - by the damage amount all we need to do
13:40 - is test if we are under zero so we do if
13:44 - the health amount if it is less than or
13:47 - equal to zero then the character is dead
13:53 - let's set the health amount to zero so
13:55 - it doesn't go into the negatives and I
13:57 - mean here let's fire an event so let's
13:59 - go make a new event call this on then
14:02 - and let's go and fire this event all
14:08 - right so that's it for testing on death
14:10 - now for the posture we need to test when
14:14 - the posture amount goes past the maximum
14:17 - so let's see if the parts your mount if
14:19 - it is bigger than the posture amount max
14:24 - then posture broken again let's put it
14:30 - into the max we doesn't go past it and
14:32 - let's fire an event so again on that and
14:35 - here on posture broken
14:43 - okay so whenever we call help damage we
14:46 - reduce the health amount by the damage
14:48 - amount we test if it is under zero if so
14:51 - it is dead and we fired this event on
14:53 - the posture increase we increase the
14:55 - posture mount we test if it is above or
14:58 - equal to the maximum and if so we fire
15:01 - the unpassed your broken event okay so
15:04 - let's go back into our testing code and
15:06 - here let's subscribe to our new event so
15:09 - on the health posture system subscribe
15:13 - to the on that event so here when he's
15:16 - done let's do a pop-up so go into the
15:19 - CMDB class which again part of the code
15:21 - monkey tony's in here i can simply call
15:23 - a text pop up on the mouse position and
15:27 - let's just say dead alright now
15:30 - subscribe to the health posture system
15:32 - dot on posture broken and let's do the
15:36 - same thing also fire an ice pop okay
15:44 - this should be working now to test this
15:46 - let's make our damage manual instead of
15:48 - what we were doing which was automatic
15:50 - so let's remove this and sudden let's
15:53 - create some buttons again using this
15:56 - handy request i can create very simple
15:58 - buttons in the UI
16:09 - okay so I'm creating to testing buttons
16:12 - one of them to damage my health and one
16:15 - of them to damage a posture okay that
16:17 - should do it so let's test okay so here
16:20 - we have the two testing buttons so I can
16:23 - click on this and the health should go
16:24 - down and yep there it is and let's see
16:26 - if we see the pop-up when the health
16:28 - goes down to zero and yep there you go
16:30 - there's the pop up the character is now
16:32 - dead and again increase the posture and
16:34 - yep there's the bar increasing and once
16:36 - it gets full yep posture broken
16:38 - okay great so our system is working
16:40 - exactly as intent now we need to have
16:43 - healing and decrease the posture so
16:46 - let's go back into the system code and
16:49 - here let's make a public void health
16:51 - heal and we're going to receive an int
16:54 - for leaky or not I'm going to do pretty
16:57 - much the same thing we go into the
16:59 - health amount we increase it by the heal
17:01 - amount and then we also count on health
17:03 - change let's also do a test if the
17:06 - health amount goes fast you help the
17:09 - mouth max then we cap it on account
17:10 - amount equals healthy mouth max okay so
17:15 - that's healing now for the posture
17:16 - decrease public voice posture decrease
17:19 - and with receiving in for the amount and
17:22 - here we change the posture mount we go
17:25 - down by amount and again we also call on
17:28 - posture change okay so we have functions
17:34 - to damage the health heal the health
17:36 - increase the posture and decrease the
17:38 - posture let's add some more testing
17:40 - buttons
17:45 - okay so two more buttons want to heal
17:48 - and want to decrease the posse room
17:49 - let's see okay so here I am with my four
17:52 - buttons I can damage the health yep
17:54 - there's the bar going down and now I can
17:56 - heal it and the bar goes back up to the
17:58 - maximum okay I can increase the posture
18:00 - and our four want I can decrease the
18:03 - posture
18:03 - all right great so we have everything
18:06 - working it's now that we have this let's
18:08 - add some nice effects we want the
18:11 - posture bar to change color from yellow
18:13 - into red and also how I did when the
18:16 - posture has been broken so let's first
18:19 - do the color so here on the original
18:21 - script let's go into where we're
18:23 - changing our set posture yep in here so
18:27 - in here we need to calculate the color
18:29 - based on this posture normal so color
18:33 - for the posture bar color now we want to
18:39 - convert to start at yellow so young mu
18:41 - is full red phone green and then we want
18:45 - to go towards red as the posture
18:47 - normalized goes up so in order to go
18:50 - from yellow to red we need to decrease
18:51 - the green down to zero so that means
18:55 - that this is very simple we start off at
18:56 - one and then we go down by the posture
18:58 - normalized x one app so when question
19:02 - ara is the zero we get a 1 so 1 1 we get
19:06 - a perfect young one posture normalized
19:08 - is 1 we get 1 0 so a perfect red then we
19:12 - need to set our image file so let's go
19:14 - up here and first grab a reference
19:22 - so I have a reference to the posture of
19:24 - our image so now all I need to do is go
19:26 - down here and set the color to our
19:28 - constantly that posture bar comma
19:32 - alright that should do it
19:33 - let's test okay so here we are the
19:36 - posture bar is empty as it increases
19:38 - okay it's yellow it's becoming orange
19:40 - more orange and more red and it's almost
19:44 - completely red and now the partials are
19:45 - broken and yep it is perfect right and
19:48 - as we decrease you can see that the
19:50 - congos back into yellow okay great so
19:53 - the collar is working now let's add some
19:55 - highlighting when the posture has been
19:57 - broken so for that I have a texture here
20:00 - which is just a simple texture so let's
20:03 - put it on top of the background but
20:04 - below the bar so drag it in here this is
20:07 - the posture bar kind of like so let's
20:11 - start off with this game object as a
20:13 - bond and we're only going to show it
20:15 - when the posture has been broken so
20:17 - let's go into our code go up here grab a
20:20 - reference to that game object so the
20:22 - game object for the posture bar
20:26 - highlight okay so I have reference to
20:34 - that game object so now let's give it
20:36 - down here where our posture is broken
20:37 - and we simply do it and step active into
20:40 - true okay so when this event is
20:44 - triggered the hot bar will be visible so
20:47 - let's see
20:48 - okay let's increase the posture and as
20:51 - goes up gets close to being broken and
20:53 - increase and yet there you go the image
20:56 - shows up now it's a very simple
20:58 - animation to make it more flashing so
21:01 - for that we just add the animation
21:03 - component here create an animation clip
21:06 - and let's just do a very simple flash so
21:09 - we were at the image gravity color
21:19 - okay so here is a very simple flashing
21:22 - animation just the Alpha goes down and
21:24 - back to one so we just set it to play
21:26 - automatically and that's pretty much it
21:28 - let's see okay so here we aren't as the
21:31 - posture increases once it gets broken if
21:34 - there you go the how I chose up and it's
21:36 - flashing and it's very visible okay
21:38 - great so now let's add a effect to the
21:41 - health bar to show how much damage has
21:43 - been taking so for that we want a
21:46 - secondary bar to show the difference
21:47 - between our current health and what we
21:49 - had previously so it's created here in
21:52 - the editor well it's simply duplicate
21:54 - our normal bar let's call this the
21:57 - health bar damage and let's tint it in
22:01 - light grey so this will essentially
22:03 - display the amount of damage we took on
22:05 - the very last hit so it shows up for a
22:07 - while and then gets shortened back into
22:09 - our current health okay so let's go into
22:12 - the code first grab our image reference
22:22 - alright we have the reference for our
22:25 - health bar damage image now we also need
22:28 - to know a timer for when to shorten it
22:33 - so essentially this is the amount of
22:35 - time we're going to wait before actually
22:37 - shortening the bar so let's define a
22:40 - constant for the maximum timer
22:47 - so when we get hit the bar won't display
22:50 - for one second and then the tournament
22:52 - goes down and as soon as it goes under
22:54 - zero the bar starts to shorten all right
22:57 - so these are all the films we're going
22:59 - to name so now let's go and make an
23:01 - update so in here make a private void
23:04 - update and now let's countdown the timer
23:08 - so we go in here on to the health bar
23:12 - damaged shorten timer simply reduce it
23:17 - by time.deltatime and then we test if
23:21 - the timer is under zero if so then
23:30 - shorten damage bar so in order to
23:34 - shorten it we need to change the fill
23:36 - amount so we go into the health bar
23:38 - damaged image and we need to modify the
23:40 - film amount towards the actual bar film
23:43 - amount so we're going to do a test if
23:46 - the health bar image not fill amount if
23:49 - that one is smaller than the health bar
23:52 - damaged filament if so then we want to
24:00 - shorten it
24:08 - so in here we're defining a shortened
24:11 - amount variable so we're going to
24:12 - shorten by three per second and we
24:15 - simply set the health bar damaged image
24:17 - dot fill amount and we reduced by the
24:19 - shorten amount so all this will only
24:21 - happen once the timer is over so now we
24:25 - need to set this timer so we're going to
24:28 - do that let's go where the health
24:29 - changes here on our set health let's
24:34 - simply test if the damage image filament
24:40 - if it is bigger then the health bar
24:43 - image dot fill amount then that means we
24:47 - took some damage so we set the timer to
24:51 - be our timer max if not if the health
24:57 - bar damaged image is not bigger than the
25:00 - health bar image then that means we were
25:03 - healed so we simply set the fill amount
25:05 - to be on the current
25:16 - okay so that should do it so let's test
25:21 - okay so here's the bar with completely
25:23 - full health and everything looks normal
25:25 - now if I take some damage yep there we
25:28 - go there's the white part it shows for
25:29 - awhile shows that this was the amount of
25:31 - damage we took and then it shortened it
25:32 - and if we take several points of damage
25:35 - at once so quick yep there you go this
25:38 - is on where damage end gives down and
25:39 - click again and after a while it goes
25:41 - out so this way we can easily see how
25:43 - much damage we took on the very last
25:45 - attack so there you have it we created
25:48 - the health and posture system from
25:49 - Sakura shadows die twice it's a really
25:52 - interesting system in that there's two
25:54 - different ways to defeat an enemy and
25:56 - the UI visuals are also very unique in
25:59 - the next video we're going to create the
26:01 - combat system and we're going to apply
26:03 - this system with these visuals to it as
26:06 - always you can download the project
26:07 - files in utilities from unity called
26:09 - monkey comm if you have any questions
26:11 - post them in the comments and I'll do my
26:12 - best to answer them subscribe for more
26:14 - videos and I'll see you next time