00:00 - in this video we're going to make a
00:01 - hockey bar to select our active weapon
00:03 - each weapon is unique and the player can
00:06 - activate them by clicking on the hotkey
00:07 - bar or using the keyboard the bar is
00:10 - customizable so each weapon or item can
00:12 - be dragged into a different position
00:13 - let's begin
00:17 - [Music]
00:21 - hello and welcome I'm your code monkey
00:24 - and this channel is all about helping
00:25 - you learn how to make your own games
00:27 - with NF tutorials made by a professional
00:29 - indie game developer so if you find the
00:31 - video how fun consider subscribing ok so
00:33 - this is what we want to make over here
00:35 - is my player character I can move them
00:37 - around and look around as you can see
00:39 - I'm currently homing a pistol and I can
00:41 - click in order to shoot and there you go
00:43 - I'm shooting my pistol now here on the
00:45 - UI there's this nice hotkey bar with
00:48 - numbered keys so for example I can press
00:51 - 3 and there you go I've equipped the
00:53 - sword I can press 4 to equip a shotgun
00:55 - press 5 to equip my punches and press 1
00:59 - to consume a health potion so using the
01:01 - keyboard I can very easily swap between
01:03 - weapons or use an item the code behind
01:06 - it is very versatile so I can easily
01:08 - drag each element into a different
01:10 - position on the bar so for example let's
01:12 - swap the sword and the pistol
01:14 - so now when I press 2 I have the sword
01:16 - when I press 3 I have the pistol then
01:19 - another example out here I have a mana
01:21 - potion on a extra bar so right now it's
01:24 - not on the bar so I cannot use it but I
01:26 - can drag it into a valid position so
01:28 - let's put it on 4 and I fire press 4
01:30 - there you go now I can activate my
01:31 - amount of potion so with this we have a
01:34 - very nice bar with active abilities or
01:36 - items that we can select and customize
01:38 - their action behavior all this code is
01:40 - nicely abstracted so all I need to apply
01:43 - this to your own weapons or items is to
01:44 - have a simple function call alright so
01:47 - this is our goal let's get to it so here
01:50 - we are in the starting scene I have this
01:52 - character in here and I can move around
01:54 - and with the mouse I can shoot my
01:56 - current weapon which is a pistol now
01:59 - over here I have my player class with
02:01 - functions to change the current weapon
02:03 - type as well as some functions to
02:05 - consume a health any mana potion so we
02:07 - want to call these functions through a
02:09 - nice hot bar in the UI and through our
02:11 - keyboard alright so first let's make a
02:13 - testing script to test this out so we
02:16 - make a new C sharp script let's call
02:19 - this testing make a new game object come
02:22 - with testing and drag the script onto it
02:24 - ok alright so now in here would simply
02:26 - do a private void update and on the
02:30 - update let's test for keyboard input
02:34 - here we can use the alpha numbers these
02:37 - are numbers right above the keyboard so
02:41 - when you press the number one let's
02:43 - enable the Epistle so for that we need a
02:45 - reference to our player instance okay
02:51 - here is my film let's go into the editor
02:53 - there's the field and just drag the game
02:56 - object okay
02:57 - it's now with this reference we can use
02:58 - the functions that we saw so in this
03:00 - case we set the weapon type when we
03:02 - press the number one let's enable the
03:04 - pistol then let's add all the others
03:15 - okay so here we have when I press one
03:18 - we're going to enable the pistol onto
03:19 - the shotgun on three the sword on four
03:21 - the punch and on five we're going to
03:23 - consume a health potion
03:24 - okay so let's test this out so here we
03:27 - are with our pistol okay now press two
03:29 - and there you go now we have a nice
03:31 - shotgun okay now press three and now we
03:34 - have a nice sword press four and now we
03:37 - have a simple punch and kick and press
03:40 - five and we have a nice consume health
03:42 - potion all right great
03:44 - so we have our keyboard inputs correctly
03:46 - calling functions in our player to
03:47 - change the active weapon awesome now
03:50 - let's make sure that we write some nice
03:51 - clean code so we're here in our testing
03:53 - we have our hockey code let's put this
03:56 - in a dedicated class instead so we make
03:59 - a new c-sharp script let's call this the
04:01 - hotkey ability system now in here let's
04:06 - make this a simple class so no mana
04:08 - behavior now let's copy the input code
04:12 - from our testing so we copy the entire
04:14 - update let's make a constructor to
04:19 - receive our player
04:24 - okay just like that now on testing all
04:27 - we have to do is create it and call this
04:29 - function so in here let's make a private
04:31 - void start and on certain with creating
04:34 - a hotkey ability system so on start we
04:42 - instantiate a new instance of our class
04:44 - we pass in the player and on update
04:46 - we're simply calling our update which n
04:48 - is doing the same as previously ok so
04:50 - everything should still be working
04:51 - exactly the same as before
04:53 - let's test ok here we are with a pistol
04:56 - and a shotgun and now they sword and
04:59 - punch and consume the Health Ocean ok
05:01 - great
05:01 - so far so good now right now in here we
05:04 - have our abilities hard-coded so when we
05:06 - press 1 we activate the pistol on to the
05:08 - shotgun and so on so the next step is to
05:11 - swap out these function calls for a nice
05:13 - object so first let's create an
05:15 - enumerable any type okay we have an enum
05:25 - with all of our various abilities now
05:27 - let's make a class to home both the
05:28 - ability type and the action to activate
05:30 - that ability so go down here we make an
05:33 - asset class so a public class let's call
05:36 - this the hotkey ability and inside we're
05:40 - going to have a ability type and we're
05:45 - also going to have a action which is
05:47 - inside the using system namespace so an
05:50 - action and what's gone this deactivate
05:53 - ability action alright so here we have a
05:56 - next class that holds an Anu which is
05:58 - the type of the ability and an action
06:00 - that we use to activate our ability now
06:03 - an action in case you're not familiar is
06:05 - essentially a function that we can store
06:06 - inside a field so using this we can now
06:09 - go all the way up here and we're going
06:11 - to make a private list of hotkey ability
06:17 - so we make the list and now in here we
06:20 - can add our abilities so let's add and
06:23 - we construct a new hotkey ability going
06:27 - to pass in the ability type for this one
06:29 - for the pistil and then for the activate
06:31 - ability action we pass in
06:33 - we were doing in here okay so just like
06:41 - this you can see the pattern that we're
06:43 - going to go with so we added to the list
06:45 - an ability of type pistol and when we
06:48 - activate this action we're going to set
06:50 - the weapon type to pistol now just add
06:52 - the other ones all right so here we have
07:09 - filmed up our list with all of our
07:11 - possible abilities and now using this we
07:13 - can make our code nice and versatile so
07:16 - down here instead of triggering the
07:18 - function directly on the player we're
07:21 - going to access our hotkey ability and
07:23 - list then we're going to access it on a
07:25 - specific index so when we press 1 let's
07:28 - access on index 0 and we call the
07:30 - activate ability action then we do the
07:33 - same for all the others so just like
07:39 - this our abilities are no longer
07:40 - hard-coded directly into our key inputs
07:43 - so for example let's put the health
07:46 - potion on the first ability so let's see
07:49 - if everything changes ok so here we are
07:51 - everything is normal now when I press 1
07:53 - there you go I consumed a health potion
07:56 - instead of equipping the pistol so you
07:58 - can see how by using a custom object we
08:00 - can now easily swap out what we do on
08:02 - each key ok so now that we have the
08:04 - underlying system working let's make our
08:06 - UI elements so here in our scene I have
08:09 - the game hammer inside the UI component
08:11 - and a canvas here let's make a new game
08:14 - object call this the UI hotkey bar now
08:18 - inside let's make a ability slot
08:20 - template
08:44 - all right so here is the template it's
08:47 - very simple we just have a background
08:48 - then a nice border on top a number for
08:51 - the hacking and then a item image now
08:54 - this is the game object that we're going
08:56 - to duplicate in order to dynamically
08:57 - populate our bar all right so let's make
09:00 - our script so we create a new C char
09:02 - script come with the UI hotkey bar drag
09:06 - it into our game object ok now in here
09:09 - the first thing we need is to grab our
09:10 - template reference ok we have our
09:23 - template then we set it off as hidden so
09:26 - just like this we have this script for
09:27 - the UI and then we have our ability
09:30 - system for the logic now we need to
09:32 - connect them both so on the UI let's
09:34 - make a function to receive our hability
09:37 - system okay will receive it now we need
09:44 - to update our visual and now in here we
09:54 - need to cycle through all the abilities
09:55 - that we have in our hotkey system so
09:58 - back in the system let's make a function
10:00 - to return our list so we do is return
10:05 - the list all right and now in here we
10:08 - can cycle through it
10:19 - now as we cycle through it let's
10:21 - duplicate our template now we need to
10:27 - locate it correctly so you place it
10:35 - correctly okay now we need to set our
10:37 - correct image so in order to get the
10:40 - image let's go inside our hotkey ability
10:43 - and here let's make a function to return
10:45 - our sprite we're going to do a switch on
10:50 - our ability type and now in here we need
10:54 - a reference for the sprite so for that
10:57 - let's use our testing class in order to
10:58 - hold our references okay so here I set
11:13 - up a very simple singleton pattern so we
11:16 - have a static instance and we set it on
11:18 - awake then we have our public fields
11:20 - that we're going to set an access now
11:22 - here I'm just doing it on the testing in
11:23 - order to quickly get this done but if
11:25 - you're using this in a proper game then
11:27 - you would obviously put all of this code
11:29 - in a proper game assets class so but in
11:31 - this case this works let's go into the
11:33 - editor so here on our testing game
11:35 - object we have all of our fields so
11:37 - let's simply drag all the references
11:39 - onto it okay we have our fields back in
11:41 - the code now we have all these fields
11:43 - set and we can access them through our
11:45 - static instance so we go back into our
11:47 - hotkey ability now in here when we get
11:49 - the sprite in case we want a pistol then
11:52 - we simply do a return go into the
11:54 - testing access the static instance and
11:56 - we get the personal sprite all right so
12:00 - that's it now all the same for all the
12:02 - others
12:07 - okay now we have our function to get the
12:10 - sprite so we can go back into UI and in
12:13 - here and let's update these sprites
12:20 - alright so here it is all correct
12:22 - so we have our UI class it contains our
12:25 - ability slot template and actually in
12:28 - here since we start off with the
12:29 - template disabled then we have to
12:31 - re-enable it once we instantiate it so
12:33 - we take this one we go to the game
12:35 - object set I click the true okay so here
12:39 - on our update visual we cycle through
12:41 - all of our hotkey abilities then we
12:43 - duplicate our template we set it to
12:46 - visible we correctly unlocated based on
12:49 - the index and then we update our item
12:51 - image based on the get sprite from that
12:53 - hot key building ok so the last thing we
12:56 - need is just to call this function in
12:58 - here so we're going to do that on our
13:00 - testing class all we need is to add
13:02 - another serialize field in this case for
13:05 - our UI hotkey bar so back in the editor
13:10 - we just drag the reference so there's a
13:11 - test thing there's the reference and
13:13 - drag it on there ok
13:14 - and now finally in here we create our
13:16 - hot key value system and then we set it
13:19 - on our you want so there it is very
13:23 - simple all right so just like this we
13:25 - should be able to see our visual bar
13:27 - correctly displaying all of our hot keys
13:28 - let's test any of there it is there's
13:31 - our hotkey bar correctly displaying all
13:32 - of our hotties all we need is to fix the
13:35 - number so very quickly
13:44 - okay here we are in yep there you go
13:46 - they all say one through five and they
13:48 - all correctly display it so if I press
13:49 - one
13:50 - I should yep there you go there's the
13:51 - home potion onto your pistol they
13:54 - sharpen the sword and II punch alright
13:56 - awesome now to make sure that this is
13:58 - wearing correct let's try swapping in
14:00 - one of them out so to do that it's very
14:02 - simple we don't need to deal with the UI
14:03 - at all we just need to go into our
14:05 - billing system and in here and let's
14:08 - swap the sword for the shopkin
14:10 - let's test any of their it is our UI
14:12 - correctly update and then change
14:14 - position the sword is now on three and
14:15 - shotgun on four so if I press three
14:17 - there you go I now have the sword in
14:19 - fair price for now I got the shotgun
14:21 - alright awesome okay so now let's enable
14:24 - click on the UI in order to change our
14:26 - active ability so for that let's go here
14:28 - in the editor onto our template and
14:31 - let's create a script to handle our
14:32 - mouse input so a nice sharp script
14:35 - called this the UI hotkey bar ability
14:37 - slot and let's make sure we drag it on
14:42 - there okay now in here we're going to
14:44 - implement some UI events so for that we
14:47 - need to be using Unity engine that event
14:51 - systems and with that we can now
14:54 - implement various interfaces so in this
14:57 - case and let's implement eye pointer
14:59 - down handler okay here we have our event
15:04 - that gets called whenever we press on
15:06 - this object so when we do we want to
15:08 - activate this ability so for that let's
15:10 - make a function for this object to
15:12 - receive the ability assigned to it
15:18 - okay so just like this we have our
15:21 - hotkey ability assigned we're going to
15:23 - assign it on our UI here when we create
15:26 - our visual let's call this function
15:29 - which is inside in here so we get the
15:31 - component of time our ability slot okay
15:36 - just like that we are passing in our
15:37 - ability and now in here all we have to
15:39 - do is activate it so we can similarly go
15:41 - into our ability and activate the
15:43 - ability action all right so that's it
15:45 - very simple
15:46 - let's test ok here we are with a pistol
15:49 - and you click to shoot works fine now
15:51 - let's select the shotgun so click and
15:53 - there you go now I'm activating shotgun
15:55 - and now blow it up on some health
15:57 - potions and now back into the pistol
15:59 - back into the sword and the punch and so
16:01 - on alright awesome
16:02 - so we can now click and also use the
16:04 - keyboard in order to manipulate our
16:06 - hotkey bar ok now let's see on with
16:09 - dragging and dropping in order to change
16:10 - the position of our abilities so for
16:12 - that we go here into our ability slot
16:14 - script and we can implement a bunch of
16:17 - more interfaces so let's implement the I
16:20 - drag handler and let's also implement
16:23 - the I drop handler ok we have our two
16:27 - new functions now I've done two videos
16:30 - on how to drag-and-drop various things
16:32 - using our UI events so if you'd like to
16:34 - know more go check out those videos one
16:36 - of them is on dragging a UI window and
16:38 - sending it to the top and another one is
16:40 - on dragging and dropping in here I'm
16:42 - going to just quickly implement both of
16:44 - these
17:00 - okay so I have added the drag code okay
17:04 - so here on drag I'm moving the rect
17:06 - transform by the event that a delta
17:08 - movement now as he saw in those two
17:10 - videos we need to divide it by the
17:12 - canvas scale factor and in order to get
17:15 - our canvas we have the code up here in
17:17 - order to automatically grab it
17:18 - essentially we just go through every
17:20 - parent until we find a canvas so just
17:22 - like this we should be able to drag our
17:24 - ability slots
17:25 - let's test okay there they are and let's
17:27 - click and drag in there yo I can now
17:30 - drag the spot alongside me alright
17:31 - awesome so this is working I can move it
17:34 - around however when I let go it should
17:37 - either be valid only when I drop it on
17:39 - top of another one or if not then it
17:41 - should snap back into the original
17:43 - position
17:43 - so let's first deal with the snap in
17:45 - order to snap back all we need to know
17:47 - is our starting position so in here we
17:49 - store a vector two so on start we grab
17:55 - our start anchored position and here we
17:57 - can reset our position on another drag
18:00 - event so in here let's add the I and
18:02 - drag handler so this one is triggered
18:05 - whenever we stop dragging so it's in
18:07 - here that we can go to direct transform
18:09 - and set the anchor position to our start
18:11 - anchor position okay let's test okay
18:14 - here we are there's the pistil icon
18:16 - click and drag and now let go and there
18:18 - you go it goes back into the position
18:19 - right awesome so now that it
18:21 - automatically snaps back and let's see
18:23 - on with dropping on top of another one
18:25 - so for that we're going to implement our
18:27 - on drop event and now in here we're
18:30 - going to do just like we did on the
18:32 - drive drop video
18:42 - so here we test if we were dragging
18:44 - something and if so then we test if that
18:47 - something contains an ability slot and
18:49 - if so then it's in here that we want to
18:51 - essentially swap so in order to swap
18:54 - let's go into our ability system and in
18:57 - here we want to make a function that
18:58 - swaps two indexes so let's go all the
19:00 - way down here and then here we make a
19:06 - public void swap ability and receive an
19:09 - int for the ability index so we receive
19:14 - two indexes and in here all we need to
19:17 - do is swap them all right so there it is
19:24 - very simple so we can now call this
19:26 - function so let's go into our slot so
19:29 - here first we need our system reference
19:31 - so let's rename this function since
19:33 - we're going to receive multiple things
19:34 - so let's simply rename this to setup and
19:37 - then we're going to receive a system
19:42 - receive an index and our hot key ability
19:45 - or to store all these all right so with
19:54 - our setup we now have a reference to the
19:56 - hot key system and then we can simply go
19:58 - in here and we can swap our abilities we
20:01 - want to swap this one so we pass in this
20:03 - ability index and then we want the
20:05 - target ability index so for that we need
20:08 - to make a function to return this so we
20:11 - make a public return int for the gift
20:13 - abdul-hakeem index and we simply return
20:20 - so we go into the target hotkey ability
20:23 - and get that in that's all right so
20:26 - that's pretty much it for the swap logic
20:28 - however we still need to take care of a
20:30 - few things so first of all here Lee
20:32 - setup let's call this one so on the
20:34 - hotkey bar here we are with our setup so
20:36 - we passingly setup then we have to pass
20:39 - in our ability system then pass in this
20:42 - index so it's CI and the ability ok
20:45 - and now here let's do a debug log on
20:48 - both indexes just to see which ones that
20:52 - are being swamped
20:53 - let's test ok here we are now let's drag
20:56 - and drop and there you go it resets ok
20:58 - now let's drag and drop on top of this
21:00 - one and drop it and there you it doesn't
21:03 - quite work if we look at the console
21:06 - there we are swapping the 3 with 3 this
21:08 - is the same issue that we dealt with on
21:10 - the drag and drop video the issue is
21:12 - that this one is capturing both events
21:14 - so when I drop it's not dropping on top
21:16 - of that one but rather dropping on top
21:17 - of itself so let's fix that so to fix we
21:20 - just go into our template and we add a
21:22 - campus group so then in here we just
21:24 - grab it then let's disable the raycast
21:30 - with the I begin drag him more so let's
21:33 - implement this one ok so when we begin
21:39 - dragging we're going to lower the Alpha
21:41 - and stop locking the raycast
21:43 - and when we finish we reset everything
21:44 - so now we should be correctly listening
21:47 - to this event on the correct object okay
21:50 - here we are let's grab the shotgun and
21:51 - drop it on top of the sword and there
21:53 - you go it corrected and over here in the
21:55 - console you can see swap 2 with 3 and as
21:58 - we start dragging there you it becomes
21:59 - transparent we do I have one more issue
22:02 - here though which is this one is
22:04 - currently on top down ok however this
22:06 - one the pistol if we drag it there yo
22:08 - the pistol is behind the sword we
22:10 - wouldn't like the draggable one to be on
22:12 - top so let's fix up so that's very
22:14 - simple over here on the begin drive we
22:15 - simply need to go into the transform dot
22:18 - set as last sibling since the order for
22:21 - which UI objects are on top of another
22:23 - one is dependent on their channel in X
22:26 - so let's see ok here we're on let's drag
22:29 - the pistol and reaches up on top so drag
22:31 - that one
22:32 - you bunt up and on top of all of them
22:34 - right great now here we've actually
22:36 - already implemented our swamp except we
22:39 - can't really see it since everything
22:41 - still looks the same but let's say I
22:43 - swap the five with the four so visually
22:46 - the five still sounds it says the punch
22:47 - but if I click on five three oh I am now
22:49 - equipping the shotgun so the logic is
22:51 - working but the visual is not updating
22:53 - let's see one with that so essentially
22:55 - the UI needs to update whenever we swap
22:57 - the ability so here on the swamp ability
23:01 - and let's use some events so we create a
23:06 - new event event handler let's call it on
23:09 - ability and list change and whenever we
23:14 - modify our own list let's trigger this
23:17 - event so right in here we can't invoke
23:21 - alright so there it is very simple this
23:23 - event is fired whenever we swap in a
23:25 - billing so you can now go into our UI
23:27 - script then here we already have the
23:30 - update visual function except it's only
23:31 - being called once so now when you
23:33 - receive this we go into the system and
23:35 - subscribe to the event whenever the
23:38 - event fires we call our function there
23:43 - it is very simple let's test okay so
23:45 - here we are with the pistol one two and
23:47 - sort on three and let's drag it and swap
23:49 - it and there you go it did in fact swap
23:51 - although we have to deal with another
23:53 - ratio which is deleting the old objects
23:55 - so let's do that so in here whenever we
23:59 - update we just need to delete all the
24:01 - children except for the template
24:10 - okay so here it is very simple we cycle
24:13 - through all the children we ignore the
24:14 - template and we destroy all the others
24:16 - let's see and here we are let's drag the
24:18 - pistol on top of the sword and there you
24:20 - go they correctly change now the pistol
24:21 - is on three insert is on two so if I
24:23 - press two there you go I'm now holding
24:25 - the sword press three and I'm holding
24:27 - the pistol so I can swap all of them and
24:29 - they all work correctly so just like
24:31 - that yep there you go very nice alright
24:33 - awesome so now that we have all this
24:35 - working let's at a simple place for some
24:38 - extra abilities so for that let's go
24:40 - into our system and in here and let's
24:42 - make another list this won't be the
24:45 - extra hotkey ability list so this list
24:52 - won't contain extra abilities that are
24:54 - not currently present on the barn so we
24:56 - cannot activate them we need to drag
24:58 - them out to the bar in order to use them
24:59 - so let's add a mana potion so in here we
25:03 - just had an e-type for a mana potion
25:05 - then we just created pretty much like
25:07 - all of the others except we add it to
25:09 - the extra hotkey ability list ok there
25:14 - it is as you can see the object is
25:15 - exactly the same except it's not any
25:17 - different list now let's see on with the
25:19 - UI here we're going to do very much the
25:22 - same thing except put it on the side so
25:32 - here I set it up very simply just for
25:34 - testing so I'm just shifting it onto the
25:36 - side and going through the secondary
25:39 - list just like this obviously if you
25:40 - were using this in your own game you
25:42 - would clean this up since you don't want
25:43 - to have duplicate code now in here we
25:46 - have two options for example we can make
25:48 - the setup and pass in -1 to indicate a
25:51 - extra ability so we would pass in -1
25:54 - into the ability index and then here
25:56 - we'd swap that ability and in our system
25:58 - we would verify which one of these is
26:00 - extra and which one is not so that's one
26:02 - approach but another approach is in here
26:05 - we already know our abilities so we can
26:08 - simply modify this function to work with
26:10 - hotkey abilities instead of indexes so
26:12 - let's try that approach is to see things
26:14 - differently
26:23 - okay so here I modified the code in
26:26 - order to swap an ability by receiving
26:28 - ability objects instead of indexes so
26:31 - now with this one we can more easily
26:32 - verify which one is on the extra list
27:00 - okay so here this will receive both of
27:04 - our abilities then we check if hotkey a
27:06 - is on the extra ability list if so then
27:10 - we grab the index for the B on the
27:12 - current list we swap it out with ei then
27:15 - we remove the a from the extra and you
27:17 - put the B on the extra if a is not on
27:19 - the external list then we test for the B
27:21 - if so then we do the exact same thing if
27:23 - neither of them then we do what we were
27:25 - doing previously
27:25 - okay so let's test ok so here we are
27:29 - with the pistol alright so far so good
27:31 - and here on the external list I have the
27:33 - mana potion so let's drag it and let's
27:36 - swap it out with the shotgun and there
27:38 - you go it's worked out correctly in
27:39 - position now if I press for there you go
27:41 - now I'm using the mana potion so I can
27:44 - then drag them on the inside and there
27:46 - you go everything all the buttons all
27:48 - the things work perfectly fine so just
27:50 - like this I have an extra ability slot
27:52 - in here and I can drag them onto my
27:54 - hotkeys so just remove the number since
27:57 - that one is not activated on through a
27:59 - key and there it is just like that
28:01 - everything is perfect so press 1 for the
28:03 - health potion press you for the epistle
28:05 - 3 for the sword
28:06 - four for the shotgun 5 for the punch and
28:09 - now pressing Anya their buttons doesn't
28:11 - work for the amount of potion but I can
28:13 - drag the mana potion and swap route with
28:15 - a sword and I press 3 there we go mana
28:18 - potion two on that and so on so I put
28:21 - out now on three I got the shotgun and
28:22 - not four I got the mana potion so I can
28:25 - click on any ability in order to
28:26 - activate them I can drag them to swap
28:28 - their position
28:29 - and I can use the keyboard in order to
28:31 - select my current active weapon all
28:34 - right awesome
28:34 - so this is a great system to add to any
28:37 - game where you have multiple weapons or
28:39 - skills or items the extra bar for
28:41 - example could be the inventory where you
28:44 - would drag objects from the inventory
28:45 - onto the bar in order to use them so
28:48 - that's one possible use case in earth as
28:50 - long as you can download the project
28:52 - files and utilities from unity code
28:53 - monkey comm subscribe the channel for
28:55 - more unity tutorials post any questions
28:57 - in have in the comments and I'll see you
28:59 - next time
29:02 - [Music]