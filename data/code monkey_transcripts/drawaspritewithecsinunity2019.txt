00:00 - in this video we're going to learn how
00:01 - to display a simple sprite with pure ECS
00:04 - in unity 2019 we're going to display it
00:07 - and transform it and finally create a
00:09 - custom mesh through code let's begin
00:14 - [Music]
00:18 - hello and welcome I'm your code monkey
00:21 - and this channel is all about helping
00:22 - you will learn how to make your own
00:24 - games with enough tutorials made by a
00:26 - professional indie game developer so if
00:28 - you find the video helpful consider
00:29 - subscribing so when I was doing my ECS
00:31 - research it took me quite a while to
00:33 - understand how to draw a simple spread
00:35 - the documentation is still changing so
00:37 - it required a lot of trial and error to
00:39 - identify the necessary components so
00:41 - this is going to be a really simple
00:43 - video just to show you the basics you
00:44 - need in order to draw a simple sprite
00:46 - first if you know nothing about easiest
00:49 - then start by watching my video on
00:50 - getting started it clearly explains how
00:53 - ECS works how to make entity systems and
00:56 - so on so in here let's just make a
00:58 - testing script to run our code so just a
01:01 - simple and you see sharp script conduct
01:03 - testing let's make a game object to run
01:06 - our code so testing and drag the script
01:08 - just like that okay now first we
01:11 - obviously need an entity so let's make
01:13 - that so just like this we have a simple
01:23 - entity we can run our code and on the
01:25 - entity debugger yep we got our entity
01:27 - okay now in order to have a visual we
01:30 - need to add some components so the main
01:32 - one we need is type of render mesh which
01:37 - is inside the using unity dot rendering
01:41 - this is the one that actually renders
01:43 - our mesh and then we also need the type
01:47 - of local to world this is inside using
01:52 - unity dot transforms this component
01:56 - centrally calculates the matrix for how
01:57 - the mesh should be this point and as of
02:00 - the current DCs implementation it is
02:02 - required to have this component if you
02:04 - just have the render mesh it won't
02:05 - actually be visible so on the render
02:07 - mesh here you can see what we need we
02:09 - need a mesh and a material so let's do
02:12 - that let's add some serialize jion's in
02:14 - here
02:17 - now let's go to the editor to select our
02:20 - mesh and material so here for the mesh
02:23 - we can use unities default quad mesh and
02:25 - for the material let's make one in here
02:28 - a new material for our sprint material
02:31 - let's use unlit transparent and drag our
02:36 - zombie sprite and we dragged our
02:38 - material onto there okay so in here we
02:41 - have our two things now let's set our
02:43 - entity component data so we go into the
02:46 - entity manager to set the shared
02:48 - component data since the render mesh is
02:50 - of type shared component on this entity
02:55 - we pass in a new render mesh and here we
03:01 - pass in the mesh as our mesh and the
03:03 - material as our material now in order to
03:07 - display we just need to make sure that
03:08 - the local to our own contantly it's the
03:09 - correct values so in theory these are
03:12 - the only two that we need but in order
03:13 - to come lay down welcome to our own
03:14 - value we can simply add the type of
03:16 - translation which won't automatically
03:19 - fill it up so this one is not strictly
03:22 - essential if you set the unwelcome to
03:24 - our own values yourself but this way
03:26 - it's extremely simple so mighty and if
03:29 - there's our sprite being visible in a
03:30 - pure ECS way here in the entity debugger
03:34 - you can see that our sprite has all
03:35 - these components the ones that we
03:38 - manually added were the render mesh and
03:40 - then welcome to world and then you need
03:42 - translation art for these values to be
03:43 - calculated and here on the render mesh
03:46 - system you can see that it is running on
03:47 - one instance ok so these are the
03:50 - complete basics to draw a very simple
03:51 - sprite you just need a random mesh
03:53 - component and the own local to world
03:55 - component now let's see the other
03:57 - related components now on a normal game
04:00 - object you here have the transform with
04:02 - a certain position and in purus yes we
04:05 - have the equivalent which is the
04:07 - translation component you can see here
04:09 - the definition as you can see it is
04:11 - simply component data and contains a for
04:12 - 340 volt and if all three here is the
04:16 - definition as you can see just has an x
04:18 - y&z so this is our position component
04:21 - let's make a simple system in order to
04:23 - move it just on here make a poly class
04:26 - for the moon system which implements a
04:29 - component system again if you don't know
04:33 - how ECS works check out the link in the
04:35 - description where I slowly go through
04:37 - what is a system and how they work so in
04:40 - here I'm just going to quickly implement
04:41 - the abstract class which has the on
04:43 - update method and here simply cycle
04:45 - through the entities for each entity
04:47 - that contains a translation component on
04:52 - each entity that has a translation
04:54 - component let's just move them up so
04:57 - translation that Valley dot wine was
05:00 - equals by a certain amount x time down
05:03 - time okay so here we have a simple
05:09 - system that won't act on a translation
05:11 - component and simply move them up
05:13 - let's test any of there's our sprite
05:16 - constantly moving up okay great now
05:19 - again back in our game object on the
05:21 - transform we also have a rotation and
05:23 - the equivalent in ECS is also called
05:27 - just rotation here is the definition of
05:31 - the rotation component and as you can
05:33 - see we simply have a quaternion so let's
05:36 - make a rotator system
05:49 - also this valley is of type unity dot
05:51 - mathematics and not the normal unity
05:54 - engine so we have to go here using unity
05:56 - dot mathematics which is a specific math
05:58 - library for our entity system so here we
06:02 - have our rotator system which is running
06:04 - on every entity that contains a rotation
06:06 - component and we are similarly rotating
06:09 - it over time let's see and if there is
06:11 - there's our sprite moving up and also
06:13 - rotating and here on the entity debugger
06:16 - you can see the entity and inspect the
06:19 - entity balance as you can see the in
06:20 - local two world and the world render
06:22 - bounces are calculated automatically and
06:24 - we have our rotation component rounding
06:26 - and the translation moving up so with
06:29 - the Sudan the last one on our normal
06:32 - game object transform we have the scale
06:35 - and in ECS we have two ways of setting
06:38 - our scale we have the type of scale this
06:43 - one as you can see just takes a float
06:45 - for a value so this is if you want just
06:47 - a single scale on on with our x y&z so
06:51 - let's make a system for that so again we
06:59 - have this system running on every entity
07:01 - that contains a scale and we are simply
07:03 - increasing it over time so let's see if
07:05 - the sprite doesn't need increase in size
07:07 - and if there's our sprite scaling up
07:10 - moving up and also rotating now as I
07:13 - said we have two ways of rotating we
07:14 - have this one which is a uniform
07:16 - rotation you just have one float value
07:18 - for the entire rotation and then you
07:20 - have another one which is type of
07:23 - non-uniform scale and this one as you
07:26 - can see it takes a float three so you
07:28 - can set a different scale for the X the
07:30 - Y or the Z so here instead of a system
07:33 - let's just set it on our start
07:40 - let's make him stretched up so one f3f
07:43 - and one out
07:44 - okay so let's see if we have a rectangle
07:47 - stretched vertically any of there is the
07:50 - sprite is indeed stretched so one of the
07:53 - main things between using the entity
07:55 - system or the default game object is
07:57 - that you no longer have the automatic
07:59 - scale as you do when using a sprite
08:01 - runner so here for example I have two
08:03 - sprites this is a square sprite and this
08:06 - is a rectangular sprite and here if I
08:08 - were to create a simple sprite renderer
08:10 - I drag this one and I can see it
08:13 - perfectly matches and drag this one and
08:15 - it perfectly matches however when using
08:18 - ECS we have to give our actual mesh size
08:20 - so it doesn't get automatically
08:22 - translated from these sprites and
08:24 - whatever you're using in here so again
08:26 - in a normal game object you have your
08:28 - basic transform which has a position
08:30 - rotation and scale and in pure ecs you
08:34 - have an object which has a translation
08:36 - for the position rotation for the
08:38 - rotation and either scale or non-uniform
08:40 - scale for the actual scale now let's
08:43 - spawn a bunch of entities instead of
08:45 - just one
09:01 - okay so here we are spawning ten
09:04 - entities if this code seems weird then
09:06 - make sure you check out the getting
09:08 - started video so let's see our ten
09:10 - entities okay so here we have our ten
09:13 - sprites and now in here if we go and see
09:16 - our stats you can see that they are not
09:18 - currently being patched in order to
09:20 - solve that we need to enable GPU
09:22 - instancing so we go into our material
09:25 - and now in here as of the current
09:27 - version using the sprites shader if I go
09:29 - in here select sprites and default if I
09:33 - click on enable GPU instancing for some
09:35 - reason the sprites disappear I'm not
09:37 - sure if this is a shader bug or what it
09:39 - is but it doesn't work so one shader
09:42 - that I found out that it does work with
09:43 - sprites it's going here into a legacy
09:46 - shaders select our transparent diffuse
09:49 - shader and now we can enable GPU
09:51 - instancing now in here another problem
09:53 - we have is the sprites become dark and
09:55 - that's because of lighting so we need to
09:57 - go here on to your rendering lighting
09:59 - settings and set the ambient lighting to
10:01 - white and just like that there are our
10:03 - sprites and as you can see they are all
10:04 - being batched okay so we have learned
10:07 - how to create and display a simple
10:09 - sprite using pure ECS now one thing that
10:12 - is extremely useful to know is how to
10:14 - create the mesh through code since each
10:16 - sprite no longer gets automatically size
10:18 - as you saw we need to either use the
10:20 - scaling component or have a different
10:23 - mesh per sprite so let's make a mesh
10:25 - completely through code instead of using
10:27 - our serialized field so let's go here
10:29 - and make your function to create a mesh
10:31 - so a private mesh create mesh and in
10:37 - order to make a simple quad it's
10:39 - actually quite simple
10:40 - all we need are two polygons so that
10:42 - means we have four points so we define
10:45 - an array for our vertices and we create
10:51 - it with four points then we also need to
10:56 - apply UV to those same vertices so we
10:58 - also have four and finally in order to
11:03 - make a polygon we need three points so
11:05 - for two polygons we need six triangles
11:11 - alright now let's set these values up so
11:14 - to keep things simple let's define them
11:16 - in a clockwise fashion
11:21 - so our first vertex will be on 0 0 so at
11:24 - the lower left corner the second one on
11:26 - 0 1 so the upper left corner then on 1 1
11:29 - so the upper right corner and then on 1
11:32 - 0 so on the right bottom corner let's
11:34 - make those vertices so we have 1 on - -
11:44 - - - then on - plus so up there plus 1 so
11:47 - up there and plus - so in there now for
11:51 - the UV we're going to use the home
11:52 - sprite so it's very simple ok the UV
11:59 - essentially matches how we define our
12:00 - vertices and finally for the triangles
12:03 - this is where we need to be careful each
12:08 - triangle needs to be defined in
12:10 - clockwise otherwise we're going to be
12:11 - looking at the back of our polygon so
12:14 - here each triangle is an index of the
12:16 - vertex so these are all the families we
12:26 - need in order to create a simple quad
12:28 - and now we just create the actual mesh
12:34 - and it's a symbol we create the mesh
12:37 - assign the vertices the UVs and the
12:38 - triangles and now we can go all the way
12:40 - up here and instead of using our
12:42 - serialized field mesh let's get rid of
12:44 - this one and here we do a create mesh
12:47 - and let's also stop moving it on the
12:50 - scale so we have our default mesh
12:56 - okay let's see if our sprite is indeed
12:58 - being displayed in a square any of those
13:01 - are sprites and all of them being
13:02 - displayed using a nice simple mesh that
13:04 - we created through code so now we need
13:06 - this to be able to create a mesh of
13:08 - different size so for example we would
13:10 - create a square mesh for this texture
13:12 - and for this one we would create another
13:14 - one since as you can see that is
13:15 - stretched let's see okay so here the
13:18 - only thing we need is to go into our
13:20 - create mesh function and let's receive a
13:22 - float 40 with an default for the height
13:24 - then here let's calculate a float for
13:28 - the half width which is our width
13:31 - divided by 2 F is followed for the half
13:33 - height which is our height divided by 2
13:37 - F and here we just use this so we're
13:46 - doing exactly the same logic except we
13:47 - have a width and a height so then let's
13:50 - go in here and for these ones and let's
13:52 - use the same one F 1 F so we still have
13:55 - a square room let's see and yet we are
13:57 - still displaying squares ok now let's go
14:00 - here add another material so first one
14:03 - rename this one for the zombie material
14:05 - and this one won't be the kenai material
14:08 - now here let's create 20 and then we do
14:13 - a cycle and we're going to put
14:19 - essentially the first hand using the
14:21 - zombie material and the next n using the
14:22 - crime material so in here we just do if
14:27 - di is under 10 then we use the zombie
14:30 - material if not we use the Konami
14:32 - material okay that's the total material
14:36 - now we can go here and create our two
14:38 - different meshes
14:45 - so on the first thing we're going to use
14:47 - these animations on material and on the
14:49 - next end-use econ I mention the Konami
14:51 - material so we are no longer using
14:53 - non-uniform scale but whether we are
14:55 - creating two different meshes for our
14:57 - two different sprites
14:58 - let's see any of here we have both
15:01 - meshes and they are all correctly scaled
15:03 - this sprite is using a square mesh in
15:06 - this one a rectangular mesh so you can
15:08 - see how creating a mesh through code is
15:10 - extremely useful when dealing with the
15:11 - entity component system so that's pretty
15:14 - much it for spawning and displaying a
15:16 - simple sprite using pure ECS the main
15:18 - thing is really just the render mesh and
15:20 - in welcome to world components then you
15:22 - have these components which are the
15:24 - equivalent for our game object
15:25 - transforms and you can dynamically
15:27 - create meshes in order to display any
15:29 - size we want as long as you can download
15:31 - the project from the utilities from
15:33 - unity code monkey comm if you liked the
15:35 - video subscribe to the channel for more
15:36 - into tutorials post any questions you
15:39 - have in the comments and I'll do my best
15:40 - instrument alright see you next time
15:42 - [Music]
15:46 - you