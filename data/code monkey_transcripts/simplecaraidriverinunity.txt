00:00 - hello and welcome i'm your code monkey
00:02 - let's learn how to make a simple ai
00:04 - driver in unity
00:05 - this is a simple ai that works on top of
00:07 - any car controller in order to make the
00:08 - unit go to a target position
00:10 - this is actually something that i had to
00:12 - make recently i participated in the
00:14 - mixing game jam where i made a very
00:15 - interesting racing rts and as such i
00:17 - need the cars to be able to drive
00:19 - themselves to reach a target position
00:20 - you can go watch that video to see this
00:22 - ai being used as part of a complete game
00:24 - now the most awesome thing about this ai
00:27 - driver is how it can work with any car
00:28 - controller
00:29 - all it needs is to be able to give
00:31 - commands to accelerate brake and turn
00:33 - so as long as your car controller
00:35 - exposes those functions then this can
00:36 - work on top of anything
00:37 - for example i also made the machine
00:39 - learning ai driver a while ago which
00:41 - also uses the same underlying car driver
00:44 - so this is what we're going to build
00:45 - over here is my car and said to follow
00:47 - the mouse position so as i click i can
00:49 - move the target and place it in there
00:51 - and no matter where i place it you can
00:52 - see yep the car does move along with it
00:55 - now the trickiest thing about making an
00:56 - ar driver is how cars turn
00:59 - so usually when making ai for some
01:00 - humanoid units they essentially just
01:02 - turn instantly
01:04 - however cars don't really work like that
01:06 - they need to turn and go forward at the
01:07 - same time
01:08 - so as i move the mouse straight in there
01:10 - yep instead of rotating instantly the
01:12 - car needs to move forward and then
01:13 - rotate at the same time
01:15 - then if i place the mouse just slightly
01:17 - behind the car yep the car reverses onto
01:19 - it
01:20 - however if i put the target quite a bit
01:22 - further then the car is smart enough in
01:23 - order to do a 180 and go towards there
01:26 - here is the car control that i'm using
01:28 - as i said how it's implemented isn't
01:29 - relevant to what we're trying to do here
01:32 - all that matters is that we have this
01:33 - function where i can set it a certain
01:35 - forward amount and turn them out
01:36 - so i can tell you to go forward reverse
01:38 - turn left or turn right
01:40 - i even have a player car driver which
01:42 - works on top of that same car driver
01:44 - and now we're also going to build an ai
01:45 - on top of it so both the player and the
01:47 - ai use the same underlying car driver
01:49 - script
01:50 - learn all about vr and ar with the
01:52 - patreon sponsor xr
01:54 - bootcamp it's a six to eight week
01:56 - bootcamp taught by industry
01:57 - professionals
01:58 - learn how to interact in vr optimize
02:00 - your rendering and learn about dots
02:02 - check them out at xrbootcamp.com and use
02:04 - the coupon cm10 to get 10
02:06 - off any of the master classes so let's
02:08 - begin by creating a new c
02:10 - script let's name this the car driver ai
02:13 - and over here
02:14 - let's disable the player and set enable
02:16 - the ai driver
02:17 - and just attach the script onto it so
02:19 - here in the inspector you can see they
02:20 - are both pretty much exactly the same
02:22 - the only difference is this script right
02:23 - here
02:24 - so we have our basic script now for
02:26 - starters let's first grab our card
02:28 - driver
02:32 - so just we get components since it's on
02:34 - the same game object
02:36 - and now all we need to do is interact
02:37 - with that function that we saw so let's
02:39 - make a private void update
02:40 - and on update let's define a certain
02:42 - forward amount
02:45 - also a turn amount and then just go into
02:48 - the car driver
02:49 - in order to set the inputs passing this
02:51 - for the mount
02:52 - and this turn amount okay so that's
02:56 - pretty much all we need to do
02:57 - so just for testing let's try setting
02:59 - both of these to one to see what happens
03:01 - and yep there's the car constantly going
03:03 - forward and turning to the right
03:05 - all right so far so good now for testing
03:07 - the first thing we need is some sort of
03:09 - target position so let's keep track of
03:10 - that
03:11 - and i've got this nice game object
03:13 - placed in the world so we're going to
03:14 - use that as our target
03:15 - so here let's make a private vector3 for
03:18 - the target position
03:21 - and let's make a function to set it
03:23 - let's make it public so
03:25 - in the future when we use the script we
03:26 - can give it a target to go to
03:33 - all right so very basic and now just for
03:36 - testing let's use that transform that we
03:38 - saw
03:39 - so just make it a serialized field so we
03:41 - can set it in the editor
03:45 - and then here on every update just call
03:47 - set target position access that
03:49 - transform and grab the position
03:51 - so then here in the editor i'm just
03:53 - going to drag that transform position
03:55 - okay
03:55 - so far so good now let's begin by
03:57 - testing if the target is in front or
03:59 - behind of the car
04:01 - and for that we can use the dot product
04:03 - so first of all let's default these
04:05 - just to zero okay so then we do a dot
04:08 - product
04:10 - we use vector3 dot
04:13 - takes essentially a forward vector and a
04:16 - direction vector
04:17 - so let's count the direction so a vector
04:20 - 3
04:20 - for the dear to the move position so we
04:24 - grab our target position we subtract our
04:26 - current transform position and then
04:28 - normalize
04:30 - okay we have our direction so for the
04:32 - dot product we use this transform
04:34 - forward
04:35 - and then that direction and this returns
04:37 - a float for our dot product
04:40 - now the way the dot product works is if
04:42 - it's above zero then the target is in
04:43 - front
04:44 - and if it's under zero then it's behind
04:46 - we can add a debug.log to see this in
04:48 - action
04:49 - so just debug log on the dot so we can
04:52 - see
04:54 - and yep down there in the console we can
04:55 - see so the target is right in front of
04:57 - the car so we've got a one so if i move
04:59 - the target
05:00 - in there we've got a one and as i move
05:02 - to be perfectly perpendicular
05:04 - now suddenly starts going towards zero
05:06 - and if it's behind the car then we got a
05:08 - negative and if it's straight behind
05:09 - we've got minus one so this is the dot
05:11 - product
05:12 - very useful so we're going to use this
05:14 - to drive forwards or backwards
05:15 - if it's positive we draw forwards if
05:17 - it's negative we drive backwards
05:19 - and by the way the way that i'm
05:20 - controlling this mouse target is with a
05:22 - very simple script
05:23 - so here it is just got a reference to
05:25 - the transform then i also have some
05:27 - simple logic to either
05:28 - drop it or keep following the mouse and
05:30 - here's just a function to get the mouse
05:32 - position
05:33 - so it just does this it does a camera
05:35 - screen to write point on the mouse
05:36 - position
05:37 - then it does a raycast once hitting the
05:39 - collider that is
05:40 - on the terrain object and if there's a
05:43 - hit then simply have the raycast hit
05:45 - so just a very basic script just so i
05:47 - can move this target around
05:49 - all right so here let's use the dot
05:50 - product so we test if
05:52 - dot product if it is bigger than zero
05:54 - then target is in front
05:56 - so it simply said for the amount to one
05:58 - f and if not then target is behind
06:01 - so we set it just to minus one f and
06:03 - just with this it should already reach
06:05 - the target let's see
06:06 - and yep there it is it has the target
06:08 - and goes straight towards it so as i
06:09 - move target going there
06:11 - yep he goes and then it reverses and so
06:13 - on if i put it behind
06:14 - yep always reverse put it in front and
06:16 - he always tries to go forward
06:18 - all right so far so good now for turning
06:20 - and by the way if you find the video
06:22 - helpful consider subscribing and hitting
06:24 - the like button
06:25 - it really helps out the channel in order
06:27 - to do that we're going to calculate the
06:28 - angle towards the target position
06:30 - so for that we can use the vector 3 and
06:33 - use the function
06:34 - signed angle make sure you use the sine
06:36 - angle and not the angle since we do want
06:38 - a sine value
06:39 - in order to get the sine angle let's
06:41 - compare this transform forward so where
06:43 - the car is pointing
06:44 - compare it with the direction towards
06:46 - the move position and the axis
06:48 - is the up axis so vector 3 dot up
06:52 - so we do and this is our angle towards
06:54 - our direction
06:58 - and again we can add a log to see what
07:00 - this does
07:01 - so angle into there and let's simply
07:03 - come this out so the car doesn't move
07:04 - let's see
07:06 - so there it is and if the target is to
07:07 - the right of the car then we got a
07:08 - positive value and if it's to the left
07:10 - then we got a negative value
07:11 - all right so that's how we're going to
07:13 - use it so in here very simple
07:15 - just if the angle to the ear if it is a
07:17 - positive number
07:18 - then essentially we want to turn right
07:20 - so set the turn amount into one f
07:22 - we want to turn right and if not then
07:24 - set the turn amount
07:25 - into minus one f so that we can turn
07:27 - left and then we just run this
07:31 - okay so just like this we should be able
07:32 - to see the car correctly turn to reach
07:34 - the target
07:35 - so there he goes and as i move the
07:36 - target put it in there yep he's indeed
07:38 - turning around
07:39 - so he's going forward and if he goes and
07:41 - he starts to go backwards yep there you
07:43 - go and it's constantly going towards it
07:45 - alright so all the logic is indeed
07:47 - working so the logic is indeed working
07:49 - but the biggest issue is that it never
07:51 - stops
07:52 - so the car is constantly trying to reach
07:54 - exactly on top of the target
07:56 - so we need to add some type of stopping
07:58 - distance so over here we've got all this
08:00 - logic okay so far so good
08:01 - but before we do let's calculate the
08:03 - direction towards the target
08:05 - so just do a basic distance to target
08:08 - and we do a vector three dot distance
08:10 - calculate from this transform position
08:13 - towards the target position
08:16 - then just define a certain reach target
08:19 - distance
08:22 - so if the distance is bigger than the
08:25 - reach starting distance
08:26 - then that means that the target is too
08:28 - far
08:31 - so if it is then we're going to do all
08:33 - of this logic
08:36 - and if not then we have reached the
08:38 - target
08:43 - all right so let's see if this works so
08:45 - there it is the car following the target
08:47 - and if i just stop the target
08:49 - and see the car it goes reverses and now
08:52 - it's an issue with the
08:53 - braking speed but yep once he gets
08:56 - within there yep he's gonna only still
08:58 - all right everything worked now the
09:00 - issue as we saw is that essentially it
09:02 - overshoots the target so he keeps going
09:04 - and then it just overshoots
09:06 - so for that let's engage the brakes if
09:08 - we are going a bit too far
09:10 - so when we have reached the target let's
09:13 - hit the brakes if we're going a bit too
09:14 - far so
09:15 - go into the car driver in order to get
09:17 - the speed
09:18 - and if it's above a certain amount so if
09:20 - it's going a bit too fast then instead
09:22 - of just
09:22 - not accelerating let's actually break so
09:25 - for the amount set it to minus one in
09:26 - order to actually break
09:28 - and if not then yep we just set it to
09:30 - zero
09:32 - okay so there he is and as soon as i
09:33 - stop if there you go you see that he did
09:36 - hit the brakes a bit more alright so
09:38 - that's a bit better
09:40 - now just one thing here which is if we
09:41 - put the target behind it
09:43 - yep he reverses towards the target which
09:44 - is good but if we put the target
09:47 - way behind it yep he still does the same
09:49 - thing now
09:50 - if the target is way too far behind then
09:52 - we really want the car to be able to do
09:54 - a 180 in order to reach a target as
09:57 - opposed to just
09:58 - constantly reversing so let's do that so
10:00 - first of all we see when we are
10:02 - reversing so here it is if the dot
10:03 - product
10:04 - is under zero
10:07 - so if it is let's check if it's too far
10:10 - to reverse
10:20 - so we just check if the current distance
10:22 - is bigger than a certain amount if so
10:24 - then it's too far to reverse so we go
10:25 - forwards instead of backwards
10:27 - okay so there he is he's right on top of
10:28 - the target now if i move just a little
10:30 - bit
10:31 - yep he just reverses onto it okay and if
10:34 - i put way too much
10:35 - if there you go he goes forward there's
10:36 - a 180 and then goes in there
10:38 - all right so the logic is indeed working
10:41 - yep there you go awesome
10:42 - now another thing is with regards to
10:44 - reaching the target position
10:46 - so if the current target distance is big
10:49 - enough
10:49 - so like this it's pre-bait if so then it
10:52 - works pretty fine so i can put it quite
10:53 - a bit far
10:54 - and yep he overshoots a bit but then
10:56 - reverse onto it however if i put this as
10:58 - a much smaller value
11:00 - now the issue is that when i put it if
11:02 - the car has enough speed
11:03 - he goes and pretty much always instantly
11:06 - overshoots it
11:07 - now the reason for that is because he's
11:08 - really only hitting the brakes
11:10 - if he is already within the stopping
11:12 - distance so let's add some more logic in
11:14 - order to make it hit the brakes before
11:16 - it actually reaches the target
11:18 - so here if the target is in front
11:35 - so here we compare our current distance
11:37 - to the target and if it is within a
11:38 - certain stopping distance which is
11:40 - bigger than the reach target distance
11:42 - if so then we also test the spin so if
11:44 - the car is going a bit too fast then we
11:46 - head on the brakes
11:47 - so this should stop the car from
11:48 - constantly overshooting the target
11:50 - let's test so here it is let's pick up
11:52 - some speed so just constantly go
11:54 - and now stop and yep there you go you
11:57 - saw how he hit the brakes a bit
11:59 - and yep now it's working much better so
12:01 - even if the car is going really fast it
12:03 - still hits the brakes in order to try to
12:05 - reach there on time
12:06 - okay so the car driver is pretty much
12:08 - done now let's just test adding some
12:10 - more ai drivers as well as the player
12:12 - so just duplicate a bunch more cars
12:16 - and just enable the player and if there
12:18 - they go they immediately try to get
12:19 - there
12:19 - so i can control my player i can drive
12:22 - around
12:22 - yep now i can say okay all of you go
12:25 - down there and as i go in as i turn and
12:27 - yep they all reach the target position
12:30 - so wherever i tell them to go yep they
12:32 - all go straight towards there
12:34 - alright so here you can see a really
12:36 - nice car driver ai
12:38 - go watch the racing rts video to see
12:40 - where i put this system to use in a
12:42 - complete game
12:42 - this is a very simple script and it
12:44 - works great for getting some ai cars
12:46 - onto a target position
12:47 - as always you can download the project
12:49 - files and utilities from
12:50 - unitycodemonkey.com
12:51 - if you found this video helpful consider
12:52 - liking and subscribing this video is
12:54 - made possible thanks to these awesome
12:56 - supporters
12:57 - go to patreon.com unitycodemonkey to get
13:00 - some perks and help keep the videos free
13:01 - for everyone
13:02 - post any questions i have in comments
13:03 - and i'll see you next time
13:12 - [Music]