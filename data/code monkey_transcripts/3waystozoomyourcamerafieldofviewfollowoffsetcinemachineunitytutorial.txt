00:00 - hello and welcome I'm your code monkey
00:02 - and here on let's learn how to handle
00:04 - camera zoom when using cinemachine this
00:06 - is actually pretty simple but due to how
00:08 - send machine is set up using a certain
00:10 - component system it can actually be
00:12 - quite a bit tricky to figure out how to
00:13 - change it through code we're going to
00:15 - see various methods of zooming into the
00:17 - games by modifying the orthographic size
00:19 - in 3D games by modifying the field of
00:22 - view or perhaps the best method of all
00:24 - by changing the camera file offset
00:26 - position to physically move the camera
00:27 - closer with this zoom and some basic
00:30 - movement you end up with a very capable
00:31 - camera system that is actually something
00:33 - already covered in detail in another
00:35 - video but I wanted to make this one a
00:37 - separate one since the zoom is really
00:39 - the toughest part to handle through code
00:40 - if you prefer a more guided path with
00:43 - step-by-step lectures then check out my
00:44 - complete courses learn how to make a
00:46 - builder Defender game using c-sharp or
00:48 - learn how to make games internally using
00:50 - visual scripting perhaps if you're past
00:52 - the beginner stage and want to make the
00:53 - jump to Advanced then check out my
00:55 - turn-based strategy course to learn how
00:57 - to manage a more complex project and
00:58 - write some good clean code or learn all
01:01 - about Unity with the ultimate unity
01:03 - overview course which contains over 15
01:04 - lectures each covering a different
01:06 - two-hour feature of the engine I'm
01:07 - always available in the Q a section
01:09 - answering your questions every single
01:10 - day so check them all out with the link
01:12 - in the description alright so here on
01:14 - let's Zoom with cinemachine first of all
01:16 - if you're not familiar with 10 machine
01:17 - check out this video basically send
01:19 - machine is a built-in Unity tool that
01:21 - makes handling cameras super easy
01:23 - handling movement zoom camera switching
01:25 - smooth foam and so on all of that is
01:27 - made super simple when using cinemachine
01:29 - and actually I've already covered this
01:31 - topic of making a complete camera system
01:33 - in another video in that one I made a
01:35 - fully featured camera system with move
01:37 - rotate click to drag Edge scrolling and
01:39 - zoom but since some people might be
01:41 - specifically looking for this topic how
01:43 - to handle Zoom this is the more complex
01:45 - part of all the other actions so I
01:46 - figured I'd make it as a separate video
01:48 - but if you want a complete camera system
01:49 - check out the other video alright so
01:52 - over here is my demo scene for the
01:54 - assets I'm using the cinti Sci-Fi pack
01:56 - this is a great looking sci-fi cyberpunk
01:59 - pack there's only description if you
02:00 - want to get it yourself and as a
02:02 - starting point I've got a working camera
02:03 - here I'm using send machine so I have
02:06 - this nice virtual camera it's set up to
02:08 - follow this other object which is just
02:10 - an empty object with the system that
02:11 - we're going to see in a bit so the
02:13 - virtual camera just follows that object
02:15 - it's got the aim and body as transposer
02:17 - and composer and over here it's on
02:19 - pretty standard just if all offset so
02:21 - just so the camera is above and behind
02:23 - the target object then on the camera
02:25 - system I have this script just handling
02:27 - some camera movements over here just
02:29 - doing some put in order to movie
02:30 - transform position another one to handle
02:32 - the method of edge scrolling and finally
02:34 - another one to handle drag Penny those
02:37 - are the movement methods and then
02:38 - finally over here we have the simple
02:39 - rotation just rotating transform so with
02:42 - that here is a camera system working so
02:44 - I can move around in any direction I can
02:46 - rotate the camera and I can use even
02:48 - drag Pan and the edge scrolling alright
02:51 - so all of it pretty great again I cover
02:53 - this in detail in that other video for
02:55 - this video we really want to focus on
02:57 - how to handle the zoom part now there's
02:59 - actually two ways to zoom a camera one
03:01 - way is to lower the fov so on the
03:04 - virtual camera here we have the vertical
03:05 - fov and if we lower this then this acts
03:07 - kind of like a zoom and the other way is
03:09 - over here on the body we have the follow
03:11 - offset so you can lower both of these at
03:13 - the same time then the camera physically
03:15 - moves in closer so those are the two
03:17 - methods and both approaches will act
03:19 - kind of like a zoom and to do all that
03:21 - we're going to need some player input
03:22 - now for zooming what makes most sense is
03:24 - the mouse chrome wheels so let's do that
03:26 - here in the script let's set a function
03:28 - to handle our Zoom so handle can resume
03:30 - and then down here private void for the
03:33 - handle camera zoom like I said we want
03:35 - to use the mouse scroll so we can access
03:37 - that with input.mouse scroll Delta now
03:40 - this one is a vector 2 because
03:41 - apparently there are some mices scroll
03:43 - on the X but for a regular Zoom chances
03:45 - are we just want to scroll on the Y so
03:47 - let's see what this does let's do a
03:49 - debug.log on this one on the Y so here
03:52 - we've got the console and if I push the
03:53 - win on foreign yep you can see that we
03:55 - have some positive values and if I pull
03:58 - the wheel back to me there we go we have
04:00 - some negative values all right so we've
04:02 - got these values that we can use for our
04:03 - input to handle our Zoom so here on
04:05 - let's try handling the field of view
04:07 - method first and now this is why I made
04:09 - this video as a separate video because
04:11 - this is really the more complex part to
04:13 - making a camera system and the reason
04:15 - why it's complex is due to how send
04:16 - machine works so you might think that
04:18 - you can just access the send machine
04:20 - virtual camera so over here I have a
04:21 - film for the send machine virtual camera
04:23 - and in the editor over here I've got
04:25 - that reference and I'm referencing this
04:27 - object okay so you might think that you
04:29 - can simply access that and find some
04:31 - kind of Field view but nope there's no
04:33 - such thing no fov nothing it's only here
04:35 - the inspector here what we want to
04:37 - modify is this field so we need to
04:38 - figure out how to change this and
04:40 - thankfully we can easily figure that out
04:42 - because sin machine has all the source
04:44 - code available so if you just right
04:45 - click on the scene machine virtual
04:46 - camera and over here you edit the script
04:48 - yep it opens up the entire source code
04:50 - for the virtual camera script now if
04:53 - this doesn't open automatically you can
04:54 - open it manually so here on the project
04:57 - files there's a nice little packages at
04:59 - the bottom and if you expand this you
05:00 - see all of them and just in case you
05:02 - don't then on the top right corner
05:03 - there's this icon with a little I if
05:05 - this one is toggle then the packages do
05:07 - not appear but if this one is untoggled
05:09 - then all the packages are here so you
05:12 - can go inside packages inside
05:13 - cinemachine go inside runtime and then
05:15 - inside behaviors over here we have the
05:17 - same machine virtual camera this is
05:19 - where the script is so you can just
05:20 - double click to open this and over here
05:22 - if we do a quick search for field of
05:24 - view nope can't find it search for fov
05:26 - nope there's nothing here but if we go
05:29 - back into the editor and we'll make an
05:30 - inspector here we can see that the fov
05:32 - is inside something called the lens
05:34 - so on the virtual camera script if we
05:36 - search for a lens then yep now here we
05:39 - do find this so if you don't have type 1
05:41 - settings now if we try going inside of
05:44 - this type so here in the project files
05:46 - let's search for lens settings and
05:49 - appear on the search bar make sure you
05:50 - go into all if you just search in assets
05:52 - doesn't show up if you go into packages
05:54 - or all it does show up so let's open
05:56 - this one and now on this one if we
05:58 - search for field of view yep there goes
06:00 - right here so this is the method for how
06:02 - you can find any field in order to
06:03 - modify through code you can just go step
06:06 - by step through the source code in order
06:07 - to find exactly what you need to modify
06:09 - there's actually an even more advanced
06:11 - version of this method where you can
06:12 - load all of the packages source code
06:14 - directly into Visual Studio
06:15 - doing that makes it super easy to find
06:18 - exactly where the field is that you want
06:19 - to change and that method works with any
06:21 - packages
06:23 - in my ultimate TNT overview course one
06:25 - of the lectures is exactly on that topic
06:27 - how to find any class or any film to
06:29 - modify any of the many and many tools
06:31 - and features that Unity has another
06:33 - example of where this method is required
06:35 - for example on the global volume
06:37 - post-processing uses this volume
06:39 - component system and if you just go
06:41 - inside the volume and try to modify for
06:43 - example the volume intensity you won't
06:44 - be able to do that directly so that's
06:46 - one of the things that you can learn how
06:48 - to do with that method which I cover in
06:49 - that lecture also that course teaches
06:51 - you how to use many of the tools and
06:52 - features that UNT has so check it out to
06:54 - the link in the description okay so back
06:56 - into our demo here we already figured
06:58 - out where it is our field of view so we
07:00 - need to go inside the lens to access
07:01 - this so on the camera system we've got
07:03 - the send machine virtual camera from
07:05 - this one we can access the lens and then
07:07 - inside the lens we can change the field
07:09 - of view so just to test it out let's
07:11 - change it to something like 10 then
07:13 - let's do it on input so let's grab this
07:15 - so if the scroll down to dot y let's say
07:18 - if we push it forward so if it's above
07:20 - zero if so then let's just swap out the
07:22 - film review okay let's see if it works
07:25 - so here we are and if I push the scroll
07:26 - wheel yep there you go a real nice Zoom
07:28 - all right awesome so with this now all
07:30 - we need is some logic with some proper
07:32 - values and also we need to handle some
07:34 - smoothing since right now as soon as we
07:35 - switch yep there we go it changes
07:37 - instantly we want to be nice and smooth
07:38 - so let's do that over here first for the
07:41 - valid values let's first keep track of
07:43 - the current Target field of view so
07:45 - appear a private float Target field of
07:48 - view
07:50 - and we can default this to something
07:53 - so we have this field and then in here
07:56 - if we push forward then let's increase
07:58 - the field of view by some amount
08:00 - it's a finely float for the film of you
08:03 - increase amount
08:06 - so if you push forward we increase it
08:08 - let's remove this one put it down here
08:10 - and if we push backwards so if this one
08:13 - is under zero then let's instead
08:15 - decrease it okay so we have the target
08:17 - field of view and then at the end we
08:18 - assign it so we set it however like this
08:21 - we're going to get some messed up values
08:22 - if we can constantly decrease it then
08:24 - this is going to go into the negatives
08:26 - having a negative field of view is
08:27 - probably not what we want
08:29 - so let's add some proper minimum and
08:31 - maximum for that we can go up here we
08:33 - can make a serialized field to make it
08:35 - easy to customize let's make a float for
08:37 - the field of view Min let's say the
08:40 - minimum is maybe five fov and then
08:43 - another one for the Max and let's say
08:45 - put Max at 50. so then down here we just
08:48 - grab the target field of view and we can
08:50 - use mathft.clamp this one clamps a value
08:53 - between a certain minimum and maximum so
08:55 - we can use the target field of view
08:56 - clamp between the minimum
08:59 - and the film The View Max
09:02 - okay so that makes sure that this one is
09:04 - always within valid values the last
09:06 - thing we need is really just the
09:07 - smoothing
09:08 - so we can do that using lerp which
09:10 - actually covered in a quick short video
09:12 - it's a super simple way to make
09:14 - something nice and smooth
09:15 - in this case we've got just a float so
09:17 - we can use methf.orp and we want to
09:20 - interpolate between a start a final and
09:22 - using some time so the start value is
09:25 - going to be the current film of you so
09:26 - let's use the current one then the final
09:28 - one is going to be the Target Field View
09:30 - and finally time will be timed out of
09:33 - time and then we need to multiply by
09:35 - certain Zoom speed so fluid Zoom speed
09:37 - this works with pretty small values so
09:39 - maybe just 3F maybe that's smooth enough
09:41 - so let's see so we just multiply times a
09:43 - long time by this again if you don't
09:46 - know about LARP watch that quick video
09:47 - that I made it's super simple super easy
09:49 - way to add some nice smoothing
09:51 - so up here we set the film review to
09:53 - this so we use LARP in order to get it
09:55 - nice and smooth okay so that's really it
09:57 - let's see if we can change the field of
09:59 - view in order to make sure it stays
10:00 - within a certain minimum and maximum and
10:02 - let's see if it's nice and smooth okay
10:04 - so here we are and if I move yep there
10:06 - you go doing a nice zoom in and if I
10:08 - move the opposite way yep a nice zoom
10:10 - out all right awesome now here just in
10:13 - case you have the opposite behavior of
10:14 - what you want which in this case I do
10:16 - have that so by pushing the wheel
10:18 - forward I really want to zoom in instead
10:19 - of out and by pushing the wheel back to
10:21 - me I want to zoom out not in but this is
10:24 - personal preference up to you which
10:25 - method you want for me I want to reverse
10:27 - so this one is super easy just up here
10:29 - instead of increasing we decrease and
10:31 - this one increase
10:32 - and the zoom was also a bit too slow so
10:34 - let's put it a bit more so here it is
10:36 - now if I push the wheel forward yep
10:38 - there you go nice Zoom push back and
10:39 - nice zoom up alright awesome so
10:42 - everything works I can move the camera
10:43 - and I can zoom in or out okay great so
10:46 - here we have our film review zoom and it
10:48 - works perfectly like I said this is just
10:50 - one method for another method would be
10:53 - to leave the film The View and we just
10:54 - move the camera closer so let's see that
10:57 - second method but we want to keep this
10:58 - function just the same so let's say this
11:01 - is the field of view method
11:03 - and then let's make another one so
11:06 - handle camera zoom and for this other
11:09 - one let's call it the move forward
11:10 - method
11:11 - and we're just going to run one of these
11:13 - so let's make this function okay so here
11:15 - a proud Droid make this
11:19 - now here we're going to leave the film
11:20 - to view alone we're not going to touch
11:22 - that instead we're going to modify the
11:23 - final offset and again in order to
11:25 - figure out how we do that we need to use
11:27 - the same method to figure out how we
11:29 - modify it here on the send machine
11:31 - virtual camera once again we can see we
11:33 - can look and find that the final offset
11:35 - is inside the body so let's once again
11:37 - go inside the virtual camera let's edit
11:39 - the script and here if we search for
11:41 - phono offset nope can't find anything
11:44 - but if you look at this code you can
11:46 - start to understand how same machine
11:47 - works and how it works is based on a
11:49 - certain component base you have a
11:51 - function to get all of the components
11:53 - attached to this in machine object and
11:55 - if you have another function to get a
11:56 - specific syn machine component then if
11:58 - you don't look inside the send machine
12:00 - package inside runtime over here if you
12:02 - have a folder with components and you
12:03 - see all of these and if you look at
12:05 - these names and you can pair them with a
12:07 - virtual camera over here on the body if
12:09 - you see the various types that you have
12:11 - a body you have third person follow
12:12 - Framing transposer and so on and if you
12:15 - look over here yep you've got exactly
12:16 - those third person follow composer then
12:19 - down here the transposer which is the
12:20 - one that we're using so each one of
12:22 - these scripts matches up each type that
12:24 - we have here both here as well as on the
12:26 - aim so we're using the transposer so
12:28 - let's open up the send machine
12:29 - transposer script and over here if we
12:32 - search we can indeed find the funnel
12:34 - offset field okay so this is the one
12:36 - that we need to change so back in our
12:38 - camera system let's do that let's go
12:39 - inside this animation virtual camera
12:41 - like we saw this works with a component
12:43 - system so let's get the syn machine
12:45 - component and the type that we want is
12:47 - that one so the syn machine transposer
12:51 - so we have this and then on this one we
12:53 - can finally modify the M follow offset
12:55 - again let's do a quick test just to make
12:57 - sure that we have this correct so let's
13:00 - set the phone offset at 0 0 just -10 so
13:03 - just right behind the camera
13:05 - and let's do this once again if
13:07 - input.mouse scroll Delta so when do I
13:10 - when we push it forward let's do this
13:12 - just for testing okay let's see so here
13:15 - we are and if I move the scroll wheel
13:17 - yep there you go nice and zoom okay
13:19 - great it works perfectly so we modify
13:21 - the offset now again just like we did we
13:24 - just need to modify some external logic
13:26 - so let's do that so for changing it how
13:28 - we want this one to work is by
13:30 - essentially zooming straight in so we
13:33 - can complete the vector 3 for the zoom
13:34 - Direction and for that one since we want
13:37 - to zoom in straight forward then we can
13:39 - actually use the exact same final offset
13:40 - this one is a vector so in order to get
13:43 - the direction we can just normalize this
13:44 - vector all right so with that we got the
13:47 - zoom Direction
13:48 - now let's just make a film to keep track
13:50 - of the current file offset so here a
13:53 - private Vector 3 for the final offset
13:57 - and also we can set this by default so
13:59 - we can make a private void awake
14:01 - and on the Wake let's get the final
14:03 - offset and we just get it from this so
14:05 - get down and get the final offset so
14:08 - just copy this go up here and paste this
14:10 - so we have the star info offset we can
14:13 - also do the same thing for the Target
14:14 - film review just in case you want but
14:15 - default into 50 also works okay so we
14:17 - have default offset
14:19 - then down here instead of using all this
14:21 - let's use the follow offset
14:24 - so we've got the zoom Direction then
14:25 - we're going to increase it or decrease
14:27 - it and at the end we're going to set it
14:29 - so set it to the final file offset so we
14:32 - just need to modify this one if we push
14:34 - it in then let's increase this by the
14:36 - zoom Direction
14:37 - and if we push back so if this one is
14:40 - under zero then lets you minus equals
14:42 - okay so now we just need to validate
14:44 - this follow offset to stay within valid
14:46 - ranges we obviously don't want to push
14:47 - too far forward so doing that is
14:50 - actually pretty simple we can just check
14:52 - the final offset this one is a vector we
14:54 - can just check the magnitude so this is
14:56 - essentially the length of this vector
14:59 - so we just check if this one is under a
15:01 - certain minimum so we need to Define
15:03 - that so let's go up here to define those
15:05 - so we float for the final offset min
15:09 - let's say the minimum is perhaps five
15:11 - units and then another one for the Max
15:13 - and let's put also same thing doesn't
15:15 - have to be the same but just same thing
15:17 - okay
15:18 - so if this one is under the phone offset
15:20 - Min if so then the camera is way too
15:22 - close so let's set default offset use
15:24 - the zoom Direction and multiply it by
15:26 - the minimum
15:28 - okay then the same thing for the maximum
15:30 - so if the magnitude is above the max
15:33 - then we set it to the max alright so
15:36 - with that we have default offset and it
15:38 - should be working correctly well that's
15:39 - less it's just adding a nice slow smooth
15:41 - Zoom so let's do that except over here
15:43 - we're working with a vector three so
15:45 - instead of methamp.lurp we use
15:48 - vector3.lurp
15:50 - so is that and again we've got the
15:52 - starting Valley so that's this one then
15:55 - for the Target that's the phone offset
15:56 - and time dot down to time multiplied by
15:59 - a certain Zoom speed
16:00 - so we float for the zoom spin let's put
16:03 - it at something
16:05 - so we have this and we set it at this
16:12 - all right so that's it this is the
16:14 - second method let's see if it works okay
16:16 - here we are and if I scroll and if there
16:18 - goes zooming straight in so instead of
16:20 - lowering the fov it's actually getting
16:21 - the camera closer and zooming straight
16:24 - out now again for me it's also reversed
16:26 - just like it was previously so here
16:28 - instead of plus do a minus and over here
16:31 - plus also if you want you can change
16:33 - over here the zoom amount so float for
16:35 - the zoom amount
16:36 - let's say just so it zooms a tiny bit
16:38 - more so multiply the zoom Direction by
16:41 - the zoom Mount and so on and yep now as
16:43 - I push the wheel forward there you go
16:45 - the camera moves forward and the camera
16:46 - moves back all right that's great so
16:49 - we've got two methods working now let's
16:51 - actually quickly check out the third
16:53 - method instead of zooming in directly
16:55 - onto this position what we're going to
16:57 - do is just lower the camera closer to
16:59 - the ground so the logic for doing that
17:01 - is very similar except instead of moving
17:03 - forward on the final offset we're only
17:04 - going to modify the Y so let's once
17:06 - again make another version of this
17:08 - function so let's make another handle
17:10 - camera zoom
17:12 - this one come with lower y
17:15 - let's make this function
17:17 - so down here you press void for this
17:20 - so for this one let's actually copy
17:22 - pretty much the exact same code it's
17:24 - going to be extremely similar however we
17:27 - don't have any Zoom Direction no instead
17:29 - we just modify the final offset.y so
17:31 - this is the only one that we modify so
17:33 - just increase it or decrease it we just
17:35 - play around the Y
17:37 - then instead of this type of clamp we
17:39 - can use the regular one so math f.com
17:42 - we're going to want to clamp the file
17:44 - offset on the Y
17:46 - so this one between a certain minimum
17:48 - and maximum
17:50 - so let's go up here to Define that so
17:52 - default offset y min
17:57 - and again let's put it pretty much the
17:59 - same values all of them work pretty
18:00 - pretty much similar okay so we have this
18:03 - now down here use the follow offset y
18:06 - Min and the phone offset y Max
18:09 - so we clamp the values and then we're
18:12 - already modifying the file offset so
18:13 - then we set it just the same as
18:14 - previously alright so that's it super
18:16 - simple let's see what this method looks
18:18 - like so here we are the same camera same
18:20 - scene now if I zoom in if there you go
18:22 - now it does this kind of Zoom so instead
18:24 - of pushing straightforward instead of
18:26 - pushing there it simply lowers the
18:28 - camera now personally I really like this
18:30 - method since it lets you look at objects
18:32 - up close so it gets the camera right
18:33 - down to the floor and it also gives you
18:35 - a different perspective so I think this
18:37 - one is great and works great for many
18:39 - game types so we can move the camera
18:40 - rotate and zoom in just like this but
18:43 - either way here we have three Zoom
18:45 - methods so choose whichever one you
18:47 - prefer and finally let's look at the 2D
18:49 - version
18:50 - here I've got another demo the only
18:52 - difference is the camera setup in 2D
18:53 - mode so there's no perspective and since
18:56 - there's no perspective that also means
18:57 - we don't have any field of view instead
18:59 - what we have is an orthographic size
19:01 - and the way we change it is exactly the
19:03 - same as with the field of view the film
19:05 - that we modify is also inside lens so
19:07 - you just go in there and you change this
19:09 - time the orthographic size all the other
19:11 - logic is exactly the same and that's it
19:14 - very simple so here we are and if I
19:16 - scroll the mouse and yep it does work it
19:18 - zooms in and it zooms out alright
19:20 - awesome so this is how you can zoom in
19:22 - with cinemachine using various methods
19:24 - in both 2D and 3D the tricky part is
19:27 - really just figuring out how to access
19:28 - those fields if you want to learn that
19:30 - method and many more things in detail
19:32 - check out my ultimate TNT overview
19:34 - course
19:35 - it's full of lectures teaching you
19:36 - things like this one like how to find
19:38 - any class or field that wouldn't really
19:39 - work as a Runway video the course covers
19:42 - tons of unity zones and features and I'm
19:44 - constantly updating it with free updates
19:46 - so if you're interested in unity at all
19:48 - definitely make sure to check it out
19:49 - alright hope that's useful check out
19:51 - these videos to learn some more thanks
19:53 - to these awesome patreon supporters for
19:55 - making these videos possible thank you
19:57 - for watching and I'll see you next time
19:58 - [Music]