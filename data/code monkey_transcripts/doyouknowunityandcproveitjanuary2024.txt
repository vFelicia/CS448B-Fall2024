00:00 - hello and welcome I'm your Cod Mony do
00:02 - you know what are the minimum
00:03 - requirements to define a mash in code or
00:05 - do you know if this static variable if
00:07 - this one gets reset on loading a
00:08 - different scene or can you answer the
00:10 - question how many classes should your
00:11 - game have so can you answer these
00:13 - questions either way whether you answer
00:15 - yes or no hopefully you can learn
00:16 - something a while ago I built this
00:18 - system on my website that is something
00:20 - that I've wanted to do for ages
00:21 - basically I wrote a ton of really
00:23 - interesting questions and wrote some
00:24 - super detailed answers then I made a
00:26 - system which automatically every 3 days
00:28 - picks a brand new question to ask you
00:30 - can always go on to the website and see
00:32 - the latest question or you can log in
00:33 - and go to your user page and over here
00:35 - you can enable the question of day and
00:37 - this way you will get an email every
00:38 - time a new question is generated I think
00:40 - this is a pretty fun way to learn I've
00:41 - already enjoyed getting some of these
00:42 - emails myself since I wrote so many
00:44 - questions there's still a bunch of them
00:46 - that I don't remember doing so every
00:47 - time it's great for me to answer here
00:49 - let's go through the last 10 questions
00:50 - and see if we can learn something new by
00:52 - the way if you're wondering why there
00:53 - have been fewer videos lat that's
00:54 - because I'm hard at work on my C course
00:57 - I planning something similar to my
00:58 - kitchen chaos course meaning a free
01:00 - version then an optional paid version
01:02 - with some nice bonuses I still have a
01:03 - lot of work to do but hopefully next
01:05 - week I'll be able to have a video
01:06 - talking about my plan you can go to the
01:08 - link in the description and sign up if
01:09 - you're interested in that course and let
01:11 - me also mention that right now the UN
01:12 - assur is having the UN award sale this
01:15 - month I didn't make my usual asset list
01:16 - videos because once again I'm busy
01:18 - working on the course but if you need
01:19 - anything definitely check it out to the
01:20 - link in the description starting off
01:22 - with question number 10 what does
01:23 - normalizing a vector do so does it
01:26 - modify the XY Z to get a magnitude of
01:28 - one or does it invert the XY Z or does
01:30 - it flatten the Zed if you want pause the
01:32 - video and try to answer yourself
01:35 - normalizing is something that I do a lot
01:36 - so I do know that it modifies the XYZ to
01:38 - get a magnitude of one and yep that is
01:40 - indeed correct and apparently 100% of
01:42 - the people got it right so that's
01:43 - awesome basically when using movement
01:45 - vectors you should always normalize them
01:46 - before moving any object in order to
01:48 - make sure you get consistent movement if
01:50 - you don't then basically the vector will
01:51 - have a larger magnitude if the target is
01:53 - farther away and then have a small
01:55 - magnitude so basically it would move
01:56 - faster and then slower whereas if you
01:58 - normalize it then basically that sets
02:00 - the magnitude to one regardless of the
02:01 - size of the original vector and that way
02:03 - the movement will always be consistent
02:05 - another problem with not normalizing is
02:07 - simply using the input Vector directly
02:09 - this is something that actually quite a
02:10 - lot of beginners make this mistake if
02:12 - you just compose the input vector and
02:14 - the player is moving diagonally so
02:15 - they're pressing W and D at the same
02:17 - time then the input Vector is going to
02:18 - be 1 one and that it actually means that
02:20 - the character will move faster on the
02:21 - diagonals so for example when working on
02:23 - some simal character movement always
02:24 - make sure you normalize your movement
02:26 - speed so the movement is consistent this
02:28 - is something that I covered in detail in
02:29 - my controller video or within my entire
02:32 - complete course and this applies not
02:34 - just to movement but to anything so for
02:35 - example even when shooting bullets make
02:37 - sure you normalize the bullet Vector so
02:39 - that the bullet actually moves at a
02:40 - consistent speed next question what are
02:42 - the minimum requirements the array size
02:44 - in order to draw a mesh quad so you do
02:46 - mesh equals in new mesh then you set the
02:47 - vertices to something UV to something
02:49 - and triangles to something so what does
02:51 - meshon contain does it have four
02:53 - vertices four UVS in two triangles or is
02:56 - it four vertices four UVS in six
02:58 - triangles or is it six vertices three
03:00 - UVS and four
03:01 - triangles here again drawing Dynamic
03:04 - meshes is something that I've done many
03:05 - many times so I know this one pretty
03:07 - much by heart the one tricky thing is
03:08 - some people might answer over here this
03:10 - one four vertices four UVS and two
03:12 - triangles because that is technically
03:14 - true the mesh does have two triangle so
03:16 - you pretty much got a quad and there is
03:18 - one triangle and then another triangle
03:20 - however over here the triangle array in
03:22 - order to make a triangle this actually
03:23 - requires three points for three vertices
03:25 - so the correct answer is over here four
03:27 - vertices four UVS and six triangles and
03:29 - Y they is correct and it looks like
03:31 - quite a lot of people actually got
03:32 - tripped up on that one because again
03:34 - logically speaking it is just two
03:35 - triangles but over here the size of the
03:37 - array the triangles array that one has
03:39 - six in general a quad is composed of
03:41 - Four Points so you need four vertices
03:43 - and in order to place some kind of
03:44 - texture on those you need the same
03:45 - number of vertices as you need UV so
03:47 - also four UVS and again the triangles in
03:49 - order to build a triangle you need three
03:51 - points so that is why each logical
03:53 - triangle is composed of three points so
03:55 - for two triangles you need six values so
03:57 - Dynamic measures these are really
03:59 - awesome really useful I've used them in
04:00 - tons of use case look at all this this
04:02 - is actually one of the first things that
04:04 - I learned when I first started using
04:05 - Unity over 10 years ago and the reason
04:07 - was because this for the particle system
04:09 - that I wanted to last forever for my
04:10 - first game Survivor Squad I really
04:12 - wanted it to have persistent particles
04:13 - right on the floor and I wanted those to
04:15 - continue and stay there forever and
04:17 - basically made me look into how to
04:19 - generate a mesh dynamically so that I
04:20 - could sort that mesh and keep that
04:22 - consistently then I've also use it in
04:24 - conjunction my grid system in order to
04:26 - build some kind of mini map I've built a
04:27 - radar chart I made how to draw with
04:29 - unity and by the way with that one I
04:31 - also combined it with the transparent
04:33 - Unity window in order to make the nice
04:34 - overlay that I use sometimes so this the
04:37 - exact same thing the draw a mesh in
04:38 - unity so this one has tons of use case
04:40 - really awesome definitely make sure you
04:42 - learn about animic meshes and like it
04:44 - says down here that is one of the first
04:45 - things that I started when I started
04:47 - learning unity and the reason was
04:48 - because my first game Survivor Squad it
04:50 - required Dynamic meshes for quite a lot
04:52 - it required it for the persistent
04:54 - particle system and also of course for
04:55 - the line of sight next question what is
04:57 - the orthographic size in a2d camera so
05:00 - is it the units visible horizontally is
05:02 - the units visible vertically is it half
05:05 - of them horizontally or half
05:07 - vertically now honestly this one is one
05:09 - that I'm always confused with I do know
05:11 - that it is the vertical one but I never
05:13 - know if it's the units or half the units
05:15 - so I'm actually going to take a guess
05:17 - here let's say that it is the visible
05:18 - units and apparently I got it wrong so
05:20 - it half the new units Yep this one
05:22 - always strips me up it's kind of
05:24 - interesting how most people apparently
05:25 - thought that it was the visible
05:27 - horizontally basically the horizont Al
05:29 - size that is going to depend on whatever
05:31 - aspect ratio you have like it says here
05:33 - the aspect ratio is going to impact the
05:35 - horizontal size and you can do some math
05:37 - to calculated by simply using the camera
05:39 - do aspect and the orthographic size so
05:41 - if you have it of 70 you're going to see
05:43 - from minus 70 to plus 70 for total of
05:46 - 140 units visible the orthographic size
05:48 - this is the kind of thing that you use
05:49 - if you have a 2d camera so you either
05:52 - increase or decrease in order to zoom in
05:53 - or zoom out I made a really detailed
05:55 - camera system video this one is super
05:57 - detailed took a lot of work to make but
05:58 - I'm really happy with this this one it
06:00 - contains pretty much all the features
06:01 - you need in any kind of camera in both
06:03 - 2D and 3D and it also covered three ways
06:05 - of zooming a camera this was also a fun
06:07 - one and speaking of cameras if you're
06:08 - using cameras chances are you're using C
06:10 - machine so one confusing thing one thing
06:12 - that might be quite tricky to figure out
06:14 - is how do you modify anything in sin
06:15 - machine through code that is a little
06:17 - bit tricky because of how sin machine
06:18 - works but it can be done and I covered
06:20 - that in this video and sin machine also
06:22 - has a bunch of extras that make it
06:24 - really easy to use one of those is the C
06:26 - Machine confiner which makes sure that
06:28 - regardless of Zoom the player does not
06:29 - seen any more than they should next
06:31 - question is there a problem with this
06:33 - code so we've got a private void set
06:35 - camera follow Funk and receives a funk
06:37 - of vector 3 for the camera F Funk and
06:40 - then we are calling it with open
06:41 - parentheses little arrow new Vector 3 so
06:44 - is there something wrong with this so
06:46 - this has to do with funks which are
06:47 - delegates so is there no problem or
06:49 - should it be that one with return you or
06:52 - should it be that one and takes a vector
06:54 - 3 as a
06:55 - parameter delegates are really awesome
06:57 - something you definitely should learn
06:59 - they are extremely powerful like for
07:00 - example here this is the kind of code
07:02 - that I've used many times it's a super
07:04 - simple way to make the camera follow
07:05 - some kind of position you pass in a
07:07 - delegate in order to make the camera
07:08 - look at any kind of position and that
07:09 - position can be dynamic since the
07:11 - delegate is also going to be dynamic so
07:13 - in this case I know nope there are no
07:15 - problems with this code it is EXA like
07:16 - this you just do a Lambda with empty
07:19 - parameters and just returns effective
07:20 - three and yep the answer is no so that
07:22 - is correct although the 51 people that
07:24 - voted for this one this one is also
07:26 - technically correct what I wanted to
07:28 - Showcase with this option is how you
07:29 - don't have to include the return you can
07:31 - omit the return and the compiler will
07:33 - implicitly include it so if you just do
07:35 - like this this is perfectly valid code
07:37 - you don't need the return however if you
07:38 - do add it that is also not an issue like
07:40 - it says here the compiler automatically
07:42 - adds return when receiving a delegate
07:44 - into a funk parameter so it's not
07:45 - necessary but it works both ways if
07:47 - you've never seen this syntax before
07:49 - this is called a Lambda expression this
07:50 - is super useful super compact it's a
07:53 - great way for quickly defining and using
07:54 - some functions I use it all the time all
07:57 - kinds of things like for example on
07:58 - button clicks Funk con action are two
08:00 - types of delegates which can be super
08:01 - useful if you don't know what they are
08:03 - definitely go make sure you watch this
08:04 - video they are super useful in so many
08:06 - use cases so definitely make sure you
08:07 - learn about them and like it says here
08:09 - this particular pattern of setting a
08:11 - camera class receive a funk VOR 3
08:13 - instead of a singal VOR 3 this is a
08:15 - super easy way to make your camera or
08:16 - really any object follow something that
08:18 - moves this is something that I use a lot
08:20 - in my dinky Gardians game I use it
08:21 - especially for the tutorial on tutorial
08:23 - there are a whole bunch of arrows
08:25 - pointing to things where the player
08:26 - should go and sometimes those targets AR
08:28 - moving like for example can be a moving
08:29 - dinky so for that I cannot give the
08:32 - tutorial Arrow I cannot give it a fix
08:33 - point because the target can be moving
08:35 - so instead for the tutorial Arrow it
08:37 - receives a funk of vector 3 which in
08:39 - turn then updates based on the dink's
08:41 - position next question so does this
08:42 - variable get reset when you load a
08:44 - different scene so private static and
08:46 - score so is it yes no or only when
08:49 - loading the main
08:50 - menu this is one thing that can trip a
08:52 - beginners quite a bit and the answer is
08:54 - no just loading a scene that does not
08:56 - impact static variables at all so static
08:58 - variables is actually a good way in
09:00 - order to pass data between scenes if you
09:03 - have some data like for example number
09:04 - of coins amount of money score or so on
09:07 - something like that that you want to
09:08 - pass in between scenes then using a
09:09 - static variable is a super simple way to
09:11 - do it or just pass some kind of setup
09:13 - data like for example in my multiplayer
09:15 - kitchen chaos course in this I use a
09:17 - static variable in order to define
09:19 - whether to enable the game in single
09:20 - player or multiplayer and pass in a
09:22 - bunch of player data and also like it
09:23 - says here related to this is you can set
09:25 - Unity to disable and domain reloading
09:27 - this actually makes compilation quite a
09:28 - bit faster which is really nice but it
09:31 - also comes at the cost of not
09:32 - automatically resetting static data even
09:34 - between playthroughs so if you define
09:36 - some kind of static field and you set it
09:37 - to some kind of data then you stop
09:39 - playing and you start playing again that
09:40 - data will persist so if you do play
09:42 - around with this option with domain
09:43 - reloading definitely make sure you
09:45 - understand that is going to happen Okay
09:47 - next question what is Json and what is
09:49 - it useful for so does it stand for
09:51 - JavaScript over node is it a programming
09:53 - pattern or does it stand for JavaScript
09:56 - object notation and it's a data format
09:58 - or does it stand for jumping signal over
10:00 - nons and it's a crypto
10:02 - concept Json is really awesome I'm a
10:04 - huge fan of it it has been so useful in
10:06 - so many US case so I instantly know that
10:08 - it's a data format it's JavaScript
10:10 - object notation even though it
10:12 - technically doesn't have anything to do
10:13 - with JavaScript and Y that is indeed
10:15 - correct and seems like most people got
10:16 - it right so Json is a very useful and
10:18 - widely used text based data format and
10:21 - despite the name of course it is not
10:22 - just using JavaScript so here in C we
10:25 - can use it in the end it's really just
10:27 - text it's human readable and easily
10:29 - editable and pretty much any language is
10:31 - going to have a ton of libraries that
10:33 - make it super easy to work with Json
10:34 - objects one of the main ways that I use
10:36 - it in so many ways is for doing saving
10:38 - and loading like what I covered in this
10:40 - video which I believe this video is from
10:41 - 2018 what I covered here is what I've
10:43 - been doing for saving and loading for
10:45 - the past 10 years and in my latest game
10:47 - dinky Gardens that is still exactly the
10:48 - same way that I handle saving and
10:50 - loading I create a save object and then
10:51 - I converted into Json and simply save
10:53 - that into a text file it is super simple
10:55 - and works perfectly then I also combine
10:57 - Json which is using text I combined that
11:00 - with some bite saving in order to save a
11:02 - file with the screenshot this was also a
11:03 - really fun one and another place where
11:05 - Json is you Ed quite a lot is when
11:07 - dealing with web services and rest apis
11:09 - so I've also done some research on
11:11 - playing around with Azure in order to
11:13 - make an online leaderboard or a bunch of
11:15 - cloud-based mechanics these were some
11:16 - really interesting topics to research
11:18 - there's a ton of interesting stuff you
11:19 - can do with the cloud and again most of
11:21 - it is going to be working with Json and
11:23 - also just one quick note which is what I
11:25 - mentioned here it's human readable and
11:26 - easily editable there are actually some
11:29 - people that think this is a problem on
11:31 - my various Json videos there's always
11:32 - someone who says okay so if you make
11:34 - that for Save objects doesn't that mean
11:35 - players can easily cheat on their saves
11:37 - and the answer is yep they can this is
11:39 - not a bug this is definitely a feature
11:41 - Json is intended to be easily editable
11:43 - usually my answer to that is don't worry
11:45 - about your player cheating on some kind
11:47 - of single player game if the player
11:48 - wants to cheat in order to modify their
11:49 - safe file to get a ton of money my
11:51 - answer is really just let them there's
11:53 - really no harm in that on the other hand
11:54 - if you're making something in
11:55 - multiplayer the simple answer is don't
11:56 - trust the client so if you have a
11:58 - multiplayer game and you have some kind
11:59 - of money amount then always keep that
12:01 - amount in the server and never actually
12:03 - give that authority to the player in
12:04 - order to Define what money they have
12:06 - next question the profiler is useful for
12:09 - is it for balancing difficulty is it for
12:11 - level design or is it for identifying
12:13 - performance bottom
12:15 - deck I guess it would be interesting if
12:17 - there was a profiler for balancing
12:18 - difficulty maybe something where you
12:19 - could see the graph when difficulty
12:21 - becomes really intense and then really
12:22 - easy that would be fun but no the
12:24 - profile is used for identifying
12:26 - performance bottlenecks and yep
12:27 - apparently everyone got it so basically
12:29 - the profile letss you see various stats
12:31 - related to your game either while
12:32 - running or even just in the editor so
12:34 - even if you're making just editor tools
12:36 - you can still use the profiler so you
12:38 - can view things like how much memory you
12:39 - are consuming how much garbage is being
12:41 - generated you can see how many audio or
12:43 - physics elements are present and
12:44 - importantly how long each script is
12:46 - taking to execute per frame so this is
12:48 - really an absolutely essential tool if
12:50 - you have any kind of performance issues
12:52 - if you want to see how fast your game is
12:54 - running this is definitely one tool you
12:55 - must know how to use and then if you
12:57 - enable theep profile you you can see
12:59 - specifically how long each function is
13:00 - taking this is honestly one of the best
13:02 - learning tools there are if you know how
13:04 - to use it that won't teach you so much
13:06 - especially if you try to optimize things
13:08 - you do some kind of change and look in
13:09 - the profile see did that help or did it
13:11 - not and same thing for garbage garbage
13:13 - is also something that becomes really
13:15 - important and by using the D profile and
13:17 - making all kind of changes by doing that
13:18 - you can see okay this function is
13:20 - generating garbage and now it's not but
13:22 - at the same time remember the saying
13:23 - premature optimization is the root of
13:25 - all evil meaning don't just try to guess
13:27 - what parts of your game need to be
13:29 - optimized perhaps there is some code
13:31 - that might not be optimized but does not
13:32 - cause any issues like for example you
13:34 - might have some code that is really
13:36 - insanely slow but it only runs once on
13:38 - start so it doesn't really matter and
13:40 - there might be another part that you
13:41 - think is optimized but in reality isn't
13:43 - so don't try to guess which parts you
13:45 - think are performant and which parts are
13:47 - not always use the profile in order to
13:48 - identify exactly what are the
13:50 - performance model nexts and then of
13:51 - course if you need extra performance in
13:53 - your game is CPU unlimited then
13:55 - definitely check out un dots or
13:57 - alternatively just the Bur in the job
13:59 - system remember you don't have to use
14:00 - entities you can use just CCU and get
14:02 - massive benefits by using un dots it is
14:05 - relatively complex but can provide some
14:07 - massive performance in and actually over
14:09 - here I need to edit this question in
14:10 - order to add the recently updated dos
14:12 - tutorial that I just made and then some
14:14 - more bonus tips for profiling the
14:16 - rendering for that you can look in the
14:17 - frame debugger window that will show you
14:19 - exactly how each frame of your game is
14:21 - being rendered step by step I added the
14:23 - lecture on the frame debugger in the
14:24 - last update in my ultimate unity
14:26 - overview course and then for profiling
14:28 - memory for for that you can look into
14:29 - the memory profile I've never actually
14:31 - used this one just yet but it seems
14:33 - really interesting how it add so much
14:34 - thata next question what is the
14:36 - equivalent to input. getet Mouse button
14:38 - down on the input system package so is
14:40 - it input system get mouse button down or
14:43 - is it mouse. current. left button was
14:45 - press this Frame or is it player input.
14:47 - mouse. read
14:48 - valuable this is definitely a bit of a
14:50 - tricky one so I wonder how many people
14:52 - got this right I'm pretty sure that it
14:53 - is mouse. current left button was press
14:55 - this Frame and if that is correct it
14:57 - seems like 50% the people didn't quite
14:59 - get it the input system really is quite
15:01 - a bit complex so remembering this L of
15:02 - code is a little bit tricky but if you
15:04 - think about it it actually makes sense
15:05 - you are accessing the mouse that is the
15:07 - type the mouse type then accessing the
15:09 - current mous the one that is currently
15:11 - being used then you test out the left
15:13 - button and you see if that one was
15:14 - presses frame so that is pretty much
15:16 - exactly the same logic as what this one
15:17 - does so the input system is indeed quite
15:19 - a bit more complex but it also a lot
15:21 - more capable so that complexity does
15:23 - have some extremely useful benefits if
15:25 - you've never used the input system I
15:27 - highly recommend you use it check my
15:28 - tutorial on it basically I remember a
15:30 - few years ago when I made my game hyper
15:32 - Knights I wanted that game to be
15:34 - playable with a game pad and back then
15:36 - using a game pad with the Legacy input
15:38 - manager that was a complete nightmare
15:39 - that was horrible so back then I had to
15:42 - buy an asset in order to make it work
15:44 - whereas nowadays using the new input
15:45 - system this one is really awesome so
15:46 - definitely make sure you use it one of
15:48 - the main complaints about it is how it's
15:50 - a bit too complex and that is true it is
15:52 - quite a bit more complex but at the same
15:53 - time you can make it pretty much just as
15:55 - compact as the Legacy input manager all
15:57 - those extra capabilities also make it
15:59 - really awesome like for example adding
16:00 - game support is really easy and it also
16:02 - includes a built-in way of doing a
16:04 - virtual cursor for example my game d
16:06 - Guardians uses to make the game playable
16:08 - with both a mouse and keyboard as well
16:09 - as a game pad and then just one final
16:11 - note which is if you're using the Legacy
16:13 - input manager always remember you can
16:15 - always refactor your code for me
16:17 - personally that is exactly how I
16:18 - normally do it any kind of project I do
16:20 - in the beginning I always use the input
16:22 - manager just because it is so easy but
16:24 - then later on when it's a serious
16:26 - project later on I do refactor that code
16:28 - in order to make it use a new input
16:29 - system that is exactly what I do in my
16:31 - own projects and exactly what I taught
16:33 - in my kitchen chaos course next question
16:35 - and this is a really interesting one how
16:37 - many classes should your game have so
16:39 - should you have less than 100 at least
16:41 - 100 as many as needed and no more or
16:44 - just
16:45 - one so this sounds like a funny question
16:48 - but it really is an extremely important
16:49 - question and the answer should hopefully
16:51 - be obvious which is as many as needed
16:53 - and no more and Y thankfully pretty much
16:55 - everyone got it right so yeah there's
16:57 - really no set number of class G game
16:58 - should have there's really no number you
17:00 - should go for always keep in mind the
17:02 - ultimate goal which is to keep your code
17:04 - clean and organized so for example if
17:06 - you have 300 classes of 20 lines each
17:08 - and takes you 10 minutes to find what
17:09 - you need if so then you might have too
17:11 - many or if you have 50 classes with
17:14 - 1,000 lines each you can probably break
17:15 - them into several smaller classes that
17:17 - do one thing and one thing only again
17:19 - remember the main goal of any kind of
17:20 - clean code guidelines is really just
17:22 - managing complexity so that is why the
17:24 - answer is not a fixed number but rather
17:25 - as many as needed and no more if you add
17:27 - more than need it can become messy and
17:29 - if you have too little it can also
17:31 - become messy and the answer to this with
17:33 - regards to class is also the same thing
17:34 - with regards to functions variables or
17:36 - literally anything pretty much all of
17:37 - those those are all tools to be used in
17:39 - your toolbox in order to help you make
17:40 - better games faster so number itself
17:42 - doesn't really matter use as many as you
17:44 - need and no more now for example in my
17:45 - game has around 300 classes and some of
17:48 - those are really tiny only about 20
17:49 - lines long and others are pretty massive
17:51 - like the player class is about 1,000
17:53 - lines long that's definitely quite a bit
17:55 - on the longer side but everything inside
17:57 - that class makes sense to be in that
17:58 - class the more important thing is that I
18:00 - can find anything I want very quickly
18:02 - because the class are separate in ways
18:03 - that make sense and I have very good
18:05 - descriptive names and here's a quick tip
18:07 - on Visual Studio you can use a shortcut
18:09 - Control Plus comma in order to bring up
18:11 - a window where you can search any class
18:12 - by name any class or function or
18:14 - variable or anything this is really the
18:16 - shortcut that I use the most in order to
18:17 - move my codebase from class to class
18:19 - okay final question what is the position
18:21 - of the transform after running this code
18:23 - so we've got a vector 3 Target transform
18:26 - we're putting it on 10 0 then we're
18:28 - assigning the transform. position to
18:30 - this target position and then we go into
18:32 - the target position and we modify the X
18:34 - to 20 so after running these three lines
18:36 - of code where is the transform. position
18:38 - right now is it on 10 0 0 20 or is it
18:42 - unknown this is another really important
18:44 - thing that might trip up some beginners
18:46 - so let's see how many people got this
18:47 - right in my case I already know Target
18:49 - position this is a vector three which is
18:51 - a valid type so I already know that when
18:52 - assigning that to the position it is
18:54 - assigning a copy and afterwards
18:55 - modifying a completely separate copy
18:57 - does not affect it so in my case I do
18:59 - know that it is 10 0 and if that is
19:01 - correct and seems like about 30% of
19:03 - people did not think so again this
19:05 - something that can be quite confusing if
19:06 - you don't know about it if you don't
19:08 - know about differences between value
19:09 - types and reference types difference has
19:11 - to do with whether you are passing in
19:13 - something as a copy or you're passing in
19:15 - something as a reference in this case
19:16 - Vector 3 is a value type meaning when
19:19 - you pass in something to the position
19:20 - you are passing in a copy of Target
19:22 - position and when you later modify that
19:24 - Target position it does not modify the
19:26 - copy that the transform. position holds
19:28 - if you do want to modify then you need
19:30 - to set it again to another value like I
19:32 - said this is something that is quite a
19:33 - bit tricky so if you don't know
19:34 - differences between value and reference
19:35 - types definitely go make sure you watch
19:37 - this video I know myself I had tons of
19:39 - problems when I was a beginner because I
19:41 - did not understand this reference I
19:42 - would make some kind of change and then
19:43 - have no idea why something changed or
19:45 - something did not change all right so
19:47 - those are the last 10 questions on the
19:49 - question of the day feature again you
19:50 - can always find the latest one directly
19:52 - on the website or you can go to your
19:54 - user page and sign up to get emails
19:55 - whenever a new question is posted I hope
19:57 - that these questions and these detailed
19:59 - answers help you learn something new so
20:01 - thanks for watching and I'll see you
20:02 - next time