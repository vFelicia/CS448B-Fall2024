00:00 - hello and welcome I am your code monkey
00:02 - and in this video we're going to check
00:03 - out the inner workings of the waiting
00:05 - queue in battleground tycoon
00:06 - let's get sir
00:10 - so a very important part of the game is
00:12 - having guests cue to enter buildings I
00:14 - always loved seeing massive queues going
00:17 - into a really popular grocery in Ronald
00:19 - Coase Tycoon so that was one of my main
00:21 - things that I needed to implement so I
00:24 - have my scene here and it's the actual
00:26 - game scene from that around Tycoon the
00:28 - game is still very much in early
00:30 - development if you like the concept of
00:32 - the game add to your wish list and
00:34 - follow what we want to go through this
00:37 - video is the waiting queue in here as
00:39 - you can see the guests wait in the queue
00:41 - and Tom the ones inside the building are
00:43 - done and when the guests inside the
00:46 - building leave the building the others
00:49 - go in so this is the behavior we want to
00:51 - create ok so what do we need to make a
00:53 - queue well first of all we need a list
00:56 - of all the positions of each guest in
00:58 - our queue then we need to keep track of
01:00 - who is in what position and who is at
01:03 - the front of the queue when we add a new
01:05 - guest we need to tell him to the
01:06 - position where he should go to and we
01:09 - needed a position for the entrance to
01:10 - the queue which is a position in here
01:12 - that the guest goes in before going in
01:14 - to its specific position in the queue
01:16 - and we also need a way for the building
01:18 - that this queue is connected since these
01:20 - are two separate objects we need a way
01:22 - for the building using this queue to
01:24 - request the guest at front when he has a
01:26 - space so when I guess leaves he requests
01:28 - a guest from the queue and if there's no
01:30 - guests waiting then the queue needs to
01:33 - notify the building one one finally
01:35 - shows up okay so let's go into our code
01:37 - and start off by making the queue
01:38 - position so here on my game handler I
01:40 - have my start function being executed on
01:43 - start and in here I'm going to create a
01:45 - list of vector3 and populated with five
01:48 - positions so here first let's set up my
01:51 - first position in the queue which in the
01:54 - scene I have here for testing is located
01:57 - at 742 a so this is the first position
01:59 - for my queue so let's put all the other
02:01 - positions to the left of this one so
02:03 - let's go make a basic int 0 less than 5
02:08 - I plus 1 and I'm going to need a list
02:11 - for my vector 3 which is the waiting
02:14 - queue
02:14 - position is so in here let's go into my
02:20 - list and add a position the position
02:23 - will be based on the first position and
02:25 - then we want to go to the left so plus a
02:28 - new vector3 with the XF minus one the Y
02:31 - at zero and we're going to multiply this
02:34 - by a position size hello position size
02:39 - equals let's say 8 f / position okay so
02:43 - we should have this list of vector
02:45 - threes which won't contain five
02:46 - positions starting at the first position
02:48 - and moving to the left okay so now that
02:50 - I have my waiting position list I'm
02:52 - going to go into my waiting queue and
02:54 - set up a constructor that will receive
02:57 - our list of positions so public am
03:01 - waiting queue and here i'm going to
03:03 - receive a list of vector threes for my
03:06 - position meliss okay so we now have our
03:12 - internal position list let us also
03:15 - calculate the entrance position which
03:17 - won't be where the guest goes in order
03:19 - to enter the queue so make another
03:20 - member variable a vector 3 which is the
03:23 - entrance position in order to calculate
03:26 - that entrance position we're going to
03:29 - make it based on the last position
03:32 - position list position lists are count -
03:35 - 1 & 4 now let us just move our entrance
03:38 - position to the left of the last
03:40 - position so close new vector3 of minus 8
03:43 - and 0
03:44 - later on we want to calculate the
03:47 - entrance position based on the direction
03:49 - of the last two positions but for now
03:51 - this should work okay so to make sure
03:53 - that our positions are being correctly
03:55 - insensitive let's create some debug
03:57 - sprites so I'm going to go here using
04:00 - the code monkey dot utilities which is
04:02 - always you can grab for free from unity
04:04 - code monkey comm and I'm going to go in
04:07 - to create a new world sprite and I'm
04:11 - going to create it on every single
04:13 - position so for each vector 3 position
04:15 - in position lists I'm going to create a
04:18 - new world sprite on the position let's
04:21 - give it a local scale of 0.3 0.3 F and
04:25 - collard green
04:28 - so we should now be able to see some
04:30 - green sprites on the position of our cue
04:32 - and obviously we have to go back into
04:34 - our game ham over here and actually
04:35 - create our waiting to you with our
04:39 - waiting cue position listen and here
04:41 - when we're creating our positions we
04:43 - also need to multiply by our index
04:45 - otherwise it would all be on the first
04:47 - position and our waiting queue and let's
04:50 - create another sprite for our entrance
04:53 - position and give it a different color
04:56 - all right as you can see we have
04:58 - successfully created our positions this
05:00 - is the first one second third fourth
05:02 - fifth and finally our entrance position
05:04 - so the guests won't go into this
05:05 - position before being relocated into its
05:07 - own specific position so let's now deal
05:10 - with adding guests to our cue so in here
05:13 - on my waiting queue I'm going to need a
05:15 - list to hold all of our guests so let's
05:18 - make a private list of my guests and
05:24 - college guest list now the index
05:28 - positions in this list won't match the
05:29 - indexes in this list so the guests at
05:31 - index 0 will match the position at the
05:34 - next 0 let's instantiate it in here and
05:37 - first let's make a function to test if
05:39 - we can add a new guest so I'm going to
05:41 - go a public ball can yes and it's simply
05:47 - going to return if our guest list dot
05:50 - count if it is less than the position
05:52 - list dot count so if we have less guests
05:55 - and positions then we can add another
05:56 - one now let's make a public void add
05:59 - guests which will receive a guest object
06:03 - so this is the function that won't be
06:05 - called when the guests once enter the
06:07 - queue so let's send to the entrance
06:09 - position first we're going to send our
06:11 - guests to move to our entrance position
06:15 - and we're also going to add them to our
06:18 - guest list now my move function here
06:23 - takes a position and the action which
06:25 - will be triggered when you rise at set
06:26 - position so let's set up that action so
06:30 - when the guest arrives at the entrance
06:33 - position I'm going to want to
06:36 - towards his own position on the queue so
06:38 - it won't be the position list of the
06:41 - same indexes where he is so of the same
06:43 - index as the guest list that index of
06:46 - this guest so right now when we add a
06:49 - guest we add them to the list we move
06:51 - into the entrance position when you rise
06:53 - at the entrance position this function
06:55 - gets called and this function won't send
06:57 - him to his own position on the list okay
07:00 - so here I am back in my game you can
07:01 - still see the positions of my waiting
07:03 - queue and I have a button here to add a
07:05 - guest to my queue and when I press it
07:07 - one of these guests won't be chosen at
07:09 - random and he won't move towards the
07:11 - entrance position and then towards his
07:13 - own position so let's click it and let's
07:17 - wait for someone to show up and there he
07:20 - is he's moving to the entrance position
07:22 - and then he goes to his own position
07:24 - here's another one he goes to the
07:26 - entrance and into his position yep as
07:29 - you can see everything is working
07:31 - exactly as we want to take out to the
07:33 - entrance position then to their own
07:34 - position now for our next step we want
07:38 - the building that the queue is connected
07:40 - to to be able to request guests from our
07:42 - Q and the Q should be able to send the
07:45 - guests that is in front so in here I'm
07:47 - going to create a public function which
07:49 - will return a guest object and call it
07:53 - get first in queue so in here we only
07:59 - want to return if there is actually
08:01 - someone waiting in the first position
08:04 - so if guest list dot count equal zero so
08:09 - there are no guests waiting here then
08:11 - we're going to return no if not then we
08:17 - do have guests waiting in our queue and
08:18 - we want to return the one that is on the
08:21 - guest list
08:21 - of zero however before we return him we
08:27 - have to remove him from the queue since
08:28 - he is no longer going to be waiting in
08:30 - our queue so going to store a reference
08:33 - to my guest which won't be the one that
08:36 - is on position
08:38 - going to remove him from the list and
08:41 - finally return okay so now we have a
08:44 - function that our building can call to
08:46 - request the first yes in our queue so in
08:49 - order to test let's go into our game
08:50 - hammer year to create another CM debug
08:53 - button on the UI going to place it on
08:58 - the right side of that button and to say
09:01 - get guest and the action that it will
09:05 - perform will go into our waiting queue
09:07 - and get the first guest in our queue if
09:11 - our guest is not known so if we have
09:13 - grabbed against then let's just move
09:16 - them to a position on the right side so
09:17 - go guess that move to our first position
09:22 - was new vector3 let's say 500 0 just
09:27 - move them away okay so we should now see
09:29 - a button pop up when we click that
09:31 - button we request the first guest that
09:34 - is waiting in the waiting queue if he
09:36 - does return if there is someone waiting
09:38 - in there we're going to move him to a
09:40 - position on the right side ok Here I am
09:43 - let's request a guest wait for him to
09:46 - arrive ok there he is and now let me
09:50 - click guest and there you go he grabbed
09:52 - the first guest from the queue and sent
09:54 - him away let's grab a couple more okay I
09:58 - have two guests waiting in my key let's
10:00 - grab the first one boom there he goes
10:01 - and now if I click I can silver up the
10:05 - second on but as you can see we have an
10:06 - issue here this guest did not move
10:08 - forward so I can grab him it works ok
10:11 - but he needs to reposition when someone
10:13 - is removed from the queue so in my
10:15 - waiting queue here let's make a private
10:17 - void and call it relocate all guests and
10:23 - I'm here I want to send every single
10:25 - guest to his own position so for in
10:28 - equals 0 and less than guest list count
10:31 - and I'm going to go out with the guest
10:33 - in that index and I'm going to move them
10:37 - towards the position list of the same
10:41 - index and in here when I grab the first
10:44 - guest from the queue let's relocate all
10:47 - others now let's go take a look at it ok
10:51 - Here I am let's have some guests okay so
10:56 - I have my guests in my queue let's crowd
10:58 - the first one and see if the others get
10:59 - repositioned there he goes boom that one
11:02 - goes away and the others move forward
11:03 - and there he goes and the others move
11:05 - forward and there you have it a very
11:09 - simple waiting queue where we can add
11:11 - guests to the queue and grab the one
11:13 - waiting in front in the next video we're
11:15 - going to create a test building to
11:17 - request guests and have them perform an
11:19 - action as always you can download the
11:22 - project files and utilities from unity
11:23 - code monkey comm if you have any
11:26 - questions post them in the comments and
11:27 - I'll do my best to answer them
11:28 - alright see you next time
11:42 - you