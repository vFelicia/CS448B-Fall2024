00:00 - in this video we're going to make a very
00:02 - nice field of view affect the view cone
00:04 - won't start from the player and point
00:06 - towards the mouse while hitting any
00:07 - objects it finds everything outside the
00:09 - view cone is hidden let's begin
00:14 - [Music]
00:18 - hello and welcome I'm your code monkey
00:21 - and this channel is all about helping
00:22 - you learn how to make your own games
00:24 - with in-depth tutorials made by a
00:26 - professional indie game developer so if
00:27 - you find the video helpful consider
00:29 - subscribing ok so this is what we want
00:31 - to create over here I'm controlling my
00:33 - player moving around and as you can see
00:35 - a very nice view cone pointing towards
00:37 - the mouse position you can see it
00:40 - interact with the object so there's a
00:41 - wall there and I cannot see behind that
00:43 - wall and I can right click in order to
00:46 - make it see further or short as you can
00:48 - see it modifies both the view distance
00:50 - and also the field of view over here you
00:53 - can see a bunch of enemies and as you
00:55 - see they are only visible when inside
00:57 - the field of view so if a wall is
00:59 - blocking them I cannot see them using
01:02 - this with a completely black outside mix
01:04 - for a very interesting effect so as you
01:08 - can see how this would be very useful
01:10 - for any kind of stealth or horror or
01:12 - strategy game you can see this effect in
01:15 - action in my very first Unity game
01:17 - survivor squad the whole idea behind
01:18 - that game and its sequel was to control
01:21 - a team of survivors and very carefully
01:23 - manage where each was pointing in order
01:25 - to make sure that your survivors cover
01:26 - all the corners so the field of view was
01:29 - a crucial mechanic and I still don't
01:31 - like those games because of it the game
01:33 - is included in the game bundle so go
01:35 - pick it up and play it to see how you
01:37 - can apply this effect to your own games
01:39 - also this particular effect can be used
01:42 - to showcase enemy view cones like in a
01:43 - game like commandos or Desperados and
01:45 - that's exactly what we're going to be
01:47 - doing in the next video so stay tuned
01:49 - for that but in here let's are all very
01:51 - simple and make this nice film the view
01:53 - effect that works as masks and interacts
01:56 - with walls and enemies alright so this
01:58 - is our goal let's get to it
02:00 - ok so here is our starting scene I'm
02:03 - controlling the player character with
02:05 - the keyboard and I can use the mouse in
02:06 - order to aim and shoot there are also
02:09 - enemies I can spawn and shoot and kill
02:12 - them just like that ok now we're going
02:15 - to do a whole bunch of ray casts and
02:17 - generate a mesh based on where those Ray
02:19 - casts hit so let's begin by making our
02:22 - field of view script over here in our
02:24 - project files make a new c-sharp script
02:26 - let's call it our field of
02:29 - now let's make a film the viewed game
02:31 - object and drag the script onto it
02:35 - alright so known here and let's first
02:37 - spawn a very simple mesh if you want an
02:43 - in-depth video on how to make a custom
02:45 - mesh through code check the video linked
02:47 - in the description that video covers
02:49 - everything you need to know about how
02:51 - much is setup so here I will assume you
02:53 - know the basics so let's start off by
02:55 - creating our local arrays okay that's
03:14 - the basic code again if you're not
03:16 - familiar with meshes go check out your
03:17 - video where you won't understand what
03:19 - all these arrays do now in order to
03:21 - display our mesh we need to go into our
03:23 - game object and then here we also need
03:25 - to add a mesh filter to hold our mesh
03:27 - any mesh renderer to render our mesh
03:30 - okay so then here we just get the
03:32 - component of type mesh filter and set
03:35 - the mesh to our mesh all right that you
03:37 - do it
03:38 - let's see any of those are nice about
03:40 - triangle okay so far so good
03:42 - alright now let's try to make a triangle
03:44 - but using our fov values okay so I'm
03:47 - here and let's define a float for our fo
03:49 - mean so we're going to set our film the
03:52 - view to let's say 90 degrees then we
03:54 - need to define the number of rays we're
03:56 - going to do so an end for the array
03:58 - count and let's say we're only going to
04:00 - spawn to raise the more rays we have the
04:03 - more defined our field of view won't be
04:04 - however it's also expensive to do a lot
04:06 - of race so we need to manage this
04:08 - carefully for now - will do and then we
04:11 - need to saw or a current angle which
04:13 - we're going to increase in our cycle so
04:14 - it float for a current angle and then we
04:17 - need to calculate how much we're going
04:19 - to increase our angle for each cycle in
04:21 - our loop so float let's call it angle
04:23 - increase and it's essentially our field
04:26 - of view divided by our number of bricks
04:28 - okay now we also need a view distance so
04:32 - it flows for the view distance and
04:34 - that's pretty much all the values we
04:36 - need so now that we have our values
04:37 - let's set up our arrays now in here for
04:41 - our
04:42 - since we're essentially going to start
04:43 - the origin so that's one vertex then
04:46 - we're going to have to raise so that's
04:47 - two more and our recount will not be
04:50 - including the zero gray so we're going
04:53 - to have the Ray count was one for the
04:55 - origin and plus one for the right zero
04:57 - so in this case with two rays going for
05:00 - a field of view of 90 degrees we're
05:02 - going to have one ray firing at zero
05:04 - angles then one at forty five and one at
05:06 - ninety so that essentially makes three
05:09 - vertices plus one on the origin all
05:11 - right now for the UV we're going to use
05:13 - the exact same thing so we can use
05:14 - vertices darling okay and now for the
05:17 - triangles we're essentially going to
05:19 - have as many triangles as we have rays
05:22 - however for each polygon triangle we
05:24 - have three values in here so we do
05:26 - recount
05:27 - multiply it by three all right this is
05:29 - the size of our race now in here let's
05:32 - first set our origin so the vertices on
05:35 - index zero is going to be our origin so
05:38 - let's actually also go up here and
05:40 - define a vector three for our origin and
05:43 - let's start off at factor 3.0 okay so
05:48 - there's our origin now let's make a nice
05:50 - 4 we're going to cycle through on our
05:56 - race and now in here let's place our
05:58 - vertex in the correct position so we'll
06:01 - find a vector three for our vertex and
06:04 - essentially we're going to place it on
06:06 - the origin and then we want to move it
06:08 - towards our current angle so for that
06:11 - I'm going to use a function from the you
06:13 - Tony
06:20 - as always you can download the utilities
06:22 - for free from in Tacoma comm and here in
06:25 - the utilities there is this nice
06:26 - function which converts an angle into a
06:28 - vector3 so if you want you can just
06:31 - write this yourself in your script so in
06:34 - here we call that function we pass in
06:36 - the current angle and we multiply the
06:38 - real distance all right so that's the
06:41 - correct location for this particular
06:43 - vertex now we need to place it on our
06:45 - vertices array so that means we also
06:47 - need to know the index so in here let's
06:50 - define an end for the vertex index and
06:53 - we're going to start on the next one
06:55 - since index 0 won't be the origin so
06:58 - here we set the vertices on that index
07:01 - to be this vertex ok that's our vertex
07:06 - position then we need to increase our
07:09 - angle by our angle increase so that it
07:11 - increases for the next second however
07:14 - here actually when you increase an angle
07:16 - in unity you are going counterclockwise
07:18 - when in reality here we want to go
07:21 - clockwise so instead of increasing let's
07:23 - decrease clockwise or counterclockwise
07:26 - is very important in order to make our
07:28 - triangles which is what we're going to
07:29 - do right now so here we need to set up
07:32 - the current triangles so we also need an
07:34 - int for the triangle index in this case
07:39 - we start off at 0 and then here we're
07:42 - going to set the triangles on our
07:44 - triangle index and first we set on the
07:47 - triangle index both zeros on the actual
07:49 - index we're going to start off every
07:52 - triangle on the origin so we start off
07:54 - on vertex 0 then for the triangles 1 and
07:59 - 2 the one won't go to the previous one
08:02 - so our vertex index minus one and the
08:06 - two won't connect to this one vertex
08:07 - index
08:08 - yep exam one like that ok so this might
08:12 - seem confusing but it all makes sense
08:13 - when you see it in action and here after
08:16 - we set all of our triangles we need to
08:18 - make sure to increase our triangle index
08:19 - and in this case we increase it by 3 so
08:23 - here every triangle won't be from the
08:25 - origin to the previous vertex to the
08:27 - current vertex and that makes a polygon
08:29 - try
08:29 - however in here since we were connecting
08:31 - to the previous one you can already
08:33 - guess that we
08:33 - have an issue here and the issue is this
08:36 - will cause an error if run on the first
08:38 - rate since the first rate doesn't have a
08:40 - previous vertex to connect me to so
08:41 - we're going to make sure that we only
08:43 - run this if the eye is bigger than zero
08:46 - and then we also need to increase our
08:49 - vertex index all right that you do it
08:53 - over here we have all of our films that
08:56 - make this extremely easy to modify so we
08:59 - can modify the field of view the origin
09:00 - how many ways we have our starting angle
09:03 - and the view distance over here we set
09:06 - up our vertices u these n triangles we
09:08 - sight on through all of our race we
09:10 - locate them on the correct position we
09:12 - generate the triangles and we move on to
09:15 - the next thing on for the next segment
09:16 - once everything is done we simply upload
09:18 - it to the mesh all right what's this and
09:20 - we should be able to see exactly two
09:22 - triangles that put together make up a
09:24 - 90-degree angle let's see and if there
09:27 - it is and exactly as intend to race was
09:30 - the origin right so here is ray zero
09:32 - then ray one and ray tube and if we
09:35 - pause we can actually look at the
09:36 - wireframe so here we are in the scene
09:39 - view go all the way up here select
09:40 - wireframe and there it is you can see
09:42 - exactly how the field of view is being
09:44 - generated so we're here is our origin
09:46 - this is vertex zero vertex one vertex to
09:48 - then the first triangle connects this
09:50 - one to this one to this one so makes a
09:52 - triangle and the second one connects
09:54 - this one this one this one makes another
09:55 - triumph all right awesome
09:57 - so right now this looks more like a
09:59 - triangle red than the field of view so
10:01 - let's increase the rate count to smooth
10:03 - out the rotation here so in here on
10:05 - let's go into our recount and instead of
10:06 - just two rays and let's try to have
10:08 - fifty okay let's see and if there it is
10:12 - our field of view mesh is now on what
10:13 - more detailed so you can now see very
10:15 - nice round and if we stop and look at
10:18 - the wireframe and there it is you can
10:20 - see exactly how each triangle is set up
10:22 - in order to make our overall shape right
10:24 - awesome okay so here we have our very
10:27 - simple base now as you can see if we run
10:30 - the game you can see a pretty obvious
10:32 - issue which is the feel of you is not
10:33 - colliding with the wall here so let's
10:35 - add object interaction and also in order
10:37 - to see I decide a material to make it
10:39 - half transparent so we could clearly see
10:40 - that over here our field of view is
10:42 - going past our object okay let's deal
10:43 - with that so back in our code here
10:46 - over here we are simply placing the
10:48 - vertex exactly on the position however
10:51 - instead of doing that we want to do a
10:53 - recap so we're going to do a physics TD
10:57 - and call raycast
10:59 - now we're going to recast from an origin
11:02 - so it's this origin then towards a
11:05 - direction so it's this direction and
11:09 - then towards a certain distance which is
11:10 - our view distance okay so this whole
11:13 - thing returns a raycast hit Q D and
11:18 - using that we can test it the brake acid
11:20 - TD if the collider is known if the
11:28 - collider is known that we did not hit
11:29 - anything so we can run this code in here
11:34 - so if we don't hit anything we set the
11:37 - vertex to exactly where it was on the
11:38 - maximum distance however if we did hit
11:41 - something let's place it exactly on the
11:44 - point where it was hit and for that the
11:48 - rake asset actually contains the exact
11:50 - point so Rick I said point and that's
11:52 - our vertex all right it's that simple
11:54 - and this should be working
11:56 - let's test any of there it is you can
11:58 - now see that it is colliding with that
12:00 - object so if we pause and look at it yep
12:02 - there's our nice shape it goes through
12:04 - there and then hits that one so it cuts
12:06 - off and then it goes past okay awesome
12:08 - now in here instead of creating our
12:10 - field of view just on certain let's do
12:12 - it on update so it constantly refresh it
12:14 - so over here on start and let's simply
12:17 - set up our mesh and set the mesh down
12:19 - there okay and then we make a front boy
12:21 - update okay so there it is very simple
12:27 - on start we create the mesh we set it on
12:29 - the mesh filter and then on update on
12:31 - every update we are constantly doing our
12:33 - race so now with the game running I can
12:35 - now go into the scene I can move it and
12:37 - there you go you can see how the field
12:38 - of view is changing however here if we
12:41 - spawn an enemy you can see a big issue
12:43 - that we have which is the enemy goes in
12:45 - and there you go the enemy is now
12:46 - blocking our field of view the reason is
12:49 - because our recasts are colliding with
12:50 - everything so it's kinda lighting with
12:52 - the objects but also with our enemies so
12:55 - we want to make sure we only collide
12:57 - with certain objects so for that we're
12:59 - going
13:00 - to use a layer mask if you want to know
13:02 - more about layers layer masks and bit
13:04 - masks
13:04 - check the video linked in the
13:05 - description here we're just going to use
13:08 - it and select only the objects layer so
13:11 - here I make a zero ice field or a and
13:14 - layer mask and then down here on our
13:18 - raycast simply use this layer mask just
13:22 - like that and I can go back into the
13:25 - editor and here on the field of view you
13:27 - can see the layer mask in here it's very
13:29 - nice and we can simply solve it so in
13:31 - this case I want the wrong which are on
13:33 - the objects layer so select it and now
13:35 - let's test and there you go the field of
13:38 - view is now still hitting the wall but
13:39 - it's going past the enemy so here I can
13:42 - move the enemy around on top of the
13:43 - field of view and it normally combines
13:45 - with all right awesome now so far we've
13:48 - been testing our field of view being
13:49 - commonly static in that position in
13:51 - order to keep things simple but
13:52 - obviously the field of view is meant to
13:54 - be attached to the player and looking at
13:56 - the mouse position so let's do that now
13:58 - for that let's go here into our film the
14:00 - view script now we're going to make two
14:02 - functions so then here we'll make a
14:05 - public void let's make one to set the
14:07 - origin and want to set the aim direction
14:14 - okay so here for the origin it's very
14:16 - simple we simply set it and then down
14:18 - here we use it as we were doing
14:20 - previously and down here for the set M
14:23 - direction with the given indirection we
14:26 - need to calculate our starting angle so
14:28 - we calculate our starting angle to be
14:31 - our aim direction so we need to convert
14:33 - the vector three into an angle so again
14:35 - there's a nice comfort function on the U
14:37 - Tony's here it is if you want to make
14:39 - yourself it just takes a vector three
14:41 - and returns a float for our Euler angles
14:44 - so we take that have to be passed in the
14:46 - aim direction and if we do this the
14:48 - starting angle won't be exactly on the
14:51 - aim direction whereas we want it to be
14:53 - on the middle so we simply subtract our
14:55 - current FOV divided by two F so let's
15:01 - also put the fov all the way up here
15:07 - all right so that's it here we set the
15:09 - starting angle then over here on our
15:11 - update we use it okay so these are our
15:13 - two functions now we need to calm them
15:15 - so let's go into our play files here is
15:18 - the player class now how this is
15:20 - implemented is irrelevant for the field
15:22 - of view all we care about is to use the
15:24 - player position and the aim direction so
15:27 - in order to call that on the field of
15:28 - view we're going to add a serialize
15:29 - field in here for our field of view
15:35 - script and then here is the update code
15:40 - so here we have our aim direction so
15:44 - it's in here that I'm going to call the
15:45 - fill the view set the in direction to
15:47 - this aim direction and then also going
15:51 - to the field of view and call set origin
15:53 - and passing the transform dot position
15:56 - all right so that's it again the other
15:59 - implementation doesn't matter all we
16:01 - need to do is call these two functions
16:02 - and since we're doing the Sun update
16:04 - let's go here into our field of view and
16:07 - set running this on update let's do it
16:09 - on lake update
16:10 - so first the player sets the origin sets
16:13 - the angle and then on the only update
16:15 - this one generates the mesh so finally
16:17 - we just need to drag the field of view
16:19 - reference like that okay let's test any
16:22 - of there it is you can already see the
16:23 - field of view following the player and
16:25 - looking at where the player is aiming
16:27 - and everything is still working so if I
16:29 - go to arts this yep there you go as you
16:31 - can see it is interacting with the
16:33 - object and that one right there and down
16:35 - here on these ones and yep it's working
16:37 - all perfectly correctly and it doesn't
16:39 - hit the enemy all right awesome
16:41 - now our code is set up in a very nice
16:44 - way to easily modify the various fov
16:46 - parameters so let's play around these
16:48 - values over here let's try putting the
16:51 - fov just at 40 and let's increase the
16:53 - view distance to let's say 80 any of
16:56 - their it is our field of view is now
16:57 - much tighter and it goes for much
16:59 - further so you can see just how easy it
17:02 - is to play around with these bumps so
17:04 - let's make it so that the player can
17:06 - easily swap between various f of ease so
17:09 - for that we just need to also add
17:10 - functions in here in order to be able to
17:12 - set both of these both the fov and the
17:14 - view distance
17:19 - all right there it is very simple we
17:22 - just have two more public functions okay
17:36 - so here it is very simple adding some
17:38 - button press on the right mouse button
17:39 - in order to toggle a shortened one let's
17:43 - see okay here we are and yep I start
17:45 - with a normal field of view now I
17:47 - right-click any of there it is the field
17:49 - of view is now much tighter but also
17:50 - longer so click again back to this one
17:53 - click and back to this one so this is
17:55 - kind of simulating as if you were aiming
17:56 - down sights so like this you can see
17:58 - further and like this you can see wider
18:00 - here is the code extremely simple when
18:02 - we click on the right mouse button
18:04 - simply flip a boolean and we set the fov
18:07 - and the view distance so you can see how
18:08 - easy this class is to use and here it is
18:11 - again swapping between both things right
18:15 - awesome okay so now all that's left is
18:18 - to apply our visibility effect we want
18:21 - the enemy to only be visible when inside
18:24 - the field of view and invisible outside
18:25 - of it in order to achieve that effect
18:27 - I'm going to use the scriptable render
18:29 - pipeline so we're here I have a
18:32 - lightweight render pipeline asset and as
18:34 - you can see it has a custom for a render
18:36 - data so we can see that and here we have
18:39 - three render features so the default
18:41 - layer mask won't render everything
18:43 - except the things on the layer mask the
18:44 - behind the mask and the black layer so
18:47 - let's see how those are used over here
18:49 - you can see the walls are on the objects
18:51 - as you saw with the raycast
18:52 - and over here the enemy prefab is on the
18:54 - behind mask layer and our field of view
18:58 - let's put it on the mask layer over here
19:01 - I'm using a custom material that doesn't
19:02 - really do anything it's just so I can
19:04 - easily modify the Alpha so here back in
19:07 - our renderer again the default layer
19:08 - mask is printing everything except the
19:10 - mask behind the mask in the black layer
19:11 - and here on the mask and on the behind
19:14 - mask here you can see on we're doing is
19:16 - messing around with the stencil so first
19:19 - the mask renders to the stencil buffer
19:20 - and we write with a certain value always
19:23 - and then on the behind the mask we're
19:26 - only going to render where this previous
19:27 - value was written so if we run the
19:30 - we can see okay here it is I'm putting
19:32 - your Porter's and the enemy down there
19:33 - is not visible and if I go there yep
19:35 - there you go the enemy's being visible
19:37 - right so everything is working exactly
19:39 - as he must so we create our mesh and the
19:41 - mesh works as a mask and if inside the
19:43 - mask the enemy is visible if outside
19:45 - he's invisible and now instead of having
19:47 - the worm like this as you saw there was
19:49 - another black layer let's see that one
19:51 - down is in here on the main camera I
19:53 - simply have a game object occupying the
19:55 - entire camera and this one is on the
19:57 - black layer and back on the custom
20:00 - forward render data you can see the
20:02 - black in there
20:02 - this one essentially does the opposite
20:04 - of the behind the mask so it only
20:06 - renders this one where the mask is not
20:08 - visible so if we run this
20:11 - there you go everything is black except
20:13 - on the field of view and again let's get
20:15 - rid of the Alpha on our field of view
20:17 - mesh so here it is with zero alpha you
20:20 - can now see our actual film the view
20:22 - effect so again I right-click and I can
20:24 - change the shape and there you go just
20:26 - like that everything looks nice and the
20:28 - enemy is right there but he's hidden and
20:29 - now I go and yep I can see him now
20:31 - alright awesome now the player like this
20:34 - looks a bit weird so let's make sure
20:36 - that he's always visible so for that I
20:38 - can simply go over here into the
20:40 - character and simply spawn let's say a
20:42 - sphere there it is with a sphere make
20:45 - sure that it's on the mask layer and if
20:48 - there's this fear as you can see it cuts
20:49 - a hole on the black sprite and if there
20:53 - it is so now I can see the player and I
20:55 - can see all the enemies only one inside
20:56 - the field of view and now with the
20:58 - entire wall black you can see that this
21:00 - looks very interesting so just like this
21:03 - he can imagine some sort of stealth or
21:05 - horror game and now with the enemies
21:08 - being spawned I can go around constantly
21:10 - looking there's one there no yep there's
21:13 - another one there and another one and
21:15 - yet there's one there right there hiding
21:17 - behind the box and yep there you go now
21:20 - here we have one final issue to take
21:22 - care of there is our field of view is
21:23 - working nice nice nice go down and yep
21:26 - there you go now it's invisible the
21:28 - reason for that is our render bounced
21:30 - essentially our field of view is trying
21:32 - to render a triangle in here but the
21:33 - origin of the film of view game object
21:35 - is all the way up there so once it goes
21:37 - past a certain area as you can see it
21:40 - goes to here and it's stopped doing
21:42 - visible so let's Amba
21:43 - all we need to do is down here when we
21:45 - assign the mesh we go into the mesh and
21:47 - set the bounds here just see very large
21:54 - bounds won't do enough so let's try okay
21:58 - so here we're on what's going way down
21:59 - here and see if the film TV disappears
22:01 - and it doesn't so now we can play around
22:03 - for the entirety of our map and there
22:06 - you go now I put the outside mask in a
22:08 - pure black and you can see that right
22:10 - now we have a very nice very interesting
22:13 - like a stealth or horror game effect
22:14 - there is all those enemies are being
22:17 - spawned and I shoot them and they are
22:19 - invisible if they are outside of my
22:21 - field of view so here we have our final
22:25 - film the view effect it is easily
22:27 - customizable so we can modify all the
22:30 - parameters like the feel the view number
22:31 - of rays view distance and so on so here
22:34 - for example by clicking you can see me
22:36 - swap between a field of view that is
22:38 - wider but a short distance or a tighter
22:41 - field of view but those for a long
22:42 - distance so this is simulating a very
22:45 - nice aim-down-sights effect if you want
22:48 - to see this effect used in a complete
22:49 - game then check out my survive squad
22:51 - games including the game bundle those
22:54 - games are all about controlling your
22:55 - survivors and managing each field of
22:57 - view to make sure you cover all corners
22:58 - personally I really enjoy it and several
23:01 - scored gauntlets is definitely one of my
23:03 - favorite games so go play it to see how
23:05 - you can apply this effect to your own
23:07 - games also this particular effect can be
23:10 - used to showcase enemy view cones like
23:12 - in a game like commandos or Desperados
23:14 - and that's exactly what we're going to
23:16 - do in the next video so stay tuned for
23:18 - that as always you can download the
23:20 - project files in utilities from unity
23:22 - code marcom subscribe the channel for
23:24 - more unity tutorials who's any questions
23:26 - you have in the comments and I'll see
23:27 - you next time
23:31 - [Music]