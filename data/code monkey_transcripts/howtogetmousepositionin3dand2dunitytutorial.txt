00:00 - hello and welcome i'm your code monkey
00:02 - in this quick video we're going to learn
00:03 - how to get the miles on position in both
00:05 - 2d and 3d
00:06 - this is really simple but they require
00:08 - different methods i receive a lot of
00:09 - comments from people asking why their
00:11 - code doesn't work
00:12 - and a lot of the times the issues that
00:13 - they're using the 2d method
00:15 - in a 3d game which really does not work
00:17 - so first let's see the 2d version which
00:19 - is super simple
00:20 - over here i have my demo scene all i
00:22 - have is this sprite and i want it to
00:24 - found the mouse
00:25 - the main camera over here is set up in
00:27 - 2d so the projection is orthographic
00:29 - it is placed on 0 0 and -10 on the zen
00:32 - so the center of the screen is on zero
00:34 - zero
00:34 - and over here on the size it's got an
00:36 - orthographic size of ten
00:38 - meaning that down here is on zero zero
00:40 - up here is on zero plus ten
00:41 - and down here on zero 0-10 okay so let's
00:44 - begin by making our script
00:46 - name this the mouse position 2d and here
00:49 - i'm going to attach it to my mouse
00:51 - target object okay
00:52 - so here let's do things step by step so
00:55 - let's make a simple update
00:57 - and on our update let's just do a
00:59 - debug.log
01:00 - on the mouse position and we're going to
01:02 - grab it through the input
01:04 - and grab the mouse position so let's see
01:06 - what this one returns
01:08 - and here with the game running we can
01:09 - see what's happening so you can see that
01:11 - it does not return the milestone
01:12 - position
01:13 - so down the center we do not get a zero
01:15 - zero instead if i go over here to the
01:17 - lower left corner
01:18 - that's where i get the zero zero and if
01:20 - i go on to the upper right corner
01:22 - it's at this value which is the width
01:24 - and height of this game window
01:26 - so if you look into the stats the game
01:28 - window has this screen size
01:30 - 1044 by 587 and if i put it right down
01:33 - the corner yep it's exactly that one
01:35 - so what we get from here is the screen
01:36 - position now we need to convert that
01:38 - screen position into a world position
01:40 - in order to do that we're going to need
01:42 - a reference to our camera so let's add
01:44 - it up here
01:44 - make it a serialized field so we can set
01:46 - it in the editor of the camera
01:48 - let's call it the main camera and here
01:50 - in the editor we see the film let's just
01:52 - drag the main camera all right so we
01:54 - have our camera reference
01:55 - now alternatively if you only use one
01:57 - camera you can directly use
01:58 - camera.main if you only have one camera
02:01 - then using this is perfectly fine i'm
02:03 - only using this method just so it's more
02:04 - adaptable so you can use it with any
02:06 - camera you want
02:07 - okay so with this we have our camera and
02:09 - now we can go into the camera and use
02:11 - the function
02:12 - screen to world point this one
02:15 - transforms a point from screen space
02:16 - into world space
02:17 - so in here we input input.mouseposition
02:20 - which as we saw was in screen space
02:23 - so if we now do a debug.log on this one
02:25 - and get rid of this one
02:28 - so if we do this let's see what it
02:29 - returns and yep now it does seem correct
02:31 - so if we put right down the center we do
02:33 - see a00
02:34 - and up here we do see a zero plus 10 and
02:37 - down here a0 minus 10.
02:38 - now we also do see a slight issue on the
02:41 - zen
02:41 - so essentially the z that it's returning
02:43 - is the same set as on the main camera so
02:45 - here the main camera is on z of -10
02:47 - whereas most of the world is probably
02:48 - going to be on a set of zero
02:50 - so here one simple thing is to make a
02:52 - vector three for the mouse world
02:53 - position
02:55 - and we grab it from this one then we
02:58 - take the mouse room position and set the
03:00 - z to zero
03:01 - and then let's just change this
03:02 - transform position to b
03:04 - and down so now it should follow the
03:06 - mouse and yep now everything is working
03:08 - perfectly so as i move the mouse the
03:10 - sprite is being placed
03:11 - exactly where it should be so i'm
03:12 - correctly getting the mouse wrong
03:14 - position in a 2d game
03:16 - so this is the method for doing it you
03:17 - take the main camera do a screen tour on
03:19 - point on the input mouse position
03:20 - and then if you want you zero out the z
03:22 - and then you have the mouse run position
03:24 - in a 2d game
03:25 - by the way if you find the video helpful
03:27 - please hit the like button it's a tiny
03:28 - thing but it really does help
03:30 - thanks alright so now on to the 3d
03:32 - method here is my demo 3d scene
03:34 - it's pretty much the same thing as
03:36 - before so i've got a main camera now
03:37 - it's set to perspective
03:39 - and then i've got a mouse target just
03:40 - with a nice visual and one extra thing
03:43 - is over here i've got a ground object
03:45 - and this one we can see in the scene
03:46 - view yep this is my ground object
03:49 - and the important thing is it does have
03:51 - a collider we're going to see why in a
03:52 - bit
03:53 - so now let's first actually try and see
03:54 - the error that so many people have
03:56 - so let's try using the 2d method in this
03:58 - scene and see what happens so on the
04:00 - mouse target if i just drag the mouse
04:01 - position 2d and drag the main camera
04:03 - reference let's see
04:04 - and yep the game is running but i am
04:06 - moving my mouse and there you go
04:08 - it does not change the position so this
04:10 - is the error that you see
04:11 - if you try to accumulate the miles wrong
04:12 - position using the 2d method on a 3d
04:15 - game
04:15 - this position that you're seeing here is
04:17 - actually the exact same thing as where
04:18 - the camera is
04:19 - so 9.1 13.1 15.6 yep exactly that
04:23 - so this is the mistake that many people
04:25 - make they use the 2d method on a 3d game
04:27 - which just returns the camera position
04:28 - the issue is that we cannot convert
04:30 - directly from a screen position into a
04:31 - world position in a 3d game
04:33 - if you think about it what you want is
04:35 - not a position based on the camera
04:36 - but rather the position in the world
04:38 - where the mouse is so what we need to do
04:40 - is essentially fire a laser from the
04:42 - camera
04:42 - pointing towards where the mouse is and
04:44 - then seeing where that position lets
04:46 - so that's exactly what we're going to do
04:48 - let's make a new sharp script
04:50 - let's name it our mouse position 3d
04:53 - and here on mouse target let's get rid
04:55 - of the 2d version and attach the 3d okay
04:58 - now here again first we're going to need
04:59 - a reference to our camera
05:01 - so let's do the exact same thing
05:05 - so reference to the camera now we set it
05:07 - here just drag it
05:08 - and now we do a predroid update and on
05:11 - the update
05:12 - we're still going to use the
05:14 - input.mouseposition
05:15 - except again as we saw this is a screen
05:17 - position so then we can use the function
05:20 - on the camera so main camera
05:22 - and now the function that we're going to
05:23 - use is the screen point to ring
05:26 - and we use our input mouse position as
05:28 - our parameter
05:29 - so this will return a ray from the
05:31 - camera towards where the mouse position
05:32 - is pointing
05:33 - so we grab this ray and then all we need
05:37 - to do is just cast it
05:43 - so we do a physics now raycast we pass
05:45 - in our ray and we've got an output of
05:47 - raycast hit
05:48 - now this one returns true if it hits
05:50 - something so if so let's do a
05:51 - transform.position
05:53 - and we're going to go inside our raycast
05:55 - hit and we grab the point
05:57 - which is the actual point where the ray
05:58 - hit the call either
06:00 - okay so that's it let's see and yep
06:02 - right away we can see that it does work
06:04 - so wherever i place the mouse
06:06 - you can see the little circle gets
06:07 - placed alongside the plane
06:09 - all right awesome however there's one
06:12 - potential issue here
06:13 - so i'm going to drag a building onto the
06:14 - scene okay so i added this building
06:17 - and now if i put the mouse over yep
06:19 - there you go as you can see the mouse
06:21 - is indeed interacting with the building
06:23 - so instead of placing the mouse on the
06:25 - floor it's placing it on top of the
06:26 - building
06:27 - now maybe this is what you want for
06:28 - example if you want to do some shooting
06:30 - then this would be correct
06:32 - however let's say that you are making a
06:34 - city building game or an rts and what
06:36 - you want is for the position to be on
06:38 - the ground and not collide with other
06:39 - objects
06:40 - so to solve that we can use layers if we
06:43 - select the ground object and over here
06:45 - on the layer let's add a new layer
06:46 - let's name it the ground then select the
06:49 - ground put it on that layer okay so far
06:51 - so good
06:52 - and now in our 3d class here let's
06:54 - expose another field and this one will
06:56 - be a
06:57 - layer mask
07:02 - and now back in the editor if we look at
07:04 - our script yep we've got a layer mask
07:05 - and now we can select something so for
07:07 - example let's select
07:08 - just the ground so back in the code here
07:10 - when we have our recast we can use the
07:11 - version that also takes in a layer mask
07:14 - there you go there's this one which
07:15 - takes a ray a rake has hit a float for
07:18 - the max distance and then the layer mask
07:20 - so if we wanted to go forever we can
07:21 - just use float max value
07:23 - and then for the layer mask we pass in
07:25 - our layer mask okay
07:26 - now let's see and right now it is
07:28 - correctly interacting with the floor
07:30 - and if i go towards the building if
07:31 - there you go now it goes through it
07:33 - and now it's interacting with the floor
07:35 - behind it so the mouse position is
07:36 - correctly ignoring the building and
07:38 - returns the position on the ground
07:39 - itself
07:40 - so this is perfect for any kind of city
07:42 - builder or rts where you want to ignore
07:44 - the actual physical objects on the scene
07:46 - alright so there it is this is how you
07:47 - get the mouse position in 3d
07:49 - you do a raycast from the camera towards
07:51 - the mouse and see where it hits
07:53 - so now you can refactor this code to
07:55 - make it super easy to use
07:57 - for example on the 2d version usually
07:59 - when i make a new project i always reuse
08:01 - my general utilities
08:02 - you can download them for free from
08:04 - mintycodemuck.com and in this class i
08:06 - have a very simple function to get the
08:08 - mouse around position and does exactly
08:09 - that
08:10 - goes into the world camera which by
08:12 - default uses the camera main
08:14 - and does the screen to run point on the
08:15 - input mouse position then i just got
08:17 - various versions in order to get it with
08:19 - the z or without the z
08:21 - these are set as static so i can call
08:22 - these functions from anywhere in my code
08:24 - very useful and for the 3d version i
08:27 - reuse this class
08:28 - it also has a static instance so that i
08:30 - can call it from anywhere
08:32 - and the function is exactly what we saw
08:34 - so it goes into the camera main the
08:35 - screen point array on the mouse position
08:37 - and just returns that point so for
08:39 - example if i want to add it to a new
08:40 - project i just make a new empty game
08:42 - object name it my mouse 3d
08:44 - then i add that script
08:47 - here on the script it has a mouse
08:48 - collider for the layer mask so in this
08:50 - case i would put it on the ground
08:51 - so just like that in 10 seconds i had
08:53 - the ability to get the mouse position in
08:54 - a 3d game and now anywhere in my code i
08:57 - can simply call upon this function
08:59 - and get the mouse world 3d position
09:01 - alright so there you have it that's how
09:02 - you get the mouse world position in both
09:04 - 3d
09:05 - and 2d they work differently so don't
09:07 - make the mistake of using the 2d method
09:09 - in a 3d game or vice versa
09:11 - do you prefer learning through a more
09:13 - guided path rather than separate
09:14 - tutorials
09:15 - then check out my complete step-by-step
09:17 - courses starting from scratch until the
09:18 - final polished games
09:19 - if you're into programming then get the
09:21 - awesome builder defender course
09:23 - learn how i make my own games using code
09:25 - build an awesome game that involves
09:26 - mechanics from city builders tower
09:28 - defense and survival games
09:30 - or if you're into visual scripting then
09:32 - you get the vs course which features not
09:34 - one but three complete games
09:36 - a simple platformer an action rpg and
09:38 - awesome fps
09:39 - in the visual scripting course all of
09:41 - this is built without a single line of
09:42 - code
09:43 - all games in both courses start commonly
09:45 - from scratch and go step by step until
09:47 - the final polished games
09:48 - all the unleashers have their project
09:50 - files available at every step of the way
09:52 - and i'm always active answering
09:53 - questions every single day in the q a
09:55 - section
09:56 - so if you're looking for a more guided
09:58 - path then check out the courses at
09:59 - unitycodemonkey.com
10:01 - courses alright hope that's useful check
10:03 - out these videos to learn some more
10:05 - thanks to these awesome patreon
10:06 - supporters for making these videos
10:08 - possible
10:09 - thank you for watching and i'll see you
10:10 - next time