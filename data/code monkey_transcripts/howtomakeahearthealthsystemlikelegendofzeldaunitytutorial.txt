00:00 - in this video we're going to create the
00:01 - hearts base health system like in the
00:03 - Legend of Zelda let's begin
00:08 - [Music]
00:12 - hello and welcome I'm your code monkey
00:14 - and this channel is all about helping
00:15 - you learn how to make your own games
00:17 - with in-depth tutorials made by a
00:19 - professional indie game developer so if
00:21 - you find the video how fun consider
00:22 - subscribing so this is what we want to
00:24 - create over here is my character it has
00:27 - some simple nice movement okay then here
00:30 - on the UI I have the hearts health
00:32 - system there are some spikes here to
00:34 - cause damage so if I move towards them
00:36 - clip there you go these trigger just one
00:38 - quadrant of damage and these trigger a
00:41 - full heart of damage as you can see each
00:43 - heart is separated into four fragments
00:46 - so ideal there there and there
00:48 - okay and down here I have a bunch of
00:51 - heals so this will all heal on one
00:53 - quadrant so if I hit it if there you go
00:56 - only one bit and this one a little bit
00:58 - these heal a full heart which includes
01:01 - four fragments so let's go and yep the
01:02 - whole thing and then here I have a mega
01:05 - heal which won't heal all of those and
01:07 - the hearts are also animated so every
01:09 - time a full heart is here we got a nice
01:12 - bubble animation so let's see and if
01:14 - their ego everything goes up and yep
01:15 - example like that alright so this is our
01:18 - goal let's get to it so let's start off
01:21 - by seeing how we're going to set up the
01:23 - visuals over here in the project files I
01:25 - have my textures folder and in here I
01:27 - have these hard textures the hearts are
01:30 - split into quarters and so we have five
01:32 - different sprites for empty and Telkom
01:34 - only fall over here in my hierarchy i
01:37 - have the UI canvas so inside let's
01:40 - create an idiom object this will be the
01:42 - hearts count visual inside we're going
01:45 - to draw all the hearts dynamically so we
01:47 - can have any number so that means we're
01:50 - not going to add anything right now
01:51 - let's just set the width and height to
01:54 - zero and now let's make a script so we
01:57 - make a new C sharp script this will be
01:59 - the parts count Viggo let's drag it on
02:03 - to the game object and then we're also
02:05 - going to have another script this will
02:07 - be the hearts count system we're doing
02:11 - two separate scripts to keep our code
02:12 - nice and clean and organized so we have
02:15 - the in logic in one place and all the
02:17 - visuals in another so first let's start
02:19 - off by just setting up the visuals so
02:22 - let's open up the heart's health visual
02:23 - now here let's
02:25 - make a simple function just to draw a
02:27 - heart so we make a private image going
02:32 - to call this create heart image so we're
02:36 - going to create an image and then return
02:37 - so we create a game object we
02:45 - instantiated
02:46 - with a image component and we make it a
02:50 - child of this transform so our game
02:52 - object setting turns to this transform
02:56 - okay so we are now creating a game
02:59 - object with the image component now we
03:01 - need to locate it and add the sprite so
03:04 - for the sprite let's go up here make a
03:06 - news here on this field for our sprite
03:09 - and will be the hard sprite so here we
03:14 - go into the heart game object we get the
03:16 - component of type image in order to set
03:18 - the sprite to our heart sprite and then
03:22 - we put the game object transform local
03:26 - position let's put it on vector 3.0 okay
03:31 - finally we return our image
03:40 - okay so this is our function to create a
03:43 - single heart image so now let's make a
03:46 - private void start in order to do some
03:48 - testing and we just call create heart
03:50 - image
03:50 - okay so let's test and see if we do have
03:53 - indeed a heart created in our you want
03:55 - before we test first let's go here and
03:58 - let's try the phone heart spread okay
04:00 - let's see any of their it is the foam
04:03 - heart spread okay great so we can now
04:05 - create our hearts dynamically and they
04:07 - are spawned as channels of our visual
04:09 - okay so now we want to try making
04:12 - several hearts so with multiple hearts
04:14 - we need to place them in different
04:16 - positions so in this function let's also
04:18 - receive a vector2 for the anchored
04:21 - position and in here we're going to go
04:25 - the our game object get the rect
04:28 - transform and we set the anchor position
04:31 - to this anchored position then we also
04:35 - set the size Delta to be correct so the
04:38 - size Delta and let's put it at 1010 okay
04:44 - so now up here let's try creating
04:46 - several hearts so the first one let's
04:50 - put it on 0 0 then put them to the side
04:52 - so in here let's put them on 20 and 40
04:56 - okay so we should be able to see three
04:58 - hearts horizontally a lot let's see if
05:01 - there there are three hearts correctly
05:03 - aligned okay great
05:05 - now that we have multiple hearts being
05:07 - spawned we need to display various
05:09 - fragments so that means first we need
05:11 - references to our sprites so pyramid
05:14 - slightly hard 0 through 5 and here let's
05:19 - drag our sprites so the heart 0 1 and so
05:21 - on
05:23 - ok now in here in order to handle our
05:26 - various hearts we could for example
05:29 - store a list of images however let's
05:32 - create a proper object to keep our code
05:34 - nice and easy to understand so let's go
05:36 - down here and we're going to make a
05:38 - class this will be our class called
05:41 - heart image
05:43 - so this represents a single heart and
05:48 - then up here on our visual UI we're
05:51 - going to store a list of art image and
05:55 - let's instantiate it on our void awake
05:59 - okay we now have a nice heart image list
06:03 - to store all of our hearts when we
06:05 - create a new heart let's create a heart
06:08 - image so here let's rename this to heart
06:11 - image UI and then we have a heart image
06:15 - and create a new heart image and let's
06:18 - pass the heart image UI and this is the
06:23 - one that we returned and we also add it
06:26 - to the list okay so when we call this
06:29 - function we're creating a heart image
06:31 - great now let's go here make the
06:33 - constructor to receive a UI image okay
06:42 - so everything should be working
06:44 - correctly so here we have a list for all
06:47 - of our heart images and whenever we can
06:49 - create a heart image it creates a image
06:52 - on the UI and then our special class it
06:54 - has its own list and our special kiwanis
06:56 - keeps track of the UI image so if we run
06:59 - the code we should be able to see
07:00 - exactly the same as previously and yep
07:03 - there it is our three hearts still
07:05 - exactly the same okay now back in the
07:08 - code since we made this nice class to
07:10 - hold the heart image we can now add a
07:12 - nice function so we can set the current
07:14 - heart fragment so here we just make a
07:16 - simple public glowing set heart fragment
07:21 - and we receive an end for the fragments
07:24 - then in here we just do a very simple
07:26 - switch on our fragments so k zero then
07:31 - we set the heart image set the sprite to
07:37 - be disappeared the heart zero sprite
07:41 - so here as you can see we have an error
07:43 - since inside this class we cannot access
07:45 - these films directly we need to either
07:48 - pass in a reference to this or passing
07:50 - references to all of our sprites let's
07:52 - go to the simple way and just pass in a
07:54 - reference to our heart sound visual so
07:57 - here we pass in the heart song visual
07:59 - and then the image and just like that we
08:06 - can now access the reference okay let's
08:08 - apply to the others so we now have a
08:13 - nice function to set the fragments on
08:15 - this heart image and now up here we can
08:18 - test make sure the code works first of
08:20 - all let's spread them out a bit more
08:21 - instead of 20 to 30 and 60 okay then for
08:24 - this one let's set the heart fragments
08:26 - this one let's put a complete poem then
08:31 - on this one let's put it with just one
08:33 - and this one let's put it empty okay so
08:36 - let's test and if there it is this one
08:39 - is falling this one has one fragment and
08:40 - this one is come only empty so our
08:42 - visuals are correctly displaying all the
08:44 - possible values so our visual class here
08:47 - is already pretty robust allowing us to
08:49 - make hearts and set their fragments so
08:52 - now it's time to work on the illogic
08:54 - class so let's open up the other script
08:56 - here we are in the heart's health system
08:59 - first we're going to remove
09:00 - monobehaviour since we want this to be a
09:03 - simple class then let's make a
09:07 - constructor to receive the heart amount
09:09 - so a public heart sound system are we to
09:13 - receive an int for the heart amount and
09:16 - then this system also needs to store the
09:19 - fragment state now we could just store
09:21 - an integer for the total fragment amount
09:24 - that would work but let's do it like we
09:26 - did on the visual and create a specific
09:28 - class to handle each heart so we go in
09:31 - here make a power class hearts so this
09:35 - represents a single heart
09:39 - here and let's make a constructor and
09:42 - we're going to receive an int for the
09:44 - fragment then we also need a function to
09:51 - get the current fragment amount okay so
09:57 - far so good now up here let's create as
10:00 - many hearts as we need and we need to
10:02 - store them on a list so we make a
10:04 - private list we're going to store our
10:06 - hearts
10:07 - so this is our heart list and in here we
10:11 - initialize the list then we do a for
10:15 - starting off at zero going until the
10:18 - heart amount and we simply create a new
10:22 - heart by default let's start them off s
10:25 - phone so we pass in four fragments and
10:30 - we add it to the heart list okay so this
10:36 - is our basic heart sound system and
10:37 - finally let's just add a public to
10:40 - return a list of hearts this won't be
10:43 - get the heart list simply return the
10:46 - heart list alright so this is the basic
10:50 - setup for our hearts health system now
10:52 - we need to test it so in order to test
10:54 - let's go back into our visual in here
10:57 - let's go into our start and we're going
11:00 - to create a new heart sound system so
11:02 - hearts counts it let's instantiate it
11:05 - with four hearts and then we need to
11:08 - connect the visuals with our logic so
11:10 - let's make a function that will receive
11:11 - a hearts health system so in here we
11:14 - make a public set hearts health system
11:24 - so for testing create a new health
11:27 - system with four hearts then we call
11:29 - this function to set our hearts we store
11:31 - it and this variable and now in here
11:34 - when we set let's copy this code except
11:38 - we're going to do a 4 so we cycle
11:41 - through only hearts we get the heart
11:49 - list from the heart sound system then we
11:51 - cycle through it so for every heart we
11:59 - create a new image and then let's set
12:01 - the fragments based on what we get from
12:03 - the heart so we have the heart give me
12:05 - the fragment amount and put it as our
12:07 - friends now the last thing is to offset
12:09 - our images so let's make here a vector
12:13 - tube for the heart anchored position we
12:18 - start off on 0 0 then in here we use
12:23 - this we create an image and after we
12:26 - create let's increase it by the same
12:28 - thing so by 30 and 0 so every time we
12:31 - add one we go to the right alright so
12:33 - that you do it let's test and if here we
12:36 - are and as you can see we do have indeed
12:38 - four hearts let's make sure everything
12:41 - is updating so we go in here onto the
12:43 - health system and here on let's damage D
12:46 - and last heart so we go into the heart
12:48 - list we grab the last one
12:49 - so the heart is not count mine is 1 and
12:52 - then let's set the fragments so we need
12:55 - to make that function but let's set it
12:56 - to zero so here we make a public void
13:01 - set fragments we receive an end for our
13:04 - fragments and we simply set this
13:11 - okay so let's s and we should be able to
13:13 - see the very last heart with zero
13:14 - fragments and if there it is the first
13:17 - three are full and the last one is empty
13:19 - okay great so we have correctly set up
13:22 - our base visual and base logic class now
13:25 - let's add some health functions like for
13:27 - example damage so here on the on logic
13:29 - class let's add a new function to damage
13:32 - so away from the COI damage then you get
13:35 - an image for the damage amount now in
13:41 - here we need to cause damage to various
13:42 - hearts so for example if we get eight
13:45 - damage we should be able to completely
13:46 - empty the first two hearts so let's do a
13:50 - cycle however we're going to start from
13:52 - the last heart so we do 4nt
13:55 - let's start off at the hearts list dot
13:58 - count minus one so we start off at the
14:01 - very last heart going to keep going once
14:04 - this is above zero and I - - now here we
14:09 - need to test how much damage this heart
14:11 - can take so down here we already have a
14:14 - function to get the fragment amount and
14:15 - let's also make a function to take
14:17 - damage so we probably going to damage we
14:20 - receive the same damage amount we're
14:24 - going to see if the damage amount is
14:26 - bigger than the current fragment amount
14:30 - then that means this heart has been
14:32 - fully destroyed so our fragments become
14:37 - zero and if not we reduce it ok now we
14:43 - can go up here let's test how many
14:45 - fragments are in this heart so first
14:47 - probably reference to this current heart
14:49 - just on the heartless high then we test
14:53 - if the damage amount is bigger then the
14:57 - hearts dot get fragment amount then this
15:00 - means this heart will be fully damaged
15:03 - and there won't be damage left over so
15:05 - we reduce the damage amount by the heart
15:09 - fragment amount
15:12 - then we cause damage to the heart based
15:16 - on the heart fragment amount so we do as
15:19 - much damage as we can to this heart and
15:21 - then we keep going
15:22 - and if not then that means this current
15:25 - heart can handle all the damage so we
15:28 - just tell it to take the damage amount
15:30 - and then we break out of the cycle all
15:35 - right so that should do it
15:47 - so we're going through all of our hearts
15:49 - starting from the last one then we test
15:52 - if the heart can absorb the current
15:54 - damage amount if it cannot absorb it
15:57 - then we reduce the damage amount by the
15:58 - amount a they absorb and we do that
16:00 - damage and if this happens we keep going
16:03 - into the next heart and if we reach a
16:06 - heart that can finally absorb the full
16:08 - damage then that one simply takes the
16:10 - damage that it can absorb and we break
16:11 - out of the cycle okay so our damage
16:14 - logic should be working so now all we
16:17 - need is to update the visuals and in
16:20 - order to keep our code nice and clean
16:21 - and the logic decoupled from the visuals
16:24 - we're going to use some events so let's
16:26 - go all the way up here and first of all
16:28 - we need to be using system and we create
16:31 - a new public event event handler and
16:34 - let's call this on damage so this event
16:42 - will be triggered whenever the Health
16:43 - System takes damage so we need to do is
16:46 - go down here into our damage function
16:48 - and we fire the event so if we have
16:50 - subscribers to the event we fire it
16:52 - sending this and event or it's empty
16:56 - okay so that should do it now let's go
16:58 - back into the visual and here when we
17:01 - set our hearts health system well let's
17:03 - subscribe to the event
17:07 - so we take the horizontal system that
17:09 - undamaged subscribe to this event and
17:13 - when the event happens
17:15 - let's sight on through all the hearts
17:17 - and essentially refresh them okay so
17:34 - this event is fired when the Health
17:35 - System takes damage so the first thing
17:38 - we do is grab the heart list from the
17:40 - health system then we go through the
17:41 - heart image list we grab the heart image
17:44 - on this index and the heart on the same
17:46 - index and then we set the heart image
17:48 - that the heart fragments based on the
17:50 - fragments currently on the heart object
17:52 - so that should be correctly updating
17:55 - every single heart alright so now it's
17:57 - time to test so for testing let's go up
18:00 - here into our start Emma let's create
18:03 - some simple testing buttons so for that
18:05 - I can go into the CM debug class this
18:08 - class is part of the code monkey Tonys
18:10 - that you can grab for free from in
18:12 - Tacoma comm so inside there is a nice
18:16 - button UI function which creates a
18:18 - button in the UI so perfect for our
18:20 - testing
18:28 - okay so we should have a button on UI
18:31 - one saying damage one one saying damage
18:33 - for and all they do when we click on the
18:35 - buttons it triggers this action so this
18:38 - will cause one damage in this one for
18:40 - damage
18:40 - alright so very simple and perfect for
18:43 - our testing so let's see okay here we
18:45 - are and here are the nice two buttons
18:47 - and as you can see we are currently
18:48 - phone so four hearts on phone let's see
18:51 - on one damage and this one shouldn't
18:52 - lose 1/4 and click and if there you go
18:55 - with lost one click again and now it's
18:57 - at half now it's at 1 now it's empty and
19:00 - now the image and now that one take
19:01 - damage in that one take damage and this
19:03 - one should take away half so this one
19:05 - should lose a quarter and I click yep
19:08 - there you go exactly as intended
19:10 - alright so our damage function is
19:12 - working perfectly fine along with our
19:14 - visuals so now let's implement healing
19:17 - so here back in the in logic class let's
19:20 - make a function to heal so we have our
19:22 - damage and then we have a Ponyboy
19:24 - heal and we're going to receive an end
19:26 - for the heal mount now in here we're
19:31 - going to cycle through the hearts
19:32 - however this time we're starting from
19:33 - the first one now we need to calculate
19:41 - how many fragments this particular heart
19:43 - is missing so we can get the current
19:46 - amount however in order to figure out
19:48 - how many are missing we also need a
19:50 - maximum since the maximum will always be
19:52 - the same let's define it as a nice
19:54 - constant so let's go here make a public
19:57 - on int for the max fragments among and
20:02 - we set it to 4 okay so we have a nice
20:05 - constant for that so down here we can
20:08 - now calculate the missing fragments so
20:12 - it's our maximum minus the current so
20:14 - the heart that get the fragment amount
20:18 - so if it's phone then we get four minus
20:20 - four equals zero so let's go here we
20:23 - have our damage function let's make a
20:24 - phone call heal
20:29 - and here let's make sure our heal amount
20:33 - does not go past the maximum so if we go
20:41 - past the maximum then we simply set the
20:43 - fragments to our maximum okay and if we
20:46 - do not go past it maximum then we simply
20:48 - in crazy fragments by the heal amount
20:51 - okay so this should be working now let's
20:54 - go up here into our logic so we have the
20:56 - missing fragments on this heart so it
21:00 - has if the heal amount is bigger than
21:03 - the missing fragments then that means we
21:05 - can heal this heart and we still have
21:07 - more left over to reduce the heal amount
21:11 - by the missing fragments then we go to
21:14 - the heart and we heal the heart with our
21:17 - missing fragments and then we keep going
21:21 - to heal next one and if not then we
21:25 - simply go into the heart and we heal by
21:27 - the heal amount then once we do we break
21:31 - out of the cycle all right that should
21:34 - do it
21:34 - now in here we also need another event
21:37 - in order to notify the visuals so let's
21:39 - go up here we have on damage and on heal
21:42 - okay and down here we just need to
21:45 - trigger our on heal me event and yep
21:50 - it's that simple now we can go back into
21:52 - the visuals and here when we set our
21:55 - hearts on system let's subscribe so we
21:57 - hearts on system on he own subscribe to
22:00 - that event
22:01 - and when that happens we're going to do
22:03 - the same thing in here so let's make a
22:05 - function for void
22:06 - refresh all hearts
22:12 - so when we damage and when we heal we
22:14 - are refreshing all of our hearts
22:16 - okay that is working now let's go up
22:18 - here to make two more testing buttons to
22:20 - test our healing and yep here we are so
22:27 - we have two more buttons these two cause
22:29 - damage and these two cause heal all
22:31 - right so everything should be working
22:33 - let's test okay here we are with our
22:35 - four hearts and our four buttons so
22:38 - let's try causing some damage there you
22:39 - go one damage two and so on I can damage
22:42 - a full heart yep just like that now
22:44 - let's see the heal if I click on this
22:46 - one it should heal up this quadrant here
22:48 - and if there it is and now another one
22:50 - and now it should start healing this one
22:52 - any of there it is in heal for any up it
22:55 - goes the whole thing okay great so our
22:58 - system is pretty much fully working now
23:00 - for a Health System it's also helpful to
23:02 - know if the character is dead so let's
23:04 - just make a simple function so here on
23:07 - our logic let's make a public ball and
23:10 - call it is dead now in here it's
23:14 - extremely simple we just return if the
23:16 - current heart so we go into the heart
23:18 - list on index 0 and we check if the
23:21 - fragment amount is 0 if so then the
23:26 - entire system is indeed dead so let's go
23:29 - up here make another nice event so on
23:32 - dead and we simply call this even when
23:36 - we take damage we check if is dead if so
23:42 - then we fire the event okay that should
23:47 - do it
23:47 - so let's test on the visuals in here and
23:51 - let's subscribe so the hearts on system
23:53 - on dead and if we are dead let's just do
23:57 - a nice pop up alright let's test ok so
24:03 - here we are and this looks good and well
24:05 - it's caused some damage and there you go
24:06 - they're all going down and one more and
24:09 - let's see the pop up and if there you go
24:12 - the character is dead ok awesome
24:15 - alright so now let's polish things up a
24:18 - bit and make the hearts film up over
24:20 - time instead of
24:21 - instant so let's head into the visual
24:23 - script and in here and let's make a
24:25 - function that is going to run every
24:27 - certain amount of time so we can animate
24:29 - things so here make a private void and
24:33 - call this healing and mated periodic now
24:38 - let's trigger this every certain amount
24:40 - of time so for that let's go up here and
24:43 - on the start the perfect way is to use
24:45 - the function periodic which again part
24:48 - of the code monkey utilities this is
24:51 - perfect for exactly this scenario which
24:54 - is where we need to trigger a function
24:55 - every certain amount of time so we're
24:57 - going to trigger that function the
24:59 - hearts and mated let's run it let's say
25:06 - every 50 milliseconds and just like that
25:09 - okay so we now have this function being
25:11 - called every 50 milliseconds now in here
25:14 - let's see if we should be healing
25:16 - so let's cycle through all of the
25:17 - illogic hearts so the same thing we did
25:20 - in here except we cycle through the
25:23 - heart list so here let's test if the
25:27 - logic is different from the heart visual
25:30 - so we grab this and we test if the heart
25:36 - image that get fragments is different
25:43 - from the heart get fragment amount
25:49 - then that means that the visual is
25:51 - different from our logic so since we're
25:54 - only doing this on healing that means we
25:55 - need to increase the heart image and
25:58 - let's make a function and part the
26:00 - visual fragment okay so let's make these
26:05 - two functions and on the air we simply
26:15 - set the heart fragments and in crazy
26:17 - fragments as one and when we do and we
26:22 - break out of the cycle so essentially
26:24 - we're only going to add one heart for
26:26 - each time that this function runs and
26:28 - finally we go up here and when we take
26:30 - damage we do want that to be reflected
26:31 - instantly however when we heal let's not
26:34 - refresh automatically so when we heal
26:37 - the illogic will be different from the
26:39 - visuals which won't cause this code to
26:41 - run and it won't do this all right so
26:43 - let's test okay here we are with our
26:46 - four hearts let's cause some damage and
26:48 - the damage as you can see is still
26:50 - instant and now let's try healing and
26:52 - see if they go up slowly and click any
26:55 - of there you go you went up and yep it
26:58 - was not instant it when I filmed up
26:59 - slowly over tongue so cause damage he's
27:02 - dead now let's revive him and yep there
27:05 - you go it's great okay awesome so we got
27:08 - the nice effect that we wanted now in
27:10 - here let's just make our code a little
27:12 - bit more clean and more performant
27:14 - instead of doing this cycle through all
27:16 - of our hearts every single friend
27:18 - let's first test if we should be healing
27:20 - so we can go up here to make a nice
27:23 - simple boolean a bone is healing when we
27:28 - have a heal
27:29 - let's set it to true okay and in here
27:33 - we're only going to run this if we are
27:35 - healing if so then we run this code now
27:39 - we need to know when we should stop
27:41 - yelling so I'm glad to find a bone only
27:43 - heal we defaulted to true and down here
27:48 - if we do heal something then that means
27:50 - we were not fully healed so we set it to
27:52 - false and after the cycle ends if we are
27:56 - fully healed
27:57 - then we said is healing back to false
28:00 - all right that should do it
28:02 - so now this function should no longer
28:04 - waste cycles by going through the list
28:06 - when everything is healed so here we're
28:08 - on let's cause some damage and there you
28:10 - go it's instant and all its heal and if
28:13 - there you go it heals only over time in
28:15 - the image and heal okay awesome now we
28:17 - could have pointed the same thing for
28:19 - taking damage but it makes more sense if
28:20 - the damage is instant and only the heal
28:22 - is animated now one less thing we can
28:25 - have is to have a nice animation when
28:27 - the heart is completely full so for that
28:29 - let's go into the editor let's create
28:32 - the heart just so we can make our
28:34 - animation so we need to add a image drag
28:39 - our heart image okay here's our image
28:42 - now let's add the animation component
28:45 - now let's add the animation tab so in
28:48 - here at tab for the animation okay now
28:52 - we create a new animation clip and let's
28:54 - just make a very simple animation of
28:56 - increasing the size and getting it back
28:58 - to normal so we just had a property on
29:00 - the rect transform and let's modify the
29:02 - scale let's increase it by 20% and after
29:06 - a while we go back to zero okay so
29:09 - that's it a very simple animation now
29:11 - let's see how we're going to play this
29:13 - animation through our code here on our
29:15 - visual script let's go here to add a
29:18 - serialize field for our private
29:22 - animation clip this will be the heart
29:25 - phone animation clip and down here let's
29:30 - go to the function where we are creating
29:31 - our heart image right here and let's
29:35 - also create it with a animation
29:37 - component and here we go into the game
29:44 - object get component of type animation
29:49 - and we add a clip for the hearts full
29:54 - animation clip now on the heart image
30:01 - let's make a function to play that so a
30:04 - poet boy play a heart full animation and
30:11 - here we just play the animation so let's
30:13 - go here in order to store it and you
30:27 - just play the heart full animation
30:28 - alright so far so good now let's go
30:31 - where we are filling the hearts and here
30:33 - we are we add a visual fragment then
30:36 - let's also see if the heart image that
30:38 - kept fragment amount if it is the same
30:42 - as the hearts Health System dot max then
30:46 - this heart was only healed so we go into
30:50 - the heart image and we play the full
30:55 - animation okay that should do it let's
30:58 - see our nice effect okay so here we are
31:01 - with our four hearts let's cause some
31:02 - damage all the way down there now it's
31:05 - you know a bunch of healing and you have
31:08 - there you go the nice pop-up animation
31:10 - so again the system supports any number
31:12 - of hearts so let's increase it all we
31:15 - need to do is come here into the hearts
31:17 - health system which as you can see we
31:19 - receive a heart amount so when we
31:21 - construct this here on our start we are
31:24 - constructing the heart sound system and
31:26 - set of four
31:27 - let's pass in ten and let's also add
31:29 - another healing to heal a lot so we got
31:36 - a massive heal let's test here we are
31:39 - with 10 hearts nice let's cause a bunch
31:41 - of damage and all of them are going down
31:42 - yep and I won't tell everything and yep
31:45 - goes up goes up goes up and everything
31:47 - looks very nice if we want just like the
31:50 - game to Legend of Zelda we can add this
31:52 - on multiple lines and let's see that
31:54 - essentially the code is here when we set
31:56 - the heart sound system right now we have
31:58 - the anchored position however let's do
32:00 - this by rows and column
32:17 - so here we have an int for the rose and
32:19 - in for the cons then the maximum of
32:21 - counts and the distance between each row
32:24 - and column and then we calculate the
32:26 - heart anchored position so essentially
32:29 - the column multiply the by the row count
32:31 - size and the road the same thing except
32:33 - only negative so we can go down we
32:35 - create the heart image then we increase
32:37 - the column if it is more than the column
32:39 - max then we increase the row and reset
32:41 - the count so essentially we should be
32:43 - able to have ten hearts per horizontal
32:45 - line so let's go up here instead of
32:48 - making a health system with ten let's
32:49 - make it with 20 right see any up here we
32:53 - are with 20 hearts and ten of them per
32:55 - row so I can cause damage start off with
32:57 - the lower ones and then on that one and
32:59 - then let's heal a bunch of them and if
33:01 - there you go all of them filling up all
33:03 - the Mallick nice and yep awesome okay so
33:06 - our system is working perfectly now
33:09 - instead of using these buttons let's use
33:11 - a nice character also since we are
33:13 - creating these dynamically on this heart
33:16 - sound visual if we want we can simply
33:19 - push this on to the side in order to
33:20 - look a bit better so like that and now
33:23 - let's add our character so here is my
33:25 - usual character with some very simple
33:27 - movement okay you can check out the
33:30 - several videos I have done on simple
33:32 - character movement now let's create some
33:34 - spikes to damage our character so here
33:37 - make a new empty game object this will
33:39 - be nice spikes
33:40 - let's add a sprite renderer component
33:43 - and drag the spikes sprite okay let's
33:47 - add a box Collider so we can trigger our
33:49 - collisions okay
33:51 - make this a trigger yep on the player as
33:54 - you can see he's also created with a box
33:57 - Collider and a rigidbody now let's make
33:59 - this script to handle these spikes so a
34:02 - new C sharp script just a very simple
34:04 - thing for these spikes and then here
34:07 - extremely simple let's make a paranoid
34:09 - on trigger enter QD so this gets called
34:12 - whenever a Collider collides with this
34:15 - Collider so let's first check to see if
34:17 - we collided with the player so we grab a
34:20 - point of reference from the collider dot
34:23 - get component of type player so if
34:26 - player is not known then we hit the
34:31 - player and the player has a function
34:35 - called damage knockbacks tonight simply
34:37 - push him back so let's calculate the
34:39 - direction vector so we have the
34:46 - knock-back direction and let's push him
34:49 - away by a little bit so let's see how
34:52 - this function works here it is it's
34:54 - quite simple it just moves the player
34:56 - transform and there's a nice flash so
34:58 - it's in here that we need to damage our
35:00 - hearts health system now in order to do
35:02 - that we need a reference so we just in
35:05 - this case and let's go into the visual
35:06 - class which is the one that creates it
35:08 - and let's make it a static variable so
35:12 - in here we make a public study heart
35:14 - sound system and when we set our hearts
35:19 - on system let's also set a static
35:21 - variable as well again I'm just doing
35:25 - this specifically to make this symbol
35:27 - test obviously if you are implementing
35:29 - this in a proper game you would put it
35:31 - in a more appropriate place like for
35:33 - example the player class would be the
35:34 - one responsible for containing the
35:36 - heart's health system but in this case
35:38 - just for testing this is good so we now
35:39 - have a nice static function so we can go
35:42 - back into the player in order to just
35:43 - test we grab the heart sound visual then
35:47 - we grab the instance and we simply
35:51 - trigger some damage so in here let's
35:54 - also receive an int for the damage
35:57 - amount so we can have varying in damage
35:59 - amount and that should be work now let's
36:03 - go into these spikes and here let's make
36:06 - a signalized film or a private in damage
36:09 - amount and this is the amount that we're
36:13 - going to send in here okay now we can go
36:16 - into the editor we drag our spikes
36:19 - script and let's say this one only
36:21 - triggers one damage
36:22 - then let's have a different spike script
36:25 - let's tint it in red and this one
36:28 - instead of one it won't trigger for
36:29 - damage and let's make another one here
36:32 - that won't trigger ten damage okay that
36:36 - should be working let's test here we are
36:38 - here's the player and all of our hearts
36:39 - in here on them our fault now let's hit
36:41 - this one anybody go we got a nice knock
36:44 - back and we took one damage and one
36:46 - damage every time now this one triggers
36:48 - for damage and this one triggers a lot
36:52 - of damage so just like that you have to
36:54 - quite a lot of damage okay so finally
36:56 - let's make a heal so we can just
36:59 - duplicate the spikes and this will be
37:00 - the heal instead of the spy sprite let's
37:03 - try the heart sprite now let's see our
37:09 - code so we make a new script I'll be the
37:13 - heart heal and here we're going to do
37:15 - very much the same thing so when we
37:26 - collide with the player we heal him by a
37:27 - certain amount so I like to make this
37:29 - function so here let's make a public
37:32 - void heal we trigger the heal on the
37:39 - hearts health system and we tint it in
37:41 - green
37:42 - okay that should be working now here
37:45 - just drag the heart heal instead of the
37:47 - spikes and this one let's heal by 4 then
37:51 - let's have another one on the side that
37:52 - will heal one and we put this one
38:03 - okay so let's test okay here we are
38:07 - let's go some damage and there you go
38:09 - you have some nice damage and now let's
38:12 - heal everything back up so go here touch
38:14 - the healing and if there you go
38:16 - everything went up nice everything flash
38:18 - green and it went out very well all
38:22 - right so we have made a very nice
38:24 - testing scene for our heart system so
38:39 - here's our final testing scene we have
38:42 - the heart cell system up here examine
38:44 - like it works in the Legend of Zelda the
38:46 - hearts are split into four fragments
38:48 - which can be either damaged or healed so
38:51 - if I go and touch these spikes I'm gonna
38:53 - take one damage and there you go it took
38:56 - just the core and this one's gonna take
38:57 - a foam heart yep there you go now with
39:00 - the hearts damage I can go in here into
39:02 - heal so this one all heal one quarter
39:04 - and yep exactly and this will heal a
39:06 - full heart and you examine like that the
39:09 - heels are nicely animated so it caused
39:12 - some more damage and I'll go in here and
39:14 - grab this mega heal and look at the
39:16 - hearts any of there you go they go up
39:19 - very nice and nicely animated so the
39:22 - whole system works perfectly and looks
39:24 - great as always you can download the
39:26 - project files and utilities from empty
39:28 - code monkey dot-com if you liked the
39:30 - video subscribe to channel for more
39:31 - unity tutorials post any questions you
39:34 - have in the comments and I'll do my best
39:35 - answer alright see you next time
39:39 - [Music]