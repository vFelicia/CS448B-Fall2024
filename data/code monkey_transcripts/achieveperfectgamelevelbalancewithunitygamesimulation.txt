00:00 - in this video we're going to look at a
00:01 - practical use case for making perfect
00:03 - match 3 levels by using game simulation
00:06 - we're going to run hundreds of
00:07 - simulations on each level so this will
00:09 - let us ensure that our levels are
00:10 - perfectly balanced with the correct
00:11 - level of difficulty
00:12 - let's begin
00:18 - this video is sponsored by unity alright
00:20 - so in a previous video i already covered
00:22 - the basics for unity game simulation
00:24 - essentially this is a new unity feature
00:27 - that lets you automatically run your
00:28 - game in the cloud using certain
00:30 - parameters
00:30 - and one big benefit is that you can run
00:32 - multiple builds all at once
00:34 - so you can playtest your game hundreds
00:36 - of times in the cloud using tons of
00:37 - parameter combinations in a very very
00:39 - short amount of time
00:40 - go check out that video linked in the
00:42 - description to learn more and see a
00:43 - basic getting started tutorial
00:45 - here we're going to look at a practical
00:47 - use case for unity game simulation
00:49 - we're going to use game simulation in
00:50 - order to ensure that our levels have the
00:52 - perfect level of difficulty
00:54 - also quick note here unity is having a
00:56 - machine learning ai summit on december
00:58 - 10th
00:59 - it's a free one day event with
01:00 - presentations panel discussions and
01:02 - hands-on workshops all about spatial
01:04 - simulation play testing robotics ml
01:06 - agents and more
01:07 - all of it presented by experts and
01:09 - industry leaders so if you're interested
01:11 - in machine learning or ai check out the
01:13 - link in the description
01:14 - so over here i have a simple match 3
01:16 - game i made it's the basic match 3
01:18 - design
01:19 - so i can click and drag some gems in
01:21 - order to make matches and when three or
01:22 - more get matched they get cleared
01:24 - others fall down and more are spawned
01:26 - match 3 games are very popular since you
01:28 - can take this underlying logic
01:29 - and apply to just about anything so for
01:31 - example you can make some casual games
01:33 - where you match some candy
01:34 - or a more hardcore theme where you do
01:36 - matches to spawn more units in a
01:38 - strategy game
01:39 - or do matches to handle magic spells in
01:41 - a fantasy game or pretty much anything
01:43 - so this is a very versatile genre and
01:45 - what we're going to test here is
01:46 - applicable to all those scenarios the
01:48 - underlying base logic is pretty much all
01:49 - the same
01:50 - so over here we have the base game we do
01:52 - matches in order to clear the board
01:54 - now there are two types of goals one is
01:56 - to reach a certain amount of score in a
01:58 - certain number of moves
01:59 - and the other one is to destroy all the
02:01 - glass blocks again all in a certain
02:02 - number of moves
02:03 - both of those goal types have a limited
02:05 - number of moves which is where the
02:07 - difficulty comes in
02:08 - now like i said we're going to use game
02:09 - simulation in order to perfectly balance
02:11 - our levels so our game has a nice smooth
02:13 - difficulty curve
02:14 - and if you've seen the previous video
02:15 - introducing game simulation then you
02:17 - know one requirement is to have the game
02:19 - play itself
02:19 - so over here i have made a simple bot
02:22 - script that can automatically play the
02:23 - game
02:24 - so i just hit play and it starts
02:26 - automatically playing the game
02:27 - now naturally the quality or skill of
02:29 - your bot will have an impact on the
02:30 - results that you received
02:32 - but as long as the bot works you will
02:33 - get a good baseline value to bounce
02:35 - around
02:36 - so you just do this and if there you go
02:37 - the bot won automatically this bot is
02:39 - relatively simple so i'll just go
02:41 - through a quick overview of how it works
02:43 - here is the bot script which is
02:44 - relatively simple all it does
02:46 - is it listens to some events so for
02:48 - example on state changed
02:50 - so when the state is waiting for the
02:52 - user input then the bot tries to do a
02:53 - move
02:54 - then over here it goes into our main
02:56 - class in order to get all the possible
02:57 - moves
02:58 - so here this is the main class that
02:59 - handles the underlying game grid
03:02 - and here on this function we simply
03:03 - cycle through the home grid
03:05 - and we test swapping around each word
03:07 - position with one of its neighbors
03:09 - then simply go through all of those
03:11 - testing positions we try doing them we
03:13 - swap them we try to see if there's any
03:15 - match three links
03:16 - if so we add them to the possible moves
03:18 - list and in the end we return that list
03:20 - so this function essentially goes
03:22 - through the home grid and identifies all
03:24 - the possible moves and all the matches
03:25 - that doing those moves would result in
03:27 - then over here the bot simply grabs that
03:29 - list of possible moves
03:30 - and then simply passes that list onto a
03:32 - function to identify the best possible
03:34 - move
03:35 - so then depending on the score it does
03:36 - one of two things so if the goal type is
03:39 - score then it simply looks for the one
03:41 - with the most match amounts
03:42 - and if the goal type is glass and symbol
03:44 - looks for the one that destroys the most
03:45 - amount of glass so as you can see it's a
03:47 - pretty simple pretty straightforward bot
03:49 - you could definitely improve upon this
03:50 - to make it smarter but like i said
03:52 - as long as it works then we have a nice
03:54 - baseline value in order to bounce around
03:56 - then the levels are all manually
03:57 - designed and stored in a scriptable
03:59 - object so i can play which one i want
04:01 - so for example this level will always
04:03 - start off exactly with the state
04:04 - so if i stop playing and i try to hit
04:07 - play again
04:07 - and yep there you go with load the exact
04:09 - same level i also made a simple level
04:11 - editor where i can just easily manually
04:13 - modify each of these great positions
04:16 - so here with all of these levels what we
04:18 - want is to test the difficulty of them
04:20 - now using the traditional approach what
04:21 - i would do would be start playing the
04:23 - game
04:24 - so here i am i have a certain total
04:26 - number of moves i have a certain score
04:28 - that i want to hit
04:28 - so i would simply start playing so make
04:30 - this move there you go it does that
04:32 - does that now i make another move
04:34 - another match and so on and i get some
04:36 - score
04:36 - so i do it until i win or lose the game
04:39 - and then i analyze on the 11 parameters
04:41 - and decide if i should make this level
04:42 - more difficult
04:43 - or easier so as you can see that would
04:45 - be a very minimal process that would
04:47 - take ages
04:48 - especially since match 3 games usually
04:50 - have tons of levels
04:51 - so that's where game simulation comes in
04:53 - we want to use game simulation to very
04:55 - quickly test the difficulty of
04:57 - all of our levels alright so let's
04:59 - implement it so here i already have the
05:01 - game simulation package installed and i
05:03 - can simply go into window game
05:04 - simulation all right now the first thing
05:05 - i need to make these services so let's
05:07 - make that
05:08 - all right so here's the window funny
05:09 - working let's just talk it down here and
05:11 - see
05:11 - now i already covered a very detailed
05:13 - getting started guide in the previous
05:14 - video
05:15 - so in there i covered in detail step by
05:17 - step how everything works so how to
05:19 - install the package use the api and the
05:21 - dashboard and so on
05:22 - so go watch that one if you haven't seen
05:24 - it yet here i will assume that you know
05:26 - the absolute basics alright so with this
05:27 - let's go into the code
05:29 - now the code for this game is set up in
05:31 - a really nice and really organized way
05:33 - so the main match three script has all
05:35 - these nice events which makes it very
05:37 - easy to interact with
05:38 - so we're going to make a script to hook
05:40 - onto these events in order to handle
05:41 - game simulation so let's start off by
05:43 - creating a new c-sharp script
05:45 - name this is the match 3 game simulation
05:48 - now let's make a game object give it the
05:49 - same name
05:52 - and attach the script onto it okay now
05:54 - open
05:55 - and now in here first off let's add our
05:57 - using statement so using
06:00 - unity.simulation.games
06:02 - then the first thing we need to do is
06:04 - fetch our parameters so let's make a
06:05 - private void awake
06:06 - and then awake go into the game sim
06:09 - manager access the static instance
06:11 - and call fetchconfig
06:17 - alright we are fetching our
06:18 - configuration again go watch the other
06:21 - video if you don't know what this is
06:22 - doing
06:22 - but essentially it's downloading all the
06:24 - parameters so let's go back into the
06:26 - editor
06:26 - and here on the game simulation window
06:28 - let's simply add a parameter
06:30 - let's name this our level and for this
06:33 - one
06:33 - let's make it of type string and for
06:36 - default value let's use
06:37 - level underscore a so i'm using this
06:39 - default value which matches up over here
06:41 - on the project
06:42 - there you go here you can see the
06:43 - various levels stored as scriptable
06:45 - objects
06:46 - so this is the name that we're going to
06:47 - use and it has to match exactly this
06:48 - perfectly
06:49 - so by default we're going to play on
06:50 - level a all right so that's the
06:52 - parameters again don't forget to click
06:54 - on save in order to save the changes
06:55 - okay everything is good now back here on
06:58 - our script
06:58 - let's go into the game sim config
07:00 - response in order to get a string
07:03 - with the key in level and this will
07:05 - return the string for our level name
07:08 - then we just need to grab the scriptable
07:10 - object that refers to this level name so
07:11 - let's add them up here
07:14 - all right so just a list of the level
07:16 - scriptable objects make it serializable
07:18 - so let's see it in the editor
07:20 - and here i've got the 11 list so let's
07:22 - just lock the inspector and drag all the
07:24 - levels on there
07:25 - all right these are all the levels and
07:26 - now here just cycle through it
07:32 - all right so we cycle through the list
07:34 - we find the one that matches the name of
07:36 - our parameter
07:37 - and then we simply have that level then
07:39 - let's also add a simple test to select
07:41 - the default level in case we cannot find
07:43 - it
07:48 - so just keep things safe in case we
07:50 - accidentally give it a bad value
07:51 - all right so far so good now let's add a
07:54 - reference to our match 3 script
07:59 - okay we have this and then in there
08:01 - there's a function in order to
08:02 - load and level so just call it and pass
08:05 - in this load level
08:07 - all right so just like this we should be
08:08 - unloading the correct level for testing
08:10 - so right now we should be loading the
08:12 - default level so yep right away we are
08:14 - unloading level a
08:16 - so here in the console we can see yep
08:17 - config fetch level level all right it
08:19 - worked
08:20 - and just make sure that it is working
08:21 - let's change this to level b hit save
08:24 - and yep now it loaded in level b all
08:26 - right so the logic for unloading the
08:27 - level based on parameter is on fully
08:29 - working
08:30 - now back in our game sim script let's
08:32 - listen to the events from the main class
08:33 - so we know when the bot
08:34 - either wins or loses so here just go
08:37 - into match
08:38 - 3 and subscribe to the on win event
08:43 - and on out of moves which is when the
08:45 - bot loses
08:46 - all right here we have both of our
08:47 - events so here we have our win
08:50 - and now in order to save the simulation
08:51 - result we set the counter
08:53 - so we go into the game sim manager
08:56 - access the static instance
08:58 - and we're going to use set counter in
09:00 - order to set a certain counter
09:02 - now over here essentially we have three
09:04 - ways of testing how difficult a level is
09:06 - so one approach we can give the bot a
09:09 - target score and unlimited moves and we
09:11 - test how many moves it takes to reach
09:13 - that score
09:14 - or we can give it a limited number of
09:15 - moves and see how much score it gets
09:18 - or we can set both a target score and
09:20 - unlimited number of moves and see how
09:22 - many times the bot wins and how many
09:23 - times it loses
09:24 - so essentially all of those approaches
09:26 - are valid now in this case since we're
09:28 - running the simulation for the very
09:30 - first time i think it makes sense to set
09:31 - a goal and give it unlimited moves to
09:33 - test how many it takes to win the level
09:36 - then after we do that simulation we can
09:37 - then do a second one with unlimited
09:39 - number of moves and see how many bots
09:40 - win
09:41 - and how many lose so here let's simply
09:43 - save how many moves it won
09:45 - and let's also save the level name so
09:46 - let's store here a reference to the
09:48 - level scriptable object and then here
09:51 - when we set on level let's set this one
09:53 - to this load level okay so here we have
09:56 - the level that we're running so just do
09:58 - this
09:59 - use the name then a underscore let's say
10:01 - when
10:02 - moves used and then for the value that
10:05 - we want to store so let's go into the
10:06 - match 3
10:07 - and in there i have a function to get
10:09 - the used move count
10:11 - so this way when the bot wins we're
10:12 - going to save how many moves the bot
10:14 - took in order to win that level
10:16 - so this one will work for both of our
10:17 - goal types now here in the level just
10:19 - make sure that
10:20 - all of the levels have enough moves in
10:22 - order for the bot to win
10:24 - so all of them are set to 100 so that's
10:26 - good that should be more than enough
10:27 - and then on the lose event let's also
10:30 - save and we're going to save the
10:32 - level name then lose and then here we
10:35 - don't really need to store any value
10:37 - but unless you store one so we can
10:39 - easily count how many times the bot lost
10:41 - all right so with this we have
10:43 - everything all set up now that's left is
10:45 - making sure that the bot stops playing
10:46 - after it
10:47 - either wins or loses so let's go down
10:50 - here in order to make a
10:51 - function let's call it end game
10:54 - simulation
10:56 - and in here we simply call
10:58 - application.quit
11:00 - but again we don't want to quit if we're
11:02 - working in the editors let's add a if
11:04 - unity editor if we're in the editor then
11:07 - go into the editor
11:09 - application and simply set is playing
11:13 - into false
11:16 - all right this is our function to end
11:18 - the simulation and up here we simply set
11:20 - the counter
11:20 - and end the simulation set the counter
11:22 - and end all right so everything is set
11:24 - up
11:24 - so we start off by fetching the config
11:26 - once that happens in here
11:28 - we get the parameters so in this case we
11:29 - just have the level
11:31 - so we get it then we unload the level
11:33 - that matches that parameter
11:34 - then the bot does its thing it plays
11:36 - through the level and it either wins or
11:38 - loses
11:39 - and depending on that then we save the
11:40 - result of our simulation all right so
11:42 - all logic is working
11:43 - now it's test again just look at the
11:45 - console so here it is the level load
11:47 - z-bot is playing automatically and here
11:49 - is the console
11:50 - you can see we fetch the config then
11:51 - let's see if the bot wins or loses
11:53 - and there you go the bot one we have our
11:55 - game over we wrote our counters
11:58 - and we quit the application all right so
12:00 - everything went perfectly
12:01 - now go into the game simulation window
12:03 - and in here go into build upload
12:05 - let's include our one scene and then
12:06 - give it a name
12:09 - and simply click on build and upload
12:17 - all right here in the console we can see
12:19 - that it was built and uploaded
12:21 - so now we just click on create
12:22 - simulation okay here we are create a
12:24 - simulation
12:25 - first of all give it a name so like
12:27 - first test with
12:29 - unlimited moves then we select our build
12:32 - okay
12:32 - and over here we have our level
12:33 - parameter so we've got our default value
12:36 - level a
12:37 - then let's try with all of them so just
12:39 - put all of them
12:43 - all right all the levels then down here
12:45 - for the number of runs per combination
12:47 - so in this case let's go with something
12:48 - like 100 times on each level now again
12:50 - the whole point behind the indie game
12:51 - simulation is to run the cloud in
12:53 - parallel
12:54 - so in a more proper game we could go
12:56 - increases tenfold to a thousand runs per
12:58 - combination and it would not take 10
13:00 - times longer
13:01 - so eventually when your game would be
13:02 - close to complete you could put a
13:04 - massive number in here in order to
13:05 - ensure
13:06 - that everything works perfectly fine but
13:07 - in our case for a first test let's go a
13:09 - little bit lower just 100 runs
13:11 - then for the max runtime per run now
13:13 - each level probably takes under a minute
13:16 - but just in case let's put two alright
13:18 - everything is set up
13:19 - we are going to test all of our levels
13:21 - we're going to test 100 times on each
13:23 - level
13:23 - and everything's going to run alright so
13:25 - just hit on run
13:26 - okay now the simulation has been queued
13:28 - so all we need to do is wait for it to
13:30 - complete
13:31 - all right so here i am a bit later and
13:33 - as you can see the simulation has
13:34 - completed
13:35 - and right away you can see just how
13:37 - awesome game simulation is
13:38 - so it has only been about 30 minutes but
13:41 - in reality it ran through 1700 minutes
13:44 - of simulation
13:44 - so you can see just how insanely
13:46 - efficient this is now right away we have
13:48 - our reports so we can download them
13:50 - so the main one we want right now is the
13:52 - aggregate data
13:53 - all right here it is and right away we
13:55 - can see all of our results so we can see
13:57 - we ran
13:57 - a hundred instances of each simulation
13:59 - type over here we can see the settings
14:01 - so this one level a b
14:03 - c d and e and we use counters in order
14:05 - to track how many moves were used in
14:07 - order to complete the level
14:08 - so over here we can see the average
14:09 - maximum minimum the standard deviation
14:11 - the sum and the number of instances so
14:13 - for example right away we can see that
14:15 - on level a
14:16 - it only took one move to win so right
14:18 - away we can see that level a is way too
14:20 - easy
14:21 - then on level b we took six move to win
14:23 - then level c
14:24 - 7 then 19 and then 24. so now with this
14:28 - data we can analyze this and figure out
14:30 - what we do in regards to our level
14:32 - so for example level a is way too easy
14:34 - and here we can see on level a that only
14:36 - takes is the bot doing just one move
14:38 - and right away it triggers a ton of
14:40 - things so it automatically hits the
14:41 - target
14:42 - so in our case let's modify the target
14:43 - on level and let's put it at let's say
14:45 - 10 000
14:46 - and then for the number of moves let's
14:48 - say 10 moves so here playing manually
14:50 - let's do that move and yep with just one
14:52 - move already got tons of scores to just
14:54 - do another move and so on and everything
14:56 - works
14:59 - all right so here we have level a which
15:01 - is very easy exactly as it's supposed to
15:03 - be
15:04 - and by the way if you find the video
15:05 - helpful consider subscribing and hitting
15:07 - the like button
15:08 - it really helps out the channel then on
15:10 - our level b
15:11 - took on average six moves so the level b
15:14 - is a glass level
15:15 - and six moves sounds about right so
15:17 - again this one is meant to be relatively
15:19 - easy
15:19 - so if the bot can do it in six moves
15:21 - then let's make the move amount
15:23 - about 10. then on level c it took seven
15:25 - moves
15:26 - so here this one is meant to be a bit
15:27 - harder so for the movement let's set it
15:29 - to about 12.
15:30 - then on level d it took 20 moves so
15:32 - that's possibly a bit too much of a
15:34 - difficulty increase
15:35 - again the goal is to reach a nice
15:37 - balanced smooth difficulty curve so i
15:40 - can modify the number of moves or i can
15:42 - edit the level in order to modify
15:43 - just how many nodes are in case in class
15:45 - in order to make it easier or harder or
15:47 - i can also modify the various gem types
15:49 - that are used on each place so as you
15:50 - can see
15:51 - game simulation gives you all the data
15:52 - and then it's up to you to decide what
15:54 - to do about it
15:55 - and then finally on level e which is the
15:56 - toughest one so it makes sense that it
15:58 - took an average of 24 moves
16:00 - with a maximum of 30 moves and a minimum
16:02 - of 11 moves
16:03 - all right so we used all the data in
16:04 - order to balance our levels
16:06 - and if we want we can manually go
16:08 - through them in order to ensure that it
16:09 - looks very nice
16:23 - all right so with this many moves stone
16:25 - level is indeed perfectly balanced with
16:26 - the exactly the level of difficulty that
16:28 - i was going for
16:29 - okay so with this we have perfectly
16:31 - balanced some of our levels
16:32 - now the difficulty curve for our game is
16:34 - looking quite great however now let's
16:35 - say we continue working on our game and
16:37 - we want to add a new feature so let's
16:39 - say we want to add a power up that
16:41 - destroys various blocks instantly
16:43 - so i have in point that when there's a
16:44 - four link match
16:46 - one of the gems will explode and take
16:48 - down all the gems around it
16:50 - so as i move this one if there you go
16:51 - all of those were destroyed
16:55 - so as you can see adding that feature
16:57 - does cause a significant change in our
16:58 - level
16:59 - so adding the feature is relatively
17:01 - simple but then comes the question of
17:02 - exactly what does that new feature
17:04 - does to all of our perfectly balanced
17:06 - levels so this is where we see the real
17:08 - power of game simulation
17:09 - we already added that feature and now we
17:11 - don't even need to touch the simulation
17:13 - code at all
17:14 - we just need to go back into our game
17:15 - simulation window and make a new build
17:18 - to upload with our changes
17:21 - all right the new build has been
17:23 - uploaded and back in the game simulation
17:25 - dashboard
17:26 - over here we have a button where we can
17:27 - easily clone a previous simulation
17:29 - so here we have of our level parameters
17:32 - all of them running a hundred times once
17:33 - more
17:34 - so just over here pick a new build so
17:36 - it's that one give it a different name
17:39 - and just run the simulation all right
17:41 - there it is running now once again we
17:43 - wait
17:44 - and now the second simulation has
17:46 - completed so let's analyze our results
17:49 - here is the new aggregate results
17:50 - compared with the previous ones
17:52 - and we can see that by adding the new
17:54 - exploiting gem we did indeed modify how
17:56 - the levels play
17:57 - so we can see in level a after our
17:59 - changes and after adding new feature now
18:00 - it takes four
18:01 - moves to actually win then level b takes
18:04 - around six moves level c around five
18:06 - level d around ten and level e around
18:08 - fifteen
18:09 - and at the same time we also added the
18:11 - unlimited number of moves to the level
18:12 - so the bot
18:13 - actually lost a few times so over here
18:15 - on level b
18:16 - the bot actually lost eight out of the
18:18 - 100 times and then on level d
18:20 - i lost 14 out of 100. so once again now
18:22 - we have all this data and we can use it
18:24 - to rebalance our game
18:25 - and just like that we add the new
18:26 - feature and easily balance the game in
18:28 - just a few minutes
18:29 - now just imagine this apply to a real
18:31 - game with hundreds of levels and dozens
18:33 - of special moves and you can see just
18:35 - how insanely useful game simulation is
18:37 - at the push of a button you can run
18:39 - hundreds or even thousands of
18:40 - simulations and ensure your game is
18:42 - always perfectly balanced
18:43 - alright so i hope you like this
18:45 - practical use case of the benefits of
18:46 - unity game simulation
18:48 - the package is in active development so
18:50 - unity is looking for all the feedback
18:51 - they can get
18:52 - try it out for yourself and if you have
18:54 - any issues go into the forums or email
18:56 - the team directly
18:57 - this is a really fascinating feature
18:59 - that can be a huge help to both small
19:01 - indie developers as well as large
19:03 - studios
19:03 - alright so thanks for watching if you
19:05 - found this video helpful consider liking
19:07 - and subscribing
19:08 - and i'll see you next time
19:14 - [Music]