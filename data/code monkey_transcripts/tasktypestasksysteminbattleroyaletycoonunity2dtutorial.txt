00:00 - hello and welcome I'm your code monkey
00:01 - and in this video we're continuing to
00:03 - check out the inner workings of the task
00:05 - system in Batam Riau
00:06 - tycoon we're going to add multiple task
00:08 - types with different parameters and
00:10 - different executions let's begin
00:15 - all right so here's the scene from the
00:17 - previous video we have both workers in
00:19 - here they are periodically requesting
00:21 - new tasks the test type that we have
00:24 - created is a simple movement the workers
00:26 - simply moved to the target position and
00:29 - when I click the mouse button a task is
00:31 - created with the mouse position as a
00:33 - target the worker grabs the task can
00:35 - execute it which in this case means he's
00:37 - going to a target position so when I
00:39 - click in here
00:40 - yep the task is created and he moves
00:42 - there and now he's requesting a new task
00:45 - ok great so that's the basics for our
00:48 - task system now let's set up our test
00:50 - code to support multiple task types the
00:52 - game is still in development so if you
00:54 - like the concept go to the same page add
00:56 - it to your wish list and follow so let's
00:58 - go into our tasks system in here and now
01:01 - in here we have our task class so we're
01:04 - going to create multiple task types by
01:06 - creating subclasses and here so let's
01:09 - make a subclass and we're going to name
01:11 - it move to position this task type won't
01:17 - contain the target position from
01:18 - previously and the subclass will extend
01:23 - the base task class which for now there
01:26 - is no base behavior but by extending it
01:28 - we can add the move to position to the
01:31 - task list down here since it is a task
01:33 - alright so that should be good for now
01:36 - so let's go in our game Handler and in
01:39 - here instead of creating a base task
01:41 - what we want to create is a task dot
01:44 - move to position which then contains the
01:47 - same arguments alright so that should be
01:49 - working let's just comment out the
01:51 - second worker to keep things simple and
01:53 - now on the worker task AI in here down
01:57 - here when he is executing the task
01:58 - instead of receiving a generic task
02:01 - we're going to receive a task dot move
02:03 - to position and let's rename this one to
02:06 - move to position task and rename the
02:10 - function to execute task move to
02:13 - position so now in here we have to cast
02:17 - this task to move to position types so
02:19 - as cm tasks system dot out dot move to
02:23 - all right so now everything is set up to
02:26 - use the new subtype of move to position
02:29 - so let's test and make sure that
02:31 - everything is still working exactly the
02:32 - same okay there's the worker he's
02:34 - requesting tasks and when I click it
02:36 - spawns the task he goes there he grabs
02:39 - it and waits again okay great
02:40 - everything is working exactly the same
02:42 - so now I'm here just one more thing on
02:44 - the task system in order to keep our
02:47 - code clean let's set our base task to be
02:50 - an abstract class abstract means that
02:53 - the class cannot be instantiated we want
02:55 - this base task class to only serve as
02:57 - the base for all the other task type so
02:59 - it should never been Senshi ated by
03:01 - itself by adding abstract we're going to
03:03 - get errors if we do try to instantiate
03:05 - so let's just test make sure everything
03:07 - still works and yeah everything is still
03:10 - fine okay so now let's add another task
03:13 - type now in here this won't be a very
03:15 - simple task the worker won't simply play
03:18 - an animation so let's make a public
03:20 - class call it victory because don't play
03:22 - a victory animation and it's of type
03:26 - tasks inside we have no fields since the
03:29 - worker doesn't need any more information
03:30 - other than the task type now in the
03:33 - worker in here we are executing the move
03:35 - to position task if we don't yet know
03:38 - but now we have a second type so we need
03:41 - to test what type this task is so we
03:45 - know how to execute it so let's test the
03:47 - type of the task to decide how we should
03:49 - handle it
03:50 - suddenly the current Unity c-sharp
03:53 - version does not support switching on
03:55 - type so the solution here isn't as clean
03:57 - as I would like it to be but it works so
04:00 - what we can do is if task is test this
04:05 - and not test out move to position if it
04:08 - is in move to position task then we
04:10 - executed using this function if not then
04:14 - the task is of type victory and we're
04:19 - going to cast it to victory and we need
04:22 - to make a new function to handle the
04:24 - victory and after we do let's return so
04:28 - we don't fall into the other cases so
04:31 - again this isn't very clean code but
04:32 - since the currency shop version does not
04:35 - support switching on time
04:36 - this is the best way to do it if you're
04:38 - watching this in the future and c-sharp
04:40 - seven has been out to unity you should
04:42 - clean up this code with a switch on time
04:44 - all right so let's go down here and make
04:45 - the execute task victory so it's a
04:48 - private void and inside we're going to
04:51 - receive the task system that has got the
04:53 - victory victory task so in here first of
04:57 - all let's simply execute the pop-up so
04:59 - we can see when this is executing and
05:02 - for the victory task only want to do is
05:05 - play the victory animation so the worker
05:08 - class has a function to play a victory
05:11 - animation and that function takes an
05:13 - argument which is an action that gets
05:15 - triggered when the animation is
05:16 - completed so he won't play the animation
05:19 - and when the animation is completed
05:20 - simply reset back to waiting for the
05:22 - next task
05:23 - okay so again up here we ask the test
05:26 - system for a task if he returns no then
05:28 - we simply wait and request again after
05:30 - 200 milliseconds if we do get a task
05:33 - then we test the type of that task if
05:37 - the task is a move to position task then
05:39 - we execute this function which moves
05:41 - them towards the target position if the
05:44 - task is a victory task then we execute
05:47 - it using this function and in this
05:49 - function we play the victory animation
05:51 - when the animation is completed it
05:53 - triggers this action and this action
05:55 - simply resets him back to waiting for
05:57 - the next task and so on so forth alright
05:59 - so now let's go into the game handler
06:02 - and in here we are spawning a move to
06:04 - position tasks on the left mouse button
06:06 - so let's copy this and in here switch
06:09 - this to the right mouse button and on
06:12 - the right mouse button in satisfying
06:14 - move to position let's spawn a victory
06:16 - task now the victory task is completely
06:18 - empty doesn't have any fields so just
06:21 - like that alright so we should now be
06:23 - able to spawn any move to position on
06:24 - left mouse button any victory on right
06:27 - mouse button so let's test alright so
06:29 - here's the worker and as you can see he
06:31 - is currently waiting for a new task and
06:33 - on the left mouse click I can spawn a
06:36 - task for him to move to a target
06:38 - position so if I click in here yep there
06:41 - you go he's executing the move to task
06:42 - he goes there and now he's waiting for
06:45 - another task and on the right mouse
06:47 - button if I click it won't add
06:49 - victory tasks and he won't play the
06:52 - vector animation so quick and there you
06:54 - go
06:55 - animation stops and again he's
06:56 - requesting a task I can also cue up
06:59 - tasks that won't be executed
07:00 - sequentially so let's say go here play
07:02 - the animation here animation and here
07:04 - goes animation I goes here plays the
07:08 - animation finishes goes here and he
07:12 - waits for a new task ok great so as you
07:15 - can see he's executing both different
07:17 - task types perfectly as he should all
07:20 - right now let's add the other worker
07:22 - just make sure everything still works
07:23 - with multiple workers so let's add this
07:26 - one in here alright so here we have both
07:29 - workers both of them are waiting for a
07:32 - new task I spawn a task to move here and
07:35 - he grabs now I spawn a victory and he
07:37 - grabs another move he grabs he goes
07:40 - victory and so on and as you can see I
07:43 - can spawn all different task types and
07:46 - they all get executed sequentially and
07:48 - both us have different executions based
07:51 - on the tasks time so there you have it
07:53 - we set up our code to easily support
07:55 - multiple task types which have different
07:57 - parameters and different executions in
08:00 - the next video we're going to cover how
08:02 - to create a nice complex task again the
08:05 - game is still in development so if you
08:06 - like the concept you're the same page
08:08 - add it to your wish list and phone as
08:10 - always you can download the project
08:11 - files in utilities from unity code
08:13 - monkey comm if you have any questions
08:15 - post them in the comments and I'll do my
08:16 - best answer them subscribe for more
08:18 - videos and I'll see you next time