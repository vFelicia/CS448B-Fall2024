00:00 - hello and welcome I'm your code monkey
00:01 - made the series were making snake in
00:03 - unity in this video we're going to take
00:05 - the sprites we added previously and deal
00:07 - with rotation and corners let's begin
00:12 - here is our game so far we have our
00:14 - snake moving around the map I can eat
00:17 - some food and when I do the body grows
00:19 - and the body follows the path that the
00:21 - snake took as you can see every time we
00:23 - eat we increase the body by one segment
00:25 - now the one issue we have is regarding
00:28 - the rotation of the body as you can see
00:29 - the sprite is only in its natural
00:31 - rotation and it should actually be
00:33 - pointing where the snake is going so
00:35 - over here is our snake class and now in
00:38 - order to rotate our sprite we need to
00:40 - know not just where the sprite has been
00:42 - but also the direction it was pointing
00:44 - it so in here we are only storing that
00:46 - position our snake move position list
00:47 - only has a vector - int which contains
00:49 - the correct position so we have to think
00:52 - about how we can store more than just
00:54 - our grid position so down here when we
00:56 - are inserting a new grid position we
00:58 - also need to insert the current grid
01:00 - move direction so let's define a class
01:02 - to store just that this won't store a
01:08 - single move position from the snake so
01:11 - for that first we're going to need a
01:12 - private vector - int for our grid
01:15 - position and then we also need to store
01:18 - the direction the snake went towards so
01:20 - let's go up here inside our snake class
01:22 - and let's define a innum for our
01:25 - direction so here are all four
01:29 - directions that the snake can move in
01:31 - and we can use that direction down here
01:36 - okay so we now have a nice simple class
01:39 - containing each snake move position so
01:41 - we can now go back up here and change
01:45 - this one instead of using a vector to
01:47 - end let's use our class snake move
01:49 - position and let's also create a
01:51 - constructor snake move position where
01:54 - we're going to receive our grid position
01:56 - and the direction so here when we are
02:03 - inserting one into the list we insert a
02:06 - new snake move position using our grid
02:09 - position and then also the direction so
02:12 - in here in order to get the direction we
02:14 - are currently only using a vector to end
02:16 - so let's make our code actually use our
02:18 - neon define you know so we replace this
02:22 - with just a direct
02:24 - by default let's set to move to the
02:27 - right as we were doing previously
02:28 - so in here let's modify this code to
02:31 - using an ohm instead of using a vector
02:32 - to end all right so instead of dealing
02:42 - with our vector to end we are now
02:44 - correctly using our in home variable and
02:47 - down here we still need a grid move
02:49 - direction or to move our grid position
02:50 - so let's define one so we get our grid
03:02 - move direction vector based on the grid
03:04 - move direction and works the same as
03:06 - previously and now we can go into our
03:08 - snake move position and I mean here we
03:11 - can actually construct it using our grid
03:13 - move direction and then we insert this
03:16 - object into this list okay so now let's
03:19 - deal with the remaining errors in here
03:26 - on our function to return the full snake
03:29 - right position list we have an error
03:30 - since this norwich contains almost a
03:32 - vector to ends so we have to go through
03:34 - this list and manually add each instance
03:36 - into this phone list okay so our code
03:42 - has now been correctly converted into
03:44 - using a actual snake move position
03:47 - object instead of just using vector two
03:49 - ends so all of that just so we can add
03:51 - another piece of information to every
03:53 - move position so we can now store the
03:55 - grid position and also the direction
03:57 - which is what we're going to need in
03:58 - order to rotate our sprite so first of
04:01 - all let's just run the code to make sure
04:02 - that we didn't break anything by
04:04 - creating this okay so here's the snake
04:06 - it's moving and yep I can still eat food
04:08 - and all the sprites are still in sin she
04:10 - ate it correctly alright great so
04:12 - everything song works well we now have
04:13 - our code nicely set up to easily fix our
04:16 - problem with the sprite rotation so here
04:18 - on the snake body parts we are updating
04:21 - the position by giving it a grid
04:22 - position so let's replace this function
04:25 - and give it a snake move position
04:27 - instead
04:41 - okay so we have modified our function to
04:44 - work with the snake move position object
04:46 - and now that we have this we can go into
04:49 - our transform and modify the Euler
04:51 - angles and again we are in 2d so we
04:55 - ignore the X dy and DZ is the one we
04:58 - need to change so now let's convert the
05:01 - direction into angles so you know let's
05:04 - also make a function to expose our
05:05 - direction and then up here we can do a
05:10 - switch on the snake move position get
05:13 - the direction so we do a switch on the
05:16 - direction by default this snake is
05:20 - pointing up so let's deal with the up
05:22 - direction so by default we set the angle
05:29 - to zero and then now let's do all the
05:31 - other directions okay so just like that
05:39 - we should have our snake correctly
05:42 - pointing in the right direction so as
05:44 - you can see we are doing a switch on the
05:45 - direction from the snake move position
05:47 - and when we simply define a Euler angle
05:50 - and we set it on our transform so let's
05:53 - see there's the food I go to it and yep
05:56 - as you can see it is correctly rotated
05:58 - to follow the snake path so let's eat
06:01 - some more all right so as you can see
06:03 - the body parts are now correctly rotated
06:05 - facing the direction that the snake was
06:07 - moving when it passed through that point
06:09 - so the rotation is working correctly but
06:12 - the corners do look quite a bit odd we
06:14 - should add a different rotation in the
06:16 - corner so they connect perfectly so now
06:18 - we need to think of what information do
06:20 - we need in order to deal with our
06:21 - corners correctly we already have
06:23 - direction that the snake is going in but
06:26 - in order to connect a corner we also
06:28 - need to know the direction that the
06:29 - previous body part went in so we need to
06:32 - store both the direction of the current
06:33 - and the previous position so here in the
06:36 - snake move position class let's add
06:37 - another field for the previous snake
06:39 - move position
06:42 - and let's modify the constructor to
06:45 - receive it now here we might have an
06:56 - issue if the previous name of position
06:58 - is known since this could be the very
06:59 - first position so let's deal with that
07:01 - in order to not get an error in here so
07:03 - if it is no then we simply return a
07:06 - default direction and if not we return
07:11 - the previous direction okay so now let's
07:13 - go all the way up here to our
07:14 - constructor okay so when we have a new
07:26 - snake move position we insert into index
07:28 - 0 so before we do that we check if we
07:31 - currently have at least one position in
07:34 - our previous position list and if so
07:36 - then we grab the one on index 0 and that
07:38 - won't become the previous ok so now we
07:40 - can go down into the snake body part and
07:43 - now we have all the information needed
07:44 - to be able to deal with corners so in
07:46 - here first we're doing a switch on this
07:48 - current position direction and now in
07:50 - here we can do a switch on the previous
07:52 - direction in order to identify the
07:53 - corners so for example let's start off
07:55 - in here so this move position is moving
07:58 - to the right so in here let's do a
08:00 - switch on the snake move position and
08:03 - get the previous direction and here we
08:08 - do a case so we were previously going
08:11 - down and then we turn to the right
08:13 - so in here all we need this to come up
08:15 - with an angle that perfectly matches
08:16 - that corner and by default we have the
08:20 - normal angle
08:27 - so let's see if this angle is now
08:29 - correct regarding a corner when the
08:31 - snake is going down and then suddenly
08:32 - switches to the right okay so here's my
08:34 - snake with a large body now let's go
08:36 - down and now when I turn to the right
08:38 - yep there you go it is correctly angling
08:41 - to the right so as you can see the code
08:44 - is correctly testing for the current and
08:46 - the previous direction all right so
08:49 - let's apply that to the other corners
09:08 - okay so here are all of our various
09:11 - directions let's see if all of them are
09:13 - rotated correctly and yep there's our
09:15 - snake and the corners are now correctly
09:17 - following the path of the snake so they
09:19 - now connect and look much better we can
09:22 - still modify the transform to make it
09:25 - look a bit better but still it works
09:27 - perfectly fine so there you have it we
09:29 - added direction to the snake body
09:31 - positions so we can rotate our sprites
09:33 - while also making sure the corners not
09:35 - great in the next video we're going to
09:37 - handle snake death and wrapping around
09:39 - on level as always you can download the
09:41 - project files in utilities from unity
09:43 - called monkey calm if you have any
09:45 - questions post them in the comments and
09:46 - I'll do my best answer them subscribe
09:47 - for more videos and I'll see you next
09:49 - time