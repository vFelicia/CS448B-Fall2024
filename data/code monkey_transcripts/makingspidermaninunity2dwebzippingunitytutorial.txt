00:00 - hello and welcome I'm your code monkey
00:01 - min de series of creating spider-man in
00:03 - unity 2d in this video we're going to
00:05 - add the ability to web zip so we can
00:07 - move around the map quickly let's begin
00:12 - okay so far we have this scene in here
00:15 - there's spider-man and some enemies I
00:18 - can move around the enemies follow me
00:20 - and I can also attack them and after
00:23 - three hits they get killed and they fly
00:25 - alright now one thing that is pre
00:28 - essential to spider-man is web-swinging
00:30 - since we were making this in top-down 2d
00:32 - we have to get creative with how we're
00:34 - going to make web based movement so
00:37 - we're going to add web zipping where we
00:39 - can place the mouse at a certain
00:40 - position and spider-man will fire a web
00:43 - towards that position and pull himself
00:45 - towards there alright so that's the plan
00:47 - let's get to it
00:48 - so first of all here on the game handler
00:51 - let's comment out this code in here that
00:53 - is spawning the enemies so we can
00:56 - implement our website and test without
00:58 - being bothered by the enemies so right
01:00 - now there's only Spider Man here okay
01:02 - great now in order to implement web
01:04 - serving I added some extra functions
01:06 - into our Spider Man base class so here I
01:09 - have a function to play the web zip
01:11 - shoot animation webs if flying animation
01:14 - and the sliding animation I also have
01:17 - two functions to get the left hand
01:19 - position and the right hand position so
01:21 - the goal is to first play the web zip
01:23 - animation at the same time fire the web
01:26 - visual from the hands towards the target
01:29 - position then when the web lands play
01:32 - the flying animation while she is flying
01:34 - towards the target position and as soon
01:37 - as he gets there play the sliding
01:38 - animation so he slides for a short while
01:40 - alright so that's a plan let's get to it
01:42 - we're first going to make everything
01:44 - work mechanically and then won't worry
01:46 - about adding the visuals so let's begin
01:48 - by getting the target position on the
01:50 - update let's add a function called
01:53 - handle web zip start let's make this
01:59 - function down here private and what does
02:03 - it start okay we're going to do a webs
02:05 - if towards the mouse position when we
02:07 - press space so in here do an if input
02:10 - dot get key down of key code space okay
02:15 - so when we press space let's first grab
02:18 - the target position so vector three for
02:20 - the web zip target
02:23 - which will be the mouse position so you
02:26 - don't wanna get emails wrong position
02:28 - let's go only to a vector3 for deer to
02:31 - target position which will be our webs
02:35 - if target position - our get position
02:38 - and our noise so now let's make a simple
02:42 - slide towards that direction now in
02:45 - order to slide let's go up here and add
02:47 - a new state and we're going to have the
02:49 - state called
02:50 - webbed zipping and in here and let's
02:53 - also store some member variables for the
02:56 - web saving direction and the target so
02:58 - make a private vector3 for the web zip
03:01 - deer and a private vector3 for the web
03:05 - zip target position okay so this is
03:12 - enough information for our first
03:13 - implementation so we can go down here
03:16 - and instead of creating these variables
03:18 - well let's use the member variables and
03:22 - then we set the states to being staked
03:25 - out web zipping all right now we go here
03:28 - onto our update and add another case for
03:30 - the new states state web zipping do
03:32 - something okay
03:33 - same here let's create a function called
03:35 - handle web zipping private draw in
03:42 - handle web zipping and in here
03:44 - let's move towards our target so we're
03:47 - going to move the transform dot position
03:49 - we're going to move it using the web zip
03:52 - dear x times a delta time and also x a
03:58 - certain web zip speed so it's defining
04:02 - here a float for the web zip speed and
04:04 - let's say a 250 m and after we move
04:07 - let's do a simple check to see if we
04:09 - have reached the target so do an if in
04:12 - vector 3 dot distance between our
04:14 - position and the web zip target position
04:18 - if distance is under 5 F then let's say
04:21 - we have reached need target so in here
04:24 - on let's set the state back to normal
04:25 - set state not okay okay so this is a
04:28 - very simple sliding movement so again up
04:32 - here we got the normal state whilst in
04:34 - the normal state we are running this
04:35 - function
04:36 - test if we should start web zipping so
04:39 - in this function we only test for the
04:40 - spacebar
04:41 - if we hit the spacebar we store the
04:44 - mouse room position which is the target
04:45 - we come like the direction to that
04:47 - target and we switch the state to web
04:50 - zipping then on the web site being state
04:52 - we have this function and this function
04:54 - defines a basic speed and moves the
04:58 - transform towards the web zip direction
05:00 - using that speed once it gets within
05:03 - five units of the web zip target its
05:05 - Emily goes back to normal right so let's
05:07 - see if all that is correct
05:08 - okay here's spider-man and if I put my
05:11 - mouse in here and I press space yep
05:14 - there you go he flew to that position so
05:16 - the flying doesn't look free correct but
05:19 - it looks a bit bad how he stops exactly
05:22 - at the target so if I points my mouse
05:24 - examining there can I hit it
05:26 - he stops instantly so let's add a bit of
05:28 - sliding to the end back in our code and
05:31 - let's go up here and make another state
05:32 - this will be the web zipping sliding
05:36 - again on the update and now the case
05:39 - state dot web zipping sliding right now
05:43 - the function handle web zipping sliding
05:52 - so now this function will slowly stop
05:54 - him before turning the state back to
05:56 - normal now we can do that very simply by
05:58 - reducing the speed that he's moving so
06:00 - instead of defining the website speed
06:02 - and here let's define it up here so a
06:04 - private mode for the web zip speed and
06:09 - we're going to set the speed before we
06:12 - change the state to the web zipping and
06:14 - we know we're gonna need this in here
06:15 - okay so before we start we set it to 250
06:19 - and then here we use that speed and now
06:21 - in here while sliding let's reduce that
06:24 - speed so do a web suppt
06:26 - speed - equals the web zip speed
06:29 - multiplied by time dot the time
06:31 - multiplied by a certain number so let's
06:34 - say 8 F so essentially every frame we
06:37 - are reducing the web's if speed so after
06:39 - we reduce the speed let's actually move
06:42 - him and then let's do a simple if the
06:46 - web sip speed if it is too low so let's
06:49 - say
06:49 - then he stops moving so get the state
06:52 - back to normal
06:54 - and on the handle web zipping let's
06:56 - increase the distance on which he starts
06:58 - sliding so he starts sliding before he
07:01 - actually reaches the target so in here
07:02 - for about 20 and in here instead of
07:05 - going to the state normal what's that he
07:07 - stayed to be state dot web zipping
07:09 - sledding all right so when we are web
07:12 - zipping we move the same as previously
07:14 - then we test for a larger distance if we
07:18 - do get within 20 units of our target
07:20 - then we set the state to web serving
07:22 - sliding which runs this function and
07:25 - here we reduce the speed every frame we
07:28 - move him forward just the same and we
07:30 - check if the speed is too low if it is
07:33 - then he goes back to normal
07:34 - so now instead of having an abrupt stop
07:36 - we should be able to see spider-man
07:38 - slowly stopping okay here we are
07:40 - and now if I move in there and I hit
07:42 - space if there are you you can see a
07:45 - nice smooth slide at the end so if I try
07:48 - to webs if in there you can see right
07:51 - before he gets there he started sliding
07:52 - and slowly stops okay good so
07:55 - mechanically everything is working now
07:58 - let's handle the various animations and
07:59 - effects so in our code on the handle web
08:02 - start let's play the flying animation
08:05 - just as we switch the state so there's
08:08 - final man base don't play the webs if
08:11 - flying animation and play towards the
08:14 - web zip dear okay so we start playing
08:17 - the flying animation then we switches
08:19 - state to web zipping so whilst we are in
08:22 - here we are flying once we stop flying
08:24 - and start sliding let's choose the other
08:27 - animation so do the spider-man base play
08:32 - the sliding animation and again towards
08:34 - the web zip dear keep that animation
08:38 - while sliding and then goes back to
08:39 - normal and the normal he goes back to I
08:41 - don't okay so let's see that okay here I
08:45 - am and if I click there yep you can see
08:48 - that he is flying and then slowly stops
08:51 - alright so the movement and animations
08:53 - are correct now the main thing we are
08:55 - missing is obviously the shooting the
08:57 - web part over here on the textures
08:59 - folder I have a web texture it is a pre
09:02 - simple texture
09:03 - that repeats itself so as you can see
09:05 - just like that you can see the import
09:07 - options we are simply pivoting on the
09:10 - right side and everything else is pretty
09:11 - normal
09:12 - so with this sprite renderer we can
09:14 - change the draw mode from simple into
09:17 - tiled and this way we can easily modify
09:19 - the width and as you can see it
09:21 - increases and the way the texture is set
09:24 - up you can see that it repeats
09:25 - seamlessly I want to extend to the right
09:28 - instead of to the left so let's simply
09:29 - flip it on the x-axis and this way here
09:32 - we are so we essentially place this on
09:34 - the hand and then increase the width so
09:37 - let's make this into a prefab so create
09:39 - a new prefab this will be the PF
09:41 - spider-man web let's drag it on there
09:45 - okay
09:46 - now we're going to need a reference in
09:48 - order to spawn it so let's simply add it
09:50 - to our game assets script in case you
09:52 - don't know this script assembly so we
09:54 - can have an object in the scene where we
09:56 - can drag references and access those
09:57 - references through code so in here I'm
10:00 - going to simply add a public transform
10:02 - for the PF spider-man web and back in
10:07 - the editor I simply drag the prefab okay
10:09 - so now let's go back into the spider-man
10:11 - code and first let's just test out
10:14 - spawning the web so into the webs if
10:17 - start let's comment out the code to
10:19 - actually start whipping living in this
10:22 - state okay so in here let's try spawning
10:26 - the web so I'm going to do a transform
10:28 - for the spider-man web and I'm going to
10:31 - instantiate I'm going to go into the
10:34 - game assets that instance and grab the
10:37 - spider-man web prefab I'm going to
10:40 - instantiate it on the hand position so
10:43 - let's go into the spider-man base and
10:45 - get the hand left position okay and
10:48 - quaternion dot identity so let's
10:51 - calculate the direction from this hand
10:53 - so a vector three for the web deer which
10:58 - will be the web sip target position mine
11:01 - is this hand position instead of the
11:03 - spider-man position and then normalize
11:06 - the whole thing
11:09 - then let's set the rotation to the
11:12 - spider-man web not the owner angles new
11:15 - vector3 return zero zero and then
11:17 - calculate the angle so go into the utils
11:19 - class get the angle from float and give
11:22 - it the web there all right and finally
11:25 - we need to set the correct size so in
11:28 - the spider-man web get the component of
11:31 - type sprite renderer and set the size to
11:35 - be a new vector to right now we wanted
11:38 - to show the complete distance so let's
11:40 - do a vector three dot distance between
11:42 - the hand position so spider-man base get
11:46 - hand left position towards the web zip
11:51 - target position so when the X we're
11:54 - going to have the full distance between
11:56 - the hand and the target and for the Y
11:59 - and let's leave it at the same y so use
12:02 - the size all right so very simply we are
12:06 - in Senshi ating the spider-man web
12:08 - prefab we calculate the direction
12:10 - towards the target from the hand
12:12 - position then we simply rotate the web
12:15 - using that direction and we set the size
12:18 - to be the complete size by calculating
12:20 - the distance from the hand towards the
12:22 - target and using the same y so let's
12:25 - test and see if we have a web going from
12:27 - the hand to the target position so in
12:30 - here if I press space yep there's the
12:32 - web because I'm only going from the hand
12:34 - towards the target okay we're now before
12:36 - we animate the web we actually have to
12:38 - use the base animation of the spider-man
12:41 - actually firing the web so we have to go
12:44 - up here and essentially create a state
12:46 - so we don't go back to idle by the
12:48 - handle movement so let's go up here and
12:51 - make a state web zipping story and in
12:56 - here case webs have been starting and
13:00 - we're simply going to do nothing this
13:02 - meant beach is a time between the firing
13:04 - the web and until the web reaches its
13:06 - target
13:07 - so in here let's at the state - and now
13:13 - in here do spider-man base and play the
13:15 - animation
13:16 - of web zip shoot and we're going to
13:20 - shoot towards the web zip deal okay so
13:24 - now if I press space yep there you go he
13:27 - switched the animation and spondee well
13:29 - okay now it's finally animate the web so
13:32 - in here I'm going to do the simplest
13:34 - animation possible but later on we're
13:36 - going to refactor the code to make
13:37 - things more clean but for now let's do
13:40 - it in the most obvious way so let's use
13:43 - the function of theta which again part
13:45 - of the code monkey utilities that you
13:46 - can grab for free from in T code monkey
13:48 - calm and I'm going to create and
13:50 - essentially the function of theta allows
13:52 - me to trigger an action every update so
13:55 - this is perfect for easily animating our
13:58 - web and I'm here let's begin by
14:00 - capturing a reference to the sprite
14:03 - renderer so sprite renderer for the
14:05 - spider-man web sprite renderer and let's
14:12 - actually grab the reference outside of
14:14 - the update okay well it's also calculate
14:17 - a new vector2 for the web zip start and
14:21 - this will be new vector2
14:23 - and again this is the start so we start
14:26 - off at zero and then use the same size
14:29 - dot line and then for the web zip end
14:36 - will be the distance between the left
14:39 - hand and the target position okay so
14:42 - this is a start in the end let's set the
14:45 - sprite renderer dot size to be on the
14:48 - web's if start and up here we can remove
14:52 - this all right and the last thing we
14:55 - need is a float for the time to reach
14:58 - target which we're going to start at
15:00 - zero so using all that we can simply do
15:03 - a alert so do the spider-man web sprite
15:06 - renderer dot size equals a vector $2
15:10 - we're going to mark it from the web sip
15:13 - start to the web zip end and using time
15:18 - to reach the target and before we do
15:21 - that let's increase the time to reach
15:23 - target by time.deltatime
15:26 - multiplied by a certain value
15:28 - say about eight okay and finally let's
15:32 - simply do if time to reach target if it
15:36 - is bigger than 1f then he has reached
15:39 - the target so in here let's do a return
15:41 - true which won't automatically destroy
15:43 - the function updater
15:44 - and if not let's return a false and keep
15:47 - updating okay so now we should see the
15:50 - web flying towards the target okay so
15:52 - here i am i put my mouse in here and I
15:55 - hit space yep there you go the web went
15:58 - and it stopped as soon as it reached the
16:00 - target so goes an example like that
16:02 - alright good so now all we need is to
16:06 - start website and while fine we're going
16:08 - to modify the size of the web so first
16:11 - things first when it actually reaches
16:13 - the target that's when we want to start
16:14 - web setting so this codon here that's
16:16 - what we want to use up here so in here
16:21 - start flying so let's see if spider-man
16:25 - starts flying once the web reaches the
16:27 - target okay here I am I press there and
16:30 - yep as you can see he starts flying as
16:33 - soon as the web reaches start so first
16:35 - he fires the web web gets there start
16:37 - flying and keep flying alright good so
16:39 - now that we are flying we need to deal
16:41 - with the size of the web one sectionally
16:43 - flying so first we need to store the
16:45 - insensate prefab as a member variable so
16:49 - we can modify it so let's go up here
16:51 - make a private transform for the
16:53 - spider-man web and that's what we're
16:57 - going to use in here instead of a local
16:59 - variable okay and now while flying which
17:01 - is in this function right here after we
17:04 - move our transform let's update our web
17:06 - so the first thing is that the
17:08 - spider-man web dot position and we want
17:11 - to reposition it again to be on top of
17:13 - the hand so the position will be the
17:15 - spider-man base not get the hand left
17:18 - position so we have reposition it and
17:21 - now we're going to need to make sure the
17:24 - rotation is correct so there you go
17:26 - rotate it from this position towards the
17:29 - website are you all right and finally we
17:31 - need to set these signs
17:37 - so here I grab a reference to the sprite
17:40 - renderer on the web and we calculate the
17:42 - size to be the exact distance between
17:44 - the hand left position and the web zip
17:48 - target so on every frame the web won't
17:50 - have the exact size and when we actually
17:53 - reach a target when we start sliding and
17:55 - let's actually destroy our web so do
17:58 - this drawing on the spider-man web that
18:03 - game object alright so let's see if the
18:05 - web now correctly stays link between the
18:08 - hand and the turret
18:09 - okay here I am put my mouse in here
18:11 - press space if there are yo as you can
18:14 - see he fires once he gets there he
18:16 - starts falling and he goes and just like
18:18 - that I can now zip around and web does
18:22 - look pretty correct okay so the only
18:24 - thing we are missing is to actually add
18:26 - a web to both hands so let's go up here
18:29 - and rename the spider-man web to be
18:32 - spider-man web left and add another 140
18:35 - right here we are set up web left then
18:40 - we're going to do a set up web right
18:44 - instead of using that we use the right
18:46 - and so on when we get there and let's
18:55 - destroy both of them the left and the
18:58 - right okay and on start instantiate the
19:01 - left and made it and let's copy-paste
19:04 - and do the same thing for the right
19:25 - all right so here I am and now if I put
19:28 - the mouse in here now press space yep
19:30 - there you go he fired two webs then he
19:32 - pulled himself towards there any far and
19:34 - now I can slide it around and move
19:37 - around as many times as I want and once
19:39 - I get there I can still move normally so
19:41 - move normally then web zip move web zip
19:44 - and so on so there you have it we added
19:47 - web zipping to our Spiderman so we can
19:49 - move around fast throughout the map as
19:51 - always you can download the project
19:53 - files in utilities from unity code
19:55 - monkey comm if you have any questions
19:57 - post them in the comments and I'll do my
19:58 - best to answer them subscribe for more
20:00 - videos and I'll see you next time