00:00 - hello and welcome I'm your code monkey
00:02 - I've been making videos on this channel
00:03 - for over four years now I've covered
00:05 - tons and tons of topics in over 600
00:07 - videos one thing that I made sure to
00:09 - always do since the very beginning is
00:10 - read through all the comments every
00:12 - single day and answer as many questions
00:13 - as I can I've probably answered
00:15 - thousands of questions usually I reply
00:17 - directly to the person but if at least
00:19 - one person has a question then chances
00:20 - are there's more people wondering the
00:22 - same thing so here let's see some
00:23 - interesting questions that I answered
00:24 - that maybe you'd also like to know the
00:26 - answer to I've already done a bunch of
00:27 - these videos check out the entire policy
00:29 - see some more questions hopefully you'll
00:31 - learn quite a lot by seeing what others
00:32 - are asking starting off with a simple
00:34 - but very important question from my
00:36 - pathfinding video I have to say this is
00:38 - still one of my favorite videos I really
00:40 - love the debug Vision that I created to
00:42 - be able to see the algorithm working
00:43 - step by step and learning the algorithm
00:45 - is something that almost feels like
00:47 - magic how you just follow a few steps
00:49 - and somehow the code knows how to find
00:50 - the shortest path to a certain point
00:52 - anyway so in the video it's teaching a
00:54 - sound pathfinding and for that I created
00:56 - a path note hold some data for each path
00:58 - node specifically always available is
01:00 - including the algorithm which are the
01:02 - gcos H cost and F cost and I just
01:04 - defined them as ends then the question
01:06 - comes from a town who asks why doesn't
01:08 - the calculation for the F cost why does
01:10 - that not throw an error it looks like it
01:12 - should throw an error because the H cost
01:13 - which is used in the calculation has not
01:15 - been initialized now perhaps you might
01:17 - already know that ins do not need to be
01:19 - initialized but you might also not know
01:21 - exactly why I actually made a full video
01:23 - on this topic basically it has to do
01:25 - with difference between value types and
01:26 - reference types Valley types are the
01:29 - basic types kind of like in float ball
01:31 - and so on basically there are times
01:32 - where you make a variable and the data
01:34 - is stored directly in that variable and
01:37 - then you have reference types like for
01:38 - example a class where if you make a
01:40 - variable that variable does not actually
01:42 - store the class data directly instead it
01:45 - only stores a reference which points to
01:46 - the class data basically the big
01:48 - difference is reference types can be
01:51 - known whereas Valley types cannot if you
01:53 - define a value type like an INT and you
01:54 - do not give it a value then it defaults
01:56 - to 0 or 0 equivalent so if you define a
01:59 - float it defaults to 0f if you define a
02:01 - ball it defaults to false and if you
02:03 - define a struct which is a value type
02:05 - all of the fields are initialized to
02:06 - their default these value types can
02:08 - never be known although quick note
02:10 - alternatively c-sharp also has the null
02:12 - gone class which you can use if you want
02:14 - to make something like an end make it
02:15 - nullable but Valentines by themselves
02:17 - can never be known whereas if you make a
02:19 - variable of a reference type like for
02:21 - example some sort of class if you don't
02:23 - assign it to anything then it will
02:24 - default to know and then of course if
02:26 - you try accessing that reference then
02:27 - you have the usual down reference
02:29 - exception also made a really nice video
02:31 - on my four-step process for solving
02:33 - every null reference exception so this
02:35 - question is very interesting because it
02:36 - brings about that difference between
02:37 - value and reference types learning about
02:39 - this difference is extremely important
02:40 - so if this is the first time you're
02:42 - hearing about it definitely go watch the
02:44 - full video explaining it this next
02:46 - question was posted in my turn-based
02:47 - strategy course it's on the Move action
02:49 - lecture the game is all about action so
02:51 - there's a move action shoot action
02:53 - interact action and so on and each
02:55 - action has a function to get a list of
02:57 - value great positions for example for a
02:59 - move action they are all of the Wonka
03:01 - Bon grid positions within a certain
03:02 - distance of the unit then the question
03:04 - comes from Drake dude who starts off by
03:06 - saying that the useful pin lists to
03:08 - every variable both owned by co-workers
03:10 - to stop that and instead go with the
03:12 - plural name and also somewhat related is
03:14 - that it can be first simplified by using
03:16 - the Evar keyword so you don't have to
03:18 - declare the phone variable type now let
03:20 - me start my answer by saying that naming
03:22 - rules can be whatever you want them to
03:24 - be my rules aren't necessarily better
03:26 - than someone else's rooms as long as you
03:28 - are consistent that is what matter most
03:29 - when you come comes to naming rules with
03:31 - that said for me the reason why in my
03:33 - variable names with the time
03:34 - specifically when it comes to enlist
03:35 - array is because I just got tired of
03:37 - having constant errors and having lots
03:40 - of trouble debugging all of it because
03:41 - the difference between valid grid
03:43 - positions and value grid position that
03:45 - difference is super small at a glance
03:47 - you really can't see the tiny s so you
03:49 - might look at the code and everything
03:50 - seems right but you really need to look
03:53 - very intensely in order to actually see
03:54 - that difference as an example look at
03:56 - this code and this code now go ahead
03:58 - find all the references of a single grid
04:00 - position and references to the grid
04:01 - positional list to me it is very clear
04:03 - that it is much much easier to find the
04:06 - list with the proper log name it is very
04:08 - easy to see that as a glance your brain
04:10 - sees it within 100 milliseconds there's
04:11 - no need to stress your eyes so that is
04:13 - my main reason adding a plural is too
04:16 - small a change whereas setting the type
04:18 - at the end makes the code much much
04:19 - easier to read for me after going
04:21 - through a lot of frustration I just
04:23 - decided to make it a personal rule to
04:24 - include the phone type name at the end
04:26 - and to never ever use plurals however
04:29 - here Drake dude also makes a good point
04:30 - if you write a type in the variable name
04:33 - and then you change the type then all of
04:35 - a sudden your code is wrong the variable
04:37 - name says list but it's really an array
04:38 - or a hash point or something like that
04:40 - so doing that can make the code hard to
04:42 - read that is definitely a valid point
04:44 - but nowadays all IDs have easy renaming
04:47 - functionality on Visual Studio you just
04:49 - press Ctrl RR and it automatically
04:51 - renames the symbol and every single
04:53 - reference to it so if you do change the
04:55 - time just take another second to quickly
04:57 - change the name and as for the second
04:59 - question inside this question why not
05:00 - use VAR to simplify the code again my
05:03 - answer is the same thing it's code
05:04 - readability I want my code to be as
05:06 - explicit as possible I don't want to
05:08 - obfuscate my code in such a way that it
05:10 - cost me an extra second to understand
05:12 - what it's doing always remember that
05:14 - code is only written just once but it's
05:16 - read many many more times so to me using
05:18 - VAR to simplify writing the code at the
05:21 - cost of code readability really doesn't
05:22 - make much sense although some of you
05:24 - might say when initializing a variable
05:25 - the type is right there on the right
05:27 - side so in that specific use case sure I
05:30 - guess using VAR doesn't cause too much
05:31 - harm but if you use it to grab the
05:33 - return value of something then all of a
05:35 - sudden the code moves a ton of read
05:36 - about it you need to dive into the
05:38 - function to see what type of the returns
05:40 - this is actually something that I really
05:41 - didn't like about the NT documentation
05:43 - on a bunch of places they like to use
05:45 - VAR so you read documentation of
05:47 - something for example like dots and you
05:49 - see code calling a function and sorting
05:50 - it in a VAR just by looking at that you
05:52 - have no idea what that variable ring is
05:55 - it an object of type A or type B is it a
05:57 - list array in boom there's no way of
05:59 - knowing without going through the entire
06:00 - documentation to find the return value
06:02 - of that function so I don't like VAR for
06:04 - the same reason that I don't like
06:06 - plurals in most cases it reduces code
06:08 - read value but again as I said in the
06:10 - beginning let me point out that living
06:11 - rules are personal so choose whatever
06:13 - works for you if you find that VAR and
06:15 - plurals do not hurt your Dev process
06:17 - then by all means use them of the rules
06:19 - that I have were developed over time as
06:20 - I write code and learn what first for me
06:23 - so find what rules make sense to you and
06:25 - then be consistent in following them
06:26 - this next question comes from my video
06:28 - explaining what is Json if you don't
06:31 - know it's a widely used text Data format
06:33 - that is really easy to understand and
06:35 - since it's so popular pretty much every
06:36 - single API uses it this question comes
06:39 - from ShoSho who asks since this is all
06:41 - text based doesn't that mean that the
06:43 - data can be easily manipulated by anyone
06:45 - and the answer is yep it can Json is not
06:48 - intended for encryption it is
06:49 - intentionally meant to be human readable
06:51 - and easily editable that's a feature
06:53 - it's not a bug now of course if you'd
06:55 - like you can try to encrypt it I mean
06:57 - it's just text or just by so you can use
06:59 - whatever encryption Library you want but
07:01 - in most cases only the game development
07:03 - you probably don't need to worry about
07:04 - it for example one topic related to this
07:06 - is with regards to save files I've also
07:09 - covered how to make a simple and safe
07:10 - system in another video and in there I
07:12 - use Json as the file format in that
07:14 - video I got some comments saying this
07:15 - means the player could easily edit the
07:17 - save file to give themselves a ton of
07:18 - free resource and yep that is correct my
07:21 - approach to that is really pretty simple
07:22 - if you you're working on a single player
07:24 - game then don't try to stop the player
07:25 - from cheating it's their game they're
07:27 - playing by themselves so if they want to
07:29 - give themselves a ton of cash or some
07:30 - superpowers then let them on the other
07:32 - hand if you are making a multiplayer
07:34 - game then yes you should teaching very
07:36 - seriously but in that case you should
07:37 - never trust the client at all regardless
07:39 - of whatever file format you want in
07:41 - multiplayer never trust the client one
07:43 - example of how widely used Json is is on
07:46 - the videos where I covered Azure and
07:47 - some cloud-based mechanics in there I
07:49 - use Json to communicate with a web API
07:51 - to store some data or run some logic
07:53 - it's really easy to define a struct with
07:55 - all data that I want to send then just
07:57 - use unity's built-in Json eternity to
07:59 - convert all that adding to Json and on
08:02 - the server side also use another Json
08:03 - utility to read back into a struct and
08:05 - easily understand it so Json is an
08:08 - excellent super easy to use format that
08:10 - is widely used in tons of things
08:11 - definitely learn about it and use it
08:13 - whenever you need to save some
08:14 - structured data very easily alright so
08:17 - those are a bunch more of your questions
08:18 - and my answers to them I hope you'll
08:20 - learn something new check out the entire
08:21 - playlist to see some more interesting
08:22 - questions I've already answered
08:24 - thousands of questions so stay tuned for
08:26 - more videos like this so you can learn
08:27 - from what others have asked alright hope
08:30 - that's useful check out these videos to
08:31 - learn some more thanks to these awesome
08:33 - patreon supporters for making these
08:35 - videos possible thank you for watching
08:37 - and I'll see you next time
08:41 - foreign