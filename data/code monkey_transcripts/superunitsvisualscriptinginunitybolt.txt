00:00 - in this video we're going to learn what
00:01 - are super units in bolt which is unity's
00:04 - official visual scripting tool
00:06 - they allow you to essentially create
00:07 - little modules with custom inputs and
00:09 - outputs
00:10 - that you can then reuse in your various
00:12 - visual scripts let's begin
00:16 - [Music]
00:21 - hello and welcome i'm your code monkey
00:23 - and this channel is all about helping
00:24 - you learn how to make your own games
00:26 - with
00:26 - in-depth tutorials made by a
00:27 - professional indie game developer so if
00:29 - you find the video helpful consider
00:31 - subscribing
00:32 - okay so a while ago i did a video
00:34 - covering the basics of visual scripting
00:36 - in unity
00:36 - that video covers a quick getting
00:38 - started so if you haven't seen it yet
00:40 - check the link in the description
00:41 - at the end of that video i asked what
00:43 - you would like to see and lots of
00:44 - comments said a complete game so that's
00:46 - what i've been working on
00:47 - now right away as i started looking into
00:49 - how to make a complete game i came
00:51 - across a need to organize my visual
00:52 - scripts
00:53 - and that's when i ran into super units
00:56 - super units are essentially functions
00:58 - that you can create
00:58 - in visual scripting you can define
01:00 - custom inputs and outputs
01:02 - and then reuse that super unit in other
01:04 - visual scripts
01:05 - this video is made possible thanks to
01:07 - these awesome supporters go to
01:08 - patreon.com
01:10 - unitycodemonkey to get some perks and
01:12 - help keep the videos free for everyone
01:14 - alright so let's try it out as a demo i
01:16 - have this very basic setup
01:18 - so this is meant to be my character and
01:20 - it's meant to be in a top-down shooter
01:22 - so the first thing i want is for this
01:24 - character to look when i move my mouse
01:27 - so we're going to first make the visual
01:29 - script to look at the mouse
01:30 - and then we're going to see how we can
01:31 - convert that into a super unit in order
01:33 - to keep our player macro nice and
01:35 - organized
01:36 - okay so let's make our player visual
01:38 - script
01:39 - now first select the player and add
01:41 - component and we're going to add a flow
01:43 - machine
01:44 - then here we have film for macro so
01:46 - let's create new
01:47 - and let's call this the player macro
01:50 - alright so here's the flow graph
01:52 - so the first thing we need is the mouse
01:54 - position now we can grab the mouse
01:56 - position with the node
01:57 - input mouse position so this outputs a
02:00 - vector 3
02:01 - with the mouse position and here for
02:03 - testing just to see what value comes out
02:04 - of here
02:05 - we can connect this and let's connect to
02:07 - analog node
02:08 - right so just a basic debug log and we
02:10 - connect it to our update
02:12 - okay let's test and yep here we can see
02:14 - the vector3 that is being outputted by
02:16 - this input mouse position
02:18 - and as i move the mouse around the scene
02:19 - you can see that it moves
02:21 - so if i'm on the lower left corner you
02:23 - can see the vector3 is pretty much on
02:25 - zero zero
02:26 - and up here on the upper right corner
02:28 - it's essentially at the size of this
02:30 - window
02:30 - so in this case 800 by 400 pixels
02:33 - however as you can see that is the
02:35 - screen position not the world position
02:37 - so we need to convert that now the way
02:39 - we can convert that
02:40 - is by adding the node screen
02:43 - to world point let me just right click
02:46 - here in order to make this full screen
02:47 - so we have a bit of a working area
02:49 - and again here on the graph inspector we
02:51 - can see exactly what this does
02:53 - so it transforms a point from screen
02:54 - space into world space
02:56 - and the inputs are the basic flow it
02:58 - inputs a screen space position
03:00 - and it also takes a camera so in this
03:02 - case we need to grab the main camera so
03:04 - we get the main camera connected into
03:05 - down
03:06 - then for our flow we connect into this
03:08 - flow and for the position we use our
03:11 - mouse position
03:12 - alright so this should be correctly
03:14 - calculating the worm position based on
03:16 - the mouse position
03:17 - okay let's see the script here we can
03:19 - visualize all the flow
03:21 - and we can see on the left corner yep in
03:23 - there we can see the
03:24 - screen position and in there we can see
03:26 - the world position
03:27 - now the character is on zero zero and if
03:29 - i go there yep there you go it's pretty
03:30 - much on zero zero
03:32 - okay so it seems we have a correct one
03:33 - position however in there you can see
03:35 - that the z
03:36 - is at -10 that is u2 where the camera is
03:39 - positioned
03:40 - so when dealing with our math we really
03:41 - want the set to be at zero so let's fix
03:43 - that
03:44 - here we can just drag our vector3 and
03:46 - click on vector3 and let's expose the
03:48 - entire vector3
03:49 - and in this case we want to take the x
03:51 - and y and set these add to zero
03:53 - so afterwards let's make a new vector3
03:56 - so we just use this connect the x
03:57 - connect the y and there you go here we
03:59 - have our output
04:00 - so let's drag this one here this one
04:02 - here connect the flow in there and the
04:04 - flow in there
04:05 - all right so our output should be the
04:07 - world position of the mouse
04:09 - with the z set to zero and here we can
04:12 - see all of our nodes that work
04:14 - all the flow going from left to right
04:16 - and we can indeed see that our position
04:18 - on the output in here it is indeed
04:19 - correct so right down middle is on 0 0
04:22 - 0. so with this we have all the nodes
04:24 - that we need in order to get the mouse
04:26 - warm position
04:27 - and it all works perfectly however we
04:29 - have all these nodes inside of our main
04:31 - player macro
04:33 - so if we keep this up then at the end
04:35 - this visual script will become
04:37 - completely massive by the time we add
04:38 - everything
04:39 - so that's where super units come in now
04:42 - there are two ways we can do this
04:44 - so here we can right click go into
04:46 - nesting
04:47 - and create a brand new super unit and
04:50 - here is the node and we can double click
04:52 - on it
04:52 - and there you go we go inside our super
04:54 - unit so this is one way
04:56 - and doing it this way it gets saved
04:58 - directly inside of our first graph
05:01 - so up here we can see where we are so we
05:03 - are inside player and then inside the
05:05 - super unit
05:07 - so if you click on the player we go back
05:09 - upwards one
05:10 - level so if you have some behavior that
05:12 - you only use inside a single macro this
05:15 - would be one good way to do it
05:17 - however if you want to reuse some
05:18 - general behavior you should go with the
05:20 - second method of making a proper
05:22 - separate macro
05:23 - so in this case this is some pre-general
05:24 - behavior so let's do that
05:26 - here in the project files i have the
05:28 - macros folder
05:29 - and let's simply create a new bolt
05:32 - create a new flow macro
05:33 - and let's call this the get mouse world
05:36 - position
05:37 - and now let's copy all the nodes that we
05:39 - developed in here so let's copy all
05:41 - these
05:42 - select the get module on position here
05:43 - we are in this flow graph and just paste
05:45 - our nodes
05:46 - okay so we have our super node and now
05:48 - if we go back into the player macro
05:50 - let's delete all of these nodes and
05:53 - instead
05:54 - let's just drag our getmouser on
05:55 - position macro and drop it in here
05:57 - and yep it gets added as a super unit
06:00 - all right so far so good
06:01 - however right now this super unit isn't
06:04 - doing anything
06:05 - now in theory it's grabbing the mouse on
06:07 - position but right now there's no flow
06:09 - input and no flow output so we can't see
06:11 - anything
06:12 - so let's go back into our super unit and
06:14 - in here you can also see that all of our
06:16 - nodes are dim
06:17 - meaning they are not being run so in
06:19 - here let's add a new unit
06:21 - go into nesting and we're going to add
06:23 - an input node
06:24 - so here's the input which again as the
06:26 - tooltip says fetches input values from
06:28 - the parent super unit for this graph
06:31 - and in here on the graph inspector we
06:33 - can add some settings
06:34 - so we have control inputs and value
06:36 - inputs now let's first add the control
06:38 - inputs
06:39 - and we need a key which is a unique name
06:41 - so in this case let's just call it enter
06:43 - so this will be our interflow and just
06:45 - hide the label since this is
06:47 - just a basic flow port and then down
06:49 - here we can also add some input values
06:51 - now in this case we don't care about any
06:53 - input values all we care about is the
06:55 - input flow and then we're going to work
06:57 - on some output values
06:59 - now here visually on the input we can
07:00 - already see that we have a flow input
07:02 - and this is what we're going to connect
07:04 - in order to make our code run all right
07:06 - so now for the outputs
07:07 - again let's add a unit let's go down
07:09 - into nesting and add an
07:11 - output node so this passes output values
07:13 - from this graph to the parent super unit
07:15 - and first we add a flow output
07:18 - so in this case let's call it exit and
07:20 - again let's hide the label
07:22 - and now in this case we're also going to
07:23 - have a value output so let's click on
07:25 - this
07:26 - now for the key let's call it our world
07:28 - position and now we need to select the
07:31 - type
07:31 - so in this case we're going to output a
07:33 - vector 3.
07:34 - so just select factor 3 and yep there it
07:36 - is so here's our output node and we just
07:38 - connect the ports
07:39 - pretty simple all right so just like
07:41 - this now our nodes are all correctly set
07:43 - up so we have a self-contained macro
07:45 - with our inputs and
07:46 - outputs and now we can go back outside
07:49 - in order to visualize the player macro
07:51 - and in here we can already see the super
07:53 - unit yep it has an
07:54 - input and two outputs so we connect the
07:57 - update into this input
07:59 - and on the output let's just connect it
08:01 - directly in there all right so there it
08:03 - is
08:03 - so everything should be working let's
08:05 - test and yep everything is working
08:07 - perfectly
08:08 - so we have our update event passing in
08:10 - the flow into our super unit
08:12 - then the super unit does its thing and
08:14 - it outputs our desired one position
08:16 - vector
08:16 - which then goes into the log just so we
08:18 - can see it so as i move the mouse around
08:20 - yep you can see that it does indeed
08:21 - output the milestone position
08:23 - all right so that's the basics for super
08:24 - units essentially you put behavior on
08:27 - its own unit
08:28 - so that you can then compose multiple
08:30 - complex units into one complete unit
08:33 - okay so let's expand upon it we have the
08:35 - mouse run position
08:36 - now let's rotate the player towards that
08:38 - so we need a couple more notes
08:40 - so the first thing we need is to
08:42 - calculate the direction so for the
08:43 - direction
08:44 - we take the world position then we're
08:47 - going to add a subtract node
08:49 - and we're going to subtract it from the
08:50 - actual player transform position we get
08:54 - the transform position and we use this
08:55 - one in there
08:57 - all right so over here we have direction
08:59 - then with the direction we want to
09:00 - normalize it so just drag this
09:03 - and we can use the normalize
09:07 - okay so we should have a direction
09:09 - normalized
09:11 - so again let's test
09:14 - and up here we can see our normalized
09:16 - direction so as the mouse is on the
09:17 - right
09:18 - if there you go one zero zero and if
09:20 - it's above zero one 0 all right great
09:22 - so we have direction here now we need to
09:24 - convert it into an euler angle
09:26 - so for that we can use a new node go
09:29 - into math
09:30 - and we're going to use the attan 2.
09:34 - now here we need the x and the y so
09:36 - let's split this vector
09:42 - all right here we have the tan two so
09:44 - this will give us the angle in radians
09:47 - now let's convert it into degrees
09:53 - so take the math read to degree multiply
09:56 - it by our radians
09:57 - and yep over here we have our euler
09:59 - angles and now in here we can just
10:01 - simply apply it
10:02 - so the node transform euler angles
10:12 - okay so we create a new vector 3 with
10:14 - our euler angle rotation on the zen
10:16 - since we're working in top down 2d and
10:18 - we just apply it to the transform oiler
10:20 - angles
10:21 - alright so just like this our character
10:23 - should be looking at the mouse
10:24 - let's test and yep there it is there is
10:27 - indeed the character is pointing towards
10:28 - the mouse so as i move the mouse
10:30 - yep the character rotates alright
10:32 - awesome
10:33 - so you can see everything is fully
10:34 - working but you can also see
10:36 - all the tons of nodes that are required
10:38 - to make this work so if this one wasn't
10:40 - inside of a super unit this would be
10:42 - even more notes
10:43 - so once again let's clean it all up with
10:45 - another super unit
10:46 - so let's create go into bolt create a
10:49 - new flow macro
10:50 - let's call this get angle from vector
10:53 - and we're going to copy over here these
10:54 - ones to convert the vector into an angle
11:02 - now once again let's set the inputs and
11:12 - outputs
11:16 - so yep there it is we have an input with
11:18 - an input following input vector
11:20 - then we do our calculations and we have
11:22 - an output with an output flow and the
11:23 - output angle
11:24 - and now back in our player macro once
11:26 - again let's get rid of all this
11:29 - and instead let's drag the get angle
11:30 - from vector
11:32 - we input the flow and put our normalized
11:34 - direction vector
11:35 - and then the output outputs the flow and
11:37 - the output angle
11:42 - all right let's test and yep everything
11:44 - still works perfectly
11:46 - so just like this you can see how useful
11:48 - super units are they help you manage
11:50 - complexity as your visual scripts become
11:51 - more and more complex
11:53 - if we then use super units then this
11:55 - player script would have been massive
11:57 - however using them we're using one in
11:59 - order to get the milestone position
12:00 - and another one to calculate the angle
12:02 - from a vector
12:03 - so with that all this relatively complex
12:06 - behavior fits in just a handful of nodes
12:08 - and again we can reuse this on anything
12:10 - so on any other visual script where we
12:12 - need to get the mouse on position
12:13 - yep we can reuse this super unit and
12:16 - whenever we need an angle from vector we
12:18 - can use this one
12:19 - you could take it one step further and
12:20 - just group all these into another super
12:22 - unit by calling it something like rotate
12:24 - transform towards mouse position
12:26 - alright so these are super units an
12:28 - excellent tool to help you manage
12:29 - complexity when using visual scripting
12:32 - this is the main way that can help you
12:33 - build complex scripts without making the
12:35 - whole thing a massive spaghetti code
12:37 - alright so with this covered i'm going
12:39 - to continue working on making my top
12:40 - down shooter completely without using
12:42 - any code
12:43 - if you found this video helpful consider
12:45 - liking and subscribing this video is
12:46 - made possible thanks to these awesome
12:48 - supporters
12:49 - go to unity patreon.com monkey to get
12:52 - some perks and help keep the videos free
12:53 - for everyone
12:54 - as always you can download the project
12:56 - files and utilities from
12:57 - unitycodemonkey.com
12:58 - subscribe to the channel for more unity
13:00 - tutorials post any questions having
13:01 - comments and i'll see you next time
13:08 - you