00:00 - in this video we're going to make a heat
00:01 - map to help display information to the
00:03 - player we're going to expand upon the
00:05 - grid map we made in the previous video
00:07 - and use a custom mesh to dynamically
00:08 - update our heat map let's begin
00:14 - [Music]
00:18 - hello and welcome I'm your code monkey
00:20 - and this channel is all about helping
00:22 - you learn how to make your own games
00:23 - with nf2 torrents made by a professional
00:25 - indie game developer so if you find the
00:27 - video helpful consider subscribing okay
00:29 - so here we are and this is what we want
00:31 - to make we have a nice scene here and
00:33 - looks like it's completely empty and
00:35 - just with a applied texture however when
00:37 - I click on the mouse yep there it is I
00:40 - play something which modified the
00:42 - underlying grid and divisional display
00:44 - so I can click with the mouse button in
00:46 - order to impact the underlying grid
00:48 - which then impacts the visual and as you
00:50 - can see the visual where it's clicked
00:52 - it's red and as it gets towards the
00:54 - edges it becomes red and where the value
00:57 - is zero it becomes black so the color is
01:00 - smoothly interpolated based on whatever
01:02 - value is underneath now I have enable
01:05 - debug visuals so we can see the
01:07 - underlying shape and families of the
01:08 - grid and you can see that when I click
01:10 - the valley's change individual also
01:12 - changes so right down the middle you can
01:14 - see that it has 100 which is the maximum
01:16 - value as it gets towards the edges it
01:18 - continually goes down until it reaches
01:20 - zero an example of something like this
01:23 - used in a complete game is the park
01:24 - environment system in battle morale pack
01:26 - unit in the game you can place objects
01:28 - to improve the park environment and each
01:30 - of them has a radius and an effect they
01:32 - cost so when I place an object the
01:34 - environment updates and increases the
01:36 - underlying value in a nice diamond
01:37 - pattern so this is an example of a
01:40 - system like this being used in a final
01:42 - game all right so this is our goal let's
01:45 - get to it ok so here we are in our scene
01:48 - where we have just a simple background
01:50 - texture also in here on the scripts
01:52 - folder I have the grid class that we
01:54 - created in a previous grid map video if
01:56 - you haven't seen that one yet there's a
01:58 - link in the description in that video we
02:00 - go through the creation of the grid
02:01 - class which we are now going to use as a
02:03 - base to create our heat map the grid
02:06 - class is already based on ends which is
02:07 - exactly what we want to use here so
02:09 - making this effect should be relatively
02:11 - simple
02:12 - so let's first start off by making sure
02:14 - our grid class works so we're going to
02:17 - create a new script let's call it
02:18 - testing and here make a new game object
02:21 - call it testing and drag the script onto
02:24 - it ok now in here let's make a
02:28 - privately start and in here let's create
02:31 - a grip so we do bread make a new grid
02:35 - passing the width and the height so
02:37 - let's pass in with a 20 height of 10 now
02:41 - we pass in the cell size let's say 10
02:43 - and the origin let's put it at vector
02:45 - 3.0 all right so let's see what this
02:48 - does and here we are and yep there it is
02:51 - our full grid map with a width of 20 and
02:54 - a height of 10 right awesome we have
02:58 - text objects being created which show
02:59 - the underlying values and using gizmos
03:02 - we are enabling to show the edges of
03:04 - each grid so again all this was fully
03:07 - created from scratch in a previous video
03:09 - so check that out if you haven't already
03:11 - all right now that we can see our
03:13 - starting grid let's think about what
03:15 - we're going to need in order to make our
03:16 - heat map the first thing we want is make
03:19 - sure our grids underlying value stay
03:21 - inside a valid range so let's go into
03:24 - our grid class here it is now we have
03:27 - our simple constructor which is you can
03:29 - see we receive with height a cell size
03:31 - and the origin position then over here
03:34 - we have the code to show our debug lines
03:37 - and text fields and if we go all the way
03:40 - down here we have our nice set value
03:42 - function so it's here that we want to
03:44 - validate this value to make sure it says
03:46 - within our valid range so for that let's
03:48 - make some constants go all the way up
03:50 - here make a public Const int and let's
03:54 - call this the heat map max Valley Ana
03:58 - let's put a maximum of 100 and a public
04:00 - content for our heat map min value which
04:04 - will be at 0 and now we just take these
04:08 - and go down to the set value and let's
04:11 - make sure that our value is math F climb
04:15 - so we're going to clamp our value
04:17 - between our minimum and our maximum all
04:21 - right that should do it so let's go back
04:23 - into our testing script and in here
04:26 - let's make some code to increase the
04:27 - underlying on the grid whenever we click
04:29 - on so make a simple update and here we
04:32 - test for an input yet mouse button down
04:34 - on the left mouse but
04:37 - and when they do let's get the mouse
04:39 - wrong position so for that I'm going to
04:41 - be using the cosmic utilities she as
04:43 - always you can grab for free from in
04:44 - Tacoma comm so from that I can use get
04:47 - Mao's world position here is the
04:50 - function in case you want to make it
04:51 - yourself oh it does is a screen to one
04:53 - point on our world camera so with our
04:56 - mouse world position we want to increase
04:58 - the annoying value of the brain so
05:00 - before we set the value let's first go
05:02 - in the grid and get me down so in here
05:05 - we need a reference to our grid object
05:08 - so we have our reference we set it on
05:11 - start in here we use in so we get the
05:13 - value passing the world position alright
05:16 - this is our current value then we do
05:19 - read that set value pass in the same
05:22 - position and then we pass in value plus
05:27 - five so every time we click we should be
05:30 - able to see the underlying value
05:32 - increase by five alright let's test okay
05:35 - here we are in our grid now first of all
05:38 - if we click outside the grid you can see
05:40 - that nothing happens in the previous
05:42 - video we decided it was best to ignore
05:43 - invalid values in order to prevent our
05:45 - weight from behaving weirdly over on the
05:47 - edges so factly here does nothing but if
05:51 - I click on top of the grid there give
05:53 - that one went from zero to five come
05:54 - again 10 and now keep clicking and let's
05:57 - see the maximum and there you go it's at
05:59 - 100 and can no longer go higher okay
06:01 - awesome
06:02 - alright so now that the underlying
06:04 - values are working correctly let's see
06:06 - how we're going to display them with
06:08 - some very nice colors so that means it's
06:10 - time to work on our heat map visual so
06:12 - in here what's our off by making a new C
06:14 - sharp script call it heat map Viggo
06:17 - let's make a game object to handle it so
06:20 - when you game object code the heat map
06:22 - visual drag the script onto it and let's
06:26 - make sure the object is on the origin so
06:28 - 0 0 0 okay now let's open it and now in
06:32 - here in order to display our heat map
06:33 - we're going to use a custom dynamic mesh
06:36 - if you want a in-depth look into how to
06:38 - create a dynamic mesh through code then
06:40 - check the link in the description in
06:42 - that video I cover what are the elements
06:44 - and mesh needs and what each of them
06:45 - represents it covers how to start off
06:47 - rendering
06:48 - simple triangle then making it into a
06:50 - quad and manipulating the texture if you
06:52 - understand everything in that video
06:54 - you'll be able to easily follow along
06:55 - how we're going to create the heatmap
06:57 - visual mesh okay so let's create the
06:59 - mesh and for that I have a simple mesh
07:02 - utils class this has a bunch of
07:04 - functions for creating and adding stuff
07:06 - to the mesh you can easily make this
07:08 - class yourself based on the knowledge of
07:10 - the mesh video or you can download it
07:11 - from this videos project funds it just
07:14 - creates the various vertices UV
07:16 - strangles and has a bunch of functions
07:18 - for setting them again if you're not
07:21 - familiar with how much is created
07:22 - through code check out the other video
07:23 - linked in the description now in order
07:25 - to render our mesh there's still
07:27 - something we need on our game object in
07:29 - here which is we need to add a mesh
07:32 - filter and also a mesh renderer so this
07:36 - mesh will be created dynamically through
07:38 - code and now in here we need to add our
07:40 - material so here in the project files
07:42 - you can see that I have a nice gradient
07:44 - texture as you can see the first pixel
07:47 - is black then it goes from red to yellow
07:49 - to green so let's make a material to use
07:51 - it just very simple make a new material
07:55 - let's use the unlit texture and drag the
07:58 - texture onto it alright there's our
08:01 - material and just drag it onto our mesh
08:03 - render all right that's it now back in
08:06 - the code now here in order to visualize
08:09 - our heat map we want to display one quad
08:11 - per grid position so first we need a
08:14 - reference to our grid so let's make a
08:16 - function a polaroid call it set grid are
08:19 - going to receive a query object let's
08:22 - store
08:27 - all right so now we need to call this
08:29 - function from somewhere so for that
08:31 - let's use our testing class and here
08:33 - let's add a serialized field make it a
08:36 - private type eat map visual and on start
08:42 - first we create our grid and then we go
08:44 - into the heat map visual and set the
08:46 - grid and passing our grid all right so
08:49 - now we just need to go into the editor
08:50 - and here on the testing script let's
08:52 - just drag the reference all right
08:54 - awesome so back into the heat map code
08:56 - let's also make a wake to grab the
08:59 - reference to the mesh filter so we have
09:04 - the reference to the mesh filter and we
09:06 - need to set our mesh so in here let's
09:08 - make a mesh equals a new mesh so this is
09:11 - the mesh that we're going to use and
09:12 - reuse so it's actually stored up here
09:20 - just like that
09:22 - all right so our setup is done in order
09:24 - to visually see our mesh now it's time
09:27 - to finally make the code in order to
09:28 - actually draw it so down here let's make
09:31 - a private road and let's call it update
09:36 - the heat map video now here let's first
09:41 - set up our erase here on the mesh utils
09:44 - I have a nice function which already
09:46 - calculates on with the vertices UVs and
09:49 - triangles with a given quad count so
09:51 - let's use that so go into the mesh utils
09:55 - count create empty mesh arrays now for
09:58 - the quad count it's very simple we just
10:00 - need the grid in order to get the width
10:01 - multiply it by the bracket height so
10:05 - that's our quad count and now let's
10:07 - create our race
10:12 - all right so just like this we are
10:14 - creating on with our local arrays with
10:16 - the correct size now down here let's
10:19 - cycle through the width and the height
10:25 - all right here we are inside our cycle
10:27 - and now in here let's first calculate
10:29 - the index that we are currently on so a
10:31 - name for our index and the current index
10:34 - will be the current X multiplied by the
10:37 - grid get height and pause the current
10:41 - one so with this we have our index
10:44 - cycling through every single quad so
10:46 - much used to debug down one to make sure
10:48 - everything is great so far so debug
10:50 - dialog on our index and in here when we
10:53 - set the grid what's called update the
10:55 - heat map video and to make it easier
10:57 - let's go in here and reduce the size to
10:59 - be just ten five
11:00 - all right let's test and here we are and
11:04 - there's our small grid and over here on
11:06 - the console we can see our indexes are
11:07 - need going correctly so going from 0 all
11:10 - the way to 49 since we have 10 by 5
11:12 - right awesome now in here inside our
11:15 - cycle we already have the index and it's
11:17 - in here that we need to set our quad
11:19 - valves so for that I have a very nice
11:21 - home phone function here
11:23 - it's called add to measure race and just
11:25 - takes the various arrays that make up
11:26 - the mesh takes an index and locates the
11:29 - new quad so let's use that call add to
11:34 - mesh race let's pass in the vertices the
11:36 - UV and the triangles now for an index
11:40 - pass in our calculated index and now
11:43 - here we need the position so for the
11:45 - position we can just go to the grid and
11:47 - ask for the get world position of this
11:50 - given x and y alright for the rotation
11:53 - we don't want any rotation its own let's
11:54 - leave it at 0 and now here we need the
11:57 - size of the quad so let's calculate it
11:59 - up here a factor 3 for the quad size and
12:03 - the font size is really just let's make
12:05 - it a vector 3 of 1 1 and multiply it by
12:08 - the grid and get the cell size right
12:11 - just like that and now finally we need
12:15 - UV and for now let's just leave it at 0
12:18 - so all our points should be completely
12:20 - black
12:22 - over here on awake we are creating our
12:25 - mesh then on this function we are
12:27 - creating the empty mesh rays with a
12:29 - given width and height then we cycle
12:31 - through every single grid position and
12:33 - we add a quad to our mesh race so all
12:37 - that's left is to go down here and
12:38 - update our mesh all right that should do
12:45 - it
12:45 - let's test and see if we are correctly
12:47 - creating our black mesh and if there is
12:50 - there's our grid mesh we can pause in
12:52 - order to go and look into the wireframe
12:55 - and let's hide the background so we can
12:57 - easily see it and if there you go
12:59 - there it is we can easily see every quad
13:02 - of our grid mesh being in sentient
13:04 - awesome however you can also see an
13:07 - issue with the mesh the quads are on the
13:10 - origin of each sound position instead of
13:12 - being right down the middle so we need
13:14 - to shift them all by half of our cell
13:16 - size so let's do that it's very simple
13:18 - just in here we get the quad position
13:20 - and we just increase it by the quad size
13:23 - multiplied by 0.5 okay test again any of
13:28 - there it is and all of our quads now
13:30 - perfectly match with our underlying grid
13:32 - great okay so now the visual is setup
13:36 - however if I click the modify it you can
13:39 - see the underlying value change but the
13:40 - caller didn't so we need to update our
13:43 - visual when something changes so we're
13:45 - here in the grid code you can see that
13:48 - right in here there is a nice event
13:50 - and as the name implies this is fired
13:53 - right when some value under great
13:55 - changes so there it is down here on the
13:58 - set value you can see we set the value
14:00 - and then we fire this event so we can
14:02 - easily go back into our visual and when
14:04 - we receive the grid let's simply
14:06 - subscribe to that event so grid on Great
14:08 - Valley changed
14:10 - let's subscribe to that event and when
14:12 - that event is fired we simply update our
14:14 - equipment and that should do it very
14:17 - simple and this clearly shows you the
14:19 - power of events so let's just add a
14:22 - debug want to make sure our event is
14:24 - firing just like this okay
14:26 - let's see ok here we are let's click and
14:29 - see if the event is fired click any of
14:32 - there you go over here on the console
14:34 - you can see the event spark click here
14:35 - and yep yep yep yep okay awesome so we
14:38 - are correctly capturing our unfairly
14:40 - changed event so now almost everything
14:43 - is set up we just need to deal with the
14:45 - UV for the quads to match the underlying
14:47 - them so again here is the underlying
14:49 - texture it's a simple texture with 64
14:53 - pixels on the width and one on the
14:54 - height now we want the color shown to
14:57 - match the underlying value so with a
14:58 - value of 0 we want to show the black
15:00 - pics on right on the left and with a
15:02 - value of 100 we want to show the green
15:04 - pics on right on the right so let's go
15:07 - to our code and in here inside our
15:09 - saikhan let's calculate the UV nor do
15:12 - that first we need to know the
15:13 - underlying value so go into the grid in
15:16 - order to get the value let's get the
15:18 - value on the current X&Y all right this
15:23 - is our grid value now again the UV is
15:26 - always set with a normalized value so in
15:29 - order to comment like that we need to
15:30 - define the current by the maximum so we
15:32 - get our float great value normalize and
15:35 - we essentially just take our great value
15:37 - and we defined it by our maximum Park
15:41 - we'd hit max max Val and these are two
15:44 - ends so again in order to make sure we
15:46 - don't get any mistakes we need to
15:48 - convert one of them into a fault all
15:50 - right so here we have our normalized
15:53 - value and with this we can now create
15:54 - our UV vector too so in vector 2 for the
15:58 - grid value UV and it's simply going to
16:02 - be on the X we pass in the great value
16:06 - normalized and under why it doesn't
16:08 - matter so let's just put it at zero so
16:11 - then here on this function we have
16:13 - actually two UV fields we have one on
16:18 - the lower left corner and one for the UV
16:20 - on the upper right corner however in
16:22 - this case we just want to show pretty
16:24 - much a single pixel so it doesn't matter
16:26 - let's just put the exact same one on
16:27 - both so every single vector won't show
16:30 - the exact same pixel all right so just
16:33 - like this it should be working let's see
16:36 - okay here we are and everything is black
16:38 - all right now let's click and there you
16:40 - go that one went from black to a dark
16:42 - red now keep clicking and starts
16:44 - becoming more
16:45 - as it reaches 15 it's pure yellow now
16:48 - keep clicking and snow green green green
16:51 - and yep now it's at 100 pure green right
16:54 - awesome so as the valley goes up so does
16:57 - the color go from red to yellow to green
16:59 - so now we can set and view families in
17:01 - our heat map now in order to achieve a
17:03 - nice heat map we should make sure that
17:05 - when we click we apply more than just on
17:08 - a single grid position so in this case
17:10 - we wouldn't like if this one is at 52
17:12 - also impact the ones around it okay so
17:15 - let's make a function to add a value to
17:17 - our grid map along with a certain range
17:19 - so let's go into our grid here we have
17:22 - our set values and get valid functions
17:24 - now let's make a add value we're going
17:28 - to receive a vector3 for the world
17:30 - position then we're going to receive an
17:32 - end for the target value to add and
17:35 - let's also receive an end for a range so
17:39 - here on let's start off very simple
17:41 - first we get the X&Y now we just cycle
17:49 - through the entire range and in here we
17:55 - want to add the Val however right now we
17:57 - only have a function to set the value so
17:59 - let's make another nice helper function
18:01 - and this will be the add value it takes
18:04 - it in for the X and for the Y and then
18:07 - in for the event and here in order to
18:10 - add it's very simple we just call get
18:12 - value on the x and y that gives us our
18:16 - current value so we increase it by our
18:18 - target value and we put all this inside
18:20 - a set bump okay so there it is a very
18:24 - nice simple function it takes the
18:26 - current value and increases it by this
18:28 - amount okay now we can go down here and
18:30 - use it so we set on through the entire
18:33 - range and we call add value on this X so
18:37 - origin X was this X and we add our valid
18:43 - all right this should be working let's
18:46 - test it so for that let's go into our
18:48 - testing class and in here we were doing
18:50 - pretty much the same add value however
18:53 - instead of that let's do the grid add
18:55 - value we're going to use the version
18:57 - that has the
18:58 - range so passing the physician let's put
19:01 - a value of five and a range of also five
19:05 - and up here let's make our grid bigger
19:09 - but with smaller notes alright let's
19:13 - test this okay here it is let's move all
19:16 - the way here now let's click right in
19:18 - here and there you go we now have a
19:20 - bunch of cells with five and if we click
19:22 - again and there we go with these ones
19:24 - that were in the middle they increase by
19:27 - five so now they have ten all right so
19:29 - we have our nice heat map correctly
19:32 - working
19:33 - however the shape that we're using is a
19:35 - square which isn't very nice we want a
19:37 - diamond instead so let's see how we're
19:40 - using the range over here on our grid
19:42 - we're cycling through the x and y both
19:44 - going from zero to the range but instead
19:47 - of a square we want a diamond
19:48 - so let's first make a triangle since the
19:52 - diamond is essentially just four
19:53 - triangles put together so we're here we
19:55 - are cycling through everything except on
19:58 - the Y cycle instead of going from zero
20:00 - to the range let's go to zero to the
20:02 - range minus the X so this way the bigger
20:05 - the X is then lower dy I won't go let's
20:08 - test okay here we are let's go and click
20:11 - right down the middle and there you go
20:13 - we now have a very nice triangle with a
20:15 - edge size of fine all right awesome now
20:19 - to make a diamond all we need to do is
20:21 - mirror this triangle both left and down
20:23 - so first let's mirror to the left so we
20:25 - also call that value seven set of
20:28 - heading on origin plus X we add on
20:30 - origin minus X okay click and there you
20:34 - go we added on the right and on the left
20:35 - side however you can also see that we
20:38 - doubled on the first line so we need to
20:40 - ignore that and here we only do this if
20:43 - the X is not zero
20:47 - and if there is now we have a right and
20:50 - left triangle okay great now for the
20:52 - lower side we do pretty much the same
20:54 - thing we do add value on the origin Y
20:58 - minus ey and the same thing on minus X
21:01 - and minus y so let's see okay click and
21:08 - there you go alright the shape is
21:10 - correct now let's just ignore these
21:12 - zeros so you only do the wise if dy is
21:15 - not zero and on the minus X once again
21:21 - you just if DX is not zero okay here we
21:27 - are now let's try right here down the
21:29 - middle and click and there you go we
21:31 - have our nice awesome grid and by
21:33 - clicking we add the value in a diamond
21:35 - pattern and if we click again you can
21:38 - see that we add the value where we
21:39 - already had them so if I click in here
21:41 - there you go these there are in between
21:43 - they also increase so I can add various
21:46 - and the color all looks very nice so
21:49 - let's try this out without our debug so
21:51 - go into the grid and over here just have
21:53 - the show debugging to false and there it
21:57 - is now we just see a giant black square
21:59 - and if we click if there you go there's
22:01 - our nice heat map showing all our nice
22:02 - colors so as we increase it goes up and
22:06 - now that one is green red and so on all
22:08 - right awesome
22:08 - now our heat map is pretty much done
22:11 - let's just add one more thing a version
22:13 - that takes a range and then the family
22:15 - falls off as it gets towards the end
22:16 - range so down here on the grid we have
22:19 - this function alright that looks right
22:21 - however now let's split the range into
22:23 - two different values so we're going
22:25 - first to have a full value range so this
22:31 - is range where the entire phone value is
22:34 - added and then we also have an end for
22:36 - the total range so when we go past the
22:39 - phone value range we are going to
22:41 - decrease the value until we reach Ito
22:43 - range okay so let's first calculate the
22:45 - amount we're going to lower the value
22:47 - once we go past the phone value range
22:55 - okay so we commonly the lower value
22:57 - amount by the difference between the
22:59 - total range and the phone value range
23:00 - now over here in the cycle we're going
23:03 - to cycle through the total range okay
23:07 - so then here inside our cycle let's
23:11 - first calculate where we are on the
23:12 - current radius so when in for the radius
23:15 - is simply the X plus zy then let's also
23:18 - define the value amount that we're going
23:20 - to add so it's called the add value
23:24 - amount and by default we start off with
23:26 - the full volume then we test if the
23:29 - radius is bigger than the full value
23:31 - range if so then we want to decrease the
23:35 - add value amount by the in lower value
23:38 - amount so we're going to add value
23:40 - amount minus equals the lower value
23:43 - amount multiplied by how far we are from
23:45 - the total so the radius minus our phone
23:49 - value range so as we get past the phone
23:53 - value range and towards the totem range
23:54 - it will go down down down so visually as
23:58 - we approach the edge of our radius we
23:59 - should be able to see the center in
24:01 - green and becoming more red towards the
24:02 - edges and down here instead of the value
24:05 - we use the add value amount which has
24:07 - been calculated all right great
24:09 - now here let's test it with a really big
24:12 - radius so first on the value let's put
24:14 - the full value to be a 100 and for the
24:17 - full value range and let's put something
24:19 - sponson like five and for the total
24:22 - range
24:23 - let's put 48 so for the first five
24:26 - positions around where I click it will
24:28 - have a hundred and for the rest until it
24:30 - hits 40 it won't constantly be going
24:32 - down so we should be able to see a
24:34 - diamond pattern start with green in the
24:36 - center and become red towards the edges
24:38 - okay so to test let's make our grid a
24:41 - lot bigger
24:47 - okay so here we are and everything is
24:49 - black meaning all of our grid is at zero
24:52 - and now let's click and there yo there's
24:55 - our awesome color diamond pattern and if
24:58 - I click somewhere else like right here
25:00 - on the right and the radius intersects
25:03 - you don't be able to see any of there
25:05 - you go over here where they both
25:07 - intersect you can see that both valleys
25:09 - are being added so when I clicked here
25:12 - the positions that include both diamonds
25:13 - also increase their underlying values so
25:16 - here we are with the debug visuals
25:17 - enabled and now we can see how the
25:19 - numbers change so let's click in here
25:21 - and there you go you can see right down
25:23 - the middle
25:24 - it's at 100 so it's full and as we go
25:26 - towards the edge you can see the number
25:27 - constantly going down and then if I
25:29 - click here on the side yep you can see
25:31 - it goes down but these have been merged
25:33 - by both times so click on various sizes
25:36 - and there you go you can see the heat
25:38 - map getting very nice there it is all
25:42 - our nice numbers awesome now just one
25:45 - final thing over here we have a pretty
25:48 - serious performance issue in our code
25:50 - that we can easily solve over here on
25:52 - the heatmap visual we are updating our
25:55 - heat map visual whenever this event is
25:58 - fired and then here on the grid when we
26:01 - are creating our diamond pattern we are
26:03 - essentially calling add value a whole
26:05 - bunch of times
26:06 - and every time we add we are triggering
26:08 - that event so every time we trigger we
26:10 - are updating the mesh so essentially
26:12 - when we place we are updating our mesh
26:14 - about a hundred times in a single frame
26:15 - that is obviously very wasteful and
26:17 - causes your game to hang for quite a bit
26:19 - so instead let's only update at the end
26:22 - of each frame where the underlying grid
26:24 - did actually change so let's go up here
26:27 - make a private a boolean con like update
26:30 - mesh then we go down here when the grid
26:35 - value changes instead of calling this
26:37 - directly let's simply set the update
26:39 - mesh in to true and then we're going to
26:41 - have a private void and light update and
26:43 - in here we test if the update mesh is
26:46 - true then we set it to false and we
26:48 - update our mesh so just like that no
26:52 - matter how many times this event is
26:53 - fired in the same frame it will only
26:55 - update once at the end of that frame and
26:57 - if this
26:58 - change it doesn't update so everything
27:00 - is great alright well let's see okay
27:03 - here we're on let's try and click and
27:04 - there you go everything still works but
27:06 - now I can click multiple times in the
27:08 - game no longer tanks since the
27:10 - underlying mesh is only a being updated
27:11 - at most once per frame awesome so here
27:15 - it is our final heat map visualization
27:17 - and the underlying grid system this can
27:20 - be used for just about anything you want
27:21 - you can use it for example like in
27:24 - barrel round tycoon for making an
27:25 - environment map so as I place
27:28 - environment objects the environment
27:29 - becomes better which gets enjoy
27:31 - environment objects all have a certain
27:33 - value and a certain radius and when put
27:36 - together they combine into better values
27:37 - you could also use it as a secondary
27:40 - pathfinding map to tell units which
27:42 - areas should be avoided and which should
27:44 - be desirable the pathfinding would avoid
27:46 - red areas and move towards green errors
27:48 - so by now I think you can see how weird
27:51 - maps and heat maps are extremely
27:52 - versatile and can be used in a multitude
27:54 - of situations so think about how you can
27:57 - apply it to your game as always you can
27:59 - download the project files and utilities
28:01 - from unity cosmic comm if you liked the
28:03 - video subscribe channel for more ent
28:05 - tutorials post any questions you have in
28:07 - the comments and I'll do my best to
28:08 - answer them alright see you next time
28:10 - [Music]
28:13 - you