00:00 - this video is sponsored by hosting er in
00:02 - this video we're going to make a nice
00:04 - character controller in unity 2d it will
00:06 - be using physics so we automatically
00:08 - collided with walls and can push around
00:10 - objects we're also going to implement an
00:12 - instant - and a smiling row let's begin
00:17 - [Music]
00:22 - hello and welcome I'm your code monkey
00:24 - and this channel is all about helping
00:25 - you will learn how to make your own
00:27 - games with in-depth tutorials made by a
00:29 - professional indie game developer so if
00:31 - you find the video helpful consider
00:32 - subscribing
00:33 - okay so I've already done some videos
00:35 - covering simple character movement
00:37 - however in those videos I covered it in
00:39 - the simplest way possible so that means
00:42 - no physics at all the character just
00:43 - moves by directly moving the transform
00:45 - in order to find objects and collide
00:47 - with it it does a raycast so that's a
00:50 - great and simple way to move character
00:51 - but it has some limitations for example
00:53 - you cannot easily push objects around
00:55 - and interact naturally with other
00:57 - physics objects so here we're going to
00:59 - make our character controller using
01:01 - physics all right over here is our goal
01:03 - there's our player character right here
01:05 - and as you can see there's a bunch of
01:07 - debris on four and if I go towards it
01:09 - and there you go I can push it around
01:11 - down here we also have an object
01:13 - simulating a door with a hinge and if I
01:15 - go and there you go I can push and open
01:17 - it so as you can see we have some nice
01:19 - physics interactions since we're using a
01:21 - rigidbody to move our player we also
01:23 - have ones easily working so over here
01:25 - there's this wall and if there you go I
01:26 - cannot go through it because the solid
01:28 - object now here we're also going to
01:31 - implement two nice movement features so
01:33 - for example we have an instant - so just
01:36 - like this we can dash into any direction
01:38 - and yep there you go the dash does not
01:40 - go through walls and for another
01:43 - different movement type we have a Dodge
01:45 - Ram which instead of being instant it
01:46 - simply slides on a certain direction so
01:49 - I can go and slide it around and once
01:50 - again it's all working with physics so I
01:52 - cannot go to the walls but I can
01:54 - interact with other objects all right so
01:57 - here is our character controller working
01:59 - nicely which we can easily use as the
02:01 - base for any 2d game you can expand upon
02:03 - the space to make some really cool
02:05 - abilities unique to your game sure what
02:07 - you make with your friends by hosting
02:08 - the builds on your website which you can
02:10 - get through hosting ur hosting ur
02:12 - provides best-in-class hosting services
02:14 - that are extremely fast and very
02:15 - affordable with excellent customer
02:17 - support to help you succeed choose from
02:19 - a variety of plans and pick the one that
02:21 - best suits your needs making your
02:23 - website from scratch can be hard but
02:24 - hosting er makes this much easier by
02:26 - supporting WordPress which is a few
02:28 - clicks you can use the auto installer to
02:30 - get WordPress installed on your website
02:31 - then you can pick from a giant selection
02:34 - of
02:34 - weights too quickly at start and then
02:36 - customize a website to exactly as you
02:38 - want it here for example I have easily
02:41 - built a simple website by customizing a
02:43 - template when excellent WordPress
02:45 - feature is how you have these buttons to
02:47 - swap between desktop table and phone
02:49 - these points so you can rest assure that
02:50 - your website will look great on any
02:52 - device also if you're making some really
02:55 - cool online integration for your game
02:56 - then check out their super fast and
02:58 - affordable cloud hosting solutions all
03:00 - the plans come with a 30-day money-back
03:02 - guarantee so you can try out the
03:03 - services without any risk go to
03:05 - hostgator.com slash code monkey and use
03:07 - the coupon code monkey to get up to 91
03:09 - percent off yearly web hosting plans
03:11 - click the link in the description and
03:13 - succeed faster using the link help
03:15 - support the channel so thank you to
03:17 - hosting ur and also thank you to these
03:19 - awesome supporters for making this video
03:21 - possible go to patreon.com/scishow to
03:24 - code monkey to get some perks and help
03:25 - keep the videos free for everyone
03:27 - alright so this is our goal let's get to
03:29 - it okay so here we are in our starting
03:32 - scene all I have is my character sitting
03:34 - around
03:34 - I don't doing nothing so I'm pressing
03:36 - keys and I cannot move them or do
03:37 - anything okay so let's begin by making
03:40 - our character control so we make a new
03:42 - c-sharp script call it our character
03:44 - controller 2d and now over here I have
03:49 - the player game object as you can see
03:51 - inside it as you say basic to the
03:52 - enlight a sprite for the shadow and a
03:55 - object for the body the body is composed
03:57 - of a mesh filter and a mesh renderer so
04:00 - the animation system that I'm using is
04:01 - based on dynamically modifying meshes in
04:03 - runtime so check the video in the
04:05 - description to see how it works so this
04:07 - is the composition of the character and
04:09 - then here I simply have the character B
04:12 - script which handles all the animations
04:13 - so in here let's drag our new only
04:15 - created script okay there it is and
04:17 - let's open it up okay now in here and
04:19 - let's start off by making our update
04:21 - function and in here we're going to
04:24 - listen to key inputs we're going to
04:26 - control our character using W a s and D
04:28 - so if we have an input gate key and here
04:33 - we want it key and not get key down
04:34 - since we want this to be true for as
04:36 - long as the key is held down so we use
04:39 - get key and then we choose let's say W
04:42 - so if you press the W key we want to
04:45 - move them up and now just for starters
04:47 - let's do it with the
04:48 - easiest way possible without any physics
04:50 - so we just move the transform that
04:52 - position was equals a vector up so zero
04:56 - one just like that alright so as we were
04:59 - holding down the W key we're going to
05:00 - move the transform up let's see so here
05:03 - we are now press W and there you go he's
05:05 - moving it alright so far so good
05:07 - now let's handle on the other directions
05:15 - alright so I've copy/paste the same code
05:18 - for own directions and if we test here
05:20 - we are and moved up yep there you go
05:22 - move down move right and move up all
05:24 - right awesome so here we have movement
05:26 - in all directions awesome now so far
05:29 - we're still working with moving the
05:30 - transform directly meaning we are not
05:32 - working with physics so back in the
05:35 - editor if we try to make a wall down
05:37 - here I have a simple wall sprite so just
05:39 - drag it in there so here is a basic one
05:46 - sprite and now in order to have physics
05:48 - let's add a box Collider 2d and there
05:51 - you go we have the collider and now if
05:52 - we test and here we are and there's the
05:55 - character moving and it can go through
05:57 - walls alright so now let's implement
05:58 - physics on our character now the first
06:01 - thing we need is to have a Collider so
06:04 - here on the character we select and we
06:06 - add a Collider and now in here we have a
06:08 - whole bunch of options whatever type you
06:11 - choose depends on your game so for
06:13 - example if you want to have smooth
06:14 - corners you can go with either the
06:16 - circle Collider or the capsule Collider
06:18 - but personally I prefer to work with
06:20 - rectangles so let's add a simple box
06:22 - Collider 2d so there it is you can see
06:25 - the collider and now we can edit in
06:27 - order to modify the size and pretty much
06:31 - just like that now my animation system
06:33 - only runs when the game is running so
06:35 - here all we can see is a shadow but I
06:36 - can still guess the size the character
06:38 - and if we test and there it is with the
06:40 - game running you can see that the box
06:42 - just pretty much fits deep sprite the
06:45 - sprite is built in a front top-down
06:46 - perspective so rather than occupying the
06:48 - whole character I'm only occupying the
06:50 - bottom part alright so here we have our
06:51 - character working with a Collider but if
06:54 - we move yep there you go we can still go
06:56 - through the wall
06:56 - in order to get collisions to work we
06:58 - need to add a rigidbody if you want to
07:01 - know more about collisions
07:02 - check out the video linked in the
07:03 - description okay now here on the
07:05 - character let's add a rigidbody 2d and
07:08 - here in these settings and let's freeze
07:10 - the rotation since we don't want our
07:11 - sprite to rotate and since we're working
07:13 - on top down let's also disable gravity
07:15 - by setting the scale to zero alright so
07:17 - this is our setup now back in our code
07:19 - and here the first thing that we need is
07:21 - a reference to our rigidbody so let's
07:23 - grab it on our way all right we have our
07:28 - rigidbody reference you know here we
07:31 - have our update function which gets
07:32 - called on every frame and we're testing
07:35 - for when the keys are down so now you
07:37 - could assume that we would simply change
07:39 - the rigidbody for it transform however
07:41 - when working with physics the physics
07:43 - system is running at a different rate
07:45 - than our actual update so instead of the
07:47 - update we should work with our physics
07:49 - inside of our fixed update so it's in
07:52 - here that we should modify our rigidbody
07:54 - however we still want our inputs to be
07:57 - nice and snappy so we want to grab them
07:59 - in the normal update every frame so the
08:02 - solution is to capture our inputs here
08:03 - sort them in a vector and then use the
08:05 - vector down here so all the way up here
08:07 - let's make a private vector3 for the
08:10 - move direction and now here on update
08:13 - let's set our move vector so first let's
08:16 - define a float for the move X start off
08:19 - at zero then you float for the move Y
08:21 - start off at zero then we set them in
08:24 - here all right so we define a move X and
08:31 - a move Y and then we handle the keys so
08:33 - for example if we're holding down dummy
08:35 - we said to move Y to one and then down
08:37 - here we construct our vector based on
08:38 - the move X and move Y and now here we
08:40 - need to remember to normalize our vector
08:42 - so we make sure that we don't go too
08:44 - fast whilst going in the diagonals all
08:47 - right so we have our move direction and
08:48 - then down here on our fixed update this
08:51 - is where we can modify our rigidbody now
08:54 - there are two ways we can modify the
08:55 - region one we can use move positions
08:58 - this function will move our rigidbody
09:00 - from the current position onto the
09:02 - target position however this can lead to
09:05 - some jittery movement if we try to move
09:06 - to an invalid position like say inside
09:08 - of a wall so the other approach that I
09:10 - prefer to take which is setting the
09:12 - velocity directly so we just set the
09:14 - velocity to be the
09:16 - direction so this way we don't tell the
09:19 - rigid body specifically where to move to
09:20 - branches in what direction it should
09:22 - move and then the physics system decides
09:24 - if it can move in their direction all
09:26 - right here's our rigid body setup know
09:28 - what's test alright so here we are and
09:30 - let's try to move and yep there you go
09:32 - it's moving insanely slow but yep it is
09:34 - moving the rigid body and if we move up
09:37 - and see what happens when we collide
09:39 - with the wall and keep going up keep
09:41 - going keep going any of there you go as
09:46 - you can see it reached the wall I'm some
09:47 - pressing W but it's no longer going
09:49 - through the wall so just like this we
09:51 - have collisions working automatically
09:52 - awesome now as you might have noticed
09:54 - the character is moving painfully slow
09:56 - so let's fix up here in our script let's
09:59 - define a nice constant for our movement
10:01 - speed all right we have our move speed
10:05 - constant and then down here when we set
10:07 - the velocity we set it to the move
10:08 - Direction multiplied by our move speed
10:11 - okay let's test here we are in try to
10:14 - move and you've there you go now we have
10:16 - a much more accurate speed so if I go
10:18 - yep there you go I cannot go through the
10:20 - wall no matter what I do all right
10:22 - awesome now one thing that you might
10:24 - also notice is that the movement is
10:26 - actually quite jittery so look at that
10:27 - it's very very bad so let's fix that
10:31 - here in the editor we can see our
10:33 - rigidbody and then here we have the
10:35 - interpolate so it's in here that we can
10:37 - set from none into interpolate and if we
10:40 - run again and here we move and there we
10:43 - go now the movement is actually
10:45 - perfectly smooth so everything is being
10:47 - interpolated between each physics friend
10:49 - alright awesome now that we have the
10:52 - movement working let's add some
10:53 - animations again this step won't depend
10:55 - heavily on whatever animation system
10:57 - you're using but as always remember to
10:59 - write clean code so make sure your
11:01 - classes are as a couple as they can be
11:03 - here in my case the animations are on
11:06 - hand on inside of this character based
11:07 - class and I don't care how the
11:09 - animations are implemented all i care is
11:12 - that this class exposes some functions
11:14 - that I can use to play the various
11:15 - animations so first I grab that
11:18 - component that handles the animation so
11:20 - it's a character base I get that
11:23 - component here on awake and now when we
11:27 - set the move direction
11:28 - I can call the function play move
11:30 - animation which takes the movement
11:32 - directly all right that's it let's test
11:35 - so here we are in his idle and I move
11:37 - any of there you go now we have our nice
11:39 - animations working again this is going
11:41 - to depend on what animation system
11:43 - you're using but the main point is
11:44 - remember to keep your code nice and
11:46 - clean so in here I don't care how the
11:48 - animation is implemented as long as I
11:50 - have a nice function that I can pass in
11:52 - a move direction so whatever this
11:53 - function does I'm not interested whilst
11:55 - working on the character control and
11:57 - this animation system is based upon
11:59 - dynamically modifying meshes in runtime
12:01 - so here in the scene you can see that
12:03 - the animation system is made up of
12:05 - dynamically modifying the meshes I
12:06 - covered the bases for this system in
12:08 - another video so check the link in the
12:10 - description if you want to know more and
12:11 - with this we now have a nice character
12:14 - moving around alright so we have our
12:16 - basic character control working now
12:19 - again since we're working with physics
12:20 - let's play around at some debris so over
12:22 - here I have some prefabs with a bunch of
12:24 - rocks as you can see they just have a
12:26 - different sprite and a box Collider and
12:28 - a rigidbody so here they are a whole
12:31 - bunch of rocks and now if I test so here
12:34 - we are and I can move the character and
12:35 - I can go and yep there you go I can push
12:37 - around all of the rocks again this is
12:39 - because we are using the physics system
12:41 - directly to move our character so we
12:43 - don't need to do anything else in order
12:44 - to make it interact with other physics
12:46 - objects over here I also have a simple
12:49 - door object so really just has a hinge
12:51 - and then another object and again if we
12:54 - test here we are and if we go and try to
12:56 - move yep there you go I can push that
12:57 - object without doing anything else
12:59 - right awesome so here you can see our
13:01 - character and everything working
13:03 - correctly with physics now that we have
13:05 - the simple movement working let's add
13:07 - some more features to our character
13:08 - control first let's add a simple - R -
13:11 - is going to be essentially an instant
13:13 - teleport but without going through walls
13:15 - so back in our code in our update lets s
13:18 - for pressing the spacebar and here we
13:23 - are using gate key down since we only
13:25 - want this to be true on the exact frame
13:27 - that we press the spacebar and again on
13:29 - the update we are only handling
13:31 - recording our inputs and then on
13:33 - fixedupdate we actually move our
13:35 - rigidbody so let's go all the way up
13:37 - here to store a simple boolean what's
13:40 - called is that
13:41 - button down and now down here if we have
13:46 - the gate key down on the space let me
13:48 - simply step tower is - button down true
13:50 - and then on the fixedupdate if the -
13:53 - button is down then here we want to move
13:56 - our rigidbody so in this case instead of
13:59 - modifying the velocity we're going to
14:01 - use the move position function so this
14:03 - will move the rigidbody towards the
14:05 - target position
14:05 - so our target position won't be based on
14:08 - the transformed graph position which is
14:09 - our current position plus the move
14:12 - direction and then multiply it by a
14:14 - certain - amount so in here a food for -
14:16 - amount and then we use it in here all
14:22 - right so just like this we are
14:23 - teleporting our object instantly towards
14:25 - this new position and after we - we set
14:28 - is - but down back into the false all
14:30 - right so just like this we are instantly
14:32 - moving our rigidbody on to this new
14:34 - position
14:35 - let's test ok here we are and let's move
14:37 - in press space and if there you go we
14:39 - have our instant teleport working
14:41 - perfectly so we press space and
14:43 - instantly teleport quite a bit ahead all
14:46 - right so here's our - however we have an
14:48 - issue since we're setting the move
14:50 - position directly there you go we can
14:52 - now go through walls without actually
14:54 - colliding with them so let's fix that so
14:57 - let's do a simple ray cast to validate
14:59 - our target position so here we have our
15:12 - recast we do recast from our transform
15:14 - position towards the move direction by
15:16 - this - mount if it collides with
15:18 - something we modify - point to be the
15:20 - exact point where the collision happened
15:21 - however if we just run like this and now
15:25 - here we aren't trying to move and yet
15:26 - there we go he's not actually dashing
15:28 - because he's colliding with the actual
15:29 - player hitbox so we need to use a layer
15:32 - mask to define what we're going to hit
15:34 - for example here on the wound let's
15:36 - modify the in layer and put it on the
15:39 - wrong layer and let's also make a
15:41 - objects layer so for the wall we set it
15:45 - on the walls layer and down here on the
15:47 - hinge object let's put this on the
15:50 - objects layer all right so we have
15:52 - everything on different layers and now
15:54 - here we can pass in
15:55 - a layer mask into our recast and the
15:57 - layer mask is a bit mask if you're not
15:59 - familiar with bit masks then check the
16:01 - on links in the description one way we
16:03 - can easily set this is to go up here and
16:05 - we're going to add a civilised field for
16:08 - a and layer mask and this layer mask
16:12 - actually shows in the editor so if we go
16:14 - back and you up here in the editor we
16:16 - can see a very nice drop down menu for
16:18 - our layer masks and in this case we want
16:20 - to collide with drones and with objects
16:22 - so it's not like both of them and now
16:24 - down here we can use our - layer mask
16:25 - alright so let's see now so here we are
16:28 - in - to the right and yet there you go
16:29 - we have our - and we can - through our
16:32 - rocks however if we try to - through a
16:35 - wall and there you go it doesn't work
16:36 - alright awesome so now our - actually
16:39 - works correctly and it does not go
16:41 - through sound like objects alright
16:42 - awesome now over here I also prepared a
16:45 - very simple - effect so it just has a
16:47 - sprite animator you going through a
16:48 - bunch of sprites and then it destroys
16:49 - itself and I can spawn it using this
16:52 - basic static function so just to add a
16:54 - nice visual let's use this so in here
16:57 - when we do - then let's call that
16:59 - function alright there it is just like
17:05 - this and test ok here we are on - and
17:08 - there you go we have our nice - effect
17:10 - and everything is working correctly all
17:12 - right awesome
17:12 - ok now for another move type let's add a
17:15 - nice dodge roll so instead of being an
17:18 - instant teleport this is going to be a
17:19 - constant movement in one direction and
17:22 - now here in order to add that feature we
17:24 - need to make a decision regarding how we
17:25 - were going to structure our code so
17:27 - should the Dodger won't be implemented
17:29 - inside of this character controlling
17:30 - class or she didn't make it
17:32 - as something separate so that's going to
17:34 - depend on what type of game you're
17:35 - making and how you're stretching your
17:37 - code here in this case I'm going to
17:39 - duplicate this class so back in the
17:41 - editor we just duplicate this script and
17:43 - let's call it the simple version and now
17:46 - let's add the Dodge wrong implement
17:47 - inside this so I'm going to call it both
17:49 - of these in the project files so you can
17:51 - use whatever best fits your game okay no
17:54 - in order to do our dodge roll it's
17:55 - actually quite simple we're going to use
17:57 - the velocity film very much like we do
17:59 - when normal movement okay so in here
18:01 - let's put the dash on a different key
18:03 - and let's put it on that and then let's
18:05 - do a get me down
18:08 - on our tiptoes piece all right so when
18:12 - we press space we want to start our dad
18:14 - row now the first thing we need is the
18:16 - store where we actually want to run
18:18 - towards so let's go up here to make
18:20 - another vector3 for our wrong direction
18:23 - and now down here when we press space we
18:26 - set the wrong direction to be our same
18:28 - move direction okay there it is and now
18:32 - the question is how do we actually move
18:34 - towards our wrong direction as you might
18:36 - guess we cannot simultaneously have
18:38 - normal movement working on so I do it
18:40 - the wrong direction so for that let's
18:42 - make a simple state machine so here we
18:44 - define a private inneun call it our
18:47 - state and state will either be normal or
18:49 - wrong so then we store it in here and on
18:55 - awake we start off as normal and then on
18:58 - our update we do a switch on our state
19:02 - and we only run this normal tone case we
19:05 - are State not normal and when we are
19:09 - rolling we simply ignore the inputs okay
19:10 - so far so good
19:11 - and on the fix update we do this on
19:15 - switch on our state if we are normal
19:19 - then we do the same thing that we were
19:20 - doing previously and if not if we are
19:23 - rolling then it's in here that we want
19:26 - to modify our rigidbody policy all right
19:30 - so here it is very simple just using a
19:32 - basic state machine now so far
19:34 - everything is following pretty much the
19:36 - same logic as the normal movement now
19:38 - the difference is that the raw speed is
19:40 - automatic and it should slow down so
19:43 - let's also store that so all the way
19:45 - appear let's also store a float for the
19:47 - wrong speed and on our fixed update
19:51 - we're going to move by the wrong
19:52 - direction multiply it by the current row
19:54 - speed and on the update once we are
19:57 - rolling let's reduce the iran speed
20:05 - all right so here we have it on the
20:08 - effects update when we move the
20:09 - rigidbody we move it using the wrong
20:11 - direction and Iran speed and then in
20:13 - here once we are on the rolling state
20:15 - we're simply reducing the row speed
20:16 - based on a certain multiplier and always
20:19 - lowering it by time.deltatime
20:21 - and if we go under a certain minimum we
20:23 - simply reset the state back to normal so
20:26 - the last thing that we need is to set
20:27 - our starting wrong speed so in here when
20:29 - we set the move direction we set the
20:32 - wrong speed to the starting speed so I'd
20:33 - say this then we also set the state into
20:36 - state wrong all right so here is our
20:39 - wrong speed code know it's test okay
20:42 - here we are and we can still move we can
20:44 - still push everything's great and if I
20:46 - press space and there you go we have a
20:48 - nice run speed so as you can see it goes
20:49 - fast then slows down and after a while
20:52 - there you go it goes back into the
20:54 - normal state alright so here we have our
20:57 - dodge roll working great awesome now
20:59 - let's just add the animation so here
21:02 - when we start rolling let's once again
21:03 - go into the character base in order to
21:05 - play the role animation again how this
21:08 - is implemented does not matter for the
21:09 - character control all i care is that I
21:12 - have this function so I press in the
21:13 - wrong direction and then we test okay so
21:17 - here we are in our press space and there
21:19 - you go we have our nice roll animation
21:20 - and now it looks like an actual proper
21:22 - role and if you press F we still have
21:25 - the instant on board so instant teleport
21:27 - and a nice rolling movement alright
21:30 - awesome now finally let's just fix one
21:33 - issue so right now if I'm not moving at
21:35 - all and I press the wrong button and
21:37 - there you go nothing happens if there's
21:38 - an actually moved anywhere and the same
21:40 - thing if I press - and there you go
21:42 - nothing happens he is rolling but he's
21:45 - not rolling anywhere because he's taking
21:47 - the wrong direction as a vector zero so
21:49 - here when we have our update and we
21:51 - calculate our move Direction vector if
21:53 - both these are zero then we're going to
21:54 - have a wrong direction as a vector 3 0
21:56 - so how we solve this is to make sure
21:59 - that when we roll or - we do it towards
22:01 - the end last move direction so let's
22:03 - define that up here so we have the last
22:06 - move direction and then here when we set
22:09 - the move direction if we move X is not 0
22:14 - or we move Y is not Z
22:16 - then we are not I don't so here we can
22:19 - set the move direction to the book
22:21 - direction okay so we have the last move
22:23 - direction and then down here when we set
22:24 - the wrong direction instead of using the
22:26 - move Direction let's use the last move
22:28 - direction same thing down here on the
22:30 - space when we have our - instead of
22:33 - using the move direction let's use this
22:35 - last move direction all right well let's
22:36 - test ok here we are and I can still move
22:39 - I can still wrong normally - normally
22:41 - and now if I go and I stop and now I
22:43 - press here on button and there you go
22:45 - now he rolls down to the other last move
22:46 - direction and same thing for the space
22:49 - and E - right awesome so just like this
22:52 - we have a complete Foley working
22:54 - character control so you can see that we
22:56 - can move in any direction everything is
22:58 - nicely animated we cannot go through
23:00 - wall so if we try to roll or we try to -
23:02 - nope doesn't work and we can push around
23:04 - other physics objects don't like this
23:06 - piece of debris and as well as this
23:08 - hinge joint so here it is a very very
23:11 - nice character controller that you can
23:13 - use on just about any game so thank you
23:16 - to hosting er and also thank you to
23:18 - these awesome supporters for making this
23:19 - video possible
23:20 - go to patreon.com/scishow t code monkey
23:23 - to get some perks and help keep the
23:25 - videos free for everyone as long as you
23:27 - can download the project files in a
23:28 - tony's from unity karma calm subscribe
23:31 - the channel for more unity girls post
23:33 - any Kirsten haven't comes and I'll see
23:34 - you next time
23:36 - [Music]