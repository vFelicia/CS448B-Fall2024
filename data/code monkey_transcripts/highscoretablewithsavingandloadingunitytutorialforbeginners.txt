00:00 - hello and welcome I'm your code Monken
00:01 - in this video we're going to create the
00:03 - high score table containing a list of
00:05 - scores and the players name along with
00:06 - the ability to save and load let's begin
00:12 - so here is the high score state one we
00:14 - want to create we want a nice table on
00:17 - the UI containing a title for the
00:19 - various fields the position D score and
00:22 - the name of the person who cut that
00:24 - score we want to be sorted from highest
00:26 - to lowest score and we want to add the
00:29 - code to easily save and load our high
00:31 - score table so we won't be able to add a
00:34 - new high score then reload the scene and
00:36 - that high score won't be saved all right
00:38 - so let's get to it so here we are in an
00:41 - empty scene let's go to the canvas to be
00:44 - and creating the high score table so a
00:46 - new game object this will be our high
00:48 - score table
00:49 - in sum let's create a background now
00:57 - let's add a title text and now three
01:04 - headers for our fields
01:17 - okay this is the basic setup so now
01:20 - let's create the template for a single
01:22 - entry which will later duplicate but now
01:26 - we create a new game object this is the
01:27 - high score entry template let's
01:32 - duplicate these fields okay so these are
01:47 - the various fields now let's put our
01:49 - template inside a container which will
01:51 - contain all of the in sentient entries
01:55 - and move the container up here okay so
02:05 - our Windows setup is complete now let's
02:07 - see on with the code go in here a new
02:09 - c-sharp script this will be our high
02:11 - score table now first let's make a
02:16 - private void awake and on this awake
02:18 - let's grab a reference to the template
02:21 - and the container
02:31 - all right these are our basic references
02:34 - and also on awaken let's hide the
02:36 - template so we do entry template
02:40 - gameobject.setactive into false so we
02:43 - hide the default template all right now
02:46 - in here to test how we're going to
02:47 - duplicate it let's film a part list with
02:50 - a bunch of random stuff in order to in
02:53 - century the template we simply do way in
02:55 - Senshi 8 on the entry template and into
02:59 - the parent which is the entry container
03:08 - so in Senshi 8 the entry transform based
03:11 - on the template we grab the rect
03:13 - transform then we position the rect
03:15 - transform the anchored position so let's
03:20 - also define up here a float for the
03:22 - template height and we simply position
03:26 - it on minus the height multiplied by
03:29 - this in X all right
03:30 - and finally we do our entry transform
03:33 - game objects effective in to true
03:37 - alright so just like that we should be
03:39 - able to see ten entries on our high
03:41 - score
03:42 - what see and if there is as you can see
03:45 - our template is being correctly
03:46 - instantiate okay now it's also update
03:50 - text fields
03:59 - so for the position let's define an int
04:02 - for the ring in this case the rank is
04:05 - the index most one since we don't want
04:07 - the first one to be a rank 0 but rather
04:09 - at rank 1 now we need to convert this
04:12 - into text ok so here we are converting
04:27 - the rank into a proper rank string so
04:29 - for the first you have 1st 2nd 3rd from
04:32 - the others you got 4 5 6 and so on so in
04:35 - here on the position we give it the rank
04:37 - string like that okay now for the score
04:42 - let's just pick a random number and we
04:48 - simply set the text to be scored on a
04:50 - string ok and finally set the name
04:55 - alright this is it let's test and see
04:58 - how it looks and yep there's the window
05:00 - showing all 10 positions with the
05:02 - correct position string the score and
05:04 - the name alright so far so good now back
05:07 - into the code let's organize our code so
05:10 - there we can easily save and load
05:12 - injuries so for that in here let's make
05:15 - a simple class
05:21 - so this glass represents a single high
05:23 - score entry so the information we need
05:26 - is an end for the score and a string for
05:29 - DNA now let's also make a function to
05:33 - add a new entry to the table and in here
05:37 - we're going to receive a high score
05:39 - entry object also a transform for the
05:44 - container and then list of transforms
05:48 - which will be the list that we will add
05:50 - the in Senshi ated transform onto
05:53 - alright so now what we're going to do
05:55 - here is exactly what we were doing here
05:57 - so let's copy this code now in here the
06:04 - main difference is we don't have an
06:05 - index so instead we use the transform
06:08 - list count instead of using the entry
06:12 - container let's just use the container
06:13 - given in here at the end of all of this
06:17 - we add it to our transform list and now
06:21 - let's use the values actually stored on
06:22 - the high score entry so the rank is
06:25 - given by the position on the list ok
06:27 - then here for the score instead of being
06:29 - random let's get it from this dot score
06:32 - and same for the name alright so we now
06:36 - have a very nice function to be able to
06:38 - add a single entry to our list so now
06:41 - let's go up here to remove this code
06:44 - let's create a high score entry list
07:06 - all right so here we have our list with
07:09 - a bunch of random entries so now let's
07:12 - cycle through that list and have the
07:13 - entries using this function all right
07:23 - that should do it so let's test and yep
07:26 - there's the table correctly showing all
07:28 - of our high scores as you can see the
07:30 - first one with name of Triple A there it
07:32 - is right there with 5 2 1 8 5 4 and yep
07:35 - there it is and last one you have max 5
07:39 - 4 2 0 2 4 and yep there it is exactly
07:41 - all right great now obviously in here
07:44 - you can see an easy mistake which is a
07:46 - high score table is meant to be sorted
07:48 - from highest to lowest score so let's
07:50 - sort that now in here we have two
07:53 - options we can sort a list when we add a
07:56 - new entry and always make sure that this
07:58 - list is sorted or we can certain lists
08:01 - when we load the table since we don't
08:03 - have any saving and loading yet let's do
08:05 - the sorting just in here so before we
08:07 - add the entries let's do a simple
08:09 - sorting algorithm
08:21 - all right so here is a very simple
08:24 - sorting algorithm we go through the
08:26 - internal list and for every element we
08:29 - cycle through all the elements after
08:30 - that one then we simply do a test to see
08:33 - which one has the high score and if
08:35 - needed we swap their positions so it's
08:38 - very simple and we should now have a
08:39 - sorted list so let's test and yep
08:42 - there's a certain list as you can see
08:44 - number one is Jo with 8 9 7 then second
08:47 - day with 8 7 2 and so on all right so we
08:50 - now have a very nice table that displays
08:52 - a list of high score entries so now
08:54 - let's deal with saving and loading now
08:57 - to do that we're going to use player
08:58 - profs which are the simplest way of
09:00 - saving and loading persistent data we're
09:02 - going to use the player profs that set
09:05 - string function which allows us to store
09:08 - a string which won't contain all of our
09:10 - high scores so for the data format we're
09:13 - going to store that string using JSON so
09:16 - that way in just one string field we
09:18 - won't be able to store all of our high
09:19 - score data I have done videos on play
09:22 - preps in JSON so check those out if you
09:24 - want to see a more in-depth explanation
09:26 - so first let's do a simple test here on
09:28 - our awake first we just save and order
09:31 - the strength so the we save it with a
09:33 - key in this case high score table and
09:35 - then we save it with a Val so after
09:41 - saving we're going to play Braff's and
09:43 - we get the string stored in the key high
09:45 - score table and let's do a debugger on
09:49 - that so we can see what that returns and
09:52 - there it is the console saying 100 which
09:54 - is exactly what I stored in here ok
09:56 - right so this is exactly how you do
09:58 - saving and loading in the simplest way
10:00 - possible now we don't want to store a
10:03 - string but rather a list of all of our
10:05 - high scores so for that we're going to
10:07 - use the JSON utility which can convert
10:12 - an object into Jason so we do to Jason
10:15 - and then we select our object in this
10:18 - case our high score entry list and this
10:21 - returns a string for our Jason string
10:24 - now in order to use this we need to make
10:27 - sure that the object contained in this
10:28 - list is serializable
10:30 - so we need to go down here into our high
10:32 - score injury and at the attribute system
10:34 - dot serializable so now in here instead
10:39 - of saving this we save our JSON string
10:41 - okay so let's run the code and on the
10:44 - console we should be able to see what is
10:46 - stored on the player perhaps which is
10:47 - our high score entry list stored as the
10:50 - JSON format however this will work since
10:53 - we can't directly convert analyst we
10:55 - need an object that can think that list
10:57 - so let's go down here to make an object
10:59 - for us to save so in here we have a
11:05 - class called high scores that simply
11:07 - contains our high score entry list now
11:10 - in here we create a new high scores
11:13 - object and we set the interim list to be
11:17 - the high score entry list all right and
11:20 - now we can actually use Jason on this
11:22 - object
11:23 - okay so let's see any of these are
11:26 - complete adjacent string which holds all
11:28 - of our high score data now let's go back
11:31 - into the code and let's go up here and
11:34 - comment out the code where we are
11:36 - initializing this list and then said
11:40 - we're going to get that list from what
11:42 - is saved on our Jason so we grab the
11:45 - string for the Jason string which only
11:47 - from the player price get a string for
11:50 - our high score table then we use the
11:55 - JSON utility not from Jason and to
11:58 - convert that jason string now we need an
12:00 - object type this will be the high scores
12:02 - that's our object type and our Jason
12:05 - string so this returns our high scores
12:10 - okay the song and now let's see and if
12:16 - there it is the list some looks exactly
12:18 - the same except now our data is being
12:20 - loaded from a player F string then
12:22 - converted into our high scores object
12:25 - which contains a list of high score
12:27 - entries that we then use to display so
12:30 - we can now save and load now all we need
12:32 - is a way to add a new entry so in here
12:35 - let's make a new function down here make
12:39 - a private void add high score entry
12:42 - we're going to receive an INT for the
12:45 - score and a string for the name now in
12:48 - here the first thing we do is create a
12:49 - high score entry object alright now we
12:55 - want to add it to the save the list so
12:57 - the first thing we do is a little list
12:58 - from the player prefs
13:00 - so we go in here and what we were doing
13:03 - for unloading right this then we add the
13:07 - entry to our list so we go into high
13:11 - scores high scores internal list and add
13:13 - our high score entry and finally we
13:18 - saved and you only update the list so
13:20 - let's see the code here it is we take
13:22 - our high scores and we convert alright
13:36 - so this function should be working to
13:38 - add a new high score entry so let's go
13:40 - up here and let's clean up this code so
13:43 - we no longer need this testing code and
13:45 - on the sorting we are not sorting when
13:48 - saving so we do need to sort when
13:49 - loading so we load the decent string
13:58 - from the point preps converted into a
13:59 - high scores object cycle through the
14:01 - object to make sure the list is sorted
14:03 - and then we create our entry transform
14:05 - now before we do all that let's go up
14:07 - here to add a new entry okay so we are
14:15 - adding a new entry with 10,000 score so
14:18 - let's run the code and see if the new
14:20 - entry does show up and yep there it is
14:23 - there's the new entry which was added to
14:25 - our list so now we can go back to the
14:27 - code and comment out this one so we are
14:29 - no longer manually entering and now it's
14:32 - us again to make sure the new entry has
14:34 - been saved correctly any of there it is
14:36 - the new entry is only there so we now
14:38 - have all of our high scores being
14:40 - correctly saved and loaded so we have a
14:42 - nice simple class that shows our high
14:44 - scores and they persist between runs now
14:47 - let's add a little bit of polish so
14:49 - adding a background for each entry in
14:52 - order to do that it's very simple we
14:54 - just modify the temple
15:00 - all right so there it is very simple we
15:02 - just added a new background to our
15:03 - template now here in the code let's go
15:07 - down here to where we are creating the
15:08 - entry transform and here on let's grab
15:11 - the entry transform dot following the
15:13 - background and we do when a game object
15:15 - outside active and we set the game
15:18 - object to active if this one is odd and
15:21 - not if it's even so we do a modulo of
15:27 - two on our rank and it's active if that
15:30 - one returns one and also let's highlight
15:32 - the first entry and let's also add an
15:43 - image for a small trophy
16:10 - all right so we have the trophy image
16:13 - and then through code we are someone
16:14 - doing a switch on the rank by default we
16:17 - hide the trophy image and his rank one
16:19 - two and three we show it and we set the
16:22 - cone okay so let's see if it looks quite
16:24 - a bit better
16:25 - he appears our high score table as you
16:27 - can see the first player is how I did to
16:30 - show that he is the first you can see
16:32 - the gold silver and bronze trophy and
16:34 - the background switches between dark and
16:36 - light to make it easier to read all of
16:37 - our injuries and if there is there's our
16:40 - high score table so there you have it to
16:43 - create a high score table that displays
16:45 - the rank score a name of each entry
16:47 - while also adding the ability to save
16:49 - and load our high score data as long as
16:52 - you can download the project files in
16:53 - utilities from unity card monkey calm if
16:55 - you have any questions possibly comment
16:57 - and I'll do my best answer subscribe for
16:59 - more videos and I'll see you next time
17:10 - you