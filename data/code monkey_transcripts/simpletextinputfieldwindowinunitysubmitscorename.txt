00:00 - in this video we're going to make a very
00:02 - simple window to receive input from the
00:04 - player this is great for example for a
00:06 - high score table in order to receive the
00:07 - player name or in a store to input the
00:10 - number of objects but it will support
00:12 - passing a string with a valid characters
00:13 - and trigger an action on ok or cancel
00:15 - let's begin
00:20 - [Music]
00:24 - hello and welcome I'm your code monkey
00:27 - and this channel is all about helping
00:28 - you learn how to make your own games
00:30 - with NF tutorials made by a professional
00:32 - indie game developer so if you find the
00:33 - video helpful consider subscribing okay
00:36 - so this is what we want to create we
00:38 - have our very simple input window and we
00:40 - can run on it only with certain valid
00:42 - characters and click OK or cancel so
00:45 - when you do click any of those buttons
00:46 - we get a nice comeback so hit cancel
00:48 - there we go there's our comeback put a
00:50 - number hit OK and there you go there's
00:52 - our comeback one example of this news is
00:55 - over here we have a nice high score
00:56 - table this was actually created in a
00:58 - previous video so check that out if you
01:00 - want to know how the high score table
01:01 - works and over here we have a button or
01:04 - to submit a score so click on it and
01:06 - there you go there's the nice input
01:08 - window asking for the score
01:09 - so in here I can only input numbers so
01:11 - if I try to press each character yep I
01:13 - cannot press any characters I cannot
01:15 - input any letters however I can put a
01:18 - score so let's put and I press ENTER and
01:21 - there you go now it's asking me for a my
01:23 - player name
01:24 - and now here it's limited only to
01:26 - capital letters and just three
01:28 - characters so if I put numbers doesn't
01:30 - work I have to put my three uppercase
01:33 - letters now I hit OK and there you go
01:37 - there's our updated score showing you up
01:39 - on the table alright so this is our goal
01:42 - let's get to it ok so here we are in our
01:45 - staring scene it's empty all we have is
01:48 - a background texture and over here the
01:50 - UI is set up just a basic UI setup with
01:53 - a camera and a canvas if you want to see
01:56 - how I set up my UI check out the link in
01:57 - the description so in here let's begin
02:00 - by making our input window visual so
02:03 - we're going to start off make a new game
02:05 - object call it our UI input window then
02:10 - in sign let's add a UI image for our
02:13 - background and now let's make our input
02:16 - film so a new UI input field ok here it
02:20 - is this is the main component that we're
02:22 - going to use in order to receive input
02:24 - from the player
02:39 - okay so far so good now let's add a
02:42 - title text object to make it look like a
02:44 - UI window
03:04 - the tunnel will also be customizable and
03:07 - now finally let's just make two buttons
03:09 - one for the okay and for the cancel okay
03:29 - we have the buttons now in order to make
03:30 - the buttons work I'm going to use the
03:32 - button UI component from the code mock
03:35 - utilities which is long as you can wear
03:36 - for free from unity calm calm you are
03:39 - free to make your own button script if
03:40 - you want but this one is home phone
03:42 - since it already has a bunch of features
03:43 - and like for example some hover behavior
03:45 - alright so this is pretty much our UI
03:48 - visual setup we have a title and input
03:51 - field and two buttons now it's set up in
03:53 - here we have our background our input
03:56 - field then the turn on background then
03:58 - the tunnel text then we have each button
04:01 - which contains an image for the button
04:03 - background and the button text and if we
04:05 - run our scene there you go this is how
04:07 - it looks like so we have the input right
04:09 - there okay great
04:10 - now let's get to work on the code over
04:13 - here on the scripts folder and let's
04:15 - create a new C sharp script and call
04:17 - this the UI input window drag it on to
04:21 - our window alright and open okay so here
04:25 - let's begin by making the window show
04:27 - and hide alright so here it is very
04:35 - simple we just set the game object to
04:37 - active as true or false that shows our
04:39 - hides our window and then on our private
04:43 - void awake let's our off hidden all
04:46 - right so far so good
04:47 - now let's set our scene up for testing
04:49 - so by here in the editor on the canvas
04:52 - and let's make a new game object call it
04:55 - our UI testing and in here let's just
04:58 - make a button which is going to pop up
05:00 - our window so duplicate this button put
05:05 - it on the UI testing let's call this the
05:07 - submit score button
05:10 - that's what we're trying to test and in
05:12 - here submit score alright there it is
05:14 - very simple now let's make our testing
05:16 - script so a new c-sharp script drag it
05:22 - onto the game object and I'm here let's
05:24 - get the reference to our input window
05:30 - and then let's go to our private void
05:33 - start and here on let's set our button
05:36 - in order to show our window alright so
05:45 - that's it so when we click on our submit
05:47 - score button we're going to run our
05:48 - Intuit window now in here in the editor
05:51 - all we need to do is go into our UI
05:53 - testing and drag our input window
05:55 - reference alright let's test ok here we
05:58 - are and yep the window is hidden now I
06:00 - click on the button and there you go
06:01 - there's our nice window awesome ok so
06:04 - now we have our input window showing and
06:06 - hiding with a testing script in order to
06:08 - test it so now let's deal with the
06:10 - actual input code over here on awake
06:13 - let's grab reference to our input field
06:15 - the buttons and our channel tags
06:34 - all right we have all the fields that we
06:36 - need and now down here on the issue
06:38 - function let's receive the title and the
06:41 - input text that we want by the phone and
06:47 - we simply set both of them alright that
06:56 - should do it now back into testing then
06:59 - here we need to call Show with some
07:00 - parameters so let's pass in our test
07:07 - title and a random string all right
07:12 - let's see okay here we are it's hidden
07:14 - click and if there you go there's our
07:16 - nice test I don't and our nice input
07:18 - string awesome okay now let's make our
07:21 - two buttons work so in order to define
07:24 - how our buttons are going to work over
07:26 - here on the show function let's receive
07:29 - two actions now an action is inside
07:32 - using system an action is just a simple
07:37 - delegate that the returns know and a
07:39 - delegate in case you don't know is just
07:40 - a way to store a function in a variable
07:42 - so here in the show let's receive just a
07:45 - simple action for our on cancel function
07:48 - and let's receive an action with a
07:52 - string parameter for our on okay action
07:55 - this is how we're going to get comebacks
07:58 - from our input window and then here we
08:00 - can simply use these actions directly on
08:02 - our buttons so for the okay button on
08:07 - the click function we simply set it to
08:09 - call the on okay and we pass in the
08:13 - current input field dot text
08:18 - all right it's that simple but we also
08:21 - want the window to hide itself so let's
08:25 - first call hide and then we can't be on
08:28 - ok and then for the cancel button do the
08:32 - same thing we call hide and then we call
08:38 - on cancel all right that should do it so
08:41 - we now have our function which receives
08:43 - an action on cancel and one on ok so
08:46 - back in our testing here let's add our
08:48 - comeback
08:49 - so first the on cancel then we have the
08:53 - on ok can okay it takes a parameter say
08:58 - string input text okay to test it out
09:01 - let's spawn a pop-up we're going to use
09:07 - ECM debug class from the utilities in
09:09 - order to trigger a text pop up on the
09:11 - mouse position and this one let's say
09:14 - cancel and this one let's say ok all
09:25 - right that should do it
09:26 - let's test ok here we are in the window
09:28 - is hidden all right click and there's
09:30 - our nice window ok now click cancel and
09:32 - there you go there's our cancel and the
09:34 - window was hidden now show it again now
09:37 - click OK and there you go ok and receive
09:39 - the input so change the input to do
09:41 - something else
09:42 - click OK and yep there you go it
09:44 - constantly does correctly so we have our
09:47 - compacts correctly working awesome so
09:50 - now with this working it's time to
09:51 - validate our input so here on the show
09:54 - function let's receive a string for our
09:57 - valid characters so these are the only
10:00 - characters that we can input on this
10:02 - input field so the way we validate is by
10:05 - going into the input field and here we
10:09 - have a film for on validate input here
10:12 - is the delegate on that field we have a
10:13 - texture index and added character
10:19 - and now here in this function we
10:21 - validate our character so let's make a
10:24 - proper function for that down here a
10:25 - private we're going to return a
10:28 - character and let's call it validate
10:31 - char and here we will receive a string
10:36 - for our valid characters and then the
10:39 - character that we want to add so here
10:44 - the code is very simple we just go into
10:46 - our valid character string and we do a
10:48 - index of our added character and if the
10:53 - index is not minus 1 that means that
10:56 - character has been found inside our
10:58 - valid characters so the character is
10:59 - valid so we return our added character
11:02 - and if not then the character is invalid
11:05 - so we return an empty character all
11:10 - right so that's it that's our function
11:11 - we pass in evil characters and our
11:13 - character and it's our valid or invalid
11:15 - so we can go here and we use this
11:20 - alright so that's it we make sure that
11:23 - every character typed is inside our
11:26 - valid character string so now let's go
11:28 - into our testing code and in here for
11:31 - example let's try making it only valid
11:33 - for numbers so for the event characters
11:35 - I'm going to pass all the numbers and by
11:39 - default let's pass in nothing and now
11:42 - let's test ok here's the window now I
11:44 - try to press a normal letter and get
11:47 - there you go nothing is happening
11:48 - nothing is inputting now I put a number
11:50 - and there you go I can write a number
11:53 - but I cannot write characters so we can
11:56 - now selectively decide which characters
11:58 - should be allowed on our input field
11:59 - awesome now one small thing let's add a
12:02 - number of max characters so in here very
12:05 - simple we just receive an int let's call
12:09 - it our character limit and then we
12:12 - simply set key input field character
12:15 - limit to be our character 1 so here on
12:19 - let's try just three characters and
12:20 - let's see okay here we are
12:22 - try 1 2 3 and yep I can't type anymore
12:26 - okay right now another thing let's add
12:29 - our keyboard input for the
12:30 - and cancel so we're here on the input
12:33 - window let's also make a front throwing
12:35 - update and in here let's see--we if
12:38 - input and get key down of the key code
12:42 - return or input get key down of the
12:48 - keypad enter all right so if we hit the
12:54 - return or the keypad enter then we want
12:56 - to simulate a okay so we can go into the
12:59 - ok button and manually trigger the click
13:01 - function and do the same thing for the
13:04 - cancel all right so we now have keyboard
13:11 - support
13:11 - let's try okay here we are let's first
13:14 - press escape and there you go there's
13:16 - the cancel now let's input something and
13:18 - press Enter
13:19 - and there we go we have our nice input
13:21 - being supported with the escape and
13:23 - enter keys right great ok so now our
13:27 - input field is pretty much done we can
13:30 - select which characters are valid how
13:32 - many we can write and get comebacks on
13:34 - ok or cancel
13:35 - now let's polish this up a bit first
13:37 - let's make our class easy to use by
13:39 - making it a singleton so we're here I
13:45 - added a static instance field and it
13:47 - gets set on our white and now in here
13:50 - instead of having these functions public
13:52 - let's make them private and instead
13:56 - we're going to expose the static
13:59 - versions
14:11 - all right that should do it so now if we
14:13 - go back into our testing we no longer
14:16 - need to pass around a reference to our
14:18 - UI input window or rather we can use the
14:22 - static function instead just like that
14:27 - right so this makes it much easier in
14:29 - order to use our input window anywhere
14:31 - in our code so let's see here we are and
14:35 - yep everything's on works again so click
14:37 - OK cancel and everything ok great now
14:40 - let's have a UI blocker so we're here
14:50 - I've made a new UI game object stretch
14:53 - to occupy everything and it's just a
14:56 - simple pie image what this does is it
14:58 - helps us block so for example we're
15:00 - going to put the input window then the
15:02 - marker and then the testing that way
15:04 - when the input window is active we can
15:06 - no longer collect it behind button so do
15:09 - that let's make a simple script
15:18 - all right so here it is I made it a
15:21 - singleton examine like the input window
15:23 - and now here on the show I'm also going
15:25 - to do something interesting which is go
15:29 - into our transform and call set as last
15:32 - sibling this won't put it at the end of
15:35 - the hierarchy which in the UI means it
15:37 - won't show up on top of everything else
15:39 - so let's go into our testing and here
15:42 - before we show our window let's also go
15:45 - into the UI blocker and culture ok let's
15:49 - see ok here we are we can see the button
15:53 - and the Parker is not active and now
15:55 - let's click any up the blocker showed up
15:58 - and as you can see if we pause it went
16:00 - to right to the end so it's on top of
16:01 - everything else so it means we are
16:03 - correctly blocking our submit score
16:04 - button however we are also blocking our
16:07 - input so let's fix that here on the
16:10 - input window on our show let's do the
16:13 - same thing called transform set as last
16:15 - civil ok here we are now click that now
16:19 - that button is not likable but these two
16:21 - are ok great so now let's set things up
16:24 - in order to first input a score and then
16:26 - a name so on our testing let's look at
16:29 - this code so first we call the UI
16:31 - blocker ok then we call show static and
16:34 - first we want to input the score and the
16:38 - score is only numbers but let's put a
16:41 - maximum of 10 characters now when we
16:44 - click on the cancel then we're nothing
16:46 - to do anything so just call the UI
16:48 - blocker in order to hide it however when
16:52 - we click on OK over here we have these
16:54 - core text so with our score we want to
16:58 - show the input again but now for the
17:00 - name so let's again call our UI input
17:04 - window
17:07 - and now we want the player named for the
17:15 - develop characters in here let's make
17:17 - the player only use uppercase characters
17:23 - now for the character limit let's make
17:26 - it only three characters long and now
17:28 - for the functions so if we hit cancel
17:36 - again we do nothing so let's just hide
17:38 - the UI blocker however if we hit okay
17:41 - let's hide the UI Walker and then in
17:44 - here we have our name and score all
17:50 - right that you do it so as you can see
17:52 - we have our input window first grab a
17:54 - score when we click OK then we get
17:55 - another input window asking for the
17:57 - player name let's see ok you are click
18:01 - Submit and yep now it's asking for my
18:03 - score and in here I can only type
18:05 - numbers if I try to put letters doesn't
18:07 - work all right so let's put a score now
18:10 - if I click cancel or press escape there
18:13 - we go nothing happens it goes back ok
18:15 - great so let's do it and put a score now
18:18 - let's press ok and ok now it's asking me
18:20 - for the player name and here again I
18:23 - cannot put in lowercase I cannot put
18:25 - numbers I can only put capital letters
18:27 - so put a name and I can only put 3
18:30 - characters and hit OK and there you go
18:33 - there's our name and our score all right
18:35 - so everything is working great awesome
18:37 - now one thing we can still improve is to
18:40 - make it easier to input numbers so on
18:42 - the input window over here we have our
18:44 - show ok
18:45 - works great however let's make another
18:47 - version that deals with ends
18:49 - automatically so you make a public
18:52 - static void show static just the same we
18:55 - receive a string for the title string
18:57 - and then instead of receiving a string
19:00 - for the input string let's receive an
19:02 - int for our default int value then the
19:06 - characters were going to automatically
19:08 - make it for the character and limit the
19:10 - same and then we're
19:11 - to have an action for the on cancel and
19:13 - an action which won't take a in
19:16 - parameter per hour on okay
19:20 - so here what we do is call instance dot
19:23 - show drink fasten details ring
19:26 - then let's pass in the default in dot to
19:30 - string then for develop characters and
19:33 - let's pass in just numbers and I'm here
19:37 - on the own okay is where things get
19:39 - interesting so in here I'm let's try to
19:46 - automatically parse our string alright
20:01 - so here there's a much more simplified
20:02 - version in order to deal with an input
20:04 - window that only receives numbers so in
20:07 - here when we receive a string for our
20:08 - input text we try to parse it parsing is
20:11 - converting a string into an end if
20:13 - possible so if it is possible we call on
20:16 - ok with our parse int and if it's not
20:19 - possible to parse it then we call on OK
20:20 - with default so now in order to see how
20:23 - useful this is let's go back into our
20:25 - testing and here for the first one we
20:27 - just want to score so let's use that
20:29 - version instead so here we pass in the
20:31 - default end and the default on score
20:34 - let's say it's zero and then we just
20:35 - need to pass in the on cancel and the on
20:39 - ok except the uh no canes that are
20:40 - receiving these cortex receives an end
20:43 - for our score alright so there it is we
20:48 - made a very nice helper function in
20:50 - order to help us input only integers so
20:53 - with that done now let's apply
20:54 - everything to our high score table ok
20:57 - here it is the high score table again
20:59 - this was fully created from scratch in a
21:01 - previous video so check the link in the
21:03 - description to see how it was made and
21:05 - now we're going to use the input window
21:07 - in order to add another score to our
21:08 - table so we're here I'm simply going to
21:11 - add a serum ice field for our high score
21:14 - table
21:20 - and then here when we have the name and
21:22 - the score just call and high score entry
21:26 - that's envy score in our name alright
21:32 - let you do it
21:33 - let's test ok here we are with our high
21:36 - score table and a bunch of scores now
21:37 - let's click Submit score now let's make
21:39 - sure we are at number one okay now a
21:42 - play your name ok and there you go
21:46 - there's our new high score add it to the
21:48 - top of the table so we can add any score
21:51 - we want press ok and there you go we are
21:57 - now receiving our input from the player
21:59 - and patting it into our nice high score
22:01 - table right awesome
22:03 - so here you have a very nice and simple
22:06 - but also very versatile input window as
22:08 - you saw we can easily limit the input
22:11 - characters in order to receive only
22:12 - numbers or a certain type of letters the
22:15 - way we set up our code also makes this
22:17 - class very easy to use and add to your
22:19 - own projects so go ahead and implement
22:21 - this in your own game and start asking
22:23 - your players for input as always you can
22:26 - download the project files in utilities
22:27 - from unity code monkey comm if you liked
22:29 - the video subscribe the channel for more
22:31 - EMT tutorials post any questions you
22:32 - have in the comments and I'll do my best
22:34 - answer them alright see you next time
22:38 - [Music]