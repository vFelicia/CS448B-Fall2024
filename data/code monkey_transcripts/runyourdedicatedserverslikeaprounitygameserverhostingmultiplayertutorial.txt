00:00 - hello and welcome I'm your code monkey
00:02 - in this video we're going to learn how
00:04 - to use unity's Game Server hosting to
00:06 - automatically host dedicated servers for
00:07 - multiplayer games with this you can make
00:10 - a dedicated server build of your game
00:11 - then upload it to the cloud on the NT
00:14 - dashboard and after that it will create
00:15 - multiple instances of that server build
00:17 - so the players can play this system
00:19 - automatically scales the number of
00:21 - servers up or down depending on demand
00:22 - and also by the way this is a tool that
00:24 - used to be called multiplay so it's the
00:26 - same thing they just renamed it to game
00:28 - server hosting and also this tool is
00:30 - already extremely mature and production
00:32 - ready for example this is exactly what
00:34 - Apex Legends uses to manage their server
00:36 - infrastructure so basically if it can't
00:38 - handle a game on that massive scale then
00:40 - it can certainly handle your games now
00:42 - for this tutorial first I'm going to
00:43 - show you how to use Game Server hosting
00:45 - in general with a given build and then
00:47 - I'm going to show you how I made the
00:49 - dedicated server build for my kitchen
00:51 - chaos multiplayer game the specific
00:53 - change that I had to make to make it
00:54 - work so it's also a tutorial on how to
00:56 - use netcode for game objects combined
00:58 - with game server hosting also by the way
01:00 - in case you don't know this game was
01:01 - fully built from scratch in my two free
01:03 - courses one on making the game in single
01:05 - player and a second one on making it
01:06 - multiplayer there is one really sneaky
01:08 - thing with regards to how net code for
01:10 - game objects works that took quite a bit
01:12 - of refactoring to make this work and it
01:14 - was also quite a bit tricky to figure
01:15 - out how to make the proper dedicated
01:17 - server build I really couldn't find any
01:19 - info on specifically using Game Server
01:21 - hosting combined with netcode for game
01:22 - objects so hopefully this video won't be
01:24 - very useful to a bunch of people if you
01:26 - find it helpful go ahead and hit the
01:28 - like button you can download the
01:29 - complete project files for this video
01:30 - and expect to see how it all works and
01:33 - beyond that this tool helps you start
01:34 - and sub dedicated servers then Unity has
01:36 - another tool which combines very well
01:38 - with this one which is Matchmaker with
01:40 - that one you can create matches to group
01:42 - players together and then that tool can
01:44 - talk to game server hosting to spin up a
01:46 - new server instance for those players to
01:47 - play I'm also going to cover how to use
01:49 - Matchmaker in the next video and also
01:51 - this video is sponsored by unity okay so
01:54 - like I said I will first cover how to
01:55 - use Game Server hosting in general
01:57 - assuming you already have a server build
01:58 - and then I will show you how I made the
02:00 - server build for my game so first thing
02:02 - we do is just like any other Unity
02:04 - gaming Services tool let's go to the NT
02:05 - dashboard then up top select your
02:08 - project then unlock outside go into
02:09 - multiplayer and then up here we have
02:11 - game server hosting right away we've got
02:14 - a nice set of multiplayer buttons so
02:15 - let's go ahead and click now this one
02:17 - actually takes some setup so let's just
02:18 - wait for this complete
02:21 - okay setup is complete so now let's
02:24 - follow these steps first one is
02:26 - integrate with your game server and as
02:28 - you can see this tool is multi-platform
02:30 - for example like I mentioned Apex
02:32 - Legends use this young but it is not
02:33 - made with unity so here you have a Unity
02:36 - SDK and real SDK and you can also use it
02:38 - with a custom engine through the API
02:40 - here we're going to use Unity so let's
02:42 - go with that next step is link the
02:44 - project so open up your unity and first
02:47 - of all appear on the top left corner
02:48 - make sure you are signed in if you're
02:50 - not if instead of seeing your name you
02:52 - see a button saying sign in if so then
02:54 - go ahead close Unity then open up ENT
02:56 - Hub make sure you are signed in there
02:58 - and then open the project if you are
03:00 - signed in then go into edit then into
03:01 - project settings and then over here on
03:04 - the left side under services this is
03:06 - where you can create ENT project ID so
03:08 - just go ahead select it and create it or
03:10 - if you already made one in the dashboard
03:12 - then let's go through the other menu
03:14 - using existing Unity ID
03:16 - and just select it so here I've select
03:18 - the project and I'm going to link it
03:20 - okay great so far so good now back in
03:22 - dashboard okay we already did this great
03:24 - and the next step is to install the
03:26 - actual package so this one has to be
03:28 - installed through the name the package
03:30 - does not show up on the Apex Dimension
03:32 - by default so let's go ahead and make
03:34 - sure to copy this one to the clipboard
03:35 - and then back in the project let's go
03:37 - into window into the package manager and
03:39 - up top let's go into the plus sign and
03:41 - let's add a package by name and pass in
03:43 - the exact same name make sure you don't
03:45 - make a mistake make sure you write
03:46 - everything perfectly and let's go ahead
03:48 - and add any up there it is the
03:50 - multiplayer package has indeed been
03:51 - installed okay great now with this
03:53 - package in your project this is how you
03:55 - can then create the build like I said
03:57 - I'm going to cover this in more detail
03:58 - in the second part of this video
04:00 - for now let's keep going assuming you
04:02 - already have a working server build so
04:04 - back in here let's finish the setup the
04:06 - next one is to create a build so let's
04:08 - go with that this one requires a build
04:10 - name you can have different builds with
04:12 - different names or you can also just
04:13 - create one build name and then update
04:15 - the files so here I'm going to name this
04:17 - something like build a then for the
04:19 - operating system let's go with Linux
04:21 - this is for the server build not the
04:23 - actual player build
04:24 - and for the upload method you can either
04:27 - upload the files directly or you can use
04:28 - a container image so you can pre-prepare
04:30 - a Docker container and just upload that
04:32 - either option works in my case I'm going
04:34 - to use the simpler direct file upload so
04:36 - let's go on next and even though you can
04:38 - just drag and drop the files in order to
04:40 - upload them so here I have my funnels I
04:42 - just made a regular Linux build so just
04:44 - go ahead select all the files and drag
04:46 - them and there you go let's just upload
04:52 - alright so all the files have been
04:54 - uploaded let's go ahead click on next
04:56 - and here we create the build with this
04:58 - name we have the first version okay
04:59 - finish so now that we have build we need
05:02 - to create a build configuration which is
05:03 - what defines how the build will run so
05:05 - over here let's begin by giving it a
05:07 - name so let's say build config a and for
05:10 - the Bill Let's select the build that we
05:11 - just uploaded okay then for the
05:13 - executable in this case the Linux
05:15 - executables have an extension of x8664
05:18 - so if we just search for 86 yep there
05:21 - you go we do find the final okay that's
05:22 - it then for the query type this is for
05:25 - getting analytics from your build and
05:27 - the unity package that one uses sqp so
05:29 - let's go ahead and choose this one and
05:31 - finally down here we have the launch
05:33 - parameters with this you can add
05:34 - whatever Flags you want to your
05:36 - dedicated server build that can be
05:37 - helpful to make sure that it runs
05:39 - different logic
05:40 - in this case the defaults don't look
05:42 - great so the port don't remove any of
05:43 - these let's just add just Dash no
05:46 - Graphics in order to make sure that our
05:48 - server build does not have any rendering
05:49 - okay so that's it with this we have our
05:51 - build configuration so let's click on
05:53 - next
05:53 - then here are some config variables you
05:56 - can read these from inside the game so
05:58 - if you want to pass in some extra data
06:00 - to the server as it runs you could use
06:01 - this
06:02 - for example if you want to enable some
06:04 - debug mode or give one player's
06:06 - visibility or something like that but in
06:07 - our case let's just leave them on the
06:09 - defaults let's go then here we need to
06:11 - set the usage settings so the CPU speed
06:13 - and the memory now these numbers are
06:16 - obviously going to vary depending on
06:17 - what kind of game you're making but
06:19 - after you have the build and the servers
06:21 - are running you can then monitor to see
06:22 - how much it's using then you can come
06:24 - back here and modify these values you
06:25 - can use defaults or going to custom and
06:27 - just input anything
06:28 - so for starters let's go with defaults
06:30 - this is more than enough for our simple
06:31 - game okay let's go ahead and finish and
06:34 - actually as soon as I try to get an
06:35 - error that is because the bill needs to
06:36 - be synchronized so if the 7cu very
06:39 - simple just wait a little bit basically
06:40 - the files that were uploaded they need
06:41 - to be synchronized to The Entity service
06:43 - so let's just wait a little bit before
06:45 - clicking on finish again
06:47 - and if they're going outward okay great
06:49 - so we have our build configuration set
06:51 - up the next thing we need is down here
06:53 - to create a fleet basically a fleet is a
06:56 - collection of servers running a certain
06:57 - build on a certain region so let's go
06:59 - ahead and create a brand new one let's
07:01 - give it a name like Fleet a then yep we
07:04 - are using Linux and let's go ahead and
07:05 - select our build config okay great let's
07:08 - go next then for the region later on you
07:11 - can also add more regions to a fleet for
07:13 - now since I'm in Europe I'm just going
07:14 - to select Europe okay great then for the
07:17 - minimum and maximum servers
07:19 - like it says here if you put a minimum
07:21 - above zero if you do that then you will
07:23 - have some cost even if no one is playing
07:24 - the game so if you are trying to limit
07:26 - costs then definitely make sure over
07:28 - here on minimum put zero and for the
07:30 - maximum servers again this is going to
07:31 - depend on your game but just for testing
07:33 - let's just go with one that's more than
07:35 - enough okay let's go ahead and finish so
07:37 - with that we have a build we have a bond
07:40 - config and a fleet all of that setup now
07:42 - let's verify that it's all working by
07:44 - making a test on location so here let's
07:46 - go ahead and select the fleet select our
07:48 - region and select the build config let's
07:49 - go on next and then let's go ahead and
07:51 - run the text so that is going to request
07:54 - an allocation and now it is waiting for
07:56 - the server
07:58 - and if we can see the server has been
08:00 - allocated we can see the server npn
08:03 - ports so let's go ahead and finish and
08:05 - if on the side we go into the servers
08:06 - menu up here we do see a list of all the
08:09 - servers so we can inspect this one which
08:11 - has been allocated we've got a bunch of
08:13 - analytics then we can see a bunch of
08:14 - events and then over here we can see a
08:16 - log and Yep this is essentially the
08:18 - unlock the unity generates so right away
08:21 - we can see that it is running with no
08:22 - graphics and if we scroll down we can
08:25 - see all of the regular logs so in my
08:27 - case I've got a bunch of debug down logs
08:29 - in order to see which scene the
08:30 - dedicated server is in so over here we
08:33 - can see that it did allocate some
08:34 - resources it got a port where it should
08:37 - allocate and then allocated in there and
08:39 - now it is ready to receive the players
08:40 - okay so now here I have my regular game
08:43 - build I go inside multiplier and yep
08:45 - right away I do see two ways of joining
08:47 - a server I can see a server list and it
08:49 - shows me the server ipn port or down
08:51 - here I've got two text boxes so I can
08:53 - input the ipn port and join by IP so
08:56 - with either of these if I click on it if
08:58 - there go connecting any of their yo it
08:59 - connected to the final dedicated server
09:01 - and everything else plays as normal so
09:03 - over here I can set as ready and yep it
09:05 - goes into the main game and now I can
09:07 - play the game as normal
09:09 - all right awesome so everything is
09:12 - working in the game
09:13 - and here in dashboard we can verify that
09:15 - it is working
09:16 - so let's just refresh the slogs let's
09:18 - just change page come back here and
09:19 - their Guild log is refreshed so we can
09:21 - see it and if I can see one client did
09:23 - connect it went as ready and loaded the
09:25 - final scene okay great so everything is
09:28 - working perfectly now one more option
09:30 - that I add over here into the game is
09:31 - the ability to create a server now I'm
09:34 - going to talk about this part a bit more
09:35 - in a little bit but in most cases you
09:38 - probably would not expose this button to
09:39 - the players you don't want players to
09:41 - manually be able to create tons of
09:43 - allocations which you then have to pay
09:44 - for so I made it here just for testing I
09:47 - can click on this button and if with
09:49 - that here I have a successful level
09:51 - location and over here yep we can see we
09:53 - do have two servers allocated and on
09:56 - serverless yep I do see both servers so
09:58 - I can join this brand new one connecting
10:00 - and it's inside and everything else
10:01 - works as normal okay so everything is
10:03 - working perfectly now let's see how I
10:05 - made the build work by the way like I
10:07 - mentioned this game that I'm using here
10:08 - kitchen chaos this is a game that I
10:10 - built entirely in the previous two free
10:11 - courses so if you want to see how all
10:14 - the code is set up and how all of this
10:15 - was built from scratch go watch those
10:17 - here for making the dedicated server
10:19 - build the main thing is you must
10:21 - automate the process for getting the
10:22 - bill into a state where it is ready to
10:24 - accept players so in the case of this
10:26 - game
10:26 - first it starts off on the main menu
10:28 - then we go into the multiplayer scene
10:31 - and only then we can create a game which
10:34 - then goes into the character's light
10:35 - scene and it's all in here that it's
10:37 - actually creating the connection so
10:39 - basically for the dedicated server we
10:40 - need to skip all those steps until we
10:42 - get here so how I did then how I handled
10:45 - that dedicated server logic is over here
10:47 - on the script compilation I defined a
10:49 - defined symbol for a dedicated server
10:51 - then over here in the code I can make
10:53 - some logic specific just the dedicated
10:55 - server so for example I have this
10:56 - correct place on the main menu so it
10:58 - just is an if test for that symbol and
11:01 - if so it just doesn't log and loads the
11:02 - lobby scene right away so automatically
11:04 - and then on the lobby scene I've got the
11:06 - regular kitchen game Lobby and on this
11:09 - script it does a bunch more dedicated
11:10 - server Logic the important one is right
11:12 - here after initializing DMT services
11:15 - you need to make sure to only call
11:16 - multiple events after this one so after
11:19 - that here we have an if if so then it
11:21 - first of all listens to some server
11:23 - events and then the important one is
11:25 - actually the multiply allocation so over
11:28 - here you get the server config to see if
11:30 - it has already been allocated if so then
11:31 - it goes and runs this function and then
11:33 - this function down here is pretty simple
11:34 - just grab C data related to This Server
11:37 - specifically the most important one is
11:38 - over here to the port it sets the
11:40 - connection data and then importantly it
11:42 - starts a server note how it start server
11:44 - not start host so this function really
11:46 - does example the same thing as start
11:48 - host just with a different function call
11:49 - again remember the differences between
11:51 - server host and client
11:53 - so it starts the server and loads the
11:55 - character select scene but actually
11:56 - before it does that over here the
11:58 - important thing for setting the
11:59 - connection data for this one it goes
12:01 - into the NT transport in order to set it
12:02 - up and for the port that we use is the
12:04 - one that we get here from the
12:05 - multiplayer service this one gives us a
12:07 - bunch of data but in order to set it up
12:09 - with netco for game objects all we
12:11 - really need is just support
12:12 - and also make sure you use the port not
12:14 - the query Port those are two different
12:15 - things and one extremely important thing
12:17 - is over here the enlisted address this
12:20 - one is an optional parameter you can
12:22 - leave it as no however if you do if you
12:24 - omit this parameter if you do it like
12:26 - this then it will not work the server
12:28 - will not be reachable this actually took
12:30 - me quite a bit of time to figure out if
12:32 - you don't like this it won't work you
12:34 - must make sure to listen and must make
12:35 - sure to listen on this IP so
12:37 - 0.0.0.0 so don't forget this and over
12:41 - here for the ipv4 I actually don't think
12:43 - this one is actually necessary I tried
12:45 - this with zero zero zero zero or one two
12:47 - seven zero zero one and either one
12:49 - worked so it seems like the super
12:51 - important parts is over here the port so
12:53 - you must make sure to use the same one
12:54 - as over here and you must make sure to
12:57 - listen on this IP if you don't then it
12:59 - will not connect okay so with all that
13:01 - the transport is set up so then you can
13:03 - start the server and then it just loads
13:05 - the character slight scene which in turn
13:07 - runs this script and on this script
13:10 - we've got some more dedicated server
13:11 - logic
13:12 - at this point the server is ready to
13:14 - accept for players so that is why we
13:15 - call this function
13:17 - so this basically tells the motorway
13:18 - service that Yep this server has reached
13:21 - a ready state so it is ready to accept
13:22 - players now since we can set as ready we
13:25 - also need to set as unready
13:27 - basically when we made the game in the
13:29 - free course we decided that the players
13:31 - should only join during this character
13:32 - selecting after the game starts it
13:34 - should no longer accept players so for
13:36 - that logic I had here on the kitchen
13:38 - game manager which only runs on the game
13:40 - scene
13:41 - and for this one over here on sart once
13:43 - again doing an F on the dedicated server
13:44 - and if so just set the server as ready
13:46 - also one minor thing the log was getting
13:49 - tons of warning messages that were just
13:51 - cluttering the log so to solve that I
13:54 - just set the camera dot main enabled to
13:55 - fonts that disables the camera which
13:57 - sound that error okay so without that
13:59 - that is really all you need with this
14:01 - server gets created it automatically
14:03 - gets to a state ready to accept players
14:05 - and then gets state to get unready then
14:07 - for some other things back here on the
14:10 - lobby script when we are initializing
14:12 - the server yep over here there is a
14:14 - function call to start server query
14:16 - Handler
14:17 - this is basically the sqp server query
14:20 - protocol that we saw a while ago this
14:22 - basically lets the server talk to
14:24 - multiply directly although I'm still not
14:26 - entirely sure what would be the main
14:28 - purpose for that maybe it's to make it
14:30 - work with Matchmaker I'm not sure yet
14:31 - but still you must call this function in
14:33 - order to start the sqp this function
14:36 - then returns an object of this type so
14:38 - an I server query Handler and then based
14:41 - on the documentation you should call a
14:42 - function on the every update so let's
14:44 - see down here where I have the update
14:46 - here it is so some more dedicated server
14:48 - logic if that one is set really the only
14:50 - thing is I'm setting the current players
14:52 - so if you go over here onto the
14:53 - dashboard and you go inside a server
14:55 - over here for the concurrent users you
14:57 - won't see that update if you set that
14:58 - field
14:59 - so you can set this video don't know
15:00 - this one is optional the one that they
15:02 - really require you to do as it says on
15:04 - documentation is on every update make
15:06 - sure to send an update server check this
15:08 - lets the multiplayer backend know that
15:10 - this server is still alive and active
15:12 - then for something else for connecting
15:14 - to the server there's this input field
15:16 - and this button that I shown so here is
15:18 - the script and it's very simple
15:20 - just on click just grab the text from
15:23 - both input Fields just go into DNT
15:25 - transport set the connection data so the
15:26 - ipv4 and the port and you start the
15:29 - client that's it super simple the
15:31 - trigger part was actually making the
15:32 - server browser the tricky part is
15:34 - because that feature that ability that
15:36 - one is not over here on the multiplayer
15:38 - service so if you just use the package
15:40 - you can't actually get the server list
15:42 - over here just got the server config
15:44 - ready and ready and so on you don't have
15:46 - anything to list any servers instead
15:49 - that part actually exists on the web API
15:51 - in order to use this web API you need to
15:53 - create a service account so back in the
15:55 - dashboard go into projects then over
15:57 - here go into service accounts and here
15:59 - you can create a brand new service
16:01 - account when you do then you can
16:02 - generate a key
16:03 - and then down here you can give it some
16:05 - permissions the important one for the
16:07 - server browser is the multiply API
16:09 - viewer after that you can now access
16:11 - this web API from anywhere like for
16:13 - example inside unity and for the
16:15 - endpoint it's the one the servers the
16:16 - endless servers so this one returns all
16:19 - of these servers although do note that
16:21 - this API call requires Authentication
16:23 - you can see in the services web API docs
16:26 - for how that works and basically you
16:28 - need to send as an authorization header
16:29 - so you grab the key ID the secret key
16:31 - you concatenate both those strings and
16:34 - generate a base64 and use that for the
16:36 - authorization so over here in the code
16:38 - that's exactly what I'm doing so I've
16:40 - got the key ID I've got the key secret
16:41 - then I convert it into a byte array and
16:43 - I use convert to base64 in order to get
16:46 - the key base64. then for the project ID
16:49 - and the environment ID
16:50 - for those you can get them from the
16:52 - dashboard so for the project ID just
16:54 - click up here onto the project settings
16:56 - and up here is the project ID and for
16:59 - the environment ID go to somewhere like
17:01 - over here the server list and over here
17:02 - we can see the environment so let's go
17:04 - and manage them and up here we do see
17:06 - the environment ID so when we have all
17:08 - that data then it's just doing a basic
17:10 - get request and for this I use my web
17:12 - request class that I created in a
17:14 - previous video and since then I also
17:16 - updated it with some more features and
17:18 - to make this work I had to modify it to
17:20 - support also sending custom headers I
17:22 - included this class in the project files
17:24 - for this video basically I just made it
17:26 - take an action which receives a Unity
17:28 - Web request so with this I can set the
17:29 - request header and over here I can set
17:31 - the authorization
17:32 - with that I am authenticating this
17:34 - request and then just call the regular
17:36 - URL then we can see on the web API what
17:39 - exactly it returns so you can see that
17:41 - it returns an array and each object is
17:43 - going to be a different server it's
17:44 - going to have the IP the port the status
17:46 - and so on although actually one note
17:48 - which is the Json that this returns is
17:50 - somewhat malformed or at least it
17:52 - doesn't parse automatically using
17:53 - unity's built-in Json utility so for
17:56 - this to work I had to manually put it
17:57 - inside a serverless field here is the
18:00 - type that I'm using so I've got a server
18:02 - list and then each server has on this
18:03 - data and for using all that data I just
18:06 - did a basic visual so the same thing
18:07 - that I did so many things during that
18:09 - course pretty much just instantiating a
18:11 - template setting the button click in
18:13 - order to connect to this IP on this
18:14 - board and for doing that just goes
18:16 - through the entity transport so example
18:18 - the same as previously now one missing
18:20 - piece is how to create new allocations
18:22 - so right now we saw how to do it by
18:24 - creating a test allocation but like name
18:26 - implies this is just a quick allocation
18:28 - just for testing in final game you want
18:30 - some regular allocations and most case
18:32 - is you're actually going to be doing
18:33 - that through Matchmaker which I'm going
18:35 - to cover in the next video but you can
18:37 - also make it manually without Matchmaker
18:39 - however the way you do it is also a
18:41 - little bit tricky for some reason over
18:43 - here on the dashboard there's no way to
18:45 - create a regular allocation just test on
18:47 - locations but you can do it through yet
18:49 - another web API this one is different
18:51 - from the previous none that I shown
18:53 - sectionally took me a while to figure
18:54 - out since there are two commonly
18:56 - separate ones on this one down here we
18:58 - do have an endpoint in order to queue an
19:00 - allocation request this one does require
19:02 - some authorization in order to create
19:04 - new on location we need to have this
19:05 - permission so over here back in the
19:08 - services account then here you need to
19:10 - add the multiply allocations admin and
19:12 - then for this specific API instead of
19:14 - using basic authentication like the
19:15 - previous one for the server browser for
19:17 - this one you need to use the token
19:18 - exchange API in order to do a better
19:20 - authorization the way you do it is
19:22 - pretty simple you just send to the Token
19:24 - exchange API you send that the
19:25 - authorization basic and then you get the
19:28 - return value which is going to be the
19:29 - access token and then you use that on
19:31 - the bearer authorization so so that's
19:33 - exactly the code that I have here I've
19:34 - got my key ID my key secret I create a
19:37 - base64 then with that the first thing I
19:39 - do is a post Json and for the Json
19:42 - request body I send in the Scopes that I
19:45 - want so in this case multiply
19:46 - allocations create and for the endpoint
19:48 - I'm going to go into the token exchange
19:50 - so I'm going to send in the base key 64
19:53 - and that one is going to return the
19:55 - actual JWT token so with that I can now
19:58 - use authorization Bearer passing that
19:59 - token and I can access the multiplayer
20:02 - services in order to create a brand new
20:03 - allocation and yep it allocates now
20:05 - honestly for this specific thing I'm not
20:07 - entirely sure what are the best
20:08 - practices here but I'm pretty sure that
20:11 - you shouldn't give the players the
20:12 - ability to manually allocate servers
20:13 - themselves so this would probably be in
20:16 - some kind of game back end where only
20:18 - you the developer control you can check
20:20 - how many players are playing the game
20:21 - and if all these servers are full then
20:22 - manually allocate some more so in the
20:24 - final game you would not have a create
20:26 - server button like I have here the
20:28 - players would only see the server list
20:29 - and the join IP so with that pretty much
20:32 - everything is working except for a very
20:34 - sneaky issue to do with netcode for game
20:36 - objects alongside some regular problems
20:38 - for those regular problems basically the
20:40 - issue is how the game was made thinking
20:42 - there was always a host that's how I
20:44 - developed the game in the course one
20:45 - example is over here on the tutorial UI
20:47 - on this one this message does show
20:50 - directly on start but then for hiding it
20:53 - it was only being hidden over here when
20:54 - the local play already changed now
20:56 - obviously that makes sense if you got a
20:58 - host the host is going to set as ready
20:59 - and everyone needs to be ready so this
21:01 - won't always trigger but on the server
21:03 - if there's no input then it just never
21:05 - hides the server itself does not have a
21:08 - local player so if you make it is a
21:10 - server build and over here this will
21:11 - never run so this window will never hide
21:13 - now in this case it's not necessarily a
21:15 - problem because the server isn't really
21:16 - going to use any visuals another similar
21:18 - example is over here on the delivery
21:20 - manager now for this one for adding a
21:22 - recipe first of all over here on the
21:24 - update it runs the spawn recipe timer it
21:26 - counts down and then spawns a recipe
21:29 - so he generates a brand new random
21:31 - recipe index and then for spawning that
21:33 - it does that through a client RPC so it
21:36 - goes in here and adds it to the waiting
21:37 - recipes on list now when the game made
21:39 - in the course this worked fine since the
21:41 - host works as both a server and a client
21:43 - so the host would still run this logic
21:45 - and the host would still add a waiting
21:47 - recipe to the list however over here we
21:49 - just have a server meaning the server is
21:51 - not a client so the server is never
21:53 - going to run this client RPC so the
21:55 - issue that we have here is that the
21:56 - server will never spawn recipes will
21:58 - never add them to their own list so the
22:00 - server won't just keep spawning recipes
22:02 - forever since this list will never have
22:04 - any elements the solution is to make
22:06 - sure to add the waiting recipient list
22:08 - directly on the server code however we
22:11 - also need to make sure not to add double
22:12 - the recipes in case we are working with
22:14 - a host so the way that I solve that is
22:16 - like this basically I just made a
22:18 - function for adding a recipe done list
22:20 - so this is just a regular function so
22:22 - not a server or client RPC just a
22:24 - regular function then appear when we
22:25 - generate a brand new recipe we're going
22:27 - to call that function so that the server
22:28 - or the host will run this code and add
22:31 - it to the list and then it's going to
22:32 - fire a client RPC and importantly over
22:35 - here on this land RPC it is going to
22:36 - test if it is a server if so returns so
22:38 - it is not going to do anything
22:40 - so this way the server is going to add
22:42 - it through this method and the clients
22:44 - are going to add through this method
22:45 - with that all of them will have the same
22:47 - waiting recipe list so that's one
22:50 - example of a problem that only happens
22:51 - if playing as a server and does not
22:53 - happen if playing as a host another much
22:55 - much more serious problem has to do with
22:57 - several rpcs basically if you have code
23:00 - running on a server meaning not a host
23:02 - just a dedicated server if you have some
23:04 - code like that and you try calling a
23:06 - server RPC then nothing will happen the
23:09 - server does not run server PCS if they
23:11 - are initiated by the server it won't run
23:13 - them if the client calls a server IPC
23:15 - but it will not run them if it is
23:17 - initiated by the server now this is
23:19 - something that confused me for quite a
23:21 - long time I actually thought this was a
23:22 - bug I asked in the forums but apparently
23:24 - it's normal meaning that in order to fix
23:26 - this one issue required quite a bit of
23:28 - refactoring for example over here on the
23:30 - cutting counter if we go down to where
23:32 - we are cutting so here we have the
23:34 - interact alternate this is where we are
23:36 - actually cutting the object so here it
23:38 - is a server RPC in order to cut the
23:40 - object this part does have some issues
23:42 - since it just goes through the client
23:44 - RPC so it doesn't go through the server
23:45 - but still the more important issue is
23:47 - actually on the second one for testing
23:48 - The Cutting progress so this one is a
23:51 - server RPC so the client is going to run
23:52 - this code because only the client is
23:54 - actually going to cut the object so the
23:56 - client is going to call this function
23:58 - and run the server IPC so then this
24:00 - function down here this one is actually
24:01 - going to run on the server so that's
24:04 - fine so far so good however then for
24:06 - destroying and spawning objects these
24:08 - are only going to happen on the server
24:09 - if we follow this function call we go
24:11 - into this one and we have another set of
24:13 - RPC and the issue is that this code over
24:15 - here this one is not going to run
24:18 - so going back to interact alternate this
24:19 - one runs on the client and the client
24:21 - calls this server PC Then This Server
24:23 - RPC runs on the server and then if the
24:25 - server tries to call this function it is
24:28 - going to run this code which is going to
24:29 - try to call the server RPC but whilst on
24:31 - a server RPC you cannot run a server PC
24:33 - so this code will never execute so
24:35 - nothing will ever happen this is the
24:37 - really sneaky issue which is really
24:38 - strange if you have any code running on
24:41 - the server and you want to execute that
24:42 - code on the server then you cannot make
24:44 - it a server PC you need to make a
24:47 - regular non-rpc function in order to
24:49 - conclude from the server if we try to
24:51 - call a server IPC from inside a server
24:53 - then you won't be very confused because
24:55 - this does not throw an error it doesn't
24:57 - do anything it simply literally does not
24:58 - run this code so nothing actually
25:00 - happens the solution that I did here is
25:02 - pretty much the same thing so I just
25:04 - made a non-server RPC function just to
25:06 - actually destroy the object and then on
25:08 - the code to destroy an object if it is a
25:10 - server then I'm going to call the
25:11 - regular non-server RPC function and if
25:13 - it is not the server then I'm going to
25:14 - call it server PC which then won't run
25:16 - it normally this was really tricky to
25:18 - figure out nothing was being
25:20 - synchronized even though the code was
25:21 - actually the same it took me a while to
25:23 - figure out the solution which is simply
25:25 - you cannot call several PCS from inside
25:27 - a server so basically I just right
25:29 - clicked on the server and the client
25:30 - rpcs and I just find all the references
25:32 - and I just went through all of them and
25:34 - make sure that I didn't have any chain
25:36 - server RPC calls for example here on the
25:39 - plates counter for handling the code to
25:40 - generate a brand new plate here I'm
25:42 - using a server C which then tells all
25:44 - the clients to spawn the plates but
25:46 - again this code is running on the server
25:48 - so this will never run this will never
25:49 - do anything so solution over here is
25:52 - just split it just make a non-server
25:54 - non-rpc function just a regular function
25:56 - to run the regular code then I call this
25:58 - one directly from the server and I call
26:00 - the other client RPC and make sure it
26:01 - doesn't run twice on the server so I
26:03 - just went through all my list of rpcs
26:05 - made all those fixes and with that
26:07 - change everything else worked perfectly
26:08 - also by the way for testing
26:11 - since we made over here the dedicated
26:13 - server defined symbol like this it is
26:15 - going to run the dedicated server code
26:16 - and we can just rename this so just with
26:19 - something else just whatever it is as
26:21 - long as it's different and now it will
26:22 - no longer run the dedicated server code
26:24 - just make sure to click on apply and
26:25 - that's it so when I was testing I would
26:27 - make a dedicated server build I make the
26:29 - build and upload it then rename this and
26:32 - run this build over here in the editor
26:34 - with that all of the code for the
26:35 - dedicated server no longer runs so I can
26:37 - run this as a regular build okay so
26:39 - after all that here is the working demo
26:41 - I can either create a test on location
26:43 - or create a manual allocation and there
26:46 - you go God success everything was
26:47 - allocated if I look in the serverless I
26:49 - can see a server has indeed been
26:50 - allocated then in my game yep I can see
26:53 - that server over here on the server list
26:54 - so I can click on it to connect to the
26:56 - server and if there you go now other
26:58 - players can connect
27:00 - and then we can all play together in a
27:02 - nice dedicated server alright awesome
27:04 - now the one missing piece here is how do
27:06 - you automate the server allocation right
27:09 - now it's spring manual you have to
27:10 - either do it in the dashboard or through
27:12 - the web API it would be good to automate
27:14 - that part when players need a server
27:16 - well for that second part that is
27:18 - actually handled through Unity
27:19 - Matchmaker which is their matchmaking
27:21 - tool it's how you can create matchmaking
27:23 - tickets and group players together then
27:25 - when the Matchmaker finds enough players
27:27 - to play a game it allocates a new
27:28 - multiplayer server which you can then
27:30 - automatically join so that your own DNT
27:33 - matchmaker is what I'm going to cover in
27:34 - detail in the next video for now here
27:36 - you'll learn how to get started with
27:37 - game server hosting which lets you run
27:39 - dedicated service in the cloud and you
27:41 - also learn how to combine it with
27:42 - netcode for game objects there isn't
27:44 - much documentation on this specific
27:46 - combination so if you like this video go
27:47 - ahead and like the video check out the
27:49 - downloadable project files and if you
27:51 - haven't then go watch my complete free
27:53 - multiplayer course which covers the
27:54 - entire creation of this multiplayer game
27:56 - and how we got to this point alright
27:58 - hope that's useful check out these
27:59 - videos to learn some more thanks to
28:01 - these awesome patreon supporters for
28:03 - making these videos possible thank you
28:05 - for watching and I'll see you next time
28:09 - thank you