00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're continuing to
00:03 - create the waiting queue in battleground
00:04 - Tycoon we're going to add some buttons
00:07 - to modify the positions in our queue and
00:09 - automatically calculate the entrance
00:10 - position on let's get CERN
00:15 - okay so here's the key we've built so
00:17 - far the yes and join the queue when they
00:20 - reach the front of the queue the
00:21 - building grabs them sends them to a
00:23 - specific position they execute an
00:25 - animation then they leave the building
00:27 - and the next one gets calm and so on so
00:29 - forth the game is still in development
00:31 - so if you like the concept do the same
00:33 - page add to your wishlist and follow so
00:35 - far we've been creating a very static
00:37 - queue we're feeding it a list of
00:38 - positions when it's constructed and
00:40 - that's it now let's add the ability to
00:43 - be able to modify our queue dynamically
00:45 - first of all we need some code to
00:47 - automatically calculate the entrance
00:48 - position based on all the other
00:50 - positions right now we're just placing
00:52 - it to the left of the last position what
00:55 - we want is for the entrance to be
00:56 - following the direction of the last two
00:58 - positions so if the last two positions
01:00 - are going to the left then we do want to
01:02 - place it to the left but if this
01:03 - position was up here the last 2 would be
01:05 - going up and we would want the entrance
01:07 - to be up in order to be able to test our
01:09 - combinations let's first go into our
01:11 - game Handler and add another position so
01:13 - go into my game handler in here and up
01:16 - here in my waiting queue I'm going to
01:18 - add another position in here and it's
01:21 - going to be based on the final position
01:24 - so dot count minus 1
01:26 - based on the last position and I'm
01:28 - simply going to increase it by 0 minus
01:31 - position sign okay so I'm adding one
01:34 - position in the end down all right as
01:37 - you can see I've had this position and
01:38 - there are previous last position but the
01:41 - entrance position is something like this
01:42 - one in this case we want the entrance
01:44 - position to follow this direction so we
01:46 - place down here so in the waiting queue
01:48 - in here let's remove this code and
01:51 - calculate the direction between the last
01:53 - two positions so going to the position
01:55 - list of position let's count minus one
01:59 - so this is the last position on the list
02:01 - and kind of like difference to this one
02:04 - from this one so that's the direction
02:07 - we're not going to normalize this vector
02:09 - since we want to keep the actual
02:10 - distance between the positions and we're
02:12 - going to set our entrance position to
02:15 - the final position was this direction
02:18 - alright let's test and our entrance
02:21 - position should now be under all right
02:23 - there you go this is the position the
02:25 - last position and the entrance position
02:27 - from
02:28 - that direction okay right now you might
02:31 - be able to see that we have an issue in
02:32 - our code here and that is what if the
02:35 - position list only has one position then
02:37 - this one won't return a error and cause
02:40 - an index out of range so we're only
02:42 - going to calculate this if we have more
02:45 - than one position so if position lists
02:48 - count if it is only under one so if we
02:53 - only have one position then we're going
02:54 - to set our entrance position to this
02:56 - position position minus one so if we
03:02 - only have one position then that one
03:04 - won't be the entrance if not then we're
03:06 - going to calculate it based on the last
03:07 - two all right now let's copy this code
03:10 - into its own function so make a private
03:12 - void calculate entrance position and
03:15 - we're going to copy this code in there
03:17 - and call this function up here okay all
03:22 - right so now that we have the entrance
03:23 - position correctly being calculated and
03:25 - let's set some buttons to modify our
03:27 - queue now we're going to need a function
03:29 - in here to be able to add a position to
03:31 - our queue so let's make a public void
03:33 - add position and we're going to receive
03:36 - a vector3 for the new position in here
03:39 - let's simply add the position to our
03:41 - position Liz so position list add our
03:44 - position after we add position let's
03:47 - calculate the entrance position again
03:49 - and let's also spawn a debug sprite all
03:54 - right so back into my game handler
03:56 - instead of adding it to this position
03:57 - list let's at this final position after
04:00 - we create our waiting to you so first we
04:03 - create then I go into the waiting queue
04:05 - and add a position and it's going to be
04:07 - the same as the previous position so now
04:10 - we should see the exact same thing as
04:11 - before yep there it is everything is
04:13 - still exactly the same although we are
04:16 - dynamically adding this final position
04:18 - and the entrance position is correctly
04:19 - being calculated okay now I'm going to
04:21 - make some buttons to be able to modify
04:23 - our queue first on our waiting queue
04:25 - let's make some helper functions to add
04:27 - positions based on four directions so
04:30 - I'm going to make a public void at
04:32 - position
04:34 - and then here we're simply going to call
04:36 - our normal position based on the
04:39 - position list of positional account
04:42 - minus one so I'm going to grab the final
04:44 - position and in this case since I want
04:47 - to go down I'm going to add it a vector
04:48 - 3 0 minus 1 multiplied by a position
04:52 - signs which we're going to go up here
04:56 - define a private pong float on the
04:59 - position size and let's say 8 F which is
05:02 - what we were using previously so let's
05:04 - make the functions for all the other
05:05 - directions
05:08 - alright now that we have our helper
05:10 - functions let's go back into our game
05:12 - Handler and in here let's go into the CM
05:15 - debug class which is part of the code
05:18 - monkey utilities which as always you can
05:20 - wear out for free from unity code monkey
05:21 - comm we're going to create some buttons
05:24 - on the UI that button won't be placed
05:28 - let's say above no text and it's going
05:33 - to trigger the action which will be the
05:35 - waiting Q dot at position in this case
05:38 - up all right let's add buttons for the
05:41 - other positions all right all 4 buttons
05:46 - should now be spawning ok so here are my
05:49 - buttons and now when I click you can see
05:51 - that I'm adding positions in my list
05:53 - alright great so now that we can
05:56 - successfully add positions let's have
05:57 - the ability to remove them so back into
05:59 - the waiting queue and let's make a
06:00 - public void to remove position this
06:04 - function takes no arguments since the
06:06 - position we're going to remove is always
06:07 - going to be the very last one now before
06:10 - we remove the last position we need to
06:11 - make sure that there's no one there so
06:13 - if the guest list count if it is under
06:17 - the position list dot count then that
06:19 - means that the queue is not completely
06:22 - filled up so we can remove the final
06:24 - position so in here we're simply going
06:26 - to go into the position list and remove
06:28 - the position at count -1 so we're going
06:32 - to remove the very final position and
06:34 - after we do obviously we need to
06:36 - calculate our inference position again
06:38 - so on our game ham learn let's add a
06:40 - button to call our
06:42 - function so copy-paste this button and
06:44 - put it somewhere on the right and
06:47 - instead of adding a position in this
06:49 - case we're going to remove a position
06:52 - all right here's my cue I can still add
06:54 - various positions and now I can also
06:57 - remove them so there you have it we have
07:03 - added the ability to add and remove
07:05 - positions to our queue in the next video
07:08 - we're going to make our guess they are
07:09 - more robust and fix some issues that you
07:11 - might have seen again the game is still
07:13 - in development so if you like the
07:14 - concept go to the same page add it to
07:16 - your wish list and follow as always you
07:18 - can download the project fountain
07:20 - utilities from unity code monkey comm if
07:22 - you have any questions post them in the
07:24 - comments and I'll do my best to answer
07:25 - them subscribe for more videos and I'll
07:27 - see you next time