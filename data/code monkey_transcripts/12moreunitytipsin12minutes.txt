00:00 - in this video we're going to look at
00:01 - another 12 unity tips in about 10
00:03 - minutes
00:03 - this is the second video on unity tips
00:05 - so check the playlist link in the
00:07 - description
00:07 - alright let's begin
00:09 - [Music]
00:13 - alright so tip number 21 avoid update
00:16 - performance traps
00:17 - there are certain things that have a
00:19 - pretty significant performance cost that
00:21 - you should never use on
00:22 - update for example over here i've got
00:24 - three examples
00:25 - so we have git component we have find
00:27 - and we have the camera main
00:28 - so here's the code that i'm using for
00:30 - testing just calling these functions
00:32 - which then do the various things a
00:34 - handful of times
00:35 - so if we run and look in the profile we
00:37 - can see the time that each one takes
00:39 - so in terms of time we have test
00:40 - component taking 40 milliseconds
00:42 - test fine taking 40 and the test can
00:45 - remain taking 16.
00:46 - now previously actually camera main used
00:49 - to be one of the worst
00:50 - what this one would do is it would look
00:52 - for every single object in the world and
00:54 - compare the tag to see if the camera is
00:56 - tagged with the main camera tag
00:58 - so here in the scene view i have my main
00:59 - camera as you can see it does have the
01:01 - tag main camera
01:02 - so previously this used to be extremely
01:04 - expensive however in recent unity
01:06 - versions that process is now much faster
01:08 - but still you should cache the value
01:09 - when possible
01:10 - then the other two over here you can
01:12 - also see that they have issues
01:14 - calling get component takes a bit of
01:15 - time and doing a transform find
01:17 - a child also takes a bit of time so the
01:19 - approach for these should always be to
01:21 - cache the values that you need so you
01:22 - would define some member fields to hold
01:24 - all of these values and you would grab
01:25 - it simply on a wake or on start so you
01:27 - grab it just once
01:28 - and then down here instead of calling
01:30 - these potentially expensive functions
01:31 - you would simply use the values that you
01:33 - stored previously on the fields
01:34 - so for the most part you should never
01:36 - use any of these on every update
01:38 - next step block ui clicks with invisible
01:40 - images
01:41 - now when working in the ui naturally you
01:43 - have buttons and
01:44 - images that listen and capture the mouse
01:46 - event so for example over here is a
01:48 - button
01:49 - here it is in the game running and i can
01:50 - click on the button now let's say that
01:52 - you're making a tutorial and you want to
01:54 - disable this button you can make some
01:56 - complex code to disable the click
01:57 - functionality
01:58 - or another approach is to simply make a
02:01 - new
02:01 - ui image and then in here on the caller
02:04 - simply set the alpha community to zero
02:06 - so you do that and then make sure you
02:08 - leave as raycast target enabled
02:10 - and now if we try and here it is and if
02:13 - i try clicking on the left side nope can
02:14 - do it
02:15 - the image is actually blocking the mouse
02:17 - and on the right side there's no image
02:18 - so now it works
02:19 - so this is extremely useful for making
02:21 - tutorials when you want to block certain
02:22 - parts of your ui
02:27 - next the sorting order in the ui is
02:29 - defined based on the hierarchy position
02:31 - so the order you see here on these
02:33 - transform children renders from top to
02:35 - bottom
02:36 - so first the blue button is rendered and
02:38 - then the green button is rendered on top
02:39 - of that one
02:40 - so if you want something to show up on
02:41 - top you set it to the bottom of the
02:43 - hierarchy
02:43 - so if i want to move to show up on top
02:45 - just click and drag to the bottom of the
02:46 - hierarchy
02:47 - and the children also works exactly the
02:49 - same way so if i add an image to this
02:51 - parent container
02:52 - there you go you can see the image is
02:54 - that red circle
02:56 - and then we've got the children so first
02:57 - the background and then first this
02:58 - sprite image
02:59 - so the parent renders then this channel
03:01 - in this chart then
03:03 - as you're making your game you should
03:04 - constantly be following clean code
03:05 - principles in order to keep your code
03:07 - base nice and easy to work with
03:09 - and a really important part of writing
03:11 - clean code is minimizing access just as
03:13 - much as possible
03:15 - now when you want to expose a film in
03:17 - the editor you can simply just make it
03:19 - public
03:19 - and up over here we can see our exposed
03:21 - films and we can set them
03:23 - however doing it this way means that
03:24 - these fields are now accessible to every
03:27 - other part of our code
03:28 - so every other class in our code base
03:30 - can both read and modify this field
03:32 - so if this field is meant to be used
03:34 - solely inside this class and nothing
03:36 - else then we should really just make it
03:37 - as private
03:39 - so we should do this however doing it
03:41 - this way if there you go it hides it in
03:43 - the editor
03:45 - so the solution is to add the attribute
03:47 - serialized field
03:49 - so you add this attribute and now this
03:50 - private field is still private
03:52 - however as you can see it does show up
03:54 - in the editor so now it can only be
03:56 - accessed and modified by the cloud
03:58 - inside that class and also in the editor
04:00 - meaning that no other classes in the
04:02 - code base can modify it next up when you
04:04 - have a certain concept that requires
04:06 - multiple pieces of data you should group
04:07 - that entire concept into a single class
04:10 - for example here is a simple script to
04:11 - handle some sort of construction timer
04:14 - so we have this script which extends
04:15 - monobehavior okay and then the
04:17 - construction data is stored inside this
04:19 - class down here
04:20 - which holds a float in a simple sprite
04:22 - then over here on our script we have a
04:25 - simple field exposed
04:26 - of this type however over here in the
04:28 - editor we cannot see it because that is
04:30 - a custom class
04:31 - so we can solve that and make it show up
04:33 - in the editor by adding the attribute
04:35 - system.serializable
04:37 - so just by adding this if we go back in
04:39 - the editor yeah there you go now it
04:41 - shows up in here and now over here we
04:42 - can set our data
04:44 - related to this last tip is that this
04:46 - same attribute also lets your class be
04:48 - converted into json
04:49 - so for example if i remove it and over
04:51 - here i do a project start
04:53 - and i use the json utility and convert
04:56 - it
04:57 - to json and do a debug dialog to see
05:01 - what this does
05:02 - and if we run it on this object it does
05:04 - work however if we put this object
05:06 - inside another object like for example a
05:08 - save
05:09 - object
05:13 - if we try converting this save object
05:15 - into json let's see
05:16 - you can see that the second parameter of
05:18 - our custom class is not converted into
05:19 - json
05:20 - but again if we add the attribute system
05:22 - dot serializable
05:24 - and if there you go now that inner
05:25 - object does indeed get converted into
05:27 - json
05:28 - so if you have issues with empty objects
05:30 - when converting to json make sure you
05:31 - have the attribute serializable
05:33 - next up when making timers you should
05:35 - increase the amount rather than
05:36 - resetting it back to zero
05:38 - so for example over here i have a simple
05:40 - timer script it
05:41 - increases a timer by time.time and once
05:44 - it goes past the maximum it gets reset
05:46 - down to zero
05:47 - and then we simply do a log on the timer
05:49 - count so how many times this code runs
05:51 - as well as the total time so we're
05:52 - running this every 0.1 seconds
05:55 - so the first log should be 10 times the
05:57 - second log and let's test
05:58 - and if there's a console and it's
05:59 - looking mostly fine so this one is at 12
06:02 - and this one is at 1.4
06:04 - so they're pretty similar however now a
06:06 - bit later you can see that they are
06:07 - totally out of sync
06:08 - so this one is at 18.2 so this one
06:10 - should be at 182.
06:12 - now this has to do with the fact that
06:14 - when you pass the timer max you are
06:16 - going past
06:16 - it by a certain amount and when you
06:18 - reset it back down to zero you are
06:20 - essentially losing that amount
06:22 - so instead of resetting it directly back
06:23 - to zero what you should do in order to
06:25 - have a perfect hammer is to simply
06:26 - subtract it by the timer max
06:28 - so by doing this you are no longer
06:30 - losing the amount that you go past by
06:31 - the timer max so doing this even after a
06:34 - long time you can see that the timers
06:35 - are completely in sync
06:36 - next up avoid magic numbers so this is
06:39 - one of those that is so easy to do and
06:40 - it greatly increases code readability
06:43 - so for example over here is a script
06:44 - that does something the script uses a
06:47 - whole bunch of numbers over here
06:48 - now if you spend some time studying this
06:50 - code eventually you'll figure it out
06:51 - since it's a very simple script
06:53 - however it still requires you to do a
06:55 - bunch of unnecessary effort in order to
06:57 - decipher what
06:58 - all of these numbers mean and if we just
07:00 - do some very slight refactoring and use
07:02 - some local variables with proper names
07:06 - and emp can now see that the code is
07:08 - much easier to understand so we test if
07:10 - the gold amount is bigger than the gold
07:11 - cost
07:12 - and then we're using physics in order to
07:14 - identify the max building radius
07:16 - and then we call a function and pass in
07:17 - a construction timer so now i know what
07:19 - all these values are supposed to mean
07:21 - rather than having magic numbers where
07:22 - you have to figure it out
07:24 - this next one is slightly related to the
07:26 - magic number step
07:27 - so over here i have a simple tooltip
07:29 - class and then down here it has a simple
07:32 - function to show the tone tip
07:33 - it takes the text for the tone tip and
07:35 - then it takes a float for the taunted
07:36 - timer
07:37 - so as you can see this one gets
07:38 - defaulted to -1f and now in this
07:40 - particular case you have to guess that
07:42 - -1 is a special value that really means
07:44 - no timer
07:45 - so up here on our update we are testing
07:48 - if the timer
07:49 - is not minus one f so if it isn't then
07:51 - there's a timer if it is minus one f
07:52 - then it stays visible forever
07:54 - so this works but it's very confusing
07:56 - essentially y minus 1 f instead of 0
07:58 - or why not minus 10 and also being a
08:01 - float means that it's very brittle
08:02 - so if you do some math and just pass in
08:04 - minus 1.1 then all of a sudden your tone
08:06 - tip will show and hide instantly and
08:07 - leaving you very confused
08:09 - so in order to avoid confusion you
08:10 - should define a proper class to hold
08:12 - this parameter
08:12 - so it can be something literally as
08:14 - simple as this just a class only
08:16 - tone tip timer and a simple font for the
08:18 - timer and then over here on the show we
08:20 - receive
08:20 - an object of this type and then up here
08:23 - we store that object and we simply test
08:25 - if that object
08:26 - exists now it makes more sense that if
08:28 - this object is known then that means
08:30 - there is no timer
08:31 - and if it isn't known then there is a
08:32 - timer and with this we also have no more
08:34 - issues with floats
08:35 - so keep your code readable with proper
08:37 - classes where it makes sense
08:39 - next i have a simple demo here so the
08:41 - circle will simply move towards the
08:43 - target
08:44 - there's a circle and yep gets towards
08:46 - the target it gets there and it prints a
08:47 - message on the console
08:48 - so very simple sort of like a
08:50 - pathfinding script and as you can see it
08:52 - works well the object moves reaches the
08:54 - target and fires off the event
08:55 - so the code is very simple just
08:56 - calculate the move direction
08:58 - and move the transform towards that
09:00 - direction along with the move speed and
09:01 - time.
09:02 - time and if you go within a small
09:04 - distance then you have arrived at the
09:05 - target
09:06 - so this looks good then let's say you
09:08 - launch the game with this code and
09:09 - afterwards you start getting complaints
09:11 - from players saying that their objects
09:12 - aren't reaching their target
09:14 - and after a lot of head scratching you
09:15 - come to the conclusion that it is
09:17 - probably related to the frame rate
09:18 - so when making the game for testing you
09:20 - have the super useful
09:22 - application dot target frame rate so
09:25 - with this you can limit the frame rate
09:27 - in order to tell the game to run at a
09:28 - very specific frame rate so for example
09:30 - let's put this running at just 10 frames
09:32 - per second
09:33 - and there goes the circle and yep with
09:35 - this we can see the issue
09:36 - the object is moving and the movement is
09:38 - based on time.time so
09:40 - since the frame rate is so low it
09:41 - essentially makes huge jumps on every
09:43 - frame and never actually lands on top of
09:45 - the target
09:46 - so if you use this code then the game
09:47 - would be broken on people who had
09:49 - slightly weaker machines
09:51 - so now that you have identified this
09:52 - issue you can add some code for example
09:54 - to test the distance before and after
09:55 - moving
09:56 - so make sure you always use target frame
09:59 - rate during testing in order to ensure
10:00 - that your game works at all frame rates
10:02 - then here's a simple one now events are
10:05 - very useful and you should definitely be
10:06 - using them so for example here is an
10:08 - event and then as you know in order to
10:10 - fire the event you simply just call it
10:12 - as if it's a function so on something
10:13 - happen
10:14 - in this case using the standard so this
10:17 - and event r is not empty
10:19 - however if you run like this you're
10:21 - going to have a non-reference exception
10:22 - in case this event does not have any
10:24 - subscribers
10:25 - so before you fire off an event you need
10:27 - to make sure that it exists
10:29 - so one approach is to do this
10:33 - so it has if not no any far off the
10:34 - event so this works but it wouldn't look
10:37 - better if it was a bit more compact
10:39 - so the way that you can do that is you
10:40 - have the event and then you add a
10:42 - question mark
10:43 - and then afterwards you can assume that
10:45 - the object is not known so in this case
10:46 - we can call invoke
10:48 - so this question mark is the
10:50 - non-conditional operator which was
10:52 - introduced in c sharp six
10:53 - and essentially what this does is it
10:55 - tests if it's no so if this object is
10:57 - known then the code stops executing in
10:59 - here and goes on to the next line
11:00 - and if it is not known then it continues
11:02 - forward and runs this code so in this
11:04 - case it won't invoke the event if not
11:06 - now and it will skip it if it is not
11:08 - next here i have a simple health system
11:10 - so just starting the current health and
11:12 - the health amount max
11:13 - starting off with a maximum of 100 hit
11:15 - points and currently with 40 health
11:17 - and then down here a function to get the
11:19 - health amount normalized so it returns a
11:21 - value between 0 and 1.
11:23 - so in this case with this amount it
11:24 - should return 0.4 let's see
11:27 - and nope instead we get a zero the issue
11:29 - is that in here both the health amount
11:30 - and the health amount max are both
11:32 - defined as ins so down here when you
11:34 - divide an
11:35 - int by another int then the result will
11:37 - be an int so the result of this division
11:39 - automatically cuts off any decimal
11:41 - points and that's how you end up with
11:42 - zero
11:43 - the solution is convert at least one of
11:45 - these into a float so you can do a
11:46 - simple cast
11:48 - cast that one down to a float and divide
11:50 - by an end so then you got a float
11:52 - divided by an end which will result in a
11:54 - float which works perfectly and if there
11:56 - it is now it doesn't need return 0.4
11:58 - so always be aware of exactly how data
12:00 - types work or you might find yourself
12:02 - very confused in certain scenarios
12:03 - alright so that's 12 more tips go watch
12:06 - the first video if you haven't seen it
12:07 - yet that's where i cover the first 20
12:09 - tips
12:10 - i hope you found this video helpful
12:11 - learn something new subscribe to the
12:13 - channel for more unt tutorials
12:14 - this video is made possible thanks to
12:16 - these awesome supporters
12:18 - go to patreon.com unitycodemonkey to get
12:20 - some perks and help keep the videos free
12:22 - for everyone
12:23 - post any questions in comments and i'll
12:25 - see you next time