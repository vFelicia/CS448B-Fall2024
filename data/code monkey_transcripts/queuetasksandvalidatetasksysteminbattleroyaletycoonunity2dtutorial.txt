00:00 - hello and welcome I am your code monkey
00:02 - in this video we're continuing to check
00:03 - out the inner workings of the tasks
00:05 - system in Baron tycoon we're going to
00:07 - add support for queuing tasks let's
00:09 - begin
00:12 - all right so here's our scene so far we
00:15 - have a worker in here and we can spawn
00:18 - three different test types we can spawn
00:21 - a move to position task which will move
00:23 - the worker to a position so click yep
00:25 - there he goes he moves anyways alright
00:27 - we can spawn a victory task which will
00:29 - make him play simple animation so click
00:31 - and yep playing the animation stops now
00:34 - requesting and I can spawn a shell
00:37 - sprite and a shell cleanup task which
00:39 - will make the water go to the sprite
00:41 - position playing animation and clean up
00:43 - that sprite so click he goes he plays
00:47 - the animation and poof the sprite gets
00:50 - destroyed ok great now let's say I want
00:53 - to add a task to the system but I only
00:54 - want it to be executed after a certain
00:57 - condition that is where queue tasks come
00:59 - in we're going to create a shell cleanup
01:02 - task but only execute it after some time
01:04 - the game is still in development so if
01:06 - you like the concept go to the same page
01:08 - add it to your wish list and phone so
01:10 - let's begin by going to the tasks system
01:13 - and up here let's make a new class a
01:16 - public class and let's name it queued
01:19 - tasks now in the constructor so follow
01:24 - acute tasks we're going to receive a
01:28 - function and that function will contain
01:31 - the task validation code so in here
01:34 - we're going to receive a func the func
01:37 - type is a double yet very much like the
01:39 - action down here with the only
01:41 - difference being an action returns void
01:43 - and a func return something so in this
01:45 - case we want to return a task and we're
01:48 - going to call this let's say try get
01:51 - task func and let's store this
01:54 - internally all right so the queue task
02:00 - object receives a function which returns
02:02 - a task essentially this function will
02:05 - return a valid task only when that task
02:08 - can actually be executed when it cannot
02:10 - it won't return null so let's make a
02:12 - public function that won't call this
02:14 - internal func so in here let's make a
02:17 - public task that's going to be the
02:19 - return type and let's name it
02:22 - try the
02:23 - tasks and in here all we're going to do
02:26 - is return the actual try yet task phone
02:30 - and try to return so if it can be
02:33 - executed it will return a proper task if
02:36 - not it won't return not so this entire
02:39 - object is representing a queued task he
02:41 - receives a function which will contain
02:44 - the validation code and that function
02:46 - will return the final task when it can
02:48 - be completed if it cannot be completed
02:51 - it won't return now and the task will
02:53 - remain queued so now on to the task
02:56 - system itself first we need to store a
02:58 - list for our queue tasks so let's make a
03:01 - private list of cute tasks and we're
03:04 - going to name it cute task list so this
03:08 - list will essentially have any cute
03:10 - tasks must be validated before being DQ
03:17 - let's initialize it in the constructor
03:20 - just equals new yep and now we need some
03:24 - way to DQ our tasks so for that I'm
03:28 - going to use the function periodic which
03:31 - is part of the code monkey utilities so
03:34 - using code monkey dot u tones as always
03:37 - you can grab the utilities for free from
03:39 - unity code monkey comm and using the
03:42 - utils contains this class the function
03:43 - periodic now the function periodic
03:46 - simply execute an action every certain
03:49 - amount of time so it is perfect for what
03:51 - we want to create in here so we want to
03:54 - have a function that won't be executed
03:56 - and that function let's call it DQ tasks
04:00 - and we're going to execute it every 200
04:03 - milliseconds
04:03 - all right so that's what this object is
04:05 - doing it is executing this function
04:07 - every 200 milliseconds so all let's go
04:09 - down here and make that function so a
04:11 - private void DQ the tasks this function
04:16 - will be called every 200 milliseconds
04:18 - and the reason we are doing this every
04:20 - 200 milliseconds is essentially to so we
04:23 - don't waste performance if a task cannot
04:25 - be executed in this frame then chances
04:27 - are it won't be executable in the very
04:29 - next frame either so there's no point in
04:31 - asking every single frame every 200
04:34 - is fast enough to validate our cute
04:36 - tasks obviously this is very dependent
04:39 - on what kind of game you are making so
04:41 - on the DQ tasks function in here let's
04:44 - cycle through the queue task list so
04:46 - print let's grab the huge task
04:53 - here's tasks equals less I alright and
04:58 - now in here we are going to grab the
05:00 - task from the queued task dot try to the
05:04 - queue that task so now if the task that
05:08 - is returned is different from no then
05:12 - that means the task has been leaked you
05:14 - so let's add it to normal list so we do
05:18 - add task of this task and once this has
05:23 - been DQ'd let's remove it from the list
05:25 - so go into the task place and remove the
05:29 - task at position I and then lower the I
05:31 - since afterwards it's going to be
05:33 - increased alright so if the task is now
05:37 - so returned task is no keep it cute
05:42 - alright so this function goes through
05:45 - all of the queue tasks and grabs the
05:47 - ones that can be executed and add them
05:49 - to the normal list so in here let's just
05:51 - see with CMD bug just so we can do a
05:56 - text pop up and say be cute alright good
06:01 - so finally we also need a function to
06:03 - add a task to the queue so let's make
06:06 - that up here make a public void in queue
06:08 - times and in here and let's first of all
06:12 - very simply receive a cute task object
06:15 - and we're going to simply add it to the
06:17 - queue task list and as a helper function
06:23 - let's make another one a function that
06:26 - receives first of all calling key tasks
06:29 - and in here we're going to receive
06:31 - essentially what the cute has received
06:33 - so we found that returns a task try get
06:37 - task phone and here we're going to
06:40 - automatically create a queue task
06:45 - all right so this is just a humper
06:48 - function so we can use this instead of
06:49 - having to create a key task outside all
06:52 - right so let's go through the logic so
06:54 - we understand how the queue task is set
06:56 - up so elsewhere in our code we're going
06:59 - to call NQ task when we need to execute
07:01 - a task that has some condition that must
07:03 - be met before executing the func
07:06 - argument will contain the function that
07:08 - won't be responsible for testing that
07:10 - condition and creating the final task
07:13 - that is why the front returns a task
07:15 - object so the test system will create a
07:19 - task using that function now the object
07:23 - simply stores it and exposes a function
07:26 - to execute the validation func and if
07:29 - successful it returns a task if not it
07:31 - returns no and down here we have a
07:35 - function periodic which is triggering
07:38 - this function every 200 milliseconds and
07:42 - here we go through all of the queue
07:43 - tasks we grab them we try to dequeue
07:46 - them and the result from this will
07:48 - either be the final task or no if there
07:51 - is no then return test is now so keep it
07:53 - in the queue if it is not known then the
07:56 - task has been the queued and the task
07:57 - object in here can be executed so we
08:00 - added to normal list and remove that
08:03 - from the EQ task so that's the whole
08:05 - logic for queue tasks in the task system
08:08 - so now that we made all that code let's
08:11 - test it out so let's go into the game
08:13 - Handler and down here on left mouse
08:16 - click we are spawning the floor shells
08:19 - and here we are automatically creating
08:22 - the task so instead of simply adding the
08:24 - tasks we are going to NQ it to make sure
08:27 - that the cleanup only happens after 5
08:29 - seconds so instead of using tasks system
08:32 - that task what we want to do is to a
08:34 - task system dot in queue tasks now in
08:38 - queue tasks as you can see we're going
08:40 - to use this one which takes a func as an
08:43 - argument
08:43 - so that phone let's write it in here now
08:47 - before we return this task in here so
08:50 - let's copy it down here before we return
08:54 - this task we want to see if five seconds
08:57 - past so let's do here a float for the
09:00 - clean of time and that time will be time
09:04 - dot time plus five so five seconds from
09:06 - when this sprite has been spawned and in
09:09 - here we're suddenly going to test if
09:11 - time that time if it is bigger than the
09:15 - cleanup time then this can be cleaned up
09:18 - so we're going to return the same task
09:20 - as before which is down here however if
09:23 - the time has not passed then we're going
09:25 - to return home and as you remember from
09:28 - how we set it up if we return home then
09:31 - 200 milliseconds later this function
09:33 - won't be triggered again and again again
09:35 - until it finally returns the task which
09:38 - happens after five seconds all right so
09:40 - whitey form that code is working
09:42 - correctly all right so here's the worker
09:44 - and now when I click it should
09:46 - immediately spawn the sprite but the
09:48 - worker should remain requesting a task
09:50 - until after five seconds and then he
09:52 - won't finally grab the task so let's see
09:54 - if that happens
09:56 - so click now he's waiting he's still
09:58 - requesting because task isn't valid and
10:00 - now all of a sudden yep the task has
10:03 - been DQ'd it is now valid to workers
10:05 - executing execute any weights yep great
10:08 - exactly we have successfully added a
10:10 - validation condition to our tasks before
10:13 - they can be executed so I can spawn
10:16 - multiple and as you can see he stays
10:19 - waiting for task since these tasks are
10:21 - have not been validated yet and now
10:23 - listen all of them are being DQ'd and
10:25 - now he's executing them one by one
10:28 - so there you have it our task system now
10:30 - supports queueing tasks that means we
10:32 - can add a task to the system even if it
10:34 - can't be executed at this very moment in
10:36 - the next video we're going to use the
10:38 - queue task in a real-world scenario by
10:41 - grabbing weapons and taking them to
10:42 - weapon slots but only if they are empty
10:45 - exactly the same logic is being used in
10:48 - battle round IQ again the game is still
10:50 - in development so if you like the
10:52 - concept you're the same page add it to
10:53 - your wish list and phone as always you
10:56 - can download the project files in
10:57 - utilities from Unity code monkey comm if
11:00 - you have any questions post them in the
11:01 - comments and I'll do my best answer them
11:03 - subscribe for more videos and I'll see
11:05 - you next time
11:17 - you