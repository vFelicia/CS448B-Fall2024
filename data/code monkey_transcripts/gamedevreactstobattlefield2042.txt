00:00 - so you make an interface to say that
00:02 - this object is interactable
00:03 - now another interesting thing are over
00:05 - here the player icons
00:06 - using depth of field is a very simple
00:08 - way to
00:11 - hello and welcome i'm your code monkey a
00:13 - professional indie game developer and
00:15 - here i will react and analyze a gameplay
00:17 - trailer i will talk about how things
00:18 - work behind the scenes and how you can
00:20 - build them in your own games
00:22 - you can watch a phone playlist if you
00:23 - want to learn more about some other
00:24 - games
00:25 - in this case we're going to be looking
00:27 - at the battlefield 2042 gameplay trailer
00:29 - from e3 2021
00:31 - alright so let's hit play
00:48 - attention all squads the russian troops
00:50 - are falling back
00:51 - do whatever you can to secure the
00:56 - sectors
00:58 - we push them back but not far enough do
01:01 - not let them regroup
01:15 - okay so one of the first interesting
01:16 - things that we see is this grappling
01:18 - hook
01:19 - so the player aims roughly where they
01:21 - want to connect the hook fires and
01:23 - connects allowing the player to swing
01:24 - around
01:25 - so as for how this works there's two
01:27 - ways it all depends if the grappling
01:29 - hook is an actual moving object or not
01:31 - so if it is then the player simply fires
01:33 - the projectile and goes straight forward
01:35 - and then the projectile itself looks for
01:37 - things to attach to unlike for example
01:39 - that railing
01:40 - so that might be what they're doing but
01:42 - i suspect they're instead just doing a
01:43 - simple boxcast
01:45 - so a boxcast is really just a raycast
01:47 - from one direction so think of it as
01:48 - like a virtual box
01:50 - so it does that towards where the player
01:52 - is aiming and they give it a certain
01:53 - size so the player doesn't have to aim
01:55 - perfectly
01:56 - so here for example it will connect onto
01:58 - this railing around here
01:59 - but the player is aiming up there so the
02:01 - boxcast is a bit bigger just to make it
02:03 - easier for the player to hit their
02:04 - target
02:05 - so it does that and really just looks at
02:07 - the one that is closest to where the
02:08 - player is aiming at
02:10 - then for defining what exactly is an
02:11 - edge now sometimes that can be done
02:13 - automatically so it dynamically
02:15 - identifies all the edges
02:16 - but really most of the time it's really
02:18 - just a manual process so a level
02:19 - designer goes in and says that all of
02:21 - these things
02:22 - all these things are possible valid
02:24 - edges that the hookshot can hook onto
02:26 - so most of the time all this is just
02:28 - manually defined
02:30 - and then the code symbol looks for which
02:31 - ones are valid objects
02:33 - so it just identifies the closest edge
02:35 - then it fires the hook and really just
02:37 - plays an animation
02:38 - so it's just interpolating the hook
02:40 - position until it connects
02:42 - and then it connects and the player can
02:43 - pull so speaking of that
02:45 - on the grappling hook the swing is also
02:47 - quite interesting
02:51 - now if i had to guess i would assume the
02:53 - player has some control for how they
02:54 - shorten or elongate that hook rope
02:57 - so while swinging the player is
02:58 - shortening the rope and taking advantage
03:00 - of the momentum in order to pull them up
03:03 - then for the disconnect so here it's
03:04 - connected and here it disconnects
03:06 - so for this one either it's manual or
03:07 - more likely it's really automatic
03:09 - so it knows the player position and it
03:12 - knows the hook position
03:13 - and then simply calculates the vector
03:15 - and checks if that one is behind the
03:17 - player so it knows
03:18 - the fov where the player is pointing at
03:19 - and perhaps it's as simple as if it's
03:21 - behind it then you suddenly disconnect
03:23 - it
03:23 - then maybe you also take into account
03:25 - the momentum how fast the player is
03:26 - going
03:27 - how far along in the swing they are and
03:29 - so on so there's many things you can
03:30 - take your into account in order to make
03:32 - disconnect feel really seamless
03:33 - so you put all of that together and
03:35 - you've got a very interesting gadget
03:36 - makes me wonder just how difficult it is
03:38 - to make these sort of cool moves i
03:39 - assume it's going to be very easy
03:41 - then over here we also see a takedown
03:43 - animation
03:45 - over here on that one that is pretty
03:47 - much just a normal animation
03:49 - so in terms of logic this is really just
03:50 - a simple distance check so
03:52 - this player right in here it does a
03:54 - sphere cast to identify all the objects
03:56 - around a certain area
03:57 - then identifies an enemy player within
04:00 - that area
04:00 - and if the enemy is within range and
04:02 - it's in front of the player then it
04:03 - simply shows a button prompt in order to
04:05 - enable the player to press the button in
04:07 - order to trigger the takedown animation
04:10 - so in terms of logic it's really simple
04:12 - it's all the animation that sells it
04:15 - then over here we also see a massive
04:16 - sandstorm so a bit of a fun fact as to
04:19 - how these things are usually made
04:21 - now if you're not a game developer you
04:23 - might assume that this is a really
04:24 - complex particle effect
04:26 - but in reality these are likely just
04:28 - simple images
04:29 - usually effects like this one are simply
04:31 - made by some basic sprite sheets
04:34 - so you just create all those various
04:35 - frames and you interpolate them between
04:37 - frames in order to make them look really
04:38 - good
04:39 - and really what they are is really just
04:41 - giant quads that are constantly facing
04:43 - towards the camera
04:46 - so it looks really massive and really
04:48 - complex but in reality it's really just
04:50 - a bunch of very fancy visual trickery
04:59 - then over here we see the tank drop so
05:02 - this is going to be an interesting game
05:03 - mechanic
05:04 - essentially you can call in vehicles
05:05 - from anywhere as for how that works i
05:07 - assume the player has some sort of
05:09 - ipad like device so you use that to
05:11 - select specifically which vehicle you
05:13 - want to spawn
05:14 - and then for the position it simply
05:15 - looks at the player's cursor
05:17 - there's a rake has to identify the exact
05:19 - ring position where the player is
05:20 - looking at
05:21 - then perhaps for a visual they might
05:23 - also show a ghost visual like the one
05:25 - that i use in my house building system
05:26 - in order to identify where the tank will
05:28 - actually land
05:29 - and then it's simply a question of just
05:31 - spawning the tank and letting it fall
05:32 - down
05:35 - then on this shot we can see all the
05:37 - usual battlefield icons
05:38 - by the way if you find the video helpful
05:40 - please hit the like button
05:41 - it's a tiny thing but it really does
05:43 - help thanks so we can see the player
05:45 - names we can see all the objectives
05:47 - a bunch of airplanes so for how you
05:50 - would display something like this you
05:51 - could build a simple world space canvas
05:53 - that's one way that lets you use ui
05:55 - elements but place them directly in the
05:56 - world
05:57 - so as the players moving forward all of
05:59 - the elements stay
06:00 - on top of their position now another
06:02 - interesting thing are over here the
06:03 - player icons
06:04 - since this game is going for a massive
06:06 - scale with 128 players the screen would
06:08 - look really busy if all of these players
06:11 - had their names above them
06:12 - so as you can see all these dots all of
06:14 - them they are unique players
06:16 - so you can imagine just how crowded all
06:18 - of this would look if all of these had
06:20 - their names
06:20 - on top of them all the time so what they
06:22 - did is limited the ones who showed names
06:24 - to only the squad mates
06:26 - so those do show their name as well as
06:28 - their current health
06:29 - but then they also show the names of
06:30 - other players as long as the player is
06:32 - looking directly at it
06:34 - so on this shot right here as the tank
06:36 - drops down the player looks
06:37 - as you can see this one is not a squad
06:39 - mate but since it's right in front of
06:40 - the player's vertical it shows the name
06:42 - so again this is really just a simple
06:44 - boxcast around the player's mouse
06:45 - position
06:46 - and if it collides with other players
06:48 - then you expand in order to show the
06:49 - name the icon and so on
06:53 - and by the way all these gorgeous
06:54 - explosions that you see are also using
06:56 - the same technique that i mentioned a
06:57 - while ago for the sandstorm
07:00 - so over here on the big one the sparks
07:02 - there are some actual particle effects
07:03 - but for the explosion itself that is
07:06 - really just another sprite sheet effect
07:08 - if all of this were actual fire
07:10 - simulations and the game would really
07:11 - slow to a chrome
07:12 - so when possible always make sure you
07:14 - get some visual trickery instead of just
07:16 - trying to recreate reality
07:34 - stop watch out
07:45 - then over here these players run into
07:46 - the elevator
07:49 - so they're running and one of them
07:50 - pushes the button and actually close the
07:52 - door
07:55 - so this is pretty much exactly what we
07:57 - saw previously for the takedown
07:58 - animation
07:59 - so this player right here it's doing a
08:01 - sphere cast right around his position
08:04 - and if it identifies objects it can be
08:05 - interacted with then it shows the button
08:07 - prompt so that the player can interact
08:09 - with that object
08:10 - as for how you create an interactable
08:11 - object this is something that i covered
08:13 - in detail in a previous video
08:15 - so one of the best ways to do it is
08:16 - really just to implement an interface
08:18 - so you make an interface to say that
08:20 - this object is interactable
08:22 - and that way the player class doesn't
08:23 - even have to identify a specific button
08:26 - type it just knows that there's an
08:27 - object within range that can be
08:28 - interacted with
08:30 - and simply triggers the interface
08:31 - interact action so always a great way to
08:33 - make sure that your code is super
08:34 - modular and works with anything
08:39 - then over here on the elevator we get a
08:41 - nice break in order to see the in-game
08:42 - weapon customization
08:44 - so you can modify your loadout directly
08:46 - while playing there's no need to go into
08:48 - a separate menu
08:50 - as for how this works again it's a
08:52 - simple worm canvas just layered on top
08:54 - of the camera
08:55 - note how this also enables the depth of
08:56 - field effect so this player is really
08:59 - close so this one is in focus the weapon
09:01 - of course is also in focus
09:02 - but the background down there is all
09:04 - very blurry using depth of field is a
09:06 - very simple way to always bring your
09:08 - player's focus into one specific object
09:11 - then for interacting with the menu it's
09:12 - going to depend if the player is using
09:13 - either a mouse or a gamepad
09:15 - so if the player is using a mouse then
09:17 - the mouse is likely being used exactly
09:19 - as a mouse
09:20 - so all these work as simple buttons and
09:22 - the player just clicks in order to
09:23 - switch them
09:23 - and if the player is using a gamepad
09:25 - then these are likely just simple
09:26 - buttons activated with d-pad
09:28 - note how this is structured in a
09:30 - cross-like fashion in order to perfectly
09:32 - emulate the d-pad that you have directly
09:34 - on your controller
09:35 - as for the modifications themselves it's
09:37 - really just applying some visual changes
09:38 - to the weapon mesh and then of course
09:40 - changing whatever gameplay changes these
09:42 - mods do
09:48 - then another thing that i haven't
09:49 - mentioned yet is simply the ui
09:51 - it's mostly pretty standard just a bunch
09:52 - of icons so the more complex stuff is
09:55 - the mini map
09:56 - now making the minimap itself is pretty
09:58 - easy i covered it in a specific video
10:00 - quite a while ago
10:01 - now the more interesting thing are all
10:03 - of the areas on the map so you can see
10:05 - the enemy captured areas in red neutral
10:07 - and white and friendly and blue
10:09 - as for how you can handle that it can be
10:10 - really just playing around the texture
10:12 - and some pixel manipulation
10:14 - so you have the map texture and a bunch
10:16 - of textures working as masks
10:17 - then you simply tint the area covered in
10:19 - that mask with a certain color
10:21 - i covered something very similar a while
10:23 - ago when i remade the cleaning minigame
10:25 - from rover mechanic simulator
10:27 - that's exactly the kind of method that
10:28 - you could use to build the map with
10:29 - multiple areas
10:59 - here is the wings to drop looks really
11:02 - nice
11:02 - and it's pretty much just some very
11:04 - simple logic
11:06 - so as the player jumps you simply
11:08 - constantly tell the player's velocity
11:11 - and you check and if the y velocity is
11:13 - under a certain minimum
11:14 - so let's say the player is moving down
11:16 - at minus 5 meters per second
11:18 - if so then the first thing is you change
11:19 - the animations so right here note how
11:21 - the weapon is still in the normal
11:23 - position
11:24 - but as he falls down further and further
11:26 - as the velocity increases increased yep
11:27 - switches
11:28 - into the different animation and then
11:30 - while you're in that second state you
11:32 - can enable the wingsuit or the parachute
11:40 - deployment then over here we see the
11:43 - sensor on tornado
11:44 - so it's going to be really interesting
11:45 - to see how they implement this
11:47 - all of the players and vehicles are
11:49 - essentially being pulled towards the
11:50 - tornado
11:51 - now doing that in terms of logic is very
11:53 - simple you really just apply a force to
11:55 - the rigid body
11:56 - the tricky part is how do you implement
11:57 - that in such a way that it doesn't cause
11:59 - player frustration by being unable to
12:01 - control the character
12:02 - so in this shot the current player and
12:04 - this player next to him
12:05 - it seems like their movement speed is
12:07 - still perfectly normal
12:09 - so perhaps there's some sort of hard cut
12:11 - off so movement is normal until you're
12:13 - right inside the tornado and then you'll
12:14 - lose complete control and probably die
12:16 - after a while
12:18 - so it's going to be interesting to see
12:19 - how they implement
12:36 - oh
12:50 - uh
12:54 - all right so there you have it that's my
12:56 - analysis of the battlefield 2042
12:58 - gameplay trailer
12:59 - i can't wait to see what more they're
13:01 - going to show in july i really like this
13:03 - modern military setting so i'm super
13:04 - happy that battlefield is going back to
13:06 - it
13:06 - the response to this trailer has been
13:08 - pretty great so let's hope the final
13:09 - game is awesome
13:11 - okay so i hope you found the video
13:12 - interesting and useful and learn
13:13 - something along the way
13:15 - check out the phone react playlist where
13:16 - i already covered a bunch of other games
13:18 - alright hope that's useful check out
13:20 - these videos to learn some more
13:22 - thanks to these awesome patreon
13:23 - supporters for making these videos
13:24 - possible
13:25 - thank you for watching and i'll see you
13:27 - next time
13:35 - you