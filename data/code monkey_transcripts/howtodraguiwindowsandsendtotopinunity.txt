00:00 - in this video we're going to write some
00:01 - code to enable us to drag you I wind
00:03 - owes won't be able to click and drag and
00:06 - as we do so they won't also be brought
00:07 - to the front let's begin
00:12 - [Music]
00:16 - hello and welcome I'm your code monkey
00:19 - and this channel is all about helping
00:20 - you will learn how to make your own
00:21 - games with enough tutorials made by a
00:23 - professional indie game developer so if
00:25 - you find the video helpful consider
00:26 - subscribing so this is something that is
00:29 - actually very simple to implement but
00:31 - some completely necessary if you have
00:32 - some sort of game that involves a lot of
00:34 - UI windows a lot of my games are
00:36 - management games which means lots of
00:38 - windows with lots of information and
00:40 - being able to drag and sort them is
00:41 - essential so we're here you can see that
00:44 - I've prepared a bunch of random windows
00:45 - they have no codes or anything special
00:47 - in them just essentially text and images
00:50 - they are set up with a very standard
00:52 - window format so we have a town bar and
00:54 - then the content of that window the goal
00:56 - is to be able to click on the town
00:58 - window and be able to drag the windows
01:00 - around okay
01:01 - so let's make our very nice script in
01:04 - here let's make a new c-sharp script and
01:06 - let's call this dragged window now let's
01:09 - have this script to the part of the
01:11 - window that we want to drag so let's see
01:12 - how the windows are set up so here's a
01:15 - window game object as you can see
01:16 - there's a tunnel game object then inside
01:19 - there's the background image and above
01:22 - it there is the text so those are the
01:24 - two simple components now in here a good
01:27 - way to set things up is essentially to
01:28 - make you title and then put the things
01:30 - behind it this way the title act is a
01:32 - nice container and I could even stretch
01:34 - and modify what's inside okay so on this
01:37 - parent game object and let's drag our
01:38 - dragged window script okay now in here
01:41 - the way we can do our drag is with the
01:43 - event system so we go up here and we add
01:46 - using unity engine event systems inside
01:50 - this namespace is where all the various
01:52 - event types exist over here in the
01:54 - editor you can see that when you create
01:56 - a new UI object it automatically creates
01:58 - the canvas and also creates a event
02:00 - system so this is script that handles
02:02 - only UI interactions now we can go into
02:05 - our code and then here to capture
02:07 - behavior in our scripts all we need to
02:09 - do is implement the various event
02:11 - interfaces so in this case we want to go
02:13 - up here and implement the I drag handler
02:16 - interface okay so this interface
02:20 - requires us to implement the on drag
02:22 - function so we can simply use the help
02:24 - of visual studio to implement interface
02:26 - and there you go
02:27 - the function so this function is called
02:29 - whenever the cursor moves while the
02:31 - player is dragging the mouse so just by
02:33 - implementing this interface the event
02:35 - system will automatically figure out
02:37 - that this script is using it and to call
02:39 - this function when the player drives the
02:40 - mouse so we're hearing let's just do a
02:42 - debug log just make sure that it's
02:45 - working okay so here on now let's click
02:49 - and nothing's triggered but now I move
02:51 - the mouse and there you go there's this
02:52 - dragging event as you can see it only
02:54 - fires when the mouse moves so just like
02:56 - this we are correctly capturing the
02:57 - event awesome now in order to drag our
03:00 - window the first thing we need is to
03:02 - actually know which one is our window
03:03 - since in here we had it our script onto
03:06 - the title but we don't want to move just
03:08 - the title but rather we want to move the
03:10 - entire window so here in the script
03:13 - let's add a nice serialize field for a
03:16 - rect transform and let's call this our
03:20 - drag rect transform so this is the rect
03:24 - transform that we want to drive and now
03:26 - we can go back into the editor here's
03:29 - the script in title and let's drag the
03:30 - parent window onto it just like that and
03:32 - now we go back onto the on drag and in
03:36 - here we simply move the drag rect
03:38 - transform we modify the anchored
03:40 - position and then we can use the event
03:42 - data and in here it has a very nice
03:45 - Delta field which contains the movement
03:48 - from the previous mouse position okay so
03:51 - just like that it should be working
03:52 - let's test okay so here I am now let's
03:55 - click nothing happens is out drag any up
03:58 - there we go the window is following
04:00 - along with the mouse so I click I move
04:02 - it now let go any of there you go the
04:04 - window now stops right great however you
04:07 - can already see an issue let's say I
04:09 - click right up here on the corner now I
04:11 - move it to the left and there you go it
04:13 - is no longer on top of the corner so the
04:15 - window is not perfectly following the
04:17 - mouse position now the issue in this
04:19 - case is due to how the canvas works
04:21 - depending on how you set up the canvas
04:23 - it won't automatically scale things up
04:25 - or down depending on your resolution
04:27 - over here this is the canvas setup that
04:29 - I'm using so you can see screen space
04:31 - overlay and here I have the canvas
04:33 - Candler using a reference resolution of
04:36 - 720p and matching with the height so
04:38 - let's fix our issue
04:39 - it's actually extremely simple all we
04:42 - need to do is increase by the Delta
04:44 - divided by the canvas scale factor that
04:49 - is the field which contains how much the
04:51 - canvas is scaled by so obviously in here
04:53 - we need a reference to our canvas okay
05:01 - so we have our field now let's go back
05:03 - into the editor now in here let's drag
05:05 - the reference here's the canvas and drag
05:07 - it on there okay so let's see the mouse
05:09 - position when we drag the window okay
05:12 - here we are let's grab right on the
05:13 - corner move it to the left any of their
05:15 - you it is perfectly exactly on the
05:17 - corner so where we grab is where the
05:19 - window gets tracked right awesome now
05:22 - let's just quickly apply the same script
05:24 - to these two other windows so again they
05:26 - are built in the very same way so they
05:27 - have a nice title game object so in here
05:30 - just passing the drag window now drag
05:33 - the reference to the parent rect
05:34 - transform and also the canvas and the
05:37 - same thing on this one so here we are
05:39 - now this one can be dragged this one can
05:41 - be dragged and this one can be tracked
05:42 - right great so just like this we already
05:44 - have our drag behavior working correctly
05:47 - now in here just in case we want to have
05:49 - some more complex behavior on drag there
05:52 - are two other interfaces we could
05:53 - implement in here we could add the begin
05:56 - drag Handler and there's also the end
05:59 - drag camera so in here just to test this
06:07 - out let's make our window transparent on
06:09 - begin drag and back to normal after dry
06:25 - okay so here it is some very simple code
06:28 - just to test these two events in here I
06:30 - have a background image and also have a
06:32 - feel for the collar grab the collar on
06:34 - awake then on be in drag let's set the
06:37 - collar
06:37 - alpha 2.4 so it's slightly transparent
06:39 - and we update the background image color
06:42 - and then on the end drag we reset the
06:45 - alpha back to 1 and we apply the color
06:47 - to the background so let's see this in
06:49 - action to see how these two events are
06:51 - being fired okay so here and let's try
06:53 - so I click nothing now I drag any of
06:55 - there you go the background becomes
06:57 - transparent and now I'm let go and you
06:59 - know it's back to normal so it is
07:01 - correctly capturing the on begin and on
07:03 - and drag events alright
07:05 - great so now you know how to implement
07:07 - these three behaviors but now there's
07:09 - one other issue over here being able to
07:11 - drag the windows is pretty great but as
07:14 - you can see we have a pretty bad issue
07:16 - which is the windows are stuck behind
07:18 - one another so dragging is great but in
07:21 - here in order to see what's going on in
07:23 - this window I have to drag it onto here
07:24 - and then this one in here ideally you
07:27 - want whatever you are dragging to be
07:28 - brought to the top so in here we can
07:31 - implement another event let's implement
07:33 - the eye pointer down Hamelin so here it
07:37 - is the on pointer down event so this
07:41 - function is going to be calmed when we
07:42 - press the mouse down well on top of this
07:44 - particular object so when we do that
07:47 - let's make sure that this window is on
07:49 - top of all the others now in here the
07:51 - way the UI handles visibility is by the
07:53 - order that they are in the hierarchy so
07:56 - for here this window is on the top of
07:59 - the hierarchy so it's the first sibling
08:00 - and as you can see it's behind all the
08:02 - others so essentially it renders this
08:05 - window then this and then this one so
08:06 - these two are on top of this one so in
08:08 - order to send this one to the top and we
08:10 - need to do is make it the last sibling
08:12 - and there you go just like that it shows
08:13 - up on top so that's what we want to do
08:15 - through code so now in here in order to
08:18 - send it to the end of the hierarchy we
08:20 - simply go into our drag rect transform
08:22 - and we call set as last civil so this
08:28 - moves the transform to the end of the
08:30 - local list alright that's it let's see
08:34 - ok here we are with that one on top so I
08:36 - move this one it's on top now let's move
08:38 - this one click any of there you know
08:39 - it's brought to the top now this one
08:41 - bring it to the top and then alright so
08:43 - we can now drag our windows and by
08:45 - clicking we can bring them to the top
08:46 - nerve to see what they contain
08:48 - ok so everything is working now let's
08:51 - see how we can make this nice script
08:52 - very easy to use right now in here it's
08:55 - pretty annoying to have to set all these
08:57 - fields directly and if we don't then we
08:59 - get a null error so let's try to make it
09:02 - so that the script automatically locate
09:04 - these references if they are not given
09:15 - ok so here we have the bare essentials
09:17 - for Dragon so let's start off by seeing
09:20 - if we do not have a drag rect transform
09:24 - so if it is no let's try to find it
09:27 - automatically if we only set our windows
09:29 - up following the same center then this
09:31 - is very simple essentially the drag rect
09:33 - transform will always be on this
09:36 - transform parent and we get the rect
09:40 - transform so if you only build your
09:45 - windows using this format where you have
09:46 - the window and right inside it you have
09:48 - the title which you drag if you follow
09:50 - this format then this won't work always
09:52 - so here we automatically get the rect
09:55 - transform for the dragon object and then
09:58 - we need our canvas
10:03 - so in here let's locate our canvas now
10:06 - the UI objects are always children of
10:08 - the canvas so in order to locate this
10:11 - canvas we can simply go up from parent
10:13 - to parent and we will eventually find it
10:15 - so in order to automatically locate our
10:18 - canvas okay so here we have a very
10:34 - simple one so we first start off with
10:36 - this transform parent so well it is not
10:39 - known because eventually we will reach
10:41 - the root so it won't be known but well
10:43 - it isn't no we simply try to we're have
10:45 - the canvas on that transform if there is
10:47 - a canvas attached to it then we simply
10:49 - break out of the cycle and if not then
10:51 - we go to the parent of that test
10:52 - transform so this won't either stop when
10:54 - it finds the canvas or reaches the root
10:56 - of our scene and just like that we've
10:59 - made this script very nice and easy to
11:00 - use so let's make sure that this works
11:03 - so here let's select all of the titles
11:06 - and let's remove all these references so
11:09 - now they all have known references and
11:11 - now let's run the code okay here we're
11:13 - on let's click and drag any of there you
11:16 - go it works perfectly so I can click new
11:17 - drag I can drag it comes to the front
11:19 - and it's draggable and this one and this
11:22 - one and everything works exactly as
11:24 - intended so just like this our scripted
11:26 - very nice and easy to use just add the
11:28 - script and don't even have to bother
11:29 - with any references the script is smart
11:31 - enough to locate the objects he needs to
11:33 - work which makes it extremely easy to
11:35 - use in any sort of project awesome as
11:37 - long as you can download the project
11:39 - from Xena Tony's from unity code monkey
11:41 - calm subscribe the channel for more
11:43 - unity tutorials post any questions you
11:45 - have in the comments and I'll see you
11:46 - next time
11:48 - [Music]