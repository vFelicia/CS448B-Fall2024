00:00 - hello and welcome i'm your code monkey
00:02 - and let's check out how i remade three
00:03 - interesting mechanics and systems from
00:05 - cyberpunk 2077
00:07 - the three mechanics i won't be covering
00:08 - here are the diegetic world ui
00:11 - where the player interacts directly with
00:13 - the world rather than through a separate
00:14 - ui
00:15 - the scanning vision where you can enter
00:17 - a mode and identify special objects and
00:19 - get data from them
00:20 - and the hacking minigame which has some
00:22 - very interesting rules
00:24 - i will cover how they work how i remade
00:26 - them and how you too can make these
00:28 - systems in your own games
00:29 - now this is the first video of this type
00:32 - where i'm remaking mechanics from
00:33 - popular games so let me know in the
00:35 - comments if you find this type of video
00:36 - useful
00:37 - my goal is to show you how all of these
00:40 - aaa games look
00:40 - impossibly complex at the surface but if
00:43 - you dig around a bit
00:44 - you will find that most of the systems
00:45 - they use are actually pretty simple and
00:47 - you can make them yourself as well
00:49 - so first up the diegetic world ui this
00:51 - is a really awesome system that
00:53 - surprisingly few games actually use
00:55 - so here i am inside of cyberpunk and
00:57 - there is this vending machine
00:58 - i can look at each individual button on
01:00 - the vending machine and press a button
01:02 - to make a purchase
01:03 - when i do i spend some money and an item
01:05 - is spawn so in a lot of games this
01:07 - simple interaction
01:08 - would pop up as a separate ui but i
01:10 - really prefer this in world system
01:12 - just use the mouse to point towards the
01:13 - button inside the world and take an
01:15 - action
01:16 - another one is over here on the elevator
01:18 - again two buttons and i can directly
01:20 - look at what i want to press and take an
01:21 - action so that's how it works in
01:23 - cyberpunk there's no ui that pops up all
01:25 - the buttons exist in the world which
01:27 - helps keep you immersed in the game
01:28 - and over here is my version so i'm on
01:31 - this really nice sci-fi city
01:33 - this is actually an asset pack that you
01:34 - can grab for yourself
01:36 - so over here i've got this really nice
01:38 - vending machine and over here i see
01:40 - three interactable buttons so i can
01:42 - simply look at them
01:43 - press a button on the keyboard and there
01:45 - you go as soda comes out so
01:46 - select that one and spawns that object
01:48 - that one spawns that object and that one
01:50 - spawns that object
01:51 - so just like that so you can see how
01:53 - this is much more immersive than having
01:55 - a separate ui when approaching this to
01:56 - take this action
01:58 - then on the other side over here i've
01:59 - got another one i've got a really nice
02:01 - atm machine
02:02 - once again it has all of these
02:04 - individual buttons so i can interact and
02:06 - i can see the buttons being pressed
02:08 - and interacted over there on the screen
02:10 - so as you can see this system is much
02:11 - more immersive than having a separate ui
02:13 - to interact with all these objects in
02:14 - the world
02:15 - so let's see how all of this works the
02:18 - core of it is essentially based on a
02:19 - world canvas which i covered in detail
02:21 - in a separate video
02:23 - essentially that's how you can place ui
02:24 - elements in your world so over here i've
02:26 - got my vending machine object and then
02:28 - in front of it i've got this really nice
02:29 - vending machine canvas
02:31 - and in there the buttons are just really
02:33 - normal images so these are standard ui
02:35 - elements
02:36 - they just have an image and then a
02:38 - script to capture some clicks on the
02:39 - world
02:40 - so on the canvas itself i've got another
02:42 - script for my raycast ui
02:44 - let's look at this and here it is it's a
02:46 - very simple script and what it does is
02:48 - essentially just this
02:49 - we do a raycast on the input mouse
02:52 - position so the mouse is always down the
02:53 - center
02:54 - then checks if it has some results so if
02:56 - there is any object underneath the mouse
02:58 - and then it simply identifies the object
03:00 - by trying to get this interface
03:02 - and then down here simply have a basic
03:04 - keyboard input
03:05 - and if so then look into the last
03:07 - selected object and trigger the other
03:08 - function
03:09 - so here is the script that handles the
03:11 - logic for the vending machine
03:12 - so just a bunch of references for the
03:14 - prefabs to spawn where to spawn it and
03:16 - all the various buttons
03:17 - then here i'm listening to the button
03:18 - events in order to change the color on
03:21 - mouse over
03:22 - then on pointer down we spawn a specific
03:24 - can for each of them
03:25 - then over here for the atm it's exactly
03:27 - the same thing so of the individual
03:28 - buttons inside of a canvas
03:30 - and then a second canvas that just has a
03:32 - text object and then here just some
03:34 - extremely basic logic
03:35 - so the whole thing is just based on
03:37 - using a canvas in the world and doing a
03:38 - raycast
03:39 - and again here it is in the game so i
03:41 - just approach the vending machine i'll
03:42 - look directly at which button i want i
03:44 - press the button and there you go i'm
03:46 - ordering some sodas and things there you
03:47 - go all of them is popping out
03:49 - and over here on the atm i input my code
03:51 - and just like that
03:52 - so as you can see this is a great system
03:54 - and it's really pretty easy to implement
03:56 - so when you work on your own games
03:58 - before you decide to make a separate ui
04:00 - take some time to decide if that action
04:02 - wouldn't be better to be made directly
04:04 - inside of the world
04:05 - next up we've got the scanning vision so
04:07 - this is a really awesome one that took
04:09 - me quite a lot of effort to get just
04:10 - right
04:11 - so here in the game i can press the tab
04:13 - key in order to enable the scanner
04:15 - so the first thing it does is it
04:16 - completely changes the visual for the
04:18 - whole game
04:19 - the objects that are scannable are
04:20 - highlighted and if i look at them i can
04:23 - scan them and get some extra information
04:25 - so it says this type of object and a
04:27 - bunch more data
04:28 - so the main part for this system is the
04:30 - visual it completely changes how
04:32 - everything is rendered with different
04:33 - colors and extra post-processing effects
04:36 - and then it also changes the scannable
04:37 - objects and applies an outline to them
04:39 - so it's a really interesting visual that
04:41 - makes it very clear when you are in
04:42 - scanning mode and when you're in normal
04:44 - mode
04:45 - now remaking this mechanic was really
04:47 - tough shaders and rendering is the main
04:50 - game dev topic that i'm least familiar
04:51 - with since usually i work in 2d but
04:54 - after a lot of trial and error here is
04:55 - my version
04:56 - so it starts off with the eleven looking
04:58 - quite normal so again it's that awesome
05:00 - sci-fi pack so if you want to
05:02 - look at this to make your own version of
05:03 - cyberpunk check the link in the
05:04 - description
05:05 - so i can walk around everything looks
05:06 - perfectly normal then as i press my tab
05:09 - key if there you go our scanning vision
05:11 - is now enabled
05:12 - and i can see how some objects now have
05:14 - a nice outline and they don't look
05:16 - clearly different from everything else
05:18 - and then if i take my mouse and i point
05:20 - it towards an object
05:21 - there you go i get some extra
05:22 - information from that object so visually
05:24 - this is a bit different from the
05:26 - scanning vision in the game itself but i
05:28 - think it works quite well
05:29 - so all the objects are clearly
05:30 - highlighted so as i go back into normal
05:32 - everything looks like that and i go into
05:34 - scanning yep i can indeed see
05:36 - automatically that all of these are
05:38 - scannable like i said remaking this was
05:40 - really tricky mainly because shaders and
05:42 - rendering are not my main skill sets
05:44 - so how i ended up achieving this is
05:46 - possibly not the best way
05:47 - so someone could probably make this with
05:48 - some handwritten shaders in a better way
05:50 - but still i'm very happy
05:52 - with what i've accomplished there the
05:53 - whole thing is based on two very simple
05:55 - shaders and playing around with render
05:56 - features
05:57 - and by the way if you find the video
05:59 - helpful consider subscribing and hitting
06:01 - the like button
06:02 - it really helps out the channel so over
06:04 - here i've got my render pipeline asset
06:06 - i'm using the universal render pipeline
06:08 - and over here you can see it uses a
06:10 - whole bunch of different renderers
06:12 - so first off here's everything looking
06:14 - perfectly normal
06:15 - then when i engage scanning vision the
06:17 - first thing that it does is it enables
06:19 - this post-processing object so as i
06:21 - enable
06:22 - if there you go everything changes the
06:23 - visual so it applies some color
06:24 - adjustment essentially turns everything
06:26 - into a green tent applies a nice little
06:28 - film grain and so on
06:30 - however just with this we don't see
06:31 - these cannonball objects being
06:33 - highlighted at all
06:34 - so then on top of that i go into the
06:36 - main player camera
06:37 - and in here change the renderer for a
06:39 - different one and that as a glow outline
06:41 - to all of the scannable objects
06:43 - now how the objects are identified are
06:45 - by the layer so if i select this car in
06:47 - here i can see over here on the layer
06:48 - they are on the scanning layer
06:50 - so i can inspect the individual render
06:52 - right in here and as you can see it has
06:53 - an extra render features
06:55 - and this one on the layer mask it
06:56 - applies to the scanning and scanning
06:58 - selected
06:58 - and what it does essentially just
07:00 - overrides the material it uses up this
07:02 - material which simply has a custom
07:04 - shader
07:04 - and here it is in shadow graph and it's
07:06 - a very simple shader all it really does
07:08 - is just moves the
07:09 - vertices along with some noise so the
07:10 - object has this nice movement
07:12 - and then simply applies a flat color
07:14 - onto it so with that effect we end up
07:16 - with these objects that have an outline
07:18 - but they still don't look too different
07:19 - from everything else
07:20 - so on top of that then i have another
07:22 - camera here that automatically gets
07:24 - enabled
07:24 - and in there on the preview you can see
07:26 - what the camera sees so this one is only
07:28 - rendering objects on the scanning layer
07:30 - and here it is what this does in game as
07:31 - i disable and enable the camera yep
07:33 - there you go you can see that the object
07:34 - gets
07:35 - rendered on top as a pure black object
07:37 - so this one is using this renderer which
07:39 - is overriding
07:40 - a different material and material is
07:42 - using just normal shader
07:43 - so here it is extremely simple it's
07:45 - literally just the master node
07:47 - just tinted completely in black with 80
07:49 - alpha
07:50 - so essentially that one combined with
07:52 - the previous outline really makes each
07:53 - scannable object really stand out
07:55 - and lastly there is another camera with
07:57 - another render and as i enable this one
07:59 - right now you don't actually see any
08:01 - difference that's because this one only
08:02 - applies to the scanning selected layer
08:04 - so in the scene view if i see the camera
08:06 - preview it doesn't see anything but if i
08:07 - go on to this car and i manually change
08:09 - it from scanning into scanning selected
08:12 - and if there you go that's what it does
08:14 - so that camera is using another renderer
08:16 - here it is and again this one is only
08:17 - being applied to the scanning selected
08:19 - and this one is on the event after
08:21 - rendering so it renders that object
08:23 - after the whole post processing go
08:24 - through
08:25 - and it adds an extra outline and then on
08:27 - top of it the normal object
08:28 - so that's how all the visuals are set up
08:31 - and all the logic is handled through
08:32 - this simple script
08:33 - so it's very tiny pretty much under 100
08:35 - lines long
08:36 - we just have references to all the
08:38 - cameras and everything and over here
08:40 - the function to enable or disable the
08:41 - scanning mode just does everything that
08:43 - we saw
08:44 - so enables the various cameras enables
08:46 - the post processing and modifies the
08:48 - main camera render
08:49 - and then here on the update if it is
08:51 - active then we are simply doing a
08:53 - raycast on the mouse position so right
08:55 - down the center
08:56 - and then we check if the object is a
08:58 - scannable object and if so then we fire
09:00 - an event when the active scanned object
09:01 - changes
09:02 - and then there's a simple ui script that
09:04 - listens to that event
09:06 - so here it is listening to that event
09:07 - and when that happens it simply updates
09:09 - the ui to show that
09:10 - object so here is the ui and each object
09:13 - simply has a script with just a bunch of
09:15 - data
09:15 - so again here it is in game so
09:17 - everything starts off looking completely
09:18 - normal then i press tab and there you go
09:20 - we go into scanning vision and look at
09:22 - that that one is highlighted so it has a
09:24 - name affiliation and so on
09:25 - as i look at something it changes the
09:27 - visual and it shows me some nice stats
09:29 - so there you go i can look at all of
09:30 - them so again this is really tricky to
09:32 - get everything working but i'm quite
09:34 - pleased with the end result
09:35 - it requires some trickery with the
09:36 - renderer features and multiple cameras
09:38 - but i think it looks quite great
09:40 - so here is another awesome mechanic and
09:42 - how you can implement it in your own
09:44 - games
09:45 - and the last system that i remade was
09:47 - the hacking minigame
09:48 - so here it is in cyberpunk when you scan
09:50 - something or you want to crack some
09:52 - encryption you go into this nice
09:54 - minigame
09:55 - the important part is up here this is
09:56 - the sequence that we must find
09:58 - then we also have a buffer so this is
10:00 - essentially how many attempts we have
10:02 - if we film the buffer without achieving
10:04 - the sequence then we'll lose the
10:05 - minigame
10:06 - there is also a timer that starts
10:07 - counting down as soon as i select the
10:09 - first code
10:10 - and over here is the board filled with a
10:12 - bunch of hex codes
10:13 - the rules are that you start off on the
10:15 - topmost horizontal line
10:17 - so you can choose any of these values
10:18 - but none of the ones down here
10:20 - then when you do choose now it goes into
10:22 - vertical mode
10:23 - so now you can only select the values
10:25 - from this vertical line and it always
10:26 - stops between horizontal and vertical
10:29 - and the goal is to hit the sequence so
10:30 - in this case just select this code and
10:32 - yep there's the win
10:33 - so that's a mini game it's pretty simple
10:35 - but it's just the right level of
10:36 - complexity for a nice bonus minigame
10:39 - and over here is my version so it looks
10:41 - pretty much exactly the same since it's
10:43 - really just a ui
10:44 - element and i grab the exact texture
10:46 - functionally it is pretty much a perfect
10:48 - recreation
10:49 - so over here i've got a randomly
10:50 - generated correct sequence the total
10:52 - buffer size the timer the timer bar and
10:55 - over here the entire grid and again all
10:56 - the rules are correct so right now i
10:58 - must select from up here so if i click
11:00 - anything down here then nope nothing
11:01 - works
11:01 - and by the way i also got a simple
11:03 - cursor just following around so that's
11:05 - nice
11:05 - and now it's as soon as i pick one so
11:08 - let's see one that
11:09 - follows the correct path so right in
11:11 - here if i select this one there you go
11:12 - it gets added in there and the timer
11:14 - starts coming down
11:15 - so next up i gotta go into bd so now i
11:17 - gotta select from vertical so i can't
11:18 - click any of these gotta go down here
11:20 - and now another one c so go in there and
11:22 - there you go we've gotta win
11:24 - so here it is and this one was
11:25 - relatively simple to remake there's
11:27 - really nothing too special here it's
11:29 - just a nice and simple minigame
11:31 - so here is the whole script and it's
11:33 - really just 400 lines long
11:34 - when you start the minigame it simply
11:36 - generates a bunch of random possible
11:38 - values
11:39 - then generates a correct sequence and it
11:41 - initializes
11:42 - the whole thing so it defines the size
11:43 - for the buffer sets up a timer
11:46 - then we go through the home grid and
11:48 - generate some random values for it
11:49 - now this whole script is included in the
11:51 - download them all project files if you
11:52 - want to check it out
11:54 - now the trickiest part for this one was
11:56 - how do you guarantee that the correct
11:57 - sequence is possible
11:59 - since the rules for this game are pretty
12:01 - strict essentially you have to go
12:03 - horizontal then vertical and so on so if
12:06 - you use just pure randomness you will
12:07 - probably
12:08 - end up with an incorrect sequence that
12:10 - cannot be possible
12:11 - so my solution here was really just the
12:13 - most straightforward thing possible
12:15 - i just have this function which forces a
12:17 - solution so it starts off on horizontal
12:19 - so it starts off by picking a random one
12:22 - from the first horizontal row
12:23 - then it picks a random one from the
12:25 - following vertical line and force it to
12:27 - the second sequence code
12:29 - and just keeps going until it finds the
12:30 - whole sequence so it's a very
12:32 - straightforward approach and works
12:33 - pretty great
12:34 - so the game starts off like this i have
12:36 - to get the sequence so as i look around
12:38 - the board yep i can see this one this
12:39 - one and this one and there we go we've
12:41 - got a one
12:41 - so here it is the nice minigame fully
12:43 - working alright so there you have it
12:45 - three very interesting systems and
12:47 - mechanics from cyberpunk 2077
12:49 - and how you two can build them in your
12:51 - own games first up how to handle ui
12:54 - interactions in your world
12:56 - then how to make a visually interesting
12:58 - scanning mode
12:59 - and lastly a nice simple hacking
13:00 - minigame like i said this is the first
13:03 - video of this type so if you like this
13:04 - kind of content hit the like button and
13:06 - let me know in the comments
13:07 - i think this could be a very useful
13:09 - ongoing series for analyzing and
13:11 - remaking popular games
13:12 - this video is made possible thanks to
13:14 - these awesome supporters go to
13:15 - patreon.com
13:17 - unitycodemonkey to get some perks and
13:19 - help keep the videos free for everyone
13:21 - alright so thanks for watching post any
13:22 - questions you have in the comments and
13:23 - i'll see you next time
13:34 - you