00:00 - in this video we're going to learn how
00:01 - to start working with ECS in unity 2019
00:04 - we're going to cover what is EC s how
00:07 - it's different from game objects and
00:08 - then we will write a nice test to see
00:10 - the code in action and how ECS enables
00:13 - epic performance let's begin
00:18 - [Music]
00:22 - hello and welcome I'm your code monkey
00:25 - and this channel is all about helping
00:26 - you learn how to make your own games
00:28 - with nf2 torrents made by a professional
00:30 - indie game developer so if you find the
00:32 - video helpful consider subscribing okay
00:34 - so first of all ECS is one of the
00:36 - pillars of the new unity dot stack stack
00:38 - if you want to learn more about dots
00:41 - check the link in the description for
00:42 - the video where I go over what it is how
00:44 - it works and what are the benefits
00:46 - essentially dots is composed of the
00:48 - c-sharp chopped system the burst
00:50 - compiler and the entity component system
00:52 - the main difference when writing ECS
00:55 - code is switching from a object-oriented
00:57 - design into a data oriented design in
01:00 - the classical way of working with mana
01:03 - behaviors you have data and behavior in
01:05 - the same object whereas in ECS those two
01:08 - are separated you have components that
01:11 - simply home data systems that do work on
01:13 - that data and finally an entity which
01:16 - contains instances of component dan so
01:19 - with the theory out of the way let's get
01:21 - to writing some code first to get
01:24 - started trying out easiest you need to
01:25 - be using unity 2019 then go here into
01:29 - window and open up the package manager
01:30 - as of this recording the entities
01:33 - package is still in preview so you need
01:35 - to go into advanced and enable show
01:37 - preview packages then here scroll down
01:40 - and install the entities package related
01:44 - to that is the mathematics package this
01:47 - is a math library specific with
01:48 - performance in mind
01:49 - and finally the hybrid renderer package
01:52 - this is what we're going to use in order
01:55 - to render our entities other packages
01:57 - related to unity dots are down here the
02:00 - jobs package and up here the burst
02:03 - compound but for now we're just going to
02:05 - focus on simple ICS so all I need is the
02:08 - entities mathematics and hybrid render
02:10 - so with all of that we have all the
02:13 - components to start playing around with
02:14 - the entity component system alright so
02:17 - let's start off really small first let's
02:19 - make a normal script just to run our
02:21 - code so in here make a new c-sharp
02:23 - script let's call this just testing and
02:26 - let's add it to a game object so a new
02:29 - game object
02:31 - with testing and drag our script okay so
02:34 - here we can test our code now the
02:37 - simplest thing we can do is just create
02:39 - a new entity so for that first we need
02:41 - to go up here and make sure we are using
02:43 - unity entities and then we can test our
02:48 - code on private voice start and here to
02:51 - create an entity we need to use the
02:53 - entity manager so we grab it from the
02:55 - world that active dot entity manager
02:59 - this is the class that manages all of
03:02 - the entities then we can simply go into
03:07 - the entity manager and we just call
03:10 - create entity and just like that we have
03:13 - created a simple entity so let's run the
03:16 - code and see okay our code is running
03:19 - now all we did was create an empty
03:22 - entity there is no renderer or anything
03:24 - attached to it so obviously there's
03:25 - nothing to see here however we can go
03:28 - into window into analysis and the entity
03:31 - debugger so here is the entity debugger
03:34 - and here indeed you can see we have an
03:35 - entity all right so that's our first
03:38 - step creating a simple entity now let's
03:40 - go into the second part of ECS which is
03:42 - adding components so let's make a simple
03:45 - component let's say that we want this
03:48 - entity to have a 11 like in an RPG so we
03:51 - want to make a new component in order to
03:53 - hold that level so in here we make an EU
03:56 - c-sharp script let's call this the
03:58 - unlevel component and then here let's
04:01 - get rid of the normal mono behavior code
04:03 - and instead we're going to be using
04:06 - unity that entities and here we extend a
04:11 - component that this would we need in
04:15 - order to be able to use this as a
04:16 - component another difference is
04:19 - components are always structs so this is
04:21 - not a class 4 rather than a struts and
04:23 - now in here we just had all the fields
04:26 - that we want so in this case for our
04:27 - level let's just add a public hold for
04:30 - the current level alright so that's
04:32 - pretty much it for our component again
04:34 - remember components only hold data they
04:37 - don't have any behavior so now we can go
04:40 - back into our testing class and in here
04:42 - when we create an entity
04:44 - you can see that we can pass in a array
04:46 - of component types so in this case we
04:48 - pass in the component of type level
04:50 - components so just like that our entity
04:54 - won't be created with a level component
04:56 - so let's see so here we are the code is
05:00 - running and on the entity debugger we
05:02 - can click on the entity and here in the
05:03 - inspector you can see that it does
05:05 - indeed contain a level component ok so
05:08 - far so good now back in the code let's
05:10 - say we want this unit to start off at
05:12 - level 10 so for that we use the entity
05:16 - manager in order to set the component
05:18 - data then we need a reference to our
05:21 - entity so let's grab it here and we set
05:25 - the component data on that entity and
05:27 - for the component data let's pass in a
05:29 - new model component and we're going to
05:32 - start them off at level equals 10 so we
05:36 - are telling the entity manager to set
05:38 - the component data of this type with
05:40 - these values so let's s and we should be
05:43 - able to see our entity with level 10 and
05:46 - he appears the entity debugger and our
05:48 - entity 0 is indeed on level 10 ok so far
05:52 - so good so we can create an entity and
05:54 - add a component onto it now let's look
05:56 - into the unless part of ecs which are
05:59 - these systems in order to make a system
06:01 - all we need to do is create a class that
06:03 - extends the component system so let's
06:05 - make an EVC sharp script this won't be
06:08 - our level up system and in here again
06:12 - get rid of the mono behavior code and
06:17 - for a system we extend component system
06:21 - as you can see there is an error because
06:23 - we need to implement the on update
06:25 - method so this function will be called
06:28 - on every update and now in here we want
06:30 - to increase the level for every entity
06:32 - that has the unlevel component so to do
06:34 - that we do entities and we do a for each
06:39 - and here we pass in an action with the
06:41 - components that we're looking for so in
06:43 - this case we want our plugin component
06:48 - the ref parameter means this is a
06:50 - reference so we won't be able to modify
06:53 - the level component that so in here the
06:56 - code won't run on every
06:57 - with this particular component so in
07:00 - this case let's just increase the level
07:01 - like we would any other variable so we
07:04 - go into the level component and increase
07:06 - in level by own let's say one level per
07:09 - second so 1 multiplied by time.deltatime
07:13 - okay so we should be able to increase
07:15 - the level by 1 per second also the code
07:18 - in here is running on the main thread
07:20 - so that means that we can use debug
07:22 - block so for example derivative of that
07:24 - one of the unwelcome component that
07:26 - level and that's pretty much it for
07:29 - making a system we don't have to go back
07:32 - into our main class to add anything all
07:34 - we need to do is make it a component
07:36 - system and with that it won't
07:38 - automatically run so let's run the code
07:41 - and see ok the code is running and on
07:44 - the entity debugger we have our entity 0
07:46 - and these areas you can see the unlevel
07:49 - component level is indeed increasing and
07:51 - here on the console we can see that it
07:54 - is indeed increasing ok awesome so we
07:58 - can create entities at components set
08:00 - their stiring data and we can also make
08:02 - systems that modify that component data
08:04 - so hopefully this example has been
08:06 - simple enough to follow along so far now
08:09 - let's look into a couple more essential
08:10 - basic things and then we'll work on
08:12 - actually adding a visual to our entity
08:15 - so first here in our testing class we
08:18 - are creating an entity and passing in a
08:20 - level component now let's say we want to
08:22 - add a second component we could do that
08:25 - by adding simply another type of and
08:27 - passing the type of the second component
08:29 - however the better way to create an
08:31 - entity with specific types of components
08:33 - is to create what is called an entity
08:35 - archetype so an archetype is essentially
08:38 - a specific set of components so up here
08:41 - we can define an archetype that contains
08:43 - all the components that we want so we
08:48 - ask the entity manager to create a
08:50 - archetype then we pass in our component
08:53 - types in this case first the type of
08:56 - model component and for a second let's
08:59 - add the standard position component so
09:02 - that's the type of translation component
09:09 - the translation is inside the MT
09:12 - transforms you can inspect this premade
09:16 - component not to see that it's very
09:18 - simple it simply contains valley which
09:20 - is a float 3 and E 4 3 is essentially a
09:23 - vector 3 as you can see it's inside
09:25 - unity dot mathematics and simply has an
09:27 - X a Y and they said and that's it we
09:30 - just created an archetype containing the
09:32 - components level component and
09:34 - translation now we want to create an
09:36 - entity using this archetype and now we
09:38 - do is in here on create entity we passed
09:40 - in our art tank so we should be able to
09:43 - see a new entity being created with the
09:46 - unlevel component and the translation
09:47 - component let's see and here's our
09:50 - entity and it doesn't need have the
09:51 - unlevel component any translation
09:53 - component so as you can see if you want
09:55 - to make let's say a bullet or an enemy
09:57 - you would make an archetype for each
09:59 - different type and then instantiate that
10:01 - now one of the main benefits of ECS is
10:04 - getting massive performance so making
10:07 - just a single entity isn't very fun so
10:09 - instead let's make a bunch of them using
10:11 - the same archetype the create entity
10:14 - function has a variation that takes the
10:17 - archetype and then takes a native array
10:19 - of entities so we create an array and
10:21 - then that array gets filled with
10:23 - entities so it's great here a native
10:26 - array now in order to use the native
10:28 - array we need to be using unity
10:30 - collections so create a negative array
10:34 - to home entities entity Arang and here
10:41 - we instantiate the array let's pass in
10:42 - our size so for our size let's start off
10:45 - very simple so we just with two entities
10:47 - and then we pass in the allocator
10:50 - this won't depend on exactly what you
10:52 - want to use the entity array for so in
10:55 - this case we just want to use it to
10:56 - instantiate our entities and then we
10:58 - don't need the array so we use temp ok
11:02 - then we pass in the entity array into
11:04 - our create and key function and now this
11:06 - one no longer returns an entity so all
11:09 - of the created entities are now passed
11:11 - into this array so now we just need to
11:14 - cycle so we cycle
11:19 - and here we grab the entity which is on
11:24 - the entity array on index I and we
11:29 - instantiate it with a certain level so
11:31 - in here let's start off with a random
11:32 - level so we are now correctly
11:37 - initializing all of our entities and
11:39 - afterwards we need to make sure to
11:41 - dispose of our native array so empty
11:43 - array and we simply call this post all
11:46 - right so we should now be creating two
11:49 - entities using this archetype and each
11:52 - of them won't have a random level so we
11:54 - can see that they are different all
11:56 - right let's see here's the entity
11:58 - debugger and indeed you can see we have
12:00 - two entities and here you can see that
12:02 - they have different levels this one is
12:04 - on level 30 and this one on 26 okay
12:07 - awesome
12:08 - so as you can see this is how you create
12:09 - multiple entities now instead of just
12:12 - two let's try spawning a lot more since
12:15 - setup to spawn mm let's see and in the
12:19 - entity debugger you can see that we are
12:20 - indeed creating two thousand entities
12:22 - and all of them are increasing their own
12:24 - level and if we check out our stats you
12:27 - can see that our CPU isn't working very
12:29 - hard with regards to updating 2000
12:31 - entities now obviously it would be nice
12:33 - to be able to actually see them so let's
12:35 - see how we can add rendering here in our
12:38 - testing class first of all let's go back
12:40 - to just one entity so we can easily make
12:43 - it and on the archetype we have an 11
12:46 - component the translation component and
12:48 - I'm in here let's also add a type of
12:49 - render mesh component the render mesh is
12:53 - inside using unity dot render this is
12:58 - what we're going to use in order to
12:59 - render a mesh and nor to view it we also
13:02 - need to add the type of welcome to world
13:04 - component this is what the renderer uses
13:08 - in order to calculate how it should be
13:10 - visible okay so now that we have our
13:13 - archetype set up and here we need to set
13:16 - the component data for the render mesh
13:18 - now the render mesh is not a component
13:21 - but rather a shared component so we need
13:23 - to go into the entity manager and call
13:25 - set shared component that
13:28 - for the entity and then we test in the
13:31 - render mesh here is the definition for
13:39 - the render mesh as you can see we have a
13:40 - mesh a material and then a bunch of
13:42 - things so let's add if you want to be
13:45 - able to use a mesh in material so in
13:47 - here make a serialized field
13:49 - let's pass in a private mesh for our
13:52 - mesh another serialize filmed for a
13:56 - material let's drag them in the editor
14:02 - so for the mesh let's simply use the
14:05 - default quand and for the material let's
14:08 - create the material in here so a new
14:10 - material let's call this our sprite
14:12 - material for the shader and let's use
14:15 - the unlit transparent and let's pass in
14:18 - this zombie falling body texture okay
14:21 - and drag it onto our field there like
14:23 - that okay now back in the code for the
14:28 - render mesh
14:28 - let's pass in the mesh as our mesh any
14:32 - material as our material okay so that's
14:36 - pretty much it our entity should now be
14:38 - visible using the quad mesh and our
14:40 - zombie texture
14:41 - let's see any of there's our zombie
14:43 - being displayed on 0 0 and if we go into
14:46 - the entity debugger you can see that it
14:49 - does indeed have the render bounds run
14:50 - run around welcome to world the render
14:52 - mesh with our mesh in material and the
14:54 - translation which is his current
14:56 - position ok so here it is just sitting
14:59 - around now let's make him move so here
15:01 - we are already in tension with the
15:03 - translation component which contains the
15:05 - position as we saw so let's make a
15:07 - system that moves in so down here making
15:10 - you see sharp script this won't be our
15:12 - mover system and in here we're going to
15:15 - do very much the same thing we did with
15:17 - an 11 system so we need to implement
15:19 - component system
15:26 - and on our update let's do entity cycle
15:30 - through for each entity and let's grab
15:33 - the entities with the translation
15:36 - component so in here we have the code
15:43 - that won't be run on every entity that
15:45 - contains a translation component and
15:47 - here let's just modify the translation
15:49 - that value and we just modify the one
15:59 - alright that you do it so let's see for
16:02 - Assam B is indeed moving up any of
16:05 - there's our zombie and he is moving up
16:06 - okay great
16:07 - now let's make a move speed component so
16:10 - in you see sharp scripts this will be
16:11 - our move speed component then here again
16:14 - let's do the same thing we did on the
16:16 - eleven components so we simply create
16:18 - first of all this is a struct it
16:20 - implements I component data and for the
16:26 - move speed all we want is a totally
16:28 - quote for our movie speed now on our
16:31 - testing class let's add this to our
16:33 - archetype so we add the type of move
16:37 - speed component okay when we create
16:40 - entities let's set the move speed
16:43 - component data and let's spawn five
16:51 - entities and let's also spawned them on
16:54 - different positions somewhere let's set
16:56 - the component data for the translation
16:58 - component and here for their starting
17:03 - value let's put them on a random
17:05 - position
17:30 - okay so here we are initializing our
17:33 - entity first we add it with the eleven
17:35 - component and we set it on a random
17:36 - level then we add the move speed
17:38 - component and we pick a random move
17:40 - speed and then we also set the starting
17:42 - point of the translation component which
17:44 - is going to be his position so we just
17:46 - randomize on the X and the y okay so we
17:49 - should now have five entities now let's
17:51 - see how they're going to move so here on
17:52 - the mover system and here we want to run
17:55 - our code on entities that contain both
17:57 - the translation component and also the
17:59 - move speed component so every entity
18:04 - that contains both of these we're going
18:05 - to run now when we run this code we move
18:08 - it by the move speed and then let's just
18:13 - make him bounce when he hits the top of
18:15 - the screen
18:26 - okay so we move him according to the
18:28 - move speed on this entities move sweet
18:30 - component when it gets to the top he
18:32 - starts moving down when he gets to the
18:34 - bottom he starts moving up okay very
18:36 - simple so we should be able to see our
18:37 - zombie's going up and down let's see any
18:40 - of there we have our five zombies they
18:42 - go up they go down and everything is
18:44 - handled by components and systems and as
18:47 - you can see they are going at different
18:48 - speeds based on the move speed component
18:50 - that they contain so we can go into the
18:52 - entity debugger here we see all our five
18:54 - entities and on each of them you can see
18:56 - they have the eleven component movespeed
18:58 - component and they are moving the
18:59 - translation so you can see varies of
19:02 - them and they have various values all
19:04 - right so now that we have our zombies
19:06 - going up and down
19:07 - let's try spawning some more here in
19:09 - order to spawn more entities only takes
19:11 - is really modifying the size of this
19:12 - array so I have five if I change it to
19:15 - ten now all of a sudden we have ten
19:17 - entities and they all work exactly the
19:19 - same they all have the same components
19:20 - in the same systems acting on those
19:22 - components and here on these stats you
19:24 - can see how fast the code is running
19:25 - right now taking one millisecond so
19:28 - let's add a couple more so instead of
19:30 - ten let's add a thousand any appear we
19:32 - have a thousand entities and as you can
19:34 - see it's only taking six or seven
19:36 - milliseconds so let's try pushing it
19:38 - some more now let's put 10,000 and here
19:42 - we have 10,000 units and as you can see
19:44 - the framerate finally starts to go down
19:45 - by a little bit
19:46 - now there's one improvement that we can
19:48 - make as you can see none of our sprites
19:49 - are being badged so let's sort that in
19:52 - order to do that we just need to go into
19:53 - our material and enable GPU instancing
19:56 - so for that we could technically use the
19:59 - sprites default as you can see it has
20:01 - the enable GPU instancing however for
20:04 - some reason when we enable this as you
20:06 - can see these prices appear so it seems
20:08 - there are some issues with this sprite
20:10 - shader when using GPU instancing but
20:12 - another shader that works is to go into
20:15 - here use the in legacy shaders and use
20:18 - the transparent diffuse and just like
20:20 - that they are now being seen as you can
20:22 - see they are all being patched again
20:24 - remember we have 10000 independent units
20:26 - on the screen right now if we had ten
20:28 - thousand game objects our scene wouldn't
20:30 - be running at all now one thing that is
20:32 - related to ECS is the burst compound and
20:35 - in order to enable bursts using ECS it's
20:38 - a
20:38 - really simple we just go appear into
20:40 - jobs going to burst and all we have to
20:42 - do is take this so let's see this one is
20:44 - taking 15 milliseconds let's simply take
20:46 - this and see how fast it goes anywhere
20:49 - we go we went from 50 milliseconds to
20:51 - just 3 this is so good it's pretty much
20:54 - magic so with this let's see how far we
20:56 - can push it and here we have a hundred
21:01 - thousand entities all showing all moving
21:04 - around independently and our frame rate
21:06 - is still at 40 frames per second and on
21:09 - my task manager here you can see my CPU
21:12 - being used at 77% and my GPU also being
21:15 - used at 60% so in this video we just
21:17 - covered the entity component system now
21:19 - a big part of the massive performance
21:21 - yet is when you combine the empty
21:23 - component system with the burst compiler
21:25 - which as you saw and then with the job
21:27 - system as well so if we were using the
21:30 - entire data stack we could probably push
21:32 - this up to maybe 200,000 so subscribe to
21:35 - the channel for more upcoming ECS
21:37 - tutorials using the complete dot stack
21:38 - with the job system the birth compound
21:40 - just to see how much performance we can
21:42 - squeeze out of this new way of writing
21:44 - code so to summarize the whole in T
21:46 - component system the first thing you do
21:49 - is create an entity you create entities
21:51 - according to a certain archetype which
21:53 - is a group of components each entity
21:56 - then contains an instance of each
21:57 - component the components are very simple
22:00 - they just have fields and implement I
22:02 - component data and then you have systems
22:05 - which act upon the data on those
22:06 - components we define which entities we
22:09 - want to run on by defining the
22:11 - components that they must have and then
22:12 - this kill gets run on every single
22:14 - entity and modifies the instance of
22:16 - every component on that entity so I hope
22:19 - this video has helped you understand and
22:20 - get started working with ECS it might
22:23 - sound confusing at first but once the
22:25 - core concept clicks it's actually rather
22:26 - intuitive as always you can download the
22:29 - project files and utilities from in
22:30 - Tacoma com if you liked the video
22:32 - subscribe the channel for more unity
22:34 - tutorials post any questions you have in
22:36 - the comments and I'll do my best answer
22:38 - alright see you next time
22:39 - [Music]