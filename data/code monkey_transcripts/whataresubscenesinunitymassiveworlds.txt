00:00 - in this video we're going to look at sub
00:02 - scenes in unity this is an excellent
00:04 - feature that enables you to build
00:05 - massive worlds with excellent
00:07 - performance by utilizing unity dots and
00:09 - dynamically loading and unloading chunks
00:11 - of your world let's begin
00:16 - [Music]
00:20 - hello and welcome I'm your code monkey
00:23 - and this channel is all about helping
00:24 - you learn how to make your own games
00:26 - with NF tutorials made by a professional
00:28 - indie game developer so if you find the
00:30 - video helpful consider subscribing okay
00:32 - so here we're going to look at what are
00:34 - sub scenes and how we can use them we're
00:36 - going to create a system to load and
00:38 - unload sub scenes on-the-fly this will
00:40 - enable us to have massive worlds who are
00:42 - keeping excellent performance an example
00:45 - of this system in use is in unities mega
00:47 - city demo project in that project the
00:49 - city is absolutely massive with each
00:51 - building having over a hundred thousand
00:53 - game objects now if you loaded the whole
00:56 - city at once it would not be playable at
00:58 - all so instead what happens is the
01:00 - assets get streamed as they are needed
01:02 - now that system is a bit more advanced
01:04 - and what we're going to do here but
01:06 - still a very similar approach the main
01:08 - difference is instead of just loading
01:09 - and unloading sub scenes
01:11 - it also has scenes and sub scenes with
01:13 - different levels of details essentially
01:15 - it's a lot system like what's commonly
01:17 - used in meshes but for entire sub scenes
01:19 - so every single building has two
01:21 - representations a level level of detail
01:24 - scene and a high detail seen the alone
01:26 - level is very performant with low detail
01:28 - and the high level gets loaded as the
01:30 - player gets close so that means our
01:32 - world in total can have millions of
01:34 - objects because only the ones that are
01:36 - needed are loaded at the same time ok so
01:38 - this is what we want to make over here
01:40 - is my player character and I can simply
01:43 - move them around now as you can see
01:45 - there's a map with some rocks and
01:46 - objects and stuff and I can move around
01:49 - and as I move you can see that the map
01:51 - is still there it goes in out and there
01:54 - you go I can keep moving and the map is
01:56 - always there however it's really not
01:58 - always there the map is actually being
02:00 - loaded and unloaded based on the player
02:02 - position so if I pause right here and
02:04 - look in the editor there go over here
02:06 - you can actually see what is happening
02:08 - our map is split into a whole bunch of
02:11 - sub scenes and only the ones near the
02:13 - player are currently loaded so over here
02:15 - as the player is moving you can see the
02:17 - various parts of our level being
02:19 - streamed in and out of existence
02:21 - so with this way you can have some
02:23 - really massive worlds while keeping your
02:25 - game CPU time and memory consumption
02:27 - very low so the game only ever loads
02:30 - exactly what it needs and nothing more
02:32 - so using this time
02:33 - setup you can essentially make infinite
02:36 - worlds without any issues with
02:37 - performance and this is not just in the
02:39 - game one of these prongs benefits also
02:41 - work in the editor so when a sub scene
02:43 - is unloaded there you go there are no
02:45 - game objects or entities occupying any
02:47 - space-time this video is made possible
02:49 - thanks to these awesome supporters go to
02:51 - patreon.com/scishow
02:53 - code monkey to get some perks and help
02:55 - keep the videos free for everyone
02:56 - alright so this is our very interesting
02:58 - system that is made possible thanks to
03:00 - sub scenes so let's look at how they
03:02 - work okay so here we are in our starring
03:04 - scene I have my player character and not
03:06 - much else just a bunch of objects and a
03:08 - background and I can move them around so
03:10 - here we are in the editor and you can
03:13 - see the player right here it is a simple
03:15 - quadratic do identify the player and
03:18 - then being converted into an entity and
03:19 - then we have the background on the
03:21 - sprites rocks bushes and so on so it's
03:24 - placed a bunch more objects
03:37 - okay here we have a bunch of random
03:39 - objects now in order to make a sub scene
03:41 - it's actually extremely simple all we do
03:44 - is we select all of our objects so let's
03:46 - select all of these
03:47 - okay now we right-click and create new
03:50 - sub scene from selection and yep just
03:53 - like that the sub scene has been created
03:55 - so now all these objects are inside the
03:57 - sub scene so over here we can click on
03:59 - the arrow to expand it and there you go
04:01 - we can see all of the individual objects
04:03 - inside of our sub-theme
04:04 - now if you some like the sub scene and
04:06 - look in the inspector you can see some
04:08 - buttons to interact with the sub scene
04:09 - so right now as you can see in the
04:11 - hierarchy we can view all of the
04:12 - individual game objects inside of our
04:14 - sub scene so that means that our sub
04:16 - scene is currently open so we are
04:18 - looking at the game object
04:19 - representation this is useful if we want
04:21 - to modify things so let's say this rock
04:23 - move it a bit over there okay now when
04:25 - I'm done setting up all the objects I
04:28 - can some like this obscene make sure
04:30 - save any changes and then click on close
04:32 - and once you do you can see that on the
04:34 - hierarchy the sub scene has been closed
04:36 - so we no longer have an arrow and we can
04:38 - no longer edit individual game objects
04:40 - instead what is happening is all of our
04:43 - objects are being represented as
04:44 - entities so if we want to edit we click
04:47 - on edit then we have all of our game
04:48 - objects again so we can move them around
04:50 - then when we're done we make sure that
04:52 - we save and we close and there you go we
04:55 - have super fast entities now the
04:56 - conversion is stored in a binary file
04:58 - now that's important because that means
05:00 - that loading is super fast since all of
05:02 - the conversion is done right now and not
05:04 - when we're actually loading so this
05:06 - makes loading and unloading during
05:08 - runtime extremely fast if we run the
05:10 - game right now yep there you go
05:12 - everything still looks the same so I
05:13 - still have my player I can move around
05:15 - and I can see all the objects and if we
05:18 - pause there ago we have our sub scene
05:20 - here in the hierarchy and if we look
05:22 - into the entity debugger over here we
05:24 - can see all of our entities and then
05:26 - here specifically we have two special
05:27 - entities so on for our scene and one for
05:30 - our scene section in the scene section
05:32 - you can see the streaming state that is
05:33 - currently unloaded and if we select our
05:36 - sub scene and look in the inspector over
05:38 - here we have button to unloaded so let's
05:41 - look at the game at the same time now
05:42 - click on unload and there we go all our
05:45 - objects that are now gone so the sub
05:46 - scene has been completely unloaded
05:48 - if we look into the entity debugger any
05:50 - up over here you can see that we just
05:52 - have the scene and the scene section and
05:53 - all the other entities are now gone so
05:55 - you can see how sub scenes are a great
05:58 - way of organizing objects and easily
06:00 - unloading or unloading them also inside
06:03 - of a sub scene you don't need to add the
06:05 - convert to entity script so for example
06:07 - if we open this one and then go into
06:10 - this object and I add the convert to
06:12 - entity script there you go I have a nice
06:15 - notice in here essentially it's saying
06:17 - that this object is already going to be
06:18 - converted inside of a sub scene so this
06:21 - component is meaningless in here every
06:23 - single object inside of a sub scene
06:24 - already gets converted into an entity
06:26 - the second that you hit close all right
06:28 - so here you can see the basics for how
06:30 - sub scenes work you essentially take a
06:32 - bunch of game objects and put them
06:34 - inside of a sub scene now when the sub
06:36 - scene is closed or the game is running
06:38 - then everything inside it is using super
06:40 - fast entities and when you click on edit
06:42 - and open the sub scene you can go back
06:44 - into the normal game object
06:46 - representation and edit the objects as
06:48 - usual and when you're running the game
06:50 - if the sub scene is unloaded then of the
06:52 - entity cease to exist which means they
06:54 - don't take up any memory or CPU time and
06:56 - again sub scenes are stored in a binary
06:58 - file so I'm loading and unloading is
07:00 - insanely fast ok now let's look at how
07:03 - we can dynamically load and unload sub
07:06 - scenes okay so let's make the system to
07:08 - load and unload let's make a new c-sharp
07:11 - script call this our sub scene loader
07:15 - let's make this a simple component
07:17 - system
07:27 - okay now here on our update let's test
07:30 - for a key down when we press the sweeper
07:35 - arm let's load our sub scene so let's
07:37 - make that function okay so we're going
07:47 - to have our function that receives an
07:49 - object of type sub scene and now in
07:52 - order to load the scene we need to load
07:53 - it using the entity component system we
07:56 - need to get the system of type scene
07:58 - system so let's grab it on our oncreate
08:05 - so we go into the world in order to get
08:09 - or create the system of type scene
08:11 - system and then we can use our scene
08:15 - system in order to call load scene async
08:18 - and here we need to pass in the scene ID
08:21 - so we go into the sub scene in order to
08:23 - get it all right so that's it that's how
08:26 - you load a sub scene now all we need
08:28 - this to know our actual sub scene object
08:31 - so here let's make a script to hone
08:33 - those references okay there's a script
08:43 - on this game object and here let's just
08:45 - add a film and make it a singleton
09:00 - all right so we have our scene reference
09:03 - and back in the editor here we have our
09:06 - script to the film for our sub scene and
09:07 - we just drag our reference okay and now
09:10 - we can go back into the sub scene loader
09:12 - and when we press the space key let's
09:14 - call our loads obscene function and
09:18 - person from our sub scene references all
09:21 - the instance and get the map sub C
09:24 - alright so we should be able to load our
09:26 - sub scene whenever you press the
09:28 - spacebar and just a test over here and
09:30 - let's select our sub scene and let's
09:32 - disable out a load scene so by default
09:34 - it will not be unloaded okay let's test
09:36 - so here we are running the game and yep
09:38 - there's no background no world and if we
09:41 - pause and look at the debugger over here
09:44 - yep we just have our scene and scene
09:45 - section so no entities and now if I
09:48 - press space there you go we have our sub
09:50 - scene being loaded so you can fast look
09:52 - at it and yep there you go we have our
09:54 - sub scene so we need is this simple
09:56 - function call in order to load a sub C
09:58 - now in order to unload it's pretty much
10:01 - the same thing we go into our scene
10:08 - system and we call unload of our scene
10:10 - so on space let's load and on another
10:14 - key and let's unload alright let's see
10:18 - okay here we are in this obscene start
10:20 - off unloaded now press space and there
10:23 - go the sub scene has been loaded now
10:25 - press the other key and there you go now
10:26 - it's unloaded a load it unload just like
10:29 - that and you can see that it's exactly
10:31 - instant awesome okay now let's make it
10:34 - load and unload based on the player
10:36 - position so here are the sub scene let's
10:38 - do an entities for each on D player
11:01 - all right so here we have some very
11:03 - simple code so we grab the player
11:05 - translation then we do a simple math dot
11:08 - distance between the player position and
11:10 - the position of the transform for the
11:12 - sub scene and if it's under a certain
11:14 - distance and we load if not then we
11:16 - unload all right so that's very simple
11:18 - everything should be working
11:19 - let's test okay here we are and the
11:21 - scene starts off loaded and as I move
11:24 - away after a while as I get far enough
11:27 - there you go the scene unloads and I
11:29 - move back to the left side and when I'm
11:31 - near it loads go away and unloads so
11:33 - there you go just like this here I'm
11:35 - looking at the scene in game side by
11:37 - side you can see I'm boy unloaded move
11:39 - back and now it's load all right so here
11:41 - you can already see the basics in action
11:43 - now let's just build more of them out
12:06 - all right so here I built a lot more of
12:08 - the map so you can see I just duplicated
12:11 - made a ton of sections and all of them
12:13 - have been converted into individual sub
12:15 - scenes now in order to load and unload
12:17 - based on distance we're going to use the
12:20 - actual position of the sub scene object
12:22 - now this is probably not the best way to
12:23 - do it but just for testing it should
12:25 - work but for example let's say this sub
12:28 - scene there you go it's in there so
12:29 - let's move this obscene transform to put
12:31 - it right there and there you go you can
12:33 - see this little info message telling you
12:36 - that offsetting the sub scene doesn't
12:38 - actually offset the object inside which
12:40 - is fine since we don't really want to
12:41 - offset them we're just using this
12:43 - position a more proper way to do it
12:44 - would be to add some sort of custom
12:46 - inspector and you would simply have a
12:48 - vector3 with a nice little widget but in
12:51 - this case just for testing this should
12:52 - do it so let me just locate all of the
12:55 - transforms alright so i've located all
13:06 - of them now let's go back into our sub
13:09 - scene references script and here instead
13:12 - of just a single sub scene reference
13:13 - let's make an array and back in the
13:17 - editor we can select our sub scene
13:18 - reference script yep there you go
13:20 - there's our array now we can lock the
13:22 - inspectors and like all of our sub
13:24 - scenes and drag them all up to your
13:25 - right yep there you go there's our sub
13:27 - scenes and in our loader script let's do
13:30 - it based on distance for all of our sub
13:31 - scenes alright so just like that we
13:41 - cycle through our sub scene array and we
13:44 - test for distance and if comes enough we
13:46 - load if not then we unload all right so
13:48 - that's pretty much it and let's test ok
13:51 - here we are and it seems perfectly fine
13:52 - there's my player and over here we can
13:54 - see our map and if we pause and look at
13:57 - the editor if there you go only this one
13:59 - is loaded so all the other sub scenes
14:01 - are currently unloaded and here in the
14:03 - entity debugger yep you can see all of
14:05 - our sub scenes all of our scene sections
14:07 - and pretty much only one of them is
14:09 - loaded so now here if I move the
14:11 - and I go towards the right and there you
14:14 - go over here I'm going inside another
14:15 - map and yep it's downloaded so if we
14:18 - pause yeah but where you can see that
14:20 - now we have two sub scenes being
14:22 - allotted so here on the side by side you
14:24 - can see that as I move the player as it
14:26 - reaches close enough there you're one of
14:28 - them gets unloaded and one of them
14:30 - starts being loaded and as I go if there
14:33 - you go just like that all of them are
14:34 - working so they are being streamed in
14:36 - and out based on the player position so
14:40 - our game scene is super performance
14:41 - since only a tiny bit of the map is
14:44 - actually unloaded at once all right so
14:46 - here you can see how the sub scene
14:47 - system works and how you can stream
14:49 - parts of your level in and out again
14:52 - this system is integral to how the
14:54 - megacity demo was made without it it
14:56 - would simply not have been possible so
14:58 - sub scenes allow you to build massive
15:00 - worlds from keeping your game and your
15:02 - editor performant since you can easily
15:04 - load and unload sub scenes on the fly
15:06 - and with sub scenes you can also edit
15:08 - them in order to modify them using the
15:11 - normal game object representation so you
15:13 - added game objects then it gets
15:14 - converted into super fast entities so
15:16 - streaming sub scenes in and out coupled
15:18 - with the insane speed of unity dots
15:20 - means there's pretty much no limit to
15:22 - how big a worm you can create so go
15:25 - ahead and get started working with sub
15:26 - scenes and make some massive worlds this
15:28 - video is made possible thanks to these
15:30 - awesome supporters go to
15:31 - patreon.com/scishow
15:33 - code monkey to get some perks and help
15:35 - keep the videos free for everyone as
15:37 - always you can download the project
15:38 - files in a tony's from unity code
15:39 - Montcalm subscribe the channel for more
15:41 - unity tutorials post any question have
15:43 - any comments and I'll see you next time
15:46 - [Music]