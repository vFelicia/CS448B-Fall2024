00:00 - hello and welcome I'm your code monkey
00:02 - and in this video we're going to learn
00:03 - all about transform parents and children
00:05 - let's begin
00:08 - so we previously covered the various
00:11 - ways to move rotate and scale a
00:13 - transform now let's see the various
00:15 - interactions between parent and children
00:17 - as I mentioned in the previous video the
00:19 - inspector in here you see the unlock own
00:22 - values so the parent sprite in here is
00:25 - on to 0-0 and the child is on 1 0 0 but
00:29 - the global position is on 3 0 0 again
00:32 - always keep in mind if you're working in
00:34 - low composition space or the global
00:36 - world position space so let's look at it
00:39 - through code so here I have a script
00:41 - running on my parent transform so first
00:43 - of all let's grab a child reference in
00:45 - order to do that let's set up a
00:47 - transform child transform a reference
00:50 - which we're going to grab through
00:52 - transform find our child transform this
00:56 - is the name of the child transform that
00:58 - we want to grab the reference which is
01:00 - named channel transform so let's print
01:03 - both local and world positions let's do
01:06 - a debug down log of the chunk transform
01:09 - dot position which is the global
01:11 - position and the local position which is
01:14 - the auto composition and after we do
01:17 - that let's set the child transform at
01:19 - position 2 new vector3 on 0 0 0 and see
01:24 - where he ends up so as you can see in
01:26 - the console the world position was on 3
01:29 - 0 0 which makes sense since the parent
01:31 - was on 2 0 0 and each child on one so
01:34 - put them both together and the child is
01:36 - on world 3 0 0 the unlocking position is
01:39 - 1 0 0 and at the end we set the position
01:43 - the global position to be on 0 0 0 so he
01:47 - ended up in there which again if we
01:50 - select in here we see the local values
01:53 - and the local is on minus 2 since it's
01:56 - Friday zone 2 that means it is indeed on
01:59 - the global 0 0 so always keep in mind
02:02 - what space you are trying to place the
02:04 - transform the same thing applies to the
02:06 - rotation so in here let's print out the
02:09 - humor angles and then the local Euler
02:13 - angles and then let's set the global
02:15 - Euler angles back to 0 so let's see how
02:18 - that goes
02:19 - first let's rotate the parent
02:22 - 90 degrees as you can see the spaceships
02:24 - are now pointing upwards so let's see
02:26 - the code right in the console as you can
02:28 - see the global Euler angles show that
02:30 - the child transform is rotated 90
02:33 - degrees which again since he was
02:35 - matching the parent it was indeed 90
02:38 - degrees but the unlock own was at zero
02:40 - and then we set the global to be at zero
02:43 - so that put as you can see the rotation
02:45 - is now at zero which means the in local
02:47 - rotation is on minus 90 so if you're
02:50 - working in your game in spawning units I
02:52 - would suggest you only move the parent
02:54 - game object otherwise things yet very
02:55 - messy very quickly so let's look at how
02:58 - you would manage local and global world
03:01 - spaces so first of all let's change the
03:03 - parent name to be spaceship and inside
03:07 - instead of having another spaceship
03:08 - let's have something representative of a
03:10 - health bar and instead of the spaceship
03:12 - sprite let's put it a basic rectangle
03:15 - like that okay let's reset the rotation
03:19 - of the parent spaceship back to zero to
03:22 - make things simple and essentially we
03:24 - want to move the health bar to the left
03:26 - side but let's do that through code so
03:29 - in this case I would suggest that the
03:32 - only things you change are the health
03:33 - bar on local position and the spaceship
03:35 - world position so you would never change
03:38 - the spaceship local position and you
03:40 - would never change the health bar world
03:41 - position that way you keep things nice
03:43 - and simple so on start let's first grab
03:46 - a reference to our health bar transform
03:51 - and then let's set the health of our
03:55 - transform local position to new vector3
03:59 - and in this case let's put it on minus
04:01 - 0.3 F and zero zero right so let's see
04:05 - if that positions it correctly and yep
04:08 - there you go the health bar is behind
04:10 - the spaceship great and now an update
04:13 - and let's move the spaceship just make
04:15 - sure that the child and parent both move
04:17 - in tandem so in here do the transform
04:20 - dot position which again on the parent
04:22 - we want to move the equivalent position
04:23 - and we're going to set it to transform
04:25 - that position and increase it by new
04:27 - vector3 let's say point zero one and
04:30 - zero zero
04:32 - just move the spaceship to the right yep
04:35 - as you can see the spaceship is moving
04:37 - to the right side and the child health
04:39 - bar is positioned correctly and does not
04:41 - move
04:41 - great all right so now let's dynamically
04:44 - spawn a child object so on our code in
04:47 - here let's first create the new game
04:49 - object let's call it child game object
04:53 - and pull me a new game object let's give
04:58 - it the name child game object and now in
05:01 - order to set the parent we do child game
05:04 - object our transform dot cept parent to
05:08 - the parent that we want which is this
05:10 - transform so in here we are creating a
05:13 - brand new game object and then we said
05:15 - that game objects transform parent to be
05:18 - this very transform so let's run the
05:21 - code and see how our hierarchy yep
05:24 - there's the spaceship and there's the
05:25 - new only created game object you can
05:28 - also cycle through all the children of a
05:30 - transform you can do a very simple for
05:32 - each transform child in transform and
05:35 - this will cycle through all the children
05:38 - in this transform so might simply print
05:40 - out the transforms to do a debugger on
05:42 - wild child so that should print out our
05:45 - health bar and then the child game
05:46 - object let's see
05:48 - yep there you go health bar of type
05:50 - transform and channel game object also
05:52 - of type transform you can also cycle
05:54 - through the children with an index so do
05:56 - a four in e equals zero in less than
05:59 - transform dot child counts I plus pause
06:03 - so in here instead of using child we use
06:06 - transform that get child at the index so
06:10 - high and again let's run the code and
06:13 - should say the same thing as previously
06:15 - yep there you go we are still cycling
06:17 - through all the children of this
06:19 - transform one thing that is also very
06:21 - useful especially in setting up your UI
06:23 - is to modify the sibling position the UI
06:27 - source of visibility based on the
06:28 - hierarchy position so objects below in
06:30 - the hierarchy show on top of the ones
06:33 - before so in here and let's make another
06:36 - game object let's duplicate the health
06:38 - bar and put it on different color just
06:40 - so we can see the visual representation
06:43 - ok so if we run this you can see on the
06:46 - hierarchy we got the health bar the
06:47 - health bar
06:48 - and then the child game object so now
06:50 - let's go through code and set the health
06:52 - bar to be at the bottom so the way we do
06:55 - that we pick up the health bar transform
06:57 - and execute the function set as last
07:00 - sibling and we're going to execute this
07:03 - after we spawn the child game object yep
07:06 - as you can see first we got the blue
07:08 - then we got the child then we got the
07:10 - health bar you can also do the reverse
07:11 - so instead of using this one let's set
07:14 - the child game object the transform dot
07:17 - set as first sibling to move this one to
07:21 - the top yep as you can see first the
07:24 - child and help far then the health bar
07:25 - blue again the hierarchy position is
07:27 - very important in the UI since that is
07:29 - what defines which sprite is on top of
07:31 - which so there you have it we cover the
07:34 - various ways that transform parents and
07:36 - children interact if you have any
07:38 - questions post them in the comments and
07:39 - I'll do my best to answer them subscribe
07:41 - for more videos and I'll see you next
07:43 - time