00:00 - hello and welcome I am your code monkey
00:03 - and in this video we are going to make a
00:04 - camera follow system we're going to
00:07 - build a class they can move the camera
00:08 - towards a target position this position
00:10 - can be the player but it can also be
00:12 - anything else like an NPC or just a
00:14 - random point so we could make a cutscene
00:17 - where the camera pans to a specific
00:19 - point and then goes back to the player
00:21 - ok let's get started
00:27 - okay I have a scene here with a movable
00:30 - player that I can move with the arrow
00:32 - keys and to NPCs that are moving between
00:36 - waypoints and a secondary point that I
00:40 - can move in the back okay so let's start
00:46 - by creating a new c-sharp script and
00:49 - call it camera followed open the script
00:55 - and now on our update we're going to
00:58 - move the camera towards our position so
01:00 - camera follow position let's just make a
01:04 - new vector3 just above we want to make
01:08 - sure that we keep the same Z position so
01:11 - camera fall position not set equals
01:15 - transform out position that's that okay
01:18 - and that's from down position equals
01:21 - camera follow position now we add this
01:26 - to our main camera and when we run the
01:28 - camera should be moved upwards yep there
01:32 - it is slightly above so instead of
01:35 - having the position in here we're going
01:38 - to make a public void setup that will
01:43 - receive our vector three camera follow
01:47 - position we're going to store it here
02:00 - so on our game handler we're going to
02:02 - add a reference to our camera phone
02:07 - script and on start simply do camera
02:11 - follow dot setup and knowledge is push
02:17 - it downwards
02:19 - okay so add the reference and the camera
02:22 - should now be shifted down yep there it
02:27 - is
02:27 - great okay so obviously we don't want
02:30 - the camera to follow a fixed point but
02:32 - rather to always update the point that
02:35 - it's fallen so instead of getting a
02:37 - vector a fixed vector three we're going
02:40 - to go into the system namespace and grab
02:44 - a phone that will return a vector three
02:47 - and college get camera fall position now
02:52 - a func
02:53 - is just a delegate that returns in this
02:56 - case a vector three so this is what
03:00 - we're going to receive on our setup and
03:03 - in here we're going to have vector three
03:05 - camera fall position which won't contain
03:08 - the result from that function and now in
03:12 - here instead of sending it that we're
03:15 - going to send our position as a function
03:17 - so right now it should still be moving
03:20 - downwards but we can update yep it's
03:24 - pointing down so now let's choose
03:26 - something that actually changes so at a
03:29 - reference to our player transform and
03:32 - here instead of sending a fixed vector
03:36 - we're going to send our player transform
03:38 - dot position so it's compound at the
03:42 - reference to our player and now the
03:46 - camera should be following the player I
03:48 - can move the player with the arrow keys
03:50 - and yep
03:51 - the camera is updating every frame going
03:53 - exactly where the player is great so as
03:58 - you can see the movement is exact every
04:02 - frame it updates exactly to where the
04:04 - player is which might be good but it's
04:07 - not doesn't look very smooth especially
04:09 - if we move the player quickly
04:11 - it looks quite janky so let's add some
04:14 - smoothing to our camera movement so in
04:18 - here on our camera follow instead of
04:21 - setting the position directly
04:23 - let's get a direction that we're going
04:27 - to move the camera towards so camera
04:31 - move there is going to be our camera
04:34 - fall position - our current position
04:41 - normalize okay so we got our direction
04:45 - we need quote for our current distance
04:49 - so let's get the distance between the
04:53 - camera fall position and our current
04:55 - position and let's a float for our
04:59 - camera blue speed and let's do it just
05:03 - one app for now so instead of setting
05:06 - our current position we're going to set
05:10 - so our position was our camera move
05:14 - direction times the distance so that we
05:18 - move faster the further away we are
05:20 - times the camera move speed times time
05:23 - comp time so that this is this movement
05:26 - is independent of the current frame rate
05:28 - so let's test it and see if the camera
05:32 - follows a player smoothly yep there it
05:36 - is I can move the player and the camera
05:40 - no longer has that janky movement great
05:43 - so now this code actually has a slight
05:47 - problem here which is what happens when
05:50 - time dot on time is actually very large
05:52 - which happens when the game is running
05:54 - at a very low framerate we can test this
05:56 - out by increasing the move speed and
05:59 - just decreasing our application dot
06:01 - target framerate and just make it run at
06:04 - 5 frames per second and in this way when
06:09 - the camera updates its gonna constantly
06:10 - overshoot the target so as you can see
06:16 - there the camera the player is stopped
06:19 - but the camera is shifting back and
06:22 - forth because it's moving so much in
06:24 - each exact
06:25 - frame that it never actually stops where
06:27 - it should so let's fix this problem by
06:31 - making sure that the camera never
06:32 - overshoots its target
06:34 - so in here first of all we're only going
06:37 - to move it distance is more than zero
06:40 - and when we move we want to do get power
06:47 - make a vector3 new camera position which
06:52 - won't be this and we're going to have a
06:54 - phone which is distance after moving
06:57 - which will be a vector3 that distance
07:01 - between the new camera position and the
07:07 - camera followed position
07:09 - so if our distance after moving is
07:14 - actually bigger than the distance before
07:16 - the move then we have overshot the
07:19 - target overshot the target so let's set
07:23 - the new camera position to our actual
07:25 - camera follow position and then finally
07:30 - we do transform dot position equals our
07:32 - new camera position so this way even on
07:37 - a low framerate the target should never
07:40 - constantly be jumping back and forth it
07:42 - should no longer overshoot the target so
07:44 - no here I have and when I move the
07:47 - player if the camera overshoots it will
07:49 - actually correct itself and stop where
07:51 - it should okay great
07:54 - now let's reset make sure that the frame
07:57 - rate is back and put our camera with the
08:00 - basic moves to be just to F which should
08:03 - be nice and smooth yep there it is great
08:09 - so lets out a new function for changing
08:12 - our get camera formal position func so
08:15 - that we can switch where the camera is
08:17 - actually following so do a public void
08:20 - set get camera follow position phone
08:26 - and it's going to take that funk as an
08:31 - argument
08:33 - and we're going to sit in so now on our
08:39 - Kim Hanul urn let's add some references
08:41 - to the other objects in our scene so
08:44 - character of one transform character to
08:50 - transform and manual movement transform
08:58 - let's just add our references in here
09:01 - okay it's a character character - and
09:04 - manual movement so in here instead of
09:08 - following the player I'm gonna change
09:10 - the get camera phone position and I'm
09:14 - gonna send it to actually follow
09:16 - character one position so now instead of
09:24 - following the player the camera should
09:26 - be following the first character yep
09:28 - there it is I can still move the player
09:30 - but the camera is no longer focused on
09:32 - him okay so now in order to make testing
09:35 - easier to switch between which camp
09:37 - which character the camera is actually
09:40 - following let's use some debug buttons
09:42 - using the code monkey utilities as
09:44 - always you can grab the utilities from
09:46 - unity code monkey comm so I'm going into
09:49 - CM debug create the button on the UI put
09:54 - it on the right side and call it player
09:59 - this won't be the button that won't set
10:02 - the camera to actually follow the player
10:06 - so the button won't trigger this
10:10 - function that we'll set to follow the
10:14 - player
10:16 - at the various add a button to follow
10:19 - the first character the second character
10:21 - and the manual character put the buttons
10:29 - we need one another and now the button
10:35 - should pop up and we should be able to
10:37 - click them to switch the cameras target
10:40 - so right now it is following the player
10:41 - and I click on that one and it's not
10:44 - following this character the player is
10:46 - still moving
10:46 - I click the manual now I can move this
10:49 - one and the player and this one okay so
10:53 - as you can see we can very easily switch
10:55 - where the camera is pointing on the next
10:59 - video we're going to add the ability to
11:01 - zoom in and out if you have any
11:04 - questions please post them in the
11:05 - comments and I will do my best to answer
11:06 - them alright see you next time