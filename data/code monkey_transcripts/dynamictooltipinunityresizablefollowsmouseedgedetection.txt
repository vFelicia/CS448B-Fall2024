00:00 - in this video we're going to make a
00:01 - tooltip in unity it will automatically
00:03 - scale to fit whatever text you give it
00:05 - and it will always stay on screen even
00:07 - as you mouse over the edges
00:09 - let's begin
00:17 - hello and welcome i'm your code monkey
00:19 - and this channel is all about helping
00:20 - you learn how to make your own games
00:22 - with
00:22 - in-depth tutorials made by a
00:23 - professional indie game developer so if
00:25 - you find the video helpful consider
00:27 - subscribing okay so i actually made a
00:29 - tooltip in a video previously and that
00:31 - one still works great
00:32 - however in that one i was using a camera
00:35 - for the ui
00:36 - in this one we're going to be using a
00:37 - screen space ui so there's no camera
00:40 - also in that one i use the old unity
00:42 - text and in this one i'll be using text
00:44 - mesh pro
00:45 - also if you've seen the chat bubble
00:47 - video then this should be very familiar
00:48 - since that element also involved
00:50 - resizing the background to match the
00:51 - text
00:52 - alright so here's what we're going to
00:53 - build over here is my tone tip
00:55 - and the first thing is that the
00:57 - background is dynamically sized to fit
00:59 - whatever text you give it
01:00 - so right now it's matching perfectly and
01:02 - right now the tone tip is constantly
01:04 - updating with a bunch of random
01:05 - characters and you can see that no
01:06 - matter what text i give it
01:08 - the background always matches perfectly
01:10 - so i can set it to whatever text i want
01:12 - it works with horizontal and also with
01:14 - vertical text
01:15 - so making a tooltip with line breaks
01:17 - works perfectly since we're working with
01:19 - text mesh pro it is very easy to add
01:21 - some colors and extra information to our
01:23 - tone tip
01:24 - another thing about this helmet is how
01:25 - it doesn't leave the screen so as i
01:27 - mouse over the right side yep it always
01:29 - stays inside the screen
01:30 - same thing if i go upwards yep it's
01:32 - always visible
01:33 - and since the whole thing works
01:35 - dynamically i can also dynamically
01:36 - modify the font size and yep everything
01:38 - updates perfectly so decrease increase
01:40 - change the bone change so on and
01:42 - everything works perfect
01:44 - so here it is a very versatile simple
01:46 - tooltip this video is made possible
01:47 - thanks to these awesome supporters
01:49 - go to patreon.com unitycodemonkey to get
01:52 - some perks and help keep the videos free
01:54 - for everyone
01:55 - alright so this is our goal let's get to
01:57 - it okay so here i am in my empty scene
02:00 - let's begin by going into the canvas and
02:02 - let's create an empty game object
02:04 - so let's call this the tone tip screen
02:07 - space ui
02:08 - and now inside we're going to need two
02:09 - things a background and some text
02:12 - so let's add a new ui image for the
02:15 - background
02:16 - and over here let's anchor it to the
02:18 - left side
02:20 - so the way you also set the pivot is by
02:22 - holding down shift so hold down shift
02:24 - and click down here
02:25 - and yep now it's anchored on the lower
02:27 - left corner and just put the x and y
02:30 - straight at zero okay
02:36 - all right so that's the background now
02:38 - the size itself will be set dynamically
02:40 - so whatever we set here doesn't really
02:42 - matter
02:43 - and then let's create the text so a new
02:45 - ui we're going to select text on text
02:47 - mesh pro
02:48 - name it our text and once again anchor
02:50 - to the lower left corner
02:55 - and in here instead of putting it
02:56 - straight right there on the edge let's
02:57 - give it a little bit of a breathing room
03:03 - all right so just like that so i set the
03:05 - width and height both at zero
03:07 - and then down here set wrapping to
03:09 - disabled overflow to overflow
03:11 - then align to the left and lower right
03:13 - corner okay so here we have our basic
03:15 - tooltip setup
03:16 - we have a background image and a simple
03:19 - text
03:20 - now let's make the script a handout so
03:22 - in uc sharp script
03:23 - call this once again the same thing tone
03:25 - tip screen space ui
03:27 - drag the script to our parent and let's
03:28 - open it okay so here first things first
03:31 - let's make a basic private void awake
03:34 - then awake let's grab a reference to the
03:36 - background so we're going to grab
03:37 - a rect transform
03:42 - so we find the background and get the
03:44 - component all right then for
03:46 - the text mesh which again is using text
03:47 - mesh pro so using tm pro
03:50 - and then down here we can set of type
03:52 - text mesh pro you guy
03:57 - all right there it is so here we have
04:00 - both of our references
04:01 - now let's make a function to set our
04:03 - text
04:06 - and here all we do is go into the text
04:08 - mesh pro in order to set the text
04:11 - and to our tooltip text okay so just
04:14 - like this we should be setting the text
04:15 - field
04:16 - and up here on the wake let's do some
04:18 - testing so set text
04:19 - and let's say something okay
04:22 - let's test and if there's our tone tip
04:24 - with the text all right
04:25 - so far so good now after setting the
04:28 - text we also need to dynamically size
04:29 - the background so let's do that
04:31 - the way we modified background is access
04:33 - the background direct transform and
04:35 - modify the size delta
04:37 - so this is a vector 2 and in here we
04:39 - need the text size
04:41 - so for that let's go up here to grab a
04:43 - vector 2 for the text
04:44 - size and we go into our text mesh
04:48 - in order to get the rendered values and
04:50 - let's include all of our characters
04:52 - alright so just like this we have the
04:54 - text size now this sometimes might cause
04:57 - some issues depending on when the text
04:58 - updates
04:59 - so we can make sure that it always
05:01 - updates by going into the text mesh and
05:03 - call
05:04 - for smash update so just make sure that
05:06 - it works all the time
05:07 - okay so we have the text size and just
05:09 - set it on the background pretty simple
05:11 - all right let's see and yep there's the
05:13 - text with the background with the exact
05:14 - size
05:15 - right so far so good now let's do a more
05:17 - thorough test by setting some random
05:22 - text
05:28 - all right so i've made this simple test
05:30 - function it creates a function periodic
05:33 - which is a helper class from the
05:34 - utilities that you can grab for free
05:36 - from unitycodemonkey.com
05:38 - essentially this is going to trigger an
05:39 - action on every certain amount of time
05:41 - so this action will be triggered every
05:43 - half a second
05:44 - and in this action first we are defining
05:47 - a sort of dictionary
05:48 - then a base text message and then we
05:51 - just apply some randomness
05:52 - get a random number of characters and
05:54 - choose a random character from this
05:56 - string
05:56 - so this should let us test to make sure
05:58 - that our tone tip works with any text
06:00 - okay so let's call this up here and
06:03 - let's test
06:05 - and if there is a tone tip and
06:06 - regardless of what random text we set it
06:08 - it always has the perfect size and here
06:11 - we're automatically getting the rendered
06:13 - values from the text
06:14 - so for example if we modify the text
06:17 - size
06:17 - so let's put it much small let's say at
06:20 - 20.
06:20 - and if there you go now our tone tip is
06:22 - much smaller so very easy very adaptable
06:25 - however you can also see that the text
06:27 - doesn't look completely right
06:28 - the thing is that the background is 100
06:31 - perfect
06:32 - so it matches perfectly with whatever
06:33 - text we give it however
06:35 - in order to make our text look a bit
06:37 - better we gave it some breathing room on
06:39 - the left and lower corners
06:40 - so it would be nice to add a little
06:42 - padding both on the left side and on the
06:44 - right side so let's do that
06:45 - down here in our set text function we
06:47 - get the text size let's also define a
06:49 - vector 2 for the padding size
06:52 - and just define some values now here we
06:55 - offset the actual text object by 4
06:57 - 4 so essentially double that so in here
06:59 - let's put it at 8
07:00 - 8. again this is just visual so you can
07:03 - put whatever padding you want including
07:05 - just zero
07:06 - so we set the size double to the text
07:08 - size plus our padding let's see
07:10 - and if there's a tone tip and now it
07:12 - doesn't look 100 perfect
07:14 - so the background correctly matches
07:15 - whatever text we give it
07:17 - and again since we're grabbing the text
07:19 - size directly from the text mesh it also
07:21 - works with
07:21 - new lines so here in our string let's
07:24 - just randomly add a bunch of new lines
07:27 - and let's see it and yep there it is and
07:29 - you can see regardless of how many new
07:31 - lines and how many characters we add
07:33 - yep it always looks perfect so the
07:35 - background perfectly matches whatever
07:37 - text we give it
07:38 - awesome okay so with the background
07:40 - skill correct
07:41 - now let's make sure that it follows the
07:43 - mouse so here
07:44 - let's make a private void update and
07:47 - on our update let's grab the rec
07:50 - transform from this parent game object
07:53 - so let's grab direct transform
07:58 - we cache it here on awake just transform
08:00 - get component of the rack transform
08:04 - and then down here we take our rect
08:06 - transform and modify the anchored
08:07 - position
08:09 - and let's put it at the
08:10 - input.mouseposition
08:14 - so this is the current mouse position in
08:15 - pixel coordinates let's see
08:17 - and right away we see some issue well
08:19 - that's because the input mouse position
08:21 - has
08:22 - a origin on the lower left corner
08:24 - whereas our transform has an origin
08:25 - right on the center so let's quickly
08:27 - change that
08:28 - so we select the parent game object and
08:30 - down here instead of anchoring it on the
08:32 - center anchor on the lower left corner
08:33 - okay let's try
08:35 - and yep now it is falling closer to it
08:37 - however it's not falling perfectly
08:39 - so as i move away you can see the tone
08:41 - tip is actually getting further away
08:43 - now the reason for that has to do with
08:45 - how the canvas is scaled
08:47 - so here in the editor we can see the
08:48 - setup and we can see that we have a
08:50 - canvas
08:51 - and here in the inspector we can see the
08:52 - various stats
08:54 - so we have a canvas of type screen space
08:56 - overlay okay so far so good and then
08:58 - here we have the canvas scaler
09:01 - this one is set to scale with the screen
09:02 - size and it has a reference resolution
09:04 - of 720p
09:06 - and it's set to match fully on the
09:07 - height so what this means is that if we
09:10 - open up our game window
09:12 - as i move the game window as the height
09:14 - increases or decreases
09:15 - it automatically scales all the objects
09:17 - so you can see in here that the canvas
09:19 - does have a scale and there you go it's
09:20 - not
09:21 - 1 1 1. so as i make it smaller yep get
09:23 - smaller
09:24 - as i make it bigger it gets bigger so
09:26 - this is why our tooltip isn't following
09:28 - it perfectly
09:28 - we just need to use these values in
09:30 - order to make our calculations
09:32 - so back in our tone tip we're going to
09:34 - need a reference to the canvas right
09:36 - transform
09:37 - so let's add it as a serialized field
09:42 - okay there it is now in the editor
09:45 - here we can just drag the canvas
09:47 - straight onto it now you can also just
09:48 - dynamically find the canvas or use a
09:51 - serialized field whatever each way works
09:53 - and now here we go down to our update
09:55 - and we are setting the anchored position
09:56 - to the mouse position and then we divide
09:58 - it
09:59 - by the canvas rack transform and we're
10:01 - going to access the unlock
10:02 - scale and now this one the scale is
10:04 - uniform so we can use any of these
10:06 - vector3 values so just divide by the x
10:08 - all right so let's test and yep now the
10:10 - tone tip does indeed follow the mouse
10:12 - perfectly
10:13 - so right there you can see the mouse is
10:15 - always perfectly positioned right
10:18 - awesome so our tone tip is looking great
10:21 - however there is one issue which is if i
10:22 - go into the edge of the window yep there
10:24 - you go now the tone tip is no longer
10:26 - visible
10:26 - so if you had a button right here in the
10:28 - corner this would not do
10:30 - so let's fix our code to make sure it
10:31 - always stays on screen
10:33 - so here on our update before we set the
10:35 - anchored position
10:36 - let's first validate it so let's first
10:39 - grab a vector 2 for our anchored
10:41 - position
10:42 - and we start off with this one and then
10:44 - we validate it and then we
10:46 - use it
10:49 - okay now here to validate it so we're
10:52 - going to make a simple if
10:54 - take our anchored position and let's
10:56 - first worry about the x
10:58 - so we take the anchor position x and
11:00 - then we add on to it
11:02 - the background direct transform we're
11:04 - going to add the width
11:05 - so the width of our background and if
11:08 - those two added
11:09 - are bigger than the canvas rect width
11:13 - if so then the tone tip has left the
11:15 - screen on the right side so if so let's
11:17 - push it back a bit on the left side
11:21 - all right so that will make sure that
11:22 - doesn't leave on the right side and
11:24 - let's also fix the same thing on the top
11:29 - all right so we do our validation and
11:31 - then we set it okay so this should do it
11:34 - let's test okay there's our tone tip
11:36 - following the mouse
11:37 - and if i mouse over the right side if
11:39 - there you go as soon as it gets there it
11:40 - no longer goes away off
11:42 - screen and the same thing if i go
11:44 - upwards
11:45 - yep there you go it does not go away all
11:46 - right awesome so now our tone tip is
11:48 - always visible no matter where the mouse
11:50 - is positioned
11:51 - okay so we have our fully functioning
11:53 - tone tip now let's just add a couple
11:55 - more useful features
11:56 - so first let's add a basic static
11:58 - instance
12:03 - and then a function to show and hide
12:11 - all right pretty basic just two static
12:13 - functions so they're very nice and easy
12:14 - to use
12:15 - and then the show tone tip and the high
12:17 - tone tip they simply set the game object
12:19 - to active or
12:19 - inactive and simply set the text and by
12:22 - default up here
12:24 - when we awake instead of setting the
12:25 - text let's simply hide it
12:28 - now let's make a quick testing script
12:38 - all right so just a basic testing script
12:39 - attached to an object and just calling
12:41 - the static function so as you can see
12:43 - this class is very easy to use let's see
12:45 - and yep there's the tone tip only
12:46 - working all right now one more thing
12:49 - let's make it work with a delegate
12:59 - all right so i had this function which
13:00 - takes a system func
13:02 - so this is a delegate which is going to
13:03 - return a string now if you're not
13:05 - familiar with delegates check the video
13:07 - link in the description
13:08 - so it takes this delegate which returns
13:10 - a string with our actual tooltip text
13:13 - and then in here we simply store it and
13:15 - we set the text based on the return
13:16 - value of that string
13:18 - so it stored here as a member variable
13:20 - and down here on our update we're always
13:22 - doing set text and get the string
13:24 - so what this does is it allows us to
13:26 - create dynamic tone tips
13:27 - so back in our testing script let's make
13:30 - a func to give it
13:36 - all right so here for testing we create
13:38 - our func this will return a string and
13:41 - then a timer variable
13:42 - and on update we're constantly
13:44 - increasing that timer then we tell it to
13:45 - show this total let's see
13:47 - okay so here's our dynamic tone tip it
13:49 - has a static portion of text and then a
13:51 - dynamic timer that is constantly
13:53 - updating
13:54 - so for example this is really useful
13:55 - when you want to show a tooltip for
13:56 - example displaying some sort of skill
13:58 - cooldown
13:59 - and since we're working with text mesh
14:01 - then for example adding colors is very
14:02 - simple
14:04 - so we can just add the color tag
14:09 - so here it is just adding some color
14:11 - tags and yep there's the fully working
14:13 - tooltip
14:14 - and again this is all very dynamic so
14:16 - with the tooltip text selected
14:18 - for example let's make it in bold and
14:20 - yup the size updates
14:21 - let's decrease the size and yep it's
14:23 - perfect doesn't leave the screen
14:25 - let's put it much bigger and yep there
14:26 - you go it fully works all right so here
14:29 - is a really awesome
14:30 - really robust tone tip element it is
14:32 - smart enough to dynamically resize it
14:34 - based on whatever text you give it
14:35 - so this is pretty much essentially for
14:37 - making any sort of game that is mouse
14:38 - heavy
14:39 - alright so here it is if you found this
14:41 - video helpful consider liking and
14:42 - subscribing
14:43 - this video is made possible thanks to
14:45 - these awesome supporters
14:46 - go to patreon.com unitycodemonkey to get
14:49 - some perks and help keep the videos free
14:51 - for everyone
14:52 - as always you can download the project
14:53 - files and utilities from
14:54 - unitycodemonkey.com
14:55 - subscribe to the channel for more unity
14:57 - tutorials post any questions in the
14:58 - comments and i'll see you next time