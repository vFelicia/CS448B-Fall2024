00:00 - hello and welcome i'm your code monkey
00:02 - here let's learn how to pick up and drop
00:04 - objects we want to physically pick them
00:06 - up so we don't want to just click and
00:08 - grab the object and see it vanish from
00:09 - the world and appear in a virtual
00:11 - environment instead we want the object
00:13 - to always stay in the world this one is
00:15 - great for making games where you want
00:16 - the player to feel more connect to the
00:17 - world basically the more things you keep
00:19 - close to reality and the more away from
00:21 - ui elements the more you do that the
00:23 - more immersive the game becomes or
00:25 - simply this is also great if you just
00:26 - want to let the player grab an item or
00:28 - object and move it to a different place
00:30 - i'm going to cover this tutorial in
00:31 - first person but it works exactly the
00:33 - same in third person and i'll include
00:34 - both demos in the project files also
00:37 - it's going to be using physics so it
00:38 - feels really nice
00:39 - if you prefer a more guided path with
00:41 - step-by-step lectures then check out my
00:43 - complete courses
00:44 - learn how to make a builder defender
00:46 - game using c-sharp or learn how to make
00:47 - games internal using visual scripting
00:49 - perhaps if you're past the beginner
00:51 - stage and want to make the jump to
00:52 - advanced then check out my turn based
00:54 - strategy course to learn how to manage a
00:56 - more complex project and write some good
00:58 - clean code or learn all about unity with
01:00 - the ultimate unity overview course which
01:02 - contains over 15 lectures each covering
01:04 - a different two more feature of the
01:05 - engine i'm always available in the q a
01:07 - section answering your questions every
01:09 - single day so check them all out with a
01:11 - link in the description alright so as a
01:13 - start here i have my character walking
01:15 - around in first person for controlling
01:17 - it i'm using the official star assets
01:19 - made by unity there's one in first
01:21 - person and one in third person i cover
01:23 - them both in another video they are
01:24 - really awesome and canola free so i got
01:26 - that one i just went through it
01:28 - refactored the code to match my coding
01:30 - style so with this i have my player
01:32 - character i can walk around i can sprint
01:33 - and i can do anything for the visuals
01:35 - these are from the polygon shops pack
01:38 - it's a really awesome pack with tons of
01:39 - props tons of objects so it's definitely
01:41 - perfect for this video there's a link in
01:43 - the description if you want to get it
01:45 - so over here i've got my character and
01:46 - my character has physics and i also have
01:48 - physics of these objects so i can just
01:50 - push them around and up here on the
01:51 - counter i've got the muffins that i want
01:53 - to interact with and again they also got
01:54 - physics so i can push them around and
01:56 - throw all of it to the ground then i
01:58 - also have over here a nice bucket and a
02:00 - real nice shopping cart so the goal is
02:01 - to pick up the muffins and put them on
02:03 - the cart so let's do that and the first
02:05 - thing we need is to identify what we're
02:07 - looking at
02:08 - so if i aim towards that muffin how do i
02:10 - identify what is right behind the player
02:11 - cursor for that as you can imagine we
02:13 - can use a raycast
02:15 - so let's make a script to handle that
02:17 - logic so let's make a new uc sharp
02:18 - script called the player pickup drop
02:22 - let's find the player game object which
02:23 - is here my first person controller with
02:25 - all the various components so let's add
02:26 - the script okay so here let's begin by
02:29 - first just listening to input so let's
02:31 - make a private void update
02:32 - and on update let's listen to a button
02:34 - press so input get key down
02:37 - and like in so many pc games let's use
02:39 - the e key to interact okay so when we
02:41 - have this we're going to fire raycast so
02:43 - physics.braycast
02:44 - this takes an origin and a direction
02:47 - now here we have the game in first
02:48 - person so we want to fire the raycast
02:50 - from the camera position and pointing
02:51 - straight ahead however here we need to
02:53 - make sure we don't use
02:54 - transform.position the reason for that
02:56 - is because of how the player is set up
02:58 - so here the player has the origin on the
03:00 - bottom but we really want from the
03:01 - camera so we're going to need a
03:03 - reference to the actual camera game
03:04 - object this is what we're going to use
03:06 - as the starting position and the camera
03:07 - forward as the direction
03:09 - so up here let's add a serialize field
03:12 - let's make it transform for the player
03:15 - camera transform
03:17 - then let's just comment this out just so
03:18 - the code compiles so we can drag the
03:20 - reference
03:21 - here in the editor there's the script
03:22 - let's drag the main camera reference
03:24 - okay and now here on the raycast let's
03:26 - use the raycast starting from the
03:28 - player camera transform.position and
03:31 - pointing towards the playercam transform
03:33 - dot forward so this is the forward
03:34 - vector
03:35 - then let's use this version of the
03:37 - function so first we need a raycast hit
03:39 - to get the data so our rake has hit
03:42 - then we have the max distance we want
03:45 - this so we don't grab the objects from
03:47 - too far away
03:48 - so over here let's just define a float
03:50 - for the pickup distance and let's put it
03:52 - at something like two units
03:54 - so over here we use this
03:57 - and finally we just have the layer mask
03:59 - let's call it pick up layer mask and
04:02 - let's define it up here so we can define
04:04 - another serialized field
04:06 - make it of type layer mask
04:10 - okay so with this now in the editor
04:12 - over here we basically have two options
04:14 - we can either add all of these objects
04:16 - and put them in its own layer so put on
04:18 - the objects that we want to grab on for
04:20 - example the objects layer
04:22 - or we can go with the opposite approach
04:24 - which is pretty much just ignoring the
04:25 - player and selecting anything else
04:27 - let's go with that one so we don't have
04:28 - to modify all the objects so over here
04:31 - on the first one controller for the pick
04:32 - up layer mask as you can see the player
04:34 - is already on the layer player so i'm
04:36 - going to select everything and then just
04:38 - remove the player okay great
04:41 - so with this this raycast is going to
04:42 - hit everything right in front of the
04:44 - player's camera as long as it's within
04:46 - the pickup distance and it's not on the
04:48 - player layer so if we have this
04:49 - collision so let's do an if
04:52 - if we have let's just do a debug
04:54 - download just to see what we had so go
04:56 - into the raycast hit and let's grab the
04:58 - transform okay let's see okay so here we
05:01 - are looking around let's look at this
05:02 - muffin press the e key and yep there you
05:04 - go it does identify the muffin okay
05:05 - great however now if i also aim at the
05:08 - floor and i press the e key yeah there
05:09 - you go it also identifies the floor so
05:11 - everything is working correctly now we
05:12 - just need to actually identify the
05:14 - object behind it for that let's make a
05:16 - script to identify the object and run
05:18 - the grab logic let's create a new c
05:20 - sharp script
05:22 - call this the object grabable
05:25 - let's attach it to the muffin now this
05:27 - muffin is a prefab so i'm going to go
05:29 - inside the prefab so it applies to all
05:30 - of them so just drag the script that's
05:32 - it
05:33 - right now there's no need to change
05:34 - anything on this grip just make sure
05:36 - it's attached
05:37 - then here on the script we have our rig
05:39 - headset
05:40 - so we can just do an if let's go into
05:41 - the rake acid transform and do a try get
05:44 - component
05:45 - let's try to get that component that we
05:47 - just created so an out
05:49 - object grabbable for the object
05:51 - grabbable
05:53 - so this will test if that object that we
05:55 - collided with if that does have that
05:57 - script
05:58 - and if so again let's just do a quick
06:00 - look just make sure the logic all works
06:03 - just like this let's see
06:05 - so i'm here and if i look at the floor
06:06 - and press the e key nope nothing happens
06:08 - i point towards these objects nothing
06:10 - but i point towards this muffin and if
06:12 - there you go it does identify it and
06:14 - since i applied to the prefab all these
06:16 - other ones also work as well all right
06:18 - awesome so we have this working now we
06:20 - know that the object under the mouse is
06:21 - grabbable now let's handle the grab and
06:23 - hold logic so first let's think of how
06:25 - we're actually going to want to handle
06:27 - that we want to grab the item and pretty
06:29 - much hold it in front of the player so
06:31 - for that we need to know where we want
06:32 - that object to be held one approach
06:34 - would be to just use math to calculate a
06:36 - point right in front of the camera so we
06:38 - could just use the camera position and
06:40 - the forward vector and calculate a point
06:42 - right in front but perhaps a more
06:43 - adaptable method would be to define a
06:45 - transform to act as that point that way
06:47 - it makes it super easy to edit so over
06:49 - here let's create an object however here
06:51 - we also have another design question
06:53 - which is do we want the objects to move
06:56 - as the camera moves or only as the
06:58 - player moves both of them are valid
06:59 - options really depends on what you want
07:01 - your game to be like in this case i
07:03 - wanted to move as the camera moves so
07:05 - for that i'm going to add the object as
07:06 - a child of the main camera so over here
07:08 - let's create a new empty game object
07:10 - call it the object grab point
07:13 - then for the position let's position it
07:14 - in front of the camera so the camera is
07:16 - pointing there and let's push it a bit
07:18 - on the z axis so maybe about this maybe
07:20 - about one on the z axis we could also
07:22 - have set it a bit to the side if we
07:24 - wanted but let's keep it straight in
07:25 - front so that's it just a transform
07:27 - component we don't want any visual at
07:29 - all so with this point now let's go into
07:32 - the object wrapable script and over here
07:34 - let's make a function to grab it
07:36 - so we're going to make it public so we
07:37 - can call it from the player let's make
07:39 - it a void and call it grab
07:42 - and as a parameter let's receive the
07:44 - transform for the point so a transform
07:46 - for the object grab point transform
07:49 - and now on the player script so let's go
07:51 - over here to the player script let's add
07:53 - another serialized field
07:56 - let's make it private transform for this
07:59 - one let's call the same thing so the
08:00 - object grab point transform
08:03 - and here in the editor let's write that
08:04 - reference so we want that transform okay
08:06 - now with this over here we have the
08:08 - object graphical so let's go in there
08:10 - call the grab function and let's pass in
08:13 - the object grab point transform
08:15 - okay so we're passing in the exact point
08:17 - and on this function we really just want
08:19 - the logic to move the object towards
08:21 - this point since i wanted the object to
08:23 - have physics i also added a rigidbody
08:25 - component so let's use that to move the
08:27 - object first of all we need the
08:28 - reference so let's grab it
08:35 - so on a week we just grab the rigidbody
08:37 - reference
08:38 - then let's store the object grab point
08:42 - so up here make a product for this and
08:44 - then when we have the function let's
08:46 - update that point and then finally for
08:49 - moving it since we're going to be moving
08:50 - the object rigid body let's do it on a
08:53 - private void fixed update we're going to
08:55 - first test if this object is not known
08:57 - so the object graph point transform if
08:59 - it is not known that means that we have
09:01 - some object so we should be grabbing if
09:03 - so let's go into the object rigid body
09:06 - and call the move function the move
09:08 - position
09:09 - over here this takes the position where
09:10 - we want to go to so let's go into the
09:12 - object where point transform.position
09:15 - okay so that's it just like this it
09:16 - should already be working so let's see
09:18 - so here we are let's look at the muffin
09:20 - press the e key and if there you go it
09:22 - does grab it okay great so it did work
09:24 - however as you can see it's quite a bit
09:26 - odd the issue is that the gravity is
09:28 - constantly pulling it down so we can fix
09:30 - that by pretty much disabling gravity as
09:32 - soon as we pick up the object
09:34 - so when we have the grab let's go into
09:36 - the object rigid body
09:38 - and call use gravity and set it to false
09:41 - okay
09:42 - now i can look i grab any of there go it
09:44 - does pick it up okay good however it's
09:47 - still a bit too janky look at that that
09:49 - is very very jittery basically moves
09:51 - constantly all the time
09:53 - we can make it much more smooth by
09:54 - smoothly setting the target position
09:56 - instead of setting it instantly and for
09:58 - that we can use the super useful alert
10:00 - method that i covered in other video
10:02 - really easy way to add any kind of
10:03 - smoothing to any object or variable
10:06 - so over here we're going to use a
10:07 - vector3.lerp
10:10 - and we're going to learn between the
10:11 - current transform.position and the
10:13 - target position which is going to be
10:14 - this one so we want to alert towards
10:16 - that position then to make it smooth
10:19 - let's use time dot on time multiplied by
10:21 - a certain larp spin
10:23 - so here and let's define this let's say
10:25 - maybe 10 f
10:27 - so this is how we're calculating the
10:29 - vector 3 for the new position
10:32 - and we just move towards this new
10:33 - position
10:34 - so instead of moving instantly towards
10:35 - the target position it will smoothly
10:37 - interpolate between the current one and
10:38 - the target so now i can once again go up
10:40 - here pick up the muffin and there you go
10:42 - nice and smooth alright great
10:45 - now with this if your object is still
10:46 - too jittery instead of nice and smooth
10:49 - make sure that on the object rigid body
10:51 - over here under interpolate you set it
10:52 - to yes interpolate so now if i look
10:55 - around you can see yep the object falls
10:56 - along now this is the design difference
10:59 - that i was talking about so like this
11:00 - the object is glued to the camera so as
11:02 - i rotate around the object moves however
11:05 - the other way like i mentioned is simply
11:06 - make the point a child of the player so
11:09 - over here for the object red point
11:10 - instead of being a child the camera
11:11 - let's make it just a child of the player
11:13 - controller
11:14 - with this you can see that if i move the
11:16 - camera around the object does not move
11:18 - it all moves if i actually move the
11:19 - player controller now obviously with
11:21 - this method you would also need the
11:22 - character controller to rotate to face
11:24 - where the player was looking at but with
11:26 - that change here you have both methods
11:28 - which one you want depends on what kind
11:30 - of game you're making for me i quite
11:32 - like the main camera method so i'm going
11:33 - to keep this
11:34 - now there's actually still one slight
11:36 - issue left if i'm holding the object and
11:39 - i move forward which means that the
11:40 - player collides with it if i do that
11:42 - look at that the object suddenly became
11:44 - really jittery so this is the last issue
11:46 - but before we actually handle that let's
11:48 - first handle the drop so over here on
11:50 - the object let's make another function
11:52 - so public void drop
11:54 - and here it's actually pretty simple
11:55 - we're just going to do the exact
11:56 - opposite so let's clear the field so set
11:59 - that one into no
12:00 - and let's set the use gravity back into
12:03 - true
12:04 - and yep that's really it now when this
12:05 - one is known it will no longer move the
12:07 - object so all we need to do is call this
12:09 - function so let's do it on the player so
12:12 - we want to use the exact same input key
12:14 - so we want this to be able to toggle so
12:16 - either pick up or drop the object so
12:18 - that means we need to keep track if
12:19 - we're currently holding some object so
12:21 - let's just store a private object
12:23 - grabbable for the current object
12:24 - grabable
12:26 - and we can make sure that we set it
12:27 - directly over here in the tri-get
12:29 - component
12:30 - so we can do it like this so if the
12:31 - trigger component succeeds and
12:33 - automatically sets this and then we just
12:35 - have to test our logic so if this one it
12:37 - is null
12:39 - then that means we want to try to grab
12:41 - it
12:42 - so not carrying an object try to grab
12:46 - but if this one is not null then that
12:48 - means we're currently carrying something
12:52 - if so then we want to drop so again just
12:54 - go into the object graphable
12:56 - and just call the drop function
12:58 - there you go just like this and finally
13:00 - after dropping we just need to clear the
13:02 - field okay so let's test
13:04 - all right so here we are let's pick up
13:06 - the muffin yep there it is now press the
13:07 - e key and if there you go it does drop
13:09 - all right awesome so i can pick it up
13:11 - and i can drop it and i can place it
13:13 - anywhere all right great so that does
13:15 - work
13:16 - now for the other issue that i mentioned
13:17 - it
13:18 - so if i pick it up and now i pretty much
13:20 - move forward fast enough to actually
13:22 - push the object
13:23 - if i do that look at that you can see
13:25 - the object is constantly trembling now
13:27 - what is actually happening is that the
13:29 - object has some force
13:30 - so if i select the object and i look
13:32 - over here in the rigid body and i expand
13:34 - upon the info
13:35 - right now you can see the object does
13:36 - have some velocity does have some speed
13:39 - that is why this is constantly doing
13:40 - this
13:41 - basically the script is constantly
13:42 - trying to move the object and at the
13:43 - same time the object is constantly
13:45 - trying to move itself away
13:47 - so right now if i just push in like this
13:49 - and i press the inky if there you go you
13:50 - can see the object gets flown right to
13:52 - where it was
13:53 - now there are two ways to solve this one
13:55 - way would be through code so we could
13:57 - just use something like larp to
13:58 - constantly bring the velocity down to
14:00 - zero
14:01 - or two you can just increase the drag so
14:03 - over here on the rigid body we've got
14:05 - the mass and we have the drag and the
14:07 - angular drag
14:08 - and by default drag zero so it has no
14:10 - drag but if we increases something like
14:12 - five
14:13 - if so then now it will automatically
14:15 - apply some drag which will lower the
14:16 - velocity so here it is the object is
14:18 - straight in front of me and if i push it
14:20 - away you can see yep there you go it
14:22 - goes back and resets
14:24 - so i can go anywhere and yep it does
14:26 - work now one more final optional thing
14:28 - on this system
14:29 - on the rigid body you also have a
14:31 - schematic toggle kinematic means that
14:33 - the object still exists in the physics
14:35 - world but physics are not applied to it
14:37 - so if i enable this as kinematic
14:40 - with this the object is still moving
14:41 - around and if i push it i can push the
14:43 - other muffins with it so that works
14:46 - however when it's kinematic other
14:48 - physics forces will not apply to this
14:49 - object so for example over here there's
14:51 - a collider on this fridge and if this
14:53 - object is kinematic you can see yep it
14:55 - can go straight through the walls
14:57 - so this is just another optional setting
14:58 - that you can play around with you can
15:00 - set it pretty much the opposite of when
15:02 - setting the gravity so enable when
15:03 - picking up and disabling when dropping
15:05 - okay so with this now all we need is to
15:07 - attach this rib to any objects that i
15:09 - want to pick up
15:10 - so let's say all these other muffins so
15:12 - i'm just going to go inside the prefab
15:14 - and over here i just need to attach the
15:16 - component that's it
15:17 - then for this other muffin let's also
15:19 - open it go inside attach the script okay
15:22 - this one as well the same thing go
15:25 - inside and attach the script
15:27 - and also over here there are some
15:28 - sandwiches let's also pick these up so
15:30 - just go and all i have to do is just
15:32 - attach a script
15:33 - so here i am i can now pick up this
15:35 - muffin and i drop it in my shopping cart
15:37 - and yup it does work pick up this one
15:38 - drop it in there pick up this one drop
15:40 - it in there also pick up this muffin
15:42 - let's go into this bucket and drop it in
15:44 - there you go let's pick up this really
15:46 - nice sandwich and just drop it in there
15:48 - pretty big so here it is there's a nice
15:50 - bucket with my muffin inside and over
15:51 - here my nice shopping cart full of food
15:54 - all right awesome
15:55 - so here we have a very simple pickup and
15:57 - drop system you can apply this to
15:59 - anything just attach the component and
16:01 - that's it
16:02 - alternatively you could also refactor
16:04 - this script to make it an interface
16:05 - instead and then you could implement it
16:07 - on all kinds of objects that could be
16:09 - useful if you want a different home
16:10 - behavior i covered an interface in
16:12 - detail in another video if you want to
16:14 - learn more about them
16:15 - and here is the exact same system
16:17 - working in third person it works exactly
16:19 - the same way just as a raycast from the
16:21 - camera position finds the object and
16:22 - picks it up
16:24 - for this one since it's in third person
16:26 - i made the graph point based on the
16:27 - camera instead of based on the camera
16:28 - rotation you can download the project
16:30 - files which includes both demos now with
16:32 - this basic system done i'm planning to
16:34 - make a really awesome crafting system
16:35 - tutorial just like the game hydroneer
16:38 - it's a really unique system all based
16:40 - upon picking up and dropping objects
16:42 - so stay tuned for that or if you're from
16:44 - the future check the link in description
16:46 - alright hope that's useful check out
16:48 - these videos to learn some more thanks
16:50 - to these awesome patreon supporters for
16:51 - making these videos possible thank you
16:53 - for watching and i'll see you next time
17:00 - [Music]