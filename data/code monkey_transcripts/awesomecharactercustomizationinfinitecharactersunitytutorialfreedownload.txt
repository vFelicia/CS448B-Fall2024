00:00 - hello and welcome I'm your KMI here
00:02 - let's learn how to build some nice
00:04 - character customization the player can
00:05 - choose all kinds of different visuals to
00:07 - customize their character they can pick
00:09 - anything and then they can load into
00:10 - game using their custom character with
00:12 - their customization we're going to build
00:13 - the scenes from scratch and then you can
00:15 - also download the complete project files
00:16 - from the link in the description that is
00:18 - literally the exact same final code that
00:19 - I'm using in my game Thinking Gardens
00:21 - and I'm also going to cover how I handle
00:23 - and synchronizing the customization in
00:24 - multiplayer in my game now this topic is
00:26 - actually a tricky one because there's a
00:28 - million ways you can do something like
00:29 - this and basically all of those ways are
00:31 - all going to be dependent on how your
00:32 - assets are set up in a previous video I
00:34 - already talked about four separate ways
00:36 - you can do that you can change the
00:38 - material you can change the entire mesh
00:40 - or you can add Parts with a skin mesh
00:41 - render or just as a regular preout also
00:44 - quick mention the Cy Store is having
00:45 - their Black Friday sale if you want to
00:47 - pick up the modular character pack that
00:48 - I showed in that video check out the
00:50 - link in the description before the sale
00:51 - ends you can use roughly the same logic
00:53 - that I'm going to Showcase in this video
00:55 - with that asset it's a slightly
00:56 - different method but the logic is mostly
00:58 - the same so you you like the style check
01:00 - out the cyy store Link in the
01:01 - description now in this video I'm
01:03 - actually going to do a stepbystep
01:04 - tutorial on another different method the
01:06 - method we're going to use is based on
01:07 - swapping out individual meshes for each
01:09 - body part the reason for why I chose
01:11 - this method wasn't really chosen by me
01:13 - it was based on the asset pack that I'm
01:14 - using so I'm going to showcase exactly
01:16 - how I handle player customization in my
01:17 - game which by the way the game is
01:19 - actually out now on seam so if you like
01:20 - some automation Colony building and
01:22 - defense mechanics then check it out with
01:23 - a link in description so here is the
01:25 - character customization just like I have
01:27 - in my game so I've got a character right
01:28 - here and I've got kinds of buttons to
01:30 - change all kinds of parts so I can
01:32 - change the player color I change
01:33 - basically the skin color I can modify
01:35 - the hat that the player is wearing I can
01:37 - also remove there if I want and then
01:39 - play around with the various hairstyles
01:41 - I can swap out the shirt I can swap out
01:43 - the pants the shoes and so on so as you
01:45 - can see I can modify pretty much
01:46 - anything and get near endless variation
01:48 - then after customize my own character I
01:50 - can save the character and when I go to
01:52 - play a game yep here I am using my
01:54 - custom character in game so let's build
01:56 - a system exactly like I have it in my
01:57 - game now like I said the various ways to
01:59 - handle character customization are going
02:01 - to be dependent on how exactly your
02:02 - assets are set up here is the asset pack
02:04 - that I'm going to be using in this
02:05 - tutorial and I also use it in my game
02:07 - which by the way this asset is actually
02:09 - currently on sale live right now on the
02:11 - Black Friday sale on the unity accur
02:13 - this is a great pack for making near
02:15 - infinite amount of variations as long as
02:16 - you're looking for a cartoony stylized
02:18 - style this pack has tons of body parts
02:20 - tons of colors I think all the
02:22 - characters look really great really nice
02:23 - so if you need it go ahead and get it
02:25 - while the Black Friday sale is still
02:26 - alive the downloadable project files
02:28 - that I made those were made using this
02:30 - asset now naturally I cannot include
02:32 - this actual asset in the project files I
02:34 - didn't make this asset so I cannot
02:35 - distribute it but if you open the
02:37 - project files and then you load this
02:38 - asset on the same project everything
02:40 - should load correctly okay so let's make
02:42 - our character customization system here
02:44 - I've got the character 7 asset in my
02:46 - project and inside I've got the basic
02:48 - character there's a mesh and there's a
02:50 - nice prefab then if I go inside I can
02:52 - see all the various body parts to see
02:54 - how it's actually set up it's got all
02:56 - the various body parts right here like
02:57 - for example here is a body and then
02:59 - basic L they set up different meshes
03:01 - that have different UVS on the vertices
03:03 - so the whole thing uses just a single
03:05 - material just a single material with a
03:06 - single texture all of the body parts use
03:08 - the same material and then the colors
03:10 - are essentially handled over here by the
03:11 - mesh so if I go there's this body mesh
03:13 - and you can see the body is in yellow
03:15 - then swap to the next one and now it's
03:16 - in blue there's another blue brown red
03:19 - yellow and so on so in order to swap the
03:22 - color of the player or in order to swap
03:23 - any of these attachments in order to do
03:25 - that I simply modify the mesh and don't
03:27 - touch the materials at all this is
03:29 - honestly a pretty clever way to do it
03:30 - there's no need to worry about bones or
03:32 - materials or anything just swap out this
03:34 - one mesh field and everything works
03:36 - great so really the more complex part of
03:38 - the system is just setting up the UI and
03:39 - figuring out how to manage all this data
03:41 - everything else is actually pretty
03:42 - simple so here I've Got My Demo scene
03:45 - and I just dragged my character prefab
03:47 - then I also place the camera just
03:48 - looking at it which by the way here's a
03:50 - quick tip for positioning a camera you
03:52 - can position the scene camera wherever
03:54 - you want it like let's say like this and
03:56 - then you can select the character game
03:57 - object or literally any game object and
03:59 - you can press the shortcut control shift
04:01 - and F and that basically orients to
04:03 - select the game object based on the
04:04 - orientation of the camera on the scene
04:06 - window so just a fun quick way to easily
04:09 - position cameras or really any object
04:10 - okay so that's my scene setup and here
04:12 - is my canvas and it's set up as I
04:14 - normally do so screen space overlay then
04:17 - on the canvas scaler it set up the scale
04:18 - with the screen size for the reference
04:20 - resolution I use 1080p just like I
04:22 - always do and finally match with the
04:24 - height so really the same setup that I
04:26 - always use and now inside let's begin by
04:27 - making our UI windows so let's create an
04:29 - empty one let's name this the character
04:31 - customization UI now inside let's add a
04:35 - new UI image this is going to be the
04:37 - background and just for fun over here in
04:38 - the project files I also have a nice
04:40 - background from another Spacey y pack
04:43 - this is the same one that I used in my
04:44 - game so I'm going to use this but of
04:46 - course you can use whatever UI Vision
04:47 - you want so I'm just going to drag this
04:49 - let's also make it stretch to occupy the
04:51 - entire parent so select it to stretch
04:54 - put everything on Z 0 and let's modify
04:56 - the size of the parent itself then just
04:58 - make some simple elements so so let's
05:00 - make a
05:03 - text here let's say character creator
05:06 - put it in Bowl down the center Center
05:08 - everything disabled width and height
05:10 - both at zero let's anchor it to the top
05:12 - and just move it up there just a bit of
05:14 - fun then for testing let's begin by
05:16 - making a simple button so let's go
05:18 - inside let's create a new UI make it a
05:20 - button this let's name this the color
05:22 - button make it a little bit bigger and
05:25 - inside for text let's say color and put
05:28 - it in white okay so there here's our
05:29 - super basic setup now let's add some
05:31 - logic to it so first let's make a script
05:33 - to run it so let's create a new C script
05:35 - call the same thing so character
05:37 - customization UI let's attach script to
05:39 - the main game object and open okay so
05:41 - now here first thing we need is really
05:42 - just a reference to our button so let's
05:45 - head here and as always let's write some
05:47 - good clean code so make it a serialized
05:49 - field private of type button which
05:51 - exists inside unityengine.ui and let's
05:53 - call on the color button by the way if
05:55 - you don't know what I'm using serialized
05:57 - field private instead of making this
05:58 - public if you don't know know that then
06:00 - go watch my video that's a very
06:01 - important topic back in the editor we
06:02 - have our field so let's drag the color
06:04 - button reference and over here let's
06:05 - just add a click event so let's do a
06:07 - private void awake and on awake let's
06:09 - initialize our color button and let's go
06:11 - into the onclick event and let's set a
06:14 - listener and inside let's do a quick
06:16 - Lambda just to make it easy and right
06:18 - now let's just do debug.log colar button
06:21 - by the way if you don't know this syntax
06:22 - this is a lambdaa or an anonymous
06:24 - function it's a type of delegate and I
06:26 - covered delegates in detail in a
06:27 - previous video and also of course alter
06:29 - L you could just come over here and on
06:31 - the unclick you could just easily add
06:33 - over here the function but personally I
06:34 - prefer to do it through code but either
06:36 - way works okay so let's do a quick test
06:38 - the game is playing there's the
06:39 - character press the color button and
06:40 - there you go we have L okay so far so
06:42 - good now let's end on modifying the
06:43 - character but as always we want to write
06:45 - good clean code meaning we want the
06:47 - character customization to not be
06:49 - dependent on this UI element for example
06:51 - later on let's say we want to load this
06:52 - character in a regular game scene we do
06:54 - not want to be dependent on this UI
06:56 - meaning we do not want to handle the
06:58 - character customization Direct directly
06:59 - inside thei script instead let's make a
07:01 - proper script that applies to the
07:02 - character itself so over here let's
07:04 - create a new C script call it player
07:06 - character customized so now let's select
07:09 - the character itself so here I've got
07:11 - the character so this is the object that
07:13 - I'm going to attach the script to right
07:14 - next to the animator so let's attach a
07:16 - script and now let's open it okay so now
07:19 - like we saw this asset pack this is all
07:21 - based on modifying the mesh object and
07:23 - if we look at how the character set up
07:24 - let's say over here the color so this is
07:26 - the body this has a skin mesh renderer
07:28 - which inside has a mesh Feld this is the
07:30 - only thing we need to modify so
07:31 - basically we just need a reference to
07:33 - this skin mesh renderer and reference to
07:34 - all the various meshes that we want to
07:36 - apply so up here on this script let's
07:37 - add our references so let's make a
07:40 - serialized field private let's begin
07:41 - with the skin mesh render and then let's
07:44 - make another one this is going to be our
07:45 - mesh array and we're going to make it a
07:47 - mesh array we're making an array so we
07:49 - can assign all the meshes with all
07:51 - different colors back here in the editor
07:52 - here's the character script and yep we
07:55 - do have our skin mesh render and our
07:56 - mesh array so for some reason let's just
07:58 - do it with the body so let's just drag
08:00 - the body skin mesh render make sure you
08:02 - drag the external object that contains
08:03 - the skin mesh render so I draged the
08:05 - example that one and then for the mesh
08:06 - array let's add it so here's another
08:08 - quick tip you can actually copy paste
08:10 - elements so if I go inside the body over
08:12 - here I've got the body mesh so now I
08:14 - could click on it in order to be able to
08:16 - see it over here on the project or I can
08:17 - right click on this field and copy then
08:19 - go back inside the basic character and
08:21 - right click and paste and yep there you
08:22 - go there's the body now let's add
08:24 - another element and let's select the
08:25 - next body so this is the one that is in
08:28 - yellow and let's select next one which
08:29 - is in blue then let's set another one
08:31 - let's select the brown and add another
08:33 - one let's select the orange and another
08:36 - one and let's select the red now
08:37 - obviously you would want to select all
08:39 - of them instead of just a handful of
08:40 - them but now for testing just these ones
08:42 - these on too so back in the code all we
08:44 - need is really just a function to change
08:46 - the color something pretty simple let's
08:47 - make it public because we're going to
08:49 - call this from our UI script let's make
08:51 - it void and call it change color and now
08:53 - here let's simply grab the next
08:54 - available mesh so first that means that
08:56 - we need to figure out which mesh are we
08:58 - currently using so we go inside the skin
09:00 - mesh render and we have the mesh this is
09:02 - the mesh that we're currently using the
09:04 - shared mesh we just need to figure out
09:06 - the index inside the mesh array and for
09:08 - that we can go inside the mesh array and
09:10 - we can call a function to get the index
09:12 - of so let's go inside system. array and
09:15 - let's get the index of this takes a
09:16 - parameter the mesh array so let's use
09:18 - our mesh array and then we have the
09:19 - value so that's a value this is going to
09:21 - return an end for the mesh Index this is
09:23 - the index of the mesh that we have
09:25 - currently selected and now we really
09:26 - just want to assign the next one so for
09:28 - the next one we go inside the mesh array
09:30 - and we're going to want to access it on
09:31 - the mesh index plus one except if we do
09:33 - it like this obviously we're going to go
09:35 - past the array Max we want to make sure
09:37 - to loop back to it so as always let's
09:39 - use the modulo operator modulo of the
09:41 - mesh ray. link and let's put this inside
09:44 - parentheses so we get the modulo of the
09:46 - total so with this as we increase the
09:48 - mesh index once it goes past the mesh
09:50 - ray. length it Loops back into zero that
09:52 - way we can constantly change the color
09:53 - then finally we just need to assign this
09:55 - back into our shared mesh okay so this
09:57 - is constantly going to change the color
09:59 - okay that should do it so we really just
10:00 - need to call this function so over here
10:02 - on the UI field obviously we need a
10:04 - reference so let's add a reference to
10:05 - our player character customized okay we
10:08 - have this and now when you click on the
10:10 - color button let's go inside this and
10:12 - just call change color okay that should
10:13 - do it let's test here in the editor
10:15 - let's just assign the reference so
10:16 - inside the character customization UI
10:18 - over here let's just drag the basic
10:19 - character okay let's test so here we are
10:22 - and the character has a yellow body now
10:23 - I click on this button and there you go
10:25 - turns blue and turns brown and turns
10:27 - orange and then sort of red and now if I
10:30 - click again and Y there you go goes back
10:32 - into yellow and swap it out and yep
10:34 - there you go it's swapping all of the
10:36 - colors okay awesome so this is really
10:38 - the core concept behind this system we
10:40 - really just need one more thing to get
10:41 - the absolute Basics working we need to
10:43 - handle all the various body parts now
10:45 - here on this code you might think of the
10:47 - obvious first approach so we have the
10:49 - skin mesh render and array of meshes so
10:51 - we would really just need to copy pastes
10:53 - for every single body part we'd write
10:55 - different variables for each body part
10:57 - now technically this would work but
10:59 - obviously this does not look good so
11:01 - let's do it in a much more elegant
11:02 - manner instead of tons of copy pasting
11:04 - let's make a class that represents data
11:06 - for a single body part so let's do a
11:09 - public class let's call it body part
11:11 - data and now inside we have pretty much
11:13 - those two except over here since this is
11:15 - going to be a subass field let's make
11:17 - them public this is basically just going
11:18 - to be a container of data so let's do a
11:21 - mesh array for the mesh array and also a
11:24 - skin mesh render for the skin mesh
11:26 - render and now instead of having tons of
11:28 - arrays in tons of skin mesh renders for
11:30 - every single body part we just have an
11:32 - array of body part data so just an array
11:34 - of this for the body part data array now
11:37 - let's just comment out these errors just
11:39 - so the code compiles so we see the
11:40 - editor and here in the editor looking at
11:42 - the custom basic character and nope
11:44 - there is no field nothing shows up
11:46 - that's because custom classes do not
11:48 - show up by default in the editor in
11:49 - order to make this class this type
11:51 - visible in the editor in order to do
11:53 - that we need to mark it as serializable
11:54 - so we need to add the attribute system.
11:56 - serializable if we do this and Save and
11:59 - if there it is now we do have our body
12:00 - part data array and inside we have a
12:02 - list so let's add an element and if
12:04 - there you go it is an element that
12:05 - contains both of our pieces of data so
12:07 - we've got the skin mesh render and we
12:08 - have the mesh array so let me just
12:10 - assign this so assign the body skin mesh
12:12 - render and let's also assign the body
12:14 - mesh let's assign the various one so
12:17 - I've got the body let's put the body in
12:19 - blue let's put the body in brown and
12:21 - let's say the body in red okay now let's
12:23 - add another element for this for a
12:25 - different body part and instead of the
12:26 - body let's add a different one so let's
12:28 - say the hat let's modify the Hat then
12:30 - again all we need is to assign the mesh
12:32 - Ray with all the various hats so let's
12:34 - go inside the Hat in order to find all
12:35 - of the various hats they are over here
12:37 - inside the meshes inside the hat and yep
12:39 - here we have all the various hats as you
12:41 - can see there's tons of them that is why
12:43 - this character pack this one can make
12:45 - pretty much infinite variation so here I
12:47 - have assigned some hats and I'm going to
12:48 - also add another special thing which is
12:50 - I'm going to add an element and then I'm
12:52 - going to click to select it and press on
12:54 - delete in order to clear that one so
12:55 - this one has no mesh that is because
12:57 - obviously we also want to add the
12:58 - ability in order to have no hat okay so
13:00 - with this now we have the body with the
13:02 - various colors and the hat with various
13:04 - hats so now here in the code let's
13:05 - modify our function in order to change
13:07 - the color so let's uncomment this and
13:09 - again we've got the skin mesh renderer
13:10 - and really we just need to access the
13:12 - data inside of the body part data which
13:14 - is inside of these ones so for example
13:16 - for the color I know the color is going
13:17 - to be on index zero so let's go index
13:19 - zero grab the mesh array then on index
13:22 - zero grab the skin mesh render and same
13:24 - thing for these okay just like this and
13:27 - by the way right now if you are thinking
13:29 - that hardcoded indexes if you're
13:30 - thinking that looks like some pretty bad
13:32 - code if so then great job on having that
13:34 - thought just hold that thought wait a
13:36 - little bit we're going to see that in a
13:37 - little bit so here we've got the change
13:39 - color and let's make another function so
13:41 - this is going to be the change hat and
13:43 - really this the only thing that we
13:44 - modify is just the index instead of
13:46 - being on index zero let's go into index
13:48 - one okay so now over here on the UI
13:50 - script let's do the same thing so let's
13:52 - add another button for the hat button
13:54 - and we're going to do pretty much exact
13:55 - same thing so on the hat button we add a
13:57 - click and this is our our hat button and
13:59 - we're going to go and change the Hat
14:01 - okay we just need to drag this reference
14:03 - so here in the editor here is the UI
14:04 - script let's duplicate the color button
14:07 - and over here let's put another one
14:08 - underneath this is going to be the hat
14:10 - button and inside for the text let's say
14:13 - hat then on the script just drag the
14:15 - reference okay so with this let's test
14:17 - all right so now if I click on the color
14:19 - and there you go it does change the body
14:21 - color okay so far so good and click on
14:22 - the hat and if there you go it does
14:24 - change the hat so I can modify the Hat I
14:26 - can get it like this sombrero and make
14:28 - it in something like a yellow and there
14:30 - you go everything does work perfectly
14:32 - all right awesome so obviously this
14:34 - system is much better than the original
14:36 - idea of just copy pasting all these
14:38 - fields for every single body part using
14:40 - an actual class that holds all the
14:41 - various data and then using an array of
14:43 - that class type that is much better code
14:45 - however we can still improve upon this
14:47 - further like I mentioned hard code
14:49 - indexes these are not a good thing just
14:51 - looking at this code you can't really
14:52 - tell that index zero is supposed to be
14:54 - the color and index one is supposed to
14:56 - be the Hat there's nothing here that
14:58 - means that's exactly what it means if
15:00 - over here in the editor I just take the
15:01 - element one and I just drag it above
15:03 - there and if we try like this then right
15:05 - now if I modify the color I'm actually
15:07 - modifying the hat so this obviously
15:08 - broken so we do not want to make it
15:11 - based on indexes really what we need is
15:13 - to replace the index with something that
15:14 - makes a lot more sense like for example
15:16 - an enum so up here let's make an enum
15:18 - let's make public enum let's call the
15:20 - body part type and here let's assign all
15:22 - the various body parts so we have the
15:24 - color and then we have the hat with this
15:26 - we have a much better way of referencing
15:28 - each body part type so now inside the
15:30 - body part data we have a list of body
15:32 - part data in order to know which type it
15:33 - is let's simply add a field inside of
15:35 - here so a public body part type and body
15:38 - part type so we just do this and now
15:40 - here in the editor we can assign the
15:41 - proper body part types so for this one
15:44 - this one with various bodies this is
15:45 - indeed the color and this one is indeed
15:47 - going to be the hats so this helps
15:49 - organize our things much better now we
15:50 - do not have any hardcode indexes and now
15:53 - we need to modify these functions and
15:55 - let's actually make a separate function
15:56 - so let's make a public void change
15:58 - change body parts and inside we're going
16:00 - to receive a parameter of type body part
16:03 - type so the body part type and for the
16:06 - logic we're going to do pretty much
16:07 - exactly the same logic except obviously
16:09 - we're not going to use indexes we're
16:11 - going to actually find the body part
16:12 - type that contains this data so let's
16:14 - actually make a helper function to do
16:16 - that so let's do here a private we're
16:18 - going to return body part data and let's
16:20 - call it get body part data and we've got
16:22 - the body part type body part type and
16:25 - now here we just really cycle through
16:27 - array so body part that data inside our
16:29 - body part data array we cycle through it
16:31 - then we see if this body part data if
16:33 - this one. body part type matches the one
16:36 - that we are looking for if so then
16:37 - obviously we want this one so let's
16:39 - return body part data now this should
16:41 - always find something so it should never
16:42 - get down here but in order to make our
16:44 - function valid we need to return
16:45 - something so let's just return all
16:47 - although of course we should really add
16:48 - the arrays for all the body parts so we
16:50 - should never actually get to this point
16:52 - anyway so here we now have a function
16:54 - from which we can get the body part data
16:56 - so P let's grab the body part data body
16:59 - part data and let's simply grab it and
17:00 - pass in this type so we have this and
17:02 - now over here on the function we do
17:04 - literally the same logic and we just
17:06 - replace all this with this and with that
17:09 - we actually also end up removing all
17:11 - this duplicate code so we no longer have
17:12 - a function to change every single
17:14 - different body part we just have one we
17:17 - pass in the body part type and it
17:18 - changes perfectly all we need is over
17:20 - here on the character customization UI
17:21 - so when changing the color instead of
17:23 - using that function we use the other one
17:25 - change body part and now here we access
17:27 - the body part type and we're going to
17:28 - modify the color and on this one change
17:31 - body part and this one we want to modify
17:33 - the Hat okay so let's test so here we
17:35 - are and click the button change the
17:36 - color and yep it works change the hat
17:38 - and yep everything works all right
17:40 - awesome now with this honestly the
17:42 - system is fully working All That Remains
17:44 - is really just filling in these arrays
17:46 - with all of the various body parts this
17:48 - is honestly the part that took the most
17:49 - amount of effort when making my own game
17:51 - as you can see there's 100 hats so I
17:53 - basically had to drag 100 references so
17:55 - making a system like this it's quite
17:57 - laborious in order to drag drag all the
17:58 - references but as you can see the logic
18:00 - is actually pretty straightforward
18:01 - before I show the final system let's
18:03 - just cover one more very important thing
18:05 - which is saving and loading and again
18:06 - this is actually going to be quite
18:07 - simple I'm going to do it the same way
18:09 - that I've always done the same way that
18:11 - I covered in a tutorial video quite a
18:12 - long time ago we're going to make a save
18:14 - object and we're going to save it as a
18:16 - Json string so over here on the player
18:17 - character customize usually I like to
18:19 - put the saving and loading at the end of
18:21 - the file so up here let's make a class
18:23 - for the save object and over here we
18:25 - just need to save the customization data
18:27 - except obviously we have issue right now
18:29 - the data for the customization that data
18:31 - is actually saved on the mesh itself the
18:33 - skin mesh Rand contains the shared mesh
18:35 - for the one that we have selected now we
18:36 - can't directly serialize a mesh so we
18:38 - can't really go into the save object and
18:40 - over here add a mesh field we can't
18:41 - really do that so instead let's use an
18:43 - index instead we need to store both the
18:45 - index and the body part type so let's
18:47 - make another type for it let's make a p
18:50 - class for the body part type index and
18:53 - now inside we just need two pieces of
18:54 - data so the body part type body part
18:57 - type and and then also an INT for the
18:59 - actual selected index and again in order
19:01 - to make this work with our save system
19:03 - we need to make sure this one is
19:04 - serializable so we have this and now
19:06 - over here on the save object we can just
19:08 - store a body part type index array
19:12 - actually let's make this a list just so
19:14 - that it makes it a bit easier to
19:15 - actually save so let's make it a list of
19:17 - body type index list and now all we need
19:20 - is really just a private void save
19:23 - function and over here we just need to
19:25 - construct this list so let's make a
19:27 - temporary variable here
19:28 - just making a list of this and we just
19:30 - need to cycle through all of the various
19:32 - body parts now for that here's a quick
19:34 - tip you can easily cycle through all of
19:36 - the values in a certain inum so up here
19:39 - let's do examply that so let's do a 4 in
19:41 - of body part type body part type and
19:44 - we're going to cycle through it and
19:45 - let's go inside system. inum and inside
19:48 - we've got the get values and basically
19:50 - this returns an array of all the values
19:52 - of a certain enum and we want for the
19:54 - body part type and we just need to make
19:56 - a type of of this type that is going to
19:59 - cycle through all the elements all the
20:01 - various types inside that Eno so we
20:03 - cycle through them then we just need to
20:05 - get the body part data and pretty much
20:06 - just get the mesh index so let's
20:08 - actually copy the exact same thing here
20:09 - so we've got the body part type from
20:11 - that we get the body part data and then
20:13 - from inside the body part data we can
20:15 - get the index that is actually assigned
20:17 - right now so that gives us the mesh
20:18 - index and by the way we can simplify
20:20 - this code since up here we already added
20:22 - using system so we can get rid of all of
20:25 - this extra system so like this just to
20:27 - simplify things a little bit okay so we
20:29 - have the mesh index and then simply go
20:31 - inside this list and let's add and we're
20:33 - going to add new element of type body
20:35 - part type index and inside let's assign
20:37 - the index onto this mesh index and the
20:40 - body part type is this body part type
20:42 - okay so basically we are seconding
20:43 - through every single body part type we
20:45 - are grabbing the actual selected index
20:48 - based on what is selected on the skin
20:49 - mesh render so we get that index we get
20:51 - the body part type and we add it to the
20:53 - list so we have a list of all of the
20:54 - body part types along with the selected
20:56 - index and then we can finally create
20:58 - create the save object so save object
21:00 - any save object and inside we just
21:03 - assign the body type index into the one
21:05 - that we just created and now finally as
21:07 - usual let's go inside the Json utility
21:09 - to convert this to Json let's put the
21:12 - save object and this is going to be our
21:14 - string for our Json let's also do a
21:17 - debug.log just see what this contains
21:19 - and finally in order to save this let's
21:21 - use the simplest save method so really
21:23 - just using player prefs so player prefs
21:25 - in order to save or actually it's not
21:27 - the save it's the set string and let's
21:29 - call it player customization that's for
21:32 - the key and for the value let's store
21:33 - our Json that's the save done so now
21:35 - let's just do a private void load and
21:37 - this one is really just going to be the
21:39 - opposite so first let's go into player
21:41 - prefs in order to get the string the
21:43 - string of type player customization
21:45 - which by the way this is a quick demo so
21:47 - normally I would leave like this but in
21:48 - order to teach some good correct
21:49 - practices let's actually not use strings
21:52 - for our key instead let's go up here and
21:54 - actually write a proper key so private
21:56 - string for player prefs save and we use
21:59 - it here and then down here we can now
22:02 - avoid using strings so let's use and
22:04 - this way we make sure we always use the
22:06 - same string there are no issues okay so
22:08 - anyways we get string and that is going
22:10 - to return our string for Json so this
22:12 - going to be our save Json string then as
22:14 - usual go inside Json utility and load
22:17 - from Json we're going to load of the
22:19 - type save object and the Json is from
22:21 - this Json so that is going to return our
22:23 - save object for the save object okay so
22:26 - now we have the save object and inside
22:28 - we've got the body type index list so
22:30 - now let's just cycle through it so for
22:32 - each the body part type index let's go
22:35 - inside this one inside the save object.
22:37 - body part. index list then now we do
22:40 - really the same thing in order to go
22:42 - inside the index inside the index let's
22:44 - grab the body part type that grabs us
22:46 - the body part data and then we can
22:47 - assign it so pretty much the same thing
22:49 - that we were doing up here except
22:51 - instead of grabbing the next one we go
22:53 - inside the body type data inside the
22:54 - mesh array and you grab from the body
22:57 - part type index we grab the selected
22:59 - index okay so that should really do it
23:01 - we just need to make some save and load
23:02 - buttons so let's actually make this
23:04 - public so that the UI script can call
23:06 - these functions make them both public
23:09 - okay and over here on the UI script
23:11 - let's just add two more buttons one is
23:12 - going to be the load and one is going to
23:14 - be the save and then we're going to run
23:15 - the same logic so these are buttons so
23:18 - let's go into the load button when we
23:19 - click let's do something let's say load
23:22 - and go inside that one and call load and
23:25 - then we have the save button and does
23:26 - pretty much exactly the same thing okay
23:28 - that's it for the code so let's just
23:30 - make these here let's go inside UI we
23:32 - have our buttons let's just do two more
23:35 - so move it down here one for loading one
23:37 - for saving so this going to be the load
23:39 - button underneath the save button then
23:42 - just modify the text inside of it so
23:44 - this is the UN load and this one is
23:45 - going to be the save and finally just
23:47 - drag the references so the unload button
23:49 - and the save button okay so let's test
23:52 - all right so here is the character and
23:54 - let's customize it so let's put like
23:56 - this hat and this can color here we can
23:58 - see the logs and as we click on Save we
24:00 - should be able to see our Json so if I
24:02 - click on Save and there you go it's
24:03 - saved and it saved the body part type
24:05 - index list and saved inside the two
24:07 - lists so the body part type zero and the
24:10 - body part type one this one has the
24:12 - index of three and this one has the
24:13 - index of two so it looks like it did
24:15 - save this is correct Json so now let's
24:17 - stop playing and I'll play again and the
24:19 - character is back on defaults and now if
24:21 - we click on load and if there you go
24:22 - with the exact same character that we
24:23 - just saved all right awesome so with
24:25 - that as you can see everything is
24:27 - working so here is the completed system
24:29 - in my game it works exactly the same
24:31 - thing that we saw in the tutorial so
24:32 - I've got the various parts to change the
24:34 - color change the hair the Hat the shirt
24:36 - and so on by the way for synchronizing
24:37 - the customization in multiplayer I'm
24:39 - doing it like this I've got a network
24:41 - list of type player data this is a
24:43 - custom type that I made and this custom
24:45 - type implements I Network realizable and
24:47 - over here inside I've got a fix ring
24:49 - with 52 bytes for the player
24:50 - customization now this is important
24:52 - obviously the Json string needs to fit
24:53 - inside of this and if you want a more
24:55 - step-by-step guide on how I made the
24:56 - player that and of the stuff this is
24:58 - pretty much exactly what I made in my
25:00 - free multiplayer course so you can go
25:01 - watch that to see how I synchronize the
25:03 - player data over here I literally just
25:04 - added an extra field the only tricky
25:06 - thing is really just over here figuring
25:08 - out the actual amount of bytes for the
25:09 - fix string the first time that I tried
25:11 - to save I use the code pretty much exam
25:13 - like I covered in tutorial so the save
25:15 - object had some proper parameter names
25:17 - but in order to make it a bit shorter
25:18 - over here as you can see I made the
25:20 - parameter names literally just one
25:21 - character that makes it so that the Json
25:23 - save file is much shorter which does
25:24 - then fit inside that fixed ring then
25:26 - here is the character customization
25:27 - seeing in the final game everything is
25:29 - pretty much exactly the same as we just
25:31 - made so I've got a canvas and just has a
25:33 - bit of fun I made this one a screen
25:34 - space camera instead of a screen space
25:36 - overlay just to be able to have this
25:37 - nice slam to the UI I think this looks
25:39 - quite good that's really the only differ
25:40 - see canvas is all set up exactly the
25:42 - same then inside I've got the Character
25:44 - Creator UI and inside I've got all the
25:46 - various buttons for the various body
25:48 - parts I made an individual script on
25:49 - each button just to make it a bit easier
25:51 - in order to figure out which part does
25:53 - which button refer to and here is the
25:54 - final player character customized script
25:56 - so I've got an N for for the body part
25:58 - type I just added all the other body
26:00 - parts then the usual body part type
26:02 - index then I just made a subass for the
26:04 - customization basically if I want to
26:06 - customize a character in order to save
26:07 - that data I'm really just going to save
26:09 - this subass instead of the entire player
26:11 - character customized so just separated a
26:13 - little bit more but all the logic is
26:14 - exactly the same then another slight
26:16 - difference was instead of querying every
26:18 - single skin mesh R to see what mesh it's
26:20 - using instead of that I really just
26:21 - store the body part type index array so
26:24 - this basically stores the current
26:25 - customization State for the actual
26:27 - player character
26:28 - that way there's no need to actually
26:29 - query the skin mesh renders for every
26:31 - single body part in order to figure out
26:32 - which one is being used I already know
26:34 - which one is being used because stored
26:35 - in this array then the same thing just a
26:37 - function to change the index another one
26:39 - to set it another one to get it then a
26:41 - function to randomize which does exam
26:43 - what you expect so just randomizes a
26:44 - certain body part this complete body
26:46 - part data this is what contains all the
26:49 - various body parts so the same body part
26:51 - data type array has the skin mesh
26:53 - renderer the array of the meshes and
26:54 - body part type and then the complete one
26:56 - simply contains an array of the that
26:58 - then some pver functions for getting it
26:59 - also for refreshing it and calculating
27:01 - the maximum index of each type so really
27:04 - just a bit more of a Polish system than
27:05 - what I covered in tutorial then down
27:07 - here just some events for when the
27:09 - character customization changes
27:10 - containing all the data and the current
27:12 - customization just doing some logic in
27:14 - order to get the default one setting a
27:16 - different customization randomizing it
27:18 - resetting change the index and so on so
27:20 - the code is slightly different but it's
27:21 - all pretty much exactly the same exactly
27:22 - the same logic works in the same way as
27:24 - in the tutorial code so here it is in
27:26 - game and I can customize the character
27:28 - and modify literally anything then I can
27:30 - save the character and go into play mode
27:32 - and yep here is my custom character
27:33 - walking around and all the players see
27:35 - the exact same character okay so that's
27:36 - the character customization system you
27:38 - can go ahead and download the project
27:40 - files Link in the description it
27:41 - includes the complete final class just
27:42 - like I'm using in my own steam game and
27:44 - if you also pick up the asset pack that
27:46 - is currently on sale if you import it on
27:47 - the same project it should load all the
27:49 - assets correctly so just with that you
27:51 - should have a character customization
27:53 - system ready to go the Cyber week s end
27:55 - soon so if you need a nice stylized
27:57 - character a customization pack for your
27:58 - game then definitely get it quickly or
28:00 - like I mentioned in the beginning if you
28:02 - prefer the cinti style the logic for
28:03 - using that one should be mostly the same
28:05 - that asset is also on a Black Friday
28:07 - sale on the Cindy store so if you prefer
28:08 - that one get it quickly if you buy
28:10 - through the link in the description it's
28:11 - the same price to you and I get a nice
28:12 - commission so check out both links
28:14 - alongside the free project fils all
28:16 - right hope that's useful check out these
28:18 - videos to learn some more thanks to
28:20 - these awesome patreon supporters for
28:21 - making these videos possible thank you
28:23 - for watching and I'll see you next
28:26 - time
28:30 - [Music]