00:00 - hello and welcome i'm your code monkey
00:02 - here let's learn how to test if a
00:03 - certain point is inside or outside of a
00:06 - certain hex shape doing this involves a
00:08 - bit of math but don't be scared it's
00:09 - nothing too special personally i'm not
00:11 - very good at math so if i can learn this
00:13 - and definitely you can too this can be
00:15 - done in both 2d and 3d i won't showcase
00:17 - and include both methods in the project
00:19 - files you can download
00:21 - now if you're in a hurry here's the 30
00:22 - second answer you first you test if the
00:24 - point is inside the horizontal bounds by
00:26 - testing against the width then test for
00:28 - the vertical bounds against the height
00:30 - then for the diagonals you calculate
00:32 - this angle
00:33 - and get the perpendicular direction to
00:35 - it
00:36 - then with a certain test point you
00:38 - calculate the direction from this corner
00:40 - to that test point and then just do the
00:42 - dot product between these two vectors
00:44 - and that will basically tell you if this
00:46 - point is on this side of this line or on
00:48 - this side
00:49 - then you combine all those tests and you
00:50 - have all the logic working now for a
00:52 - more guided explanation keep watching
00:54 - the video this is the kind of thing that
00:56 - even if you don't use it right now it
00:57 - will still improve your math skills just
00:59 - by learning how this is done part of the
01:00 - reason why i'm doing this is to help
01:02 - solidify my own knowledge and also why i
01:04 - started learning this is because lately
01:06 - i've been researching hex words lots of
01:08 - games use them and this would be a great
01:09 - addition to my standard grid system i'm
01:11 - also planning to include hex grids as a
01:13 - free update to my turn based strategy
01:15 - course and i thought that to make that
01:17 - work i needed to figure out the math to
01:19 - test if a point is inside a certain hex
01:21 - position however actually that is not
01:23 - the case for a hex grid you really just
01:25 - need a basic distance check but still i
01:27 - wanted to learn how to test if a certain
01:29 - point is inside a hex and learn all of
01:30 - the math behind it
01:32 - so here i won't cover that and then for
01:34 - the other specific scenario converting a
01:36 - square grid into a hex grid for that i
01:38 - won't cover it in the next video here i
01:40 - just want to get a point and test if
01:41 - it's inside a certain hex shape so let's
01:44 - do this over here is my hex shape now i
01:46 - drew this basic sprite in photoshop
01:49 - photoshop has a tool for drawing perfect
01:51 - hexagons
01:52 - you can just go and use the polygon tool
01:55 - right here this one
01:56 - then on the options under star ratio
01:58 - just pick 100 for number of size pick
02:01 - six and then if you just click it shows
02:03 - up in nice little window so you can make
02:04 - a perfect 100 by 100 hexagon and yep
02:07 - there it is then you can simply rotate
02:08 - it if you want a pointy top or a flat
02:10 - top
02:11 - okay so this is my hexagon now for the
02:13 - shape here it is on the metrics
02:16 - i define a certain size which is used
02:17 - both for the width as well as the height
02:20 - then the distance from the center to the
02:22 - sides this is half the size
02:24 - it's the same thing as the distance from
02:25 - the center point to the bottom or the
02:27 - top
02:28 - then for all of the corners here
02:30 - the upper and lower are just offset by
02:32 - half the size so that's simple but these
02:34 - corner ones to get to this one we need
02:36 - to move to the right by half the size
02:38 - and then move up by only a quarter of
02:40 - the size whereas this one right here go
02:41 - to the right and then down by a quarter
02:43 - then for the names over here is the
02:45 - upper corner down here the lower corner
02:47 - then the upper right corner upper left
02:48 - lower left and lower right
02:50 - again pay attention to the coordinates
02:51 - on all of these points
02:53 - like how this side is to the right of
02:55 - the center point by half the size and
02:56 - specifically how these corners they are
02:58 - out by a quarter of the size these
03:00 - values are going to be very important
03:01 - when doing the actual math
03:03 - so for testing here is my scene i just
03:05 - have my sprite it's positioned on zero
03:07 - zero zero and it has a standard scale of
03:10 - one one one i just flipped it 90 degrees
03:12 - on the x in order to make sure that it
03:13 - is on the xz axis
03:15 - again like i mentioned all the math used
03:17 - here can be used in either 3d or 2d the
03:19 - only difference is really whether you're
03:20 - using the xz axis or the xy axes then i
03:24 - also got my standard mouse 3d script so
03:26 - i can play the game and i got a nice
03:28 - cursor following the mouse if you don't
03:30 - know how to get the mouse position go
03:31 - watch my video on that topic so with
03:33 - that let's begin making our script so
03:35 - let's create a brand new c sharp script
03:37 - call it test point inside hexagon
03:41 - let's make a game object to run this
03:44 - and attach the script now here the first
03:46 - thing we're going to do is create a
03:47 - structure where we can store all of our
03:49 - hexagon corners so that we can later do
03:51 - some math
03:52 - so let's put up here a public class
03:54 - called hexagon
03:55 - now quick note of course we could make
03:57 - this class in a separate file the only
03:59 - reason why i'm writing it here is just
04:01 - so it's easier to read the code for both
04:02 - the testing and the hexagon so here
04:04 - let's store all of our coordinate
04:06 - positions as well as half the size
04:08 - so first the public float for the half
04:10 - size
04:11 - then let's go with vector3 for all the
04:13 - corners so the upper right corner
04:16 - then the upper and left corner
04:20 - then the other ones
04:25 - all right so here's all the data that we
04:27 - need to define our hexagon we've got
04:29 - half the size the center point and all
04:30 - the various corners all right now let's
04:33 - make a constructor so public hexagon
04:36 - and on our constructor let's receive a
04:38 - float for the half size and let's also
04:40 - receive a vector3 for our center point
04:46 - all right now based on just this we can
04:48 - calculate all of the other corners so
04:50 - let's first calculate the top and bottom
04:52 - which are super simple
04:54 - so for the top one so that's the upper
04:56 - corner
04:57 - for this one we're going to take the
04:58 - center point and we just want to move it
05:01 - on the zen
05:02 - and we want to move it by half the size
05:05 - so let's add plus new vector 3 0 0 1
05:09 - and move it by half the size
05:11 - again going back into our hex shape here
05:13 - we've got the center point so we want to
05:15 - move up by half the size and again the
05:18 - only difference between 2d and 3d is
05:20 - here instead of using xz you would use
05:21 - xy and perhaps instead of using factor
05:24 - threes you'd use vector twos
05:26 - okay so that's the corner and for the
05:27 - lower corner this one is also super
05:29 - simple we just take that and just move
05:31 - down by minus one on the z
05:33 - okay so with this we already have this
05:35 - working let's do a quick test just to
05:37 - verify now one way to unlock this would
05:39 - be to add a manual debug.log on each one
05:42 - of these that would be quite a lot of
05:43 - work so let's do something a bit faster
05:45 - let's go up here into our testing script
05:47 - let's first make a proud void start on
05:50 - start let's construct our hexagon
05:56 - let's put it on new vector 3 of 0 0 0
06:00 - and let's give it a half size of 0.5 f
06:02 - so that the total size is 1 f like i
06:05 - said for debugging instead of printing
06:07 - all the values one thing we can do is
06:09 - let's use the json utility and convert
06:11 - to json and convert this object into
06:13 - json and do one log on this one so just
06:16 - an easy way of printing out all of the
06:17 - various fields if you don't know what is
06:19 - json you can watch my quick explainer on
06:21 - it pretty simple so here let's see what
06:23 - this prints
06:24 - all right so here's our log let's see
06:26 - the half size is indeed 0.5 that is
06:28 - correct the center point on zero zero
06:29 - zero that is correct and then for the
06:31 - upper corner it is on zero zero and zero
06:33 - point five yep and the lower corner is
06:36 - on zero zero minus point five
06:38 - which we can also verify over here since
06:40 - it has the exact same size exact same
06:42 - shape as this one so we can create a new
06:44 - empty game object and we can position it
06:46 - let's make sure it's on zero on the y
06:48 - and just move it over here to this
06:49 - corner and yep zero zero minus point
06:51 - five and this one zero zero plus point
06:53 - five okay great so both those corners
06:55 - are working correctly now let's
06:57 - calculate those corner positions
06:59 - so referring back to our size reference
07:01 - here
07:02 - in order to get this upper right corner
07:04 - we need to start from the center point
07:05 - we need to move to the right by half the
07:07 - size and then move up by a quarter of
07:09 - the size so another way of getting a
07:11 - quarter of size is really half the half
07:13 - size so let's do that
07:15 - over here let's define that so the upper
07:16 - right corner
07:18 - we start from the center point then we
07:20 - move to the right so one zero zero
07:23 - we move to the right by half the size
07:25 - and then we move up so new vector three
07:28 - zero zero 1
07:30 - and we're going to move up by a quarter
07:31 - of the size or really half the half size
07:33 - so half size times 0.5 f
07:36 - all right so that should do it let's see
07:38 - okay here's our log let's see the upper
07:40 - right corner it is on 0.5
07:42 - 0.25 so again we can verify let's create
07:45 - an empty game object let's put it on a y
07:48 - of zero and then just move it roughly
07:50 - over there and see if it is correct yep
07:51 - 0.5 0.25 all right awesome
07:54 - so our math is on working correctly now
07:56 - let's do that for pretty much all the
07:58 - other points
07:59 - so up here let's copy that
08:01 - so we've got the upper and left corner
08:05 - then we've got the lower right corner
08:07 - and the lower left corner
08:10 - now for the upper left corner we move
08:12 - based on the center point we move to the
08:14 - left whereas this one we were moving to
08:16 - the right okay then we also move up that
08:18 - is correct and for the lower right
08:20 - corner we move to the right yep and the
08:22 - other left move to the left but then on
08:24 - the lower right corner instead of going
08:26 - plus one on the z we go minus one and
08:28 - minus one all right so that's it let's
08:31 - see if all of our logic worked okay
08:33 - there's our log let's see so the center
08:34 - point on zero zero zero that is correct
08:36 - the upper right corner point five zero
08:38 - point twenty five yep then the upper
08:39 - left is on minus 0.5 and 0.25 yep that
08:42 - is correct
08:43 - then the lower right corner 0.5 minus
08:45 - 0.25 minus 0.5 minus 0.25 okay great so
08:49 - all of the points are correctly
08:50 - positioned
08:52 - now that we have this we can finally
08:53 - start running some basic logic
08:55 - so on our testing script let's go up
08:57 - here let's make a simple private void
08:59 - update and let's just make the hexagon a
09:01 - member variable so private hexagon for
09:03 - our hexagon
09:04 - and we just set it down okay
09:07 - so we have our hexagon and now over here
09:09 - on the update
09:10 - let's first test just if we are inside
09:12 - the horizontal bounds
09:14 - so we need to get the mouse wrong
09:16 - position so again i'm going to use my
09:17 - super helpful script that i made in a
09:19 - previous video
09:20 - get the mouse wrong position
09:22 - so we're going to test if the mouse were
09:24 - on position.x if this one is less than
09:26 - one of the right corners so we can use
09:28 - the upper right or upper left so let's
09:30 - go the upper right corner so that's
09:32 - inside the hexagon the upper right
09:34 - corner and we grab the x
09:36 - so if it's to the left of that one
09:39 - and if it's to the right so let's copy
09:42 - this
09:43 - if the x is bigger than the upper and
09:46 - left corner
09:50 - if so then it's inside the horizontal
09:52 - bounds
09:54 - here let's just do a vector 3 for the
09:56 - test position
10:00 - just so we use this one instead of that
10:02 - one
10:07 - all right so that's our busy code now
10:09 - just for testing let's add a nice visual
10:11 - just so we don't have to look in the log
10:12 - and we have a more visual view
10:14 - let's grab a reference to the mouse game
10:16 - object renderer so let's make it a
10:18 - serialized field in private
10:19 - use a mesh render
10:22 - for the mouse mesh render
10:24 - then let's also have a field for a
10:26 - material let's say green material
10:30 - and then also a red material
10:32 - then if we are inside
10:34 - so if we are inside the bounds let's set
10:36 - this one to material equals the green
10:39 - material
10:41 - and if not then let's put on the red so
10:43 - let's put it up here so this one the red
10:45 - material
10:46 - okay so we set the red material then if
10:48 - it's inside the horizontal mounts we
10:49 - change it to the green material so here
10:51 - in the editor let me just drag the
10:52 - reference of that one and then also the
10:55 - mouse green and the mouse red okay let's
10:57 - test
10:58 - so here we are with the mouse outside
11:00 - and it is in red okay correct and if i
11:02 - move inside yep there you go green and
11:04 - if i go outside yep back to red all
11:06 - right so the horizontal bounce is indeed
11:08 - working now the next thing we want is
11:10 - vertical testing so if we go above the
11:12 - upper point over here it should be red
11:14 - as well as down here so let's do that
11:16 - now that is going to be super simple
11:17 - it's pretty much the same thing so let's
11:19 - actually copy this and put it inside
11:21 - so for this one let's test the zed on
11:24 - the test position
11:26 - and instead of the upper right corner
11:27 - let's use the upper corner so it has to
11:30 - be under the upper corner.z and it has
11:32 - to be above the lower corner.z
11:36 - so this is inside the vertical bounds
11:39 - okay let's see all right outside is red
11:41 - inside is green now if i go outside in
11:44 - there and there you go nice and red and
11:45 - nice and green all right so the basic
11:48 - bounding box is indeed working
11:50 - now let's get to the complex part which
11:52 - is related to diagonals right now if i'm
11:54 - here outside diagonal but still inside
11:55 - the vertical and the horizontal over
11:57 - here says green where it should be red
11:59 - so what we need to test is test if the
12:01 - test position is on this side or this
12:03 - side of this line
12:05 - now thankfully this was actually pretty
12:06 - easy for me to learn how to do because i
12:08 - already researched an interesting game
12:09 - mechanic that relies on the exact same
12:11 - logic
12:12 - the backstab mechanic that i covered in
12:14 - a previous video for that one to work i
12:16 - need to test if the player was behind
12:18 - the enemy and when researching that
12:19 - topic that's when i learned about the
12:21 - vector3 dot product it basically tells
12:23 - you if a vector is pointing in the same
12:25 - or opposite direction of another vector
12:27 - so that's exactly what we're going to do
12:28 - here we basically have this line here
12:31 - and in order to test which side our test
12:34 - point is
12:35 - we just need to grab this direction so
12:36 - we're going to complete the direction
12:38 - from the upper right corner to the upper
12:39 - corner and we get this direction vector
12:41 - then with that vector we're going to
12:43 - apply a 9 degree rotation and we're
12:45 - going to end up with a vector pretty
12:46 - much like this then all that slice is
12:48 - just getting our test point
12:50 - complementing the direction towards the
12:51 - test point and doing the dot product
12:53 - between this vector and this vector okay
12:55 - so let's do this
12:56 - for that first let's calculate this
12:58 - vector and then this vector
13:00 - so here and let's define a vector3 let's
13:02 - call it the direction from the upper
13:05 - right corner
13:06 - to the upper corner
13:08 - now this is a super worthy name but i
13:10 - can't think of a better name that would
13:11 - be equally as descriptive and compact
13:14 - again you should always value
13:15 - readability over compactness so i'm okay
13:17 - with having a super long name as long as
13:19 - it's super accurate so i have this and
13:21 - for this one we just go into the hexagon
13:23 - grab the upper corner and subtract the
13:26 - hexagon dot upper right corner
13:29 - so you grab this vector
13:31 - so with that we have this vector and now
13:33 - we need to apply 90 degree rotation to
13:35 - end up with this vector
13:37 - now for applying a 90 degree rotation
13:39 - thankfully for that i have a super
13:40 - useful function in my utilities which
13:42 - you can download from unt codemonkey.com
13:45 - here i've got a function to apply a
13:46 - rotation to a vector on the xz plane
13:49 - so we're only just taking the quaternion
13:50 - euler with a certain angle multiplied by
13:52 - the vector
13:54 - so over here i'm going to use that
13:55 - function
13:56 - so let's apply the rotation to the
13:58 - vector
13:59 - the rotation is going to be this
14:01 - direction vector and for the angle the
14:04 - way unity works is actually clockwise so
14:06 - what we want is minus 90 degrees
14:10 - so this is going to be the vector 3
14:12 - let's call this
14:13 - the dot direction upper right corner
14:17 - now just with this let's do a quick log
14:19 - just to make sure that all of our math
14:20 - is working correctly so far
14:23 - so let's do a debug download first on
14:25 - this one
14:28 - and then also on this one
14:30 - okay so let's see if these two are
14:31 - correct all right so here it is and we
14:33 - can see the direction from the upper
14:35 - right corner that is this one going to
14:36 - the upper one is minus 0.5 and plus 0.25
14:39 - that is correct and the one that is
14:41 - perpendicular that one is going minus
14:43 - 0.25 and minus 0.5 which yep doesn't
14:45 - look to be correct
14:46 - okay so the next thing we need is the
14:48 - direction pointing from the upper right
14:50 - corner towards the test point
14:52 - so over here that's a vector 3 for the
14:53 - direction from the upper right corner to
14:57 - test point
14:58 - and this one is simple so test point
15:01 - minus the hexagon.upper right corner
15:05 - and with these two directions all that's
15:06 - left is the dot product so let's do a
15:08 - vector3 dot
15:11 - let's use the dot direction upper right
15:13 - corner and the deer from upper right
15:15 - corner to the test point in order to
15:17 - make sure that the dot works correctly
15:19 - being between minus one and plus one
15:21 - let's normalize these vectors
15:23 - just like this okay so let's do a debug
15:25 - download to see what this says
15:28 - and let's also make the visual based on
15:30 - this one
15:32 - so let's see if this one is above zero
15:34 - if the dot product is above zero make it
15:36 - green okay let's test so here we are and
15:38 - if i'm on this side it's red and on this
15:40 - side yep it turns green so red green yep
15:43 - it does seem to work and we can see on
15:44 - the console there if we are on this side
15:46 - of the line then we have negative
15:48 - numbers and on this side we get positive
15:49 - numbers and the closer we are to where
15:52 - the actual vector is facing the closer
15:53 - it is to plus one and on the other side
15:55 - would be minus one all right so the
15:57 - logic for this specific corner is
15:59 - already fully working so on the right
16:00 - that is red inside we have green if we
16:03 - are past the vertical line is red then
16:04 - here it is green and on this diagonal if
16:06 - it is on this side red and here green so
16:08 - everything perfectly working now that's
16:10 - left is really just apply the same logic
16:12 - to all the other diagonals so let's do
16:14 - that
16:15 - we just need to do the exact same math
16:16 - around the corners so let me quickly do
16:18 - that
16:41 - all right so here is all the code pretty
16:43 - much just copy pasted the exact same
16:45 - logic
16:46 - the one important thing is over here
16:47 - when applying the rotation to the
16:48 - vectors so again back to this we have
16:50 - this vector we apply minus nine degrees
16:52 - and we end up with this vector
16:54 - so this one is minus nine degrees
16:56 - because unity goes clockwise
16:58 - but then on this one we calculate this
16:59 - vector right here
17:01 - so we have that one and if we get minus
17:03 - 90 degrees then we end up with this one
17:04 - that is not what we want we want this
17:05 - one so that is why on that one we need
17:07 - to apply plus 90.
17:09 - so here on the dot direction for the
17:10 - upper left corner let's put plus 90.
17:13 - then for the lower left corner we've got
17:15 - this vector
17:17 - in order to get this one we are going
17:19 - counter clockwise so this one is minus
17:20 - 90 and then finally for this one
17:23 - in order to get this direction we need
17:24 - plus 90. so the dot here on the left
17:27 - this one is minus 90 and the dot there
17:29 - on the right this one is plus 90.
17:31 - here you can pause the video if you're
17:33 - following along or you can just download
17:34 - the project files link in the
17:35 - description
17:36 - okay so let's test and here we've got
17:38 - the dot product just to make sure
17:39 - everything is working so let's see so
17:41 - here we are and we can see the logs so
17:43 - first the dot upper right corner on the
17:45 - outside we've got minus and over here
17:47 - we've got positive okay now for the dot
17:49 - upper and left so on the upper left over
17:50 - here we've got minus and we got plus
17:52 - then the dot low right over here we have
17:54 - plus and we have minus and the final one
17:57 - over here plus and over here minus see
17:59 - up on the logic is correct so if all of
18:00 - them are positive then we are indeed
18:02 - inside the hex shape alright so here we
18:04 - are now first of all if we are outside
18:06 - on the horizontal here we have red we go
18:08 - inside and we have green then if you go
18:10 - outside through this side yep that is
18:12 - red and if you go above yep red if we
18:14 - have green and over here green go
18:16 - outside and we have red then for
18:18 - diagonals if we are here green and on
18:20 - this side we are red then green red over
18:22 - here green red and green red all right
18:25 - awesome
18:26 - so everything is working on all sides so
18:28 - we can always test if a certain point is
18:30 - inside our hexagon or not with this all
18:32 - of our logic is fully working so this is
18:34 - how you can test if a point is inside a
18:36 - hex using nothing but math so there's no
18:39 - physics no ray casts just some basic
18:40 - math and by learning this you also
18:42 - hopefully leveled up your own math
18:44 - skills just like i did learning how to
18:46 - test if a point was on one side or
18:48 - another side of a certain diagonal line
18:51 - for me as someone with very basic math
18:52 - skills i'm pretty happy that i managed
18:54 - to learn that so here is the code for
18:56 - how to test if a certain point is inside
18:58 - a certain hex shape now like i said the
19:00 - reason why i researched this is because
19:01 - i'm researching how to make a hex grid
19:03 - so i'll be covering that in the next
19:05 - video and after that i will also be
19:07 - taking the results of my research and
19:08 - making a free expansion to my turn-based
19:10 - strategy course converting that game
19:12 - that code base into a hex grid
19:14 - if you don't have the course yet check
19:16 - it out with a link in the description
19:17 - it's a great course it will teach you
19:19 - how to massively improve your
19:20 - programming skills and take you from
19:21 - beginner to advanced
19:22 - and if you already have it then this hex
19:24 - grid update will be a completely free
19:26 - expansion of the course hopefully within
19:28 - next few weeks alright hope that's
19:30 - useful check out these videos to learn
19:31 - some more thanks to these awesome
19:33 - patreon supporters for making these
19:35 - videos possible thank you for watching
19:37 - and i'll see you next time
19:42 - [Music]