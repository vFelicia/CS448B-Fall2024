00:00 - in this video we're going to look at how
00:01 - i made my entry for the mixing game jam
00:04 - 2020.
00:04 - the theme for the jam was mixing genres
00:06 - so i mixed racing
00:07 - and rts the end result is a really
00:09 - interesting design that involves racing
00:11 - base building resources
00:12 - ordering units and so on let's begin
00:20 - okay so let's check out how i made this
00:22 - game it was a 48 hour game jam so
00:24 - everything was fully built from scratch
00:26 - in that time frame
00:27 - the total working time was about 22
00:28 - hours out of those 48
00:30 - in all that time i wrote about 2 000
00:32 - lines of code so it was definitely very
00:34 - intense
00:34 - you can download the complete project
00:36 - files if you want to inspect all the
00:37 - source code for yourself
00:39 - or just go into the etch page to play
00:40 - the game the gm started on a friday at
00:42 - 6pm and the theme was revealed in a
00:44 - video the theme was mixing genres
00:47 - so first of all i started to think what
00:48 - genres could i mix and for research i
00:51 - use the steam text page
00:52 - it's really useful with tons of genres
00:54 - my first thought was actually making a
00:56 - platformer rts i thought that could be
00:58 - an interesting mix
01:00 - but then i remember that i had some car
01:01 - models that i got recently
01:03 - and i hadn't done a racing game before
01:04 - so i went to the racing rts
01:06 - once i settled on the base idea it was
01:08 - time for coming up with the design
01:10 - usually i like to design on paper so
01:12 - that's exactly what i did
01:13 - just grab the piece of paper and start
01:15 - writing so here is my sort of game
01:17 - design document
01:18 - as you can see there's tons of questions
01:20 - and ideas for mechanics i like to ask
01:22 - lots of questions and see where the
01:24 - design takes me
01:25 - since this is a game jam certain things
01:27 - did not end up in the final game like
01:28 - for example
01:29 - the idea for having multiple car types
01:31 - so that could be an interesting addition
01:33 - let me know in the comments if you'd
01:34 - like to see a video on punishing up a
01:36 - game jam game
01:37 - and after some time i had a rough idea
01:39 - of the design that i want to implement
01:41 - so something where the player controls a
01:42 - car he can drive for resources construct
01:44 - some buildings build some units and
01:46 - attack some enemies
01:47 - with that settled i opened up unity in a
01:49 - completely empty project
01:50 - the rules for jam was that the code must
01:52 - be done completely during the jam but
01:54 - assets can be used
01:56 - so i took this opportunity to use a
01:58 - great asset pack that i got from an
01:59 - asset store bundle
02:00 - tons of cars and racing assets which was
02:03 - perfect for the design that i was going
02:04 - for
02:04 - there's a link in the description for
02:06 - the asset packs that i use in case you
02:07 - want to check it out
02:08 - and with that the first task was to get
02:10 - the car actually moving so this was
02:12 - quite tricky
02:13 - the last car game that i made was all
02:15 - the way back when i was still using
02:16 - flash
02:17 - so i've never done a car game or car
02:19 - controller in unity
02:21 - so this is definitely a very interesting
02:22 - new task it's at this point that i
02:24 - thought it was probably a mistake to go
02:26 - for a game jam with a genre that i've
02:28 - never made before
02:29 - since time is limited you should really
02:31 - do things that you already know how to
02:32 - do
02:33 - so it wasn't very smart of me to try a
02:35 - genre that i've never done before
02:36 - but at the same time game jams are all
02:38 - about experimentation and trying out new
02:40 - things so going for something new is
02:42 - also in keeping with the spirit of the
02:44 - game jack
02:44 - it was definitely very tricky to make
02:46 - the car controller i didn't know whether
02:48 - to use physics or not
02:49 - so i had to learn how the wheel collider
02:52 - works which despite the name it really
02:53 - isn't just a collider
02:55 - the wheel collider already has a bunch
02:57 - of suspension and motors
02:59 - so i spent tons of time trying to get
03:00 - that to work learning about the wheel
03:02 - collider how to make it move forward
03:04 - and turn so it's a pretty complex thing
03:06 - so stay tuned for a video on how to make
03:07 - a proper car controller
03:09 - i still need to do some research on that
03:11 - in the end time was running out so i
03:13 - opted to go for a much simpler car
03:15 - controller it's just a rigid body moving
03:17 - forward
03:18 - and rotating very simple the car only
03:20 - works in the exit plane
03:21 - so it never goes up or down never jumps
03:24 - and has no suspension
03:25 - there's no tire sliding no drifting the
03:27 - car has perfect traction
03:28 - so like i said it's not a perfect car
03:30 - controller it's very simple but
03:32 - for the purposes of a game jam it's
03:33 - definitely good enough and that was
03:35 - pretty much all i did in the first night
03:36 - of the gym
03:37 - i made the design and got the basic car
03:39 - controller working and then i went to
03:40 - bed
03:41 - day two i woke up at my usual time nice
03:43 - and early and got to work on the car ai
03:45 - right away
03:46 - this task seemed like it was going to be
03:48 - very difficult but actually turned out
03:49 - to be relatively easy
03:50 - and the main reason why it was easy is
03:52 - because i wrote the generic card driver
03:54 - script in a nice clean way
03:56 - so the ai works on top of that both the
03:58 - player and the ai share the same
03:59 - underlying card driver script
04:01 - the ai simply looks at where it's at
04:03 - where it's going calculates the angle
04:05 - towards the target position
04:06 - and sends commands to the driver to move
04:08 - forward backwards or turn
04:10 - this is also something that i will cover
04:11 - in a detailed video so stay tuned for
04:13 - that with the car working i started
04:15 - making the truck resource gatherer unit
04:17 - again functionally it's the same as the
04:19 - normal car just a different type of ai
04:21 - that works on top of the same car driver
04:23 - script
04:24 - then i made a simple resource node just
04:26 - a position in the world that spawns some
04:28 - prefabs for each resource object
04:30 - the truck finds the closest resource
04:32 - goes to it grabs the resource then looks
04:34 - for the closest outpost building
04:35 - goes to that drops it and repeats so
04:37 - very simple logic
04:38 - then i built the second part of my
04:40 - design which was the track
04:42 - in terms of building it was very simple
04:44 - thanks to the awesome track parts
04:45 - included in the asset pack that i was
04:47 - using
04:47 - again there's a link in the description
04:49 - if you want to check it out i just took
04:51 - all the track pieces enabled snapping
04:53 - and start building an interesting track
04:55 - i even had to make some modifications
04:56 - because one piece did not perfectly
04:58 - connect
04:58 - and i easily made that using pro bundler
05:01 - that's unity's built-in 3d modeling
05:02 - solution which is very easy to use and
05:05 - in a few seconds i had the track piece
05:06 - perfectly connecting with all the rest
05:08 - and at this point i also started live
05:10 - streaming the development
05:11 - so a big thank you for joining me on
05:13 - this first testing live stream
05:15 - i had no idea if it was going to go well
05:17 - or be a disaster but thankfully it ended
05:18 - up quite well
05:19 - i live stream for about two hours which
05:21 - was actually two
05:22 - very productive hours my first task on
05:25 - the live stream was handling the scene
05:26 - machine cameras
05:28 - essentially i wanted an over camera for
05:30 - the world and behind the camera for the
05:31 - track
05:32 - doing that with cinemachine is extremely
05:34 - easy just set up the two cameras and
05:35 - play around priority very simple
05:37 - next up i handle the checkpoint system i
05:40 - also have a dedicated video on this
05:41 - topic so stay tuned
05:43 - it's a pretty simple system just place
05:45 - some objects with trigger colliders and
05:46 - test the other that the player hits them
05:49 - if they hit them in the right order then
05:50 - everything is fine again also very easy
05:52 - to implement
05:53 - then for a quick fix since this is a
05:55 - game jam game where time is of the
05:57 - essence that means there's no time to do
05:59 - a perfect implementation of some systems
06:01 - for example the car ai works great the
06:04 - car goes towards whatever target
06:05 - position i give it
06:07 - but there's no path finding anywhere the
06:08 - car just moves forward then turns to
06:10 - reach a target
06:11 - meaning that if a solid object appears
06:13 - in front of the target it just keeps
06:15 - jamming against it
06:16 - so the simple hotfix that i added was to
06:18 - check if the car was stuck
06:20 - and if so apply a random rotation to it
06:22 - with some rotation then the car is
06:24 - pointing in a random direction
06:25 - which means it can move forward and the
06:27 - turn radius will likely be enough to
06:29 - avoid the obstacle
06:30 - and here i also made a bug live on the
06:32 - stream so that was interesting i forgot
06:33 - to add a timer for the rotation so the
06:35 - car was randomly rotating on every frame
06:37 - so yeah encountering bugs is definitely
06:39 - part of the process it's just a simple
06:41 - fix and everything was working
06:43 - then for making the resource types if
06:45 - you've seen my builder defender course
06:46 - then this section was very
06:48 - familiar using some nice scriptable
06:50 - objects to define all the types and a
06:52 - simple resource manager with a
06:53 - dictionary to keep track of everything
06:55 - then for making the minimap i already
06:57 - covered this in detail in another video
06:59 - it's very simple just add some sprites
07:01 - to each object and put them on a
07:03 - separate layer
07:04 - then make a second camera that just
07:06 - renders that layer
07:07 - make it render onto a texture and
07:08 - display it in the ui very simple
07:11 - also in terms of how i organize the work
07:13 - that i need to do usually i keep my
07:14 - progress on a simple physical to-do list
07:17 - so just a piece of paper placed right
07:19 - next to me here i write whatever tasks i
07:21 - need to do and go ahead and tick the
07:23 - boxes as i do them
07:24 - you can see i have tasks for the
07:26 - building manager making the car ai
07:28 - handling enemies and the minimap and so
07:30 - on then also making some music
07:32 - sound and main menu and lastly submit to
07:34 - itch
07:35 - you also see the specific tasks that i
07:36 - plan to do during the live stream
07:38 - so it's a very simple to-do list and a
07:40 - very simple process and it's great for
07:41 - me for helping to keep track of what
07:43 - needs doing
07:44 - okay so back into the game next it was
07:46 - the building manager
07:48 - again using scriptable objects for all
07:50 - the building definitions
07:51 - according to the design there's the main
07:52 - hq building there's the outpost where
07:55 - the trucks drop resources
07:56 - the shop that makes the vehicles and the
07:58 - fuel station which interacts with the
08:00 - fuel system
08:01 - then for handling the unit types again
08:03 - using scriptable objects
08:05 - there's the cars trucks and enemies next
08:07 - up for handling the construction of
08:09 - units in the shop
08:10 - very easy to do just add a simple timer
08:13 - and after some time it instantiates the
08:14 - prefab
08:15 - super easy to make some cars or trucks
08:17 - or just about anything
08:19 - then for the ui this was a tricky thing
08:21 - the game is meant to be a mix of racing
08:23 - and rts which is an interesting idea
08:25 - but if you think about input usually
08:27 - racing games are heavily controller
08:29 - based
08:30 - whereas rts games are more heavily mouse
08:32 - based switching inputs is always a bad
08:34 - idea
08:35 - so i knew i didn't want the player to
08:36 - require the mouse and since the ui is
08:39 - not mouse based i also didn't want it to
08:40 - be positioned like a normal ui
08:42 - so my solution was making a canvas on
08:44 - top of the player it shows the correct
08:46 - ui based on proximity to the objects
08:48 - and it works on button presses rather
08:50 - than mouse input so it took a while but
08:52 - i'm quite happy with how it came out
08:54 - works well and i think it looks good too
08:56 - then for making the interesting funeral
08:57 - system
08:58 - based on my original design i wasn't
09:00 - sure if i was going to implement some
09:02 - sort of health mechanic
09:03 - i thought adding that would make the
09:05 - game a bit too intense and require macro
09:07 - management which would
09:08 - be bad based on the controls so instead
09:10 - i just added fuel
09:11 - so the cars run around and they spend
09:13 - fuel when they run out of fuel they have
09:15 - to go to a fuel station
09:17 - so functionally it works kind of like
09:18 - health and healing the system is very
09:20 - simple the cars have a float for the
09:22 - fuel amount and when that goes under
09:24 - zero they'll look for the closest fuel
09:25 - station and just go there
09:27 - the hq also works as a fuel station then
09:30 - making the
09:30 - ui for the player to construct some
09:32 - buildings i use the same ui method that
09:35 - i used previously
09:36 - so just a button to toggle on the menu
09:37 - and it calls the building manager to
09:39 - construct the building
09:40 - next up the car ai for finding and
09:42 - attacking enemies
09:43 - i went with a very simple design so this
09:45 - was easy to implement
09:46 - the design is for the player to kill an
09:48 - enemy just by touching
09:50 - so that's a simple collateral trigger on
09:52 - the enemy and for the car i just have to
09:54 - place the move target directly on top of
09:56 - the enemy and that's it and everything
09:57 - works
09:58 - then since the cars could attack the
10:00 - enemies it was time to be able to give
10:01 - them orders
10:03 - for that again handling the interface
10:04 - was a bit tricky the solution i came up
10:07 - with was holding down a button to expand
10:09 - the selection area
10:10 - and when the player lets go it selects
10:12 - all the cars within range
10:13 - then with the selected cars i can press
10:15 - another button to give a move order and
10:17 - tell the cars to go there
10:18 - so with that the player now has control
10:20 - over the unit then for handling the ui
10:23 - for the resources
10:24 - the resource manager was implemented
10:26 - long before this but until this point
10:27 - didn't have visual so just a simple ui
10:29 - visual
10:30 - next up making the enemy spawner this
10:32 - just has some simple logic
10:34 - to constantly spawn enemies up until a
10:36 - total maximum
10:37 - and the spawner itself also has a health
10:39 - system and the cars prioritize the
10:41 - spawner over the enemies
10:42 - so the cars first take down the spawner
10:44 - and then take down all the enemies
10:46 - then i needed some way of showing
10:47 - messages to the player so i made the
10:49 - same thing that i did for the interface
10:51 - just add another world canvas with nice
10:53 - red background and a text object
10:55 - then a simple script to manage that with
10:57 - a nice singleton instance so it can be
10:59 - called from
11:00 - anywhere with that i added the ability
11:02 - to be able to show messages like you're
11:03 - going too far or can't afford something
11:05 - so speaking of affording i then added
11:07 - some resource costs
11:09 - i made a simple class to handle a
11:11 - resource amount it just holds a resource
11:13 - type and an int amount
11:15 - then some basic logic on the resource
11:16 - manager to see if the player can afford
11:18 - it
11:18 - next up finally adding some sort of goal
11:20 - to the game i thought about it for a
11:22 - while and since this is a game jam game
11:24 - i went with the simplest goal
11:25 - possible of just clearing the map so the
11:28 - player wins the game when they destroy
11:29 - all the spawners and all the enemies
11:31 - and with it being a racing game i also
11:33 - added a nice timer
11:34 - eventually i wanted to be able to add an
11:37 - online high score table so you could
11:38 - compete with others to win the game
11:40 - faster but suddenly i didn't have time
11:42 - for that
11:43 - then when the player wins the game they
11:44 - go to a simple windscreen
11:46 - so we just display some stats related to
11:48 - the game and a button to go back into
11:49 - the main menu
11:50 - and speaking of that i then made the
11:52 - main menu very basic just the game name
11:55 - the goals of the game and some buttons
11:57 - then for the final mechanic that i want
11:59 - to add
11:59 - gathering resources from the track this
12:02 - way the player has something to do
12:03 - rather than just waiting around for the
12:05 - trucks all the time
12:06 - i simply added the resources to the
12:08 - checkpoints so as the player goes
12:09 - through a checkpoint it gathers one
12:11 - resource
12:12 - then i just added all the checkpoints to
12:14 - the track just duplicating and placing
12:16 - the same game objects all over
12:18 - next up adding a simple visual for how
12:20 - many units are currently selected
12:22 - and then adding a visual for when the
12:24 - player gives a move order
12:26 - and with that it was pretty much done
12:28 - the game that i built here in such a
12:29 - short amount of time is actually quite a
12:30 - bit complex
12:32 - which means that the one big task
12:33 - remaining was how do i teach the player
12:35 - how to play
12:36 - the solution i came up with was adding a
12:38 - nice pointer that would guide the player
12:40 - throughout the various things that i
12:41 - needed to do
12:42 - so just a simple object placed flat on
12:44 - the ground with some basic math to
12:46 - rotate and point towards the target
12:47 - position
12:48 - with that system in place i simply made
12:50 - a tutorial script that handles
12:52 - all the states that teaches the player
12:53 - how to play so first it points into a
12:56 - resource node and teaches how to
12:57 - teleport onto the track
12:59 - then it teaches you how to play some
13:00 - buildings make some cars and so on
13:02 - so it's a simple system but i think it
13:04 - works well then going into the polish
13:06 - stage
13:07 - up until this point the visuals for the
13:08 - game were really just prototype visuals
13:11 - so i polished up the terrain added some
13:12 - flowers grass and rocks
13:14 - then polishing up the track with some
13:16 - more objects alongside it
13:17 - once again adding all of them from the
13:19 - acid pack that i used which is a link in
13:21 - the description
13:22 - then adding some trees just placing a
13:24 - bunch of prefabs all over
13:26 - then polishing up the enemy spawner with
13:28 - some objects
13:29 - for this one i used another awesome low
13:31 - poly pack with tons of props
13:33 - i'm usually not very good at decorating
13:34 - but i think the final result looks
13:36 - pretty good
13:37 - same thing to polish the hq and
13:39 - polishing the outpost and the fuel
13:40 - station
13:41 - then i made a basic logo took me a while
13:43 - to come up with an interesting name
13:45 - so that's always a very different task
13:48 - with that i started to work on sound and
13:49 - music
13:50 - made some simple music with a program
13:53 - called vasquez oil or however you
13:55 - pronounce it
13:56 - so that's a great free tool for making
13:57 - music then i use another one for making
14:00 - sound effects
14:01 - and just play them with various actions
14:03 - next adding some particles when the
14:04 - enemy dies
14:05 - then some smoke coming from the cars
14:08 - added a simple day night cycle
14:10 - and lastly submitted to itch with just a
14:12 - few minutes left for the deadline
14:14 - with that the final game was made so i'm
14:16 - really pleased with the final result
14:18 - it's an interesting unique design that i
14:20 - think plays pretty well
14:21 - it was a bit too complex and feature
14:23 - rich for a game jam so i didn't really
14:25 - have too much time for polishing
14:27 - but i think all the mechanics work
14:28 - pretty well now i hadn't done a game jam
14:31 - in a long time so this was an
14:32 - interesting experience
14:33 - but at the same time it kind of reminded
14:35 - me of why i don't normally do game jams
14:38 - this was definitely a very stressful
14:39 - non-stop weekend
14:41 - out of the total of 48 hours i worked
14:43 - for about 22
14:44 - in total i wrote about 2 000 lines of
14:46 - code so it was pretty much just non-stop
14:48 - work and sleep
14:50 - i'm happy with the result but it's
14:51 - probably going to be another year before
14:52 - i do another one
14:54 - also one thing that i asked during the
14:55 - live stream was if you would be
14:56 - interested in seeing how i would take a
14:58 - game jam game and punish it to the next
15:00 - level
15:01 - the response was positive so definitely
15:03 - stay tuned for that
15:04 - i think that would make a great video
15:05 - since so many people participate in game
15:07 - jams but then
15:08 - so few people take those ideas and flesh
15:10 - them out into a complete game
15:12 - so make sure you hit the bell icon so
15:13 - you don't miss it alright so that's it
15:15 - like i said you can download the
15:17 - complete project files and inspect all
15:18 - the source code for yourself
15:20 - or just go into the itch page and
15:22 - download the executable 2 plate
15:24 - this video is made possible thanks to
15:26 - these awesome supporters
15:27 - go to patreon.com unitycodemonkey to get
15:30 - some perks and help keep the videos free
15:32 - for everyone
15:33 - if you found this video helpful consider
15:34 - liking and subscribing post any
15:36 - questions you have in the comments and
15:37 - i'll see you next time
15:42 - [Music]