00:00 - hello and welcome I'm your codm so
00:02 - here's a super quick tutorial on how to
00:03 - make an error detector in your game this
00:05 - way every time your game detects an
00:07 - error you can show it to the players so
00:08 - they can know that something went wrong
00:10 - and hopefully they can send you a
00:11 - message so you can fix it my recent game
00:13 - d Gardians is possibly the most complex
00:14 - game that I've ever made all the
00:16 - machines all the dinkies and especially
00:17 - all the offw and logic it's all really
00:19 - complex and because of that complexity
00:21 - there have proba only been quite a few
00:22 - strange bugs that I've really never
00:23 - encounter myself but players are finding
00:25 - so I implement this window to help me
00:27 - debug when something goes wrong this
00:28 - pops up and the player knows that
00:30 - something bad happened so let's see how
00:31 - to build this although again keep in
00:33 - mind this is just an error detector
00:34 - meaning this just detects the errors it
00:36 - only helps to tell your players that
00:38 - something went wrong this does not fix
00:39 - the errors it's up to you as developer
00:41 - to see the stack Trace see the error and
00:43 - figure out how to solve it depending on
00:44 - what the error actually is by the way
00:46 - the game is actually on sale right now
00:48 - so check it out on scam okay so here is
00:50 - my demo I've got a character that I can
00:52 - control and walk around I've got a bunch
00:54 - of characters that I can interact and I
00:55 - can talk to them all really nice and
00:57 - over there I've got a button I can trag
00:59 - and change the col so basally this is
01:01 - the same demo this simple interaction
01:02 - system this is what I covered in detail
01:04 - in a previous video tutorial so I've got
01:05 - all these objects and over there I've
01:07 - got a door I can approach and interact
01:09 - with it and once I do any up there we
01:11 - have we have a nice error the usual n
01:13 - reference exception now over here in the
01:15 - editor this error is really obvious we
01:17 - can really just look at the console and
01:18 - see yep we've got an error the game
01:20 - paused and everything but let's say that
01:22 - this error was left in the build so here
01:23 - I am running the game in a proper build
01:26 - and I go and I do the same thing so I
01:27 - approach the door and I click to
01:28 - interact with it and nope nothing
01:30 - happened so I did the same thing and the
01:32 - same error also happened so as we can
01:34 - see the door did not open but now as a
01:36 - player I have no idea that something
01:38 - went wrong all I know is I pressed the
01:39 - button and literally nothing happened
01:41 - this can lead to a lot of player
01:42 - confusion at least if the player sees
01:44 - that an error happened they can assume
01:45 - something went unintentionally wrong so
01:47 - let's build our nice aor detector window
01:49 - over here in the hierarchy I have my
01:51 - canvas and set up exactly the same way
01:53 - that I always do so overlay scale the
01:55 - screen size meure the height and so on
01:57 - then inside let's create the new empty
01:58 - game object call it the error detector
02:00 - UI let's see over here let's anchor it
02:03 - on the lower right corner something like
02:05 - that so let's Anchor It move it slightly
02:07 - in there then inside let's add the new
02:09 - UI image this will be our background
02:12 - let's tint it something like black let's
02:14 - make this one stretch to occupy the
02:16 - entire size of the parent and now let's
02:17 - actually modify the size of the parent
02:19 - just to get a nice window sort of like
02:20 - this then let's also make a UI let's say
02:23 - text image and let's say this is the
02:25 - error detected let's put the width and
02:28 - height of zero these are just visuals
02:29 - you don't have to follow the exact setup
02:31 - that I'm doing here I'm just setting up
02:32 - the same visuals that I always use so
02:34 - disable wrapping and so on so air
02:36 - detected let me anchor it on the top
02:38 - left corner and make it a bit smaller so
02:40 - an error was detected and then down here
02:42 - let's say the actual error so let's put
02:44 - it quite a bit smaller let's say 18
02:46 - error this one is going to say some kind
02:48 - of error let's Anor it on the left up
02:50 - down and this time we don't want it to
02:52 - actually overflow so let's enable
02:55 - wrapping and for overflow let's put it
02:57 - on ellipses and now we need to make sure
02:59 - to give it it some kind of size so let's
03:01 - give it some kind of size and position
03:03 - it sort of like this so in there just
03:05 - like this basally add the ellipses
03:07 - because some errors are going to be
03:08 - super long and we really don't want it
03:09 - to overflow down here and then just for
03:11 - fun just make it even more clear that
03:13 - this is an error let's duplicate the
03:15 - background this one let's put it in red
03:17 - and put it sort of like this finally one
03:19 - more thing on the background just for
03:21 - fun let's add an outline let's put it in
03:23 - red and let's say five five just like
03:25 - this okay so we have our nice basic AER
03:27 - detector window it is very visible now
03:29 - let's make a script to actually run this
03:31 - so let's make a script with the exact
03:33 - same name so over here in my project
03:34 - files on the eror detector I'm going to
03:36 - create a brand new C script for the aor
03:38 - detector UI let's wait for the code to
03:40 - compile now let's attach to the game
03:42 - object and open okay so now here
03:44 - honestly we really just need to do one
03:45 - extremely simple thing we just need to
03:47 - hook onto an event so for that let's
03:49 - first do a regular private void start
03:51 - and on start we can access application
03:53 - and then there's a nice event called log
03:55 - message received this event gets fired
03:57 - whenever any message happens so let's
03:59 - add a nice listener to this event when
04:01 - this event fires we're going to get a
04:02 - message with our condition the stack
04:05 - trace and then the type of log by the
04:07 - way if you don't know about events at
04:08 - all check out my detailed video on them
04:10 - events are super useful definitely make
04:11 - sure to learn about them and if you want
04:13 - to see them in action as part of a
04:14 - complete Project Check out my free
04:16 - complaint course okay so inside this
04:17 - event we have all kinds of parameters
04:19 - with all of our air data but the main
04:21 - thing we want is over here on the type
04:23 - basically this gets comeb back whenever
04:25 - there's any message including just
04:26 - regular info messages in this case in
04:28 - order to detect an error we want to just
04:30 - check if it's an error or an exception
04:32 - so over here if the type if it equals
04:34 - either we have an error or an exception
04:36 - that's when we want to show so either
04:37 - error or type equals log type. exception
04:40 - if any of these and this is when we want
04:41 - to show this window so for that let's
04:43 - make some basic show and height
04:44 - functions so a private void show and on
04:46 - show we just go into this game object
04:48 - set it to active as true so we're going
04:50 - to show it and on hide we do the same
04:52 - thing and we set this one just into
04:53 - false okay we have these two and on
04:55 - start let's start off with the window
04:57 - hidden then when we have log if the log
04:59 - is an error or an exception if so then
05:01 - let's show our message also one very
05:03 - important thing is since this one is a
05:05 - static event if so that means that this
05:07 - won't really get cleared whenever the
05:08 - scene changes and this UI element is
05:10 - destroyed so if we leave it like this it
05:12 - is going to cause some errors if we
05:13 - reload this scene because it's going to
05:15 - basically destroy this airor detector UI
05:17 - and it's going to spawn another one so
05:19 - then the event will be fired on two of
05:20 - them so anyways that is a big problem so
05:22 - let's make sure to clean up our events
05:24 - and for that since we are subscribing on
05:25 - start we can go private void on Destroy
05:28 - we can listen this one and do exact same
05:30 - thing so on Destroy we unsubscribe by
05:32 - the way here I should say if you want
05:34 - you can also just subscribe on the on
05:36 - enable and unsubscribe on the undisable
05:38 - if you want that is also perfectly valid
05:40 - personally I just like to subscribe on
05:42 - start and if needed unsubscribe on the
05:43 - story okay so here we have this event
05:45 - but obviously this is just showing it is
05:47 - not actually actually setting the text
05:49 - so let's do that let's go up here let's
05:51 - make a serialized field private of type
05:53 - text mesh Pro Yugi this exists inside
05:55 - using the TM Pro let's call it the error
05:58 - text mesh just like this by the way if
06:00 - you don't know why I made this say
06:02 - serialized film private instead of
06:03 - making it public if so then check out my
06:05 - video on that topic it is extremely
06:06 - important so here we have a reference to
06:08 - the text MH Pro and then when we call
06:10 - show let us actually update the text so
06:12 - just go into this one. text and we can
06:14 - just say error let's print out the
06:16 - condition which is the error and then
06:18 - let's print out new line and then the
06:20 - stack Trace okay so just like this the
06:22 - window should automatically show up
06:24 - whenever we have an error and it should
06:26 - update the text to show that error just
06:28 - over here in the editor let's make sure
06:29 - to drag our text mesh so that is this
06:31 - one by the way let's give this a proper
06:33 - name so error text mesh and up here this
06:35 - the title text mesh okay just giving it
06:37 - proper names to make it clear and the
06:39 - background top just to be nice okay so
06:42 - let's drag the a text mesh and let's try
06:44 - okay so here I am playing the game Let's
06:46 - approach the door and let's press the
06:48 - button and there you go we do have our
06:49 - error all right awesome so this is
06:52 - really the absolute Basics it is this
06:53 - simple now let's add a couple more extra
06:55 - helpful features first let's add a
06:57 - simple close button to this window and
06:59 - the air is actually a little bit too big
07:01 - so let's bring this down by quite a bit
07:02 - instead of 18 let's put it on 14 okay
07:04 - now let's make that button so inside the
07:06 - air detector let's just do a simple UI
07:08 - button call this the close button then
07:11 - inside for the text let's put just an X
07:13 - then let's put it something like this
07:15 - and put the text over here in white some
07:18 - like this make it nice and square and
07:20 - position it over there on the top right
07:22 - side so let's anchor it to the top right
07:24 - and put it on some like 30X 30 okay
07:26 - that's a nice tiny close button that's
07:27 - good over here in the editor let's just
07:29 - add another serialized FM this type of
07:31 - type button which exists inside using
07:33 - unityengine.ui this de close button and
07:36 - then over here let's do it on awake
07:38 - because we are initializing this object
07:40 - if you don't know why sometimes use
07:42 - awake and sometimes you start again go
07:43 - check out my free complete course I
07:45 - focus really hard on that course
07:46 - teaching the correct principles
07:48 - including when to use start and when to
07:49 - use awake so in this case in order to
07:51 - initialize the subject let's do it on
07:52 - awake so the close button let's go into
07:54 - the on click let's add a listener event
07:56 - also if you don't know what is this
07:58 - syntax this is a Lambda which is a type
08:00 - of a delegate which is also something
08:01 - that I've covered in detail in a
08:02 - previous video so one click we really
08:04 - just want to hide that's it super simple
08:06 - here in the editor let's just drag the
08:08 - close button and also just for fun let's
08:10 - make this window draggable that is also
08:12 - something that I covered in detail in a
08:13 - previous video tutorial here I've got
08:15 - the script that I made in that video it
08:17 - basically just listens to the on drag
08:19 - event and actually moves this object so
08:20 - over here I really just need to go into
08:22 - the background top that is going to be
08:23 - the clickable area and I'm going to add
08:25 - that component got my drag window and
08:27 - then I just need to assign the transform
08:29 - so that is going to be the parent and
08:31 - the canvas for this one and for one more
08:33 - tiny thing let's also add a copy to
08:35 - clipboard button this is useful so your
08:37 - players don't have to send you
08:38 - screenshots or manually write out the
08:39 - error so let's just duplicate the close
08:41 - button let's put it over here onto this
08:43 - side make it a little bit bigger and
08:45 - inside let's call this the copy to
08:49 - clipboard button and for text copy
08:51 - clipboard make it quite a bit tinier
08:54 - here in the script let's have that
08:55 - button so the copy to clipboard button
08:58 - then in the editor let's go ahead drag
09:00 - that reference and now here let's do the
09:01 - same thing let's add a listener so on
09:03 - click let's add a listener to this click
09:06 - and when we click on it we want to copy
09:07 - the clipboard and for that we can use
09:09 - the guy utility and call the system copy
09:12 - buffer and let's set it to some kind of
09:14 - error text so let's grab the air text
09:16 - mesh and just grab the text exal on
09:18 - there although this can sometimes fail
09:20 - for some kind of strange ways so we
09:22 - should probably put this inside a try
09:24 - catch so catch an exception if we do
09:26 - have an exception then let's log that
09:28 - except ception just do a new exception
09:31 - let's say fail to copy to clipboard and
09:34 - then let's print out the exception okay
09:35 - we're almost ready to test let's just
09:37 - add one more tiny nice element something
09:39 - that I also covered in a previous
09:40 - tutorial video was a nice tool tip so
09:42 - here I've got the same tool tip that I
09:44 - created in that video in order to show
09:45 - it that class is super easy to use so
09:47 - I'm just going to go into the totip
09:49 - canvas in order to show the totip and
09:51 - let's say copy error to clipboard all
09:54 - right great so let's finally test all of
09:56 - this let's test our close button test
09:58 - the copy to clipboard test the window
09:59 - drag and test the tool tip all right so
10:01 - here we are let's trigger the error once
10:03 - again so let's go up here open and close
10:05 - and there we go we have an error
10:06 - detected and now since this case it's
10:08 - first person actually moving the camera
10:10 - as I move the mouse naturally I would
10:11 - need to add some kind of code in order
10:12 - to stop that but if I click and drag yep
10:14 - the drag window that does work correctly
10:16 - and if I click on the copy to clipboard
10:18 - it says copy the error to clipboard so
10:19 - the til tipe also works here I've got an
10:21 - empty notepad and I paste and there you
10:23 - go it did copy the exact code okay great
10:25 - so far so good the only final thing we
10:27 - need to test is the close button and for
10:29 - that there's actually one more feature
10:30 - that we should probably add if we look
10:32 - over here in the console we can see the
10:33 - error is constantly being fired
10:35 - constantly non-stop it just constantly
10:36 - happening so since that is the case if
10:38 - right now if I hide this window as soon
10:40 - as I hide it instantly hides and
10:42 - instantly shows itself that's because
10:43 - the error is constantly happening so
10:45 - maybe you want this just in case you
10:46 - want the player to know that it's also
10:48 - constantly happening but again this can
10:49 - also be confusing for the player they
10:50 - click the X and nothing happens they
10:52 - might not understand that it's actually
10:53 - because it's hiding and showing
10:54 - immediately so for this it's probably
10:56 - better just to show the errow once just
10:58 - once per each unique error so to add
11:00 - that logic it's going to be pretty
11:02 - simple we really just need to keep track
11:03 - of all the errors that we've already
11:04 - seen so for that let's make a simple
11:07 - list so a private list of type string
11:09 - and let's call the ignore error string
11:12 - list so we have a list of all the
11:14 - strings of all the errors that we want
11:15 - to ignore let's begin by initializing
11:17 - our empty list okay great so we have
11:19 - this and then down here when we actually
11:21 - show our error before we do show it
11:24 - let's check if this error is already on
11:26 - the list so if we go through the list
11:28 - and we check does it contain does it
11:30 - contain the error text so let's actually
11:32 - update the error text before so that
11:35 - just updates the text mesh that doesn't
11:36 - actually show the error window so let's
11:38 - sayest if it does contain the error text
11:41 - if so then error already shown if so
11:44 - then let's return we do not want to show
11:45 - it if not then we just need to go into
11:47 - our error list and we need to call add
11:50 - and let's pass in the error text mesh.
11:51 - text now one quick note if for some
11:53 - reason you don't like the fact that this
11:55 - is storing in a list of string
11:56 - containing the entire error text if so
11:58 - if you wanted to compact this you could
12:00 - just compute a hash and sort that
12:01 - instead but really just soring the
12:03 - entire a text ring that works perfectly
12:04 - fine so this shouldn't really be working
12:06 - and before we test let's actually test
12:08 - out with a bunch more errors so let's do
12:10 - a simple input test just to generate
12:12 - some errors so over here on the pl
12:13 - interact script this script is the one
12:15 - that handles the basic interractions so
12:17 - over here let's add some more tests so
12:20 - get key down let's save our T key and on
12:23 - this one let's do a float error and
12:25 - let's just divide one by zero this is
12:27 - going to throw an error and let's do
12:28 - another one let's say on the key y on
12:30 - this one let's call instantiate and pass
12:32 - in null both these should throw an error
12:35 - okay so let's try this out all right
12:36 - here we are and if we go ahead and try
12:38 - interacting with the door and there it
12:40 - is error detected okay there's a nice
12:42 - error now if I go ahead and I click on
12:44 - the X and if there you go the error does
12:46 - disappear so it no longer shows even
12:48 - though if we look in the console we can
12:49 - see yep the error is definitely still
12:51 - happening so it is still triggering but
12:52 - since the error is being ignored it is
12:54 - no longer popping up that window okay
12:55 - great okay so now if I press the T key
12:58 - and if there we go we've we got a
12:59 - separate different error this one did
13:00 - show up because it is the different
13:02 - error and now I close this one and I
13:04 - press T again and nope it does not show
13:06 - because again we are now ignoring that
13:07 - error and finally I press on Y and again
13:09 - another different error and it does show
13:11 - up all right awesome so if you want to
13:13 - see this window in action then check out
13:15 - my game on seam although honestly
13:17 - hopefully you won't see it because
13:18 - hopefully there shouldn't be any errors
13:20 - but if there are then at least the
13:21 - player will know that something went
13:22 - wrong now one extremely useful tool
13:24 - related to this one is cloud Diagnostics
13:26 - this is a super useful Unity tool where
13:28 - you really just need to press one button
13:29 - to enable and suddenly you will
13:31 - automatically be receiving notifications
13:33 - whenever a player encounters an error
13:34 - this is insanely useful for me as a
13:36 - developer to know when something went
13:38 - wrong so I can see the stack Trace now I
13:39 - can look at this and figure out how to
13:41 - solve this bug if you're looking for a
13:42 - more detailed tutorial on this toel I
13:44 - just had a lecture on it in my ultimate
13:46 - unity overview course in the latest free
13:47 - update there's also a lecture On a
13:49 - related tool for enabling user reports
13:51 - in your game for example you could
13:53 - combine that one with this error
13:54 - detector to send an automated report
13:56 - whenever an error is detected all right
13:57 - so that's the error Det detector it's a
13:59 - pretty simple thing that you should
14:00 - definitely add to your games especially
14:02 - on complex logic games kind of like my
14:04 - own so that way if something goes wrong
14:06 - at least your players will know that
14:07 - something went wrong then hopefully your
14:09 - players will report the error to you so
14:10 - you can fix it so that hopefully your
14:12 - game gets to a point where no one will
14:14 - ever see this window ever again by the
14:16 - way the game is actually on sale right
14:17 - now so check it out on Steam all right
14:19 - hope that's useful check out these
14:21 - videos to learn some more thanks to
14:23 - these awesome patreon supporters for
14:24 - making these videos possible thank you
14:26 - for watching and I'll see you next time
14:32 - [Music]