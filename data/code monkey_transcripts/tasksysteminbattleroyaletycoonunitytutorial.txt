00:00 - hello and welcome I am your code monkey
00:01 - and in this video we are going to check
00:03 - out the inner workings of the task
00:04 - system in battle royale tycoon let's
00:06 - begin
00:09 - so in the game most actions are set up
00:12 - as tasks like in here when the arena
00:15 - ends multiple tasks are created that say
00:18 - for example this area needs to be
00:20 - cleaned
00:20 - then these workers as the task system
00:22 - for a new task and execute it the system
00:25 - supports multiple task types so for an
00:27 - arena cleanup tasks the worker goes to a
00:30 - target position executes an animation
00:32 - and cleans up the floor for the item
00:35 - cleanup task the worker goes to a used
00:38 - item grabs the item and takes it to the
00:41 - item slot and finally drops it this
00:45 - whole thing is a good example of the
00:47 - tasks system in action the game is stone
00:50 - development so if you like the concept
00:52 - go to the same page add it to your
00:53 - wishlist and phone so to start off I
00:56 - have an empty class in here named CM
00:58 - task system I'm simply using the CM
01:01 - prefix to avoid naming conflict since
01:03 - I'm doing this in the game's actual
01:04 - codebase so let's begin by creating the
01:07 - basic structure of the task system so
01:09 - inside our task system class let's make
01:12 - a subclass called task only class time
01:15 - this sub class is what won't contain the
01:18 - information related to the task for now
01:20 - let's just leave it as empty so let's
01:22 - make the task system constructor and
01:27 - when we construct the task system we
01:29 - need to initialize a list of tasks so a
01:32 - private list of tasks called task list
01:35 - and we're going to initialize this in
01:37 - here ok now we need a function to
01:41 - request the next task so let's make a
01:43 - public task request next task so this
01:48 - function is called by a worker so worker
01:51 - requesting a task and in here we're
01:54 - certainly going to check if task list
01:57 - dot count if it is bigger than zero that
02:00 - means we have a task so let's simply
02:03 - return the first task on the task list
02:05 - so return test list of zero if we do not
02:09 - have any tasks then no tasks are
02:12 - available and we're simply going to
02:15 - return no so in here before we return
02:18 - the first task we need to also remove it
02:20 - from the list essentially when we were
02:23 - turn the tasks we assume that whoever
02:24 - asked for it will execute it so in here
02:27 - let's store a task reference for the
02:30 - task list of zero then we go into the
02:33 - task list and remove at the position
02:36 - zero and then finally we return the task
02:39 - so here give worker the first task all
02:44 - right so we now have the function to
02:45 - request a task now let's add another
02:48 - function for adding a task so a public
02:51 - boy at task and in here we're going to
02:54 - receive a task object as an argument and
02:57 - we're simply going to add it to our task
02:59 - list all right so the basic task system
03:02 - is now set we can add and request tasks
03:05 - so now let's go into the game handler
03:07 - which is simply a script executing on
03:10 - start in here let's first create a new
03:13 - task system called
03:14 - system new task system now let's do some
03:19 - testing to make sure everything is
03:20 - working perfectly so first we're going
03:22 - to do a debug log of the task system dot
03:26 - request next task so this should return
03:29 - known since for starters the task system
03:31 - doesn't have any tasks then we're going
03:34 - to add a new task so create a task
03:38 - system dot task task equals new task and
03:42 - we're going to go into the task system
03:44 - and add this task then finally we're
03:48 - going to do another debug log which
03:50 - should return this task and then finally
03:53 - do another one which should return no so
03:56 - this one should print no this should
04:01 - print the task and this one should print
04:04 - no all right let's make sure all of this
04:08 - is correct all right as you can see in
04:10 - the log everything is correct
04:12 - first one return no since we had no
04:14 - tasks then we add the new task and
04:17 - correctly grabbed it and finally the
04:19 - task system returned no since there are
04:20 - no more tasks ok so now let's make the
04:23 - worker so let's make a new c-sharp
04:26 - script and I'm going to
04:27 - name its iam worker tasks AI okay so now
04:31 - inside let's first make a setup function
04:34 - so public void setup and we need this
04:37 - function so we can pass in the worker
04:39 - object object is of type CM I worker
04:43 - worker
04:43 - so let's store this internally this
04:49 - worker object implements this interface
04:51 - in here which contains all the functions
04:53 - we need for our task system right now
04:55 - all we need is the move function in here
04:57 - which moves the worker towards a target
05:00 - position and triggers an action when he
05:02 - arrives there okay so now on the worker
05:05 - tasks let's start off by making some
05:07 - basic states so appear make a protein
05:10 - own called state and for the possible
05:14 - states we can be waiting for next task
05:18 - or executing tap and let's store a state
05:23 - for our state and for starters we're
05:27 - going to start off as waiting for next
05:30 - task
05:30 - so in here let's make a private void
05:32 - update and on the update we're going to
05:35 - do a switch on our state and case we are
05:40 - waiting for the next task in here let's
05:43 - just wait for a timer so we're going to
05:46 - go up here and make a private float
05:48 - waiting timer and in here we're going to
05:53 - reduce the waiting time or by time time
05:55 - and if the timer is under zero then we
05:59 - are going to request a new task so
06:02 - request next task let's make that
06:07 - function down here private Boyd request
06:09 - next task and then here once we request
06:12 - the next task then set the waiting timer
06:14 - back to a certain amount so let's make
06:17 - up here a float waiting timer Max and
06:20 - let's say point to I so he's gonna try
06:22 - to grab a new task every 200
06:25 - milliseconds okay so the only purpose
06:28 - for this state is for the worker to wait
06:31 - a bit before asking for our next task
06:33 - since it doesn't make sense to ask for a
06:35 - new task every single update so in here
06:38 - he is waiting
06:40 - to request a new time so when we request
06:46 - the next task just to make sure that
06:47 - this function is being called let's
06:49 - spawn a pop up in here now in order to
06:52 - spawn a pop up I'm going to use the code
06:54 - monkey utilities which is always you can
06:56 - grab for free from unity code monkey
06:57 - comm so I'm going to go in there and
07:00 - spawn a text pop up on the mouse
07:02 - position and just say request next task
07:05 - okay this is just so we can visually see
07:07 - when this function is called alright so
07:10 - now that the worker tasking is set up
07:13 - let's go back in the game Handler and in
07:15 - here we want to spawn a new worker so we
07:18 - can remove all of this for now leave the
07:21 - task system initialized and let's spawn
07:24 - a new worker okay so in here I am
07:36 - creating a new worker object which
07:38 - handles the visual and movement of the
07:41 - worker I'm adding the worker tasks AI to
07:43 - that worker and then finally setting it
07:46 - up with this worker object alright so
07:48 - let's test and see if our worker is
07:50 - visible yep there's the worker and as
07:52 - you can see he is requesting a new task
07:55 - every 200 milliseconds so now that we
07:58 - have the worker periodically requesting
08:00 - for a task let's add the ability to
08:02 - execute a given task so let's go into
08:06 - our tasks system in here on our task
08:09 - which is currently empty we're going to
08:11 - add a field in here a public vector 3
08:14 - and call it target position so
08:18 - essentially the goal of this task is for
08:20 - the worker to go to a certain position
08:22 - this task object is meant to contain all
08:24 - the information that the worker needs to
08:26 - complete the task which in this case
08:28 - means he only needs the target position
08:29 - so that's the task object now on the
08:33 - worker so in here when we are requesting
08:36 - a next task we have to ask the task
08:38 - system so on our setup after we will
08:41 - receive the worker let's also receive a
08:43 - task system now we're going to store it
08:46 - in here and on request next task we are
08:51 - going to go into the tasks
08:52 - system and request the next task we're
08:55 - going to store the task system dot task
08:58 - task won't be stored in here so now in
09:02 - here we need to handle that task so if
09:04 - the task that was returned is no that
09:07 - means the task system currently has no
09:09 - tasks available so we should wait and
09:12 - request again later
09:13 - so in here let's set the state to our
09:16 - state dot waiting for next task and do
09:18 - nothing else so 200 milliseconds later
09:21 - he's gonna ask for another task when he
09:23 - asks again he if he does get a task
09:26 - let's make a function to execute the
09:28 - task as if you task and we're going to
09:32 - give it the task so let's go down here
09:33 - make a private void execute task and
09:37 - we're going to receive a task system
09:40 - task as an argument so here let's start
09:43 - off by making a pop up and say execute
09:47 - task and for this task all we want is to
09:50 - move the worker to a specific position
09:51 - and that position is stored in here in
09:54 - the task object so I'm going to go into
09:57 - the worker object which has the move to
09:59 - function that we saw previously and
10:01 - we're going to move him towards the task
10:03 - dot target position now when he gets
10:06 - there he's going to execute this action
10:08 - in here and the action will simply be
10:10 - reset the state back to waiting for the
10:13 - next task and appear on our switch case
10:16 - we our state that executing the task
10:18 - then we are similarly going to do
10:20 - nothing alright so as you can see on the
10:22 - setup we are receiving the task system
10:23 - and storing it internally we are
10:26 - requesting a new task every 200
10:28 - milliseconds when we request a task we
10:30 - ask the task system for the task if he
10:33 - returns a notice that means there is no
10:35 - task available so we keep the state
10:38 - waiting for the next task and we wait
10:40 - 200 milliseconds before asking me again
10:42 - if it does receive something then we're
10:44 - going to execute that task in this case
10:46 - our task is simply to move in towards a
10:48 - target position so the worker moves
10:50 - towards that target position when he
10:52 - gets there he executes this action which
10:54 - puts him back again waiting for the next
10:57 - time so we need is in here state equal
11:00 - state at executing the task just to make
11:03 - sure that when he's executing he's not
11:05 - okay so that's the worker tasking I now
11:08 - let's go in our game Handler and first
11:10 - on the setup let's give it the task
11:12 - system as well and now in here and let's
11:15 - add a task after some time so I'm going
11:18 - to use the function timer which is part
11:20 - of the code monkey utilities it simply
11:22 - execute an action after some time so I'm
11:25 - going to create and in here it won't
11:28 - trigger this action and the action we
11:31 - want is to spawn a new task so let's go
11:34 - into the task system dot add a new task
11:37 - and now the task that we want let's
11:40 - create that task in here and it won't
11:44 - simply be a new task which has a target
11:46 - position of let's say 550 500 and then
11:51 - we have that task to the task system and
11:53 - let's do a cm debug dot text pop up just
11:58 - say task Abbott and we're going to
12:01 - execute this after five seconds okay so
12:04 - essentially the worker should be
12:06 - requesting a task and five seconds later
12:08 - a task won't be added he won't grab that
12:11 - task execute a task and move towards
12:13 - this position so let's see if it's
12:15 - working perfectly all right there's the
12:17 - worker he's requesting tasks and getting
12:19 - nothing and now suddenly a task was
12:22 - added he's executing he goes there and
12:23 - now again he's requesting new tasks all
12:26 - right great exactly the behavior that we
12:28 - want okay so now let's go in our game
12:31 - handler in here and simply add tasks on
12:33 - mouse click so I'm going to go up here
12:35 - make a private boy update inside if
12:38 - input get mouse button down of mouse
12:41 - button zero which is the left mouse
12:43 - button so if we press the left mouse
12:45 - button let's spawn a task to send them
12:49 - to move towards the mouse position I'm
12:51 - going to go into the utils class and get
12:54 - the mouse world position and let's
12:57 - comment this out and like that
13:02 - all right so every time we click we
13:05 - should spawn a new task and then the
13:07 - worker will move towards the mouse
13:08 - position all right there's a worker he
13:11 - is constantly requesting for a new task
13:13 - and now if I go up here and I click it
13:15 - won't add a task and he should move
13:18 - there click and yep he grabbed tests now
13:21 - he's going there and again he's
13:23 - requesting click he goes he waits and
13:26 - requests ok great I can also click
13:29 - multiple times which won't queue up the
13:30 - task so let's say you go here then go
13:33 - here and here and he goes execute snowin
13:35 - request another execute stops request
13:38 - execute and here it stops and constantly
13:41 - requests ok great
13:43 - all right so now the way we set up the
13:44 - task system allows multiple workers with
13:47 - no extra effort so let's go in our Kim
13:49 - Hanul in here and spawn another worker
13:54 - all right so as you can see I have two
13:57 - workers in here both of them are waiting
13:59 - for a task and when I click I spawn a
14:03 - task this one got the task he moved
14:05 - there and now he's waiting again the
14:08 - other one is still waiting
14:09 - I can spawn two tasks that one grabs now
14:11 - go and down grabs and they both execute
14:14 - the tasks sequentially so I can click
14:17 - multiple times and as you can see they
14:19 - get executed sequentially a worker grabs
14:22 - the task from the task system and
14:24 - executes it so there you have it we
14:26 - created a task system where we can add
14:28 - tasks and the workers periodically
14:30 - request a task and execute it if
14:32 - available in the next video we're going
14:34 - to cover multiple task types again the
14:37 - game is still in development so if you
14:39 - like the concept you're the same page
14:40 - add it to your wish list and phone as
14:42 - always you can download the project
14:44 - files in utilities from Unity code
14:46 - monkey comm if you have any questions
14:48 - post them in the comments and I'll do my
14:50 - best answer subscribe for more videos
14:52 - and I'll see you next time