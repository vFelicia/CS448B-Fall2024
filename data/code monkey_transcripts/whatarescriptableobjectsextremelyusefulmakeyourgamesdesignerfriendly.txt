00:00 - in this video we're going to look at
00:01 - scriptable objects in unity
00:03 - these are objects you can create in your
00:05 - project files that can be used to store
00:07 - any kind of data and make your game more
00:08 - designer friendly extremely useful for
00:10 - storing level data
00:12 - enemy data weapon data and just about
00:14 - anything we're going to learn how they
00:15 - work and then later we're going to apply
00:17 - them to systems we made previously
00:19 - like the crafting system let's begin
00:23 - [Music]
00:28 - hello and welcome i'm your code monkey
00:30 - and this channel is all about helping
00:32 - you
00:32 - learn how to make your own games with
00:34 - in-depth tutorials made by a
00:35 - professional indie game developer
00:36 - so if you find the video helpful
00:38 - consider subscribing okay so scriptable
00:40 - objects are an excellent feature that
00:42 - makes your game much more designer
00:43 - friendly
00:44 - essentially they are simply containers
00:46 - of data you define the various fields
00:48 - you want your object to have
00:49 - then you create the instances of that
00:51 - object in your project files and set
00:52 - those fields to whatever you want
00:55 - the key point is you define and store
00:57 - all that data in discrete objects in
00:58 - your project files
01:00 - rather than having all of that written
01:01 - directly in the code
01:03 - if you want to make your game more
01:04 - designer friendly then scriptable
01:06 - objects are the way to go
01:07 - okay so here we're going to learn the
01:09 - basics on how to define and create
01:11 - scriptable
01:11 - objects and then later on we're going to
01:13 - take what we learned here and apply it
01:15 - to the crafting system that we made
01:16 - previously
01:17 - so the items will be defined as
01:19 - scriptable objects as well as the
01:20 - crafting recipes
01:22 - this video is made possible thanks to
01:23 - these awesome supporters
01:25 - go to patreon.com unitycodemonkey to get
01:27 - some perks and help keep the videos free
01:29 - for everyone
01:30 - alright so in here let's make a very
01:32 - simple scriptable object
01:34 - now down here in our project files let's
01:35 - create a new c-sharp script
01:37 - call this our test scriptable object
01:41 - and let's open it okay now here we have
01:43 - our default unity code
01:45 - now the first thing we do is let's get
01:47 - rid of all these methods
01:49 - and in here instead of extending mono
01:51 - behavior we're going to extend
01:53 - scriptable object and just like this we
01:56 - already have a class that we can use as
01:57 - a scriptable object
01:59 - now like i said they are containers of
02:01 - data and how you define whatever that
02:03 - you want to store is by defining some
02:04 - fields
02:05 - so in here let's define a public string
02:08 - call it my string
02:11 - okay now we have a scriptable object
02:13 - with a simple string field
02:14 - now let's see how we can create an
02:16 - instance of our scriptable object
02:18 - now to do that we go up here to our
02:20 - class definition
02:21 - and we're going to add the attribute
02:23 - create asset menu
02:25 - then we have three optional parameters
02:28 - so first of all let's define the file
02:29 - name
02:30 - so this is going to be the default file
02:32 - name whenever we create an object
02:34 - so in this case let's just call it the
02:35 - same name so test scriptable
02:37 - object then we have the menu name
02:41 - so this is where it will show up on the
02:43 - create asset menu
02:45 - so in this case let's create a
02:47 - scriptable objects folder
02:49 - so you create a folder by simply putting
02:50 - a forward slash at the end
02:52 - and then let's call its test scriptable
02:55 - object
02:56 - and lastly if you want you can add the
02:58 - order attribute or it doesn't matter so
03:00 - let's just ignore that one alright so
03:02 - that's it
03:03 - over here we have the most basic
03:05 - scriptable object definition possible
03:07 - we just extend scriptable object we
03:09 - define our fields
03:10 - and we add the create asset menu
03:12 - attribute and now if we go back into the
03:14 - editor
03:15 - now in here on our assets folder i can
03:17 - right click
03:18 - go into create and yep over here we see
03:21 - scriptable objects our very nice folder
03:23 - and inside we can create a test
03:24 - scriptable object
03:26 - so just click on it and yep it starts
03:28 - off with our default name
03:30 - and for now yep just leave it named like
03:32 - that all right so here we have our
03:34 - scriptable object
03:35 - and we can see all the fields that we
03:37 - defined so in this case you see simple
03:38 - string
03:39 - so in here let's just write some text
03:41 - all right there it is
03:42 - and now this scriptable object has been
03:44 - saved with this data
03:46 - okay now let's see how we can use this
03:48 - all right so in here let's create a new
03:50 - c sharp script
03:51 - call this just testing let's create an
03:54 - object to run it
03:57 - and drag the script okay now here let's
04:00 - start off by adding a field for our
04:01 - scriptable object type
04:03 - so we're going to make it a serialized
04:04 - field so we can set it in the editor
04:06 - let's make it a private of type test
04:08 - scriptable object
04:11 - and then on the private void start let's
04:13 - simply do a debug log on the test
04:15 - scriptable object
04:16 - and we access my string all right so
04:18 - there it is very simple
04:20 - now back in the editor yep over here we
04:22 - have a field of type test scriptable
04:24 - object
04:25 - so we can drag our specific scriptable
04:27 - object yep
04:28 - and let's try and yep over here we can
04:31 - see our very nice message
04:32 - so we access the scriptable object and
04:34 - grab the data from it
04:36 - so now to see how this is useful we can
04:38 - duplicate this script more object
04:40 - so we make a second scriptable object
04:44 - and over here we give it a different
04:45 - string
04:50 - all right and now go back into our
04:52 - testing script and then just use this
04:54 - scriptable object instead
04:56 - and if we run if there you go now we
04:58 - have the different message
05:00 - so we have two different scriptable
05:02 - objects each with their own instance of
05:03 - data
05:04 - and then we have our script which works
05:05 - with that scriptable object type
05:07 - all right awesome so here we can see the
05:09 - most basic usage of scriptable objects
05:12 - we define our object with whatever
05:13 - fields we want so here for example we
05:16 - have a simple string
05:17 - but we could add for example let's say a
05:19 - public end for an end field
05:21 - then we can also for example add a
05:23 - sprite array
05:26 - so we can add whatever films we want to
05:27 - store whatever that we
05:29 - require and if we look in the editor and
05:31 - select our scriptable object yep there
05:33 - you go here we have all of our fields
05:34 - and we can set them to anything
05:36 - so for example on this one i can set two
05:39 - elements on this array and then on this
05:40 - second one i can select five elements
05:43 - so yep there you go each of them has the
05:44 - same format but different data
05:47 - so we can create as many instances of
05:48 - this type of object as we want in order
05:50 - to store whatever that we
05:52 - need so just like this you can already
05:54 - imagine the possibilities
05:55 - so for example if you have an item you
05:58 - would have a string for the item name
06:00 - then you would have a sprite film for
06:01 - the visual and so on
06:03 - another example is if you had a grid
06:05 - system like the one we made previously
06:07 - you could use a scriptable object to
06:08 - define the size of the grid and all of
06:10 - its attributes
06:11 - so you can see how they are extremely
06:12 - versatile now one key thing about
06:15 - scriptable objects
06:16 - is the difference between how data
06:17 - persists in the editor or in a build
06:20 - while you're running in the editor any
06:22 - changes you make to descriptable object
06:24 - won't be saved on the actual asset
06:26 - so if you're running the game and you
06:28 - have a scriptable object for the player
06:30 - max health
06:30 - and you change that the new value won't
06:32 - be saved to the asset and won't be used
06:34 - the next time that you hit play
06:36 - however when playing on a build the
06:38 - changes are not persistent
06:40 - so if you modify the scriptable object
06:42 - while playing the build and close and
06:43 - reopen it again
06:44 - it will go back to the original value so
06:47 - whatever value you set on the scriptable
06:49 - object when you made the build
06:50 - will always be the starting value when
06:52 - you actually open the game
06:54 - and since you can edit them and save the
06:55 - changes while working in the editor
06:57 - another usage for scriptable object is
06:59 - for building editor tools
07:01 - now another important thing about
07:02 - scriptable objects is related to the
07:04 - type of object they are
07:06 - scriptable objects work as references so
07:09 - over here we have our testing script
07:11 - and we have a field for our scriptable
07:13 - object
07:14 - so when we set it over here in the
07:15 - editor what it gets is a reference to
07:18 - descriptable object instead of a copy of
07:20 - that data
07:21 - so this has several implications now it
07:23 - means that these scriptable objects can
07:25 - help you reduce the memory footprint of
07:26 - your game
07:27 - so for example if you have a prefab for
07:29 - each enemy and they contain lots of data
07:31 - in their weapon
07:32 - if you instantiate that prefab it will
07:34 - constantly duplicate the data for that
07:36 - weapon
07:37 - however if that weapon data is stored as
07:39 - a scriptable object
07:41 - then in terms of memory when you
07:42 - instantiate an enemy it will simply have
07:44 - a reference to the scriptable object
07:46 - so it ends up with no duplicate in
07:48 - memory when you have a game with lots of
07:50 - enemies and memory issues this can turn
07:51 - into huge savings
07:53 - alright so again here we just saw the
07:55 - basics so this is just one example
07:57 - scriptable objects can be used for just
07:58 - about anything in fact you've almost
08:00 - certainly used scriptable object without
08:02 - even knowing it
08:03 - like i said they can be used for
08:04 - building editor tools and many unity
08:07 - features and editor tools use scriptable
08:09 - objects to handle their data
08:11 - so for example one of the things is the
08:12 - universal render pipeline asset
08:14 - so this is one example of a scriptable
08:16 - object and everything here is made with
08:19 - a custom editor
08:20 - another example is over here a
08:21 - post-processing profile which once again
08:24 - all this data is stored using a
08:25 - scriptable
08:26 - object so you can see how even without
08:28 - knowing about scriptural objects you've
08:29 - already used them
08:30 - so if you're making your own custom
08:32 - tools you can use cryptomol objects
08:34 - combined with custom editors to manage
08:35 - whatever data you need to save
08:37 - alright so that's the basics now in the
08:40 - next video we're going to apply what we
08:41 - learned here and modify our previously
08:43 - made
08:43 - inventory and crafting systems to work
08:45 - with scriptable objects
08:47 - so we're going to create some really
08:48 - nice designer friendly objects to create
08:50 - each item and each recipe
08:52 - so go ahead and hit the bell icon to be
08:54 - notified when that video comes out which
08:55 - should be soon
08:56 - if you found this video helpful consider
08:58 - liking and subscribing this video is
09:00 - made possible thanks to these awesome
09:01 - supporters
09:02 - go to patreon.com unitycodemonkey to get
09:05 - some perks and help keep the videos free
09:07 - for everyone
09:08 - as always you can download the project
09:09 - files and utilities from
09:10 - unitycodemonkey.com
09:11 - subscribe to the channel for more unt
09:13 - tutorials post any question comments and
09:15 - i'll see you next time