00:00 - hello and welcome i'm your code monkey
00:02 - and here let's learn how to make a
00:03 - simple zoom shader so it zooms on the
00:05 - area just behind the object now i was
00:08 - actually researching this topic in order
00:09 - to make a video to teach you multiple
00:11 - ways on how you can make a zoomable
00:13 - reference scope i thought this method
00:15 - would be quite easy but as it turns out
00:17 - there's one extremely tricky part of
00:19 - this effect that took me a couple of
00:20 - hours to figure out so i'm making this
00:22 - video separate just in case someone is
00:24 - searching exactly for this effect and
00:26 - then stay tuned for the riflescope video
00:28 - coming soon alright so here i've got my
00:30 - demo scene i have it set up using just
00:32 - urp these assets are from the cintiq
00:35 - battle rail and the city pack there's
00:37 - links in the description if you want to
00:38 - get it so just a very basic demo scene
00:40 - over here i've got a simple sphere right
00:42 - in front of the camera and i've got a
00:44 - script just placing it along with the
00:45 - mouse so as i move the mouse i'm moving
00:47 - the sphere so that's it very simple
00:49 - now the goal is for the sphere to work
00:51 - as the zoom area so if i put the sphere
00:54 - up there on top of that building i want
00:55 - to zoom in on that building okay let's
00:58 - begin by making our shadow graph so
01:00 - let's create let's go into shader go
01:02 - into urp and we're going to want to make
01:05 - a new unlit shadow graph
01:07 - let's call the zoom shader
01:10 - okay here's the empty shader now the
01:12 - most important thing for this effect is
01:13 - getting the colors behind the object
01:16 - and for that you can use the same color
01:18 - node
01:20 - so if we just put this and we connect
01:22 - this directly into the base color and as
01:24 - always when working with shadowgraph
01:25 - make sure you hit on save ascent
01:28 - and just create a material
01:30 - and just apply this material onto the
01:32 - sphere
01:33 - and just like this now we actually see
01:34 - the very first issue that i encountered
01:36 - so it kind of works but as you can see
01:38 - it's extremely buggy look at that it's
01:40 - kind of seeing behind it but it kind of
01:42 - stays behind it doesn't update all the
01:44 - time so it's a bit weird
01:46 - so this one also took me quite a while
01:48 - to figure out but this one is pretty
01:50 - simple just on the graph inspector going
01:52 - to the graph settings and over here just
01:54 - on the surface instead of making it
01:55 - opaque make it transparent so just hit
01:57 - on save asset and yep there you go now
01:59 - it works perfectly so now you can't see
02:00 - anything about the sphere because the
02:02 - entire sphere is being tinted with the
02:03 - exact same colors behind it so right now
02:06 - we've got a completely see-through
02:07 - sphere which means that with just this
02:09 - we already have the colors behind the
02:11 - sphere now all we need to do is just
02:13 - zoom in on those colors
02:15 - so the way that we can do that is by
02:16 - adding a telling and offset node
02:18 - this one outputs a uv input which is
02:21 - going to be our input on the scene color
02:23 - and if we just put it like this we get
02:24 - this very weird effect so now we want
02:27 - next thing we need is over here the
02:28 - input on the italian offset so the input
02:30 - uv and that one we want that to be the
02:33 - position on the screen so we can get
02:34 - that with the node screen position
02:37 - so this gives our uv and this one is
02:39 - going to be our input so if we hit on
02:41 - save
02:42 - yep there you go now we're back into
02:43 - normal so we're just doing a commonly
02:45 - see through sphere
02:47 - now the next thing that we can play
02:48 - around is over here with the telling
02:50 - node
02:50 - so if we put it on one one then we get
02:52 - the exact normal scale now if we put it
02:55 - at more than one say 1.1
02:57 - and hit on save and yep now that one is
02:59 - 10 smaller
03:01 - so if we go above one then essentially
03:03 - we're zooming out and if we go below one
03:06 - so let's say 0.9
03:08 - then with this we are essentially
03:09 - zooming in if i put at 0.5 to make it a
03:12 - lot more intense here we can see yep it
03:14 - is indeed being quite a bit more zoomed
03:16 - in so let's make a property so we can
03:18 - easily modify this so just on the
03:20 - blackboard let's add a new one let's
03:22 - make it a simple float for the zoom
03:23 - amount
03:24 - then let's give it a proper name so
03:26 - underscore zoom amount
03:28 - and for the mode let's make it a slider
03:30 - going from let's say just point one to a
03:32 - maximum of one
03:34 - and you just connect this one into the
03:35 - tally node okay so with this if we now
03:37 - look in the shader we've got our nice
03:39 - slider something like that as you can
03:40 - see as that one goes down it is indeed
03:42 - zooming in
03:43 - now that doesn't make much sense as the
03:45 - zoom amount goes down it's zooming in so
03:46 - it makes more sense if it's inverting so
03:48 - let's do that
03:49 - so just here just add a one minus node
03:52 - very simple just connect this one so
03:53 - this one pretty much inverted so with
03:56 - this yep if we bring it down actually
03:58 - let's make the minimum at zero so if we
04:00 - bring it down to zero then we've got our
04:01 - normal see-through sphere and as we
04:03 - increase yep we are indeed zooming in
04:05 - all right so far so good
04:07 - however here is the part that took me
04:09 - quite a long time to figure out as i
04:11 - increase the zoom you can see that it's
04:12 - not really zooming in directly
04:14 - it is zooming in but it's zooming in
04:16 - like from the corner so the image is
04:18 - essentially being stretched from the
04:19 - corner so as if you were in photoshop
04:21 - and you grabbed on this corner and
04:23 - increased the size so it does zoom in
04:25 - but it is not zooming in directly on top
04:27 - of it so in here as i zoom in you would
04:29 - expect this area to be zoomed in but
04:31 - nope it goes down into the corner so
04:33 - this is the main issue and the solution
04:35 - to that is we need to play around over
04:37 - here with the offset as i increase the
04:39 - zoom amount it's essentially increasing
04:41 - the image to the right and up
04:43 - so that means that over here we need to
04:45 - also increase the offset as we increase
04:46 - the zoom now in order to see what the
04:48 - offset is doing if i change the offset
04:50 - from 0 to 0.1 and i hit on save look at
04:52 - how this image changes and if there you
04:54 - go it moves to the left so as i increase
04:56 - the offset on the x it's going to move
04:57 - the final image to the left as increase
04:59 - on the y it's going to move it down and
05:01 - if i go into negative numbers and goes
05:02 - the other way all right so now we know
05:04 - that we need to modify this based on the
05:06 - zoom so the question then is how much
05:09 - now if we do some simple testing we can
05:11 - see that if we put the zoom amount at
05:13 - 0.5
05:14 - then over here we offset by 0.25 and
05:16 - 0.25
05:18 - if we do that yep it is indeed perfect
05:20 - so right there it is zooming in directly
05:22 - on top of the middle house so just with
05:24 - this it seems like it's correct however
05:26 - if i now move the sphere to the right
05:28 - you would want to zoom in on that little
05:29 - door there so if i go there nope doesn't
05:32 - actually zoom in on the door so that
05:34 - means that the offset cannot be just a
05:36 - fixed value it also has to be based on
05:37 - the screen position
05:39 - so the next thing that i tried was
05:40 - really just connecting the screen
05:41 - position onto the offset but if you do
05:44 - that nope it does not actually work gets
05:46 - a weird strange very different result so
05:48 - that's not the solution
05:50 - this was the problem that took me quite
05:51 - a long time to figure out and the main
05:53 - issue is that the way that the shader
05:55 - works is on a per pixel basis
05:57 - meaning that all of these nodes like for
05:59 - example the scene color this one is
06:01 - working on a per pixel basis so for
06:03 - example it goes through this pixel right
06:04 - here on the sphere and gets the color of
06:06 - the scene right behind it then runs the
06:08 - exact same logic on this pixel this one
06:10 - this one this one and so on so that
06:12 - means that the whole sphere has
06:13 - different values if i connect the screen
06:16 - position directly into the base color
06:17 - you can see exactly what i mean there
06:19 - you go you can see that the entire
06:20 - sphere is nothing in just one shade but
06:23 - this corner here is much more green this
06:24 - one corner here is much more red so that
06:27 - means that every single pixel on this
06:28 - sphere has different values
06:30 - whereas the final thing that i realized
06:32 - for this to work is that we need to have
06:34 - all the pixels all the pixels on the
06:36 - sphere they need to run the same logic
06:38 - based on the object's center position
06:40 - and not on a per-pixel basis
06:42 - so after much trial and error the only
06:44 - option that i found that worked was
06:45 - passing in the object screen position
06:47 - directly through code so here on
06:49 - blackboard create a new vector2 let's
06:51 - call it the object screen position
06:56 - then just make sure you've got a
06:57 - reference
07:00 - and now here you take the object screen
07:02 - position and you multiply it by the zoom
07:04 - amount
07:05 - and then you take this output and you
07:07 - fit it into the offset okay so this is
07:09 - the shader now we need to pass in the
07:11 - object screen position through code then
07:13 - i have this very simple script it really
07:16 - just takes this transform position use
07:18 - the camera to convert a warm point into
07:20 - a screen point and then just take the
07:22 - screen point which is set in pixels and
07:24 - just divides it by the screen.width in
07:25 - order to get a normalized value so then
07:28 - i've got a normalized value for the
07:29 - screen position and just send it into
07:31 - the material
07:32 - so with this if we now test
07:34 - so here i am in the center it works just
07:36 - as usual but now if i want to go into
07:38 - that corner there and as i go any up
07:39 - there you go it does indeed zoom in
07:41 - directly on that corner and if i go into
07:43 - the top of that building it zooms in
07:45 - there they shop down there yup it zooms
07:46 - in so everything works perfectly alright
07:49 - awesome so here is the shader fully
07:51 - working i can look anywhere and
07:52 - everything zooms exactly as intended so
07:55 - if i want to zoom in the center it works
07:56 - zooming on the corner and everything
07:58 - works perfectly okay so hopefully if you
08:00 - were looking for how to do this just
08:02 - like i was hopefully this video helped
08:04 - you so you don't have to spend all the
08:06 - hours that i spent going crazy trying to
08:08 - figure all this out as an example here
08:10 - is a shader with all the approaches that
08:11 - i tried while researching this so i
08:13 - tried remapping the screen position then
08:15 - splitting to grab the x y and z and do
08:18 - different things with it i tried to use
08:20 - the object position object scale and
08:21 - tried to do something with it doing lots
08:23 - of things with the view object world and
08:25 - so on so i try tons and tons of possible
08:27 - approaches before i found the right
08:29 - method and here is the final result
08:31 - working great so if you come across this
08:33 - issue then hopefully this video helped
08:34 - you now stay tuned for that upcoming
08:36 - video where i will cover three methods
08:38 - for doing a rifle scope where one of the
08:40 - methods is this one alright hope that's
08:42 - useful check out these videos to learn
08:44 - some more thanks to these awesome
08:46 - patreon supporters for making these
08:48 - videos possible thank you for watching
08:50 - and i'll see you next time
08:55 - [Music]
08:58 - you