00:00 - hello and welcome I'm your code monkey
00:01 - minute series we're creating spider-man
00:03 - in unity 2d in this video we're adding
00:06 - movement to our enemies let's begin
00:10 - so here's the scene so far we have
00:13 - spider-man and a bunch of enemies I can
00:15 - attack the air and nothing happens
00:17 - or I can move close to an enemy and
00:19 - attack him and as you can see after
00:21 - three hits he dies and when I hit him
00:23 - there is a screen shake and some impact
00:27 - particles so right now as you can see
00:29 - the enemies are simply static they
00:31 - respond to hits but never actually move
00:33 - let's make them move towards spider-man
00:35 - so in order to do that we need a
00:37 - reference for our target now there are
00:39 - many ways to do this but in order to
00:41 - keep things simple and let's make them
00:42 - only capable of attacking spider-man
00:44 - later on we're going to refactor our
00:46 - code to be able to attack other entities
00:48 - as well so let's head into the
00:51 - spider-man class and in here and let's
00:53 - define a static instance so do a public
00:56 - static spider-man call it instance and
01:00 - on awake let's simply set the instance
01:03 - do this okay so this gives us a globally
01:07 - available reference to our spider-man
01:09 - now let's head into our enemy class in
01:12 - here let's define a member variable for
01:15 - our target so make a private spider-man
01:18 - target and let's grab our target on the
01:22 - private void start and set the target to
01:25 - spiderman instance alright so we now
01:28 - have our reference to spider-man well
01:31 - let's test to make sure that our
01:32 - reference is correct
01:33 - so simply make a private void update and
01:37 - on update let's move him towards the
01:40 - target so a vector3 for the target dear
01:43 - equals target dot yet position minus get
01:46 - position dot normalized and so on
01:50 - move the transform that position was
01:53 - equals target dear times a move amount
01:56 - just to check if we are moving towards
01:58 - our spider okay so let's run the code
02:01 - and see and yep as you can see they are
02:04 - slightly moving towards spider-man which
02:05 - means they are correctly accessing the
02:07 - correct reference okay so now let's
02:10 - first go appear and define a constant
02:12 - for our speed so in here make a private
02:15 - cons float for the speed and let's set
02:19 - it to three
02:20 - and down here and let's use the speed to
02:23 - move alright there you go they are now
02:25 - moving at a decent speed so now let's go
02:28 - into our game hammer and make sure we're
02:30 - only spawning one enemy just for testing
02:33 - and there's a single enemy correctly
02:35 - moving towards spider-man okay great now
02:38 - as you can see the enemy is moving but
02:40 - not actually animating essentially we
02:42 - have to do the same thing that we did
02:44 - for spider-man so let's go into the
02:46 - enemy code and in here let's make a
02:49 - private boy to handle movement this
02:52 - won't be the function responsible for
02:54 - moving our character now inside let's
02:56 - move in towards our target but before we
02:59 - do that let's define a minimum distance
03:01 - so we don't get to overlap our target so
03:04 - make a float for the stop moving
03:08 - distance and let's set it for let's say
03:11 - 30 F and in here we're only if vector 3
03:15 - dot distance if the distance between
03:17 - this enemy and the target dot get
03:20 - position if the distance between both of
03:23 - them is bigger than the stop moving
03:25 - distance then we keep moving if not then
03:27 - we stop moving so too close to target
03:30 - stop and here target is far away move
03:36 - closer now if we are too close then we
03:39 - go into our enemy base and play the idle
03:43 - animation if we are not too close and we
03:46 - want to play the move animation and
03:48 - again let's grab the target direction
03:51 - and the move code so in here play the
03:54 - move animation towards the target
03:55 - direction and then our update let's call
03:58 - this function alright so on update we
04:01 - are calling this function we are testing
04:03 - for a stop moving distance if the
04:05 - distance between this enemy and the
04:07 - target is bigger than stop moving
04:09 - distance then we move closer if not we
04:11 - stop and we stay idle when we are moving
04:14 - closer simply calculate the direction to
04:16 - the target move this transform towards
04:19 - him and play the move animation towards
04:21 - that target direction okay let's see on
04:23 - that in action ok there's the enemy and
04:25 - as you can see his stop because he's
04:27 - within 30 and if I move
04:29 - and yep he's moving closer and when he's
04:32 - within range he simply stops and becomes
04:34 - I don't yep exactly now in here we have
04:38 - an issue much in the same that we had
04:40 - with our spider-man movement which is if
04:42 - I attack him you won't see that the head
04:44 - animation no longer plays I hit him and
04:46 - yep there you go he was knocked back but
04:48 - he did not play the head animation again
04:50 - this is the same thing that was
04:51 - happening with our spider-man on attack
04:53 - that is because when we hit he plays the
04:56 - head animation but the very next frame
04:57 - he goes into the idle animation so they
05:00 - are cancelling each other so let's go
05:02 - into our enemy class and we're going to
05:04 - fix it much in the same way go down here
05:06 - make a private in room for our state and
05:08 - the possible states are either normal or
05:11 - busy and store our current state ok
05:16 - let's go down here make some helper
05:19 - functions so a private void set state
05:21 - normal where we simply set the state
05:24 - equal state normal and do the same for
05:26 - that busy okay now on our awake we start
05:33 - off as normal and on the update we do a
05:36 - switch on our current state case we are
05:42 - in state dot normal then you do handle
05:44 - movement just as normal case we are on
05:48 - state dot busy do nothing all right so
05:51 - now all we need is to go down here on
05:53 - the damage when we get hit right here
05:56 - when we play the hit animation we need
05:58 - to also set this to busy so here simply
06:01 - do set state to busy and when the
06:04 - animation is complete instead of going
06:06 - back to idle we're going to call the
06:09 - function to set the state back to normal
06:11 - alright so this way he should remain on
06:14 - the busy state while the hit animation
06:16 - is playing when the hit animation
06:17 - finishes he goes back to normal and he
06:19 - goes back to handling movement so let's
06:21 - see if he does get hit plays the
06:23 - animation and goes back to normal
06:24 - ok there he is if I move away you can
06:27 - see that he is following me ok great now
06:30 - if I hit him you have there you go
06:32 - there's the animation and then he goes
06:34 - back to normal and if I move him away he
06:36 - is don't following me ok and I get him
06:39 - again now he's dead alright great so
06:41 - again let's just
06:42 - with multiple enemies okay so here I am
06:45 - and enemies are currently being spawned
06:48 - I can hit him and kill him and now that
06:50 - I wanna spawn he's chasing me hit him
06:51 - killing him kill him and another one
06:54 - boom boom and yet they keep spawning
06:56 - they keep moving towards me and I keep
06:58 - killing them all right great
07:00 - so there you have it we added simple
07:02 - movement to our enemies in the next
07:04 - video we're going to add web zipping to
07:06 - our spider-man so we can move around
07:07 - very fast as always you can download the
07:09 - project files and utilities from unity
07:11 - code monkey comm if you have any
07:13 - questions post them in the comments and
07:14 - I'll do my best to answer them subscribe
07:16 - for more videos and I'll see you next
07:18 - time