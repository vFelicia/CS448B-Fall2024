00:00 - in this video I'm going to showcase a
00:01 - complete game made with unity dots
00:04 - the game is flappy bird which is
00:05 - relatively simple game but also involves
00:07 - some interesting logic which makes it a
00:09 - great project to do in dots as in
00:11 - learning experience this video is more
00:13 - of a showcase but let me know if you'd
00:15 - like to see a dedicated step-by-step
00:17 - tutorial on any of the systems alright
00:19 - let's begin
00:22 - [Music]
00:27 - hello and welcome I'm your code monkey
00:29 - and this channel is all about helping
00:30 - you learn how to make your own games
00:32 - with enough tutorials made by a
00:34 - professional indie game developer so if
00:36 - you find the video helpful consider
00:37 - subscribing so here I'm going to
00:39 - showcase the project that I built
00:40 - there's a link in the description where
00:42 - you can play it for yourself in your
00:43 - browser
00:44 - it also contains links to all the other
00:46 - elements used in the game so check it
00:47 - out to learn more about each specific
00:49 - topic so here is the game it's flappy
00:52 - bird so the player can throw almost a
00:53 - bird or I guess in this case the monkey
00:55 - you have pipes being spawned and they
00:58 - move to the left pretty much everything
01:00 - is done using dots entities the main
01:02 - exception is with the you are now if I
01:05 - pause the game and yep you can see
01:07 - there's pretty much no game objects so
01:10 - the bird is an entity it's controlled
01:12 - using a dot system of the pipes are
01:15 - spawned and moved with systems and
01:17 - that's prefabs the collisions are
01:19 - handled using dots physics and I have
01:22 - some dots events being fired and cut by
01:24 - the UI which is made with normal game
01:25 - objects this video is made possible
01:27 - thanks to these awesome supporters go to
01:29 - patreon.com/scishow to code monkey to
01:32 - get some perks and help keep the videos
01:33 - free for everyone one really interesting
01:36 - thing about the making of this game is
01:37 - how I manage to actually make a complete
01:39 - working prototype in just under two
01:41 - hours once I was on a flight so that
01:43 - tells you just how fast you can start
01:45 - working with dots once your brain clicks
01:47 - and you begin to understand the logic of
01:49 - hard work in a Down oriented way what
01:51 - took longer were all of the unique parts
01:53 - that I had to research so I spent quite
01:55 - a while learning how to fire events from
01:57 - dots and capture them in the UI I
01:59 - covered that in another video I also
02:02 - have to learn how to handle changing
02:03 - scenes and cleaning up the dots world
02:05 - and how to construct physics shapes
02:07 - which led me to learn about web assets
02:09 - which are also covered in another video
02:11 - as I said this video is more of a
02:13 - showcase so I'm going to play the game
02:15 - and show an overview of how it's set up
02:16 - but let me know in the comments if you'd
02:18 - like to see a dedicated step-by-step
02:20 - tutorial on each part of how the game
02:22 - was made ok so let's look at the final
02:24 - result it's a game flappy bird so I'm
02:26 - sure you're familiar with it
02:28 - the player controls a bird or in this
02:30 - case a monkey and the only input is just
02:31 - jumping the bird is always falling down
02:34 - and the pipes are always being spawned
02:36 - and moving the goal is to keep jumping
02:38 - and avoiding
02:39 - the pipes as I pass over a pipe you can
02:42 - see that the score increases you can see
02:44 - in the UI it's showing which is my
02:45 - current score now the more pipes that I
02:48 - passed the harder it becomes you can see
02:50 - the gaps becoming tighter which makes it
02:52 - more difficult and if I happen to hit a
02:55 - pipe if there you go there's UI showing
02:58 - the current score the current high score
03:00 - and some buttons I try or go back to the
03:02 - main menu
03:02 - press retry and it loads the starting
03:05 - scene and here I go yeah alright so this
03:08 - is the core gameplay loop and again
03:10 - pretty much everything is done entirely
03:12 - in dots the main exception is the UI
03:15 - which as of right now isn't really
03:16 - support in dots now I also covered
03:18 - making flappy bird using normal game
03:20 - objects in a previous video what I'm
03:22 - doing here is a very similar logic in
03:24 - many cases so if you found out that
03:26 - video based on game objects then you'll
03:28 - likely have an easier time following
03:30 - this video based on dots you'll be able
03:32 - to easily identify the logic and how it
03:34 - relates to the game object way of doing
03:36 - things okay so let's take a look at the
03:38 - project and how it works first of all
03:41 - over here is the game scene it's built
03:43 - in the way that dots game should be
03:45 - bound so right in here you don't
03:47 - actually see any game objects with a
03:49 - convert to entity script what you do see
03:51 - is a sub scene I cover it sub scenes in
03:54 - a previous video so check it out to
03:55 - learn more
03:56 - essentially all objects in a sub scene
03:58 - automatically get converted into
03:59 - entities so this is how you should set
04:02 - up a pure dots project put things inside
04:05 - of sub scenes rather than putting them
04:06 - outside and using the convert to entity
04:08 - script now right now the sub scene is
04:11 - closed so what we're seeing all the way
04:12 - in here is the objects as entities and
04:15 - in the latest version it added this very
04:17 - nice checkbox and by clicking on it
04:20 - there you go you can see that the sub
04:22 - scene has now been open for editing with
04:24 - this obscene open we can inspect each
04:26 - individual component and look at them as
04:28 - game objects so for example over here is
04:31 - the background and you can see it's set
04:33 - up as a game object with a normal mesh
04:35 - and a normal material and again you can
04:37 - see there is no convert to entity script
04:39 - because everything inside a sub scene
04:41 - automatically gets converted into an
04:43 - entity then the clouds in the ground are
04:46 - also just simple basic visual objects
04:48 - and you can see for example here on the
04:50 - ground there's a tag ground component
04:53 - and on the cloud there's the tag cloud
04:55 - component so this is how the movement
04:57 - systems locate these specific objects so
05:00 - here in the project file scripts I can
05:02 - see the ground move system and here it
05:05 - is as you can see all does is and
05:07 - entities with all of the tag around and
05:09 - just moves around that entity
05:11 - so this is how it identifies the ground
05:13 - entity through the tag component now for
05:15 - the ground it's just moving to the left
05:17 - until it reaches a certain point then it
05:19 - automatically teleports it to the right
05:21 - so by in doing so the ground centrally
05:23 - goes on for infinity so here we decide
05:25 - by side visible you can see that the
05:27 - ground is left
05:29 - Andersen's reaches in it snaps back and
05:31 - in here it looks flawless the same thing
05:33 - is happening with the clouds except they
05:35 - are moving slower in order to give the
05:37 - illusion of a parallax effect but yep
05:38 - there you get I also covered how to do a
05:42 - parallax effect using normal game
05:43 - objects in another video so check that
05:45 - out as well so here you can see that we
05:47 - have the background the clouds and the
05:49 - ground always just basic sprites then
05:51 - over here we have the bird you can see
05:54 - it as a basic quality material for the
05:56 - visual then we have a simple tag to
05:58 - identify it
05:59 - physics components to handle our
06:01 - collisions and finally a move speed
06:04 - authoring component so this is how the
06:06 - bird actually moves up and down you can
06:08 - see that the component just has a simple
06:10 - fold 3 then over here is the input
06:12 - system all it does is it listens to the
06:15 - spacebar and sets a value on the move
06:17 - speed component so you can see this is a
06:20 - very simple system then over here is the
06:22 - bird control system first of all you can
06:25 - see that it has an attribute in order to
06:26 - run after the input system and here what
06:29 - we're doing is just applying some
06:31 - gravity onto our move the airspeed
06:33 - component we apply that to the
06:34 - translation and then finally just has a
06:37 - nice effect the rotation is based upon
06:39 - the move speed line so as the bird jumps
06:42 - it rotates up and as it falls it rotates
06:44 - down so here it is jumping up and down
06:46 - and rotating just by pressing the
06:48 - spacebar so the bird is controlled
06:50 - internally just by these two systems now
06:53 - here you might have noticed we have
06:54 - something called game state being used
06:56 - here is the component it's extremely
06:58 - simple all we have is in a new and a
07:00 - field to store the state of that I know
07:02 - this is what keeps track of the total
07:04 - game State so it's either waiting
07:06 - to start before the player actually
07:08 - starts jumping then we have playing the
07:10 - game or the player is dead
07:12 - the way it's set up it's also very
07:14 - simple we have the generate authoring
07:16 - component and again over here in our sub
07:18 - scene we have a game object right here
07:20 - at the game state with our game state
07:22 - authoring component so that's it nothing
07:24 - else and since there's only one of these
07:26 - components in our world then we can play
07:28 - around with it as a easy-to-use
07:29 - singleton for example let's look at how
07:32 - the waiting to start works here is the
07:34 - dot scheme handler class this is just a
07:36 - normal system running some generic logic
07:38 - now the bird input system fires off an
07:41 - event whenever the bird jumps so here is
07:43 - on the input system we just have a basic
07:45 - event and we invoke it in here okay so
07:47 - here on this class we are subscribing to
07:49 - this event and running this function and
07:52 - when the bird jumps the first thing we
07:54 - do is check if the singleton exists
07:56 - which in this case it should always
07:58 - exist but just keep it safe now the way
08:00 - you use our singleton is first we call
08:02 - get singleton in order to get the
08:04 - singleton instance so then we have our
08:06 - component here then we just check our
08:08 - state if it is waiting to start if so
08:10 - when we have our bird jump then we
08:11 - switch it to plane and now here is one
08:14 - very important thing about Singleton's
08:15 - which is if you modify the component
08:17 - then you need to update the singleton
08:19 - with set singleton if you don't then all
08:21 - you're doing is modifying just this
08:22 - local copy so that's the singleton
08:25 - component that handles the main game
08:26 - State uncle for singleton is in more
08:28 - detail in a separate video so stay tuned
08:30 - for that
08:30 - now one crucial aspect about the game
08:33 - are the pipes here on the side-by-side
08:36 - view you can see how the pipes work
08:37 - essentially they get spawn right in
08:39 - there
08:40 - the pipes are the ones that move to the
08:41 - left and when they get into that
08:43 - position they get destroyed so you can
08:45 - see the player never actually moves he
08:46 - only moves vertically and all the time
08:48 - to go through him now here in the editor
08:51 - inside of our sub scene you can see that
08:53 - we don't have any pipes at all
08:54 - instead they are over here on the
08:56 - project files as a prefab I covered how
08:59 - to instantiate prefab entities in
09:01 - another video so check it out here what
09:03 - I'm doing is exactly what I covered in
09:05 - that video so there's this prefab nicely
09:08 - set up so it's the pipe it as a simple
09:11 - component and a box Collider then has
09:13 - the pipe head and pipe body and then
09:16 - over here on the sub scene there's a
09:18 - game object for the prefab entity home
09:20 - and in here it holds a reference to the
09:22 - prefab object then here is the pipe
09:25 - spawner system so this is what actually
09:28 - spawns the pipes so down here on our
09:31 - update the first thing we do is check
09:32 - our singleton we're only going to spawn
09:35 - pipes if we are playing then here which
09:37 - is counting down some timer and spawning
09:39 - a pipe gap now if you saw the normal
09:42 - game object-based flappy bird video then
09:44 - of this shouldn't look very similar we
09:46 - just have our countdown timer then we
09:48 - complete a random gap height and gap
09:50 - size and then we spawn our pipe gap so
09:53 - the pipe cap spawns a pipe on top and
09:55 - one on bottom and over here is the
09:57 - function to spawn an individual pipe you
09:59 - can see the first we get the singleton
10:01 - of the prefab entity component which
10:03 - holds the pipe prefab we in Senshi ate
10:06 - that prefab as an entity and then we
10:08 - sent all of the values so we're here
10:10 - we're sharing the translation then we're
10:12 - going through the children because as
10:14 - you saw the prefab had two children for
10:16 - the head and body we position them
10:18 - accordingly to the size and the height
10:20 - then down here we set the scale and
10:23 - finally we set the actual physics
10:25 - Collider so this system is responsible
10:28 - so only for spawning the pipes then the
10:30 - other system is here the pipe move
10:31 - system which actually moves the pipes so
10:34 - what it does is it moves the pipes and
10:36 - fires off the event when the pipes pass
10:37 - the player
10:38 - I'll cover events in a bit you can see
10:40 - that it doesn't entities for each and
10:42 - just moves the translation of the pipes
10:44 - and again here it is side by side you
10:46 - can see the pipes being created they
10:48 - move to the left and they get destroyed
10:49 - now the player is jumping around and he
10:53 - dies as soon as he hits either the floor
10:55 - or the pipes now the testing for hitting
10:57 - the pipes is done using dots physics so
11:00 - again if we look inside of our sub scene
11:02 - we can see over here the bird has a
11:04 - sphere Collider and a physics body and
11:06 - then the pipe prefab also has a box
11:09 - Collider the pipe size is set up
11:11 - dynamically so that's also when the
11:12 - Collider is resized accordingly
11:14 - then over here I have an object with the
11:16 - very useful in physics debug display we
11:19 - can enable this and run the game and yep
11:21 - now we can see the physics
11:22 - representation of all of our colliders
11:24 - so you can see the bird with the sphere
11:26 - Collider the top and bottom colliders
11:28 - and as I move you can see yep all the
11:30 - pipes are being spun of them have the
11:32 - correct shape
11:34 - as soon as there's a collision yep there
11:35 - you go there's our game over let's look
11:38 - at the calm weather shape for the pipes
11:39 - here is the code were responding the
11:41 - pipe and then down here we're setting
11:43 - the physics for my other sheet
11:44 - now that's colliders actually store
11:47 - their shape inside of a blob acent I've
11:50 - covered mob assets in a previous video
11:52 - so check it out to learn more
11:53 - essentially blob assets are immutable
11:55 - containers of data so they cannot be
11:58 - modified that means that in order to
12:00 - change the size of our collider on the
12:01 - pipe then I need to actually create a
12:03 - brand new cone weather shape and assign
12:05 - it on the physics quality component it
12:08 - took me a while to figure out how to
12:09 - make a new Collider shape but here it is
12:11 - you access the class of the specific
12:13 - type of collider so in this case using
12:15 - the bathroom and concreate
12:18 - then pass in all the parameters so
12:20 - passing the box geometry which takes the
12:22 - size center orientation then for the
12:24 - filters I'm using the same one set
12:26 - Collider it gets converted automatically
12:27 - and the last thing is I wanted the
12:30 - colliders to be a trigger so I pass in
12:31 - the trigger flag so again this is how
12:34 - you make a custom shape in dots physics
12:36 - you access the class for the specific
12:38 - type of Collider it returns a blob acid
12:41 - reference and then finally you assign
12:43 - that one on to the physics and letter
12:44 - component so that sets of the pipe
12:46 - Collider then for handling the game over
12:49 - collision over here is the pipe hit
12:52 - system and you can see it contains a
12:54 - physics trigger job now I cover dots
12:57 - physics triggers in the getting started
12:58 - with dots physics video so check that
13:00 - out to learn more essentially there's
13:02 - this job looking for collisions between
13:04 - the bird the wall or the pipes and if it
13:08 - finds one of those collisions then it
13:10 - fires off this event now one very tricky
13:12 - part that took me several days to
13:14 - research during the making of this game
13:16 - or events I cover normal c-sharp events
13:19 - previously and if you've seen several of
13:21 - my videos then you know I use events
13:23 - constantly they are excellent for
13:24 - helping keep your code clean but events
13:27 - are also object based so that makes them
13:29 - very tricky when working with that
13:30 - oriented code after a lot of research I
13:33 - managed to come up with a way to fire
13:34 - off c-sharp events from dots code I
13:36 - cover that in the dance events video so
13:38 - check it out to learn more the
13:41 - underlying logic is somewhat complex but
13:43 - I managed to build the super nice and
13:44 - easy to use classes to handle
13:46 - vents for example over here is the pipe
13:48 - move system so this is where we're
13:50 - firing off the pipe past event which
13:51 - then gets used in order to calculate the
13:53 - score so here we define the event as
13:56 - well as a simple event component then we
13:59 - construct our dance events object and
14:01 - then down here on our update first we
14:04 - grab the event trigger this is the
14:06 - stroke that is safe to use inside of the
14:08 - entities for each and then inside
14:10 - entities for each we use that trigger in
14:12 - order to trigger the event and
14:13 - afterwards we capture the events and we
14:16 - fire off the normal c-sharp event so
14:18 - then the UI can hook into this and
14:20 - display the current score so this class
14:22 - took a lot of work to make it but by now
14:24 - it's really nice and really easy to use
14:26 - again check the full video to see how
14:27 - this works
14:28 - the pipe hit system here is checking for
14:30 - events in the exact same way it has a
14:33 - c-sharp event with its component and
14:34 - then we have the AI trigger events job
14:37 - over here we are triggering our event
14:39 - now I'm listening to the on pipe hit
14:41 - player event is the game over
14:43 - so that's handled here on this class it
14:46 - goes into the world
14:47 - grab the pipe hit system and subscribes
14:49 - the on pipe hit play event and then here
14:52 - it is that function so you can see that
14:54 - it updates the game state singleton in
14:56 - order to set it to dead and now the way
14:58 - that I control the rest of the game set
15:00 - is by either enabling or disabling
15:02 - various systems so here it is this
15:04 - function that handles a whole bunch of
15:06 - systems and just sets the enable to
15:08 - either true or false so when there is a
15:10 - game over all these yet set to false so
15:12 - for example the pipes planner system
15:14 - doesn't run so it's not going to spawn
15:15 - any pipes the bird controllers and runs
15:17 - it's not going to move the bird and so
15:18 - on and when we have the waiting to start
15:21 - then we set them all back to true again
15:23 - that's a stone development so I'm not
15:25 - sure if this is going to end up being
15:26 - the best practice but in this case it
15:28 - works just fine and here on this class
15:30 - we're also broadcasting a on game over
15:33 - event so this is a normal CTR prevent
15:35 - which is being caught by the yuan so
15:37 - here in the editor there's a UI setup
15:39 - and over here is the nice game over
15:41 - window it has game over windows script
15:43 - and over here is the game over windows
15:45 - script and down here you can see that
15:47 - when we have a game over we show the
15:50 - window play nice sound and showcase the
15:51 - score so this is pretty much exactly the
15:53 - same as it was in the game object-based
15:55 - flappy bird project it just listens to
15:58 - the game over event and shows
15:59 - window now the UI is the main thing that
16:01 - is still done using normal game objects
16:04 - so in the editor you can see it's set up
16:06 - to in the canvas with normal game
16:07 - objects everything just normal as usual
16:09 - so all of them are based on game objects
16:11 - and all of the scripts are listening to
16:13 - the Sailor the warm through dots events
16:15 - right now there's no built-in way of
16:16 - doing UI in dots but using this approach
16:19 - works pretty great now lastly one thing
16:21 - I could have done in dots but didn't was
16:23 - the sound I haven't been following the
16:25 - progress of sounds and dots but I'm
16:27 - pretty sure they make sitted Emma was
16:29 - using it so it's certainly possible
16:30 - now it's sound in this game is handled
16:33 - using normal game objects so as I jumped
16:35 - over here you can see a game object with
16:37 - the sound object being in Senshi ated
16:39 - and undestroyed so as I go through the
16:42 - pipes if there you go it spawns and gets
16:43 - astray so just a normal game object to
16:45 - the audio source but technically you
16:47 - could also use dots for the sound as
16:49 - well okay so here is the complete
16:51 - project it's a fully working game and
16:54 - almost internally built in dots doing
16:56 - this project was a great learning
16:57 - experience for me to really put that to
16:59 - the test I look forward to doing a more
17:02 - complex Notts project in the future
17:04 - maybe something like a massive RTS could
17:06 - be fun either way here is a complete
17:08 - project that you can inspect yourself to
17:10 - see how dots is already very usable for
17:12 - making a complete game as I said this
17:14 - video was more of a showcase of the
17:16 - entire project let me know in the
17:18 - comments if you'd like to see a
17:19 - dedicated step-by-step tutorial on a
17:21 - specific system used in the game this
17:23 - video is made possible thanks to these
17:25 - awesome supporters go to
17:26 - patreon.com/scishow to code monkey to
17:29 - get some perks and help keep the videos
17:30 - free for everyone as long as you can
17:32 - download the project files and utilities
17:34 - from unity comic calm subscribe the
17:36 - channel for more unity tutorials post
17:38 - any questions I have in the comments and
17:40 - I'll see you next time
17:42 - [Music]