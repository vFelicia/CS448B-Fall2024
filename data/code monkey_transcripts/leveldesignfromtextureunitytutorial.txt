00:00 - hello and welcome I'm your code monkey
00:01 - and in this video we're going to design
00:03 - a level based on a texture let's begin
00:08 - all right so here's my scene with my
00:10 - character I can aim and shoot there are
00:13 - some enemies that are attacking the
00:15 - player but he goes and as you can see
00:18 - the health goes down I can attack him
00:19 - and kill them okay great
00:22 - is he getting here we have some ammo
00:23 - pickups so I got four and now I've got
00:25 - 20 ammo and I got a help pick up that
00:28 - boosts up my help we also have some
00:31 - walls here that the player cannot move
00:33 - through okay so these are all the
00:35 - elements that we're going to use to
00:37 - design our levels so here is the main
00:39 - script running the game the code is
00:42 - cleanly set up so we have these
00:43 - functions in here we can spawn the
00:46 - player put them into a position spawn a
00:48 - health pack spawn a ammo pack spawn an
00:50 - enemy and a wall we're going to
00:52 - essentially draw pixels in a texture and
00:55 - based on the color of those pixels we're
00:57 - going to spawn various items so let's
00:59 - begin with a simple texture so here I
01:02 - have a 10 by 10 pixels texture now I'm
01:05 - using Photoshop which you can do this in
01:07 - any program as long as you can draw
01:09 - individual pixels so first off let's
01:11 - start with the whole thing in white
01:12 - essentially white will mean nothing
01:14 - spawned in that position and now we have
01:17 - to define a color for the player
01:19 - position so let's go in here and let's
01:21 - define the player position color as a
01:23 - pure blue so let's put it on to 5500 so
01:27 - in the hexadecimal 0 0 0 0 FF that is
01:31 - going to be the pixel that references
01:33 - our player position so let's for example
01:35 - spawn him in here in this corner ok so
01:39 - here is the own level texture on the
01:40 - project files and now that we have our
01:43 - texture in here and let's go into the
01:45 - code and read it so on the game panel in
01:47 - here let's first add a field for
01:49 - d-tector so a private texture 2d for our
01:52 - level texture and we're going to make
01:55 - this a serialized field so we can set it
01:57 - in the editor so let's go to the editor
02:01 - and drag our reference there's our own
02:03 - level texture and drag it in there ok
02:04 - now let's also go into the texture
02:07 - import settings and in here we have to
02:09 - make sure that we can read and write our
02:11 - texture so we go down here read write
02:13 - enable and enable it also make sure that
02:16 - the texture does not have any MIT maps
02:19 - and the film
02:19 - mode is set to point we want to read
02:22 - every pixel exactly as we drew them now
02:24 - in here the found that we are reading is
02:26 - a PSD file which is photoshop's file
02:28 - format but you can draw your own level
02:31 - anywhere and save it in here just make
02:33 - sure that you save your file as a bitmap
02:34 - otherwise the compression could mess up
02:37 - the colors so hit apply and let's go
02:40 - back to the code now in here we need to
02:42 - cycle through the whole texture so let's
02:44 - make two for loops one for the width and
02:46 - one for the height so a two a four inch
02:49 - let's say X start off with the width X
02:53 - less than the level texture dot width
02:57 - then inside we do a four int y equals
03:01 - zero Wireless and level texture dot
03:03 - height so in here we are cycling through
03:06 - every single pixel on our own level
03:08 - texture now in order to read the pixels
03:11 - the best way to do it in terms of
03:12 - performance would be in level texture
03:14 - dot get pixels this function returns a
03:18 - flattened array that contains all of the
03:20 - pixels the array size is the width
03:22 - multiplied by the height however in
03:25 - order to make our code easier to follow
03:26 - we're going to do it using get pixel and
03:29 - read each pixel one by one so instead we
03:31 - get pixels we use get pixel then we feed
03:35 - it the x and y coordinates this way our
03:37 - code is less confusing since we don't
03:39 - have to do any index calculations but if
03:42 - you're implementing this in your own
03:43 - game make sure you later we factor this
03:45 - code to use get pixels so for now when
03:47 - we're cycling in here the get pay zone
03:49 - will return a color which is the color
03:51 - of this pixel so store the color and for
03:56 - testing let's do a debug log of our
03:59 - pixel color okay so let's run the code
04:02 - and see what shows up in the console ok
04:04 - our game is running and as you can see
04:06 - in the console it is displaying the
04:07 - color of each specific pixel and if we
04:09 - go up here we should be able to see a
04:11 - different pixel there you go right there
04:14 - we got one pixel with the red and zero
04:16 - the green in zero and blue and one and
04:19 - alpha also in one so as you can see this
04:21 - is the blue pixel in between all these
04:23 - white pixels and as you can see in here
04:26 - we have a hundred messages which makes
04:28 - sense since our texture is ten by ten so
04:30 - it has a hundred pixels so we are
04:32 - correctly
04:33 - the pixel values from our texture now
04:35 - let's go back into the code and in here
04:38 - let's first convert the color into a
04:39 - hexadecimal value to help us define the
04:42 - values for our objects to do that I'm
04:44 - going to use the utens class which is
04:46 - part of the code monkey utilities which
04:48 - you can grab for free from in Tacoma
04:50 - comm and in that class I have a function
04:52 - called get string from color which
04:55 - essentially returns a hexadecimal string
04:57 - from a color object so in here I'm going
04:59 - to pass in the color and this will
05:01 - return a hexadecimal string for that
05:04 - comm so in the case of the player string
05:06 - it will be 0 0 0 0 FF so using that
05:10 - let's go up here and define a private
05:12 - cons strength for our player color which
05:16 - will be 0 0 0 0 FF so here when we're
05:21 - grabbing the pixel color let's do a
05:23 - switch on the hexadecimal representation
05:25 - and case hexadecimal matches player
05:30 - color then essentially we are reading a
05:33 - player pixel so if it doesn't match the
05:35 - player color for now let's just do a
05:37 - debug dialog of the player position so
05:39 - player position and let's pass in the X
05:43 - and the y so X and then the Y now can
05:48 - let's test and see where it finds the
05:49 - player okay there's the console and as
05:52 - you can see found the player position on
05:53 - position 2 2 so let's go into our level
05:56 - texture and as you can see the index
05:58 - starts on 0 so this one is 0 0 1 0 2 0
06:01 - so 2 0 2 1 & 2 2 so it does match
06:05 - exactly what we're reading so now that
06:08 - we have the coordinates of our player
06:10 - and let's actually put them in that
06:11 - position now for the size of our level
06:14 - let's go up here and define another
06:16 - constant so do a private const quote and
06:20 - this will be our units per pixel which
06:24 - won't be the amount of units in game
06:26 - that represents one pixel in our level
06:29 - texture so in this case and let's set it
06:31 - to 20 app so in here let's count only
06:33 - two coordinates where the player should
06:35 - be spawned so a vector 3 for the players
06:37 - spawn position which should be a new
06:41 - vector3 with the X&Y and let's multiply
06:45 - this vector 3 by our
06:46 - units per pixel then we're going to
06:49 - spawn the player on this position so
06:53 - using a units per pixel of 20 and
06:55 - placing the player on to 2 essentially
06:58 - the player should be placed on 40 40 so
07:01 - let's see if that is correct okay here
07:04 - we are in game and as you can see the
07:06 - player game object is indeed on 40 40
07:08 - and again we can now go into our texture
07:11 - and instead of placing the player in
07:13 - there let's erase them from there and
07:15 - place them on the corner so that corner
07:17 - is on zero zero so the player should now
07:19 - be positioned on zero zero let's run the
07:22 - game and there's a player and if we
07:25 - check out the game object it is indeed
07:27 - on zero zero so as you can see by
07:29 - editing our texture in here we can
07:31 - modify what happens when we run our game
07:33 - so that's the base of our system we are
07:36 - essentially reading our level texture
07:38 - and doing something different dependant
07:40 - on the color that we see from that pixel
07:42 - so there you have it we'll learn how to
07:44 - create a level texture and read that
07:46 - texture to define a player spawn
07:48 - position in the next video we're going
07:50 - to add support for different object
07:52 - types and create an interesting level as
07:54 - always you can download the project
07:56 - files in utilities from unity code
07:57 - monkey comm if you have any questions
07:59 - post them in the comments and I'll do my
08:01 - best to answer them subscribe for more
08:02 - videos and I'll see you next time