00:00 - hello and welcome I am you're a code
00:02 - monkey and in this video we're going to
00:03 - create some really nice and fun confetti
00:05 - let's get started
00:10 - all right so this is actually a very
00:13 - appropriate video for today since we've
00:15 - just passed a thousand subscribers so
00:17 - let me first say many thanks to everyone
00:19 - who is watching and I'm glad you're
00:21 - enjoying the videos now we want to
00:24 - create a really fun effect what it seems
00:26 - like confetti falling on the screen
00:28 - something that would be used on a level
00:30 - complete or a player win or any sort of
00:33 - success screen we're going to build a
00:35 - confetti in the UI system so let's go
00:38 - into our canvas here I have my game
00:40 - Handler inside I have a UI game object
00:42 - and I got my canvas right here it's a
00:45 - screen space camera canvas using this
00:48 - camera which is displaying the canvas
00:49 - okay
00:50 - so in here I am going to create a new
00:53 - game object and name it window can fail
00:56 - I'm going to stretch it to occupy the
00:59 - entire screen and set everything to 0
01:01 - okay now here in my prefabs folder I am
01:04 - going to create a new prefab and name it
01:07 - PF and 30 now in our prefab let us add
01:10 - first a image component for the visual I
01:14 - have a sprite sheet here so let me
01:16 - switch this from single into multiple
01:18 - get this bright editor and I'm going to
01:21 - slice all the frames so they are in 64
01:24 - by 64 okay
01:25 - so there your first frame second frame
01:27 - third reinforcement so my spreadsheet in
01:30 - here as you can see it's like a piece of
01:32 - confetti just flipping back and forth we
01:35 - are going to tint this spreadsheet that
01:36 - is why we have one face in white and one
01:39 - in gray so back to our prefab theorem
01:44 - let's add the first frame and let me
01:47 - drag it into my scene here reset the
01:50 - position and set the size as 15 by 15
01:54 - and let's give it a nice blue tint okay
01:58 - now I'm going to add the image animator
02:01 - script this is the script that we
02:03 - created in the previous video for the
02:05 - simple sprite animator it simply plays a
02:07 - list of animation frames sequentially
02:09 - it's very simple so in here I'm going to
02:11 - set the frame rate to 20 frames per
02:13 - second I'm going to set it to loop and
02:15 - for our frame array let's first lock the
02:19 - inspector so we can drag on our frames
02:21 - and
02:23 - or frames into the red okay and let's
02:26 - test and see if our piece of confetti is
02:28 - in there yep there it is just a single
02:30 - piece of confetti it contains some basic
02:33 - sprites your animation so it seems like
02:34 - it's flipping back and forth okay good
02:36 - now let's set up the script to actually
02:39 - spawn them so in here remove the
02:41 - original game object since we're going
02:42 - to spawn it from the prefab and I'm
02:45 - going to create a new C sharp script and
02:48 - name it window confetti let's add a very
02:51 - ball for our prefab so a private
02:54 - transform PF confetti make it a
02:57 - serialized field so we can set it any
03:00 - editor and let us create a subclass to
03:03 - handle our individual confetti logics so
03:06 - we're going to make a private class
03:09 - confetti in here let's make a
03:12 - constructor for our confetti and inside
03:16 - we're going to receive a transform for
03:19 - our prefab a transform for our container
03:22 - and the vector two for our anchored
03:25 - position in here let's instantiate our
03:29 - prefab into our container we're going to
03:33 - store our transform and we're also going
03:38 - to store our rect transform which is
03:43 - using unity engine dot u wine so here
03:49 - let's set our transform and our rect
03:52 - transform equal transform component type
03:56 - transform
03:57 - okay let's set our write transform
03:59 - anchor position okay so we have our
04:03 - confetti being accentuated and set up
04:05 - let us make a private voi update and in
04:10 - here we're going to move our anchored
04:12 - position by a certain move amount let's
04:14 - say vector to move amount of the new
04:18 - vector to and we're just going to move
04:20 - it on the Y let's say 100 and up here we
04:24 - need to store our anchor position
04:28 - this done anchored anchored position
04:31 - okay in here anchored position was
04:35 - equals the move amount times time Delta
04:38 - time and set our right transform dot
04:41 - anchored position to our anchor position
04:45 - okay so this should spawn the confetti
04:47 - and move it downwards now let us go up
04:50 - here and create a list that won't hold
04:53 - all of our confetti call it confetti
04:56 - list let us make a private void awake in
05:00 - which we're going to instantiate our
05:02 - list and let's make it private void
05:05 - update in which we're going to go
05:08 - through all the confetti in our lists
05:11 - gemelas and call the update and final
05:19 - let's make a function to spawn our
05:21 - confetti spawn confetti in here let's
05:26 - create a new confetti object and that
05:29 - equals new confetti for the prefab we're
05:32 - going to give it the PF confetti for the
05:34 - container won't be this window and for
05:37 - the entered position let's calculate
05:39 - that so the anchors position we want to
05:44 - get a random position between the left
05:46 - and right side so let's grab the width
05:48 - and height of this transform so float
05:52 - width equals transform get component
05:56 - rect transform the rect dot with let's
06:02 - also grab our height okay so for our
06:06 - anchored position let's pick a random
06:08 - value within the entire width since the
06:11 - origin of the window is in the middle we
06:13 - want to randomize the position between
06:14 - minus half of our width and plus half of
06:17 - our width so random down range between
06:21 - minus width / 2 and width / 2 and for
06:28 - our height we want height divided by 2
06:30 - so in here the waiting we have set up
06:34 - our canvas when we get the rect
06:36 - transform width we're going to get this
06:38 - entire size but since we are anchored in
06:40 - we want to grab a random value between
06:43 - minus half of our width and plus half of
06:46 - our width so it won't be a random value
06:48 - on the total width and for our height we
06:51 - want to put right on top of here which
06:53 - is half of our height okay so finally on
06:57 - our way let's spawn eight confetti and
07:00 - in here let's add our confetti to our
07:03 - config list let's drag our script and
07:09 - drag our transform and now it should
07:12 - spawn a confetti and see it move down
07:14 - yep there it is it's moving down okay we
07:17 - got a single piece of confetti working
07:19 - all right now let's add a time to spawn
07:21 - more so in here I'm going to make the
07:23 - private float spawn timer and also a
07:27 - private cons float spawn timer max which
07:32 - will be zero point zero 33 out so we're
07:35 - going to spawn some confetti 30 times
07:37 - per second so in here spawn timer -
07:41 - equals time Delta time if our spawn
07:45 - timer is less than zero and we're going
07:48 - to reset our spawn timer by increasing
07:50 - it by the spawn timer max and in here
07:53 - and let's spawn some confetti but let's
07:55 - spawn a random amount so int spawn
07:58 - amount equals random dot range let's say
08:03 - between 1 and 4 pieces and 4 and 0 and
08:12 - we're going to spawn our campaign so 3
08:17 - times per second we're going to run this
08:18 - code and we're going to spawn between 1
08:20 - and 4 pieces of confetti and we know
08:23 - what we need to spawn that one on start
08:26 - so let's see right now yep there you go
08:29 - we now have multiple pieces of confetti
08:31 - being spawned
08:32 - great ok now let's add some size
08:37 - variation to our confetti so in here
08:39 - when we set up let us go into our rect
08:43 - transform dot size Delta and let us
08:45 - multiply that by a random value between
08:49 - let's say 0.8
08:51 - 1:22 hour so essentially our size will
08:54 - be randomized between 80% of the
08:56 - original size or a hundred and twenty
08:57 - percent of the original size let's see
09:00 - if we have some bigger than the others
09:03 - and you know there you go
09:05 - this one is smaller than that one and
09:07 - yeah it's very subtle but it helps to
09:09 - add a bit more variation okay
09:12 - now let's add some rotation for a
09:14 - rotation we're going to store a private
09:17 - vector3 for our Euler and we're going to
09:20 - store a float for our Euler speed and in
09:25 - here let's set a Foley our Euler
09:28 - keep the X&Y stable since this is in 2d
09:32 - and four hours in let's get a random
09:34 - value between 0 and 360 this will be our
09:38 - starting Euler transform the local Euler
09:41 - angles equal to your and for our you
09:45 - more speed let's grab a random value
09:48 - between 100 and 200 F and let's also
09:53 - randomize it between clockwise and
09:55 - counterclockwise so your speed x equals
09:59 - let's get a another random value between
10:02 - 0 and 2 now if this equals zero then
10:07 - we're going to multiply it by 1 app if
10:10 - not by -1 f so in here we are getting a
10:14 - random value between 0 and 2 so it won't
10:16 - be either 0 or 1 now if it is zero then
10:19 - we're going to multiply our your speed
10:21 - by one so essentially keep the same
10:23 - thing if this random equals 1 then we're
10:25 - going to invert our rotation speed so it
10:28 - won't either to go clockwise or
10:30 - counterclockwise and down here let us
10:33 - increase our Euler dot z by our your
10:36 - speed times time duct all the time and
10:39 - set our transform dot local Euler angles
10:44 - to our viewer okay so now our confetti
10:47 - should be rotating clockwise and
10:50 - counterclockwise okay there you go
10:52 - some of them going clockwise some going
10:55 - counterclockwise yep right there okay
10:57 - good now let us also randomize the move
11:00 - speed amount so let us
11:03 - here a private vector2 for our move
11:06 - amount and we're going to counter it in
11:09 - here on the X let's keep it at zero we
11:13 - just want to fall straight down so let's
11:15 - grab a random dollar range between minus
11:19 - 50 F and minus 150 and in here we're
11:23 - going to use the move amount that we set
11:24 - there okay so we should now have some
11:27 - with a speed different from the others
11:29 - and yet there you go these are falling
11:30 - very quickly these very slowing all
11:33 - right
11:33 - that adds quite a lot of variation okay
11:36 - so now finally and let us add a bunch of
11:38 - different colors so we're going to go up
11:41 - here and make another serialize field
11:43 - that will be a private an array of
11:46 - colors call it color array and on our
11:50 - constructor here let's receive a color
11:54 - and we're going to set our transform
11:57 - component okay image set the color to
12:01 - our color and in here I'm not a
12:04 - constructor let us grab a color from our
12:07 - array so the color won't go to the
12:10 - caller array and grab it random range
12:13 - between 0 and our caller array dot
12:16 - length and here give it the color okay
12:19 - so we are now picking a random color so
12:22 - let us go into the editor and let's
12:25 - select a bunch of colors okay I have set
12:31 - up all my colors now let's hit play and
12:33 - see the effect yep there you go they are
12:36 - moving at different speeds they got
12:37 - different colors they are rotating some
12:39 - clockwise some counterclockwise the size
12:42 - is random so there you have it now the
12:45 - only thing we're missing is cleanup
12:47 - because if we hit pause here and we
12:50 - check it out as you can see they spawn
12:52 - and they never vanish so let's clean up
12:54 - our objects once they go past our window
12:56 - so into my code here I am going to
13:00 - receive a float for the minimum Y and in
13:05 - here I'm going to give it the minimum Y
13:06 - which won't be minus
13:08 - height divided by two F and then here
13:11 - let's store our minimum line and then
13:18 - here if anchored positioned our Y if it
13:21 - is under our minimum Y then we want to
13:24 - destroy our transformed game object we
13:28 - will also want to stop updating it from
13:29 - the list and let's convert our update
13:31 - instead of a void let's return a boolean
13:33 - and we're going to return true when the
13:36 - object has been destroyed else we're
13:39 - going to return false
13:40 - so appear on our updates if update
13:44 - returns true then that means the
13:46 - confetti has been destroyed so let's
13:48 - remove it from the list
13:49 - confirming list remove our confetti and
13:54 - in here and let us create a new list of
13:56 - confetti so we are cycling through a
14:01 - clone of the original list and on it we
14:03 - are modifying the original list if you
14:06 - don't create a clone this would cause an
14:08 - error because you cannot modify an list
14:10 - whilst going through for each ok so
14:12 - let's see if our objects are being
14:14 - cleaned up there you go here's my scene
14:16 - here are the objects being spawned and
14:18 - once they go down there boom they vanish
14:21 - and are correctly being cleaned up ok
14:24 - great and there you have it a very nice
14:27 - fun effect that you can apply on a level
14:29 - complete or a player win as always you
14:32 - can download the project files and
14:33 - utilities for free from unity code
14:35 - monkey comm if you have any questions
14:38 - post them in the comments and I'll do my
14:39 - best to answer them and once again thank
14:41 - you for subscribing to the channel
14:43 - alright see you next time