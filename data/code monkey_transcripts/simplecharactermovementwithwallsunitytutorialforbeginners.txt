00:00 - hello and welcome I'm your code monkey
00:01 - in this video we're going to take our
00:03 - simple character movement and apply a
00:04 - hitbox detection let's begin
00:09 - so here's the character with movement
00:11 - from the previous video it's a simple
00:13 - character and using the keyboard I can
00:15 - move him around he moves in all
00:17 - directions and plays an animation
00:18 - depending on the move direction he can
00:20 - either be walking or idle and he plays
00:23 - he have an animation towards the last
00:24 - move direction so let's check the code
00:26 - so if you haven't seen the previous
00:28 - video the code in here is very simple
00:30 - now on our update we call our Hamill
00:33 - movement function and in that function
00:35 - we simply test for keyboard input based
00:38 - on the keys we set a bunch of floats to
00:40 - either move in the Y or in the x axis
00:43 - then we test if we are idle which is if
00:45 - both of them are zero if so we play an
00:47 - idle animation if we are not I don't
00:50 - then we calculate the move Direction
00:51 - using the move X and move Y that we set
00:53 - in here we normalize that vector and we
00:55 - play a walking animation using that
00:57 - movement direction as our animation
00:59 - direction so it's very simple and works
01:01 - perfectly fine but right now it doesn't
01:02 - check for any type of hitboxes so with
01:05 - just this code we could move through
01:07 - walls so let's go into the editor and
01:09 - add a simple law so in here make a new
01:12 - empty game object you need to call this
01:14 - our wall and give it a sprite renderer
01:18 - and also a box Collider 2d so here is
01:22 - our wall let's give it just a white
01:24 - rectangle just to be able to tint a
01:26 - pixel put it on a grey and increase the
01:29 - size and just like that we have a simple
01:32 - basic wall it's essentially just a box
01:34 - Collider so let's test and verify that
01:37 - the character does indeed completely go
01:39 - through the wall and ignore any collagen
01:41 - so in here I move up and yep there you
01:43 - go it's as if nothing exists okay so we
01:45 - want to make him actually hit the wall
01:47 - so let's go back into our code now in
01:50 - here when we are actually moving after
01:53 - we calculate the movement direction
01:54 - before we actually move them let's
01:56 - define a vector three for the target
01:59 - move position this is a position where
02:02 - we're going to move to so it's
02:04 - essentially our transform that position
02:05 - and then add where we're going to use in
02:08 - here so this is where we want to get to
02:12 - so now that we have our current position
02:14 - and our target position we can do a
02:16 - simple rake
02:17 - and see if there are any hitboxes
02:19 - between any of those two points for that
02:22 - I'm going to use physics 2d dot ray cast
02:25 - I'm using the 2d versions but this code
02:27 - works just the same in 3d so I'm going
02:31 - to do a ray cast starting on my
02:34 - transform dot position the direction I
02:36 - want to move towards is my move deer and
02:39 - for the distance we are moving speed
02:41 - multiplied by time dot the time that's
02:44 - how much we are moving in this frame so
02:46 - this function returns a ray cast hit ray
02:49 - cast hits like that so this ray cast it
02:53 - contains all the information that was
02:54 - returned from this ray cast so in here
02:57 - we can check if it has a Collider so we
02:59 - check if the raycast hit dot Collider if
03:03 - it is no then this essentially means
03:06 - that we can move since there was no hit
03:09 - if it is not known then we cannot move
03:12 - hit something so if we can move we
03:17 - simply do transform that position and we
03:19 - set the position to be our target move
03:21 - position and we can remove this down
03:24 - here and if we cannot move then we do
03:27 - nothing ok so when we move we actually
03:30 - play the animation and we set the last
03:32 - move direction and when we cannot move
03:33 - then we play the idle animation so let's
03:37 - test and see what happens when we touch
03:39 - the wall ok there's the character and if
03:41 - I move up if there you go he no longer
03:44 - goes through the wall he gets to it and
03:46 - he just stops moving so with the code
03:48 - setup like this we have correct
03:49 - collisions we cannot go through that
03:51 - wall which is exactly what we want
03:53 - however we have one annoying issue which
03:56 - is that we cannot slide along the wall
03:57 - so with one above me if I'm pressing W
04:00 - and D at the same time which means
04:02 - moving up and to the right you can see
04:04 - that there is no movement at all since
04:06 - we're hitting the wall so it's
04:07 - completely stopping the movement the
04:09 - correct thing to happen in this
04:10 - situation would be to ignore vertical
04:12 - movement but still add the horizontal
04:14 - movement otherwise it feels like the
04:16 - game is very sluggish since we can get
04:18 - stuck on the wall and it's very weird to
04:20 - move okay so let's go into the code and
04:23 - in here we are essentially looking for
04:26 - hits using our combined move Direction
04:28 - if that one fails
04:30 - that means we hit something so in here
04:32 - we want to test on just one direction so
04:34 - let's define a vector3 for the test
04:37 - moved here which will be a new vector3
04:41 - first let's test just horizontal
04:43 - movement so we're going to use the movie
04:45 - X and on the wire let's set it to zero
04:47 - and then normalize this vector so let's
04:51 - do the same recast the same combination
04:53 - for the target move position using this
04:55 - test move here instead of the previous
04:57 - move there okay and then we do our
05:00 - previous recast starting from our
05:03 - position moving towards test move nearby
05:05 - speed out the time okay so this is
05:08 - testing your ray cast moving only in the
05:10 - x-axis so in here if the raycast I'll
05:12 - come later if it is no then there's
05:15 - nothing on the horizontal movement so we
05:18 - can move horizontally and if not then we
05:22 - cannot move our example so if we can
05:27 - move let's move in the same that we did
05:29 - previously instead of using the move
05:31 - deer we're using this test move deer and
05:34 - we put them on the target move position
05:36 - exactly now if we cannot move
05:38 - horizontally then we want to test the
05:40 - vertical movement so essentially we're
05:42 - going to do the exact same thing except
05:47 - the test move deer instead of being
05:48 - using the X and zero on the Y we're
05:50 - going to use the Y and set a zero on the
05:53 - X so this is essentially only a vertical
05:55 - movement again we come late using the
05:58 - new test move direction we do the same
06:00 - workout same thing and we check for the
06:02 - competitor if there is no Collider then
06:04 - we can move vertically and if there
06:07 - isn't then we cannot move vertically and
06:10 - if we get to here then that means we
06:12 - can't move at all we can't move
06:13 - diagonally vertically or horizontally so
06:16 - in here we simply go back to I don't and
06:18 - if we can't move then we move in that
06:20 - direction and everything is exactly the
06:22 - same sin here cannot move diagonally
06:26 - test just moving in horizontal direction
06:31 - and here if we cannot move horizontally
06:34 - then we test just moving in the vertical
06:39 - direction
06:40 - so let's see if that is all correct okay
06:43 - so here I am and if I press just W okay
06:47 - he goes up he hit the wall and he
06:48 - stomped now he's currently playing
06:50 - animation that's a separate issue that
06:52 - we're going to solve but now if I press
06:54 - D if there you go he slides on the wall
06:56 - when he gets to the end he moves away so
06:59 - this way the code no longer seems very
07:01 - stuck the character never actually gets
07:04 - stuck and if we go in here and I'm still
07:06 - pressing that one pressing on the other
07:08 - keys and he's sliding alongside the wall
07:10 - when he gets to the edge yep he
07:11 - continues vertically and works the same
07:14 - on the other direction okay so let's
07:17 - just solve this issue which is when
07:19 - we're moving up now he's playing the
07:20 - walking animation when he should be
07:22 - playing the ional animation again the
07:24 - issue is it only happens when I'm
07:25 - pressing just up so let's see why that
07:28 - is so in here if we are not moving in
07:30 - the first direction which this he does
07:32 - find the collider so he doesn't run this
07:34 - and he goes in here now if I'm just
07:36 - pressing up then the move dear done X
07:39 - won't actually be zero so in here he's
07:41 - testing for a movement direction of zero
07:43 - zero so obviously there's no raycast
07:45 - from start to finish when the start and
07:48 - finish are exactly the same thing so we
07:50 - only want to do this free cast if the
07:52 - test move Direction is different from
07:54 - zero so in here we can simply do we can
07:57 - move horizontally if test move deirdr X
07:59 - if it is different from zero F then we
08:02 - are going to move horizontally if not we
08:04 - cannot move it and again the same thing
08:06 - in here we can move vertically if the
08:08 - test move here dot y if it is different
08:11 - from zero F and there's no collider so
08:14 - again if we do the same thing if we just
08:16 - press W then the movie around X won't be
08:19 - zero so this vector three won't be zero
08:21 - zero which means in here it will not
08:23 - pass this if since s move there that X
08:25 - will be zero so this one is false so it
08:28 - goes in this one and again if both of
08:30 - them are zero stops and so on so let's
08:32 - see that and here I am and if I move up
08:34 - yep there you go he stops in there yo
08:37 - he's playing the idle animation I'm
08:39 - still pressing W but again nothing is
08:41 - happening so I can slide and I go to the
08:44 - corner and
08:45 - and the character no longer seems stuck
08:47 - if I'm pressing a key the character is
08:49 - correctly responding to my input so
08:52 - there you have it we added hitbox
08:53 - detection to our movement our character
08:55 - now stops when encountering wants and
08:57 - automatically tries to find the
08:59 - direction that it can move towards as
09:00 - always you can download the project
09:02 - files and utilities from unity code
09:04 - monkey comm if you have any questions
09:06 - post them in the comments and I'll do my
09:07 - best to answer them subscribe for more
09:08 - videos and I'll see you next time