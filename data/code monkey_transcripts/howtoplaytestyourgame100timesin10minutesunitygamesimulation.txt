00:00 - in this video we're going to look at
00:01 - unity game simulation
00:03 - this is a fascinating tool that lets you
00:05 - quickly and easily test your game with a
00:06 - variety of parameters
00:07 - you can create a simulation to test your
00:09 - game a thousand times and they will all
00:11 - run in the cloud in parallel
00:13 - so this helps you save a massive amount
00:14 - of time and money
00:16 - let's begin
00:17 - [Music]
00:21 - this video is sponsored by unity alright
00:24 - so let's take a look at unity game
00:25 - simulation
00:26 - unity game simulation provides a
00:28 - scalable way to increase the accuracy
00:30 - and efficiency of your qa and game
00:32 - balancing testing efforts by simulating
00:34 - millions of game playthroughs and
00:35 - interactions in the cloud
00:37 - this is a feature that has the potential
00:39 - to be life changing for many small and
00:40 - large studios
00:42 - game balancing and testing is either
00:44 - very time consuming or very expensive or
00:46 - really both
00:47 - normally when testing your game you need
00:48 - to actually play the game so for example
00:51 - let's say you're testing a new weapon
00:53 - and you want to find out what is the
00:54 - best parameter for the damage amount
00:56 - so you set a value then you go play
00:58 - through a level let's say it takes you
00:59 - 10 minutes
01:00 - you get to the end and then analyze if
01:01 - you need to increase or decrease the
01:03 - damage amount
01:04 - so you change it and once again play
01:06 - through the same level and once again
01:07 - analyze the results
01:08 - so right away you can see how much time
01:10 - this home process takes
01:11 - the other approach is hiring some
01:13 - playtesters doing that they can all play
01:15 - at once which saves you some time but
01:16 - naturally that costs you money
01:18 - unit game simulation solves that problem
01:20 - by running multiple builds running at
01:22 - the same time in the cloud
01:23 - using lots of parameter combinations so
01:25 - you input testing parameters
01:27 - upload the build and wait for the cloud
01:29 - instances to finish all the tests and
01:31 - then analyze the results
01:33 - now as you look at this overview you
01:34 - might be asking the question
01:36 - okay so does that mean you need to make
01:37 - the game play itself and the answer is
01:39 - yes the game does need to play itself
01:41 - automatically since it's running on the
01:42 - cloud
01:43 - now in order to do that you have
01:44 - essentially three options
01:46 - the first option is just a fixed series
01:48 - of commands so for example if you were
01:50 - testing a tower defense game
01:52 - you would say at this number of seconds
01:54 - you place the tower on this position
01:55 - then after 30 seconds you place in
01:57 - another position and so on
01:58 - so that's one approach however this
02:00 - option really only works for games that
02:02 - have a relatively fixed design without
02:04 - much randomness
02:05 - so tower defense idle games possibly
02:07 - even some management games and so on
02:10 - if your game is more dynamic then you
02:12 - have the second option which is to make
02:14 - some classic ai
02:15 - so for example on a top-down shooter you
02:17 - would write a classic app for the player
02:19 - just like you did for the enemies
02:21 - so keep trying to reach the goal and
02:22 - look for any nearby enemies and kill
02:24 - them
02:25 - this is the standard ai that every game
02:27 - has to make except in this case you
02:28 - apply it to the player
02:30 - and lastly the third option is the more
02:32 - complex but also more versatile which is
02:34 - to use machine learning machine learning
02:36 - is a whole nother entire topic
02:38 - and something very interesting and very
02:39 - powerful so let me know in the comments
02:41 - if you'd like to see a video on using
02:43 - machine learning in unity
02:44 - essentially the way it works is you give
02:46 - it some parameters and learns how to
02:48 - play the game
02:49 - now depending on your data set and how
02:50 - much time you give it to learn it can be
02:52 - much smarter and faster to create than
02:54 - classic ai
02:55 - again unity already has machine learning
02:57 - called ml agents so let me know if you'd
02:59 - like to see a video on that
03:00 - alright so that's the overview of how
03:02 - unity game simulation works
03:04 - you make your game then you define some
03:05 - parameters you want to test
03:07 - you make a bot to play your game using
03:08 - any of the three methods
03:10 - then you upload the build to the cloud
03:12 - and define the parameter combinations
03:13 - you want to test
03:14 - you'll let the cloud run the build
03:16 - insanely fast with tons of instances
03:17 - running
03:18 - in parallel and then when it's done you
03:20 - analyze the results and apply them to
03:21 - improve your game
03:22 - there's links in the description in
03:24 - order to learn more about unit game
03:25 - simulation
03:26 - alright so now let's see how to actually
03:28 - use it in the simplest test possible
03:30 - okay so in order to get started first
03:32 - you need the unity version
03:33 - as of right now this is only working
03:35 - with the 2019.4 lts version so
03:37 - use that one so down here i already have
03:40 - 2019.4 installed
03:41 - and also the instances on the cloud are
03:43 - running on linux so when you install the
03:45 - unity
03:46 - version you also need to add the linux
03:47 - build module
03:49 - so here i already have 2019.4 with linux
03:51 - install
03:52 - alright so we just want to create a new
03:54 - project with this so over here create a
03:55 - new project
03:57 - and here i just want the most basic
03:59 - thing possible so let's just go with an
04:00 - empty 3d project
04:01 - let's call this unity game simulation
04:07 - alright so here we are in an empty
04:08 - project now in order to install a unity
04:11 - game simulation
04:12 - if you're watching this in the future
04:13 - then chances are you can open up the
04:14 - package manager
04:16 - and then here on the unt registry go
04:18 - down and look for the game simulation
04:20 - package
04:20 - however as of the time of this recording
04:22 - it does not show up here yet
04:24 - so we need to manually add the package
04:26 - which is very simple
04:27 - just close the project go into the
04:29 - project folder where we created the
04:31 - project
04:32 - and here go inside packages and you see
04:34 - the manifest.json file
04:36 - so edit this with any text editor so
04:39 - here i have it open in notepad
04:41 - so just go all the way down here and
04:43 - we're going to add a new line
04:44 - and it's going to be this one here just
04:47 - be careful with the comments so on this
04:49 - line you add a comma then you add online
04:51 - and on this one no com
04:52 - alright so this will add the game
04:54 - simulation package to our project
04:56 - now again like i said if you're watching
04:57 - this a long time in the future then
04:58 - chances are has already been added to
05:00 - the package manager
05:01 - and also if you're watching this just a
05:03 - little bit in the future make sure you
05:04 - check the link description just in case
05:06 - this version has changed
05:07 - okay so with this let's close and save
05:09 - this file and open the project again
05:15 - and now it should automatically download
05:17 - and install the package
05:18 - and you can verify that it installed
05:20 - correctly if you go up here on the file
05:22 - bar go into window and you see the game
05:24 - simulation button
05:25 - so there it is it's correctly installed
05:26 - now click on it and now here we see the
05:29 - game simulation window
05:30 - and right away you should see this
05:31 - message so this is telling us that we
05:33 - need to create a cloud project id in
05:35 - order to be able to use game simulation
05:37 - so let's dock this window down here and
05:40 - let's go up here into window
05:41 - then go into general and open up the
05:43 - services tab
05:44 - yep that one and now here just select
05:46 - your unity id and hit on create
05:48 - alright so that's it very simple now we
05:50 - have a cloud project id
05:52 - and down here on the game simulation we
05:53 - do see the correct window
05:55 - so what we have here is a simple
05:57 - interface to define
05:58 - all of our parameters and then to upload
06:00 - our build to the cloud
06:01 - so without touching anything if we just
06:02 - try running our game
06:04 - and we open up the console yep right
06:06 - away we see some messages in the console
06:08 - so everything is working
06:10 - all right now like i said let's make the
06:11 - most basic example possible
06:13 - so let's just move a cube towards the
06:15 - target area and then our parameter will
06:17 - be the movespeed
06:18 - so on our hierarchy let's just create 3d
06:20 - object make it a cube
06:22 - all right here we have our basic cube
06:24 - then let's make another one next to it
06:25 - this will be our target
06:27 - so just make a simple material
06:32 - all right so we have our basic cube and
06:34 - then we have our cube target
06:36 - and on the collider let's make it a
06:38 - trigger and essentially we're just going
06:40 - to have the cube move towards the target
06:42 - and when it enters the target trigger
06:44 - then we have our win
06:45 - now in order to make the trigger event
06:47 - work on our cube let's just add a rigid
06:49 - body component
06:50 - and let's disable gravity and make it
06:52 - kinematic so let's make a simple script
06:55 - this will be our player queue
06:59 - so just attach our script onto our cube
07:01 - just like that
07:03 - all right so now here let's make a
07:05 - simple update
07:07 - and on update we're going to move
07:08 - transform.position plus equals let's
07:10 - move it to the right so new vector3
07:12 - one zero okay we're moving to the right
07:16 - let's do it by a certain move speed so
07:18 - let's define
07:19 - up here a float for the move speed
07:23 - and let's default it to a certain amount
07:25 - all right so by move speed and also by
07:27 - time dot delta time all right so we're
07:29 - moving it just like this
07:31 - and our testing results will be based on
07:33 - the total time so let's also store that
07:34 - just a private float
07:36 - for the total time and on update we
07:40 - simply increase it by time dot delta
07:41 - time
07:42 - all right so we have this and now with
07:44 - this right away we only have a single
07:46 - parameter
07:46 - however the big benefit of game
07:48 - simulation is when combining multiple
07:50 - parameters
07:50 - so let's just add another simple
07:52 - parameter let's make it a
07:54 - private float for the wait timer
07:58 - so essentially it won't wait for this
07:59 - amount of time before starting to move
08:04 - so if the wait timer is above zero then
08:06 - we count down and when it's under zero
08:08 - then we actually move our object so very
08:10 - simple
08:11 - then we have our win condition so let's
08:13 - make a on
08:14 - trigger enter so when that happens then
08:16 - we have won the game
08:17 - so here let's just do a debug.log
08:20 - say when and then our total time
08:24 - all right so that's it this is our very
08:25 - basic test let's see
08:27 - here we are and after one second the
08:28 - cube starts moving moves forward and yup
08:30 - enters the collider and we have our win
08:32 - message
08:32 - all right so far so good so here we have
08:35 - our very simple scene
08:36 - now what we want to test is define a
08:38 - parameter 4 in the move speed another
08:40 - one for the wait timer
08:41 - and then we check the total time for
08:43 - each move speed and wait time or
08:45 - parameter combination
08:46 - so for that let's go into the game
08:47 - simulation window over here on the
08:49 - parameter setup
08:50 - let's click down here to add another
08:52 - parameter so here we have a name so for
08:54 - names will be our move speed
08:57 - for the type this will be a float and
08:59 - now here we have the default value
09:00 - so let's put the same thing that we use
09:02 - so let's put in a5 now in here it is
09:04 - very important that the default value is
09:06 - a valid value
09:07 - the game needs to be able to work using
09:09 - this value when the cloud build is
09:11 - validating it won't be using this one in
09:12 - order to make sure it works
09:14 - so for example in this scenario we want
09:16 - to test to make sure that move speed is
09:18 - valid
09:18 - so that it reaches the goal so for
09:20 - example if i were to leave this at zero
09:22 - then it would never reach the gold and
09:23 - the build one found it
09:24 - so make sure this is a valid value so we
09:26 - have this one and let's make another one
09:28 - for the wait timer
09:31 - and again it is also a float and let's
09:33 - default it to one
09:35 - and after you set on the values don't
09:36 - forget to click on save
09:38 - this is now uploading all the parameters
09:40 - onto the cloud project id
09:42 - all right so here we have our parameters
09:44 - now let's actually use them
09:45 - so back in the code here first thing we
09:47 - need is to use the simulation namespace
09:49 - so we add using unity.simulation.games
09:54 - then let's make a private void start
09:57 - and on start the first thing we do is
09:59 - fetch the configuration for this game
10:01 - simulation
10:02 - so we go into the game scene manager
10:06 - we access the static instance and then
10:08 - we call the function
10:09 - fetch config so my name implies this one
10:11 - fetchy configuration with all the
10:13 - parameters
10:14 - so this one takes an action which is a
10:17 - delegate that gets run when the download
10:18 - is complete
10:19 - now if you're not familiar with
10:20 - delegates go check the video link in the
10:22 - description where i cover them in detail
10:24 - so it's an action that has a parameter
10:26 - of game seam config
10:27 - response so let's make it in here
10:34 - all right we have this function and this
10:36 - will be our donut
10:37 - all right so we access the game scene
10:39 - manager instance we tell it to start
10:41 - downloading in fetchy configuration and
10:43 - when that's done it's going to call this
10:44 - function so it's called in here
10:46 - and then in here we can access this
10:48 - object so the game sim config
10:49 - response and here we have a whole bunch
10:51 - of functions to get all of our various
10:53 - parameters
10:54 - now in our case we define two floats so
10:56 - just call getfloat
10:57 - and then we pass in the name for the key
10:59 - so first of all we have
11:00 - move speed and we set our move speed to
11:03 - this one
11:04 - and then the same thing for the weight
11:06 - timer and we set it to this one
11:09 - all right so that's pretty much it for
11:11 - setting the parameters now one thing
11:13 - is we only want the game to start
11:14 - playing after the download has finished
11:16 - and after we apply our parameters
11:18 - so let's make a simple boolean to define
11:20 - if the game is ready to play
11:22 - so here just see simple private goal is
11:25 - ready
11:26 - and let's default it to phones
11:30 - and then on update if we're not ready
11:33 - if not is ready then we simply return so
11:36 - we don't do anything
11:37 - and then in here after we finish the
11:38 - configuration we set is ready to true
11:40 - and that's pretty much it so we start
11:42 - off it is not ready so it's not going to
11:44 - run
11:44 - anything it's going to first wait for
11:46 - the configuration to finish downloading
11:48 - when that is done we assign all the
11:50 - various parameters we set it to true and
11:51 - we start actually playing our game
11:53 - okay so we have downloaded our
11:55 - parameters and now down here we have our
11:57 - win function
11:58 - so it's in here that we set the result
12:00 - of our testing which in this case we
12:01 - want to save our total time
12:03 - so in the game simulation api the output
12:05 - results are called counters
12:07 - so again we go into the game scene
12:09 - manager to access the static instance
12:11 - and then we can write counters to see
12:12 - all the various functions so we have one
12:15 - where we can
12:15 - increment one every time then we have an
12:18 - ability to reset a specific counter
12:20 - we can set a counter to a specific value
12:23 - or we can
12:24 - also take a snapshot of the current
12:25 - state of all the counters so this one
12:27 - saves the current state of all the
12:28 - counters at this point in time
12:30 - so in this case we just want the most
12:31 - basic thing which is setting a specific
12:33 - counter to a specific value
12:35 - so we just call this then for the
12:37 - counter name in here and let's say our
12:39 - total time
12:40 - and we pass in the total time now here
12:43 - one very important thing is the type of
12:45 - the second parameter
12:46 - as you can see this one is long and it
12:48 - only supports log
12:49 - now if you're not familiar with long
12:51 - it's essentially the same thing as an
12:52 - int
12:52 - meaning that it stores whole numbers the
12:55 - difference is it has a much wider range
12:57 - since inside are stored in 32 bits
12:59 - whereas the log is stored in 64 bits
13:01 - but like i said only whole numbers so we
13:03 - cannot use a photon here
13:05 - so one approach would be just to cast
13:07 - this into a loan
13:08 - so this works however what this does is
13:10 - it force the value
13:12 - so for example if our time is 1.9 we end
13:14 - up storing just one
13:16 - now depending on what you're trying to
13:17 - test this can be just fine so for
13:19 - example if you're testing the time to
13:20 - complete the level that is usually about
13:22 - 10 minutes
13:22 - then a precision of one second is
13:24 - probably enough however in our example
13:26 - this scenario won't run for less than 10
13:28 - seconds so a bit more precision would be
13:30 - helpful
13:31 - so the easy solution is just to multiply
13:33 - it by a certain value like
13:34 - let's say by a thousand so in this case
13:36 - our time will be stored in milliseconds
13:39 - all right so that's it we are saving our
13:41 - counter now the last thing that we need
13:43 - is to make sure that the game quits
13:44 - so to do that we just do
13:46 - application.quit
13:48 - this will stop the game which won't free
13:50 - up resources in the cloud in order to
13:51 - allow another instance to run
13:52 - its place however while we're testing
13:54 - this in the editor we really don't want
13:56 - it to quit itself
13:57 - so we can add a simple compiler if so if
14:01 - we are running in the editor
14:02 - so we can use unity underscore editor
14:06 - so if so then we go into the unity
14:08 - editor namespace
14:10 - in order to access the editor
14:12 - application and simply set is playing
14:14 - into fonts so this will automatically
14:16 - stop the editor
14:17 - and if we are not running this in the
14:20 - editor then we simply call
14:21 - quit all right so that's it
14:24 - and with this we have everything set up
14:27 - so the first thing we do is we fetch the
14:28 - config
14:29 - then we grab one of our parameters and
14:31 - we start our game
14:32 - and when we have our win connection then
14:35 - we set the counter to save our actual
14:37 - value
14:38 - and then finally we quit the game okay
14:40 - so everything is set up
14:42 - let's go back into the editor and in
14:44 - here before we upload anything
14:46 - let's first try playing the game okay
14:48 - here we are with the game running and
14:49 - down here you can see what it's doing
14:50 - you know it's moving and it quits and
14:52 - yep there you go perfect
14:53 - so here you can see everything that
14:55 - happened so it started fetching the app
14:56 - config
14:57 - then it grabbed it and you can see that
14:59 - it grabbed the default value so wait
15:00 - timer of one move speed to five
15:02 - then it ran the game ran the simulation
15:04 - we got to the end
15:05 - we wrote the counters files and we quit
15:08 - the application
15:09 - alright so everything is working now
15:12 - just go into the game simulation window
15:14 - and in here let's go into build upload
15:16 - and here this will create and upload a
15:18 - linux build for our simulation
15:20 - so make sure you take whatever scenes
15:21 - you have here i just have this one
15:24 - and also let's make sure we save it just
15:25 - in case there are any changes
15:27 - and then just give it a build name so
15:30 - here
15:30 - let's just make it test unity game
15:33 - simulation
15:34 - and that's it and let's just do build
15:36 - and upload so like the name implies it
15:38 - is now making the
15:39 - linux build and then it uploads it to
15:41 - the server
15:46 - all right it's done the build has been
15:47 - uploaded you can see over here on the
15:49 - console there you go build succeeded and
15:51 - it correctly uploaded
15:52 - now when that is done you can go here
15:54 - and click on the create simulation
15:56 - button
15:57 - so this will open up the browser to the
15:58 - game simulation dashboard or
16:00 - alternatively you can go there manually
16:02 - so just go directly onto
16:05 - gamesimulation.unity3d.com
16:07 - and here you see all the various project
16:08 - lists so in our case we have the nt game
16:10 - simulation
16:11 - so here we are and this is a list of all
16:13 - of our simulations for this project
16:15 - all right so now we click on create
16:17 - simulation which will take us to the
16:18 - same place as clicking on that button in
16:19 - the editor
16:21 - and over here we can start off by giving
16:23 - it a name so let's give it something
16:24 - like the first test
16:26 - then we select our build from the drop
16:28 - down menu right now we just have one so
16:30 - it's not like this one
16:31 - and then down here we have the really
16:32 - interesting part which are the various
16:34 - parameters
16:35 - so you can see that we have the move
16:36 - speed and the weight timer both of our
16:38 - floats
16:39 - and then in here we have the crucial
16:40 - part of this whole system which are the
16:42 - values for these parameters
16:43 - so in here we can input all the multiple
16:46 - values that we want to test
16:47 - so for example we want to test with the
16:48 - move speed of 5 let's also test with a
16:50 - move speed of 3.5
16:53 - and let's also test with a move speed of
16:55 - 6 and then on the wait timer
16:57 - let's test with a wait timer of 1 and a
16:59 - wait timer of 0.
17:00 - so each of these will be different
17:02 - distinct values that the simulation
17:03 - won't run with
17:04 - and then down here we can see the number
17:06 - of parameter combinations
17:08 - so we have three possible values in here
17:10 - and two in here so we have a total of
17:11 - six possible combinations
17:13 - so for example the first one will be
17:14 - with move speed of five and with a
17:16 - weight timer of one
17:17 - the next one will be with the movement
17:18 - of five wait time of zero and so on
17:21 - then this setting is the number of runs
17:23 - per each parameter combination
17:25 - so let's set it for example at five so
17:28 - this will run five instances with a move
17:30 - speed of
17:30 - five and a wait timer of one then it
17:32 - will run another five instances with a
17:34 - move speed of five and wait time of zero
17:36 - and so on so using that then we have our
17:38 - total number of runs
17:40 - and then down here we have the max
17:41 - runtime per run in minutes
17:43 - so after this amount of time the build
17:45 - automatically terminates whether it is
17:47 - finished or not
17:48 - now in this case we're testing a very
17:49 - simple example that will take something
17:51 - like 10 seconds per run
17:52 - so let's put it just a simple minute all
17:55 - right so that's it
17:57 - these are all the settings now just
17:59 - click on run to queue up the simulation
18:01 - and if there it is over here we have our
18:03 - simulation all right now all that's left
18:04 - to do is we're only just wait
18:06 - now naturally this will depend on the
18:07 - complexity of the simulation
18:09 - so in this case it should take probably
18:11 - about 30 minutes
18:12 - so i'm going to wait a bit and get back
18:14 - to it alright so here i am a bit later
18:16 - and the simulation has completed
18:18 - so in here we can see our status and it
18:20 - is indeed complete and we can see how
18:22 - many minutes in total the whole
18:23 - simulation took
18:24 - and then we can download the reports so
18:27 - over here we have three types
18:29 - we have raw data aggregate data and
18:31 - plato logs
18:32 - now the raw data contains all the data
18:34 - separated for every single run
18:37 - the aggregate data groups the multiple
18:39 - runs we saw before
18:40 - and the player logs lets you access the
18:42 - unlocks for each individual instance
18:44 - now these are all standard tsv files so
18:47 - just text separated by tabs
18:49 - you can open them in just about any
18:50 - spreadsheet program like for example
18:52 - google sheets
18:53 - so here imported all those files into a
18:55 - symbol on google sheets
18:57 - so here i have all those files nicely
18:59 - imported
19:00 - and first of all we've got the player
19:02 - logs so this one contains a link and
19:04 - with this link you can download the log
19:06 - for each specific run
19:07 - so for example run over here number
19:09 - seven and here it is and you can see
19:11 - it's a standard unity log
19:13 - so for example if something goes wrong
19:15 - and a bug happens in your build you can
19:16 - go through the logs to see exactly what
19:18 - happened
19:19 - then you have the raw data so these are
19:21 - the raw results for every single run
19:24 - so for example we can see all the
19:25 - parameters used so
19:27 - on this run right here with an id of 22
19:29 - it ran the simulation with a wait timer
19:31 - of zero and a
19:32 - speed of 3.5 and end with a total time
19:35 - of 2500 so again the counter is always
19:38 - long so remember that we multiplied by a
19:40 - thousand
19:41 - so essentially with this move speed and
19:43 - wait time of zero it took 2.5 seconds
19:46 - now you can see how some parameters are
19:47 - duplicated so multiple with weight timer
19:49 - 0 and move speed of 3.5
19:52 - that is because we set it to run five
19:53 - times on every parameter combo
19:55 - so we have a single line for every
19:57 - single one of our runs and then we have
19:59 - the aggregate results
20:00 - and now this one it aggregates the
20:01 - results of each specific parameter
20:03 - combination
20:04 - so over here we have all of our various
20:06 - combinations and then our aggregate data
20:08 - so you can see the average the maximum
20:10 - the minimum the standard deviation and
20:12 - the sum
20:13 - and how many instances ran with this
20:14 - parameters now in our example we didn't
20:17 - have any randomness so the only
20:18 - difference here is just based on the
20:19 - time dot delta time
20:21 - so the differences here is pretty much
20:22 - just random noise but in a more concrete
20:24 - example this would give you some very
20:26 - useful data
20:26 - and again with all this then you can
20:28 - make your conclusions and figure out
20:29 - what to do about it
20:30 - now in our simplified example the
20:32 - results are pretty obvious so this one
20:34 - is already sorted by the average amount
20:36 - so we can see in our obvious example the
20:38 - fastest way is the highest move speed
20:40 - with a low sweet timer so wait time for
20:42 - zero remove speed of six
20:43 - takes just 1.5 seconds and obviously the
20:46 - slowest will be the one with the highest
20:47 - weight timer
20:48 - and the lowest move speed however let's
20:50 - say that we didn't want to see exactly
20:53 - the fastest time
20:54 - but instead we wanted to end it at let's
20:56 - say 1.8 seconds
20:57 - if so then we would know okay so these
20:59 - are some good parameters for them
21:00 - so with this you can see just how
21:02 - versatile this system is
21:03 - you can imagine a more complex example
21:05 - where you would use this to figure out
21:07 - let's say the best acceleration and top
21:09 - speed in order to have the player finish
21:10 - the race in 60 seconds
21:12 - or perhaps you would have an endless
21:14 - horde mode where you wanted the player
21:15 - to live on average for 3 minutes
21:17 - and you would use this system to define
21:19 - how many enemies to spawn per wave
21:21 - or accomplish other examples depending
21:23 - on exactly what type of vm you're making
21:25 - so this is a really awesome feature that
21:27 - has endless use cases and can really
21:29 - help you save a massive amount of both
21:30 - time
21:31 - and money alright so i hope you like
21:33 - this introduction into unity game
21:35 - simulation
21:35 - the package is in preview and in active
21:37 - development so unity is looking for all
21:39 - the feedback they can get
21:40 - try it out for yourself and if you have
21:42 - any issues go into the forums
21:44 - or email the team directly this is a
21:46 - really fascinating feature that can be a
21:47 - huge help to both small indie developers
21:49 - as well as large studios
21:51 - now stay tuned for more videos on doing
21:53 - some interesting simulations
21:55 - and also let me know in the comments if
21:56 - you're interested in a video on ml
21:58 - agents
21:58 - and combining game simulation with
22:00 - machine alert alright so thanks for
22:02 - watching
22:02 - if you found this video helpful consider
22:04 - liking and subscribing and i'll see you
22:05 - next time
22:12 - [Music]
22:15 - you