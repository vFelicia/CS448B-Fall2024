00:00 - hello and welcome i'm your code monkey
00:02 - and here let's learn how to take a
00:03 - screenshot in unity we're going to look
00:05 - at an extremely simple method just
00:07 - literally one line of code and saves a
00:09 - screenshot and then we're going to look
00:11 - at a more advanced method which is also
00:12 - more versatile we can take a screenshot
00:15 - of the whole screen or only parts of it
00:16 - and use that same logic to convert any
00:18 - part of our camera into a simple texture
00:20 - which we can then use to build some
00:22 - really interesting things we can choose
00:23 - to include the ui or not we can take a
00:25 - super resolution screenshot and we're
00:27 - going to look at the difference between
00:29 - the old built-in render pipeline and the
00:31 - new ones urp and agrp if you prefer a
00:33 - more guided path with step-by-step
00:35 - lectures then check out my complete
00:37 - courses learn how to make a builder
00:39 - defender game using c-sharp just like i
00:41 - make my own steam games or learn how to
00:44 - make games internally using visual
00:45 - scripting or learn all about unity with
00:47 - the ultimate overview course which
00:49 - contains over 13 lectures each covering
00:51 - a different tool or feature of the
00:53 - engine to help you make better games
00:54 - faster i'm always available in the
00:56 - courses q a section answering your
00:58 - questions every single day so check out
01:00 - all the courses with the link in the
01:01 - description okay so i've already made
01:03 - this video once before a couple of years
01:04 - ago that video is using the built-in
01:06 - render pipeline so if you're using that
01:08 - you can go watch that video but if
01:10 - you're using the universal render
01:12 - pipeline or the high definition render
01:14 - pipeline then there's some slight
01:15 - changes so keep watching the video and
01:17 - here i will also mention multiple
01:19 - methods okay so first of all here is my
01:21 - demo scene it's just a static scene this
01:24 - one is from the polygon heist pack if
01:25 - you want to get it and also note how in
01:27 - this scene i've got a ui element up here
01:29 - this is going to be important so i want
01:31 - to be able to press a button and take a
01:33 - screenshot now if what you want is an
01:35 - exact screenshot then there's actually
01:37 - super simple method which i didn't
01:38 - actually cover in that other video so
01:41 - let's just make a script
01:43 - okay so let's listen to a simple key
01:45 - press
01:49 - now here we can use the class screen
01:52 - capture
01:55 - and in here as you can see we've got
01:56 - various functions for taking a
01:57 - screenshot
01:59 - you can do one which takes a screenshot
02:00 - and saves it on a rendered texture
02:02 - another one on a texture 2d and final
02:05 - one just take it and save it to a file
02:06 - immediately so this one truly is the
02:08 - simplest method you just call on that
02:10 - and pass in a file name so let's say
02:12 - gamescreenshot.png
02:15 - and that's it just one line of code
02:17 - let's test
02:18 - so here i am and i press the button
02:20 - and up here is my project folder and
02:22 - over here i've got the game screenshot
02:24 - and yep it is indeed the game screenshot
02:27 - so this truly is the simplest method for
02:29 - taking a complete screenshot also note
02:31 - how it also includes the ui
02:33 - and one more thing on the size of this
02:35 - screenshot if you're looking the
02:36 - properties you can see this is a 1080p
02:38 - screenshot and the reason for that is
02:40 - because over here on the game window
02:41 - isolated 1080p but if your players were
02:44 - using a different resolution then that
02:45 - would be the size okay so this strongly
02:47 - is the simplest method just a single
02:49 - line of code
02:50 - but on this function you also have
02:51 - another optional parameter you've got
02:53 - the supersize so this is going to
02:55 - multiply the resolution by this amount
02:57 - so for example let's say four now run
02:59 - the game and take a screenshot again
03:01 - and up here is my screenshot now it's 16
03:03 - megabytes and if i look in the
03:05 - properties now it's four times 1080p
03:07 - so this can be useful if you're trying
03:09 - to take a screenshot of your game for
03:11 - print and you need a massive resolution
03:13 - so that's one scenario where you could
03:15 - use the supersize parameter also like i
03:17 - said note how with this method it
03:18 - automatically captures the ui but if you
03:21 - didn't want that then you could simply
03:22 - disable the canvas just before taking
03:24 - the screenshot okay so this is the super
03:26 - quick method literally just one line of
03:28 - code now let's look at a more advanced
03:30 - method which also allows for more
03:32 - interesting use cases
03:33 - now the main difference for the two
03:35 - methods that we're going to see is that
03:36 - one captures the ui and the other does
03:38 - not so for the first method we actually
03:40 - need to create a code routine
03:44 - and now the reason why this has to be a
03:46 - co-routine is because we're going to do
03:48 - a yield return
03:49 - and then do a new wait for end of frame
03:53 - what this line does it's going to pause
03:54 - the execution of this co routine until
03:56 - the entire frame finishes rendering so
03:58 - the camera is going to render the image
04:00 - render all the effects the ui and then
04:02 - finally after all that the code
04:04 - continues from here
04:05 - so after that happens then we can run
04:07 - our screenshot logic
04:09 - now the first thing we need is a texture
04:11 - 2d to hold our resulting image
04:15 - so in order to create we need a width
04:17 - and height so if you want to make a
04:19 - screenshot of the exact same size then
04:20 - you can simply define it as a screen
04:22 - width and height
04:26 - next up for the format now this is
04:28 - pretty important if your screenshot
04:29 - comes out and looking gray then take a
04:31 - look at the format
04:33 - in my case i normally tend to use
04:35 - argb-32
04:36 - and finally do you want mipmaps or not
04:39 - now for a screenshot we probably don't
04:40 - need them but if later on you're using
04:42 - this for some other use cases then maybe
04:44 - you might want them but again in this
04:45 - case we'll just leave it on false
04:48 - okay so we have created our screenshot
04:49 - texture our texture 2d
04:52 - and now the function that we're going to
04:53 - use to record the camera view onto this
04:55 - texture is we go into our screenshot
04:57 - texture and we call read pixels
04:59 - so this one takes a rectangle of the
05:01 - area that we want to capture so again
05:03 - let's build one with the screen
05:04 - dimensions
05:07 - and then for the destination x and y we
05:09 - want to print this onto the texture on
05:11 - the lower left corner so let's use just
05:12 - that
05:14 - and then finally we can do the
05:16 - screenshot texture
05:18 - called dot apply to apply all changes
05:20 - okay so that's it now our texture will
05:22 - have the view of the screen now with
05:24 - this done all we really need to do is
05:26 - save it and before we save we need to
05:27 - convert this into an actual saveable
05:29 - format so for that thankfully we can use
05:32 - the screenshot texture
05:35 - and just run encode to png or any of the
05:38 - others but png is usually pretty good
05:40 - so this returns a byte array
05:44 - and then with the byte array you can
05:45 - simply go into system.io dot file dot
05:48 - write on bytes
05:50 - and just write in this byte array
05:54 - all right so i'm just using the
05:56 - application.datapath so this is the path
05:58 - to the game data folder and then inside
06:00 - just
06:00 - camerascreenshot.png okay so that's it
06:03 - all we need to do is run this co routine
06:05 - so just up here
06:07 - when we press the button start co
06:08 - routine and start this code routine okay
06:11 - so let's test
06:12 - okay here i am and press the button
06:15 - and if i look in this case inside of the
06:16 - assets folder there it is the camera
06:18 - screenshot and yeah there it is there's
06:20 - our screenshot so as you can see this
06:22 - method contains an exactly perfect
06:24 - screenshot so it has all the camera view
06:26 - as well as the ui
06:28 - now again like i said previously if you
06:29 - didn't want the ui you could disable the
06:31 - canvas like i mentioned that other
06:32 - method or you can instead use the next
06:35 - method by the way if you find the video
06:37 - helpful please hit the like button it's
06:39 - a tiny thing but it really does help
06:40 - thanks so for this next method that's
06:42 - where it comes the difference on urp and
06:44 - agrp as compared to the old built-in
06:46 - render pipeline
06:48 - so in the screenshot video this is where
06:50 - i then use the function
06:51 - [Music]
06:53 - on post render
06:55 - so this one was called when the frame
06:57 - finishes rendering however this function
06:59 - really only runs on the built-in render
07:01 - pipeline so if you're using urp or hdrp
07:03 - then this will never be called
07:06 - so the alternative is instead to
07:08 - subscribe to a callback on the render
07:09 - pipeline
07:10 - so first we need to add using unity
07:13 - engine.rendering
07:15 - and then we can just go make a simple
07:17 - awake
07:18 - then access the render pipeline manager
07:21 - and now here we've got all kinds of
07:22 - callbacks
07:23 - so this one and camera rendering won't
07:25 - be called when the camera finishes on
07:27 - the rendering
07:28 - so you can just add a comeback onto this
07:30 - one
07:31 - and as usual when subscribing to a
07:33 - comeback or an event make sure you
07:34 - handle some cleanup
07:36 - so in this case you could either add on
07:38 - awaken on destroying over here
07:40 - unsubscribe
07:41 - or alternatively instead of these two
07:43 - just on enable
07:46 - on enablement disable so on that one
07:47 - subscribe and on this one unsubscribe
07:49 - okay so we've got this function
07:51 - and now here we can just run the normal
07:53 - screenshot logic so let's just copy this
07:56 - and just place in there and all the
07:58 - screenshot logic is exactly the same
08:00 - however again this one is a comeback on
08:02 - the render pipeline so this will
08:04 - actually be called on every single frame
08:06 - now that's not what we want so let's add
08:07 - a simple
08:10 - boolean so just a simple volume when you
08:13 - press the button set it to true over
08:15 - here if it is true set it to phones and
08:17 - take a screenshot okay so with that done
08:19 - we can now test so here we are let's
08:21 - press the button there you go i took a
08:23 - screenshot
08:24 - and here is the camera screenshot and
08:26 - yep there we have our screenshot now
08:28 - note how with this method it only has
08:30 - the camera view so the ui is not
08:32 - displayed that is the one big difference
08:34 - when compared to the previous method so
08:36 - the previous method using a co routine
08:38 - it waits for the end of frame and then
08:40 - it reads the whole thing whereas this
08:41 - one runs after the camera and before the
08:43 - ui so that is why the ui is not included
08:46 - now like i said these last two methods
08:47 - they are much more versatile than this
08:49 - one which is just a single line of code
08:51 - so first of all you don't have to take
08:53 - an entire screenshot of the home screen
08:55 - so for example if you only want to
08:57 - capture the middle or just a single
08:59 - corner
09:00 - then over here just something like 256.
09:03 - so if we run this and take the
09:04 - screenshot and if there's the camera
09:06 - screenshot it's just a 256x256 texture
09:09 - and as you can see it contains just that
09:10 - little corner so using the first method
09:12 - takes a full screenshot but with this
09:14 - one you have control over exactly what
09:16 - part of the screen you want to record
09:18 - in order to select which part you want
09:19 - to record you really just need to play
09:21 - around both the width and height and
09:23 - over here on the right just modify the x
09:24 - and y for the starting pixels
09:27 - so you can grab any part of your screen
09:29 - also yet another method somewhat related
09:31 - to this is you should know about
09:33 - rendered textures which i covered in
09:34 - detail in another video that one allows
09:37 - you to get the view of any camera you
09:38 - want and do something with it
09:40 - so maybe another camera with a different
09:42 - post processing placed on a different
09:44 - part of the map for example go watch my
09:46 - video on how to save a screenshot along
09:47 - with the save file in there i cover how
09:50 - you can save a view of a different
09:51 - camera in order to make the saved image
09:53 - different from what the main camera sees
09:55 - then of course with whatever texture you
09:57 - grab from this approach you could then
09:58 - show it in a ui element or maybe feed it
10:01 - to a shader or something like that so
10:03 - you can see this last approach which
10:05 - composes of these two methods this one
10:07 - is more complex but also is much more
10:09 - versatile but if all you want is just a
10:11 - single screenshot then a single line of
10:12 - code will do
10:14 - now go ahead and implement either one or
10:16 - both these methods in your game again if
10:18 - you're looking for a more guided path
10:20 - with step-by-step lectures then check
10:21 - out my complete courses alright hope
10:23 - that's useful check out these videos to
10:25 - learn some more thanks to these awesome
10:27 - patreon supporters for making these
10:29 - videos possible thank you for watching
10:31 - and i'll see you next time
10:35 - [Music]