00:00 - in this video we're going to learn how
00:01 - to convert a system from 2d into 3d most
00:04 - of my videos are made in 2d in order to
00:06 - keep things simple and easy to
00:08 - understand but they are not limited to
00:09 - just 2d so here we're going to see how
00:12 - we can take any of those and convert
00:13 - them to work in 3d let's begin
00:18 - [Music]
00:22 - hello and welcome I'm your code monkey
00:25 - and this channel is all about helping
00:26 - you will learn how to make your own
00:28 - games with enough tutorials made by a
00:29 - professional indie game developer so if
00:31 - you find the video helpful consider
00:33 - subscribing
00:33 - this videos patreon sponsor is bad
00:35 - adventure bad adventurer is a game
00:38 - development duo currently working on
00:39 - their first game Wayfarers edge it's a
00:42 - RPG focused on exploring and settling
00:44 - unknown frontier lands in a low fantasy
00:46 - and Wild West theme check them out at
00:48 - bat Adventure calm ok so as I said and
00:51 - most of my videos art into work
00:53 - including however very few of them are
00:56 - actually limited to two the only with a
00:58 - few tiny changes almost all those
01:00 - systems can work just the same in 3d
01:02 - that's exactly what I did when I made
01:04 - the wash your hands video game the game
01:06 - is built in 3d but it uses a lot of
01:09 - systems that were previously made in 2d
01:10 - so here we're going to look at a scene
01:12 - that we made in a previous video in 2d
01:14 - and we're going to convert all the
01:17 - underlying systems to make it work in 3d
01:19 - so this is the grid combat system made
01:21 - in a previous video and here it is
01:23 - everything working in 2d and everything
01:25 - is functional so I have my character I
01:27 - can move it on turn-by-turn basis and
01:29 - attack an enemy yep there it is and
01:32 - we're going to convert that into this
01:33 - version functionally it's exactly the
01:36 - same but as you can see everything is
01:37 - built in 3d so here's my character I can
01:40 - still move them I can still attack and
01:42 - yet there you go everything works so
01:44 - we're going to convert the underlying
01:46 - grid system then we're also going to
01:48 - convert the Talman the mouse as you can
01:50 - see is also positioned in 3d the damage
01:53 - pop-ups and the health bar are also in
01:55 - 3d as well as the same machine virtual
01:58 - camera and the characters which are
02:00 - always in 3d check out the code monkey
02:02 - upon steam interactive tutorials
02:05 - complete games and more click knowing
02:06 - the description and add it to your wish
02:08 - list this video is made possible thanks
02:10 - to these awesome supporters go to
02:12 - patreon.com/scishow to code monkey to
02:14 - get some perks and help keep the videos
02:16 - free for everyone alright so this our
02:18 - goal
02:18 - let's get to it okay so here we are in
02:21 - our starting scene so what we have here
02:23 - is what we ended up with in the great
02:25 - combat system video so everything is in
02:28 - flat 2d with basic turn-based logic so
02:31 - everything works and now we want to
02:32 - convert all this into 3d let's
02:36 - off with the simplest and most obvious
02:37 - which is the camera so here we are using
02:40 - a to the Eason machine virtual camera so
02:43 - here it is our virtual camera and
02:45 - weights doing is it simply following
02:47 - this empty game object so as this game
02:49 - object moves that's how we are handling
02:51 - the camera so to convert our camera from
02:53 - 2d into 3d we just select our main
02:56 - camera and in here instead of
02:57 - orthographic make it a perspective and
03:00 - now just set on the fields alright so
03:05 - here is our set up so everything still
03:07 - looks exactly the same but it's using
03:09 - perspective instead of orthographic so
03:11 - the camera does not rotate it simply
03:13 - pans to film sorry alright so for
03:15 - converting the camera this is pretty
03:17 - much all it takes here in the editor we
03:20 - can see that our sprites are Stone for
03:22 - the cone but our camera is now yep
03:23 - nicely in 3d now we can start placing
03:26 - our objects in 3d so first let's handle
03:28 - the background now there are two ways we
03:31 - can do this we can use a sprite renderer
03:33 - like we're already using and we simply
03:35 - rotate it in order to make it flat or we
03:39 - can use a proper 3d mesh so in order to
03:41 - make this as 3d focus as possible let's
03:43 - use the mesh instead so in here let's
03:46 - create a new 3d object let's make it a
03:48 - simple quad okay here's our quad now
03:51 - let's flatten it so 90 degrees in there
03:53 - okay it's flat and now one of the main
03:55 - differences between 2d and 3d is in here
03:58 - we absolutely need a material so let's
04:00 - make a material for our ground make a
04:02 - new material Brown material some like
04:05 - the background ok there's our material
04:06 - and just apply to this it's not all it's
04:09 - places on Y of 0 so it's down there and
04:12 - just scale
04:26 - all right so there it is
04:28 - we have our ground object with our
04:30 - ground material it's placed on zero zero
04:33 - zero and it's rotated to be flat
04:35 - pointing upwards so here in the camera
04:37 - we can see our ground now we can modify
04:40 - our camera movement to move on the X
04:42 - which is good but instead of moving on
04:44 - the one let's move it on the Z so here
04:46 - on our main script we have our sin
04:48 - machine fault transform and here we have
04:50 - our hidden camera movement where we are
04:52 - moving it and it's in here instead of
04:54 - modifying the Y we modified the cell
04:56 - instead okay here we are move upwards
04:58 - any up there you go and our camera is
04:59 - moving all the correct axis now since we
05:01 - have our camera and our background in 3d
05:03 - and let's set a cool effect which is the
05:05 - depth of field so we just make a new
05:08 - volume and here already have a simple
05:12 - moaning profile and if there's our depth
05:14 - of field effect so it's not only blurry
05:16 - up here and here no it's not ok so far
05:18 - so good
05:19 - now it's time to handle our grid system
05:21 - now there are two ways we can convert
05:23 - this we can convert the grid from being
05:26 - XY based and turn it into X head or we
05:29 - can keep all the internals in X Y and
05:31 - only modify our inputs and outputs both
05:34 - of those approaches are available here
05:36 - let's go with swapping the X Y for X Z
05:38 - so here as you can see our grid is going
05:42 - on on the y axis and now we want to make
05:44 - it flat so here in the grid class that
05:47 - we've been using whenever we are
05:48 - accessing a reference to a vector3
05:51 - like for example here on a given
05:53 - position we need to swap this from using
05:55 - X Y T using X Z so instead of modifying
05:57 - this list directly let's make a
05:59 - duplicate so here is the grid class and
06:02 - just duplicated and call this the grid X
06:04 - Z all right now here let's fix all the
06:07 - errors in modified so here when we get
06:15 - the worm position set of X 1 what's with
06:17 - X then zero and we fill in dizzy and we
06:20 - can also rename this to be in Z and same
06:23 - thing here rename this function to be
06:25 - get XZ and we have an out on these it
06:57 - all right so here I have replaced all
06:59 - dimensions of a Y and replace it with Z
07:02 - and on our own position conversion we
07:05 - also made it to make sure that we
07:06 - returned on X 0 Z right so everything
07:09 - should be working now let's use this
07:11 - great class instead of the previous one
07:13 - so here in our main script we are
07:15 - initializing our grid of type grid now
07:17 - let's swap route for grid X Z alright so
07:38 - that's it everything works pretty much
07:40 - exactly the same and if there it is now
07:42 - our grid is correctly placed along the x
07:44 - z axis awesome alright so now that that
07:46 - one is working let's update the town map
07:48 - so town map is here it's using this
07:51 - class so in here again replace the grid
07:53 - for our exit grid alright so that's
08:03 - pretty much it in here then we just need
08:05 - to modify the visual
08:17 - so here in the visual the main thing
08:19 - that we need to change is down here when
08:21 - we are updating it so we're creating our
08:23 - mesh and positioning of our grid objects
08:25 - and everything should already be working
08:27 - since we modify the get one position on
08:29 - the XZ and the main difference here is
08:31 - just equal size from 1 0 1 all right
08:35 - let's see if that works
08:36 - ok so here there is the town map working
08:38 - and if we promise we can see that yep it
08:41 - is lying flat on the ground in order to
08:43 - make it work and also have to make an
08:44 - exit version of this function and again
08:47 - here just changing the Y for as n so in
08:50 - here is 0 Z and also getting the Euler
08:52 - rotation based on the X z axis and again
08:56 - here is everything at work alright so we
08:59 - already have quite a lot converting we
09:01 - have the background the camera the grids
09:03 - and the town map next let's handle the
09:06 - mouse so here on the grid combat system
09:08 - we are getting the mouse run position
09:10 - from this function in the utilities and
09:12 - here is that function and you can see
09:14 - that what it's doing is pretty much just
09:16 - we're having the world camera and doing
09:17 - a screen to run point on the screen
09:19 - position which is based on the input
09:21 - Mouse position so this works perfectly
09:23 - in 2d but in 3d you need a different
09:26 - method so it says that out in this
09:28 - script now the method that we need is
09:30 - essentially based on a ray cast so first
09:33 - we grab our camera and then we call the
09:36 - function screen point array and then we
09:38 - pass in our regular input mouse position
09:43 - so this returns a rate going from the
09:45 - camera through a screen point and then
09:50 - we can access our physics to do a simple
09:54 - ray cast using this ray then we have our
10:02 - ray cast hit info then we have the max
10:04 - distance and let's just put a very large
10:06 - number then finally we have a layer mask
10:08 - which we're going to see in a bit so
10:10 - this whole thing returns true if it hits
10:12 - something if so then we have the most
10:14 - position inside the array Cassatt dot
10:16 - point so we are using a ray cast that
10:19 - will collide with something so back in
10:21 - the editor let's create an empty game
10:23 - object let's
10:25 - a simple box Collider and here unless
10:28 - you stretch it out to occupy the home
10:30 - area so that that alright now we have a
10:36 - massive Collider occupying our whole
10:38 - play area and now for the collision
10:40 - let's put this on a specific layer so
10:42 - let's add a new layer in here and let's
10:44 - come with your mouse plane and we set
10:49 - this on to that layer ok so we can here
10:52 - let's expose a film to get our layer so
10:58 - of type layer mask for our layer mask
11:00 - like in the editor here we have our film
11:02 - let's select our mouse plane okay and
11:04 - now we can use this layer mask in here
11:06 - to make sure that only collides with
11:07 - that so we have our point now let's just
11:10 - add something to visualize it so here
11:12 - let's simply create a nice sphere this
11:19 - is just so we can easily visualize it so
11:22 - here let's expose that and then we take
11:28 - that transform and here we set it on our
11:30 - point ok so we should be able to
11:33 - visually see where our mouse is in the
11:35 - world
11:36 - let's test any up here we are and we can
11:39 - indeed see that our mouse position is
11:41 - correctly being calculated so instead of
11:43 - doing a basic screen twirl point we're
11:45 - doing a break s and colliding with
11:47 - something that is placed on our form so
11:49 - we are correctly calculating our mouse
11:51 - position in 3d space awesome now finally
11:54 - let's handle our units now the units are
11:57 - actually pretty straightforward since my
11:59 - animation system is already very much
12:01 - mesh based so the main difference is the
12:03 - shadow down here so here on the unit
12:05 - pre-film let's swap the shadow from a
12:07 - sprite renderer onto a 3d mesh alright
12:17 - so the shadow is using a quad is rotated
12:19 - facing upwards and using a shadow
12:21 - material and if there is only units have
12:23 - their shadow okay now one thing here
12:25 - since the units are sill flat I find out
12:28 - having them pointing straight up looks a
12:30 - bit bad so they're a bit too squished so
12:33 - one simple solution here is just add a
12:34 - tiny bit of a rotation to make them face
12:36 - the camera a bit more so like this this
12:38 - one
12:39 - a bit less squished in this one which I
12:41 - think looks better so that's the unit's
12:43 - taken care of now for these objects
12:45 - right now there are some placed all the
12:47 - way up here on the wine so let's put
12:50 - them down there and I'll also let's swap
12:56 - the Condors from the 2d in to the 3d and
12:59 - yep there's our objects now in 3d space
13:01 - so as we move the camera yep we can see
13:04 - that they indeed exist in 3d space so
13:07 - now we have the same issue that these
13:08 - frights are still flat so in order to
13:10 - prevent them from being squished if you
13:12 - do the same thing that we did with the
13:13 - units or another approach we can take to
13:15 - handle flat sprites is to simply make
13:17 - them face towards the camera so here I
13:19 - have this very simple script just as
13:21 - they transform look at the main camera
13:23 - so if we apply this to our visuals any
13:26 - of they are now looking straight at the
13:27 - camera so this is a bit of a different
13:29 - effect depending on which effect you
13:30 - prefer all right so all that remains are
13:33 - the tiny extra elements so first of all
13:35 - for the health bar now in here it's
13:38 - already using a vertical bar in 3d space
13:40 - so we don't really need to change
13:41 - anything if we wanted we could replace
13:44 - the sprite renderer with a mesh render
13:46 - but we probably don't want the health
13:48 - bar to be affected by lights so own
13:50 - leaving it as it is as a sprite renderer
13:51 - works just fine then we have the damage
13:54 - pop-ups which were made in a previous
13:56 - video so as I click on him yep there you
13:58 - go damage crop is going up so let's
14:01 - pause the scene okay here we are and
14:03 - there's the damage travel right there
14:05 - again this element is also pointing
14:07 - upwards already so we're not the only
14:09 - thing that we would change here would be
14:11 - to increase it on the Y to make its pot
14:13 - a bit higher and yep there it is and now
14:17 - finally we just have the particles
14:19 - missing so they are based on the mesh
14:22 - particle system which I covered in
14:23 - another video the parkin system is mesh
14:25 - base so it's pretty much the same thing
14:27 - that we did for the town map over here
14:29 - on the mesh particle system class I've
14:31 - added a simple axis and then down here
14:34 - when we are updating each quand just
14:37 - adding a simple condition testing if we
14:39 - have the X Y or the x axis and simply
14:42 - using the rotation and the quad size so
14:44 - pretty much exactly the same as the
14:46 - Talmud and now in here move and shoot
14:49 - and yep it looks pretty good so the
14:52 - particles
14:52 - now being flat alongside our exact axis
14:55 - yep just like that
14:57 - now it's not exactly perfect since the
14:59 - particles are commonly just on the floor
15:01 - so as I shoot him yep then leave right
15:02 - from the floor so if you wanted you
15:05 - could improve it by making on with the
15:06 - particle position simulation act in 3d
15:09 - but just in this case for this quick
15:11 - simple effect it works pretty good so
15:13 - there they are on the particles lying
15:14 - flat on the floor
15:15 - all right so finally we just have one
15:17 - last thing so far we've been using the
15:20 - 2d renderer so we can also opt out for a
15:22 - proper 3d render so here in the project
15:25 - files I have the Universal render
15:26 - pipeline assets that we've been using
15:28 - and again it's set up to use a 2d render
15:31 - so I might swap out for a full render so
15:33 - in here we create a new go into
15:36 - rendering you RP and we make a new
15:38 - forward render and we use this one
15:40 - instead and now we just need to modify
15:43 - the shaders to use the 3d version so in
15:45 - here instead of the 2d shader go into u
15:47 - RP and this given let's just choose
15:49 - unlit and you appeared is everything
15:51 - working with the 3d render and now if we
15:53 - want you can play around with regular 3d
15:55 - lights so just create a new point light
15:58 - and your purists are seeing now working
16:01 - with 3d and lights
16:04 - alright so here is our final scene we
16:07 - made some tiny changes on a bunch of
16:09 - systems and successfully convert them
16:11 - from working in 2d to working now in 3d
16:14 - so there's the camera working in 3d it
16:17 - even has a nice depth of field effect
16:19 - the characters are on positioned around
16:22 - in 3d space the grid and town map our
16:25 - own position on for then the mouse is
16:27 - completing its position also in 3d space
16:29 - and functionally everything still works
16:31 - exactly the same as previously so all
16:34 - the logic as you can see it's
16:35 - independent from 2d to 3d so yep here we
16:39 - have our 3d scene alright so I hope this
16:42 - video helped you understand how if you
16:43 - find it tutorial showcasing something in
16:46 - 2d then chances are with a few minor
16:47 - tweaks you can make it work in 3d so
16:50 - when looking to solve a particular
16:51 - problem don't limit yourself to just one
16:54 - specific perspective
16:55 - check out the code monkey upon steam
16:57 - interactive tutorials complete games and
16:59 - more click knowing the description and
17:01 - add it to your wish list this video is
17:03 - made possible thanks to these awesome
17:04 - supporters go to patreon
17:06 - / unity code monkey to get some perks
17:08 - and help keep the videos free for
17:10 - everyone as long as you can download the
17:12 - project files in utilities from unity
17:13 - code monkey comm subscribe to the
17:15 - channel for more unity to churros post a
17:17 - new question comments and I'll see you
17:19 - next time
17:21 - [Music]