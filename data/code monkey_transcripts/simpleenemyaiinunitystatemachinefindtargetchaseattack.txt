00:00 - in this video we're going to make some
00:01 - very simple enemy AI we're going to have
00:04 - our enemies roam around randomly and if
00:06 - the player gets within range
00:07 - they won't switch into attack mode chase
00:09 - and attack him let's begin
00:14 - [Music]
00:18 - hello and welcome I'm your code monkey
00:20 - and this channel is all about helping
00:21 - you learn how to make your own games
00:23 - with nf2 torrents made by a professional
00:25 - indie game developer so if you find the
00:27 - video helpful consider subscribing okay
00:29 - so let's check out some very simple AI
00:31 - now the eye we're going to make here is
00:34 - a very simple state machine that can be
00:36 - easily expanded upon to fit whatever
00:38 - your game needs so for example this is
00:41 - what I used on the top-down shooter that
00:42 - I made recently so over here is an enemy
00:45 - and I'm controlling my player now the
00:48 - enemy as you can see he's just roaming
00:50 - around randomly around his firing
00:51 - position
00:52 - so just minding his own business picking
00:54 - a random position however he's also
00:56 - searching for a target so if I approach
00:59 - him and I go within the target range
01:00 - there you go you can see that he's now
01:02 - pointing at me and chasing me so he's
01:05 - currently on the chase State and if I
01:08 - let him get within a Tec range there we
01:10 - go within the attack range he starts
01:12 - shooting and if I go away he can't eat
01:15 - his chasing and shooting and so on and
01:17 - now if I reach way too far there you go
01:19 - he gives up on chasing and goes back
01:21 - into his starting position and then
01:23 - again back into roaming four random
01:25 - positions so just like this over here
01:27 - you can already see some pre based ki
01:29 - I've been using this type of state based
01:31 - AI for many years now and it's very easy
01:34 - to make an easy to adapt to fit whatever
01:36 - needs your game has again you can see it
01:38 - in action in the top-down shooter game I
01:40 - made recently the enemies there have a
01:42 - fine target range attack range and then
01:44 - idle state this video is made possible
01:46 - thanks to these awesome supporters go to
01:48 - patreon.com/scishow to code monkey to
01:51 - get some perks and help keep the videos
01:52 - free for everyone alright so this circle
01:55 - let's get to it okay so here's our
01:57 - starting scene I have my player
01:59 - character that I can move around
02:00 - I can shoot and over there is an enemy
02:03 - and I can shoot and kill him so
02:05 - essentially this bae scene is taken from
02:08 - the top-down shooter I made so go check
02:10 - out that video and play that game the
02:12 - weapon aiming was also covered in a
02:14 - previous video as was the particle
02:16 - system all right so let's handle our
02:18 - enemy here on the scripts folder and
02:21 - let's create a new C sharp script and
02:22 - we're going to call this the enemy AI
02:24 - and let's rump it on top of the enemy
02:27 - prefab okay
02:28 - so first let's make him just roam around
02:30 - random
02:32 - now we want him to roam around randomly
02:35 - around his starting position so first
02:37 - that means we need to store the starting
02:39 - position so let's make a private row it
02:41 - start and we store a vector3 for our
02:44 - starting position and we set this on our
02:47 - start alright we have our starting
02:51 - position now let's make a function to
02:53 - get a random roaming position okay so
02:57 - here let's get a random position around
02:59 - the starting position so for that I can
03:02 - go use the utilities as long as you can
03:06 - download the utilities for free from
03:08 - unity code monkey comm and in the
03:10 - utilities I have details class and get
03:12 - random Direction so here is that
03:14 - function in case we want to make
03:16 - yourself as you can see it just does a
03:18 - random on the X and a random on the Y
03:19 - and normal is the vector so this returns
03:22 - a random vector with random on the x and
03:24 - y so using this we get a random
03:26 - Direction now we apply this to our
03:29 - starting position
03:30 - so starting position policy random
03:32 - Direction multiplied by a random
03:34 - distance okay so here's a function to
03:41 - get a random roaming position we get a
03:43 - random Direction multiplied by a random
03:45 - distance apply to our starting position
03:47 - now in order to handle movement as you
03:50 - can see here on the prefab the enemy has
03:52 - this script to hand on path finding
03:54 - movement this is a simple movement code
03:56 - that uses the path finding that we made
03:58 - in a previous video so it calculates the
04:00 - path and then simply follows it and we
04:02 - have a simple function to set the move
04:04 - to position so let's use this so back in
04:07 - our AI script when starting let's also
04:09 - calculate a roaming position so you get
04:14 - the wrong position and we have to a
04:15 - random one using our function alright
04:17 - and then we have a private void update
04:20 - and then on update we move towards our
04:23 - position so we need a reference to our
04:25 - path finding movement script
04:33 - all right so we have a feel for our path
04:36 - finding movement script we grab it on
04:38 - awake so we do a simple gate component
04:40 - then on start we complete a new roaming
04:43 - position and on update we're going to go
04:45 - into the path finding movement script
04:47 - and we call the function to move to our
04:49 - wrong position so this won't calculate
04:52 - the path finding and move the character
04:54 - towards it then all we need to do is do
04:56 - a simple distance check so we do a if do
05:00 - a vector3 dot distance between our
05:03 - current position so transform that
05:05 - position so the distance between our
05:08 - position and the wrong position we test
05:11 - if it's under a certain amount so if it
05:16 - is under a certain distance then that
05:18 - means we have reached our wrong position
05:21 - so when we do let's calculate a new
05:23 - wrong position all right just like that
05:27 - so with this the enemy should be roaming
05:29 - around randomly let's test ok so here we
05:32 - are and yep there's the enemy just
05:34 - walking around there we go he reach that
05:35 - position went to that one now he's going
05:37 - to that one and now two down there and
05:40 - we can see the path finding and there
05:42 - you go he's doing there now he's going
05:43 - there now he's getting there and yep so
05:45 - he's correctly getting a random roaming
05:47 - position every time he reaches one right
05:49 - awesome so now that we have him roaming
05:51 - around let's make him chase the player
05:53 - so back in our AI script we want the
05:56 - enemy to check if the player is within a
05:58 - target range and if so then we start
06:00 - chasing them so for that let's make a
06:02 - function called find target now here
06:07 - let's keep things simple and make him
06:09 - only able to target the player now the
06:11 - player class has a nice static instance
06:13 - field that we can use so back in our AI
06:16 - we can do a simple distance check to
06:19 - test if the player is within the target
06:20 - range
06:29 - so we do a dozen check and if the
06:31 - pointer is within that range in the
06:33 - player is within our target range so
06:35 - when we do then we want the enemy to
06:37 - start chasing the player so this is
06:39 - where we need to handle a basic state
06:41 - machine so over here on our update we
06:44 - have the code to roam around randomly
06:46 - and then we need the code in order to
06:47 - chase the player so here let's just set
06:50 - the move position straight into the
06:52 - player position so just like this he
06:56 - won't chase the player however obviously
06:57 - we cannot run both states at the same
06:59 - time so let's go all the way up here and
07:02 - we're going to define a private innum in
07:05 - case you don't know an enum is a data
07:07 - type where you can have specific named
07:09 - values so it's perfect for defining
07:11 - States so here we just call it our state
07:13 - and for the various states left roaming
07:17 - and then chase target so those are our
07:21 - two possible states then let's also
07:24 - store a field to store the current state
07:26 - so private of type state and call it
07:29 - state and by default let's set it to
07:32 - roaming so now we have our simple state
07:35 - variable and on our update we can do a
07:37 - very easy switch switch on our state and
07:41 - when we do a case roaming so when we are
07:45 - in the roaming state we're going to run
07:47 - this code and case we are on the chased
07:52 - target state then we run this code all
07:56 - right so that's it over here we have a
07:58 - very basic state machine so our logic
08:00 - depends on our state all we need to do
08:02 - is actually change the states so we're
08:04 - here on our fine target first we're
08:07 - going to look for a target once we are
08:09 - roaming so while roaming we're going to
08:11 - come find target and then when we do
08:13 - find a target let's modify the state to
08:15 - be stata chase target all right that's
08:18 - it let's test ok so here we are and
08:21 - there's the enemy roaming around
08:22 - randomly and now as I approach him and
08:25 - when I get within range up there you go
08:27 - he's now chasing me and moving straight
08:29 - towards me and just like that and now he
08:31 - will never let go alright awesome so we
08:34 - have correctly made two different states
08:36 - with two different behaviors now that we
08:38 - have this working lets him
08:39 - enemy attacking so back in our enemy AI
08:41 - code over here when you have our state
08:44 - was chasing the target let's see if he
08:46 - is within a certain Attack range so
08:58 - again we're doing the same thing just
08:59 - see simple distance check and if he's
09:01 - within attack range then we want to
09:03 - attack him and now here the enemy also
09:05 - has a script that handles all the aiming
09:08 - and shooting so we're going to use that
09:09 - external script the same way we did for
09:11 - the movement so that one it's a script
09:14 - which implements I aim shoot uh names
09:20 - again how this is implemented isn't
09:23 - relevant for the AI so when you make
09:25 - your own games you should make sure that
09:27 - you keep things nicely separated so for
09:29 - example the path finding movement
09:31 - doesn't care about the AI and this
09:33 - animation does not care about the air so
09:35 - they are all completely separate so we
09:37 - get that component and now in there we
09:39 - have two functions one to aim at a
09:41 - target and one to shoot so whilst we are
09:43 - chasing let's simply set the aim target
09:46 - to be on the player position so we're
09:49 - constantly going to be aiming towards
09:51 - the player whilst we're chasing him and
09:53 - when he is within attack range then
09:56 - let's call shoot target so we shoot
09:58 - again towards the player position and
10:02 - when you do what's also stopped blowing
10:05 - okay let's see okay here we are and
10:09 - there's the enemy just roaming around
10:10 - randomly all right now as I approach
10:12 - he's going to go from roaming in to
10:14 - chase and yep there you go he's
10:15 - currently aiming at me alright
10:17 - so let's let him get closer and let's
10:19 - see if he shoots yep there you go he
10:21 - shoots and as you saw that is quite
10:23 - insane but yep there you go he is
10:25 - shooting alright so let's solve this
10:28 - issue now the issue is that he's
10:30 - essentially shooting a bullet every
10:32 - single update so if the game is running
10:34 - at a hundred frames per second then the
10:36 - enemy is shooting a hundred times per
10:37 - second so here let's implement a very
10:40 - simple fire rate now this would normally
10:42 - be built inside a proper weapon class
10:44 - but just for testing let's make
10:45 - something very simple in here so all we
10:48 - need is really just a float in order to
10:49 - know when is the next time that the
10:51 - enemy can shoot
10:53 - so a float for the next shoot time so we
10:58 - go all the way down here we test the
11:00 - fees within attack range and if so then
11:03 - we also test if the next shoot time is
11:05 - valid so we compare it with time time so
11:11 - if the time is past the next shoot time
11:13 - then we want to shoot them and once we
11:16 - do we want to set the next year time
11:17 - equals time that time was a certain fire
11:19 - rate all right so there it is very
11:23 - simple code let's test okay so here we
11:26 - are and let's approach him and there you
11:28 - go he's now aiming let's wait and there
11:30 - you go now he's shooting at a much more
11:32 - reasonable pace still too fast but yep
11:34 - there you go as soon as I go away he's
11:36 - chasing when he gets with an attack
11:38 - range he attacks it so very simple and
11:40 - very nice right awesome
11:42 - now over here I have modified the fire
11:45 - rate to be extremely slow and this will
11:47 - expose an issue so if we go and yep
11:50 - there you go see how he's doing he's
11:52 - essentially cancelling the shooting
11:54 - animation so it shows for just exactly
11:56 - one frame and then he goes back into
11:58 - moving and moving on top of me so the
12:00 - issue is the animation isn't being fully
12:02 - plain so let's fix that now in order to
12:04 - fix that in this case it's extremely
12:06 - simple so here on the shoot target
12:08 - function I already have an action that
12:10 - gets triggered when shooting is complete
12:11 - now this is obviously going to depend
12:14 - heavily on how you set up your animation
12:16 - system but in here I can simply use this
12:18 - action in order to modify our states so
12:21 - you can Europe here and make another
12:23 - state this one is going to be called the
12:24 - shooting target so this state will be
12:27 - active whilst the enemy is shooting the
12:29 - target so whilst the animation is
12:31 - playing and then on update that is
12:33 - essentially a dummy state so k state
12:36 - that shooting target we do nothing so
12:39 - while we are inside this state then we
12:41 - are simply waiting to go back to another
12:42 - valid state so in here when we shoot we
12:45 - set the state equals state our shooting
12:49 - target and when the animation finishes
12:51 - then we go back into our chase target so
12:55 - let's see how this works okay so here we
12:58 - are let's approach him wait for it to
12:59 - shoot and if there you go now he plays
13:02 - the actual shooting animation instead of
13:04 - canceling it on the exact next frame
13:05 - again this one
13:07 - on how you set up your animation system
13:09 - but the takeaway here is that you can
13:11 - add States while a certain animation or
13:13 - different action is being performed so
13:15 - whilst this state is active then this
13:17 - enemies AI will not be doing anything
13:19 - all right so all that's left is to
13:21 - handle our stop chase logic so here we
13:24 - are chasing target all right we are
13:26 - testing for the attack distance and
13:27 - shooting him okay then let's do another
13:30 - distance check so for here again we are
13:42 - doing a simple distance check and if it
13:44 - is way past this distance then we are
13:47 - too far and we want to stop chasing our
13:48 - target so when we do then we want to go
13:51 - back into our original starting position
13:53 - so again it's very simple all we need to
13:55 - do is make another state so let's call
13:57 - it going back to start and then here
14:01 - when we are too far we're going to
14:02 - modify our state to be going back to our
14:05 - start and then we have our case state
14:09 - going back to start and we simply move
14:12 - back into our start position so we move
14:16 - back into the start position then again
14:18 - we do it doesn't check much like this
14:20 - one and when we get back to our start
14:25 - position we simply modify the state back
14:27 - into roaming all right so there this
14:30 - very simple let's test okay so here we
14:34 - are and there's the enemy just roaming
14:35 - around randomly so he's not aiming at me
14:37 - he's completely I don't now I approach
14:39 - and there you go he saw me he's aiming
14:41 - at me and if I get close he starts
14:43 - shooting me okay and if I go way too far
14:46 - there we go he gives up and he goes back
14:48 - into his starting position and once he
14:50 - reaches his starting position yep there
14:52 - you go now he starts roaming around that
14:54 - position as well right awesome so here
14:57 - you can see how our enemy AI has some
14:59 - very basic simple state machine so the
15:01 - enemy roams around randomly he tries to
15:03 - find a target within his range if he
15:05 - does then he starts chasing that target
15:07 - once chasing he tries to shoot an attack
15:10 - target and if the target moves away way
15:13 - too far then he goes back into his
15:15 - original starting position so here in
15:17 - the code as you can see it's extremely
15:18 - simple we just have our state
15:21 - for all of our various states and we do
15:23 - different logic on our update based on
15:25 - the current state that is active so
15:27 - roaming we just pick a random position
15:29 - whilst chasing the target we move
15:32 - towards the target we test distance if
15:34 - close enough then we attack him if not
15:36 - then we test the distance if it is too
15:38 - far if so then we modify into a state
15:41 - going back to the start which goes back
15:42 - to certain back into roaming so again
15:45 - here is an action he's running around
15:46 - randomly I approach he sees me now he's
15:49 - moving towards me when he's close he
15:51 - starts shooting and if he's way too far
15:53 - he gives up and goes back so this
15:56 - pattern with a very simple state machine
15:57 - is pretty much how I always do my air
15:59 - everything that I do is just about
16:01 - expanding upon this space this video is
16:03 - made possible thanks to these awesome
16:05 - supporters go to patreon.com/scishow
16:07 - natee hog-monkey to get some perks and
16:09 - help keep the videos free for everyone
16:11 - as always you can download the project
16:13 - found in eat tony's from unity code
16:14 - matcom subscribe to the channel for more
16:16 - ent tutorials post any questions you
16:18 - have in the comments and I'll see you
16:20 - next time
16:22 - [Music]