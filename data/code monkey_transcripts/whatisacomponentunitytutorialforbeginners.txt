00:00 - hello and welcome I'm your code monkey
00:02 - min this video we're going to learn what
00:03 - a component is and what it's used for
00:05 - let's begin
00:09 - so as you know unity was designed from
00:12 - the ground up to work with components
00:14 - you have a game object and that game
00:17 - object can have any number of components
00:19 - unity already has many default
00:22 - components like the sprite render the
00:25 - transform or the camera they are all
00:27 - different components in order to run
00:29 - your own code you can create custom
00:31 - components and add them to a game object
00:34 - to make your own custom component you
00:36 - simply need to create a new script so
00:38 - let's make a new create c-sharp script
00:40 - and let's call it my component let's
00:43 - drag it onto our spaceship game object
00:46 - and check out the code so here it is and
00:49 - you only created component script by
00:52 - default you can see that the script
00:53 - extends the amount of behavior class in
00:56 - order to add your script to a game
00:57 - object as a component you must extend
00:59 - this class the model behavior class
01:02 - contains the base functionality of a
01:03 - component in unity
01:05 - the default functions as you can see are
01:07 - start and update start runs once as soon
01:11 - as the object is active and before the
01:13 - first update and update runs every
01:15 - single frame so if your game is running
01:17 - at 60 frames per second then this update
01:20 - will be called 60 times per second let's
01:23 - test that out by putting some logs in
01:24 - here so let's put a log on start do a
01:27 - debug log and let's say start and down
01:31 - here debug down log let's say update
01:33 - let's run the code okay it's running as
01:37 - you can see it is constantly printing
01:39 - out updates and if we stop and we go all
01:41 - the way up here you can see before all
01:43 - the updates we have one start so back in
01:46 - our code similar to the start you have
01:49 - the awake but the awake runs before all
01:52 - the starts so appear let's make a
01:54 - private void awake and here do it ebook
01:58 - world away one big difference between
02:01 - the awake and start is awake runs as
02:04 - soon as the component is initialized
02:05 - regardless of whether or not the script
02:07 - is enabled whereas start only runs if
02:09 - the script is enabled so let's see that
02:12 - difference let's run the game and see
02:15 - with the script enabled you can see that
02:18 - we trigger an awake and then a start now
02:21 - let's
02:22 - and somehow disabled the component and
02:25 - run the game again and now as you can
02:27 - see only awake was triggered and if we
02:28 - enable the component there you go
02:30 - start is trigger now with regards to the
02:33 - update you have three variations the
02:35 - main update which we already saw gets
02:38 - called once every frame then we have a
02:41 - late update which also triggers every
02:44 - frame but after all of the updates and
02:47 - finally we have a private void fixed
02:50 - update which triggers at a fixed rate
02:52 - you can view that rate in the settings
02:55 - by going to edit project settings and
02:58 - then time and in here you can see the
03:01 - fixed time step which is the amount of
03:03 - time before each fixed update the
03:05 - default is once every 20 milliseconds
03:07 - the physic system runs on this rate so
03:10 - any changes you want to apply to the
03:11 - physics you would do inside the fixed
03:13 - update rather than the update so let's
03:15 - put on a log on all of them and see what
03:18 - comes out and also these functions by
03:20 - default they only say void but in order
03:22 - to keep your code clean you should also
03:24 - add private just to make sure your code
03:27 - is as clean and clear as possible so in
03:29 - here let's make a debug download on the
03:31 - update and log on the late update n a
03:36 - debug download on our fix update ok the
03:40 - game is running let's stop and if we
03:43 - check out the log you can see that we
03:45 - got multiple updates after every single
03:48 - update we get a late update and every
03:52 - once in a while every 20 milliseconds we
03:54 - get a fixed update all right so that's
03:57 - the updates now if you want to do
03:59 - something when the component is enabled
04:01 - or disabled you have on enable and on
04:07 - disable these get triggered when the
04:11 - script or the game object is enabled or
04:14 - disabled so let's add some logs let's
04:20 - test it out and as you can see
04:22 - everything is enabled so you trigger the
04:25 - enable now if I disable the game object
04:27 - you can see the save on is triggered now
04:29 - Irene able and it is
04:31 - enable and it also works if I disable
04:34 - the component trigger disable enable
04:36 - trigger enable these can be very useful
04:39 - if you have some sort of setup that you
04:40 - want to do on an object that you want to
04:43 - activate and deactivate so if you have
04:45 - an object out with this point your grid
04:47 - you would create the grid on enable and
04:49 - clean it up on disable all right so
04:51 - that's the basic functions on the model
04:53 - behavior component now on your component
04:56 - you can also expose fields to the editor
04:58 - so let's go up here and make for example
05:01 - a public and health and if we check out
05:05 - the editor yep there you go you can see
05:07 - a health value with a number in there I
05:09 - cannot type letters only numbers however
05:12 - this is a very dirty way of doing things
05:14 - since by making it public we are making
05:16 - it accessible not only to the editor but
05:19 - also to every other script if all we
05:21 - want to do is expose the film to the
05:23 - editor it is better to keep it private
05:24 - and make it serializable so make it
05:26 - private and do a serialized feel this
05:31 - way our code is nice and clean this
05:33 - variable is private and can only be
05:35 - accessed inside the script but it also
05:37 - shows up in the editor so as you can see
05:39 - still shows up in there but now our code
05:41 - is cleaner static fields did not show up
05:44 - in the editor so even if I do a public
05:46 - static in count max you can see that it
05:50 - does not show up in the editor you can
05:52 - expose any of the default variable types
05:55 - so let's copy this and expose a boolean
05:59 - let's also expose a string and we can
06:03 - also expose an enum so let's first make
06:06 - any Noom my enim give it option a and as
06:17 - you can see we have the various types
06:18 - exposed in the editor a boolean is just
06:20 - a checkbox that you can turn true or
06:23 - false a string you can type anything in
06:26 - there and our in ohm is displayed as a
06:30 - drop box that contains all of the
06:31 - enemy's values all right now let's take
06:34 - a look at the script execution order so
06:36 - let's make another script go down here
06:38 - make a new c-sharp script and call it my
06:40 - second
06:42 - opponent let's drag it onto a new game
06:44 - object so create an empty game object
06:46 - and drag my second component now by
06:49 - default the order in which the scripts
06:50 - are run is a for unity to decide but if
06:53 - you have a component that represents
06:55 - some solar system that you want to make
06:56 - sure it is initialized before any others
06:58 - you can specifically tell it to execute
07:00 - before let's first add some logs and see
07:03 - what happens if we don't give it a
07:04 - specific order all right let's run the
07:18 - code okay here in the console you can
07:20 - see that the first component that it's
07:22 - awake then the second one then the first
07:24 - one did it start then the second one
07:26 - again this was all completely designed
07:28 - by unity however let's say I want to run
07:30 - the second component before the first
07:32 - one in order to do that you can go into
07:34 - edit project settings and script
07:37 - execution order here you can see the
07:39 - scripts and when they are executed so by
07:42 - default every script you make is on
07:43 - default and unity decides when they
07:45 - won't run so since we want the second
07:48 - component to run before anything else
07:50 - so let's first drag the second component
07:52 - onto the execution order and let's drag
07:54 - the second component and put it above
07:56 - the default if we want you can also drag
07:59 - the first component and drag it to be
08:02 - after that one but it's not before the
08:04 - default tongue that means it won't run
08:06 - after the second but before any other
08:08 - components in the default order so let's
08:10 - hit apply and let's test again yep there
08:14 - you go first the second component
08:15 - triggered it's awake then the first
08:17 - component triggered it's awake then the
08:19 - second trait of the start and the first
08:21 - trigger they start notice how you first
08:23 - don't have all of the awakes and only
08:25 - then do you get on with the starts
08:26 - changing the order of the script
08:28 - execution only change the order for each
08:30 - specific function that is called so the
08:32 - first awake then the second awake then
08:34 - the first start at any second start so
08:36 - there you have it we learn what a
08:37 - component is and what it's used for
08:39 - we'll learn how to create our own
08:41 - components how they relate to
08:42 - monobehaviour and the default functions
08:44 - we can use to run our code we also learn
08:47 - how we can order various scripts to
08:49 - execute at specific times in case we
08:51 - have a specific order that must be
08:52 - respected as always you can download the
08:55 - project files in you
08:56 - somebody's from ent code monkey calm if
08:58 - you have any questions post them in the
08:59 - comments and I'll do my best answer them
09:01 - subscribe for more videos and I'll see
09:03 - you next time