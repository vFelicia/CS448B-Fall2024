00:00 - hello and welcome i'm your code monkey
00:02 - and here let's learn how to do something
00:03 - that could be a pretty interesting
00:04 - addition to your games let's learn how
00:06 - to draw in unity so we have our pointer
00:09 - it could be a mouse or touch and by
00:11 - clicking and dragging we can draw a line
00:12 - or anything now if you've seen my
00:14 - gamedev reacts videos and you've already
00:16 - seen this in action in those videos i
00:18 - use this to highlight various parts of
00:19 - the videos as i'm explaining them
00:21 - i control the pointer with a tablet so
00:23 - it really is just like drawing with my
00:25 - hand
00:25 - and i also briefly covered this in the
00:27 - how it's made for done video where i
00:29 - remade the mechanic for drawing
00:30 - directions on the minimap this is
00:32 - actually pretty easy to do all you need
00:34 - to know is just one thing which i
00:35 - already covered in a previous video and
00:37 - if you know that then it's super easy so
00:39 - in this video i'm covering free flow
00:41 - drawing and then stay tuned for an
00:42 - upcoming video where i will cover pixel
00:44 - drawing if you prefer a more guided path
00:47 - with step-by-step lectures then check
00:48 - out my complete courses learn how to
00:50 - make a builder defender game using
00:52 - c-sharp just like i make my own steam
00:54 - games or learn how to make games
00:56 - entirely using visual scripting or learn
00:58 - all about unity with the ultimate
01:00 - overview course which contains over 13
01:02 - lectures each covering a different tool
01:04 - or feature of the engine to help you
01:06 - make better games faster i'm always
01:08 - available in the courses q a section
01:09 - answering your questions every single
01:11 - day so check out all the courses with
01:12 - the link in the description alright so
01:14 - let's learn how to draw inside of unity
01:16 - now the special thing that i already
01:18 - covered in a previous video is simply
01:19 - dynamic meshes as you know everything
01:21 - that you see in the game is a mesh made
01:23 - up of polygons so when you import a 3d
01:26 - model it has a mesh
01:27 - but you can also dynamically generate
01:29 - those meshes through code and if you can
01:31 - do that then you can essentially create
01:33 - a mesh that updates itself and adapts to
01:35 - the position of the mouse in order to
01:36 - constantly draw on screen so here let's
01:38 - learn how to do it from scratch but in
01:40 - the end i will show a more complete demo
01:42 - that i've made which you can download
01:44 - including the project files so the first
01:46 - thing we need is to create an empty mesh
01:47 - first let's make a simple game object
01:51 - and just a script to run it
01:53 - okay we have our script now in order to
01:55 - visually see it we need to attach a mesh
01:57 - to this game object so for that we add a
02:00 - mesh filter there's no need to select
02:02 - this we're going to select it
02:03 - dynamically and then in order to have a
02:05 - visual we need a mesh render
02:07 - okay so let's open up our script and now
02:09 - here let's make a very simple quant just
02:12 - to see how mesh is actually made
02:16 - now a mesh is made up of vertices uvs
02:18 - and triangles
02:24 - then we just position the vertices
02:32 - then we set up the uvs now in this case
02:34 - we won't just say sound color so that's
02:35 - pretty easy
02:39 - and then finally for our triangles
02:45 - okay so here's our basic wand again if
02:48 - you don't understand how any of this
02:49 - works then you can go watch the mesh
02:51 - video in there i cover in detail what
02:53 - each of these elements does what it
02:54 - means and how exactly they are set up
02:56 - so we have all of our data now we just
02:58 - need to apply it to our mesh
03:02 - and finally since we're going to be
03:04 - dynamically modifying this mesh let's
03:06 - also call mark dynamic to make it a bit
03:08 - more performant
03:10 - okay so we have our mesh which should
03:11 - have a quad shape now in order to
03:13 - visualize it let's just get component of
03:16 - type mesh filter and assign our mesh to
03:19 - this mesh okay so let's end and if there
03:22 - it is there's our quad mesh alright so
03:24 - far so good also one quick note here
03:27 - over here i'm creating a mesh in the
03:28 - world so i'm using a mesh filter and a
03:30 - mesh render however you can also build
03:32 - this exact same mesh as the ui element
03:34 - now i cover that in detail in the radar
03:36 - chart video for the mesh creation it's
03:39 - all exactly the same thing the only
03:40 - thing that changes is just a different
03:42 - component in order to render it on the
03:43 - ui okay so with this we have our quad on
03:46 - screen now the next thing we need is
03:48 - just a mouse position
03:49 - so for that i've got a simple function
03:52 - in my utilities
03:55 - so here is the function as you can see
03:56 - it's extremely simple
03:58 - all it does is just takes the main
04:00 - camera does the screen to one point
04:02 - based on the input mouse position and
04:03 - gets the one position so with this we've
04:05 - got the mouse wrong position and now
04:07 - just to verify that it's correct let's
04:08 - simply modify this transform dot
04:10 - position
04:11 - into the mouse run position so let's see
04:13 - and let's actually put this on a prevoid
04:16 - update
04:17 - so it moves along with the mouse
04:20 - okay let's test and yep as i move the
04:22 - mouse i've got the quad falling behind
04:24 - okay so far so good
04:26 - also just one brief mention over here
04:28 - i'm using the method to get the mouse
04:29 - position in 2d
04:31 - you need a different method if you're
04:33 - working in 2d versus 3d but over here i
04:35 - want to draw on screen so i want the 2d
04:37 - method okay now so far we have our mesh
04:40 - that we're creating through code and we
04:42 - also have the mouse position
04:44 - now we need is essentially just add
04:45 - vertices onto this mesh as the mouse
04:47 - position changes now once again remember
04:50 - how meshes work it's all about polygons
04:52 - now here's a quick indie tip over here
04:54 - on the scene view if you click on this
04:56 - drop down menu you can see various
04:58 - shading modes and for example you can
04:59 - select wireframe and this way you can
05:01 - view all the actual polygons that make
05:03 - up your visuals so over here we can see
05:05 - that our quad is made up of two polygons
05:07 - we have four vertices so one two three
05:10 - and four
05:11 - and our triangles array is set up in
05:12 - order to generate these two polygons so
05:14 - here is one and here's the other one now
05:16 - our goal with this is essentially every
05:18 - time we move the mouse we're going to
05:20 - add let's say a new position here so
05:22 - when we move the mass from here over
05:24 - here we need to calculate that forward
05:25 - down to vector and then we take that
05:27 - vector and we rotate 90 degrees to get
05:29 - the vector pointing up another vector
05:31 - pointing down so we just add some
05:33 - distance which is going to be the inline
05:34 - thickness then we have these two points
05:37 - and we just connect them to the previous
05:38 - points on the mesh so that's what we're
05:40 - going to do okay so for stars let's add
05:42 - some simple logic to only draw when the
05:44 - mouse is actually down
05:50 - okay so on mouse button down so when the
05:52 - mouse is pressed then we're going to
05:54 - create a new mesh and then one cell down
05:56 - then it's over here that we're going to
05:58 - want to update the mesh so in order to
06:00 - update the mesh we're going to need to
06:01 - recreate all of these arrays
06:08 - okay so we recreate the arrays and we
06:10 - add the size in order to be able to add
06:12 - our following quant so we're going to
06:14 - need two vertices so we add two more the
06:16 - uvs are the same with this vertices so
06:18 - we also add two more and we're going to
06:20 - create two polygons so that means that
06:22 - we need six triangles
06:24 - again when working with meshes remember
06:25 - the difference between this triangle's
06:27 - array and the actual polygons so a
06:29 - polygon is a triangle a triangle shape
06:32 - but this array is the list of indices
06:34 - that make up that polygon so that is why
06:36 - you have three for every actual polygon
06:38 - that's a bit confusing at first but it
06:40 - all becomes clear when you actually see
06:42 - it so we create our new arrays with the
06:44 - new sizes now we just need to actually
06:46 - copy the current values onto this one
06:52 - okay so we're copying all of the indices
06:54 - and to make things easier let's also
06:56 - calculate our vertex indexes
07:02 - so again in order to add a new code
07:04 - we're going to add two new vertices so
07:06 - here when we go back by four we're
07:08 - essentially going to grab the two
07:09 - previous vertices the two ones that were
07:11 - created on the previous quant and these
07:13 - last two which are going to be the two
07:15 - new ones okay so we have the arrays and
07:17 - the new indexes now first let's store
07:19 - the last mouse position so we know how
07:21 - to calculate the vector
07:24 - so just a simple vector three for the
07:26 - last model's position
07:28 - then when we create a new mesh let's put
07:30 - it on that one
07:32 - so again go to that function in order to
07:34 - get the mouse warm position
07:37 - and over here using the current one and
07:39 - the last one we can calculate the mouse
07:41 - for the vector
07:45 - okay we have our forward vector now we
07:47 - just need to apply 90 degrees onto this
07:50 - so one approach that we can take to do
07:52 - that is to get the cross product of both
07:54 - this forward vector and the 2d normal
08:00 - so the normal factor in 2d is -1
08:03 - that's because the camera is usually on
08:05 - a negative position so usually on -10 by
08:07 - default
08:11 - so if we calculate the cross product
08:12 - we're essentially going to have the
08:14 - forward vector rotated by 90 degrees
08:16 - then we just multiply it by a certain
08:18 - line thickness
08:21 - and again this is just a direction
08:23 - vector so we need to add it on top of
08:24 - the current position
08:30 - so with this we have completely new
08:32 - vertex on the up position then you just
08:34 - need the exact same thing but pointing
08:35 - down so that one is actually pretty easy
08:37 - so new vertex down will be the same
08:40 - thing except the cross is between the
08:41 - inverted normal 2d
08:44 - so we can just multiply by minus one f
08:46 - now if this seems too confusing let's
08:48 - actually make a visual so it's easier to
08:50 - understand
08:52 - so if you don't let you set a field just
08:54 - to be able to grab some debug game
08:56 - objects
08:59 - so we're going to assign those in the
09:01 - editor and then down here we've got our
09:02 - new vertex positions
09:04 - let's just position them in there
09:09 - okay like this
09:11 - and now here let's just make two objects
09:17 - and just sign the reference and let's
09:19 - see what it looks like
09:20 - okay so i'm going to click and now as i
09:22 - move the mouse and you have to look at
09:24 - where the dots are positioned so the
09:26 - white dot that is the up vertex and the
09:28 - yellow dot that is the down vertex so
09:31 - we're calculating the normal between
09:32 - this point and the point where the mouse
09:34 - is right now then apply 90 degrees to
09:36 - get the white dot up there and the all
09:37 - that down there so there you go just
09:38 - some basic math by the way if you find
09:40 - the video helpful please hit the like
09:42 - button it's a tiny thing but it really
09:44 - does help thanks okay so now that we
09:46 - have our two points we just need to
09:47 - connect them to the previous quad
09:49 - first thing we need to set up are the
09:50 - uvs those are very simple because the
09:52 - mesh is supposed to be a solid color
09:56 - we only got two x-ray uv so we just need
09:59 - to update those two
10:00 - and then finally for the triangles
10:09 - actually here i forgot to play the
10:11 - vertices array
10:15 - so we add the vertex up vertex down on
10:17 - the uv zero one zero zero and then we
10:19 - set up the triangles
10:20 - again as always when dealing with meshes
10:22 - you need to be careful with the other on
10:23 - triangles it needs to be clockwise in
10:25 - order to face towards the camera so just
10:27 - set up the new triangles and finally
10:29 - update the mesh with these values
10:34 - okay so like this it should be working
10:36 - just need to modify one thing which is
10:38 - up here we're using a fixed position one
10:40 - set it should be
10:42 - the mouse position
10:44 - so here we could start off the mesh with
10:45 - an actual quant or we can start just on
10:48 - an exact point which will make it look
10:49 - like the initial part is much thinner
10:51 - than the line actually becomes so that
10:54 - looks quite a bit better so i actually
10:55 - prefer that
10:58 - and finally the last thing that we need
11:00 - here is to actually update the last
11:01 - mouse position
11:04 - so the less pause position becomes the
11:06 - new mouse position
11:08 - okay so let's test okay here i am and as
11:11 - i click and drag yep there you go look
11:12 - at that it is indeed drawing our mesh
11:15 - all right great it's already looking
11:17 - pretty good however this code is now
11:19 - running on every single frame so this is
11:21 - drawing way too much
11:23 - if we pause and look at it if we look at
11:25 - the wireframe this one has quite a lot
11:26 - of geometry probably way too much
11:29 - right now we're adding two new vertices
11:31 - and a new quad two new polygons on every
11:33 - single update so if the game is running
11:35 - at a thousand frames per second then
11:37 - we're adding a thousand polygons per
11:38 - second that is way too much very
11:40 - unnecessary so as a simple fix we can
11:43 - make sure that we only run this logic if
11:45 - the distance from the last point is big
11:48 - enough
11:53 - so here is some simple logic just
11:55 - testing if the distance is above a
11:56 - certain minimum distance if so then we
11:58 - add a new quad if not then we don't now
12:01 - of course he can play around this value
12:02 - in order to make the line smoother or
12:04 - more jagged in order to make it more or
12:06 - less performant so with this value this
12:08 - one is pretty big so like this if i draw
12:10 - yep there's a pretty jagged line
12:12 - especially if you do a lot of tight
12:13 - curves
12:14 - but if we put this at say 0.1 f
12:17 - and if there it is it looks perfect and
12:19 - very very smooth so we can click and
12:21 - draw the mouse and it draws on screen
12:23 - alright awesome so this is pretty much
12:25 - all there is to it now you can build
12:27 - upon this in order to add some buttons
12:28 - to change the line thickness change the
12:30 - color and so on so here is my final
12:32 - complete demo i've got a bunch of
12:33 - buttons in order to modify the size and
12:36 - color of the actual draw so let's make
12:38 - it really thin and in black and as i go
12:40 - yep there you go look at that it does
12:42 - draw now change the color and now pinned
12:44 - in white so these are only using the
12:46 - same material just changing the color
12:47 - and material that's it then make one
12:49 - green make one blue just like that
12:53 - then change make it really thick or make
12:55 - it a bit in between and so on so as you
12:57 - can see it's all very simple
13:02 - and as you can see i also had the
13:03 - ability to spawn multiple lines so all
13:06 - that does is just every time i click
13:07 - it's creating a new game object in order
13:08 - to spawn it so here on the scene we can
13:10 - see each one of these is a separate game
13:12 - object and each one updates perfectly
13:15 - alright so here it is as you can see i
13:17 - can click in order to draw anything in
13:19 - any shape so this would be perfect for
13:21 - any game where you want a player to be
13:23 - able to draw something so maybe that
13:25 - could be just a painting game or maybe
13:27 - it could be a strategy game in order to
13:28 - devise where the ins will go or maybe a
13:30 - multiplayer game in order to give your
13:32 - teammate some notes so like i said this
13:34 - is exactly what i used in my gamedev
13:36 - reacts videos the only other thing in
13:38 - there as you can see it's me drawing on
13:40 - top of the video so that's exactly using
13:42 - this but also using the transparent tnt
13:44 - window that i made in another video
13:46 - so here is the fully working really nice
13:48 - mesh drawing system now stay tuned for
13:50 - an upcoming video where i won't do
13:51 - another drawing system but that one will
13:53 - be based on pixels instead of free flow
13:56 - again if you're looking for a more
13:58 - guided path with step-by-step lectures
14:00 - then check out my complete courses
14:01 - alright hope that's useful check out
14:03 - these videos to learn some more thanks
14:05 - to these awesome patreon supporters for
14:07 - making these videos possible thank you
14:09 - for watching and i'll see you next time