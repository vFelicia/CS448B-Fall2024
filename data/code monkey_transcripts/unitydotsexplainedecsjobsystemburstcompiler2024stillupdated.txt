00:00 - in this video we're going to cover
00:01 - unities new data oriented technology
00:03 - stack we're going to go over what it is
00:05 - how it works and what are the benefits
00:07 - let's begin so first of all dot stands
00:18 - for data oriented technology stack this
00:21 - is sort of a different way of writing
00:22 - code and thinking of how to set up
00:24 - object logic and that the main goal of
00:26 - this new paradigm is to have performance
00:28 - by the phone
00:30 - meaning if you learn how to set up your
00:32 - game this way you will write cleaner
00:34 - code and experience excellent
00:36 - multi-threaded performance which enables
00:38 - you to make more complex games with more
00:40 - units more effects better visuals and so
00:42 - on the technology stack is composed of
00:45 - three main components the c-sharp job
00:48 - system the entity component system and
00:51 - the versed compound
00:53 - first the c-sharp job system enables you
00:56 - to take advantage of multi-core
00:57 - processors in order to run several jobs
00:59 - at the same time one of the main issues
01:02 - with Unity performance has always been
01:04 - due to how the main update thread is
01:06 - single threaded so for example if you
01:09 - have path winding for your units in
01:11 - single thread code first you calculate
01:13 - the path for the first unit then when
01:15 - that's done you count only de path for
01:17 - the second unit and so on whereas with
01:20 - multi-threaded code you can calculate
01:21 - many paths at the same time depending on
01:24 - the number of course so if you have a
01:26 - lot of small independent tasks running
01:29 - in your game you can massively increase
01:31 - your performance writing in c-sharp
01:33 - multi-threaded code is always very
01:34 - tricky since there are many things that
01:36 - can go wrong in seemingly random ways
01:38 - that can be a nightmare to test and
01:40 - debug writing multi-threaded code also
01:43 - means you need to manage how many
01:44 - threads you have how many you should
01:46 - have and what each of them is doing so
01:49 - the c-sharp Java system manages all that
01:51 - and helps you write simpler code by
01:53 - having you create jobs instead of
01:55 - threats then those jobs are run on the
01:57 - threads and the whole thing is managed
01:59 - by the c-sharp job system this is
02:02 - designed to make it easier to write
02:03 - multi-threaded code while reducing
02:05 - complexity and providing several
02:07 - protections from the biggest issues
02:08 - caused by multi-threading like
02:10 - conditions so if you learned to write
02:13 - code that can be Java fide you can
02:14 - benefit from massively improved
02:16 - performance then the entity component
02:19 - system this is the part that requires a
02:21 - different mindset when writing code it's
02:24 - all about separating your code between
02:25 - logic and that instead of game objects
02:28 - with monobehaviour scripts you have
02:30 - entities components and systems so you
02:33 - have an entity that entity contains
02:35 - components which hold the data and these
02:37 - systems apply logic to that data for
02:40 - example you have an entity named unit
02:42 - that entity has a component composition
02:45 - which holds a x and y value then you
02:48 - have a system called move position which
02:50 - runs on every entity that has a position
02:52 - component and moves its x and y values
02:56 - under the hood what makes it so much
02:59 - more performant has to do with how
03:01 - memory is set up for a CPU it's quite
03:03 - expensive to be constantly jumping
03:05 - around in memory in the normal way
03:08 - working with game objects those objects
03:10 - are very heavy and they are located
03:12 - somewhere random in memory then each
03:14 - component can be in another place and so
03:16 - on so as the update thread is running
03:19 - the CPU is jumping all over the place
03:21 - looking for the memory it needs whereas
03:23 - with the entity component system the
03:25 - memory gets much more packed together in
03:27 - specific groups of components which
03:29 - boosts performance significantly since
03:31 - the CPU no longer has to jump around in
03:33 - memory in order to find the next object
03:34 - it needs so again with regards to code
03:37 - the main thing you need to understand is
03:39 - how it should be organized you have
03:41 - entities components and systems
03:43 - components home data systems process
03:46 - that data and entities refer to
03:48 - individual instances of component data
03:51 - so you can think about it how it relates
03:53 - the normal game object system an entity
03:56 - is like a specific game object so if you
03:59 - have two game objects in your scene each
04:01 - of them would be an entity components
04:04 - are held by entities and have the data
04:06 - so just like in the normal way you have
04:08 - components attached to each game object
04:11 - in this case you have components
04:13 - attached to each entity and finally the
04:16 - main difference is these systems which
04:17 - act upon the component data in the
04:20 - normal way your model behavior scripts
04:22 - hold
04:23 - in variables and also have functions to
04:25 - modify that data in ECS they are cleanly
04:28 - separated an entity refers to a specific
04:31 - instance of components the components
04:33 - home data and these systems modify that
04:36 - data following the easiest pattern also
04:39 - makes it easier to write code that can
04:41 - be Java fide by the job system which
04:43 - again excellent performance and finally
04:46 - the last dot component is the burst
04:48 - compiler which is a piece of really
04:50 - amazing almost magical technology it
04:52 - takes all that nice c-sharp code you
04:54 - write and converts it into highly
04:56 - optimized machine code it's especially
04:59 - good at making optimized code from the
05:01 - code generated by the c-sharp job system
05:03 - the compiler is also smart enough to
05:05 - take advantage of specific optimizations
05:08 - for the specific platform you're
05:09 - compiling for so for you all it takes is
05:12 - ticking a box to use it and benefit from
05:14 - massive performance the better you write
05:16 - your code according to e CS and each app
05:18 - system the better the performance boost
05:20 - these are the three components that make
05:23 - up the dots data oriented technology
05:25 - stack so to summarize you write your
05:28 - code according to the entity component
05:30 - system then that code can be Java fide
05:32 - to run in multiple threads managed by
05:34 - the c-sharp job system and then the
05:37 - burst compiler converts to c-sharp jobs
05:39 - into highly optimized machine code all
05:42 - of that makes up the data oriented tech
05:44 - stack or dots so I hope this video
05:47 - helped you understand what that is and
05:49 - how it works it requires a slight change
05:51 - in thinking but the potential benefits
05:53 - are immense I'm currently working on an
05:56 - e CS tutorial so stay tuned for more
05:57 - practical videos on this exciting new
05:59 - technology if you liked the video
06:01 - subscribe to the channel for more unity
06:03 - content alright see you next time
06:06 - [Music]