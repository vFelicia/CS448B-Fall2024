With timestamps:

00:03 - foreign
00:10 - [Music]
00:13 - I think we can all agree that habits are
00:16 - extremely important and I'd actually
00:17 - argue that they're one of if not the
00:19 - most important factors in defining
00:21 - success now that could be success in
00:23 - life success in programming some kind of
00:25 - field sport whatever it is that you do
00:28 - what I find with myself is that what I'm
00:30 - able to consistently do without having
00:32 - to think about a ton is really what
00:34 - leads me to longer term success so with
00:37 - that said I wanted to make a video here
00:38 - an outline for you what I think are the
00:40 - habits of god tier programmers Now by no
00:43 - means am I calling myself a God to your
00:45 - programmer a lot of the things I'm
00:47 - taking here are things that I've seen
00:48 - from programmers that I've worked with
00:50 - which are much more experienced than
00:52 - myself and I've kind of noticed these
00:53 - things and tried to work on them on my
00:55 - own because I've seen hey programmers
00:57 - that are way better than me always do
00:59 - this this this and this if I want to get
01:01 - to their level chances are I need to
01:03 - build similar habits to what they have
01:05 - so with that said let's get into this
01:07 - video and talk about the habits of God
01:09 - to your programmers after a quick word
01:11 - from our sponsor before we get started I
01:13 - need to thank Pi scripter for sponsoring
01:15 - this video pyscripter is a free and open
01:18 - source python integrated development
01:20 - environment with all the features you'd
01:22 - expect in a modern IDE it's also
01:24 - natively compiled for Windows to use
01:26 - minimal memory with maximum performance
01:28 - Pi scripter comes with features designed
01:30 - to enable smooth and efficient Python
01:32 - Programming these features include a
01:34 - syntax highlighting editor an integrated
01:36 - python interpreter full python debugging
01:39 - with support for remote debugging
01:41 - integrated unit testing and integration
01:43 - for python tools like pilint tabnanny
01:46 - and profile and so much more Pi scripter
01:49 - users can run or debug files from memory
01:51 - and use a code editor to-do list find
01:54 - and replace an integrated regular
01:56 - expression testing Embarcadero also
01:58 - offers free GUI libraries for python
02:00 - that are integrated into Pi scripter for
02:02 - example their Delphi fmx or python GUI
02:05 - Library supports multiple platforms
02:07 - including Android this package is used
02:09 - to build cross-platform GUI applications
02:11 - for all windows Mac Linux and Android
02:14 - Target platforms find more info from
02:16 - their free ebook and download PI
02:18 - scripter from the link in the
02:19 - description
02:23 - [Music]
02:25 - alright so let's go ahead and dive into
02:27 - it now as I get into these different
02:29 - habits I think it's a good exercise to
02:31 - ask yourself do I do this is this
02:34 - routine is this a habit I have and if
02:36 - it's not to genuinely challenge yourself
02:38 - and say would I be a better and more
02:40 - effective programmer if I adopted this
02:43 - habit I'll let you decide that for
02:45 - yourself but let's get into habit number
02:47 - one
02:49 - [Music]
02:52 - so habit number one is designing and
02:55 - planning your code before you write any
02:58 - now this is something that seems really
03:00 - straightforward it seems like it should
03:01 - be easy to do but I can tell you I've
03:03 - known about this habit and knowing this
03:05 - is an important thing to do for many
03:06 - years yet it's still not something that
03:08 - I consistently do before I write every
03:11 - piece of code some of it might come down
03:13 - to laziness maybe arrogance thinking I
03:15 - don't need to write a plan or a design
03:17 - but I can promise you that every great
03:19 - programmer I've ever seen even if it's
03:21 - minimal always comes up with some kind
03:23 - of design or Plan before they jump into
03:26 - the code and start writing now there's a
03:28 - ton of different reasons for this but
03:30 - the main one is that you want to have a
03:31 - good picture of what it is that you're
03:33 - actually building what you're doing and
03:35 - kind of the task you're accomplishing
03:37 - before you just go and start writing a
03:39 - bunch of code the idea here is that if
03:41 - you dive in and write a bunch of code
03:42 - it's possible you could come up with a
03:44 - good solution but in a lot of cases
03:46 - you're not going to fully think through
03:47 - the problem before you start writing and
03:50 - later down the road you're going to
03:51 - realize hey I've made a mistake here
03:52 - this isn't scalable it's not flexible
03:55 - enough I don't know how to test this or
03:56 - how to document this and you have to go
03:58 - and change a bunch of code or rewrite
04:00 - code because of your lack of thinking
04:02 - and planning kind of at the starting
04:04 - process so again really a difficult
04:07 - Habit to pick up because a lot of people
04:09 - want to just get in there they want to
04:10 - start coding they want to feel like
04:12 - they're getting something done but it
04:13 - will save you a drastic amount of time
04:15 - to come up with a thorough plan or some
04:17 - kind of design especially if you're
04:19 - building a more complicated system but
04:22 - with that said the only way to pick up
04:23 - this habit is to do this no matter what
04:25 - type of code you're writing even if it's
04:27 - a simple function even if it's a really
04:29 - small program even if it's something
04:31 - you've done a hundred times before it's
04:33 - still a habit that you need to build and
04:35 - you need to say okay what is my plan
04:37 - what are the steps I'm going to go
04:38 - through maybe you need to draw some kind
04:40 - of uml diagram again depends on the
04:42 - complexity of what it is that you're
04:44 - making but even if you're a beginner
04:45 - programmer right now practice this habit
04:48 - by before you starting to code spending
04:50 - five minutes listing out everything you
04:52 - need to do coming up with just a general
04:54 - outline or kind of the big picture of
04:56 - the program that you're building maybe
04:58 - breaking it down into smaller tasks and
05:01 - just thinking through the entire process
05:02 - before you go in there and start writing
05:05 - code
05:07 - [Music]
05:10 - so moving on to Habit number two I have
05:13 - testing now obviously testing is
05:15 - important you need to have confidence in
05:17 - your code you need to make sure it's
05:19 - doing what it's supposed to do if you're
05:21 - working for any kind of large company
05:22 - you have a critical feature or really
05:24 - you just want to make sure that your
05:25 - code is consistently working and that
05:27 - it's not going to break in future
05:29 - changes you need to be writing automated
05:31 - tests there's all different kinds of
05:33 - tests you can be writing but this needs
05:35 - to be a habit and something that you do
05:37 - consistently now even though I know this
05:39 - extremely well and I tell you guys on
05:41 - the channel constantly to test your code
05:43 - this is still something that oftentimes
05:45 - I end up not doing it's a habit that
05:47 - I've really struggled to build and
05:49 - that's because a lot of times I'm lazy I
05:51 - don't want to write a test case it's
05:53 - brutal oftentimes to have to write your
05:55 - tests and it's just something that a lot
05:57 - of times I like to skip over and I'll
05:58 - say oh I'll do it later now that's not
06:00 - good that's something I need to work on
06:02 - but what I've noticed kind of forces me
06:04 - to write the tests or helps me build
06:06 - this habit is to write them before I
06:08 - write my code so actually write best
06:10 - cases before I go into building a
06:12 - solution or I'm constantly thinking
06:15 - about during the design and planning
06:16 - phase how am I going to test my code
06:18 - before I start writing it by doing that
06:21 - I make my job a lot easier when it comes
06:24 - to eventually writing the test cases
06:25 - because I've thought about how am I
06:27 - going to segment this code out how am I
06:29 - going to test this and a lot of times I
06:30 - end up reducing the complexity of my
06:33 - code to make sure I'm going to be able
06:35 - to test it later on so again a difficult
06:37 - Habit to pick up something that's really
06:39 - annoying I sympathize with you no one
06:41 - wants to write tests but you absolutely
06:43 - need to do it it gives you confidence in
06:46 - your code and it's a habit that I'm
06:47 - continually working on and that you
06:49 - should probably be working on as well
06:52 - [Music]
06:56 - moving on to step number three we have
06:59 - documentation again this is one of these
07:01 - things that no one likes to do it's a
07:04 - pain it's really annoying us developers
07:06 - usually don't want to be writing out
07:07 - full sentences or even writing comments
07:09 - but you absolutely need to do it it
07:11 - saves a ton of time for other developers
07:13 - and for yourself especially if you're
07:15 - coming back to the code base after a
07:17 - long period of time some examples of
07:19 - things that I like to document are
07:21 - installation steps common problems or
07:23 - debugging a lot of times I run into some
07:26 - kind of weird error and I usually like
07:28 - to document how I fix that so that if I
07:30 - ever run into it again I have the
07:32 - solution or if another developer runs
07:34 - into it they can have a look at that
07:35 - obviously documenting your code so that
07:37 - could be writing comments doc strings
07:39 - even just read me files kind of
07:41 - explaining the general idea of what's
07:43 - going on and then even how to contribute
07:45 - to a repository or how to kind of change
07:48 - the code or add things there's a lot of
07:50 - other stuff you could potentially be
07:52 - documenting all of these things are a
07:54 - pain there's stuff that a lot of times
07:55 - people leave until the very last minute
07:57 - but there are very important to be doing
07:59 - and they're going to save you and your
08:01 - team a significant amount of time so
08:04 - another Habit to think about are you
08:06 - documenting your code do you write
08:08 - comments do you write readme files are
08:10 - you explaining installation steps common
08:12 - errors how to contribute to your code
08:13 - base even if it's simple I think you
08:16 - should get in the habit of doing that
08:17 - and one way you can kind of practice
08:18 - doing that is every time you upload a
08:20 - GitHub repository you can write kind of
08:22 - some instructions for running the code
08:23 - how to get stuff set up even maybe a
08:26 - little paragraph about how you've
08:28 - designed the code or where some of the
08:29 - different parts of the code lives I
08:31 - understand it might not be extremely
08:33 - useful on a smaller project but is a
08:35 - good habit to get in the practice of
08:37 - doing because if you're working on
08:38 - larger code bases or working with a ton
08:40 - of different people you're going to need
08:42 - documentation
08:44 - [Music]
08:48 - all right moving on to step number four
08:50 - I have automation now when I say
08:53 - automation this can be stuff like
08:54 - setting up your environment so that you
08:56 - know all of your keyboard shortcuts it
08:58 - can be automating testing or automating
09:00 - deployments or automating just like
09:03 - setting up a certain folder structure or
09:05 - different files in your code base the
09:07 - general idea here is that all of these
09:09 - really good programmers that I've seen
09:10 - don't waste time doing repetitive stuff
09:13 - they're programmers after all and they
09:15 - always like to automate pretty much
09:17 - everything they possibly can it's
09:19 - actually a little bit ridiculous some of
09:21 - the automation stuff that I've seen from
09:22 - them but automating adding stuff to
09:24 - their calendar automating uh doing
09:26 - testing automating release notes
09:28 - automating literally anything you can
09:30 - possibly think of even if it's like a 5
09:32 - or 10 second task if they know they're
09:34 - going to be doing that a ton of times
09:36 - they'll spend the hour two hours
09:38 - whatever it is to write a little script
09:39 - that's going to automate that away so
09:42 - just something to keep in mind here
09:43 - these really good programmers the reason
09:45 - why they can oftentimes get a ton of
09:47 - stuff done is is because they spend the
09:49 - time up front to automate set up their
09:52 - environment and make themselves as
09:53 - efficient as humanly possible so they
09:55 - can spend a majority of their time
09:57 - writing code or writing tests or
09:59 - whatever it is they need to do rather
10:01 - than performing these kind of monotonous
10:02 - and repetitive tasks
10:05 - [Music]
10:09 - so moving on to Habit number five I have
10:12 - writing clean code now the point here is
10:15 - that you should get in the habit as
10:17 - early as possible of writing clean and
10:19 - quality code no matter what you're
10:21 - coding now that's what I've noticed with
10:23 - these kind of god tier really
10:24 - experienced programmers it doesn't
10:26 - matter if they're working on a hobby
10:27 - project on a non-important feature on
10:29 - something that's critically important
10:31 - they always have the same code quality
10:33 - because they're so used to writing high
10:35 - quality clean code that they do it no
10:38 - matter what it's like second nature they
10:40 - don't have to think about writing clean
10:41 - code that's just how they code because
10:43 - they've been doing it for so long so I
10:45 - think you need to ask yourself here do I
10:47 - always write the best quality code that
10:49 - I can am I sometimes rushed am I
10:51 - sometimes you know skipping out on
10:52 - variable names or functions or dividing
10:55 - my code and making it simpler and if you
10:57 - are you might just want to consider kind
10:59 - of the repercussions of doing that that
11:02 - you're not building that habit of
11:04 - consistently writing quality code and
11:05 - you actually have to think more
11:07 - carefully okay how do I write my code
11:09 - and cut away cleaner manner once you get
11:11 - in the habit of just always doing that
11:13 - it doesn't become difficult anymore
11:14 - becomes simple you're just always
11:16 - writing code in a quality way I know
11:18 - this was a bit repetitive but I just
11:20 - want to drive the point home that these
11:22 - guys that I've seen that are really
11:23 - really good programmers they don't think
11:25 - about writing clean code that's just how
11:26 - they code because they've been doing it
11:28 - for so long
11:30 - [Music]
11:34 - so with all that said I think I'm going
11:36 - to start wrapping up the video here if
11:38 - you're interested in getting better at
11:39 - programming you can check out my course
11:41 - programmingexpert.io if you want to
11:43 - learn blockchain and web3 development
11:44 - then check out my new course blockchain
11:46 - expert they'll both be linked in the
11:48 - description regardless I wanted to make
11:50 - this video to try to give you some
11:51 - inspiration and information about how to
11:54 - be a better programmer hopefully you
11:56 - take this to hard and start working on
11:57 - some of these habits I know that I am
11:59 - doing that consistently and I'm slowly
12:01 - improving in all these areas and seeing
12:03 - how much better of a programmer I can
12:05 - really be that set all ended here I hope
12:07 - you guys enjoyed if you did make sure
12:08 - leave a like subscribe to the channel
12:10 - and I will see you in the next one
12:12 - [Music]
12:14 - foreign
12:15 - [Music]

Cleaned transcript:

foreign I think we can all agree that habits are extremely important and I'd actually argue that they're one of if not the most important factors in defining success now that could be success in life success in programming some kind of field sport whatever it is that you do what I find with myself is that what I'm able to consistently do without having to think about a ton is really what leads me to longer term success so with that said I wanted to make a video here an outline for you what I think are the habits of god tier programmers Now by no means am I calling myself a God to your programmer a lot of the things I'm taking here are things that I've seen from programmers that I've worked with which are much more experienced than myself and I've kind of noticed these things and tried to work on them on my own because I've seen hey programmers that are way better than me always do this this this and this if I want to get to their level chances are I need to build similar habits to what they have so with that said let's get into this video and talk about the habits of God to your programmers after a quick word from our sponsor before we get started I need to thank Pi scripter for sponsoring this video pyscripter is a free and open source python integrated development environment with all the features you'd expect in a modern IDE it's also natively compiled for Windows to use minimal memory with maximum performance Pi scripter comes with features designed to enable smooth and efficient Python Programming these features include a syntax highlighting editor an integrated python interpreter full python debugging with support for remote debugging integrated unit testing and integration for python tools like pilint tabnanny and profile and so much more Pi scripter users can run or debug files from memory and use a code editor todo list find and replace an integrated regular expression testing Embarcadero also offers free GUI libraries for python that are integrated into Pi scripter for example their Delphi fmx or python GUI Library supports multiple platforms including Android this package is used to build crossplatform GUI applications for all windows Mac Linux and Android Target platforms find more info from their free ebook and download PI scripter from the link in the description alright so let's go ahead and dive into it now as I get into these different habits I think it's a good exercise to ask yourself do I do this is this routine is this a habit I have and if it's not to genuinely challenge yourself and say would I be a better and more effective programmer if I adopted this habit I'll let you decide that for yourself but let's get into habit number one so habit number one is designing and planning your code before you write any now this is something that seems really straightforward it seems like it should be easy to do but I can tell you I've known about this habit and knowing this is an important thing to do for many years yet it's still not something that I consistently do before I write every piece of code some of it might come down to laziness maybe arrogance thinking I don't need to write a plan or a design but I can promise you that every great programmer I've ever seen even if it's minimal always comes up with some kind of design or Plan before they jump into the code and start writing now there's a ton of different reasons for this but the main one is that you want to have a good picture of what it is that you're actually building what you're doing and kind of the task you're accomplishing before you just go and start writing a bunch of code the idea here is that if you dive in and write a bunch of code it's possible you could come up with a good solution but in a lot of cases you're not going to fully think through the problem before you start writing and later down the road you're going to realize hey I've made a mistake here this isn't scalable it's not flexible enough I don't know how to test this or how to document this and you have to go and change a bunch of code or rewrite code because of your lack of thinking and planning kind of at the starting process so again really a difficult Habit to pick up because a lot of people want to just get in there they want to start coding they want to feel like they're getting something done but it will save you a drastic amount of time to come up with a thorough plan or some kind of design especially if you're building a more complicated system but with that said the only way to pick up this habit is to do this no matter what type of code you're writing even if it's a simple function even if it's a really small program even if it's something you've done a hundred times before it's still a habit that you need to build and you need to say okay what is my plan what are the steps I'm going to go through maybe you need to draw some kind of uml diagram again depends on the complexity of what it is that you're making but even if you're a beginner programmer right now practice this habit by before you starting to code spending five minutes listing out everything you need to do coming up with just a general outline or kind of the big picture of the program that you're building maybe breaking it down into smaller tasks and just thinking through the entire process before you go in there and start writing code so moving on to Habit number two I have testing now obviously testing is important you need to have confidence in your code you need to make sure it's doing what it's supposed to do if you're working for any kind of large company you have a critical feature or really you just want to make sure that your code is consistently working and that it's not going to break in future changes you need to be writing automated tests there's all different kinds of tests you can be writing but this needs to be a habit and something that you do consistently now even though I know this extremely well and I tell you guys on the channel constantly to test your code this is still something that oftentimes I end up not doing it's a habit that I've really struggled to build and that's because a lot of times I'm lazy I don't want to write a test case it's brutal oftentimes to have to write your tests and it's just something that a lot of times I like to skip over and I'll say oh I'll do it later now that's not good that's something I need to work on but what I've noticed kind of forces me to write the tests or helps me build this habit is to write them before I write my code so actually write best cases before I go into building a solution or I'm constantly thinking about during the design and planning phase how am I going to test my code before I start writing it by doing that I make my job a lot easier when it comes to eventually writing the test cases because I've thought about how am I going to segment this code out how am I going to test this and a lot of times I end up reducing the complexity of my code to make sure I'm going to be able to test it later on so again a difficult Habit to pick up something that's really annoying I sympathize with you no one wants to write tests but you absolutely need to do it it gives you confidence in your code and it's a habit that I'm continually working on and that you should probably be working on as well moving on to step number three we have documentation again this is one of these things that no one likes to do it's a pain it's really annoying us developers usually don't want to be writing out full sentences or even writing comments but you absolutely need to do it it saves a ton of time for other developers and for yourself especially if you're coming back to the code base after a long period of time some examples of things that I like to document are installation steps common problems or debugging a lot of times I run into some kind of weird error and I usually like to document how I fix that so that if I ever run into it again I have the solution or if another developer runs into it they can have a look at that obviously documenting your code so that could be writing comments doc strings even just read me files kind of explaining the general idea of what's going on and then even how to contribute to a repository or how to kind of change the code or add things there's a lot of other stuff you could potentially be documenting all of these things are a pain there's stuff that a lot of times people leave until the very last minute but there are very important to be doing and they're going to save you and your team a significant amount of time so another Habit to think about are you documenting your code do you write comments do you write readme files are you explaining installation steps common errors how to contribute to your code base even if it's simple I think you should get in the habit of doing that and one way you can kind of practice doing that is every time you upload a GitHub repository you can write kind of some instructions for running the code how to get stuff set up even maybe a little paragraph about how you've designed the code or where some of the different parts of the code lives I understand it might not be extremely useful on a smaller project but is a good habit to get in the practice of doing because if you're working on larger code bases or working with a ton of different people you're going to need documentation all right moving on to step number four I have automation now when I say automation this can be stuff like setting up your environment so that you know all of your keyboard shortcuts it can be automating testing or automating deployments or automating just like setting up a certain folder structure or different files in your code base the general idea here is that all of these really good programmers that I've seen don't waste time doing repetitive stuff they're programmers after all and they always like to automate pretty much everything they possibly can it's actually a little bit ridiculous some of the automation stuff that I've seen from them but automating adding stuff to their calendar automating uh doing testing automating release notes automating literally anything you can possibly think of even if it's like a 5 or 10 second task if they know they're going to be doing that a ton of times they'll spend the hour two hours whatever it is to write a little script that's going to automate that away so just something to keep in mind here these really good programmers the reason why they can oftentimes get a ton of stuff done is is because they spend the time up front to automate set up their environment and make themselves as efficient as humanly possible so they can spend a majority of their time writing code or writing tests or whatever it is they need to do rather than performing these kind of monotonous and repetitive tasks so moving on to Habit number five I have writing clean code now the point here is that you should get in the habit as early as possible of writing clean and quality code no matter what you're coding now that's what I've noticed with these kind of god tier really experienced programmers it doesn't matter if they're working on a hobby project on a nonimportant feature on something that's critically important they always have the same code quality because they're so used to writing high quality clean code that they do it no matter what it's like second nature they don't have to think about writing clean code that's just how they code because they've been doing it for so long so I think you need to ask yourself here do I always write the best quality code that I can am I sometimes rushed am I sometimes you know skipping out on variable names or functions or dividing my code and making it simpler and if you are you might just want to consider kind of the repercussions of doing that that you're not building that habit of consistently writing quality code and you actually have to think more carefully okay how do I write my code and cut away cleaner manner once you get in the habit of just always doing that it doesn't become difficult anymore becomes simple you're just always writing code in a quality way I know this was a bit repetitive but I just want to drive the point home that these guys that I've seen that are really really good programmers they don't think about writing clean code that's just how they code because they've been doing it for so long so with all that said I think I'm going to start wrapping up the video here if you're interested in getting better at programming you can check out my course programmingexpert.io if you want to learn blockchain and web3 development then check out my new course blockchain expert they'll both be linked in the description regardless I wanted to make this video to try to give you some inspiration and information about how to be a better programmer hopefully you take this to hard and start working on some of these habits I know that I am doing that consistently and I'm slowly improving in all these areas and seeing how much better of a programmer I can really be that set all ended here I hope you guys enjoyed if you did make sure leave a like subscribe to the channel and I will see you in the next one foreign
