With timestamps:

00:00 - all right so now let's work in the main
00:01 - game loop and start getting all this to
00:03 - work together so we've successfully
00:04 - completed the bass we've completed the
00:07 - pipe we have the bird now it's just time
00:09 - to implement all of it so first I'm just
00:11 - going to change my draw window function
00:13 - a little bit so now I'm gonna add in an
00:15 - ability to draw pipes as well as the
00:17 - ability to draw the base so what I'm
00:20 - gonna do in here is just complete this
00:23 - already is I'm gonna draw all the pipes
00:25 - and the base so I'm gonna say for pipe
00:27 - in pipes and pipes are get is gonna come
00:31 - in as a list because we could have more
00:32 - than one pipe on a screen at once I'm
00:34 - simply gonna say not that pipe don't
00:38 - draw and we'll pass it a window so now
00:40 - for all of our pipes we will draw them
00:42 - next thing I'm gonna do is say bass drop
00:45 - and give it a window and that's as easy
00:48 - as it is to draw our stuff and that's
00:50 - why I really like creating these draw
00:51 - methods because they just make it super
00:53 - clean and we can do all of the drawing
00:54 - from the object itself all right so next
00:57 - we need to now add and create I guess a
01:00 - bass and some pipes so let's start by
01:03 - first of all just changing our bird
01:04 - position to be a little bit different so
01:07 - I'm gonna change it to actually be 23350
01:11 - because that's where it should actually
01:13 - be located at least like that's what I
01:15 - figured out is kind of the best position
01:17 - and what I'm also gonna do is create a
01:18 - base now just gonna say base equals base
01:21 - and give this a height of 700 now this
01:25 - is because this is gonna be at the very
01:28 - bottom of our screen and that's where
01:31 - 700 is because I believe the height is
01:33 - 800 let me actually just look here to
01:36 - make sure I'm just looking at my other
01:37 - file by the way because I want to make
01:38 - sure I don't mess any of this up oh my
01:41 - bad actually we're not gonna make it 700
01:43 - we're going to make it 7:30 it's a
01:46 - little bit lower okay so 730 that's
01:48 - where our base is now we're gonna make
01:50 - sure that we past pipes and base and I
01:53 - guess I need to still program pipes
01:55 - don't ever say say pipes equals a list
01:57 - and I'm just gonna throw one pipe in
01:59 - here right now and we'll start with it
02:00 - at a height of 700 okay so now that we
02:04 - have that this is gonna be weird but we
02:06 - can actually just draw this and see what
02:08 - this looks like to start so let's do
02:11 - control B here and you can see that we
02:13 - now
02:13 - have this base which isn't moving as
02:16 - well as this bird so if we want to fix
02:18 - this and allow it to move well let's do
02:21 - that so let's start by actually moving
02:23 - the base so let's say base don't move
02:26 - like this and now let's run this and see
02:28 - what happens and now you can see we have
02:30 - this moving base and it makes it look
02:32 - like our bird is actually kind of flying
02:34 - through the screen which i think is
02:36 - pretty interesting and that was pretty
02:37 - easy to do alright so now let's move all
02:40 - of our pipes and if we remember here if
02:43 - I go to pipes what do you call it here
02:46 - our pipe yes so it needs to move
02:48 - backwards because we give it a starting
02:50 - exhibition my apologies so anyway so
02:51 - let's now move all of our pipe so do
02:53 - this I'm gonna say four pipe in pipes
02:56 - because we might have more than one pipe
02:57 - in here on a say pipe don't move
03:01 - all right now let's see if we got a pipe
03:03 - moving on our screen all right give it a
03:05 - second and there we go we have some
03:07 - pipes they have a random height and they
03:09 - have started moving so now we need to do
03:11 - is figure out once that pipe kind of
03:13 - leaves the screen we need to generate
03:15 - another one and another one and another
03:17 - one so how do we do that
03:20 - well we're gonna do that inside of this
03:21 - four loop that we just created so what
03:24 - we essentially need to do is check the x
03:26 - position of our pipe and once it reaches
03:28 - certain point we need to create another
03:30 - pipe and then another pipe and then
03:31 - another one and then another one and so
03:33 - on so what I'm gonna do here is first
03:35 - we're actually going to check for
03:37 - collision with our pipes so I'm gonna
03:39 - say if bird are not very I'm saying if
03:43 - pipe dot collide bird then what we'll do
03:48 - is well we need to do something so in
03:50 - this case I'm actually just gonna pass
03:51 - for right now because I don't want to do
03:53 - anything with the bird quite yet but if
03:55 - we collide with the pipe well we need to
03:58 - you know end the game we need to
03:59 - actually do something now the next thing
04:01 - I'm gonna do is check the position of
04:03 - the pipe so I'm gonna say if pipe I go
04:06 - down here if pipe dot x+ pipe pipe
04:11 - underscore I guess whether top dog get
04:14 - underscore width is less than zero now
04:17 - what this essentially is checking is if
04:19 - our pipe is completely off the screen so
04:21 - by getting the x position of the pipe as
04:22 - well as the width of it if it's less
04:24 - than zero that means it's completely
04:26 - the screen then what we're gonna do is
04:28 - we're gonna remove that pipe now we
04:29 - can't quite just remove it from this for
04:31 - loop because we're looping through the
04:32 - pipes so what we need to do is create a
04:34 - list called Rama which is gonna stand
04:36 - for remove and we're gonna add that pipe
04:38 - to the list to remove so we're gonna say
04:40 - Ram dot append pipe and that's pretty
04:45 - straightforward all right now what the
04:47 - next thing we're to do is we're gonna
04:47 - say if not type dot pass and pipe dot X
04:53 - less than bird dot X row and you say
04:57 - type dot past equals true and we're
05:01 - gonna say add underscore pipe equals
05:04 - true now what this is gonna do for us is
05:06 - it's gonna check if we have passed the
05:09 - pipe so let's go back into our drawing
05:11 - thing here and I can't I have now I
05:13 - regret having stopped drawing the thing
05:15 - so anyways let's say that you know this
05:17 - is our pipe like this and let's say that
05:21 - this is our bird well as soon as our
05:24 - bird passes by this pipe what we need to
05:26 - do is generate a new pipe for it to
05:28 - start you know going through or whatever
05:30 - so that's what we're checking there as
05:33 - soon as we pass the pipe generate a new
05:34 - one
05:34 - anyways let's do that now so we say add
05:37 - pipe and then we continue to move these
05:40 - pipes now what I'm gonna do in here is
05:42 - get outside of this for loop and say if
05:45 - add underscore pipe then what we're
05:48 - gonna do is say score plus equals one
05:50 - which reminds me I need to create a
05:51 - score variable because once we pass a
05:53 - pipe well that means that we've gotten a
05:56 - point we need to keep track of that for
05:57 - our game then what we're gonna do is
05:59 - we're gonna create a new pipe I'm gonna
06:02 - add that to the screen so to do that is
06:04 - pretty straightforward we're gonna say
06:05 - pipes u dot append and in this case
06:09 - we're just gonna do pipe and we're gonna
06:11 - give it the same x position of 700 now
06:14 - after we do this we're going to remove
06:16 - those pipes that we had up here that we
06:18 - need to remove because they went off the
06:20 - screen I'm gonna say for our in in REM
06:24 - let us say pipes don't remove our and
06:29 - that should just get rid of our pipes
06:30 - for us alright so now that we have that
06:32 - we actually will see that our pipes will
06:35 - start generating properly on the screen
06:37 - so let's run this
06:38 - clicking the wrong key here what is my
06:41 - variable local add piped reference oh my
06:43 - bad we need to do ad underscore pipe
06:45 - equals false to start up here because
06:47 - you know if this doesn't happen we're
06:49 - not gonna define it so just make sure
06:50 - you add that at the top above remove
06:52 - let's run this and now we should see
06:54 - that our pipes start generating and as
06:56 - soon as we pass one pipe another pipe
06:59 - will generate hmm what is the air here X
07:02 - not in not in list let me have a look at
07:05 - this and I'll be right back okay so
07:07 - apparently I can't spell or read and I
07:09 - excellent typed random so that should be
07:11 - our anyways my apologies let's run this
07:14 - now and see if this works
07:16 - all right so there we go that's a pipe
07:18 - and that's another pipe and there's
07:22 - another pipe and if we want these pipes
07:23 - to spawn closer to each other then what
07:26 - we can simply do is just change this
07:28 - positions and rather than 700 to be 600
07:31 - so if I do that because I believe I
07:33 - actually changed the width of my screen
07:34 - to be 600 I think I did then what will
07:37 - happen is these will spawn pretty much
07:39 - instantly once we pass and there we go
07:40 - we can see that that's what we get now
07:42 - if these are too like too close to you
07:45 - for you then obviously you can make that
07:46 - a bit wider but I find that this is a
07:48 - decent distance and right as you kind of
07:50 - pass one pipe it's disappearing as you
07:52 - go through the other one and it just it
07:53 - works well it gives you enough time to
07:55 - kind of get in between them so anyways
07:57 - that is how that works now we need to do
08:00 - a few other things here about our bird
08:03 - now the reason I haven't been moving our
08:05 - bird is because we're not gonna be using
08:07 - the arrow keys to move it right now what
08:10 - we're gonna do is we're gonna use an AI
08:12 - to move the bird and to actually play
08:14 - with it so that's why I haven't bothered
08:16 - implementing the mechanics of you know
08:18 - moving it up and down and actually
08:19 - testing it in that way so I guess the
08:21 - next thing we need to do is we need to
08:23 - check if the bird has hit the ground
08:25 - because once we start moving the bird if
08:27 - it hits the ground well we need to you
08:29 - know tell it it lost so for that what
08:32 - I'm going to do is just say if bird dot
08:34 - Y is I guess actually bird dot y plus
08:38 - bird image dot get underscore height if
08:42 - this is greater than the floor or the
08:45 - base where we did it which in this case
08:46 - is gonna be 730 then we're gonna say
08:50 - that we hit the floor
08:51 - so in this
08:52 - we need to do something I'm just gonna
08:53 - pass for right now but will you know
08:55 - we'll modify that in a second all right
08:58 - so now that we've done that we've
08:59 - actually pretty much coated the game of
09:01 - flappy bird now I know it doesn't quite
09:03 - seem like it there's a few more things
09:05 - you need to add like we'll draw the
09:06 - score up here but it's almost about time
09:08 - to actually start adding the AI to this
09:10 - because before we can start kind of
09:11 - working with collision and moving the
09:13 - birds and all this we need the AI to
09:15 - actually be operating the birds so
09:17 - anyways let's do one more thing here
09:19 - we're inside of our draw function which
09:22 - is here we start drawing the score so
09:24 - we'll add score in here and at the top
09:26 - of our program we'll create some fonts
09:28 - just for drawing these scores so I'm
09:31 - just gonna copy the ones that I have
09:32 - already so I'm gonna say for example
09:35 - stat underscore font and we'll just put
09:38 - this down one line is equal to pie game
09:41 - dot font dark sys font
09:46 - I believe it's sys underscore font not
09:51 - underscore sorry just font like that
09:53 - then what we're gonna say is Comic Sans
09:56 - and in here we're going to put 50 now
09:59 - we'll also do one more that's seventy
10:01 - for the score I believe or actually no I
10:05 - think 50 is fine for right now okay so
10:07 - we'll just leave 50 and now what we're
10:08 - gonna do is just render some font that
10:10 - tells us the score when we're playing so
10:13 - we actually can see that at the top so
10:15 - to do that is pretty straightforward
10:16 - I'm just gonna do it here I'm gonna say
10:18 - text equals stat font don't render and
10:22 - then in here we're gonna put our text
10:24 - that we want so this case gonna be score
10:26 - plus the string of score and then we're
10:29 - gonna do say one and we need to give it
10:31 - what's the last thing here anti-aliasing
10:35 - I forget what the last thing is that we
10:36 - need to put inside when we draw this I
10:39 - believe it might be the cut there I'll
10:41 - check in one second yes so it is the
10:43 - color so let's make this white so 255
10:45 - 255 255 and then let's draw this on the
10:49 - screens we're gonna say win double it
10:51 - text and then what we can do is do a
10:55 - little bit of fancy bleeding here so
10:56 - we're gonna say win underscore width
10:58 - minus 10 minus text dot get underscore
11:03 - width so this way no matter how big our
11:05 - score gets it
11:05 - actually show up on the screen and we'll
11:07 - keep moving it to the left to
11:08 - accommodate that now we'll draw it at 10
11:10 - pixels and if I run this we should see
11:13 - the score font popping up Oh font is not
11:15 - initialized which means we need to add
11:17 - one more line of code to the beginning
11:18 - of our program which is pi game dot font
11:23 - dot an it it's kind of an annoying line
11:25 - to add but anyways put that up there and
11:27 - that should help fix this
11:28 - all right missing one required
11:30 - positional arguments score so that means
11:33 - that now we got to go down to our main
11:34 - loop and where we're calling draw window
11:36 - we need to throw score in here so let's
11:38 - run this and now we get score and let's
11:40 - see if it goes up when we pass the pipe
11:42 - and it does now obviously nothing's
11:45 - happening with this collision but that's
11:46 - we're gonna get into now as we start
11:48 - adding a few more things in talking
11:49 - about actually implementing the AI

Cleaned transcript:

all right so now let's work in the main game loop and start getting all this to work together so we've successfully completed the bass we've completed the pipe we have the bird now it's just time to implement all of it so first I'm just going to change my draw window function a little bit so now I'm gonna add in an ability to draw pipes as well as the ability to draw the base so what I'm gonna do in here is just complete this already is I'm gonna draw all the pipes and the base so I'm gonna say for pipe in pipes and pipes are get is gonna come in as a list because we could have more than one pipe on a screen at once I'm simply gonna say not that pipe don't draw and we'll pass it a window so now for all of our pipes we will draw them next thing I'm gonna do is say bass drop and give it a window and that's as easy as it is to draw our stuff and that's why I really like creating these draw methods because they just make it super clean and we can do all of the drawing from the object itself all right so next we need to now add and create I guess a bass and some pipes so let's start by first of all just changing our bird position to be a little bit different so I'm gonna change it to actually be 23350 because that's where it should actually be located at least like that's what I figured out is kind of the best position and what I'm also gonna do is create a base now just gonna say base equals base and give this a height of 700 now this is because this is gonna be at the very bottom of our screen and that's where 700 is because I believe the height is 800 let me actually just look here to make sure I'm just looking at my other file by the way because I want to make sure I don't mess any of this up oh my bad actually we're not gonna make it 700 we're going to make it 730 it's a little bit lower okay so 730 that's where our base is now we're gonna make sure that we past pipes and base and I guess I need to still program pipes don't ever say say pipes equals a list and I'm just gonna throw one pipe in here right now and we'll start with it at a height of 700 okay so now that we have that this is gonna be weird but we can actually just draw this and see what this looks like to start so let's do control B here and you can see that we now have this base which isn't moving as well as this bird so if we want to fix this and allow it to move well let's do that so let's start by actually moving the base so let's say base don't move like this and now let's run this and see what happens and now you can see we have this moving base and it makes it look like our bird is actually kind of flying through the screen which i think is pretty interesting and that was pretty easy to do alright so now let's move all of our pipes and if we remember here if I go to pipes what do you call it here our pipe yes so it needs to move backwards because we give it a starting exhibition my apologies so anyway so let's now move all of our pipe so do this I'm gonna say four pipe in pipes because we might have more than one pipe in here on a say pipe don't move all right now let's see if we got a pipe moving on our screen all right give it a second and there we go we have some pipes they have a random height and they have started moving so now we need to do is figure out once that pipe kind of leaves the screen we need to generate another one and another one and another one so how do we do that well we're gonna do that inside of this four loop that we just created so what we essentially need to do is check the x position of our pipe and once it reaches certain point we need to create another pipe and then another pipe and then another one and then another one and so on so what I'm gonna do here is first we're actually going to check for collision with our pipes so I'm gonna say if bird are not very I'm saying if pipe dot collide bird then what we'll do is well we need to do something so in this case I'm actually just gonna pass for right now because I don't want to do anything with the bird quite yet but if we collide with the pipe well we need to you know end the game we need to actually do something now the next thing I'm gonna do is check the position of the pipe so I'm gonna say if pipe I go down here if pipe dot x+ pipe pipe underscore I guess whether top dog get underscore width is less than zero now what this essentially is checking is if our pipe is completely off the screen so by getting the x position of the pipe as well as the width of it if it's less than zero that means it's completely the screen then what we're gonna do is we're gonna remove that pipe now we can't quite just remove it from this for loop because we're looping through the pipes so what we need to do is create a list called Rama which is gonna stand for remove and we're gonna add that pipe to the list to remove so we're gonna say Ram dot append pipe and that's pretty straightforward all right now what the next thing we're to do is we're gonna say if not type dot pass and pipe dot X less than bird dot X row and you say type dot past equals true and we're gonna say add underscore pipe equals true now what this is gonna do for us is it's gonna check if we have passed the pipe so let's go back into our drawing thing here and I can't I have now I regret having stopped drawing the thing so anyways let's say that you know this is our pipe like this and let's say that this is our bird well as soon as our bird passes by this pipe what we need to do is generate a new pipe for it to start you know going through or whatever so that's what we're checking there as soon as we pass the pipe generate a new one anyways let's do that now so we say add pipe and then we continue to move these pipes now what I'm gonna do in here is get outside of this for loop and say if add underscore pipe then what we're gonna do is say score plus equals one which reminds me I need to create a score variable because once we pass a pipe well that means that we've gotten a point we need to keep track of that for our game then what we're gonna do is we're gonna create a new pipe I'm gonna add that to the screen so to do that is pretty straightforward we're gonna say pipes u dot append and in this case we're just gonna do pipe and we're gonna give it the same x position of 700 now after we do this we're going to remove those pipes that we had up here that we need to remove because they went off the screen I'm gonna say for our in in REM let us say pipes don't remove our and that should just get rid of our pipes for us alright so now that we have that we actually will see that our pipes will start generating properly on the screen so let's run this clicking the wrong key here what is my variable local add piped reference oh my bad we need to do ad underscore pipe equals false to start up here because you know if this doesn't happen we're not gonna define it so just make sure you add that at the top above remove let's run this and now we should see that our pipes start generating and as soon as we pass one pipe another pipe will generate hmm what is the air here X not in not in list let me have a look at this and I'll be right back okay so apparently I can't spell or read and I excellent typed random so that should be our anyways my apologies let's run this now and see if this works all right so there we go that's a pipe and that's another pipe and there's another pipe and if we want these pipes to spawn closer to each other then what we can simply do is just change this positions and rather than 700 to be 600 so if I do that because I believe I actually changed the width of my screen to be 600 I think I did then what will happen is these will spawn pretty much instantly once we pass and there we go we can see that that's what we get now if these are too like too close to you for you then obviously you can make that a bit wider but I find that this is a decent distance and right as you kind of pass one pipe it's disappearing as you go through the other one and it just it works well it gives you enough time to kind of get in between them so anyways that is how that works now we need to do a few other things here about our bird now the reason I haven't been moving our bird is because we're not gonna be using the arrow keys to move it right now what we're gonna do is we're gonna use an AI to move the bird and to actually play with it so that's why I haven't bothered implementing the mechanics of you know moving it up and down and actually testing it in that way so I guess the next thing we need to do is we need to check if the bird has hit the ground because once we start moving the bird if it hits the ground well we need to you know tell it it lost so for that what I'm going to do is just say if bird dot Y is I guess actually bird dot y plus bird image dot get underscore height if this is greater than the floor or the base where we did it which in this case is gonna be 730 then we're gonna say that we hit the floor so in this we need to do something I'm just gonna pass for right now but will you know we'll modify that in a second all right so now that we've done that we've actually pretty much coated the game of flappy bird now I know it doesn't quite seem like it there's a few more things you need to add like we'll draw the score up here but it's almost about time to actually start adding the AI to this because before we can start kind of working with collision and moving the birds and all this we need the AI to actually be operating the birds so anyways let's do one more thing here we're inside of our draw function which is here we start drawing the score so we'll add score in here and at the top of our program we'll create some fonts just for drawing these scores so I'm just gonna copy the ones that I have already so I'm gonna say for example stat underscore font and we'll just put this down one line is equal to pie game dot font dark sys font I believe it's sys underscore font not underscore sorry just font like that then what we're gonna say is Comic Sans and in here we're going to put 50 now we'll also do one more that's seventy for the score I believe or actually no I think 50 is fine for right now okay so we'll just leave 50 and now what we're gonna do is just render some font that tells us the score when we're playing so we actually can see that at the top so to do that is pretty straightforward I'm just gonna do it here I'm gonna say text equals stat font don't render and then in here we're gonna put our text that we want so this case gonna be score plus the string of score and then we're gonna do say one and we need to give it what's the last thing here antialiasing I forget what the last thing is that we need to put inside when we draw this I believe it might be the cut there I'll check in one second yes so it is the color so let's make this white so 255 255 255 and then let's draw this on the screens we're gonna say win double it text and then what we can do is do a little bit of fancy bleeding here so we're gonna say win underscore width minus 10 minus text dot get underscore width so this way no matter how big our score gets it actually show up on the screen and we'll keep moving it to the left to accommodate that now we'll draw it at 10 pixels and if I run this we should see the score font popping up Oh font is not initialized which means we need to add one more line of code to the beginning of our program which is pi game dot font dot an it it's kind of an annoying line to add but anyways put that up there and that should help fix this all right missing one required positional arguments score so that means that now we got to go down to our main loop and where we're calling draw window we need to throw score in here so let's run this and now we get score and let's see if it goes up when we pass the pipe and it does now obviously nothing's happening with this collision but that's we're gonna get into now as we start adding a few more things in talking about actually implementing the AI
