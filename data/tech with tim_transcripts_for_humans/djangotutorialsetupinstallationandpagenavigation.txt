With timestamps:

00:00 - hey guys and welcome to a new series
00:02 - which is django web development with
00:04 - python now if you haven't heard of
00:07 - django before essentially it's a full
00:09 - stack web framework that allows you to
00:11 - create websites using purely Python and
00:14 - a little bit of HTML now this is really
00:16 - awesome because typically when you want
00:18 - to create websites you've got to use a
00:19 - combination of languages you gotta use
00:21 - JavaScript HTML CSS all this kind of
00:25 - stuff PHP but if you already know Python
00:27 - this is a really nice and fairly simple
00:29 - way to actually create fully functioning
00:31 - websites and that's what I'm gonna be
00:33 - showing you throughout this series now
00:34 - this first video is gonna be dedicated
00:36 - to setting up our project understanding
00:38 - a bit about how Django works in getting
00:40 - the server kind of running on our local
00:42 - machine and then later in other videos
00:44 - we working with databases templates
00:47 - making fully-functioning websites and
00:49 - hopefully near the end i will work on a
00:51 - large project and show you guys how we
00:53 - can get everything set up to create an
00:54 - actual website that you might be able to
00:56 - use so without further ado let's get
00:59 - started now the first thing that we're
01:01 - gonna need to do when we're working with
01:03 - Django is you need to install it so I'm
01:05 - assuming you already have Python
01:06 - installed if you don't you're gonna have
01:07 - to go ahead and do that but from there
01:10 - we need to install a Django to do this
01:12 - we're simply just going to open up our
01:13 - command prompt you can just type CMD in
01:15 - little thing here and you pip install
01:19 - and then Django like so now I already
01:23 - have this installed so I'm not gonna do
01:24 - this but if for some reason when you hit
01:26 - enter and this doesn't work it means or
01:29 - it sounds like pip is not in your path
01:30 - or something like that click on the
01:32 - video that I'm gonna have a link there's
01:34 - gonna be a card to it and a link in the
01:35 - description it's called how to install
01:37 - Pi game but this goes through how to fix
01:39 - this pip issue so just watch to that
01:42 - video and it will explain to you how to
01:44 - fix this issue and when it you type PI
01:46 - game when it says like type PI game just
01:48 - type django instead and that should
01:50 - hopefully fix your problem now for me
01:53 - I'm actually working in a virtual
01:55 - environment for Django don't this
01:58 - doesn't really mean anything to you
01:59 - don't worry about it so I'm just gonna
02:01 - activate that now but what we're gonna
02:03 - do to start our project is we're gonna
02:04 - create a directory somewhere accessible
02:07 - that we're gonna install all of our kind
02:09 - of Django stuff into so I've created one
02:11 - on in
02:12 - this kind of directory system here so
02:14 - desktop Python YouTube Django tutorial
02:17 - so I'm just gonna change into that
02:18 - directory by using CD so it'll CD into
02:20 - desktop CD Python CD YouTube and CD
02:25 - django django like that so now i'm in
02:29 - this directory but if you guys don't
02:31 - want to do that or it's a complex path
02:32 - all you can do is open it up your folder
02:34 - here and then type CMD and it'll open up
02:37 - a python or a CMD window that is in this
02:40 - directory like that for you okay so now
02:43 - that we've do that we've done that what
02:45 - we need to do is we need to create a
02:46 - brand new Django project now to do this
02:49 - what we're gonna do is type Django -
02:51 - admin and then start projects I believe
02:55 - that is and the name of our project
02:57 - which in this case I'm gonna call my
02:59 - site now you can name this whatever you
03:01 - want however if you try to name it the
03:04 - name of a Python package so maybe like
03:06 - numpy or site or something like that it
03:09 - won't work
03:10 - so if you get that error just try
03:11 - changing the name to something else so
03:13 - I'm gonna do that and now you should see
03:15 - inside of my Django tutorial folder I
03:17 - have this new directory called my site
03:19 - now if I go in here we'll look through
03:21 - some of the files that we have so we
03:24 - have this managed off high file inside
03:26 - the root directory of my site and this
03:29 - is what we're going to be using to
03:30 - create applications to run our server to
03:33 - do all kinds of stuffs this is important
03:35 - file to use and then inside of my site
03:37 - so the other directory we have a few of
03:40 - these files like this I'm not going to
03:42 - go through what all of them do but we
03:43 - will be modifying this URLs file later
03:46 - in the video okay so that's a brief
03:48 - overview of what that is so now that
03:50 - we've done that we've actually created a
03:52 - Django project and we can test to make
03:55 - sure that this is project is working by
03:57 - just running a server on our local
04:00 - machine that's gonna allow us to connect
04:02 - to our website so right now when all the
04:06 - stuff we're going to be doing is known
04:07 - as development so essentially we're just
04:09 - working on our local machine our website
04:12 - is not live on the internet like not
04:13 - anyone can go to it but when you run
04:15 - this it's going to allow you to connect
04:17 - to it and view it as if it was live on
04:19 - the internet but it's just running off
04:20 - our local machine to do this what we're
04:23 - gonna do is we're gonna type Python or
04:25 - sorry
04:26 - actually one step before that we need to
04:27 - change into this my site directory so
04:30 - right here we're in this directory now
04:31 - we need to go into my site so to do that
04:34 - we're going to go CD my site and now
04:36 - what we're gonna do is we're gonna run
04:38 - this manage python file with a few
04:41 - arguments so to do this R and do Python
04:44 - manage if I do a space here manage dot
04:47 - PI and then we're gonna say run server
04:51 - like that so let's hit enter here and
04:53 - what we're gonna do is now we're gonna
04:55 - start running a server on our local port
04:58 - which is actually 8080 which is going to
05:00 - allow us to connect and you our website
05:03 - we don't have anything on the website
05:04 - yet but I will show you connecting to it
05:07 - so to connect to this what we're gonna
05:08 - do is just copy this HTTP link here
05:11 - looks like a little IP address and we're
05:13 - gonna go to Google and simply paste that
05:15 - in the bar up here so when we do that
05:18 - you should see a page that looks like
05:20 - this you don't see this page rewatch the
05:23 - last few minutes of the video and make
05:24 - sure you followed all the steps
05:25 - correctly because you should see this
05:27 - popping up all right so now that we have
05:30 - that we'll leave that open and I'll
05:32 - quickly mention that right now this is
05:33 - running on port 8080 if you for some
05:36 - reason port 8080 s blocks or you want to
05:38 - run on a different port what you can do
05:40 - is simply when you type that run server
05:43 - command after run server just type the
05:46 - port you want to run it on so for
05:48 - example if I want to run it on port 50
05:49 - 50 I don't even know if that's a port
05:52 - but you could just hit enter and then it
05:54 - would run on that port and it would give
05:56 - you a different address to connect to
05:58 - the website okay and also if you want to
06:01 - stop the server from running which is
06:02 - what I did I just hit ctrl + C on the
06:05 - keyboard okay so now we've got this
06:07 - we'll close this up for now and we'll
06:09 - look at that after what we're gonna do
06:11 - now is create what's known as an app now
06:14 - right now we haven't actually created an
06:16 - application or any views or any web
06:18 - pages for our site we've just kind of
06:21 - set up the environment that's going to
06:23 - be hosting that site for us that's kind
06:25 - of a way to think of it so if we want to
06:27 - create an application which is what
06:29 - we're gonna run from our kind of
06:32 - environment to do this we need to what
06:35 - he call it so we're already in this
06:36 - directory we need to use this managed
06:38 - file once again to
06:39 - create that so to do this I'm gonna do
06:41 - Python and then I'm gonna go to manage
06:45 - manage dot PI and then type the name of
06:49 - or sorry start app after this and now
06:51 - type the name of whatever app I want to
06:54 - to create so in this case I am just
06:57 - gonna type test as my app name but you
07:00 - guys can type whatever you want actually
07:01 - know what let's change this to me so now
07:03 - that I do this I have Python manage top
07:05 - I start app and then I hit enter like
07:07 - this now you can see that it should
07:09 - create a new directory inside of our my
07:13 - site directory called main now it's very
07:15 - important that's in this directory if
07:17 - it's not there is other ways to access
07:20 - it but it's not going to work for what
07:22 - I'm going to be showing you so now we
07:23 - should have a directory system that
07:25 - looks like this
07:26 - Django tutorial you have a folder called
07:28 - my site you go in there you should have
07:29 - main which has a few files in here which
07:31 - we'll talk about after and then it has
07:33 - my site and this manage dot pipe manage
07:37 - Python file ok so now that we've done
07:39 - this let's rerun our server and connect
07:43 - to that page so to rerun our server same
07:46 - thing python manage top i run server and
07:48 - we'll do that we'll copy this link once
07:51 - once more and just run this up here
07:54 - alright so there we go so now everything
07:56 - is is working fine so what we're gonna
07:58 - do now is we're gonna start modifying
08:00 - some of these Python files and actually
08:02 - displaying our own HTML code on the
08:06 - website now it's a bit of a process make
08:08 - sure you guys are following along for
08:09 - this because there is quite a few steps
08:11 - and if you mess up one slightly it will
08:13 - result in a few issues happening in your
08:16 - with your website and connecting and all
08:18 - that so what I'm gonna do is I'm gonna
08:19 - open up a text editor in this case it's
08:21 - sub line you guys can use whatever you
08:24 - want as long as you can edit these files
08:25 - and just understand what I'm doing so I
08:27 - like this just because as the directory
08:29 - system on the left here so I can easily
08:30 - navigate between stuff so what I'm gonna
08:33 - do will close these up for right now is
08:36 - I'm going to start by going into my main
08:39 - folder and going into this view stop
08:41 - high five
08:42 - so this views file is what's gonna
08:44 - actually store the different views for
08:47 - our application now a view you can kind
08:49 - of think of as a web page and this is
08:51 - where we're going to write a
08:52 - essentially the code that's going to
08:54 - serve what's known as HTTP requests and
08:57 - show some stuff up on our website now to
09:00 - do this the first step is to just import
09:03 - something or so I'm gonna say from Jingu
09:06 - dot dot HTTP and then response we're
09:11 - going to import HTTP response now I
09:17 - believe I probably butchered this
09:18 - yessiree so it's actually just Django
09:20 - dot HTTP is that correct lowercase H my
09:25 - bad guys so Django to HTTP import HTTP
09:29 - response now down here we're going to
09:31 - create a function and this function is
09:33 - going to represent a view now we can
09:36 - create multiple views here but for now
09:37 - we're just going to stick with one and
09:38 - I'll be showing later on how we can
09:40 - connect different views and link to
09:42 - those and all that so we're gonna site
09:44 - define index we're going to put in here
09:47 - response and then what we're gonna do is
09:50 - we're simply going to return HTTP
09:53 - response and in here we're just going to
09:56 - type some text now you can type whatever
09:58 - you want I'm just gonna say tech with
10:00 - Tim and here and this is actually our
10:03 - first view now what goes in here is HTML
10:07 - code if you don't put any tags so for
10:10 - example like I don't put h1 sloshed each
10:14 - one it'll just show up as like standard
10:16 - text but if you want to create a header
10:17 - or something you can just do h1 and I'll
10:21 - be talking about how to do more complex
10:22 - HTML stuff later so that should be it
10:25 - for this file right now and what we're
10:27 - gonna do next is we actually need to
10:29 - create a new file inside of this main
10:32 - application that's gonna represent our
10:35 - URLs and we'll talk about how all this
10:37 - works so second so I'm just gonna create
10:39 - create a new file here so file new file
10:41 - and what I'm gonna do is just make sure
10:44 - I save this and I'm gonna call it URLs
10:46 - dot pi but it has to be inside of this
10:49 - main folder so it should be in here okay
10:53 - so URLs dot pi now in here is where
10:56 - we're going to define the paths to our
10:58 - different web pages and once we do the
11:02 - other layers another URL file we have to
11:04 - modify as well but this
11:05 - one is gonna represent the URLs that go
11:07 - to the different views that we have in
11:09 - this file so for example right now we
11:11 - have one view but if we had another view
11:13 - so like if I copy this and paste this
11:15 - down here then we would have to define
11:17 - that inside of the URLs file with a
11:19 - certain path so we can determine which
11:21 - view we're gonna go to based on whatever
11:24 - path the user types in in the search bar
11:28 - at the top okay so you are LCI and what
11:31 - we're gonna do in here is we're gonna
11:32 - say from Django
11:34 - dot URLs import path like that okay and
11:38 - then in here we're going to say from dot
11:41 - views or sorry from dot import beats now
11:47 - this essentially means just import views
11:49 - from the current like directory that
11:50 - we're in so that's how we'll do that and
11:52 - then in here we're gonna type URL you
11:55 - can hear what we'll do is simply say
11:56 - path and then we'll put a comma after
11:59 - that and we're just gonna type a blank
12:02 - string and we're gonna type views dot
12:05 - index and then name equals index like
12:09 - that now what this is gonna do what
12:12 - we'll talk about this more later because
12:13 - we have to do some other stuff first is
12:15 - essentially say if we get into this
12:17 - application and we're just on the home
12:20 - page so we don't type like slash home at
12:22 - just the home directory we're gonna go
12:24 - to the views index page and that has the
12:26 - name of index and what that means here
12:29 - is we're gonna serve this HTTP response
12:31 - which means that once we go to that page
12:34 - it should show tech with Tim in a header
12:37 - one on the page this will make more
12:40 - sense once we do the other URL file and
12:42 - I can show you how we kind of navigate
12:44 - through it but for now just just have
12:46 - this typed in so that's actually all we
12:48 - have to do from inside of this main
12:50 - folder now what we have to do is we have
12:53 - to link this application to our project
12:57 - now remember this this Django tutorial
13:00 - folder right is the project for our
13:02 - website and this main folder inside here
13:06 - is the application that we're gonna link
13:09 - to our project it's a little bit
13:10 - confusing but you guys should understand
13:12 - in a second so what we need to do is we
13:14 - need to essentially set the URL that's
13:16 - going to link to this applique
13:18 - because we can have more than one
13:20 - application inside of our project so to
13:23 - do this what I'm going to do is go to
13:24 - the URL files inside my site and this
13:27 - should actually already be created for
13:29 - you you should already have this code
13:30 - and I'm simply gonna modify this right
13:33 - here so from django urls import pack and
13:36 - import include now after this path here
13:41 - i'm gonna copy this and paste this
13:43 - directly below it now what i'm gonna do
13:46 - is i'm gonna say that i want to navigate
13:49 - to this application when the user types
13:52 - in a certain path what I mean by path is
13:55 - let's go to up here right now we have
13:57 - this okay but when I say path I mean
13:59 - like if you type slash home the path
14:02 - would be slash home right and we would
14:04 - have to know where to go if you type
14:05 - slash home just like if you go on a
14:07 - website and you do slash login or slash
14:09 - sign up you get directed to different
14:11 - pages so that's what we're doing right
14:12 - now so maybe we have another page and
14:14 - it's called sign up or something like
14:16 - that so we have to define when we type
14:18 - certain paths where we're gonna go and
14:20 - that's what we're doing right now
14:21 - so we already have one path which is
14:23 - known as admin now admin gives you like
14:26 - an admin dashboard and we'll look at
14:28 - that in later videos but right now it's
14:29 - not super important but we want to
14:31 - define the path that we should go to
14:32 - automatically when we type something so
14:36 - right now I'm actually just gonna leave
14:37 - this as blank and what this means is if
14:40 - we don't type anything so we just put in
14:43 - this main URL bring us to whatever page
14:46 - I'm about to define here so in here I'm
14:48 - gonna type include like this and then
14:51 - what I'm gonna do is in strings here I'm
14:53 - going to go to main dot use I believe
14:58 - actually start main dot URLs is the
15:01 - correct page there so what this means
15:03 - now is if we don't type anything for our
15:05 - path we will automatically direct
15:07 - ourselves to the main URLs file now the
15:11 - main dot URLs file is this one right
15:13 - here and what it's doing here is it's
15:15 - gonna look at what path we've been given
15:18 - we talked about that in a second and
15:19 - then go to the appropriate view from
15:22 - this abuse file here okay so it's we're
15:25 - linking from multiple different files
15:27 - we're sending paths and all that stuff
15:29 - okay but if we look at the URL spy file
15:31 - here under my sight what this include
15:34 - actually does is it means okay we're
15:36 - gonna look for a path that specifies
15:39 - whatever's in this string so in this
15:40 - case it'd be admin in this case it's
15:42 - nothing it's just the default path and
15:44 - what we're gonna do is we're gonna take
15:45 - everything after that path and we're
15:47 - gonna send it to the main dot URLs page
15:50 - so for example if our path and I'll type
15:52 - it down here looks like whatever the IP
15:55 - address is and then like slash home
15:57 - slash start and we had slash home here
16:00 - okay what we would do are will do home
16:03 - slash like that sorry is we're gonna
16:05 - look for the this home path here so we
16:08 - find this we find home okay and once we
16:10 - find this what we're gonna do is we're
16:12 - gonna say okay so we'll get rid of this
16:13 - because we found that and we'll take
16:16 - start like that and we'll pass it over
16:18 - to this URL spy file inside of our main
16:22 - application because it says go to main
16:23 - URLs right and now what main URLs is
16:26 - gonna do is it's gonna look for a path
16:28 - that's called start so it gets passed
16:30 - start like this and it's gonna see okay
16:33 - do I have any path that says start now
16:36 - if it does it's gonna direct us to
16:38 - whatever function inside the views file
16:40 - that we've defined so if I add another
16:42 - path here okay and I define this and I
16:45 - say this is start with forward slash
16:48 - let's say that has a forward slash too
16:49 - then what will happen is we will go to
16:51 - the views dot index view because that's
16:55 - the path that we typed in now in this
16:57 - case we're just gonna leave it as a
16:59 - blank path which means that if you had
17:02 - nothing just like that it'll just
17:04 - automatically go to this path you guys
17:06 - should understand this in a second once
17:08 - we start actually doing it okay so we've
17:10 - done this now so actually I don't know
17:13 - if we're gonna have to restart the
17:14 - server or not but let's just hit enter
17:16 - one more time in the search bar and see
17:18 - what we get okay so we get now tech with
17:21 - Tim in the header one tags now I know I
17:25 - kind of went a little bit faster this
17:26 - and it might be a little bit hard to
17:27 - understand but we'll create another page
17:29 - now and I'll show you how this actually
17:31 - is working so um we've done that let's
17:34 - leave this open so essentially right
17:37 - this is what was shown we had inside
17:39 - this views dot PI file we had this index
17:41 - function and it returned h1 tags Tecla
17:44 - Tim
17:44 - now what I'm gonna do is just create
17:46 - another function I'm gonna copy this and
17:48 - I'm just gonna call this let's say v1
17:51 - okay and in here instead of tech with
17:53 - Tim we'll just say new one exclamation
17:57 - point okay so now let's show how we
17:59 - could possibly navigate into a different
18:02 - view using this kind of URL structure
18:04 - that we've set up so remember this URL
18:07 - is inside of my site defines what's
18:09 - gonna happen when we go to a certain
18:13 - link what page we're gonna direct into
18:15 - so I had this as blank before so what
18:19 - happened is if you don't type anything
18:20 - after the main URL which is like that
18:22 - HTTP you're just gonna direct us to the
18:25 - main dot URLs it's going to include
18:27 - whatever comes after this blank tag
18:31 - essentially okay so if we want to make
18:34 - it so we could possibly go into another
18:36 - body code file folder with our another
18:39 - view what we can do is add another URL
18:41 - inside of this URL spy so I'll copy this
18:44 - path and instead of having a blank this
18:47 - time I'm gonna say /v 1 or I mean so
18:50 - certain v1 slash forward slash and now
18:53 - instead of going to the views dot index
18:55 - view I'm gonna go to view V 1 remember
18:58 - the name of our function and again I'll
19:00 - call this a different name which will be
19:02 - u1 alright so I bet hopefully this will
19:06 - make sense if we don't type anything so
19:08 - meaning we like we don't type admin
19:10 - what's gonna happen is whatever the path
19:12 - that we've given is gonna be passed over
19:14 - to this URL PI file if it's blank
19:16 - meaning we haven't typed anything at all
19:18 - other than the main URL it's gonna bring
19:20 - us to the index page if we type v1 it's
19:23 - gonna bring us to the view 1 page so
19:25 - let's try this on our web browser if I
19:27 - change this now and I say slash V 1 you
19:30 - can see that it brings me to the page v1
19:32 - now remember if I get rid of v1 and I
19:35 - hit enter it brings me back to the page
19:37 - tech with Tim so we successfully set up
19:39 - two pages that we can see and we kind of
19:42 - understand now how this URL directory
19:44 - system works so that's all it is to
19:48 - setting up our basic Django pages in the
19:52 - next video we'll do a bit more on some
19:53 - multiple pages we'll talk about creating
19:56 - some actual like real HTML stuff on the
19:58 - web
19:58 - site and just keep going further and
20:00 - further with Django if you guys enjoyed
20:02 - the video please make sure you leave a
20:04 - like and subscribe if you need any help
20:06 - don't hesitate to join my discord server
20:08 - follow me on Twitter or my Instagram I'm
20:10 - always answering people's questions
20:11 - there and with that being said I will
20:13 - see you in the next video
20:15 - [Music]

Cleaned transcript:

hey guys and welcome to a new series which is django web development with python now if you haven't heard of django before essentially it's a full stack web framework that allows you to create websites using purely Python and a little bit of HTML now this is really awesome because typically when you want to create websites you've got to use a combination of languages you gotta use JavaScript HTML CSS all this kind of stuff PHP but if you already know Python this is a really nice and fairly simple way to actually create fully functioning websites and that's what I'm gonna be showing you throughout this series now this first video is gonna be dedicated to setting up our project understanding a bit about how Django works in getting the server kind of running on our local machine and then later in other videos we working with databases templates making fullyfunctioning websites and hopefully near the end i will work on a large project and show you guys how we can get everything set up to create an actual website that you might be able to use so without further ado let's get started now the first thing that we're gonna need to do when we're working with Django is you need to install it so I'm assuming you already have Python installed if you don't you're gonna have to go ahead and do that but from there we need to install a Django to do this we're simply just going to open up our command prompt you can just type CMD in little thing here and you pip install and then Django like so now I already have this installed so I'm not gonna do this but if for some reason when you hit enter and this doesn't work it means or it sounds like pip is not in your path or something like that click on the video that I'm gonna have a link there's gonna be a card to it and a link in the description it's called how to install Pi game but this goes through how to fix this pip issue so just watch to that video and it will explain to you how to fix this issue and when it you type PI game when it says like type PI game just type django instead and that should hopefully fix your problem now for me I'm actually working in a virtual environment for Django don't this doesn't really mean anything to you don't worry about it so I'm just gonna activate that now but what we're gonna do to start our project is we're gonna create a directory somewhere accessible that we're gonna install all of our kind of Django stuff into so I've created one on in this kind of directory system here so desktop Python YouTube Django tutorial so I'm just gonna change into that directory by using CD so it'll CD into desktop CD Python CD YouTube and CD django django like that so now i'm in this directory but if you guys don't want to do that or it's a complex path all you can do is open it up your folder here and then type CMD and it'll open up a python or a CMD window that is in this directory like that for you okay so now that we've do that we've done that what we need to do is we need to create a brand new Django project now to do this what we're gonna do is type Django admin and then start projects I believe that is and the name of our project which in this case I'm gonna call my site now you can name this whatever you want however if you try to name it the name of a Python package so maybe like numpy or site or something like that it won't work so if you get that error just try changing the name to something else so I'm gonna do that and now you should see inside of my Django tutorial folder I have this new directory called my site now if I go in here we'll look through some of the files that we have so we have this managed off high file inside the root directory of my site and this is what we're going to be using to create applications to run our server to do all kinds of stuffs this is important file to use and then inside of my site so the other directory we have a few of these files like this I'm not going to go through what all of them do but we will be modifying this URLs file later in the video okay so that's a brief overview of what that is so now that we've done that we've actually created a Django project and we can test to make sure that this is project is working by just running a server on our local machine that's gonna allow us to connect to our website so right now when all the stuff we're going to be doing is known as development so essentially we're just working on our local machine our website is not live on the internet like not anyone can go to it but when you run this it's going to allow you to connect to it and view it as if it was live on the internet but it's just running off our local machine to do this what we're gonna do is we're gonna type Python or sorry actually one step before that we need to change into this my site directory so right here we're in this directory now we need to go into my site so to do that we're going to go CD my site and now what we're gonna do is we're gonna run this manage python file with a few arguments so to do this R and do Python manage if I do a space here manage dot PI and then we're gonna say run server like that so let's hit enter here and what we're gonna do is now we're gonna start running a server on our local port which is actually 8080 which is going to allow us to connect and you our website we don't have anything on the website yet but I will show you connecting to it so to connect to this what we're gonna do is just copy this HTTP link here looks like a little IP address and we're gonna go to Google and simply paste that in the bar up here so when we do that you should see a page that looks like this you don't see this page rewatch the last few minutes of the video and make sure you followed all the steps correctly because you should see this popping up all right so now that we have that we'll leave that open and I'll quickly mention that right now this is running on port 8080 if you for some reason port 8080 s blocks or you want to run on a different port what you can do is simply when you type that run server command after run server just type the port you want to run it on so for example if I want to run it on port 50 50 I don't even know if that's a port but you could just hit enter and then it would run on that port and it would give you a different address to connect to the website okay and also if you want to stop the server from running which is what I did I just hit ctrl + C on the keyboard okay so now we've got this we'll close this up for now and we'll look at that after what we're gonna do now is create what's known as an app now right now we haven't actually created an application or any views or any web pages for our site we've just kind of set up the environment that's going to be hosting that site for us that's kind of a way to think of it so if we want to create an application which is what we're gonna run from our kind of environment to do this we need to what he call it so we're already in this directory we need to use this managed file once again to create that so to do this I'm gonna do Python and then I'm gonna go to manage manage dot PI and then type the name of or sorry start app after this and now type the name of whatever app I want to to create so in this case I am just gonna type test as my app name but you guys can type whatever you want actually know what let's change this to me so now that I do this I have Python manage top I start app and then I hit enter like this now you can see that it should create a new directory inside of our my site directory called main now it's very important that's in this directory if it's not there is other ways to access it but it's not going to work for what I'm going to be showing you so now we should have a directory system that looks like this Django tutorial you have a folder called my site you go in there you should have main which has a few files in here which we'll talk about after and then it has my site and this manage dot pipe manage Python file ok so now that we've done this let's rerun our server and connect to that page so to rerun our server same thing python manage top i run server and we'll do that we'll copy this link once once more and just run this up here alright so there we go so now everything is is working fine so what we're gonna do now is we're gonna start modifying some of these Python files and actually displaying our own HTML code on the website now it's a bit of a process make sure you guys are following along for this because there is quite a few steps and if you mess up one slightly it will result in a few issues happening in your with your website and connecting and all that so what I'm gonna do is I'm gonna open up a text editor in this case it's sub line you guys can use whatever you want as long as you can edit these files and just understand what I'm doing so I like this just because as the directory system on the left here so I can easily navigate between stuff so what I'm gonna do will close these up for right now is I'm going to start by going into my main folder and going into this view stop high five so this views file is what's gonna actually store the different views for our application now a view you can kind of think of as a web page and this is where we're going to write a essentially the code that's going to serve what's known as HTTP requests and show some stuff up on our website now to do this the first step is to just import something or so I'm gonna say from Jingu dot dot HTTP and then response we're going to import HTTP response now I believe I probably butchered this yessiree so it's actually just Django dot HTTP is that correct lowercase H my bad guys so Django to HTTP import HTTP response now down here we're going to create a function and this function is going to represent a view now we can create multiple views here but for now we're just going to stick with one and I'll be showing later on how we can connect different views and link to those and all that so we're gonna site define index we're going to put in here response and then what we're gonna do is we're simply going to return HTTP response and in here we're just going to type some text now you can type whatever you want I'm just gonna say tech with Tim and here and this is actually our first view now what goes in here is HTML code if you don't put any tags so for example like I don't put h1 sloshed each one it'll just show up as like standard text but if you want to create a header or something you can just do h1 and I'll be talking about how to do more complex HTML stuff later so that should be it for this file right now and what we're gonna do next is we actually need to create a new file inside of this main application that's gonna represent our URLs and we'll talk about how all this works so second so I'm just gonna create create a new file here so file new file and what I'm gonna do is just make sure I save this and I'm gonna call it URLs dot pi but it has to be inside of this main folder so it should be in here okay so URLs dot pi now in here is where we're going to define the paths to our different web pages and once we do the other layers another URL file we have to modify as well but this one is gonna represent the URLs that go to the different views that we have in this file so for example right now we have one view but if we had another view so like if I copy this and paste this down here then we would have to define that inside of the URLs file with a certain path so we can determine which view we're gonna go to based on whatever path the user types in in the search bar at the top okay so you are LCI and what we're gonna do in here is we're gonna say from Django dot URLs import path like that okay and then in here we're going to say from dot views or sorry from dot import beats now this essentially means just import views from the current like directory that we're in so that's how we'll do that and then in here we're gonna type URL you can hear what we'll do is simply say path and then we'll put a comma after that and we're just gonna type a blank string and we're gonna type views dot index and then name equals index like that now what this is gonna do what we'll talk about this more later because we have to do some other stuff first is essentially say if we get into this application and we're just on the home page so we don't type like slash home at just the home directory we're gonna go to the views index page and that has the name of index and what that means here is we're gonna serve this HTTP response which means that once we go to that page it should show tech with Tim in a header one on the page this will make more sense once we do the other URL file and I can show you how we kind of navigate through it but for now just just have this typed in so that's actually all we have to do from inside of this main folder now what we have to do is we have to link this application to our project now remember this this Django tutorial folder right is the project for our website and this main folder inside here is the application that we're gonna link to our project it's a little bit confusing but you guys should understand in a second so what we need to do is we need to essentially set the URL that's going to link to this applique because we can have more than one application inside of our project so to do this what I'm going to do is go to the URL files inside my site and this should actually already be created for you you should already have this code and I'm simply gonna modify this right here so from django urls import pack and import include now after this path here i'm gonna copy this and paste this directly below it now what i'm gonna do is i'm gonna say that i want to navigate to this application when the user types in a certain path what I mean by path is let's go to up here right now we have this okay but when I say path I mean like if you type slash home the path would be slash home right and we would have to know where to go if you type slash home just like if you go on a website and you do slash login or slash sign up you get directed to different pages so that's what we're doing right now so maybe we have another page and it's called sign up or something like that so we have to define when we type certain paths where we're gonna go and that's what we're doing right now so we already have one path which is known as admin now admin gives you like an admin dashboard and we'll look at that in later videos but right now it's not super important but we want to define the path that we should go to automatically when we type something so right now I'm actually just gonna leave this as blank and what this means is if we don't type anything so we just put in this main URL bring us to whatever page I'm about to define here so in here I'm gonna type include like this and then what I'm gonna do is in strings here I'm going to go to main dot use I believe actually start main dot URLs is the correct page there so what this means now is if we don't type anything for our path we will automatically direct ourselves to the main URLs file now the main dot URLs file is this one right here and what it's doing here is it's gonna look at what path we've been given we talked about that in a second and then go to the appropriate view from this abuse file here okay so it's we're linking from multiple different files we're sending paths and all that stuff okay but if we look at the URL spy file here under my sight what this include actually does is it means okay we're gonna look for a path that specifies whatever's in this string so in this case it'd be admin in this case it's nothing it's just the default path and what we're gonna do is we're gonna take everything after that path and we're gonna send it to the main dot URLs page so for example if our path and I'll type it down here looks like whatever the IP address is and then like slash home slash start and we had slash home here okay what we would do are will do home slash like that sorry is we're gonna look for the this home path here so we find this we find home okay and once we find this what we're gonna do is we're gonna say okay so we'll get rid of this because we found that and we'll take start like that and we'll pass it over to this URL spy file inside of our main application because it says go to main URLs right and now what main URLs is gonna do is it's gonna look for a path that's called start so it gets passed start like this and it's gonna see okay do I have any path that says start now if it does it's gonna direct us to whatever function inside the views file that we've defined so if I add another path here okay and I define this and I say this is start with forward slash let's say that has a forward slash too then what will happen is we will go to the views dot index view because that's the path that we typed in now in this case we're just gonna leave it as a blank path which means that if you had nothing just like that it'll just automatically go to this path you guys should understand this in a second once we start actually doing it okay so we've done this now so actually I don't know if we're gonna have to restart the server or not but let's just hit enter one more time in the search bar and see what we get okay so we get now tech with Tim in the header one tags now I know I kind of went a little bit faster this and it might be a little bit hard to understand but we'll create another page now and I'll show you how this actually is working so um we've done that let's leave this open so essentially right this is what was shown we had inside this views dot PI file we had this index function and it returned h1 tags Tecla Tim now what I'm gonna do is just create another function I'm gonna copy this and I'm just gonna call this let's say v1 okay and in here instead of tech with Tim we'll just say new one exclamation point okay so now let's show how we could possibly navigate into a different view using this kind of URL structure that we've set up so remember this URL is inside of my site defines what's gonna happen when we go to a certain link what page we're gonna direct into so I had this as blank before so what happened is if you don't type anything after the main URL which is like that HTTP you're just gonna direct us to the main dot URLs it's going to include whatever comes after this blank tag essentially okay so if we want to make it so we could possibly go into another body code file folder with our another view what we can do is add another URL inside of this URL spy so I'll copy this path and instead of having a blank this time I'm gonna say /v 1 or I mean so certain v1 slash forward slash and now instead of going to the views dot index view I'm gonna go to view V 1 remember the name of our function and again I'll call this a different name which will be u1 alright so I bet hopefully this will make sense if we don't type anything so meaning we like we don't type admin what's gonna happen is whatever the path that we've given is gonna be passed over to this URL PI file if it's blank meaning we haven't typed anything at all other than the main URL it's gonna bring us to the index page if we type v1 it's gonna bring us to the view 1 page so let's try this on our web browser if I change this now and I say slash V 1 you can see that it brings me to the page v1 now remember if I get rid of v1 and I hit enter it brings me back to the page tech with Tim so we successfully set up two pages that we can see and we kind of understand now how this URL directory system works so that's all it is to setting up our basic Django pages in the next video we'll do a bit more on some multiple pages we'll talk about creating some actual like real HTML stuff on the web site and just keep going further and further with Django if you guys enjoyed the video please make sure you leave a like and subscribe if you need any help don't hesitate to join my discord server follow me on Twitter or my Instagram I'm always answering people's questions there and with that being said I will see you in the next video
