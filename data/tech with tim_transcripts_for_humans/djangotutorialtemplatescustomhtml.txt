With timestamps:

00:00 - hey guys and welcome back so in today's
00:03 - video what we're gonna be doing is
00:04 - covering templates so templates are
00:06 - essentially a way to make your HTML
00:09 - actually look good and display it on the
00:11 - screen they're really nice and Jango
00:13 - because you can actually put your own
00:15 - Python code and you can pass variables
00:17 - through to your templates which means
00:20 - that you can make dynamic HTML which
00:22 - will change based upon whatever you pass
00:24 - to it which is really nice so it's a
00:26 - really easy way to connect your kind of
00:28 - backend with your front-end and that's
00:30 - one of the reasons why a lot of people
00:31 - obviously love Django is because of the
00:33 - fact that you can do stuff like this now
00:35 - I just want to quickly go over what I'm
00:37 - gonna be doing in the rest of the series
00:38 - for some of you that were asking
00:39 - I have plans to make a video on how to
00:41 - add a proper sidebar to your website how
00:44 - to do forms because forms are actually
00:47 - their own thing that are kind of
00:48 - complicated in Django but I want to do a
00:50 - whole tutorial on that I want to do user
00:52 - registration so like login register
00:54 - sending emails all that kind of stuff
00:57 - and then obviously near the end of the
00:58 - series we'll get into more videos longer
01:00 - videos where I'm not just doing features
01:02 - but I'm kind of working on development
01:04 - of the website and actually probably
01:07 - hosting it using Heroku or something
01:09 - like that and showing you guys how to
01:10 - actually deploy this and hopefully for
01:12 - free online so if you guys are excited
01:15 - about that please make sure you leaving
01:16 - a like on the video and letting me know
01:18 - in the comments and with that being said
01:19 - let's get started with templates now if
01:22 - you remember where we left off we had it
01:24 - so essentially we could view different
01:26 - parts or different to-do lists from our
01:28 - database by typing the integer into our
01:31 - bar and that's really all that we had
01:32 - now what I'm gonna do in this video is
01:35 - create templates which will allow us to
01:38 - see our to-do list on the screen in
01:41 - somewhat of a nice form and in future
01:43 - videos I'll add bootstrap onto the
01:44 - website and start doing some custom CSS
01:47 - classes and stuff but for now we're
01:49 - screen use plain HTML and then we'll
01:51 - design and style it all after because
01:53 - styling is really a pain and it takes a
01:55 - long time so the first thing I'm gonna
01:57 - do is I want to create a home page for
01:59 - my website so right now we have this on
02:02 - this page where you type in number you
02:03 - can see it we don't have any homepage so
02:05 - let's do that first so I'm gonna add a
02:07 - link here which is just a blank string
02:09 - and
02:10 - use dot home and name equals home like
02:16 - this and then inside of our views file
02:19 - here so views DUP hi I'll create a new
02:21 - function called home so define home and
02:23 - then we'll have response and we don't
02:27 - have any variable so that's fine and in
02:29 - here I'm just gonna pass for right now
02:30 - is we're not finished coding that yet
02:32 - okay so templates so right now what
02:35 - we've been doing is we've been passing
02:37 - HTTP response to our views so that's the
02:41 - way that we're literally putting the
02:42 - HTML in here you can see the tags right
02:45 - now this is obviously not an efficient
02:47 - and not scalable way to make a website
02:49 - so what we're gonna do is write our own
02:51 - HTML files and then we're gonna load
02:53 - them up from here actually render them
02:55 - and display them to the screen so that's
02:57 - what we have to do first so the first
02:59 - step to do that is to actually create a
03:01 - directory called templates inside of our
03:04 - application directory so inside of main
03:05 - here I'm gonna go to new folder and call
03:08 - this templates like so so if I go in
03:11 - main now I got this folder called
03:12 - templates and now inside of this folder
03:14 - templates I'm going to create a new
03:16 - folder called main ok now this might
03:20 - seem kind of weird how we have main and
03:22 - we have templates and we have main but
03:24 - it's just the way that Django works it's
03:26 - really weird I don't really want to
03:27 - explain it is you just need a folder
03:30 - inside here with the same name as your
03:31 - application to load the templates so
03:33 - that's what we're gonna do so now inside
03:36 - of this folder is where we're gonna put
03:37 - our actual HTML files so let's create a
03:39 - new file and let's just start coding
03:41 - some HTML and I'll talk about what this
03:45 - is gonna be compared to our other
03:46 - templates so let's just set up an HTML
03:49 - document here slash HTML and you know
03:53 - let's save this as base dot HTML and
03:56 - we'll talk about why I'm calling this
03:58 - base in just a minute
03:59 - so in here now I'm going to add some
04:01 - head tags like that and then we add some
04:04 - body tags like that so inside of our
04:08 - head we'll simply just start by adding a
04:10 - title we will be adding a lot of other
04:12 - stuff into this later in the video but
04:14 - for now we're just going to keep it nice
04:15 - and simple for demonstration purposes so
04:17 - I'm just gonna call this Tim's website
04:20 - and then inside of my body tags I'm just
04:22 - gonna create a paragraph
04:23 - and we'll just call this base template
04:29 - okay so that's all we're gonna do for
04:31 - now inside of that template and let's
04:34 - create one more template inside of here
04:37 - and this one we're gonna call home okay
04:39 - so if I save this I say home dot HTML
04:42 - like that and hit enter then in here I'm
04:45 - going to talk now about template
04:48 - inheritance so a really nice thing with
04:50 - Jango that makes building websites super
04:53 - scalable is they have something called
04:55 - template inheritance now right now I've
04:57 - created this template and I've called it
04:59 - based HTML and what I want this template
05:02 - to be is well the base or the standard
05:05 - layout of every single one of my web
05:07 - pages so for example okay so let's just
05:09 - go to Instagram or something and I can
05:12 - show you what I mean by a base template
05:14 - in terms of this so for example a base
05:16 - template for Instagram is this like bar
05:20 - up at the top like every page you go to
05:22 - has this at least on the website right
05:24 - it has this Instagram it has a search
05:25 - bar and then it has these icons and then
05:28 - obviously it's gonna be different
05:29 - depending on what page you are or what
05:30 - account you're on what its gonna show
05:32 - but the base template would be like this
05:33 - top aspect okay so what I want to do is
05:36 - create a base template which will have
05:38 - something that'll be on all of my web
05:40 - page so for example on my actual website
05:41 - if I go to attack with Tim net you can
05:45 - see that this up at the top here this
05:47 - bar would be and actually what do you
05:49 - call it this logo thing as well is the
05:52 - base template it's on every single page
05:54 - so what I want to do is make sure that I
05:56 - don't have to actually code that in to
05:58 - each HTML file that I make because think
06:00 - about it if you have like hundreds of
06:02 - HTML files I don't want to have to code
06:04 - in that menu bar every time so what
06:06 - we're gonna do is we're gonna code all
06:08 - the stuff we want in always on the
06:10 - website in what's known as a base
06:12 - template and then we're going to inherit
06:14 - that template with just one line of code
06:16 - from all of our other templates this
06:18 - one's our base and this is going to show
06:19 - up on all of the pages unless we
06:21 - override it from the child templates so
06:24 - to actually inherit this base template
06:27 - what we do is we use the kind of the
06:29 - Django syntax here which is we open and
06:32 - close a curly brace it and then we put
06:34 - two percent signs like
06:36 - and inside of here we type extends and
06:38 - then we're gonna actually put in single
06:41 - quotes main slash and then in this case
06:45 - bass dot HTML now we just need to
06:48 - include main here because inside the
06:49 - main folder and what this means is just
06:52 - like in Java extending your class you're
06:54 - going to extend this template
06:55 - essentially take everything from this
06:57 - template and use it here now you're
07:00 - gonna say well how do I change stuff in
07:02 - here well we're gonna get to that in a
07:04 - second but let's demonstrate this first
07:06 - so now that we've done that what we need
07:09 - to do is actually render and use these
07:11 - templates so I gotta go back into views
07:13 - here and right now you can see that all
07:15 - we're doing is returns HTTP response so
07:18 - what I need to actually do is render my
07:20 - template so to do that I'm gonna remove
07:22 - HTTP response we're actually not gonna
07:24 - use that anymore
07:25 - we're gonna use the keyword render and
07:28 - then here we're gonna put response which
07:31 - lines up with this parameter here we're
07:33 - going to put the template location so in
07:36 - this case main slash and we'll do base
07:39 - dot HTML for this one okay and then
07:42 - we'll do a comma and we're going to put
07:44 - a open dictionary okay
07:46 - now I'll talk about this dictionary more
07:48 - later but for now it's we're just gonna
07:50 - leave it blank
07:51 - now we're gonna copy this return I'm
07:53 - gonna do the same thing at home except
07:54 - instead of base I'm going to do home
07:56 - HTML and that's actually going to be all
07:59 - we need to do to show these HTML
08:02 - templates that I've created it's pretty
08:04 - straightforward to do this so now
08:06 - obviously I'm going to have to run my
08:07 - site so let's I gotta activate my
08:10 - virtual environment one second here and
08:13 - we'll just do Python manage dot pi run
08:18 - server okay so I didn't make any
08:20 - mistakes it doesn't seem like so let's
08:23 - load up Google here and to enter and now
08:26 - you can see that we've directed to the
08:28 - home page and we get base template okay
08:31 - now so let's see how this worked so when
08:35 - we run in URLs we didn't type any number
08:38 - so we were passed just that empty string
08:40 - so what we did is we navigate it to the
08:42 - home page so the home page is right here
08:44 - this is the function and what it does is
08:46 - it render
08:47 - this home HTML file so now we go to home
08:49 - dot HTML and in here we can see that
08:51 - we're extending the base dot HTML file
08:54 - which means we're gonna use everything
08:55 - from that so what we do is we go to base
08:58 - out HTML we say ok this is what based
09:00 - out HTML looks like let's use that and
09:02 - then it uses that and we get based on
09:04 - HTML so now let's try using for example
09:08 - one now before when we used one what
09:11 - happened was we saw the to-do list and
09:13 - the item now we're not gonna see that
09:16 - because we haven't programmed that into
09:18 - our HTML but just notice what happens
09:19 - when I type slash one query does not
09:23 - exist ok of course it doesn't exist
09:25 - anyways just pretend like that popped up
09:29 - I'm now I'm frustrated why that didn't
09:32 - work because it week the to-do list
09:33 - there's no to-do list that has ID one
09:35 - apparently hmm that's interesting let's
09:40 - try 2 or something and see if that works
09:42 - over 0 because this should really be
09:44 - giving us something - there we go okay -
09:47 - so apparently the object we have in
09:49 - there has ID 2 so anyways now that we
09:52 - have some objects we have ID - you can
09:54 - see that again it's showing this base
09:56 - template because we're rendering the
09:58 - based on HTML template from our index
10:01 - view and when we went to URLs we type
10:03 - some number so we went to index and we
10:05 - passed in the ID as that number that we
10:07 - typed into the address bar perfect that
10:10 - is literally how templates work in terms
10:12 - of rendering them now it's time to show
10:14 - how we can make some dynamic templates
10:16 - that I'll actually change based on what
10:19 - you're typing so obviously right now so
10:23 - this one's branding are based on HTML
10:25 - this one's rendering home dot HTML in
10:27 - previously we had passed through some
10:30 - value which was our to-do list name and
10:33 - we displayed that on the screen so how
10:35 - can we do that now using templates well
10:38 - inside of our templates so this is based
10:40 - on HTML what we can actually do is we
10:44 - can use some variables that are passed
10:48 - from views and we can display those in
10:51 - our HTML so for example rather than
10:53 - putting base template here say I wanted
10:56 - the base template to show
10:58 - all of our what do you call it sorry are
11:01 - different to-do lists then what we can
11:03 - actually do in here is we can put two so
11:06 - we can of these so open and close curly
11:08 - braces two of them and inside here we
11:11 - can type a variable name and then we
11:13 - will pass that variable in from our
11:15 - views so for example if I want the to-do
11:18 - list name
11:18 - maybe I'll pass that in as the variable
11:20 - name so I'm gonna put a name here now
11:23 - what this means is we're gonna be using
11:25 - a variable called name now what I need
11:28 - to do is I go inside view spy and I say
11:32 - okay so we're using a variable name we
11:34 - need to give that variable to our view
11:36 - to do that we use these right here this
11:39 - dictionary so we are gonna type the
11:41 - corresponding name so name here to what
11:43 - we've typed in our HTML and then we're
11:46 - gonna do a colon and put the value that
11:48 - we want to pass whoa what just happened
11:51 - with my lights one second guys
11:52 - sorry something just happened okay
11:54 - anyways um now what we're gonna do is we
11:56 - do LS dot name so we're gonna say the
11:59 - variable name inside of our based on
12:01 - HTML corresponds to LS name now because
12:06 - we've done that there we're gonna run
12:08 - into an issue in our home one because
12:10 - we're looking for some variable name
12:13 - inside our base HTML but inside our home
12:16 - HTML file we're extending base which
12:18 - means you need to pass that variable as
12:20 - well so for right now I'd this obviously
12:22 - is not ideal we're gonna change this in
12:24 - a second I'm just gonna put a name and
12:26 - then this case I'll just say test just
12:29 - so that we actually get something that's
12:30 - working but let's try this out now and
12:32 - see if everything is the same so if I
12:34 - run this now you can see that instead of
12:37 - showing me nothing our strongly based
12:39 - template it's showing me first list
12:41 - which is the name of our first list and
12:43 - if I go to the home page you can see
12:45 - that we just get tests because that's
12:47 - what we've passed in as a variable so
12:49 - that's really the easy way to pass
12:51 - variables is through this dictionary
12:53 - here and it's nice because you don't
12:55 - actually have to type the dictionary
12:57 - here like you can make like my
12:59 - underscore or dick equals and then you
13:02 - can update it with a for loop or you can
13:04 - pass a ton of different stuff into this
13:05 - dictionary and then just put for example
13:08 - my underscore dict here and it'll work
13:11 - the exact
13:12 - same way okay so now we've done that
13:14 - we've kind of understood how this works
13:16 - now let's go back in templates and talk
13:19 - about some more advanced stuff that we
13:20 - can do so for example ideally we've kind
13:24 - of messed this up a little bit because
13:25 - inside of our base HTML we're displaying
13:29 - what do you call it the name of our
13:31 - to-do list we probably don't want to do
13:34 - that because on our home page we
13:35 - probably want to say something else
13:37 - right or we just our base page probably
13:39 - shouldn't do that so what I'm actually
13:41 - gonna do inside here is I'm gonna set up
13:43 - what's known as a Content block which
13:46 - can be over overrode from other
13:50 - templates and you'll see how this works
13:51 - in a second so if I just do my two
13:53 - percent signs here I'm going to type the
13:55 - word block and then give it a name so in
13:58 - this case all right well I won't do name
13:59 - I'll do block content and then what I'm
14:02 - gonna do under here is I'm going to do
14:04 - two signs like this and I'm going to say
14:07 - block or sorry and block okay now just
14:12 - for good practice I will put this inside
14:14 - of a div so I'm just gonna say div and
14:16 - I'll say ID equals in this case content
14:21 - and then name equals content just in
14:23 - case I want to reference this later
14:24 - we'll do that and we'll just end the div
14:27 - here so type that in and now what I'm
14:30 - able to do actually is from inside my
14:33 - other templates that extend this
14:35 - template I can pick what's gonna go
14:38 - inside of this block so for example the
14:40 - web titles nobody's gonna be the same
14:42 - but if I want to put something specific
14:44 - inside here depending on what web page
14:46 - you're on I can do that from other
14:48 - templates so on home for example I
14:50 - probably want to say like home page or
14:52 - something like that so to do this I'm
14:54 - gonna do a very similar to thing to what
14:57 - I've done here I'm literally just going
14:58 - to type the same thing and say block
15:00 - content okay and then I'm going to close
15:03 - the block like this by saying end block
15:06 - and inside here I'm gonna put a parrot
15:09 - or actually I'll put an h1 tag and I'll
15:11 - just simply say Wade code
15:13 - home page like this okay so now I'm just
15:17 - gonna go in views and I'm gonna remove
15:18 - this these variables from here because
15:21 - we don't need them anymore and let's run
15:23 - this now and see what we're getting so
15:25 - on the home page
15:25 - if I hit enter you can see now we're
15:28 - getting homepage so what we've done is
15:30 - we've said okay so this is our base
15:32 - template the content for each of the
15:35 - pages that inherit this is gonna go
15:37 - inside of this block content so if I go
15:40 - here and I type block content I can put
15:42 - whatever I want here and it's just gonna
15:44 - paste it inside of here for me now this
15:47 - works the same with other kind of blocks
15:49 - you can create more than one block and
15:51 - you can choose whether you want to use
15:53 - them or not so for example if I want the
15:55 - title to be different what I can do is
15:58 - inside of here and there's no really
16:00 - limit on how you use the block so you
16:01 - can use them however you want I can say
16:03 - block title and then here I can end this
16:07 - block again and you always have to end
16:09 - your block so you can't just leave them
16:10 - open otherwise you're gonna run into
16:11 - some issues do end block and then I can
16:14 - set a default title in here if I wanted
16:16 - to for example Tim's site like that and
16:20 - then here I can make this block again so
16:23 - if I I'll just copy this actually and
16:25 - paste it up here and name this title and
16:30 - then here I can just name it whatever I
16:31 - want so in this case I'll just say home
16:33 - okay
16:34 - so now what's gonna happen is this block
16:36 - title is gonna be again overridden by
16:38 - this and it's gonna put that as the
16:40 - title of our webpage let's try this out
16:42 - and you can see that now up here at the
16:44 - top it's changed to home as opposed to
16:46 - Tim's site now if I go to like / - you
16:50 - can see there's nothing here just
16:51 - because I haven't set any base stuff to
16:55 - show up inside of my base content if I
16:57 - wanted something default to show up what
17:00 - I would do is just type like hello or
17:01 - something in here and then that would
17:03 - show up but that's how the blocks work
17:05 - and that's the first step to kind of
17:07 - template inheritance now I'm gonna show
17:09 - you how we can actually write code
17:12 - inside of our templates to do things
17:14 - more dynamically so this based on HTML
17:17 - file is fine this home file is fine but
17:19 - I actually don't want to be using this
17:22 - based on HTML file inside of my as one
17:26 - of my views I just want to inherit from
17:28 - it and then customize it from each
17:29 - individual view so what I'm gonna do is
17:31 - create another view or another template
17:34 - my bad sorry and I'm gonna call this
17:36 - file new file
17:37 - and we will call this one ice should we
17:41 - call it view I want to view the to-do
17:44 - list so maybe we'll just call it like a
17:45 - list like that okay list dot HTML and
17:49 - what this is gonna do is display our
17:51 - to-do list for us so the name of this
17:53 - to-do list and then each item on the do
17:54 - list it's gonna display that in a list
17:56 - form that's what I want to do so I have
17:58 - to start by extending from my based on
18:01 - HTML so it really simple again extends
18:04 - in quotes I don't think it matters if
18:06 - it's singular double quotes and then
18:08 - we'll say main or based HTML like that
18:12 - we'll set up our blocks
18:13 - so our first block is going to be the
18:17 - title block so my percent signs so block
18:20 - title and then here we'll go and block
18:25 - like that then inside here which is our
18:28 - title B maybe we'll just say like you
18:31 - view list or something we could change
18:33 - that later if we want and then we'll set
18:35 - up our content block which will be
18:37 - actually displaying the list for us so
18:39 - block content and then inside here we
18:44 - will obviously end the block and then
18:48 - inside of the content what I'm gonna do
18:50 - now is start working with some variables
18:52 - that we pass in from views so actually
18:56 - the only thing we really need I guess is
18:57 - we can say LS is LS and then from there
19:03 - we can determine if we want the name
19:05 - here if we want the items we can do all
19:07 - that kind of stuff so let's start by
19:09 - just doing an h1 tag which is the name
19:11 - of the list so to do this I'm going to
19:13 - h1 and then in here what we'll put
19:17 - remember our two curly brace sets and
19:19 - we're gonna say LS dot name okay because
19:22 - we're passing that LS object so we can
19:24 - call any methods on it that we want
19:26 - inside here so we have the name now but
19:29 - we also want all of the items and here's
19:31 - where things get a bit tricky kind of
19:34 - tricky but actually just really cool and
19:35 - how they work so we could technically
19:38 - have infinite items we don't know how
19:40 - many items we're gonna have so we need
19:41 - to loop through all of the items and
19:43 - then display them in kind of a list form
19:45 - so to do this we're now gonna start
19:48 - actually writing some code some
19:51 - long code Python ish code inside of our
19:53 - html5 so I'm gonna write a for loop I'm
19:56 - going to show you how to do this for
19:57 - loop inside of your templates you're
20:00 - gonna start by literally just typing the
20:03 - four so you can say four and in this
20:05 - case I'm gonna say item in LS dot and
20:09 - then item underscore it's set dot all
20:12 - now some of you might think you need
20:14 - brackets here for some reason when you
20:16 - put the brackets you run into an issue
20:18 - so if you're gonna be looping through
20:20 - something don't put the brackets like
20:22 - that just leave it like this and it
20:24 - should work so if you're running into an
20:25 - issue that says something like it can't
20:27 - decipher these brackets just get rid of
20:29 - them and that should work for you that's
20:30 - an issue that I was running into we need
20:33 - to also end this for loop so I'm just
20:35 - gonna type n four here and now inside of
20:38 - here I'm gonna show you what we do to
20:39 - display a ton of different items using a
20:42 - loop so essentially I mean maybe you
20:45 - will indent this to be a bit nicer
20:47 - inside this for loop I want every time
20:50 - this for loops runs to get the name of
20:53 - my item and display it on the screen so
20:56 - to do that I'm going to set up a list so
20:59 - I think what I do is I do you l haven't
21:01 - done HTML for a while so this could be a
21:03 - little bit rusty new UL which stands for
21:06 - our list okay and then inside here what
21:09 - I'm gonna do is I'm gonna say Li like
21:12 - this will end that Li tag and then in
21:15 - here we're gonna use a variable but our
21:17 - variable this time is gonna be item dot
21:20 - text okay because we're gonna get the
21:23 - item which is that item object in our
21:25 - database from the item set of our list
21:27 - and then we'll display that as a list
21:29 - item now I don't even know if I have any
21:33 - items in my list so we might have to add
21:36 - those in a second but that's fine we can
21:38 - deal with that when we get to it so now
21:40 - that we've saved this let's make sure
21:42 - that we're actually going to return list
21:44 - HTML from our views so instead of
21:46 - returning base let's change this to list
21:49 - and then let's run our site here quickly
21:53 - okay so we get first list and we don't
21:56 - we're not running into any issues but
21:57 - I'm pretty sure the reason we're not
21:58 - seeing all of the different items is
22:01 - because we don't have any so if I want
22:02 - to add some let's
22:04 - this and let's add some items to that
22:05 - list so I guess to do this now I get a
22:08 - refresh my memory is we're gonna do a
22:10 - Python manage pie shell and then I need
22:15 - to import from my database so from
22:18 - import main dot models are ice from
22:23 - Maine dot models from Maine dot models
22:28 - will import to do list like that and
22:33 - then what we're gonna do is we're gonna
22:35 - say I guess we'll say LS equals to do
22:39 - list dot objects job gets ID equals to
22:45 - well print LS out we see we get first
22:48 - list let's look at the item set quickly
22:49 - so item underscore set dot all we don't
22:53 - have any so let's add some in there so
22:55 - item set dot create and in this case I
22:58 - guess what do we just need we need a
22:59 - text for that right so we'll say text
23:01 - equals and then in this case we'll say
23:03 - first item and I guess we'll do complete
23:06 - equals false ok so we added that let's
23:10 - actually add another item and we'll call
23:12 - this one second item and while we're at
23:15 - it let's do a third well ok so now we've
23:19 - done that we can get out of this by just
23:21 - typing quit and then run the server
23:24 - again and then see if we've updated our
23:27 - list let's cross the fingers there we go
23:30 - and now all of our list items are
23:32 - showing up so first item second item
23:34 - third item and that's how you use a for
23:37 - loop inside of your templates and that's
23:39 - really like look how cool that is we
23:41 - don't have to we don't have to type a
23:43 - ton of HTML we just do a for loop like
23:45 - we would in Python we were very familiar
23:46 - with and then we can just type whatever
23:49 - we want inside of the for loop in terms
23:51 - of HTML and that'll show up on the
23:52 - screen for us that's how that works and
23:54 - that's really cool now we can also do if
23:57 - statements and else statements and stuff
23:59 - like that so I will now show if
24:01 - statements it's gonna be this a hard
24:04 - example actually what I can do is say
24:07 - well do another block in here and in
24:09 - this case what we'll do is we will only
24:11 - show the item if it's not if it's
24:15 - complete right or if it's not complete
24:17 - if we're gonna have it complete we
24:19 - probably shouldn't show it so first of
24:21 - all I don't know why this is trailing
24:22 - here and get rid of that and in here I'm
24:24 - now I'm just gonna do my percent signs
24:26 - again I'll say if and in this case item
24:30 - dot complete equals equals false and
24:35 - then I will simply end if here so do
24:38 - percent percent and if like that so we
24:42 - always have to end our statements I know
24:44 - it's annoying but if you think about it
24:46 - we're not really working with
24:47 - indentation in these files so it's not
24:49 - gonna be able to tell what's in which
24:50 - statement unless we do an ENDIF or we
24:53 - less are we end our statements so we
24:54 - need to do that okay so we've done that
24:56 - and now I will actually just go back
24:59 - into the shell again I know seemed
25:01 - pretty counterproductive and make an
25:03 - item that is actually complete otherwise
25:05 - we're not gonna see that so I just gonna
25:08 - have to import this again so from Maine
25:11 - dot models import to-do list will say LS
25:20 - equals to-do list dot objects dog gets
25:26 - ID equals two okay LS dot item
25:31 - underscore set
25:32 - don't create and then this case will say
25:35 - text equals not showing and then
25:40 - complete equals true okay so true like
25:44 - that
25:45 - hit enter not showing quit that and
25:49 - rerun the server probably should have
25:51 - done this before guys but you know
25:53 - that's fine so if I run this now you can
25:56 - see that we're not seeing that item that
25:58 - I just created but if I change this to
26:00 - be true okay and save this now and
26:04 - hopefully this updates quickly now you
26:08 - can see that we're only seeing the item
26:10 - that is complete so these if statements
26:12 - work just the way they work in Python we
26:14 - you can see only the complete items only
26:16 - did not complete items and yeah that's
26:18 - really how you do that we can also do
26:21 - like an else and an else if and stuff so
26:25 - if I want to do an else statement in
26:26 - here I can just type else and then put
26:29 - whatever I want on
26:30 - else and we don't need to type and else
26:33 - because ending the if will tell us that
26:36 - were done the entire kind of chain
26:37 - statement so what we'll do actually and
26:40 - this is kind of interesting as well is
26:42 - inside of here we'll do the item dot
26:45 - text if it's complete but we'll do in
26:47 - all capitals complete after it just so
26:50 - we know that it's finished otherwise we
26:52 - will say incomplete like that so let's
26:56 - try running this now and see if I made
26:57 - any mistakes you know okay so there we
26:59 - go so we can see first item incomplete
27:01 - second item incomplete third item
27:02 - incomplete not showing complete awesome
27:06 - so that is essentially the basics of
27:09 - templates how we do the kind of
27:11 - inheritance for them you can obviously
27:13 - have a template inheriting a template
27:15 - that inherits another template and in
27:17 - future videos we're gonna be making
27:19 - these look a lot nicer I just want to
27:21 - give you guys the basics here and make
27:23 - sure that was working in fact let me
27:25 - make sure the home page works oh forget
27:26 - if I showed that okay it does so anyways
27:29 - that has been it for this video if you
27:30 - guys enjoyed please make sure you leave
27:31 - a like and subscribe and if you need any
27:33 - help anything I feel free to leave a
27:35 - comment down below I'm always answering
27:36 - those and I love to chat to guys
27:39 - [Music]

Cleaned transcript:

hey guys and welcome back so in today's video what we're gonna be doing is covering templates so templates are essentially a way to make your HTML actually look good and display it on the screen they're really nice and Jango because you can actually put your own Python code and you can pass variables through to your templates which means that you can make dynamic HTML which will change based upon whatever you pass to it which is really nice so it's a really easy way to connect your kind of backend with your frontend and that's one of the reasons why a lot of people obviously love Django is because of the fact that you can do stuff like this now I just want to quickly go over what I'm gonna be doing in the rest of the series for some of you that were asking I have plans to make a video on how to add a proper sidebar to your website how to do forms because forms are actually their own thing that are kind of complicated in Django but I want to do a whole tutorial on that I want to do user registration so like login register sending emails all that kind of stuff and then obviously near the end of the series we'll get into more videos longer videos where I'm not just doing features but I'm kind of working on development of the website and actually probably hosting it using Heroku or something like that and showing you guys how to actually deploy this and hopefully for free online so if you guys are excited about that please make sure you leaving a like on the video and letting me know in the comments and with that being said let's get started with templates now if you remember where we left off we had it so essentially we could view different parts or different todo lists from our database by typing the integer into our bar and that's really all that we had now what I'm gonna do in this video is create templates which will allow us to see our todo list on the screen in somewhat of a nice form and in future videos I'll add bootstrap onto the website and start doing some custom CSS classes and stuff but for now we're screen use plain HTML and then we'll design and style it all after because styling is really a pain and it takes a long time so the first thing I'm gonna do is I want to create a home page for my website so right now we have this on this page where you type in number you can see it we don't have any homepage so let's do that first so I'm gonna add a link here which is just a blank string and use dot home and name equals home like this and then inside of our views file here so views DUP hi I'll create a new function called home so define home and then we'll have response and we don't have any variable so that's fine and in here I'm just gonna pass for right now is we're not finished coding that yet okay so templates so right now what we've been doing is we've been passing HTTP response to our views so that's the way that we're literally putting the HTML in here you can see the tags right now this is obviously not an efficient and not scalable way to make a website so what we're gonna do is write our own HTML files and then we're gonna load them up from here actually render them and display them to the screen so that's what we have to do first so the first step to do that is to actually create a directory called templates inside of our application directory so inside of main here I'm gonna go to new folder and call this templates like so so if I go in main now I got this folder called templates and now inside of this folder templates I'm going to create a new folder called main ok now this might seem kind of weird how we have main and we have templates and we have main but it's just the way that Django works it's really weird I don't really want to explain it is you just need a folder inside here with the same name as your application to load the templates so that's what we're gonna do so now inside of this folder is where we're gonna put our actual HTML files so let's create a new file and let's just start coding some HTML and I'll talk about what this is gonna be compared to our other templates so let's just set up an HTML document here slash HTML and you know let's save this as base dot HTML and we'll talk about why I'm calling this base in just a minute so in here now I'm going to add some head tags like that and then we add some body tags like that so inside of our head we'll simply just start by adding a title we will be adding a lot of other stuff into this later in the video but for now we're just going to keep it nice and simple for demonstration purposes so I'm just gonna call this Tim's website and then inside of my body tags I'm just gonna create a paragraph and we'll just call this base template okay so that's all we're gonna do for now inside of that template and let's create one more template inside of here and this one we're gonna call home okay so if I save this I say home dot HTML like that and hit enter then in here I'm going to talk now about template inheritance so a really nice thing with Jango that makes building websites super scalable is they have something called template inheritance now right now I've created this template and I've called it based HTML and what I want this template to be is well the base or the standard layout of every single one of my web pages so for example okay so let's just go to Instagram or something and I can show you what I mean by a base template in terms of this so for example a base template for Instagram is this like bar up at the top like every page you go to has this at least on the website right it has this Instagram it has a search bar and then it has these icons and then obviously it's gonna be different depending on what page you are or what account you're on what its gonna show but the base template would be like this top aspect okay so what I want to do is create a base template which will have something that'll be on all of my web page so for example on my actual website if I go to attack with Tim net you can see that this up at the top here this bar would be and actually what do you call it this logo thing as well is the base template it's on every single page so what I want to do is make sure that I don't have to actually code that in to each HTML file that I make because think about it if you have like hundreds of HTML files I don't want to have to code in that menu bar every time so what we're gonna do is we're gonna code all the stuff we want in always on the website in what's known as a base template and then we're going to inherit that template with just one line of code from all of our other templates this one's our base and this is going to show up on all of the pages unless we override it from the child templates so to actually inherit this base template what we do is we use the kind of the Django syntax here which is we open and close a curly brace it and then we put two percent signs like and inside of here we type extends and then we're gonna actually put in single quotes main slash and then in this case bass dot HTML now we just need to include main here because inside the main folder and what this means is just like in Java extending your class you're going to extend this template essentially take everything from this template and use it here now you're gonna say well how do I change stuff in here well we're gonna get to that in a second but let's demonstrate this first so now that we've done that what we need to do is actually render and use these templates so I gotta go back into views here and right now you can see that all we're doing is returns HTTP response so what I need to actually do is render my template so to do that I'm gonna remove HTTP response we're actually not gonna use that anymore we're gonna use the keyword render and then here we're gonna put response which lines up with this parameter here we're going to put the template location so in this case main slash and we'll do base dot HTML for this one okay and then we'll do a comma and we're going to put a open dictionary okay now I'll talk about this dictionary more later but for now it's we're just gonna leave it blank now we're gonna copy this return I'm gonna do the same thing at home except instead of base I'm going to do home HTML and that's actually going to be all we need to do to show these HTML templates that I've created it's pretty straightforward to do this so now obviously I'm going to have to run my site so let's I gotta activate my virtual environment one second here and we'll just do Python manage dot pi run server okay so I didn't make any mistakes it doesn't seem like so let's load up Google here and to enter and now you can see that we've directed to the home page and we get base template okay now so let's see how this worked so when we run in URLs we didn't type any number so we were passed just that empty string so what we did is we navigate it to the home page so the home page is right here this is the function and what it does is it render this home HTML file so now we go to home dot HTML and in here we can see that we're extending the base dot HTML file which means we're gonna use everything from that so what we do is we go to base out HTML we say ok this is what based out HTML looks like let's use that and then it uses that and we get based on HTML so now let's try using for example one now before when we used one what happened was we saw the todo list and the item now we're not gonna see that because we haven't programmed that into our HTML but just notice what happens when I type slash one query does not exist ok of course it doesn't exist anyways just pretend like that popped up I'm now I'm frustrated why that didn't work because it week the todo list there's no todo list that has ID one apparently hmm that's interesting let's try 2 or something and see if that works over 0 because this should really be giving us something there we go okay so apparently the object we have in there has ID 2 so anyways now that we have some objects we have ID you can see that again it's showing this base template because we're rendering the based on HTML template from our index view and when we went to URLs we type some number so we went to index and we passed in the ID as that number that we typed into the address bar perfect that is literally how templates work in terms of rendering them now it's time to show how we can make some dynamic templates that I'll actually change based on what you're typing so obviously right now so this one's branding are based on HTML this one's rendering home dot HTML in previously we had passed through some value which was our todo list name and we displayed that on the screen so how can we do that now using templates well inside of our templates so this is based on HTML what we can actually do is we can use some variables that are passed from views and we can display those in our HTML so for example rather than putting base template here say I wanted the base template to show all of our what do you call it sorry are different todo lists then what we can actually do in here is we can put two so we can of these so open and close curly braces two of them and inside here we can type a variable name and then we will pass that variable in from our views so for example if I want the todo list name maybe I'll pass that in as the variable name so I'm gonna put a name here now what this means is we're gonna be using a variable called name now what I need to do is I go inside view spy and I say okay so we're using a variable name we need to give that variable to our view to do that we use these right here this dictionary so we are gonna type the corresponding name so name here to what we've typed in our HTML and then we're gonna do a colon and put the value that we want to pass whoa what just happened with my lights one second guys sorry something just happened okay anyways um now what we're gonna do is we do LS dot name so we're gonna say the variable name inside of our based on HTML corresponds to LS name now because we've done that there we're gonna run into an issue in our home one because we're looking for some variable name inside our base HTML but inside our home HTML file we're extending base which means you need to pass that variable as well so for right now I'd this obviously is not ideal we're gonna change this in a second I'm just gonna put a name and then this case I'll just say test just so that we actually get something that's working but let's try this out now and see if everything is the same so if I run this now you can see that instead of showing me nothing our strongly based template it's showing me first list which is the name of our first list and if I go to the home page you can see that we just get tests because that's what we've passed in as a variable so that's really the easy way to pass variables is through this dictionary here and it's nice because you don't actually have to type the dictionary here like you can make like my underscore or dick equals and then you can update it with a for loop or you can pass a ton of different stuff into this dictionary and then just put for example my underscore dict here and it'll work the exact same way okay so now we've done that we've kind of understood how this works now let's go back in templates and talk about some more advanced stuff that we can do so for example ideally we've kind of messed this up a little bit because inside of our base HTML we're displaying what do you call it the name of our todo list we probably don't want to do that because on our home page we probably want to say something else right or we just our base page probably shouldn't do that so what I'm actually gonna do inside here is I'm gonna set up what's known as a Content block which can be over overrode from other templates and you'll see how this works in a second so if I just do my two percent signs here I'm going to type the word block and then give it a name so in this case all right well I won't do name I'll do block content and then what I'm gonna do under here is I'm going to do two signs like this and I'm going to say block or sorry and block okay now just for good practice I will put this inside of a div so I'm just gonna say div and I'll say ID equals in this case content and then name equals content just in case I want to reference this later we'll do that and we'll just end the div here so type that in and now what I'm able to do actually is from inside my other templates that extend this template I can pick what's gonna go inside of this block so for example the web titles nobody's gonna be the same but if I want to put something specific inside here depending on what web page you're on I can do that from other templates so on home for example I probably want to say like home page or something like that so to do this I'm gonna do a very similar to thing to what I've done here I'm literally just going to type the same thing and say block content okay and then I'm going to close the block like this by saying end block and inside here I'm gonna put a parrot or actually I'll put an h1 tag and I'll just simply say Wade code home page like this okay so now I'm just gonna go in views and I'm gonna remove this these variables from here because we don't need them anymore and let's run this now and see what we're getting so on the home page if I hit enter you can see now we're getting homepage so what we've done is we've said okay so this is our base template the content for each of the pages that inherit this is gonna go inside of this block content so if I go here and I type block content I can put whatever I want here and it's just gonna paste it inside of here for me now this works the same with other kind of blocks you can create more than one block and you can choose whether you want to use them or not so for example if I want the title to be different what I can do is inside of here and there's no really limit on how you use the block so you can use them however you want I can say block title and then here I can end this block again and you always have to end your block so you can't just leave them open otherwise you're gonna run into some issues do end block and then I can set a default title in here if I wanted to for example Tim's site like that and then here I can make this block again so if I I'll just copy this actually and paste it up here and name this title and then here I can just name it whatever I want so in this case I'll just say home okay so now what's gonna happen is this block title is gonna be again overridden by this and it's gonna put that as the title of our webpage let's try this out and you can see that now up here at the top it's changed to home as opposed to Tim's site now if I go to like / you can see there's nothing here just because I haven't set any base stuff to show up inside of my base content if I wanted something default to show up what I would do is just type like hello or something in here and then that would show up but that's how the blocks work and that's the first step to kind of template inheritance now I'm gonna show you how we can actually write code inside of our templates to do things more dynamically so this based on HTML file is fine this home file is fine but I actually don't want to be using this based on HTML file inside of my as one of my views I just want to inherit from it and then customize it from each individual view so what I'm gonna do is create another view or another template my bad sorry and I'm gonna call this file new file and we will call this one ice should we call it view I want to view the todo list so maybe we'll just call it like a list like that okay list dot HTML and what this is gonna do is display our todo list for us so the name of this todo list and then each item on the do list it's gonna display that in a list form that's what I want to do so I have to start by extending from my based on HTML so it really simple again extends in quotes I don't think it matters if it's singular double quotes and then we'll say main or based HTML like that we'll set up our blocks so our first block is going to be the title block so my percent signs so block title and then here we'll go and block like that then inside here which is our title B maybe we'll just say like you view list or something we could change that later if we want and then we'll set up our content block which will be actually displaying the list for us so block content and then inside here we will obviously end the block and then inside of the content what I'm gonna do now is start working with some variables that we pass in from views so actually the only thing we really need I guess is we can say LS is LS and then from there we can determine if we want the name here if we want the items we can do all that kind of stuff so let's start by just doing an h1 tag which is the name of the list so to do this I'm going to h1 and then in here what we'll put remember our two curly brace sets and we're gonna say LS dot name okay because we're passing that LS object so we can call any methods on it that we want inside here so we have the name now but we also want all of the items and here's where things get a bit tricky kind of tricky but actually just really cool and how they work so we could technically have infinite items we don't know how many items we're gonna have so we need to loop through all of the items and then display them in kind of a list form so to do this we're now gonna start actually writing some code some long code Python ish code inside of our html5 so I'm gonna write a for loop I'm going to show you how to do this for loop inside of your templates you're gonna start by literally just typing the four so you can say four and in this case I'm gonna say item in LS dot and then item underscore it's set dot all now some of you might think you need brackets here for some reason when you put the brackets you run into an issue so if you're gonna be looping through something don't put the brackets like that just leave it like this and it should work so if you're running into an issue that says something like it can't decipher these brackets just get rid of them and that should work for you that's an issue that I was running into we need to also end this for loop so I'm just gonna type n four here and now inside of here I'm gonna show you what we do to display a ton of different items using a loop so essentially I mean maybe you will indent this to be a bit nicer inside this for loop I want every time this for loops runs to get the name of my item and display it on the screen so to do that I'm going to set up a list so I think what I do is I do you l haven't done HTML for a while so this could be a little bit rusty new UL which stands for our list okay and then inside here what I'm gonna do is I'm gonna say Li like this will end that Li tag and then in here we're gonna use a variable but our variable this time is gonna be item dot text okay because we're gonna get the item which is that item object in our database from the item set of our list and then we'll display that as a list item now I don't even know if I have any items in my list so we might have to add those in a second but that's fine we can deal with that when we get to it so now that we've saved this let's make sure that we're actually going to return list HTML from our views so instead of returning base let's change this to list and then let's run our site here quickly okay so we get first list and we don't we're not running into any issues but I'm pretty sure the reason we're not seeing all of the different items is because we don't have any so if I want to add some let's this and let's add some items to that list so I guess to do this now I get a refresh my memory is we're gonna do a Python manage pie shell and then I need to import from my database so from import main dot models are ice from Maine dot models from Maine dot models will import to do list like that and then what we're gonna do is we're gonna say I guess we'll say LS equals to do list dot objects job gets ID equals to well print LS out we see we get first list let's look at the item set quickly so item underscore set dot all we don't have any so let's add some in there so item set dot create and in this case I guess what do we just need we need a text for that right so we'll say text equals and then in this case we'll say first item and I guess we'll do complete equals false ok so we added that let's actually add another item and we'll call this one second item and while we're at it let's do a third well ok so now we've done that we can get out of this by just typing quit and then run the server again and then see if we've updated our list let's cross the fingers there we go and now all of our list items are showing up so first item second item third item and that's how you use a for loop inside of your templates and that's really like look how cool that is we don't have to we don't have to type a ton of HTML we just do a for loop like we would in Python we were very familiar with and then we can just type whatever we want inside of the for loop in terms of HTML and that'll show up on the screen for us that's how that works and that's really cool now we can also do if statements and else statements and stuff like that so I will now show if statements it's gonna be this a hard example actually what I can do is say well do another block in here and in this case what we'll do is we will only show the item if it's not if it's complete right or if it's not complete if we're gonna have it complete we probably shouldn't show it so first of all I don't know why this is trailing here and get rid of that and in here I'm now I'm just gonna do my percent signs again I'll say if and in this case item dot complete equals equals false and then I will simply end if here so do percent percent and if like that so we always have to end our statements I know it's annoying but if you think about it we're not really working with indentation in these files so it's not gonna be able to tell what's in which statement unless we do an ENDIF or we less are we end our statements so we need to do that okay so we've done that and now I will actually just go back into the shell again I know seemed pretty counterproductive and make an item that is actually complete otherwise we're not gonna see that so I just gonna have to import this again so from Maine dot models import todo list will say LS equals todo list dot objects dog gets ID equals two okay LS dot item underscore set don't create and then this case will say text equals not showing and then complete equals true okay so true like that hit enter not showing quit that and rerun the server probably should have done this before guys but you know that's fine so if I run this now you can see that we're not seeing that item that I just created but if I change this to be true okay and save this now and hopefully this updates quickly now you can see that we're only seeing the item that is complete so these if statements work just the way they work in Python we you can see only the complete items only did not complete items and yeah that's really how you do that we can also do like an else and an else if and stuff so if I want to do an else statement in here I can just type else and then put whatever I want on else and we don't need to type and else because ending the if will tell us that were done the entire kind of chain statement so what we'll do actually and this is kind of interesting as well is inside of here we'll do the item dot text if it's complete but we'll do in all capitals complete after it just so we know that it's finished otherwise we will say incomplete like that so let's try running this now and see if I made any mistakes you know okay so there we go so we can see first item incomplete second item incomplete third item incomplete not showing complete awesome so that is essentially the basics of templates how we do the kind of inheritance for them you can obviously have a template inheriting a template that inherits another template and in future videos we're gonna be making these look a lot nicer I just want to give you guys the basics here and make sure that was working in fact let me make sure the home page works oh forget if I showed that okay it does so anyways that has been it for this video if you guys enjoyed please make sure you leave a like and subscribe and if you need any help anything I feel free to leave a comment down below I'm always answering those and I love to chat to guys
