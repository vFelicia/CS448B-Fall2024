With timestamps:

00:00 - they say it takes 10,000 hours to feel
00:02 - like an expert in any field and although
00:04 - I don't know if I'll ever truly feel
00:05 - like an expert I have reached that goal
00:07 - and I've learned a few things along the
00:09 - way that I want to share with you now
00:10 - the first is that coding or being a
00:13 - developer in general is really all about
00:15 - thinking now yes it's important to
00:17 - understand the language different
00:18 - Frameworks tools Etc once you get past
00:21 - that point what really makes you a great
00:23 - developer is your ability to problem
00:25 - solve and to think critically what
00:27 - you'll end up doing as you get better
00:29 - and better and you learn mult multiple
00:30 - different languages is you'll realize
00:32 - that all of these things you've learned
00:33 - are simply tools that help you achieve a
00:35 - goal and solve a problem you should
00:37 - always pick the best tool for the job
00:39 - and to be able to do that you first need
00:41 - to understand how to break down the
00:43 - problem and how to solve it into a
00:44 - series of steps that you can then
00:46 - translate into code now the best example
00:48 - of this is these famous data structures
00:50 - and algorithms problems these can be
00:52 - solved in pretty much any language or
00:54 - any text stack and the difficult part is
00:56 - not actually writing the code it's
00:58 - figuring out what you need to code what
01:00 - you need to write down now I'm sure many
01:02 - of you have experienced this before
01:03 - you'll open up a code editor and you'll
01:05 - say okay today I'm going to build this
01:06 - project the thing that's holding you
01:08 - back is not your ability to write the
01:10 - code it's to think about what code you
01:12 - need to write and to break down the
01:14 - problem into enough small sub problems
01:17 - that you're actually able to solve it so
01:19 - I would say if you're a new developer
01:21 - really focus on your critical thinking
01:22 - and problem solving skills there's a lot
01:25 - of ways to practice that but a lot of
01:26 - times it really comes down to just
01:28 - sitting in silence having a piece of
01:30 - paper in front of you and just thinking
01:31 - about how you solve a problem now I know
01:33 - a lot of you watching this may just be
01:35 - getting started and you don't even have
01:37 - 10 hours of practice under your belt now
01:39 - if that's the case I'll let you know
01:41 - that python is a great language to get
01:43 - started with and you can learn more
01:44 - about it from this completely free
01:46 - introduction to python resource from our
01:49 - video sponsor HubSpot this resource is
01:51 - designed for marketers developers and
01:53 - data analyst it goes over what python is
01:56 - the main functions and methods coding
01:59 - best practic and the standards you need
02:01 - to know when writing in Python it also
02:03 - covers some Advanced python features and
02:05 - I've left a link to it in the
02:06 - description so you can check it out
02:08 - completely for free now as many of you
02:10 - know python is a super popular language
02:12 - and is great to learn even if you're not
02:14 - trying to become a professional
02:15 - developer definitely check out this
02:17 - guide and you'll be amazed at what you
02:19 - can do with even some basic python
02:21 - knowledge now this resource and tons of
02:23 - other are provided completely for free
02:25 - from our video sponsor HubSpot massive
02:28 - thank you to them and make sure to check
02:29 - this resource out from the link in the
02:31 - description now the next insight to
02:32 - share with you is something that I
02:34 - unfortunately learned as I got further
02:36 - and further into my journey and that is
02:38 - bad habits compound it's very easy when
02:41 - you just start out programming to just
02:43 - want to get something done right to just
02:45 - actually solve the problem get something
02:46 - in your IDE and run the code now that's
02:48 - totally fine but what will end up
02:50 - happening is you'll build some really
02:52 - bad habits and be doing things with bad
02:54 - practice that you might not even realize
02:56 - are wrong and then you'll get to a phase
02:58 - in your career where you've been doing
02:59 - doing this so long and so often that
03:01 - it's really difficult to reverse it so a
03:04 - few examples of this are just using good
03:06 - variable names when I first started out
03:08 - I never got that tip no one ever told me
03:10 - just use really detailed variable names
03:13 - this is the way you should name them Etc
03:15 - so I constantly use variable names like
03:16 - x y z W1 W2 all these really abstract
03:21 - and ambiguous names and when I
03:22 - eventually started actually working for
03:24 - tech companies and doing professional
03:26 - jobs that was a huge comment that I
03:28 - constantly got and from that that point
03:30 - forward I had to really consciously
03:32 - think about changing that habit whereas
03:34 - if I just had started right from the
03:35 - beginning using good variable names it
03:37 - wouldn't have been an issue it wouldn't
03:38 - have been something people commented on
03:40 - and I would have just not had to
03:41 - consider it because I always wrote code
03:43 - that way another thing is simply typing
03:46 - if you're just getting started out right
03:48 - now I highly recommend learn how to type
03:50 - properly before you start doing it every
03:52 - single day for eight hours it's not
03:54 - something that I did and I still to this
03:56 - day am really limited with my typing
03:58 - ability because I just had a really
03:59 - really horrible form and I've never
04:01 - really been able to correct that up
04:03 - until this point the next thing to touch
04:04 - on now is environment having coded for
04:07 - over 10,000 hours I've worked in pretty
04:09 - much any environment you can imagine and
04:11 - I can tell you this is the number one
04:13 - factor at least for my productivity when
04:15 - I'm able to have an isolated environment
04:18 - in this case maybe an office right a
04:20 - separate room where all I do in that
04:22 - location is code I get so much more done
04:24 - probably two or three times the amount
04:26 - of work as opposed to when I have a
04:28 - place where I'm doing a bunch of
04:29 - different things in that area so to give
04:31 - you a concrete example previously you
04:32 - guys saw I had a really nice setup had a
04:34 - great office had sound panels all of
04:36 - that kind of stuff when I stepped foot
04:38 - into that room it was incredible how
04:40 - much work I could get done I had the
04:41 - best chair the best keyboard the best
04:43 - computer I invested as much as possible
04:46 - in my my equipment and my environment to
04:48 - make sure I'd be comfortable and it
04:50 - would be a place that I actually want to
04:52 - go into and work and I also knew as soon
04:54 - as I crossed that barrier I'm going from
04:56 - Leisure mode to work mode now I'm
04:59 - actually in du buy I'm moving here I'm
05:00 - going to make a video about it later I'm
05:02 - currently in an Airbnb which is a tiny
05:04 - little studio and I don't have an
05:06 - isolated work environment already I've
05:08 - noticed that my productivity has gone
05:10 - down I don't want to work as much it's
05:12 - not as comfortable it's not what I'm
05:13 - used to and it's really just tanking and
05:15 - even changing my motivation so it's
05:17 - something that I definitely recommend
05:19 - considering try to set up as best as
05:21 - possible an isolated workspace I know
05:23 - for everyone it's not possible and if
05:25 - you can make investments in good
05:27 - equipment that you're going to have with
05:28 - you forever I promise it's worth it and
05:30 - I know for me it's really changed the
05:32 - way in which I work so the next thing to
05:33 - discuss here can kind of tie in with
05:35 - your environment and this is that it's
05:36 - all about deep work you are never going
05:39 - to get anything real done unless you're
05:41 - able to commit large blocks of time
05:43 - where you are completely focused and you
05:45 - are just dialed in you're in the Flow
05:48 - State and you are only writing code the
05:50 - times in my life where I felt the most
05:52 - productive and gotten the most amount of
05:54 - work done is when I've done five or 6
05:56 - hour long coding sessions now I know not
05:59 - not everyone here is capable of doing
06:01 - that it's definitely fine to take breaks
06:03 - but what happens for me at least is I'll
06:05 - start to build a mental model of the
06:07 - code and of the project I'm working on
06:09 - in my brain as soon as I have that built
06:11 - which usually takes a minimum an hour of
06:13 - actually doing coding work I can get
06:15 - stuff done so rapidly because I don't
06:17 - need to keep going back and referencing
06:19 - things and I already know exactly what I
06:21 - need to do in my brain however if I'm
06:24 - distracted if I have to pick up the
06:25 - phone even if someone just walks by my
06:27 - room and I hear too much noise that can
06:29 - completely throw me off and force me to
06:32 - pretty much restart that deep work
06:34 - process so it's really important that
06:36 - you are putting yourself in an
06:37 - environment where you're able to do deep
06:39 - work and whatever that means for you you
06:41 - want to focus as much as you possibly
06:44 - can where your entire frame of mind your
06:46 - entire thought process everything you're
06:48 - doing is focused on your computer
06:50 - focused on coding and focused on the
06:52 - project I know it sounds intense but I
06:54 - promise you if you want to be productive
06:56 - and you want to actually get a lot of
06:57 - work done that's what you need to to do
06:59 - there's no way you're going to become a
07:01 - great developer by just doing 30 minutes
07:03 - a day or 45 minutes a day you have to
07:05 - put in those large periods of time where
07:07 - you are deeply focused now my next
07:09 - insight for you is to not reinvent the
07:11 - wheel before you just go out there and
07:13 - start building something I highly
07:15 - recommend do a little bit of research
07:17 - and get some context on the problem that
07:19 - you're attempting to solve chances are
07:21 - someone else has probably solved this
07:23 - problem before and even if you don't
07:25 - reuse their solution it's great to
07:27 - understand what they did why why they
07:29 - did that and then come up with the pros
07:31 - and cons and if you can potentially take
07:33 - any of that insight into your own
07:35 - project this is something I didn't
07:36 - really do very much when I was kind of
07:38 - in the 2,000 3000 hour range of
07:40 - development this is when you start to
07:42 - get pretty good you build a bit of an
07:43 - ego and you start to realize hey I can
07:45 - just build anything I want so I would go
07:47 - out there and just build all of these
07:49 - things that would cost me a ton of time
07:51 - that I wouldn't really learn that much
07:52 - from that have already been done before
07:55 - if I had just spent even 10 minutes
07:57 - doing a bit of research figuring out if
07:59 - this had been done before and at least
08:01 - taking the same approach or considering
08:03 - those approaches it would have saved me
08:05 - a ton of time and I would have ended up
08:06 - with better quality code and a better
08:08 - quality project so please do a little
08:10 - bit of research and remember that most
08:13 - things you're trying to do have probably
08:14 - been attempted before and you can get a
08:16 - lot of information by trying to find
08:18 - those Solutions now the last one here is
08:20 - something most of you probably know but
08:21 - I think it's worth reminding you of and
08:23 - this is that you learn so much more from
08:25 - other people having a coach having a
08:27 - mentor even just having someone review
08:29 - your Cod or that you talk to once a
08:31 - month can share with you so much insight
08:33 - and information that you never could
08:35 - have obtained yourself or if you could
08:36 - have it would have taking you just
08:38 - exponentially longer now I think as a
08:40 - developer it's really easy to want to
08:41 - isolate yourself to maybe be more
08:43 - introverted just want to stay at home
08:45 - learn something yourself be on your
08:46 - computer and that's what I did most of
08:48 - my kind of early journey I didn't really
08:50 - have any mentors I wasn't a part of a
08:52 - community I wasn't really reaching out
08:54 - to others and because of that it took me
08:56 - a really long time to get good at a lot
08:58 - of skills that I could have mastered
08:59 - much quicker if I had someone just even
09:01 - guiding me in the right direction or
09:03 - sharing with me some bits of tips and
09:05 - advice that I now share on this channel
09:07 - I would have become a great developer
09:09 - much faster and it's one of probably the
09:11 - biggest regrets that I have that I
09:12 - didn't really try to find that resource
09:15 - so I highly recommend try to find other
09:17 - people that you can work with really
09:19 - lean into them try to get as much advice
09:21 - and information from them as you can and
09:23 - if you're able to work with a more
09:25 - experienced developer you'll be amazed
09:27 - just even watching how they work what
09:29 - you're able to pick up and learn this
09:31 - was the big Revelation for me I worked
09:33 - at Microsoft I had an amazing Mentor we
09:35 - didn't even do that much work together
09:37 - but maybe two or three times a week we'd
09:39 - kind of hop on a call and we'd write
09:41 - code collaboratively and in those few
09:43 - periods I learned more than I could have
09:45 - learned in months and it's still
09:46 - something that I carry with me today so
09:48 - with that said I'm going to wrap up this
09:50 - video here I hope you guys enjoyed if
09:52 - you did make sure to leave a like
09:53 - subscribe to the channel and I will see
09:55 - you in the next
09:56 - [Music]
09:58 - one
10:03 - oh

Cleaned transcript:

they say it takes 10,000 hours to feel like an expert in any field and although I don't know if I'll ever truly feel like an expert I have reached that goal and I've learned a few things along the way that I want to share with you now the first is that coding or being a developer in general is really all about thinking now yes it's important to understand the language different Frameworks tools Etc once you get past that point what really makes you a great developer is your ability to problem solve and to think critically what you'll end up doing as you get better and better and you learn mult multiple different languages is you'll realize that all of these things you've learned are simply tools that help you achieve a goal and solve a problem you should always pick the best tool for the job and to be able to do that you first need to understand how to break down the problem and how to solve it into a series of steps that you can then translate into code now the best example of this is these famous data structures and algorithms problems these can be solved in pretty much any language or any text stack and the difficult part is not actually writing the code it's figuring out what you need to code what you need to write down now I'm sure many of you have experienced this before you'll open up a code editor and you'll say okay today I'm going to build this project the thing that's holding you back is not your ability to write the code it's to think about what code you need to write and to break down the problem into enough small sub problems that you're actually able to solve it so I would say if you're a new developer really focus on your critical thinking and problem solving skills there's a lot of ways to practice that but a lot of times it really comes down to just sitting in silence having a piece of paper in front of you and just thinking about how you solve a problem now I know a lot of you watching this may just be getting started and you don't even have 10 hours of practice under your belt now if that's the case I'll let you know that python is a great language to get started with and you can learn more about it from this completely free introduction to python resource from our video sponsor HubSpot this resource is designed for marketers developers and data analyst it goes over what python is the main functions and methods coding best practic and the standards you need to know when writing in Python it also covers some Advanced python features and I've left a link to it in the description so you can check it out completely for free now as many of you know python is a super popular language and is great to learn even if you're not trying to become a professional developer definitely check out this guide and you'll be amazed at what you can do with even some basic python knowledge now this resource and tons of other are provided completely for free from our video sponsor HubSpot massive thank you to them and make sure to check this resource out from the link in the description now the next insight to share with you is something that I unfortunately learned as I got further and further into my journey and that is bad habits compound it's very easy when you just start out programming to just want to get something done right to just actually solve the problem get something in your IDE and run the code now that's totally fine but what will end up happening is you'll build some really bad habits and be doing things with bad practice that you might not even realize are wrong and then you'll get to a phase in your career where you've been doing doing this so long and so often that it's really difficult to reverse it so a few examples of this are just using good variable names when I first started out I never got that tip no one ever told me just use really detailed variable names this is the way you should name them Etc so I constantly use variable names like x y z W1 W2 all these really abstract and ambiguous names and when I eventually started actually working for tech companies and doing professional jobs that was a huge comment that I constantly got and from that that point forward I had to really consciously think about changing that habit whereas if I just had started right from the beginning using good variable names it wouldn't have been an issue it wouldn't have been something people commented on and I would have just not had to consider it because I always wrote code that way another thing is simply typing if you're just getting started out right now I highly recommend learn how to type properly before you start doing it every single day for eight hours it's not something that I did and I still to this day am really limited with my typing ability because I just had a really really horrible form and I've never really been able to correct that up until this point the next thing to touch on now is environment having coded for over 10,000 hours I've worked in pretty much any environment you can imagine and I can tell you this is the number one factor at least for my productivity when I'm able to have an isolated environment in this case maybe an office right a separate room where all I do in that location is code I get so much more done probably two or three times the amount of work as opposed to when I have a place where I'm doing a bunch of different things in that area so to give you a concrete example previously you guys saw I had a really nice setup had a great office had sound panels all of that kind of stuff when I stepped foot into that room it was incredible how much work I could get done I had the best chair the best keyboard the best computer I invested as much as possible in my my equipment and my environment to make sure I'd be comfortable and it would be a place that I actually want to go into and work and I also knew as soon as I crossed that barrier I'm going from Leisure mode to work mode now I'm actually in du buy I'm moving here I'm going to make a video about it later I'm currently in an Airbnb which is a tiny little studio and I don't have an isolated work environment already I've noticed that my productivity has gone down I don't want to work as much it's not as comfortable it's not what I'm used to and it's really just tanking and even changing my motivation so it's something that I definitely recommend considering try to set up as best as possible an isolated workspace I know for everyone it's not possible and if you can make investments in good equipment that you're going to have with you forever I promise it's worth it and I know for me it's really changed the way in which I work so the next thing to discuss here can kind of tie in with your environment and this is that it's all about deep work you are never going to get anything real done unless you're able to commit large blocks of time where you are completely focused and you are just dialed in you're in the Flow State and you are only writing code the times in my life where I felt the most productive and gotten the most amount of work done is when I've done five or 6 hour long coding sessions now I know not not everyone here is capable of doing that it's definitely fine to take breaks but what happens for me at least is I'll start to build a mental model of the code and of the project I'm working on in my brain as soon as I have that built which usually takes a minimum an hour of actually doing coding work I can get stuff done so rapidly because I don't need to keep going back and referencing things and I already know exactly what I need to do in my brain however if I'm distracted if I have to pick up the phone even if someone just walks by my room and I hear too much noise that can completely throw me off and force me to pretty much restart that deep work process so it's really important that you are putting yourself in an environment where you're able to do deep work and whatever that means for you you want to focus as much as you possibly can where your entire frame of mind your entire thought process everything you're doing is focused on your computer focused on coding and focused on the project I know it sounds intense but I promise you if you want to be productive and you want to actually get a lot of work done that's what you need to to do there's no way you're going to become a great developer by just doing 30 minutes a day or 45 minutes a day you have to put in those large periods of time where you are deeply focused now my next insight for you is to not reinvent the wheel before you just go out there and start building something I highly recommend do a little bit of research and get some context on the problem that you're attempting to solve chances are someone else has probably solved this problem before and even if you don't reuse their solution it's great to understand what they did why why they did that and then come up with the pros and cons and if you can potentially take any of that insight into your own project this is something I didn't really do very much when I was kind of in the 2,000 3000 hour range of development this is when you start to get pretty good you build a bit of an ego and you start to realize hey I can just build anything I want so I would go out there and just build all of these things that would cost me a ton of time that I wouldn't really learn that much from that have already been done before if I had just spent even 10 minutes doing a bit of research figuring out if this had been done before and at least taking the same approach or considering those approaches it would have saved me a ton of time and I would have ended up with better quality code and a better quality project so please do a little bit of research and remember that most things you're trying to do have probably been attempted before and you can get a lot of information by trying to find those Solutions now the last one here is something most of you probably know but I think it's worth reminding you of and this is that you learn so much more from other people having a coach having a mentor even just having someone review your Cod or that you talk to once a month can share with you so much insight and information that you never could have obtained yourself or if you could have it would have taking you just exponentially longer now I think as a developer it's really easy to want to isolate yourself to maybe be more introverted just want to stay at home learn something yourself be on your computer and that's what I did most of my kind of early journey I didn't really have any mentors I wasn't a part of a community I wasn't really reaching out to others and because of that it took me a really long time to get good at a lot of skills that I could have mastered much quicker if I had someone just even guiding me in the right direction or sharing with me some bits of tips and advice that I now share on this channel I would have become a great developer much faster and it's one of probably the biggest regrets that I have that I didn't really try to find that resource so I highly recommend try to find other people that you can work with really lean into them try to get as much advice and information from them as you can and if you're able to work with a more experienced developer you'll be amazed just even watching how they work what you're able to pick up and learn this was the big Revelation for me I worked at Microsoft I had an amazing Mentor we didn't even do that much work together but maybe two or three times a week we'd kind of hop on a call and we'd write code collaboratively and in those few periods I learned more than I could have learned in months and it's still something that I carry with me today so with that said I'm going to wrap up this video here I hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and I will see you in the next one oh
