With timestamps:

00:00 - hey guys and welcome back to really Java
00:02 - programming tutorial so in today's video
00:04 - we're going to be going over kind of
00:06 - class variables and the keywords static
00:09 - so you may have seen that we've used
00:11 - static and a few things in like our main
00:13 - thing you're actually going to delete
00:15 - all this
00:16 - it says static right here and no one's
00:19 - really explained I guess I haven't
00:20 - really explained what static means and
00:22 - that's what I'm going to be doing in
00:23 - this video so let's get started and talk
00:26 - about class variables so right now we
00:29 - have something called attributes game so
00:31 - we have these two attributes which are
00:33 - specific to each instance of our dog so
00:37 - when we created multiple dog objects
00:38 - each dog have their own name and their
00:41 - own age and other dogs were not affected
00:43 - when we change one of the dog's name or
00:45 - one of the dog's age unless that dog was
00:47 - that mob viously right and that's great
00:49 - because we can have a ton of different
00:51 - values that are specific to different
00:52 - objects or different instances of this
00:54 - dog class now sometimes we want to have
00:57 - variables that will change or are the
01:00 - same for each instance so we can change
01:03 - them in one instance and if we do change
01:05 - it on one instance they will change in
01:06 - the other now those are known as class
01:08 - variables not instance variables because
01:10 - instance variables are like kind of
01:12 - attributes okay the way that we can
01:13 - create these class variables is we can
01:15 - do something like this yes it's not say
01:16 - protect it again say protected and by
01:19 - the way I'm just in my dog class I
01:21 - deleted a bunch of stuff out of it just
01:23 - to make a bit easier to work in and I
01:24 - still have the cat class but it's just
01:25 - I'm not using it for this video okay so
01:27 - we'll say protected static int count
01:31 - equals 0
01:32 - now I know that that is a mouthful but
01:35 - what we're doing here essentially is
01:37 - we're creating a class variable which is
01:40 - an int named count equals 0 which is
01:43 - protected okay I know it's a lot of
01:44 - keywords but what is this static keyword
01:46 - do so what this is actually gonna do is
01:48 - it's gonna allow us to statically change
01:51 - count which means it's not gonna change
01:53 - for each instance it's only gonna change
01:56 - or sorry it'll change like all together
02:00 - right so what I was explaining before
02:02 - and that's what this static keyword is
02:03 - going to allow us to do so we don't
02:05 - actually care about what instance this
02:07 - variable is a part of we just care that
02:09 - it's a part of the dog class all right
02:11 - so if I want to change the
02:13 - value X well I do need still need to
02:15 - call this and I can say this dot count
02:17 - equals and then actually I'm gonna say
02:20 - plus equals one okay because what I want
02:22 - to do with this count here let's say
02:25 - static field dogs should be accessed in
02:26 - a static way okay let's just do this one
02:29 - second okay what I'm doing here sorry
02:33 - one second I'll explain this is I'm just
02:34 - gonna add 1 to this count because I want
02:36 - to keep track of how many dogs we have
02:38 - so that if I wanted to I don't know like
02:40 - see how many dogs have been created I
02:42 - could just simply call like dog count
02:44 - and then figure that out alright so what
02:47 - I'm doing here instead of calling this
02:49 - dot count which does actually work is
02:51 - I'm calling dog calm because since this
02:53 - is a static variable or static yeah
02:56 - static variable class variable whatever
02:57 - you want to call it it doesn't actually
02:59 - care about what instance I'm changing it
03:01 - on because it's gonna change for all the
03:03 - instances so I can actually use the name
03:05 - of the class to change it and that's why
03:07 - I gave me that little yellow line and
03:09 - not sure if you guys read that it said
03:11 - we should do this in a static way
03:12 - because well it's a static variable so I
03:15 - could however call like this dot count
03:18 - all right and that would work fine
03:19 - because this was an instance of the dog
03:23 - class so it knows where to look for the
03:24 - variable count but it's much better to
03:26 - do dog count like plus equals one okay
03:30 - now I'm going to prove this to you that
03:32 - this does indeed actually work I'm not
03:34 - just making things up so let's create
03:35 - some dog objects here I'd say a 10 or
03:38 - dog 10 equals new Wow typing is not
03:44 - great today new dog and we'll just say
03:47 - tune and so nine for age and we'll just
03:51 - copy this and what should we do
03:53 - let's do Bill maybe say Bill and that is
03:57 - new dog named bill age 10 okay now since
04:03 - this static variable here is protected I
04:05 - can actually access it from main so what
04:08 - I'm gonna do to change counting are to
04:10 - print count out first of all is I'll
04:12 - prove to you that system system dot out
04:15 - dot println
04:17 - I keep thinking we're in Python here and
04:20 - I'll just simply print out dog dot count
04:23 - like this okay and just see what we get
04:25 - as a value first
04:26 - okay so we get two so we already know
04:28 - that this is indeed working because well
04:30 - when we added one to count if it was
04:33 - this different for each one then it
04:35 - would just be one but anyways and if I
04:37 - want to change dog count what I can do
04:39 - is you can say dog dot count let's say
04:42 - equal is like seven okay and that's fine
04:44 - that works I print out dog Hut count we
04:47 - get seven now I'll show you - if I do
04:49 - like Tim dog count this will give us the
04:52 - same answer so you can see we get seven
04:54 - even though in Tim we didn't do anything
04:56 - with Tim to change account since it's a
04:58 - dog part of the dog class it has this
05:00 - count variable and it's changing
05:02 - obviously within Tim as well okay so
05:04 - that's kind of how the class variables
05:06 - work now what time to talk about static
05:08 - methods okay this was a static variable
05:11 - or class variable I like it's called
05:12 - class variable just cuz that's what I'm
05:13 - used to but you can call it whatever you
05:14 - want now we're gonna talk about static
05:17 - methods and what that is so it's very
05:18 - similar to this kind of the way that
05:21 - this works but is a little different so
05:23 - I'm gonna do here I'm gonna take public
05:25 - static void display okay and in here all
05:30 - I'm going to do is somebody system dot
05:36 - out dot println and I'll just print I am
05:41 - a dog okay so what this is doing now is
05:45 - I'm saying static void display now in
05:48 - here what's gonna happen essentially is
05:51 - we don't need an instance to call this
05:53 - so I can actually just call this on the
05:55 - the dog class so I can say like dog dot
05:59 - display like this and since it's a
06:03 - static method this works fine and this
06:05 - one Dean say I am a dog now as opposed
06:07 - to if this was a regular method so let's
06:09 - just make a regular method to kind of do
06:11 - a comparison here so let's say public
06:12 - void and we'll say display - okay
06:17 - and we'll literally - take this and put
06:20 - it word for word in here just to show
06:22 - you the difference so now watch what
06:23 - happens if I try to do dog don't display
06:26 - - you can see that we're getting a red
06:28 - line and saying that we need to make
06:30 - this static because we need an instance
06:33 - to call display - meaning that we need
06:36 - to have first created dog object and
06:38 - then we can use that
06:39 - object to call displayed to or we can do
06:42 - like this dot display to and that works
06:45 - fine because that's calling it on the
06:46 - instance right because this represents
06:48 - the instance that we're using so the
06:50 - static is gonna allow us to call it just
06:52 - simply using dog but the thing with
06:55 - static is it has no way to access our
06:59 - what he called our values or our
07:01 - attributes right so if I wanted to
07:03 - access like a dog's name or a dog's age
07:05 - well I can't do that from a static
07:07 - method like I can't type like this dog
07:10 - age that just simply doesn't work
07:12 - because if you think about it well what
07:14 - what what instance are we calling it on
07:16 - there's no instance we're just simply
07:18 - calling it on the dog class so we have
07:20 - no idea what age to look for or what
07:22 - name to look for so the only time we use
07:24 - static methods is when we don't care
07:26 - about the instance and we just want to
07:27 - do something and we want to store it
07:29 - within that class you can almost think
07:30 - of it as a function if you if you know
07:32 - other programming languages but that is
07:35 - ideally house static works so whenever
07:37 - you want to build a call something and
07:38 - you don't care about the like the
07:40 - instance you don't care what the
07:41 - attributes you can make it static and
07:43 - that way you can call it without having
07:44 - an instance so yeah so hopefully that
07:49 - makes sense to you guys I'll quickly go
07:51 - over what this void does one more time
07:52 - in case anyone forgets remember in our
07:54 - functions we can return values when you
07:56 - put void all this does is say we're not
07:58 - returning anything we're just gonna do
08:00 - something right so we could be like
08:01 - manipulating an array or in this case
08:03 - printing something up to the screen okay
08:05 - or maybe getting like input from the
08:07 - user but we're just not returning any
08:09 - value back to the call statement so
08:12 - anyways as always if you guys have any
08:13 - questions please make sure to leave a
08:14 - comment down below or join my discord
08:16 - server and if you enjoyed the video
08:18 - please make sure you leave a like and
08:19 - subscribe and I will see you again in
08:20 - another one
08:21 - [Music]

Cleaned transcript:

hey guys and welcome back to really Java programming tutorial so in today's video we're going to be going over kind of class variables and the keywords static so you may have seen that we've used static and a few things in like our main thing you're actually going to delete all this it says static right here and no one's really explained I guess I haven't really explained what static means and that's what I'm going to be doing in this video so let's get started and talk about class variables so right now we have something called attributes game so we have these two attributes which are specific to each instance of our dog so when we created multiple dog objects each dog have their own name and their own age and other dogs were not affected when we change one of the dog's name or one of the dog's age unless that dog was that mob viously right and that's great because we can have a ton of different values that are specific to different objects or different instances of this dog class now sometimes we want to have variables that will change or are the same for each instance so we can change them in one instance and if we do change it on one instance they will change in the other now those are known as class variables not instance variables because instance variables are like kind of attributes okay the way that we can create these class variables is we can do something like this yes it's not say protect it again say protected and by the way I'm just in my dog class I deleted a bunch of stuff out of it just to make a bit easier to work in and I still have the cat class but it's just I'm not using it for this video okay so we'll say protected static int count equals 0 now I know that that is a mouthful but what we're doing here essentially is we're creating a class variable which is an int named count equals 0 which is protected okay I know it's a lot of keywords but what is this static keyword do so what this is actually gonna do is it's gonna allow us to statically change count which means it's not gonna change for each instance it's only gonna change or sorry it'll change like all together right so what I was explaining before and that's what this static keyword is going to allow us to do so we don't actually care about what instance this variable is a part of we just care that it's a part of the dog class all right so if I want to change the value X well I do need still need to call this and I can say this dot count equals and then actually I'm gonna say plus equals one okay because what I want to do with this count here let's say static field dogs should be accessed in a static way okay let's just do this one second okay what I'm doing here sorry one second I'll explain this is I'm just gonna add 1 to this count because I want to keep track of how many dogs we have so that if I wanted to I don't know like see how many dogs have been created I could just simply call like dog count and then figure that out alright so what I'm doing here instead of calling this dot count which does actually work is I'm calling dog calm because since this is a static variable or static yeah static variable class variable whatever you want to call it it doesn't actually care about what instance I'm changing it on because it's gonna change for all the instances so I can actually use the name of the class to change it and that's why I gave me that little yellow line and not sure if you guys read that it said we should do this in a static way because well it's a static variable so I could however call like this dot count all right and that would work fine because this was an instance of the dog class so it knows where to look for the variable count but it's much better to do dog count like plus equals one okay now I'm going to prove this to you that this does indeed actually work I'm not just making things up so let's create some dog objects here I'd say a 10 or dog 10 equals new Wow typing is not great today new dog and we'll just say tune and so nine for age and we'll just copy this and what should we do let's do Bill maybe say Bill and that is new dog named bill age 10 okay now since this static variable here is protected I can actually access it from main so what I'm gonna do to change counting are to print count out first of all is I'll prove to you that system system dot out dot println I keep thinking we're in Python here and I'll just simply print out dog dot count like this okay and just see what we get as a value first okay so we get two so we already know that this is indeed working because well when we added one to count if it was this different for each one then it would just be one but anyways and if I want to change dog count what I can do is you can say dog dot count let's say equal is like seven okay and that's fine that works I print out dog Hut count we get seven now I'll show you if I do like Tim dog count this will give us the same answer so you can see we get seven even though in Tim we didn't do anything with Tim to change account since it's a dog part of the dog class it has this count variable and it's changing obviously within Tim as well okay so that's kind of how the class variables work now what time to talk about static methods okay this was a static variable or class variable I like it's called class variable just cuz that's what I'm used to but you can call it whatever you want now we're gonna talk about static methods and what that is so it's very similar to this kind of the way that this works but is a little different so I'm gonna do here I'm gonna take public static void display okay and in here all I'm going to do is somebody system dot out dot println and I'll just print I am a dog okay so what this is doing now is I'm saying static void display now in here what's gonna happen essentially is we don't need an instance to call this so I can actually just call this on the the dog class so I can say like dog dot display like this and since it's a static method this works fine and this one Dean say I am a dog now as opposed to if this was a regular method so let's just make a regular method to kind of do a comparison here so let's say public void and we'll say display okay and we'll literally take this and put it word for word in here just to show you the difference so now watch what happens if I try to do dog don't display you can see that we're getting a red line and saying that we need to make this static because we need an instance to call display meaning that we need to have first created dog object and then we can use that object to call displayed to or we can do like this dot display to and that works fine because that's calling it on the instance right because this represents the instance that we're using so the static is gonna allow us to call it just simply using dog but the thing with static is it has no way to access our what he called our values or our attributes right so if I wanted to access like a dog's name or a dog's age well I can't do that from a static method like I can't type like this dog age that just simply doesn't work because if you think about it well what what what instance are we calling it on there's no instance we're just simply calling it on the dog class so we have no idea what age to look for or what name to look for so the only time we use static methods is when we don't care about the instance and we just want to do something and we want to store it within that class you can almost think of it as a function if you if you know other programming languages but that is ideally house static works so whenever you want to build a call something and you don't care about the like the instance you don't care what the attributes you can make it static and that way you can call it without having an instance so yeah so hopefully that makes sense to you guys I'll quickly go over what this void does one more time in case anyone forgets remember in our functions we can return values when you put void all this does is say we're not returning anything we're just gonna do something right so we could be like manipulating an array or in this case printing something up to the screen okay or maybe getting like input from the user but we're just not returning any value back to the call statement so anyways as always if you guys have any questions please make sure to leave a comment down below or join my discord server and if you enjoyed the video please make sure you leave a like and subscribe and I will see you again in another one
