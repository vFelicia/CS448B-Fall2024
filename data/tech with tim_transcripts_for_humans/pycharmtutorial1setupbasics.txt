With timestamps:

00:00 - very useful and will save you a ton of
00:02 - time every minute that you watch of this
00:04 - video tutorial which probably is not
00:06 - gonna be longer than 10 minutes will
00:08 - save you hours and hours when coding so
00:11 - make sure you watch throughout the whole
00:12 - video and actually understand a lot of
00:15 - the things that I'm showing here because
00:16 - I guarantee you you will thank yourself
00:18 - later for watching this video okay so
00:20 - let's get started with it I'm gonna
00:21 - assume that you guys have no idea how to
00:24 - use pi term we're going to start
00:25 - directly from the basics if you're
00:27 - someone who already knows how to use PI
00:29 - charm you know to add configuration set
00:31 - up a project go ahead and skip to the
00:32 - next video in this series but if you're
00:35 - not then follow along so if you've
00:36 - already opened up pi time you're gonna
00:37 - have something that looks like this
00:39 - you've probably created a project or you
00:41 - might have opened an existing projects
00:44 - what I'm gonna do right now is I'm just
00:45 - gonna close this project by going to
00:47 - file close project and now we're gonna
00:49 - be at a window that looks like this and
00:51 - this what might be something that it
00:52 - looks like for you if you haven't done
00:54 - anything yet with PI charm on the left
00:56 - hand side here you can have your most
00:58 - recent project so you can open really
00:59 - quickly just by clicking on them and
01:01 - then you can create new projects or open
01:03 - new projects in this case I'm gonna open
01:04 - a new project and a new project is
01:06 - pretty much any folder that contains any
01:08 - files in it so like a text file or a
01:11 - Python file so I'm just gonna go to
01:12 - desktop go to Python YouTube and then I
01:16 - already have a project I've set it up
01:18 - here it's called pycharm debug so you
01:20 - can see I can open this I could open the
01:21 - individual file but I'm just gonna open
01:23 - this entire folder because this
01:24 - represents a project okay so I've done
01:27 - this and you can see that have my files
01:29 - on my left hand side here now
01:31 - these files you can open them multiple
01:34 - tabs you can see I have debug ivdel if I
01:37 - want to create a new file in here then I
01:40 - can right click and click new python
01:42 - file regular file which i could add like
01:44 - a text file or something like that okay
01:47 - so that's pretty much the basics of how
01:49 - you open this up now before I even start
01:51 - writing any code I want to show you how
01:53 - you would run code so let's say you open
01:55 - up one of your existing Python projects
01:57 - and you want to run your code you're
01:58 - gonna notice up here I'm gonna just
02:00 - gonna get rid of this right now so that
02:01 - we can do it fresh it's going to say add
02:04 - configuration and this is because you
02:06 - need to add a configuration and a Python
02:08 - interpreter before you can run all of
02:10 - your files so what's great about PI trim
02:13 - is you can add
02:13 - multiple configurations and you can run
02:15 - different files by simply selecting the
02:17 - configuration up here so let's go up
02:18 - here and click Add configuration we're
02:20 - gonna click this plus icon we're gonna
02:22 - click Python and then we're gonna give
02:24 - it a name so in this case I want to be
02:25 - running my gal file so I'm gonna name it
02:27 - Dell so that I know which configuration
02:29 - it is I need to now select the script
02:31 - path I'm gonna click this little folder
02:33 - and find my Dell file it should default
02:36 - you to your project folder so it should
02:39 - be fast to find click OK and then I need
02:41 - to go to python interpreter and select
02:43 - one now you may or may not already have
02:46 - a python interpreter if you don't don't
02:48 - worry I'm going to show that in just one
02:49 - second but in this case I'm multiple I'm
02:52 - gonna select Python three seven and this
02:54 - is useful as well as you can run
02:55 - different interpreters on the same
02:57 - project so now I have that and if I
02:59 - wanted to run the file I could just
03:00 - click this little run icon now if you
03:02 - don't already have a Python interpreter
03:04 - it's very easy to set up all you have to
03:06 - do is click on file go to settings and
03:08 - then go to build execution development
03:12 - you're gonna go to actually I believe
03:14 - it's here sorry project pot charm debug
03:16 - you're gonna go to project interpreter
03:18 - and then you're gonna select one up here
03:20 - so if you already have Python installed
03:23 - one of them should show up like python
03:25 - 37 and I'm gonna do that here if for
03:27 - some reason that's not showing up for
03:29 - you you're gonna click on settings click
03:31 - add and then you're just going to go to
03:33 - what do you call it system interpreter
03:35 - and the find the basic Python
03:37 - interpreter and click OK I'm not going
03:39 - to do that because I already have one
03:40 - set up but that's how you add a Python
03:43 - interpreter to your project ok so I'm
03:45 - going to apply that click OK and we're
03:47 - ready to go so now I'm going to get into
03:50 - just coding a little bit and showing you
03:52 - some of the things that Python our
03:53 - pycharm can help you out with and save
03:55 - you a lot of time the first thing is
03:56 - autofill so you can see I start typing
03:58 - here and already it's showing up what it
04:02 - thinks I want to type so if I want to do
04:03 - this I can simply click enter or I can
04:05 - click tap so now I'm gonna say import
04:08 - and then I want pygame so I'm going to
04:10 - use the down arrow key and hit tab and
04:12 - you can see that that automatically
04:13 - fills up here now notice already it's
04:15 - giving me some little squiggly lines and
04:17 - it's graying out my text it's just
04:19 - letting me know that I'm not using this
04:20 - import statement so if I start using as
04:23 - I say pygame duck Anette you can see
04:26 - that that this goes away
04:27 - because it is a used import statement
04:29 - this already shows you some of the power
04:31 - of PyCharm it's extremely I want to say
04:34 - intelligent and it'll keep giving me
04:36 - recommendations and it knows when you're
04:38 - changing things and doing things wrong
04:39 - so you can see I'm getting another error
04:42 - here a little like recommendation at
04:43 - saying no new line and file so if I
04:45 - click enter then you can see it gets rid
04:47 - of that it just because it wants a new
04:48 - line at the end of each file ok so
04:51 - another really cool thing in PyCharm in
04:53 - terms of coding and this is basically
04:54 - already shown in one of my other videos
04:55 - but I'm just gonna create a variable
04:57 - called X and I'm just gonna print X like
05:00 - a bunch of times to the screen here ok
05:01 - ok so this will work fine it's going to
05:06 - print seven we call it three times but
05:09 - what if I want to change this variable
05:10 - name to something like P okay so if I
05:14 - want to change this to P now if I want
05:16 - to change all of these variables here
05:18 - that used to be called X sorry because
05:20 - this used to be called X and I want to
05:22 - still be printing the same value seven
05:23 - I'd have to change all of these manually
05:25 - and go P P P like that okay now it's not
05:30 - that bad for only three instances of the
05:32 - variable but what if you had this P
05:34 - showing up or the X originally a hundred
05:36 - times in your program well that would
05:38 - take you a long time to change all those
05:40 - very blames it's a really cool thing
05:41 - that pycharm has is it's called
05:43 - refactoring so if you highlight your
05:44 - variable you right-click on it you click
05:46 - refactor and then rename you can change
05:49 - it to whatever you want so in this case
05:50 - I'm just gonna change it to test I'm
05:52 - going to click refactor and you can see
05:55 - that it changes all of the instances of
05:57 - that variable to the current name and
06:01 - this works within a scope do so if I do
06:02 - something like define main and then I
06:05 - just do test equal to zero and then same
06:09 - thing here I'll print test and I decide
06:12 - that I want to now change this and I
06:14 - click this and I click what do you call
06:16 - it refactor rename and then booty-call
06:21 - it lets go like hello you can see that
06:23 - it now changes it over here so this did
06:25 - it a bit differently just because test
06:26 - already exists but you can see that it's
06:28 - only changing within the scope it didn't
06:30 - change any of the tests up here like
06:33 - that okay so now let's show some other
06:36 - cool things so pycharm has a ton of
06:38 - different commands if you go just to
06:40 - view navigate code
06:41 - just scroll through them you can see uh
06:42 - I tell them things that can do move
06:44 - statement up if statement down move line
06:46 - down move line up there's tons of
06:48 - different things but I'm going to show
06:49 - you a few keyboard shortcuts that should
06:51 - save you a lot of time so the first one
06:53 - is just simply find now this one you can
06:55 - probably guess it's ctrl F and if you do
06:57 - this it brings up a little window here
06:58 - and you can search for things in your
07:00 - programs say I want to find test you can
07:02 - see that it shows me test here and then
07:04 - you can go to the next occurrence of
07:06 - test and keep moving through it's not
07:08 - going to search within the scope or
07:10 - actually it will but it's just because
07:11 - it's not name testing more so if I
07:13 - search for hello you can see it shows me
07:15 - this here and same thing we can move
07:17 - down move up edit them change them and
07:19 - so on so another cool keyboard shortcut
07:22 - is to see recent changes that you've
07:25 - done in your file now you might not find
07:26 - this useful for small files but if
07:28 - you're working on large files or with
07:29 - multiple people to see the changes is
07:32 - really useful so if you click alt shift
07:34 - and then F or not F sorry see it
07:38 - actually pop-up all the different
07:40 - changes that you made you can see I mean
07:42 - external change 20-item insko create a
07:44 - Python script debug deleting creating
07:46 - Python script L and it'll show you all
07:48 - the things you've done in terms of like
07:51 - files and changes to the actual project
07:53 - which can be useful yeah okay so now
07:56 - another keyboard shortcut and this one
07:58 - is useful as well especially if you're
08:00 - gonna be doing the same thing multiple
08:02 - times so maybe just changing your
08:03 - variable name and it's controlled D you
08:05 - can see when I press this it duplicates
08:07 - the line that my cursor is on so if I go
08:09 - on hello and I click control D you can
08:11 - see now I've duplicated hello and that's
08:14 - really useful as well and by the way all
08:16 - these things you can do without the
08:17 - keyboard shortcuts these just save you a
08:20 - bunch of time so you can see that if I
08:21 - highlight this I go code and now I
08:23 - believe there's something says duplicate
08:24 - line mmm it was somewhere but anyways
08:28 - there's ways to do it from just looking
08:29 - at the things up here so to navigate
08:33 - yeah anyways forget about that but
08:35 - there's ways that you can do that
08:36 - without using the keyboard shortcut in
08:37 - case you guys forget okay so another
08:40 - useful thing that PI trim has is this
08:42 - little to-do list and this is useful if
08:44 - you're working on a large project are
08:45 - you working on something and you're not
08:46 - sure when you're going to come back to
08:48 - it and like you're you'd be at the end
08:50 - of the session and you want to remember
08:51 - what to do next
08:52 - so if I make a comment
08:54 - just by simply using the pound key here
08:56 - and then I write to do and then I can
08:59 - fill this with every word up whatever I
09:01 - want so I'm gonna say to do finish oops
09:05 - finish in this function like this guy
09:07 - I'm gonna add another to do up here I'm
09:09 - gonna say import other modules I need to
09:13 - start this with to do and you can see
09:15 - whenever I put to do in lowercase or
09:18 - capitals as well it's gonna turn this
09:20 - comment into like a little green comment
09:22 - here and you can see that if I'm in the
09:23 - to do tab down here it shows too to do
09:27 - items so it'll show me exactly where in
09:30 - my file and what line where the comment
09:33 - exists and then if I click on it it'll
09:35 - bring me to it so it's not working so
09:37 - you can see that it would scroll down
09:39 - when I went to main to show me this
09:40 - comment and it's a good way to remember
09:42 - what you have to do and it's useful
09:44 - because you can put these right on where
09:46 - you need to change something or do
09:48 - something new again you might not find
09:50 - this useful if you're only using small
09:52 - what you call it small files and small
09:55 - projects but on large projects this is
09:57 - something you really need to keep track
09:59 - of and it's really useful when you can
10:00 - comment it directly in the code okay so
10:04 - another one that I want to show you guys
10:06 - and this one might not seem as important
10:09 - but it's kind of a weak cool selection
10:10 - tool that you can use and some of you
10:12 - might find it useful so I figured I'd
10:13 - show you so if you hold down the Alt key
10:15 - and you start selecting something and
10:17 - then you move up or down you can see it
10:20 - selects on only the column that you're
10:22 - working in so this is holding down alt
10:24 - key and I'm just pressing the left click
10:26 - on my mouse and just scrolling around
10:27 - you can see it just selects the current
10:30 - column that I'm working with again I
10:31 - don't know why you would find that
10:32 - useful but in case any of you have a
10:34 - certain use for it I'd figure it I show
10:36 - it to you okay so another thing that we
10:38 - can do as well is this thing called
10:41 - surround with so if I type something
10:43 - like and say run equals true and then
10:47 - I'm just gonna type run I'm going to
10:49 - select this and then I'm going to hit
10:52 - the keys ctrl alt and T so ctrl alt T
10:56 - and you can see that it pops up this
10:57 - thing called surround with and I can do
10:59 - if well try except try finally if
11:01 - expression while expression if
11:03 - expression is none you know it just
11:04 - automatically creates all of these
11:06 - different things and if I click for
11:07 - example
11:08 - three then it automatically will
11:10 - surround my variable with the expression
11:14 - that I selected and this is useful if
11:16 - you want to do things quickly and you
11:17 - remember the key lines and if you get
11:19 - used to it it'll save you a bunch of
11:20 - time in terms of having to type out all
11:22 - these expressions and worrying you're
11:24 - like indentation and stuff like that
11:26 - now there's obviously like a million
11:28 - other commands and things that you can
11:29 - do within pycharm and i'm gonna cover
11:31 - them in future videos but i just wanted
11:33 - to show you guys a quick overview of
11:35 - some of the basic things you can do and
11:37 - show you the power of pycharm i
11:39 - recommend that you continue watching the
11:41 - rest of the series because in the next
11:43 - video i'm going to go over debugging and
11:44 - this video I guarantee you will save you
11:47 - a ton of time and a ton of headache when
11:49 - you're working with code and running
11:52 - code because pycharm has a really useful
11:53 - and super powerful debug thing and I'm
11:56 - gonna go through exactly how that works
11:58 - anyways that's been it for this first
12:00 - video I'm gonna be coming out with a lot
12:01 - more showing you more things you can do
12:03 - with pycharm this was just a general
12:04 - overview if you liked the video please
12:06 - leave a like and subscribe and I will
12:08 - see you again in the next one
12:14 - [Music]

Cleaned transcript:

very useful and will save you a ton of time every minute that you watch of this video tutorial which probably is not gonna be longer than 10 minutes will save you hours and hours when coding so make sure you watch throughout the whole video and actually understand a lot of the things that I'm showing here because I guarantee you you will thank yourself later for watching this video okay so let's get started with it I'm gonna assume that you guys have no idea how to use pi term we're going to start directly from the basics if you're someone who already knows how to use PI charm you know to add configuration set up a project go ahead and skip to the next video in this series but if you're not then follow along so if you've already opened up pi time you're gonna have something that looks like this you've probably created a project or you might have opened an existing projects what I'm gonna do right now is I'm just gonna close this project by going to file close project and now we're gonna be at a window that looks like this and this what might be something that it looks like for you if you haven't done anything yet with PI charm on the left hand side here you can have your most recent project so you can open really quickly just by clicking on them and then you can create new projects or open new projects in this case I'm gonna open a new project and a new project is pretty much any folder that contains any files in it so like a text file or a Python file so I'm just gonna go to desktop go to Python YouTube and then I already have a project I've set it up here it's called pycharm debug so you can see I can open this I could open the individual file but I'm just gonna open this entire folder because this represents a project okay so I've done this and you can see that have my files on my left hand side here now these files you can open them multiple tabs you can see I have debug ivdel if I want to create a new file in here then I can right click and click new python file regular file which i could add like a text file or something like that okay so that's pretty much the basics of how you open this up now before I even start writing any code I want to show you how you would run code so let's say you open up one of your existing Python projects and you want to run your code you're gonna notice up here I'm gonna just gonna get rid of this right now so that we can do it fresh it's going to say add configuration and this is because you need to add a configuration and a Python interpreter before you can run all of your files so what's great about PI trim is you can add multiple configurations and you can run different files by simply selecting the configuration up here so let's go up here and click Add configuration we're gonna click this plus icon we're gonna click Python and then we're gonna give it a name so in this case I want to be running my gal file so I'm gonna name it Dell so that I know which configuration it is I need to now select the script path I'm gonna click this little folder and find my Dell file it should default you to your project folder so it should be fast to find click OK and then I need to go to python interpreter and select one now you may or may not already have a python interpreter if you don't don't worry I'm going to show that in just one second but in this case I'm multiple I'm gonna select Python three seven and this is useful as well as you can run different interpreters on the same project so now I have that and if I wanted to run the file I could just click this little run icon now if you don't already have a Python interpreter it's very easy to set up all you have to do is click on file go to settings and then go to build execution development you're gonna go to actually I believe it's here sorry project pot charm debug you're gonna go to project interpreter and then you're gonna select one up here so if you already have Python installed one of them should show up like python 37 and I'm gonna do that here if for some reason that's not showing up for you you're gonna click on settings click add and then you're just going to go to what do you call it system interpreter and the find the basic Python interpreter and click OK I'm not going to do that because I already have one set up but that's how you add a Python interpreter to your project ok so I'm going to apply that click OK and we're ready to go so now I'm going to get into just coding a little bit and showing you some of the things that Python our pycharm can help you out with and save you a lot of time the first thing is autofill so you can see I start typing here and already it's showing up what it thinks I want to type so if I want to do this I can simply click enter or I can click tap so now I'm gonna say import and then I want pygame so I'm going to use the down arrow key and hit tab and you can see that that automatically fills up here now notice already it's giving me some little squiggly lines and it's graying out my text it's just letting me know that I'm not using this import statement so if I start using as I say pygame duck Anette you can see that that this goes away because it is a used import statement this already shows you some of the power of PyCharm it's extremely I want to say intelligent and it'll keep giving me recommendations and it knows when you're changing things and doing things wrong so you can see I'm getting another error here a little like recommendation at saying no new line and file so if I click enter then you can see it gets rid of that it just because it wants a new line at the end of each file ok so another really cool thing in PyCharm in terms of coding and this is basically already shown in one of my other videos but I'm just gonna create a variable called X and I'm just gonna print X like a bunch of times to the screen here ok ok so this will work fine it's going to print seven we call it three times but what if I want to change this variable name to something like P okay so if I want to change this to P now if I want to change all of these variables here that used to be called X sorry because this used to be called X and I want to still be printing the same value seven I'd have to change all of these manually and go P P P like that okay now it's not that bad for only three instances of the variable but what if you had this P showing up or the X originally a hundred times in your program well that would take you a long time to change all those very blames it's a really cool thing that pycharm has is it's called refactoring so if you highlight your variable you rightclick on it you click refactor and then rename you can change it to whatever you want so in this case I'm just gonna change it to test I'm going to click refactor and you can see that it changes all of the instances of that variable to the current name and this works within a scope do so if I do something like define main and then I just do test equal to zero and then same thing here I'll print test and I decide that I want to now change this and I click this and I click what do you call it refactor rename and then bootycall it lets go like hello you can see that it now changes it over here so this did it a bit differently just because test already exists but you can see that it's only changing within the scope it didn't change any of the tests up here like that okay so now let's show some other cool things so pycharm has a ton of different commands if you go just to view navigate code just scroll through them you can see uh I tell them things that can do move statement up if statement down move line down move line up there's tons of different things but I'm going to show you a few keyboard shortcuts that should save you a lot of time so the first one is just simply find now this one you can probably guess it's ctrl F and if you do this it brings up a little window here and you can search for things in your programs say I want to find test you can see that it shows me test here and then you can go to the next occurrence of test and keep moving through it's not going to search within the scope or actually it will but it's just because it's not name testing more so if I search for hello you can see it shows me this here and same thing we can move down move up edit them change them and so on so another cool keyboard shortcut is to see recent changes that you've done in your file now you might not find this useful for small files but if you're working on large files or with multiple people to see the changes is really useful so if you click alt shift and then F or not F sorry see it actually popup all the different changes that you made you can see I mean external change 20item insko create a Python script debug deleting creating Python script L and it'll show you all the things you've done in terms of like files and changes to the actual project which can be useful yeah okay so now another keyboard shortcut and this one is useful as well especially if you're gonna be doing the same thing multiple times so maybe just changing your variable name and it's controlled D you can see when I press this it duplicates the line that my cursor is on so if I go on hello and I click control D you can see now I've duplicated hello and that's really useful as well and by the way all these things you can do without the keyboard shortcuts these just save you a bunch of time so you can see that if I highlight this I go code and now I believe there's something says duplicate line mmm it was somewhere but anyways there's ways to do it from just looking at the things up here so to navigate yeah anyways forget about that but there's ways that you can do that without using the keyboard shortcut in case you guys forget okay so another useful thing that PI trim has is this little todo list and this is useful if you're working on a large project are you working on something and you're not sure when you're going to come back to it and like you're you'd be at the end of the session and you want to remember what to do next so if I make a comment just by simply using the pound key here and then I write to do and then I can fill this with every word up whatever I want so I'm gonna say to do finish oops finish in this function like this guy I'm gonna add another to do up here I'm gonna say import other modules I need to start this with to do and you can see whenever I put to do in lowercase or capitals as well it's gonna turn this comment into like a little green comment here and you can see that if I'm in the to do tab down here it shows too to do items so it'll show me exactly where in my file and what line where the comment exists and then if I click on it it'll bring me to it so it's not working so you can see that it would scroll down when I went to main to show me this comment and it's a good way to remember what you have to do and it's useful because you can put these right on where you need to change something or do something new again you might not find this useful if you're only using small what you call it small files and small projects but on large projects this is something you really need to keep track of and it's really useful when you can comment it directly in the code okay so another one that I want to show you guys and this one might not seem as important but it's kind of a weak cool selection tool that you can use and some of you might find it useful so I figured I'd show you so if you hold down the Alt key and you start selecting something and then you move up or down you can see it selects on only the column that you're working in so this is holding down alt key and I'm just pressing the left click on my mouse and just scrolling around you can see it just selects the current column that I'm working with again I don't know why you would find that useful but in case any of you have a certain use for it I'd figure it I show it to you okay so another thing that we can do as well is this thing called surround with so if I type something like and say run equals true and then I'm just gonna type run I'm going to select this and then I'm going to hit the keys ctrl alt and T so ctrl alt T and you can see that it pops up this thing called surround with and I can do if well try except try finally if expression while expression if expression is none you know it just automatically creates all of these different things and if I click for example three then it automatically will surround my variable with the expression that I selected and this is useful if you want to do things quickly and you remember the key lines and if you get used to it it'll save you a bunch of time in terms of having to type out all these expressions and worrying you're like indentation and stuff like that now there's obviously like a million other commands and things that you can do within pycharm and i'm gonna cover them in future videos but i just wanted to show you guys a quick overview of some of the basic things you can do and show you the power of pycharm i recommend that you continue watching the rest of the series because in the next video i'm going to go over debugging and this video I guarantee you will save you a ton of time and a ton of headache when you're working with code and running code because pycharm has a really useful and super powerful debug thing and I'm gonna go through exactly how that works anyways that's been it for this first video I'm gonna be coming out with a lot more showing you more things you can do with pycharm this was just a general overview if you liked the video please leave a like and subscribe and I will see you again in the next one
