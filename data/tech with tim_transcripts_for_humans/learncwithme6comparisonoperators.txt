With timestamps:

00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - now in this video i'm going to be
00:06 - covering comparison operators
00:08 - i'm going to be showing you how we can
00:09 - compare different values not just
00:12 - numeric values
00:13 - strings characters and boolean values as
00:15 - well so with that said
00:16 - let's dive into the video
00:21 - [Music]
00:26 - so in the previous video i showed you a
00:28 - ton of different arithmetic
00:30 - operators the arithmetic operators had
00:32 - numeric operands and they returned a
00:34 - numeric value
00:36 - when i say numeric i'm talking about the
00:37 - int and float data type or
00:39 - data types so in this video i'm going to
00:42 - show you something called comparison
00:43 - operators
00:44 - now i'm actually going to start by just
00:45 - listing out all of the comparison
00:47 - operators
00:47 - we have less than greater than less than
00:50 - or equal to
00:51 - greater than or equal to is not equal to
00:54 - and
00:54 - is equal to the order i'm listing these
00:57 - means nothing
00:58 - there's no um like importance in this
01:00 - order so don't read into that
01:01 - but what comparison operators do is they
01:04 - compare
01:04 - the values of different variables right
01:07 - or just they compare values in general
01:09 - so whenever we write an expression and i
01:11 - will discuss what an expression is when
01:13 - i show it but it's just anything that
01:14 - involves these operators essentially
01:16 - they're going to return to us a true or
01:19 - false value
01:20 - more specifically they're going to
01:21 - return a boolean value
01:23 - so remember we saw this data type called
01:25 - boo now bool is always equal to either
01:28 - true or false it's one of these two
01:30 - values no matter what
01:32 - so when we use these operators right
01:34 - here the expression that contains them
01:36 - returns to us true or false or it
01:38 - evaluates to true
01:40 - or false the reason for that is it's
01:41 - telling us whether or not our comparison
01:43 - was true
01:44 - or whether it was false so to give you a
01:46 - really simple example
01:47 - let me make a variable called test it's
01:50 - going to be the bool data type which is
01:51 - short form for boolean and what i'm
01:54 - going to say
01:54 - is 1 is less than 2. now using some
01:58 - critical thinking skills here what do
01:59 - you think this is going to give us right
02:01 - is 1 less than 2
02:02 - well 1 is clearly less than 2 and so
02:05 - this should evaluate to true because
02:07 - this comparison
02:08 - was indeed correct it was true now if we
02:11 - flip around this sign
02:12 - and we ask if 1 is greater than 2 then
02:14 - obviously this is going to evaluate to
02:16 - false
02:17 - because 1 is not greater than 2. so that
02:19 - is what you use comparison operators for
02:21 - i will go through all of them but
02:22 - they're fairly intuitive and
02:23 - straightforward
02:24 - and they don't only need to be used on
02:26 - what you call numeric values we can use
02:28 - them on characters we can use them on
02:30 - strings
02:31 - we can use them on booleans we can use
02:32 - them on other data types as well
02:35 - now you want to be a little bit careful
02:36 - when you're using these operators on
02:38 - strings or characters
02:40 - because they don't necessarily work the
02:41 - way in which you think they will
02:43 - in fact whenever you're using these type
02:45 - of operators uh so like greater than
02:47 - less than less than or equal to greater
02:48 - than or equal to with
02:50 - strings or with characters they evaluate
02:52 - or compare the strings
02:54 - using something called the lexi
02:55 - graphical or lexigraphical ordering
02:58 - i'll put the word up on the screen
02:59 - because i'm probably mispronouncing it
03:01 - this is a specific way of comparing
03:03 - strings or comparing characters together
03:05 - i will show it to you in a second but i
03:06 - just want to be really clear that
03:08 - when you use this with characters or you
03:10 - use this with strings the result
03:12 - may not necessarily be intuitive you may
03:14 - not actually be able to guess what it's
03:15 - going to be
03:16 - unless you understand how the comparison
03:17 - is performed anyways enough of that
03:19 - let's just
03:20 - continue with this kind of more simple
03:21 - example i'm just going to see out test
03:23 - right here
03:24 - i just want to show you what i get so if
03:26 - i go ahead and compile my program here
03:29 - oops i didn't mean to run the program i
03:31 - want to compile
03:33 - and now run notice that we get 0.
03:36 - now the reason we're getting 0 here is
03:38 - because whenever we see out a boolean
03:40 - value it's going to give us the numeric
03:42 - representation of that boolean
03:44 - so if you remember back to one of the
03:46 - first videos true
03:48 - is always equal to one and false
03:51 - is always equal to zero so
03:55 - i don't oh it's because i don't have the
03:56 - semicolon yeah that's why it wasn't
03:57 - highlighting
03:58 - anyways you got the idea so true is
03:59 - equal to one false is equal to zero
04:01 - so if you see us printing out zero that
04:03 - means that this test variable was
04:05 - actually equal to false
04:06 - if you see us printing out one that
04:08 - means this test variable was equal to
04:09 - true
04:10 - and just to prove this to you uh even
04:11 - more if i try to just see the actual
04:13 - value of true right here
04:15 - you're going to see that even this is
04:16 - going to give us a 1. so let's do this
04:18 - and you see that we get a 1.
04:20 - so now let me just go through a few more
04:21 - of the comparison operators i'll then
04:23 - show you the comparisons on strings and
04:25 - characters
04:26 - and then we'll get into like a kind of a
04:28 - cool example where we get some user
04:29 - input and then we'll print out some
04:31 - comparisons between different user
04:33 - inputs
04:33 - anyways we have this uh this boolean
04:35 - test variable we obviously have just
04:37 - looked at the less than and greater than
04:39 - comparison now something to note here is
04:41 - if i say 1 is greater than 1
04:43 - this is false right because 1 is not
04:45 - greater than 1. if i wanted this to be
04:46 - true so i wanted greater than
04:48 - or equal to then what i would do is i
04:50 - would tack on the equal sign at the end
04:52 - here
04:53 - and now what this says is 1 greater than
04:55 - or
04:56 - equal to one so if these two values are
04:58 - the same this returns true
05:00 - or if the value on the left-hand side is
05:02 - greater than the value on the right-hand
05:03 - side
05:04 - this returns true now same holds in
05:06 - reverse here if i switch this to less
05:08 - than
05:08 - now i'm checking if one is less than or
05:11 - equal to one
05:12 - however if i just put a less than this
05:15 - is false because one is not
05:17 - strictly less than one so a lot of times
05:19 - people will read this and they'll say
05:20 - strictly less than to really emphasize
05:22 - the point that you are making sure they
05:24 - are not the same values it actually
05:26 - must be less than this other value so i
05:29 - think
05:29 - i mean i'm not going to compile the
05:30 - program and go through these i think you
05:31 - guys get the idea
05:33 - but that is the basics of these four
05:35 - operators right here
05:36 - so now let's look at the is not equal to
05:39 - and is
05:40 - equal to now make sure you do not
05:42 - confuse these operators with the
05:44 - single equal sign so this single equal
05:46 - sign right here and we've seen this if i
05:48 - do something well
05:49 - we're seeing it right here is what's
05:50 - known as the assignment operator
05:53 - so we are assigning some value to some
05:56 - variable
05:57 - or to some container whatever it's going
06:00 - to be but we're assigning something to
06:02 - something else whereas when we have two
06:03 - equal signs
06:05 - we are checking for equivalence or com
06:07 - or we're comparing two values together
06:09 - so i like to read this as is equal to
06:12 - not
06:12 - just equal to because when i say that
06:14 - sometimes people get confused and they
06:16 - think i'm talking about one equal sign
06:18 - anyways let's use the single equal sign
06:20 - or the double equal sign sorry so if i
06:22 - say
06:22 - 1 equals equals 1 what this is checking
06:24 - is if the left-hand side
06:26 - is equivalent or is equal to the
06:28 - right-hand side
06:30 - so now let me just see out test let's
06:32 - see what we get if we compare one and
06:33 - one
06:34 - so if i do this and i run the program we
06:36 - get true obviously because one is equal
06:38 - to one
06:39 - now the exclamation point equals sign is
06:42 - uh
06:42 - not equal to you can read this as is not
06:45 - equal to
06:46 - so pretty much you can just check for
06:48 - comparison and then whatever that is you
06:49 - can flip it so if the two things
06:51 - are the same when you have the not equal
06:54 - sign this means you are going to get
06:56 - false because if the two things are the
06:57 - same and you're checking if they're not
06:58 - the same then obviously this is false
07:00 - whereas if these two things are
07:02 - different this expression is going to
07:03 - give you
07:04 - true because you're checking if they are
07:06 - not equal to each other and obviously 1
07:08 - is not equal to 2. so i think that's
07:10 - probably straightforward enough i'm not
07:11 - going to go into a huge detailed
07:13 - explanation but if i have 1 does not
07:15 - equal 2
07:16 - and now i run this and i compile we get
07:18 - true because they are not the same
07:20 - however
07:20 - if i make them the same then you're
07:22 - going to see here
07:23 - when i run this that we get false
07:25 - because well they are
07:27 - the same and we're checking if they were
07:28 - not the same so that is kind of the
07:30 - basics of how you use comparison
07:32 - operators now what i'm going to do is
07:35 - show you how we use these
07:36 - with characters and with strings so i'm
07:38 - going to start with characters because
07:39 - they're a little bit simpler
07:41 - and then i will show you strings so
07:42 - first thing to note here and
07:44 - remember that a character is one single
07:46 - character surrounded by single quotation
07:48 - marks
07:49 - if you want to have more than one
07:50 - character you need to use a string which
07:52 - is double quotation marks
07:53 - but let's compare the character a uh to
07:56 - the character uppercase a so just take a
07:59 - guess here
07:59 - and i'll actually make these uh the two
08:01 - equal signs so we'll check if these are
08:03 - equal to each other
08:04 - do you think that this a is equal to
08:06 - this a
08:07 - just take a guess i'm going to compile
08:09 - the program here and let's see what we
08:11 - get oops
08:12 - compile and run notice we get 0.
08:15 - so the reason i want to show you this
08:16 - example is because uppercase letters are
08:18 - different than lowercase letters now it
08:20 - seems obvious but a lot of times people
08:22 - mix this
08:22 - up a lowercase a is not the same as an
08:25 - uppercase a so when we're checking for a
08:27 - comparison between characters or strings
08:30 - we need to make sure we're accounting
08:31 - for the fact that one of them may be a
08:32 - capital the one
08:33 - another one may be lowercase right so
08:35 - just keep that in mind
08:37 - but if i have a lowercase a is equal to
08:40 - lowercase a obviously this will give us
08:43 - true because they are the same
08:44 - character so that is how you compare
08:46 - characters at least when you're checking
08:48 - for equivalence
08:49 - so we will continue in one second but i
08:51 - need to quickly thank the sponsor of
08:52 - this video and this series which
08:54 - is algo expert algo expert is the best
08:56 - platform to use when preparing for your
08:57 - software engineering coding interviews
08:59 - they have detailed solutions to all of
09:01 - their over 140 practice interview
09:03 - questions
09:04 - in over nine programming languages and
09:06 - you can check them out from the link in
09:08 - the description and use the code tech
09:09 - with tim for a discount on the platform
09:11 - now
09:12 - what happens if i do something like
09:14 - lowercase a
09:15 - is less than and then lowercase b well
09:18 - again take a guess what do you think
09:19 - we're going to get do you think this is
09:20 - even going to work but do you think i
09:21 - can make this comparison is it going to
09:23 - crash my program
09:24 - oops didn't mean to close that all my
09:26 - all my tabs just closed all of a sudden
09:28 - okay let's bring that back up but let's
09:30 - compile let's run and notice we get a 1.
09:33 - so this is actually true this is a
09:34 - totally valid comparison we can check if
09:37 - one character is less than another
09:38 - character
09:39 - and what this actually does is this
09:41 - compares what's known as the
09:42 - lexi graphical yeah i think it's
09:44 - lexigraphical i'll put up something on
09:46 - this
09:46 - the screen because i'm 100
09:48 - mispronouncing this word
09:49 - but i believe it's called lexigraphical
09:51 - ordering of characters
09:53 - so really that this is fancy for saying
09:55 - we're going to look at what's called the
09:56 - ascii value of these two characters and
09:59 - compare them together
10:01 - so there's this thing called ascii asc
10:04 - i believe again i'll put that up on the
10:06 - screen so you guys can see it i'm not
10:07 - giving you wrong information
10:08 - but this is a table and every single
10:11 - character on your keyboard every single
10:13 - character you could possibly type
10:14 - has a numeric representation in this
10:17 - ascii table
10:18 - so for example the lowercase letter a i
10:20 - believe has the representation 97
10:23 - the lowercase letter b has a
10:25 - representation 98
10:26 - and this makes sense right right after a
10:28 - we have b and so that's 98
10:30 - c is 99 d is a hundred so on and so
10:33 - forth
10:33 - so when we do this comparison you can
10:35 - kind of imagine that we are converting
10:37 - both of these characters
10:38 - to whatever their ascii value is
10:40 - whatever number represents them on this
10:42 - table
10:43 - and then we're just comparing those two
10:44 - numbers together so in this case we're
10:45 - going to have 97 less than 98
10:48 - that gives us true and so we are all
10:49 - good but now i want to show you
10:51 - something interesting
10:52 - what happens if i compare lowercase a to
10:55 - uppercase b is this going to change
10:57 - anything obviously we know that
10:59 - uppercase and lowercase letters are
11:00 - different
11:01 - and while b is going to have a different
11:02 - representation on the ascii table
11:04 - than lowercase b so just take a guess
11:07 - you're probably not going to know the
11:08 - answer this but i will show you now
11:10 - and you can see that we actually get 0.
11:13 - the reason we get 0
11:14 - is because even though a comes before b
11:17 - and the alphabet
11:18 - this ascii value is greater than the
11:21 - ascii value of
11:22 - capital b in fact capital b has an ascii
11:25 - value i believe
11:26 - of 66 because i know or i'm pretty sure
11:29 - that uppercase a
11:30 - has an ascii value of 65. so this is
11:34 - something that you're not going to
11:34 - memorize you just kind of have to
11:35 - understand that
11:36 - when you do comparisons of characters or
11:38 - strings it's not necessarily intuitive
11:40 - and that you have to know what the ascii
11:41 - values are to actually understand what
11:43 - you're going to get as your
11:44 - result anyways though if i change this
11:47 - to uppercase a
11:48 - this expression now will be true because
11:51 - uppercase a
11:52 - is indeed less than uppercase b when we
11:54 - compare their ascii values so let's go
11:56 - ahead and run this
11:57 - run the program and now we get true
12:00 - awesome so that is comparing characters
12:03 - now i'm going to show you how we can
12:04 - compare strings so of course when we
12:06 - compare these characters as well we
12:07 - could have used the less than or equal
12:09 - to we could have used the greater than
12:10 - or the greater than or equal to we can
12:12 - use any of the comparison operators
12:14 - just be aware that when you're doing
12:15 - this with characters and strings again
12:17 - it's not necessarily intuitive
12:18 - now i will show you with strings though
12:20 - so let's compare two strings together
12:22 - let's actually compare the string hello
12:26 - to the string hello
12:29 - now take a guess what do you think we're
12:31 - going to get here let me go ahead and
12:33 - compile the program
12:34 - and let's run this and we get 0. the
12:37 - reason we get 0 is because this
12:38 - uppercase e here
12:39 - is different than this lowercase e and
12:41 - so these strings are different right and
12:43 - so we're getting false
12:44 - whereas if i change this now to actually
12:47 - match this string we should see that we
12:49 - get true
12:50 - so let's do that and we get true now
12:52 - there is other ways to compare strings
12:54 - i'm actually going to do an entire video
12:55 - just talking about strings because
12:56 - they're really important
12:58 - but for now you can use the double equal
13:00 - sign like this and then of course you
13:01 - can use the not equal to
13:03 - as well and this will tell you if these
13:05 - two strings are not equal to each other
13:06 - so we compile
13:07 - we run we get zero because obviously
13:09 - these are equivalent to each other
13:11 - now let's try this though what if i have
13:13 - hello and then i have hello with the
13:15 - space at the end are these two strings
13:16 - the same
13:17 - what do you think well let's try it out
13:20 - and we can see
13:20 - that we actually get uh sorry this is
13:23 - because we're checking if they're not
13:24 - equal to each other so this is telling
13:26 - us these two strings are not the same
13:28 - the reason they are not the same is
13:29 - because a space well that's a character
13:31 - that has some value on the ascii table
13:33 - as well and since this string has a
13:34 - space and this one doesn't they are not
13:36 - the same
13:37 - so just make sure you're aware of that
13:39 - again not necessarily intuitive some
13:40 - people may say hello and hello the space
13:42 - at the end are the same but to our
13:44 - computer no they are different because
13:45 - this string has a character that this
13:47 - one
13:47 - does not so that's kind of the basics of
13:50 - comparisons
13:51 - now what i'm going to do is show you how
13:53 - we can actually get input for the user
13:55 - from the user story and then compare it
13:57 - against something and we'll just do like
13:59 - no a more realistic example essentially
14:01 - so what i'm going to say here
14:02 - is int n and or actually i'll say into
14:05 - num1
14:07 - and int num2 and i'm going to ask the
14:09 - user to type in two numbers so i'm going
14:10 - to say c out
14:11 - i'm going to see out type a
14:16 - number like that and then what i will do
14:18 - after this is i will see
14:20 - in and i will see in whatever they type
14:22 - into num1 now for this example we're
14:24 - just going to assume that the user
14:25 - actually gives us valid input
14:27 - we already know how to handle invalid
14:29 - input from the previous video
14:30 - so i'm just not going to cover that
14:31 - right here so now after i have
14:33 - my cn what i'm going to do is have
14:35 - another c out so i'm going to have
14:37 - another c out that says
14:38 - type a number and then i'm going to say
14:40 - c in and i'm going to see
14:41 - in num2 then what i'm going to do after
14:44 - this
14:45 - is i'm going to print out whether or not
14:47 - these numbers are the same
14:49 - so i'm going to say the following i'm
14:50 - going to say c out and i'm going to say
14:53 - these two numbers oops if i can type
14:57 - here
14:58 - numbers are the same colon and then
15:01 - i'm going to c out and i'm going to say
15:04 - num1
15:05 - is equal to num2 so this is kind of
15:07 - going to tell us if we get a 1 these two
15:09 - numbers are the same if we get a 0
15:11 - they are not the same and i think that's
15:13 - pretty much all i need actually for
15:15 - this program uh so hopefully that's
15:17 - clear we're collecting two numbers from
15:18 - the user
15:19 - we are then printing out these two
15:20 - numbers are the same and we're just
15:22 - checking whether or not they are the
15:23 - same
15:24 - so let's compile this i'll compile the
15:26 - program
15:27 - and we seem to have gotten an error uh
15:29 - what exactly is the error here
15:31 - let me just look here all right so i
15:32 - just had a look at this um actually the
15:34 - error i was getting here is that i need
15:35 - to parenthesize this expression
15:38 - the reason i need to do this is because
15:39 - when i had num1 is equal to num2
15:42 - the compiler was getting confused and it
15:44 - was reading
15:45 - this entire c out and kind of trying to
15:47 - end it here and then it saw the two
15:49 - equal signs and then it wasn't sure
15:51 - essentially what it should do and this
15:53 - kind of makes sense because these two
15:54 - equal signs could be replaced with this
15:56 - right
15:56 - so how is the compiler supposed to know
15:58 - that we're actually trying to compare
15:59 - these two values
16:00 - and then c out this comparison so
16:02 - whenever you have those kind of arrows
16:03 - just try to parenthesize your expression
16:06 - so when you put these in parentheses now
16:07 - this is telling the compiler hey
16:09 - i want to evaluate this first so now i
16:12 - know that i'm going to be c
16:13 - outing a true or a false value whereas
16:15 - before it was having a hard time
16:16 - determining
16:17 - that we were trying to do the evaluation
16:19 - of this comparison
16:21 - before all the c out stuff so hopefully
16:23 - that's kind of clear but
16:24 - if you run into that error just you know
16:26 - try something like this using
16:27 - parentheses is always a decent idea
16:30 - if anything it just makes your code more
16:31 - clear so anyways let me uh
16:33 - recompile this here now we can see this
16:35 - is all good let me rerun the program
16:37 - asked me to type a number let's type a
16:39 - number three let's type three again
16:41 - these two numbers are the same gives me
16:42 - a one saying yes these are the same
16:44 - awesome so let's run this one more time
16:46 - let's go three four and then it tells me
16:48 - these two numbers are same no
16:50 - they are not the same they are different
16:51 - because we are getting zero
16:53 - so that's really all i want to show you
16:54 - i just wanted to implement this into
16:55 - like a really basic example so you can
16:57 - see how this might work
16:58 - uh now try messing around with this with
17:00 - floats uh with booleans with
17:03 - characters all of that and yeah just see
17:05 - how these different comparison
17:06 - operators work it's always a good idea
17:08 - to kind of do stuff after the video
17:10 - because i can only show you so much and
17:11 - this is meant to give you an
17:12 - introduction
17:13 - to really learn these concepts you have
17:15 - to practice and play around with them on
17:16 - your own so with that said i hope you
17:18 - guys enjoyed if you did make sure to
17:19 - leave a like
17:20 - subscribe to the channel and i will see
17:21 - you in another youtube video

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners now in this video i'm going to be covering comparison operators i'm going to be showing you how we can compare different values not just numeric values strings characters and boolean values as well so with that said let's dive into the video so in the previous video i showed you a ton of different arithmetic operators the arithmetic operators had numeric operands and they returned a numeric value when i say numeric i'm talking about the int and float data type or data types so in this video i'm going to show you something called comparison operators now i'm actually going to start by just listing out all of the comparison operators we have less than greater than less than or equal to greater than or equal to is not equal to and is equal to the order i'm listing these means nothing there's no um like importance in this order so don't read into that but what comparison operators do is they compare the values of different variables right or just they compare values in general so whenever we write an expression and i will discuss what an expression is when i show it but it's just anything that involves these operators essentially they're going to return to us a true or false value more specifically they're going to return a boolean value so remember we saw this data type called boo now bool is always equal to either true or false it's one of these two values no matter what so when we use these operators right here the expression that contains them returns to us true or false or it evaluates to true or false the reason for that is it's telling us whether or not our comparison was true or whether it was false so to give you a really simple example let me make a variable called test it's going to be the bool data type which is short form for boolean and what i'm going to say is 1 is less than 2. now using some critical thinking skills here what do you think this is going to give us right is 1 less than 2 well 1 is clearly less than 2 and so this should evaluate to true because this comparison was indeed correct it was true now if we flip around this sign and we ask if 1 is greater than 2 then obviously this is going to evaluate to false because 1 is not greater than 2. so that is what you use comparison operators for i will go through all of them but they're fairly intuitive and straightforward and they don't only need to be used on what you call numeric values we can use them on characters we can use them on strings we can use them on booleans we can use them on other data types as well now you want to be a little bit careful when you're using these operators on strings or characters because they don't necessarily work the way in which you think they will in fact whenever you're using these type of operators uh so like greater than less than less than or equal to greater than or equal to with strings or with characters they evaluate or compare the strings using something called the lexi graphical or lexigraphical ordering i'll put the word up on the screen because i'm probably mispronouncing it this is a specific way of comparing strings or comparing characters together i will show it to you in a second but i just want to be really clear that when you use this with characters or you use this with strings the result may not necessarily be intuitive you may not actually be able to guess what it's going to be unless you understand how the comparison is performed anyways enough of that let's just continue with this kind of more simple example i'm just going to see out test right here i just want to show you what i get so if i go ahead and compile my program here oops i didn't mean to run the program i want to compile and now run notice that we get 0. now the reason we're getting 0 here is because whenever we see out a boolean value it's going to give us the numeric representation of that boolean so if you remember back to one of the first videos true is always equal to one and false is always equal to zero so i don't oh it's because i don't have the semicolon yeah that's why it wasn't highlighting anyways you got the idea so true is equal to one false is equal to zero so if you see us printing out zero that means that this test variable was actually equal to false if you see us printing out one that means this test variable was equal to true and just to prove this to you uh even more if i try to just see the actual value of true right here you're going to see that even this is going to give us a 1. so let's do this and you see that we get a 1. so now let me just go through a few more of the comparison operators i'll then show you the comparisons on strings and characters and then we'll get into like a kind of a cool example where we get some user input and then we'll print out some comparisons between different user inputs anyways we have this uh this boolean test variable we obviously have just looked at the less than and greater than comparison now something to note here is if i say 1 is greater than 1 this is false right because 1 is not greater than 1. if i wanted this to be true so i wanted greater than or equal to then what i would do is i would tack on the equal sign at the end here and now what this says is 1 greater than or equal to one so if these two values are the same this returns true or if the value on the lefthand side is greater than the value on the righthand side this returns true now same holds in reverse here if i switch this to less than now i'm checking if one is less than or equal to one however if i just put a less than this is false because one is not strictly less than one so a lot of times people will read this and they'll say strictly less than to really emphasize the point that you are making sure they are not the same values it actually must be less than this other value so i think i mean i'm not going to compile the program and go through these i think you guys get the idea but that is the basics of these four operators right here so now let's look at the is not equal to and is equal to now make sure you do not confuse these operators with the single equal sign so this single equal sign right here and we've seen this if i do something well we're seeing it right here is what's known as the assignment operator so we are assigning some value to some variable or to some container whatever it's going to be but we're assigning something to something else whereas when we have two equal signs we are checking for equivalence or com or we're comparing two values together so i like to read this as is equal to not just equal to because when i say that sometimes people get confused and they think i'm talking about one equal sign anyways let's use the single equal sign or the double equal sign sorry so if i say 1 equals equals 1 what this is checking is if the lefthand side is equivalent or is equal to the righthand side so now let me just see out test let's see what we get if we compare one and one so if i do this and i run the program we get true obviously because one is equal to one now the exclamation point equals sign is uh not equal to you can read this as is not equal to so pretty much you can just check for comparison and then whatever that is you can flip it so if the two things are the same when you have the not equal sign this means you are going to get false because if the two things are the same and you're checking if they're not the same then obviously this is false whereas if these two things are different this expression is going to give you true because you're checking if they are not equal to each other and obviously 1 is not equal to 2. so i think that's probably straightforward enough i'm not going to go into a huge detailed explanation but if i have 1 does not equal 2 and now i run this and i compile we get true because they are not the same however if i make them the same then you're going to see here when i run this that we get false because well they are the same and we're checking if they were not the same so that is kind of the basics of how you use comparison operators now what i'm going to do is show you how we use these with characters and with strings so i'm going to start with characters because they're a little bit simpler and then i will show you strings so first thing to note here and remember that a character is one single character surrounded by single quotation marks if you want to have more than one character you need to use a string which is double quotation marks but let's compare the character a uh to the character uppercase a so just take a guess here and i'll actually make these uh the two equal signs so we'll check if these are equal to each other do you think that this a is equal to this a just take a guess i'm going to compile the program here and let's see what we get oops compile and run notice we get 0. so the reason i want to show you this example is because uppercase letters are different than lowercase letters now it seems obvious but a lot of times people mix this up a lowercase a is not the same as an uppercase a so when we're checking for a comparison between characters or strings we need to make sure we're accounting for the fact that one of them may be a capital the one another one may be lowercase right so just keep that in mind but if i have a lowercase a is equal to lowercase a obviously this will give us true because they are the same character so that is how you compare characters at least when you're checking for equivalence so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have detailed solutions to all of their over 140 practice interview questions in over nine programming languages and you can check them out from the link in the description and use the code tech with tim for a discount on the platform now what happens if i do something like lowercase a is less than and then lowercase b well again take a guess what do you think we're going to get do you think this is even going to work but do you think i can make this comparison is it going to crash my program oops didn't mean to close that all my all my tabs just closed all of a sudden okay let's bring that back up but let's compile let's run and notice we get a 1. so this is actually true this is a totally valid comparison we can check if one character is less than another character and what this actually does is this compares what's known as the lexi graphical yeah i think it's lexigraphical i'll put up something on this the screen because i'm 100 mispronouncing this word but i believe it's called lexigraphical ordering of characters so really that this is fancy for saying we're going to look at what's called the ascii value of these two characters and compare them together so there's this thing called ascii asc i believe again i'll put that up on the screen so you guys can see it i'm not giving you wrong information but this is a table and every single character on your keyboard every single character you could possibly type has a numeric representation in this ascii table so for example the lowercase letter a i believe has the representation 97 the lowercase letter b has a representation 98 and this makes sense right right after a we have b and so that's 98 c is 99 d is a hundred so on and so forth so when we do this comparison you can kind of imagine that we are converting both of these characters to whatever their ascii value is whatever number represents them on this table and then we're just comparing those two numbers together so in this case we're going to have 97 less than 98 that gives us true and so we are all good but now i want to show you something interesting what happens if i compare lowercase a to uppercase b is this going to change anything obviously we know that uppercase and lowercase letters are different and while b is going to have a different representation on the ascii table than lowercase b so just take a guess you're probably not going to know the answer this but i will show you now and you can see that we actually get 0. the reason we get 0 is because even though a comes before b and the alphabet this ascii value is greater than the ascii value of capital b in fact capital b has an ascii value i believe of 66 because i know or i'm pretty sure that uppercase a has an ascii value of 65. so this is something that you're not going to memorize you just kind of have to understand that when you do comparisons of characters or strings it's not necessarily intuitive and that you have to know what the ascii values are to actually understand what you're going to get as your result anyways though if i change this to uppercase a this expression now will be true because uppercase a is indeed less than uppercase b when we compare their ascii values so let's go ahead and run this run the program and now we get true awesome so that is comparing characters now i'm going to show you how we can compare strings so of course when we compare these characters as well we could have used the less than or equal to we could have used the greater than or the greater than or equal to we can use any of the comparison operators just be aware that when you're doing this with characters and strings again it's not necessarily intuitive now i will show you with strings though so let's compare two strings together let's actually compare the string hello to the string hello now take a guess what do you think we're going to get here let me go ahead and compile the program and let's run this and we get 0. the reason we get 0 is because this uppercase e here is different than this lowercase e and so these strings are different right and so we're getting false whereas if i change this now to actually match this string we should see that we get true so let's do that and we get true now there is other ways to compare strings i'm actually going to do an entire video just talking about strings because they're really important but for now you can use the double equal sign like this and then of course you can use the not equal to as well and this will tell you if these two strings are not equal to each other so we compile we run we get zero because obviously these are equivalent to each other now let's try this though what if i have hello and then i have hello with the space at the end are these two strings the same what do you think well let's try it out and we can see that we actually get uh sorry this is because we're checking if they're not equal to each other so this is telling us these two strings are not the same the reason they are not the same is because a space well that's a character that has some value on the ascii table as well and since this string has a space and this one doesn't they are not the same so just make sure you're aware of that again not necessarily intuitive some people may say hello and hello the space at the end are the same but to our computer no they are different because this string has a character that this one does not so that's kind of the basics of comparisons now what i'm going to do is show you how we can actually get input for the user from the user story and then compare it against something and we'll just do like no a more realistic example essentially so what i'm going to say here is int n and or actually i'll say into num1 and int num2 and i'm going to ask the user to type in two numbers so i'm going to say c out i'm going to see out type a number like that and then what i will do after this is i will see in and i will see in whatever they type into num1 now for this example we're just going to assume that the user actually gives us valid input we already know how to handle invalid input from the previous video so i'm just not going to cover that right here so now after i have my cn what i'm going to do is have another c out so i'm going to have another c out that says type a number and then i'm going to say c in and i'm going to see in num2 then what i'm going to do after this is i'm going to print out whether or not these numbers are the same so i'm going to say the following i'm going to say c out and i'm going to say these two numbers oops if i can type here numbers are the same colon and then i'm going to c out and i'm going to say num1 is equal to num2 so this is kind of going to tell us if we get a 1 these two numbers are the same if we get a 0 they are not the same and i think that's pretty much all i need actually for this program uh so hopefully that's clear we're collecting two numbers from the user we are then printing out these two numbers are the same and we're just checking whether or not they are the same so let's compile this i'll compile the program and we seem to have gotten an error uh what exactly is the error here let me just look here all right so i just had a look at this um actually the error i was getting here is that i need to parenthesize this expression the reason i need to do this is because when i had num1 is equal to num2 the compiler was getting confused and it was reading this entire c out and kind of trying to end it here and then it saw the two equal signs and then it wasn't sure essentially what it should do and this kind of makes sense because these two equal signs could be replaced with this right so how is the compiler supposed to know that we're actually trying to compare these two values and then c out this comparison so whenever you have those kind of arrows just try to parenthesize your expression so when you put these in parentheses now this is telling the compiler hey i want to evaluate this first so now i know that i'm going to be c outing a true or a false value whereas before it was having a hard time determining that we were trying to do the evaluation of this comparison before all the c out stuff so hopefully that's kind of clear but if you run into that error just you know try something like this using parentheses is always a decent idea if anything it just makes your code more clear so anyways let me uh recompile this here now we can see this is all good let me rerun the program asked me to type a number let's type a number three let's type three again these two numbers are the same gives me a one saying yes these are the same awesome so let's run this one more time let's go three four and then it tells me these two numbers are same no they are not the same they are different because we are getting zero so that's really all i want to show you i just wanted to implement this into like a really basic example so you can see how this might work uh now try messing around with this with floats uh with booleans with characters all of that and yeah just see how these different comparison operators work it's always a good idea to kind of do stuff after the video because i can only show you so much and this is meant to give you an introduction to really learn these concepts you have to practice and play around with them on your own so with that said i hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in another youtube video
