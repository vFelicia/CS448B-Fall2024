With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to part
00:10 - three of this tutorial series
00:12 - in this video what we're going to be
00:13 - doing is adding react and adding kind of
00:15 - a front-end app
00:17 - to our project now this will be the most
00:19 - amount of setup we do
00:20 - in this series so don't worry it is
00:22 - slightly painful to go through all of
00:23 - these steps
00:24 - but i just want to tell you right now
00:26 - all of the code and all of the resources
00:28 - will be linked in the description so if
00:30 - something's not working for you you're
00:31 - getting frustrated which is definitely a
00:33 - real possibility when going through this
00:34 - many steps
00:35 - please just have a look at the code in
00:37 - the description you can copy it and just
00:38 - paste it into your script
00:40 - and just make sure your directory
00:41 - structure looks the same same as mine
00:43 - because well that will make a big
00:45 - difference when it comes to this setup
00:47 - anyways we need to add react the first
00:49 - thing we're going to need to do
00:50 - for this is we need to make sure we have
00:52 - npm installed so i'm going to open a new
00:54 - terminal here you can just press the
00:55 - plus sign in vs code to do that
00:57 - we're going to cd into our music
00:59 - controller main directory
01:00 - and then we're just going to type npm
01:03 - now we're not going to init a
01:04 - npm project yet but just go ahead and
01:06 - type npm make sure that command works
01:08 - if it does we're good to go if it
01:10 - doesn't make sure you download and
01:12 - install npm
01:13 - and node.js all right now we're inside a
01:15 - music controller
01:16 - next thing we're going to do is actually
01:17 - create a new app inside
01:19 - of our projects we're not going to call
01:21 - this one app in fact what we're going to
01:22 - call it is
01:23 - frontend because this app is going to
01:25 - store the front end of our project
01:27 - so what we're going to do is go django
01:31 - hyphen admin start app
01:34 - front end like that and now we have a
01:37 - front-end app inside of our directory
01:39 - and this is where we're going to be
01:40 - working now so now we're going to cd
01:42 - into frontend and what we're going to do
01:44 - is create a few
01:46 - folders so the first thing we're going
01:47 - to do is make a static and template
01:49 - folder
01:50 - we're also going to make a source and
01:51 - components folder now this app right
01:54 - here is going to be storing
01:55 - all of the stuff related to our front
01:57 - end so related to actually the react
02:00 - aspect of this project there's a lot of
02:02 - files here this where all the javascript
02:04 - is going to go and just keep that in
02:05 - mind this is
02:06 - strictly for the front end where the api
02:08 - here is strictly for the back end
02:10 - all right so inside of here first thing
02:12 - to do new folder we're going to call
02:14 - this one
02:14 - templates we're going to make another
02:16 - folder as well i'm going to call this
02:18 - one static
02:19 - so our static folder is going to hold
02:21 - all of our static files so pretty much
02:22 - anything that the browser would cache
02:24 - and in fact just so we can separate all
02:26 - of the different things inside of here
02:28 - we're going to make three folders
02:29 - so we're going to make the first folder
02:30 - we're going to call this frontend
02:32 - like that this is going to store our
02:34 - main javascript bundle
02:36 - you'll see how that works in a second
02:37 - now we're going to make another folder
02:39 - make sure you're highlighted over static
02:40 - by the way otherwise you'll make one
02:42 - inside of frontend but inside of static
02:43 - another folder i'm going to call this
02:45 - one css so now we have css
02:47 - front end and finally one last folder
02:50 - you can take a guess out what this one
02:51 - is going to be
02:52 - but it is images so these are the three
02:54 - main things we're going to store inside
02:55 - of the static folder all of our css
02:57 - all of our images and then front end
02:59 - which is just going to actually store
03:00 - the bundle of all of our javascript
03:02 - which will come from our source code
03:03 - which we will see in a second
03:05 - now quickly uh actually yeah we can just
03:08 - go ahead and make this other folder now
03:10 - let's bring another folder inside a
03:11 - front end this one is going to be called
03:13 - src standing for source and then inside
03:16 - of source we're going to make another
03:17 - folder
03:18 - and this one is going to be called
03:20 - components
03:21 - now when we talk about react we have
03:23 - react components
03:25 - those will obviously go inside of the
03:26 - components folder
03:28 - so hopefully that's clear but that is
03:29 - what we have that's kind of our
03:30 - directory structure
03:32 - that's all we need in terms of folders
03:34 - now what we're going to do is init
03:35 - an npm project or whatever it is that
03:38 - that stands for
03:38 - we're going to do mpm init hyphen y
03:42 - and what that is going to do is create a
03:44 - node modules package json
03:46 - and all the other things we need uh for
03:47 - our front end project so npm init
03:49 - hyphen y don't worry if this like
03:52 - doesn't make sense to you and you've
03:53 - never done this before
03:54 - you don't really have to know what all
03:56 - of these files are doing and their
03:57 - purpose you just kind of have to get the
03:58 - setup going and then
03:59 - you'll be able to do all the development
04:01 - that you need so we'll continue with the
04:02 - rest of the setup in just a second but i
04:04 - need to thank the sponsor of this video
04:06 - and this series which is algo expert
04:08 - algo expert is a coding interview prep
04:10 - platform and i can honestly say that
04:12 - it's one of the main reasons i was able
04:14 - to land a job at microsoft
04:16 - in a matter of a few months i was able
04:17 - to get extremely good at coding
04:19 - interview questions
04:20 - from following along with the great
04:21 - video explanations that are on the
04:23 - platform
04:24 - if you're looking to land a software
04:25 - engineering job or just improve your
04:27 - coding ability
04:28 - then go ahead and check out algo expert
04:29 - from the link in the description
04:31 - and use the code tech with tim for a
04:33 - discount on the platform
04:34 - so we have our package.json inside of
04:36 - here that is good
04:38 - our node modules folder actually should
04:41 - come in after we do a few things here
04:42 - so now that we have that what we need to
04:44 - do is install a bunch of stuff
04:46 - from npm so essentially npm is going to
04:49 - store all of kind of the modules like
04:51 - react it's going to store
04:52 - babel it's going to store webpack it's
04:54 - going to do all the things that we need
04:56 - to actually
04:56 - transpile our code and get it ready to
04:58 - run in the browser
04:59 - so the first thing we have here is we
05:01 - want to do npm
05:02 - i and then webpack and then web
05:06 - hack hyphen cli and then hyphen hyphen
05:09 - save dev
05:10 - again don't worry too much about these
05:12 - commands but this is going to install
05:13 - webpack
05:14 - we need webpack what webpack is going to
05:16 - do is take all of our source javascript
05:18 - stuff
05:18 - it's going to i believe transpile it i
05:21 - think that's what it's called or pretty
05:22 - much
05:22 - bundle it into one single javascript
05:25 - file
05:26 - and you'll see how that works later but
05:28 - anyways we're going to do this command
05:29 - once that's done installing i'll be back
05:30 - and we will install the other things
05:32 - all right so the next thing we're going
05:33 - to install is babel now in case you're
05:35 - not sure what babel is essentially it
05:36 - will take our code
05:38 - and transpile it into code that is
05:40 - friendly with all different types of
05:41 - browsers
05:42 - so we're going to be writing with i
05:43 - believe it's es6 or es7 javascript code
05:46 - which is like
05:47 - newer javascript code to put it simply
05:49 - and
05:50 - this will just take our code and
05:51 - transpile it so just kind of convert it
05:53 - into code that will run in older
05:55 - browsers that's what babel does for us
05:57 - so it's nice to have that installed
05:58 - we'll just do it at the beginning
05:59 - beginning why not so we have to deal
06:01 - with it later so npm
06:02 - i and then babel hyphen or sorry not
06:05 - hyphen babble slash
06:06 - core we're also going to do babel loader
06:09 - like that
06:10 - there's a few other things you need to
06:11 - type here so just don't press enter yet
06:13 - babble slash preset hyphen env and then
06:16 - at
06:18 - babel slash i gotta look at my other
06:21 - screen to remember this one
06:22 - this is gonna be preset hyphen
06:26 - react and then i believe the last thing
06:29 - we have to add here is
06:30 - hyphen hyphen save hyphen dev
06:33 - all right so there we go we have this
06:35 - line make sure you type it out like that
06:37 - press enter we're going to install all
06:39 - those things and once that's done i will
06:40 - be back
06:41 - all right i am back now we have a few
06:43 - other things we need to install the next
06:45 - one is pretty obvious we need to install
06:46 - react so we're gonna say npm i
06:48 - react and then react hyphen dom
06:51 - once again save dev so let's run that
06:55 - and there's about three or four more
06:57 - things we need to install i'm just doing
06:58 - them all right now so we don't have to
06:59 - come back to this later on
07:01 - the next one i'm going to install is
07:02 - something called material ui this is
07:04 - just some pre-built components that we
07:06 - can use to avoid having to style the web
07:07 - page ourself
07:08 - so i'm going to say mpm install at
07:12 - and then material hyphen ui
07:15 - slash core again just some built-in
07:18 - components it has some nice things like
07:19 - cards and grids and all that
07:21 - it's kind of similar to something like
07:23 - bootstrap for example next what we're
07:25 - going to do is say
07:26 - npm install and we're going to install
07:29 - another thing for babel so we're going
07:30 - to say babel
07:32 - slash plugin if i can spell
07:36 - this correctly hyphen
07:39 - proposal class and then
07:42 - property like that
07:45 - okay so i think i spelt all that
07:47 - correctly let's just have a quick double
07:49 - check
07:49 - and let's install that the reason we
07:51 - need this is so we can use async and a
07:52 - weight in our javascript code it's kind
07:54 - of strange that we need to add that but
07:56 - we do and the last thing we need
07:58 - actually is two more things sorry my bad
08:01 - npm install react
08:04 - router hyphen dom this is going to allow
08:07 - us not counter
08:08 - router this is going to allow us to
08:09 - actually reroute the pages so that we
08:11 - can go well two different pages from our
08:13 - react app so react router hyphen dom we
08:15 - need that one
08:16 - and the last one has to do with material
08:18 - ui npm
08:20 - install at material hyphen
08:23 - ui slash icons so pretty straightforward
08:26 - but we just want to get the icons from
08:28 - material ui
08:30 - okay so i think just doing a scan here
08:32 - that's all we need in terms of the
08:35 - npm packages now what we need to do is
08:37 - set up some configuration scripts
08:39 - that are going to actually run and kind
08:41 - of handle our webpack and our babble and
08:43 - all of that
08:43 - now these i'm going to ask you just to
08:45 - copy from the links in the description
08:47 - you can go to the github and find the
08:48 - source code because they're kind of long
08:50 - to type
08:50 - out but the first thing that we're going
08:52 - to do is make a new file i'm going to
08:53 - call this one make sure it's inside of
08:55 - the front end app
08:55 - by the way babel dot
08:59 - config dot json now
09:02 - you can actually do there's another one
09:04 - called dot babel rc
09:05 - if you're aware of how that works then
09:07 - go ahead and use that but i'm going to
09:08 - use
09:09 - the babel.config.json file if that means
09:11 - nothing to you
09:12 - don't worry just follow along with what
09:14 - i'm doing and all we're going to do
09:16 - is paste this inside of here i'm not
09:18 - really going to get into what all this
09:19 - stuff does but it pretty much just sets
09:21 - up the babel loader for us and says hey
09:23 - the presets we're using
09:24 - is the environment preset that's
09:26 - targeting node version 10. it's just
09:27 - because there was a bug
09:28 - in the version that i was using and then
09:30 - at babel
09:31 - preset react pretty straightforward
09:33 - we're using react so we're going to have
09:34 - that preset
09:35 - and then the plugins this is so we can
09:37 - use async and a weight
09:38 - and remember we just installed this
09:40 - thing right here plug-in proposal class
09:42 - properties from npm all right so that is
09:44 - babel.config.json you can copy that out
09:46 - or you can find it from again the github
09:48 - or the link in the description
09:50 - next we're going to make another file
09:51 - called webpack.config.json or dot js
09:55 - sorry
09:56 - so let's go inside a frontend let's make
09:57 - a new file let's do
10:00 - webpack dot
10:03 - dot js all right so i'm in
10:06 - webpack.config.json a reminder that
10:08 - what webpack does is actually bundle all
10:11 - of our javascript into
10:12 - one file we can bundle it into multiple
10:15 - files but
10:15 - anyways it just takes all this
10:17 - javascript code we have and makes a
10:18 - bundle of it and then serves that one
10:20 - file
10:21 - to the browser and and you'll see how
10:22 - that works but anyways let's just
10:24 - paste this in this is the configuration
10:26 - for webpack
10:28 - we need a way to determine okay where
10:30 - actually is our javascript file where is
10:32 - the entry javascript file
10:34 - and where should we output this file to
10:36 - we're going to take
10:37 - all of our javascript we're going to
10:38 - read through all of it and we're going
10:39 - to output it somewhere where should i
10:40 - output it
10:41 - well i'm going to output it where i put
10:42 - right here now we're saying our
10:44 - entry point is going to be in the source
10:46 - directory which we have inside of here
10:48 - and then dot or sorry slash index.js
10:52 - now this is a relative path which pretty
10:54 - much means we're just starting from
10:56 - wherever this webpack.config.js
10:59 - file is which is inside of the frontend
11:01 - directory
11:02 - next we have output now we're using
11:03 - path.resolve this is getting the current
11:06 - directory that we're in so the front-end
11:07 - directory
11:08 - and then saying okay and again relative
11:10 - path we want to put this inside of the
11:12 - static
11:13 - front-end folder so if we have a look at
11:15 - static here and we have a look at the
11:16 - front-end folder
11:17 - that's where our output file is going to
11:18 - be the file name is name.js we might
11:22 - have to change this
11:22 - i forget but i'm going to leave it with
11:24 - the brackets right now all right then we
11:26 - have
11:26 - module and we have some rules i'm not
11:28 - going to talk about this but you can see
11:29 - it's saying just simply exclude bundling
11:32 - the node
11:32 - modules folder and we're going to use
11:35 - the babel loader when we do all this
11:38 - next we have optimization what minimize
11:40 - is doing is taking our javascript and
11:42 - minimizing it so just making it smaller
11:44 - the reason we would want to do this is
11:46 - because if we have a lot of javascript
11:47 - it's going to take a long time to load
11:49 - in the browser so if we can get rid of
11:51 - all the you know white spaces and all
11:52 - the other information in the file that
11:54 - we don't need
11:55 - that is best so it's just minimizing for
11:57 - us and then plugins
11:58 - this is doing a very similar thing in
12:00 - terms of optimization i'm not really
12:02 - going to talk about this you're welcome
12:03 - to look up the define
12:04 - plugin if you like all right so now we
12:06 - have webpack.config.js
12:09 - that is all good and now let's move on
12:11 - to the next step
12:12 - so now we're going to do is go to
12:14 - package.json and what we need to do
12:15 - inside of here is where it says scripts
12:17 - we actually need to add two scripts here
12:19 - which are going to run
12:20 - this webpack thing that we just set up
12:23 - essentially
12:24 - so inside of here the first thing we're
12:25 - going to add is we're going to add
12:27 - the dev script and this is going to be
12:29 - equal to
12:30 - web oops and i need double quotations
12:33 - i'm going to be equal to webpack
12:35 - hyphen hyphen mode development and then
12:38 - hyphen hyphen watch
12:40 - what this is going to do is pretty much
12:41 - tell us hey we want webpack to run we
12:43 - want to run in the development mode
12:45 - and we want it to be in watch mode now
12:47 - just like the server that we were
12:49 - running before so that python script
12:51 - this will just watch for changes to our
12:53 - javascript files and then
12:54 - automatically recon re-compile or
12:57 - rebundle or whatever you want to call it
12:59 - the output javascript file so that
13:01 - bundled file so that we can just refresh
13:03 - our browser
13:04 - and everything will be all good next
13:05 - we're going to add a build script so i
13:07 - think i need to separate this with a
13:09 - comma
13:09 - i'm going to say build colon and double
13:12 - quotation marks
13:13 - webpack hyphen hyphen mode only thing
13:16 - we're going to change here is is going
13:17 - to be production
13:18 - and we're not going to add the watch so
13:21 - that is
13:21 - all good and i think we can move forward
13:25 - now
13:25 - all right so let's get rid of that and
13:27 - now actually let's go inside of our src
13:29 - file and let's make our entry javascript
13:32 - file so inside of src
13:34 - make a new file i'm going to call this
13:36 - index.js
13:37 - like that so we're pretty much done our
13:40 - setup at this point
13:42 - in terms of all of this random gibberish
13:44 - stuff that doesn't make any sense with
13:45 - the babel and webpack and all that
13:47 - but what we need to do now is actually
13:50 - make it so that
13:51 - our django app will render a page
13:54 - that react will take control of so this
13:57 - seems kind of strange and if you haven't
13:58 - used django or react before then this
14:00 - isn't really going to make much sense
14:01 - but the idea here is that we're going to
14:03 - have
14:04 - our django application render a template
14:07 - which is just going to be some vanilla
14:08 - plain html
14:10 - and then our react code is going to take
14:12 - over
14:13 - that template and actually fill it in so
14:15 - we will technically have
14:17 - the django backend actually rendering
14:19 - the template but then
14:21 - react will manage it after that so
14:23 - you'll see
14:24 - how that works when we start doing it
14:25 - but i'm just going to go inside of the
14:27 - templates folder right here
14:29 - and i'm going to make another folder
14:30 - this is strange again called
14:32 - front end and inside of frontend i'm
14:35 - going to make a file and i'm just going
14:36 - to call this
14:38 - index.html now inside of here we're just
14:40 - going to fill in a few things
14:41 - so we'll just make our standard html
14:44 - file so doctype
14:45 - html we'll make our html opening tag
14:49 - html closing tag let's make our head
14:51 - opening tag and head closing tag
14:54 - and same thing with body
14:57 - okay now inside of head we'll add the
14:59 - standard stuff so we'll add our meta tag
15:01 - and we'll say
15:02 - char set equals utf-8 we'll add another
15:06 - meta tag inside of here
15:07 - we'll say name equals viewport like that
15:11 - and then the content equals and again
15:14 - you guys can copy this stuff from the
15:15 - link in the description if you don't
15:16 - want to type it out but width
15:17 - equals device
15:21 - hyphen width comma
15:25 - initial scale equals one okay our
15:28 - snippets came in there
15:29 - and oops we want to close this meta tag
15:32 - at the end there do we need any other
15:35 - meta tags i think
15:36 - that's it for our meta tags but now
15:38 - we'll add a title tag
15:40 - inside of title we will simply say you
15:42 - know music
15:44 - controller or whatever you want the
15:46 - title to be i'm going to add something
15:48 - inside of here
15:48 - which i'll discuss in a second it's
15:50 - going to say load static
15:52 - what this will do is load our static
15:54 - files our static folder which will allow
15:56 - us
15:57 - essentially to look at the javascript
15:59 - code that we're going to be bundling
16:01 - now we also need to add a few other
16:03 - things in here i'm just going to copy
16:04 - them in and again i'm going to ask that
16:05 - you guys just
16:06 - copy this from the link in the
16:07 - description because it's not really
16:09 - worth me typing out the url
16:11 - but here let's let's zoom out a little
16:13 - bit so we can read all this these are
16:14 - just some scripts and style sheets that
16:16 - we need
16:17 - so remember we're using material ui this
16:19 - is kind of like a
16:20 - component library that comes with some
16:22 - cool built-in stuff but we need to
16:23 - import their style sheet we also need to
16:25 - import our own style sheet
16:27 - which we'll create in just one second
16:29 - and then we need the font
16:31 - for material ui we also need jquery
16:34 - i believe i have two versions of jquery
16:36 - jquery here so i'm going to get rid of
16:38 - the one that's the lower version
16:39 - i don't know why i have two there and
16:41 - that should
16:42 - be good all right so now that we have
16:44 - that we're going to have to add a few
16:46 - small things but this should be pretty
16:48 - straightforward we're going to go into
16:49 - the body we're going to make a
16:51 - div i'm going to say this div id equals
16:54 - and let's go main let's end that div
16:58 - and then we're going to make another div
16:59 - this is the div that reacts actually
17:01 - going to take care of
17:02 - we're going to say div id equals app so
17:05 - the idea here is that we have this main
17:06 - div i'll talk about why we have that
17:08 - later when we start doing some more
17:09 - styling and then we have this app
17:12 - div and what will happen is well our
17:15 - react code is going to go inside
17:16 - of this div so react will kind of grab
17:19 - this app div
17:20 - and this is where it will render all of
17:21 - its components and show everything on
17:23 - the screen
17:24 - last thing we need to do i think i can
17:26 - actually type this one out just at the
17:27 - end of the body we're going to make a
17:28 - script tag
17:29 - and we're going to load the main js file
17:32 - that we're going to be using as our
17:34 - bundle so we're going to say source
17:35 - equals and then inside of here we're
17:37 - going to go percent percent
17:39 - static like that and believe the
17:42 - quotations can stay there and then we're
17:44 - going to do
17:44 - another two quotation marks strangely
17:46 - enough and go
17:48 - front end slash main dot js
17:51 - so what this is saying is essentially
17:54 - like whatever the static folder is which
17:56 - we've loaded
17:56 - here let's use that and then we're going
17:58 - to combine that with
18:00 - frontend slash main.js and we're going
18:02 - to load that script
18:03 - now i need to end the script tag so i
18:05 - think i can do that but just note
18:07 - that what this is doing is it's going to
18:09 - be grabbing our bundled javascript which
18:11 - will hold all of our react code from
18:13 - static front end
18:15 - and loading that inside of here so that
18:17 - this actually works right in react can
18:19 - actually take over
18:20 - this div again this all will come
18:22 - together as we go through but i'm just
18:24 - trying to explain it step by step
18:25 - okay so now that we have index.html that
18:28 - is all good
18:29 - i don't want to get ahead of ourselves
18:30 - so let's actually now render the view
18:32 - or render this template and then we'll
18:34 - write a little bit of react code
18:35 - i'm noticing that for some reason these
18:37 - tags aren't working
18:39 - so i think i need to just end the script
18:41 - i can end the script
18:42 - like that guess i can't do the slash to
18:45 - end it
18:45 - okay so now that we've done that let's
18:47 - go into the views file
18:49 - in our front end now what we're going to
18:51 - do inside of the views
18:53 - of our front end may seem a little
18:55 - strange but we need to just
18:56 - render this index template and then let
18:59 - react take care of it
19:00 - so inside of here i'm going to say
19:02 - define index
19:04 - i'm going to take a request i'm going to
19:05 - take star args and star star
19:08 - quarks and then i'm going to return
19:11 - a render which you can see is up there
19:14 - of a template so we're going to render
19:16 - request and then inside of here we're
19:18 - going to say front end
19:19 - like that slash index.html
19:24 - now what this is going to do is
19:25 - essentially allow us to just render this
19:28 - index template that we have right here
19:29 - and then react will take care of that
19:30 - and start rendering things inside of
19:32 - this
19:33 - notice that the folder is called
19:34 - frontend and what am i referencing
19:35 - frontend
19:36 - index.html which is the name of my html
19:39 - file
19:40 - what render will do is it will take the
19:41 - request it will take the template and it
19:43 - will simply return
19:44 - that html to uh whatever sent the
19:47 - request
19:47 - all right so now that we have that we
19:48 - just need to make a url for this
19:50 - so let's go to urls and in fact we don't
19:53 - have a urls file in here so we can
19:54 - create a new one
19:55 - let's go new file urls.pi
19:59 - and now let's go to musiccontroller
20:02 - let's go into this url
20:03 - and now let's add some more urls in here
20:06 - so let's say
20:07 - path and we're just going to have an
20:09 - empty path and now
20:11 - that is going to go to you guessed it
20:13 - the
20:14 - frontend dot urls so whenever we type a
20:18 - url
20:18 - that's not api or not admin we want to
20:21 - send it to frontend.urls
20:23 - that way we can then handle the urls
20:25 - from the front end
20:26 - and the reason we need that is because
20:28 - we just you'll see in a second
20:30 - it's hard to describe until we get
20:31 - further into the app but the front end
20:33 - here
20:34 - has its own urls as opposed from the api
20:36 - urls and those urls are kind of
20:38 - forward-facing that's what the user will
20:40 - actually see whereas the api ones will
20:42 - be used
20:43 - by the react code kind of internally in
20:46 - a sense
20:47 - so anyways let's go to this urls file
20:49 - i'm just going to actually
20:50 - copy this one because it makes it a bit
20:52 - easier we'll paste it inside of here
20:55 - again we don't need the admin we don't
20:57 - need the include
20:58 - so we can get rid of all of that and now
21:01 - we have slash
21:02 - or empty path and what we're going to do
21:04 - here is say from
21:05 - dot views imports and i think we named
21:09 - it index
21:10 - yeah i believe it was named index and
21:11 - we'll simply put index
21:13 - right there so now we will render the
21:15 - index template whenever we have a blank
21:17 - path that will kind of be our
21:19 - home page quote unquote all right we're
21:21 - getting very close to being done i know
21:23 - this is pretty painful but this is what
21:25 - is required and what we have to do next
21:27 - what we're going to do is simply make
21:29 - our first
21:29 - react component and show that on the
21:31 - screen and hopefully then we will be
21:33 - done
21:33 - with this setup in this tutorial so
21:35 - let's go into components let's make a
21:36 - component called app.js
21:39 - and now let's start writing some react
21:40 - code so don't worry if this doesn't make
21:42 - any sense to you right now we will
21:44 - discuss this more later
21:45 - we're going to import react comma
21:49 - component from the react
21:52 - module like that then we'll have a
21:54 - semicolon
21:55 - and then we'll import render
21:59 - from react dom react dom standing for
22:02 - obviously
22:03 - the html dom that we're going to be
22:04 - using and then what we can do is make a
22:07 - class we're going to say export
22:09 - default class app
22:12 - extends component this is just how you
22:15 - set up a class in react
22:17 - the export default we could do somewhere
22:18 - else but i'm just going to do it right
22:20 - in line so that this app
22:21 - is the default export from this file i'm
22:24 - going to make a constructor
22:25 - that's going to take props and then
22:27 - we're going to call
22:28 - the super using those props again you
22:31 - don't have to know what this means this
22:32 - is just the initial setup
22:34 - and then finally we'll make a render
22:36 - method and we'll say render
22:38 - and we will return just for simplicity's
22:40 - sake we'll return an
22:41 - h1 tag so let's say h1
22:45 - testing react code
22:48 - and no let's end the h1 tag like
22:51 - come on give me the ending h1t okay so i
22:54 - think
22:55 - that is good now that we have that all
22:57 - we need to do is actually
22:59 - render this component inside of that div
23:03 - in index html so in case you're
23:04 - unfamiliar with react what happens is we
23:06 - make a main component
23:08 - that component will return something
23:10 - like whatever is
23:11 - going to exist in that place and then we
23:14 - just put that component in a div or in
23:16 - some
23:16 - id container and then that way it will
23:19 - have whatever is here
23:20 - inside of in our case the app container
23:24 - so to do this we need to access the app
23:26 - container which is pretty
23:26 - straightforward we're just going to say
23:28 - app i guess app a div equals and we'll
23:32 - have to put a const before this
23:34 - so const active equals
23:37 - document.getelementbyid
23:38 - and inside of here we'll simply use app
23:41 - now what we can do
23:42 - is render the app
23:45 - component inside of the app
23:48 - div now we're very very close to done we
23:51 - have the app component we just need to
23:53 - now
23:54 - put this into essentially our index.js
23:57 - file and the way that we can actually
23:58 - get this to work
23:59 - is we can simply say import app
24:02 - from and then dot slash components slash
24:06 - app
24:06 - that should be it let me make sure that
24:09 - i did this correctly
24:10 - and now our entry file is importing this
24:12 - file so when we import this file it will
24:14 - run this code and it will render
24:16 - this app in this index.html
24:19 - template now what we have to do is we
24:21 - have to
24:22 - actually first of all make sure that our
24:24 - server is running properly because it
24:25 - looks like
24:26 - i messed something up so let's run this
24:28 - here and okay so our server is running
24:31 - now what we need to do is run that
24:33 - script that we put inside of our package
24:35 - json so the webpack
24:36 - module development watch what should
24:39 - happen is it should look at our index.js
24:41 - file
24:42 - it should see that we're importing app
24:43 - it should bundle this stuff together
24:45 - it should output something to static
24:47 - front end and that file should be called
24:49 - main.js although i think i'm gonna have
24:51 - to change something to get that to work
24:53 - and then we'll go to the url endpoint
24:55 - and we should see this popping up
24:57 - i know again confusing but let's run
24:58 - this oops we're going to do npm
25:02 - run dev the way this works is if we have
25:05 - a look at our package.json the script is
25:07 - named dev
25:08 - run is running a script so we say npm
25:10 - run dev if we want to run build we would
25:12 - type build
25:13 - let's run this and let's see if we get
25:14 - any errors or if this works
25:16 - okay so that actually worked you can see
25:18 - that by default it calls our file
25:20 - main.js which is good that's what we
25:22 - want it to be
25:23 - and now if we have a look inside a front
25:25 - end what do we get we have this main.js
25:27 - file with all of this gibberish
25:29 - which is simply the bundled up
25:31 - javascript
25:32 - so that is how that works and now watch
25:34 - if i save this file
25:36 - notice that the watcher ran recompiled
25:38 - the thing
25:39 - and we're good to go so now if all of
25:41 - this worked well
25:42 - and i wouldn't be surprised if it didn't
25:44 - we can go
25:45 - here to the home page and oh template
25:48 - does not
25:48 - exist at slash all right so we're
25:51 - getting this error saying template does
25:53 - not exist i just had a quick look into
25:54 - this and it's a very silly mistake on my
25:56 - point
25:57 - or on my part we need to go into
25:58 - settings.pi and we need to add the
26:00 - front-end app to our installed
26:02 - applications i forgot to do that in fact
26:03 - i think i passed by them
26:05 - but if we go to yeah if we go to install
26:07 - apps you can see i haven't added front
26:08 - end inside of here so let's go ahead and
26:10 - do that
26:11 - and we'll do it the same way we did
26:12 - before so we'll say front end
26:14 - dot apps dot front end
26:19 - config all right so now that should be
26:22 - in our installed apps
26:23 - and saying it does not contain front end
26:25 - config oh
26:26 - let's just save that one more time rerun
26:28 - it and all looks good okay so now
26:31 - with any luck if we go back here and we
26:32 - refresh this should be working
26:34 - and there we go we get testing react
26:37 - code
26:37 - so there we go we have our component
26:39 - working react is working fine now we
26:41 - have both these scripts going in watch
26:42 - mode
26:43 - and all we have to do is just start
26:44 - developing we can write all of our react
26:46 - related stuff
26:47 - and it will show up on this page now
26:49 - obviously still gets a little bit more
26:50 - complicated after this but that is the
26:52 - bulk of the setup
26:53 - i apologize if this was kind of all over
26:55 - the place but it is hard to explain this
26:57 - stuff and well i hope that you guys were
26:58 - able to get it working
27:00 - any issues please do leave a comment
27:02 - again code in the description
27:03 - if you enjoyed make sure you leave a
27:04 - like subscribe to the channel and i will
27:06 - see you in the next
27:07 - [Music]
27:15 - video

Cleaned transcript:

hello everybody and welcome to part three of this tutorial series in this video what we're going to be doing is adding react and adding kind of a frontend app to our project now this will be the most amount of setup we do in this series so don't worry it is slightly painful to go through all of these steps but i just want to tell you right now all of the code and all of the resources will be linked in the description so if something's not working for you you're getting frustrated which is definitely a real possibility when going through this many steps please just have a look at the code in the description you can copy it and just paste it into your script and just make sure your directory structure looks the same same as mine because well that will make a big difference when it comes to this setup anyways we need to add react the first thing we're going to need to do for this is we need to make sure we have npm installed so i'm going to open a new terminal here you can just press the plus sign in vs code to do that we're going to cd into our music controller main directory and then we're just going to type npm now we're not going to init a npm project yet but just go ahead and type npm make sure that command works if it does we're good to go if it doesn't make sure you download and install npm and node.js all right now we're inside a music controller next thing we're going to do is actually create a new app inside of our projects we're not going to call this one app in fact what we're going to call it is frontend because this app is going to store the front end of our project so what we're going to do is go django hyphen admin start app front end like that and now we have a frontend app inside of our directory and this is where we're going to be working now so now we're going to cd into frontend and what we're going to do is create a few folders so the first thing we're going to do is make a static and template folder we're also going to make a source and components folder now this app right here is going to be storing all of the stuff related to our front end so related to actually the react aspect of this project there's a lot of files here this where all the javascript is going to go and just keep that in mind this is strictly for the front end where the api here is strictly for the back end all right so inside of here first thing to do new folder we're going to call this one templates we're going to make another folder as well i'm going to call this one static so our static folder is going to hold all of our static files so pretty much anything that the browser would cache and in fact just so we can separate all of the different things inside of here we're going to make three folders so we're going to make the first folder we're going to call this frontend like that this is going to store our main javascript bundle you'll see how that works in a second now we're going to make another folder make sure you're highlighted over static by the way otherwise you'll make one inside of frontend but inside of static another folder i'm going to call this one css so now we have css front end and finally one last folder you can take a guess out what this one is going to be but it is images so these are the three main things we're going to store inside of the static folder all of our css all of our images and then front end which is just going to actually store the bundle of all of our javascript which will come from our source code which we will see in a second now quickly uh actually yeah we can just go ahead and make this other folder now let's bring another folder inside a front end this one is going to be called src standing for source and then inside of source we're going to make another folder and this one is going to be called components now when we talk about react we have react components those will obviously go inside of the components folder so hopefully that's clear but that is what we have that's kind of our directory structure that's all we need in terms of folders now what we're going to do is init an npm project or whatever it is that that stands for we're going to do mpm init hyphen y and what that is going to do is create a node modules package json and all the other things we need uh for our front end project so npm init hyphen y don't worry if this like doesn't make sense to you and you've never done this before you don't really have to know what all of these files are doing and their purpose you just kind of have to get the setup going and then you'll be able to do all the development that you need so we'll continue with the rest of the setup in just a second but i need to thank the sponsor of this video and this series which is algo expert algo expert is a coding interview prep platform and i can honestly say that it's one of the main reasons i was able to land a job at microsoft in a matter of a few months i was able to get extremely good at coding interview questions from following along with the great video explanations that are on the platform if you're looking to land a software engineering job or just improve your coding ability then go ahead and check out algo expert from the link in the description and use the code tech with tim for a discount on the platform so we have our package.json inside of here that is good our node modules folder actually should come in after we do a few things here so now that we have that what we need to do is install a bunch of stuff from npm so essentially npm is going to store all of kind of the modules like react it's going to store babel it's going to store webpack it's going to do all the things that we need to actually transpile our code and get it ready to run in the browser so the first thing we have here is we want to do npm i and then webpack and then web hack hyphen cli and then hyphen hyphen save dev again don't worry too much about these commands but this is going to install webpack we need webpack what webpack is going to do is take all of our source javascript stuff it's going to i believe transpile it i think that's what it's called or pretty much bundle it into one single javascript file and you'll see how that works later but anyways we're going to do this command once that's done installing i'll be back and we will install the other things all right so the next thing we're going to install is babel now in case you're not sure what babel is essentially it will take our code and transpile it into code that is friendly with all different types of browsers so we're going to be writing with i believe it's es6 or es7 javascript code which is like newer javascript code to put it simply and this will just take our code and transpile it so just kind of convert it into code that will run in older browsers that's what babel does for us so it's nice to have that installed we'll just do it at the beginning beginning why not so we have to deal with it later so npm i and then babel hyphen or sorry not hyphen babble slash core we're also going to do babel loader like that there's a few other things you need to type here so just don't press enter yet babble slash preset hyphen env and then at babel slash i gotta look at my other screen to remember this one this is gonna be preset hyphen react and then i believe the last thing we have to add here is hyphen hyphen save hyphen dev all right so there we go we have this line make sure you type it out like that press enter we're going to install all those things and once that's done i will be back all right i am back now we have a few other things we need to install the next one is pretty obvious we need to install react so we're gonna say npm i react and then react hyphen dom once again save dev so let's run that and there's about three or four more things we need to install i'm just doing them all right now so we don't have to come back to this later on the next one i'm going to install is something called material ui this is just some prebuilt components that we can use to avoid having to style the web page ourself so i'm going to say mpm install at and then material hyphen ui slash core again just some builtin components it has some nice things like cards and grids and all that it's kind of similar to something like bootstrap for example next what we're going to do is say npm install and we're going to install another thing for babel so we're going to say babel slash plugin if i can spell this correctly hyphen proposal class and then property like that okay so i think i spelt all that correctly let's just have a quick double check and let's install that the reason we need this is so we can use async and a weight in our javascript code it's kind of strange that we need to add that but we do and the last thing we need actually is two more things sorry my bad npm install react router hyphen dom this is going to allow us not counter router this is going to allow us to actually reroute the pages so that we can go well two different pages from our react app so react router hyphen dom we need that one and the last one has to do with material ui npm install at material hyphen ui slash icons so pretty straightforward but we just want to get the icons from material ui okay so i think just doing a scan here that's all we need in terms of the npm packages now what we need to do is set up some configuration scripts that are going to actually run and kind of handle our webpack and our babble and all of that now these i'm going to ask you just to copy from the links in the description you can go to the github and find the source code because they're kind of long to type out but the first thing that we're going to do is make a new file i'm going to call this one make sure it's inside of the front end app by the way babel dot config dot json now you can actually do there's another one called dot babel rc if you're aware of how that works then go ahead and use that but i'm going to use the babel.config.json file if that means nothing to you don't worry just follow along with what i'm doing and all we're going to do is paste this inside of here i'm not really going to get into what all this stuff does but it pretty much just sets up the babel loader for us and says hey the presets we're using is the environment preset that's targeting node version 10. it's just because there was a bug in the version that i was using and then at babel preset react pretty straightforward we're using react so we're going to have that preset and then the plugins this is so we can use async and a weight and remember we just installed this thing right here plugin proposal class properties from npm all right so that is babel.config.json you can copy that out or you can find it from again the github or the link in the description next we're going to make another file called webpack.config.json or dot js sorry so let's go inside a frontend let's make a new file let's do webpack dot dot js all right so i'm in webpack.config.json a reminder that what webpack does is actually bundle all of our javascript into one file we can bundle it into multiple files but anyways it just takes all this javascript code we have and makes a bundle of it and then serves that one file to the browser and and you'll see how that works but anyways let's just paste this in this is the configuration for webpack we need a way to determine okay where actually is our javascript file where is the entry javascript file and where should we output this file to we're going to take all of our javascript we're going to read through all of it and we're going to output it somewhere where should i output it well i'm going to output it where i put right here now we're saying our entry point is going to be in the source directory which we have inside of here and then dot or sorry slash index.js now this is a relative path which pretty much means we're just starting from wherever this webpack.config.js file is which is inside of the frontend directory next we have output now we're using path.resolve this is getting the current directory that we're in so the frontend directory and then saying okay and again relative path we want to put this inside of the static frontend folder so if we have a look at static here and we have a look at the frontend folder that's where our output file is going to be the file name is name.js we might have to change this i forget but i'm going to leave it with the brackets right now all right then we have module and we have some rules i'm not going to talk about this but you can see it's saying just simply exclude bundling the node modules folder and we're going to use the babel loader when we do all this next we have optimization what minimize is doing is taking our javascript and minimizing it so just making it smaller the reason we would want to do this is because if we have a lot of javascript it's going to take a long time to load in the browser so if we can get rid of all the you know white spaces and all the other information in the file that we don't need that is best so it's just minimizing for us and then plugins this is doing a very similar thing in terms of optimization i'm not really going to talk about this you're welcome to look up the define plugin if you like all right so now we have webpack.config.js that is all good and now let's move on to the next step so now we're going to do is go to package.json and what we need to do inside of here is where it says scripts we actually need to add two scripts here which are going to run this webpack thing that we just set up essentially so inside of here the first thing we're going to add is we're going to add the dev script and this is going to be equal to web oops and i need double quotations i'm going to be equal to webpack hyphen hyphen mode development and then hyphen hyphen watch what this is going to do is pretty much tell us hey we want webpack to run we want to run in the development mode and we want it to be in watch mode now just like the server that we were running before so that python script this will just watch for changes to our javascript files and then automatically recon recompile or rebundle or whatever you want to call it the output javascript file so that bundled file so that we can just refresh our browser and everything will be all good next we're going to add a build script so i think i need to separate this with a comma i'm going to say build colon and double quotation marks webpack hyphen hyphen mode only thing we're going to change here is is going to be production and we're not going to add the watch so that is all good and i think we can move forward now all right so let's get rid of that and now actually let's go inside of our src file and let's make our entry javascript file so inside of src make a new file i'm going to call this index.js like that so we're pretty much done our setup at this point in terms of all of this random gibberish stuff that doesn't make any sense with the babel and webpack and all that but what we need to do now is actually make it so that our django app will render a page that react will take control of so this seems kind of strange and if you haven't used django or react before then this isn't really going to make much sense but the idea here is that we're going to have our django application render a template which is just going to be some vanilla plain html and then our react code is going to take over that template and actually fill it in so we will technically have the django backend actually rendering the template but then react will manage it after that so you'll see how that works when we start doing it but i'm just going to go inside of the templates folder right here and i'm going to make another folder this is strange again called front end and inside of frontend i'm going to make a file and i'm just going to call this index.html now inside of here we're just going to fill in a few things so we'll just make our standard html file so doctype html we'll make our html opening tag html closing tag let's make our head opening tag and head closing tag and same thing with body okay now inside of head we'll add the standard stuff so we'll add our meta tag and we'll say char set equals utf8 we'll add another meta tag inside of here we'll say name equals viewport like that and then the content equals and again you guys can copy this stuff from the link in the description if you don't want to type it out but width equals device hyphen width comma initial scale equals one okay our snippets came in there and oops we want to close this meta tag at the end there do we need any other meta tags i think that's it for our meta tags but now we'll add a title tag inside of title we will simply say you know music controller or whatever you want the title to be i'm going to add something inside of here which i'll discuss in a second it's going to say load static what this will do is load our static files our static folder which will allow us essentially to look at the javascript code that we're going to be bundling now we also need to add a few other things in here i'm just going to copy them in and again i'm going to ask that you guys just copy this from the link in the description because it's not really worth me typing out the url but here let's let's zoom out a little bit so we can read all this these are just some scripts and style sheets that we need so remember we're using material ui this is kind of like a component library that comes with some cool builtin stuff but we need to import their style sheet we also need to import our own style sheet which we'll create in just one second and then we need the font for material ui we also need jquery i believe i have two versions of jquery jquery here so i'm going to get rid of the one that's the lower version i don't know why i have two there and that should be good all right so now that we have that we're going to have to add a few small things but this should be pretty straightforward we're going to go into the body we're going to make a div i'm going to say this div id equals and let's go main let's end that div and then we're going to make another div this is the div that reacts actually going to take care of we're going to say div id equals app so the idea here is that we have this main div i'll talk about why we have that later when we start doing some more styling and then we have this app div and what will happen is well our react code is going to go inside of this div so react will kind of grab this app div and this is where it will render all of its components and show everything on the screen last thing we need to do i think i can actually type this one out just at the end of the body we're going to make a script tag and we're going to load the main js file that we're going to be using as our bundle so we're going to say source equals and then inside of here we're going to go percent percent static like that and believe the quotations can stay there and then we're going to do another two quotation marks strangely enough and go front end slash main dot js so what this is saying is essentially like whatever the static folder is which we've loaded here let's use that and then we're going to combine that with frontend slash main.js and we're going to load that script now i need to end the script tag so i think i can do that but just note that what this is doing is it's going to be grabbing our bundled javascript which will hold all of our react code from static front end and loading that inside of here so that this actually works right in react can actually take over this div again this all will come together as we go through but i'm just trying to explain it step by step okay so now that we have index.html that is all good i don't want to get ahead of ourselves so let's actually now render the view or render this template and then we'll write a little bit of react code i'm noticing that for some reason these tags aren't working so i think i need to just end the script i can end the script like that guess i can't do the slash to end it okay so now that we've done that let's go into the views file in our front end now what we're going to do inside of the views of our front end may seem a little strange but we need to just render this index template and then let react take care of it so inside of here i'm going to say define index i'm going to take a request i'm going to take star args and star star quarks and then i'm going to return a render which you can see is up there of a template so we're going to render request and then inside of here we're going to say front end like that slash index.html now what this is going to do is essentially allow us to just render this index template that we have right here and then react will take care of that and start rendering things inside of this notice that the folder is called frontend and what am i referencing frontend index.html which is the name of my html file what render will do is it will take the request it will take the template and it will simply return that html to uh whatever sent the request all right so now that we have that we just need to make a url for this so let's go to urls and in fact we don't have a urls file in here so we can create a new one let's go new file urls.pi and now let's go to musiccontroller let's go into this url and now let's add some more urls in here so let's say path and we're just going to have an empty path and now that is going to go to you guessed it the frontend dot urls so whenever we type a url that's not api or not admin we want to send it to frontend.urls that way we can then handle the urls from the front end and the reason we need that is because we just you'll see in a second it's hard to describe until we get further into the app but the front end here has its own urls as opposed from the api urls and those urls are kind of forwardfacing that's what the user will actually see whereas the api ones will be used by the react code kind of internally in a sense so anyways let's go to this urls file i'm just going to actually copy this one because it makes it a bit easier we'll paste it inside of here again we don't need the admin we don't need the include so we can get rid of all of that and now we have slash or empty path and what we're going to do here is say from dot views imports and i think we named it index yeah i believe it was named index and we'll simply put index right there so now we will render the index template whenever we have a blank path that will kind of be our home page quote unquote all right we're getting very close to being done i know this is pretty painful but this is what is required and what we have to do next what we're going to do is simply make our first react component and show that on the screen and hopefully then we will be done with this setup in this tutorial so let's go into components let's make a component called app.js and now let's start writing some react code so don't worry if this doesn't make any sense to you right now we will discuss this more later we're going to import react comma component from the react module like that then we'll have a semicolon and then we'll import render from react dom react dom standing for obviously the html dom that we're going to be using and then what we can do is make a class we're going to say export default class app extends component this is just how you set up a class in react the export default we could do somewhere else but i'm just going to do it right in line so that this app is the default export from this file i'm going to make a constructor that's going to take props and then we're going to call the super using those props again you don't have to know what this means this is just the initial setup and then finally we'll make a render method and we'll say render and we will return just for simplicity's sake we'll return an h1 tag so let's say h1 testing react code and no let's end the h1 tag like come on give me the ending h1t okay so i think that is good now that we have that all we need to do is actually render this component inside of that div in index html so in case you're unfamiliar with react what happens is we make a main component that component will return something like whatever is going to exist in that place and then we just put that component in a div or in some id container and then that way it will have whatever is here inside of in our case the app container so to do this we need to access the app container which is pretty straightforward we're just going to say app i guess app a div equals and we'll have to put a const before this so const active equals document.getelementbyid and inside of here we'll simply use app now what we can do is render the app component inside of the app div now we're very very close to done we have the app component we just need to now put this into essentially our index.js file and the way that we can actually get this to work is we can simply say import app from and then dot slash components slash app that should be it let me make sure that i did this correctly and now our entry file is importing this file so when we import this file it will run this code and it will render this app in this index.html template now what we have to do is we have to actually first of all make sure that our server is running properly because it looks like i messed something up so let's run this here and okay so our server is running now what we need to do is run that script that we put inside of our package json so the webpack module development watch what should happen is it should look at our index.js file it should see that we're importing app it should bundle this stuff together it should output something to static front end and that file should be called main.js although i think i'm gonna have to change something to get that to work and then we'll go to the url endpoint and we should see this popping up i know again confusing but let's run this oops we're going to do npm run dev the way this works is if we have a look at our package.json the script is named dev run is running a script so we say npm run dev if we want to run build we would type build let's run this and let's see if we get any errors or if this works okay so that actually worked you can see that by default it calls our file main.js which is good that's what we want it to be and now if we have a look inside a front end what do we get we have this main.js file with all of this gibberish which is simply the bundled up javascript so that is how that works and now watch if i save this file notice that the watcher ran recompiled the thing and we're good to go so now if all of this worked well and i wouldn't be surprised if it didn't we can go here to the home page and oh template does not exist at slash all right so we're getting this error saying template does not exist i just had a quick look into this and it's a very silly mistake on my point or on my part we need to go into settings.pi and we need to add the frontend app to our installed applications i forgot to do that in fact i think i passed by them but if we go to yeah if we go to install apps you can see i haven't added front end inside of here so let's go ahead and do that and we'll do it the same way we did before so we'll say front end dot apps dot front end config all right so now that should be in our installed apps and saying it does not contain front end config oh let's just save that one more time rerun it and all looks good okay so now with any luck if we go back here and we refresh this should be working and there we go we get testing react code so there we go we have our component working react is working fine now we have both these scripts going in watch mode and all we have to do is just start developing we can write all of our react related stuff and it will show up on this page now obviously still gets a little bit more complicated after this but that is the bulk of the setup i apologize if this was kind of all over the place but it is hard to explain this stuff and well i hope that you guys were able to get it working any issues please do leave a comment again code in the description if you enjoyed make sure you leave a like subscribe to the channel and i will see you in the next video
