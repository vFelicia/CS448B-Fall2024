With timestamps:

00:00 - flask Django or fast API this is the
00:03 - question you should be asking yourself
00:04 - if you're interested in Python web
00:06 - development in this video I'm going to
00:08 - break down everything you need to know
00:09 - about these three different Frameworks
00:11 - and tell you which one you should pick
00:13 - depending on your use case now let's get
00:16 - started with flask this is a lightweight
00:18 - wsgi web application framework that's
00:21 - easy to get started with and highly
00:23 - customizable it's a minimalist framework
00:25 - with extendable features and it's great
00:27 - for building small to mediumsized apps
00:29 - like micro Services next we move on to D
00:31 - Jango now this is a highlevel python web
00:34 - framework that comes with a ton of
00:35 - features out of the box it includes an
00:38 - omm forms authentication routing and
00:41 - more Jango is ideal for handling complex
00:44 - web applications because of its
00:46 - conventional project structure and all
00:48 - of the features that are built into the
00:49 - framework saving you a ton of time
00:51 - lastly we move on to fast API now this
00:54 - is a modern high performance web
00:56 - framework for building apis with
00:58 - standard python type it has support for
01:01 - asynchronous programming automatic data
01:03 - validation and generation of open API
01:06 - documentation this is great for quickly
01:08 - building apis that are self-documenting
01:10 - and really fast in performance so now
01:13 - that we have an overview of these
01:14 - various Frameworks I'm going to start
01:16 - going through some very specific
01:17 - comparison criteria so you can
01:19 - understand exactly which one to pick
01:21 - depending on your use case however if
01:23 - you are going to build out a project
01:25 - using one of these Frameworks you're
01:27 - probably going to want to be utilizing
01:28 - an IDE and not not just because idees
01:31 - can make your life so much easier but
01:33 - because experience with them is actually
01:35 - something a lot of recruiters are
01:36 - looking for now there's all kinds of
01:38 - basic code editors to pick from but if
01:40 - you really want to get to the
01:41 - professional level then you should
01:42 - utilize Jeet brains IDE which is the
01:45 - sponsor of this video whether you're
01:47 - working in Python go rust Java you name
01:51 - it Jeet brains has a fully featured
01:53 - professional IDE for you these idees
01:55 - offer the best performance and speed and
01:57 - have impressive user interfaces take
02:00 - advantage of integrated debuggers code
02:02 - analysis quick fixes and incredible AI
02:05 - assistance that supercharge your
02:06 - workflow not to mention features like
02:08 - instant search and navigation and an
02:10 - insane amount of plugins to customize
02:12 - your environment as you scale up and
02:14 - work on larger and larger projects the
02:16 - importance of an IDE becomes clear you
02:19 - should really start building strong
02:20 - habits Now by utilizing professional jet
02:23 - brains idees and taking advantage of
02:25 - these powerful tools from the link in
02:27 - the description so let's start comparing
02:29 - these Frameworks beginning with ease of
02:31 - learning now we start with flask this is
02:34 - by far the easiest to learn and in just
02:36 - a few minutes you can have a fully
02:37 - functioning API or website it's very
02:40 - simple and easy to use there's not a lot
02:42 - of setup or a ton of settings that you
02:44 - need to go through and if you're just
02:45 - trying to build something very simple I
02:47 - definitely recommend sticking with flask
02:50 - moving on from that we go to fast API
02:52 - now fast API is more of an intermediate
02:55 - difficulty there are more Concepts that
02:56 - you need to learn you need to understand
02:58 - asynchronous programming and it's
03:00 - helpful to also understand pantic and
03:02 - how you use the python type hint system
03:05 - fast API is a lot more powerful and it
03:07 - can provide automatic documentation and
03:09 - data validation which can be really
03:11 - really helpful but it does take a little
03:13 - bit longer to set up and can be slightly
03:15 - more complicated lastly we move on to D
03:17 - Jango now this is by far the most
03:20 - complicated because it has so many
03:21 - features built in that means just to get
03:23 - a simple D Jango website set up can
03:25 - actually take 20 or 30 minutes if you're
03:28 - learning this completely from scratch
03:29 - it's definitely going to take you a few
03:31 - days or a few weeks to really understand
03:33 - all of the different features and how
03:34 - all of the components work together that
03:37 - said D jeno is definitely worth learning
03:39 - and if you're going to be building
03:40 - something more complicated and with a
03:41 - lot of data I definitely recommend going
03:44 - down that path just understand it will
03:46 - take you a little bit longer as there's
03:47 - a lot of things you need to learn to get
03:49 - started with Jango so now we can get
03:51 - into performance starting with flask now
03:54 - flask has good performance overall but
03:56 - it's not the best for high load
03:58 - applications the reason for that is it's
04:00 - built in a synchronous context meaning
04:03 - it's not going to handle multiple
04:04 - requests at the exact same time like
04:06 - some other web Frameworks next we have
04:09 - fast API now fast API out of all of the
04:12 - Frameworks here is by far the fastest
04:14 - it's Superior to all of them and the
04:16 - reason for that is it's built
04:17 - asynchronously meaning it can scale and
04:19 - it can handle multiple requests at the
04:21 - exact same time lastly we move on to D
04:24 - Jango now Django is the slowest of the
04:26 - three Frameworks due to its
04:28 - comprehensive nature however it is still
04:30 - very reliable for large applications and
04:32 - a lot of huge companies still use Django
04:35 - despite the fact that it's not the
04:36 - fastest out there in summary if you're
04:38 - really looking for the absolute best
04:40 - performance and you're building
04:41 - something like an API then definitely
04:43 - choose fast API but for most of you this
04:46 - isn't going to matter a ton so simply
04:48 - pick the one that's easiest to use or
04:50 - best suited for your project so now
04:52 - we're going to dive into the use cases
04:54 - starting with flask now flask for me is
04:56 - what I use when I want to build
04:57 - something really quickly and I don't
04:59 - want to deal with a ton of configuration
05:01 - or spend a lot of time setting up a
05:02 - server if I need a really fast web
05:05 - server if I want to get something done
05:06 - in just a few minutes I'll definitely
05:08 - turn to flask and even for slightly
05:10 - larger hobby projects flask is still
05:12 - totally fine personally for me it's not
05:14 - something I would use in production
05:16 - unless it was doing a really simple task
05:18 - and that's because there are better more
05:20 - performant options out there but a lot
05:22 - of times in my development environment
05:23 - I'll need a simple API and I'll turn to
05:26 - flask because I know it's the fastest
05:28 - for me to get something set up with it's
05:30 - great to start with if you're a complete
05:31 - beginner it's good for prototyping and
05:33 - you can really use it to learn the
05:35 - fundamentals of web development next we
05:37 - move on to D Jango now Jango is best
05:39 - when you're building a large monolithic
05:41 - application and you need a lot of
05:43 - built-in features like a CMS
05:45 - authentication and om Etc now it's worth
05:49 - noting that with a framework like flask
05:51 - you can actually have extensions or
05:52 - additional python packages they provide
05:55 - some of the same functionality but it's
05:57 - not as conventional to use them and it
05:59 - can get a a little bit messy when you're
06:00 - building a really large app so that's
06:02 - personally why I prefer D Jango Django
06:05 - has a lot of settings and configuration
06:07 - built in a lot of things you already
06:09 - know how to do because it's simply built
06:11 - into the framework when you start
06:12 - building something larger and you maybe
06:14 - have multiple developers on your team
06:16 - it's a lot easier to work with something
06:18 - that has the conventions built in like d
06:20 - Jango and all of the features already
06:22 - wrapped into the framework Jango is
06:24 - really good when you're dealing with a
06:25 - lot of data it has again something
06:27 - called an OM which is an object
06:29 - relational mapping and it allows you to
06:31 - utilize databases just like a normal
06:33 - python object which can make it really
06:35 - easy to do development and manage large
06:37 - amounts of data that said it also has
06:39 - all of that data that you can add to an
06:41 - admin panel so you have a built-in CMS
06:44 - and overall it's just better when you're
06:45 - dealing with a lot of data and you have
06:47 - these larger applications now lastly we
06:50 - move on to fast API fast API is really
06:53 - the choice to go with if you're trying
06:54 - to build a high performant API now with
06:57 - both flask and Django you can build API
06:59 - as well or you can just build a normal
07:01 - website where you're rendering HTML and
07:03 - pages but really if you want the fastest
07:06 - API you can possibly have then fast API
07:08 - is the one to go with it has automatic
07:10 - data validation automatic documentation
07:13 - which is super super helpful especially
07:15 - as you scale up and it has asynchronous
07:17 - programming built in which is really
07:18 - what provides it all of that speed so
07:21 - overall flask for something simple
07:23 - prototyping getting a hobby project up
07:25 - and running Jango for something a little
07:27 - more professional where you need those
07:28 - built-in features and then fast API when
07:31 - you want a high performance scalable API
07:33 - so now we move on to community and
07:35 - ecosystem now all three of these are
07:37 - very large well-known python Frameworks
07:40 - they have a huge Community behind them
07:42 - and all of them have additional
07:43 - extensions add-ons plugins Etc that you
07:47 - can add to have additional functionality
07:49 - in each framework for example something
07:51 - like flask even though it doesn't have a
07:53 - ton of features built in there's all
07:55 - kinds of packages you can install they
07:57 - provide that additional functionality
07:59 - for example you want authentication in
08:01 - flask you can simply install a package
08:03 - and now you have flask authentication
08:05 - you just need to do a little bit of
08:07 - configuration same thing for Django same
08:09 - thing for fast API so I wouldn't pick
08:11 - one of these three packages or one of
08:13 - these three Frameworks sory simply
08:15 - because they have a larger Community or
08:16 - ecosystem all of them are very wellknown
08:19 - all kinds of resources on the internet
08:21 - and they're used for very large projects
08:23 - some of which you've probably interacted
08:25 - with so now we're going to get into job
08:27 - demand and which of these you should
08:28 - learn if you are looking to land a
08:30 - developer role now bluntly Django is
08:32 - going to be the most popular here and
08:34 - it's going to show up in the most job
08:36 - requirements that's because this is the
08:38 - larger of the Frameworks it's used for a
08:40 - lot of larger or midsize companies and
08:42 - this is really just what a lot of people
08:44 - go to when they're trying to build a
08:46 - website or some kind of backend service
08:48 - with python so if you are looking to
08:50 - land a roll simply learn Jango that's
08:52 - going to be your best bet not to say
08:54 - that flask and fast API don't have some
08:56 - demand in the market they do and they're
08:58 - increasingly popping up especially for
09:00 - the smaller companies or startups but
09:02 - most of the time you're going to be
09:03 - seeing Jango listed as that primary
09:05 - framework overall I would say it's worth
09:07 - it just to learn them all D Jango will
09:09 - definitely take you the most amount of
09:11 - time but picking up something like Fast
09:13 - API or flask is going to be pretty fast
09:15 - and it can have an added benefit when
09:17 - you are applying to jobs so there you
09:19 - are that's my breakdown of flask Jango
09:21 - and fast API flask for simple web apps
09:24 - where you're prototyping or building
09:26 - something quickly D Jango for more
09:28 - complicated dated driven applications
09:30 - and fast API for building that fast
09:32 - scalable API with python if you enjoyed
09:35 - this video make sure you leave a like
09:37 - subscribe to the channel and I will see
09:39 - you in the next one
09:42 - [Music]

Cleaned transcript:

flask Django or fast API this is the question you should be asking yourself if you're interested in Python web development in this video I'm going to break down everything you need to know about these three different Frameworks and tell you which one you should pick depending on your use case now let's get started with flask this is a lightweight wsgi web application framework that's easy to get started with and highly customizable it's a minimalist framework with extendable features and it's great for building small to mediumsized apps like micro Services next we move on to D Jango now this is a highlevel python web framework that comes with a ton of features out of the box it includes an omm forms authentication routing and more Jango is ideal for handling complex web applications because of its conventional project structure and all of the features that are built into the framework saving you a ton of time lastly we move on to fast API now this is a modern high performance web framework for building apis with standard python type it has support for asynchronous programming automatic data validation and generation of open API documentation this is great for quickly building apis that are selfdocumenting and really fast in performance so now that we have an overview of these various Frameworks I'm going to start going through some very specific comparison criteria so you can understand exactly which one to pick depending on your use case however if you are going to build out a project using one of these Frameworks you're probably going to want to be utilizing an IDE and not not just because idees can make your life so much easier but because experience with them is actually something a lot of recruiters are looking for now there's all kinds of basic code editors to pick from but if you really want to get to the professional level then you should utilize Jeet brains IDE which is the sponsor of this video whether you're working in Python go rust Java you name it Jeet brains has a fully featured professional IDE for you these idees offer the best performance and speed and have impressive user interfaces take advantage of integrated debuggers code analysis quick fixes and incredible AI assistance that supercharge your workflow not to mention features like instant search and navigation and an insane amount of plugins to customize your environment as you scale up and work on larger and larger projects the importance of an IDE becomes clear you should really start building strong habits Now by utilizing professional jet brains idees and taking advantage of these powerful tools from the link in the description so let's start comparing these Frameworks beginning with ease of learning now we start with flask this is by far the easiest to learn and in just a few minutes you can have a fully functioning API or website it's very simple and easy to use there's not a lot of setup or a ton of settings that you need to go through and if you're just trying to build something very simple I definitely recommend sticking with flask moving on from that we go to fast API now fast API is more of an intermediate difficulty there are more Concepts that you need to learn you need to understand asynchronous programming and it's helpful to also understand pantic and how you use the python type hint system fast API is a lot more powerful and it can provide automatic documentation and data validation which can be really really helpful but it does take a little bit longer to set up and can be slightly more complicated lastly we move on to D Jango now this is by far the most complicated because it has so many features built in that means just to get a simple D Jango website set up can actually take 20 or 30 minutes if you're learning this completely from scratch it's definitely going to take you a few days or a few weeks to really understand all of the different features and how all of the components work together that said D jeno is definitely worth learning and if you're going to be building something more complicated and with a lot of data I definitely recommend going down that path just understand it will take you a little bit longer as there's a lot of things you need to learn to get started with Jango so now we can get into performance starting with flask now flask has good performance overall but it's not the best for high load applications the reason for that is it's built in a synchronous context meaning it's not going to handle multiple requests at the exact same time like some other web Frameworks next we have fast API now fast API out of all of the Frameworks here is by far the fastest it's Superior to all of them and the reason for that is it's built asynchronously meaning it can scale and it can handle multiple requests at the exact same time lastly we move on to D Jango now Django is the slowest of the three Frameworks due to its comprehensive nature however it is still very reliable for large applications and a lot of huge companies still use Django despite the fact that it's not the fastest out there in summary if you're really looking for the absolute best performance and you're building something like an API then definitely choose fast API but for most of you this isn't going to matter a ton so simply pick the one that's easiest to use or best suited for your project so now we're going to dive into the use cases starting with flask now flask for me is what I use when I want to build something really quickly and I don't want to deal with a ton of configuration or spend a lot of time setting up a server if I need a really fast web server if I want to get something done in just a few minutes I'll definitely turn to flask and even for slightly larger hobby projects flask is still totally fine personally for me it's not something I would use in production unless it was doing a really simple task and that's because there are better more performant options out there but a lot of times in my development environment I'll need a simple API and I'll turn to flask because I know it's the fastest for me to get something set up with it's great to start with if you're a complete beginner it's good for prototyping and you can really use it to learn the fundamentals of web development next we move on to D Jango now Jango is best when you're building a large monolithic application and you need a lot of builtin features like a CMS authentication and om Etc now it's worth noting that with a framework like flask you can actually have extensions or additional python packages they provide some of the same functionality but it's not as conventional to use them and it can get a a little bit messy when you're building a really large app so that's personally why I prefer D Jango Django has a lot of settings and configuration built in a lot of things you already know how to do because it's simply built into the framework when you start building something larger and you maybe have multiple developers on your team it's a lot easier to work with something that has the conventions built in like d Jango and all of the features already wrapped into the framework Jango is really good when you're dealing with a lot of data it has again something called an OM which is an object relational mapping and it allows you to utilize databases just like a normal python object which can make it really easy to do development and manage large amounts of data that said it also has all of that data that you can add to an admin panel so you have a builtin CMS and overall it's just better when you're dealing with a lot of data and you have these larger applications now lastly we move on to fast API fast API is really the choice to go with if you're trying to build a high performant API now with both flask and Django you can build API as well or you can just build a normal website where you're rendering HTML and pages but really if you want the fastest API you can possibly have then fast API is the one to go with it has automatic data validation automatic documentation which is super super helpful especially as you scale up and it has asynchronous programming built in which is really what provides it all of that speed so overall flask for something simple prototyping getting a hobby project up and running Jango for something a little more professional where you need those builtin features and then fast API when you want a high performance scalable API so now we move on to community and ecosystem now all three of these are very large wellknown python Frameworks they have a huge Community behind them and all of them have additional extensions addons plugins Etc that you can add to have additional functionality in each framework for example something like flask even though it doesn't have a ton of features built in there's all kinds of packages you can install they provide that additional functionality for example you want authentication in flask you can simply install a package and now you have flask authentication you just need to do a little bit of configuration same thing for Django same thing for fast API so I wouldn't pick one of these three packages or one of these three Frameworks sory simply because they have a larger Community or ecosystem all of them are very wellknown all kinds of resources on the internet and they're used for very large projects some of which you've probably interacted with so now we're going to get into job demand and which of these you should learn if you are looking to land a developer role now bluntly Django is going to be the most popular here and it's going to show up in the most job requirements that's because this is the larger of the Frameworks it's used for a lot of larger or midsize companies and this is really just what a lot of people go to when they're trying to build a website or some kind of backend service with python so if you are looking to land a roll simply learn Jango that's going to be your best bet not to say that flask and fast API don't have some demand in the market they do and they're increasingly popping up especially for the smaller companies or startups but most of the time you're going to be seeing Jango listed as that primary framework overall I would say it's worth it just to learn them all D Jango will definitely take you the most amount of time but picking up something like Fast API or flask is going to be pretty fast and it can have an added benefit when you are applying to jobs so there you are that's my breakdown of flask Jango and fast API flask for simple web apps where you're prototyping or building something quickly D Jango for more complicated dated driven applications and fast API for building that fast scalable API with python if you enjoyed this video make sure you leave a like subscribe to the channel and I will see you in the next one
