With timestamps:

00:00 - hey guys and welcome back to another
00:01 - Java programming tutorial so in today's
00:03 - video we are going to be introducing
00:05 - object-oriented programming and talking
00:08 - about what objects are and getting a
00:10 - little bit into classes and methods so I
00:13 - think the first thing to really talk
00:14 - about is what is an object so an object
00:17 - essentially is just an instance of a
00:20 - certain data type so we know we have
00:22 - data types like in strings bulls
00:24 - scanners like all kinds of different
00:26 - things that we can use like a ray list
00:27 - hash table hash list whatever a hash map
00:31 - all that stuff okay and those are all
00:33 - known as data types right where classes
00:36 - if you want to say that so whenever we
00:38 - create an instance by doing something
00:39 - like this like scanner SC equals new
00:41 - scanner essentially what we're doing is
00:44 - pointing this variable SC to an ER
00:47 - object okay and whenever we create any
00:50 - kind of variable selectors type like int
00:52 - x equals 5 we're essentially saying X is
00:55 - equal to an int object of value 5 okay
00:59 - and these objects are what allow us to
01:01 - have different properties for different
01:04 - data types so you know how we can add
01:06 - integers together or how we can do like
01:08 - dot parse int on on strings and we can
01:12 - have like a bunch of different methods
01:13 - and stuff those are all specific to the
01:15 - type of object that we're using so for
01:19 - example we can see here I have the
01:21 - scanner object right so SC is equal to a
01:23 - new scanner object this taking system
01:25 - not in as an argument okay
01:27 - so we can only use this dot next method
01:30 - on SC because it is a scanner type if I
01:33 - try to do X dot next and I do a little
01:36 - semicolon here you can see that we're
01:38 - getting can't invoke next method on
01:40 - primitive type int because well that
01:42 - method doesn't exist for int okay and
01:45 - that's like a really basic way to kind
01:47 - of understand what objects are
01:49 - essentially whenever we're creating a
01:51 - new variable so like even just doing
01:52 - like string like STR equals hello what
01:56 - we're doing is we're saying well STR is
01:58 - actually equal to a string object with
02:01 - the value alone and because our based on
02:05 - the different types of objects we have
02:06 - different properties different
02:08 - attributes things we can do with the
02:09 - methods we can call and that's just kind
02:12 - of important under
02:13 - you'll see more how we create like
02:14 - objects and whatnot that are specific to
02:18 - like classes that we're gonna make in
02:19 - later videos okay so it'll all start to
02:21 - come together but just now kind of know
02:23 - that when I'm calling things objects
02:25 - essentially that's like you have a
02:26 - variable of a certain type and it's
02:28 - equal to something you're creating an
02:29 - object of that type okay that's all we
02:31 - can have to understand for now so now
02:34 - let's talk about methods so some of you
02:36 - may already understand what methods are
02:37 - because I think I went through a very
02:38 - brief like explanation of them in
02:41 - previous videos but essentially methods
02:43 - or anything that you call on an object
02:46 - or on an instance of an object so just
02:48 - to clarify when instances when were
02:50 - creating a variable like this of a new
02:52 - scanner object we can say that we're
02:53 - creating FC is now an object like a
02:55 - scanner object or we can say SC is a new
02:59 - instance of scanner of like the type of
03:02 - scanner and those kind of are
03:03 - interchangeable so if I say instance
03:05 - instead of object they're very similar
03:07 - okay so just bear with me on that so
03:10 - anyways when we call this daunt next
03:13 - method we call it on the lake variable
03:17 - right so that's that's pointing to our
03:18 - scanner object so our scanner object
03:20 - allows us to use this method again I
03:23 - showed you before if I tried to call
03:25 - that on for example the variable X that
03:27 - was like an integer that doesn't work
03:29 - because that object doesn't have that
03:32 - method associated with it so a method is
03:35 - anything really that's just like a dot
03:36 - and then whatever the method name is and
03:38 - typically brackets for example if we had
03:40 - like an array like say we have or let's
03:43 - do actually a string so we're just gonna
03:45 - take another string probably shouldn't
03:46 - delete uno these but that's okay we'll
03:48 - say string H equals hello and I can do
03:50 - something like H dot length and this is
03:53 - a method that simply returns to us the
03:55 - length of the string and again this
03:57 - works on our object which is a string
04:00 - but it's not going to work on our SC
04:02 - because well what is the length of a
04:04 - scanner so if I type that you can see
04:06 - that we're getting this red line here
04:08 - and that's obviously not giving us
04:09 - anything because this length method is
04:11 - not defined for a scanner type so that's
04:14 - kind of a bit about like how we call
04:15 - methods and you guys have already seen a
04:17 - lot of different examples of methods
04:19 - that we can use on different objects and
04:21 - different data types okay and same thing
04:23 - when I say like data types an object
04:25 - data types are kind of like what the
04:27 - object is created off of and you'll see
04:30 - that more in in future videos just want
04:32 - to clarify in case anyone's kind of
04:33 - confused okay so how can we create our
04:36 - own methods well currently since we
04:38 - don't really know anything about classes
04:40 - we're gonna be creating methods inside
04:41 - of this main class okay now this main
04:43 - class is special because it is it
04:46 - contains this method and remember I was
04:48 - telling you guys at the beginning this
04:50 - method automatically runs whenever we
04:52 - run the program well that's different
04:54 - than other methods we're gonna have in
04:56 - classes we create in future videos so
04:57 - it's a bit hard to explain this method
04:59 - per se but this is a method because a
05:01 - method is typically anything that sits
05:03 - inside of a class and the class is
05:05 - what's going to define like our data
05:07 - types so scanner in Java we can't see it
05:11 - right now there's actually somewhere
05:12 - that says public class scanner and
05:16 - inside of that scanner class so if you
05:18 - do like brackets like this it has a ton
05:21 - of different methods a ton of different
05:22 - attributes that we can use by calling
05:25 - them from within this function okay so
05:27 - if we want to create our own method
05:29 - within this main class what we can do
05:32 - and this is just the default way that
05:34 - we're gonna do it for now I'm gonna show
05:35 - you why we use certain keywords and
05:36 - stuff in future videos but it's a bit
05:38 - advanced right now we're something n
05:40 - type public static okay and then
05:44 - whatever return type we want which we'll
05:47 - talk about in a second so let's get I'm
05:49 - gonna do void and then the name of our
05:51 - method so in this case I'm going to say
05:52 - hey like Tim okay so we have a public
05:56 - static void tim has zero parameters
05:58 - again talk about that in a second and
06:00 - then it's gonna do something in here in
06:02 - this case I'm just gonna say system dot
06:04 - out dot println and we'll just say when
06:09 - you call it it just says Tim like that
06:11 - okay so what I've essentially done here
06:14 - is create a static method that we can
06:17 - call from anywhere within this class
06:19 - okay
06:20 - and actually outside of the class as
06:21 - well so what we need to do to call this
06:24 - method from inside this class is we can
06:26 - literally just type the method names in
06:29 - this case my type Tim and I put a
06:32 - semicolon like that and we around the
06:34 - program you see that we get is it
06:37 - running
06:38 - one second here sorry okay so I figured
06:41 - out why it wasn't working because we had
06:43 - this scx coming in here so I'm just
06:45 - gonna comment that out for right now and
06:48 - we will run this one more time and you
06:50 - can see that we get Tim to the screen
06:52 - now I know I didn't really explain what
06:53 - this is or how this worked but
06:54 - essentially what I've done here is I've
06:56 - created kind of like a function okay and
06:59 - it's known as a method but in other
07:01 - programming languages you might see this
07:02 - as a function and this void keyword what
07:05 - this means here is it returns nothing
07:07 - okay because in functions we can
07:08 - actually return values which I'm going
07:10 - to show or sorry functions methods we
07:11 - can return values which I'm going to
07:13 - show you in just a second so this stands
07:14 - for we are going to not return anything
07:17 - we're just gonna do something in here so
07:18 - in this case we're just printing
07:19 - something to the screen all right now we
07:21 - have Tim and this is the name of our
07:24 - method and that's what we call here to
07:26 - trigger this to run right so if I wanted
07:30 - to pass some information to Tim so say I
07:32 - wanted to print whatever string I passed
07:34 - to Tim well what I would do in here is I
07:37 - would type string and then let's just
07:40 - say STR like that and now this means
07:43 - that whenever we call this Tim method we
07:46 - have to actually pass it one piece of
07:48 - information and that piece of
07:49 - information has to be a string okay so
07:51 - I'm gonna show you right here
07:53 - so I type STR put 10 and I put 10 in
07:57 - here like this
07:58 - okay and we run the program now we see
08:00 - we're printing out Tim if I change this
08:02 - like with a bunch of MS you can see if
08:04 - we run this we're getting Tim now the
08:06 - way that this works is this is called a
08:09 - parameter so STR is a parameter of type
08:11 - string and that means that whenever we
08:14 - call this function we have to type in
08:17 - arguments and what arguments are is what
08:20 - the parameter is going to be when we get
08:22 - to the the method so anything that goes
08:24 - in here in the call statement which is
08:26 - what this is known as we're we're like
08:27 - triggering the method to run is known as
08:29 - an argument okay so Tim is an argument
08:32 - when we call this what's happening is
08:34 - we're passing Tim as STR so now it's
08:36 - saying like STR equals Tim like the head
08:39 - or whatever the string is okay and then
08:41 - we're simply going to print to the
08:43 - screen whatever it is that we were
08:45 - passed so in this case Tim right now we
08:48 - can actually do multiple parameters as
08:50 - well so if I wanted to do
08:52 - another parameter I wanted to pass two
08:53 - pieces of information every time we call
08:55 - this function I would say maybe int and
08:57 - X okay and now it means that I have to
09:00 - pass not only a string but I have to
09:03 - pass an int so that means we have to
09:05 - type an integer here in this case I'm
09:06 - gonna do for what I'm gonna do now
09:08 - you're going to say four and we'll say
09:10 - int I and we'll say I is less than X I
09:15 - will say I plus plus we're just going to
09:18 - print this that many times okay so let's
09:22 - see here
09:23 - boom okay so system dot out dot print
09:26 - line
09:26 - what's we're begin here initialized
09:28 - variable I've got to do that sorry okay
09:30 - so now we pass an int and we pass a
09:33 - string and what we're going to do is
09:34 - simply print this as many times as like
09:36 - the int that we typed in okay so you can
09:39 - see that now we get ten four times to
09:41 - the screen and that's how that works so
09:43 - we have arguments in here the two
09:44 - arguments are Tim and four and then we
09:47 - have our parameters which are STR and X
09:49 - and when we pass our information and STR
09:51 - gets equal to Tim and X gets equal to
09:53 - four
09:54 - okay and then in here we can now use
09:55 - those values by referencing STR and X
09:59 - like I've done so okay so I hope that
10:01 - makes sense
10:02 - now in terms of this public static I'm
10:05 - gonna talk about this in the next video
10:06 - for right now all this means is that you
10:08 - can call this not on an instance of the
10:12 - class which is kind of what we're doing
10:13 - here when we're just calling Tim okay
10:15 - because we don't have any object that's
10:17 - like a class main which you'll see in
10:20 - the next video okay so that's kind of
10:22 - how we can create our own methods again
10:24 - we can create methods that return things
10:25 - so that's what I wanted to talk about
10:26 - now so all I'm gonna do is when you
10:28 - create another method and I'm gonna say
10:29 - this is public static and in this case I
10:32 - want to return an integer value to
10:34 - whoever's calling this okay or wherever
10:36 - this is being called so I'm gonna type
10:38 - int because this is what I'm gonna
10:39 - return and the function is gonna give
10:40 - back to us and the methods gonna give
10:42 - back to us and I'm gonna say add two as
10:45 - the name and we're simply going to take
10:47 - an integer X as our one parameter here
10:50 - see what the issue is here method must
10:52 - return yeah okay so you can see is
10:54 - already giving us a red line saying that
10:56 - we have to return a value in this method
10:59 - because we typed in the fact that we
11:01 - were going to turn an int okay that's
11:04 - what I'm gonna do here is I'm simply
11:05 - going to
11:05 - turn X plus 2 and what this is doing now
11:10 - semicolon is it's just taking a value X
11:13 - and it's adding to do it and it's
11:14 - returning the value to our program
11:17 - wherever we call it so let's just do
11:19 - something up here and show you how this
11:21 - is working so I'm going to say system
11:23 - dot out dot println and here I'm
11:28 - something I'm type add 2 and then give
11:30 - it a number in this case 6 now you can
11:32 - probably guess what this is going to
11:33 - give us but essentially what's happening
11:36 - here is we're calling add 2 we're giving
11:39 - it the value 6 so our argument is 6 it's
11:41 - coming in here and the parameter X is
11:44 - now set equal to 6 we're going to return
11:46 - so back to wherever we called this X
11:48 - plus 2 in this case 8 so we get 8 here
11:51 - as a value and we go boom and we bring
11:53 - it up here and now this little line is
11:55 - equal to 8 so we're gonna print it to
11:56 - the screen and you can see that we get 8
11:58 - as a value like that now obviously in
12:01 - methods like this you're probably gonna
12:02 - do some more advanced things than just
12:04 - adding to that shows you how we can
12:06 - return values and I'll do one last
12:08 - example of returning maybe like a string
12:09 - down here so public static string okay
12:14 - and we'll just say STR as their name
12:17 - because I don't really know what to do
12:18 - and we'll take a string X ok and then in
12:23 - here we have to return a string value so
12:25 - what we could do is we could return X
12:26 - plus and an exclamation point but I
12:30 - think I need to put that in double
12:31 - quotation marks like that so what we're
12:34 - doing now is we're adding an exclamation
12:36 - point to the end of our string and we're
12:38 - returning that so if I call STR here
12:42 - okay so we'll I don't know why keeps
12:45 - doing with my brackets we'll do STR and
12:47 - then inside our brackets we'll give it
12:48 - hi it should return to us high with an
12:51 - exclamation point and indeed it does and
12:54 - yeah that's kind of how methods work
12:56 - basically and in our the next video
12:59 - we're gonna be talking about classes and
13:01 - creating our own kind of data types and
13:03 - moving forward and that's we're gonna
13:05 - continue be doing with the rest of the
13:06 - tutorial series so if you guys enjoyed
13:08 - the video it helped you out please make
13:09 - sure you leave a like and subscribe and
13:11 - I will see you in the next one
13:12 - [Music]

Cleaned transcript:

hey guys and welcome back to another Java programming tutorial so in today's video we are going to be introducing objectoriented programming and talking about what objects are and getting a little bit into classes and methods so I think the first thing to really talk about is what is an object so an object essentially is just an instance of a certain data type so we know we have data types like in strings bulls scanners like all kinds of different things that we can use like a ray list hash table hash list whatever a hash map all that stuff okay and those are all known as data types right where classes if you want to say that so whenever we create an instance by doing something like this like scanner SC equals new scanner essentially what we're doing is pointing this variable SC to an ER object okay and whenever we create any kind of variable selectors type like int x equals 5 we're essentially saying X is equal to an int object of value 5 okay and these objects are what allow us to have different properties for different data types so you know how we can add integers together or how we can do like dot parse int on on strings and we can have like a bunch of different methods and stuff those are all specific to the type of object that we're using so for example we can see here I have the scanner object right so SC is equal to a new scanner object this taking system not in as an argument okay so we can only use this dot next method on SC because it is a scanner type if I try to do X dot next and I do a little semicolon here you can see that we're getting can't invoke next method on primitive type int because well that method doesn't exist for int okay and that's like a really basic way to kind of understand what objects are essentially whenever we're creating a new variable so like even just doing like string like STR equals hello what we're doing is we're saying well STR is actually equal to a string object with the value alone and because our based on the different types of objects we have different properties different attributes things we can do with the methods we can call and that's just kind of important under you'll see more how we create like objects and whatnot that are specific to like classes that we're gonna make in later videos okay so it'll all start to come together but just now kind of know that when I'm calling things objects essentially that's like you have a variable of a certain type and it's equal to something you're creating an object of that type okay that's all we can have to understand for now so now let's talk about methods so some of you may already understand what methods are because I think I went through a very brief like explanation of them in previous videos but essentially methods or anything that you call on an object or on an instance of an object so just to clarify when instances when were creating a variable like this of a new scanner object we can say that we're creating FC is now an object like a scanner object or we can say SC is a new instance of scanner of like the type of scanner and those kind of are interchangeable so if I say instance instead of object they're very similar okay so just bear with me on that so anyways when we call this daunt next method we call it on the lake variable right so that's that's pointing to our scanner object so our scanner object allows us to use this method again I showed you before if I tried to call that on for example the variable X that was like an integer that doesn't work because that object doesn't have that method associated with it so a method is anything really that's just like a dot and then whatever the method name is and typically brackets for example if we had like an array like say we have or let's do actually a string so we're just gonna take another string probably shouldn't delete uno these but that's okay we'll say string H equals hello and I can do something like H dot length and this is a method that simply returns to us the length of the string and again this works on our object which is a string but it's not going to work on our SC because well what is the length of a scanner so if I type that you can see that we're getting this red line here and that's obviously not giving us anything because this length method is not defined for a scanner type so that's kind of a bit about like how we call methods and you guys have already seen a lot of different examples of methods that we can use on different objects and different data types okay and same thing when I say like data types an object data types are kind of like what the object is created off of and you'll see that more in in future videos just want to clarify in case anyone's kind of confused okay so how can we create our own methods well currently since we don't really know anything about classes we're gonna be creating methods inside of this main class okay now this main class is special because it is it contains this method and remember I was telling you guys at the beginning this method automatically runs whenever we run the program well that's different than other methods we're gonna have in classes we create in future videos so it's a bit hard to explain this method per se but this is a method because a method is typically anything that sits inside of a class and the class is what's going to define like our data types so scanner in Java we can't see it right now there's actually somewhere that says public class scanner and inside of that scanner class so if you do like brackets like this it has a ton of different methods a ton of different attributes that we can use by calling them from within this function okay so if we want to create our own method within this main class what we can do and this is just the default way that we're gonna do it for now I'm gonna show you why we use certain keywords and stuff in future videos but it's a bit advanced right now we're something n type public static okay and then whatever return type we want which we'll talk about in a second so let's get I'm gonna do void and then the name of our method so in this case I'm going to say hey like Tim okay so we have a public static void tim has zero parameters again talk about that in a second and then it's gonna do something in here in this case I'm just gonna say system dot out dot println and we'll just say when you call it it just says Tim like that okay so what I've essentially done here is create a static method that we can call from anywhere within this class okay and actually outside of the class as well so what we need to do to call this method from inside this class is we can literally just type the method names in this case my type Tim and I put a semicolon like that and we around the program you see that we get is it running one second here sorry okay so I figured out why it wasn't working because we had this scx coming in here so I'm just gonna comment that out for right now and we will run this one more time and you can see that we get Tim to the screen now I know I didn't really explain what this is or how this worked but essentially what I've done here is I've created kind of like a function okay and it's known as a method but in other programming languages you might see this as a function and this void keyword what this means here is it returns nothing okay because in functions we can actually return values which I'm going to show or sorry functions methods we can return values which I'm going to show you in just a second so this stands for we are going to not return anything we're just gonna do something in here so in this case we're just printing something to the screen all right now we have Tim and this is the name of our method and that's what we call here to trigger this to run right so if I wanted to pass some information to Tim so say I wanted to print whatever string I passed to Tim well what I would do in here is I would type string and then let's just say STR like that and now this means that whenever we call this Tim method we have to actually pass it one piece of information and that piece of information has to be a string okay so I'm gonna show you right here so I type STR put 10 and I put 10 in here like this okay and we run the program now we see we're printing out Tim if I change this like with a bunch of MS you can see if we run this we're getting Tim now the way that this works is this is called a parameter so STR is a parameter of type string and that means that whenever we call this function we have to type in arguments and what arguments are is what the parameter is going to be when we get to the the method so anything that goes in here in the call statement which is what this is known as we're we're like triggering the method to run is known as an argument okay so Tim is an argument when we call this what's happening is we're passing Tim as STR so now it's saying like STR equals Tim like the head or whatever the string is okay and then we're simply going to print to the screen whatever it is that we were passed so in this case Tim right now we can actually do multiple parameters as well so if I wanted to do another parameter I wanted to pass two pieces of information every time we call this function I would say maybe int and X okay and now it means that I have to pass not only a string but I have to pass an int so that means we have to type an integer here in this case I'm gonna do for what I'm gonna do now you're going to say four and we'll say int I and we'll say I is less than X I will say I plus plus we're just going to print this that many times okay so let's see here boom okay so system dot out dot print line what's we're begin here initialized variable I've got to do that sorry okay so now we pass an int and we pass a string and what we're going to do is simply print this as many times as like the int that we typed in okay so you can see that now we get ten four times to the screen and that's how that works so we have arguments in here the two arguments are Tim and four and then we have our parameters which are STR and X and when we pass our information and STR gets equal to Tim and X gets equal to four okay and then in here we can now use those values by referencing STR and X like I've done so okay so I hope that makes sense now in terms of this public static I'm gonna talk about this in the next video for right now all this means is that you can call this not on an instance of the class which is kind of what we're doing here when we're just calling Tim okay because we don't have any object that's like a class main which you'll see in the next video okay so that's kind of how we can create our own methods again we can create methods that return things so that's what I wanted to talk about now so all I'm gonna do is when you create another method and I'm gonna say this is public static and in this case I want to return an integer value to whoever's calling this okay or wherever this is being called so I'm gonna type int because this is what I'm gonna return and the function is gonna give back to us and the methods gonna give back to us and I'm gonna say add two as the name and we're simply going to take an integer X as our one parameter here see what the issue is here method must return yeah okay so you can see is already giving us a red line saying that we have to return a value in this method because we typed in the fact that we were going to turn an int okay that's what I'm gonna do here is I'm simply going to turn X plus 2 and what this is doing now semicolon is it's just taking a value X and it's adding to do it and it's returning the value to our program wherever we call it so let's just do something up here and show you how this is working so I'm going to say system dot out dot println and here I'm something I'm type add 2 and then give it a number in this case 6 now you can probably guess what this is going to give us but essentially what's happening here is we're calling add 2 we're giving it the value 6 so our argument is 6 it's coming in here and the parameter X is now set equal to 6 we're going to return so back to wherever we called this X plus 2 in this case 8 so we get 8 here as a value and we go boom and we bring it up here and now this little line is equal to 8 so we're gonna print it to the screen and you can see that we get 8 as a value like that now obviously in methods like this you're probably gonna do some more advanced things than just adding to that shows you how we can return values and I'll do one last example of returning maybe like a string down here so public static string okay and we'll just say STR as their name because I don't really know what to do and we'll take a string X ok and then in here we have to return a string value so what we could do is we could return X plus and an exclamation point but I think I need to put that in double quotation marks like that so what we're doing now is we're adding an exclamation point to the end of our string and we're returning that so if I call STR here okay so we'll I don't know why keeps doing with my brackets we'll do STR and then inside our brackets we'll give it hi it should return to us high with an exclamation point and indeed it does and yeah that's kind of how methods work basically and in our the next video we're gonna be talking about classes and creating our own kind of data types and moving forward and that's we're gonna continue be doing with the rest of the tutorial series so if you guys enjoyed the video it helped you out please make sure you leave a like and subscribe and I will see you in the next one
