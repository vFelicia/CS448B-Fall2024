With timestamps:

00:00 - hey guys and welcome back to the AP do
00:02 - and my intermediate Python tutorials in
00:05 - today's video I'm gonna be continuing
00:06 - with the collections module and we're
00:08 - gonna be talking about a data type known
00:10 - as the deck so yes this says DQ right
00:14 - here and the title of the thing is spelt
00:16 - DQ but the way that you pronounce it is
00:18 - Dec and I just found that from reading
00:21 - the documentation otherwise I was gonna
00:23 - go through this whole video saying DQ
00:25 - anyways Dec is the proper way to say
00:28 - this word so if I do end up saying DQ
00:30 - throughout the video please don't leave
00:32 - an angry comment about it I don't know
00:34 - why I just keep saying it but anyways
00:35 - Dec is the proper way so why would we
00:37 - want to use a deck over a typical list
00:40 - so pretty much it kind of looks the same
00:41 - as a list and I'll show you in just a
00:43 - second but the reason why we'd use a
00:44 - deck is because it's faster in terms of
00:47 - adding elements to the end and the
00:49 - beginning of a list so rather than using
00:52 - a list you want to use a deck because
00:53 - it's gonna be faster whereas if you're
00:55 - trying to randomly access elements
00:56 - within a container so a list then you're
01:00 - gonna want to use a list over a deck and
01:01 - if that's confusing don't worry I'll
01:03 - kind of show you how we as we go through
01:05 - so let's start by creating a deck and
01:07 - see how that works so I'm just going to
01:09 - say D and it's gonna be stand for our
01:10 - deck is gonna be equal to a deck and
01:13 - then this just takes an iterable
01:15 - argument so in this case I'm gonna take
01:16 - type in hello but I could give it
01:18 - something like a list a dictionary so on
01:21 - so anyways D equals deck hello now if I
01:25 - run the program press f5 and I simply
01:27 - print D to the screen here you can see
01:31 - that we get deck and then h-e-l-l-o I
01:33 - just split that up into what looks like
01:36 - a list but it's actually a deck okay so
01:39 - now let's go through a few methods that
01:42 - we can use on this so obviously we can
01:44 - use something like append so we can
01:46 - append an element to the end so I can
01:48 - append something like for I can depend
01:50 - with other elements do something like 5
01:52 - and if we run this and then print it
01:55 - again you can oops didn't mean to do
01:59 - that then you can see we get hello and
02:02 - then 4 or 5 so on so you can append a
02:05 - nice thing is you can actually append to
02:07 - the beginning of the list as well so I
02:08 - can say append left instead of just
02:12 - regular append
02:13 - and now you can see when we run the
02:14 - program and we print D don't know why
02:18 - that didn't work let's see here we get
02:20 - five and then hello four so that's a
02:22 - nice method as well we can do the same
02:24 - thing with popping which is removing
02:26 - elements from the deck so I can do pop
02:29 - in this case and I'm not going to do
02:31 - four in here so a new deed on pop and
02:33 - then I can also do d dot pop left and
02:36 - what pop left is gonna do is it's simply
02:38 - gonna remove the first element in our
02:40 - deck rather than the last so pop this
02:43 - works on list as well and dictionaries
02:45 - and stuff you can remove the last
02:47 - element or whatever index you type in
02:49 - here so like five to whenever that's the
02:51 - one that's gonna remove pop left simply
02:53 - removes the first one so I'll do this
02:55 - and then print D and you can see that we
02:59 - are left with E ll because we removed oh
03:01 - and we've removed the H okay another
03:04 - method that we can use is clear this one
03:07 - is simply going to remove everything
03:08 - from the deck so that's pretty standard
03:12 - print D again then you can see that we
03:16 - have an empty deck now okay the next few
03:19 - that I'm going to talk about here I
03:20 - believe you can use on some other
03:22 - containers in Python but they do work on
03:24 - this deck as well so let's go through
03:25 - that so now that we already cleared our
03:27 - deck let's just go ahead and add some
03:28 - more things to it so what we can do is
03:30 - we can do something called extend and
03:32 - what extend is gonna do is it takes an
03:34 - iterable argument which means anything
03:36 - that's a container is like a list string
03:38 - something like that and it's gonna put
03:41 - it at the end of our list so if I have
03:44 - something like four or five six and I
03:47 - run the program and I print D you can
03:51 - see we get four or five six at the end
03:53 - of our list now to show you what happens
03:54 - if you already have something in I
03:56 - called it a list but our deck is if I
03:58 - extend again I'll extend something like
04:00 - so we can see it better below then what
04:04 - we get is print D we get four or five
04:08 - six and then hello so this is a weight
04:10 - that to add multiple things into your
04:13 - deck so again if I make like a list and
04:16 - I got like one two three this is gonna
04:17 - work as well so we should get four five
04:19 - six one two three
04:20 - it's current D and there we go we get
04:24 - that as well so if you ever don't want
04:25 - to run through like a four loop to add
04:27 - an entire list into a deck then you can
04:30 - simply use extend extend also works
04:32 - really nicely with extend left which is
04:36 - gonna add to the beginning of our list
04:37 - so now we have a list of four five six
04:39 - one two three let's see what happens if
04:42 - we extend the word hay to the left side
04:45 - of the list so I'm gonna print that and
04:48 - you can see we get yeh four five six one
04:52 - two three you might say well why didn't
04:54 - we just get a CH well it's because we're
04:56 - actually extending to the left so we're
04:58 - gonna add this in the reverse order and
05:00 - that should make sense because if you're
05:02 - extending this first and then you extend
05:04 - this and then you extend this why should
05:05 - be the first element on the left side of
05:08 - our deck like that okay so now we're
05:12 - gonna use a few other methods so this
05:14 - one is probably the most useful one that
05:16 - the deck has and the reason why you
05:19 - would use it if especially if you're
05:20 - gonna be dealing with things at the
05:21 - beginning in the end specifically and it
05:24 - is known as rotating so what this does
05:27 - is it takes a integer in here either
05:29 - positive or negative if you put a
05:32 - positive integer in here it's gonna
05:34 - rotate all of the elements by that
05:36 - amount to the right otherwise it's going
05:39 - to if you put a negative element in
05:40 - there rotate everything to the left so
05:42 - just see what happens if I put a
05:43 - negative one in here to rotate to the
05:45 - left and then we'll print down here
05:47 - certain side the bottom of the screen
05:48 - right now and you can see that we went
05:50 - from this one which was the last D or
05:54 - whatever when I printed it and now we've
05:55 - rotated everything over so threes moved
05:58 - over to the position of two and when we
05:59 - get all the way over to here we've
06:00 - switched E and Y so E's moved over here
06:03 - and Y is been rotated back to the end of
06:06 - the list now you can actually rotate
06:08 - with other numbers will also rotate no
06:10 - by two and then you can see if I print D
06:14 - down here that we get it rotated two
06:17 - elements over now and this is really
06:19 - useful when you're trying to solve
06:20 - certain problems to be able to use this
06:22 - rotate again you can do the same thing
06:24 - with positive so if I just rotate it by
06:26 - one now and I simply
06:29 - Printy you can see that now we've
06:31 - rotated to the right side so three which
06:33 - was originally here has now been moved
06:34 - up to the beginning of the list okay so
06:37 - now we've talked about that there's one
06:39 - last really useful thing that I left out
06:42 - on purpose because I wanted to show now
06:44 - that we can do with these decks so when
06:48 - we initiate our deck here we give it an
06:50 - interval object we don't have to give it
06:52 - anything it'll create a blank one if we
06:54 - do that but there's something
06:56 - it has called Max Len now if I do
06:59 - something like Max Ilan five and I'm
07:00 - just gonna remove all this and I'll show
07:03 - you how this works so I'm a max Alana
07:06 - five and I have a string that has five
07:08 - characters in it if I try to add
07:10 - something to my deck here so I'll just
07:13 - do I'll just simply I'm gonna print it
07:14 - here just so it saves us some time get a
07:16 - print D and then I'm gonna go D dot
07:18 - append let's do one and then print D
07:22 - again let's just watch what happens so
07:25 - you can see we get we have a max on a
07:27 - five we start with hello and then when
07:29 - we add one H is actually removed from
07:32 - our deck now the reason that happens is
07:35 - because when we set this max length when
07:37 - we start adding things into the list it
07:38 - needs to remove something to maintain
07:41 - that attribute of a maximum length of
07:43 - five so it removes the first element
07:45 - from our deck and that's really useful
07:48 - as well if you're solving problems
07:50 - because then you don't have to deal with
07:51 - removing things every time you add
07:52 - something to the end or removing like a
07:54 - slice of for example list if you're
07:57 - gonna be adding with the one thing so if
07:58 - I extend like something like let's see
08:01 - here one two three now we should see
08:05 - that H E and L should all be removed a
08:07 - mission at L o one two three so let's
08:09 - try it and there we go we get hello and
08:11 - we get L one two three and we didn't
08:14 - have to deal with figuring out how many
08:15 - elements we need to take from the left
08:17 - side to the right side because of this
08:19 - max Len now just to note you can't
08:22 - change this max Len by doing something
08:24 - like D dot max line equals five its
08:28 - artwork Isis will do like six because
08:30 - it's already five you can only access
08:32 - what the max line is by just doing
08:35 - is simply this print MACD dot max line
08:40 - and this should just give us five and it
08:42 - does but if I try to do but I was
08:44 - showing you there so d dot max line
08:46 - equals five you'll see the error that
08:48 - comes up and it says this attribute of
08:51 - Max Len is not writable so we can't
08:53 - actually change it after we've initiated
08:55 - that value so anyways that's pretty much
08:58 - been it for Dec within collections this
09:00 - is really useful and you might not say
09:02 - useful now if you start solving some
09:04 - more advanced problems using this deck
09:05 - will make your life a lot easier with
09:07 - those methods that I went through and
09:08 - I'm gonna copy all of them down alright
09:10 - it's like a little paste bin thing so
09:12 - you can click the link in the
09:12 - description there if you want to see all
09:14 - of them in a list so you don't have to
09:16 - specifically memorize that other than
09:18 - that you can always just go to the
09:19 - documentation and have a look it we just
09:21 - search up like DQ collections Python it
09:23 - goes through what all of these to do
09:25 - again I forgot to talk about reverse but
09:27 - it's pretty straightforward you can use
09:29 - reverse and if you're followed up to
09:31 - here you probably probably already know
09:33 - that one so anyway so that's been it for
09:35 - this video if you guys enjoyed the video
09:37 - please make sure you leave a like and
09:39 - subscribe I will see you again in the
09:41 - next one
09:42 - [Music]

Cleaned transcript:

hey guys and welcome back to the AP do and my intermediate Python tutorials in today's video I'm gonna be continuing with the collections module and we're gonna be talking about a data type known as the deck so yes this says DQ right here and the title of the thing is spelt DQ but the way that you pronounce it is Dec and I just found that from reading the documentation otherwise I was gonna go through this whole video saying DQ anyways Dec is the proper way to say this word so if I do end up saying DQ throughout the video please don't leave an angry comment about it I don't know why I just keep saying it but anyways Dec is the proper way so why would we want to use a deck over a typical list so pretty much it kind of looks the same as a list and I'll show you in just a second but the reason why we'd use a deck is because it's faster in terms of adding elements to the end and the beginning of a list so rather than using a list you want to use a deck because it's gonna be faster whereas if you're trying to randomly access elements within a container so a list then you're gonna want to use a list over a deck and if that's confusing don't worry I'll kind of show you how we as we go through so let's start by creating a deck and see how that works so I'm just going to say D and it's gonna be stand for our deck is gonna be equal to a deck and then this just takes an iterable argument so in this case I'm gonna take type in hello but I could give it something like a list a dictionary so on so anyways D equals deck hello now if I run the program press f5 and I simply print D to the screen here you can see that we get deck and then hello I just split that up into what looks like a list but it's actually a deck okay so now let's go through a few methods that we can use on this so obviously we can use something like append so we can append an element to the end so I can append something like for I can depend with other elements do something like 5 and if we run this and then print it again you can oops didn't mean to do that then you can see we get hello and then 4 or 5 so on so you can append a nice thing is you can actually append to the beginning of the list as well so I can say append left instead of just regular append and now you can see when we run the program and we print D don't know why that didn't work let's see here we get five and then hello four so that's a nice method as well we can do the same thing with popping which is removing elements from the deck so I can do pop in this case and I'm not going to do four in here so a new deed on pop and then I can also do d dot pop left and what pop left is gonna do is it's simply gonna remove the first element in our deck rather than the last so pop this works on list as well and dictionaries and stuff you can remove the last element or whatever index you type in here so like five to whenever that's the one that's gonna remove pop left simply removes the first one so I'll do this and then print D and you can see that we are left with E ll because we removed oh and we've removed the H okay another method that we can use is clear this one is simply going to remove everything from the deck so that's pretty standard print D again then you can see that we have an empty deck now okay the next few that I'm going to talk about here I believe you can use on some other containers in Python but they do work on this deck as well so let's go through that so now that we already cleared our deck let's just go ahead and add some more things to it so what we can do is we can do something called extend and what extend is gonna do is it takes an iterable argument which means anything that's a container is like a list string something like that and it's gonna put it at the end of our list so if I have something like four or five six and I run the program and I print D you can see we get four or five six at the end of our list now to show you what happens if you already have something in I called it a list but our deck is if I extend again I'll extend something like so we can see it better below then what we get is print D we get four or five six and then hello so this is a weight that to add multiple things into your deck so again if I make like a list and I got like one two three this is gonna work as well so we should get four five six one two three it's current D and there we go we get that as well so if you ever don't want to run through like a four loop to add an entire list into a deck then you can simply use extend extend also works really nicely with extend left which is gonna add to the beginning of our list so now we have a list of four five six one two three let's see what happens if we extend the word hay to the left side of the list so I'm gonna print that and you can see we get yeh four five six one two three you might say well why didn't we just get a CH well it's because we're actually extending to the left so we're gonna add this in the reverse order and that should make sense because if you're extending this first and then you extend this and then you extend this why should be the first element on the left side of our deck like that okay so now we're gonna use a few other methods so this one is probably the most useful one that the deck has and the reason why you would use it if especially if you're gonna be dealing with things at the beginning in the end specifically and it is known as rotating so what this does is it takes a integer in here either positive or negative if you put a positive integer in here it's gonna rotate all of the elements by that amount to the right otherwise it's going to if you put a negative element in there rotate everything to the left so just see what happens if I put a negative one in here to rotate to the left and then we'll print down here certain side the bottom of the screen right now and you can see that we went from this one which was the last D or whatever when I printed it and now we've rotated everything over so threes moved over to the position of two and when we get all the way over to here we've switched E and Y so E's moved over here and Y is been rotated back to the end of the list now you can actually rotate with other numbers will also rotate no by two and then you can see if I print D down here that we get it rotated two elements over now and this is really useful when you're trying to solve certain problems to be able to use this rotate again you can do the same thing with positive so if I just rotate it by one now and I simply Printy you can see that now we've rotated to the right side so three which was originally here has now been moved up to the beginning of the list okay so now we've talked about that there's one last really useful thing that I left out on purpose because I wanted to show now that we can do with these decks so when we initiate our deck here we give it an interval object we don't have to give it anything it'll create a blank one if we do that but there's something it has called Max Len now if I do something like Max Ilan five and I'm just gonna remove all this and I'll show you how this works so I'm a max Alana five and I have a string that has five characters in it if I try to add something to my deck here so I'll just do I'll just simply I'm gonna print it here just so it saves us some time get a print D and then I'm gonna go D dot append let's do one and then print D again let's just watch what happens so you can see we get we have a max on a five we start with hello and then when we add one H is actually removed from our deck now the reason that happens is because when we set this max length when we start adding things into the list it needs to remove something to maintain that attribute of a maximum length of five so it removes the first element from our deck and that's really useful as well if you're solving problems because then you don't have to deal with removing things every time you add something to the end or removing like a slice of for example list if you're gonna be adding with the one thing so if I extend like something like let's see here one two three now we should see that H E and L should all be removed a mission at L o one two three so let's try it and there we go we get hello and we get L one two three and we didn't have to deal with figuring out how many elements we need to take from the left side to the right side because of this max Len now just to note you can't change this max Len by doing something like D dot max line equals five its artwork Isis will do like six because it's already five you can only access what the max line is by just doing is simply this print MACD dot max line and this should just give us five and it does but if I try to do but I was showing you there so d dot max line equals five you'll see the error that comes up and it says this attribute of Max Len is not writable so we can't actually change it after we've initiated that value so anyways that's pretty much been it for Dec within collections this is really useful and you might not say useful now if you start solving some more advanced problems using this deck will make your life a lot easier with those methods that I went through and I'm gonna copy all of them down alright it's like a little paste bin thing so you can click the link in the description there if you want to see all of them in a list so you don't have to specifically memorize that other than that you can always just go to the documentation and have a look it we just search up like DQ collections Python it goes through what all of these to do again I forgot to talk about reverse but it's pretty straightforward you can use reverse and if you're followed up to here you probably probably already know that one so anyway so that's been it for this video if you guys enjoyed the video please make sure you leave a like and subscribe I will see you again in the next one
