With timestamps:

00:00 - this video will show you how to automate
00:01 - Google Sheets with python specifically
00:04 - how to connect to a workbook how to
00:06 - create and open existing sheets how to
00:08 - modify the cells how to add formulas how
00:11 - to do formatting and we'll go through a
00:13 - lot of different nuances and some ways
00:15 - to more efficiently perform these
00:17 - operations at the end of the video I'll
00:19 - even walk you through a mini project
00:21 - that will illustrate how to take an
00:22 - array of different values add those into
00:25 - sheets add some headings create some
00:27 - formulas Etc with that said let's get
00:29 - into into it after a quick word from our
00:32 - sponsor nordpass nordpass provides the
00:35 - ultimate password and credential
00:36 - management solution in today's digital
00:39 - age we've got all kinds of passwords
00:41 - Keys credit cards and credentials and I
00:43 - don't know about you but I always have
00:45 - trouble finding them and actually
00:47 - sharing them with other people now to
00:49 - combat this nordpass not only stores all
00:51 - of this information securely but it lets
00:53 - you autofill it across multiple devices
00:55 - and share it with colleagues or
00:57 - employees with Advanced Access Control
01:00 - now what that means that you can
01:01 - actually use strong passwords by default
01:03 - and easily Grant or revoke access not to
01:06 - mention that if there are any security
01:08 - vulnerabilities Nord pass's data breach
01:10 - scanner can automatically detect those
01:12 - and inform you of them immediately now
01:14 - if you don't believe me you can try a
01:16 - three-month free trial of nordpass using
01:18 - my activation code techwithtim at the
01:21 - link nordp pass.com techwithtim now
01:24 - password management is an absolute
01:25 - nightmare when it's not taken seriously
01:28 - and that leads to Stats like this where
01:29 - 52% of development teams have actually
01:32 - missed deadlines due to issues accessing
01:35 - infrastructure get your business secured
01:37 - today with a 3-month free trial of Nord
01:40 - pass so that you're not a part of that
01:41 - statistic you can go and use my
01:43 - activation code Tech with Tim at the
01:45 - link nordp pass.com techwithtim for this
01:48 - limited time offer let's begin
01:51 - automating Google Sheets now in order to
01:53 - do this we're going to need to go to the
01:55 - Google Cloud console so to do that we're
01:58 - going to just search Google Cloud
01:59 - console we're going to find the url that
02:01 - is console. cloud.google.com
02:03 - once you click into this here we're
02:05 - going to create a new project now before
02:08 - we do that just make sure you select the
02:09 - correct Google account in the top right
02:11 - hand corner where you want this project
02:12 - to be created let me go ahead and do
02:14 - that all right so once you've selected
02:16 - your primary Google account you can go
02:18 - up here where it shows the project list
02:20 - and you can simply create a new project
02:22 - you can see I have a bunch of them here
02:24 - uh in this case we can just call this
02:26 - something like tutorial sheets doesn't
02:28 - really matter Call It Whatever you'd
02:30 - like you can select organization if you
02:32 - know what that is if not just go ahead
02:33 - and click create from here it's going to
02:36 - create the new project for you once it's
02:37 - created we're going to select that
02:39 - project from the project selector and
02:41 - then I'll show you the next step so here
02:43 - select project okay we're now inside of
02:45 - this project now we're going to open up
02:47 - the navigational menu here and we're
02:49 - going to go to apis and services from
02:52 - this menu we're going to click on
02:54 - enabled apis and services there's many
02:56 - ways to get to this but you just want to
02:58 - get to enabled AP apis and services from
03:01 - here we're going to click on this button
03:03 - that says enable apis and services and
03:06 - we're going to search for the Google
03:07 - Sheets API by the way if you're ever
03:09 - trying to do any automation with Google
03:12 - pretty much all of the apis are
03:13 - available here so we're going to search
03:14 - for the Google Sheets API you can see it
03:17 - will pop up right here click into it and
03:20 - then we go ahead and click enable that's
03:23 - pretty much it we're just enabling the
03:25 - Google Sheets API now what we'll need to
03:27 - do is create a set of credentials that
03:29 - will utilize the API that then we can
03:31 - have access to in our project so once
03:34 - you've enabled the API you should be
03:35 - brought to a page that looks like this
03:38 - now for some reason you can't find this
03:39 - page you can always just go back to the
03:41 - enabled apis and services you can go
03:43 - back here you can search for Google
03:46 - Sheets API again click into it and then
03:49 - simply click on manage and it should
03:51 - bring you back to this page regardless
03:53 - you can press this button right here
03:54 - which says create credentials or you can
03:57 - select the credentials menu down here
03:59 - and then create create credentials
04:00 - there's a bunch of different ways to do
04:01 - this so we're going to click on this big
04:02 - blue button here for creating the
04:04 - credentials now it's going to ask us
04:06 - what type of API we're using we're going
04:08 - to select the Google Sheets API and
04:10 - where we have user data or application
04:12 - data we can simply select application
04:14 - data that'll bring us to next and this
04:16 - is where we're going to create a service
04:18 - account so what we need is a service
04:20 - account so what we'll do is give this a
04:22 - name I'm just going to call this python
04:25 - API like that and it's going to go ahead
04:27 - and give us a service account ID we're
04:30 - now going to go ahead and click on
04:31 - Create and continue and we're going to
04:33 - Grant this a role now this step is very
04:36 - important make sure that you give this
04:38 - the editor rule so you're going to
04:40 - search for editor select editor here the
04:44 - ID doesn't matter it can be whatever you
04:45 - want you just want to make sure you have
04:47 - this as an editor you're then going to
04:49 - click on continue and from here you can
04:52 - go ahead and click on done all we're
04:54 - doing is creating a set of credentials
04:56 - that we'll we'll be able to use sorry
04:57 - from our python script that will be able
04:59 - able to edit things like spreadsheets
05:02 - great now from this point on what we
05:03 - need to do is actually download the
05:05 - credentials so we're going to go to the
05:07 - credentials tab here we're going to
05:09 - click on the service account that we
05:11 - just
05:12 - created and it's going to open it up for
05:14 - us now here you can actually modify the
05:16 - account if you want but what we want to
05:17 - do is go to keys from keys we're going
05:20 - to click on ADD key and we're going to
05:22 - create a new key now we're going to just
05:25 - download a Json version of this key
05:27 - which we'll be able to load in our
05:28 - python script so go ahead and select
05:30 - Json and click on create it's going to
05:33 - download that most likely into your
05:35 - downloads folder and what we need to do
05:37 - now is get this in the same project as
05:39 - our python file all right so I've just
05:41 - opened up visual studio code and you can
05:43 - see that I have my finder open here if
05:45 - you're on Windows obviously this will be
05:47 - Windows Explorer now what you're going
05:49 - to want to do is find the file that was
05:51 - downloaded so whatever location it went
05:52 - to and just take it and put it in the
05:55 - same project where your python file is
05:57 - going to be so just to backtrack a
05:58 - little bit what I didn't vs code here is
06:00 - I just open up a new folder it's called
06:02 - Google Sheets tutorial okay so just go
06:04 - file open folder open any new folder can
06:07 - be on your desktop wherever you want it
06:08 - to be I created a python file called
06:11 - main.py and now my goal is to get the
06:14 - file I just downloaded so this one here
06:16 - into the same directory now to do that I
06:18 - can simply take it and drag it over here
06:20 - in vs code I also could simply copy it
06:23 - and then locate the folder on my desktop
06:26 - and then paste it in I'm assume many of
06:28 - you are able to do that just get in the
06:29 - same directory as your python file now
06:32 - it's going to have some information here
06:33 - obviously you don't want to leak this I
06:35 - will clearly delete the project after
06:37 - this tutorial you don't need to know
06:38 - what any of that means what we're going
06:40 - to do next just to make our life a
06:41 - little bit easier is we're going to look
06:43 - at this file zoom in a little bit here
06:45 - we're going to rename it so I'm just
06:46 - going to call this credentials like that
06:50 - so that it's a little bit easier for us
06:51 - to reference in our python code all
06:53 - right so now that we have our
06:54 - credentials in the same folder as our
06:56 - python file the next thing we'll need to
06:58 - do is actually link the Google sheet
07:01 - that we want to work with with the
07:02 - service account that we created and you
07:04 - can do this with as many Google Sheets
07:06 - as you'd like but obviously you need to
07:08 - have ownership of them so what I'm going
07:09 - to do is transition over here and you
07:11 - can see that I have a Google sheet that
07:13 - I've created it's just an empty sheet I
07:15 - simply put one test value here in the
07:18 - first um kind of column first row what
07:20 - we'll do now is we'll find the email
07:23 - address of the associated service
07:25 - account and we'll simply share access of
07:27 - this Google sheet to the email address
07:30 - so if we go back here to our Google
07:33 - Cloud console you'll see that we have
07:35 - our keys and we have our service account
07:37 - so I'm already in the service account
07:38 - but again if for some reason you can't
07:39 - find it what you're going to be doing is
07:41 - going into the Google Sheets API and you
07:43 - should see a service account here and it
07:45 - should actually specify the email for
07:47 - the service account so what we're going
07:49 - to do is copy that email you can also
07:51 - click into it here and it will show you
07:53 - the email for the service account that
07:55 - you created so we're going to get that
07:56 - email we're going to go to our Google
07:58 - sheet we're going to click on share and
08:01 - we're going to paste that email inside
08:03 - of here now we're going to make sure
08:04 - that we have editors selected as the
08:06 - access and we're simply going to share
08:08 - this Google sheet with the email
08:10 - associated with our service account now
08:12 - you can do this with any number of
08:14 - Google Sheets that you'd like as soon as
08:16 - you do that anyone who has access to the
08:17 - service account which in this case is us
08:19 - and our python script will be able to
08:21 - modify and access this Google sheet so
08:24 - there you go again take the email share
08:26 - it from the Google sheet now you're good
08:28 - we can go back to s code and we can
08:30 - start working on connecting to this
08:32 - Google sheet so now that we've created
08:34 - and shared the Google sheet what we need
08:35 - to do is install a few packages that we
08:38 - need to actually interact with this now
08:40 - to install these packages we can do it
08:42 - just in our main system or our main
08:44 - python installation or we can create a
08:46 - virtual environment which will make
08:47 - things a little bit neater and the
08:49 - virtual environment will be a bit
08:50 - different depending on your operating
08:52 - system but if you're on Mac you can
08:54 - type python if we could spell this
08:57 - correctly Python 3 Hy an M ven V and
09:00 - then the name of the environment you
09:02 - want to install this in which can be
09:04 - something like sheets you can name it
09:05 - anything you'd like if you're on Windows
09:06 - You're simply just going to have python
09:08 - if you're on Linux it'll be Python 3 so
09:11 - we're going to hit enter here and it
09:12 - should go ahead and create the virtual
09:14 - environment for us now that we have the
09:16 - virtual environment created we need to
09:18 - activate this now there's a few ways to
09:20 - activate it if you're on Mac or Linux
09:22 - you can type the following command now
09:23 - this is going to be Source the
09:25 - environment name which in this case is
09:27 - sheets and then bin and then activate
09:30 - now when you type that you should see
09:32 - that you get a prefix here with the name
09:33 - of your environment and now in this
09:35 - terminal we have access to the virtual
09:37 - environment now if you are on Windows
09:39 - the command's going to be a little bit
09:41 - different what you're going to want to
09:42 - do is make sure you're inside of
09:44 - Powershell and you're going to type dot
09:46 - SL sheets SL bin SL activate so same
09:51 - thing here okay but you're just having
09:53 - the dot slash and this should run this
09:55 - file as an executable and uh initialize
09:58 - the environment for you you okay so now
10:00 - that the virtual environment is
10:01 - initialized what we can do is install
10:03 - the different modules that we need so
10:05 - we're going to type pip 3 install and
10:08 - then the first one we need is the Google
10:10 - API python client and I will leave these
10:13 - in the description in case you just want
10:15 - to copy them now as well as that we also
10:17 - want to have the Google and then this is
10:19 - the o- HTTP lib 2 and then we want the
10:25 - Google off dash and this is the o off
10:30 - lib and then lastly we want g-spread
10:33 - okay so these are the four libraries
10:35 - that we need Google API python client
10:37 - Google o HTTP lib 2 Google o oo lib and
10:41 - g-spread again I will link this exact
10:43 - command in the description so you can
10:45 - simply copy it and paste it we're going
10:47 - to go ahead and hit enter and install
10:48 - all of these different libraries if you
10:50 - are on Windows you might note here that
10:52 - you can actually just use pip instead of
10:54 - pip 3 okay so if pip 3 doesn't work just
10:56 - do pip and that command hopefully should
10:58 - work view okay so now everything should
11:00 - be installed in our virtual environment
11:02 - and the virtual environment is activated
11:04 - I'm going to clear the screen minimize
11:06 - the terminal and we'll start typing now
11:08 - and actually getting access to our sheet
11:10 - so we're going to begin by importing
11:12 - something called g-spread and let me
11:14 - just zoom in a little bit here so you
11:16 - can read this now g-spread is a library
11:17 - that makes it easy for us to actually
11:19 - interact with the sheet this is kind of
11:21 - a highlevel API on top of the lower
11:25 - level operations you can perform on the
11:26 - Google sheet so that's what g-spread is
11:28 - next next we're going to say from Google
11:31 - do o if we could spell this too oo
11:35 - 2. servicecore account we're going to
11:38 - import the credentials in case you need
11:40 - any of this code I will link it uh in a
11:42 - GitHub repo in the description and what
11:45 - we're going to do next is we're going to
11:46 - specify some Scopes now Scopes are the
11:49 - different things that you can do kind of
11:50 - the operations or the access you have
11:53 - when you're accessing a specific file
11:55 - document Etc using the Google apis now
11:59 - in our case we just want access to a
12:01 - spreadsheet so we're going to say Scopes
12:03 - is equal to a new list and inside of
12:05 - here we're going to write out the
12:06 - following scope I'm actually just going
12:08 - to copy it in so I don't get any typos
12:10 - again this will be linked in the
12:11 - description so this is the
12:13 - googleapis.com
12:15 - sloths spreadsheets now what we're going
12:18 - to do is create a new set of credentials
12:21 - using the Json credentials file we have
12:23 - here in our directory so we're going to
12:25 - say creds is equal to
12:27 - credentials. from undor service account
12:31 - file okay and then we're going to type
12:33 - the name of the file which is
12:35 - credentials. Json matching up exactly
12:38 - with what we have here now when we do
12:40 - that let me just remove this here we are
12:44 - now going to specify that Scopes is
12:47 - equal to the Scopes that we have here
12:50 - saying okay we want to use the service
12:52 - account and these are the Scopes we want
12:53 - with the service account for what we're
12:55 - accessing now that we have that we are
12:58 - going to authorize ourself so we're
12:59 - going to say client is equal to g-spread
13:03 - we got to spell that correctly do
13:06 - authorize and we're going to authorize
13:09 - the credentials that we just created
13:10 - that's going to give us a client now
13:12 - that will be able to access different
13:14 - Google Sheets all right so now what
13:16 - we're going to need is access to the ID
13:19 - of the Google sheet that we want to
13:20 - access so we're going to say sheet unor
13:23 - ID is equal to an empty string and we
13:26 - are now going to go back to Google she
13:28 - sheet so let me open up this file right
13:31 - here and we can find the ID now the way
13:34 - you find the ID of the sheet is you
13:35 - simply copy the URL here you look for
13:38 - where the slash D is I'll zoom in so
13:40 - it's a little bit easier to see and then
13:42 - we will highlight everything that comes
13:45 - after the slash D but before the edit
13:48 - okay so after the slash D this is the ID
13:51 - of this document so you're just going to
13:53 - copy that there from the URL and we're
13:55 - going to go back and we're going to
13:57 - paste this in our sheet ID now that we
13:59 - have the sheet ID we can use this to
14:01 - actually open the spreadsheet to do that
14:04 - we can say sheet is equal to client.
14:07 - openen by and this actually not URL
14:10 - sorry this open by key and then we can
14:12 - simply pass in here the variable sheet
14:14 - ID now I will note there's a few other
14:16 - ways to open this you can open by URL
14:18 - open all you can open by a name you can
14:20 - open by the key which is what we're
14:22 - doing the key is going to be the most
14:23 - foolproof because you're just using the
14:25 - ID so for example if the name of the
14:27 - spreadsheet changed you're not going to
14:29 - have an error here right CU you're using
14:30 - the actual ID so what we can do just to
14:32 - make sure this is working is we can say
14:34 - values unor list is equal to this is
14:38 - going to be the sheet and then do sheet
14:43 - one. row underscore values and then we
14:47 - can simply pass in one here now you
14:49 - might not know exactly what this is
14:50 - doing but I'm just going to print the
14:52 - values list and if we go back to our
14:55 - sheet here you'll see that we have a
14:56 - test value in the first set cell so what
14:59 - should happen when I run my code is it
15:01 - should simply print out that test value
15:03 - so let me just clear the terminal here
15:06 - notice what I did right is I have my
15:07 - sheet I'm accessing the worksheet within
15:10 - this Google sheet or this Google
15:11 - workbook the sheet is called sheet one
15:14 - okay and then I'm getting all of the row
15:16 - values in row one and I'm printing those
15:18 - out so now if I go here and I type
15:20 - Python 3 main.py that's how I'm able to
15:23 - run this file you should see that we get
15:25 - some warning that's fine don't worry
15:27 - about that and it should print out the
15:29 - test value for us and it does it says
15:31 - test value inside of a list telling us
15:34 - that this is indeed working so just to
15:35 - prove to you that this is really working
15:37 - we can go add another value here so we
15:39 - can say value two we can save this sheet
15:43 - notice that it's been saved now to the
15:45 - drive and if we go back and we rerun
15:48 - this we can wait a second and we should
15:49 - now see that we get two values appearing
15:51 - here and we do we get test value and
15:53 - value two so we have successfully
15:55 - connected to our workbook or to our
15:58 - Google she sheet now I want to show you
15:59 - a bunch of different operations that we
16:01 - can perform on it all right so I've just
16:03 - opened a piece of documentation here
16:04 - that's going to be very useful to you
16:06 - and is exactly how I learned how to do
16:08 - this now this is just the official
16:09 - documentation for g-spread which is the
16:12 - module that we're using and it pretty
16:13 - much shows you everything you'd want to
16:15 - do from creating sharing selecting
16:17 - worksheets formatting changing colors
16:19 - Etc so obviously I'll walk through some
16:21 - of these operations with you in the
16:23 - video but if you want something specific
16:25 - that I didn't cover you can go to this
16:26 - link which will be in the description
16:28 - for example we can see how to select a
16:30 - worksheet so we can see that we have the
16:32 - ability to get a worksheet by its index
16:35 - so just to be clear here the worksheets
16:37 - are what are down here right so we have
16:39 - only one worksheet but we could create
16:41 - another one like sheet two and now this
16:42 - would be index one where is this one
16:45 - would be index zero so that's what it
16:47 - means by kind of selecting the
16:49 - worksheets you can also select one by
16:51 - its name and you can just reference the
16:53 - name like this so sh. sheet1 if it's
16:56 - called sheet one you also can get a list
16:59 - of all of the worksheets you can create
17:01 - a new worksheet by adding a worksheet
17:03 - with a title and the number of rows and
17:05 - columns you can delete a worksheet you
17:08 - can update the name and the color Etc so
17:11 - what I'll show you now is just how we
17:12 - update cells so if you kind of basic
17:15 - operations here so let me go back to vs
17:17 - code and then we'll just work on a mini
17:18 - project that will kind of bring all of
17:20 - this full circle so first let's list out
17:22 - all of the worksheets that we have let's
17:24 - then select one and then we can just add
17:26 - some cell values and kind of read in
17:28 - what we have so let's go like this and
17:31 - say that this is actually going to be
17:33 - our workbook just so it's clear and
17:36 - we're going to say
17:37 - sheets is equal to the workbook Dot and
17:42 - we can just say what is this work sheets
17:47 - like that then we can simply
17:49 - print all of the sheets and if we go
17:53 - here and we run our code again ignore
17:56 - the warning doesn't really matter for
17:58 - right right now you see that we get
17:59 - worksheet sheet one and then worksheet
18:01 - sheet 2 they both have an ID and they
18:04 - also have a title now let's say we want
18:06 - to get all of the titles so we don't
18:07 - want these worksheet objects what we can
18:10 - do is the following we can actually put
18:13 - a map around this so we can say map and
18:16 - then we can put a function like Lambda
18:18 - we could say Lambda xx. tile this just
18:21 - means we're going to apply this function
18:22 - to every single value inside of this
18:25 - list and then what I can do is I can
18:26 - just print out the list version of my
18:31 - sheets and you will see that if I run
18:34 - this here let's make it a little bit
18:35 - bigger it should give us the titles
18:37 - which it does of sheet one and Sheet two
18:40 - so that's how you see the different
18:41 - titles now that you have the titles you
18:43 - can select a specific sheet so we know
18:46 - what the titles are so we can say sheet
18:48 - is equal to our workbook Dot and then
18:51 - worksheet and then we can simply use one
18:54 - of the titles to select one so we can
18:55 - select sheet one and then what we can do
18:58 - is something like sheet Dot and maybe we
19:02 - want to update a cell so I'm going to
19:04 - say update and then notice we have a few
19:05 - options here right we have index Note
19:07 - Tab title Etc maybe we want to update
19:10 - the title of this so let's update the
19:12 - title to be hello world okay let's go
19:16 - ahead and run our
19:19 - code and give it a second
19:22 - here and we should see now if we go back
19:25 - here that the title of sheet one is
19:27 - hello world okay so that's how you
19:29 - update a sheet now once you're inside of
19:31 - a sheet so now we're actually going to
19:32 - select the sheet that has the title
19:34 - hello world cuz we've changed the title
19:35 - right if you want to update a cell in
19:37 - there you have two options you can use
19:40 - the
19:41 - update a cell now when you use aell this
19:44 - is going to take a notation like in all
19:47 - capital sorry A1 or B2 or B3 or
19:51 - something like that right where you have
19:53 - a character or you have a letter and
19:55 - then you have the corresponding column I
19:57 - guess or no no sorry row whereas if you
20:00 - use cell you're able to actually
20:03 - reference the row and the column that
20:06 - you want to access using numeric values
20:08 - which is a little bit easier when you're
20:10 - working in Python so in this case I can
20:12 - access one one which should be the very
20:13 - first cell rather I can access 2 one so
20:16 - if we go and do one one we can say
20:18 - something like Hello World this is
20:21 - changed and now if we clear and run our
20:26 - code you'll see see in a second once
20:29 - this finishes that we will update a
20:30 - value in the cell so if we go back here
20:32 - you can see now that we've updated that
20:33 - very first cell and it says hello world
20:35 - this is changed okay so again you have
20:37 - those two options you have the option to
20:39 - update aell where now you're only going
20:41 - to pass one thing so you can pass say A1
20:44 - or you can do cell where you're going to
20:46 - pass the row and the column that you
20:48 - want to update now let's say rather than
20:50 - updating a cell you just want to
20:52 - actually get the value of a specific
20:54 - cell well in that case we can say value
20:57 - is equal to and then it's going to be
20:58 - our sheet Dot and in this case we can
21:01 - type just cell or asell okay so same
21:04 - thing before and we can do something
21:06 - like
21:07 - a1. value and then if I print out the
21:11 - value here so again let's go clear and
21:15 - run you should see that we get the value
21:18 - which in this case is Hello World this
21:20 - is changed okay so again you have access
21:22 - to Asel or simply cell and then you're
21:25 - going to use value and it's going to
21:27 - tell you the value that's inside of that
21:29 - cell now it's possible that you may not
21:31 - actually know the location of the cell
21:33 - that you want and instead maybe you know
21:35 - that it has a specific value so maybe
21:37 - the value is something like Tim is great
21:40 - so you know there's some cell on the
21:41 - page and it has some string value right
21:44 - but you don't know where it is and you
21:45 - may want that location because some
21:47 - other information may be relative to
21:49 - that location so in this case what we
21:51 - can actually do is we can find a Cell by
21:53 - its text so what I can do is I can say
21:56 - cell is equal to sheet sheet do find let
22:00 - me just remove all of this here and we
22:02 - can put in here whatever the information
22:03 - is that we want to find so in this case
22:05 - it was Tim is great and then what I can
22:08 - do is I can print out some properties of
22:10 - this cell so I can say cell. row and
22:13 - cell. column and now if it finds the
22:16 - cell that we're looking for that
22:18 - contains this value we can get some
22:20 - information about it right like the row
22:21 - and the column so if we go here again
22:23 - and we clear and we run you should see
22:27 - that we get that information and we get
22:29 - 1 three okay so it located that cell and
22:31 - it told us well it's in row one and it's
22:33 - in column 3 so now we can use that
22:35 - information to maybe access or update
22:37 - another cell last thing that I'll show
22:39 - you here is that we can actually perform
22:40 - some formatting and then we'll get into
22:42 - just a tiny little project that will
22:44 - kind of illustrate more about how to do
22:46 - this and work with Google Sheets so
22:48 - let's say we want to actually just
22:49 - format the very first cell and we want
22:51 - to make it something like bold text well
22:53 - to do that we can simply write the name
22:55 - of our worksheet so something like sheet
22:58 - do format then in our letter number
23:01 - notation so something like A1 we're
23:03 - going to specify the cell or you can
23:05 - actually specify a range of cells so I
23:07 - can do something like A1 to B1 that
23:09 - would then modify two cells in this case
23:11 - we'll just do A1 and we're going to
23:14 - specify the text format if we could
23:19 - spell this correctly to be equal to and
23:22 - then this is going to be bold colon true
23:24 - you can imagine there are a lot of other
23:26 - formatting things you can do this is
23:27 - probably just the most simple one and
23:29 - now if I go and I run my code we'll see
23:33 - in a second once this finishes executing
23:35 - that if I go over here we now have bold
23:38 - text in cell A1 I should probably zoom
23:40 - in a little bit so it's easier to read
23:42 - but you guys get the point okay that's
23:43 - how you perform the formatting there is
23:45 - like a million other things you can do
23:46 - with the formatting and I'm actually
23:48 - just going to quickly open up a link
23:50 - that's going to be a little bit helpful
23:51 - if you want to do some more advanced
23:52 - formatting so I'm going to leave this in
23:54 - the description but there is actually a
23:56 - module called g-spread formatting which
23:58 - lets you do some much easier formatting
24:01 - using python in this case you can see we
24:03 - can actually create like a more advanced
24:05 - formatting with horizontal alignment
24:07 - text format background color Etc and
24:09 - there's all these cool things that you
24:11 - can do I'll let you guys reference that
24:12 - if you want from the description so if
24:14 - you're going to do a ton of formatting
24:15 - definitely check this out otherwise what
24:17 - I'm doing here is totally fine okay so
24:20 - now we know how to format access cells
24:22 - update cells updates uh worksheets
24:25 - modify worksheets Etc what we're going
24:27 - to do now is get into a tiny little
24:29 - project so let's do that all right so
24:31 - for this project I have some values now
24:33 - all I want to do is just put these
24:35 - values inside of a new worksheet but I
24:37 - only want to put them in that worksheet
24:39 - if the worksheet doesn't already exist
24:42 - if it does exist then what I want to do
24:43 - is override the values if it doesn't
24:45 - exist I need to create that new
24:47 - worksheet and then add all of these
24:48 - different values I also want to perform
24:50 - a little bit of formatting and I want to
24:52 - use some equations or formulas in my
24:54 - sheet which I'm going to show you how to
24:55 - do so we have these values okay and what
24:58 - we're going to do now is start by
24:59 - actually creating a new worksheet if the
25:01 - one that we want doesn't already exist
25:04 - so first thing we need to do here is
25:05 - just get the name of all of the sheets
25:06 - that exist so we can see if this already
25:08 - exists or not so to do that we are going
25:11 - to say the
25:12 - worksheet list is equal to we're going
25:15 - to use the same thing I showed you
25:17 - before where we have map Lambda x x.
25:20 - tile and then this is going to be the
25:22 - sheet. worksheets and what did we call
25:26 - it we actually called this the work
25:27 - sorry this going to be workbook do
25:29 - worksheet that's going to give us the
25:30 - names of all of the different worksheets
25:33 - that we have inside of our file now that
25:35 - we have that we're going to specify what
25:37 - the name of the worksheet we want to
25:38 - create is so we're going to say new
25:41 - worksheet name is equal to and I'm just
25:44 - going to call this
25:46 - values okay now what I'm going to do is
25:49 - check if this exists inside of this so
25:51 - I'm going to say if the new worksheet
25:53 - name is inside the worksheet list then
25:57 - what I want to do here is simply access
26:01 - that sheet so I'm going to say my sheet
26:04 - is equal to the workbook do the
26:08 - worksheet and then we're going to have
26:10 - the new worksheet name so this is if it
26:12 - already exists otherwise we want to
26:14 - create it so to do that we're going to
26:16 - say sheet do add sorry not sheet we're
26:19 - going to say workbook do add worksheet
26:21 - we're going to give it a name well the
26:23 - name is going to be the new worksheet
26:24 - name and then we need to specify the
26:26 - number of rows the number of columns
26:28 - that we want when we create this new
26:30 - sheet so we're saying 10 rows 10 columns
26:33 - this is the name of the sheet we're
26:34 - going to add this to our workbook so now
26:36 - next time when we run this it will
26:37 - already exist so rather than adding it
26:39 - we'll simply access it and that also
26:42 - reminds me we're going to associate this
26:43 - with the sheet variable so this way now
26:45 - no matter what happens whether it
26:47 - existed or didn't exist we're going to
26:48 - have some sheet that we can start
26:50 - working on hopefully that's clear but
26:52 - that just checks okay does it exist if
26:54 - it does access it otherwise create it
26:57 - all right now now that we have it we're
26:58 - going to clear it so I'm going to say
26:59 - sheet. clear that's just going to remove
27:02 - everything inside of it so we're
27:03 - starting fresh and now we can start
27:05 - writing in some new values obviously you
27:07 - don't have to do that but that's what
27:08 - I'm going to show you how to do here now
27:10 - the long way to actually take all of
27:12 - these values and to put them into our
27:13 - Google sheet would be to write something
27:17 - like this now what this does is simply
27:19 - Loop through all of the different values
27:21 - that we have inside of the values list
27:23 - and then Loops through every single one
27:25 - of the columns that we have in those
27:27 - rows and individually updates every
27:30 - single cell inside of our sheet to
27:32 - contain this value now that's fine but
27:35 - the issue is that these are happening
27:37 - kind of sequentially and we can't start
27:38 - updating the next cell until we've
27:40 - updated the previous cell now what this
27:42 - means is this code even when we only
27:44 - have something like 12 values here to
27:46 - actually update is going to take a few
27:48 - seconds to run and it's really
27:50 - inefficient to update one sell at a time
27:52 - unless you need to be doing individual
27:54 - cells so what we can do instead is we
27:56 - can actually update a range of cells at
27:59 - the same time so to do that we can use
28:01 - our sheet name we can say sheet and we
28:04 - can say do update so rather than update
28:06 - cell we can actually update a range of
28:08 - them now to do that we can put an F
28:10 - string here and we can say we're going
28:11 - to update from A1 to C and then this is
28:15 - going to be the length of our values now
28:19 - the reason I'm doing this is because
28:21 - well if we have four rows then we want
28:23 - to go to C4 what I'm specifying is the
28:26 - Box essentially and we can go back here
28:27 - and look at it right so the box is
28:29 - something like this that I want to
28:30 - update with different values so C4 is
28:33 - what I want to go to because we have
28:35 - four rows if we had five six seven rows
28:37 - we'd go down there right in this case
28:39 - I'm hardcoding C because I know we're
28:41 - just going to have three columns okay so
28:43 - I'm saying A1 to C and then that Dynamic
28:45 - value and then what we're going to do is
28:47 - specify the values we want to update
28:49 - this with which will just be values okay
28:51 - so we have the array here of values what
28:54 - this does is take all of these and
28:55 - correspondingly place it ins inside of
28:57 - the box that we specified here okay
29:00 - before we go any further I want to test
29:01 - to make sure this is working so I'm
29:03 - going to clear this and I'm going to
29:04 - rerun and it should now make that new
29:07 - sheet for us and add those values inside
29:09 - of it uh and we got an issue here it
29:11 - says the order of arguments okay that's
29:14 - fine um deprecation warning don't worry
29:16 - about that anyways if we go here we now
29:18 - see that we have a new sheet called
29:20 - values okay it's a little bit smaller
29:21 - cuz we only added 10 rows and 10 columns
29:24 - and we now have our name price quantity
29:26 - we have the name of the items the price
29:27 - and the quantity now if we want to do
29:29 - something like make some of these titles
29:31 - bold or maybe we want to add the total
29:33 - price or the total quantity we can do
29:35 - that and I'm going to show you how we do
29:37 - that now okay so we have sheet. update
29:41 - now what we're going to want to do after
29:43 - this is we're going to want to perform a
29:44 - little bit of formatting so we have some
29:45 - bold titles right so what I can do is
29:48 - say sheet. format and I want to format a
29:51 - range of cells so in this case I can
29:53 - format from A1 to C1 which are going to
29:57 - be my headers and I can simply say that
29:59 - I want this to be the text
30:02 - format of bold true and that should give
30:06 - me some bold headers so let's see if
30:08 - that works or not we're going to again
30:11 - run our code we'll go over here and we
30:13 - should see in real time that actually
30:15 - updates them to be bold so you can see
30:17 - it clears it adds it back and then makes
30:19 - our headers bold very nice okay so that
30:22 - automation is working uh last thing
30:24 - we'll do sry to keep going back and
30:25 - forth is we'll make it so that these
30:27 - down here that I'm selecting have the
30:29 - sum of the price and the sum of the
30:30 - quantity so in order to do that we can
30:32 - update some individual cells so I can
30:35 - say
30:36 - sheet. update cell let me just make this
30:39 - a bit smaller so it's easier to read in
30:42 - terms of updating cell we can pick the
30:44 - cell that we want to update so the cell
30:46 - that I want to update is going to be the
30:48 - Len of values plus one because I want to
30:51 - get however many rows I have in this
30:53 - case it's four plus one so the fifth row
30:55 - right that's the one that I'm updating
30:57 - and then in terms of the column I want
30:58 - to do the second column and we're going
31:01 - to make this equal to an equation now to
31:03 - do that I just do equals sum and then I
31:07 - can say B2 to B4 so that means okay hey
31:10 - let's go back to the sheet quickly and
31:12 - have a look from B2 which is this to B4
31:15 - I want to take the sum of that and store
31:16 - that in B5 that's all I'm doing okay and
31:19 - I'm just doing it a bit dynamically by
31:21 - using the length of values so if we
31:22 - added more values this would adjust now
31:24 - let's do the same thing here except this
31:26 - time we're going to go to column 3 and
31:28 - we're going to do C2 and C4 and now
31:32 - let's run the
31:34 - code let's go over here and let's watch
31:36 - the update get
31:38 - performed so we should see it clears
31:40 - adds the values back in and then notice
31:43 - now that we have the sums okay so we
31:45 - have the sum of all the prices which is
31:47 - 7797 then we have the sum of the
31:49 - quantity which is 8 perfect there we go
31:53 - I think that's pretty much everything I
31:54 - needed to show you so that is a
31:57 - automating Google Sheets with python
31:58 - obviously there is a ton more stuff you
32:00 - can do I just wanted to make this video
32:02 - to give you a primer show you the setup
32:04 - show you how you connect to an
32:06 - individual sheet and then give you a bit
32:08 - of realistic information on kind of how
32:09 - to set up a mini project if you guys
32:11 - have any questions do let me know in the
32:13 - comments down below if you enjoyed the
32:14 - video leave a like subscribe to the
32:16 - channel and I will see you in the next
32:19 - [Music]
32:26 - one

Cleaned transcript:

this video will show you how to automate Google Sheets with python specifically how to connect to a workbook how to create and open existing sheets how to modify the cells how to add formulas how to do formatting and we'll go through a lot of different nuances and some ways to more efficiently perform these operations at the end of the video I'll even walk you through a mini project that will illustrate how to take an array of different values add those into sheets add some headings create some formulas Etc with that said let's get into into it after a quick word from our sponsor nordpass nordpass provides the ultimate password and credential management solution in today's digital age we've got all kinds of passwords Keys credit cards and credentials and I don't know about you but I always have trouble finding them and actually sharing them with other people now to combat this nordpass not only stores all of this information securely but it lets you autofill it across multiple devices and share it with colleagues or employees with Advanced Access Control now what that means that you can actually use strong passwords by default and easily Grant or revoke access not to mention that if there are any security vulnerabilities Nord pass's data breach scanner can automatically detect those and inform you of them immediately now if you don't believe me you can try a threemonth free trial of nordpass using my activation code techwithtim at the link nordp pass.com techwithtim now password management is an absolute nightmare when it's not taken seriously and that leads to Stats like this where 52% of development teams have actually missed deadlines due to issues accessing infrastructure get your business secured today with a 3month free trial of Nord pass so that you're not a part of that statistic you can go and use my activation code Tech with Tim at the link nordp pass.com techwithtim for this limited time offer let's begin automating Google Sheets now in order to do this we're going to need to go to the Google Cloud console so to do that we're going to just search Google Cloud console we're going to find the url that is console. cloud.google.com once you click into this here we're going to create a new project now before we do that just make sure you select the correct Google account in the top right hand corner where you want this project to be created let me go ahead and do that all right so once you've selected your primary Google account you can go up here where it shows the project list and you can simply create a new project you can see I have a bunch of them here uh in this case we can just call this something like tutorial sheets doesn't really matter Call It Whatever you'd like you can select organization if you know what that is if not just go ahead and click create from here it's going to create the new project for you once it's created we're going to select that project from the project selector and then I'll show you the next step so here select project okay we're now inside of this project now we're going to open up the navigational menu here and we're going to go to apis and services from this menu we're going to click on enabled apis and services there's many ways to get to this but you just want to get to enabled AP apis and services from here we're going to click on this button that says enable apis and services and we're going to search for the Google Sheets API by the way if you're ever trying to do any automation with Google pretty much all of the apis are available here so we're going to search for the Google Sheets API you can see it will pop up right here click into it and then we go ahead and click enable that's pretty much it we're just enabling the Google Sheets API now what we'll need to do is create a set of credentials that will utilize the API that then we can have access to in our project so once you've enabled the API you should be brought to a page that looks like this now for some reason you can't find this page you can always just go back to the enabled apis and services you can go back here you can search for Google Sheets API again click into it and then simply click on manage and it should bring you back to this page regardless you can press this button right here which says create credentials or you can select the credentials menu down here and then create create credentials there's a bunch of different ways to do this so we're going to click on this big blue button here for creating the credentials now it's going to ask us what type of API we're using we're going to select the Google Sheets API and where we have user data or application data we can simply select application data that'll bring us to next and this is where we're going to create a service account so what we need is a service account so what we'll do is give this a name I'm just going to call this python API like that and it's going to go ahead and give us a service account ID we're now going to go ahead and click on Create and continue and we're going to Grant this a role now this step is very important make sure that you give this the editor rule so you're going to search for editor select editor here the ID doesn't matter it can be whatever you want you just want to make sure you have this as an editor you're then going to click on continue and from here you can go ahead and click on done all we're doing is creating a set of credentials that we'll we'll be able to use sorry from our python script that will be able able to edit things like spreadsheets great now from this point on what we need to do is actually download the credentials so we're going to go to the credentials tab here we're going to click on the service account that we just created and it's going to open it up for us now here you can actually modify the account if you want but what we want to do is go to keys from keys we're going to click on ADD key and we're going to create a new key now we're going to just download a Json version of this key which we'll be able to load in our python script so go ahead and select Json and click on create it's going to download that most likely into your downloads folder and what we need to do now is get this in the same project as our python file all right so I've just opened up visual studio code and you can see that I have my finder open here if you're on Windows obviously this will be Windows Explorer now what you're going to want to do is find the file that was downloaded so whatever location it went to and just take it and put it in the same project where your python file is going to be so just to backtrack a little bit what I didn't vs code here is I just open up a new folder it's called Google Sheets tutorial okay so just go file open folder open any new folder can be on your desktop wherever you want it to be I created a python file called main.py and now my goal is to get the file I just downloaded so this one here into the same directory now to do that I can simply take it and drag it over here in vs code I also could simply copy it and then locate the folder on my desktop and then paste it in I'm assume many of you are able to do that just get in the same directory as your python file now it's going to have some information here obviously you don't want to leak this I will clearly delete the project after this tutorial you don't need to know what any of that means what we're going to do next just to make our life a little bit easier is we're going to look at this file zoom in a little bit here we're going to rename it so I'm just going to call this credentials like that so that it's a little bit easier for us to reference in our python code all right so now that we have our credentials in the same folder as our python file the next thing we'll need to do is actually link the Google sheet that we want to work with with the service account that we created and you can do this with as many Google Sheets as you'd like but obviously you need to have ownership of them so what I'm going to do is transition over here and you can see that I have a Google sheet that I've created it's just an empty sheet I simply put one test value here in the first um kind of column first row what we'll do now is we'll find the email address of the associated service account and we'll simply share access of this Google sheet to the email address so if we go back here to our Google Cloud console you'll see that we have our keys and we have our service account so I'm already in the service account but again if for some reason you can't find it what you're going to be doing is going into the Google Sheets API and you should see a service account here and it should actually specify the email for the service account so what we're going to do is copy that email you can also click into it here and it will show you the email for the service account that you created so we're going to get that email we're going to go to our Google sheet we're going to click on share and we're going to paste that email inside of here now we're going to make sure that we have editors selected as the access and we're simply going to share this Google sheet with the email associated with our service account now you can do this with any number of Google Sheets that you'd like as soon as you do that anyone who has access to the service account which in this case is us and our python script will be able to modify and access this Google sheet so there you go again take the email share it from the Google sheet now you're good we can go back to s code and we can start working on connecting to this Google sheet so now that we've created and shared the Google sheet what we need to do is install a few packages that we need to actually interact with this now to install these packages we can do it just in our main system or our main python installation or we can create a virtual environment which will make things a little bit neater and the virtual environment will be a bit different depending on your operating system but if you're on Mac you can type python if we could spell this correctly Python 3 Hy an M ven V and then the name of the environment you want to install this in which can be something like sheets you can name it anything you'd like if you're on Windows You're simply just going to have python if you're on Linux it'll be Python 3 so we're going to hit enter here and it should go ahead and create the virtual environment for us now that we have the virtual environment created we need to activate this now there's a few ways to activate it if you're on Mac or Linux you can type the following command now this is going to be Source the environment name which in this case is sheets and then bin and then activate now when you type that you should see that you get a prefix here with the name of your environment and now in this terminal we have access to the virtual environment now if you are on Windows the command's going to be a little bit different what you're going to want to do is make sure you're inside of Powershell and you're going to type dot SL sheets SL bin SL activate so same thing here okay but you're just having the dot slash and this should run this file as an executable and uh initialize the environment for you you okay so now that the virtual environment is initialized what we can do is install the different modules that we need so we're going to type pip 3 install and then the first one we need is the Google API python client and I will leave these in the description in case you just want to copy them now as well as that we also want to have the Google and then this is the o HTTP lib 2 and then we want the Google off dash and this is the o off lib and then lastly we want gspread okay so these are the four libraries that we need Google API python client Google o HTTP lib 2 Google o oo lib and gspread again I will link this exact command in the description so you can simply copy it and paste it we're going to go ahead and hit enter and install all of these different libraries if you are on Windows you might note here that you can actually just use pip instead of pip 3 okay so if pip 3 doesn't work just do pip and that command hopefully should work view okay so now everything should be installed in our virtual environment and the virtual environment is activated I'm going to clear the screen minimize the terminal and we'll start typing now and actually getting access to our sheet so we're going to begin by importing something called gspread and let me just zoom in a little bit here so you can read this now gspread is a library that makes it easy for us to actually interact with the sheet this is kind of a highlevel API on top of the lower level operations you can perform on the Google sheet so that's what gspread is next next we're going to say from Google do o if we could spell this too oo 2. servicecore account we're going to import the credentials in case you need any of this code I will link it uh in a GitHub repo in the description and what we're going to do next is we're going to specify some Scopes now Scopes are the different things that you can do kind of the operations or the access you have when you're accessing a specific file document Etc using the Google apis now in our case we just want access to a spreadsheet so we're going to say Scopes is equal to a new list and inside of here we're going to write out the following scope I'm actually just going to copy it in so I don't get any typos again this will be linked in the description so this is the googleapis.com sloths spreadsheets now what we're going to do is create a new set of credentials using the Json credentials file we have here in our directory so we're going to say creds is equal to credentials. from undor service account file okay and then we're going to type the name of the file which is credentials. Json matching up exactly with what we have here now when we do that let me just remove this here we are now going to specify that Scopes is equal to the Scopes that we have here saying okay we want to use the service account and these are the Scopes we want with the service account for what we're accessing now that we have that we are going to authorize ourself so we're going to say client is equal to gspread we got to spell that correctly do authorize and we're going to authorize the credentials that we just created that's going to give us a client now that will be able to access different Google Sheets all right so now what we're going to need is access to the ID of the Google sheet that we want to access so we're going to say sheet unor ID is equal to an empty string and we are now going to go back to Google she sheet so let me open up this file right here and we can find the ID now the way you find the ID of the sheet is you simply copy the URL here you look for where the slash D is I'll zoom in so it's a little bit easier to see and then we will highlight everything that comes after the slash D but before the edit okay so after the slash D this is the ID of this document so you're just going to copy that there from the URL and we're going to go back and we're going to paste this in our sheet ID now that we have the sheet ID we can use this to actually open the spreadsheet to do that we can say sheet is equal to client. openen by and this actually not URL sorry this open by key and then we can simply pass in here the variable sheet ID now I will note there's a few other ways to open this you can open by URL open all you can open by a name you can open by the key which is what we're doing the key is going to be the most foolproof because you're just using the ID so for example if the name of the spreadsheet changed you're not going to have an error here right CU you're using the actual ID so what we can do just to make sure this is working is we can say values unor list is equal to this is going to be the sheet and then do sheet one. row underscore values and then we can simply pass in one here now you might not know exactly what this is doing but I'm just going to print the values list and if we go back to our sheet here you'll see that we have a test value in the first set cell so what should happen when I run my code is it should simply print out that test value so let me just clear the terminal here notice what I did right is I have my sheet I'm accessing the worksheet within this Google sheet or this Google workbook the sheet is called sheet one okay and then I'm getting all of the row values in row one and I'm printing those out so now if I go here and I type Python 3 main.py that's how I'm able to run this file you should see that we get some warning that's fine don't worry about that and it should print out the test value for us and it does it says test value inside of a list telling us that this is indeed working so just to prove to you that this is really working we can go add another value here so we can say value two we can save this sheet notice that it's been saved now to the drive and if we go back and we rerun this we can wait a second and we should now see that we get two values appearing here and we do we get test value and value two so we have successfully connected to our workbook or to our Google she sheet now I want to show you a bunch of different operations that we can perform on it all right so I've just opened a piece of documentation here that's going to be very useful to you and is exactly how I learned how to do this now this is just the official documentation for gspread which is the module that we're using and it pretty much shows you everything you'd want to do from creating sharing selecting worksheets formatting changing colors Etc so obviously I'll walk through some of these operations with you in the video but if you want something specific that I didn't cover you can go to this link which will be in the description for example we can see how to select a worksheet so we can see that we have the ability to get a worksheet by its index so just to be clear here the worksheets are what are down here right so we have only one worksheet but we could create another one like sheet two and now this would be index one where is this one would be index zero so that's what it means by kind of selecting the worksheets you can also select one by its name and you can just reference the name like this so sh. sheet1 if it's called sheet one you also can get a list of all of the worksheets you can create a new worksheet by adding a worksheet with a title and the number of rows and columns you can delete a worksheet you can update the name and the color Etc so what I'll show you now is just how we update cells so if you kind of basic operations here so let me go back to vs code and then we'll just work on a mini project that will kind of bring all of this full circle so first let's list out all of the worksheets that we have let's then select one and then we can just add some cell values and kind of read in what we have so let's go like this and say that this is actually going to be our workbook just so it's clear and we're going to say sheets is equal to the workbook Dot and we can just say what is this work sheets like that then we can simply print all of the sheets and if we go here and we run our code again ignore the warning doesn't really matter for right right now you see that we get worksheet sheet one and then worksheet sheet 2 they both have an ID and they also have a title now let's say we want to get all of the titles so we don't want these worksheet objects what we can do is the following we can actually put a map around this so we can say map and then we can put a function like Lambda we could say Lambda xx. tile this just means we're going to apply this function to every single value inside of this list and then what I can do is I can just print out the list version of my sheets and you will see that if I run this here let's make it a little bit bigger it should give us the titles which it does of sheet one and Sheet two so that's how you see the different titles now that you have the titles you can select a specific sheet so we know what the titles are so we can say sheet is equal to our workbook Dot and then worksheet and then we can simply use one of the titles to select one so we can select sheet one and then what we can do is something like sheet Dot and maybe we want to update a cell so I'm going to say update and then notice we have a few options here right we have index Note Tab title Etc maybe we want to update the title of this so let's update the title to be hello world okay let's go ahead and run our code and give it a second here and we should see now if we go back here that the title of sheet one is hello world okay so that's how you update a sheet now once you're inside of a sheet so now we're actually going to select the sheet that has the title hello world cuz we've changed the title right if you want to update a cell in there you have two options you can use the update a cell now when you use aell this is going to take a notation like in all capital sorry A1 or B2 or B3 or something like that right where you have a character or you have a letter and then you have the corresponding column I guess or no no sorry row whereas if you use cell you're able to actually reference the row and the column that you want to access using numeric values which is a little bit easier when you're working in Python so in this case I can access one one which should be the very first cell rather I can access 2 one so if we go and do one one we can say something like Hello World this is changed and now if we clear and run our code you'll see see in a second once this finishes that we will update a value in the cell so if we go back here you can see now that we've updated that very first cell and it says hello world this is changed okay so again you have those two options you have the option to update aell where now you're only going to pass one thing so you can pass say A1 or you can do cell where you're going to pass the row and the column that you want to update now let's say rather than updating a cell you just want to actually get the value of a specific cell well in that case we can say value is equal to and then it's going to be our sheet Dot and in this case we can type just cell or asell okay so same thing before and we can do something like a1. value and then if I print out the value here so again let's go clear and run you should see that we get the value which in this case is Hello World this is changed okay so again you have access to Asel or simply cell and then you're going to use value and it's going to tell you the value that's inside of that cell now it's possible that you may not actually know the location of the cell that you want and instead maybe you know that it has a specific value so maybe the value is something like Tim is great so you know there's some cell on the page and it has some string value right but you don't know where it is and you may want that location because some other information may be relative to that location so in this case what we can actually do is we can find a Cell by its text so what I can do is I can say cell is equal to sheet sheet do find let me just remove all of this here and we can put in here whatever the information is that we want to find so in this case it was Tim is great and then what I can do is I can print out some properties of this cell so I can say cell. row and cell. column and now if it finds the cell that we're looking for that contains this value we can get some information about it right like the row and the column so if we go here again and we clear and we run you should see that we get that information and we get 1 three okay so it located that cell and it told us well it's in row one and it's in column 3 so now we can use that information to maybe access or update another cell last thing that I'll show you here is that we can actually perform some formatting and then we'll get into just a tiny little project that will kind of illustrate more about how to do this and work with Google Sheets so let's say we want to actually just format the very first cell and we want to make it something like bold text well to do that we can simply write the name of our worksheet so something like sheet do format then in our letter number notation so something like A1 we're going to specify the cell or you can actually specify a range of cells so I can do something like A1 to B1 that would then modify two cells in this case we'll just do A1 and we're going to specify the text format if we could spell this correctly to be equal to and then this is going to be bold colon true you can imagine there are a lot of other formatting things you can do this is probably just the most simple one and now if I go and I run my code we'll see in a second once this finishes executing that if I go over here we now have bold text in cell A1 I should probably zoom in a little bit so it's easier to read but you guys get the point okay that's how you perform the formatting there is like a million other things you can do with the formatting and I'm actually just going to quickly open up a link that's going to be a little bit helpful if you want to do some more advanced formatting so I'm going to leave this in the description but there is actually a module called gspread formatting which lets you do some much easier formatting using python in this case you can see we can actually create like a more advanced formatting with horizontal alignment text format background color Etc and there's all these cool things that you can do I'll let you guys reference that if you want from the description so if you're going to do a ton of formatting definitely check this out otherwise what I'm doing here is totally fine okay so now we know how to format access cells update cells updates uh worksheets modify worksheets Etc what we're going to do now is get into a tiny little project so let's do that all right so for this project I have some values now all I want to do is just put these values inside of a new worksheet but I only want to put them in that worksheet if the worksheet doesn't already exist if it does exist then what I want to do is override the values if it doesn't exist I need to create that new worksheet and then add all of these different values I also want to perform a little bit of formatting and I want to use some equations or formulas in my sheet which I'm going to show you how to do so we have these values okay and what we're going to do now is start by actually creating a new worksheet if the one that we want doesn't already exist so first thing we need to do here is just get the name of all of the sheets that exist so we can see if this already exists or not so to do that we are going to say the worksheet list is equal to we're going to use the same thing I showed you before where we have map Lambda x x. tile and then this is going to be the sheet. worksheets and what did we call it we actually called this the work sorry this going to be workbook do worksheet that's going to give us the names of all of the different worksheets that we have inside of our file now that we have that we're going to specify what the name of the worksheet we want to create is so we're going to say new worksheet name is equal to and I'm just going to call this values okay now what I'm going to do is check if this exists inside of this so I'm going to say if the new worksheet name is inside the worksheet list then what I want to do here is simply access that sheet so I'm going to say my sheet is equal to the workbook do the worksheet and then we're going to have the new worksheet name so this is if it already exists otherwise we want to create it so to do that we're going to say sheet do add sorry not sheet we're going to say workbook do add worksheet we're going to give it a name well the name is going to be the new worksheet name and then we need to specify the number of rows the number of columns that we want when we create this new sheet so we're saying 10 rows 10 columns this is the name of the sheet we're going to add this to our workbook so now next time when we run this it will already exist so rather than adding it we'll simply access it and that also reminds me we're going to associate this with the sheet variable so this way now no matter what happens whether it existed or didn't exist we're going to have some sheet that we can start working on hopefully that's clear but that just checks okay does it exist if it does access it otherwise create it all right now now that we have it we're going to clear it so I'm going to say sheet. clear that's just going to remove everything inside of it so we're starting fresh and now we can start writing in some new values obviously you don't have to do that but that's what I'm going to show you how to do here now the long way to actually take all of these values and to put them into our Google sheet would be to write something like this now what this does is simply Loop through all of the different values that we have inside of the values list and then Loops through every single one of the columns that we have in those rows and individually updates every single cell inside of our sheet to contain this value now that's fine but the issue is that these are happening kind of sequentially and we can't start updating the next cell until we've updated the previous cell now what this means is this code even when we only have something like 12 values here to actually update is going to take a few seconds to run and it's really inefficient to update one sell at a time unless you need to be doing individual cells so what we can do instead is we can actually update a range of cells at the same time so to do that we can use our sheet name we can say sheet and we can say do update so rather than update cell we can actually update a range of them now to do that we can put an F string here and we can say we're going to update from A1 to C and then this is going to be the length of our values now the reason I'm doing this is because well if we have four rows then we want to go to C4 what I'm specifying is the Box essentially and we can go back here and look at it right so the box is something like this that I want to update with different values so C4 is what I want to go to because we have four rows if we had five six seven rows we'd go down there right in this case I'm hardcoding C because I know we're just going to have three columns okay so I'm saying A1 to C and then that Dynamic value and then what we're going to do is specify the values we want to update this with which will just be values okay so we have the array here of values what this does is take all of these and correspondingly place it ins inside of the box that we specified here okay before we go any further I want to test to make sure this is working so I'm going to clear this and I'm going to rerun and it should now make that new sheet for us and add those values inside of it uh and we got an issue here it says the order of arguments okay that's fine um deprecation warning don't worry about that anyways if we go here we now see that we have a new sheet called values okay it's a little bit smaller cuz we only added 10 rows and 10 columns and we now have our name price quantity we have the name of the items the price and the quantity now if we want to do something like make some of these titles bold or maybe we want to add the total price or the total quantity we can do that and I'm going to show you how we do that now okay so we have sheet. update now what we're going to want to do after this is we're going to want to perform a little bit of formatting so we have some bold titles right so what I can do is say sheet. format and I want to format a range of cells so in this case I can format from A1 to C1 which are going to be my headers and I can simply say that I want this to be the text format of bold true and that should give me some bold headers so let's see if that works or not we're going to again run our code we'll go over here and we should see in real time that actually updates them to be bold so you can see it clears it adds it back and then makes our headers bold very nice okay so that automation is working uh last thing we'll do sry to keep going back and forth is we'll make it so that these down here that I'm selecting have the sum of the price and the sum of the quantity so in order to do that we can update some individual cells so I can say sheet. update cell let me just make this a bit smaller so it's easier to read in terms of updating cell we can pick the cell that we want to update so the cell that I want to update is going to be the Len of values plus one because I want to get however many rows I have in this case it's four plus one so the fifth row right that's the one that I'm updating and then in terms of the column I want to do the second column and we're going to make this equal to an equation now to do that I just do equals sum and then I can say B2 to B4 so that means okay hey let's go back to the sheet quickly and have a look from B2 which is this to B4 I want to take the sum of that and store that in B5 that's all I'm doing okay and I'm just doing it a bit dynamically by using the length of values so if we added more values this would adjust now let's do the same thing here except this time we're going to go to column 3 and we're going to do C2 and C4 and now let's run the code let's go over here and let's watch the update get performed so we should see it clears adds the values back in and then notice now that we have the sums okay so we have the sum of all the prices which is 7797 then we have the sum of the quantity which is 8 perfect there we go I think that's pretty much everything I needed to show you so that is a automating Google Sheets with python obviously there is a ton more stuff you can do I just wanted to make this video to give you a primer show you the setup show you how you connect to an individual sheet and then give you a bit of realistic information on kind of how to set up a mini project if you guys have any questions do let me know in the comments down below if you enjoyed the video leave a like subscribe to the channel and I will see you in the next one
