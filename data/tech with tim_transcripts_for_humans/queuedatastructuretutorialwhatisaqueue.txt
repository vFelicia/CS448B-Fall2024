With timestamps:

00:00 - hello everyone and welcome to a brand
00:01 - new tutorial series on data structures
00:03 - now I'm just making this tutorial series
00:05 - because a lot of you guys have been
00:06 - asking for them and what I'm planning to
00:08 - do here is give really quick recaps in
00:10 - summaries of all these different data
00:12 - structures to kind of refresh you and
00:14 - just teach you the underlying concepts
00:16 - I'm not going to be implementing all of
00:17 - these are going into crazy details I'm
00:19 - hoping just to keep these videos short
00:20 - and explain with as much detail as
00:22 - necessary what these structures are and
00:24 - how they work so without further ado
00:26 - let's get started talking about queues
00:28 - now what is a queue well chances are you
00:31 - have probably been in a queue before or
00:33 - heard of a queue now the most basic
00:35 - example of a queue is something like a
00:37 - line so let's say we have three blobs
00:39 - down here and they're waiting in line to
00:41 - go to the cache let's say maybe they're
00:43 - at a store there's one cache and they're
00:45 - waiting to buy some items so like a
00:47 - grocery store or something like that now
00:49 - the way that we know a line works is the
00:51 - first blob in line will be the first
00:53 - person to get served by the cashier and
00:55 - then the second block will be the second
00:56 - the third will be a third and so on
00:58 - until there's no more people left in the
01:00 - line so we have blob number one he is
01:03 - the first one to get served by the cache
01:04 - and then he will be the first one to
01:06 - leave the line so this follows the
01:09 - principle known as FIFO and this is
01:11 - first-in first-out
01:13 - meaning the first person in the queue is
01:15 - the first person out and in this case
01:17 - when we're talking computer science be
01:19 - the first item in the queue is the first
01:20 - item out so we're prioritizing the
01:23 - people or the items or whatever it is
01:25 - that came first and that is all there is
01:28 - to know about a queue now I'm gonna go
01:30 - and talk about all these methods that I
01:32 - have on the left side here and how
01:33 - they're used to manipulate a queue add
01:35 - items remove items but again it's very
01:38 - straightforward
01:38 - so our queue has what's known as a front
01:41 - and a back and when you first come into
01:43 - the queue you come in from the back side
01:46 - now this is the exact same way that a
01:48 - line comes when you enter a line you
01:51 - come in from the back side then you go
01:53 - behind all the other people that are
01:54 - closer to the front and eventually once
01:56 - you get to the end it's your turn and
01:57 - then you get to do whatever it is that
01:59 - you want to do very basic that's what I
02:02 - need to mention there so if we want to
02:04 - add an item to our queue regardless of
02:06 - if it's full or not all we have to do is
02:08 - use one of the methods on this side
02:10 - which is on queue or push
02:12 - now this stands for add an item to the
02:14 - queue now I'm just gonna right push but
02:16 - again these methods mean the same thing
02:18 - it just sometimes they're different
02:19 - names based on what language you're
02:20 - using it the way you're implementing it
02:22 - but I'm gonna push the item one on to
02:25 - our queue so if I do that and I push the
02:28 - item one what happens is one will come
02:30 - in from the back of our queue and it
02:32 - will go to as far as it can so in this
02:34 - case it's gonna go right to the front
02:35 - and we're gonna put one inside of our
02:38 - queue
02:38 - now let's push another item on to a
02:40 - queue and see how that works so just
02:42 - change the color here if I go ahead and
02:44 - push now the item let's say four on to
02:47 - our queue well the exact same thing
02:49 - happens it comes in from the back side
02:51 - and then we see it here as for now let's
02:56 - move on to the next methods DQ or pop
02:58 - now you can probably guess what this
03:00 - does but this is what removes an item
03:02 - from our queue so this won't remove it
03:05 - from the front of our queue so the first
03:07 - item that was in will be the first item
03:09 - to be removed so if I go ahead and use
03:11 - pump so DQ or pop again the same thing
03:13 - what will happen is one will be removed
03:17 - from our queue and passed to a return to
03:20 - wherever we call pop so we said
03:22 - something like x equals pop we're
03:24 - calling pop on our queue what happens is
03:26 - X is actually gonna be given the value
03:28 - of one because that was the item that
03:30 - was at the front of our queue now what
03:33 - actually happens is inside of our queue
03:35 - that item is removed as well so when we
03:37 - call pop one will be removed and now
03:39 - four is the very front of our queue and
03:41 - the next time we call pop we will get
03:43 - four that is all there is to adding and
03:46 - removing items from the queue now
03:48 - sometimes you want to look at the first
03:50 - item in the queue without removing it
03:52 - you actually want to do this quite often
03:53 - so in that case we use the method peek
03:56 - or front again they mean the same thing
03:58 - just whatever one you prefer to write so
04:01 - in this case all right front and if I do
04:03 - front what happens is we will be given
04:06 - the value of four here so 4 will be
04:08 - right there
04:08 - but we're not actually gonna remove it
04:10 - from the queue and that's as simple as
04:12 - as it is to it so 4 will stay in there
04:13 - but will be seen for and would be given
04:15 - for and if I call front again well we're
04:19 - gonna see for one more time because
04:20 - again we didn't remove it from the queue
04:22 - so you can't actually look more than one
04:24 - item back in the queue you would have to
04:26 - pop off items until you get to whatever
04:28 - item that is so that's something to note
04:30 - that you can't access any of the middle
04:32 - or end items of the queue you can only
04:33 - look at the front of the queue and add
04:35 - items to the back of the queue and that
04:37 - is the restriction of it but that's also
04:38 - one of the reasons that we use it now
04:40 - let's just remove these for one second
04:42 - and let's show the last method which is
04:44 - is empty now if you try to remove an
04:48 - item from a queue and that queue is
04:49 - empty you're gonna run into some errors
04:51 - so let's just erase this right now so
04:53 - let's say we have an empty queue and
04:54 - let's just not call pop or front anymore
04:57 - so let's get rid of all this let's say
04:58 - we have an empty queue and we want to
05:00 - pop off the front item of the queue so
05:03 - if we try calling front like this or we
05:05 - call yeah we can try front or we can
05:08 - even try pop we try to do one of those
05:10 - and there's nothing in our cube we're
05:11 - gonna run into an error so we need to
05:13 - first check if our queue is empty using
05:15 - the is empty method so what we typically
05:17 - do is we say if not is empty like that
05:24 - then we can go ahead and do whatever
05:26 - operation we wanted to do so in this
05:28 - case maybe we pop off the front item of
05:30 - the queue or maybe we add another item
05:31 - or whatever it is but we need to check
05:33 - before we try to do either a pop or
05:35 - front operation if the queue is empty
05:37 - otherwise we're gonna run into issues so
05:39 - the last thing here to mention about
05:40 - queues is the time complexity of these
05:43 - operations so this is one of the reasons
05:44 - we use queues and all of these
05:46 - operations here that I've mentioned
05:47 - running what's known as constant times
05:49 - if you're familiar with Big O notation
05:51 - then you know what that means but
05:53 - essentially it doesn't matter how big
05:54 - our queue gets when we're adding
05:57 - removing an item from our queue it will
05:58 - happen as fast as if the queue was empty
06:01 - or if it only had one or two items in it
06:02 - and it's a very important thing to
06:04 - realize and it's one of the reasons we
06:05 - use these queues now depending on how
06:07 - you implement this queue and write the
06:09 - code you may actually inadvertently
06:11 - change this um time complexity but if
06:14 - you write it properly in the way you're
06:15 - supposed to then this should be in
06:17 - constant time which means whenever
06:18 - you're peeking D queueing on queueing
06:20 - pushing popping whatever checking if the
06:22 - cube is empty that'll happen in constant
06:24 - time now the last thing as well to talk
06:26 - about here is that there is another
06:28 - method that sometimes is used is called
06:29 - is full now depending on what language
06:32 - and how you implement this queue you
06:33 - could have a max length on the amount of
06:35 - items in the queue so it is something
06:37 - worth noting that you may want to check
06:38 - if the queue is full
06:40 - before you decide to add another item to
06:41 - it again that only is dependent on
06:43 - certain languages and certain
06:44 - implementations but I figured I'd
06:46 - mention it here at the end so with that
06:47 - being said that has been it for queues
06:49 - if you guys enjoyed and I looking
06:50 - forward to the next video make sure you
06:51 - leave a like and subscribe and I will
06:53 - see you there

Cleaned transcript:

hello everyone and welcome to a brand new tutorial series on data structures now I'm just making this tutorial series because a lot of you guys have been asking for them and what I'm planning to do here is give really quick recaps in summaries of all these different data structures to kind of refresh you and just teach you the underlying concepts I'm not going to be implementing all of these are going into crazy details I'm hoping just to keep these videos short and explain with as much detail as necessary what these structures are and how they work so without further ado let's get started talking about queues now what is a queue well chances are you have probably been in a queue before or heard of a queue now the most basic example of a queue is something like a line so let's say we have three blobs down here and they're waiting in line to go to the cache let's say maybe they're at a store there's one cache and they're waiting to buy some items so like a grocery store or something like that now the way that we know a line works is the first blob in line will be the first person to get served by the cashier and then the second block will be the second the third will be a third and so on until there's no more people left in the line so we have blob number one he is the first one to get served by the cache and then he will be the first one to leave the line so this follows the principle known as FIFO and this is firstin firstout meaning the first person in the queue is the first person out and in this case when we're talking computer science be the first item in the queue is the first item out so we're prioritizing the people or the items or whatever it is that came first and that is all there is to know about a queue now I'm gonna go and talk about all these methods that I have on the left side here and how they're used to manipulate a queue add items remove items but again it's very straightforward so our queue has what's known as a front and a back and when you first come into the queue you come in from the back side now this is the exact same way that a line comes when you enter a line you come in from the back side then you go behind all the other people that are closer to the front and eventually once you get to the end it's your turn and then you get to do whatever it is that you want to do very basic that's what I need to mention there so if we want to add an item to our queue regardless of if it's full or not all we have to do is use one of the methods on this side which is on queue or push now this stands for add an item to the queue now I'm just gonna right push but again these methods mean the same thing it just sometimes they're different names based on what language you're using it the way you're implementing it but I'm gonna push the item one on to our queue so if I do that and I push the item one what happens is one will come in from the back of our queue and it will go to as far as it can so in this case it's gonna go right to the front and we're gonna put one inside of our queue now let's push another item on to a queue and see how that works so just change the color here if I go ahead and push now the item let's say four on to our queue well the exact same thing happens it comes in from the back side and then we see it here as for now let's move on to the next methods DQ or pop now you can probably guess what this does but this is what removes an item from our queue so this won't remove it from the front of our queue so the first item that was in will be the first item to be removed so if I go ahead and use pump so DQ or pop again the same thing what will happen is one will be removed from our queue and passed to a return to wherever we call pop so we said something like x equals pop we're calling pop on our queue what happens is X is actually gonna be given the value of one because that was the item that was at the front of our queue now what actually happens is inside of our queue that item is removed as well so when we call pop one will be removed and now four is the very front of our queue and the next time we call pop we will get four that is all there is to adding and removing items from the queue now sometimes you want to look at the first item in the queue without removing it you actually want to do this quite often so in that case we use the method peek or front again they mean the same thing just whatever one you prefer to write so in this case all right front and if I do front what happens is we will be given the value of four here so 4 will be right there but we're not actually gonna remove it from the queue and that's as simple as as it is to it so 4 will stay in there but will be seen for and would be given for and if I call front again well we're gonna see for one more time because again we didn't remove it from the queue so you can't actually look more than one item back in the queue you would have to pop off items until you get to whatever item that is so that's something to note that you can't access any of the middle or end items of the queue you can only look at the front of the queue and add items to the back of the queue and that is the restriction of it but that's also one of the reasons that we use it now let's just remove these for one second and let's show the last method which is is empty now if you try to remove an item from a queue and that queue is empty you're gonna run into some errors so let's just erase this right now so let's say we have an empty queue and let's just not call pop or front anymore so let's get rid of all this let's say we have an empty queue and we want to pop off the front item of the queue so if we try calling front like this or we call yeah we can try front or we can even try pop we try to do one of those and there's nothing in our cube we're gonna run into an error so we need to first check if our queue is empty using the is empty method so what we typically do is we say if not is empty like that then we can go ahead and do whatever operation we wanted to do so in this case maybe we pop off the front item of the queue or maybe we add another item or whatever it is but we need to check before we try to do either a pop or front operation if the queue is empty otherwise we're gonna run into issues so the last thing here to mention about queues is the time complexity of these operations so this is one of the reasons we use queues and all of these operations here that I've mentioned running what's known as constant times if you're familiar with Big O notation then you know what that means but essentially it doesn't matter how big our queue gets when we're adding removing an item from our queue it will happen as fast as if the queue was empty or if it only had one or two items in it and it's a very important thing to realize and it's one of the reasons we use these queues now depending on how you implement this queue and write the code you may actually inadvertently change this um time complexity but if you write it properly in the way you're supposed to then this should be in constant time which means whenever you're peeking D queueing on queueing pushing popping whatever checking if the cube is empty that'll happen in constant time now the last thing as well to talk about here is that there is another method that sometimes is used is called is full now depending on what language and how you implement this queue you could have a max length on the amount of items in the queue so it is something worth noting that you may want to check if the queue is full before you decide to add another item to it again that only is dependent on certain languages and certain implementations but I figured I'd mention it here at the end so with that being said that has been it for queues if you guys enjoyed and I looking forward to the next video make sure you leave a like and subscribe and I will see you there
