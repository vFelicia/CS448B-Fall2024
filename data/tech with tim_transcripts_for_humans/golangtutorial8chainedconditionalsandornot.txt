With timestamps:

00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:08 - go blank programming tutorial so in this
00:11 - video what were you doing is talking
00:12 - about chained conditionals now chained
00:14 - conditionals are very similar to
00:16 - conditions are they kind of adding on an
00:17 - extending all that we just did in the
00:19 - last video but essentially this is a way
00:21 - that we can combine multiple boolean
00:23 - expressions or conditions whatever you
00:24 - want to call them together to get one
00:27 - answer so previously we had something
00:29 - like this right like maybe we had five
00:30 - less than seven and that was going to
00:33 - obviously be equal to true now the idea
00:35 - is that we want to actually make more of
00:37 - these so we want to have one larger
00:38 - expression that maybe checks more than
00:40 - one thing and if you've done any kind of
00:42 - logic classes before you've seen truth
00:44 - trees or truth tables you'll probably
00:45 - you know what these are but we have
00:47 - these operators on which what are they
00:49 - called here I got to look at the formal
00:51 - name the logical operators which is and
00:53 - or and not and the way we use them as we
00:57 - put them in between sets of boolean
01:00 - expressions and based on whatever this
01:02 - means and I'll talk about them in a
01:03 - second we evaluate the whole thing we
01:06 - check all the expressions then we get
01:07 - one answer either true or false so if I
01:09 - said like 5 is less than 7 or 7 is
01:13 - greater than 9 this is the or operator
01:15 - I'll talk about this in a second what
01:17 - this says is let's evaluate this what is
01:19 - this equal to is it true or false well
01:21 - this is true so we put true there what
01:23 - is this is this true or false well this
01:25 - is false so now we have true or false
01:28 - right so now we check well what does or
01:31 - mean in this case or just checks whether
01:33 - one of the two values is true so that
01:35 - means this whole thing would become true
01:37 - so that's called chaining conditionals
01:39 - together when we kind of combined them
01:41 - with these logical operators so the
01:43 - operators that we have is not for and
01:46 - and now these are the way that you write
01:48 - them this is very similar to other
01:50 - programming languages this means not now
01:52 - what not does is just reverse whatever
01:55 - it is that you have so if I have true
01:56 - then not true equals false if I do not
02:01 - false that equals true if I do not not
02:07 - true that's true because you say ok not
02:09 - the not of true so that's false the not
02:12 - of false is true
02:13 - so you can imagine that this can get
02:15 - quite complex when we start adding all
02:16 - these things together but you can put
02:18 - this exclamation point before like I can
02:20 - do something like not seven less than
02:23 - five and then this will actually be true
02:25 - because well this is false then you knot
02:27 - it that becomes true right so that's the
02:28 - idea behind that one okay so that's the
02:31 - not operator now this is the or operator
02:33 - the or operator pretty much tells you if
02:35 - there is true on the left or right hand
02:37 - side of the expression so I do something
02:40 - like you know true
02:42 - oops what the heck true or false
02:46 - that gives me actually the value of true
02:48 - if I say true or true that's true
02:50 - because yes there is at least one true
02:52 - on the left or right hand side but if
02:54 - these were both false so if I do false
02:56 - false then this whole thing is false
02:59 - because there is no true anywhere
03:01 - so that's or it checks if either of them
03:03 - are true or both of them are true both
03:05 - the my true that's fine as well and
03:07 - finally what and does is and tells us if
03:09 - both of them are true so it's very
03:11 - similar to English right like true and
03:13 - false would be false
03:15 - oops that's not man son true and false
03:18 - would be false because there's a false
03:20 - here because they're not both true but
03:21 - true and true is obviously true so
03:24 - that's how you use and or and not now
03:26 - I'm just gonna do a few examples here
03:28 - and just show you kind of the output of
03:30 - these things just so you can kind of
03:31 - guess and have some way to check whether
03:33 - you really do understand this and then
03:35 - yeah we'll be on to the next video so
03:36 - true or false and true right so what
03:41 - happens when I do something like this
03:42 - now this is the question I'm actually
03:44 - gonna look up the president precedents
03:47 - of these I believe what happens is that
03:50 - ands are evaluated fault
04:08 - okay so I've written this example true
04:11 - or false and true now looking at this
04:14 - you try to determine what the answer is
04:16 - actually going to be here now this is
04:18 - weird because we're using two different
04:20 - operators right so we have the or and we
04:22 - have the and so we have to determine how
04:23 - we're gonna evaluate these because based
04:26 - on the way that we evaluate them this
04:28 - could be different right because if I
04:29 - evaluate true or false first then that's
04:32 - true right so then that becomes true and
04:34 - true and this whole thing will be true
04:36 - but if I vol al you ate false and true
04:39 - first then this whole thing is gonna be
04:41 - false here right so that's gonna be
04:43 - false then we have true or in this case
04:46 - false which will give us true but
04:47 - sometimes there is instances where based
04:50 - on the order you evaluated them in
04:51 - you'll get different answers so just
04:53 - keep that in mind in this case it
04:54 - doesn't matter because we have this true
04:56 - or you don't happening but stuff okay so
04:59 - let's just run this and I'll just see
05:00 - actually what the answer is here to make
05:01 - sure that we're getting is correct so
05:03 - that gives us the value of true as we
05:05 - expected now let's change this around
05:07 - and let's make add some brackets or
05:09 - something or do something crazy so let's
05:11 - do true or false okay true or false and
05:15 - I'll put that in brackets and then and
05:17 - false so what do you think this is gonna
05:19 - happen well whenever you see an and and
05:21 - you see a false anywhere in it you
05:23 - immediately know that's gonna be false
05:24 - because well both sides aren't true
05:26 - right so if you run this we will see
05:29 - that the answer is false
05:31 - now what happens if I actually go like
05:33 - this and I put a knot in front of that
05:35 - false well then what we get we look at
05:38 - this here will be the answer of true
05:41 - because this will become true and then
05:42 - this is true so we and them together we
05:45 - get true now of course we could keep
05:47 - going and add more orders and more ants
05:48 - and we can even throw in variable as an
05:50 - expression to your - like I can do or X
05:53 - is I guess I can say X 8 is less than 9
05:56 - right or we can go up here means 2 X
05:58 - colon equals 8 and I'll just put X here
06:01 - and we can chain all of these things
06:03 - together so just because I'm writing
06:04 - true and false doesn't mean you just
06:05 - have to write true and false but you
06:07 - just need to have an expression that
06:09 - evaluates to true or false right so the
06:11 - we'll be valid let's have a look at what
06:13 - this one's gonna be and see what we get
06:15 - we get true okay I guess X is less than
06:18 - nine right so we have that or and that's
06:20 - the idea behind this that we can just
06:21 - chain all these things using the and ORS
06:23 - and nots and it will get a little bit
06:26 - complicated when you write these really
06:28 - large chain conditionals but you can
06:30 - also do things like chain chain
06:31 - conditionals right like if I have Val is
06:35 - equal to that and then I have Val - :
06:37 - equal you know Val or false
06:42 - like you can separate them out into
06:43 - separate lines if it starts getting
06:45 - crazy when it's going too long if you're
06:47 - doing these kind of expressions so
06:49 - that's the idea behind chain
06:50 - conditionals I'm trying to think of as
06:51 - anything else I can show you guys and I
06:54 - can't really think of anything off the
06:56 - top of my head so just remember that
06:57 - what we can do is well we can chain
07:00 - these things with four and and not or
07:02 - checks whether one of the two things on
07:05 - the left or right hand side is true or
07:06 - both of them that's fine and checks if
07:08 - both of the things are true and the knot
07:11 - will simply reverse whatever you have so
07:12 - it's false goes true if it's true it
07:14 - goes false and if you did two knots then
07:16 - that would cancel out because that would
07:18 - be you know not not false and that's a
07:20 - double negative so that's just the
07:22 - cancels it out right okay so that has
07:24 - been chained conditionals I hope you
07:25 - guys enjoyed it if you did make sure
07:26 - they like subscribe and I will see you
07:28 - in the next goal Inc tutorial

Cleaned transcript:

hello everybody and welcome back to the go blank programming tutorial so in this video what were you doing is talking about chained conditionals now chained conditionals are very similar to conditions are they kind of adding on an extending all that we just did in the last video but essentially this is a way that we can combine multiple boolean expressions or conditions whatever you want to call them together to get one answer so previously we had something like this right like maybe we had five less than seven and that was going to obviously be equal to true now the idea is that we want to actually make more of these so we want to have one larger expression that maybe checks more than one thing and if you've done any kind of logic classes before you've seen truth trees or truth tables you'll probably you know what these are but we have these operators on which what are they called here I got to look at the formal name the logical operators which is and or and not and the way we use them as we put them in between sets of boolean expressions and based on whatever this means and I'll talk about them in a second we evaluate the whole thing we check all the expressions then we get one answer either true or false so if I said like 5 is less than 7 or 7 is greater than 9 this is the or operator I'll talk about this in a second what this says is let's evaluate this what is this equal to is it true or false well this is true so we put true there what is this is this true or false well this is false so now we have true or false right so now we check well what does or mean in this case or just checks whether one of the two values is true so that means this whole thing would become true so that's called chaining conditionals together when we kind of combined them with these logical operators so the operators that we have is not for and and now these are the way that you write them this is very similar to other programming languages this means not now what not does is just reverse whatever it is that you have so if I have true then not true equals false if I do not false that equals true if I do not not true that's true because you say ok not the not of true so that's false the not of false is true so you can imagine that this can get quite complex when we start adding all these things together but you can put this exclamation point before like I can do something like not seven less than five and then this will actually be true because well this is false then you knot it that becomes true right so that's the idea behind that one okay so that's the not operator now this is the or operator the or operator pretty much tells you if there is true on the left or right hand side of the expression so I do something like you know true oops what the heck true or false that gives me actually the value of true if I say true or true that's true because yes there is at least one true on the left or right hand side but if these were both false so if I do false false then this whole thing is false because there is no true anywhere so that's or it checks if either of them are true or both of them are true both the my true that's fine as well and finally what and does is and tells us if both of them are true so it's very similar to English right like true and false would be false oops that's not man son true and false would be false because there's a false here because they're not both true but true and true is obviously true so that's how you use and or and not now I'm just gonna do a few examples here and just show you kind of the output of these things just so you can kind of guess and have some way to check whether you really do understand this and then yeah we'll be on to the next video so true or false and true right so what happens when I do something like this now this is the question I'm actually gonna look up the president precedents of these I believe what happens is that ands are evaluated fault okay so I've written this example true or false and true now looking at this you try to determine what the answer is actually going to be here now this is weird because we're using two different operators right so we have the or and we have the and so we have to determine how we're gonna evaluate these because based on the way that we evaluate them this could be different right because if I evaluate true or false first then that's true right so then that becomes true and true and this whole thing will be true but if I vol al you ate false and true first then this whole thing is gonna be false here right so that's gonna be false then we have true or in this case false which will give us true but sometimes there is instances where based on the order you evaluated them in you'll get different answers so just keep that in mind in this case it doesn't matter because we have this true or you don't happening but stuff okay so let's just run this and I'll just see actually what the answer is here to make sure that we're getting is correct so that gives us the value of true as we expected now let's change this around and let's make add some brackets or something or do something crazy so let's do true or false okay true or false and I'll put that in brackets and then and false so what do you think this is gonna happen well whenever you see an and and you see a false anywhere in it you immediately know that's gonna be false because well both sides aren't true right so if you run this we will see that the answer is false now what happens if I actually go like this and I put a knot in front of that false well then what we get we look at this here will be the answer of true because this will become true and then this is true so we and them together we get true now of course we could keep going and add more orders and more ants and we can even throw in variable as an expression to your like I can do or X is I guess I can say X 8 is less than 9 right or we can go up here means 2 X colon equals 8 and I'll just put X here and we can chain all of these things together so just because I'm writing true and false doesn't mean you just have to write true and false but you just need to have an expression that evaluates to true or false right so the we'll be valid let's have a look at what this one's gonna be and see what we get we get true okay I guess X is less than nine right so we have that or and that's the idea behind this that we can just chain all these things using the and ORS and nots and it will get a little bit complicated when you write these really large chain conditionals but you can also do things like chain chain conditionals right like if I have Val is equal to that and then I have Val equal you know Val or false like you can separate them out into separate lines if it starts getting crazy when it's going too long if you're doing these kind of expressions so that's the idea behind chain conditionals I'm trying to think of as anything else I can show you guys and I can't really think of anything off the top of my head so just remember that what we can do is well we can chain these things with four and and not or checks whether one of the two things on the left or right hand side is true or both of them that's fine and checks if both of the things are true and the knot will simply reverse whatever you have so it's false goes true if it's true it goes false and if you did two knots then that would cancel out because that would be you know not not false and that's a double negative so that's just the cancels it out right okay so that has been chained conditionals I hope you guys enjoyed it if you did make sure they like subscribe and I will see you in the next goal Inc tutorial
