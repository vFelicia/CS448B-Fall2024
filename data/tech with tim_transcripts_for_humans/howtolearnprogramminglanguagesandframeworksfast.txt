With timestamps:

00:02 - [Music]
00:08 - so i film a lot of youtube videos and
00:10 - tutorials i have over 700 videos on this
00:13 - channel i'm teaching over eight
00:15 - different programming languages hundreds
00:17 - of different frameworks modules and
00:19 - technologies and i often get asked how
00:21 - do you learn all of this stuff how do
00:23 - you do this so quickly and how is it one
00:25 - week you're teaching us this topic and
00:26 - the next week you're teaching us that
00:28 - well in this video i'm going to outline
00:30 - kind of the structure that i use to very
00:32 - quickly learn programming languages and
00:35 - frameworks and how you can do the same
00:37 - now i want to say here that this does
00:39 - not make you an expert i do not claim to
00:41 - be an expert in a lot of the stuff that
00:43 - i teach you on this channel and there is
00:44 - a reason why a lot of my content is kind
00:47 - of introductory intermediate and i don't
00:49 - get into the weeds of a bunch of stuff
00:51 - because that is very time consuming and
00:53 - it does take you multiple years or
00:55 - months or just hours in general to
00:57 - really get good at these specific topics
01:00 - what this video will show you how to do
01:02 - is how to become competent kind of
01:04 - fluent in a programming language or
01:06 - framework and a general structure to
01:08 - very quickly learn something and then to
01:10 - continue on and pick up the specifics as
01:12 - you need to so with that said let's get
01:14 - into the video after a quick word from
01:16 - our sponsor before we get started i need
01:19 - to thank crowdin for sponsoring this
01:20 - video crowdin lets you automate
01:22 - localization for your company so you can
01:24 - release multilingual software as fast as
01:27 - software in just one language crowdin
01:30 - has over 200 integrations that lets you
01:32 - connect with different tools so you can
01:33 - localize all customer facing content
01:36 - like marketing communications and emails
01:38 - not just your software with crowdin you
01:40 - can set up and sync text and
01:42 - translations with platforms like github
01:44 - where your translators can then push
01:46 - their work directly to a github
01:47 - repository this means that translators
01:50 - don't have access to code but have
01:52 - access to the latest copy of text
01:53 - without having to bother developers now
01:56 - at the same time developers can receive
01:58 - these translations as merge pull
02:00 - requests to the repository directly when
02:02 - translators have completed their work so
02:05 - start automating your localization and
02:07 - translations today by signing up for
02:09 - crowded you can start with their free
02:10 - plan and utilize a 14-day free trial to
02:13 - try out all of the paid features if you
02:15 - so desire you can do this by clicking
02:17 - the link in the description thanks again
02:19 - to crowdin for sponsoring this video so
02:21 - i'm going to start by just outlining the
02:23 - algorithm or the steps that i follow to
02:25 - learn something quickly then i'll go
02:27 - through each point individually give you
02:29 - some more details and talk about why
02:30 - it's important so step number one is to
02:33 - get a high level overview or kind of
02:35 - summary of what it is that you're about
02:37 - to learn step number two is to create a
02:39 - curriculum or a list of topics that you
02:41 - want to learn and put them in an order
02:43 - in which you plan on learning them step
02:45 - number three is to learn one of these
02:47 - topics at a time by either reading
02:49 - through documentation watching videos or
02:51 - using really whatever strategy works for
02:53 - you to learn this step number four is to
02:55 - stop at every few lessons apply your
02:58 - knowledge that could be either with
02:59 - exercises or projects and then step
03:01 - number five is simply to repeat this
03:03 - process until you've learned what you
03:05 - want to learn and you've got to that
03:06 - point now it turns out that these five
03:08 - steps here are exactly how i design my
03:11 - programming course programming expert
03:13 - dot io now this course allows you to
03:15 - learn python and go advanced programming
03:18 - object-oriented programming software
03:20 - design uh software engineering tools and
03:22 - so much more and the way we design this
03:24 - is that you have a high-level overview
03:26 - of everything you're going to be taught
03:28 - every section has kind of an
03:29 - introduction video that gives you some
03:31 - information about what's coming
03:33 - then we have a list of all the topics
03:35 - you can see the order in which you're
03:37 - supposed to follow them and after every
03:39 - single lesson you have practice
03:40 - questions practice problems coding
03:42 - exercises and then we have large
03:45 - projects as well as coding assessments
03:47 - at the end of each section that you can
03:48 - complete so keep that in mind there's a
03:50 - reason i use this for programming expert
03:53 - and i'm pretty well sharing with you
03:54 - here how i design curriculum how i teach
03:56 - stuff and well how i learned that at the
03:58 - same time so with that said let's move
04:00 - on here to the different steps i'm gonna
04:02 - go one at a time and explain why each is
04:04 - important so step number one is to get a
04:06 - general overview or summary of what
04:09 - you're about to learn now what i usually
04:11 - do for this is find someone who's kind
04:13 - of an expert in the topic that i want to
04:15 - learn and watch a half an hour video
04:17 - from them or maybe go through kind of
04:19 - like 20 or 30 minutes of some
04:21 - documentation or a book or something
04:22 - along those lines and just try to get a
04:25 - general sense of what it is that i'm
04:27 - learning kind of some key information
04:29 - and points about this topic and then
04:31 - hopefully get a sense of kind of what's
04:32 - possible what i plan on learning what i
04:35 - don't want to learn what's maybe beyond
04:37 - the scope of what i want to be learning
04:39 - right what's too advanced or some stuff
04:41 - that's really important that i know i'm
04:42 - gonna have to need to focus on so that's
04:44 - what i like to do in this section and i
04:46 - can kind of compare this to like reading
04:48 - the blurb of a book or scanning through
04:51 - all the different chapters of a book
04:52 - before you read it or when you go to a
04:54 - website kind of scrolling through
04:56 - looking at the key headlines the bolded
04:58 - points stuff that your english teachers
05:00 - probably told you to do and that you've
05:01 - probably never done when you're reading
05:03 - a book that's what i like to do it just
05:05 - gives me a really kind of decent picture
05:07 - of what's about to be happening what i'm
05:09 - about to be learning and i find it helps
05:11 - me to retain information especially as i
05:13 - move on to step number two so step
05:15 - number two is to create a curriculum or
05:17 - list of the items that you want to be
05:19 - learning or the topics so to give you a
05:21 - concrete example here i'm doing a rust
05:24 - programming series right now on the
05:25 - channel i apologize i have some videos
05:27 - in queue right now it's been taking
05:29 - longer than i expected but what i do
05:31 - when i want to do a tutorial series like
05:33 - this is i start with that high level
05:35 - overview then i go and i list out 20 25
05:38 - maybe 30 topics that i want to cover in
05:41 - order for each of those topics i'll do a
05:43 - few little key points about some
05:45 - important things that i'd like to cover
05:46 - there and that gives me a really good
05:48 - kind of checklist and guide
05:50 - on the steps that i need to follow along
05:52 - with were the topics i need to learn to
05:54 - start really understanding this topic so
05:57 - with rust i would have created yeah
05:58 - maybe like a 20 25 point list so on that
06:01 - list i probably would have had the first
06:02 - video as like an introduction or a setup
06:05 - the second video is like cargo and rust
06:08 - tools the third video is probably like
06:10 - console output then i would have had
06:12 - console input arithmetic data types all
06:15 - of those different core topics now why
06:17 - this is important to do as well is that
06:19 - it makes you have to go and figure out
06:22 - all of the topics that you want to learn
06:24 - and while you're doing that of course
06:25 - you're going to be picking up little
06:26 - bits and pieces of information and
06:28 - you're giving yourself a structure of
06:30 - what you need to go through and that
06:32 - alone is already helping you understand
06:34 - the language and all of the topics that
06:36 - are coming up i mean i don't know about
06:37 - you guys but whenever i get like a
06:39 - syllabus or i'm in a course or something
06:41 - i always like to go and look at all of
06:43 - the key topics or chapters or lessons
06:45 - that i have just to have a sense of
06:47 - what's coming up in the course why what
06:49 - i'm learning right now may be important
06:51 - it just helps right it helps you
06:52 - structure everything and for me i'm a
06:54 - very organized person and that's what i
06:56 - like to do so hopefully you guys see the
06:58 - value in this point at minimum it gives
07:00 - you a list of kind of deliverables or
07:02 - tasks that you need to complete and that
07:04 - should help you stay on task as you're
07:06 - actually going through and learning a
07:08 - programming language framework
07:09 - technology whatever it may be so now
07:11 - we're on to tip number three or step
07:13 - number three in this algorithm which is
07:15 - go and learn the topics that are on your
07:17 - list now this one is the most difficult
07:19 - for me to explain to you because
07:21 - everyone learns differently you kind of
07:23 - have to figure out what your most
07:24 - efficient learning strategy is and for
07:27 - me personally when i want to learn these
07:29 - different topics usually what i do is i
07:31 - reference documentation now it may be
07:33 - official documentation it may be like an
07:35 - informal guide on something like medium
07:38 - or maybe i'm even reading like stack
07:40 - overflow posts or something along those
07:42 - lines but usually i'm reading the
07:43 - official language or framework
07:45 - documentation and going through and
07:47 - learning each topic that's on my list
07:50 - now for me when i read the documentation
07:52 - what i like to do is have like a code
07:54 - editor or an environment set up have the
07:57 - on kind of my secondary screen and be
07:59 - reading it and then kind of applying it
08:01 - or messing around and testing uh on my
08:03 - other screen i like to constantly be
08:05 - kind of interactive with what i'm
08:06 - learning again something we did in
08:08 - programming expert dot io which you can
08:10 - check out from the link in the
08:11 - description but the point is that's what
08:13 - works for me so for some of you it may
08:15 - be watching a video on the topic
08:16 - obviously i hope a lot of you guys enjoy
08:18 - videos considering i post tons of them
08:20 - on this channel i just know for me that
08:22 - i'm usually more efficient reading
08:24 - documentation but if something's really
08:26 - complicated and i'm not understanding it
08:28 - then i'll go and watch a video i'll
08:29 - usually turn it to 2x speed and that's
08:32 - kind of the fastest way for me to pick
08:33 - up this information so now we move on to
08:36 - step number four you've learned this
08:38 - different stuff you've read the
08:39 - documentation you've gone through a book
08:40 - or a video or whatever it may be and now
08:42 - of course you have to apply your
08:44 - knowledge and check for understanding so
08:46 - this is why i usually will film a video
08:49 - immediately after i learn a topic this
08:51 - does two things right it lets me have
08:53 - all the knowledge be fresh in my brain
08:55 - but also allows me to immediately check
08:57 - if i understand something because now i
08:59 - have to explain it to you you've all
09:01 - probably heard this saying before but if
09:03 - you can't explain something you don't
09:04 - understand it and that's never been more
09:06 - true from my situation there's all kinds
09:09 - of times where i go to try to film a
09:10 - video and very quickly i realized that
09:12 - hey i have no idea what i'm talking
09:14 - about i didn't really learn this topic
09:17 - back to the drawing board let's take an
09:19 - hour break let's relearn it and cover
09:20 - all the stuff that i really was
09:22 - struggling with explaining then come
09:24 - back and film the video or alternatively
09:26 - i think i don't really understand
09:28 - something that well but then i go to
09:29 - film the video and it seems good you
09:31 - guys comment and you say it was a good
09:33 - explanation i go oh maybe i did actually
09:35 - understand that i was overthinking so
09:37 - that's what i like to do i'm not saying
09:38 - you guys have to film a video that's
09:40 - just my way of actually applying my
09:42 - knowledge and checking for understanding
09:44 - if you're using something like
09:45 - programming expert you're gonna have all
09:46 - kinds of exercises that you can go
09:48 - through or alternatively you can find
09:50 - some projects to work on or some
09:51 - exercise online i'm sure there's all
09:53 - kinds of free stuff that you can go
09:54 - through maybe it's just you know messing
09:56 - around in a code editor and writing a
09:58 - little script uh that you came up with
10:00 - on your own anything works but you
10:01 - definitely need to apply your knowledge
10:04 - and confirm that you do actually
10:05 - understand what you're learning before
10:07 - you move too far so my step number five
10:09 - here not really much to say this is just
10:11 - repeat right you're just gonna pretty
10:12 - much be repeating steps three and four
10:14 - where you're learning different topics
10:16 - applying your knowledge learning
10:17 - different topics applying your knowledge
10:19 - etc etc and there you go that is how i
10:22 - learned something quickly
10:24 - and how i create videos pretty quickly
10:26 - on these different topics now i know
10:28 - this sounds like a lot to do but the
10:30 - first two steps are things that you can
10:32 - realistically accomplish in about an
10:33 - hour right get a general overview get a
10:36 - summary create a list of topics or a
10:38 - curriculum then it's about learning each
10:39 - individual topic and if you're someone
10:41 - who's learned similar stuff before
10:43 - you'll probably be surprised at how
10:45 - quickly you can pick stuff up for
10:47 - example in rust which i'm teaching now
10:49 - data types i already know all of the
10:51 - core data types
10:52 - there's some nuances and difference in
10:54 - rust but i know what a data type is i
10:56 - know what an int is i know what a bool
10:58 - is i know some of the problems i'm
10:59 - probably gonna have with data types i
11:01 - know i'm gonna have to probably convert
11:02 - them i know how it's done in other
11:04 - programming languages and that allows me
11:06 - to look for the key differences in rust
11:08 - as opposed to having to learn something
11:10 - completely from scratch
11:12 - so keep that in mind you want to utilize
11:14 - your past knowledge as much as possible
11:16 - and allow you to kind of
11:18 - set the differences or find the
11:20 - differences between what you know and
11:22 - what you're learning as opposed to
11:23 - relearning something completely from
11:26 - scratch hopefully that makes a little
11:27 - bit of sense not sure if that was super
11:29 - clear but that is what i have for you
11:32 - for this video so as always if you guys
11:34 - enjoyed make sure to leave a like
11:35 - subscribe the channel and i will see you
11:37 - in another one
11:40 - [Music]
11:46 - you

Cleaned transcript:

so i film a lot of youtube videos and tutorials i have over 700 videos on this channel i'm teaching over eight different programming languages hundreds of different frameworks modules and technologies and i often get asked how do you learn all of this stuff how do you do this so quickly and how is it one week you're teaching us this topic and the next week you're teaching us that well in this video i'm going to outline kind of the structure that i use to very quickly learn programming languages and frameworks and how you can do the same now i want to say here that this does not make you an expert i do not claim to be an expert in a lot of the stuff that i teach you on this channel and there is a reason why a lot of my content is kind of introductory intermediate and i don't get into the weeds of a bunch of stuff because that is very time consuming and it does take you multiple years or months or just hours in general to really get good at these specific topics what this video will show you how to do is how to become competent kind of fluent in a programming language or framework and a general structure to very quickly learn something and then to continue on and pick up the specifics as you need to so with that said let's get into the video after a quick word from our sponsor before we get started i need to thank crowdin for sponsoring this video crowdin lets you automate localization for your company so you can release multilingual software as fast as software in just one language crowdin has over 200 integrations that lets you connect with different tools so you can localize all customer facing content like marketing communications and emails not just your software with crowdin you can set up and sync text and translations with platforms like github where your translators can then push their work directly to a github repository this means that translators don't have access to code but have access to the latest copy of text without having to bother developers now at the same time developers can receive these translations as merge pull requests to the repository directly when translators have completed their work so start automating your localization and translations today by signing up for crowded you can start with their free plan and utilize a 14day free trial to try out all of the paid features if you so desire you can do this by clicking the link in the description thanks again to crowdin for sponsoring this video so i'm going to start by just outlining the algorithm or the steps that i follow to learn something quickly then i'll go through each point individually give you some more details and talk about why it's important so step number one is to get a high level overview or kind of summary of what it is that you're about to learn step number two is to create a curriculum or a list of topics that you want to learn and put them in an order in which you plan on learning them step number three is to learn one of these topics at a time by either reading through documentation watching videos or using really whatever strategy works for you to learn this step number four is to stop at every few lessons apply your knowledge that could be either with exercises or projects and then step number five is simply to repeat this process until you've learned what you want to learn and you've got to that point now it turns out that these five steps here are exactly how i design my programming course programming expert dot io now this course allows you to learn python and go advanced programming objectoriented programming software design uh software engineering tools and so much more and the way we design this is that you have a highlevel overview of everything you're going to be taught every section has kind of an introduction video that gives you some information about what's coming then we have a list of all the topics you can see the order in which you're supposed to follow them and after every single lesson you have practice questions practice problems coding exercises and then we have large projects as well as coding assessments at the end of each section that you can complete so keep that in mind there's a reason i use this for programming expert and i'm pretty well sharing with you here how i design curriculum how i teach stuff and well how i learned that at the same time so with that said let's move on here to the different steps i'm gonna go one at a time and explain why each is important so step number one is to get a general overview or summary of what you're about to learn now what i usually do for this is find someone who's kind of an expert in the topic that i want to learn and watch a half an hour video from them or maybe go through kind of like 20 or 30 minutes of some documentation or a book or something along those lines and just try to get a general sense of what it is that i'm learning kind of some key information and points about this topic and then hopefully get a sense of kind of what's possible what i plan on learning what i don't want to learn what's maybe beyond the scope of what i want to be learning right what's too advanced or some stuff that's really important that i know i'm gonna have to need to focus on so that's what i like to do in this section and i can kind of compare this to like reading the blurb of a book or scanning through all the different chapters of a book before you read it or when you go to a website kind of scrolling through looking at the key headlines the bolded points stuff that your english teachers probably told you to do and that you've probably never done when you're reading a book that's what i like to do it just gives me a really kind of decent picture of what's about to be happening what i'm about to be learning and i find it helps me to retain information especially as i move on to step number two so step number two is to create a curriculum or list of the items that you want to be learning or the topics so to give you a concrete example here i'm doing a rust programming series right now on the channel i apologize i have some videos in queue right now it's been taking longer than i expected but what i do when i want to do a tutorial series like this is i start with that high level overview then i go and i list out 20 25 maybe 30 topics that i want to cover in order for each of those topics i'll do a few little key points about some important things that i'd like to cover there and that gives me a really good kind of checklist and guide on the steps that i need to follow along with were the topics i need to learn to start really understanding this topic so with rust i would have created yeah maybe like a 20 25 point list so on that list i probably would have had the first video as like an introduction or a setup the second video is like cargo and rust tools the third video is probably like console output then i would have had console input arithmetic data types all of those different core topics now why this is important to do as well is that it makes you have to go and figure out all of the topics that you want to learn and while you're doing that of course you're going to be picking up little bits and pieces of information and you're giving yourself a structure of what you need to go through and that alone is already helping you understand the language and all of the topics that are coming up i mean i don't know about you guys but whenever i get like a syllabus or i'm in a course or something i always like to go and look at all of the key topics or chapters or lessons that i have just to have a sense of what's coming up in the course why what i'm learning right now may be important it just helps right it helps you structure everything and for me i'm a very organized person and that's what i like to do so hopefully you guys see the value in this point at minimum it gives you a list of kind of deliverables or tasks that you need to complete and that should help you stay on task as you're actually going through and learning a programming language framework technology whatever it may be so now we're on to tip number three or step number three in this algorithm which is go and learn the topics that are on your list now this one is the most difficult for me to explain to you because everyone learns differently you kind of have to figure out what your most efficient learning strategy is and for me personally when i want to learn these different topics usually what i do is i reference documentation now it may be official documentation it may be like an informal guide on something like medium or maybe i'm even reading like stack overflow posts or something along those lines but usually i'm reading the official language or framework documentation and going through and learning each topic that's on my list now for me when i read the documentation what i like to do is have like a code editor or an environment set up have the on kind of my secondary screen and be reading it and then kind of applying it or messing around and testing uh on my other screen i like to constantly be kind of interactive with what i'm learning again something we did in programming expert dot io which you can check out from the link in the description but the point is that's what works for me so for some of you it may be watching a video on the topic obviously i hope a lot of you guys enjoy videos considering i post tons of them on this channel i just know for me that i'm usually more efficient reading documentation but if something's really complicated and i'm not understanding it then i'll go and watch a video i'll usually turn it to 2x speed and that's kind of the fastest way for me to pick up this information so now we move on to step number four you've learned this different stuff you've read the documentation you've gone through a book or a video or whatever it may be and now of course you have to apply your knowledge and check for understanding so this is why i usually will film a video immediately after i learn a topic this does two things right it lets me have all the knowledge be fresh in my brain but also allows me to immediately check if i understand something because now i have to explain it to you you've all probably heard this saying before but if you can't explain something you don't understand it and that's never been more true from my situation there's all kinds of times where i go to try to film a video and very quickly i realized that hey i have no idea what i'm talking about i didn't really learn this topic back to the drawing board let's take an hour break let's relearn it and cover all the stuff that i really was struggling with explaining then come back and film the video or alternatively i think i don't really understand something that well but then i go to film the video and it seems good you guys comment and you say it was a good explanation i go oh maybe i did actually understand that i was overthinking so that's what i like to do i'm not saying you guys have to film a video that's just my way of actually applying my knowledge and checking for understanding if you're using something like programming expert you're gonna have all kinds of exercises that you can go through or alternatively you can find some projects to work on or some exercise online i'm sure there's all kinds of free stuff that you can go through maybe it's just you know messing around in a code editor and writing a little script uh that you came up with on your own anything works but you definitely need to apply your knowledge and confirm that you do actually understand what you're learning before you move too far so my step number five here not really much to say this is just repeat right you're just gonna pretty much be repeating steps three and four where you're learning different topics applying your knowledge learning different topics applying your knowledge etc etc and there you go that is how i learned something quickly and how i create videos pretty quickly on these different topics now i know this sounds like a lot to do but the first two steps are things that you can realistically accomplish in about an hour right get a general overview get a summary create a list of topics or a curriculum then it's about learning each individual topic and if you're someone who's learned similar stuff before you'll probably be surprised at how quickly you can pick stuff up for example in rust which i'm teaching now data types i already know all of the core data types there's some nuances and difference in rust but i know what a data type is i know what an int is i know what a bool is i know some of the problems i'm probably gonna have with data types i know i'm gonna have to probably convert them i know how it's done in other programming languages and that allows me to look for the key differences in rust as opposed to having to learn something completely from scratch so keep that in mind you want to utilize your past knowledge as much as possible and allow you to kind of set the differences or find the differences between what you know and what you're learning as opposed to relearning something completely from scratch hopefully that makes a little bit of sense not sure if that was super clear but that is what i have for you for this video so as always if you guys enjoyed make sure to leave a like subscribe the channel and i will see you in another one you
