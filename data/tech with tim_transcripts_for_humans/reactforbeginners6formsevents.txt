With timestamps:

00:02 - [Music]
00:09 - hello everybody and welcome to
00:10 - the react tutorial for beginners in
00:12 - today's video i'm going to be covering
00:14 - forms and events
00:16 - now specifically what we'll be doing
00:17 - here is actually taking all of the
00:19 - knowledge all the stuff we've learned so
00:20 - far
00:21 - and applying this into creating some
00:22 - real components some components that
00:24 - we'll actually keep throughout the rest
00:25 - of this tutorial series
00:27 - and that will help us start to build our
00:28 - inventory management system
00:30 - so what we're going to be doing here is
00:32 - building the inventory management system
00:33 - i described this briefly at the
00:35 - beginning of the series the idea for
00:37 - this is that we're going to have kind of
00:38 - one component that allows us to add
00:40 - items into the inventory
00:42 - another component that allows us to
00:43 - search for items in the inventory
00:45 - and then some type of display for all of
00:47 - the items and we'll get into styling and
00:49 - making this look better in later videos
00:51 - for now i'm just focused on the
00:52 - functionality and you know getting some
00:54 - stuff on the screen and showing you guys
00:55 - how this stuff works
00:56 - so right now let's actually go ahead and
00:58 - delete almost everything that we've done
01:00 - so far
01:00 - so i'm going to get rid of info going to
01:02 - get rid of button state and data here
01:05 - i'm going to go to info and just delete
01:06 - this entire file we don't want this
01:08 - anymore
01:09 - and i think that i mentioned this
01:11 - previously but i'm going to delete this
01:12 - setup test file i don't know why that's
01:14 - back
01:15 - in this app test.js all right so let's
01:18 - delete that
01:18 - and now all we have is this app file all
01:21 - right so actually let's go ahead and
01:22 - create a
01:23 - file here i'm going to make a new file
01:25 - and call this
01:27 - searchbar.js and then i'm just going to
01:29 - go to app.js and remove these three
01:31 - things here because obviously we don't
01:32 - need these anymore
01:34 - okay so let's remove those and go back
01:36 - to search bar
01:38 - and now let's create a component so
01:39 - first i'll actually import some stuff
01:41 - from react so i'll say import
01:43 - and then we'll import use state
01:46 - from and then react and then we'll
01:49 - define our function
01:51 - function search bar
01:54 - and we can take i guess we could take
01:56 - some props we'll take some props there
01:58 - and then here we'll go ahead and start
02:00 - rendering the search bar so return
02:02 - and then let's create what we want so
02:04 - for the search bar
02:06 - what i want to have is a few different
02:07 - fields i want one field to
02:09 - look for say maybe the name of a product
02:11 - maybe one for the maximum price of a
02:13 - product
02:13 - uh and there's a few other things we
02:15 - could do as well i'm just trying to
02:16 - think what we want to store for
02:18 - like our items in inventory this is
02:20 - again going to be kind of just like a
02:22 - simple example so maybe we'll have
02:23 - something where each item has maybe a
02:25 - name
02:26 - uh a price uh no why is this not giving
02:29 - it to me properly okay so name
02:31 - price we can go with maybe uh you know
02:34 - type of item and finally maybe we could
02:37 - do maybe
02:37 - brand of item or something like that so
02:39 - we'll say that these are the four fields
02:40 - that we want
02:41 - and so we'll make kind of four
02:42 - corresponding fields here in the search
02:44 - bar so you can search for items based on
02:45 - any of these four fields
02:47 - so let's start by creating a form here
02:50 - we'll say
02:51 - form like that above this form we can
02:53 - make a header so we'll say
02:55 - h2 and then we'll say search
02:58 - for an item and we'll style this for my
03:02 - in one of the later videos
03:03 - okay so for the forum we don't really
03:04 - need anything inside of there what we
03:06 - can do
03:08 - is we can make an input tag so we can
03:09 - say input
03:11 - like that we can then do a label above
03:13 - this input so we'll say label
03:16 - slash label this label will be
03:19 - four and then we need a class name here
03:22 - so we'll say
03:23 - actually not class name we need an id
03:25 - we'll say id
03:26 - is equal to and then the first thing
03:28 - we'll have is name
03:30 - field like that yeah okay that works and
03:33 - then this can be for
03:34 - name hyphen field all right so the label
03:37 - here we'll just put it as
03:38 - name and then the input this will be
03:41 - type
03:42 - equals text and i think that's probably
03:44 - all we need for the input tag
03:45 - and i think we can actually just end the
03:46 - input tag like that okay so let's copy
03:49 - this a few times so we will have
03:51 - name we will then have price so we'll
03:54 - say
03:56 - max price and i think for type
03:59 - for this we can make this a number i
04:00 - think that's a valid type at least
04:02 - and then i said name field we'll just
04:04 - make this price
04:05 - field like that and we could do a min
04:08 - price too but for now we'll just do a
04:09 - max price we can add stuff later on
04:12 - now we'll copy this and what else do we
04:15 - want we want the type
04:16 - so let's go with type here and then set
04:19 - a price field we can do type
04:21 - field and type field this will then be a
04:25 - text and one more is going to be the
04:28 - brand
04:29 - so we'll say brand like that and then
04:34 - brand fields brand field and again set a
04:37 - number we are going to have
04:39 - text all right and then we want a button
04:42 - this button will be search
04:43 - so we'll say button and then this can be
04:46 - search like that and it's not actually
04:48 - necessary to put this inside of a form
04:50 - but
04:50 - we're just going to do that because it's
04:51 - kind of you know good practice okay so
04:53 - for some reason this isn't auto
04:54 - formatting i wonder if i made a mistake
04:55 - here oh it's because i have this up here
04:57 - let's remove that
04:58 - and there you go now we get our auto
04:59 - formatting okay so let's actually use
05:01 - this now let's render this component so
05:02 - we're going to go to app.js
05:04 - we're going to say import and we need to
05:06 - make sure we export this so we're going
05:07 - to say export
05:10 - default and then search bar like that
05:14 - all right then we will come here and we
05:16 - will import
05:18 - search bar from and then dot slash
05:21 - search bar like that okay now we can
05:24 - render this
05:25 - so let's go with search bar
05:28 - and then end the tag okay so now we can
05:30 - see we have our name our max price
05:33 - our type and our brand now obviously it
05:34 - doesn't look too nice right now but
05:36 - that's fine we'll just leave it like
05:37 - this for now and when you press search
05:38 - you can see it actually does something
05:40 - for the form i think i can
05:42 - turn that off because i don't want it to
05:44 - actually refresh the page when we press
05:45 - search
05:46 - so let's actually figure out how we can
05:47 - make it so that when we press the button
05:49 - the form is not
05:50 - active okay so i think the way to fix
05:52 - this is to actually just make this
05:54 - type equals button rather than type
05:56 - equals submit
05:57 - and now if i refresh this and i press
05:59 - search notice that it's not actually
06:01 - refreshing the page
06:02 - okay so there we go we now have our
06:03 - button i think by default this is equal
06:05 - to a submit button and so when you make
06:06 - it
06:06 - just a regular button i will not submit
06:09 - the form
06:10 - awesome that's kind of what we're
06:11 - looking for now that we have
06:13 - done that what we want to do is actually
06:15 - have some state
06:17 - for all of these fields ideally what i
06:19 - want to happen
06:20 - is when i press the search button we are
06:22 - able to get access
06:24 - to whatever is inside of all of these
06:26 - fields and for now we'll just print it
06:27 - to the screen
06:28 - but we actually want to return that
06:30 - probably to app.js
06:31 - where then we could render some
06:33 - different data depending on what we
06:34 - searched for
06:35 - so we're going to use state here and
06:37 - we're going to define four pieces of
06:38 - state one for the name
06:39 - one for the max price one for the type
06:41 - and one for the brand
06:43 - so we're gonna say const like that and
06:46 - then we're gonna say name
06:48 - and then set name is equal to use state
06:51 - this will just be an empty string by
06:53 - default and
06:54 - then we'll copy this a few times and
06:56 - we'll change this appropriately
06:58 - so rather than name we want this to be
07:00 - price so then this is going to be
07:02 - set price and the default here
07:05 - uh we can make this actually just zero
07:07 - for now
07:08 - and then instead of name we are going to
07:11 - have
07:12 - the type and we'll say set type this can
07:16 - be an empty string
07:17 - and then lastly we'll have the brand and
07:19 - this could be
07:20 - set brand and again that can be an empty
07:23 - string
07:24 - all right so now we want to do is make
07:26 - it so that whatever the value of this
07:28 - state is is actually what's being used
07:30 - for these inputs and so what i'm going
07:32 - to do is for all of these inputs say
07:33 - value is equal to and then the
07:35 - corresponding state variable
07:37 - in this case we'll go with name now here
07:40 - for this we're going to say value is
07:42 - equal to and this
07:44 - will be the price and then same thing
07:47 - here
07:47 - for the type value is equal to type
07:51 - and finally value is equal
07:54 - to brent okay so now we're going to save
07:56 - that i'm going to refresh and notice
07:58 - though when i go here and i start trying
07:59 - to type
08:00 - nothing is happening now the reason
08:02 - nothing is happening when i type here
08:04 - is because we have explicitly set the
08:07 - value of these fields to be equal to our
08:10 - state
08:10 - and our state is kind of constant right
08:12 - now it's not changing we have nothing
08:13 - that's updating our state
08:14 - and so when i try to type something here
08:16 - well nothing's going to happen
08:18 - and whenever you set the value equal to
08:20 - something explicitly on one of these
08:22 - fields well to be able to change this
08:23 - value you actually need to implement an
08:25 - event
08:26 - handler and this is where we get into
08:27 - events so whenever we start
08:29 - updating this input field there's
08:30 - actually an event that will be triggered
08:32 - called
08:32 - on change so if you say on change you
08:35 - can make this equal to a function
08:37 - we're actually going to do an arrow
08:38 - function here and what this arrow
08:40 - function will take as a parameter is e
08:42 - now e is kind of the event that occurred
08:44 - that caused this on change thing to be
08:46 - triggered
08:47 - and e will allow us to actually access
08:49 - what the user typed into this
08:51 - input field and so what we're going to
08:53 - do here is have an arrow function
08:54 - and we're going to say set and then in
08:57 - this case
08:57 - name and this is going to be e dot
09:00 - target
09:01 - dot value so we will continue in one
09:03 - second but i need to quickly thank the
09:04 - sponsor of this video and this series
09:06 - which is algo
09:07 - expert algo expert is the best platform
09:09 - to use when preparing for your software
09:11 - engineering coding interviews they have
09:12 - over 155 coding interview questions
09:15 - all of those questions have detailed
09:16 - solutions in nine of the most popular
09:18 - programming languages
09:19 - as well as a video explanation by a
09:21 - great instructor
09:22 - get started with algo expert today by
09:24 - clicking the link in the description and
09:26 - using the code tech with tim for a
09:27 - discount on the platform
09:29 - so this is kind of just what you do when
09:30 - you want to actually update the input
09:32 - field that is using state to kind of
09:34 - control its value you put an on change
09:37 - and then you take a parameter e
09:38 - e will automatically be passed to this
09:40 - from the on change event handler
09:42 - and then we will call set name and we
09:44 - will update our name
09:46 - state to be equal to whatever the user
09:48 - typed in
09:49 - which we're getting from e.target.value
09:52 - so you don't have to fully understand
09:53 - what this is but when you say e.target
09:55 - that's getting the actual component here
09:57 - which is input
09:58 - and then we're grabbing the value and
09:59 - then we're updating our name with that
10:01 - and so when we update our name
10:02 - the field will actually change right so
10:05 - when i go hello we can see it actually
10:06 - changes whereas here if i go over to
10:07 - type
10:08 - and i try to type something well nothing
10:10 - happens so now we're just going to copy
10:11 - this exact same thing for all of the
10:13 - different functions so let's go on
10:14 - change
10:15 - or sorry not functions but different
10:17 - input tags and rather than set name here
10:19 - this is going to be set
10:20 - price and then we'll do the same thing
10:23 - here for the type
10:24 - just change this to set type
10:27 - and then lastly here do the same thing
10:30 - for brand we'll say
10:31 - set and then brand okay when i save that
10:34 - you can see this updates
10:36 - now if i refresh here and i go and i
10:38 - change these you can see that all of
10:39 - these are working
10:41 - the same because now we have the event
10:44 - handler
10:44 - now let's see if we're getting any
10:45 - errors i just want to look in the
10:46 - console quickly warning invalid dom
10:48 - property 4 did you mean html4
10:51 - see i wonder why this is incorrect
10:53 - because usually i've used four and it's
10:54 - worked
10:55 - let's just see if i change this to be
10:57 - html4
10:58 - if this is gonna do anything for us um
11:01 - okay it doesn't look like it actually
11:02 - makes a difference at all to be honest
11:04 - but
11:04 - let's change it for all of them and just
11:06 - see if this error goes away
11:08 - one of you guys can maybe correct me in
11:09 - the comments here if i'm mistaking
11:11 - something but usually i've used four and
11:12 - it's worked before
11:14 - so html4 and then
11:18 - html4 okay so let's
11:20 - go to inspect and okay we're not getting
11:22 - an error now so i'm going to assume that
11:24 - what i just did is correct so we'll
11:25 - leave that
11:26 - nice okay anyways now we've done that
11:28 - and we have the state
11:30 - and the state should be holding
11:32 - everything that we're typing in these
11:33 - fields
11:34 - so now if we actually want to see what
11:35 - was typed into these fields when we
11:37 - press the search button we need
11:39 - some kind of event handler for this and
11:40 - so what i'm going to do is create a
11:41 - function
11:42 - here and i'm just going to say const and
11:44 - then search
11:45 - button pressed and this is going to be
11:48 - equal to an arrow function
11:50 - and all we'll do here is we'll just
11:51 - console.log all of the stuff so we'll
11:53 - call usa.log
11:54 - the name we'll console.log on a new line
11:57 - the price will console.log
12:01 - the type and then finally
12:04 - the brand okay so let's save that and
12:07 - now let's
12:08 - set this function on the button so let's
12:10 - go here and press
12:11 - or say on click is equal to and then
12:14 - what i call this
12:15 - search button pressed okay so now we've
12:18 - done that
12:19 - let's open up our console here and let's
12:22 - type something in so name
12:24 - tim price let's just go 23 brand
12:28 - whatever we can make this uh i don't
12:31 - know test
12:32 - and then or sorry type test and brand
12:35 - can be test2
12:36 - when we press search notice all of them
12:38 - are printing out if i change this to be
12:40 - test three and i press search
12:41 - uh now test three we're getting getting
12:43 - that update occurring
12:44 - there awesome so there you go that all
12:47 - works
12:47 - and now we have implemented the state we
12:49 - have created a form and we're able to
12:51 - actually
12:51 - access all of the values in this form
12:54 - from the state of our component
12:56 - so now what i want to do though is i
12:57 - want to actually display
12:59 - the stuff that we were searching for
13:01 - either in this component and maybe a
13:03 - child component
13:04 - or i want to pass what we were searching
13:06 - for to whatever rendered this search bar
13:08 - so how do we go about doing that well
13:09 - this is where it gets a little bit more
13:11 - difficult
13:11 - but i'm going to actually make it so
13:14 - that we are showing something here
13:15 - uh maybe below the form that displays
13:19 - all of the stuff that we search for so
13:20 - let's actually just say
13:22 - in a paragraph tag here
13:25 - let's go with name colon
13:28 - name let's go with
13:32 - this is going to be max
13:36 - price and then max price
13:40 - uh oops this is just called price okay
13:42 - so let's make that price if i could type
13:44 - that properly
13:45 - let's do another p tag and what do we
13:48 - want to make this one
13:49 - uh this is going to be type
13:52 - and then lastly we have our brand so
13:55 - let's go ahead and do that
13:57 - brand colon and
14:00 - now brand okay so i'm going to save i'm
14:02 - going to refresh here
14:03 - and you can see that we have name max
14:05 - price type and brand so let's just go
14:07 - tim let's press search and notice it
14:09 - updates right here
14:11 - so there you go we have now created our
14:13 - search bar okay so now that this is
14:14 - displaying here i'm going to show
14:16 - you how we can actually send this
14:17 - information so all of these things right
14:19 - here
14:19 - back to this app component we're going
14:21 - to do this through a prop
14:23 - so remember how i told you that we
14:25 - cannot modify props they're read only
14:27 - values
14:28 - because what might be a clever thing to
14:29 - do here is to maybe make a variable up
14:31 - here make a state up here or something
14:33 - right so we'd say const
14:34 - i would say data and you know set
14:37 - data and then this would be equal to use
14:39 - state
14:40 - and then maybe we would try to pass this
14:42 - data maybe this is a javascript object
14:45 - or something
14:45 - to search bars we say data equals data
14:48 - and then in search bar we're like okay
14:50 - well this is easy we can just update
14:51 - data and then it will change here and
14:52 - we'll have access to the data
14:54 - but we can't do that so instead what we
14:56 - need to do is we need to pass
14:58 - a function to search bar that we're
15:00 - going to call
15:01 - our callback and we can call this
15:03 - something else we will in a second but
15:05 - for the formal kind of
15:06 - term of what we're doing here is a
15:07 - callback and this function will update
15:10 - the state in this component
15:12 - and it will be called from the child
15:14 - component so just bear with me here
15:15 - while i do this
15:16 - i'm going to say const and this will be
15:19 - update
15:20 - data is equal to a function
15:23 - and what we'll do here is we will take a
15:25 - value so we'll take some data
15:27 - we'll say data is equal to data like
15:30 - that and actually
15:31 - let's just call this search
15:35 - params because that makes a bit more
15:37 - sense
15:38 - search params standing for search
15:40 - parameters
15:41 - let's make this search params okay so
15:43 - now actually sorry we want to change the
15:45 - state so we're going to say
15:46 - set data like that and then
15:50 - search params and then i realize that we
15:52 - want to import
15:53 - a use state so let's go ahead and do
15:54 - that and say import
15:57 - use or import
16:00 - views state from
16:03 - and then this is going to be react all
16:06 - right so apologize for all the typing
16:07 - but now
16:08 - we can stop for a second and explain
16:09 - what we're going to do so we're going to
16:11 - take this function here update data
16:13 - we're going to pass this as a callback
16:16 - parameter to the search bar so now in
16:19 - search bar
16:20 - we can access from the props this
16:23 - parameter here
16:24 - called callback and what we can do is
16:26 - call that function
16:27 - and what this function will do is then
16:29 - update the data right so we'll actually
16:31 - call set data so we will change the
16:33 - state in this component
16:35 - and that means that we didn't have to
16:36 - change any of the props here
16:38 - we just called a function that then
16:40 - changed the state
16:41 - on the component that rendered us so
16:43 - this is kind of the way that you can in
16:45 - a child component
16:46 - update the parent component i get it's a
16:48 - little bit confusing
16:49 - but that is kind of how that works so
16:51 - let's go ahead and do this
16:52 - so when the search button is pressed
16:54 - what i actually want to do
16:56 - is say props dot callback and i want to
16:59 - pass to this
17:00 - the data so for now i'm just going to
17:01 - pass
17:03 - data and we'll just say you know test
17:05 - but we'll actually put these fields in
17:06 - there in one second
17:08 - and now what will happen is we'll call
17:09 - the callback function we'll pass this
17:11 - javascript object
17:12 - and then here we will update our data to
17:14 - be equal to that
17:16 - javascript object that was passed so if
17:18 - we want to look at this javascript
17:19 - object
17:20 - what we can do here is go p and then
17:24 - we can just say what should we do here
17:26 - data
17:28 - although the thing is since data is a
17:29 - javascript object this isn't really
17:31 - going to work very well
17:32 - so we want to say data and then at data
17:35 - but only if data is
17:37 - in data so a little bit confusing we're
17:38 - going to say data
17:40 - in data question mark if that's the case
17:44 - then we'll say data data
17:45 - otherwise we'll say no data
17:48 - to display and this needs to be in
17:51 - quotation marks
17:53 - okay hopefully that kind of makes sense
17:55 - but let's see here it's saying no data
17:56 - to display but then
17:57 - as soon as we actually press this here
17:59 - notice that it changed
18:01 - changes to test right so it actually
18:02 - updates because we called that callback
18:04 - which then changed the state so now
18:06 - let's finish this up by just removing
18:08 - all of these because we don't need these
18:09 - anymore
18:10 - and now let's make it so that we
18:11 - actually pass rather than just data all
18:14 - of the different values here so the name
18:15 - the price the type and the brand
18:17 - so let's do that we're going to pass
18:19 - name colon name
18:20 - we're going to pass price poll and price
18:23 - we're going to pass
18:23 - type colon type and we're going to pass
18:26 - brand colon
18:27 - brand we're going to save that and then
18:30 - this should be
18:30 - all good okay so let's try this out okay
18:33 - so now what i'm actually going to do
18:35 - instead
18:35 - is uh it's a little bit of work but
18:38 - let's just write it out because we need
18:39 - to do this
18:40 - rather than checking if data is in data
18:42 - i'm going to check first off if
18:44 - name is in data if name is in data then
18:47 - i will display
18:48 - the name and we'll just put kind of name
18:51 - colon like that
18:52 - and then we'll copy this and we'll just
18:53 - do the same for all of the other keys
18:54 - that we're expecting in this data so
18:56 - around the name
18:56 - next we're going to have max price
19:00 - and then rather than checking name we're
19:01 - going to check price and then we'll
19:03 - display
19:04 - price and then the next one we had i
19:06 - believe was type
19:08 - so rather than checking name we're going
19:10 - to check type
19:12 - so let's go with type and then lastly we
19:15 - had brand so let's do that
19:17 - brand brands
19:21 - and finally brand okay so now you can
19:24 - see it says no data to display for all
19:26 - of these because well we don't have any
19:27 - data here we start with an empty object
19:29 - but now if i go here and i go all right
19:31 - we're looking for i don't know
19:33 - maybe fruit our max price is going to be
19:36 - 10
19:37 - uh the type is let's just say n a and
19:40 - the brand is maybe going to be
19:42 - organic i know this doesn't really make
19:43 - any sense but let's just search and
19:45 - notice that now this update so we have
19:46 - price
19:47 - 10 or sorry we have name price type and
19:50 - brand
19:51 - and if we change this we make this empty
19:52 - and now we press search notice this goes
19:54 - away
19:55 - now the reason why it's not showing us
19:57 - no data to display is because we do
19:59 - actually have a key called brand
20:01 - however what's being stored in brand is
20:02 - just an empty string because here
20:04 - we have an empty string for the state
20:06 - for brand
20:07 - so hopefully that kind of makes sense
20:09 - but i just wanted to show you here how
20:10 - we can actually pass data kind of
20:12 - up our react components so what we do is
20:14 - we pass a
20:15 - callback function so we can actually
20:17 - modify the state of a parent component
20:20 - from a child component and you kind of
20:21 - saw how that worked we passed the data
20:23 - as a parameter to this callback function
20:26 - and then this callback function used
20:27 - that data to update the state
20:29 - in this component and that caused this
20:31 - component to re-render
20:32 - and then display everything that is here
20:35 - all right so that's going to be it
20:36 - for this video hopefully this kind of
20:39 - cleared up
20:39 - how the state works how you can pass it
20:41 - between different components in the next
20:43 - video i think what we'll do is actually
20:44 - build that add
20:46 - item component and we'll show how we can
20:48 - display
20:49 - all of the different kind of inventory
20:50 - items based on the search results
20:52 - so with that said i hope you enjoyed if
20:54 - you did make sure to leave a like
20:55 - subscribe to the channel and i will see
20:57 - you in the next react tutorial
21:06 - you

Cleaned transcript:

hello everybody and welcome to the react tutorial for beginners in today's video i'm going to be covering forms and events now specifically what we'll be doing here is actually taking all of the knowledge all the stuff we've learned so far and applying this into creating some real components some components that we'll actually keep throughout the rest of this tutorial series and that will help us start to build our inventory management system so what we're going to be doing here is building the inventory management system i described this briefly at the beginning of the series the idea for this is that we're going to have kind of one component that allows us to add items into the inventory another component that allows us to search for items in the inventory and then some type of display for all of the items and we'll get into styling and making this look better in later videos for now i'm just focused on the functionality and you know getting some stuff on the screen and showing you guys how this stuff works so right now let's actually go ahead and delete almost everything that we've done so far so i'm going to get rid of info going to get rid of button state and data here i'm going to go to info and just delete this entire file we don't want this anymore and i think that i mentioned this previously but i'm going to delete this setup test file i don't know why that's back in this app test.js all right so let's delete that and now all we have is this app file all right so actually let's go ahead and create a file here i'm going to make a new file and call this searchbar.js and then i'm just going to go to app.js and remove these three things here because obviously we don't need these anymore okay so let's remove those and go back to search bar and now let's create a component so first i'll actually import some stuff from react so i'll say import and then we'll import use state from and then react and then we'll define our function function search bar and we can take i guess we could take some props we'll take some props there and then here we'll go ahead and start rendering the search bar so return and then let's create what we want so for the search bar what i want to have is a few different fields i want one field to look for say maybe the name of a product maybe one for the maximum price of a product uh and there's a few other things we could do as well i'm just trying to think what we want to store for like our items in inventory this is again going to be kind of just like a simple example so maybe we'll have something where each item has maybe a name uh a price uh no why is this not giving it to me properly okay so name price we can go with maybe uh you know type of item and finally maybe we could do maybe brand of item or something like that so we'll say that these are the four fields that we want and so we'll make kind of four corresponding fields here in the search bar so you can search for items based on any of these four fields so let's start by creating a form here we'll say form like that above this form we can make a header so we'll say h2 and then we'll say search for an item and we'll style this for my in one of the later videos okay so for the forum we don't really need anything inside of there what we can do is we can make an input tag so we can say input like that we can then do a label above this input so we'll say label slash label this label will be four and then we need a class name here so we'll say actually not class name we need an id we'll say id is equal to and then the first thing we'll have is name field like that yeah okay that works and then this can be for name hyphen field all right so the label here we'll just put it as name and then the input this will be type equals text and i think that's probably all we need for the input tag and i think we can actually just end the input tag like that okay so let's copy this a few times so we will have name we will then have price so we'll say max price and i think for type for this we can make this a number i think that's a valid type at least and then i said name field we'll just make this price field like that and we could do a min price too but for now we'll just do a max price we can add stuff later on now we'll copy this and what else do we want we want the type so let's go with type here and then set a price field we can do type field and type field this will then be a text and one more is going to be the brand so we'll say brand like that and then brand fields brand field and again set a number we are going to have text all right and then we want a button this button will be search so we'll say button and then this can be search like that and it's not actually necessary to put this inside of a form but we're just going to do that because it's kind of you know good practice okay so for some reason this isn't auto formatting i wonder if i made a mistake here oh it's because i have this up here let's remove that and there you go now we get our auto formatting okay so let's actually use this now let's render this component so we're going to go to app.js we're going to say import and we need to make sure we export this so we're going to say export default and then search bar like that all right then we will come here and we will import search bar from and then dot slash search bar like that okay now we can render this so let's go with search bar and then end the tag okay so now we can see we have our name our max price our type and our brand now obviously it doesn't look too nice right now but that's fine we'll just leave it like this for now and when you press search you can see it actually does something for the form i think i can turn that off because i don't want it to actually refresh the page when we press search so let's actually figure out how we can make it so that when we press the button the form is not active okay so i think the way to fix this is to actually just make this type equals button rather than type equals submit and now if i refresh this and i press search notice that it's not actually refreshing the page okay so there we go we now have our button i think by default this is equal to a submit button and so when you make it just a regular button i will not submit the form awesome that's kind of what we're looking for now that we have done that what we want to do is actually have some state for all of these fields ideally what i want to happen is when i press the search button we are able to get access to whatever is inside of all of these fields and for now we'll just print it to the screen but we actually want to return that probably to app.js where then we could render some different data depending on what we searched for so we're going to use state here and we're going to define four pieces of state one for the name one for the max price one for the type and one for the brand so we're gonna say const like that and then we're gonna say name and then set name is equal to use state this will just be an empty string by default and then we'll copy this a few times and we'll change this appropriately so rather than name we want this to be price so then this is going to be set price and the default here uh we can make this actually just zero for now and then instead of name we are going to have the type and we'll say set type this can be an empty string and then lastly we'll have the brand and this could be set brand and again that can be an empty string all right so now we want to do is make it so that whatever the value of this state is is actually what's being used for these inputs and so what i'm going to do is for all of these inputs say value is equal to and then the corresponding state variable in this case we'll go with name now here for this we're going to say value is equal to and this will be the price and then same thing here for the type value is equal to type and finally value is equal to brent okay so now we're going to save that i'm going to refresh and notice though when i go here and i start trying to type nothing is happening now the reason nothing is happening when i type here is because we have explicitly set the value of these fields to be equal to our state and our state is kind of constant right now it's not changing we have nothing that's updating our state and so when i try to type something here well nothing's going to happen and whenever you set the value equal to something explicitly on one of these fields well to be able to change this value you actually need to implement an event handler and this is where we get into events so whenever we start updating this input field there's actually an event that will be triggered called on change so if you say on change you can make this equal to a function we're actually going to do an arrow function here and what this arrow function will take as a parameter is e now e is kind of the event that occurred that caused this on change thing to be triggered and e will allow us to actually access what the user typed into this input field and so what we're going to do here is have an arrow function and we're going to say set and then in this case name and this is going to be e dot target dot value so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews they have over 155 coding interview questions all of those questions have detailed solutions in nine of the most popular programming languages as well as a video explanation by a great instructor get started with algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform so this is kind of just what you do when you want to actually update the input field that is using state to kind of control its value you put an on change and then you take a parameter e e will automatically be passed to this from the on change event handler and then we will call set name and we will update our name state to be equal to whatever the user typed in which we're getting from e.target.value so you don't have to fully understand what this is but when you say e.target that's getting the actual component here which is input and then we're grabbing the value and then we're updating our name with that and so when we update our name the field will actually change right so when i go hello we can see it actually changes whereas here if i go over to type and i try to type something well nothing happens so now we're just going to copy this exact same thing for all of the different functions so let's go on change or sorry not functions but different input tags and rather than set name here this is going to be set price and then we'll do the same thing here for the type just change this to set type and then lastly here do the same thing for brand we'll say set and then brand okay when i save that you can see this updates now if i refresh here and i go and i change these you can see that all of these are working the same because now we have the event handler now let's see if we're getting any errors i just want to look in the console quickly warning invalid dom property 4 did you mean html4 see i wonder why this is incorrect because usually i've used four and it's worked let's just see if i change this to be html4 if this is gonna do anything for us um okay it doesn't look like it actually makes a difference at all to be honest but let's change it for all of them and just see if this error goes away one of you guys can maybe correct me in the comments here if i'm mistaking something but usually i've used four and it's worked before so html4 and then html4 okay so let's go to inspect and okay we're not getting an error now so i'm going to assume that what i just did is correct so we'll leave that nice okay anyways now we've done that and we have the state and the state should be holding everything that we're typing in these fields so now if we actually want to see what was typed into these fields when we press the search button we need some kind of event handler for this and so what i'm going to do is create a function here and i'm just going to say const and then search button pressed and this is going to be equal to an arrow function and all we'll do here is we'll just console.log all of the stuff so we'll call usa.log the name we'll console.log on a new line the price will console.log the type and then finally the brand okay so let's save that and now let's set this function on the button so let's go here and press or say on click is equal to and then what i call this search button pressed okay so now we've done that let's open up our console here and let's type something in so name tim price let's just go 23 brand whatever we can make this uh i don't know test and then or sorry type test and brand can be test2 when we press search notice all of them are printing out if i change this to be test three and i press search uh now test three we're getting getting that update occurring there awesome so there you go that all works and now we have implemented the state we have created a form and we're able to actually access all of the values in this form from the state of our component so now what i want to do though is i want to actually display the stuff that we were searching for either in this component and maybe a child component or i want to pass what we were searching for to whatever rendered this search bar so how do we go about doing that well this is where it gets a little bit more difficult but i'm going to actually make it so that we are showing something here uh maybe below the form that displays all of the stuff that we search for so let's actually just say in a paragraph tag here let's go with name colon name let's go with this is going to be max price and then max price uh oops this is just called price okay so let's make that price if i could type that properly let's do another p tag and what do we want to make this one uh this is going to be type and then lastly we have our brand so let's go ahead and do that brand colon and now brand okay so i'm going to save i'm going to refresh here and you can see that we have name max price type and brand so let's just go tim let's press search and notice it updates right here so there you go we have now created our search bar okay so now that this is displaying here i'm going to show you how we can actually send this information so all of these things right here back to this app component we're going to do this through a prop so remember how i told you that we cannot modify props they're read only values because what might be a clever thing to do here is to maybe make a variable up here make a state up here or something right so we'd say const i would say data and you know set data and then this would be equal to use state and then maybe we would try to pass this data maybe this is a javascript object or something to search bars we say data equals data and then in search bar we're like okay well this is easy we can just update data and then it will change here and we'll have access to the data but we can't do that so instead what we need to do is we need to pass a function to search bar that we're going to call our callback and we can call this something else we will in a second but for the formal kind of term of what we're doing here is a callback and this function will update the state in this component and it will be called from the child component so just bear with me here while i do this i'm going to say const and this will be update data is equal to a function and what we'll do here is we will take a value so we'll take some data we'll say data is equal to data like that and actually let's just call this search params because that makes a bit more sense search params standing for search parameters let's make this search params okay so now actually sorry we want to change the state so we're going to say set data like that and then search params and then i realize that we want to import a use state so let's go ahead and do that and say import use or import views state from and then this is going to be react all right so apologize for all the typing but now we can stop for a second and explain what we're going to do so we're going to take this function here update data we're going to pass this as a callback parameter to the search bar so now in search bar we can access from the props this parameter here called callback and what we can do is call that function and what this function will do is then update the data right so we'll actually call set data so we will change the state in this component and that means that we didn't have to change any of the props here we just called a function that then changed the state on the component that rendered us so this is kind of the way that you can in a child component update the parent component i get it's a little bit confusing but that is kind of how that works so let's go ahead and do this so when the search button is pressed what i actually want to do is say props dot callback and i want to pass to this the data so for now i'm just going to pass data and we'll just say you know test but we'll actually put these fields in there in one second and now what will happen is we'll call the callback function we'll pass this javascript object and then here we will update our data to be equal to that javascript object that was passed so if we want to look at this javascript object what we can do here is go p and then we can just say what should we do here data although the thing is since data is a javascript object this isn't really going to work very well so we want to say data and then at data but only if data is in data so a little bit confusing we're going to say data in data question mark if that's the case then we'll say data data otherwise we'll say no data to display and this needs to be in quotation marks okay hopefully that kind of makes sense but let's see here it's saying no data to display but then as soon as we actually press this here notice that it changed changes to test right so it actually updates because we called that callback which then changed the state so now let's finish this up by just removing all of these because we don't need these anymore and now let's make it so that we actually pass rather than just data all of the different values here so the name the price the type and the brand so let's do that we're going to pass name colon name we're going to pass price poll and price we're going to pass type colon type and we're going to pass brand colon brand we're going to save that and then this should be all good okay so let's try this out okay so now what i'm actually going to do instead is uh it's a little bit of work but let's just write it out because we need to do this rather than checking if data is in data i'm going to check first off if name is in data if name is in data then i will display the name and we'll just put kind of name colon like that and then we'll copy this and we'll just do the same for all of the other keys that we're expecting in this data so around the name next we're going to have max price and then rather than checking name we're going to check price and then we'll display price and then the next one we had i believe was type so rather than checking name we're going to check type so let's go with type and then lastly we had brand so let's do that brand brands and finally brand okay so now you can see it says no data to display for all of these because well we don't have any data here we start with an empty object but now if i go here and i go all right we're looking for i don't know maybe fruit our max price is going to be 10 uh the type is let's just say n a and the brand is maybe going to be organic i know this doesn't really make any sense but let's just search and notice that now this update so we have price 10 or sorry we have name price type and brand and if we change this we make this empty and now we press search notice this goes away now the reason why it's not showing us no data to display is because we do actually have a key called brand however what's being stored in brand is just an empty string because here we have an empty string for the state for brand so hopefully that kind of makes sense but i just wanted to show you here how we can actually pass data kind of up our react components so what we do is we pass a callback function so we can actually modify the state of a parent component from a child component and you kind of saw how that worked we passed the data as a parameter to this callback function and then this callback function used that data to update the state in this component and that caused this component to rerender and then display everything that is here all right so that's going to be it for this video hopefully this kind of cleared up how the state works how you can pass it between different components in the next video i think what we'll do is actually build that add item component and we'll show how we can display all of the different kind of inventory items based on the search results so with that said i hope you enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in the next react tutorial you
