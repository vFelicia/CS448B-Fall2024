With timestamps:

00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial
00:03 - for beginners now in this video we are
00:06 - going to be covering the switch
00:07 - statement
00:08 - now the switch statement is very similar
00:09 - to an if else if else
00:11 - block but allows us to do something in a
00:13 - much cleaner and more elegant way
00:15 - so with that said let's talk about the
00:17 - switch statement
00:20 - [Music]
00:26 - so before we dive into the switch
00:27 - statement i'm just going to quickly give
00:29 - you an idea of what you can expect for
00:30 - the rest of the series
00:32 - so in the rest of the series what i'm
00:33 - going to be trying to do is covering
00:35 - pointers
00:36 - references functions classes strings and
00:40 - a few other more advanced things in c
00:42 - plus plus we're not going to get too
00:44 - crazy into the object-oriented
00:45 - programming aspect of c plus plus
00:47 - because that is just
00:48 - more advanced and you need to kind of
00:49 - master this stuff first but i will
00:51 - definitely talk about pointers and
00:52 - definitely talk about references
00:54 - and kind of those more intricate and
00:56 - difficult details in
00:58 - c plus anyways in this video we're going
01:00 - to cover the switch statement so let's
01:02 - do that so as i said in the introduction
01:04 - the switch statement is very similar to
01:07 - an if and
01:07 - else if structure or if else if else
01:10 - however
01:11 - what it actually does is it takes in one
01:13 - expression
01:14 - now an expression could be a variable an
01:16 - expression could be like a variable plus
01:18 - one so for example if i say
01:20 - something like into x equals one and
01:22 - then i say into y
01:23 - equals two then an expression is
01:25 - something like x
01:26 - plus y or x plus y plus 2 or even just
01:30 - x itself so it takes some expression and
01:32 - it compares that
01:34 - expression to a ton of different values
01:37 - now if that expression is of a certain
01:39 - value
01:40 - then it will do what's in that switch
01:41 - case now you'll see what i mean in one
01:43 - second when you write out the switch
01:45 - statement
01:45 - but one thing to i guess point out here
01:48 - is that you don't need a switch
01:50 - statement
01:50 - what i'm showing you here and a lot of
01:51 - the stuff i'm showing you you can do in
01:53 - different ways and actually in a lot of
01:55 - programming languages there is no switch
01:57 - statements
01:57 - so if there is a switch statement it's
01:59 - great to use it but you do not
02:01 - need to use it and you could use an if
02:03 - and else if structure to do the exact
02:05 - same thing i'm going to show you here
02:06 - a switch is just a bit more elegant so
02:08 - i'm going to code out a switch
02:10 - i'm going to say switch like that and
02:12 - when you do this what you need to put
02:14 - inside of these parentheses is an
02:15 - expression so let's make a variable
02:17 - let's say into x
02:18 - equals 2 and we're going to put x as our
02:20 - expression and in fact
02:22 - actually let's do x plus 1. so what's
02:24 - going to happen now
02:25 - is inside of this switch statement we
02:27 - are going to write cases
02:29 - and a case is just a block of code that
02:32 - tells us
02:32 - what to do when this expression is equal
02:35 - to a certain value
02:37 - so i'm going to say case one colon
02:40 - and then after this colon in an indented
02:43 - block
02:44 - i'm going to put what i want to happen
02:46 - when the case is one so we will continue
02:48 - in one second but i need to quickly
02:50 - thank the sponsor of this video and the
02:52 - series which is
02:52 - alco expert algo expert is the best
02:55 - platform to use from preparing for your
02:56 - software engineering coding interviews
02:58 - at the highest quality coding interview
03:00 - questions data structures crash course
03:02 - mock interviews and a ton of other
03:04 - features on the platform
03:05 - get started with algo expert today by
03:07 - clicking the link in the description and
03:09 - using the code tech with tim for a
03:10 - discount on the platform
03:12 - so any code that i want to run when x
03:15 - plus 1 is equal to 1
03:16 - goes in here so i can just say oops uh
03:20 - c out and let's just say cool for now
03:23 - and then i'm going to put break and now
03:25 - what i've done is i've
03:26 - ended this case so the basic syntax is
03:29 - you do switch
03:30 - you have your parenthesized expression
03:33 - you then have the curly brackets
03:35 - inside of here you add your cases or
03:37 - case if you only had one case although
03:39 - it didn't wouldn't really make sense to
03:40 - do that with the switch statement so you
03:42 - say your case
03:43 - that's the keyword you then put the
03:45 - value you want to compare to the
03:46 - expression
03:47 - you put a colon and then indented so you
03:49 - press tab
03:50 - uh you put all of the code you want to
03:52 - run now i believe this does not need to
03:54 - be indented i'm pretty certain if you do
03:56 - this it will still work
03:57 - but it's better practice to put this
03:58 - indented because then
04:00 - it's just way easier to read and you can
04:01 - kind of see where the cases start
04:03 - and where the actual code that's running
04:05 - is and then once all of your code is
04:07 - done you add a break
04:08 - you can kind of think that think of that
04:10 - as terminating the case
04:12 - all right so i'm gonna do another case
04:14 - i'm gonna say case two
04:16 - colon and then here we'll say c out
04:20 - and we'll just say not cool uh
04:23 - and then we will say break okay so let's
04:25 - just run this and let's see what happens
04:26 - when x is equal to two
04:28 - so two plus one is going to be equal to
04:30 - three so just take a guess out what's
04:31 - going to happen
04:32 - so when i run this you're gonna see that
04:34 - nothing happens right and the reason
04:36 - nothing happens
04:37 - is because well x is equal to two and we
04:39 - don't have a case
04:40 - for three is one two plus one we get
04:42 - three we don't have a case
04:44 - for three so let's change x to one and
04:46 - now let's see what happens
04:48 - when i run this you're gonna see that we
04:49 - get not cool printing out
04:52 - again the reason we get that is because
04:53 - well one plus one is equal to two
04:55 - this is the case two and so we print out
04:58 - not cool
04:59 - finally we can change x equal to zero
05:02 - and
05:02 - let's run this and we get cool so that
05:04 - is really the basics of a switch
05:06 - statement now you can put as many cases
05:08 - here as you want right
05:09 - so i can do another case uh let's go
05:11 - case and let's go
05:13 - like 10. and say uh
05:17 - interesting or something like that did i
05:19 - even spell interesting right do i need
05:20 - another e
05:21 - uh i think so interesting yeah okay that
05:24 - sounds about right
05:24 - uh let's change this now to be nine
05:28 - let's run this and there we go we get
05:31 - interesting
05:32 - all right so now you know how to use a
05:33 - switch statement you do your case
05:35 - you do whatever you want to happen then
05:37 - you can add a break to terminate your
05:39 - case
05:40 - and note you can do multiple things here
05:41 - you don't have to just say c
05:43 - out something we could add like an if
05:45 - statement here or something
05:46 - or we can add anything else essentially
05:48 - in this block but break will end each of
05:50 - our cases and then there's one more
05:52 - thing to show you here which is called
05:54 - default so notice that when i did
05:56 - something like 4 right if there's no
05:58 - case for 4
05:59 - that's fine sometimes we don't actually
06:01 - want to do anything when
06:02 - there is no case for whatever the
06:04 - expression value is so for four if we
06:06 - didn't want to do anything we could
06:07 - leave it like this
06:08 - and well nothing would happen but if we
06:11 - do want something to happen we want to
06:12 - have what's known as a default case
06:15 - we can do that now the default case is
06:17 - kind of equivalent to like an
06:18 - else in the if else if else structure
06:22 - so if one of these cases is not the case
06:25 - no pun intended
06:26 - then we have the default which will run
06:28 - so oops said it means to do that
06:30 - i'm going to add default and the default
06:32 - doesn't take anything after the colon
06:34 - because this is
06:35 - anything right the value of the
06:36 - expression can be anything other than
06:38 - one of these cases
06:39 - and then in here we'd say c out and let
06:41 - me just see our default
06:43 - for now just so that we understand this
06:45 - is the default case
06:47 - so now if x is equal to four and i run
06:49 - this
06:50 - you can see that we get default if i now
06:52 - make this equal to one though so our
06:54 - case is now going to be two
06:56 - and we run this we get not cool so
06:59 - really that's
06:59 - all i need to cover for the switch
07:01 - statement i mean i could drag this video
07:03 - on and show you a ton of different
07:04 - examples
07:05 - but i think you guys probably get the
07:06 - point here you just define your
07:08 - different cases you put your expression
07:09 - inside of here the expression can be
07:11 - anything i'm adding 1 to x but you can
07:13 - just put the variable x that
07:15 - totally is fine that works as well you
07:17 - don't only have to do this with ins you
07:19 - could do this with strings with booleans
07:21 - whatever all you're doing is you're
07:22 - comparing the this expression right here
07:25 - to the value of all of these cases you
07:26 - can think of it as writing an if
07:28 - statement
07:29 - where you say if x is equal to one
07:32 - and then you could say you know else if
07:34 - x
07:35 - is equal to two and then so on and so
07:38 - forth and then finally the default would
07:40 - just be represented by the else you can
07:42 - use either structure that you would like
07:44 - uh the switch is just more elegant when
07:46 - you're just going to be comparing the
07:47 - value
07:47 - so with that said if you guys enjoyed
07:49 - this video make sure to leave a like
07:50 - subscribe to the channel and i'll see
07:52 - you in another youtube video
08:01 - you

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners now in this video we are going to be covering the switch statement now the switch statement is very similar to an if else if else block but allows us to do something in a much cleaner and more elegant way so with that said let's talk about the switch statement so before we dive into the switch statement i'm just going to quickly give you an idea of what you can expect for the rest of the series so in the rest of the series what i'm going to be trying to do is covering pointers references functions classes strings and a few other more advanced things in c plus plus we're not going to get too crazy into the objectoriented programming aspect of c plus plus because that is just more advanced and you need to kind of master this stuff first but i will definitely talk about pointers and definitely talk about references and kind of those more intricate and difficult details in c plus anyways in this video we're going to cover the switch statement so let's do that so as i said in the introduction the switch statement is very similar to an if and else if structure or if else if else however what it actually does is it takes in one expression now an expression could be a variable an expression could be like a variable plus one so for example if i say something like into x equals one and then i say into y equals two then an expression is something like x plus y or x plus y plus 2 or even just x itself so it takes some expression and it compares that expression to a ton of different values now if that expression is of a certain value then it will do what's in that switch case now you'll see what i mean in one second when you write out the switch statement but one thing to i guess point out here is that you don't need a switch statement what i'm showing you here and a lot of the stuff i'm showing you you can do in different ways and actually in a lot of programming languages there is no switch statements so if there is a switch statement it's great to use it but you do not need to use it and you could use an if and else if structure to do the exact same thing i'm going to show you here a switch is just a bit more elegant so i'm going to code out a switch i'm going to say switch like that and when you do this what you need to put inside of these parentheses is an expression so let's make a variable let's say into x equals 2 and we're going to put x as our expression and in fact actually let's do x plus 1. so what's going to happen now is inside of this switch statement we are going to write cases and a case is just a block of code that tells us what to do when this expression is equal to a certain value so i'm going to say case one colon and then after this colon in an indented block i'm going to put what i want to happen when the case is one so we will continue in one second but i need to quickly thank the sponsor of this video and the series which is alco expert algo expert is the best platform to use from preparing for your software engineering coding interviews at the highest quality coding interview questions data structures crash course mock interviews and a ton of other features on the platform get started with algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform so any code that i want to run when x plus 1 is equal to 1 goes in here so i can just say oops uh c out and let's just say cool for now and then i'm going to put break and now what i've done is i've ended this case so the basic syntax is you do switch you have your parenthesized expression you then have the curly brackets inside of here you add your cases or case if you only had one case although it didn't wouldn't really make sense to do that with the switch statement so you say your case that's the keyword you then put the value you want to compare to the expression you put a colon and then indented so you press tab uh you put all of the code you want to run now i believe this does not need to be indented i'm pretty certain if you do this it will still work but it's better practice to put this indented because then it's just way easier to read and you can kind of see where the cases start and where the actual code that's running is and then once all of your code is done you add a break you can kind of think that think of that as terminating the case all right so i'm gonna do another case i'm gonna say case two colon and then here we'll say c out and we'll just say not cool uh and then we will say break okay so let's just run this and let's see what happens when x is equal to two so two plus one is going to be equal to three so just take a guess out what's going to happen so when i run this you're gonna see that nothing happens right and the reason nothing happens is because well x is equal to two and we don't have a case for three is one two plus one we get three we don't have a case for three so let's change x to one and now let's see what happens when i run this you're gonna see that we get not cool printing out again the reason we get that is because well one plus one is equal to two this is the case two and so we print out not cool finally we can change x equal to zero and let's run this and we get cool so that is really the basics of a switch statement now you can put as many cases here as you want right so i can do another case uh let's go case and let's go like 10. and say uh interesting or something like that did i even spell interesting right do i need another e uh i think so interesting yeah okay that sounds about right uh let's change this now to be nine let's run this and there we go we get interesting all right so now you know how to use a switch statement you do your case you do whatever you want to happen then you can add a break to terminate your case and note you can do multiple things here you don't have to just say c out something we could add like an if statement here or something or we can add anything else essentially in this block but break will end each of our cases and then there's one more thing to show you here which is called default so notice that when i did something like 4 right if there's no case for 4 that's fine sometimes we don't actually want to do anything when there is no case for whatever the expression value is so for four if we didn't want to do anything we could leave it like this and well nothing would happen but if we do want something to happen we want to have what's known as a default case we can do that now the default case is kind of equivalent to like an else in the if else if else structure so if one of these cases is not the case no pun intended then we have the default which will run so oops said it means to do that i'm going to add default and the default doesn't take anything after the colon because this is anything right the value of the expression can be anything other than one of these cases and then in here we'd say c out and let me just see our default for now just so that we understand this is the default case so now if x is equal to four and i run this you can see that we get default if i now make this equal to one though so our case is now going to be two and we run this we get not cool so really that's all i need to cover for the switch statement i mean i could drag this video on and show you a ton of different examples but i think you guys probably get the point here you just define your different cases you put your expression inside of here the expression can be anything i'm adding 1 to x but you can just put the variable x that totally is fine that works as well you don't only have to do this with ins you could do this with strings with booleans whatever all you're doing is you're comparing the this expression right here to the value of all of these cases you can think of it as writing an if statement where you say if x is equal to one and then you could say you know else if x is equal to two and then so on and so forth and then finally the default would just be represented by the else you can use either structure that you would like uh the switch is just more elegant when you're just going to be comparing the value so with that said if you guys enjoyed this video make sure to leave a like subscribe to the channel and i'll see you in another youtube video you
