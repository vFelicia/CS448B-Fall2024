With timestamps:

00:01 - foreign
00:02 - [Music]
00:10 - so in today's video I'm going to share
00:13 - with you some topics that self-taught
00:14 - developers most likely will never learn
00:17 - and when I say self-taught developer I'm
00:19 - really talking about someone who hasn't
00:21 - gone through the traditional school
00:22 - system and just give you a bit of
00:24 - context here I myself have done two and
00:26 - a half years of a computer science
00:27 - degree I've done most of the mandatory
00:29 - computer science courses and I'm aware
00:31 - of the courses that I'm going to have to
00:33 - take in the future if I continue my
00:35 - computer science degree and I'm also
00:37 - pretty much self-taught with a lot of
00:38 - the other development skills that I have
00:40 - I started to learn to program well
00:42 - before I was in university and a lot of
00:44 - what I know I didn't learn in University
00:46 - so I gotta have a decent perspective
00:48 - here as someone who's been through
00:49 - school but also teaches themselves a lot
00:51 - of programming anyways with that said I
00:54 - will lastly mention here that there is a
00:56 - reason why a lot of developers don't
00:57 - learn these topics again I'm not trying
00:59 - to say you need to code and learn them a
01:01 - lot of them are relatively useful in a
01:03 - real job environment however I believe
01:05 - it's important to be aware of some gaps
01:07 - in your knowledge and hopefully this
01:09 - video will just show you some things
01:10 - that maybe you haven't considered before
01:11 - and you might want to learn anyways
01:14 - let's go ahead and get started after
01:15 - quick word from our sponsor before we
01:18 - get started I need to thank the sponsor
01:19 - of this video which is Alco expert algo
01:22 - expert is the best platform to use when
01:24 - preparing for your software engineering
01:26 - coding interviews and has the highest
01:27 - quality coding interview practice
01:29 - questions with 160 practice questions
01:32 - detailed Solutions and nine of the most
01:34 - popular programming languages a
01:36 - feature-packed browser-based coding
01:38 - environment extensive test Suites and
01:40 - conceptual overviews and code
01:41 - walkthroughs for each and every problem
01:43 - algo expert is the best resource to use
01:46 - to Ace your coding interviews algo
01:48 - expert also has a data structures crash
01:50 - course coding interview assessments and
01:52 - a mock interviews feature I can highly
01:54 - recommend algo expert as a former
01:56 - customer myself and now an official
01:58 - instructor on the platform get started
02:00 - using algo expert today by clicking the
02:02 - link in the description and using the
02:04 - code Tech with Tim for a discount on the
02:06 - platform alright so let's go ahead and
02:08 - and dive in now the first thing I'm
02:10 - going to clarify here is that a lot of
02:11 - the main topics I'm going to bring up
02:13 - are just the names of university courses
02:15 - that I've taken so what I've kind of
02:17 - done is gone and looked through all of
02:18 - the courses that I've taken and that I
02:20 - need to take in the future and thought
02:22 - about if I was a self-taught developer
02:24 - if I would have learned that content or
02:26 - even like a subset of that content so if
02:29 - it was a course where this is something
02:30 - pretty important and most developers
02:31 - already know this I obviously didn't
02:33 - include it here but if it's something
02:34 - like say math then I probably put it in
02:37 - this list because that's something that
02:38 - as a self-taught developer is not super
02:40 - important not a real practical skill and
02:42 - you don't really necessarily need to
02:44 - learn that to get a job anyways let's
02:46 - dive into topic number one that
02:48 - self-taught developers most likely will
02:50 - never learn and that is advanced
02:52 - mathematics and proofs now when I say
02:54 - advanced mathematics I'm really talking
02:56 - about University level mathematics and
02:58 - I'll go through kind of the main courses
03:00 - that I'm talking about here so the first
03:02 - one this is pretty obvious but calculus
03:04 - so personally in University I had to do
03:06 - calculus 1 and calculate list two these
03:09 - were actually pretty difficult courses
03:11 - so in these courses pretty much what we
03:12 - learned was integrals derivatives and a
03:15 - few applications of integrals and
03:16 - derivatives I haven't found these super
03:18 - useful in Computing in fact the only
03:20 - time I've ever had to use any of that
03:22 - knowledge is when I was looking at some
03:24 - Advanced machine learning kind of
03:25 - explanations so the math behind some
03:27 - machine learning models or machine
03:29 - learning techniques or artificial
03:31 - intelligence related stuff but other
03:32 - than that I've had pretty much no use
03:34 - for calculus in my life since then
03:36 - anyways moving on the next course that
03:39 - I'm kind of grouping in this advanced
03:40 - mathematics and proof section is going
03:43 - to be linear algebra now this is
03:45 - actually one that I would say is pretty
03:46 - important not simply because of the
03:49 - content that it teaches but because of
03:50 - the way it allows you to kind of think
03:52 - about math so linear algebra is a much
03:54 - different type of math than something
03:56 - like calculus or algebra in general like
03:58 - regular algebra with linear algebra
04:01 - you're doing three-dimensional math
04:03 - you're working with matrices you're
04:04 - working with Vector spaces and just a
04:06 - very abstract field of math that I know
04:09 - to a lot of people who are in my course
04:10 - was very new and for me again I didn't
04:12 - find it crazy useful in my experience
04:14 - writing code or being a software
04:16 - engineer but it did help me kind of
04:18 - think about math and problems in a
04:20 - different way and that's why I found
04:21 - some value in it moving on the next two
04:24 - courses are ones that I actually hadn't
04:26 - even heard of until I went into
04:27 - University and this is discrete
04:29 - structures and discrete mathematics now
04:32 - discrete mathematics is kind of the
04:33 - first course and discrete structures is
04:35 - the second course and what you learn in
04:37 - this is actually very computer science
04:39 - relevant math so you're learning about
04:41 - proofs for specific algorithms you're
04:43 - learning about things like permutations
04:45 - combinations graph Theory set theory
04:48 - modular arithmetic and really a lot of
04:51 - the underlying math behind a lot of the
04:53 - principles and programming languages
04:55 - that you're using and behind a lot of
04:57 - very famous algorithms that solve
04:59 - problems so these courses I actually
05:01 - found super useful I wish I could recite
05:03 - more of what I learned in them but I'd
05:05 - recommend that if you haven't heard of
05:07 - discrete mathematics or discrete
05:09 - structures go and give it a Google
05:10 - search look at some you know syllabus or
05:12 - curriculum for it and just see all of
05:14 - the topics that it covers because
05:16 - they're pretty interesting and one of
05:17 - the cool things that's taught in these
05:19 - courses is actually how you prove the
05:21 - correctness of algorithms so how do you
05:23 - say that my algorithm 100 is going to be
05:26 - correct on any input and how do you do
05:28 - that using math that was probably the
05:30 - most interesting aspect also the most
05:32 - difficult aspect of this course alright
05:34 - so with that that pretty much wraps up
05:36 - this first section which is advanced
05:37 - mathematics and proofs again the reason
05:40 - I put it here is because why in the
05:41 - world would you go learn this unless you
05:43 - had to learn it or you're just a math
05:45 - geek I know I'm not and if I wasn't in
05:47 - school there's no chance I would have
05:48 - learned any of this on my free time
05:50 - alright so moving on to the next topic
05:52 - here I have digital systems and computer
05:55 - architecture now these were two separate
05:57 - courses that I took in University but
05:59 - I'm kind of clumping them together
06:00 - because digital systems was first and
06:02 - then computer architecture was second
06:03 - and what was taught in these courses was
06:06 - really how computer hardware works on a
06:09 - much lower level and specifically how a
06:11 - processor actually works so how you take
06:14 - say two numbers and add them in a
06:16 - computer so not like okay how do we look
06:18 - at two numbers and add them but how do
06:20 - wires and circuits and electricity
06:22 - actually allow you to perform
06:24 - computations now to me I found that
06:26 - super fascinating because I'm someone
06:28 - who's really into building computers and
06:30 - I like the hardware aspect as much as I
06:32 - like the software aspect and so to
06:34 - actually kind of get an insight into the
06:35 - lower level and be like oh this is how
06:37 - you know the memory of a computer is
06:39 - managed this is how I access some data
06:42 - at the data specific memory address this
06:44 - is what machine code looks like and this
06:46 - is how I take you know some commands and
06:47 - actually run them on an APU or a CPU
06:50 - that was really really fascinating so
06:52 - other things we learned in these courses
06:54 - was uh the different Gates that you
06:56 - would use in a digital system so an and
06:58 - gate and or gate a nor gate we learned
07:00 - about Boolean algebra so how you
07:01 - simplify Boolean expressions and a ton
07:04 - of other stuff it's been a long time
07:05 - since I've taken those courses these
07:07 - were very difficult courses is probably
07:09 - some of the hardest courses that I had
07:10 - to take but the knowledge that I learned
07:12 - in them was really valuable and I'm
07:14 - actually really glad that I got to take
07:16 - them because even though they were a
07:17 - pain in the ass back then right now I
07:19 - feel like I have a much much better
07:20 - understanding of how a computer works as
07:22 - a whole not just at the software and the
07:25 - code level but actually on the lower
07:26 - level Hardware level which is something
07:28 - that I like alright so moving on to the
07:30 - next topic we have programming paradigms
07:34 - now programming paradigms refers to the
07:36 - different styles of programming and
07:38 - every programming language that you
07:39 - write in implements specific programming
07:42 - paradigms so for example a language like
07:44 - Java this is an object-oriented
07:46 - programming language that's its Paradigm
07:48 - it implements that whereas a language
07:49 - like python implements both functional
07:51 - programming and object oriented
07:53 - programming and I think it implements
07:55 - something else as well but those are the
07:56 - two ones that I know for sure that it
07:58 - implements anyways the point is that
08:01 - most developers only ever learn a few
08:03 - programming languages and most of those
08:05 - programming languages are the same
08:07 - Paradigm so if you're learning languages
08:08 - like Java JavaScript python C plus plus
08:12 - but these all fit into kind of the
08:13 - similar or same Paradigm and you're
08:16 - writing code in a very similar style the
08:18 - way you solve a problem in Python is
08:20 - very similar to the way you solve it in
08:21 - Java the only difference is the syntax
08:23 - might change a bit there might be a few
08:25 - language features that kind of differ
08:27 - across the problems that yourself
08:29 - point being there's a bunch of other
08:31 - programming language paradigms as well
08:32 - that most programmers never look at for
08:34 - example imperative logical procedural
08:37 - there's a bunch of other ones I can't
08:38 - remember off of the top of my head but
08:40 - the way you write code in these
08:41 - languages is completely different from
08:43 - the way you write them in your kind of
08:45 - traditional modern languages now do you
08:47 - really need to know these paradigms
08:49 - probably not they're probably not going
08:51 - to be useful to you in your job but for
08:53 - me when I had to write code and say an
08:55 - imperative style I actually became a
08:57 - better programmer because I had to stop
08:59 - relying on a lot of the kind of language
09:01 - features I had in a language like Python
09:04 - and really think hard about how I'm
09:05 - going to use the bare minimum amount of
09:07 - features to solve this problem for
09:09 - example I had to work in a language
09:11 - called ocamel now I'm not very
09:13 - knowledgeable on ocamel it's just what I
09:15 - did in the course but when we were in
09:17 - the course we were never introduced to a
09:19 - loop so there's no for Loop or while
09:20 - loop or anything like that if we wanted
09:22 - to Loop over something we need to use
09:24 - recursion so we had to have a recursive
09:26 - function if we just wanted to say look
09:28 - at every element of a list we had all
09:30 - kinds of nested functions higher order
09:32 - functions and all kinds of crazy random
09:34 - stuff I'm actually going to talk about
09:35 - in the next section but the point is go
09:38 - and look up programming paradigms and
09:40 - look at some of the paradigms you've
09:42 - never seen before and just have a look
09:43 - at those languages because they're very
09:45 - cool and if you can learn even just a
09:47 - tiny bit of a different Paradigm in my
09:49 - opinion it makes you a better programmer
09:51 - and gives you kind of an appreciation
09:53 - for a lot of the features that you might
09:54 - use in your modern programming language
09:56 - that you just you know assume are always
09:58 - going to be there anyways let's move on
10:00 - to the next topic alright so moving on
10:02 - to the next topic I have programming
10:04 - language Concepts now this was a
10:07 - specific course that I took in
10:08 - University as well this is the one that
10:10 - I had to write ocamel code in as I was
10:12 - mentioning in the previous section and
10:14 - in this course we learned some very
10:16 - Advanced programming language Concepts
10:19 - and when I say that I literally am
10:20 - talking about the different ways in
10:22 - which programming languages are
10:23 - implemented how you know memory is
10:25 - handled how execution occurs in a
10:28 - language and a lot of very low level
10:30 - things also how to create you know
10:31 - multiple threads distributive
10:33 - programming multi-processing
10:34 - multi-threading a lot of stuff like that
10:37 - was taught in this course and one of the
10:39 - cooler things that we learned was higher
10:41 - order programming and higher order
10:42 - functions which means having you know a
10:44 - bunch of nested functions inside of each
10:46 - other we're having a function that
10:48 - returns another function and then we're
10:49 - talking about things like closures and
10:52 - I'm just rattling off a ton of things
10:53 - that I remember learning in this course
10:55 - the point being this course actually
10:57 - taught us about the design of a
11:00 - programming language as a whole and how
11:02 - you pick what features should be in a
11:04 - programming language and what kind of
11:06 - pros and cons you get or what you know
11:08 - advantages and drawbacks you get from
11:10 - different implementations of programming
11:12 - language features so I feel like I'm
11:14 - just completely rambling in this section
11:16 - again I don't remember a ton of this
11:18 - stuff I learned this a while ago but
11:20 - this was something that I learned in
11:21 - University that I thought was useful and
11:23 - worth a mention in this video anyways
11:25 - let's move on to the next topic alright
11:28 - so the next and last topic I have on my
11:30 - list view here is operating systems now
11:33 - when I say operating systems I'm not
11:35 - just talking about you know Linux Mac
11:37 - Windows that's not what I'm referring to
11:38 - I'm referring to how operating systems
11:41 - actually work on a lower level now full
11:43 - disclosure this is a course that I have
11:45 - not taken I actually stopped school I'm
11:47 - kind of on a break right now from school
11:48 - I may or may not go back that's a that's
11:51 - a different video point being this of
11:52 - course I haven't taken so I just went
11:54 - and read kind of like the syllabus for
11:55 - this course and picked out some of the
11:57 - key points that I could discuss them
11:58 - with you because this is something that
12:00 - I really know nothing about anyways
12:02 - operating system something that most
12:03 - self-taught developers including myself
12:05 - probably will never learn so when I say
12:08 - that I'm talking about things like
12:09 - Process Management process scheduling
12:11 - concurrency CPU scheduling memory
12:14 - management virtual memory mask storage
12:17 - systems file systems input output
12:19 - devices how does an operating system
12:21 - work with all of this stuff what
12:24 - actually is an operating system how do
12:26 - you build a basic operating system those
12:28 - are all things that to my own knowledge
12:29 - are taught in this course and I'm not
12:31 - going to elaborate on them more because
12:32 - I really don't know what I'm talking
12:33 - about in this section point being most
12:35 - self-taught developers don't learn this
12:37 - so with that said I actually am going to
12:39 - end the video here I hope that this was
12:41 - somewhat insightful and at least maybe
12:43 - gave you some topics to consider
12:44 - learning personally I find learning
12:47 - anything like this is going to give you
12:49 - some value you know you can question how
12:51 - much value it is and if you should learn
12:52 - it or not but for me I don't regret
12:54 - taking any of these courses even though
12:56 - at the time they were a lot of work and
12:58 - a pain in the ass as I said previously
13:00 - but now after taking them I do have an
13:02 - appreciation for all the stuff that was
13:04 - taught there and I'm grateful that I was
13:06 - able to have the opportunity to learn
13:08 - anyways I hope you guys enjoyed the
13:10 - video if you did make sure to leave a
13:11 - like subscribe to the channel and I will
13:13 - see you in another one
13:14 - [Music]
13:21 - foreign

Cleaned transcript:

foreign so in today's video I'm going to share with you some topics that selftaught developers most likely will never learn and when I say selftaught developer I'm really talking about someone who hasn't gone through the traditional school system and just give you a bit of context here I myself have done two and a half years of a computer science degree I've done most of the mandatory computer science courses and I'm aware of the courses that I'm going to have to take in the future if I continue my computer science degree and I'm also pretty much selftaught with a lot of the other development skills that I have I started to learn to program well before I was in university and a lot of what I know I didn't learn in University so I gotta have a decent perspective here as someone who's been through school but also teaches themselves a lot of programming anyways with that said I will lastly mention here that there is a reason why a lot of developers don't learn these topics again I'm not trying to say you need to code and learn them a lot of them are relatively useful in a real job environment however I believe it's important to be aware of some gaps in your knowledge and hopefully this video will just show you some things that maybe you haven't considered before and you might want to learn anyways let's go ahead and get started after quick word from our sponsor before we get started I need to thank the sponsor of this video which is Alco expert algo expert is the best platform to use when preparing for your software engineering coding interviews and has the highest quality coding interview practice questions with 160 practice questions detailed Solutions and nine of the most popular programming languages a featurepacked browserbased coding environment extensive test Suites and conceptual overviews and code walkthroughs for each and every problem algo expert is the best resource to use to Ace your coding interviews algo expert also has a data structures crash course coding interview assessments and a mock interviews feature I can highly recommend algo expert as a former customer myself and now an official instructor on the platform get started using algo expert today by clicking the link in the description and using the code Tech with Tim for a discount on the platform alright so let's go ahead and and dive in now the first thing I'm going to clarify here is that a lot of the main topics I'm going to bring up are just the names of university courses that I've taken so what I've kind of done is gone and looked through all of the courses that I've taken and that I need to take in the future and thought about if I was a selftaught developer if I would have learned that content or even like a subset of that content so if it was a course where this is something pretty important and most developers already know this I obviously didn't include it here but if it's something like say math then I probably put it in this list because that's something that as a selftaught developer is not super important not a real practical skill and you don't really necessarily need to learn that to get a job anyways let's dive into topic number one that selftaught developers most likely will never learn and that is advanced mathematics and proofs now when I say advanced mathematics I'm really talking about University level mathematics and I'll go through kind of the main courses that I'm talking about here so the first one this is pretty obvious but calculus so personally in University I had to do calculus 1 and calculate list two these were actually pretty difficult courses so in these courses pretty much what we learned was integrals derivatives and a few applications of integrals and derivatives I haven't found these super useful in Computing in fact the only time I've ever had to use any of that knowledge is when I was looking at some Advanced machine learning kind of explanations so the math behind some machine learning models or machine learning techniques or artificial intelligence related stuff but other than that I've had pretty much no use for calculus in my life since then anyways moving on the next course that I'm kind of grouping in this advanced mathematics and proof section is going to be linear algebra now this is actually one that I would say is pretty important not simply because of the content that it teaches but because of the way it allows you to kind of think about math so linear algebra is a much different type of math than something like calculus or algebra in general like regular algebra with linear algebra you're doing threedimensional math you're working with matrices you're working with Vector spaces and just a very abstract field of math that I know to a lot of people who are in my course was very new and for me again I didn't find it crazy useful in my experience writing code or being a software engineer but it did help me kind of think about math and problems in a different way and that's why I found some value in it moving on the next two courses are ones that I actually hadn't even heard of until I went into University and this is discrete structures and discrete mathematics now discrete mathematics is kind of the first course and discrete structures is the second course and what you learn in this is actually very computer science relevant math so you're learning about proofs for specific algorithms you're learning about things like permutations combinations graph Theory set theory modular arithmetic and really a lot of the underlying math behind a lot of the principles and programming languages that you're using and behind a lot of very famous algorithms that solve problems so these courses I actually found super useful I wish I could recite more of what I learned in them but I'd recommend that if you haven't heard of discrete mathematics or discrete structures go and give it a Google search look at some you know syllabus or curriculum for it and just see all of the topics that it covers because they're pretty interesting and one of the cool things that's taught in these courses is actually how you prove the correctness of algorithms so how do you say that my algorithm 100 is going to be correct on any input and how do you do that using math that was probably the most interesting aspect also the most difficult aspect of this course alright so with that that pretty much wraps up this first section which is advanced mathematics and proofs again the reason I put it here is because why in the world would you go learn this unless you had to learn it or you're just a math geek I know I'm not and if I wasn't in school there's no chance I would have learned any of this on my free time alright so moving on to the next topic here I have digital systems and computer architecture now these were two separate courses that I took in University but I'm kind of clumping them together because digital systems was first and then computer architecture was second and what was taught in these courses was really how computer hardware works on a much lower level and specifically how a processor actually works so how you take say two numbers and add them in a computer so not like okay how do we look at two numbers and add them but how do wires and circuits and electricity actually allow you to perform computations now to me I found that super fascinating because I'm someone who's really into building computers and I like the hardware aspect as much as I like the software aspect and so to actually kind of get an insight into the lower level and be like oh this is how you know the memory of a computer is managed this is how I access some data at the data specific memory address this is what machine code looks like and this is how I take you know some commands and actually run them on an APU or a CPU that was really really fascinating so other things we learned in these courses was uh the different Gates that you would use in a digital system so an and gate and or gate a nor gate we learned about Boolean algebra so how you simplify Boolean expressions and a ton of other stuff it's been a long time since I've taken those courses these were very difficult courses is probably some of the hardest courses that I had to take but the knowledge that I learned in them was really valuable and I'm actually really glad that I got to take them because even though they were a pain in the ass back then right now I feel like I have a much much better understanding of how a computer works as a whole not just at the software and the code level but actually on the lower level Hardware level which is something that I like alright so moving on to the next topic we have programming paradigms now programming paradigms refers to the different styles of programming and every programming language that you write in implements specific programming paradigms so for example a language like Java this is an objectoriented programming language that's its Paradigm it implements that whereas a language like python implements both functional programming and object oriented programming and I think it implements something else as well but those are the two ones that I know for sure that it implements anyways the point is that most developers only ever learn a few programming languages and most of those programming languages are the same Paradigm so if you're learning languages like Java JavaScript python C plus plus but these all fit into kind of the similar or same Paradigm and you're writing code in a very similar style the way you solve a problem in Python is very similar to the way you solve it in Java the only difference is the syntax might change a bit there might be a few language features that kind of differ across the problems that yourself point being there's a bunch of other programming language paradigms as well that most programmers never look at for example imperative logical procedural there's a bunch of other ones I can't remember off of the top of my head but the way you write code in these languages is completely different from the way you write them in your kind of traditional modern languages now do you really need to know these paradigms probably not they're probably not going to be useful to you in your job but for me when I had to write code and say an imperative style I actually became a better programmer because I had to stop relying on a lot of the kind of language features I had in a language like Python and really think hard about how I'm going to use the bare minimum amount of features to solve this problem for example I had to work in a language called ocamel now I'm not very knowledgeable on ocamel it's just what I did in the course but when we were in the course we were never introduced to a loop so there's no for Loop or while loop or anything like that if we wanted to Loop over something we need to use recursion so we had to have a recursive function if we just wanted to say look at every element of a list we had all kinds of nested functions higher order functions and all kinds of crazy random stuff I'm actually going to talk about in the next section but the point is go and look up programming paradigms and look at some of the paradigms you've never seen before and just have a look at those languages because they're very cool and if you can learn even just a tiny bit of a different Paradigm in my opinion it makes you a better programmer and gives you kind of an appreciation for a lot of the features that you might use in your modern programming language that you just you know assume are always going to be there anyways let's move on to the next topic alright so moving on to the next topic I have programming language Concepts now this was a specific course that I took in University as well this is the one that I had to write ocamel code in as I was mentioning in the previous section and in this course we learned some very Advanced programming language Concepts and when I say that I literally am talking about the different ways in which programming languages are implemented how you know memory is handled how execution occurs in a language and a lot of very low level things also how to create you know multiple threads distributive programming multiprocessing multithreading a lot of stuff like that was taught in this course and one of the cooler things that we learned was higher order programming and higher order functions which means having you know a bunch of nested functions inside of each other we're having a function that returns another function and then we're talking about things like closures and I'm just rattling off a ton of things that I remember learning in this course the point being this course actually taught us about the design of a programming language as a whole and how you pick what features should be in a programming language and what kind of pros and cons you get or what you know advantages and drawbacks you get from different implementations of programming language features so I feel like I'm just completely rambling in this section again I don't remember a ton of this stuff I learned this a while ago but this was something that I learned in University that I thought was useful and worth a mention in this video anyways let's move on to the next topic alright so the next and last topic I have on my list view here is operating systems now when I say operating systems I'm not just talking about you know Linux Mac Windows that's not what I'm referring to I'm referring to how operating systems actually work on a lower level now full disclosure this is a course that I have not taken I actually stopped school I'm kind of on a break right now from school I may or may not go back that's a that's a different video point being this of course I haven't taken so I just went and read kind of like the syllabus for this course and picked out some of the key points that I could discuss them with you because this is something that I really know nothing about anyways operating system something that most selftaught developers including myself probably will never learn so when I say that I'm talking about things like Process Management process scheduling concurrency CPU scheduling memory management virtual memory mask storage systems file systems input output devices how does an operating system work with all of this stuff what actually is an operating system how do you build a basic operating system those are all things that to my own knowledge are taught in this course and I'm not going to elaborate on them more because I really don't know what I'm talking about in this section point being most selftaught developers don't learn this so with that said I actually am going to end the video here I hope that this was somewhat insightful and at least maybe gave you some topics to consider learning personally I find learning anything like this is going to give you some value you know you can question how much value it is and if you should learn it or not but for me I don't regret taking any of these courses even though at the time they were a lot of work and a pain in the ass as I said previously but now after taking them I do have an appreciation for all the stuff that was taught there and I'm grateful that I was able to have the opportunity to learn anyways I hope you guys enjoyed the video if you did make sure to leave a like subscribe to the channel and I will see you in another one foreign
