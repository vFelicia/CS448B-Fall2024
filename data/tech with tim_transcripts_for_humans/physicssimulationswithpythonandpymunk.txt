With timestamps:

00:02 - [Music]
00:08 - in this video i'll be giving you an
00:10 - introduction to the module known as pi
00:12 - monk and showing you how we can use it
00:13 - to perform physics simulations now this
00:16 - is a great module it's really easy to
00:18 - use and you can do a ton of powerful
00:20 - stuff with it and so i'm going to go
00:21 - through a few demos right now just to
00:23 - explain and show what the module is
00:25 - capable of then i will go through a
00:27 - tutorial where we actually build out a
00:28 - project using pie monk anyways let's
00:31 - have a look at this one right here so i
00:33 - can actually use a camera in pi monk and
00:35 - kind of move this around
00:37 - and view different objects obviously
00:38 - some objects are falling off the screen
00:40 - i could say rotate the camera okay
00:42 - that's the first demo i wanted to show
00:44 - you these are all just demos that were
00:46 - provided by pi bunk so let me walk
00:47 - through a bunch of them really quickly
00:49 - uh here's another one that's kind of
00:50 - like a flipper game
00:52 - so i can spawn in balls and i can kind
00:54 - of flip them around and the great thing
00:56 - here is that you don't have to
00:57 - understand or implement these physics on
00:59 - your own you just place objects onto the
01:01 - screen and then control how you want to
01:03 - move them and then all of the physics
01:04 - will be implemented for you so you don't
01:06 - need to be great at physics to actually
01:07 - use this uh here's another demo let's
01:10 - have a look at what this one is you can
01:12 - see that we can have kind of like a
01:13 - pivoting i don't even know you would
01:15 - call this platform rolling balls on here
01:18 - okay pretty straightforward
01:20 - let's go to this one
01:22 - this one is actually a playground and
01:24 - what this lets me do is kind of create
01:26 - my own object so i can click here to
01:28 - create different objects i can actually
01:30 - draw an object like this if i want to
01:33 - maybe i'll draw it like a big square
01:35 - okay that's this demo another one we
01:38 - could make like a platformer game using
01:40 - this so let's have a look here you can
01:42 - see that i can move this thing around
01:44 - jump up i can actually double jump if i
01:46 - hit this twice
01:47 - again just want to go through some quick
01:49 - demos and illustrate to you kind of the
01:50 - power of this module
01:52 - continuing let's have a look at like a
01:54 - planet or satellite simulation
01:56 - so let me run this one okay we can see
01:58 - there's a bunch of satellites or planets
02:00 - that are revolving around the sun very
02:03 - nice
02:03 - and then lastly this is what we're
02:05 - actually going to build out i think this
02:07 - is cooler than the demos that they had
02:09 - anyways let's look at this okay so here
02:11 - you can see that i have kind of this
02:12 - swinging pendulum it's not really a
02:14 - pendulum what i can do is place a ball
02:17 - and i can actually launch the ball and
02:19 - destroy stuff so this is what we're
02:20 - going to be building out i'm going to
02:22 - teach you how to build this it is not
02:23 - very complicated again because all of
02:25 - the physics will be done for us let's
02:27 - just hit this
02:29 - very nice so with all of that said
02:30 - hopefully you guys are excited now let's
02:32 - go ahead and get into the tutorial after
02:34 - a quick word from our sponsor before we
02:37 - dive in i need to thank ltm designer for
02:39 - sponsoring this video
02:41 - ltm designer is the world's most trusted
02:43 - pcb design system that enables engineers
02:45 - to effortlessly connect with every facet
02:48 - of the electronics design process
02:50 - ltm designer has used 35 years of
02:52 - innovation and development to create a
02:54 - truly unifying design environment that
02:56 - makes it the most used pcb design
02:59 - solution on the market ltm designer
03:01 - provides an intuitive and powerful
03:03 - interface that lets you design pcbs
03:05 - rapidly while interacting and
03:06 - collaborating with your mechanical
03:08 - designers the interface provides a photo
03:10 - realistic 3d environment collaboration
03:13 - and synchronization with tools including
03:15 - solidworks ptc creo and autodesk
03:18 - inventor realistic rigid flex designs
03:21 - multi-board assembly and much more ltm
03:24 - designer is the most popular ecad tool
03:26 - and electronics design software and you
03:29 - can get started with it today for free
03:31 - by pressing the link in the description
03:33 - and registering for a free trial thanks
03:35 - again to ltm designer for sponsoring
03:37 - this video and now let's dive in alright
03:40 - so let's start getting into this
03:41 - tutorial i will mention that this is not
03:43 - designed for complete beginners you do
03:45 - have to understand python to be able to
03:47 - follow along with this and if you don't
03:48 - know python or you want to get better at
03:50 - programming then you can check out my
03:51 - course programming expert dot io you can
03:54 - use code tim for a discount i will leave
03:56 - that in the description anyways as you
03:58 - saw we are going to build the project
04:00 - where we can launch that ball around the
04:01 - screen have it collide with different
04:03 - objects and essentially just destroy
04:05 - whatever structures it is that we make
04:07 - the way i'm coding this is going to be
04:09 - really easy for you to add other objects
04:11 - there and you can kind of customize it
04:12 - however you like but this will be a
04:14 - really good starter project for this
04:15 - module now i do want to mention that i'm
04:17 - not an absolute pro with this module so
04:20 - there may be a few things that i
04:21 - explained that are slightly different
04:22 - than from the documentation so if you
04:24 - really want to know everything that's
04:26 - possible with this module then please do
04:28 - check out the documentation i will leave
04:30 - that in the description
04:31 - okay so the first thing we need to do
04:32 - here to get started is install the
04:34 - module so open up your command prompt
04:36 - open up your terminal if you're on linux
04:38 - or mac
04:39 - and type in the following command pip
04:42 - install and then pimonk
04:44 - okay and then it's going to install it
04:46 - and then if we want to be able to draw
04:48 - the simulation we need to either use pi
04:50 - glit or a use pie game so i'm going to
04:52 - use pie game because that's the one that
04:54 - i know best so pip install pie game so
04:56 - pie game will actually handle all of the
04:58 - graphics and then all of the physics and
05:00 - simulator type stuff will be handled by
05:03 - pie monk okay now for some reason those
05:05 - commands do not work i will leave two
05:06 - commands or sorry two videos on the
05:08 - screen and in the description that will
05:10 - show you how to fix this for mac and for
05:12 - windows but you can try the command pip3
05:15 - install pygame and pymonk and you can
05:17 - also try this command this one works for
05:19 - a lot of people python hyphen m pip
05:22 - install or python 3 hyphen m pip install
05:25 - okay at this point i'm going to assume
05:27 - you have those modules installed now we
05:29 - are going to import them
05:31 - so i've just opened up a file here in
05:32 - the sublime text feel free to open this
05:34 - wherever you'd like just call it
05:36 - tutorial.pi doesn't really matter where
05:38 - you code this i'm gonna say import
05:41 - pi game i'm going to say import and then
05:44 - pi monk and then i'm going to import we
05:47 - want the math module
05:49 - and i'm going to import pie monk dot and
05:52 - then this is going to be i think it is
05:55 - pie game underscore util let me have a
05:58 - look here at my cheat sheet yes it is so
06:00 - the reason we need this is because we
06:01 - want to set
06:02 - pie monk up to use pie game to draw so
06:05 - that's what this import is going to be
06:07 - for here okay now that we have that i'm
06:09 - going to say pygame dot init just to
06:11 - initialize it and the first thing i want
06:13 - to do is set up a pi game window that
06:15 - i'm going to draw all of the simulation
06:17 - stuff onto so i'm just going to say
06:19 - width height is equal to and i'm going
06:21 - to make mine a thousand width and 800
06:23 - height now i have a large display so
06:25 - i'll be able to see this for some of you
06:27 - it might be a little bit too big so you
06:29 - can adjust these numbers to be whatever
06:30 - you want and then i'm going to say
06:33 - my window is equal to pygame
06:36 - dot
06:37 - display dot set underscore mode and then
06:40 - inside of a tuple here i need to pass
06:43 - the width and the height
06:44 - okay so now we have a pi game window now
06:47 - that we have the pi game window i just
06:49 - want to set up what's known as our main
06:50 - event loop which is just going to
06:52 - display the pi game window and we're
06:54 - going to use pi monk to actually render
06:57 - all of our stuff so i'll show you how it
06:58 - works i'll just bear with me for kind of
07:00 - the setup steps here in our code so i'm
07:02 - going to make a function i'm going to
07:03 - call this run
07:05 - and inside of here i'm going to take a
07:06 - window i'm going to take a width and i'm
07:09 - going to take a height now i'm going to
07:11 - make a variable i'm going to say run is
07:13 - equal to true and i'm going to make
07:14 - something called a clock and what a
07:16 - clock is going to do is make it so that
07:18 - our main game loop is going to run at a
07:20 - certain speed we'll see this in one
07:21 - second but for now i'm going to say pi
07:23 - game dot time dot clock
07:26 - and then i'm going to put a while loop
07:27 - here and i'm going to say wow and then
07:29 - the variable run so while that variable
07:31 - is true we're going to do this and
07:32 - inside of here i'm going to say clock
07:34 - dot tick and i'm going to make another
07:36 - variable here called fps and i'm going
07:39 - to make this equal to 60.
07:41 - and then inside of here i'm going to say
07:42 - clock.tick and then fps
07:45 - so what this does is make it so this
07:46 - while loop here can run a maximum of 60
07:49 - frames per second so that's what the
07:51 - clock is doing just regulating the speed
07:53 - so it's not going to run variably based
07:55 - on the other things on your computer and
07:57 - the speed of your processing cores so if
07:59 - i didn't have this clock.tick here then
08:02 - your simulation would be a very
08:03 - different speed than my simulation
08:05 - because it would depend on the speed of
08:06 - the processor and how quickly this while
08:08 - loop could be ran by your computer
08:10 - alright so now that we have this i'm
08:12 - just going to set up an event checking
08:14 - loop now what this is going to do is
08:15 - just loop through all of the events that
08:17 - are occurring in our pi game or in our
08:19 - pi monk simulation and essentially allow
08:21 - us to close the window when we hit the x
08:23 - button so you'll see what i mean in a
08:25 - second but i'm going to say for event in
08:27 - pi game and then this will be dot event
08:31 - dot get
08:32 - i'm going to say if event
08:34 - dot
08:35 - type is equal to
08:38 - pi game
08:39 - dot and then in all capitals quit what
08:42 - i'm going to do is say run
08:44 - is equal to false
08:45 - and then i'm going to break out of this
08:47 - while loop or break out of this for loop
08:48 - sorry and what this will do is make it
08:50 - so we're no longer going to run the wall
08:51 - so essentially we're looping through all
08:53 - of the events that are occurring in pi
08:55 - games this will give us any mouse button
08:57 - presses any keyboard presses when we
08:59 - move the mouse all that type of stuff as
09:01 - well as if we hit the quit button on our
09:03 - window if we do that we want to quit the
09:05 - game so we're going to say run equals
09:07 - false and then break and then down here
09:09 - outside of the wall loop i'm just going
09:10 - to say pie game dot quit and what this
09:12 - will do is just quit pie game for us
09:14 - okay now i want to call this run
09:16 - function we need to add a few more
09:17 - things to it but for now i'm going to
09:19 - say if underscore underscore name is
09:21 - equal to underscore underscore main
09:23 - underscore underscore then i want to
09:25 - call run and i'm going to pass the
09:27 - window
09:28 - the width
09:29 - and the height to this function okay
09:32 - so just a few more things here for the
09:34 - setup before i can actually start
09:35 - running the application and talking more
09:36 - about pie monk now i want to make a pie
09:39 - pie monk space
09:41 - so with pie monk we have this thing
09:43 - called space so what i can do is say
09:45 - space is equal to
09:46 - pie monk dot space
09:49 - and the space is where we're going to
09:50 - put all of our objects so what's going
09:52 - to happen is we're going to draw
09:54 - whatever is in this space we can have
09:55 - multiple spaces but in this case we're
09:57 - just going to have one space we place
09:59 - all of our different pie monk objects so
10:01 - rectangles circles polygons
10:04 - whatever different points that we have
10:06 - the ball that's going to be moving
10:08 - around the screen all of those go in the
10:09 - space then pie monk will do a simulation
10:12 - within the space between all of the
10:13 - different objects it will handle the
10:15 - collision of the objects for us it will
10:17 - handle the objects moving around the
10:19 - screen it will handle applying force to
10:21 - the objects and gravity and all that
10:22 - type of stuff so we don't have to do any
10:24 - of that which is really nice
10:26 - okay so then we're going to say space
10:29 - dot gravity and this is going to be
10:31 - equal to a tuple and we have to give a
10:33 - gravity for both the x direction and the
10:35 - y direction so let's say we want to
10:37 - simulate being on mars or something or
10:39 - being on a really weird planet i don't
10:40 - know if any planets have a gravity that
10:42 - is going in the x direction but you know
10:44 - what i mean i could set the gravity to
10:45 - be whatever i want and we would be
10:47 - pushed either you know in an x direction
10:49 - or y direction based on the the
10:51 - acceleration that i put here so what i'm
10:53 - going to do is put 0 and then negative
10:56 - 981.
10:58 - now i could do 9.81 but that's going to
11:00 - be really slow for my simulation so when
11:02 - i do negative 981 this is just
11:05 - simulating gravity right now as you're
11:07 - going to see here in this simulation we
11:09 - don't have to do all completely real
11:12 - values and all of the units that we pass
11:14 - to the simulation are going to be
11:15 - completely up to us so pi monk is a
11:18 - unitless module or unitless library and
11:21 - what that means is that we essentially
11:23 - decide what all of the units are going
11:24 - to be as opposed to passing grams or
11:26 - kilograms or meters per second or meters
11:29 - per second squared or whatever the
11:30 - different physics units would be we just
11:32 - come up with whatever we want and we
11:34 - just pass the value to pi muck so here
11:36 - i'm passing 981 you can interpret that
11:39 - however you want but that's going to be
11:40 - my gravity and i actually want to make
11:42 - this positive because in pie game as we
11:45 - go down the screen the y increases and
11:47 - so i want my gravity to pull me down as
11:49 - opposed to moving me up which would be
11:51 - what i get if i have negative 981. i'll
11:54 - continue to explain all the position and
11:56 - coordinates later on but that is the
11:58 - gravity so now that we have this what i
12:00 - need to do is set up some drawing
12:02 - options for my space so by default the
12:05 - simulation here in pi monk it doesn't
12:07 - draw anything it just does the
12:09 - simulation and then allows us to get the
12:11 - the information about different bodies
12:13 - or different objects that we have so you
12:16 - don't always want to draw it right but
12:17 - sometimes in our case we do want to draw
12:19 - it so i need to set up my draw options
12:21 - so i'm going to say draw options is
12:23 - equal to and then this is going to be
12:26 - pi monk dot and then pi game underscore
12:30 - util
12:31 - dot and then draw
12:32 - and then options like that and what i
12:35 - need to pass here is the window of pie
12:37 - game that i want to use to draw my
12:39 - simulation onto so i'm going to set my
12:41 - draw options equal to pi monk dot py
12:43 - game util.draw options and then i pass
12:46 - the window and that's now where my
12:47 - simulation is going to be drawn however
12:50 - it's not drawn unless i manually draw it
12:52 - so what i'm going to do is make a draw
12:53 - function here
12:55 - i'm going to say define draw this is
12:57 - going to take in my space and it's going
12:59 - to take in my window and the first thing
13:01 - i'm going to do is i'm going to clear my
13:03 - window and the way i clear that is just
13:05 - by drawing a color onto the screen and
13:07 - filling the entire screen with it so i'm
13:09 - going to say window dot fill
13:12 - i'm going to fill this with white and
13:13 - then on the next line i'm going to say
13:15 - space dot and this is going to be debug
13:18 - underscore draw
13:20 - and i'm going to pass to this actually
13:22 - sorry i need to pass my draw options so
13:24 - i'll take in my space i'll take in my
13:25 - window and i will also take in my draw
13:28 - options like that so i'll say draw
13:32 - options okay so this will draw the
13:34 - simulation for me that's really all we
13:36 - need right now and then if we wanted to
13:37 - draw anything else onto the window we
13:39 - could do that inside of here uh not from
13:41 - the space we could just draw that using
13:43 - the regular pi game draw methods if
13:45 - you're familiar with those okay now that
13:47 - we have this though i just need to call
13:49 - the draw function so i'm going to say
13:50 - clock.tick fps
13:53 - and then right before i do that i'm
13:54 - going to say draw i'm going to pass my
13:56 - window i'm going to pass my space and i
13:58 - want to pass my draw options so i'll
14:00 - pass those like that nice okay last
14:03 - thing i want to do here
14:05 - after my draw
14:06 - is i want to say space
14:08 - dot step
14:09 - and i need to step this by a certain
14:11 - amount now what this step is is very
14:13 - similar to this clock.tick but
14:15 - essentially it says how fast my
14:17 - simulation should go so in this case
14:20 - since i'm rendering 60 frames per second
14:23 - and i want the unit that i pass here to
14:25 - be in seconds i'm going to say okay well
14:27 - i want to step this by 1 60 of a second
14:30 - every single time i run this while loop
14:32 - so what i'm going to do
14:34 - say dt
14:35 - standing for delta time or difference in
14:37 - time is going to be equal to 1 divided
14:40 - by the fps
14:41 - so whatever i set the fps to i want my
14:44 - displacement to be or not displacement
14:45 - uh difference in time delta time
14:47 - whatever to be 1 over fps so i'm
14:50 - stepping every single loop my simulation
14:52 - forward by
14:54 - 1 over the fps you know seconds right
14:56 - hopefully that makes sense excuse me
14:58 - just need to clear my throat there okay
15:00 - so space dot step
15:02 - displacement time i keep saying
15:03 - displacement time delta time and that
15:06 - will actually step the simulation
15:07 - forward now i know we've just written a
15:09 - lot of code we haven't tested anything
15:10 - yet we also don't have any bodies on the
15:12 - screen but let's just run the code and
15:14 - see if we're getting any errors and then
15:16 - we'll continue and actually place a body
15:18 - into our space and watch how gravity
15:20 - pulls it downwards so let's run this
15:23 - and we got an issue it says space object
15:25 - has no attribute fill okay my apologies
15:28 - ah so we the issue here is we have this
15:30 - draw function and we have space and
15:32 - window but i passed window and space
15:36 - so i need to pass this in the other way
15:38 - space window just my order is correct
15:40 - okay let's rerun this
15:42 - and what's going on here okay so we
15:45 - don't get any errors but notice here
15:47 - that i'm filling my screen with white
15:49 - but we're not actually seeing that go on
15:51 - the screen the reason for that is i
15:52 - haven't updated the display so i'm going
15:54 - to say pie game dot display dot update
15:59 - so now when i do this
16:00 - we should see that we get a white screen
16:02 - and we do there we go we have set up
16:04 - kind of the basics of our application we
16:06 - now have stuff being drawn onto the
16:07 - screen or at least we have a white
16:08 - background now we want to actually use
16:11 - pi monk to add an object to the screen
16:13 - and then watch how gravity pulls it
16:15 - downwards
16:16 - so let's make another function here
16:18 - let's say define add and let's just go
16:20 - with object for now and let's take in
16:23 - space in here and let's add an object to
16:25 - our screen and then watch it move around
16:27 - so in pi monk we have what's known as a
16:30 - body now a body is a rigid body from
16:33 - physics if you're familiar with that and
16:35 - we also have what's known as a polygon
16:37 - or a kind of a shape so we have a body
16:39 - and then we have a shape
16:41 - now in pie monk what we do is we
16:43 - separate the collision and kind of the
16:45 - physics of an object from its
16:47 - representation on the screen so we may
16:50 - have an image that we display and that
16:52 - image will be linked to a specific body
16:54 - but all of the calculations and
16:56 - computations that we're doing are
16:58 - related to the body now i know this is a
17:00 - little bit confusing but we have the
17:01 - image and we have the body the image is
17:04 - attached to the body but we do
17:06 - everything on the body so that way the
17:08 - image that we show can be slightly
17:10 - different than what the actual body is
17:12 - so if you're familiar with like fps
17:14 - games or anything where there's a like a
17:17 - hitbox involved in it that's kind of
17:19 - what the point of this is here we have
17:20 - like the underlying hitbox and then we
17:22 - have the image that we put on top of it
17:24 - and so we'll make the underlying hitbox
17:26 - usually simpler and then the image will
17:28 - be more complicated so if you're
17:30 - familiar with you know any video games
17:32 - you've probably seen this before where
17:34 - maybe you shoot someone and if you shoot
17:35 - like on the very very edge of the actual
17:37 - sprite that's being drawn on the screen
17:39 - it doesn't say that it hit them because
17:41 - it didn't hit the underlying body or the
17:42 - underlying hitbox so i just wanted to
17:44 - explain that before i start coding this
17:46 - out but for now let's create a body so
17:48 - i'm going to say body is equal to
17:51 - and then this is going to be pi monk dot
17:53 - and it's going to be body like this and
17:56 - for our body i don't need to pass
17:57 - anything inside of here i just
17:58 - initialize a body but what i will do is
18:01 - set its position so i'm going to say the
18:02 - body dot position and then i pass a
18:05 - tuple which is the x y of the center of
18:08 - the body on the screen so if i want the
18:10 - center of this body to be at say 300 300
18:14 - then i pass that now as i said in pi
18:16 - game actually let me run this here so i
18:18 - can explain this
18:19 - the top left hand corner so 0 0 is right
18:22 - here so 0 0 is the top left hand corner
18:25 - which means if i go to the right my x is
18:27 - increasing so over here would be the
18:30 - width and then zero and then the bottom
18:32 - right hand corner would be the width and
18:33 - the height that would be the position
18:35 - and then the middle of the screen will
18:36 - be width over two height over two as
18:38 - opposed to being zero zero i know many
18:40 - people are familiar with the middle of
18:41 - the screen being zero zero not the case
18:43 - in pi game the top left is zero zero so
18:46 - that means when i'm drawing at 300 300
18:48 - i'll be drawing like kind of close to
18:49 - where my mouse is here um
18:52 - yeah that's that's where i'll be drawing
18:53 - okay so we set the position to be 300
18:56 - 300
18:57 - then what i need to do is actually have
18:59 - a shape that i'm going to draw with this
19:02 - body and i need to attach this shape or
19:04 - this polygon to the body so let's go
19:06 - here and say shape is equal to and then
19:09 - this is going to be pie monk dot and
19:11 - then circle and i want to pass to this a
19:14 - body
19:15 - as well as a radius
19:17 - so let's actually change this function
19:19 - here i'm going to change this to say
19:21 - create
19:22 - ball okay we'll take in the space
19:25 - we'll take in a radius and we'll take in
19:27 - a mass for now so the radius will be
19:28 - past this function so we'll just use it
19:30 - here
19:31 - and then once i've done this
19:33 - what i want to do is set the mass of
19:34 - this object now we need to have the mass
19:36 - because we're going to be moving this on
19:38 - the screen and well to apply gravity to
19:40 - it needs some mass so we'll set the mass
19:42 - equal to whatever mass it is that was uh
19:44 - sent in
19:45 - and then if i want to change the color
19:46 - of this shape i can say the shape.color
19:49 - is equal to and then i have to pass an
19:51 - rgba value so that's red green blue
19:54 - alpha so for now if i want the ball to
19:55 - be say red
19:57 - i would do 255 0 0 and then 100. so the
20:00 - last argument here is between 0 and 100
20:03 - it's the alpha or the opacity or
20:05 - transparency whatever you want to call
20:07 - it of this object so if i made it 50
20:09 - then it would be 50 transparent when i
20:11 - make it 100 it's completely opaque and
20:13 - so we can't see through it
20:15 - okay so now that we have that
20:16 - what i need to do lastly is say
20:18 - shape.add and i need to add both the
20:20 - body as well as the shape to the
20:22 - simulation so i'm going to say body
20:25 - and shape like that and then what i can
20:27 - do here is i can simply return the shape
20:30 - okay so i know i just went through a lot
20:32 - here again all we're doing is we're
20:34 - creating a body we're creating a shape
20:36 - that's going to be for that body then
20:39 - we're setting the mask we're setting the
20:40 - color and then i need to add both of
20:42 - these things into the pie mug simulation
20:44 - so now they can be moved around i can't
20:46 - just add the shape if i were to do that
20:48 - it's not going to work because what is
20:50 - it attached to well what it's attached
20:52 - to isn't now in the simulation however i
20:54 - could add the body without adding the
20:56 - shape if i wanted to
20:58 - anyways the point is i need to add both
20:59 - the body and the shape here to the
21:01 - simulation for this to work properly and
21:03 - they'll be kind of attached to each
21:04 - other okay so let's now run this so what
21:07 - i want to do is say
21:10 - let's go here ball is equal to and then
21:12 - this is going to be create ball and
21:14 - we'll say space and then not the width
21:16 - and the height i need to pass a mass as
21:18 - well as a radius and i think the radius
21:20 - is first so let's pass a radius of like
21:22 - 30
21:23 - and a mass of say 10. now again treat
21:26 - these units as whatever you want we
21:28 - could say this is like 10 kilograms
21:30 - whatever it doesn't really matter what
21:31 - you want to say it is okay so now that
21:33 - we have that it should just be added to
21:35 - the simulation and we should see when we
21:37 - start drawing it actually shows up on
21:38 - the screen so let's run this
21:40 - and notice that we have a ball and just
21:42 - instantly starts falling because of
21:44 - gravity right awesome that is what we
21:46 - wanted everything is working great
21:48 - okay so now that we have created a ball
21:50 - the next thing i want to do is create
21:52 - some boundaries on the screen so the
21:53 - ball can't just fall through right now
21:56 - the thing here is that the objects that
21:57 - we currently have and that we place on
21:59 - the screen they're going to have gravity
22:01 - applied to them because they're not
22:02 - static they are dynamic objects or they
22:04 - are dynamic bodies so for these
22:06 - different bodies here we have an option
22:08 - to either have a dynamic body or a
22:10 - static body i think there's another
22:11 - option as well but those are the two
22:12 - main ones so now we want to create some
22:14 - static objects that are not going to
22:16 - move and just are going to be kind of
22:18 - walls and floors for the simulation so
22:20 - then objects can't kind of fall through
22:22 - right so let's figure out how to do that
22:24 - now let's write a function let's say
22:26 - create
22:27 - and then boundaries and inside of here
22:30 - i'll just take space
22:31 - i'm going to take the width and the
22:33 - height of the screen because i'll draw
22:34 - these dynamically based on what that
22:36 - width and height is so i'm going to
22:37 - start by making a list here i'm going to
22:39 - say rex or rectangle is equal to a list
22:42 - and here i'm going to define all of the
22:44 - different rectangles that i want to draw
22:46 - onto the screen and then we'll use a for
22:47 - loop to loop through all of them and
22:49 - draw them rather than writing out the
22:50 - draw command four times in a row which
22:52 - would be a lot of unnecessary code so
22:54 - for a rectangle in pie monk you simply
22:56 - need an x and y position of the center
22:58 - of the rectangle and then you need the
23:01 - width and the height of that rectangle
23:03 - so i'm going to pass a list here i'm
23:05 - going to put a list here and then for
23:06 - the width and the height again this is
23:08 - the center of the rectangle
23:10 - so the first one i'm going to do is
23:11 - going to be width over 2
23:13 - and then this will actually be height
23:17 - minus and then i'm going to make the the
23:19 - height of my rectangle be 20 units so
23:22 - i'm going to subtract 10 here to make
23:24 - sure that we are perfectly flush at the
23:26 - bottom of the screen so then the next
23:28 - thing i'm going to pass is the size of
23:29 - the rectangle so i want the size to be
23:31 - the entire width of the screen and i
23:34 - want the height of the rectangle to be
23:35 - 20.
23:36 - so again we want to pass the center of
23:38 - the rectangle so if i want this to be
23:40 - directly in the middle of the screen i
23:41 - pass width over 2 for the center of the
23:43 - rectangle and then i want this to be
23:44 - right at the bottom of the screen and i
23:46 - want to have a height of 20. so since i
23:48 - want to have a height of 20 i pass
23:49 - height minus 1 because as we go down we
23:52 - increase in y so we take the height
23:54 - which will be 800 we subtract 10 so
23:56 - we're going to place this at 790 the
23:58 - middle of the rectangle meaning that
24:00 - this 20 height right here will take up
24:02 - the entire bottom aspect of the screen
24:04 - none of it will be off of the screen
24:07 - okay so that's what we're going to have
24:08 - for the floor
24:09 - then we want to have the ceiling so for
24:11 - the ceiling this will be the same thing
24:13 - except it's just going to be 10 for the
24:15 - y
24:16 - and actually we don't need to change
24:18 - anything here so we just change the y
24:19 - translate it all the way up on the
24:21 - screen so now it's at 10 as opposed to
24:23 - height minus 10.
24:24 - now that we have that we want to have
24:25 - the walls so let's copy this and
24:28 - actually let's paste it twice now the
24:30 - walls will be slightly different the
24:32 - first wall we're going to want to place
24:33 - at position 10
24:35 - and then we're going to have this be at
24:36 - height
24:37 - over 2.
24:39 - actually i think that's correct yeah
24:41 - height over 2. then we're going to have
24:42 - the width b20
24:44 - i'm gonna have the height be equal to
24:46 - height and then for the next wall this
24:49 - is going to be at height
24:50 - or sorry not height width minus 10 and
24:54 - then this will be again
24:55 - height divided by two and then it will
24:58 - be 20
25:01 - and
25:01 - height okay so let's explain why i did
25:04 - this so for the x coordinate we want
25:06 - this to be to the furthest left possible
25:08 - so we're going to put 10 because the
25:10 - width is 20 so that means the middle
25:12 - will have it perfectly lined up with the
25:13 - left hand side of the screen and then
25:15 - for the height of this i need to pass
25:16 - the center of the rectangle for the
25:18 - height so i'm passing height over two
25:20 - that's going to be perfectly in the
25:21 - middle of the screen
25:22 - and then i want to have the width of 20
25:24 - and the height of height and then the
25:25 - same thing pretty much applies here with
25:27 - the width minus 10 like it did with our
25:29 - height minus 10. okay so now we have all
25:30 - of our rectangles so we want to draw
25:32 - them so i'm going to say 4 and then i'm
25:34 - going to say that this will be the
25:36 - position and the size in and then rex
25:40 - and then that will give me each one of
25:42 - these elements as i loop through okay
25:45 - and i need to make a body as well as a
25:47 - shape for this body so i'm going to say
25:49 - my body is equal to and then this is
25:51 - going to be
25:52 - pie monk
25:54 - dot and what will we do here and this
25:57 - will be body
25:58 - except this time i don't want the body
26:00 - to move so i have to make it a static
26:02 - body so i'm going to say my body type is
26:05 - equal to and then this is going to be pi
26:07 - monk
26:08 - dot and then body dot
26:11 - and then static like that so that means
26:13 - it's not going to move now that i have
26:15 - that body what i can do is put the
26:16 - positions i'm going to say body dot and
26:18 - then position
26:20 - is equal to my position and then i want
26:22 - to make a rectangle that i'm actually
26:23 - going to show on the screen for this
26:25 - body so the way i do that is i say my
26:27 - shape or i could say my polygon or my
26:29 - rectangle whatever i want to call let's
26:30 - go with shape is going to be equal to
26:32 - pie monk dot poly
26:35 - dot and i'm going to use this method
26:37 - here called create box and what create
26:39 - box will do is it will take in the body
26:42 - that i want this to be associated with
26:43 - or attached to as well as the size
26:47 - now i will also mention here that you
26:49 - can make some more complicated objects
26:51 - where you define this body and then you
26:53 - have multiple shapes or multiple
26:55 - polygons that you put onto the same body
26:58 - so just keep that in mind you can do
26:59 - that if you want to you can make some
27:01 - really cool and advanced shapes and
27:02 - we'll look at that when we actually
27:04 - create kind of that pendulum that has
27:05 - the circle as well as that line segment
27:07 - that's attached to that uh i don't even
27:09 - know you would call it like elastic or
27:11 - rope or whatever you want to say it is
27:13 - anyways now that we've done that all we
27:15 - actually need to do is just add this
27:17 - shape to our space so we're going to say
27:19 - space.add and we're going to add the
27:21 - body
27:22 - as well as the shape
27:25 - okay there we go
27:26 - all right so now we have created the
27:28 - boundaries again we make our body we set
27:30 - the position of the body then we make
27:31 - this shape the shape is attached to the
27:33 - body all right so now that we've added
27:35 - this we should be able to just call this
27:36 - function and actually see all of our
27:38 - boundaries on the screen so let's call
27:40 - this right after we make our ball so
27:42 - let's say create and then boundaries
27:45 - like that and what do i need to pass
27:47 - here i need to pass the space and the
27:49 - width and the height
27:51 - so let's pass space
27:53 - width and height and let's run the code
27:56 - and see what we get
27:58 - okay so notice now that my ball is going
28:00 - to stop because well it hit a floor and
28:02 - these are all our static bodies that are
28:04 - sitting around that are not being
28:05 - affected by gravity now just for
28:07 - experimental purposes here
28:09 - let's see what happens if i remove the
28:11 - static type
28:13 - so if i remove static here i do need to
28:15 - add a mass either to the body or to the
28:17 - shape so i'm going to say the shape dot
28:19 - mass is equal to 10
28:21 - just so i don't get a crash but let's
28:23 - run this now
28:24 - and you'll notice that all of these are
28:26 - going to fall right because they are not
28:27 - stacked
28:28 - so let's go back to static i just wanted
28:30 - to prove to you this does indeed make it
28:32 - so they stay still
28:33 - alright so now that we've done that
28:35 - let's run this one more time and notice
28:37 - what happens when the ball hits the
28:38 - ground
28:39 - it just stops completely it doesn't
28:41 - bounce it doesn't roll now why is that
28:43 - happening well the reason that's
28:45 - happening is because there's no
28:46 - elasticity between the ball and between
28:49 - the floor so what i can actually do is
28:51 - add a property to both the ball as well
28:53 - as the floor called elasticity and that
28:56 - in this context here is going to relate
28:58 - to how bouncy either of these surfaces
29:00 - are so for my rectangles i probably
29:02 - don't want them to be too bouncy but i'm
29:04 - going to say shape dot elasticity
29:07 - and this will be equal to something like
29:09 - 0.4 and while i'm at it i can add a
29:12 - friction
29:13 - so i can add a friction like 0.4 or 0.5
29:17 - and that's going to be the coefficient
29:18 - of friction between this and then
29:20 - anything else that hits it although the
29:21 - other objects that hit this will have a
29:23 - friction as well again please reference
29:25 - the documentation if you want to see
29:26 - exactly what all of these different
29:28 - properties mean and how they work it is
29:30 - slightly confusing and again i'm not
29:32 - mastering this module i'm just giving
29:33 - you a basic introduction okay so now we
29:35 - have our elasticity and our friction so
29:37 - i'm just going to go to my create ball
29:39 - and i need to add the same properties
29:41 - here but before we do that we can test
29:43 - it where and see what happens if we just
29:45 - add these two and don't change anything
29:46 - on the ball
29:47 - so notice now nothing happens because if
29:49 - one has an elasticity but the other
29:51 - doesn't it's just going to stay still so
29:53 - we need to add elasticity on the ball as
29:55 - well so i'm going to go here and say
29:56 - shape dot elasticity is equal to and
29:59 - then i want this to be pretty bouncy so
30:01 - i'm going to go with 0.9 now you can go
30:03 - higher than 1 if you want but if you do
30:05 - that you'll get some really weird
30:07 - results and essentially the higher the
30:08 - number you have here the more elastic or
30:11 - the more bouncy it's going to be
30:12 - so we have that for the ball elasticity
30:15 - and we're going to have shape dot
30:16 - friction and let's just make this equal
30:18 - to zero point and four
30:20 - and again higher number here is actually
30:23 - going to be the more friction lower
30:24 - number less friction that you have okay
30:26 - let's run this and see what we get
30:28 - and now notice that the ball actually
30:30 - bounces when it hits the floor so that's
30:32 - what we wanted didn't bounce a ton but
30:34 - if we were to increase the elasticity on
30:36 - both this shape here as well as this
30:38 - shape then you would see that it would
30:40 - bounce more okay so we now have a ball
30:42 - we now have our boundaries now let's
30:44 - make it so we can shoot the ball around
30:46 - the screen and once we do that we can
30:47 - add some obstacles to the screen or kind
30:49 - of structures that we can destroy or we
30:51 - can yeah i guess make them tumble over
30:53 - and that will pretty much wrap up the
30:55 - simulation for now
30:56 - okay so let's make it so we can shoot
30:59 - the ball
31:00 - so first i will show you how we kind of
31:02 - apply force to an object and then once
31:05 - you see how that works it'll be pretty
31:06 - easy to actually set up kind of the
31:08 - angles and make it so based on how far
31:10 - our mouse is from the ball that's the
31:11 - amount of power we get when we launch
31:13 - the ball
31:14 - so i want to add
31:16 - an event here so i'm going to say
31:19 - let's go like this if
31:22 - pygame
31:23 - dot event or not pi game.event if event
31:26 - dot type
31:27 - is equal to pygame dot and we're going
31:29 - to say mouse button down so if this is
31:32 - if you hit a mouse button okay mouse
31:35 - button down
31:36 - then what we will do is okay what the
31:39 - heck sorry i need to fix this
31:41 - mouse button down sorry about that if
31:43 - you press a mouse button then we will
31:45 - apply force to the object so the way
31:47 - that we apply force is we first need the
31:49 - object so in this case we have a ball so
31:51 - i'm going to say ball
31:52 - dot and then body dot and then this is
31:55 - going to be apply underscore
31:59 - force i think it's actually going to be
32:00 - apply
32:02 - impulse
32:03 - at underscore local something i got to
32:06 - look at what this method is because i
32:07 - forget exactly what it is
32:09 - but it is apply impulse at local points
32:12 - okay
32:12 - apply impulse at local point and then
32:14 - what we need to pass here is the amount
32:16 - of force that we want to apply
32:18 - so i'm going to apply a force of 10 000
32:21 - and then 0
32:23 - and then i need to say where on the
32:24 - object i want to apply it i want to
32:26 - apply it at the center so i'm going to
32:27 - pass 0 0. now let's take a step back
32:29 - here just so we understand what all of
32:30 - these different aspects are
32:33 - so first we see from create ball we are
32:36 - returning the shape so notice we're not
32:38 - returning the body we're returning the
32:39 - shape now the shape has an attribute on
32:42 - it called body so i'm going to say ball
32:44 - dot body to get access to the body
32:45 - because again all of the physics stuff
32:47 - is happening with the body not with the
32:48 - shape so i need to apply the impulse and
32:51 - when impulses is essentially a very
32:53 - quick force being applied to an object
32:55 - at a certain location so this is the
32:57 - force that i'm applying in the x
32:59 - direction i'm applying no force in the y
33:01 - direction and then i'm applying this at
33:03 - 0 0. now when i apply that at 0 0 it
33:06 - means the center of the ball
33:08 - if i wanted to apply it slightly i guess
33:09 - to the left of the ball or not directly
33:12 - in the center then i would change these
33:13 - different coordinates right here because
33:15 - i'm doing this at local point now i also
33:17 - can apply an impulse just at any
33:19 - location in my space again i'll point to
33:21 - the documentation to see exactly how to
33:23 - do all of that stuff but there's a bunch
33:25 - of functions here for applying forces to
33:27 - different objects this is just the one
33:28 - we're going to use right now okay so
33:30 - that's really all we need for now i just
33:32 - want to see what happens when we click
33:34 - the mouse essentially with our ball on
33:36 - the screen and if this force is going to
33:37 - be too little uh or too large and what
33:41 - will affect this force here is going to
33:43 - be the mass of the ball so where is our
33:45 - ball here
33:46 - well our mass actually we created right
33:48 - here so we have a mass of 10. if we
33:50 - increase this mass it will decrease what
33:52 - the force is going to do to this object
33:54 - because we need more force to move a
33:56 - heavier object right anyways let's just
33:58 - run this and let's see what we get
34:00 - okay and when i press the mouse button i
34:03 - gave me an error it said body object has
34:05 - no attribute apply impulse at local
34:07 - point well we should spell impulse
34:09 - correctly and that will probably fix it
34:11 - so impulse like that
34:13 - let's run the code
34:15 - let's click the mouse button and then
34:17 - notice it kind of launches our ball
34:19 - around it's applying the force at zero
34:21 - zero and the ball will actually spin
34:24 - nice
34:25 - there you go that is what happens
34:28 - when we apply our force okay so now that
34:30 - we've seen how to apply the force to the
34:31 - ball let's actually just make the force
34:33 - a little bit larger so let's make this
34:35 - like 50 000
34:37 - and let's see if we get any weird errors
34:38 - or not
34:40 - okay actually that's working fine and
34:42 - notice that actually went through the
34:44 - ceiling so the reason that happened and
34:46 - why i wanted to show this to you is that
34:47 - if you apply or if you have a velocity
34:49 - that's really high in your simulation
34:52 - there's going to be a chance that
34:53 - between the two frames where your ball
34:56 - is moving in this case because it's a
34:58 - ball you don't actually end up finding a
35:00 - collision with an object because the
35:02 - ball moves way too quickly so
35:04 - essentially the way collision's working
35:06 - is every single frame you're checking if
35:08 - it's hitting an object now since the the
35:11 - ball is going to be moving so quickly
35:12 - what happens is it will start like maybe
35:14 - right close to the wall and then the
35:16 - next frame will already have moved
35:18 - outside of the wall and so you won't
35:19 - have seen that it collided with
35:20 - something because in one frame it moved
35:23 - whereas if you have a less velocity then
35:26 - you can actually check for a collision
35:27 - because you'll see that it actually goes
35:28 - inside of the wall then you can kind of
35:30 - pop it outside of the wall and make it
35:32 - bounce
35:33 - outwards or make it bounce off the wall
35:35 - hopefully that makes a bit of sense but
35:37 - i just want to show you if you have your
35:38 - velocities too high which happens when
35:40 - we apply this much force there's a
35:41 - probability that you could actually miss
35:43 - collision with an object especially if
35:45 - that object is very thin alright so now
35:48 - that we've looked at that i want to make
35:49 - it so we launch the ball at a specific
35:51 - angle based on where our mouse is
35:53 - relative to the ball same thing with the
35:55 - power that the ball gets that's going to
35:57 - be relative to how far the mouse is away
35:59 - from the ball so i want to write two
36:01 - functions up here that we're going to
36:02 - use in one second
36:04 - the first function is going to be
36:05 - calculate distance
36:07 - this is going to take in a point one and
36:08 - a point two and just return the absolute
36:10 - distance between these two points so the
36:12 - way i do this is i can return the math
36:15 - dot sqrt of and then this is going to be
36:18 - p2 at
36:19 - i guess 1
36:20 - minus
36:21 - and then p1 at 1. now these are going to
36:24 - be tuples of x y positions okay we're
36:26 - going to raise this to the exponent 2
36:28 - and then we're going to add this to
36:31 - the p1 of
36:33 - actually the p2 of 0
36:36 - minus the p1
36:38 - of 0
36:39 - to the exponent 2.
36:41 - okay so that will give us the absolute
36:42 - distance between two points then i want
36:45 - to do something that gives me the angle
36:47 - between two points so i'm going to say
36:48 - define
36:50 - calculate
36:51 - and then angle and this is going to be
36:53 - p1 and p2 and i'm going to return the
36:56 - math dot then arc tangent 2 and then i
37:00 - need to do p2 at
37:03 - 1
37:04 - minus this will be p1 at and then 1. and
37:08 - then this is going to be p2
37:10 - at zero
37:12 - minus p2 or minus p1 at zero
37:16 - okay so what arc tangent two gives me is
37:19 - the angle in radians between these two
37:22 - points assuming that point two is
37:24 - located at zero zero so if point two is
37:27 - zero zero then point one is anywhere
37:29 - around point two and it gives you the
37:31 - angle between zero zero which is point
37:33 - two and then the other point hopefully
37:35 - that's clear but that's what arc tangent
37:37 - two does gives it to you in radians
37:38 - which we'll use
37:40 - so now that we have both of these things
37:42 - what i want to do is draw a line between
37:45 - my mouse and the ball whenever it's on
37:47 - the screen just so we can clearly see
37:48 - kind of what angle we're getting in the
37:50 - relative amount of power we'll draw that
37:52 - line onto the screen and then i will use
37:54 - the coordinates of the ball as well as
37:57 - the ending point of the line which is
37:59 - just going to be our mouse to determine
38:00 - the distance as well as to determine
38:02 - that angle
38:03 - so what i want to do and what you saw
38:05 - previously is i want to make it so when
38:07 - you click on the screen it spawns the
38:09 - ball wherever your mouse is that way we
38:11 - know the position of the ball and then
38:13 - we can use the position of the mouse and
38:16 - the ball to draw the line so on and so
38:18 - forth so the first thing i need to do
38:19 - here is i need to remove this ball
38:21 - equals create ball here
38:23 - because i only want to do that when i
38:25 - click down on the mouse so i'm going to
38:27 - make two variables here the first
38:28 - variable is going to be
38:30 - pressed underscore pause which for now
38:33 - is going to be equal to none and i'm
38:35 - going to say ball and it's going to be
38:37 - equal to none as well
38:38 - then in my pie game.mouse button down
38:41 - we'll comment this out for now
38:44 - and we'll say if not ball so if there's
38:46 - no ball currently on the screen then we
38:48 - want to create the ball so i'm going to
38:50 - say ball
38:51 - is equal to create ball
38:53 - and yeah that's fine for now now after i
38:55 - create the ball i want to say the
38:57 - pressed underscore position is equal to
39:00 - and this is going to be pygame dot mouse
39:02 - dot get underscore position
39:05 - and actually i need to use this when i
39:07 - create the ball because i want to place
39:09 - the ball at a certain position right so
39:11 - when i create the ball i'll pass this
39:12 - space i'll pass the radius the mass and
39:15 - then i will pass the position which will
39:17 - just be equal to pressed underscore
39:19 - pause so now i need to go here to when
39:21 - i'm making the ball
39:23 - i'm going to take in a position
39:25 - we're going to say body.position is
39:27 - equal to pause and that will put it
39:28 - directly in the center of our mouse
39:30 - which is what we want
39:32 - okay so now what should happen is when
39:33 - we click the mouse button it should
39:35 - create the ball add that to the screen
39:37 - or add that to the space and it should
39:38 - be exactly where our mouse is let's try
39:41 - this let's click
39:43 - and there you go it makes the ball and
39:44 - then it's not going to let me make
39:46 - another ball
39:47 - and the reason it doesn't let me do that
39:48 - is because i have the ball variable
39:49 - defined so this if statement is false or
39:51 - the condition here is false okay now
39:53 - that we've placed the ball though i want
39:56 - after we've placed it to be able to
39:57 - launch the ball and then additionally to
39:59 - be able to click again to delete the
40:01 - ball so i'm going to say if
40:03 - pressed position so if we have this
40:05 - variable here so i'll say lf press
40:07 - position
40:08 - then i want to launch the ball
40:10 - like that okay so if we have created the
40:12 - ball then we can launch it and then
40:14 - lastly i'm going to say else i want to
40:16 - say ball
40:18 - is equal to none
40:20 - and then the press position
40:22 - is equal to none as well so what happens
40:24 - now is if we don't have a ball we press
40:26 - it will create the ball if we have the
40:28 - ball so we have pressed position then we
40:30 - will launch the ball at the angle
40:32 - between our our mouse and the ball we
40:34 - haven't done that yet but that's what
40:35 - we'll do in a second and then lastly if
40:37 - we've just launched the ball when we
40:39 - click again it will delete the ball from
40:40 - the screen
40:42 - by removing ball and removing press
40:44 - pause now i also realized i have to do
40:45 - something here space dot
40:47 - and then remove
40:48 - and i need to remove the ball
40:50 - as well as the ball dot body from the
40:53 - screen okay so when i do this it should
40:55 - remove both of them for me uh from the
40:57 - space or from the screen
41:00 - okay hopefully that makes sense that's
41:01 - what we're doing here
41:02 - let's rerun
41:04 - and let's see what happens okay i click
41:06 - when i press it launches
41:08 - and when i press again
41:11 - for some reason it is not actually
41:13 - deleting the ball okay the reason for
41:15 - this is that i need to say
41:17 - pressed position is equal to none inside
41:20 - of here sorry and then remove it from
41:21 - here because this was never going to be
41:23 - set to none so i'm just constantly
41:24 - launching the ball
41:26 - now after we launch it once sets that
41:28 - equal to none so then we're able to
41:29 - actually set ball equal to none and then
41:31 - remove it and i can't set ball equal to
41:33 - none uh before i remove it so we want to
41:35 - remove this before we do that okay a few
41:38 - bugs but that's fine so let's rerun
41:41 - now let's see what we get
41:43 - launch
41:44 - and then it removes it from the screen
41:46 - then i hit okay launch removes from the
41:48 - screen
41:49 - launch removes from the screen nice that
41:51 - is all working okay now we just need to
41:53 - calculate those angles
41:55 - so what i'm going to do here
41:56 - is write a variable above here and i'm
41:59 - going to say line
42:01 - actually i'm going to say if the ball is
42:03 - on the screen
42:04 - then line is going to be equal to and
42:07 - this is going to be the pressed position
42:10 - as well as and then our pi game
42:13 - dot
42:14 - mouse dot get underscore pause but i
42:17 - want to actually swap these around here
42:19 - okay so i'm just putting the two
42:21 - coordinates i want to draw a line
42:23 - between so the mouse position as well as
42:25 - the ball
42:27 - and actually
42:29 - no i want it the other way sorry sorry
42:30 - about that uh this is the correct way i
42:32 - had to write the first time and then
42:33 - before this i'm going to say line is
42:34 - equal to none
42:36 - okay then what i want to do is pass this
42:38 - line to my draw function
42:40 - so then inside of draw we can draw the
42:42 - line onto the screen so now let's go
42:44 - here to our draw
42:47 - and let's take an a line
42:49 - and let's just go here
42:51 - and say
42:53 - if
42:53 - line
42:55 - so if we have a line so if it's not
42:56 - equal to none then what i will do is pi
42:58 - game dot draw
43:00 - dot line i want to draw this on my
43:02 - window what color do i want to draw this
43:04 - let's just draw the line
43:06 - in black and then we'll pass the
43:09 - position 1 and position 2 of the lines
43:11 - this will be line zero
43:13 - and line one to get the two different
43:16 - positions then i can pass the thickness
43:17 - of the line let's just go with the
43:19 - thickness of three
43:20 - okay that should draw the line for us i
43:23 - also want to put this before i draw
43:26 - this so it will be beneath my ball and
43:28 - beneath everything else
43:31 - we'll see if we want to change that or
43:32 - not but for now i want to draw it before
43:34 - this so this gets drawn over top of it
43:36 - so we'll have the line underneath the
43:37 - ball not over top of it okay now let's
43:40 - try this
43:42 - and let's see
43:43 - ah okay so we're getting an error here
43:45 - and the issue is that i set the press
43:46 - position of the ball right when the ball
43:49 - spawns on the screen but the ball is
43:51 - moving so since the ball has moved
43:52 - obviously now the position is different
43:54 - than it was before
43:55 - but my line is working from a static
43:57 - position
43:58 - so what i'm going to do is make it so
43:59 - that when i make my ball it's not going
44:01 - to be moving it's going to be static but
44:03 - then as soon as i'm about to launch it
44:05 - we will make it so it's no longer static
44:07 - it's dynamic and then it starts moving
44:08 - and we stop drawing the line all right
44:10 - that makes more sense to me so body is
44:12 - equal to pi monk dot body and then this
44:14 - is going to be
44:16 - body underscore type is equal to
44:18 - pi monk dot body dot static okay and
44:22 - then before we want to launch the ball
44:24 - we need to make it dynamic so what i can
44:25 - do here say ball dot and then this will
44:27 - be body
44:29 - dot body type
44:30 - is equal to and then pi monk dot body
44:34 - dot and then
44:35 - dynamic
44:36 - that changes the type for us
44:38 - and then here for my line i'm going to
44:40 - say if ball
44:41 - and pressed position because if i set
44:44 - the press position equal to none meaning
44:45 - i've just launched the ball i don't want
44:47 - to be drawing the line between my mouse
44:49 - and the ball because i can't launch it
44:50 - again i need to remove it and then
44:52 - replace it before i launch okay a lot
44:54 - going on but let's save let's rerun
44:57 - okay let's place this there we go we now
44:59 - have our line uh you can argue if you
45:01 - want the line above or below but now i
45:04 - can launch the ball
45:05 - nice
45:06 - okay so now that we've done that we need
45:08 - to launch it in the correct direction
45:09 - because it's just going to launch you
45:11 - know in the same direction every time
45:13 - okay so let's go here
45:14 - and
45:15 - let's now calculate the angle so i'm
45:18 - going to say the angle is equal to and
45:20 - this is going to be calculate and then
45:22 - underscore angle
45:24 - and i'm just going to pass this my
45:25 - asterix line which is going to break the
45:28 - line into the two different
45:30 - what he called elements in the list and
45:31 - pass those as p1 and p2 so this will
45:34 - give me an angle in radians then i want
45:36 - to use that angle in radians to
45:37 - calculate a force but the force is going
45:39 - to be based on the distance of the ball
45:41 - so i'm going to say my force is equal to
45:43 - and then this is going to be calculate
45:45 - force same thing sorry not calculate
45:47 - force calculate distance same thing i'm
45:50 - going to pass both the components of my
45:52 - line and i'm going to multiply this by
45:54 - 100 just so that we increase the amount
45:56 - of force now you can change this number
45:57 - if you want it to be less or more
45:59 - but there you go now that we have the
46:01 - force i want to break the force into the
46:03 - two individual components and that's
46:04 - based on the angle of the line so
46:07 - quickly we'll do a little illustration
46:08 - here
46:09 - so if my ball is here and my mouse is
46:13 - right here then we have kind of a
46:15 - triangle that looks like this
46:17 - this is a right triangle
46:19 - this is going to be my total force and i
46:22 - need to break that force into the two
46:23 - components so the x direction and the y
46:26 - now i know this angle theta and since i
46:29 - know this and it's a right triangle i
46:30 - can easily solve for y and x because i
46:32 - know both the force and the angle so
46:34 - there's these great shortcuts and just
46:36 - excuse me because i'm writing with my
46:37 - mouse here but we have so
46:41 - and then i have this
46:43 - toa okay
46:45 - now o stands for opposite h is
46:48 - hypotenuse and then a is adjacent and so
46:51 - if i want to calculate 4x for example
46:53 - this is adjacent to the angle that i'm
46:55 - talking about so i need to use cosine so
46:57 - i take the cos
46:59 - of my theta this is very very difficult
47:02 - to do with the mouse and then i multiply
47:05 - that by my force and that gives me x and
47:08 - then i do the same thing with sine for y
47:10 - so i take sine of theta multiplied by f
47:12 - and then that gives me the force in the
47:14 - y direction
47:16 - all right hopefully that makes sense
47:17 - quick trigonomic
47:19 - what do you want to call that lesson so
47:21 - we'll say fx is equal to and then i say
47:24 - we need to use cosine for this so it's
47:25 - going to be math.sine
47:27 - math.cosine of the
47:30 - angle
47:31 - multiplied by whatever this force is i'm
47:34 - going to say fy is equal to math.sine
47:38 - of the angle
47:39 - multiplied by the force and then here i
47:42 - can just pass my fx and fy
47:45 - and now the ball should shoot off in
47:47 - that direction okay so let's try this
47:50 - and let's spawn a ball
47:52 - and notice we shoot in that direction
47:53 - and it goes quite fast we might want to
47:55 - reduce how much we're multiplying the
47:56 - force by but let's try launching it like
47:58 - that okay so let's reduce the force
48:01 - slightly so rather multiplying by 100
48:03 - let's multiply by 50. we also could
48:05 - increase the mass of the ball if we want
48:06 - and it would have the same effect but
48:08 - this is fine for now
48:09 - so if i go here now i launch okay that
48:11 - looks a bit better nice then we're
48:13 - bouncing off of the floor let's launch
48:15 - in that direction
48:17 - looks great
48:18 - all right so now that we have that the
48:20 - hard stuff is done all we have to do is
48:22 - draw a few objects on the screen that we
48:23 - want to be able to actually hit right
48:25 - that's it so let's do a function here
48:27 - and let's say define
48:29 - draw or create
48:31 - underscore structure
48:33 - okay
48:35 - and let's take in here the space
48:37 - the width
48:39 - and the height
48:40 - and then i will start designing kind of
48:42 - a few rectangles that we can interact
48:44 - with so let's say rex
48:45 - is equal to
48:47 - and let's place a few inside of here now
48:49 - i'm just going to copy some values that
48:51 - i have from the other screen so let me
48:53 - have a look at these here
48:55 - the first rectangle that i'm going to
48:57 - draw is going to be at 600 and then
49:00 - height minus 120
49:03 - and then we're going to draw this at 40
49:05 - and 200
49:06 - and for the color here i'm actually
49:08 - gonna put my color up here
49:10 - this is going to be brown
49:12 - and this is going to be equal to 139
49:16 - 69 19 and 100 so our rgba value so i'm
49:20 - going to define my position my size the
49:24 - color of the rectangle which is going to
49:26 - be brown and then the mass of the
49:27 - rectangle which is going to be a hundred
49:29 - i did it slightly different for this
49:31 - because i didn't really care about the
49:32 - color of the mask but here i want a
49:33 - color and then we can adjust the mass
49:35 - and you'll see that those objects behave
49:36 - differently and will move more if they
49:38 - have a lighter mass when they get hit by
49:40 - the ball right okay so there we go
49:42 - that's the first rectangle that we want
49:44 - now let's copy this
49:46 - the second rectangle we want is going to
49:48 - be the exact same except rather than 600
49:50 - we're going to place it at 900 so we're
49:51 - going to have kind of two vertical
49:53 - rectangles here that's what these two
49:54 - are and then i want to draw a rectangle
49:56 - that goes over top of those vertical
49:58 - rectangles
49:59 - and for that
50:01 - we're going to need a position of 700 or
50:04 - 750 sorry this is going to be height
50:07 - minus
50:08 - 240
50:10 - and then we're going to have
50:12 - 340 as the width and 40 as the height
50:16 - and then this is going to be brown again
50:18 - and for the mass it's going to be
50:20 - slightly uh more because
50:22 - this is thicker so it's going to be 150.
50:25 - okay so we'll do the rest of the
50:26 - rectangles later but for now let's draw
50:27 - these out using a for loop so i'm going
50:29 - to say 4 and then this will be position
50:32 - size
50:33 - color
50:35 - mass
50:36 - and then in
50:37 - rex like that then we want to make a
50:40 - body the body will be equal to pie
50:42 - monk.body this is not going to be static
50:45 - we are then going to
50:47 - do the position so body
50:49 - dot position
50:51 - okay this is going to be equal to the
50:53 - position we're going to make our shape
50:55 - so i'm going to say shape is equal to
50:57 - and then this will be pi
50:58 - mock.poly.createbox perfect we'll pass
51:00 - our body and our size
51:03 - and then we'll say shape
51:04 - dot color is equal to the color shape
51:08 - dot mass
51:11 - is equal to mass and then we'll say
51:13 - shape dot elasticity and we can set this
51:16 - equal to something like maybe 0.4 and we
51:18 - can say the shape dot friction and again
51:21 - says to whatever we want let's just go
51:22 - with 0.4 okay now we want to add this to
51:25 - our space so i'm going to say space.add
51:27 - i'm going to add the body
51:29 - and i'm going to add the shape and that
51:31 - should be all we need for this create
51:32 - structure function if we want to add
51:34 - more structures or more rectangles we'll
51:35 - just put them inside of here we'll do
51:37 - that later
51:38 - okay so let's now run this function
51:41 - so let's say create
51:43 - and then this is going to be underscore
51:45 - structure
51:47 - pass the space
51:48 - with and height
51:50 - and i won't go through all of these
51:52 - different you know values that i came up
51:54 - with but you'll see how they look on the
51:55 - screen and then you can kind of adjust
51:56 - them and tweak them as you please so
51:58 - let's run this
52:00 - and see we get this structure right here
52:02 - now one thing i will show you is that if
52:03 - we want a nice outline for it what we
52:05 - can do is pass a radius to our shape
52:09 - so i can say radius is equal to one now
52:11 - this will add a curved edge if you make
52:13 - this really large but it also adds a uh
52:16 - what do you call it kind of border for
52:17 - the shape
52:18 - so here
52:19 - when i make radius equal to one
52:21 - now you can see that we actually get a
52:22 - nice border and if i say radius is equal
52:24 - to
52:26 - like 10
52:27 - uh then we get a really thick border
52:28 - okay so it rounds the edge slightly as
52:30 - you can see but it's also the thickness
52:31 - of the border for the shape i don't want
52:33 - to be quite that large so let's maybe
52:34 - just go with two
52:36 - and that looks good to me okay let's
52:37 - make a ball let's launch it at it and
52:40 - nothing happened
52:41 - okay there you go something happened so
52:42 - let's launch here and i can actually
52:44 - take out the support and they're going
52:45 - to fall you know according to regular
52:47 - physics
52:48 - all right
52:49 - now that we have done that we did our
52:51 - structure let's just handle doing that
52:54 - kind of jointed object that you saw
52:56 - before kind of the swinging pendulum and
52:57 - then i'll probably leave it at that
52:59 - because you guys can kind of add
53:00 - whatever you want to this right it's
53:01 - very simple from there to kind of add
53:03 - more objects make more structures you
53:05 - have the the foundation done so let's
53:07 - make a function here and let's say
53:08 - define and let's go with
53:11 - create underscore pendulum
53:14 - [Music]
53:15 - i have no idea how you spell that let's
53:16 - just say create
53:18 - swinging ball
53:20 - there you go that's more in my
53:21 - vocabulary
53:23 - we'll take in the space we'll take in
53:26 - the actually i don't even care about the
53:27 - width and the height we'll just draw it
53:28 - at a static position here all right so
53:30 - here we're going to make a more advanced
53:32 - shape attached to our body and it's
53:34 - going to be attached to a joint that's
53:35 - fixed to the screen so we're going to
53:37 - have a body that's fixed to the screen
53:39 - it's going to be our kind of rotation
53:41 - center where they're going to have a
53:42 - joint between that and then our body
53:44 - that is not fixed that can actually move
53:46 - around the screen but the body that's
53:48 - not fixed is going to be a more complex
53:50 - shape because we're going to have a line
53:52 - segment in combination with a circle and
53:54 - so you'll see how we do more advanced
53:56 - polygons and shapes here in this example
53:58 - now i'm going to be reading from my
53:59 - other screen because i don't have all of
54:00 - this memorized if you see me looking
54:01 - over here that's what i'm doing just
54:03 - kind of referencing my code so i'm going
54:05 - to say rotation underscore center
54:07 - underscore body and this is going to be
54:09 - equal to a pi monk body and the body
54:11 - type is going to be pi monk dot body dot
54:14 - and then static because this is not
54:16 - going to move it's going to be that
54:17 - rotation axis right a rotation center
54:19 - body as i say here then i need to set
54:21 - the position of this so rotation center
54:23 - body
54:24 - is equal to set this wherever you want
54:26 - but i'm going to go with 300 300.
54:28 - okay now that we have that we want to
54:30 - make the actual swinging body so i'm
54:32 - going to say body is equal to and then
54:34 - pi monk dot body
54:36 - okay we need a position for this so
54:38 - we're going to say the body
54:41 - dot and then position is equal to and
54:44 - then i have this set at 300 300. now if
54:47 - you set this at the exact same position
54:49 - as the rotation center body then when we
54:52 - draw the joint you're not really going
54:54 - to see the joint you'll just swing
54:55 - around the axis because of the fact
54:57 - they're together however if i were to
54:59 - change this slightly so maybe i move the
55:01 - rotation body up and i make it like 270
55:04 - now you'll actually see the joint
55:06 - between them but this is showing you how
55:07 - you can make something swing
55:09 - when you have a joint and again if you
55:11 - put this in the exact same position then
55:14 - our body is going to overlap with the
55:15 - rotation center body and so it's going
55:17 - to look like we're just swinging around
55:18 - a static point as opposed to having the
55:20 - joint that's connecting the two which
55:22 - you'll see in a minute it's going to be
55:24 - better to illustrate when we actually
55:25 - have a visual here but i just want to
55:27 - explain why i have the positions as i do
55:29 - so here we're going to say line
55:31 - is equal to pimonk dot and then this
55:34 - will actually be segment
55:36 - and we're going to pass to this the body
55:38 - and then the two positions of the line
55:40 - that we want to draw relative to the
55:42 - body
55:43 - so i'm going to say 0 0 which means the
55:45 - first position of our line is going to
55:47 - be right in the middle of the body and
55:50 - then the second position of my line is
55:52 - going to be 255 and 0 so x 255 and then
55:58 - 0 here
55:59 - okay
56:00 - then the next thing that we pass here is
56:03 - the thickness which i'll go with five
56:06 - now i'm going to make a circle so i'm
56:07 - going to say circle is equal to pi mark
56:09 - dot circle body
56:11 - 0 0
56:12 - however i think i need a radius for this
56:14 - as well and actually yeah the radius
56:16 - comes first
56:17 - so i'm going to go radius now if i put
56:19 - this at 0 0 again this is relative to
56:21 - the body so this means the circle will
56:22 - be directly in the center of the body
56:25 - but i don't want that i actually want it
56:26 - to be at the end of the line segment
56:28 - so i'm going to pass this at 255
56:31 - so now it'll be right at the end here of
56:33 - where this line segment is
56:35 - okay so now we have our circle now we
56:36 - have our line now what we can do is set
56:38 - friction for both of these things so i
56:40 - can say line
56:41 - dot friction is equal to one
56:44 - okay
56:45 - now you can say circle
56:47 - dot friction
56:49 - is equal to one and i can also add
56:50 - elasticity as well as mass so i'm going
56:52 - to say the line dot mass is equal to
56:55 - let's go with like eight
56:57 - and the circle.mass will be equal to
57:00 - thirty okay
57:01 - then we are going to add elasticity for
57:03 - the circle so i'm gonna say
57:04 - circle.elasticity
57:06 - is equal to 0.95 just so it bounces off
57:09 - of stuff and then we can bounce our ball
57:11 - off of this circle okay
57:13 - now that we've done that we want to
57:15 - create our joint so i'm going to say my
57:17 - rotation underscore center
57:20 - underscore and then joint
57:22 - is equal to and then pi monk dot and
57:25 - this is going to be called a pin joint
57:27 - there's some other types of joints and
57:29 - like springs and stuff that you can do
57:31 - but pin joints one we're going to do and
57:33 - then we have the two bodies that we want
57:34 - to connect so we want to connect our
57:36 - body as well as our rotation center body
57:39 - and then where do we want to connect on
57:41 - the two bodies relative to them well
57:43 - zero zero and zero zero
57:46 - so what these two arguments say here is
57:48 - okay on the body where do you want the
57:50 - joint to be connected when i say zero
57:52 - zero we're going to connect it in the
57:53 - center of the body and same thing here
57:55 - for the rotation center body now if i
57:57 - were to change this slightly i could
57:59 - make it so the joint would say attached
58:00 - to the very top of the body or the left
58:03 - side of the body or the right side of
58:04 - the body or really anywhere on it that i
58:06 - want so it's very flexible here with the
58:08 - join okay now that we have that i'm
58:10 - going to say space dot add and i'm going
58:12 - to add a bunch of things here i'm going
58:14 - to add my circle i'm going to add my
58:15 - line i'm going to add my body and i'm
58:17 - going to add my rotation center body oh
58:20 - sorry not rotation center body rotation
58:21 - center joint
58:23 - now notice here that i don't add the
58:25 - rotation center body now that's fine
58:28 - because there's no shape associated with
58:30 - the rotation center body it's simply
58:32 - there so we can use it in the joint
58:34 - so for the joint we have our body and
58:36 - our rotation center body so you will
58:38 - actually end up seeing something on the
58:39 - screen for the static joint but i don't
58:42 - want to draw the rotation center body
58:44 - onto the screen because we don't need to
58:46 - all right kind of hard to explain it
58:48 - more than that you can have a look at
58:49 - the pi mic documentation as i keep
58:51 - saying if you want to learn more for now
58:53 - though let's call this and let's see
58:55 - what happens so let's say create
58:58 - swinging ball
58:59 - and let's pass our space
59:03 - and then did i take a width and a height
59:04 - in here no uh
59:06 - no just a space okay so let's just take
59:08 - space
59:10 - all right let's run this
59:11 - and let's see what we get
59:13 - and we got an error it says tuple object
59:15 - has no attribute underscore body
59:18 - okay
59:20 - let me have a look here and see what the
59:21 - problem is all right i found the problem
59:23 - i'm sure many of you already saw this i
59:25 - forgot to put position here so i said
59:26 - rotation center body is equal to a tuple
59:28 - as as opposed to saying rotation center
59:30 - body dot position is equal to that so i
59:33 - change that fingers crossed it should
59:34 - work now let's run the code
59:37 - and there you go
59:38 - now you can see we get what i was
59:39 - talking about so i'm drawing the joint
59:40 - right so i have the two points of the
59:42 - joint and that's why i didn't need to
59:43 - draw the rotation center body because
59:45 - when i have the joint i'm automatically
59:46 - going to get that now let's just launch
59:48 - something off of here and obviously you
59:51 - know the physics work as we expect okay
59:53 - let's launch again we can bounce them
59:56 - off each other and now let me show you
59:57 - what happens if i remove the distance or
60:00 - the displacement between the the y in
60:02 - the joint
60:03 - so let's remove this and let's change it
60:05 - now so the rotation center body is at
60:07 - the same position as the body so now
60:10 - when i do this
60:11 - so now you can see it just looks like
60:12 - we're swinging around this static point
60:14 - you don't really see the joint there's
60:16 - like a slight tiny bit of movement based
60:18 - on the way it's implemented but it looks
60:19 - like we're just swinging on a static
60:20 - point okay
60:21 - so there you go that is really all i
60:23 - wanted to show you now i know in my
60:25 - example earlier i had some more objects
60:27 - but i figured you guys can easily add
60:28 - that you don't need to watch me for
60:30 - another 10 minutes just type in a bunch
60:31 - of lines of code and all the code that i
60:33 - wrote here will be available from the
60:35 - description so if you want to copy and
60:36 - paste it and edit it as you please
60:39 - this is really cool i'm planning on
60:41 - messing around with this module more and
60:42 - doing some more stuff in the future if
60:44 - you guys want to see more pie monk on
60:46 - this channel please do leave a comment
60:48 - let me know tell me what type of
60:49 - simulations you want to see what other
60:51 - videos you want to see on this channel
60:52 - always open to your feedback if you guys
60:54 - enjoyed this make sure to leave a like
60:56 - subscribe to the channel check out
60:57 - programming expert from the link in the
60:59 - description with that said i will see
61:00 - you in another youtube video
61:04 - [Music]
61:10 - you

Cleaned transcript:

in this video i'll be giving you an introduction to the module known as pi monk and showing you how we can use it to perform physics simulations now this is a great module it's really easy to use and you can do a ton of powerful stuff with it and so i'm going to go through a few demos right now just to explain and show what the module is capable of then i will go through a tutorial where we actually build out a project using pie monk anyways let's have a look at this one right here so i can actually use a camera in pi monk and kind of move this around and view different objects obviously some objects are falling off the screen i could say rotate the camera okay that's the first demo i wanted to show you these are all just demos that were provided by pi bunk so let me walk through a bunch of them really quickly uh here's another one that's kind of like a flipper game so i can spawn in balls and i can kind of flip them around and the great thing here is that you don't have to understand or implement these physics on your own you just place objects onto the screen and then control how you want to move them and then all of the physics will be implemented for you so you don't need to be great at physics to actually use this uh here's another demo let's have a look at what this one is you can see that we can have kind of like a pivoting i don't even know you would call this platform rolling balls on here okay pretty straightforward let's go to this one this one is actually a playground and what this lets me do is kind of create my own object so i can click here to create different objects i can actually draw an object like this if i want to maybe i'll draw it like a big square okay that's this demo another one we could make like a platformer game using this so let's have a look here you can see that i can move this thing around jump up i can actually double jump if i hit this twice again just want to go through some quick demos and illustrate to you kind of the power of this module continuing let's have a look at like a planet or satellite simulation so let me run this one okay we can see there's a bunch of satellites or planets that are revolving around the sun very nice and then lastly this is what we're actually going to build out i think this is cooler than the demos that they had anyways let's look at this okay so here you can see that i have kind of this swinging pendulum it's not really a pendulum what i can do is place a ball and i can actually launch the ball and destroy stuff so this is what we're going to be building out i'm going to teach you how to build this it is not very complicated again because all of the physics will be done for us let's just hit this very nice so with all of that said hopefully you guys are excited now let's go ahead and get into the tutorial after a quick word from our sponsor before we dive in i need to thank ltm designer for sponsoring this video ltm designer is the world's most trusted pcb design system that enables engineers to effortlessly connect with every facet of the electronics design process ltm designer has used 35 years of innovation and development to create a truly unifying design environment that makes it the most used pcb design solution on the market ltm designer provides an intuitive and powerful interface that lets you design pcbs rapidly while interacting and collaborating with your mechanical designers the interface provides a photo realistic 3d environment collaboration and synchronization with tools including solidworks ptc creo and autodesk inventor realistic rigid flex designs multiboard assembly and much more ltm designer is the most popular ecad tool and electronics design software and you can get started with it today for free by pressing the link in the description and registering for a free trial thanks again to ltm designer for sponsoring this video and now let's dive in alright so let's start getting into this tutorial i will mention that this is not designed for complete beginners you do have to understand python to be able to follow along with this and if you don't know python or you want to get better at programming then you can check out my course programming expert dot io you can use code tim for a discount i will leave that in the description anyways as you saw we are going to build the project where we can launch that ball around the screen have it collide with different objects and essentially just destroy whatever structures it is that we make the way i'm coding this is going to be really easy for you to add other objects there and you can kind of customize it however you like but this will be a really good starter project for this module now i do want to mention that i'm not an absolute pro with this module so there may be a few things that i explained that are slightly different than from the documentation so if you really want to know everything that's possible with this module then please do check out the documentation i will leave that in the description okay so the first thing we need to do here to get started is install the module so open up your command prompt open up your terminal if you're on linux or mac and type in the following command pip install and then pimonk okay and then it's going to install it and then if we want to be able to draw the simulation we need to either use pi glit or a use pie game so i'm going to use pie game because that's the one that i know best so pip install pie game so pie game will actually handle all of the graphics and then all of the physics and simulator type stuff will be handled by pie monk okay now for some reason those commands do not work i will leave two commands or sorry two videos on the screen and in the description that will show you how to fix this for mac and for windows but you can try the command pip3 install pygame and pymonk and you can also try this command this one works for a lot of people python hyphen m pip install or python 3 hyphen m pip install okay at this point i'm going to assume you have those modules installed now we are going to import them so i've just opened up a file here in the sublime text feel free to open this wherever you'd like just call it tutorial.pi doesn't really matter where you code this i'm gonna say import pi game i'm going to say import and then pi monk and then i'm going to import we want the math module and i'm going to import pie monk dot and then this is going to be i think it is pie game underscore util let me have a look here at my cheat sheet yes it is so the reason we need this is because we want to set pie monk up to use pie game to draw so that's what this import is going to be for here okay now that we have that i'm going to say pygame dot init just to initialize it and the first thing i want to do is set up a pi game window that i'm going to draw all of the simulation stuff onto so i'm just going to say width height is equal to and i'm going to make mine a thousand width and 800 height now i have a large display so i'll be able to see this for some of you it might be a little bit too big so you can adjust these numbers to be whatever you want and then i'm going to say my window is equal to pygame dot display dot set underscore mode and then inside of a tuple here i need to pass the width and the height okay so now we have a pi game window now that we have the pi game window i just want to set up what's known as our main event loop which is just going to display the pi game window and we're going to use pi monk to actually render all of our stuff so i'll show you how it works i'll just bear with me for kind of the setup steps here in our code so i'm going to make a function i'm going to call this run and inside of here i'm going to take a window i'm going to take a width and i'm going to take a height now i'm going to make a variable i'm going to say run is equal to true and i'm going to make something called a clock and what a clock is going to do is make it so that our main game loop is going to run at a certain speed we'll see this in one second but for now i'm going to say pi game dot time dot clock and then i'm going to put a while loop here and i'm going to say wow and then the variable run so while that variable is true we're going to do this and inside of here i'm going to say clock dot tick and i'm going to make another variable here called fps and i'm going to make this equal to 60. and then inside of here i'm going to say clock.tick and then fps so what this does is make it so this while loop here can run a maximum of 60 frames per second so that's what the clock is doing just regulating the speed so it's not going to run variably based on the other things on your computer and the speed of your processing cores so if i didn't have this clock.tick here then your simulation would be a very different speed than my simulation because it would depend on the speed of the processor and how quickly this while loop could be ran by your computer alright so now that we have this i'm just going to set up an event checking loop now what this is going to do is just loop through all of the events that are occurring in our pi game or in our pi monk simulation and essentially allow us to close the window when we hit the x button so you'll see what i mean in a second but i'm going to say for event in pi game and then this will be dot event dot get i'm going to say if event dot type is equal to pi game dot and then in all capitals quit what i'm going to do is say run is equal to false and then i'm going to break out of this while loop or break out of this for loop sorry and what this will do is make it so we're no longer going to run the wall so essentially we're looping through all of the events that are occurring in pi games this will give us any mouse button presses any keyboard presses when we move the mouse all that type of stuff as well as if we hit the quit button on our window if we do that we want to quit the game so we're going to say run equals false and then break and then down here outside of the wall loop i'm just going to say pie game dot quit and what this will do is just quit pie game for us okay now i want to call this run function we need to add a few more things to it but for now i'm going to say if underscore underscore name is equal to underscore underscore main underscore underscore then i want to call run and i'm going to pass the window the width and the height to this function okay so just a few more things here for the setup before i can actually start running the application and talking more about pie monk now i want to make a pie pie monk space so with pie monk we have this thing called space so what i can do is say space is equal to pie monk dot space and the space is where we're going to put all of our objects so what's going to happen is we're going to draw whatever is in this space we can have multiple spaces but in this case we're just going to have one space we place all of our different pie monk objects so rectangles circles polygons whatever different points that we have the ball that's going to be moving around the screen all of those go in the space then pie monk will do a simulation within the space between all of the different objects it will handle the collision of the objects for us it will handle the objects moving around the screen it will handle applying force to the objects and gravity and all that type of stuff so we don't have to do any of that which is really nice okay so then we're going to say space dot gravity and this is going to be equal to a tuple and we have to give a gravity for both the x direction and the y direction so let's say we want to simulate being on mars or something or being on a really weird planet i don't know if any planets have a gravity that is going in the x direction but you know what i mean i could set the gravity to be whatever i want and we would be pushed either you know in an x direction or y direction based on the the acceleration that i put here so what i'm going to do is put 0 and then negative 981. now i could do 9.81 but that's going to be really slow for my simulation so when i do negative 981 this is just simulating gravity right now as you're going to see here in this simulation we don't have to do all completely real values and all of the units that we pass to the simulation are going to be completely up to us so pi monk is a unitless module or unitless library and what that means is that we essentially decide what all of the units are going to be as opposed to passing grams or kilograms or meters per second or meters per second squared or whatever the different physics units would be we just come up with whatever we want and we just pass the value to pi muck so here i'm passing 981 you can interpret that however you want but that's going to be my gravity and i actually want to make this positive because in pie game as we go down the screen the y increases and so i want my gravity to pull me down as opposed to moving me up which would be what i get if i have negative 981. i'll continue to explain all the position and coordinates later on but that is the gravity so now that we have this what i need to do is set up some drawing options for my space so by default the simulation here in pi monk it doesn't draw anything it just does the simulation and then allows us to get the the information about different bodies or different objects that we have so you don't always want to draw it right but sometimes in our case we do want to draw it so i need to set up my draw options so i'm going to say draw options is equal to and then this is going to be pi monk dot and then pi game underscore util dot and then draw and then options like that and what i need to pass here is the window of pie game that i want to use to draw my simulation onto so i'm going to set my draw options equal to pi monk dot py game util.draw options and then i pass the window and that's now where my simulation is going to be drawn however it's not drawn unless i manually draw it so what i'm going to do is make a draw function here i'm going to say define draw this is going to take in my space and it's going to take in my window and the first thing i'm going to do is i'm going to clear my window and the way i clear that is just by drawing a color onto the screen and filling the entire screen with it so i'm going to say window dot fill i'm going to fill this with white and then on the next line i'm going to say space dot and this is going to be debug underscore draw and i'm going to pass to this actually sorry i need to pass my draw options so i'll take in my space i'll take in my window and i will also take in my draw options like that so i'll say draw options okay so this will draw the simulation for me that's really all we need right now and then if we wanted to draw anything else onto the window we could do that inside of here uh not from the space we could just draw that using the regular pi game draw methods if you're familiar with those okay now that we have this though i just need to call the draw function so i'm going to say clock.tick fps and then right before i do that i'm going to say draw i'm going to pass my window i'm going to pass my space and i want to pass my draw options so i'll pass those like that nice okay last thing i want to do here after my draw is i want to say space dot step and i need to step this by a certain amount now what this step is is very similar to this clock.tick but essentially it says how fast my simulation should go so in this case since i'm rendering 60 frames per second and i want the unit that i pass here to be in seconds i'm going to say okay well i want to step this by 1 60 of a second every single time i run this while loop so what i'm going to do say dt standing for delta time or difference in time is going to be equal to 1 divided by the fps so whatever i set the fps to i want my displacement to be or not displacement uh difference in time delta time whatever to be 1 over fps so i'm stepping every single loop my simulation forward by 1 over the fps you know seconds right hopefully that makes sense excuse me just need to clear my throat there okay so space dot step displacement time i keep saying displacement time delta time and that will actually step the simulation forward now i know we've just written a lot of code we haven't tested anything yet we also don't have any bodies on the screen but let's just run the code and see if we're getting any errors and then we'll continue and actually place a body into our space and watch how gravity pulls it downwards so let's run this and we got an issue it says space object has no attribute fill okay my apologies ah so we the issue here is we have this draw function and we have space and window but i passed window and space so i need to pass this in the other way space window just my order is correct okay let's rerun this and what's going on here okay so we don't get any errors but notice here that i'm filling my screen with white but we're not actually seeing that go on the screen the reason for that is i haven't updated the display so i'm going to say pie game dot display dot update so now when i do this we should see that we get a white screen and we do there we go we have set up kind of the basics of our application we now have stuff being drawn onto the screen or at least we have a white background now we want to actually use pi monk to add an object to the screen and then watch how gravity pulls it downwards so let's make another function here let's say define add and let's just go with object for now and let's take in space in here and let's add an object to our screen and then watch it move around so in pi monk we have what's known as a body now a body is a rigid body from physics if you're familiar with that and we also have what's known as a polygon or a kind of a shape so we have a body and then we have a shape now in pie monk what we do is we separate the collision and kind of the physics of an object from its representation on the screen so we may have an image that we display and that image will be linked to a specific body but all of the calculations and computations that we're doing are related to the body now i know this is a little bit confusing but we have the image and we have the body the image is attached to the body but we do everything on the body so that way the image that we show can be slightly different than what the actual body is so if you're familiar with like fps games or anything where there's a like a hitbox involved in it that's kind of what the point of this is here we have like the underlying hitbox and then we have the image that we put on top of it and so we'll make the underlying hitbox usually simpler and then the image will be more complicated so if you're familiar with you know any video games you've probably seen this before where maybe you shoot someone and if you shoot like on the very very edge of the actual sprite that's being drawn on the screen it doesn't say that it hit them because it didn't hit the underlying body or the underlying hitbox so i just wanted to explain that before i start coding this out but for now let's create a body so i'm going to say body is equal to and then this is going to be pi monk dot and it's going to be body like this and for our body i don't need to pass anything inside of here i just initialize a body but what i will do is set its position so i'm going to say the body dot position and then i pass a tuple which is the x y of the center of the body on the screen so if i want the center of this body to be at say 300 300 then i pass that now as i said in pi game actually let me run this here so i can explain this the top left hand corner so 0 0 is right here so 0 0 is the top left hand corner which means if i go to the right my x is increasing so over here would be the width and then zero and then the bottom right hand corner would be the width and the height that would be the position and then the middle of the screen will be width over two height over two as opposed to being zero zero i know many people are familiar with the middle of the screen being zero zero not the case in pi game the top left is zero zero so that means when i'm drawing at 300 300 i'll be drawing like kind of close to where my mouse is here um yeah that's that's where i'll be drawing okay so we set the position to be 300 300 then what i need to do is actually have a shape that i'm going to draw with this body and i need to attach this shape or this polygon to the body so let's go here and say shape is equal to and then this is going to be pie monk dot and then circle and i want to pass to this a body as well as a radius so let's actually change this function here i'm going to change this to say create ball okay we'll take in the space we'll take in a radius and we'll take in a mass for now so the radius will be past this function so we'll just use it here and then once i've done this what i want to do is set the mass of this object now we need to have the mass because we're going to be moving this on the screen and well to apply gravity to it needs some mass so we'll set the mass equal to whatever mass it is that was uh sent in and then if i want to change the color of this shape i can say the shape.color is equal to and then i have to pass an rgba value so that's red green blue alpha so for now if i want the ball to be say red i would do 255 0 0 and then 100. so the last argument here is between 0 and 100 it's the alpha or the opacity or transparency whatever you want to call it of this object so if i made it 50 then it would be 50 transparent when i make it 100 it's completely opaque and so we can't see through it okay so now that we have that what i need to do lastly is say shape.add and i need to add both the body as well as the shape to the simulation so i'm going to say body and shape like that and then what i can do here is i can simply return the shape okay so i know i just went through a lot here again all we're doing is we're creating a body we're creating a shape that's going to be for that body then we're setting the mask we're setting the color and then i need to add both of these things into the pie mug simulation so now they can be moved around i can't just add the shape if i were to do that it's not going to work because what is it attached to well what it's attached to isn't now in the simulation however i could add the body without adding the shape if i wanted to anyways the point is i need to add both the body and the shape here to the simulation for this to work properly and they'll be kind of attached to each other okay so let's now run this so what i want to do is say let's go here ball is equal to and then this is going to be create ball and we'll say space and then not the width and the height i need to pass a mass as well as a radius and i think the radius is first so let's pass a radius of like 30 and a mass of say 10. now again treat these units as whatever you want we could say this is like 10 kilograms whatever it doesn't really matter what you want to say it is okay so now that we have that it should just be added to the simulation and we should see when we start drawing it actually shows up on the screen so let's run this and notice that we have a ball and just instantly starts falling because of gravity right awesome that is what we wanted everything is working great okay so now that we have created a ball the next thing i want to do is create some boundaries on the screen so the ball can't just fall through right now the thing here is that the objects that we currently have and that we place on the screen they're going to have gravity applied to them because they're not static they are dynamic objects or they are dynamic bodies so for these different bodies here we have an option to either have a dynamic body or a static body i think there's another option as well but those are the two main ones so now we want to create some static objects that are not going to move and just are going to be kind of walls and floors for the simulation so then objects can't kind of fall through right so let's figure out how to do that now let's write a function let's say create and then boundaries and inside of here i'll just take space i'm going to take the width and the height of the screen because i'll draw these dynamically based on what that width and height is so i'm going to start by making a list here i'm going to say rex or rectangle is equal to a list and here i'm going to define all of the different rectangles that i want to draw onto the screen and then we'll use a for loop to loop through all of them and draw them rather than writing out the draw command four times in a row which would be a lot of unnecessary code so for a rectangle in pie monk you simply need an x and y position of the center of the rectangle and then you need the width and the height of that rectangle so i'm going to pass a list here i'm going to put a list here and then for the width and the height again this is the center of the rectangle so the first one i'm going to do is going to be width over 2 and then this will actually be height minus and then i'm going to make the the height of my rectangle be 20 units so i'm going to subtract 10 here to make sure that we are perfectly flush at the bottom of the screen so then the next thing i'm going to pass is the size of the rectangle so i want the size to be the entire width of the screen and i want the height of the rectangle to be 20. so again we want to pass the center of the rectangle so if i want this to be directly in the middle of the screen i pass width over 2 for the center of the rectangle and then i want this to be right at the bottom of the screen and i want to have a height of 20. so since i want to have a height of 20 i pass height minus 1 because as we go down we increase in y so we take the height which will be 800 we subtract 10 so we're going to place this at 790 the middle of the rectangle meaning that this 20 height right here will take up the entire bottom aspect of the screen none of it will be off of the screen okay so that's what we're going to have for the floor then we want to have the ceiling so for the ceiling this will be the same thing except it's just going to be 10 for the y and actually we don't need to change anything here so we just change the y translate it all the way up on the screen so now it's at 10 as opposed to height minus 10. now that we have that we want to have the walls so let's copy this and actually let's paste it twice now the walls will be slightly different the first wall we're going to want to place at position 10 and then we're going to have this be at height over 2. actually i think that's correct yeah height over 2. then we're going to have the width b20 i'm gonna have the height be equal to height and then for the next wall this is going to be at height or sorry not height width minus 10 and then this will be again height divided by two and then it will be 20 and height okay so let's explain why i did this so for the x coordinate we want this to be to the furthest left possible so we're going to put 10 because the width is 20 so that means the middle will have it perfectly lined up with the left hand side of the screen and then for the height of this i need to pass the center of the rectangle for the height so i'm passing height over two that's going to be perfectly in the middle of the screen and then i want to have the width of 20 and the height of height and then the same thing pretty much applies here with the width minus 10 like it did with our height minus 10. okay so now we have all of our rectangles so we want to draw them so i'm going to say 4 and then i'm going to say that this will be the position and the size in and then rex and then that will give me each one of these elements as i loop through okay and i need to make a body as well as a shape for this body so i'm going to say my body is equal to and then this is going to be pie monk dot and what will we do here and this will be body except this time i don't want the body to move so i have to make it a static body so i'm going to say my body type is equal to and then this is going to be pi monk dot and then body dot and then static like that so that means it's not going to move now that i have that body what i can do is put the positions i'm going to say body dot and then position is equal to my position and then i want to make a rectangle that i'm actually going to show on the screen for this body so the way i do that is i say my shape or i could say my polygon or my rectangle whatever i want to call let's go with shape is going to be equal to pie monk dot poly dot and i'm going to use this method here called create box and what create box will do is it will take in the body that i want this to be associated with or attached to as well as the size now i will also mention here that you can make some more complicated objects where you define this body and then you have multiple shapes or multiple polygons that you put onto the same body so just keep that in mind you can do that if you want to you can make some really cool and advanced shapes and we'll look at that when we actually create kind of that pendulum that has the circle as well as that line segment that's attached to that uh i don't even know you would call it like elastic or rope or whatever you want to say it is anyways now that we've done that all we actually need to do is just add this shape to our space so we're going to say space.add and we're going to add the body as well as the shape okay there we go all right so now we have created the boundaries again we make our body we set the position of the body then we make this shape the shape is attached to the body all right so now that we've added this we should be able to just call this function and actually see all of our boundaries on the screen so let's call this right after we make our ball so let's say create and then boundaries like that and what do i need to pass here i need to pass the space and the width and the height so let's pass space width and height and let's run the code and see what we get okay so notice now that my ball is going to stop because well it hit a floor and these are all our static bodies that are sitting around that are not being affected by gravity now just for experimental purposes here let's see what happens if i remove the static type so if i remove static here i do need to add a mass either to the body or to the shape so i'm going to say the shape dot mass is equal to 10 just so i don't get a crash but let's run this now and you'll notice that all of these are going to fall right because they are not stacked so let's go back to static i just wanted to prove to you this does indeed make it so they stay still alright so now that we've done that let's run this one more time and notice what happens when the ball hits the ground it just stops completely it doesn't bounce it doesn't roll now why is that happening well the reason that's happening is because there's no elasticity between the ball and between the floor so what i can actually do is add a property to both the ball as well as the floor called elasticity and that in this context here is going to relate to how bouncy either of these surfaces are so for my rectangles i probably don't want them to be too bouncy but i'm going to say shape dot elasticity and this will be equal to something like 0.4 and while i'm at it i can add a friction so i can add a friction like 0.4 or 0.5 and that's going to be the coefficient of friction between this and then anything else that hits it although the other objects that hit this will have a friction as well again please reference the documentation if you want to see exactly what all of these different properties mean and how they work it is slightly confusing and again i'm not mastering this module i'm just giving you a basic introduction okay so now we have our elasticity and our friction so i'm just going to go to my create ball and i need to add the same properties here but before we do that we can test it where and see what happens if we just add these two and don't change anything on the ball so notice now nothing happens because if one has an elasticity but the other doesn't it's just going to stay still so we need to add elasticity on the ball as well so i'm going to go here and say shape dot elasticity is equal to and then i want this to be pretty bouncy so i'm going to go with 0.9 now you can go higher than 1 if you want but if you do that you'll get some really weird results and essentially the higher the number you have here the more elastic or the more bouncy it's going to be so we have that for the ball elasticity and we're going to have shape dot friction and let's just make this equal to zero point and four and again higher number here is actually going to be the more friction lower number less friction that you have okay let's run this and see what we get and now notice that the ball actually bounces when it hits the floor so that's what we wanted didn't bounce a ton but if we were to increase the elasticity on both this shape here as well as this shape then you would see that it would bounce more okay so we now have a ball we now have our boundaries now let's make it so we can shoot the ball around the screen and once we do that we can add some obstacles to the screen or kind of structures that we can destroy or we can yeah i guess make them tumble over and that will pretty much wrap up the simulation for now okay so let's make it so we can shoot the ball so first i will show you how we kind of apply force to an object and then once you see how that works it'll be pretty easy to actually set up kind of the angles and make it so based on how far our mouse is from the ball that's the amount of power we get when we launch the ball so i want to add an event here so i'm going to say let's go like this if pygame dot event or not pi game.event if event dot type is equal to pygame dot and we're going to say mouse button down so if this is if you hit a mouse button okay mouse button down then what we will do is okay what the heck sorry i need to fix this mouse button down sorry about that if you press a mouse button then we will apply force to the object so the way that we apply force is we first need the object so in this case we have a ball so i'm going to say ball dot and then body dot and then this is going to be apply underscore force i think it's actually going to be apply impulse at underscore local something i got to look at what this method is because i forget exactly what it is but it is apply impulse at local points okay apply impulse at local point and then what we need to pass here is the amount of force that we want to apply so i'm going to apply a force of 10 000 and then 0 and then i need to say where on the object i want to apply it i want to apply it at the center so i'm going to pass 0 0. now let's take a step back here just so we understand what all of these different aspects are so first we see from create ball we are returning the shape so notice we're not returning the body we're returning the shape now the shape has an attribute on it called body so i'm going to say ball dot body to get access to the body because again all of the physics stuff is happening with the body not with the shape so i need to apply the impulse and when impulses is essentially a very quick force being applied to an object at a certain location so this is the force that i'm applying in the x direction i'm applying no force in the y direction and then i'm applying this at 0 0. now when i apply that at 0 0 it means the center of the ball if i wanted to apply it slightly i guess to the left of the ball or not directly in the center then i would change these different coordinates right here because i'm doing this at local point now i also can apply an impulse just at any location in my space again i'll point to the documentation to see exactly how to do all of that stuff but there's a bunch of functions here for applying forces to different objects this is just the one we're going to use right now okay so that's really all we need for now i just want to see what happens when we click the mouse essentially with our ball on the screen and if this force is going to be too little uh or too large and what will affect this force here is going to be the mass of the ball so where is our ball here well our mass actually we created right here so we have a mass of 10. if we increase this mass it will decrease what the force is going to do to this object because we need more force to move a heavier object right anyways let's just run this and let's see what we get okay and when i press the mouse button i gave me an error it said body object has no attribute apply impulse at local point well we should spell impulse correctly and that will probably fix it so impulse like that let's run the code let's click the mouse button and then notice it kind of launches our ball around it's applying the force at zero zero and the ball will actually spin nice there you go that is what happens when we apply our force okay so now that we've seen how to apply the force to the ball let's actually just make the force a little bit larger so let's make this like 50 000 and let's see if we get any weird errors or not okay actually that's working fine and notice that actually went through the ceiling so the reason that happened and why i wanted to show this to you is that if you apply or if you have a velocity that's really high in your simulation there's going to be a chance that between the two frames where your ball is moving in this case because it's a ball you don't actually end up finding a collision with an object because the ball moves way too quickly so essentially the way collision's working is every single frame you're checking if it's hitting an object now since the the ball is going to be moving so quickly what happens is it will start like maybe right close to the wall and then the next frame will already have moved outside of the wall and so you won't have seen that it collided with something because in one frame it moved whereas if you have a less velocity then you can actually check for a collision because you'll see that it actually goes inside of the wall then you can kind of pop it outside of the wall and make it bounce outwards or make it bounce off the wall hopefully that makes a bit of sense but i just want to show you if you have your velocities too high which happens when we apply this much force there's a probability that you could actually miss collision with an object especially if that object is very thin alright so now that we've looked at that i want to make it so we launch the ball at a specific angle based on where our mouse is relative to the ball same thing with the power that the ball gets that's going to be relative to how far the mouse is away from the ball so i want to write two functions up here that we're going to use in one second the first function is going to be calculate distance this is going to take in a point one and a point two and just return the absolute distance between these two points so the way i do this is i can return the math dot sqrt of and then this is going to be p2 at i guess 1 minus and then p1 at 1. now these are going to be tuples of x y positions okay we're going to raise this to the exponent 2 and then we're going to add this to the p1 of actually the p2 of 0 minus the p1 of 0 to the exponent 2. okay so that will give us the absolute distance between two points then i want to do something that gives me the angle between two points so i'm going to say define calculate and then angle and this is going to be p1 and p2 and i'm going to return the math dot then arc tangent 2 and then i need to do p2 at 1 minus this will be p1 at and then 1. and then this is going to be p2 at zero minus p2 or minus p1 at zero okay so what arc tangent two gives me is the angle in radians between these two points assuming that point two is located at zero zero so if point two is zero zero then point one is anywhere around point two and it gives you the angle between zero zero which is point two and then the other point hopefully that's clear but that's what arc tangent two does gives it to you in radians which we'll use so now that we have both of these things what i want to do is draw a line between my mouse and the ball whenever it's on the screen just so we can clearly see kind of what angle we're getting in the relative amount of power we'll draw that line onto the screen and then i will use the coordinates of the ball as well as the ending point of the line which is just going to be our mouse to determine the distance as well as to determine that angle so what i want to do and what you saw previously is i want to make it so when you click on the screen it spawns the ball wherever your mouse is that way we know the position of the ball and then we can use the position of the mouse and the ball to draw the line so on and so forth so the first thing i need to do here is i need to remove this ball equals create ball here because i only want to do that when i click down on the mouse so i'm going to make two variables here the first variable is going to be pressed underscore pause which for now is going to be equal to none and i'm going to say ball and it's going to be equal to none as well then in my pie game.mouse button down we'll comment this out for now and we'll say if not ball so if there's no ball currently on the screen then we want to create the ball so i'm going to say ball is equal to create ball and yeah that's fine for now now after i create the ball i want to say the pressed underscore position is equal to and this is going to be pygame dot mouse dot get underscore position and actually i need to use this when i create the ball because i want to place the ball at a certain position right so when i create the ball i'll pass this space i'll pass the radius the mass and then i will pass the position which will just be equal to pressed underscore pause so now i need to go here to when i'm making the ball i'm going to take in a position we're going to say body.position is equal to pause and that will put it directly in the center of our mouse which is what we want okay so now what should happen is when we click the mouse button it should create the ball add that to the screen or add that to the space and it should be exactly where our mouse is let's try this let's click and there you go it makes the ball and then it's not going to let me make another ball and the reason it doesn't let me do that is because i have the ball variable defined so this if statement is false or the condition here is false okay now that we've placed the ball though i want after we've placed it to be able to launch the ball and then additionally to be able to click again to delete the ball so i'm going to say if pressed position so if we have this variable here so i'll say lf press position then i want to launch the ball like that okay so if we have created the ball then we can launch it and then lastly i'm going to say else i want to say ball is equal to none and then the press position is equal to none as well so what happens now is if we don't have a ball we press it will create the ball if we have the ball so we have pressed position then we will launch the ball at the angle between our our mouse and the ball we haven't done that yet but that's what we'll do in a second and then lastly if we've just launched the ball when we click again it will delete the ball from the screen by removing ball and removing press pause now i also realized i have to do something here space dot and then remove and i need to remove the ball as well as the ball dot body from the screen okay so when i do this it should remove both of them for me uh from the space or from the screen okay hopefully that makes sense that's what we're doing here let's rerun and let's see what happens okay i click when i press it launches and when i press again for some reason it is not actually deleting the ball okay the reason for this is that i need to say pressed position is equal to none inside of here sorry and then remove it from here because this was never going to be set to none so i'm just constantly launching the ball now after we launch it once sets that equal to none so then we're able to actually set ball equal to none and then remove it and i can't set ball equal to none uh before i remove it so we want to remove this before we do that okay a few bugs but that's fine so let's rerun now let's see what we get launch and then it removes it from the screen then i hit okay launch removes from the screen launch removes from the screen nice that is all working okay now we just need to calculate those angles so what i'm going to do here is write a variable above here and i'm going to say line actually i'm going to say if the ball is on the screen then line is going to be equal to and this is going to be the pressed position as well as and then our pi game dot mouse dot get underscore pause but i want to actually swap these around here okay so i'm just putting the two coordinates i want to draw a line between so the mouse position as well as the ball and actually no i want it the other way sorry sorry about that uh this is the correct way i had to write the first time and then before this i'm going to say line is equal to none okay then what i want to do is pass this line to my draw function so then inside of draw we can draw the line onto the screen so now let's go here to our draw and let's take an a line and let's just go here and say if line so if we have a line so if it's not equal to none then what i will do is pi game dot draw dot line i want to draw this on my window what color do i want to draw this let's just draw the line in black and then we'll pass the position 1 and position 2 of the lines this will be line zero and line one to get the two different positions then i can pass the thickness of the line let's just go with the thickness of three okay that should draw the line for us i also want to put this before i draw this so it will be beneath my ball and beneath everything else we'll see if we want to change that or not but for now i want to draw it before this so this gets drawn over top of it so we'll have the line underneath the ball not over top of it okay now let's try this and let's see ah okay so we're getting an error here and the issue is that i set the press position of the ball right when the ball spawns on the screen but the ball is moving so since the ball has moved obviously now the position is different than it was before but my line is working from a static position so what i'm going to do is make it so that when i make my ball it's not going to be moving it's going to be static but then as soon as i'm about to launch it we will make it so it's no longer static it's dynamic and then it starts moving and we stop drawing the line all right that makes more sense to me so body is equal to pi monk dot body and then this is going to be body underscore type is equal to pi monk dot body dot static okay and then before we want to launch the ball we need to make it dynamic so what i can do here say ball dot and then this will be body dot body type is equal to and then pi monk dot body dot and then dynamic that changes the type for us and then here for my line i'm going to say if ball and pressed position because if i set the press position equal to none meaning i've just launched the ball i don't want to be drawing the line between my mouse and the ball because i can't launch it again i need to remove it and then replace it before i launch okay a lot going on but let's save let's rerun okay let's place this there we go we now have our line uh you can argue if you want the line above or below but now i can launch the ball nice okay so now that we've done that we need to launch it in the correct direction because it's just going to launch you know in the same direction every time okay so let's go here and let's now calculate the angle so i'm going to say the angle is equal to and this is going to be calculate and then underscore angle and i'm just going to pass this my asterix line which is going to break the line into the two different what he called elements in the list and pass those as p1 and p2 so this will give me an angle in radians then i want to use that angle in radians to calculate a force but the force is going to be based on the distance of the ball so i'm going to say my force is equal to and then this is going to be calculate force same thing sorry not calculate force calculate distance same thing i'm going to pass both the components of my line and i'm going to multiply this by 100 just so that we increase the amount of force now you can change this number if you want it to be less or more but there you go now that we have the force i want to break the force into the two individual components and that's based on the angle of the line so quickly we'll do a little illustration here so if my ball is here and my mouse is right here then we have kind of a triangle that looks like this this is a right triangle this is going to be my total force and i need to break that force into the two components so the x direction and the y now i know this angle theta and since i know this and it's a right triangle i can easily solve for y and x because i know both the force and the angle so there's these great shortcuts and just excuse me because i'm writing with my mouse here but we have so and then i have this toa okay now o stands for opposite h is hypotenuse and then a is adjacent and so if i want to calculate 4x for example this is adjacent to the angle that i'm talking about so i need to use cosine so i take the cos of my theta this is very very difficult to do with the mouse and then i multiply that by my force and that gives me x and then i do the same thing with sine for y so i take sine of theta multiplied by f and then that gives me the force in the y direction all right hopefully that makes sense quick trigonomic what do you want to call that lesson so we'll say fx is equal to and then i say we need to use cosine for this so it's going to be math.sine math.cosine of the angle multiplied by whatever this force is i'm going to say fy is equal to math.sine of the angle multiplied by the force and then here i can just pass my fx and fy and now the ball should shoot off in that direction okay so let's try this and let's spawn a ball and notice we shoot in that direction and it goes quite fast we might want to reduce how much we're multiplying the force by but let's try launching it like that okay so let's reduce the force slightly so rather multiplying by 100 let's multiply by 50. we also could increase the mass of the ball if we want and it would have the same effect but this is fine for now so if i go here now i launch okay that looks a bit better nice then we're bouncing off of the floor let's launch in that direction looks great all right so now that we have that the hard stuff is done all we have to do is draw a few objects on the screen that we want to be able to actually hit right that's it so let's do a function here and let's say define draw or create underscore structure okay and let's take in here the space the width and the height and then i will start designing kind of a few rectangles that we can interact with so let's say rex is equal to and let's place a few inside of here now i'm just going to copy some values that i have from the other screen so let me have a look at these here the first rectangle that i'm going to draw is going to be at 600 and then height minus 120 and then we're going to draw this at 40 and 200 and for the color here i'm actually gonna put my color up here this is going to be brown and this is going to be equal to 139 69 19 and 100 so our rgba value so i'm going to define my position my size the color of the rectangle which is going to be brown and then the mass of the rectangle which is going to be a hundred i did it slightly different for this because i didn't really care about the color of the mask but here i want a color and then we can adjust the mass and you'll see that those objects behave differently and will move more if they have a lighter mass when they get hit by the ball right okay so there we go that's the first rectangle that we want now let's copy this the second rectangle we want is going to be the exact same except rather than 600 we're going to place it at 900 so we're going to have kind of two vertical rectangles here that's what these two are and then i want to draw a rectangle that goes over top of those vertical rectangles and for that we're going to need a position of 700 or 750 sorry this is going to be height minus 240 and then we're going to have 340 as the width and 40 as the height and then this is going to be brown again and for the mass it's going to be slightly uh more because this is thicker so it's going to be 150. okay so we'll do the rest of the rectangles later but for now let's draw these out using a for loop so i'm going to say 4 and then this will be position size color mass and then in rex like that then we want to make a body the body will be equal to pie monk.body this is not going to be static we are then going to do the position so body dot position okay this is going to be equal to the position we're going to make our shape so i'm going to say shape is equal to and then this will be pi mock.poly.createbox perfect we'll pass our body and our size and then we'll say shape dot color is equal to the color shape dot mass is equal to mass and then we'll say shape dot elasticity and we can set this equal to something like maybe 0.4 and we can say the shape dot friction and again says to whatever we want let's just go with 0.4 okay now we want to add this to our space so i'm going to say space.add i'm going to add the body and i'm going to add the shape and that should be all we need for this create structure function if we want to add more structures or more rectangles we'll just put them inside of here we'll do that later okay so let's now run this function so let's say create and then this is going to be underscore structure pass the space with and height and i won't go through all of these different you know values that i came up with but you'll see how they look on the screen and then you can kind of adjust them and tweak them as you please so let's run this and see we get this structure right here now one thing i will show you is that if we want a nice outline for it what we can do is pass a radius to our shape so i can say radius is equal to one now this will add a curved edge if you make this really large but it also adds a uh what do you call it kind of border for the shape so here when i make radius equal to one now you can see that we actually get a nice border and if i say radius is equal to like 10 uh then we get a really thick border okay so it rounds the edge slightly as you can see but it's also the thickness of the border for the shape i don't want to be quite that large so let's maybe just go with two and that looks good to me okay let's make a ball let's launch it at it and nothing happened okay there you go something happened so let's launch here and i can actually take out the support and they're going to fall you know according to regular physics all right now that we have done that we did our structure let's just handle doing that kind of jointed object that you saw before kind of the swinging pendulum and then i'll probably leave it at that because you guys can kind of add whatever you want to this right it's very simple from there to kind of add more objects make more structures you have the the foundation done so let's make a function here and let's say define and let's go with create underscore pendulum i have no idea how you spell that let's just say create swinging ball there you go that's more in my vocabulary we'll take in the space we'll take in the actually i don't even care about the width and the height we'll just draw it at a static position here all right so here we're going to make a more advanced shape attached to our body and it's going to be attached to a joint that's fixed to the screen so we're going to have a body that's fixed to the screen it's going to be our kind of rotation center where they're going to have a joint between that and then our body that is not fixed that can actually move around the screen but the body that's not fixed is going to be a more complex shape because we're going to have a line segment in combination with a circle and so you'll see how we do more advanced polygons and shapes here in this example now i'm going to be reading from my other screen because i don't have all of this memorized if you see me looking over here that's what i'm doing just kind of referencing my code so i'm going to say rotation underscore center underscore body and this is going to be equal to a pi monk body and the body type is going to be pi monk dot body dot and then static because this is not going to move it's going to be that rotation axis right a rotation center body as i say here then i need to set the position of this so rotation center body is equal to set this wherever you want but i'm going to go with 300 300. okay now that we have that we want to make the actual swinging body so i'm going to say body is equal to and then pi monk dot body okay we need a position for this so we're going to say the body dot and then position is equal to and then i have this set at 300 300. now if you set this at the exact same position as the rotation center body then when we draw the joint you're not really going to see the joint you'll just swing around the axis because of the fact they're together however if i were to change this slightly so maybe i move the rotation body up and i make it like 270 now you'll actually see the joint between them but this is showing you how you can make something swing when you have a joint and again if you put this in the exact same position then our body is going to overlap with the rotation center body and so it's going to look like we're just swinging around a static point as opposed to having the joint that's connecting the two which you'll see in a minute it's going to be better to illustrate when we actually have a visual here but i just want to explain why i have the positions as i do so here we're going to say line is equal to pimonk dot and then this will actually be segment and we're going to pass to this the body and then the two positions of the line that we want to draw relative to the body so i'm going to say 0 0 which means the first position of our line is going to be right in the middle of the body and then the second position of my line is going to be 255 and 0 so x 255 and then 0 here okay then the next thing that we pass here is the thickness which i'll go with five now i'm going to make a circle so i'm going to say circle is equal to pi mark dot circle body 0 0 however i think i need a radius for this as well and actually yeah the radius comes first so i'm going to go radius now if i put this at 0 0 again this is relative to the body so this means the circle will be directly in the center of the body but i don't want that i actually want it to be at the end of the line segment so i'm going to pass this at 255 so now it'll be right at the end here of where this line segment is okay so now we have our circle now we have our line now what we can do is set friction for both of these things so i can say line dot friction is equal to one okay now you can say circle dot friction is equal to one and i can also add elasticity as well as mass so i'm going to say the line dot mass is equal to let's go with like eight and the circle.mass will be equal to thirty okay then we are going to add elasticity for the circle so i'm gonna say circle.elasticity is equal to 0.95 just so it bounces off of stuff and then we can bounce our ball off of this circle okay now that we've done that we want to create our joint so i'm going to say my rotation underscore center underscore and then joint is equal to and then pi monk dot and this is going to be called a pin joint there's some other types of joints and like springs and stuff that you can do but pin joints one we're going to do and then we have the two bodies that we want to connect so we want to connect our body as well as our rotation center body and then where do we want to connect on the two bodies relative to them well zero zero and zero zero so what these two arguments say here is okay on the body where do you want the joint to be connected when i say zero zero we're going to connect it in the center of the body and same thing here for the rotation center body now if i were to change this slightly i could make it so the joint would say attached to the very top of the body or the left side of the body or the right side of the body or really anywhere on it that i want so it's very flexible here with the join okay now that we have that i'm going to say space dot add and i'm going to add a bunch of things here i'm going to add my circle i'm going to add my line i'm going to add my body and i'm going to add my rotation center body oh sorry not rotation center body rotation center joint now notice here that i don't add the rotation center body now that's fine because there's no shape associated with the rotation center body it's simply there so we can use it in the joint so for the joint we have our body and our rotation center body so you will actually end up seeing something on the screen for the static joint but i don't want to draw the rotation center body onto the screen because we don't need to all right kind of hard to explain it more than that you can have a look at the pi mic documentation as i keep saying if you want to learn more for now though let's call this and let's see what happens so let's say create swinging ball and let's pass our space and then did i take a width and a height in here no uh no just a space okay so let's just take space all right let's run this and let's see what we get and we got an error it says tuple object has no attribute underscore body okay let me have a look here and see what the problem is all right i found the problem i'm sure many of you already saw this i forgot to put position here so i said rotation center body is equal to a tuple as as opposed to saying rotation center body dot position is equal to that so i change that fingers crossed it should work now let's run the code and there you go now you can see we get what i was talking about so i'm drawing the joint right so i have the two points of the joint and that's why i didn't need to draw the rotation center body because when i have the joint i'm automatically going to get that now let's just launch something off of here and obviously you know the physics work as we expect okay let's launch again we can bounce them off each other and now let me show you what happens if i remove the distance or the displacement between the the y in the joint so let's remove this and let's change it now so the rotation center body is at the same position as the body so now when i do this so now you can see it just looks like we're swinging around this static point you don't really see the joint there's like a slight tiny bit of movement based on the way it's implemented but it looks like we're just swinging on a static point okay so there you go that is really all i wanted to show you now i know in my example earlier i had some more objects but i figured you guys can easily add that you don't need to watch me for another 10 minutes just type in a bunch of lines of code and all the code that i wrote here will be available from the description so if you want to copy and paste it and edit it as you please this is really cool i'm planning on messing around with this module more and doing some more stuff in the future if you guys want to see more pie monk on this channel please do leave a comment let me know tell me what type of simulations you want to see what other videos you want to see on this channel always open to your feedback if you guys enjoyed this make sure to leave a like subscribe to the channel check out programming expert from the link in the description with that said i will see you in another youtube video you
