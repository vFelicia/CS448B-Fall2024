With timestamps:

00:00 - alright so in the previous video we
00:01 - talked about singly linked list now
00:03 - these are great and we just talked about
00:05 - the advantages of them over arrays and
00:07 - other types of data structures now I
00:09 - want to introduce the concept here of
00:11 - circular lists and this is going to
00:12 - apply to doubly linked lists which we'll
00:14 - talk about in the next video as well now
00:16 - I want you to think why we would use a
00:19 - circular list and what a circular list
00:21 - even is now what I mean by circular is
00:24 - that this last node here rather than
00:26 - pointing to null which it's been doing
00:28 - before because there's no next note
00:30 - after it it actually points back to the
00:33 - head node of our list so what actually
00:36 - happens here is that this next node is
00:39 - always pointing back to the head now
00:41 - before you continue on with this video I
00:42 - seriously urge you to just take a second
00:44 - and think why we would even want to do
00:47 - this can this offer speed be a thing can
00:50 - it make it easier to access things why
00:52 - would we do this and what way we need to
00:53 - modify even in the node or in the SSL
00:56 - clasp to make this worthwhile and then
00:58 - I'm gonna explain the answer in just a
00:59 - second all right so I hope you guys have
01:01 - thought about this now what I'm gonna do
01:03 - is just modify this sll class here and
01:06 - hopefully what I start doing will make
01:08 - sense to you guys but I want you to kind
01:10 - of figure it out on your own so this
01:11 - here is called the head of our list
01:14 - right and this is the node that right
01:16 - now we're storing in sll all we need is
01:18 - access to this head node and we can
01:20 - successfully traverse all of the
01:22 - different nodes until we reach the end
01:24 - node now immediately some of you might
01:27 - have started thinking well if we have
01:29 - this last node our traversal from the
01:31 - previous video isn't gonna work because
01:33 - in that traversal we had a while loop
01:34 - and we said something like wow current
01:37 - dot next doesn't equal no or while
01:42 - current so if you get rid of that dog
01:43 - next doesn't equal no but now we're
01:46 - never gonna have a null value because
01:48 - this last point here is always gonna be
01:50 - pointing to the head so this is why I'm
01:52 - gonna make a modification to my class
01:54 - and hopefully you guys can understand
01:56 - why in just a second and then I will
01:58 - we'll see how we can change this while
02:00 - loop to do a proper traversal of a
02:02 - circular list so what I'm gonna do now
02:05 - is rather than keeping track of what we
02:07 - called the head node I'm actually gonna
02:09 - keep track of the tail node in my SS
02:12 - l-class so what I want to do is I'm
02:14 - actually gonna have this tail node being
02:17 - pointed to by this tail attribute and
02:20 - rather than carrying it with the head
02:21 - which I don't care about anymore I'm
02:23 - just gonna carry with the tail now the
02:25 - reason I'm gonna do this is because if I
02:27 - have reference to the tail node that
02:29 - means that I actually have reference to
02:31 - the head node so by having reference to
02:34 - this this one here I also have reference
02:36 - to this now why is that good why
02:38 - wouldn't I just have reference to the
02:40 - head node well if I have reference to
02:42 - the front and the back of the list or
02:46 - the beginning or the end of the list
02:47 - that means I can perform operations on
02:49 - the beginning and the end of the list
02:51 - very quickly and that is something that
02:53 - is awesome to be able to do because
02:55 - previously if we wanted to say add
02:56 - something to the end of our list here
02:58 - well we we need to reverse the entire
03:00 - list to be able to do that and that
03:02 - would take o of n time but now if we
03:05 - have reference to this tail node since
03:08 - it points back to the head node if I
03:09 - want to add something at the beginning
03:10 - all I need to do and I'm just gonna
03:12 - erase a few things here to make this a
03:14 - little bit cleaner while I do this all I
03:16 - need to do if I want to add a new node
03:18 - at the beginning is make this pointer
03:20 - here I'm just going to erase it point to
03:22 - that new node so let's say I want to add
03:24 - a new node I'm just gonna draw it small
03:25 - so we can actually see it here say
03:26 - that's five and this is its next
03:28 - property well what I do is I set this
03:31 - node to be equal to tail dot next which
03:34 - is actually going to be equal to the
03:35 - head node so I pointed here so the next
03:37 - property points to there and then I
03:39 - change what we originally was pointing
03:41 - from there to point to this new node so
03:43 - I say you know what this next property
03:45 - here we're gonna point that to this new
03:47 - node and now I've successfully added
03:49 - something at the beginning of the list
03:50 - but now what if I want to add something
03:52 - to the end of the list so let's reverse
03:54 - all this and let's change and now see
03:56 - how you add something to the end so
03:58 - let's pretend this is circular right now
03:59 - and I want to add something to the end
04:01 - well I have reference this tail node I
04:04 - know where this tail node is so all I
04:05 - need to do is add a new node let's say
04:08 - we'll add it down here we'll call this
04:10 - one maybe value nine and I set its next
04:12 - property to the first node in my list so
04:15 - I set it to the head node or in this
04:16 - case the tail dot next right so tail dot
04:20 - next that's what I set it equal to the
04:23 - next property
04:24 - so this
04:25 - points over here to this and now all I
04:29 - do is I change this pointer on the end
04:31 - node to point to this new node which is
04:33 - gonna be the end node in our list so I
04:35 - know this looks kind of confusing now
04:36 - but anyways that goes to there so now
04:39 - this one here is now our new tail
04:41 - reference and we now point tail to here
04:44 - this new node and now since this one
04:46 - points to the head node it works the
04:48 - exact same and if I want to add
04:50 - something after it that's how I do it I
04:52 - simply just repeat that process if I
04:54 - want to add something before well I have
04:56 - access to this head node so I can add a
04:58 - new node pointing to that and then point
05:00 - the new node to this head node right and
05:02 - that's how we do it with a circular list
05:04 - now this offers a ton of advantages
05:06 - because that means that whenever we want
05:08 - to add something to the end of the list
05:09 - we no longer need to traverse the entire
05:12 - list and that is the reason that we use
05:15 - a circular lists are simply adding that
05:17 - one extra pointer that goes from the
05:19 - tail to the head and keeping reference
05:22 - of the tail instead of our head we're
05:24 - able to get that massive speed advantage
05:26 - while still using a singly linked list
05:27 - and not using a ton of memory in our
05:29 - computer which is one of the
05:31 - disadvantages of a doubly linked list
05:32 - which we'll talk about later so anyways
05:34 - now that we've done that let's kind of
05:36 - talk about how we can implement some of
05:38 - these methods with a little bit of
05:39 - pseudocode in case anyone's confused so
05:41 - I realized in the last video I was kind
05:43 - of cutting off some of the code on my
05:44 - webcam in the bottom right hand corner
05:46 - so I'll try to make sure it doesn't cut
05:47 - off here but if you haven't noticed my
05:49 - handwriting is absolutely horrible so
05:51 - anyways let's now try to write a method
05:54 - that could add something to the
05:56 - beginning of our list so let's say we
05:57 - want to add first that's the method we
05:59 - want to write now for our sll class well
06:02 - we have this tail node so what should we
06:04 - start by doing well we don't need to
06:06 - traverse the list because all we need to
06:08 - do is just change around a few pointers
06:10 - so what we're gonna start by doing is
06:12 - creating a new node so we'll say like N
06:13 - equals node and we'll say n dot value
06:19 - equals I don't know let's set it equal
06:21 - to a value of five and then all we can
06:23 - do is say n dot next is equal to in this
06:28 - case it's gonna be tail dot next right
06:30 - and I'll talk about that in a second but
06:32 - tail dot next because tail dot next is
06:36 - this head node and we're adding to the
06:38 - beginning we
06:39 - the next property of our new head node
06:41 - to be the the current head node right
06:43 - the first thing that's actually in our
06:45 - list right now so we said this next
06:47 - property of this node to go to here my
06:49 - name is hope that makes sense all right
06:51 - so now that we've done that what we can
06:53 - do is change this last node so this next
06:55 - property here on this one to point to
06:58 - our new node and then that's actually
06:59 - all we need to do and we don't even need
07:01 - to mess with the tail so now we're gonna
07:03 - say is tail dot next equals n and now
07:10 - what we've successfully done is we've
07:11 - slotted in a new node value v we pointed
07:15 - it over here to seven and that we've
07:16 - changed this pointer so scratch that off
07:18 - to go to this new node and this now will
07:21 - be our head node and since we keep track
07:23 - of the tail and tail dot next as this
07:24 - makes sense everything works as planned
07:27 - and that is how we write the pseudocode
07:28 - to add something to the beginning of the
07:30 - list all right so now what about the end
07:33 - and this is the advantage that we're
07:35 - gaining because we already knew kind of
07:37 - how to do that before but now we're
07:39 - gonna have to just change a little bit
07:40 - different things to add to the end here
07:42 - to make it all make sense so let me get
07:43 - this eraser out here and get rid of
07:45 - everything all right so let's erase I
07:51 - didn't want to do that let's get the
07:53 - stroke eraser okay let's remove actually
07:55 - now let's go back to the pointer okay so
07:58 - what we want to do now
07:58 - sorry about that is add a new node to
08:00 - the end so how do we do that well what
08:04 - we need to do is we need to change a few
08:06 - pointers around so firstly we need to
08:08 - make sure that we don't lose this head
08:10 - node so that's an important thing when
08:11 - we add this new node in and we point to
08:13 - it or we don't point to it we got to
08:15 - make sure we don't lose this head node
08:16 - so what I'm going to start by doing is
08:18 - creating a new node so I'm gonna say N
08:20 - equals node and then we'll say n dot
08:23 - value and maybe this time it equals
08:26 - negative one all right now the first
08:29 - thing we do so we've just created this
08:30 - new node I'll try to draw it so you guys
08:31 - can actually see it as a value of
08:33 - negative one and it has this next player
08:35 - we're gonna set its next pointer equal
08:37 - to the head node to start so that we
08:39 - don't lose this head node so we're gonna
08:41 - say n dot next equals tail dot
08:48 - next so that means now we have a pointer
08:50 - going here to the head node because tail
08:53 - dot next is that so this is pointing
08:54 - there now what we can do is well we can
08:57 - change the pointer of tail tail dot next
09:00 - to go to this new node so now we'll say
09:02 - tail dot next equals n all right so now
09:08 - let's go here let's go to stroke eraser
09:11 - and we'll erase this pointer and now
09:14 - what we've successfully done is we've
09:16 - changed the tail to point two here as
09:19 - our next node which is gonna be the last
09:20 - node in our list all right awesome and
09:22 - now what's the last step we need to do
09:24 - what we need to say that this is now
09:26 - gonna be the new tail because this has
09:28 - the pointer to the head and it's gonna
09:30 - be the last element so what we do for
09:32 - that is we say tail equals n and that's
09:36 - all we need to do to set this and add
09:38 - that to the end of the list and that is
09:40 - the massive advantage of circle circular
09:42 - lists is that you're able to access both
09:44 - the front and the back element which
09:46 - means you can apply operations at the
09:48 - front and end of the list in the same
09:50 - time complexity of constant time now the
09:53 - only thing to note here is that if
09:55 - removing an element from the end of the
09:57 - list it still takes o n time now the
10:00 - reason that happens is because if you
10:02 - think about this say we want to remove
10:04 - this last element here which is actually
10:07 - the tail element right this is our tail
10:09 - so I'll just write tail if I want to
10:11 - remove this what I need to do is I need
10:14 - to find the node before it that points
10:17 - to it and change its pointer to go to
10:19 - the head node so to do that I actually
10:22 - need to traverse the entire list and
10:24 - that's because we only have this linked
10:28 - forwards which means that I can't by
10:30 - having the tail element access the
10:32 - element before it which means I can't
10:33 - access that pointer so if I want to
10:36 - remove an element I don't know why
10:38 - that's happening anyways if I want to
10:40 - remove an element from the end of the
10:41 - list or I want to remove the tail
10:42 - element that still takes o n time but if
10:45 - I want to remove an element from the
10:47 - beginning of the list that isn't going
10:49 - to take Oh n time because all I need to
10:50 - do to remove that is change the pointer
10:53 - here to be the element that it's
10:55 - pointing to which we can do because we
10:57 - have access to that front element as
10:59 - well as this tail
11:01 - so anyways that has been it for circular
11:02 - lists I hope you guys learned a little
11:04 - bit in the next video we will talk about
11:05 - doubly linked lists which are more
11:08 - complex and they have their own
11:09 - advantages over singly linked lists you
11:11 - guys have any other data structures
11:12 - you'd like to hear below please let me
11:14 - know and with that being said make sure
11:15 - to hit the like button and subscribe to
11:17 - the channel for more videos

Cleaned transcript:

alright so in the previous video we talked about singly linked list now these are great and we just talked about the advantages of them over arrays and other types of data structures now I want to introduce the concept here of circular lists and this is going to apply to doubly linked lists which we'll talk about in the next video as well now I want you to think why we would use a circular list and what a circular list even is now what I mean by circular is that this last node here rather than pointing to null which it's been doing before because there's no next note after it it actually points back to the head node of our list so what actually happens here is that this next node is always pointing back to the head now before you continue on with this video I seriously urge you to just take a second and think why we would even want to do this can this offer speed be a thing can it make it easier to access things why would we do this and what way we need to modify even in the node or in the SSL clasp to make this worthwhile and then I'm gonna explain the answer in just a second all right so I hope you guys have thought about this now what I'm gonna do is just modify this sll class here and hopefully what I start doing will make sense to you guys but I want you to kind of figure it out on your own so this here is called the head of our list right and this is the node that right now we're storing in sll all we need is access to this head node and we can successfully traverse all of the different nodes until we reach the end node now immediately some of you might have started thinking well if we have this last node our traversal from the previous video isn't gonna work because in that traversal we had a while loop and we said something like wow current dot next doesn't equal no or while current so if you get rid of that dog next doesn't equal no but now we're never gonna have a null value because this last point here is always gonna be pointing to the head so this is why I'm gonna make a modification to my class and hopefully you guys can understand why in just a second and then I will we'll see how we can change this while loop to do a proper traversal of a circular list so what I'm gonna do now is rather than keeping track of what we called the head node I'm actually gonna keep track of the tail node in my SS lclass so what I want to do is I'm actually gonna have this tail node being pointed to by this tail attribute and rather than carrying it with the head which I don't care about anymore I'm just gonna carry with the tail now the reason I'm gonna do this is because if I have reference to the tail node that means that I actually have reference to the head node so by having reference to this this one here I also have reference to this now why is that good why wouldn't I just have reference to the head node well if I have reference to the front and the back of the list or the beginning or the end of the list that means I can perform operations on the beginning and the end of the list very quickly and that is something that is awesome to be able to do because previously if we wanted to say add something to the end of our list here well we we need to reverse the entire list to be able to do that and that would take o of n time but now if we have reference to this tail node since it points back to the head node if I want to add something at the beginning all I need to do and I'm just gonna erase a few things here to make this a little bit cleaner while I do this all I need to do if I want to add a new node at the beginning is make this pointer here I'm just going to erase it point to that new node so let's say I want to add a new node I'm just gonna draw it small so we can actually see it here say that's five and this is its next property well what I do is I set this node to be equal to tail dot next which is actually going to be equal to the head node so I pointed here so the next property points to there and then I change what we originally was pointing from there to point to this new node so I say you know what this next property here we're gonna point that to this new node and now I've successfully added something at the beginning of the list but now what if I want to add something to the end of the list so let's reverse all this and let's change and now see how you add something to the end so let's pretend this is circular right now and I want to add something to the end well I have reference this tail node I know where this tail node is so all I need to do is add a new node let's say we'll add it down here we'll call this one maybe value nine and I set its next property to the first node in my list so I set it to the head node or in this case the tail dot next right so tail dot next that's what I set it equal to the next property so this points over here to this and now all I do is I change this pointer on the end node to point to this new node which is gonna be the end node in our list so I know this looks kind of confusing now but anyways that goes to there so now this one here is now our new tail reference and we now point tail to here this new node and now since this one points to the head node it works the exact same and if I want to add something after it that's how I do it I simply just repeat that process if I want to add something before well I have access to this head node so I can add a new node pointing to that and then point the new node to this head node right and that's how we do it with a circular list now this offers a ton of advantages because that means that whenever we want to add something to the end of the list we no longer need to traverse the entire list and that is the reason that we use a circular lists are simply adding that one extra pointer that goes from the tail to the head and keeping reference of the tail instead of our head we're able to get that massive speed advantage while still using a singly linked list and not using a ton of memory in our computer which is one of the disadvantages of a doubly linked list which we'll talk about later so anyways now that we've done that let's kind of talk about how we can implement some of these methods with a little bit of pseudocode in case anyone's confused so I realized in the last video I was kind of cutting off some of the code on my webcam in the bottom right hand corner so I'll try to make sure it doesn't cut off here but if you haven't noticed my handwriting is absolutely horrible so anyways let's now try to write a method that could add something to the beginning of our list so let's say we want to add first that's the method we want to write now for our sll class well we have this tail node so what should we start by doing well we don't need to traverse the list because all we need to do is just change around a few pointers so what we're gonna start by doing is creating a new node so we'll say like N equals node and we'll say n dot value equals I don't know let's set it equal to a value of five and then all we can do is say n dot next is equal to in this case it's gonna be tail dot next right and I'll talk about that in a second but tail dot next because tail dot next is this head node and we're adding to the beginning we the next property of our new head node to be the the current head node right the first thing that's actually in our list right now so we said this next property of this node to go to here my name is hope that makes sense all right so now that we've done that what we can do is change this last node so this next property here on this one to point to our new node and then that's actually all we need to do and we don't even need to mess with the tail so now we're gonna say is tail dot next equals n and now what we've successfully done is we've slotted in a new node value v we pointed it over here to seven and that we've changed this pointer so scratch that off to go to this new node and this now will be our head node and since we keep track of the tail and tail dot next as this makes sense everything works as planned and that is how we write the pseudocode to add something to the beginning of the list all right so now what about the end and this is the advantage that we're gaining because we already knew kind of how to do that before but now we're gonna have to just change a little bit different things to add to the end here to make it all make sense so let me get this eraser out here and get rid of everything all right so let's erase I didn't want to do that let's get the stroke eraser okay let's remove actually now let's go back to the pointer okay so what we want to do now sorry about that is add a new node to the end so how do we do that well what we need to do is we need to change a few pointers around so firstly we need to make sure that we don't lose this head node so that's an important thing when we add this new node in and we point to it or we don't point to it we got to make sure we don't lose this head node so what I'm going to start by doing is creating a new node so I'm gonna say N equals node and then we'll say n dot value and maybe this time it equals negative one all right now the first thing we do so we've just created this new node I'll try to draw it so you guys can actually see it as a value of negative one and it has this next player we're gonna set its next pointer equal to the head node to start so that we don't lose this head node so we're gonna say n dot next equals tail dot next so that means now we have a pointer going here to the head node because tail dot next is that so this is pointing there now what we can do is well we can change the pointer of tail tail dot next to go to this new node so now we'll say tail dot next equals n all right so now let's go here let's go to stroke eraser and we'll erase this pointer and now what we've successfully done is we've changed the tail to point two here as our next node which is gonna be the last node in our list all right awesome and now what's the last step we need to do what we need to say that this is now gonna be the new tail because this has the pointer to the head and it's gonna be the last element so what we do for that is we say tail equals n and that's all we need to do to set this and add that to the end of the list and that is the massive advantage of circle circular lists is that you're able to access both the front and the back element which means you can apply operations at the front and end of the list in the same time complexity of constant time now the only thing to note here is that if removing an element from the end of the list it still takes o n time now the reason that happens is because if you think about this say we want to remove this last element here which is actually the tail element right this is our tail so I'll just write tail if I want to remove this what I need to do is I need to find the node before it that points to it and change its pointer to go to the head node so to do that I actually need to traverse the entire list and that's because we only have this linked forwards which means that I can't by having the tail element access the element before it which means I can't access that pointer so if I want to remove an element I don't know why that's happening anyways if I want to remove an element from the end of the list or I want to remove the tail element that still takes o n time but if I want to remove an element from the beginning of the list that isn't going to take Oh n time because all I need to do to remove that is change the pointer here to be the element that it's pointing to which we can do because we have access to that front element as well as this tail so anyways that has been it for circular lists I hope you guys learned a little bit in the next video we will talk about doubly linked lists which are more complex and they have their own advantages over singly linked lists you guys have any other data structures you'd like to hear below please let me know and with that being said make sure to hit the like button and subscribe to the channel for more videos
