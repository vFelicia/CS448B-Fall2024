With timestamps:

00:00 - in this video I'm going to be showing
00:02 - you how to log user key presses and save
00:05 - those key presses in a meaningful way in
00:07 - a text file now the module that we're
00:09 - going to be using for this is PI input
00:11 - you can see right here this is what it's
00:13 - called it is a third party module not
00:15 - included with the default installation
00:16 - of Python which means our first step in
00:18 - this video is going to be installing PI
00:20 - input so what we need to do is obviously
00:23 - we have to go to our command prompt
00:25 - because rich can use pip to do this
00:26 - pretty straightforward bring up your
00:28 - command prompt simply type pip install
00:31 - and then PI and input okay so just
00:35 - forget the I there wait for that to run
00:37 - and once I goes through you should have
00:39 - pi input insult for some reason your pip
00:42 - is not working
00:43 - reinstall Python and when you reinstall
00:46 - python make sure you add or check the
00:49 - box that says add python to path and
00:51 - install pip okay and that should fix
00:54 - your issue if you're having any other
00:55 - problems leave a comment down below
00:56 - okay so we're first what we need to do
00:58 - is we're gonna set up a we need to
01:01 - actually bring these imports in so we
01:03 - need to import PI input and then from PI
01:05 - input keyboard we're gonna import key
01:07 - and we're gonna input listener now
01:09 - listener is what's gonna listen for our
01:11 - key events so let's start by writing
01:12 - that so what we need to do is we're just
01:14 - going to say with and then listener then
01:18 - we're gonna have some brackets like this
01:19 - and we're gonna say on underscore press
01:21 - equals on underscore press just follow
01:24 - along with this for one second and then
01:26 - on underscore release is gonna equal on
01:29 - underscore
01:30 - release like that now these on press and
01:34 - on release are what we're gonna code in
01:36 - just a second and these are gonna be the
01:37 - functions that are called when a key is
01:39 - pressed and when a key is released feel
01:41 - free to change these names if you'd like
01:43 - to okay and we're just gonna say as now
01:46 - listener except this is gonna be lower
01:49 - case and then in this loop we're simply
01:51 - gonna do listener dot join okay and what
01:54 - this is going to do is just constantly
01:56 - keep running this loop until we break
01:58 - out of it and you'll see that in a
01:59 - second so now I need to create two
02:01 - functions on press and on release so
02:03 - we're gonna do is we're gonna say define
02:04 - on press this is going to take a key and
02:08 - it will just pass in here and then we're
02:10 - going to define on
02:11 - release same thing in here a key and we
02:15 - will pass now actually what we're gonna
02:18 - do on on press is we're just gonna print
02:20 - out the key just so we can see this
02:22 - working first of all and then we'll move
02:24 - into some other stuffs we're just gonna
02:25 - print and then this is a fancy way to
02:27 - print this key out you don't have to do
02:29 - it this way if you don't want to but
02:31 - we're just gonna dot format this with
02:34 - key so that it throws it in there like
02:38 - that okay so this is just simply gonna
02:39 - put key in our string okay so on release
02:43 - we're gonna add one bit of functionality
02:45 - just to make sure that we're able to
02:46 - break out of this loop and you will see
02:50 - that in one second so we're gonna say if
02:53 - key equals equals key dot and then ESC
02:58 - which stands for escape we're going to
03:00 - return false and all this is gonna do is
03:03 - break out of this loop if we hit the
03:04 - Escape key
03:05 - so now let's test our program and see if
03:07 - everything is working okay so we can see
03:10 - that we get the window up here and if I
03:11 - start typing some stuff you can see it
03:13 - says jsj SS and then it just tells me
03:16 - exactly what keys I hit now if I hit
03:18 - like the shift key or the caps lock key
03:20 - it'll tell me all those as well okay so
03:23 - now that we have that that's great but
03:25 - we want to actually do something
03:26 - meaningful with this so right now it's
03:28 - just giving us like a bunch of letters
03:29 - and these keys like this we want to save
03:31 - this into probably a text file or
03:34 - something that we're gonna be able to
03:35 - look at because most likely if you're
03:37 - creating a key logger you probably want
03:39 - to do something with the keys that are
03:40 - being pressed so what I'm gonna do is
03:43 - I'm gonna implement a few variables here
03:45 - and explain what they do in just a
03:46 - second so I'm just gonna start by saying
03:48 - count equals zero Keys equals a blank
03:51 - list and then inside of on press I'm
03:54 - going to say global keys and count now
03:58 - I'm also gonna create another function
04:00 - here and this one is gonna be called
04:02 - write underscore file and what this is
04:04 - gonna do is exactly what it says it's
04:05 - going to write to a file so what we're
04:08 - gonna say is going to say with open and
04:10 - then a text file name whatever you want
04:12 - in this case mines log txt and then
04:15 - we're gonna put a mode here okay now if
04:17 - the first time you're running this you
04:18 - don't have a text file created and
04:19 - you're too lazy to make one cold for
04:21 - whatever you want to call it just put
04:23 - this as W because what W
04:25 - it means right and if that file does not
04:27 - exist it's simply going to create one so
04:30 - the first time you run it W works fine
04:32 - but after that you have to use a okay
04:33 - we're gonna do with open log dot txt it
04:36 - in append mode that's what that stands
04:39 - for as F and sorry this needs to take
04:42 - keys and all we're gonna do in here is
04:45 - we're gonna loop through all the keys
04:46 - and we're just gonna write them into the
04:47 - file so for key and keys and then we'll
04:51 - simply do F right key like that and this
04:56 - is going to write all of our keys into
04:58 - the file for us now you might ask well
05:00 - okay what's the point of this keys list
05:01 - and this count variable well the thing
05:04 - is if our user somehow able is able to
05:07 - break the program or like quit out of
05:09 - the program we want to make sure that
05:11 - we're not just writing this at the end
05:13 - because say for example the users on the
05:14 - computer for like an hour
05:16 - and they're typing stuff and we're
05:17 - storing all their keys in this key list
05:19 - and then all of a sudden they quit the
05:22 - program somehow without hitting the
05:23 - Escape key none of that is gonna be
05:24 - written to the text file so what this
05:26 - count variable is gonna allow us to do
05:27 - when I implemented it in just a second
05:29 - is every so many keys we're going to
05:32 - update the text file so this way we're
05:33 - not constantly rewriting it every second
05:35 - but after the user hits a certain amount
05:37 - of keys then we're going to load that or
05:39 - write all that data into the text file
05:41 - so I guess I should probably add to our
05:44 - keys list if we're gonna be using that
05:46 - so whenever the user hits a key we're
05:48 - just gonna do keys dot append that key
05:51 - we're gonna add one to count so count
05:53 - plus equals count plus equals one like
05:56 - that and we can continue to print this
05:58 - if you want although it's not gonna be
05:59 - necessary because everything is gonna go
06:00 - in our log txt file now what I'm also
06:03 - going to do in fear is I'm just gonna
06:04 - throw a little if statement I'm gonna
06:06 - say if count is greater than or equal to
06:08 - and you can pick what number you want to
06:11 - do here I'm just gonna pick 10 so this
06:13 - means every 10 keys is how often we're
06:15 - gonna update the file now obviously if
06:17 - you think this can be running for a long
06:18 - time we I'm gonna make this longer or
06:20 - larger you could make it one you could
06:23 - not have the count variable if you want
06:24 - do whatever you want for this okay now I
06:26 - say we're gonna reset our count equals
06:29 - zero we're going to write to our file
06:31 - passing it our keys list which is up
06:34 - here and it's gonna have stored all
06:35 - these keys and then we're just gonna
06:36 - reset keys and keys
06:38 - egle to blink like this okay so that is
06:41 - I think at least should be working let's
06:45 - try this out oh wow the whole time I was
06:48 - typing that was recording my keys okay
06:50 - anyways let's see here if I start typing
06:53 - hello my name is oh and we get an issue
06:57 - right argument must be a string not key
06:59 - code I forgot about that so pretty much
07:02 - in here just getting mad at us because
07:03 - we don't have string so just throw
07:05 - string in there and then it should work
07:06 - okay let's try this again okay and hit
07:13 - escape and then we're gonna go in long
07:15 - txt okay and here we go so that was from
07:17 - previous runs and now look at this well
07:21 - it did what we wanted it to do it
07:22 - printed all the things into our text
07:24 - file but this is not meaningful
07:26 - information and we probably want it to
07:28 - look a little bit better than this and
07:29 - not have quotations and not have
07:30 - backspace keys so I'm gonna show you how
07:32 - we can do that right now so let's just
07:34 - clear this file save that and now let's
07:38 - deal with right file here so we're not
07:40 - writing these ridiculous characters into
07:42 - our text file so what I want to do is I
07:45 - want to write each word that the user
07:46 - types into one line so the way I'm gonna
07:49 - do that is every time the user hits the
07:50 - space key I'm going to add a new line to
07:53 - the file so first of all what I want to
07:55 - do is every time we're looping through
07:57 - keys I'm going to say K is equal to STR
08:01 - key and I'm gonna say dot not remove
08:05 - replace and then quotation comma blank
08:09 - space now what this does is removes the
08:12 - quotation marks so if you remember int
08:13 - and here we had something that looked
08:15 - like actually was single quotation marks
08:17 - my bad like three like if you hit that
08:20 - that key would come up and go taste
08:22 - remark so this is just gonna remove that
08:23 - for us I don't know why it shows up in
08:25 - quotation marks but anyways so that's
08:27 - gonna turn it into a string replace the
08:29 - quotation marks now that we have it in a
08:31 - form that we can read properly or first
08:33 - of all just going to check if this is a
08:35 - space character so if the user hit the
08:37 - spacebar so the way that we can do this
08:40 - we can say if K dot find this is kind of
08:44 - the cheap way to do it but we're just
08:45 - going to do this dot Speight space in
08:48 - here equals equals we're actually is
08:51 - greater than zero
08:52 - so what this fine is gonna do is it's
08:54 - gonna look in the key because whenever
08:56 - we hit the spacebar it doesn't like this
08:58 - does like key dot space okay that's
09:01 - what's returned does key so we're gonna
09:03 - look for space in our string we're gonna
09:06 - find that if it occurs more than one are
09:09 - more than zero times so once then we're
09:11 - going to write a space character to our
09:15 - line so in this case we're actually just
09:17 - gonna add a new line the way we add a
09:19 - new line in a file is just backslash n
09:20 - this just a notes like go to the next
09:22 - line okay all right after this we're
09:25 - also gonna check so it could space
09:27 - that's fine
09:28 - but if it is any of the other keys like
09:30 - command shift backspace we don't want to
09:33 - write that into our file we don't want
09:35 - it to say like backspace or command so
09:37 - I'm just gonna say if and then when I
09:39 - say L if K dot find and then key equals
09:46 - equals negative one now what happens in
09:48 - find is if it doesn't find the string
09:51 - that you're looking for and I guess I
09:53 - better actually put a capital cakes I'm
09:55 - pretty sure it's capital then it returns
09:57 - us a negative one value so if key does
09:59 - not exist meaning that we hit a key like
10:01 - QW like any of the letters of the number
10:04 - keys then we will simply write that into
10:06 - the phone
10:06 - so we'll say F thought right and then
10:08 - whatever K was so that key okay
10:11 - and I will just show you this working
10:14 - now and then explain it really quickly
10:15 - so if we run this I start typing hello
10:18 - my name is and I'll backspace a few
10:22 - times space add some stuff okay
10:24 - and get rid of all of that and close the
10:28 - file or close the program sorry you can
10:31 - see we get why hello my name is space
10:33 - space space space space space hello and
10:36 - then we get a bunch of our spaces and
10:38 - that is because whenever you hit the
10:40 - space key right it's adding a new line
10:42 - so we could now check if the line before
10:45 - that is blank then let's not continue to
10:48 - do that or whatever like stuff like that
10:50 - and you can continue in checking all
10:51 - these different keys and seeing what
10:53 - they are but this is all I'm gonna show
10:55 - you for right now knowing this you have
10:57 - a basis for how to get keys how to store
10:59 - them in a text file and you guys can
11:01 - play around with creating a better key
11:03 - logger I don't to make this video too
11:04 - long so
11:06 - that's all I'm going to show you today
11:07 - if this helped you out please make sure
11:08 - you leave a like and subscribe I'll see
11:10 - you again in another tutorial
11:13 - [Music]

Cleaned transcript:

in this video I'm going to be showing you how to log user key presses and save those key presses in a meaningful way in a text file now the module that we're going to be using for this is PI input you can see right here this is what it's called it is a third party module not included with the default installation of Python which means our first step in this video is going to be installing PI input so what we need to do is obviously we have to go to our command prompt because rich can use pip to do this pretty straightforward bring up your command prompt simply type pip install and then PI and input okay so just forget the I there wait for that to run and once I goes through you should have pi input insult for some reason your pip is not working reinstall Python and when you reinstall python make sure you add or check the box that says add python to path and install pip okay and that should fix your issue if you're having any other problems leave a comment down below okay so we're first what we need to do is we're gonna set up a we need to actually bring these imports in so we need to import PI input and then from PI input keyboard we're gonna import key and we're gonna input listener now listener is what's gonna listen for our key events so let's start by writing that so what we need to do is we're just going to say with and then listener then we're gonna have some brackets like this and we're gonna say on underscore press equals on underscore press just follow along with this for one second and then on underscore release is gonna equal on underscore release like that now these on press and on release are what we're gonna code in just a second and these are gonna be the functions that are called when a key is pressed and when a key is released feel free to change these names if you'd like to okay and we're just gonna say as now listener except this is gonna be lower case and then in this loop we're simply gonna do listener dot join okay and what this is going to do is just constantly keep running this loop until we break out of it and you'll see that in a second so now I need to create two functions on press and on release so we're gonna do is we're gonna say define on press this is going to take a key and it will just pass in here and then we're going to define on release same thing in here a key and we will pass now actually what we're gonna do on on press is we're just gonna print out the key just so we can see this working first of all and then we'll move into some other stuffs we're just gonna print and then this is a fancy way to print this key out you don't have to do it this way if you don't want to but we're just gonna dot format this with key so that it throws it in there like that okay so this is just simply gonna put key in our string okay so on release we're gonna add one bit of functionality just to make sure that we're able to break out of this loop and you will see that in one second so we're gonna say if key equals equals key dot and then ESC which stands for escape we're going to return false and all this is gonna do is break out of this loop if we hit the Escape key so now let's test our program and see if everything is working okay so we can see that we get the window up here and if I start typing some stuff you can see it says jsj SS and then it just tells me exactly what keys I hit now if I hit like the shift key or the caps lock key it'll tell me all those as well okay so now that we have that that's great but we want to actually do something meaningful with this so right now it's just giving us like a bunch of letters and these keys like this we want to save this into probably a text file or something that we're gonna be able to look at because most likely if you're creating a key logger you probably want to do something with the keys that are being pressed so what I'm gonna do is I'm gonna implement a few variables here and explain what they do in just a second so I'm just gonna start by saying count equals zero Keys equals a blank list and then inside of on press I'm going to say global keys and count now I'm also gonna create another function here and this one is gonna be called write underscore file and what this is gonna do is exactly what it says it's going to write to a file so what we're gonna say is going to say with open and then a text file name whatever you want in this case mines log txt and then we're gonna put a mode here okay now if the first time you're running this you don't have a text file created and you're too lazy to make one cold for whatever you want to call it just put this as W because what W it means right and if that file does not exist it's simply going to create one so the first time you run it W works fine but after that you have to use a okay we're gonna do with open log dot txt it in append mode that's what that stands for as F and sorry this needs to take keys and all we're gonna do in here is we're gonna loop through all the keys and we're just gonna write them into the file so for key and keys and then we'll simply do F right key like that and this is going to write all of our keys into the file for us now you might ask well okay what's the point of this keys list and this count variable well the thing is if our user somehow able is able to break the program or like quit out of the program we want to make sure that we're not just writing this at the end because say for example the users on the computer for like an hour and they're typing stuff and we're storing all their keys in this key list and then all of a sudden they quit the program somehow without hitting the Escape key none of that is gonna be written to the text file so what this count variable is gonna allow us to do when I implemented it in just a second is every so many keys we're going to update the text file so this way we're not constantly rewriting it every second but after the user hits a certain amount of keys then we're going to load that or write all that data into the text file so I guess I should probably add to our keys list if we're gonna be using that so whenever the user hits a key we're just gonna do keys dot append that key we're gonna add one to count so count plus equals count plus equals one like that and we can continue to print this if you want although it's not gonna be necessary because everything is gonna go in our log txt file now what I'm also going to do in fear is I'm just gonna throw a little if statement I'm gonna say if count is greater than or equal to and you can pick what number you want to do here I'm just gonna pick 10 so this means every 10 keys is how often we're gonna update the file now obviously if you think this can be running for a long time we I'm gonna make this longer or larger you could make it one you could not have the count variable if you want do whatever you want for this okay now I say we're gonna reset our count equals zero we're going to write to our file passing it our keys list which is up here and it's gonna have stored all these keys and then we're just gonna reset keys and keys egle to blink like this okay so that is I think at least should be working let's try this out oh wow the whole time I was typing that was recording my keys okay anyways let's see here if I start typing hello my name is oh and we get an issue right argument must be a string not key code I forgot about that so pretty much in here just getting mad at us because we don't have string so just throw string in there and then it should work okay let's try this again okay and hit escape and then we're gonna go in long txt okay and here we go so that was from previous runs and now look at this well it did what we wanted it to do it printed all the things into our text file but this is not meaningful information and we probably want it to look a little bit better than this and not have quotations and not have backspace keys so I'm gonna show you how we can do that right now so let's just clear this file save that and now let's deal with right file here so we're not writing these ridiculous characters into our text file so what I want to do is I want to write each word that the user types into one line so the way I'm gonna do that is every time the user hits the space key I'm going to add a new line to the file so first of all what I want to do is every time we're looping through keys I'm going to say K is equal to STR key and I'm gonna say dot not remove replace and then quotation comma blank space now what this does is removes the quotation marks so if you remember int and here we had something that looked like actually was single quotation marks my bad like three like if you hit that that key would come up and go taste remark so this is just gonna remove that for us I don't know why it shows up in quotation marks but anyways so that's gonna turn it into a string replace the quotation marks now that we have it in a form that we can read properly or first of all just going to check if this is a space character so if the user hit the spacebar so the way that we can do this we can say if K dot find this is kind of the cheap way to do it but we're just going to do this dot Speight space in here equals equals we're actually is greater than zero so what this fine is gonna do is it's gonna look in the key because whenever we hit the spacebar it doesn't like this does like key dot space okay that's what's returned does key so we're gonna look for space in our string we're gonna find that if it occurs more than one are more than zero times so once then we're going to write a space character to our line so in this case we're actually just gonna add a new line the way we add a new line in a file is just backslash n this just a notes like go to the next line okay all right after this we're also gonna check so it could space that's fine but if it is any of the other keys like command shift backspace we don't want to write that into our file we don't want it to say like backspace or command so I'm just gonna say if and then when I say L if K dot find and then key equals equals negative one now what happens in find is if it doesn't find the string that you're looking for and I guess I better actually put a capital cakes I'm pretty sure it's capital then it returns us a negative one value so if key does not exist meaning that we hit a key like QW like any of the letters of the number keys then we will simply write that into the phone so we'll say F thought right and then whatever K was so that key okay and I will just show you this working now and then explain it really quickly so if we run this I start typing hello my name is and I'll backspace a few times space add some stuff okay and get rid of all of that and close the file or close the program sorry you can see we get why hello my name is space space space space space space hello and then we get a bunch of our spaces and that is because whenever you hit the space key right it's adding a new line so we could now check if the line before that is blank then let's not continue to do that or whatever like stuff like that and you can continue in checking all these different keys and seeing what they are but this is all I'm gonna show you for right now knowing this you have a basis for how to get keys how to store them in a text file and you guys can play around with creating a better key logger I don't to make this video too long so that's all I'm going to show you today if this helped you out please make sure you leave a like and subscribe I'll see you again in another tutorial
