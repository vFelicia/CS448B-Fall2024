With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - slack bot
00:11 - tutorial so in this video we're going to
00:13 - be talking about how to schedule
00:14 - messages how to delete scheduled
00:16 - messages
00:16 - and how to view a list of all of the
00:18 - messages that we have
00:20 - scheduled uh this hopefully shouldn't
00:21 - take too long and right now i am
00:23 - planning on this being the last video in
00:25 - the series
00:26 - i feel like i've covered a really good
00:27 - kind of fundamentals of all the stuff
00:29 - you need to know to get started with
00:31 - this
00:31 - and the goal of all my tutorial series
00:33 - usually is to give you guys kind of the
00:34 - basics show you how a few of the things
00:36 - are done
00:37 - and then let you kind of expand your
00:38 - knowledge on your own and just give you
00:39 - a good foundation so you're not lost
00:41 - jumping into a new thing
00:42 - so anyways let me know if you guys want
00:44 - to see some other things i will mention
00:45 - that to host the bot like this
00:47 - you will just simply need to host a
00:49 - website with a domain and then
00:51 - run what we have going on right i mean
00:53 - we have a flask server this is
00:54 - pretty much a web server that's just
00:57 - running an api on it
00:58 - so what you can do is host this like you
01:00 - would host any other website
01:01 - set up a domain and then simply replace
01:03 - all of the ngrok links that we've used
01:05 - for development
01:06 - on your api with whatever the or sorry
01:09 - on your api dashboard with whatever your
01:11 - new domain is
01:12 - anyways we might talk about that later
01:13 - but let's get into it
01:15 - so the first thing i'm going to do since
01:16 - we're going to be scheduling a message
01:18 - is i'm going to import the date time
01:19 - module as well as the time delta and
01:21 - date time
01:22 - i guess sub modules or classes or
01:24 - whatever they are
01:25 - so i'm going to say from date time
01:28 - import date time and import time delta
01:31 - we're going to need to use these so we
01:32 - can actually set the time that we want
01:34 - to schedule these messages
01:35 - at the first thing that i'm going to do
01:37 - is i'm going to make a list of all of
01:38 - the messages that i want to schedule now
01:40 - we could just start with one that's
01:42 - totally fine as well but we also can
01:43 - schedule multiple
01:44 - so i'm going to say scheduled underscore
01:48 - messages equals and i'm going to make a
01:51 - list
01:52 - and inside of this list i'm going to
01:53 - have dictionaries that have the
01:55 - following keys
01:56 - the first key is going to be text the
01:58 - second one is going to be
01:59 - post at which means this is the time we
02:02 - want to post this message at
02:03 - and then what i'm going to do after this
02:06 - is i am going to
02:07 - say channel so what channel do we want
02:10 - to actually post this message
02:11 - in uh we'll probably have to grab this
02:13 - from somewhere else before i can
02:14 - actually fill this in
02:15 - but these are the keys and kind of the
02:17 - format i'm going to use for scheduling a
02:18 - message
02:19 - now of course you guys can clean this up
02:21 - to be whatever you want but let's put in
02:23 - two here
02:24 - and let's just you know write some
02:26 - different things so let's say first
02:27 - message
02:28 - uh let's say
02:31 - second message exclamation point and
02:34 - then for post at i'm going to show you
02:35 - how we can
02:36 - you know kind of play around with the
02:38 - times here and actually set the correct
02:40 - time
02:41 - so the timestamps in uh this api that
02:44 - we're using in the slack api
02:45 - i believe are in like they're called a
02:48 - timestamp so technically that is
02:50 - a way of representing time i don't
02:53 - really know exactly how to describe it
02:54 - i'm pretty sure it's in something like
02:56 - like milliseconds or microseconds or
02:59 - nanoseconds
03:00 - you'll have to look that up for the
03:01 - specifics i don't want to mislead you
03:03 - but what we can do to get a time is to
03:04 - do something like this i'm going to go
03:06 - inside of brackets
03:07 - i'm going to say date time dot now
03:09 - remember we imported that from up here
03:12 - plus time delta and inside of here what
03:14 - i'm going to do
03:15 - is put how many or how much i want to
03:18 - add to the current time so let's say i
03:19 - wanted this to happen tomorrow
03:21 - at the exact same time as today then
03:23 - what i would do is i would say days
03:25 - equals one and what that means is now
03:27 - i'm going to say okay the current date
03:29 - time
03:29 - plus the time delta so like the change
03:31 - in time of
03:32 - one day i'm going to add those two
03:34 - together and then outside of the
03:36 - brackets i'm going to say
03:37 - timestamp with another pair of
03:39 - parentheses like this
03:41 - what this will do is take this datetime
03:43 - object and convert it into a numeric
03:46 - time stamp that's what we need to use
03:48 - now i don't want to have this post
03:49 - tomorrow because i want you guys to see
03:51 - that this is working
03:52 - so i'm just going to say seconds and i'm
03:54 - going to set this equal to like
03:56 - 10 seconds so essentially we'll post it
03:59 - from 10 seconds
04:00 - after whenever this bot gets initialized
04:03 - you'll see how that works in a second
04:04 - but that's how we do this
04:06 - now i could do like seconds and then
04:07 - days equals one
04:09 - this would mean we would post tomorrow
04:11 - at the exact same time
04:12 - plus 10 seconds and that's kind of how
04:14 - it works and then we could do years and
04:16 - you know so on so forth we can add like
04:18 - all of the different things like
04:19 - microseconds milliseconds minutes
04:21 - all that stuff you can kind of see it
04:22 - popping up in the top left hand corner
04:24 - or
04:24 - right hand corner sorry so anyways let's
04:26 - stick with seconds 10.
04:28 - uh and let's now do the same thing so
04:30 - i'm going to copy this
04:31 - i'm going to put this again at post at
04:34 - and
04:34 - instead of doing seconds 10 let's do
04:37 - seconds 20.
04:38 - so then that way we can see like a
04:39 - little bit of a difference and for the
04:41 - channel
04:42 - we're going to need to pick a channel id
04:44 - now
04:45 - i'm going to kind of do this a
04:46 - hard-coded way i wouldn't necessarily
04:48 - recommend this but what you can do is
04:50 - just look for
04:51 - like what is it this right here
04:54 - so we go client we go the name of the
04:57 - server or of the workspace or whatever
04:59 - it's called here
04:59 - and then we have the channel id which is
05:02 - this so this is the channel id
05:04 - so i can copy this just make sure this
05:06 - channel id is obviously one that your
05:08 - bot is installed into and i'm just
05:10 - grabbing it from the url right
05:12 - so let's go ahead and put that for the
05:14 - channel this needs to be in a string
05:16 - this might not work if it doesn't i'll
05:18 - show you how to fix that but this is
05:19 - kind of my cheat for right now because i
05:21 - don't want to have to code something
05:22 - that's
05:23 - going to get the channel the bot is in
05:24 - and then automatically put it in there
05:26 - it's just too much work for what we're
05:27 - going to be doing
05:28 - all right so now we have two scheduled
05:29 - messages and i'm going to make a
05:31 - function that can actually
05:32 - schedule these messages right because
05:34 - that's just a list for right now
05:35 - so right underneath where i have the
05:37 - send welcome function i'm going to make
05:38 - another function i'm going to say
05:40 - define schedule underscore messages and
05:43 - we're going to take a list of messages
05:46 - what we're going to do is we're going to
05:47 - say for message in messages
05:50 - and we're going to go ahead and actually
05:51 - schedule the message so we're going to
05:53 - say
05:53 - client dot and then chat
05:56 - post message so this is the same thing
05:58 - that we've done before
06:00 - or sorry not post message schedule
06:02 - message that's the method that we want
06:03 - to use
06:04 - so client underscore our client dot chat
06:07 - underscore
06:08 - schedule message and then inside of here
06:10 - let's actually see what this error is
06:12 - though
06:12 - uh missing mandatory keyword yeah we're
06:14 - going to add these three keywords so
06:15 - channel
06:16 - post that and text you can see them
06:18 - popping up there so we'll say channel
06:20 - and then that's going to be equal to
06:22 - well message channel right because
06:24 - all of the elements inside of our
06:25 - messages list are going to be
06:27 - dictionaries that have these keys and
06:29 - we'll say text
06:30 - equals message
06:34 - channel right and then after this we
06:36 - will say
06:37 - post at so post underscore at equals
06:41 - message and then post underscore at
06:44 - pretty straight forward all right so now
06:47 - we'll save that
06:48 - and it gives us the nice formatting and
06:51 - now what we'll do after this is we'll
06:52 - actually grab the id
06:54 - of this posted message just because i
06:56 - want to return all of the ids of these
06:58 - messages
06:59 - so what's going to happen in the
07:00 - response body of this is it's going to
07:02 - tell us
07:02 - an id for this scheduled message now we
07:04 - can't reference it with the time stamp
07:06 - because the message is not yet posted
07:08 - so it actually comes up with a unique id
07:10 - and then we can use that id
07:12 - later to say delete that message change
07:14 - that message
07:15 - you know get a list of the messages
07:17 - whatever it may be so let's say ids
07:18 - equals list
07:19 - and then we're going to say id i guess
07:22 - we'll have to do underscore
07:24 - equals this is going to have to be equal
07:26 - to response so we'll say
07:28 - response equals that and then this will
07:30 - be
07:31 - response and inside of here we're going
07:33 - to get the id
07:35 - so i think that will work actually
07:37 - instead of doing that we're going to use
07:38 - get just in case for some reason we get
07:40 - an error we don't crash our bots
07:42 - and then we'll say ids dot append
07:45 - id underscore and finally return ids
07:49 - so this might not work i might have to
07:50 - look into this we'll look at that in a
07:52 - second
07:52 - but this should schedule our messages
07:55 - for us so let's test this out
07:56 - what i need to do is i need to run the
07:59 - app and then right after i run the app i
08:01 - need to
08:02 - call this schedule messages and in fact
08:05 - i might not actually
08:08 - i'm deliberating between whether i want
08:09 - to do that before or after i run the app
08:11 - i think it will be fine to do it
08:13 - beforehand so let's actually do it
08:15 - beforehand
08:16 - let's say schedule messages and then
08:18 - let's pass
08:19 - the scheduled messages so if this
08:22 - doesn't work
08:23 - going before the app is running we'll do
08:25 - it after i don't think it will make a
08:26 - difference the reason being that
08:28 - we actually set up the api stuff right
08:31 - before we run the app so we have you
08:33 - know slack event adapter and we have the
08:35 - client set up here i don't think it
08:37 - matters if the app's running for us to
08:38 - actually call this
08:39 - so let's give this a shot let's run our
08:42 - bots
08:44 - and we got an error time is in the past
08:47 - okay so that's interesting that i'm
08:49 - getting time in the past maybe we'll
08:51 - have to increment the seconds a bit
08:53 - more i guess datetime.now is not giving
08:56 - us what we expected so
08:58 - we have datetime.now plus time delta
09:00 - seconds equals 10.
09:02 - let's just try making this like 40
09:04 - seconds and making this 50 seconds
09:06 - and see if there's just some kind of
09:07 - delay with that so let's run this and
09:09 - see what we get
09:10 - and there we go so now that works so i'm
09:12 - gonna have to quickly go over to the bot
09:13 - uh
09:13 - otherwise we might miss it so i will
09:15 - wait and then once it pops up i will be
09:17 - right back
09:18 - all right so these messages just came
09:19 - through we got four of them i guess like
09:21 - the previous run schedule messages which
09:23 - just came through now
09:25 - i don't really know what happened with
09:26 - that to be honest with you this won't be
09:27 - a problem when we're only running our
09:28 - app
09:29 - once and we know it works but i'm
09:30 - sending the channel id for some reason
09:32 - so i think i made a mistake here
09:34 - so let's go back to when i send these
09:36 - messages
09:37 - in this function and yes of course so
09:39 - channel equals message channel
09:41 - and text equals message channel i guess
09:43 - you guys probably would have seen that
09:44 - but that should be
09:45 - text so i just reran that i don't think
09:48 - that will reschedule the message but let
09:50 - me just
09:50 - quit this and let's change the time now
09:53 - just so it wasn't
09:54 - as long because i actually had to wait a
09:56 - fair amount of time for that let's make
09:57 - that 20 seconds and 30 seconds and i
10:00 - think we should be okay to do that
10:02 - so let's run this and we didn't get time
10:05 - in the past which is good i'm going to
10:06 - go over to slack here
10:08 - and hopefully we'll get that first
10:09 - message second message popping up
10:11 - i'm tempted just to wait here because i
10:13 - think they should come in shortly
10:15 - and there we go we got first message
10:17 - coming in first message is coming in
10:18 - three times for some reason and let's
10:22 - wait i believe second message should
10:23 - come in as well
10:25 - second message second message second
10:28 - message
10:29 - so i think the reason this is happening
10:31 - is just because the app
10:32 - is like reloading it really shouldn't be
10:35 - sending more than one message it should
10:36 - just send
10:37 - it once i think it's just because of the
10:39 - fact that if you have a look here it's
10:41 - like
10:41 - reloading the app yeah so the reason
10:43 - these keep coming in is just because the
10:44 - app keeps reloading
10:46 - this wouldn't happen in a production
10:47 - environment because we wouldn't have
10:48 - this debug mode equals true
10:50 - i can promise you it's only supposed to
10:52 - send one time it's just because if you
10:53 - have a look here it reloaded like a
10:55 - bunch of times
10:56 - so that's why it was like continually
10:57 - spamming and resending the message
10:59 - so what we really could do is remove
11:02 - the um scheduling messages from here and
11:05 - we could just
11:06 - call actually i don't know if that would
11:08 - work we'd have to leave it here
11:09 - but my point is just in production this
11:11 - would be fine we wouldn't keep recalling
11:13 - this
11:14 - because well the app wouldn't be
11:15 - continually kept running again
11:17 - if that makes any sense but anyways that
11:20 - is how we schedule messages so i'll show
11:21 - you now how we can delete a scheduled
11:23 - message
11:23 - so i guess we'll just schedule them and
11:25 - then delete them right after just
11:26 - to show you that that works so to delete
11:29 - a scheduled message first of all we need
11:30 - the ids
11:31 - of that scheduled message so what i'm
11:33 - going to do is i'm going to say all
11:34 - right
11:35 - ids equals schedule messages because
11:38 - we're returning all of the ids
11:39 - and then what i'll do is i'll write
11:41 - another function that can delete a
11:42 - scheduled message and we'll just call it
11:44 - the number of ids times with all those
11:46 - ids and we'll remove that scheduled
11:48 - message
11:48 - so to do this i'm going to say define
11:50 - delete
11:52 - underscore scheduled underscore message
11:55 - and then inside of here i'll take an id
11:57 - or we really could take a list of ids
11:59 - that might be easier delete
12:00 - scheduled messages let's say ids and
12:03 - we'll say for id
12:05 - and ids we'll need to do an underscore
12:07 - just because id is a keyword in python
12:09 - and then what we'll do
12:11 - is we'll say well we don't really need
12:12 - the response we can just go
12:14 - client dot chat underscore delete
12:18 - scheduled message and i think all we
12:20 - need to pass here is the channel and the
12:22 - id so we're going to say channel
12:24 - equals channel which actually we'll need
12:26 - here so we'll take
12:27 - channel as well for all of the ids to
12:30 - delete
12:31 - technically you know this could be a
12:33 - mistake if these ids are not in the same
12:35 - channel for our purpose we know they're
12:36 - going to be in the same channel so
12:38 - we can do this but if you were going to
12:39 - have scheduled messages in different
12:41 - channels then you would have to make
12:42 - sure you passing
12:43 - a different channel for each of those
12:45 - scheduled messages hopefully that makes
12:46 - sense we'll say channel
12:48 - equals channel and then id i think it's
12:52 - scheduled underscore let's see if it
12:54 - came up yes scheduled underscore message
12:56 - id
12:57 - is going to be equal to underscore id so
12:59 - this should actually just delete the
13:00 - scheduled message so hopefully if we run
13:03 - this and we call this function
13:04 - right after we schedule the messages we
13:07 - won't see anything popping up now you'll
13:08 - kind of just have to trust me
13:10 - that this is working but let's go and
13:12 - now say delete scheduled messages
13:14 - and then let's pass the ids and let's
13:17 - pass the channel
13:18 - which is going to be equal to that
13:19 - string that we used to schedule the
13:21 - messages so i will just steal it
13:23 - from up here so let's take that
13:27 - and we'll put that inside of there okay
13:30 - so that should be good that should
13:32 - delete the scheduled messages
13:33 - now i'm just going to ask you to trust
13:35 - me that that works you guys can run this
13:36 - on your own and make sure it does
13:38 - i you know what just in case let's rerun
13:41 - the bot and have a look because maybe
13:43 - i'm wrong and there we go invalid
13:44 - arguments
13:45 - all right so it's saying we were getting
13:47 - an invalid scheduled message id or
13:49 - saying you must pass a string whatever
13:50 - the reason for that i believe is because
13:52 - this id is incorrect
13:54 - in other words we didn't get it from the
13:56 - right place so i'm just going to do
13:57 - something here to quickly debug and
13:59 - figure out what this
14:00 - id actually is or how we can actually
14:02 - grab this id because it should give it
14:04 - back to us
14:05 - in this response body so i don't know
14:08 - exactly what is off the top of my head
14:09 - so i'm just going to import the
14:11 - pretty printer so i'm going to import p
14:14 - print
14:14 - i'm going to make a printer so i'm going
14:16 - to say printer equals
14:18 - p print dot pretty printer
14:21 - and then we're just going to print out
14:22 - the response body so we can have a look
14:24 - at what it actually is so let's
14:28 - go here and let's go
14:32 - printer dot p print
14:36 - and let's print the response
14:39 - all right so let's run this and let's
14:41 - see what we get
14:42 - okay and we get a response
14:45 - object okay so i think i might need to
14:47 - grab the json from that
14:49 - or something like that so let's go
14:52 - j response dot json i think that should
14:55 - give us the right
14:56 - answer here let's have a look and has no
14:59 - attribute json great maybe it's
15:01 - data i always forget what this is my
15:03 - apology guys
15:04 - guys i believe we probably used this
15:05 - before but let's see if it's data ah
15:07 - data is what we're looking for
15:09 - so we want the data and there we go so
15:11 - it says
15:12 - message and there should be yeah so
15:15 - message
15:16 - bot profile and then id that's the same
15:19 - i'm just trying to find the id scheduled
15:22 - message id
15:22 - that's what it is all right so what
15:24 - we'll have to do is grab the scheduled
15:26 - message id
15:27 - so to do this we're going to say
15:30 - response equals all of this
15:32 - dot data and then we're going to say
15:35 - response.get
15:37 - scheduled message id so that should be
15:39 - how we do it i just took an assumption
15:40 - last time i did this
15:42 - so let's run this now and see what we
15:43 - get and
15:45 - invalid scheduled message id ah
15:47 - interesting okay i'm gonna print out the
15:48 - scheduled message id
15:50 - and see if we're getting the correct
15:53 - thing here
15:54 - i will be back after i have a look at
15:55 - that all right so i can't seem to get
15:57 - this to work so we're going to debug
15:59 - this together i'm going to make the
16:00 - method now that will
16:02 - list all of these scheduled ids maybe
16:04 - something's going on where these ids are
16:06 - changing
16:07 - again i don't know what's wrong with
16:08 - this there is a lot of issues from what
16:09 - it seems with the slack api
16:11 - uh maybe that's just my misunderstanding
16:14 - but that id
16:15 - really should work right like i'm
16:16 - getting the scheduled message id i seen
16:18 - that this id is valid i know that that's
16:20 - correct and then i try to remove it and
16:21 - says no it doesn't exist well
16:23 - it should exist let's say define list
16:25 - underscore
16:27 - scheduled underscore messages we'll take
16:30 - a
16:30 - channel and then all we're going to do
16:32 - is say response
16:34 - equals client dot
16:37 - chat underscore scheduled message list
16:40 - and then we'll say
16:41 - channel equals channel and then return
16:45 - response dot data and i'm pretty sure
16:48 - the key here
16:50 - is messages so response.data.get
16:54 - messages like that i believe this is a
16:56 - list in fact let's just loop through it
16:58 - and actually just get all of the ids
16:59 - while we're here
17:00 - so let's say messages equals that
17:04 - and then what we can do is we can say
17:08 - ids equals an empty list and for msg
17:11 - in messages we will
17:15 - say ids dot append
17:18 - msg dot get and it should be
17:22 - scheduled underscore message underscore
17:25 - id
17:26 - i scheduled i think i need to do that
17:29 - alright so scheduled underscore message
17:31 - underscore id
17:33 - append that into ids and then return ids
17:37 - now not returns return and while we're
17:40 - here let's just print the message just
17:42 - have a look at this in case this doesn't
17:43 - work
17:44 - so rather than me trying to delete the
17:46 - scheduled messages now because clearly
17:47 - that's not working
17:48 - let's try to just list them out so let's
17:50 - say list schedule messages and then for
17:53 - the channel
17:53 - we will pass this and let's see what we
17:56 - get
17:57 - all right so let's run the bot
18:01 - and let's see none type object is not
18:04 - iterable interesting so maybe we're
18:07 - getting something wrong here
18:09 - so if we go list scheduled messages
18:14 - chat schedule messages list
18:17 - response.data.get
18:18 - looks like messages is not the key so
18:20 - let's print
18:21 - out the response
18:25 - dot data and see what that looks like
18:29 - all right so here's response.data i
18:31 - didn't use the pretty printer which
18:32 - maybe i should have kept
18:33 - and we can see that adds not messages
18:36 - it's
18:37 - scheduled messages so let's grab that
18:40 - and note here that the id is actually
18:43 - stored as id
18:44 - not scheduled id and that we have a
18:45 - bunch of them inside of here
18:48 - so let's go and modify this now so
18:52 - rather than where am i
18:53 - and i'm getting lost here list schedule
18:56 - message rather than messages
18:57 - it is schedule messages and rather than
19:00 - schedule message id
19:01 - this is going to be id all right i don't
19:04 - appreciate the lack of consistency there
19:06 - uh but that is fine so let's run this
19:08 - now and see what we get
19:11 - okay so that actually worked we listed
19:13 - out the scheduled ids
19:15 - so now let's just grab these ids and
19:18 - let's delete those so that they're not
19:20 - scheduled and then that way we can see
19:21 - if this is working
19:23 - all right so we can remove all these
19:24 - print statements so let's
19:27 - remove the print response.data let's
19:30 - remove the print message
19:32 - and now we will say
19:36 - ids equals list schedule messages that
19:39 - will give us all the ids
19:40 - and then we can delete the schedule
19:42 - messages after
19:43 - and that should work so let's quit
19:46 - this alright so let's run this again
19:50 - and invalid scheduled message id i am so
19:53 - confused on why
19:55 - that isn't working that really should be
19:57 - working because that should give us a
19:58 - list of ids so let's
20:00 - print the ids here and just have a look
20:03 - at what they are
20:06 - all right so if we have a look here
20:07 - these are all of the ids
20:09 - maybe for some reason some of them just
20:12 - aren't
20:13 - in there because we only got two
20:15 - failures here so maybe we've just done
20:17 - something wrong because there's a bunch
20:18 - of ids and only
20:20 - i guess one time here it actually failed
20:22 - so maybe we just had
20:23 - one wrong scheduled message or if
20:25 - they're all wrong i have no idea
20:27 - let's just do a try catch here inside of
20:30 - delete schedule messages and see if we
20:31 - can get any of them to be deleted at all
20:34 - so let's go inside of delete scheduled
20:36 - messages and let's just go try
20:40 - and let's just go
20:43 - accept exception as
20:46 - e and we can just print out e and maybe
20:49 - this will work
20:50 - that's the best solution i kind of have
20:51 - at this point because again no idea why
20:53 - that's really not working
20:54 - so there we go it looks like we're
20:56 - getting a bunch of invalid scheduled
20:58 - messages
20:59 - but we are not getting as many invalid
21:01 - scheduled message ids as there is
21:03 - actually ids so if we look at printing
21:06 - the id
21:06 - one two three four five six seven we
21:09 - don't have
21:10 - seven failed messages here it's only
21:13 - four which is leading me to believe
21:14 - maybe for some reason we're trying to
21:16 - delete a scheduled message that is no
21:18 - longer scheduled
21:19 - maybe because the time has passed or
21:21 - something like that
21:22 - anyways it looks like this is working so
21:24 - let's just go in here and we can see
21:25 - that all these messages now that we've
21:27 - scheduled as we've been messing around
21:29 - are printing out
21:30 - uh the ones i guess that we didn't
21:32 - cancel so
21:34 - maybe you were good hopefully i have no
21:36 - idea i believe the problem probably has
21:38 - to do with the fact that we were just
21:39 - running this constantly so many times
21:41 - but honestly i'm just gonna leave it at
21:43 - that so i really do apologize that there
21:45 - was quite a few mistakes in this
21:46 - tutorial like i've said i'm human as
21:48 - well you know i'm learning how this api
21:50 - works and just kind of trying to show it
21:52 - to you guys and learn along with you
21:54 - but this is kind of my debugging process
21:56 - and what i'll do when something's not
21:58 - working
21:58 - if you guys know for some reason why
22:00 - this isn't working please do let me know
22:02 - but my temporary solution is just the
22:03 - try catch i think that's probably fine
22:05 - and for our purposes this will do the
22:07 - job that we needed to do
22:08 - so that being said i hope you guys
22:10 - enjoyed this series if you did make sure
22:12 - you leave a like
22:12 - subscribe to the channel and i will see
22:14 - you guys again in another youtube video

Cleaned transcript:

hello everybody and welcome to another slack bot tutorial so in this video we're going to be talking about how to schedule messages how to delete scheduled messages and how to view a list of all of the messages that we have scheduled uh this hopefully shouldn't take too long and right now i am planning on this being the last video in the series i feel like i've covered a really good kind of fundamentals of all the stuff you need to know to get started with this and the goal of all my tutorial series usually is to give you guys kind of the basics show you how a few of the things are done and then let you kind of expand your knowledge on your own and just give you a good foundation so you're not lost jumping into a new thing so anyways let me know if you guys want to see some other things i will mention that to host the bot like this you will just simply need to host a website with a domain and then run what we have going on right i mean we have a flask server this is pretty much a web server that's just running an api on it so what you can do is host this like you would host any other website set up a domain and then simply replace all of the ngrok links that we've used for development on your api with whatever the or sorry on your api dashboard with whatever your new domain is anyways we might talk about that later but let's get into it so the first thing i'm going to do since we're going to be scheduling a message is i'm going to import the date time module as well as the time delta and date time i guess sub modules or classes or whatever they are so i'm going to say from date time import date time and import time delta we're going to need to use these so we can actually set the time that we want to schedule these messages at the first thing that i'm going to do is i'm going to make a list of all of the messages that i want to schedule now we could just start with one that's totally fine as well but we also can schedule multiple so i'm going to say scheduled underscore messages equals and i'm going to make a list and inside of this list i'm going to have dictionaries that have the following keys the first key is going to be text the second one is going to be post at which means this is the time we want to post this message at and then what i'm going to do after this is i am going to say channel so what channel do we want to actually post this message in uh we'll probably have to grab this from somewhere else before i can actually fill this in but these are the keys and kind of the format i'm going to use for scheduling a message now of course you guys can clean this up to be whatever you want but let's put in two here and let's just you know write some different things so let's say first message uh let's say second message exclamation point and then for post at i'm going to show you how we can you know kind of play around with the times here and actually set the correct time so the timestamps in uh this api that we're using in the slack api i believe are in like they're called a timestamp so technically that is a way of representing time i don't really know exactly how to describe it i'm pretty sure it's in something like like milliseconds or microseconds or nanoseconds you'll have to look that up for the specifics i don't want to mislead you but what we can do to get a time is to do something like this i'm going to go inside of brackets i'm going to say date time dot now remember we imported that from up here plus time delta and inside of here what i'm going to do is put how many or how much i want to add to the current time so let's say i wanted this to happen tomorrow at the exact same time as today then what i would do is i would say days equals one and what that means is now i'm going to say okay the current date time plus the time delta so like the change in time of one day i'm going to add those two together and then outside of the brackets i'm going to say timestamp with another pair of parentheses like this what this will do is take this datetime object and convert it into a numeric time stamp that's what we need to use now i don't want to have this post tomorrow because i want you guys to see that this is working so i'm just going to say seconds and i'm going to set this equal to like 10 seconds so essentially we'll post it from 10 seconds after whenever this bot gets initialized you'll see how that works in a second but that's how we do this now i could do like seconds and then days equals one this would mean we would post tomorrow at the exact same time plus 10 seconds and that's kind of how it works and then we could do years and you know so on so forth we can add like all of the different things like microseconds milliseconds minutes all that stuff you can kind of see it popping up in the top left hand corner or right hand corner sorry so anyways let's stick with seconds 10. uh and let's now do the same thing so i'm going to copy this i'm going to put this again at post at and instead of doing seconds 10 let's do seconds 20. so then that way we can see like a little bit of a difference and for the channel we're going to need to pick a channel id now i'm going to kind of do this a hardcoded way i wouldn't necessarily recommend this but what you can do is just look for like what is it this right here so we go client we go the name of the server or of the workspace or whatever it's called here and then we have the channel id which is this so this is the channel id so i can copy this just make sure this channel id is obviously one that your bot is installed into and i'm just grabbing it from the url right so let's go ahead and put that for the channel this needs to be in a string this might not work if it doesn't i'll show you how to fix that but this is kind of my cheat for right now because i don't want to have to code something that's going to get the channel the bot is in and then automatically put it in there it's just too much work for what we're going to be doing all right so now we have two scheduled messages and i'm going to make a function that can actually schedule these messages right because that's just a list for right now so right underneath where i have the send welcome function i'm going to make another function i'm going to say define schedule underscore messages and we're going to take a list of messages what we're going to do is we're going to say for message in messages and we're going to go ahead and actually schedule the message so we're going to say client dot and then chat post message so this is the same thing that we've done before or sorry not post message schedule message that's the method that we want to use so client underscore our client dot chat underscore schedule message and then inside of here let's actually see what this error is though uh missing mandatory keyword yeah we're going to add these three keywords so channel post that and text you can see them popping up there so we'll say channel and then that's going to be equal to well message channel right because all of the elements inside of our messages list are going to be dictionaries that have these keys and we'll say text equals message channel right and then after this we will say post at so post underscore at equals message and then post underscore at pretty straight forward all right so now we'll save that and it gives us the nice formatting and now what we'll do after this is we'll actually grab the id of this posted message just because i want to return all of the ids of these messages so what's going to happen in the response body of this is it's going to tell us an id for this scheduled message now we can't reference it with the time stamp because the message is not yet posted so it actually comes up with a unique id and then we can use that id later to say delete that message change that message you know get a list of the messages whatever it may be so let's say ids equals list and then we're going to say id i guess we'll have to do underscore equals this is going to have to be equal to response so we'll say response equals that and then this will be response and inside of here we're going to get the id so i think that will work actually instead of doing that we're going to use get just in case for some reason we get an error we don't crash our bots and then we'll say ids dot append id underscore and finally return ids so this might not work i might have to look into this we'll look at that in a second but this should schedule our messages for us so let's test this out what i need to do is i need to run the app and then right after i run the app i need to call this schedule messages and in fact i might not actually i'm deliberating between whether i want to do that before or after i run the app i think it will be fine to do it beforehand so let's actually do it beforehand let's say schedule messages and then let's pass the scheduled messages so if this doesn't work going before the app is running we'll do it after i don't think it will make a difference the reason being that we actually set up the api stuff right before we run the app so we have you know slack event adapter and we have the client set up here i don't think it matters if the app's running for us to actually call this so let's give this a shot let's run our bots and we got an error time is in the past okay so that's interesting that i'm getting time in the past maybe we'll have to increment the seconds a bit more i guess datetime.now is not giving us what we expected so we have datetime.now plus time delta seconds equals 10. let's just try making this like 40 seconds and making this 50 seconds and see if there's just some kind of delay with that so let's run this and see what we get and there we go so now that works so i'm gonna have to quickly go over to the bot uh otherwise we might miss it so i will wait and then once it pops up i will be right back all right so these messages just came through we got four of them i guess like the previous run schedule messages which just came through now i don't really know what happened with that to be honest with you this won't be a problem when we're only running our app once and we know it works but i'm sending the channel id for some reason so i think i made a mistake here so let's go back to when i send these messages in this function and yes of course so channel equals message channel and text equals message channel i guess you guys probably would have seen that but that should be text so i just reran that i don't think that will reschedule the message but let me just quit this and let's change the time now just so it wasn't as long because i actually had to wait a fair amount of time for that let's make that 20 seconds and 30 seconds and i think we should be okay to do that so let's run this and we didn't get time in the past which is good i'm going to go over to slack here and hopefully we'll get that first message second message popping up i'm tempted just to wait here because i think they should come in shortly and there we go we got first message coming in first message is coming in three times for some reason and let's wait i believe second message should come in as well second message second message second message so i think the reason this is happening is just because the app is like reloading it really shouldn't be sending more than one message it should just send it once i think it's just because of the fact that if you have a look here it's like reloading the app yeah so the reason these keep coming in is just because the app keeps reloading this wouldn't happen in a production environment because we wouldn't have this debug mode equals true i can promise you it's only supposed to send one time it's just because if you have a look here it reloaded like a bunch of times so that's why it was like continually spamming and resending the message so what we really could do is remove the um scheduling messages from here and we could just call actually i don't know if that would work we'd have to leave it here but my point is just in production this would be fine we wouldn't keep recalling this because well the app wouldn't be continually kept running again if that makes any sense but anyways that is how we schedule messages so i'll show you now how we can delete a scheduled message so i guess we'll just schedule them and then delete them right after just to show you that that works so to delete a scheduled message first of all we need the ids of that scheduled message so what i'm going to do is i'm going to say all right ids equals schedule messages because we're returning all of the ids and then what i'll do is i'll write another function that can delete a scheduled message and we'll just call it the number of ids times with all those ids and we'll remove that scheduled message so to do this i'm going to say define delete underscore scheduled underscore message and then inside of here i'll take an id or we really could take a list of ids that might be easier delete scheduled messages let's say ids and we'll say for id and ids we'll need to do an underscore just because id is a keyword in python and then what we'll do is we'll say well we don't really need the response we can just go client dot chat underscore delete scheduled message and i think all we need to pass here is the channel and the id so we're going to say channel equals channel which actually we'll need here so we'll take channel as well for all of the ids to delete technically you know this could be a mistake if these ids are not in the same channel for our purpose we know they're going to be in the same channel so we can do this but if you were going to have scheduled messages in different channels then you would have to make sure you passing a different channel for each of those scheduled messages hopefully that makes sense we'll say channel equals channel and then id i think it's scheduled underscore let's see if it came up yes scheduled underscore message id is going to be equal to underscore id so this should actually just delete the scheduled message so hopefully if we run this and we call this function right after we schedule the messages we won't see anything popping up now you'll kind of just have to trust me that this is working but let's go and now say delete scheduled messages and then let's pass the ids and let's pass the channel which is going to be equal to that string that we used to schedule the messages so i will just steal it from up here so let's take that and we'll put that inside of there okay so that should be good that should delete the scheduled messages now i'm just going to ask you to trust me that that works you guys can run this on your own and make sure it does i you know what just in case let's rerun the bot and have a look because maybe i'm wrong and there we go invalid arguments all right so it's saying we were getting an invalid scheduled message id or saying you must pass a string whatever the reason for that i believe is because this id is incorrect in other words we didn't get it from the right place so i'm just going to do something here to quickly debug and figure out what this id actually is or how we can actually grab this id because it should give it back to us in this response body so i don't know exactly what is off the top of my head so i'm just going to import the pretty printer so i'm going to import p print i'm going to make a printer so i'm going to say printer equals p print dot pretty printer and then we're just going to print out the response body so we can have a look at what it actually is so let's go here and let's go printer dot p print and let's print the response all right so let's run this and let's see what we get okay and we get a response object okay so i think i might need to grab the json from that or something like that so let's go j response dot json i think that should give us the right answer here let's have a look and has no attribute json great maybe it's data i always forget what this is my apology guys guys i believe we probably used this before but let's see if it's data ah data is what we're looking for so we want the data and there we go so it says message and there should be yeah so message bot profile and then id that's the same i'm just trying to find the id scheduled message id that's what it is all right so what we'll have to do is grab the scheduled message id so to do this we're going to say response equals all of this dot data and then we're going to say response.get scheduled message id so that should be how we do it i just took an assumption last time i did this so let's run this now and see what we get and invalid scheduled message id ah interesting okay i'm gonna print out the scheduled message id and see if we're getting the correct thing here i will be back after i have a look at that all right so i can't seem to get this to work so we're going to debug this together i'm going to make the method now that will list all of these scheduled ids maybe something's going on where these ids are changing again i don't know what's wrong with this there is a lot of issues from what it seems with the slack api uh maybe that's just my misunderstanding but that id really should work right like i'm getting the scheduled message id i seen that this id is valid i know that that's correct and then i try to remove it and says no it doesn't exist well it should exist let's say define list underscore scheduled underscore messages we'll take a channel and then all we're going to do is say response equals client dot chat underscore scheduled message list and then we'll say channel equals channel and then return response dot data and i'm pretty sure the key here is messages so response.data.get messages like that i believe this is a list in fact let's just loop through it and actually just get all of the ids while we're here so let's say messages equals that and then what we can do is we can say ids equals an empty list and for msg in messages we will say ids dot append msg dot get and it should be scheduled underscore message underscore id i scheduled i think i need to do that alright so scheduled underscore message underscore id append that into ids and then return ids now not returns return and while we're here let's just print the message just have a look at this in case this doesn't work so rather than me trying to delete the scheduled messages now because clearly that's not working let's try to just list them out so let's say list schedule messages and then for the channel we will pass this and let's see what we get all right so let's run the bot and let's see none type object is not iterable interesting so maybe we're getting something wrong here so if we go list scheduled messages chat schedule messages list response.data.get looks like messages is not the key so let's print out the response dot data and see what that looks like all right so here's response.data i didn't use the pretty printer which maybe i should have kept and we can see that adds not messages it's scheduled messages so let's grab that and note here that the id is actually stored as id not scheduled id and that we have a bunch of them inside of here so let's go and modify this now so rather than where am i and i'm getting lost here list schedule message rather than messages it is schedule messages and rather than schedule message id this is going to be id all right i don't appreciate the lack of consistency there uh but that is fine so let's run this now and see what we get okay so that actually worked we listed out the scheduled ids so now let's just grab these ids and let's delete those so that they're not scheduled and then that way we can see if this is working all right so we can remove all these print statements so let's remove the print response.data let's remove the print message and now we will say ids equals list schedule messages that will give us all the ids and then we can delete the schedule messages after and that should work so let's quit this alright so let's run this again and invalid scheduled message id i am so confused on why that isn't working that really should be working because that should give us a list of ids so let's print the ids here and just have a look at what they are all right so if we have a look here these are all of the ids maybe for some reason some of them just aren't in there because we only got two failures here so maybe we've just done something wrong because there's a bunch of ids and only i guess one time here it actually failed so maybe we just had one wrong scheduled message or if they're all wrong i have no idea let's just do a try catch here inside of delete schedule messages and see if we can get any of them to be deleted at all so let's go inside of delete scheduled messages and let's just go try and let's just go accept exception as e and we can just print out e and maybe this will work that's the best solution i kind of have at this point because again no idea why that's really not working so there we go it looks like we're getting a bunch of invalid scheduled messages but we are not getting as many invalid scheduled message ids as there is actually ids so if we look at printing the id one two three four five six seven we don't have seven failed messages here it's only four which is leading me to believe maybe for some reason we're trying to delete a scheduled message that is no longer scheduled maybe because the time has passed or something like that anyways it looks like this is working so let's just go in here and we can see that all these messages now that we've scheduled as we've been messing around are printing out uh the ones i guess that we didn't cancel so maybe you were good hopefully i have no idea i believe the problem probably has to do with the fact that we were just running this constantly so many times but honestly i'm just gonna leave it at that so i really do apologize that there was quite a few mistakes in this tutorial like i've said i'm human as well you know i'm learning how this api works and just kind of trying to show it to you guys and learn along with you but this is kind of my debugging process and what i'll do when something's not working if you guys know for some reason why this isn't working please do let me know but my temporary solution is just the try catch i think that's probably fine and for our purposes this will do the job that we needed to do so that being said i hope you guys enjoyed this series if you did make sure you leave a like subscribe to the channel and i will see you guys again in another youtube video
