With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to a new
00:10 - style video on this channel where i'm
00:13 - going to be doing a live coding
00:15 - challenge i'm planning on doing a few
00:16 - more of these in the future so if you
00:18 - guys have some ideas for projects i can
00:20 - work on then leave them in the comments
00:22 - however for this video i'm going to be
00:24 - trying to create minesweeper in python
00:27 - using pygame as quickly as i can now i'm
00:30 - going to give myself a maximum time
00:31 - limit of 1 hour i think that's a good
00:33 - amount of time i should be able to come
00:35 - up with a functional game here and the
00:37 - point of this video is to kind of give
00:38 - you a taste of what programming actually
00:41 - looks like i do have some live coding on
00:43 - this channel but a lot of times you guys
00:44 - watch my tutorials uh and i already have
00:47 - the code pre-written in those tutorials
00:48 - right so everything's kind of perfect
00:50 - there's not too many mistakes however
00:52 - when i come up with that code it takes
00:53 - me a really long time i'm constantly
00:55 - messing up and that's the reality of
00:57 - programming so i'm hoping this video
00:59 - will be entertaining as well as pretty
01:01 - relatable for you guys uh because i will
01:03 - be messing up quite a bit and i'm sure
01:05 - there will be tons of errors and bugs
01:06 - and me banging my head against the desk
01:09 - anyways with that said that is what
01:10 - we're going to do in this video i do
01:12 - want to shout out web dev simplified for
01:14 - the uh kind of inspiration for this
01:16 - video idea i was looking at his channel
01:18 - the other day and saw he was doing some
01:20 - coding challenges related to kind of
01:22 - front-end development and i figured hey
01:23 - why don't i try that with python so kyle
01:25 - thank you very much for the idea hope
01:27 - you don't mind that i'm stealing it with
01:29 - that said let's head over to vs code
01:31 - here i'll give you a quick demo of what
01:32 - minesweeper is in case you're unfamiliar
01:35 - then we'll start the timer and i'll
01:36 - start trying to build this game out
01:38 - alright so i'm on the computer now and
01:40 - i'm just going to give you a quick demo
01:41 - of mine sweeper in case you haven't seen
01:42 - before just pulled one up on google here
01:45 - and the goal here is to sweep all of the
01:47 - mines and essentially clear all of the
01:49 - squares without hitting a bomb so what i
01:51 - can do here is press down it's going to
01:53 - clear a large portion of the screen and
01:55 - all of the numbers you see are telling
01:57 - me how many bombs are adjacent to this
02:00 - square so adjacent being either diagonal
02:02 - or to the left up right or down so when
02:06 - you see something like 1 that means
02:07 - there's one bomb
02:08 - in the neighborhood of this square three
02:11 - three bombs so on and so forth and if
02:13 - you want to place a flag that means
02:15 - you're kind of denoting that this square
02:17 - you think it's a bomb so i could do
02:18 - something like that and now if i
02:20 - continue to kind of clear out the rest
02:22 - of the screen
02:23 - this flag will kind of be protected
02:25 - right i won't accidentally hit this bomb
02:28 - because i have a flag here hopefully
02:29 - that makes a bit of sense but the point
02:31 - is to go through clear the entire screen
02:33 - don't hit any bombs if you hit a bomb
02:35 - then you lose and you have to restart a
02:37 - pretty famous game i'm sure most of you
02:39 - are familiar with it
02:40 - so let's try to build that out
02:43 - all right last thing i will mention here
02:45 - i do have a programming course if you
02:46 - guys are interested in getting better at
02:48 - programming specifically python and go
02:50 - check it out it's called programming
02:52 - expert i'll leave it in the description
02:54 - i spent countless hours working on it so
02:56 - if you want to get better at programming
02:57 - seriously it's a great resource highly
02:59 - recommend link in the description you
03:00 - can also use discount code tim alright
03:02 - so let's start the timer right now at
03:04 - this point i'm not going to cut the
03:06 - video so if i make any mistakes then you
03:08 - guys will see them live here so import
03:10 - pie game let's say width uh if we could
03:13 - spell that correctly comma height and
03:16 - let's go with a width of 700 and a
03:18 - height of 800. we'll make the height
03:20 - slightly larger so we can put a menu
03:22 - there we want a surface or a window so
03:24 - i'm going to say actually let's do it in
03:26 - lowercases when is equal to
03:30 - pygame.display.set underscore mode and
03:33 - let's set our width and our height
03:36 - uh let's go with a caption so pygame dot
03:40 - display dot set underscore
03:43 - caption and this will be mine
03:47 - sweeper like that
03:48 - okay now let's just code out the basic
03:50 - kind of starting script here so if name
03:53 - equals main we'll call a function called
03:54 - main
03:55 - we can define main
03:57 - i guess we could take a window in here
03:59 - as a variable so we'll take in win
04:01 - although i'm going to just treat these
04:02 - as global variables i think i'm not
04:04 - going to worry too much about having the
04:05 - best practice here because we're trying
04:06 - to do this quickly okay so inside of
04:08 - here we'll say run is equal to true
04:11 - we'll say while run say for event in
04:15 - pygame.event.get
04:17 - if event.type is equal to pygame.quit
04:22 - then we want to say run
04:24 - is equal to false
04:26 - break and then outside of here we can
04:29 - say
04:30 - hi game
04:32 - dot quit like that okay now we should
04:34 - also say
04:36 - hi game.init up here
04:38 - okay we have our width our height our
04:40 - window and now we want to draw some
04:42 - stuff out so i'm going to say define
04:44 - draw we'll take in a window and again i
04:47 - don't necessarily need to take that but
04:48 - let's do that for now let's have our
04:50 - background color
04:52 - let's make the background for now just
04:54 - equal to white i guess
04:56 - so we'll go with white we'll say win dot
04:59 - fill
05:00 - bg color
05:02 - and then pie game
05:04 - dot display
05:06 - dot
05:07 - update like that and then here we need
05:09 - to draw so let's say
05:11 - draw and let's pass
05:15 - our window like that and i just called
05:17 - it win
05:18 - okay
05:19 - so now if i run this we should get a
05:21 - screen showing up let's see
05:24 - and there we go okay and then if i hit x
05:27 - we quit perfect that's what i wanted for
05:29 - now now let's do the grid so let's say
05:31 - define
05:32 - create underscore grid
05:35 - let's go rows
05:37 - calls like that
05:39 - okay
05:40 - pass
05:41 - for the grid
05:43 - we want to have the underlying grid and
05:44 - the grid on top of it i guess let's call
05:47 - this create mine field because then
05:50 - creating the other grid will be really
05:51 - easy
05:52 - so we need to know the number of rows
05:53 - and calls
05:54 - so i'll say rows
05:56 - comma calls i don't know how many you
05:58 - usually have in mind sweeper but we can
06:00 - start with like
06:01 - 30 by 30 or something like that
06:03 - and then the number of mines i guess
06:06 - we'll go with something like 15 for now
06:08 - so we want rows calls and mines
06:10 - and then inside of here
06:12 - we need to
06:14 - randomly put a bunch of mines inside of
06:16 - a 2d array and then we need to go
06:19 - through the 2d array and figure out what
06:21 - number we're going to have for every
06:22 - single square or if the number is going
06:24 - to be 0 and we're going to have an empty
06:26 - tile okay so let's do that
06:28 - so let's create a 2d array here we can
06:31 - say our
06:32 - field is equal to and this will be
06:36 - a list comprehension and we'll say
06:39 - zero underscore
06:41 - or zero for underscore in
06:44 - range
06:45 - and then this will be calls for
06:48 - underscore
06:49 - in range rows okay so that will give us
06:52 - a 2d array that's the size of the field
06:54 - uh then we want to randomly pick
06:56 - positions for our minds so say mine
06:59 - positions is equal to we'll make this a
07:01 - set we'll randomly select number of
07:04 - mines positions make sure that they're
07:06 - unique uh and then we will set them in
07:08 - here and then go through the fields so
07:10 - let's do that we're gonna say four
07:12 - underscore in range and this is going to
07:15 - be mines we're going to say random
07:17 - dot
07:18 - rand range and we need to select a
07:20 - random row and column so row is equal to
07:23 - this
07:24 - and this will be 0 and then the number
07:27 - of rows and then we'll say call is equal
07:29 - to random rand range okay position will
07:32 - then be
07:33 - row call as a tuple and we'll say if
07:37 - pause in
07:38 - mind positions let's actually change
07:40 - this to a while loop here so we're going
07:42 - to say wow
07:45 - minds created is
07:49 - less than
07:50 - mines
07:52 - okay and then we'll have
07:54 - minds created
07:56 - is equal to zero so if the position is
07:59 - in the mind's position that we need to
08:02 - do this again because we already
08:04 - selected that position otherwise we'll
08:06 - add it so we'll say
08:07 - minds underscore positions dot add pause
08:10 - and i realize we don't need this we
08:12 - could just use the line of the set so
08:13 - let's say len of minds
08:16 - and then positions and i realize
08:19 - uh do we want to call this mind position
08:21 - so that probably reads a bit better so
08:23 - let's go with that mind positions all
08:25 - right i don't know how good my pace is
08:26 - here because how long has been five
08:29 - minutes uh okay that's not bad so far so
08:31 - my positions dot add pause okay once we
08:34 - add that position uh we can go ahead and
08:36 - just set it in the field so now that
08:39 - we've done that let's say field at and
08:42 - then i guess we already have row call so
08:44 - we can say field at row call is equal to
08:47 - and then for a mine i guess we'll go
08:48 - with the string x for now
08:51 - although
08:52 - maybe we'll do something like negative
08:54 - one and we'll just use numbers so
08:55 - negative one will be a mine zero will be
08:57 - nothing and then all the positive
08:59 - integers will represent the correct
09:00 - value
09:01 - okay now that we have all of that uh
09:04 - this may not be the most efficient way
09:05 - to do this but i'm just gonna loop
09:07 - through check the neighbors of every
09:09 - single position and essentially set
09:11 - those
09:12 - although now that i'm here i'm thinking
09:15 - that when i add a mine i can probably
09:18 - increment all the neighbors in the field
09:21 - and do it all in this one while loop so
09:23 - let's do that but i need a function here
09:25 - called get underscore neighbors
09:28 - is that how you spell neighbors or is it
09:31 - ors there you go okay so let's take in a
09:33 - row a call rows and calls and let's
09:37 - generate all of the eight valid
09:39 - neighbors for a specific square so we're
09:41 - going to say if row
09:44 - is
09:45 - greater than zero
09:47 - yeah if rho is greater than zero let's
09:50 - make a list here
09:52 - neighbors equal to a list if rho is
09:54 - greater than zero then neighbors
09:58 - dot appends and this will be row minus
10:01 - one call
10:02 - okay we'll say if row
10:05 - is less than the length of rows minus
10:08 - one i think that should be fine then we
10:11 - will add the row that is below so row
10:15 - plus one call
10:16 - okay so this is going to be
10:19 - up
10:20 - just so i don't confuse myself here this
10:22 - is down let's do left and right and then
10:24 - let's do diagonals so let's say if the
10:26 - call is greater than 0
10:29 - then this is going to
10:31 - to the left
10:33 - then neighbors
10:35 - dot append
10:38 - and this will be row call minus one
10:41 - okay autocomplete give it to me here
10:42 - perfect then neighbors dot append row
10:46 - call plus one
10:48 - okay continuing let's do the diagonals
10:50 - so if the row is greater than zero and
10:54 - the call
10:55 - is greater than zero i believe this is
10:58 - going to be the top left neighbor and
10:59 - then we're going to say
11:02 - neighbors dot append and this will be
11:04 - row minus one
11:06 - call minus one
11:08 - okay
11:09 - if the row is less than the line of rows
11:12 - minus one and yeah i guess we can just
11:15 - do top right neighbor i think that's the
11:17 - one here neighbors dot append and then
11:20 - this will be row plus one call plus one
11:23 - okay and then we'll say if the row
11:26 - is less than that len of rows minus one
11:31 - and the call
11:32 - is greater than zero
11:34 - then neighbors
11:36 - dot append
11:38 - row and this will be plus one call
11:42 - minus one
11:44 - okay and then if the row is greater than
11:48 - zero and
11:50 - call
11:51 - is less than the line of calls
11:54 - minus one then we will add our final
11:57 - neighbor
11:58 - uh row minus one call plus one okay
12:00 - let's look at this we have row minus one
12:01 - call minus one row plus one call plus
12:03 - one row plus one column minus one row
12:05 - minus one call plus one okay nice return
12:08 - the neighbors
12:10 - and that works for me
12:12 - okay so now that we have all the valid
12:14 - neighbors whenever we do this here we
12:16 - add a bomb for every single one of the
12:18 - neighbors let's increment their value in
12:21 - the field if it's not a bomb to b plus
12:24 - one and that actually tells me here that
12:25 - i'm not going to be able to do it this
12:26 - way because if i do have two bombs that
12:28 - are beside each other i think that's
12:30 - valid to happen in mind sweeper not
12:32 - super familiar but if there's two beside
12:33 - each other that's not going to work so
12:35 - we're going to have to do it this way
12:36 - we're going to say for
12:38 - mine in mind positions
12:41 - we're going to say
12:43 - neighbors
12:44 - is equal to
12:46 - get neighbors
12:47 - and then we'll pass an asterix mine to
12:50 - decompose that as well as our rows
12:53 - and calls and we'll say for neighbor
12:57 - in
12:58 - neighbors and we can say for
13:01 - rc because we want to get the row and
13:04 - the column and yeah i think that'll be
13:06 - fine
13:07 - then we will say field at
13:10 - r
13:11 - c
13:12 - plus equals one okay then we will return
13:15 - the field and i think that should be
13:17 - good for the field
13:18 - i'm going to zoom out a bit even though
13:19 - i know it's going to be harder for you
13:20 - guys to read sorry about that okay so
13:22 - now that we have that let's just test
13:23 - the get
13:24 - create minefield function so let's start
13:27 - here and have field is equal to create
13:29 - minefield
13:30 - this is going to be
13:32 - rows
13:34 - calls
13:36 - and minds i'm just putting these in all
13:38 - capitals at the top so it's really easy
13:40 - for me to quickly change them by the way
13:42 - rather than just defining them here and
13:43 - maybe not knowing what they are
13:45 - and let's run this but i want to print
13:48 - out the field i just have a look at this
13:50 - before i start trying to draw it okay
13:54 - so int has no length len
13:57 - oops i keep doing that with len of rows
13:59 - just needs to be calls
14:00 - uh okay
14:06 - kind of a silly error there but
14:08 - fix that quickly
14:11 - okay i think that's good let's rerun
14:14 - and let's have a look here
14:16 - okay one one one one negative one i
14:20 - think i might need to either add more
14:22 - mines or make this a bit smaller so
14:23 - that's kind of hard to read so let's
14:25 - just import something here
14:27 - import
14:29 - uh from
14:31 - p print
14:34 - import pretty
14:36 - printer
14:38 - okay printer is equal to pretty printer
14:41 - and let's go here
14:44 - printer.p print okay run that one more
14:46 - time
14:49 - that should be
14:50 - that didn't actually make it any easier
14:52 - uh
14:53 - okay i think i might not have enough
14:55 - minds
14:56 - because it doesn't look like it's
14:59 - correct although i can try drawing it
15:00 - which is what we're going to have to do
15:01 - next anyways but for now let's add a few
15:03 - more mines
15:05 - because oh 30 by 30 is kind of massive
15:07 - right like let's go maybe
15:09 - 15 by 15 and then we have i guess 15
15:12 - times more squares than mine so let's
15:14 - run this now
15:16 - and let's see if we're getting any
15:17 - numbers that are two okay nice we have
15:18 - some twos i just wanted to make sure
15:19 - we're getting some larger numbers here
15:21 - before we continued
15:23 - okay so now we want to draw that out so
15:25 - let's go to draw here and let's take in
15:28 - the field and let's take in
15:30 - i guess the cover field because now that
15:33 - we have the field i also want to have a
15:36 - two dimensional right here that's the
15:37 - exact same but that's representing which
15:39 - ones i've clicked on so we'll just say
15:43 - cover field is equal to that
15:45 - and zero i guess will represent we
15:46 - haven't clicked on or something okay but
15:48 - we have field and cover field
15:50 - for now let's figure out how we just
15:51 - draw the field then we can draw on top i
15:53 - guess
15:54 - so
15:56 - let's do the following
15:59 - okay so we need to figure out
16:01 - how many squares we're going to have on
16:03 - our screen and how large those are going
16:05 - to be
16:06 - that's going to be based on the rows and
16:07 - the calls
16:09 - uh okay so let's take
16:13 - let's say
16:15 - size is equal to and this is going to be
16:17 - the width
16:19 - integer divided by
16:21 - and then we'll go with the number of
16:23 - rows
16:24 - and that'll be how large each square is
16:27 - then we want to draw each square we want
16:28 - to draw a number in the middle we're
16:30 - going to need a font to do that so let's
16:32 - just go with
16:34 - num
16:34 - font and this will be equal to pi game
16:38 - dot font dot sys font uh not arial you
16:42 - guys already know we're going with comic
16:44 - sans here
16:46 - and that can be 20
16:47 - let's say
16:49 - num colors is equal to and then let's
16:52 - just set what color we want each one to
16:54 - be so one can be black
16:57 - two
16:58 - can be
17:00 - green
17:01 - three
17:02 - can be red
17:04 - four we can have up to eight so i kind
17:06 - of have to pick a lot of different
17:07 - colors here okay let's go six
17:09 - is equal to purple seven is equal to
17:13 - what else can i even do black green red
17:15 - orange yellow uh do we have a blue okay
17:18 - let's go with blue
17:20 - and i guess i could go with like a pink
17:21 - or something so eight pink
17:24 - these are just the colors that where i'm
17:25 - gonna draw the text in by the way okay
17:27 - so now we have num colors num font
17:29 - uh because i'm gonna use those in one
17:31 - second so let's say 4i comma row in
17:34 - enumerate field
17:36 - let's say for
17:38 - j comma
17:40 - value in enumerate and this is going to
17:43 - be row
17:44 - then we want to get the value and we're
17:46 - going to draw that so we're going to say
17:49 - uh
17:50 - we need to render some text so text is
17:53 - going to be equal to and this will be
17:55 - what i call it the num underscore font
17:59 - dot render we're going to render the
18:01 - string version of the value
18:05 - we're going to do this anti-aliasing 1
18:07 - and then the color will be my num
18:10 - underscore colors
18:12 - at the index of the value okay then
18:15 - we're going to say when dot blit
18:18 - and we're going to draw this text value
18:20 - at some position calculated by i j which
18:22 - i'll do in one second now the top left
18:25 - is where i'm going to start here so this
18:27 - should be relatively easy to do but
18:30 - let's say here that the
18:32 - y position is going to be equal to size
18:34 - multiplied by i
18:36 - and the
18:38 - x position is going to be equal to size
18:41 - multiplied
18:42 - by j
18:43 - okay and then we should be able to just
18:45 - split this at
18:47 - x y i'll have to do some more
18:49 - calculations though based on the size of
18:50 - the square i also want to draw a
18:52 - rectangle so
18:53 - let's draw the rectangle first actually
18:56 - and we'll go
18:59 - pygame.draw.rect we'll draw this on the
19:02 - window
19:03 - we need the x y and then the rex we'll
19:06 - say x y
19:07 - actually sorry we need the color
19:09 - the color of this
19:11 - let's make
19:13 - a variable wrecked color is equal to
19:16 - for now i suppose we can go with white
19:20 - okay
19:22 - and let's actually let's go with a gray
19:26 - i always forget if it's g-r-a-y or e-y
19:28 - but i think actually let's just go with
19:30 - rgb 128 128 128
19:34 - okay
19:36 - so this is now going to be
19:39 - what did i call that variable
19:41 - rect color
19:44 - okay erect color x y and then this is
19:48 - going to be size size because we're
19:50 - drawing a square and then i also want to
19:52 - have an outline for this so i'm going to
19:53 - draw
19:54 - another rectangle except the rect color
19:57 - here is just going to be black
20:00 - and then we're going to make the outline
20:02 - thickness of two so we'll draw
20:05 - actually i guess we'll draw that
20:08 - on top of this uh that way we're not
20:11 - getting a square that's too large okay
20:12 - so now
20:13 - that should be good we just need to fix
20:15 - this so now we're going in the center of
20:16 - where we currently are so we're going to
20:18 - say x plus and then this is going to be
20:21 - text dot get underscore width over 2 and
20:25 - actually this is going to be x plus
20:27 - size over 2 minus text i'll get under
20:30 - square width over 2 just trying to
20:31 - center vertically and horizontally we're
20:33 - gonna do the same thing with y
20:35 - y plus size over two
20:37 - minus text dot get underscore height
20:42 - and over two
20:44 - in case you're unfamiliar that's how you
20:45 - center the text at least that's how i'm
20:47 - going to do it and i think we should now
20:49 - be drawing that so when we go draw let's
20:53 - pass the field let's also pass the cover
20:56 - field
20:57 - and let's see what this looks like right
20:59 - now
21:00 - rose is not defined
21:02 - okay that's down here uh yes we need to
21:06 - have these in all capitals so rows
21:09 - and calls
21:11 - okay rerun
21:14 - uh key error zero forgot about that zero
21:17 - is going to be
21:19 - no color and we don't actually want to
21:21 - draw text for zero so i should have
21:23 - figured that out but let's say if
21:28 - if value does not equal zero
21:31 - great
21:32 - okay let's try this now
21:37 - key error negative one ah that's a bomb
21:38 - so if value is
21:40 - greater than zero there you go because
21:42 - again i don't want to draw the bombs
21:45 - okay oh nice that was i'm shocked that i
21:48 - actually got that first try okay so
21:49 - we're a little bit off here i think
21:51 - that's a rounding error so i'll try to
21:52 - fix that
21:54 - but that looks good right now now we
21:55 - need to cover the tiles change the
21:57 - colors and stuff like that
22:00 - i think i'm about 20 minutes in
22:03 - yeah i mean i have a lot of the hard
22:05 - stuff done but there's still a lot to do
22:08 - one third of the way
22:09 - i think i have a decent chance here to
22:11 - finish this but we'll see
22:12 - okay so window blit text x2 um what was
22:16 - the issue oh my size was a little bit
22:18 - off can we do
22:20 - one division sign and see if that gives
22:22 - it to us a little bit better there we go
22:24 - i guess we can draw with with decimals
22:26 - that's fine
22:27 - okay there is a little bit of a white
22:29 - gap here the way i'm drawing this but
22:31 - for now i think that's fine and now we
22:33 - want to do something
22:35 - where we are going to
22:38 - not show those numbers if they're
22:39 - covered i also don't want those to be so
22:42 - gray
22:43 - let's make this closer to a white so
22:45 - like 200
22:47 - 200
22:48 - 200 and then we'll have clicked
22:51 - wrecked color and that can be a darker
22:54 - gray of like 140 140
22:57 - 140. let's try that quickly
23:01 - nice okay a little bit of a lighter gray
23:03 - i think that's nice so now
23:04 - that we have that we are only going to
23:07 - actually display the number and we're
23:10 - going to have this wrecked color as
23:11 - opposed to the cover direct color if
23:13 - we're not covered right
23:15 - so
23:16 - what we need to do here is check if the
23:19 - current thing that we're looping on is
23:21 - covered and we haven't clicked on it yet
23:23 - so we can do that
23:25 - and we can say
23:28 - is covered is equal to
23:30 - and then this will be
23:33 - cover field
23:36 - and then we'll have
23:39 - row column or yeah row
23:43 - no i j
23:45 - and if that's equal to 1 or if that's
23:48 - equal to 0 then it will be covered so
23:50 - we're going to say if
23:51 - is covered
23:54 - then we will simply draw
23:57 - actually i guess we can leave the
23:58 - outline
24:00 - then we'll draw this but we'll do this
24:02 - in
24:03 - actually yeah that'll be wrecked colored
24:05 - and then this will be the clicked
24:07 - wrecked color
24:09 - okay
24:10 - um
24:13 - just trying to think here how i want to
24:14 - do this let's put in else
24:17 - let's put this
24:19 - we want to do this no matter what i
24:21 - actually think it's going to be cleaner
24:23 - to do
24:26 - this
24:28 - okay
24:29 - that looks good to me now when we run
24:31 - this it shouldn't show us any numbers
24:33 - okay good now i want to make it so i can
24:35 - click and have numbers okay we're
24:37 - getting somewhere here but this is still
24:40 - far from being finished so let's now
24:41 - implement a click so we're going to say
24:43 - if
24:44 - event.type equals equals pi game dot not
24:48 - key down but
24:50 - mouse button down
24:52 - it's pass for now
24:53 - let's write a function that can
24:55 - determine which square we clicked on so
24:58 - let's say
24:59 - define and then this is going to be
25:03 - get grid pause so from our mouse
25:05 - position we need to know where we are in
25:07 - the grid so that we know what to uncover
25:09 - uh so we're going to take in i guess
25:11 - mouse pause okay we'll say mx and y is
25:14 - equal to
25:15 - mouse position and just decompose that
25:18 - and now that we have that we also need
25:20 - to know
25:22 - actually we have these as global so i'll
25:24 - just treat them as global variables
25:25 - again not best practice here i'm trying
25:27 - to go fast don't roast me too badly here
25:30 - let's figure this out so row is going to
25:32 - be equal to and then this will be mx and
25:35 - i think we can just integer divide this
25:37 - by the size
25:38 - but i need to recalculate size
25:41 - i really should have that as a global
25:42 - probably so let's actually do that
25:45 - and
25:46 - yeah
25:47 - i can put that here
25:50 - size and then let's look for size okay
25:54 - and i guess let's do this
25:57 - and replace that with size okay replace
26:01 - that everywhere we don't need this
26:02 - anymore
26:04 - uh now we have size we don't need to
26:05 - recalculate because we already have it
26:07 - so we can divide by size call is equal
26:09 - to m y and this needs to be the other
26:12 - way around
26:14 - oversize and then return
26:18 - row
26:19 - call um
26:21 - yeah the issue is we need to we could
26:24 - click outside of the grid as well
26:26 - so i guess we'll just do a check down
26:28 - here and make sure we are in the grid
26:30 - before we continue there but i think
26:31 - that should actually give it to us
26:33 - so let's say grid underscore pause is
26:37 - equal to get grid pause and then we want
26:40 - the mouse position so this would be
26:41 - pygame
26:42 - mouse.get underscore pause
26:45 - and we can go
26:47 - row call we should always be in the
26:49 - correct column but we might not be in
26:51 - the correct row so we'll say if row
26:54 - is greater than or equal to rows
26:57 - and i guess while we're at it or
27:00 - calls
27:01 - or call is greater than or equal
27:04 - to calls then we will simply
27:07 - continue because we didn't click in the
27:09 - square otherwise we did click in the
27:11 - square so let's uncover it so to do that
27:13 - we can just say
27:14 - cover field row call is equal to 1 and
27:17 - that can tell us that we uncovered it
27:19 - and then we can kind of trigger an event
27:21 - and uncover the rest of the stuff that
27:23 - we need to see so let's try this now
27:25 - and let's click and the list indices
27:28 - must be interested slice is not float
27:29 - okay integer divided that should have
27:31 - given me
27:33 - let's just round these and that should
27:35 - fix it
27:37 - okay let's try
27:41 - and listen what why is it giving me
27:44 - color field row call equals one
27:47 - row call recall
27:49 - uh okay let's do
27:54 - int
27:56 - the integer division i should be giving
27:58 - me an integer but i think it's because
28:00 - my mouse position is float that i'm
28:01 - getting that so this should hopefully
28:03 - work now
28:04 - let's see and when i click
28:07 - okay nice uh unfortunately okay there we
28:10 - go and then i find a number now of
28:11 - course this is not how the clicking is
28:12 - supposed to work in minesweeper you're
28:13 - supposed to cover all the blank tiles
28:15 - until you hit the numbers so we have to
28:16 - implement that
28:17 - but for now this is looking pretty good
28:20 - okay so once i click cover field equals
28:23 - one then i need to say
28:25 - uncover
28:27 - from position
28:29 - let's pass row column and let's say
28:34 - oops
28:35 - so now i actually need to write a
28:36 - graphing algorithm that's going to
28:39 - essentially find where i clicked if it's
28:41 - my first click at least because that's
28:43 - how this one works i think and if it's a
28:45 - blank tile then it's going to
28:47 - essentially find all of the other blank
28:48 - tiles until it gets to completely
28:50 - surrounded by numbers and that's what it
28:52 - will uncover so i need to write that
28:54 - which will be a breadth-first search um
28:57 - yeah breadth first search i think not
28:58 - depth first search anyways uncover from
29:00 - position row call uh cover field uh we
29:03 - also need not just the cover field but
29:06 - we need the mine field as well
29:09 - okay and did i call it minefield no i
29:10 - just called it field
29:12 - okay so let's take in
29:15 - exactly that here
29:17 - i was writing a function was i not
29:19 - define
29:20 - uncover
29:22 - from position and let's implement a
29:24 - depth first search here so we can use a
29:27 - cue
29:29 - so let's import that here we also no
29:31 - longer need this
29:33 - am i still printing out the thing i
29:35 - don't think i am so that looks good no i
29:38 - am so let's get rid of that okay we need
29:40 - a queue though so let's say
29:43 - from collections import queue
29:47 - you could also use a list but this
29:48 - should be better
29:50 - for rq let's say q
29:52 - is equal to q and actually i believe
29:54 - that it's q dot q
29:56 - uh we'll see if that works though okay
29:58 - q.q q dot add or is it q dot put i think
30:02 - it's q output we're gonna put row call
30:05 - uh we're gonna say wow
30:07 - q well not q dot empty yep that's what
30:09 - we want uh then we will say i think it's
30:12 - q dot pop we'll say current is equal to
30:16 - q pop
30:17 - okay
30:18 - uh and what we're doing here is we're
30:21 - from every element in our queue just
30:23 - expanding looking at the neighbors if
30:24 - there's an empty tile we're going to
30:26 - uncover it if there's a number we're
30:27 - going to uncover it as soon as we get to
30:29 - a number we're no longer going to add
30:30 - the neighbors
30:32 - that's what we're going to do here so
30:34 - we're going to say neighbors
30:37 - we can spell that is equal to
30:39 - get neighbors and this is going to be
30:44 - asterisk current which will be a
30:46 - position we'll say 4 neighbor in
30:48 - neighbors and we need to get the value
30:52 - in the uncovered field so we'll say
30:54 - field at and
30:57 - instead of neighbor we can say rc so
30:59 - we'll say field rc
31:02 - value is equal to field rc
31:05 - we'll say if
31:07 - value uh is
31:10 - less
31:11 - if value is equal to zero actually so if
31:13 - it's an empty tile then what we will do
31:16 - is uncover it otherwise
31:21 - actually
31:22 - one second let's think about this for a
31:23 - second
31:24 - q
31:25 - dot put and i just called this q so
31:28 - let's put that there we'll say q output
31:31 - rc
31:33 - okay if the value is 0 because we're
31:34 - going to continue looking if the value
31:36 - is a number however we don't want to do
31:38 - that but we do want to uncover so we'll
31:40 - say the cover field
31:42 - at rc
31:44 - is equal to and then this will be one
31:46 - and then we'll have to do a check
31:47 - somewhere else to make sure we didn't
31:48 - click on a bomb but i think that's
31:50 - actually fine for now
31:52 - let me try that uh
31:55 - unable to import q that's because i need
31:57 - to do this
31:58 - okay let's try that uh can i import q
32:03 - what is this called let's do a quick
32:05 - search here
32:06 - q
32:08 - python
32:09 - um from oh is it literally
32:12 - is that actually what it is okay i
32:13 - thought it was from collections
32:15 - uh from
32:17 - no way that's right
32:19 - yeah lowercase that's what i thought
32:20 - okay
32:22 - from q import q and then i guess
32:26 - yeah let's
32:28 - try this now
32:30 - okay press
32:32 - q is not defined okay let's go back here
32:34 - because i realize i need to do this
32:37 - all right how are we looking on time
32:38 - looks like i'm about half an hour in
32:41 - uh cue object hasn't let you pop q dot
32:44 - get
32:46 - yeah okay
32:47 - let's try this now
32:50 - missing two rows and calls okay get
32:52 - neighbors uh
32:56 - rose calls let's try this
33:02 - okay and now nothing's happening when i
33:04 - click
33:07 - oh ah
33:09 - my um
33:11 - i wrote an infinite loop accidentally uh
33:13 - let's how did i mess that up
33:15 - q put rc oh it's because i'm revisiting
33:17 - elements uh visited
33:21 - is equal to set okay and we need to add
33:25 - our c to set and skip if in set so we
33:29 - will say we'll do this at the end i
33:31 - guess uh set
33:33 - dot add
33:35 - rc
33:36 - we'll say
33:39 - if rc
33:40 - in visited continue okay that should
33:44 - hopefully fix that
33:46 - now when i click add for set object it's
33:47 - not applied to tuple object uh can i not
33:50 - add a tuple to the set was that not
33:52 - allowed yeah i can do that right set o
33:55 - visited dot add
33:57 - okay i guess i'm making these mistakes
33:59 - if i want to finish this wow okay um
34:03 - is that what should have happened i
34:06 - actually yeah i think that's correct
34:10 - uh any of you that play minesweeper i
34:11 - guess i mean i'm not live right now but
34:13 - uh you can tell me in the comments if
34:15 - this looks right i think this is
34:16 - actually correct uh now if i click
34:18 - somewhere else
34:19 - yeah okay it fills in
34:21 - for the bombs i want to draw something
34:23 - okay that looks good though for
34:25 - uncovering currently
34:28 - yeah
34:29 - i think that's fine
34:30 - uh okay
34:32 - obviously more stuff that needs to be
34:34 - added there but for now that looks good
34:36 - let's add some more bombs because i have
34:38 - a feeling
34:39 - that these are not uh and really
34:42 - i should call these bombs
34:45 - so let's rename that
34:47 - um
34:49 - bombs no not
34:51 - bombs okay there we go
34:54 - let's try this
34:56 - and
34:57 - there we go that's better i feel like
34:58 - that's more like what we should get here
35:01 - right when you have when you click on
35:02 - the first try
35:03 - okay
35:04 - uh and then we need to have something
35:07 - for left clicking now so you can add a
35:08 - flag so let's do that we're gonna say
35:12 - flag underscore
35:14 - positions
35:15 - is equal to and i guess that can just be
35:17 - a set that's fine
35:19 - uh yes that looks fine to me
35:21 - so now when we're checking
35:23 - why am i doing that in here sorry it's
35:25 - to go down here
35:27 - in main okay flag positions
35:31 - uh for the flag positions we need to
35:33 - differentiate between if you're clicking
35:35 - the left mouse button or the right mouse
35:38 - button uh there is a few ways to do this
35:40 - but i'll say
35:42 - mouse pressed
35:45 - is equal to
35:46 - pygame dot mouse
35:49 - dot get underscore pressed
35:52 - and we'll say if mouse pressed
35:55 - zero that means left click
35:57 - then do all of that
35:59 - l if mouse
36:02 - underscore pressed
36:03 - 2
36:04 - then we want to add a flag
36:08 - so same thing though we want to get the
36:10 - row call that we press so we can
36:12 - i guess actually take
36:15 - this and put this up here because if we
36:16 - didn't click a valid square it's going
36:18 - to be the same process
36:21 - okay let's move that back
36:23 - how we doing on time okay it looks like
36:25 - i have about 25 minutes left 20ish
36:26 - minutes uh should be a fair amount of
36:29 - time but we probably won't get any nice
36:31 - animations or anything done
36:33 - okay now if you press the right mouse
36:36 - button we want to add a flag so we will
36:38 - say flag
36:41 - underscore positions dot add row column
36:45 - okay
36:46 - we want to then
36:48 - set something in our
36:51 - cover field for a flag i really should
36:54 - have been more specific with what
36:56 - i'm putting in the field so i have
36:59 - negative one which is a bomb zero which
37:01 - is nothing regular numbers and i guess
37:03 - we'll go with negative two as a flag
37:05 - just because i don't have anything else
37:06 - to put there so we'll say cover field
37:09 - and then this will not be row call in
37:11 - fact i don't actually need to do that we
37:14 - can leave that for now
37:16 - we'll say cover field row call is equal
37:18 - to negative 2 indicating a flag and then
37:20 - we need to draw something on there to
37:22 - make it a flag so let's go back to our
37:25 - draw
37:26 - and
37:28 - okay is covered okay draw a rectangle
37:32 - value
37:33 - we need another lf in here checking if
37:35 - it's a flag essentially
37:37 - so if it's covered
37:41 - we actually need something for this to
37:42 - check if it's a flag
37:45 - not the cleanest way to do this but
37:47 - should be fine so if value is equal to
37:48 - negative two we'll continue after we
37:50 - simply draw
37:52 - a rectangle that's a different color
37:55 - so rather than rect color let's go with
37:58 - flag color and i
37:59 - guess we can just color the whole
38:01 - rectangle
38:03 - like red or something like that
38:04 - indicating that it's a flag so let's
38:05 - just say flag underscore wrecked
38:09 - underscore color
38:10 - is equal to
38:12 - we can go with red
38:13 - and where are we here flag underscore
38:17 - wrecked color
38:18 - okay uh you do also have a limited
38:21 - number of flags so let's say flags is
38:24 - equal to bombs and when you set a flag
38:27 - that needs to decrease so flags minus
38:30 - equals one although if you left-click on
38:32 - a position that's already a flag then we
38:34 - need to change that and have it not be a
38:36 - flag so we'll implement all of that so
38:38 - we'll say
38:40 - if
38:42 - yeah we'll say if cover field row call
38:47 - is equal to
38:48 - negative 2
38:50 - then we'll actually
38:52 - do something different we'll make it
38:54 - equal to
38:56 - oh god this is a bit more difficult now
38:58 - because
39:00 - you could make something a flag that's a
39:02 - number
39:03 - so we need to now essentially oh well
39:05 - this is in the cover field though so
39:06 - that's fine it's just the cover field so
39:08 - we can just make it zero and just make
39:09 - it still be covered uh okay
39:12 - so we've cover field like that that's
39:14 - fine we need to remove you now so flag
39:16 - positions dot
39:20 - remove row call and now that i'm
39:22 - thinking of it i probably don't actually
39:24 - need this set here uh because we're just
39:26 - going to represent in the cover field so
39:28 - let's remove that
39:30 - this will be flags plus equals one if
39:33 - you remove a flag we'll say otherwise we
39:36 - will do this
39:39 - okay let's try this out now and see if
39:41 - we can add a flag
39:46 - okay so it looks like my right click
39:47 - actually isn't working if mouse pressed
39:50 - 0 if mouse pressed 2 i'm right clicking
39:54 - but it doesn't seem like it's doing this
39:56 - cover field row call equals negative two
39:59 - where are we here
40:02 - that
40:03 - where's my draw
40:05 - if value equals negative two
40:08 - ah it's because we don't want to check
40:09 - value we want to check cover field
40:11 - is equal to zero
40:13 - so actually let's just do this is
40:15 - covered
40:17 - is flag is equal to cover field
40:22 - i j
40:23 - equal to negative 2. so now rather than
40:25 - if valley you're going to say
40:27 - if is flag
40:31 - and then we'll have to do something with
40:32 - the bombs yeah i'm
40:34 - weary about the time here okay so there
40:36 - we go so those are my flags when i press
40:38 - we need to we need to do something with
40:40 - the flags i can't
40:43 - not actually implement them obviously so
40:45 - let's do something with the flag so that
40:46 - when we hit a flag in in the cover field
40:50 - we
40:50 - don't add that as a neighbor something
40:53 - along the lines of that
40:55 - again i'm not super familiar with
40:56 - minesweeper let's actually go back to
40:58 - minesweeper here and let me just add a
41:00 - flag like here here here here and if
41:04 - let's do like this
41:07 - and if i like click in there oh
41:09 - well of course i clicked on a bomb that
41:11 - was
41:12 - great timing
41:13 - uh okay can we change back here easy
41:15 - let's go flag flag flag flag flag flag
41:19 - uh
41:21 - maybe it's because of my it was my first
41:23 - turn let's try this though
41:26 - okay so it doesn't expand beyond the
41:28 - flags but if i click like here
41:31 - it just does a single square at the time
41:32 - at a time eh
41:34 - okay so maybe on my first click i'll
41:36 - expand everywhere
41:38 - it's if you're clicking on blank square
41:40 - i'm not sure i'm super familiar with how
41:42 - the clicking works but we'll try to
41:44 - continue okay
41:46 - so continuing here we have our flags
41:48 - those need to be accounted for as we
41:51 - expand from a square uh so create mine
41:54 - field where even do i have this function
41:56 - uncover from position
41:59 - yeah
42:01 - let's do something here
42:05 - hmm
42:07 - i'm really i'm just confused here with
42:09 - how the flags work in terms of
42:11 - uncovering
42:12 - again i'm not a huge mine sweeper player
42:15 - and i keep calling it minefield 2 i
42:16 - think i'm pretty sure you only do this
42:19 - if you hit a blank square
42:22 - or if it's your first click so we can
42:26 - i guess say clicks equals zero
42:30 - we'll say
42:34 - if clicks is equal to 0 then we'll do
42:38 - this
42:40 - or if
42:42 - and then this will be
42:43 - field
42:46 - at row
42:49 - call
42:50 - is
42:52 - equal to zero yes so i think if you hit
42:54 - a blank tile we expand all the way
42:57 - yeah that makes sense to me if you just
42:59 - hit an individual number you just
43:00 - uncover that one number now let's go to
43:03 - uncover from position and we need to now
43:05 - handle our flags
43:06 - and checking if something is a flag in
43:08 - the cover field so if value is equal to
43:10 - zero and
43:12 - the cover field at rc
43:16 - is not a flag
43:18 - does not equal
43:22 - how did i how did i put these flags did
43:24 - i put them in the cover field or did i
43:25 - put them in the field
43:28 - now i'm really confusing myself here
43:29 - okay cover field negative two
43:32 - all right that's fine so actually in the
43:34 - cover field yeah i guess we can still
43:35 - keep it as negative two but i'm using
43:37 - the cover field not the regular field
43:38 - for my flags okay so let's go
43:42 - where were we here
43:43 - cover field rcu so we can't set that yet
43:47 - it's gonna have to go here
43:49 - okay
43:50 - so uncover
43:52 - uh if the field does not equal negative
43:54 - two then put this
43:57 - okay
43:58 - and then
44:02 - so if the value is zero put it in the
44:04 - queue but no matter what on this we're
44:06 - uncovering it we're adding it to visit
44:08 - it that makes sense if this is a flag
44:10 - though we probably we don't want to
44:12 - uncover it if it's a flag
44:14 - um
44:17 - if value equals zero
44:20 - and cover field does not equal negative
44:22 - two and then i guess i have to do
44:23 - something like this
44:26 - okay let's try this i'm again a little
44:28 - confused on on what's going on here so
44:30 - let's put a few flags like this uh okay
44:34 - i think that worked so it just uncovered
44:36 - all the neighbors of the square i
44:37 - clicked on because it was my first click
44:39 - um all right let's click again
44:41 - and see that shouldn't have happened
44:43 - because this was a value so since it was
44:44 - a value i shouldn't have done that so
44:46 - let's go back here
44:47 - and
44:49 - if cover fields
44:52 - so wait where does this press it's right
44:55 - here
44:56 - uh and field row call equals zero
44:59 - i'm not incrementing clicks okay
45:04 - plus equals one okay let's try this now
45:08 - so
45:09 - when i click first time okay that's good
45:10 - click again we're only getting the
45:12 - individual number
45:13 - uh and then let's have something so we
45:15 - draw the bombs so we can see where those
45:18 - are so let's go to draw
45:20 - and
45:21 - we need something for bombs we have is
45:23 - covered okay otherwise draw this
45:26 - but we need to check if we are bomb so
45:28 - we'll say is underscore bomb
45:30 - is equal to value equal to negative one
45:33 - if is flag okay
45:36 - and then we'll say if is
45:38 - underscore bomb uh in flag i'm thinking
45:41 - we should probably change that to be
45:42 - green and then the bomb will be red so
45:45 - green and then bomb
45:47 - is equal to red and i guess we can draw
45:49 - a red circle inside of a rectangle for
45:52 - the bomb so we'll say if is bomb
45:54 - then we will draw
45:57 - yeah we want to draw this clicked cover
46:00 - rectangle
46:01 - if is covered
46:03 - okay we'll say otherwise here
46:06 - we'll do this we'll draw this but then
46:08 - on top
46:09 - if it's a bomb and it's uncovered then
46:11 - we'll draw that so we'll say if bomb
46:15 - then
46:16 - pygame dot draw dot rectangle uh we want
46:20 - to draw this on window we want this to
46:22 - be the
46:23 - bomb underscore color did i call it that
46:27 - uh bomb underscore color okay
46:31 - all right bomb color where are we
46:34 - going here
46:36 - i've completely lost myself
46:38 - okay there we go my game direct and then
46:41 - we need to pass
46:44 - drawing a circle
46:46 - need to pass the x y and the radius so
46:49 - for the x this is going to be
46:51 - i think i have x y here yeah so x y but
46:54 - this is going to be x plus size over 2
46:56 - because we need the middle and y plus
46:58 - size over 2 but this needs to be all
47:00 - capitals
47:01 - okay so let's
47:03 - replace that
47:04 - for the radius this will be the size
47:08 - minus two just so it doesn't fill
47:10 - actually we'll go size minus
47:13 - i don't know like three or four just so
47:14 - doesn't fill the entire thing and that's
47:17 - fine for now okay let's try this
47:22 - and let's click okay so it uncovers a
47:24 - bunch of stuff here click again okay so
47:26 - since it was empty space it uncovered
47:28 - all the empty space
47:30 - if i add a flag okay and i can click so
47:32 - two
47:34 - click here i want to see a bomb
47:36 - oh there you go okay that's a massive
47:38 - bomb uh the radius needs to be way less
47:40 - than i thought okay so let's go
47:42 - for the size of the radius i guess this
47:45 - needs to be size over 2
47:47 - minus some constant factor because yeah
47:49 - the size is the entire size of the
47:50 - square so that makes sense let's rerun
47:54 - okay
47:55 - let's click
47:56 - click click click
47:58 - okay give me a bomb man come on where's
48:00 - the bomb i guess there's got to be one
48:01 - close okay and then there we go we'll
48:02 - find a bomb so when we click on a bomb
48:04 - yes we got to end the game we can just
48:05 - reset i guess uh but we'll continue i
48:08 - think
48:10 - i mean from what i can tell here this
48:11 - this looks good
48:13 - um
48:15 - that's interesting okay so i can remove
48:16 - that by by clicking on it like that and
48:19 - i can uncover by clicking once
48:21 - and actually i shouldn't let myself
48:22 - click on a flag that's kind of the
48:24 - reason why they're there so let's
48:25 - implement that too
48:27 - we're mouse pressing here to uncover so
48:30 - if the clicks equals zero
48:32 - or it's that but we're going to say if
48:35 - mouse pressed
48:37 - actually we'll go here
48:40 - and this will be
48:42 - the cover field
48:45 - at
48:46 - r row
48:50 - call
48:51 - does not equal negative two for flag so
48:53 - don't let me click on a flag essentially
48:55 - i can unset the flag in that way uh
48:57 - clicks plus one okay just so we know how
48:59 - many clicks we're at
49:01 - looking better let's influence something
49:03 - for clicking on a bomb so uncover from
49:05 - field okay
49:07 - now let's handle clicking on the bomb
49:09 - down here i guess
49:11 - so we can continue to do all of this um
49:14 - actually we shouldn't uncover from
49:16 - position if we clicked on a bomb i guess
49:18 - we'll check this at the top then so we
49:20 - will cover field
49:22 - but then we'll say
49:24 - if field
49:26 - row call
49:28 - is equal to um negative one which is a
49:31 - bomb then bomb
49:35 - clicked exclamation point uh we need to
49:37 - reset and we want to probably just draw
49:39 - something on the screen
49:41 - uh let's implement a function you say
49:42 - define draw lost
49:45 - okay
49:46 - let's just take in some text
49:48 - and let's
49:50 - take in our window too and let's just
49:52 - draw some text on the screen and just
49:53 - display it saying you lost and then i
49:54 - guess we'll reset everything
49:57 - so for drawing lost we will say text is
50:00 - equal to this will be the lost font
50:03 - which i will implement up here
50:05 - so let's go lost underscore font
50:08 - is equal to pie
50:11 - comic game.system.font.com
50:12 - you guys already know best font ever
50:14 - okay lost font go with 100
50:18 - let's spread these out a bit
50:21 - okay
50:22 - we have our lost font which is here dot
50:26 - render
50:27 - text one and color uh i'll just hard
50:31 - code this in as black for now
50:33 - and then we're gonna say win
50:35 - dot blitz
50:37 - and wanna blitz the text and the
50:39 - position is going to be the width
50:42 - over 2 minus the text i get with over 2
50:45 - and there we go we can do that to put it
50:47 - in the center of the screen then we'll
50:49 - say hi game.display.update
50:52 - and time actually we'll delay down here
50:56 - so let's go
50:58 - draw lost win and then
51:02 - you lost try again dot dot dot i know
51:05 - you're supposed to uncover all the bombs
51:06 - i'm kind of on a time crunch here though
51:08 - so i want to get something functioning
51:09 - and then we can maybe work on this in
51:11 - another video but let's draw lost and
51:13 - then let's go pygame dot time dot delay
51:17 - uh let's delay
51:19 - five seconds
51:20 - and then we need to reset so to reset we
51:23 - really can just do that
51:26 - um
51:27 - i don't like writing this all in here
51:30 - this is getting to be very messy code
51:32 - but
51:34 - we can do that
51:35 - just fine and that that should reset all
51:37 - the variables we need
51:38 - usually i put this in some type of
51:39 - object or some type of class uh but for
51:42 - now that's fine
51:43 - okay so that handles if we lost uh to
51:45 - handle if we won we essentially check if
51:47 - every single thing is uncovered other
51:50 - than the bombs
51:52 - that's more complicated but let's try
51:54 - this for now and see if we can get
51:56 - losing to work okay so three so there
51:59 - should be a bomb somewhere around here
52:01 - okay there must be one there okay you
52:02 - lost try again uh we want to refresh and
52:05 - show the bomb though first before we
52:06 - lose yeah see that's no good
52:08 - okay so let's
52:10 - so we draw a lost and we delay
52:12 - however before we draw that
52:14 - let's draw and we can pass the win
52:19 - the field and the cover
52:22 - uh and then it's delaying so when i
52:23 - click it's
52:28 - we could just do something like this
52:31 - lost is equal to true
52:34 - i think this is going to be better here
52:36 - i'm going to say lost is equal to false
52:39 - and then down here we'll say
52:42 - if lost
52:43 - we can put all that in here
52:45 - that's a little cleaner for us
52:48 - i just want to make sure
52:50 - that our yeah this delay is kind of
52:54 - throwing me off here maybe we just won't
52:56 - let you do anything when it's lost and
52:57 - then after five seconds it will reset
53:00 - and there's some options here but let's
53:02 - try this for now okay so click uh there
53:05 - must be a bomb here right
53:07 - uh no okay one here nope one here
53:11 - so i might be tripping but it says three
53:13 - so that would mean that there would be a
53:14 - bomb here here and here
53:17 - but when i click on it
53:19 - i'm not getting one so i must something
53:21 - must be messed up here unless i've
53:23 - incremented these incorrectly but that
53:25 - should be a bomb right
53:30 - uh cover is not defined
53:32 - where did i where do i even have that
53:35 - cover
53:36 - underscore field
53:38 - um i want to draw all of the bombs let's
53:41 - just remove
53:42 - something here so if his flag if is
53:45 - covered we do this
53:47 - where's my bomb
53:48 - so if it's not covered if it's bomb
53:53 - all right guys i'm getting a bit lost
53:54 - here because i've i feel like i have a
53:56 - bug here so this is five right that's
53:58 - not it's not possible for this to be
53:59 - five so i think for the way i'm
54:01 - incrementing this must be
54:03 - incorrect in some way
54:05 - um
54:07 - yeah surely it's got to be incorrect
54:09 - based on the the bomb positions
54:11 - because there's got to be a bomb
54:13 - somewhere here
54:14 - and okay there's a bomb there but like
54:16 - if i'm looking at that i don't the
54:18 - numbers here are just they look to be
54:19 - incorrect to me so i think i've messed
54:21 - something up you lost try again we need
54:23 - to stop doing that i need to set lost
54:25 - equal to false so let's
54:28 - get out of that um
54:31 - did that even quit the game okay
54:35 - let's go
54:36 - where was this here and say lost is
54:41 - equal to false because we're resetting
54:43 - that would be better but i got to check
54:45 - my my bomb positions here something's
54:47 - wrong with what i'm doing with the bombs
54:49 - and the uh
54:50 - the numbers uh so for mine in mind
54:55 - positions neighbors equals get neighbors
54:57 - mine row call for c field rc plus equals
54:59 - one ah i can only do this if it's not a
55:03 - bomb
55:04 - that's probably the issue is that i'm
55:06 - overriding bombs that currently exists
55:08 - so if
55:09 - um
55:10 - field
55:13 - r
55:14 - c
55:15 - does not equal
55:17 - negative one
55:19 - then we can do that i think that will
55:21 - fix it but i think i was overriding
55:23 - bombs by adding one to them and that's
55:24 - probably why i was losing them so let's
55:26 - see if we have neighbors
55:28 - loop through all the neighbors uh if the
55:30 - neighbor is not a bomb then it's fine to
55:32 - increment one we'll do that yeah okay i
55:34 - think that's good let's try this now
55:37 - that's probably going to fix a whole
55:38 - whack of problems for me okay so there
55:40 - must be a bomb there right yeah okay
55:41 - good so now that looks like that's
55:43 - working
55:44 - okay you lost try again
55:46 - all right now let's add a
55:49 - flag
55:50 - i guess we're going to cover the bombs
55:52 - with flags so let's actually try to do
55:54 - this so 2 2 1 1 1 so there must be one
55:57 - here so we can cover that
55:59 - 2
56:00 - so it's either here so there's one there
56:02 - so it's either here or here so we can't
56:04 - do anything there that's one so that
56:06 - must be a bomb
56:07 - so that means oh
56:09 - because there's two there okay
56:10 - apparently i'm not very good at this
56:11 - game
56:12 - uh you guys get the point now there's
56:14 - also a thing where when you click on the
56:15 - number it's supposed to expand outwards
56:18 - i think that's going to be an addition
56:19 - because i'm probably almost at an hour
56:21 - here but let's try to see if we can
56:23 - implement a way to win first and that's
56:25 - probably going to be easier if i set
56:26 - this
56:27 - down a bit and make this like 10 by 10.
56:30 - so let's try this
56:33 - okay
56:34 - um yeah this is gonna be much easier
56:36 - okay so two one one so there must be a
56:38 - bomb here
56:39 - and then there's i guess one here
56:42 - and one here would that make sense
56:45 - one
56:46 - if this says one oh it's because it's on
56:48 - the diagonal so that could be it too
56:49 - okay so we don't i don't actually know
56:51 - which ones all of these would be
56:52 - although i'm sure there's a way to
56:53 - figure that out right
56:55 - um
56:57 - okay so one one one one so there must be
56:59 - a bomb here
57:01 - one
57:02 - one one one two
57:05 - surely one of these isn't a bomb right
57:08 - that would be one
57:10 - there you go and then that one okay good
57:11 - nice uh let's continue here so one on
57:13 - one so this would be a bomb
57:15 - um up here
57:18 - there's only one
57:19 - that's good okay one that's fine
57:22 - so
57:23 - three
57:24 - if it's three is only three squares so
57:26 - that's a bomb
57:27 - that's a bomb that's a bomb
57:30 - three
57:31 - that must be a bomb two
57:33 - that's three this is one that's two that
57:35 - must be a bomb um this is a lot harder
57:38 - than it looks i never really play this
57:39 - game i'm gonna spend so much time just
57:40 - trying to complete it
57:42 - let's just just just go crazy and click
57:44 - a few random ones and see if we get okay
57:46 - and we lost uh i think you know honestly
57:49 - i'm pretty happy with this so far we
57:51 - need a way just to reset when we win so
57:53 - if i implement that then i think like
57:55 - the core functionality of the game is is
57:57 - pretty much finished and we would just
57:59 - need to add some small touches tell you
58:00 - how many flags you have left stuff like
58:02 - that um
58:04 - yeah that's and we need a timer too to
58:06 - keep track of how much time so let's
58:08 - quickly i think i have enough time to do
58:10 - a timer so let's say
58:12 - timer or
58:15 - start underscore time is equal to
58:16 - time.time and that's going to be as soon
58:18 - as you click so we'll say
58:22 - start time is equal to zero for now and
58:25 - then as soon as we do our first click so
58:28 - if clicks equals zero
58:30 - or field row
58:32 - i hate the way that i've i've done this
58:34 - here
58:35 - if clicks equals zero
58:40 - or field row
58:42 - okay you know what
58:43 - just for time's sake here it's not going
58:45 - to be clean but that's fine
58:47 - start time equals time.time
58:49 - okay
58:50 - we'll say
58:52 - current
58:53 - time is equal to time.time minus the
58:56 - start time and then when we draw we'll
58:58 - pass that as well
59:00 - so we'll pass current time
59:03 - and current time
59:05 - let's go to draw
59:06 - and let's take in
59:09 - current underscore time
59:11 - uh let's get a time font going quickly
59:15 - okay time underscore font uh i guess
59:18 - we'll do this just like 50 or something
59:21 - and then we're gonna go to draw
59:24 - okay
59:25 - and up here i guess we can just draw it
59:28 - down below
59:30 - uh we will say time
59:33 - text is equal to and this will be the
59:37 - time font dot render
59:40 - and this will be
59:42 - an f string of
59:45 - time elapsed
59:48 - colon
59:49 - round
59:51 - current time
59:53 - okay
59:54 - and
59:55 - that is good and then we'll say win dot
59:58 - blitz
59:59 - and this will be time text and then we
60:02 - will put this we could just hard code a
60:04 - position for now something like it's
60:05 - going to be the height of the screen
60:08 - minus the time
60:11 - the height of the screen
60:13 - minus the width of the screen because
60:16 - that's what's going to be the bottom
60:20 - over 2
60:23 - and then we're going to subtract from
60:25 - that
60:26 - the time text dot get underscore
60:30 - height over 2
60:32 - for the x position though this we can
60:34 - just put at like 10 or something okay
60:37 - let's try that
60:39 - and let's see if i mess that up okay
60:41 - time is not defined time text i need to
60:44 - import time
60:48 - okay i think i'm just about getting to
60:50 - my time limit too i didn't start this
60:52 - exactly at an hour so it's a little bit
60:53 - messed up time font.render let's just
60:56 - fix that quickly okay we can just go
61:00 - one and black i would like some
61:02 - variables for these but that's fine
61:05 - run one more time
61:07 - at least three arguments what did i what
61:10 - am i messing this up with
61:13 - oh i passed that here
61:17 - okay come on let's get a good run in
61:19 - here while we end where's the time it's
61:21 - not showing up uh come on uh windup lit
61:23 - time text the height minus the width
61:26 - over two
61:28 - minus maybe plus is what we're looking
61:30 - for there
61:31 - uh no okay let's just let's just hard
61:34 - code this so 10 and then
61:38 - this can just go to like
61:42 - 650. what did we what did we make the
61:43 - height
61:44 - 700 so let's just do
61:48 - 700 and
61:52 - actually no come on this will work
61:53 - height minus the time text dot get
61:56 - underscore height
61:59 - over two
62:01 - all right run
62:03 - time elapsed okay let's move that over
62:06 - height
62:07 - uh
62:08 - no
62:12 - minus just this
62:16 - okay there we go that's fine and that's
62:18 - giving me a massive number why does that
62:20 - give me such a big number
62:22 - okay come on let's figure this out
62:24 - quickly we have current time ah it's the
62:26 - other
62:27 - yeah time to time minus start time
62:30 - oh it's because i haven't clicked yet ah
62:32 - okay that's that makes sense um
62:36 - damn we should only be doing that if we
62:37 - have a start time
62:40 - if start time
62:43 - is greater than zero
62:46 - else current time
62:49 - is equal to zero okay let's run
62:53 - and there we go let's click
62:55 - ah okay i
62:57 - damn it i need to fix that okay uh come
62:59 - on run one more time
63:02 - there we go oh and it's showing bombs
63:09 - okay guys well i've clearly messed
63:11 - something up um
63:15 - yeah we'll i'll have to look at this in
63:17 - another video but that was my coding
63:19 - challenge i would say this is probably a
63:21 - fail in terms of completing the game but
63:24 - i was able to whip up what is it here uh
63:26 - almost 220 lines of code not fully
63:29 - functioning i was a little ambitious
63:30 - with how much i'd be able to get done
63:32 - but we could continue this in another
63:35 - coding challenge in the future if you
63:36 - guys would like to see that i wouldn't
63:37 - mind doing another video and kind of
63:38 - wrapping up this project please let me
63:40 - know in the comments down below also
63:42 - down to ditch it and work on something
63:44 - else if you guys would find that more
63:45 - interesting hopefully this was
63:46 - insightful hopefully this was a cool
63:48 - video if you guys enjoyed make sure to
63:49 - leave a like subscribe the channel i
63:51 - will see you in another one
63:54 - [Music]
64:00 - you

Cleaned transcript:

hello everybody and welcome to a new style video on this channel where i'm going to be doing a live coding challenge i'm planning on doing a few more of these in the future so if you guys have some ideas for projects i can work on then leave them in the comments however for this video i'm going to be trying to create minesweeper in python using pygame as quickly as i can now i'm going to give myself a maximum time limit of 1 hour i think that's a good amount of time i should be able to come up with a functional game here and the point of this video is to kind of give you a taste of what programming actually looks like i do have some live coding on this channel but a lot of times you guys watch my tutorials uh and i already have the code prewritten in those tutorials right so everything's kind of perfect there's not too many mistakes however when i come up with that code it takes me a really long time i'm constantly messing up and that's the reality of programming so i'm hoping this video will be entertaining as well as pretty relatable for you guys uh because i will be messing up quite a bit and i'm sure there will be tons of errors and bugs and me banging my head against the desk anyways with that said that is what we're going to do in this video i do want to shout out web dev simplified for the uh kind of inspiration for this video idea i was looking at his channel the other day and saw he was doing some coding challenges related to kind of frontend development and i figured hey why don't i try that with python so kyle thank you very much for the idea hope you don't mind that i'm stealing it with that said let's head over to vs code here i'll give you a quick demo of what minesweeper is in case you're unfamiliar then we'll start the timer and i'll start trying to build this game out alright so i'm on the computer now and i'm just going to give you a quick demo of mine sweeper in case you haven't seen before just pulled one up on google here and the goal here is to sweep all of the mines and essentially clear all of the squares without hitting a bomb so what i can do here is press down it's going to clear a large portion of the screen and all of the numbers you see are telling me how many bombs are adjacent to this square so adjacent being either diagonal or to the left up right or down so when you see something like 1 that means there's one bomb in the neighborhood of this square three three bombs so on and so forth and if you want to place a flag that means you're kind of denoting that this square you think it's a bomb so i could do something like that and now if i continue to kind of clear out the rest of the screen this flag will kind of be protected right i won't accidentally hit this bomb because i have a flag here hopefully that makes a bit of sense but the point is to go through clear the entire screen don't hit any bombs if you hit a bomb then you lose and you have to restart a pretty famous game i'm sure most of you are familiar with it so let's try to build that out all right last thing i will mention here i do have a programming course if you guys are interested in getting better at programming specifically python and go check it out it's called programming expert i'll leave it in the description i spent countless hours working on it so if you want to get better at programming seriously it's a great resource highly recommend link in the description you can also use discount code tim alright so let's start the timer right now at this point i'm not going to cut the video so if i make any mistakes then you guys will see them live here so import pie game let's say width uh if we could spell that correctly comma height and let's go with a width of 700 and a height of 800. we'll make the height slightly larger so we can put a menu there we want a surface or a window so i'm going to say actually let's do it in lowercases when is equal to pygame.display.set underscore mode and let's set our width and our height uh let's go with a caption so pygame dot display dot set underscore caption and this will be mine sweeper like that okay now let's just code out the basic kind of starting script here so if name equals main we'll call a function called main we can define main i guess we could take a window in here as a variable so we'll take in win although i'm going to just treat these as global variables i think i'm not going to worry too much about having the best practice here because we're trying to do this quickly okay so inside of here we'll say run is equal to true we'll say while run say for event in pygame.event.get if event.type is equal to pygame.quit then we want to say run is equal to false break and then outside of here we can say hi game dot quit like that okay now we should also say hi game.init up here okay we have our width our height our window and now we want to draw some stuff out so i'm going to say define draw we'll take in a window and again i don't necessarily need to take that but let's do that for now let's have our background color let's make the background for now just equal to white i guess so we'll go with white we'll say win dot fill bg color and then pie game dot display dot update like that and then here we need to draw so let's say draw and let's pass our window like that and i just called it win okay so now if i run this we should get a screen showing up let's see and there we go okay and then if i hit x we quit perfect that's what i wanted for now now let's do the grid so let's say define create underscore grid let's go rows calls like that okay pass for the grid we want to have the underlying grid and the grid on top of it i guess let's call this create mine field because then creating the other grid will be really easy so we need to know the number of rows and calls so i'll say rows comma calls i don't know how many you usually have in mind sweeper but we can start with like 30 by 30 or something like that and then the number of mines i guess we'll go with something like 15 for now so we want rows calls and mines and then inside of here we need to randomly put a bunch of mines inside of a 2d array and then we need to go through the 2d array and figure out what number we're going to have for every single square or if the number is going to be 0 and we're going to have an empty tile okay so let's do that so let's create a 2d array here we can say our field is equal to and this will be a list comprehension and we'll say zero underscore or zero for underscore in range and then this will be calls for underscore in range rows okay so that will give us a 2d array that's the size of the field uh then we want to randomly pick positions for our minds so say mine positions is equal to we'll make this a set we'll randomly select number of mines positions make sure that they're unique uh and then we will set them in here and then go through the fields so let's do that we're gonna say four underscore in range and this is going to be mines we're going to say random dot rand range and we need to select a random row and column so row is equal to this and this will be 0 and then the number of rows and then we'll say call is equal to random rand range okay position will then be row call as a tuple and we'll say if pause in mind positions let's actually change this to a while loop here so we're going to say wow minds created is less than mines okay and then we'll have minds created is equal to zero so if the position is in the mind's position that we need to do this again because we already selected that position otherwise we'll add it so we'll say minds underscore positions dot add pause and i realize we don't need this we could just use the line of the set so let's say len of minds and then positions and i realize uh do we want to call this mind position so that probably reads a bit better so let's go with that mind positions all right i don't know how good my pace is here because how long has been five minutes uh okay that's not bad so far so my positions dot add pause okay once we add that position uh we can go ahead and just set it in the field so now that we've done that let's say field at and then i guess we already have row call so we can say field at row call is equal to and then for a mine i guess we'll go with the string x for now although maybe we'll do something like negative one and we'll just use numbers so negative one will be a mine zero will be nothing and then all the positive integers will represent the correct value okay now that we have all of that uh this may not be the most efficient way to do this but i'm just gonna loop through check the neighbors of every single position and essentially set those although now that i'm here i'm thinking that when i add a mine i can probably increment all the neighbors in the field and do it all in this one while loop so let's do that but i need a function here called get underscore neighbors is that how you spell neighbors or is it ors there you go okay so let's take in a row a call rows and calls and let's generate all of the eight valid neighbors for a specific square so we're going to say if row is greater than zero yeah if rho is greater than zero let's make a list here neighbors equal to a list if rho is greater than zero then neighbors dot appends and this will be row minus one call okay we'll say if row is less than the length of rows minus one i think that should be fine then we will add the row that is below so row plus one call okay so this is going to be up just so i don't confuse myself here this is down let's do left and right and then let's do diagonals so let's say if the call is greater than 0 then this is going to to the left then neighbors dot append and this will be row call minus one okay autocomplete give it to me here perfect then neighbors dot append row call plus one okay continuing let's do the diagonals so if the row is greater than zero and the call is greater than zero i believe this is going to be the top left neighbor and then we're going to say neighbors dot append and this will be row minus one call minus one okay if the row is less than the line of rows minus one and yeah i guess we can just do top right neighbor i think that's the one here neighbors dot append and then this will be row plus one call plus one okay and then we'll say if the row is less than that len of rows minus one and the call is greater than zero then neighbors dot append row and this will be plus one call minus one okay and then if the row is greater than zero and call is less than the line of calls minus one then we will add our final neighbor uh row minus one call plus one okay let's look at this we have row minus one call minus one row plus one call plus one row plus one column minus one row minus one call plus one okay nice return the neighbors and that works for me okay so now that we have all the valid neighbors whenever we do this here we add a bomb for every single one of the neighbors let's increment their value in the field if it's not a bomb to b plus one and that actually tells me here that i'm not going to be able to do it this way because if i do have two bombs that are beside each other i think that's valid to happen in mind sweeper not super familiar but if there's two beside each other that's not going to work so we're going to have to do it this way we're going to say for mine in mind positions we're going to say neighbors is equal to get neighbors and then we'll pass an asterix mine to decompose that as well as our rows and calls and we'll say for neighbor in neighbors and we can say for rc because we want to get the row and the column and yeah i think that'll be fine then we will say field at r c plus equals one okay then we will return the field and i think that should be good for the field i'm going to zoom out a bit even though i know it's going to be harder for you guys to read sorry about that okay so now that we have that let's just test the get create minefield function so let's start here and have field is equal to create minefield this is going to be rows calls and minds i'm just putting these in all capitals at the top so it's really easy for me to quickly change them by the way rather than just defining them here and maybe not knowing what they are and let's run this but i want to print out the field i just have a look at this before i start trying to draw it okay so int has no length len oops i keep doing that with len of rows just needs to be calls uh okay kind of a silly error there but fix that quickly okay i think that's good let's rerun and let's have a look here okay one one one one negative one i think i might need to either add more mines or make this a bit smaller so that's kind of hard to read so let's just import something here import uh from p print import pretty printer okay printer is equal to pretty printer and let's go here printer.p print okay run that one more time that should be that didn't actually make it any easier uh okay i think i might not have enough minds because it doesn't look like it's correct although i can try drawing it which is what we're going to have to do next anyways but for now let's add a few more mines because oh 30 by 30 is kind of massive right like let's go maybe 15 by 15 and then we have i guess 15 times more squares than mine so let's run this now and let's see if we're getting any numbers that are two okay nice we have some twos i just wanted to make sure we're getting some larger numbers here before we continued okay so now we want to draw that out so let's go to draw here and let's take in the field and let's take in i guess the cover field because now that we have the field i also want to have a two dimensional right here that's the exact same but that's representing which ones i've clicked on so we'll just say cover field is equal to that and zero i guess will represent we haven't clicked on or something okay but we have field and cover field for now let's figure out how we just draw the field then we can draw on top i guess so let's do the following okay so we need to figure out how many squares we're going to have on our screen and how large those are going to be that's going to be based on the rows and the calls uh okay so let's take let's say size is equal to and this is going to be the width integer divided by and then we'll go with the number of rows and that'll be how large each square is then we want to draw each square we want to draw a number in the middle we're going to need a font to do that so let's just go with num font and this will be equal to pi game dot font dot sys font uh not arial you guys already know we're going with comic sans here and that can be 20 let's say num colors is equal to and then let's just set what color we want each one to be so one can be black two can be green three can be red four we can have up to eight so i kind of have to pick a lot of different colors here okay let's go six is equal to purple seven is equal to what else can i even do black green red orange yellow uh do we have a blue okay let's go with blue and i guess i could go with like a pink or something so eight pink these are just the colors that where i'm gonna draw the text in by the way okay so now we have num colors num font uh because i'm gonna use those in one second so let's say 4i comma row in enumerate field let's say for j comma value in enumerate and this is going to be row then we want to get the value and we're going to draw that so we're going to say uh we need to render some text so text is going to be equal to and this will be what i call it the num underscore font dot render we're going to render the string version of the value we're going to do this antialiasing 1 and then the color will be my num underscore colors at the index of the value okay then we're going to say when dot blit and we're going to draw this text value at some position calculated by i j which i'll do in one second now the top left is where i'm going to start here so this should be relatively easy to do but let's say here that the y position is going to be equal to size multiplied by i and the x position is going to be equal to size multiplied by j okay and then we should be able to just split this at x y i'll have to do some more calculations though based on the size of the square i also want to draw a rectangle so let's draw the rectangle first actually and we'll go pygame.draw.rect we'll draw this on the window we need the x y and then the rex we'll say x y actually sorry we need the color the color of this let's make a variable wrecked color is equal to for now i suppose we can go with white okay and let's actually let's go with a gray i always forget if it's gray or ey but i think actually let's just go with rgb 128 128 128 okay so this is now going to be what did i call that variable rect color okay erect color x y and then this is going to be size size because we're drawing a square and then i also want to have an outline for this so i'm going to draw another rectangle except the rect color here is just going to be black and then we're going to make the outline thickness of two so we'll draw actually i guess we'll draw that on top of this uh that way we're not getting a square that's too large okay so now that should be good we just need to fix this so now we're going in the center of where we currently are so we're going to say x plus and then this is going to be text dot get underscore width over 2 and actually this is going to be x plus size over 2 minus text i'll get under square width over 2 just trying to center vertically and horizontally we're gonna do the same thing with y y plus size over two minus text dot get underscore height and over two in case you're unfamiliar that's how you center the text at least that's how i'm going to do it and i think we should now be drawing that so when we go draw let's pass the field let's also pass the cover field and let's see what this looks like right now rose is not defined okay that's down here uh yes we need to have these in all capitals so rows and calls okay rerun uh key error zero forgot about that zero is going to be no color and we don't actually want to draw text for zero so i should have figured that out but let's say if if value does not equal zero great okay let's try this now key error negative one ah that's a bomb so if value is greater than zero there you go because again i don't want to draw the bombs okay oh nice that was i'm shocked that i actually got that first try okay so we're a little bit off here i think that's a rounding error so i'll try to fix that but that looks good right now now we need to cover the tiles change the colors and stuff like that i think i'm about 20 minutes in yeah i mean i have a lot of the hard stuff done but there's still a lot to do one third of the way i think i have a decent chance here to finish this but we'll see okay so window blit text x2 um what was the issue oh my size was a little bit off can we do one division sign and see if that gives it to us a little bit better there we go i guess we can draw with with decimals that's fine okay there is a little bit of a white gap here the way i'm drawing this but for now i think that's fine and now we want to do something where we are going to not show those numbers if they're covered i also don't want those to be so gray let's make this closer to a white so like 200 200 200 and then we'll have clicked wrecked color and that can be a darker gray of like 140 140 140. let's try that quickly nice okay a little bit of a lighter gray i think that's nice so now that we have that we are only going to actually display the number and we're going to have this wrecked color as opposed to the cover direct color if we're not covered right so what we need to do here is check if the current thing that we're looping on is covered and we haven't clicked on it yet so we can do that and we can say is covered is equal to and then this will be cover field and then we'll have row column or yeah row no i j and if that's equal to 1 or if that's equal to 0 then it will be covered so we're going to say if is covered then we will simply draw actually i guess we can leave the outline then we'll draw this but we'll do this in actually yeah that'll be wrecked colored and then this will be the clicked wrecked color okay um just trying to think here how i want to do this let's put in else let's put this we want to do this no matter what i actually think it's going to be cleaner to do this okay that looks good to me now when we run this it shouldn't show us any numbers okay good now i want to make it so i can click and have numbers okay we're getting somewhere here but this is still far from being finished so let's now implement a click so we're going to say if event.type equals equals pi game dot not key down but mouse button down it's pass for now let's write a function that can determine which square we clicked on so let's say define and then this is going to be get grid pause so from our mouse position we need to know where we are in the grid so that we know what to uncover uh so we're going to take in i guess mouse pause okay we'll say mx and y is equal to mouse position and just decompose that and now that we have that we also need to know actually we have these as global so i'll just treat them as global variables again not best practice here i'm trying to go fast don't roast me too badly here let's figure this out so row is going to be equal to and then this will be mx and i think we can just integer divide this by the size but i need to recalculate size i really should have that as a global probably so let's actually do that and yeah i can put that here size and then let's look for size okay and i guess let's do this and replace that with size okay replace that everywhere we don't need this anymore uh now we have size we don't need to recalculate because we already have it so we can divide by size call is equal to m y and this needs to be the other way around oversize and then return row call um yeah the issue is we need to we could click outside of the grid as well so i guess we'll just do a check down here and make sure we are in the grid before we continue there but i think that should actually give it to us so let's say grid underscore pause is equal to get grid pause and then we want the mouse position so this would be pygame mouse.get underscore pause and we can go row call we should always be in the correct column but we might not be in the correct row so we'll say if row is greater than or equal to rows and i guess while we're at it or calls or call is greater than or equal to calls then we will simply continue because we didn't click in the square otherwise we did click in the square so let's uncover it so to do that we can just say cover field row call is equal to 1 and that can tell us that we uncovered it and then we can kind of trigger an event and uncover the rest of the stuff that we need to see so let's try this now and let's click and the list indices must be interested slice is not float okay integer divided that should have given me let's just round these and that should fix it okay let's try and listen what why is it giving me color field row call equals one row call recall uh okay let's do int the integer division i should be giving me an integer but i think it's because my mouse position is float that i'm getting that so this should hopefully work now let's see and when i click okay nice uh unfortunately okay there we go and then i find a number now of course this is not how the clicking is supposed to work in minesweeper you're supposed to cover all the blank tiles until you hit the numbers so we have to implement that but for now this is looking pretty good okay so once i click cover field equals one then i need to say uncover from position let's pass row column and let's say oops so now i actually need to write a graphing algorithm that's going to essentially find where i clicked if it's my first click at least because that's how this one works i think and if it's a blank tile then it's going to essentially find all of the other blank tiles until it gets to completely surrounded by numbers and that's what it will uncover so i need to write that which will be a breadthfirst search um yeah breadth first search i think not depth first search anyways uncover from position row call uh cover field uh we also need not just the cover field but we need the mine field as well okay and did i call it minefield no i just called it field okay so let's take in exactly that here i was writing a function was i not define uncover from position and let's implement a depth first search here so we can use a cue so let's import that here we also no longer need this am i still printing out the thing i don't think i am so that looks good no i am so let's get rid of that okay we need a queue though so let's say from collections import queue you could also use a list but this should be better for rq let's say q is equal to q and actually i believe that it's q dot q uh we'll see if that works though okay q.q q dot add or is it q dot put i think it's q output we're gonna put row call uh we're gonna say wow q well not q dot empty yep that's what we want uh then we will say i think it's q dot pop we'll say current is equal to q pop okay uh and what we're doing here is we're from every element in our queue just expanding looking at the neighbors if there's an empty tile we're going to uncover it if there's a number we're going to uncover it as soon as we get to a number we're no longer going to add the neighbors that's what we're going to do here so we're going to say neighbors we can spell that is equal to get neighbors and this is going to be asterisk current which will be a position we'll say 4 neighbor in neighbors and we need to get the value in the uncovered field so we'll say field at and instead of neighbor we can say rc so we'll say field rc value is equal to field rc we'll say if value uh is less if value is equal to zero actually so if it's an empty tile then what we will do is uncover it otherwise actually one second let's think about this for a second q dot put and i just called this q so let's put that there we'll say q output rc okay if the value is 0 because we're going to continue looking if the value is a number however we don't want to do that but we do want to uncover so we'll say the cover field at rc is equal to and then this will be one and then we'll have to do a check somewhere else to make sure we didn't click on a bomb but i think that's actually fine for now let me try that uh unable to import q that's because i need to do this okay let's try that uh can i import q what is this called let's do a quick search here q python um from oh is it literally is that actually what it is okay i thought it was from collections uh from no way that's right yeah lowercase that's what i thought okay from q import q and then i guess yeah let's try this now okay press q is not defined okay let's go back here because i realize i need to do this all right how are we looking on time looks like i'm about half an hour in uh cue object hasn't let you pop q dot get yeah okay let's try this now missing two rows and calls okay get neighbors uh rose calls let's try this okay and now nothing's happening when i click oh ah my um i wrote an infinite loop accidentally uh let's how did i mess that up q put rc oh it's because i'm revisiting elements uh visited is equal to set okay and we need to add our c to set and skip if in set so we will say we'll do this at the end i guess uh set dot add rc we'll say if rc in visited continue okay that should hopefully fix that now when i click add for set object it's not applied to tuple object uh can i not add a tuple to the set was that not allowed yeah i can do that right set o visited dot add okay i guess i'm making these mistakes if i want to finish this wow okay um is that what should have happened i actually yeah i think that's correct uh any of you that play minesweeper i guess i mean i'm not live right now but uh you can tell me in the comments if this looks right i think this is actually correct uh now if i click somewhere else yeah okay it fills in for the bombs i want to draw something okay that looks good though for uncovering currently yeah i think that's fine uh okay obviously more stuff that needs to be added there but for now that looks good let's add some more bombs because i have a feeling that these are not uh and really i should call these bombs so let's rename that um bombs no not bombs okay there we go let's try this and there we go that's better i feel like that's more like what we should get here right when you have when you click on the first try okay uh and then we need to have something for left clicking now so you can add a flag so let's do that we're gonna say flag underscore positions is equal to and i guess that can just be a set that's fine uh yes that looks fine to me so now when we're checking why am i doing that in here sorry it's to go down here in main okay flag positions uh for the flag positions we need to differentiate between if you're clicking the left mouse button or the right mouse button uh there is a few ways to do this but i'll say mouse pressed is equal to pygame dot mouse dot get underscore pressed and we'll say if mouse pressed zero that means left click then do all of that l if mouse underscore pressed 2 then we want to add a flag so same thing though we want to get the row call that we press so we can i guess actually take this and put this up here because if we didn't click a valid square it's going to be the same process okay let's move that back how we doing on time okay it looks like i have about 25 minutes left 20ish minutes uh should be a fair amount of time but we probably won't get any nice animations or anything done okay now if you press the right mouse button we want to add a flag so we will say flag underscore positions dot add row column okay we want to then set something in our cover field for a flag i really should have been more specific with what i'm putting in the field so i have negative one which is a bomb zero which is nothing regular numbers and i guess we'll go with negative two as a flag just because i don't have anything else to put there so we'll say cover field and then this will not be row call in fact i don't actually need to do that we can leave that for now we'll say cover field row call is equal to negative 2 indicating a flag and then we need to draw something on there to make it a flag so let's go back to our draw and okay is covered okay draw a rectangle value we need another lf in here checking if it's a flag essentially so if it's covered we actually need something for this to check if it's a flag not the cleanest way to do this but should be fine so if value is equal to negative two we'll continue after we simply draw a rectangle that's a different color so rather than rect color let's go with flag color and i guess we can just color the whole rectangle like red or something like that indicating that it's a flag so let's just say flag underscore wrecked underscore color is equal to we can go with red and where are we here flag underscore wrecked color okay uh you do also have a limited number of flags so let's say flags is equal to bombs and when you set a flag that needs to decrease so flags minus equals one although if you leftclick on a position that's already a flag then we need to change that and have it not be a flag so we'll implement all of that so we'll say if yeah we'll say if cover field row call is equal to negative 2 then we'll actually do something different we'll make it equal to oh god this is a bit more difficult now because you could make something a flag that's a number so we need to now essentially oh well this is in the cover field though so that's fine it's just the cover field so we can just make it zero and just make it still be covered uh okay so we've cover field like that that's fine we need to remove you now so flag positions dot remove row call and now that i'm thinking of it i probably don't actually need this set here uh because we're just going to represent in the cover field so let's remove that this will be flags plus equals one if you remove a flag we'll say otherwise we will do this okay let's try this out now and see if we can add a flag okay so it looks like my right click actually isn't working if mouse pressed 0 if mouse pressed 2 i'm right clicking but it doesn't seem like it's doing this cover field row call equals negative two where are we here that where's my draw if value equals negative two ah it's because we don't want to check value we want to check cover field is equal to zero so actually let's just do this is covered is flag is equal to cover field i j equal to negative 2. so now rather than if valley you're going to say if is flag and then we'll have to do something with the bombs yeah i'm weary about the time here okay so there we go so those are my flags when i press we need to we need to do something with the flags i can't not actually implement them obviously so let's do something with the flag so that when we hit a flag in in the cover field we don't add that as a neighbor something along the lines of that again i'm not super familiar with minesweeper let's actually go back to minesweeper here and let me just add a flag like here here here here and if let's do like this and if i like click in there oh well of course i clicked on a bomb that was great timing uh okay can we change back here easy let's go flag flag flag flag flag flag uh maybe it's because of my it was my first turn let's try this though okay so it doesn't expand beyond the flags but if i click like here it just does a single square at the time at a time eh okay so maybe on my first click i'll expand everywhere it's if you're clicking on blank square i'm not sure i'm super familiar with how the clicking works but we'll try to continue okay so continuing here we have our flags those need to be accounted for as we expand from a square uh so create mine field where even do i have this function uncover from position yeah let's do something here hmm i'm really i'm just confused here with how the flags work in terms of uncovering again i'm not a huge mine sweeper player and i keep calling it minefield 2 i think i'm pretty sure you only do this if you hit a blank square or if it's your first click so we can i guess say clicks equals zero we'll say if clicks is equal to 0 then we'll do this or if and then this will be field at row call is equal to zero yes so i think if you hit a blank tile we expand all the way yeah that makes sense to me if you just hit an individual number you just uncover that one number now let's go to uncover from position and we need to now handle our flags and checking if something is a flag in the cover field so if value is equal to zero and the cover field at rc is not a flag does not equal how did i how did i put these flags did i put them in the cover field or did i put them in the field now i'm really confusing myself here okay cover field negative two all right that's fine so actually in the cover field yeah i guess we can still keep it as negative two but i'm using the cover field not the regular field for my flags okay so let's go where were we here cover field rcu so we can't set that yet it's gonna have to go here okay so uncover uh if the field does not equal negative two then put this okay and then so if the value is zero put it in the queue but no matter what on this we're uncovering it we're adding it to visit it that makes sense if this is a flag though we probably we don't want to uncover it if it's a flag um if value equals zero and cover field does not equal negative two and then i guess i have to do something like this okay let's try this i'm again a little confused on on what's going on here so let's put a few flags like this uh okay i think that worked so it just uncovered all the neighbors of the square i clicked on because it was my first click um all right let's click again and see that shouldn't have happened because this was a value so since it was a value i shouldn't have done that so let's go back here and if cover fields so wait where does this press it's right here uh and field row call equals zero i'm not incrementing clicks okay plus equals one okay let's try this now so when i click first time okay that's good click again we're only getting the individual number uh and then let's have something so we draw the bombs so we can see where those are so let's go to draw and we need something for bombs we have is covered okay otherwise draw this but we need to check if we are bomb so we'll say is underscore bomb is equal to value equal to negative one if is flag okay and then we'll say if is underscore bomb uh in flag i'm thinking we should probably change that to be green and then the bomb will be red so green and then bomb is equal to red and i guess we can draw a red circle inside of a rectangle for the bomb so we'll say if is bomb then we will draw yeah we want to draw this clicked cover rectangle if is covered okay we'll say otherwise here we'll do this we'll draw this but then on top if it's a bomb and it's uncovered then we'll draw that so we'll say if bomb then pygame dot draw dot rectangle uh we want to draw this on window we want this to be the bomb underscore color did i call it that uh bomb underscore color okay all right bomb color where are we going here i've completely lost myself okay there we go my game direct and then we need to pass drawing a circle need to pass the x y and the radius so for the x this is going to be i think i have x y here yeah so x y but this is going to be x plus size over 2 because we need the middle and y plus size over 2 but this needs to be all capitals okay so let's replace that for the radius this will be the size minus two just so it doesn't fill actually we'll go size minus i don't know like three or four just so doesn't fill the entire thing and that's fine for now okay let's try this and let's click okay so it uncovers a bunch of stuff here click again okay so since it was empty space it uncovered all the empty space if i add a flag okay and i can click so two click here i want to see a bomb oh there you go okay that's a massive bomb uh the radius needs to be way less than i thought okay so let's go for the size of the radius i guess this needs to be size over 2 minus some constant factor because yeah the size is the entire size of the square so that makes sense let's rerun okay let's click click click click okay give me a bomb man come on where's the bomb i guess there's got to be one close okay and then there we go we'll find a bomb so when we click on a bomb yes we got to end the game we can just reset i guess uh but we'll continue i think i mean from what i can tell here this this looks good um that's interesting okay so i can remove that by by clicking on it like that and i can uncover by clicking once and actually i shouldn't let myself click on a flag that's kind of the reason why they're there so let's implement that too we're mouse pressing here to uncover so if the clicks equals zero or it's that but we're going to say if mouse pressed actually we'll go here and this will be the cover field at r row call does not equal negative two for flag so don't let me click on a flag essentially i can unset the flag in that way uh clicks plus one okay just so we know how many clicks we're at looking better let's influence something for clicking on a bomb so uncover from field okay now let's handle clicking on the bomb down here i guess so we can continue to do all of this um actually we shouldn't uncover from position if we clicked on a bomb i guess we'll check this at the top then so we will cover field but then we'll say if field row call is equal to um negative one which is a bomb then bomb clicked exclamation point uh we need to reset and we want to probably just draw something on the screen uh let's implement a function you say define draw lost okay let's just take in some text and let's take in our window too and let's just draw some text on the screen and just display it saying you lost and then i guess we'll reset everything so for drawing lost we will say text is equal to this will be the lost font which i will implement up here so let's go lost underscore font is equal to pie comic game.system.font.com you guys already know best font ever okay lost font go with 100 let's spread these out a bit okay we have our lost font which is here dot render text one and color uh i'll just hard code this in as black for now and then we're gonna say win dot blitz and wanna blitz the text and the position is going to be the width over 2 minus the text i get with over 2 and there we go we can do that to put it in the center of the screen then we'll say hi game.display.update and time actually we'll delay down here so let's go draw lost win and then you lost try again dot dot dot i know you're supposed to uncover all the bombs i'm kind of on a time crunch here though so i want to get something functioning and then we can maybe work on this in another video but let's draw lost and then let's go pygame dot time dot delay uh let's delay five seconds and then we need to reset so to reset we really can just do that um i don't like writing this all in here this is getting to be very messy code but we can do that just fine and that that should reset all the variables we need usually i put this in some type of object or some type of class uh but for now that's fine okay so that handles if we lost uh to handle if we won we essentially check if every single thing is uncovered other than the bombs that's more complicated but let's try this for now and see if we can get losing to work okay so three so there should be a bomb somewhere around here okay there must be one there okay you lost try again uh we want to refresh and show the bomb though first before we lose yeah see that's no good okay so let's so we draw a lost and we delay however before we draw that let's draw and we can pass the win the field and the cover uh and then it's delaying so when i click it's we could just do something like this lost is equal to true i think this is going to be better here i'm going to say lost is equal to false and then down here we'll say if lost we can put all that in here that's a little cleaner for us i just want to make sure that our yeah this delay is kind of throwing me off here maybe we just won't let you do anything when it's lost and then after five seconds it will reset and there's some options here but let's try this for now okay so click uh there must be a bomb here right uh no okay one here nope one here so i might be tripping but it says three so that would mean that there would be a bomb here here and here but when i click on it i'm not getting one so i must something must be messed up here unless i've incremented these incorrectly but that should be a bomb right uh cover is not defined where did i where do i even have that cover underscore field um i want to draw all of the bombs let's just remove something here so if his flag if is covered we do this where's my bomb so if it's not covered if it's bomb all right guys i'm getting a bit lost here because i've i feel like i have a bug here so this is five right that's not it's not possible for this to be five so i think for the way i'm incrementing this must be incorrect in some way um yeah surely it's got to be incorrect based on the the bomb positions because there's got to be a bomb somewhere here and okay there's a bomb there but like if i'm looking at that i don't the numbers here are just they look to be incorrect to me so i think i've messed something up you lost try again we need to stop doing that i need to set lost equal to false so let's get out of that um did that even quit the game okay let's go where was this here and say lost is equal to false because we're resetting that would be better but i got to check my my bomb positions here something's wrong with what i'm doing with the bombs and the uh the numbers uh so for mine in mind positions neighbors equals get neighbors mine row call for c field rc plus equals one ah i can only do this if it's not a bomb that's probably the issue is that i'm overriding bombs that currently exists so if um field r c does not equal negative one then we can do that i think that will fix it but i think i was overriding bombs by adding one to them and that's probably why i was losing them so let's see if we have neighbors loop through all the neighbors uh if the neighbor is not a bomb then it's fine to increment one we'll do that yeah okay i think that's good let's try this now that's probably going to fix a whole whack of problems for me okay so there must be a bomb there right yeah okay good so now that looks like that's working okay you lost try again all right now let's add a flag i guess we're going to cover the bombs with flags so let's actually try to do this so 2 2 1 1 1 so there must be one here so we can cover that 2 so it's either here so there's one there so it's either here or here so we can't do anything there that's one so that must be a bomb so that means oh because there's two there okay apparently i'm not very good at this game uh you guys get the point now there's also a thing where when you click on the number it's supposed to expand outwards i think that's going to be an addition because i'm probably almost at an hour here but let's try to see if we can implement a way to win first and that's probably going to be easier if i set this down a bit and make this like 10 by 10. so let's try this okay um yeah this is gonna be much easier okay so two one one so there must be a bomb here and then there's i guess one here and one here would that make sense one if this says one oh it's because it's on the diagonal so that could be it too okay so we don't i don't actually know which ones all of these would be although i'm sure there's a way to figure that out right um okay so one one one one so there must be a bomb here one one one one two surely one of these isn't a bomb right that would be one there you go and then that one okay good nice uh let's continue here so one on one so this would be a bomb um up here there's only one that's good okay one that's fine so three if it's three is only three squares so that's a bomb that's a bomb that's a bomb three that must be a bomb two that's three this is one that's two that must be a bomb um this is a lot harder than it looks i never really play this game i'm gonna spend so much time just trying to complete it let's just just just go crazy and click a few random ones and see if we get okay and we lost uh i think you know honestly i'm pretty happy with this so far we need a way just to reset when we win so if i implement that then i think like the core functionality of the game is is pretty much finished and we would just need to add some small touches tell you how many flags you have left stuff like that um yeah that's and we need a timer too to keep track of how much time so let's quickly i think i have enough time to do a timer so let's say timer or start underscore time is equal to time.time and that's going to be as soon as you click so we'll say start time is equal to zero for now and then as soon as we do our first click so if clicks equals zero or field row i hate the way that i've i've done this here if clicks equals zero or field row okay you know what just for time's sake here it's not going to be clean but that's fine start time equals time.time okay we'll say current time is equal to time.time minus the start time and then when we draw we'll pass that as well so we'll pass current time and current time let's go to draw and let's take in current underscore time uh let's get a time font going quickly okay time underscore font uh i guess we'll do this just like 50 or something and then we're gonna go to draw okay and up here i guess we can just draw it down below uh we will say time text is equal to and this will be the time font dot render and this will be an f string of time elapsed colon round current time okay and that is good and then we'll say win dot blitz and this will be time text and then we will put this we could just hard code a position for now something like it's going to be the height of the screen minus the time the height of the screen minus the width of the screen because that's what's going to be the bottom over 2 and then we're going to subtract from that the time text dot get underscore height over 2 for the x position though this we can just put at like 10 or something okay let's try that and let's see if i mess that up okay time is not defined time text i need to import time okay i think i'm just about getting to my time limit too i didn't start this exactly at an hour so it's a little bit messed up time font.render let's just fix that quickly okay we can just go one and black i would like some variables for these but that's fine run one more time at least three arguments what did i what am i messing this up with oh i passed that here okay come on let's get a good run in here while we end where's the time it's not showing up uh come on uh windup lit time text the height minus the width over two minus maybe plus is what we're looking for there uh no okay let's just let's just hard code this so 10 and then this can just go to like 650. what did we what did we make the height 700 so let's just do 700 and actually no come on this will work height minus the time text dot get underscore height over two all right run time elapsed okay let's move that over height uh no minus just this okay there we go that's fine and that's giving me a massive number why does that give me such a big number okay come on let's figure this out quickly we have current time ah it's the other yeah time to time minus start time oh it's because i haven't clicked yet ah okay that's that makes sense um damn we should only be doing that if we have a start time if start time is greater than zero else current time is equal to zero okay let's run and there we go let's click ah okay i damn it i need to fix that okay uh come on run one more time there we go oh and it's showing bombs okay guys well i've clearly messed something up um yeah we'll i'll have to look at this in another video but that was my coding challenge i would say this is probably a fail in terms of completing the game but i was able to whip up what is it here uh almost 220 lines of code not fully functioning i was a little ambitious with how much i'd be able to get done but we could continue this in another coding challenge in the future if you guys would like to see that i wouldn't mind doing another video and kind of wrapping up this project please let me know in the comments down below also down to ditch it and work on something else if you guys would find that more interesting hopefully this was insightful hopefully this was a cool video if you guys enjoyed make sure to leave a like subscribe the channel i will see you in another one you
