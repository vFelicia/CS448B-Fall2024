With timestamps:

00:00 - hello everybody and welcome to another c
00:01 - plus plus tutorial for beginners
00:04 - in today's video i'll be covering sets
00:06 - now a set is a data structure that tells
00:08 - us if an element is present or not
00:10 - that's really the best way to describe
00:12 - it well in this video i will talk to you
00:14 - all about it
00:17 - [Music]
00:23 - so the best way that i can describe a
00:25 - set in the shortest number of words
00:27 - possible
00:27 - is an unordered collection of unique
00:30 - elements
00:31 - keep that in mind as we go through this
00:33 - kind of example here
00:35 - a set is an unordered collection of
00:37 - unique elements
00:38 - what that means is that when we use a
00:40 - set we do not care about the order of
00:42 - elements we do not care about the
00:43 - frequency of elements
00:45 - we simply care does an element exist or
00:47 - does it
00:48 - not there's a lot of very good use cases
00:50 - for a set
00:51 - and the reason you would use a set is a
00:53 - similar reason to why you would use a
00:55 - map
00:55 - because finding if something exists or
00:58 - if it doesn't exist can happen
00:59 - instantly so unlike an array where as i
01:02 - described you we need to look through
01:03 - the entire thing
01:04 - or unlike a vector where you need to
01:05 - look through the entire thing because
01:06 - it's an ordered collection
01:08 - of potentially non-unique elements in a
01:10 - set
01:11 - the element either exists or it does not
01:13 - and so to find it can happen
01:15 - instantly it doesn't matter if the set
01:16 - has a million elements or if it has
01:18 - one element now i want to be very clear
01:20 - here as i describe this this is kind of
01:22 - a generalization
01:23 - there is some instances in which you're
01:25 - using a set or a map
01:27 - and it will take a little bit longer
01:28 - than instantly to discover if something
01:31 - exists
01:31 - now that is again well beyond the scope
01:33 - of this tutorial i'm not getting into
01:34 - lower level implementation of
01:36 - c plus built-in features but just
01:39 - understand that all of this is a very
01:41 - general way of looking at this
01:42 - as you learn more about computer science
01:44 - and c plus and programming in general
01:46 - you will kind of realize how these
01:48 - things actually work beyond the level at
01:50 - which we're using the map
01:52 - anyways with that said let's get started
01:53 - here i'm going to include
01:55 - set so include set like that
01:58 - so let's make a set when we make a set
02:00 - what we do is we say set
02:01 - we do our angle brackets we do the type
02:03 - in this case i'll just make it
02:04 - actually let's make it a char set and
02:06 - then we do the name of the set so i'll
02:08 - say s1
02:09 - now if you want to initialize the set uh
02:11 - i'm just looking at my kind of cheat
02:12 - sheet here actually it doesn't even show
02:14 - what i can do let's just try to
02:16 - initialize the set by adding some
02:17 - characters like c
02:19 - and d to it and see if this works all
02:22 - right so when i run this no problem
02:23 - so uh this kind of confirms my
02:25 - assumption that if you would like to
02:26 - create a set what you can do is put all
02:28 - of the elements
02:28 - that are in the set uh just in curly
02:31 - braces like you would in an array
02:33 - and you can initialize it that way or
02:34 - you can declare the set by simply doing
02:36 - set
02:37 - the type and then the name of the set
02:38 - and well that works as well
02:40 - anyways let's add a few duplicate
02:42 - elements into this set
02:44 - and let's iterate through this set and
02:45 - let's see what elements are actually in
02:47 - it
02:48 - so i'm going to say 4 and i'm going to
02:49 - use kind of that iterator pattern we've
02:51 - seen here so i'm going to say auto s1
02:54 - is equal to sorry not s1 auto itr is
02:57 - equal to s1
02:58 - dot begin and then i will say
03:01 - itr does not equal s1 dot
03:04 - end and then i will say plus plus itr
03:09 - now again remember a set unordered
03:11 - collection of unique elements
03:13 - and well that means we are not sure what
03:14 - order we are going to get elements in
03:16 - when we loop through the set and
03:18 - so this kind of means nothing when i
03:19 - write like this specific ordering of
03:21 - elements
03:22 - just just keep that in mind okay that we
03:23 - don't know the order of elements in a
03:25 - set
03:25 - then what i'm going to do is say c out
03:28 - asterisks itr
03:30 - and end l and let's see what we get all
03:32 - right so we get c
03:33 - and then we get d notice i didn't get c
03:36 - d c d
03:37 - i didn't get c c d d i only got one c
03:39 - and one d
03:40 - and that is because when you insert an
03:41 - element into a set that already exists
03:44 - it doesn't do anything because we only
03:45 - care if something exists or if it does
03:47 - not exist in a set
03:48 - that is really the purpose of using it
03:50 - and if i decide to add maybe an a
03:52 - here and we run this now notice we get
03:54 - acd
03:55 - even though a was at the very end of the
03:57 - set so we don't really know what order
03:58 - we're going to get elements in although
04:00 - this
04:00 - might make you assume that you're going
04:01 - to get it in alphabetical order anyways
04:03 - that is
04:04 - a set so hopefully that's clear on the
04:05 - basics of a set and i'll kind of leave
04:07 - this here so we can see what happens as
04:09 - we insert and remove elements from the
04:10 - set
04:11 - so to insert something into the set you
04:13 - can say s1.insert
04:14 - and then you can just add whatever you
04:16 - want so maybe we'll add a b or something
04:18 - we can run this now we see all is good a
04:20 - b has been added in and
04:22 - kind of confirming our assumption that
04:23 - it's probably printing out in
04:24 - alphabetical order
04:25 - anyways we can also erase or remove an
04:27 - element from the set so i believe it's
04:29 - actually a race
04:30 - uh let me look here and see if that is
04:32 - what it is
04:34 - where's all these methods i have a list
04:36 - of all of the methods
04:37 - i think that a race race yep a race
04:40 - looks good so we can erase maybe the key
04:42 - c or the element c
04:44 - so when i do that notice that now c is
04:46 - no longer printing out
04:48 - and so that is kind of the most basic
04:49 - aspects of a set that's how you insert
04:51 - that's how you erase and well this is
04:53 - how you iterate
04:54 - through it now a few other things we can
04:55 - do we can check if an element is present
04:57 - and say if and we'll say s1 dot
05:01 - finds and we will look for some element
05:03 - let's say we're looking for element c
05:05 - we can say if that is equal to s1.end
05:09 - that means the element
05:10 - does not exist so i can see out
05:13 - could not find c
05:16 - and we can do an end l and then
05:19 - otherwise
05:20 - we can say c out and
05:23 - found c exclamation point
05:26 - same thing and l okay so let's run this
05:29 - now and notice that we're getting could
05:30 - not find c
05:31 - a b d because well c is not in the set
05:33 - and so this same way as in the map is
05:35 - telling us it's not there
05:37 - if we look for a b uh well actually
05:40 - we did see so let's just not erase c now
05:42 - so if we don't array c and we run this
05:44 - it says found c it's telling us c is in
05:46 - the
05:47 - set okay so that is really like that's
05:50 - pretty much it for a set now let's just
05:52 - run through a quick example here
05:54 - and just like i did with the map i will
05:56 - create a string
05:57 - so let's say string test is equal to
06:01 - this is a test iij
06:04 - whatever a bunch of random letters okay
06:07 - now we're gonna do
06:08 - is say set char um
06:11 - occurrence is equal to and actually we
06:14 - can just do it like that we don't need
06:15 - to define or initialize it
06:17 - and instead of occurrence let's just
06:18 - make it easier let's just say
06:20 - exists okay now what i'm going to do is
06:23 - loop through the string so i'm going to
06:24 - say
06:24 - 4 and we could use a string iterator
06:26 - here too or we can just loop through it
06:28 - in the
06:28 - way we normally do so i can say int i is
06:31 - equal to 0
06:32 - i is less than test dot length
06:35 - and then i plus plus or again just
06:38 - because i think this is the proper way
06:39 - we'll go plus plus i
06:41 - and then what i will do now is say
06:42 - exists dot
06:45 - insert and we will first define the
06:48 - letter so we'll say
06:50 - char letter is equal to test at i
06:53 - now notice we don't have to do this i'm
06:55 - just doing this because it's kind of
06:56 - good programming practice to define
06:58 - what it is you're actually inserting and
07:00 - kind of make it easier to read
07:02 - but you could just put test i in here
07:04 - like you could do test
07:06 - i without defining the variable first
07:08 - but for me i just like to define the
07:09 - variable so i'm going to say
07:10 - letter and we'll insert that into the
07:12 - set so now what we've done is we've
07:14 - looped through the string we've inserted
07:16 - every single element in the string
07:17 - into the set now i want to look at all
07:19 - of the unique elements in the set and so
07:20 - what i'll do is say
07:21 - 4 and then i will loop through the set
07:24 - so i will say
07:27 - what is this going to be auto itr
07:30 - is equal to exists dot begin
07:34 - i'll then say itr does not equal exists
07:37 - dot end and then we'll say plus plus itr
07:40 - and then i will just oops c out
07:44 - and asterix itr d reference and
07:47 - l okay let's run this and what we're
07:50 - getting now is all of the unique letters
07:52 - including the space
07:53 - that is in this string now it doesn't
07:55 - matter if i add like a ton more a's
07:57 - we're not going to get another a here
07:59 - because well it's a set right and so if
08:01 - we add a in again it doesn't do anything
08:03 - because it's already in
08:04 - the set so there you go now we can do
08:07 - actually a quick example here again this
08:09 - is kind of another thing you might see
08:10 - in a coding interview
08:11 - speaking of coding interviews if you
08:13 - guys want to prepare for them you know
08:14 - what to use algo expert which is a
08:16 - sponsor of this video and this series
08:18 - they have over 150 coding interview
08:19 - questions many of which use
08:21 - sets dictionaries and a lot of things
08:22 - we're talking about here check out our
08:24 - expert from the link in the description
08:26 - and use the code tech with tim for a
08:27 - discount on the platform
08:29 - anyways good segue there what we're
08:30 - going to do now is i'm going to create
08:32 - another string i'm going to say string
08:34 - find is equal to and then i'm going to
08:37 - say
08:39 - say the word hello okay so let's say we
08:41 - were given a problem we said okay you're
08:42 - given this string called find
08:44 - and you want to determine if all of the
08:46 - letters in this string
08:48 - are also present in this string so you
08:51 - want to see
08:51 - if all of the unique letters here are
08:53 - also present in this string right here
08:55 - there's a few different ways to go about
08:57 - doing this but using a set we can do
08:58 - this kind of elegantly
08:59 - we can create a set that stores all of
09:01 - the letters in this string that we're
09:03 - trying to look for
09:04 - then what we can do is loop through this
09:06 - string we can remove
09:07 - all of the uh letters here from the set
09:10 - that contains the letters
09:12 - in this string and if at the end of
09:14 - going through this entire string
09:15 - this set is empty that means that this
09:19 - first string contains all of the unique
09:21 - letters that are in this string
09:22 - hopefully that kind of makes sense but
09:24 - i'll just run you through it and we can
09:25 - see how that works that's a good example
09:27 - so i'm going to say set i will say find
09:30 - letters like that so now we need to go
09:33 - through and essentially add all of these
09:34 - elements into the set
09:36 - there's a few different ways to do this
09:37 - just some shortcuts as well but we're
09:38 - just going to do the long way because
09:39 - it's good practice
09:40 - i'm going to say 4 int i equals 0.
09:44 - i is less than find dot
09:47 - length plus plus i
09:50 - will then say char letter is equal to
09:54 - and then this will be find at i and then
09:57 - we will say
09:58 - find letters oops find letters
10:02 - dot insert and we will insert
10:06 - uh what is the letter letter like that
10:08 - okay
10:09 - so now if we were to print out all of
10:11 - the letters in this set we would get h
10:13 - e l and o so now we want to go through
10:15 - here and see if this contains all of the
10:17 - same letters that are in here so what
10:19 - i'm going to do now is say
10:20 - 4 and we'll say
10:24 - i guess int i equals 0. i is less than
10:27 - test dot length and i plus plus we'll
10:32 - say
10:32 - char letter is equal to test at
10:35 - index i and then what we will do is
10:38 - erase this
10:39 - from the set so we'll say set dot erase
10:43 - and we'll erase letter okay great so
10:45 - then finally what i'm going to do here
10:46 - is write an if statement
10:48 - i'm going to say if and don't worry i'll
10:49 - go through all this code in a second i
10:50 - just want to type it out first
10:52 - i'll say if the find letters
10:55 - dot size is greater than
10:58 - zero then that means c out
11:02 - no it does not have all
11:06 - letters i know it's not really great
11:08 - english but you get the idea
11:10 - else we can see out
11:13 - yes it does okay great
11:17 - so anyways let's just quickly run this
11:18 - actually let me see if this works
11:20 - uh warning character constant oh i
11:21 - forgot about this this needs to be
11:22 - double quotation marks my bad
11:25 - and missing template argument before dot
11:28 - oh i don't know why i called this set uh
11:30 - look at how many errors i have
11:32 - i need a semicolon there this isn't set
11:34 - this should be
11:36 - find letters let's run this now and
11:39 - there we go no it does not have all of
11:40 - the letters and so that is working as
11:42 - intended okay let me run through all
11:43 - this code i know i went through this
11:44 - pretty quickly
11:45 - so the idea is that we were asked all
11:47 - right we have this fine string
11:49 - we have this test string we want to see
11:50 - if all of the letters that are contained
11:52 - in fine
11:53 - unique letters by the way are also
11:55 - contained in the test string
11:56 - and so what we do is we first create a
11:58 - set we call it find letters
11:59 - we then add all of the letters that are
12:01 - inside of this find string
12:03 - to the set that's going to automatically
12:05 - handle not having like duplicates and
12:07 - anything for us because
12:08 - if we add two l's it's just going to be
12:09 - one l that remains in the set
12:11 - then we go through the second string for
12:14 - all of its letters
12:15 - we remove them from this set because
12:17 - then that means if we remove
12:19 - every single element from this set this
12:21 - string had all of the elements that were
12:23 - in
12:23 - this string if it doesn't though if this
12:25 - set does have at least one element
12:27 - that means that we did not right like we
12:30 - did not have all of the same letters
12:31 - and so in that case we would print out
12:33 - no it does not have all the letters
12:34 - however here the letter that we're
12:36 - missing i believe is an l
12:38 - um we might be missing an o2 yeah we are
12:41 - also missing an o
12:43 - but we have an e and we have an h so now
12:45 - if i add an l and an o in here
12:47 - and we run this we should see that it
12:49 - says yes it does it does have all of the
12:51 - same
12:51 - letters we can even make this a bit
12:53 - simpler we can make this string say
12:56 - like this like hello with only one l
12:59 - and we'll see we still get yes it does
13:00 - because even though it doesn't have two
13:02 - l's that doesn't matter
13:03 - although if we remove the o it's going
13:05 - to say no it does not have all the
13:06 - letters so this is an example of where
13:07 - you might use a set of course there's a
13:09 - lot of other examples but
13:10 - hopefully that kind of brought
13:11 - everything together for you and again
13:12 - i'm trying to do some
13:13 - longer examples here so we can see how
13:15 - we actually solve problems with all of
13:17 - these tools that we now have
13:19 - anyways if you guys enjoyed make sure to
13:20 - leave a like subscribe to the channel i
13:22 - will see you in another youtube
13:25 - [Music]
13:31 - video

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners in today's video i'll be covering sets now a set is a data structure that tells us if an element is present or not that's really the best way to describe it well in this video i will talk to you all about it so the best way that i can describe a set in the shortest number of words possible is an unordered collection of unique elements keep that in mind as we go through this kind of example here a set is an unordered collection of unique elements what that means is that when we use a set we do not care about the order of elements we do not care about the frequency of elements we simply care does an element exist or does it not there's a lot of very good use cases for a set and the reason you would use a set is a similar reason to why you would use a map because finding if something exists or if it doesn't exist can happen instantly so unlike an array where as i described you we need to look through the entire thing or unlike a vector where you need to look through the entire thing because it's an ordered collection of potentially nonunique elements in a set the element either exists or it does not and so to find it can happen instantly it doesn't matter if the set has a million elements or if it has one element now i want to be very clear here as i describe this this is kind of a generalization there is some instances in which you're using a set or a map and it will take a little bit longer than instantly to discover if something exists now that is again well beyond the scope of this tutorial i'm not getting into lower level implementation of c plus builtin features but just understand that all of this is a very general way of looking at this as you learn more about computer science and c plus and programming in general you will kind of realize how these things actually work beyond the level at which we're using the map anyways with that said let's get started here i'm going to include set so include set like that so let's make a set when we make a set what we do is we say set we do our angle brackets we do the type in this case i'll just make it actually let's make it a char set and then we do the name of the set so i'll say s1 now if you want to initialize the set uh i'm just looking at my kind of cheat sheet here actually it doesn't even show what i can do let's just try to initialize the set by adding some characters like c and d to it and see if this works all right so when i run this no problem so uh this kind of confirms my assumption that if you would like to create a set what you can do is put all of the elements that are in the set uh just in curly braces like you would in an array and you can initialize it that way or you can declare the set by simply doing set the type and then the name of the set and well that works as well anyways let's add a few duplicate elements into this set and let's iterate through this set and let's see what elements are actually in it so i'm going to say 4 and i'm going to use kind of that iterator pattern we've seen here so i'm going to say auto s1 is equal to sorry not s1 auto itr is equal to s1 dot begin and then i will say itr does not equal s1 dot end and then i will say plus plus itr now again remember a set unordered collection of unique elements and well that means we are not sure what order we are going to get elements in when we loop through the set and so this kind of means nothing when i write like this specific ordering of elements just just keep that in mind okay that we don't know the order of elements in a set then what i'm going to do is say c out asterisks itr and end l and let's see what we get all right so we get c and then we get d notice i didn't get c d c d i didn't get c c d d i only got one c and one d and that is because when you insert an element into a set that already exists it doesn't do anything because we only care if something exists or if it does not exist in a set that is really the purpose of using it and if i decide to add maybe an a here and we run this now notice we get acd even though a was at the very end of the set so we don't really know what order we're going to get elements in although this might make you assume that you're going to get it in alphabetical order anyways that is a set so hopefully that's clear on the basics of a set and i'll kind of leave this here so we can see what happens as we insert and remove elements from the set so to insert something into the set you can say s1.insert and then you can just add whatever you want so maybe we'll add a b or something we can run this now we see all is good a b has been added in and kind of confirming our assumption that it's probably printing out in alphabetical order anyways we can also erase or remove an element from the set so i believe it's actually a race uh let me look here and see if that is what it is where's all these methods i have a list of all of the methods i think that a race race yep a race looks good so we can erase maybe the key c or the element c so when i do that notice that now c is no longer printing out and so that is kind of the most basic aspects of a set that's how you insert that's how you erase and well this is how you iterate through it now a few other things we can do we can check if an element is present and say if and we'll say s1 dot finds and we will look for some element let's say we're looking for element c we can say if that is equal to s1.end that means the element does not exist so i can see out could not find c and we can do an end l and then otherwise we can say c out and found c exclamation point same thing and l okay so let's run this now and notice that we're getting could not find c a b d because well c is not in the set and so this same way as in the map is telling us it's not there if we look for a b uh well actually we did see so let's just not erase c now so if we don't array c and we run this it says found c it's telling us c is in the set okay so that is really like that's pretty much it for a set now let's just run through a quick example here and just like i did with the map i will create a string so let's say string test is equal to this is a test iij whatever a bunch of random letters okay now we're gonna do is say set char um occurrence is equal to and actually we can just do it like that we don't need to define or initialize it and instead of occurrence let's just make it easier let's just say exists okay now what i'm going to do is loop through the string so i'm going to say 4 and we could use a string iterator here too or we can just loop through it in the way we normally do so i can say int i is equal to 0 i is less than test dot length and then i plus plus or again just because i think this is the proper way we'll go plus plus i and then what i will do now is say exists dot insert and we will first define the letter so we'll say char letter is equal to test at i now notice we don't have to do this i'm just doing this because it's kind of good programming practice to define what it is you're actually inserting and kind of make it easier to read but you could just put test i in here like you could do test i without defining the variable first but for me i just like to define the variable so i'm going to say letter and we'll insert that into the set so now what we've done is we've looped through the string we've inserted every single element in the string into the set now i want to look at all of the unique elements in the set and so what i'll do is say 4 and then i will loop through the set so i will say what is this going to be auto itr is equal to exists dot begin i'll then say itr does not equal exists dot end and then we'll say plus plus itr and then i will just oops c out and asterix itr d reference and l okay let's run this and what we're getting now is all of the unique letters including the space that is in this string now it doesn't matter if i add like a ton more a's we're not going to get another a here because well it's a set right and so if we add a in again it doesn't do anything because it's already in the set so there you go now we can do actually a quick example here again this is kind of another thing you might see in a coding interview speaking of coding interviews if you guys want to prepare for them you know what to use algo expert which is a sponsor of this video and this series they have over 150 coding interview questions many of which use sets dictionaries and a lot of things we're talking about here check out our expert from the link in the description and use the code tech with tim for a discount on the platform anyways good segue there what we're going to do now is i'm going to create another string i'm going to say string find is equal to and then i'm going to say say the word hello okay so let's say we were given a problem we said okay you're given this string called find and you want to determine if all of the letters in this string are also present in this string so you want to see if all of the unique letters here are also present in this string right here there's a few different ways to go about doing this but using a set we can do this kind of elegantly we can create a set that stores all of the letters in this string that we're trying to look for then what we can do is loop through this string we can remove all of the uh letters here from the set that contains the letters in this string and if at the end of going through this entire string this set is empty that means that this first string contains all of the unique letters that are in this string hopefully that kind of makes sense but i'll just run you through it and we can see how that works that's a good example so i'm going to say set i will say find letters like that so now we need to go through and essentially add all of these elements into the set there's a few different ways to do this just some shortcuts as well but we're just going to do the long way because it's good practice i'm going to say 4 int i equals 0. i is less than find dot length plus plus i will then say char letter is equal to and then this will be find at i and then we will say find letters oops find letters dot insert and we will insert uh what is the letter letter like that okay so now if we were to print out all of the letters in this set we would get h e l and o so now we want to go through here and see if this contains all of the same letters that are in here so what i'm going to do now is say 4 and we'll say i guess int i equals 0. i is less than test dot length and i plus plus we'll say char letter is equal to test at index i and then what we will do is erase this from the set so we'll say set dot erase and we'll erase letter okay great so then finally what i'm going to do here is write an if statement i'm going to say if and don't worry i'll go through all this code in a second i just want to type it out first i'll say if the find letters dot size is greater than zero then that means c out no it does not have all letters i know it's not really great english but you get the idea else we can see out yes it does okay great so anyways let's just quickly run this actually let me see if this works uh warning character constant oh i forgot about this this needs to be double quotation marks my bad and missing template argument before dot oh i don't know why i called this set uh look at how many errors i have i need a semicolon there this isn't set this should be find letters let's run this now and there we go no it does not have all of the letters and so that is working as intended okay let me run through all this code i know i went through this pretty quickly so the idea is that we were asked all right we have this fine string we have this test string we want to see if all of the letters that are contained in fine unique letters by the way are also contained in the test string and so what we do is we first create a set we call it find letters we then add all of the letters that are inside of this find string to the set that's going to automatically handle not having like duplicates and anything for us because if we add two l's it's just going to be one l that remains in the set then we go through the second string for all of its letters we remove them from this set because then that means if we remove every single element from this set this string had all of the elements that were in this string if it doesn't though if this set does have at least one element that means that we did not right like we did not have all of the same letters and so in that case we would print out no it does not have all the letters however here the letter that we're missing i believe is an l um we might be missing an o2 yeah we are also missing an o but we have an e and we have an h so now if i add an l and an o in here and we run this we should see that it says yes it does it does have all of the same letters we can even make this a bit simpler we can make this string say like this like hello with only one l and we'll see we still get yes it does because even though it doesn't have two l's that doesn't matter although if we remove the o it's going to say no it does not have all the letters so this is an example of where you might use a set of course there's a lot of other examples but hopefully that kind of brought everything together for you and again i'm trying to do some longer examples here so we can see how we actually solve problems with all of these tools that we now have anyways if you guys enjoyed make sure to leave a like subscribe to the channel i will see you in another youtube video
