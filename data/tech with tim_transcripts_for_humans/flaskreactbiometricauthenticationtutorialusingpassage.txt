With timestamps:

00:02 - [Music]
00:08 - if you're watching this video then
00:10 - chances are you've worked with
00:11 - authentication before maybe you've tried
00:13 - to add it to an api to a website to some
00:15 - other type of app and you've probably
00:17 - seen how time consuming and difficult it
00:19 - can be to do that not to mention you can
00:21 - introduce a ton of security
00:22 - vulnerabilities into your application if
00:24 - you try to do this say on your own from
00:26 - scratch where you're storing passwords
00:28 - hashing passwords and all of that mess
00:30 - that you really don't want to have to do
00:32 - in this video though i'm going to show
00:34 - you the easiest authentication i've ever
00:36 - used which is called passage now passage
00:39 - provides biometric authentication so you
00:42 - can do face id you can do it with your
00:44 - finger if you have windows hello face
00:46 - you can use that or if none of those
00:48 - work then you can get an email sent to
00:49 - you and click on that now this video is
00:51 - sponsored by passage however they are
00:54 - super simple to use and this is probably
00:56 - the authentication i'm going to use
00:57 - going forward considering it takes
00:59 - literally a few lines of code to add
01:01 - this to an app now of course passage is
01:03 - free you do not have to pay to use this
01:05 - and you can create an account at the
01:07 - link in the description and then
01:08 - actually start building your
01:09 - applications now in this video
01:11 - specifically i'm going to show you how
01:13 - you build a react front-end that's
01:14 - authenticated with passage and a flask
01:17 - back-end so we'll have the front-end
01:18 - authenticated you'll sign in on the
01:20 - front-end and then you can send proxy
01:22 - requests to the back-end and those will
01:23 - be authenticated as well of course if
01:25 - you want to use a different text stacks
01:27 - or you can do that as well they have
01:29 - pretty good documentation that shows you
01:30 - how to do this for pretty much any
01:32 - language and framework that you can
01:33 - think of but again here we're going to
01:35 - do react and flask for now though let me
01:37 - give you a quick demo of how this works
01:39 - and you will see well how it works so in
01:42 - this case we have passage demo i have a
01:44 - login form i can also click here for
01:46 - register now i didn't build these
01:47 - passage provides these and you can
01:50 - customize these if you want for now
01:52 - though let's log into an account that i
01:53 - already have so check with tim gmail.com
01:56 - let's click continue and then notice
01:59 - what it says here it says okay it's
02:00 - making sure it's you you're going to log
02:01 - in with biometrics so log into your
02:03 - account with the method you already used
02:04 - to unlock your device now i don't have
02:06 - windows hello face on here which is like
02:08 - face id for windows if i had that it
02:10 - would have popped up my camera instead
02:12 - though it's asking me for the pin for my
02:14 - computer so let me type that in and then
02:16 - it should sign me in i'm now brought to
02:18 - this page you can see my email is here
02:20 - and i can test my back end
02:21 - authentication by clicking this button
02:23 - and seeing if i send an authorized
02:25 - request now i'll play a demo on my phone
02:27 - while i continue to go through this so
02:29 - that you can see that it works a bit
02:30 - different on the phone and it will bring
02:32 - up my face id it automatically detects
02:34 - the device and then it shows the correct
02:36 - authentication method based on that
02:38 - device and again if that doesn't work
02:40 - then it will send you an email and you
02:41 - can sign in with a magic link
02:43 - all right so that is it for the demo
02:45 - this is really cool again this is super
02:47 - simple to do you're going to see how
02:48 - easy it is in a second so now let me hop
02:50 - over to vs code and we'll start building
02:53 - out this project where we have an
02:54 - authenticated front end and back end
02:56 - using biometric data all right so i'm
02:58 - here in vs code which is the editor i'm
03:00 - going to use for this video feel free to
03:02 - use whatever you want but just open up
03:04 - some folder or directory in this case i
03:06 - have one called passage tutorial it's on
03:08 - my desktop and this is where we'll start
03:10 - creating our different apps we're going
03:11 - to start with the react front end then
03:13 - we'll go to the python back end this is
03:15 - not a tutorial for complete beginners
03:16 - but you can watch it and you can see how
03:18 - i add the authentication then that will
03:20 - help you if you're adding it to your own
03:22 - app or you can do you know every single
03:24 - step that i do in this video it's up to
03:25 - you but i'm not going to explain all the
03:27 - react basics like what a hook is what a
03:29 - component is i have a whole react series
03:31 - on my channel so i'll leave that in the
03:33 - description in case you want to watch it
03:34 - and then same thing for python and flask
03:36 - i'm just going to go through building
03:37 - the app i'm not going to explain all
03:39 - like the flask concepts and that stuff i
03:41 - have a flash tutorial on my channel as
03:43 - well that you could watch if you want to
03:44 - learn that anyways we need to install a
03:46 - few things here before we get started so
03:48 - we need node.js i assume most of you
03:50 - already have that i'll leave a link in
03:51 - the description though and then we're
03:52 - going to use something called ngrok now
03:54 - when we're using passage if we want to
03:56 - get access to the full suite of
03:58 - biometric features that it has in
03:59 - authentication we need to have ssl and
04:02 - https secure connection so in order to
04:05 - do that we're going to use this tool
04:06 - called ngrok which allows us to create
04:08 - kind of a tunnel or a proxy from a
04:11 - temporary public
04:12 - address or public domain to our local
04:16 - host machine so this will allow you to
04:17 - use this from well any computer that you
04:19 - want and it will forward the requests
04:21 - from that temporary public url to your
04:24 - localhost
04:25 - machine server or whatever you want to
04:26 - call it it's quite cool but you do need
04:28 - to download this so link in the
04:30 - description it's also just ngoc.com
04:33 - download it and then what you're going
04:34 - to have to do after you download this is
04:36 - you're going to have to extract it from
04:38 - a zip folder so i've just placed it
04:40 - right inside of where i'm going to be
04:42 - doing this so inside a passive tutorial
04:44 - i have the exe and then what you can do
04:46 - is in when you're in the same directory
04:48 - as this file you can type ngrok and then
04:51 - whatever the command is that you want to
04:52 - run however you do need to create an
04:54 - account on ngrok and get an
04:56 - authorization token so just scroll down
04:58 - on this page where the download is and
05:00 - if you don't have an auth token then
05:02 - sign up
05:03 - since i'm already signed up it's going
05:04 - to bring me to the dashboard and then
05:06 - here you'll see a command where it says
05:07 - ngrok auth token and then whatever the
05:09 - token is copy that paste that in your
05:12 - terminal wherever the ngrok.exe file is
05:16 - and then you'll be good to go and you
05:17 - can start using and
05:19 - okay so now that we have that installed
05:20 - and i'm assuming you have node.js
05:22 - installed we're going to create our
05:23 - react frontend using an npx command so
05:26 - i'm going to type mpx
05:28 - create and then react
05:30 - app and then the name of my app i want
05:32 - to be frontend it will make a frontend
05:34 - directory for me inside of here so let's
05:37 - hit enter
05:38 - okay that's going to take a second while
05:41 - that happens let's run the ngrok command
05:43 - so you can see how this works and then
05:45 - we'll set up our passage account so i'm
05:47 - going to say ngrok
05:48 - http
05:49 - and then 3000 now ngrok obviously is the
05:52 - name of the command http is what type of
05:55 - request we want to be forward and then
05:57 - 3000 is the port that our react
05:59 - application is going to be running on
06:01 - this is just the default port so when i
06:03 - do this
06:04 - let's make this a bit larger we can
06:06 - close that here you're going to see that
06:08 - it opens up this page here and we get
06:11 - these urls and these urls are forwarding
06:14 - to http localhost colon 3000. so if i
06:16 - send a request to this url right here it
06:19 - will send it to localhost 3000 get the
06:21 - result and then send it back so very
06:23 - cool again this is temporary so if you
06:25 - restart ngrok this url will change and
06:28 - this url will not exist forever uh you
06:30 - have to like i guess
06:32 - it'll give you a new url after a certain
06:34 - period of time i think you can pay and
06:36 - have it stay for longer but we're just
06:38 - going to use the free version we don't
06:39 - need to pay for them for now though we
06:40 - want to copy this https url because
06:43 - that's what we're going to use for our
06:44 - app and just have that on your clipboard
06:46 - for the next step here so now we're
06:48 - going to go back to the passage website
06:51 - we need to make an account here for our
06:53 - auth
06:54 - so sign up if you don't already have an
06:55 - account i'll leave this link in the
06:57 - description i have one so i'm going to
06:58 - log in and then what you can do is
07:00 - create a new application so for our
07:03 - application i'll just call this tutorial
07:05 - call yours whatever you want the
07:07 - authentication origin this is where
07:09 - we're going to paste that ngrok url
07:11 - because that's how we're going to access
07:12 - our website from now on and just note
07:14 - that if this changes you're going to
07:16 - have to change the authentication origin
07:18 - and i'll show you how you do that in a
07:20 - second and then the redirect url this is
07:22 - what page you want to go to based off
07:25 - this base url when you sign in so in our
07:28 - case we want to have a profile page and
07:29 - the profile will just show us if the
07:31 - user is signed in what their email is so
07:33 - for now we'll just put slash profile we
07:34 - can change that later too and then we
07:36 - can choose our text stack i'm just going
07:38 - to go with react in python because
07:39 - that's what we're using
07:41 - okay create new application and then it
07:43 - actually tells us how we can do this
07:44 - right so you can see how simple this is
07:46 - we install with one command and then we
07:48 - add a passage element to our react front
07:50 - end that then gives us the login form
07:53 - the sign up form all that kind of stuff
07:55 - and then for python if we want we can
07:57 - have a look at the documentation here or
07:59 - the github example
08:00 - i will link some of this stuff in the
08:02 - description or at least the link to the
08:04 - documentation so you can read about
08:06 - other tech stacks and a bunch of
08:07 - features because i'm not going to show
08:08 - you everything in this video
08:10 - for now though let's just go to our
08:12 - dashboard
08:13 - and what we want to look for right now
08:15 - is the application id so let's copy that
08:18 - application id because we're going to
08:19 - need that
08:20 - and now what we want to do
08:23 - is go back here and our front end has
08:25 - been created so inside of our front end
08:27 - directory i'm going to make a new file
08:29 - called dot env and i just need to put
08:31 - this app id inside of here so i'm going
08:34 - to say react
08:35 - app underscore
08:37 - passage underscore and we'll say app
08:40 - underscore id is equal to and then we'll
08:42 - paste our application id inside of here
08:44 - and this is an environment variable that
08:46 - we're going to use to actually we'll
08:47 - connect to passage right
08:49 - okay so now that we have that uh what we
08:52 - can do for now is just clean up this
08:54 - directory a bit because we don't need
08:56 - everything inside of here so for now i'm
08:58 - going to delete a few files
08:59 - specifically
09:01 - all of these ones so app.css app.test.js
09:05 - logo report web vitals and setup tests
09:07 - we don't need any of those
09:09 - so let's delete those now let's go to
09:11 - index.js let's get rid of the import of
09:14 - web vitals let's get rid of that
09:17 - let's go to
09:18 - app.js
09:20 - let's get rid of those imports and let's
09:22 - clear everything inside of here
09:24 - and for now let's just put a p tag and
09:26 - say
09:27 - hello world exclamation point
09:29 - okay nice we've cleaned all of that up
09:32 - now what we're gonna do is run our react
09:34 - front-end so let's go npm start
09:36 - and we got an issue it says package.json
09:41 - uh a complete log this is related to npm
09:44 - not being able to find oh it's because i
09:45 - did not go into the front end directory
09:47 - so let's go cd front end where our app
09:49 - actually is and then mpm start
09:52 - okay so it's going to take a second to
09:53 - run but now we should be able to access
09:55 - the react front end from this ngrok url
09:58 - because it's forwarding the request
10:00 - to there so let me just copy this url
10:03 - here okay let's grab all of that
10:08 - let's go here and let's paste that and
10:10 - then notice it's going to show me hello
10:12 - world okay awesome so ngrok url is
10:14 - working react app is running passage
10:17 - account is created now let's start
10:19 - actually setting up the react
10:21 - application that's going to allow us to
10:23 - log in and use that authentication so
10:25 - we're going to create two pages one
10:27 - that's going to be the login page
10:28 - another that's going to be the profile
10:29 - page so we need some way to route
10:31 - between those so the first thing i'm
10:32 - going to do here
10:34 - is i'm just going to stop this
10:35 - application and i'm going to import a
10:36 - few packages that we need
10:38 - so the first one is going to be react
10:40 - router dom so we're going to install
10:42 - react
10:43 - router
10:44 - dom like that
10:46 - let's see if i can make this a bit
10:47 - easier to read okay
10:49 - npm install react router dom uh it'd be
10:52 - helpful if i typed npm correctly
10:56 - okay once that's done i'll be right back
10:58 - okay that is finished then we are going
11:00 - to install the package for passage so
11:03 - i'm going to type npm install at and
11:05 - then this is passage identity i think i
11:09 - spelt that correctly
11:10 - slash passage off and then this is going
11:13 - to be at and we want a specific version
11:16 - here
11:17 - 0.1.0 and then this is going to be the
11:20 - beta dot and then 2 7. okay so that's
11:23 - the specific one we want it's just the
11:25 - most up-to-date one that's why i'm
11:26 - installing it
11:27 - okay again pause the video if you need
11:28 - to type in that command once that's done
11:30 - i will be right back okay so that is
11:32 - finished now that we have done that we
11:35 - want to set up two pages as i was saying
11:36 - the login page and the profile page so
11:39 - i'm gonna make a new folder here called
11:42 - components and inside of the component
11:44 - i'm going to put a profile.js
11:47 - and i'm also going to put a login.js and
11:50 - for now let's just put some kind of
11:51 - boilerplate components here so i'm going
11:53 - to say export default and then this will
11:55 - be login
11:57 - and this needs to be a function
11:59 - okay and let's simply return from here a
12:02 - p tag that just says login
12:05 - let's copy that let's put the same in
12:07 - profile except we're of course going to
12:09 - change login to b profile
12:14 - okay
12:15 - now let's go to app.js and let's set up
12:17 - the router so that we can go between the
12:19 - different pages so i'm going to say
12:20 - import
12:22 - and let's import a link
12:24 - actually not a link let's import a route
12:28 - our routes
12:30 - and then our browser
12:33 - router like that if we could
12:35 - type this properly
12:37 - of course
12:38 - from and then this is going to be react
12:41 - router
12:42 - hyphen dom
12:44 - okay now that we have that we want to
12:45 - import our two components i'm going to
12:47 - import profile from and then this is
12:49 - going to be dot slash components
12:51 - slash profile
12:53 - and then same for login
12:55 - import login
12:57 - from component slash login
12:59 - okay now that we have that
13:00 - let's set up the different routes
13:03 - so we're going to have our browser
13:06 - router like that
13:07 - should have just typed it properly and
13:09 - then inside of here
13:12 - let's do the tag properly this time
13:15 - we want to have our different routes so
13:18 - we'll have our roots like that
13:20 - okay and then we need our individual
13:22 - roots so i'll put them in here and these
13:24 - can be i guess self-ending tags whatever
13:27 - you call those okay so we're gonna have
13:28 - two roots the first root is gonna have
13:30 - an element which is equal to and then
13:32 - this is going to be the login element
13:35 - okay and again we can just close the tag
13:37 - in itself and the path for this is going
13:40 - to be slash so when you go to slash
13:42 - it'll just bring you to the login page
13:43 - that's fine and we'll make that an exact
13:46 - path
13:46 - okay then we're going to have an element
13:48 - this is going to be equal to profile and
13:50 - then the path is going to be equal to
13:53 - not slash we also don't need exact it'll
13:55 - just be slash profile
13:58 - okay so now that should be the routing
13:59 - for our application so we can get to the
14:01 - different components so let's test that
14:03 - out let's just rerun our application
14:05 - here so npm start
14:08 - okay
14:09 - and i hope my url didn't change actually
14:12 - it looked like my url might have changed
14:13 - so i might have to fix something here in
14:15 - a second
14:16 - uh let's see if i refresh this okay no
14:18 - looks like we're all good so url did not
14:20 - change for some reason i thought it did
14:21 - but if i go to slash and then profile
14:24 - brings me to profile and if i just go to
14:26 - slash brings me to the login page nice
14:28 - so that is working now let's code the
14:30 - login page so for login you're going to
14:33 - see how extremely simple this is but i'm
14:35 - just going to say import and then this
14:37 - is at passage identity passage auth now
14:41 - that we've done that what we can do is
14:43 - just use a component from that module
14:46 - package library whatever you want to
14:47 - call it
14:48 - first though let's just make the page
14:50 - look a little bit nicer so let's say div
14:52 - let's put an h1 tag
14:54 - okay slash h1 let's just say
14:57 - passage demo
14:59 - and then let's put the component i was
15:01 - talking about
15:02 - this component i believe is just passage
15:05 - actually i don't think it's login i
15:06 - think it's auth i need to have a look
15:08 - here though and see yeah it's going to
15:10 - be passage off so a few other components
15:12 - you can use as well but for now we're
15:14 - just going to use the auth component and
15:16 - then we need to put here the app id
15:19 - now the app id is stored in our env file
15:21 - so the way that we access that is we say
15:23 - process dot env dot and then let's just
15:27 - copy this here so we don't mistype it
15:29 - okay let's go to log in and let's paste
15:31 - it
15:32 - and that is literally all we need for
15:35 - the component now this is going to show
15:36 - a login form and a register form and
15:39 - allow us to create new users again you
15:41 - can customize that if you want if you
15:43 - wanted to add more fields like when
15:44 - you're signing up you want to collect a
15:45 - first name a last name a profile photo
15:47 - that type of stuff there is a way to do
15:49 - that with passage you also can connect
15:51 - all of your users from passage to a
15:53 - local database by just associating the
15:56 - passage user id in your local database i
15:59 - assume you guys can figure that out i'll
16:00 - show you like all the users in passion
16:02 - passage in a few minutes but i just
16:04 - wanted to mention that if you want to
16:05 - customize this more you totally can do
16:07 - that i'm just showing you kind of the
16:09 - most basic option here anyways we have
16:11 - our passage demo we have this
16:13 - let me just add a class here just so
16:15 - that we center everything so i'm going
16:17 - to call this container and let's go to
16:19 - index.css and let's just write the
16:22 - container class here before i forget
16:25 - so container i just want the
16:28 - what do you call this the display to be
16:30 - flex i want the flex direction to be
16:32 - column and i want to align the items in
16:36 - the center and i think that should be
16:38 - good
16:39 - okay so now that we have that let's have
16:40 - a look at our login page so let's
16:42 - refresh
16:44 - and notice we get our passage demo we
16:46 - have login email address and then if
16:48 - want to we can register so let's just
16:50 - try registering for now let's type in
16:52 - email tech with tim gmail.com
16:55 - okay you have to actually have access to
16:57 - the email so make sure you type in the
16:58 - correct email okay sign in with
17:00 - biometrics let's just zoom in here let's
17:02 - register
17:03 - and then again if you're on your phone
17:04 - or something it show your face id but
17:06 - since i don't have that
17:07 - it's just showing me the regular
17:09 - pin okay then it redirected me to
17:11 - profile because i signed in now if we go
17:14 - to passage we can refresh the dashboard
17:16 - here
17:17 - and notice that i was signed in i just
17:19 - created a new account so we have one
17:20 - user a hundred percent with biometrics
17:23 - zero percent magic links if you're
17:25 - signing in with email i'm like you know
17:27 - clicking the link in your email that'll
17:28 - go up obviously and if we want we could
17:30 - change this so if i go to branding maybe
17:32 - i want to change the color
17:34 - can i click on this ah nice
17:36 - let's make it like a red or something
17:38 - and then that's how the email will look
17:41 - as well as
17:43 - actually i don't know if this is just
17:44 - the email yeah okay customize email sent
17:46 - by passage with your company's branding
17:47 - okay so that's just gonna change the
17:48 - email but that's fine let's change it
17:50 - anyways
17:51 - okay going back here i actually wanted
17:53 - to show you users so here we have users
17:55 - i have the user id i have the sign
17:57 - update last login all of that and all of
17:59 - this information you can get access to
18:01 - in the front end or in the back end and
18:03 - i'll show you briefly how to do that
18:05 - anyways there you go that is what i want
18:06 - to show you
18:08 - we just implemented authentication
18:10 - now though let's try to sign in so let's
18:12 - go back to
18:14 - just slash
18:16 - and let's sign in
18:17 - so tech with dim
18:20 - gmail.com continue okay
18:23 - let's type in our pin
18:25 - boom brings me back to profile and signs
18:27 - me in now of course we're not verifying
18:28 - if we're actually authenticated that's
18:30 - what we're going to do now but that was
18:31 - the basics on actually creating and
18:33 - signing up for accounts and having those
18:35 - all stored in the cloud you don't have
18:36 - to store those yourself okay so now that
18:38 - we've made login what we want to do is
18:40 - for the profile page we want to verify
18:42 - if the user is signed in or not if
18:44 - they're not signed in i don't want to
18:45 - show them the page
18:47 - if they are signed in then of course
18:48 - i'll show it to them so i'm going to
18:49 - make a hook here and this hook is just
18:52 - going to be a flexible way that allows
18:54 - me from anywhere in my app to grab
18:56 - information about a user and see if
18:58 - they're logged in now there's a few
19:00 - other ways to do this again i'm just
19:01 - showing you some basics here but for now
19:03 - let's make a hook
19:04 - the hook's going to be called use
19:06 - current
19:07 - user
19:08 - okay and then inside of here we're going
19:10 - to say export
19:13 - and this is going to be function and
19:16 - then use
19:17 - current user
19:19 - okay
19:20 - and inside of here we're just going to
19:21 - write something that will give us the
19:23 - information about the current user so
19:24 - we're going to say const and then this
19:27 - is going to be
19:28 - is equal to use state
19:30 - so let's just import use state and then
19:32 - i'll write the variables so let's go
19:34 - from
19:36 - let's go import
19:39 - use
19:40 - state while we're at it we need use
19:42 - effect as well from and then react
19:45 - okay we're going to say const and then
19:47 - what do we want to call this i guess
19:49 - it's going to be
19:50 - result and then set result that will be
19:54 - equal to use state and then the default
19:56 - state we want here is three piece of
19:57 - information we want is loading so are we
20:00 - loading or not so by default that will
20:03 - be true
20:05 - okay we also want to have is
20:09 - authorized
20:10 - okay by default that's going to be false
20:12 - and then we want the username of the
20:15 - user which for now is going to be
20:16 - username so whenever we call
20:19 - this hook here
20:20 - what i'm going to do is have a use
20:22 - effect and the use effect is just going
20:24 - to get the current user and essentially
20:26 - check if they're signed in from passage
20:29 - so let me just look at my other screen
20:30 - here we need to import something so
20:32 - we're going to say import and then this
20:34 - is going to be
20:36 - passage
20:37 - user like that
20:39 - from and then this will be at passage
20:41 - identity
20:42 - passage auth slash passage user okay so
20:45 - the passage user class allows us to get
20:47 - access to the user's information like
20:49 - their email or their phone number or
20:51 - whatever they signed up with as well as
20:52 - get their user id and a bunch of other
20:54 - stuff for now we'll just get the
20:56 - username and check if they're signed in
20:57 - but just keep in mind you can use the
20:59 - class for a lot more so inside of here
21:01 - we want to do the following we're going
21:02 - to say let and then this is going to be
21:04 - passage user
21:06 - and just empty parentheses like this
21:08 - dot get user like that or not get user
21:12 - that's going to be user
21:14 - info like that and then this will be a
21:16 - promise we're going to say dot then
21:18 - we're going to say
21:19 - user info and then inside of here we'll
21:22 - process the user info now first i'm just
21:24 - going to make a variable here say const
21:26 - cancel
21:28 - request
21:29 - is equal to false okay
21:32 - and inside of here we want to handle
21:35 - this data so i'm going to say if we have
21:37 - cancelled the request
21:39 - by the time that this promise is
21:41 - occurring then let's just
21:42 - return or this is resolving sorry
21:45 - otherwise though we're going to check if
21:46 - we have some user data so we're going to
21:48 - say if
21:50 - user info
21:52 - is equal to undefined
21:55 - then that means that we are not signed
21:56 - in so if it's equal to undefined then
21:58 - what we want to do is say set result and
22:01 - the result that we want to set is
22:02 - actually going to be this
22:04 - except is loading is going to be false
22:06 - so here make that false
22:08 - okay so if we have no user info that
22:11 - means no user is currently signed in and
22:12 - so we set the result say okay we're no
22:14 - longer loading you are not authorized
22:16 - and you don't have a username otherwise
22:17 - though so let's make sure we return here
22:21 - then what we'll do is say set result
22:23 - in a similar way we're going to now set
22:25 - the result but we're going to say
22:27 - true
22:29 - this is going to be false
22:31 - and then we're going to grab the user's
22:32 - information so let me
22:34 - uh why is this
22:35 - okay
22:36 - so let me now grab the username so the
22:38 - way i do that is i say user info dot
22:42 - username but the thing is users can sign
22:44 - up with their username or phone number
22:46 - show that to you in a second so i'm
22:48 - going to check if it has a username if
22:49 - it does i'll use the username otherwise
22:51 - i will use
22:52 - the
22:54 - phone and sorry is it username or is it
22:56 - email i think it's email
22:59 - so let's change that to email yes it is
23:01 - indeed you know
23:02 - okay so we'll go through this hook in a
23:04 - second i think it's fairly
23:04 - straightforward but let me just show you
23:06 - something here if you go to passage and
23:08 - you go to authentication you can change
23:10 - this so that you can have email or phone
23:12 - number only email or only phone so
23:14 - that's what i'm talking about and why
23:16 - we're checking for a phone number
23:17 - anyways that's that
23:19 - a few more things we need to do here
23:21 - is inside of the use effect so i think
23:24 - these effect ends right here
23:26 - let's add our square brackets
23:28 - let's also have a return and then a
23:31 - clean up operation
23:32 - and for the cleanup operation here what
23:35 - we're going to do is cancel request is
23:38 - equal to trip
23:40 - okay and then lastly here we're going to
23:42 - return
23:44 - whatever the result is here that is
23:45 - stored inside of our state from the hook
23:48 - so now use this hook inside of any
23:49 - component and you can check if the user
23:51 - is authorized all right so let's close
23:54 - the hook now let's go to profile and
23:55 - let's use the hook
23:57 - so i'm going to say import
23:59 - use
24:00 - current
24:01 - like this user from and then it's going
24:04 - to be dot dot slash component slash and
24:06 - then use
24:08 - current
24:09 - user
24:10 - believe are not components sorry it's
24:12 - going to be hooks okay
24:16 - now that we have that let's use the hook
24:18 - so i'm going to say const we have three
24:21 - pieces of information that we want we
24:23 - want to get the is loading
24:27 - the
24:28 - is authorized and then the username
24:32 - and this will be equal to and then the
24:34 - use current user okay
24:36 - now that we have that what i can do is
24:38 - the following i can say well if we are
24:40 - loading so if is loading
24:43 - then just return null
24:45 - because we don't want to show anything
24:46 - if we're loading then we're going to say
24:48 - well if you're not authorized
24:50 - so if not
24:51 - is authorized then let's just return
24:53 - something that says hey you need to sign
24:56 - in to view this page so let's go with a
24:58 - p tag which is very basic
25:01 - let's say
25:02 - you must sign in to view
25:05 - this page exclamation point and then we
25:07 - can just make this a link so let's
25:09 - change this to login and let's import a
25:11 - link here so let's say import link
25:14 - from react router
25:17 - dom
25:18 - okay and then this will be
25:21 - link
25:22 - spelt correctly
25:25 - let's place login inside of here
25:28 - and then let's say this is going to
25:30 - and then just slash because that's our
25:32 - login page okay so that's what happens
25:34 - if we're not authorized otherwise let's
25:36 - just say you are signed in as
25:40 - and let's do a strong tag and let's put
25:42 - username inside of there my autocomplete
25:44 - knows exactly what i want
25:47 - okay
25:48 - uh let's end the p tag and looks like we
25:50 - are good for now for the profile page so
25:54 - hopefully what will happen now is if we
25:55 - go to the profile page and we are not
25:56 - signed in it will show us hey you must
25:58 - sign in you are unauthorized but if we
26:00 - are signed in then it will just show us
26:02 - whatever our username is
26:03 - so let's test this out now uh compiled
26:06 - with one error what is the error it says
26:09 - hooks i use current user does not exist
26:12 - all right the issue is that i called
26:13 - this hook instead of hooks
26:15 - so let's rename that directory and now i
26:18 - think we should be good and awesome okay
26:21 - uh oh so sorry this is const i need to
26:22 - just change this to be let
26:24 - because we actually changed that
26:25 - variable so let's change that okay now
26:27 - that we've done that
26:28 - let's go here
26:30 - and let's refresh
26:32 - okay
26:33 - and what's the problem now okay it says
26:35 - you are signed in as tech with tim
26:37 - gmail.com now the reason it's showing me
26:38 - that is because my sign-in data is
26:40 - stored in a session or at least the fact
26:42 - that i'm signed in is stored in a
26:43 - session
26:44 - now if you want to change when that
26:45 - expires
26:46 - you can go here to session management
26:48 - and change this to say like 5 minutes
26:50 - instead of 60 minutes so then every five
26:52 - minutes you would have to sign in again
26:54 - in this case that's fine but there you
26:55 - go you can see that it's showing me my
26:57 - data and again we're getting that from
26:59 - the hook that i created so now let's go
27:01 - back to login
27:03 - let's go back to slash okay and
27:05 - everything seems to be working nice so
27:07 - there we go that is all functioning the
27:08 - profile page is working and really
27:11 - that's all you need for front-end
27:13 - authentication right if you want to
27:14 - check if someone's authenticated then
27:16 - you can just look at the is authorized
27:18 - right here then render something or not
27:20 - render something now there's a few other
27:21 - ways that you can handle this again i'm
27:22 - not showing you everything here but now
27:25 - what i want to do is build out the back
27:26 - end and show you how we send an
27:28 - authenticated request to a flask back
27:30 - end so if you want to create maybe an
27:32 - api or you maybe want to do what i'm
27:34 - doing sending an authenticated request
27:35 - and make sure the user is signed in
27:37 - before they get access to say user data
27:39 - then you can do that so this will be a
27:41 - little bit less time consuming but will
27:43 - still take us a few minutes let's make a
27:46 - new terminal here so let's go here
27:48 - for a new one
27:50 - and let's make a new directory here and
27:52 - let's call this backend and we're going
27:53 - to start setting up a flask project okay
27:56 - so we need to install a few things here
27:57 - with pip let me just throw them up on
27:59 - the screen you guys can pause and
28:01 - install them one by one if you want we
28:03 - need passage identity greater than or
28:04 - equal to 1.2.3
28:06 - flask request and then python.env
28:09 - now all of these will be available from
28:11 - the link in description so all the code
28:13 - i write will be on github so you guys
28:14 - can just grab this requirements.txt file
28:17 - and install it directly or copy line by
28:19 - line if you want i want to install this
28:21 - you type pip
28:22 - install and then you know name
28:24 - of requirement here i won't go through
28:27 - because i already have them installed if
28:28 - pip doesn't work for you try pip 3 and
28:30 - if that doesn't work for you try python
28:32 - 3 hyphen m and then pip
28:35 - install name requirement or you can try
28:38 - python hyphen m pip install one of those
28:41 - hopefully should work for you for
28:42 - installing those modules anyways i'm
28:44 - assuming you have those installed at
28:45 - this point now we're going to go inside
28:47 - a back end i'm going to create another
28:48 - directory here called app
28:50 - and i'm going to start coding a few
28:52 - things out so inside of back end i'm
28:54 - going to create a dot env file
28:56 - and inside of here we need to have a few
29:00 - pieces of data for our what do you call
29:02 - a passage app so the first thing we want
29:04 - is the app id which i can just grab from
29:07 - right here
29:08 - so let's just paste that in here we're
29:10 - going to call it passage app id and then
29:13 - we also want to get the passage api
29:15 - token which is something that we need to
29:16 - create
29:17 - so let me just see what i called this
29:19 - variable here i think it's just
29:22 - passage
29:23 - underscore api underscore key and that's
29:26 - going to be equal to and then we're
29:27 - going to have to grab that from the
29:29 - console so to do that let's go here to
29:32 - our dashboard let's go to api keys
29:36 - it's fine we don't need to save that and
29:38 - let's create a new api key here i'll
29:40 - just give its name first
29:42 - let's copy the key make sure you copy it
29:44 - now you can't view it after
29:46 - and i'm going to paste it here now of
29:47 - course you don't want to share this with
29:49 - people
29:49 - i'm just showing you because after this
29:51 - video is gone i'm going to delete this
29:52 - application okay so we have our dot env
29:55 - file
29:56 - next what we're going to do is make a
29:57 - new file here called run dot py
30:01 - now inside of run.py we'll write some
30:02 - code that will run our flask app but
30:04 - before we can do that we need to create
30:06 - our flask app so inside of app i'm going
30:08 - to make a folder called init.pi or not a
30:11 - folder sorry a file called init.pi i'm
30:14 - going to make another folder here or
30:16 - another another file called main.pi
30:19 - and i think that's all i need yeah that
30:22 - looks good to me okay so inside of a
30:24 - nit.pi we're going to set up our flask
30:26 - app so i'm going to say from
30:28 - flask
30:29 - import and then that's going to be flask
30:31 - and then i'm going to say define create
30:33 - underscore app this will be a function
30:35 - that we call to make an app i'm going to
30:37 - say app is equal to flask we need to
30:39 - pass underscore underscore name
30:40 - underscore underscore
30:41 - and then i'm going to import something
30:43 - from my main file that we've yet to
30:45 - create i'm going to say from dot main
30:48 - import auth as and then this will be
30:50 - auth underscore
30:52 - blueprint we're going to use flask
30:54 - blueprints just a way to separate out
30:56 - our application
30:57 - and i'm going to say app
30:58 - dot register underscore blueprint and
31:01 - i'm going to pass the auth underscore
31:03 - blueprint
31:05 - uh my autocomplete did not want to help
31:06 - me there okay then we're going to return
31:09 - the app
31:10 - nice
31:11 - so i understand this might be confusing
31:13 - because we haven't yet code out this
31:14 - file but you'll see very quickly why
31:16 - we're doing that inside of our main.pi
31:18 - file now we're going to say from flask
31:20 - import we're going to import request
31:22 - we're going to import
31:24 - blueprint we're going to import
31:26 - something called g
31:27 - and we're going to import actually i
31:29 - think that's all uh one more we need
31:31 - jsonify okay
31:33 - then we're going to import os
31:36 - and we're going to import something from
31:37 - passage so we're going to say from
31:39 - passage and then identity i believe
31:43 - is what it's called
31:44 - we're going to import
31:46 - passage as well as passage error
31:51 - now i'll go through all this in a second
31:53 - i just need to get our imports down
31:54 - we're now going to create our blueprint
31:55 - so i'm going to say auth is equal to
31:58 - and this is going to be a blueprint and
31:59 - it will be called off and it will have
32:01 - name
32:02 - so just to slow down here we did our
32:04 - different imports so we need create our
32:06 - auth blueprint if we go to init.pi
32:08 - that's exactly what we're importing here
32:10 - right and then registering that as a
32:11 - blueprint so now we can write views
32:14 - inside of this file okay now we're going
32:16 - to go to run.pi and do a few things in
32:18 - run.pi this is going to be the entry
32:20 - point of our flask app i'm going to say
32:22 - import app or from
32:25 - app which is the name of this directory
32:28 - we're going to say import and then
32:29 - create
32:30 - underscore app this is how we're going
32:32 - to create our flask application i'm
32:34 - going to say from
32:35 - env import and this is going to be
32:38 - load.env
32:39 - and find.env now this is how we're going
32:42 - to load this dot env file that you can
32:44 - see so we get the environment variables
32:46 - you should have installed this as
32:49 - python.env
32:52 - before we started here and i'm going to
32:55 - say load.env and i'm going to put
32:58 - find.env
32:59 - and this will load that environment
33:01 - variable file for us
33:02 - i'm going to make my flask app and say
33:04 - flask app is equal to create app and i'm
33:07 - going to say if underscore underscore
33:09 - name underscore underscore is equal to
33:11 - main then flask app dot run
33:14 - and we'll run this in debug equals true
33:16 - mode now if you want to change the port
33:18 - of the host you can do that i don't care
33:20 - i'll just leave it the same okay
33:22 - so we have run we have a nit.pi now all
33:24 - we have to do is code out main.pi so
33:27 - what we can do here is we can write kind
33:29 - of a standard view and then we can have
33:31 - a passage authenticate all of the
33:34 - requests to the views or to the
33:36 - endpoints that we set up so let's handle
33:38 - kind of the passage middleware that's
33:40 - what you could call it here and then
33:41 - once that's done all of the requests
33:43 - that we send to anything decorated with
33:45 - this auth decorator
33:47 - will be authenticated automatically by
33:49 - passage so the first thing we're going
33:50 - to do is say passage underscore api
33:53 - underscore key is equal to os don
33:56 - viron.get passage api key and then we
33:58 - want the app id so the passage
34:01 - let's just go app underscore id
34:05 - is equal to passage app underscore id
34:08 - and let's space those out and just
34:10 - verify that we name these correctly
34:12 - wrong env file
34:14 - passage api key passage app id okay it
34:17 - looks good so now that we have our
34:19 - environment variables we're going to
34:20 - have a try except so i'm going to say
34:21 - try and psg standing for passage is
34:24 - going to be equal to passage like that
34:27 - and i'm going to initialize this with
34:29 - the app id
34:32 - and the api key
34:33 - and then
34:35 - i think that is fine for now okay so now
34:37 - that we've initialized passage we're
34:39 - going to accept a and then this is going
34:42 - to be a passage exception
34:45 - or passage error as e and i'm just going
34:47 - to print out whatever e is and then i'm
34:50 - going to exit
34:52 - meaning we're just going to quit the
34:53 - application if for some reason we could
34:54 - not load passage and we'll just print
34:55 - out the air first
34:57 - okay
34:58 - now we're going to set up kind of the
34:59 - middleware here we've connected to
35:01 - passage assuming that our information is
35:02 - correct i'm going to say auth.before
35:05 - request now if you haven't seen this
35:07 - before in flask this is a decorator you
35:09 - can use that will run a function before
35:11 - all of your requests so you can do stuff
35:14 - like authentication so here i'm going to
35:15 - say define before request we don't need
35:18 - to take in a request
35:19 - and what we're going to do is try to
35:21 - authenticate the request using passage
35:23 - and if we can't do that then we're going
35:25 - to return some json that says you are
35:28 - unauthorized you cannot view this page
35:30 - or you cannot view this root whatever so
35:32 - i'm going to say try
35:33 - and this is going to be g.user
35:36 - is equal to psg dot and then it's going
35:39 - to be
35:40 - authenticate
35:42 - and then request like that and we're
35:44 - gonna pass in the request object that we
35:46 - imported right here
35:48 - okay and i'm gonna say accept and we can
35:51 - accept a passage error again
35:54 - all right not pass not password reset
35:56 - error this is passage error as e and
35:59 - then what we're going to do is return
36:02 - jsonify and then we can return the error
36:04 - and we can return e or we can return our
36:06 - own custom message in this case we'll
36:08 - just return e okay so this is going to
36:09 - run before every single request to any
36:11 - of our authentication endpoints so now
36:14 - lastly we can do something like dot auth
36:17 - or auth dot and then whatever we want
36:19 - this root to be so we'll say root
36:21 - and this could be like slash get
36:23 - user info
36:25 - okay
36:26 - and the methods we'll accept here will
36:28 - just be get and i'm going to say define
36:30 - and we'll go get user info
36:33 - and now inside of here we can get the
36:36 - current user by doing the following
36:38 - let's say psg
36:39 - underscore user is equal to and then
36:42 - it's going to be psg.getuser
36:44 - and we're going to say g.user okay and
36:47 - then i can say
36:48 - identifier
36:50 - is equal to an empty string and we're
36:53 - almost done here don't worry i know i've
36:54 - gone through a lot i'm going to say if
36:56 - psg underscore user dot email so if they
36:59 - signed in with their email essentially
37:01 - then we're going to say the identifier
37:03 - is equal to psg.email
37:07 - l if and then this will be psg user dot
37:10 - and this will be phone so if they signed
37:13 - in with their phone number instead then
37:14 - the identifier will be psg.phone
37:17 - and then lastly
37:19 - we can return
37:21 - jsonify identifier identifier and just
37:24 - tell uh you know what the identifier is
37:26 - for the current user that's signed in
37:28 - just a test route again there's a lot
37:30 - more stuff you can do here with the user
37:31 - and more information that you can get
37:33 - okay i know i just went through a lot
37:35 - quick recap here we get the information
37:37 - from our environment variables we then
37:39 - set up the passage object okay if
37:41 - there's an error then we're going to
37:42 - exit and print it out we set up our
37:45 - authentication middleware if you want to
37:46 - call it that this is going to happen
37:48 - before all of the requests so we're
37:49 - going to try to get the current user by
37:52 - authenticating the requests using
37:54 - authenticate request from passage
37:56 - if we were able to do that we'll store
37:58 - it in g
37:59 - and then if we can't we're going to
38:01 - return whatever the error was because
38:03 - the user is unauthorized
38:05 - then we set up this needs to be a root
38:07 - not router
38:09 - the get user info root
38:10 - now here we're going to get the user
38:13 - find their identifier and then simply
38:15 - return it to
38:17 - whoever called this okay
38:19 - there you go that is all we need for our
38:21 - back end
38:22 - so let's now run this let's go python
38:25 - we need to cd into back-end so cd into
38:27 - back-end and then python run.pi
38:30 - fingers crossed everything will work and
38:33 - there we go okay so it is now running
38:35 - so let's go
38:37 - ngrok split terminal okay that's all
38:39 - working
38:41 - let's go here
38:43 - and refresh
38:44 - and now what we need to do is we need to
38:46 - send a request to the backend and then
38:48 - get that information so to do that we're
38:50 - going to go to our package.json
38:53 - we're going to add something in here
38:54 - called proxy
38:56 - and what this allows us to do is proxy a
38:59 - request to a backend so for the url that
39:02 - we want here we're going to say http
39:04 - localhost colon and then it's going to
39:06 - be port 5000 that's the port that we're
39:08 - running flask on so now any request
39:10 - that's not handled by a frontend will be
39:11 - proxied to this url right here our back
39:14 - end and then we'll be able to get the
39:16 - result so now if i do something like go
39:19 - to profile
39:20 - let's make a function that's going to
39:22 - send a request to the back end
39:23 - so i'm going to say function and then
39:25 - this will be you know
39:27 - send
39:28 - request okay and what we can do is say
39:31 - fetch
39:32 - we can fetch slash get
39:34 - user info i know we already have the
39:36 - info but we're just doing a test here
39:38 - right and then i can say dot
39:41 - and then then
39:43 - okay and we can say response and say
39:46 - res.json
39:47 - okay and then dot then we can get our
39:50 - data
39:51 - and we can say data
39:53 - like that and we can just print it out
39:55 - and have a look at it for now so
39:56 - console.log
39:58 - and then data and then let's just add a
40:00 - button that will allow us to actually do
40:01 - that so let's add a button i guess we'll
40:04 - make this a div now or actually that
40:06 - could be a p and then this will be a div
40:09 - okay
40:13 - let's go button and inside of here we'll
40:16 - just say
40:18 - send
40:19 - quest
40:21 - to backend and this will be on
40:23 - click
40:24 - equal to send request all right
40:27 - let's try this now so let's go here
40:30 - let's refresh
40:31 - let's go to our profile
40:34 - we are signed in let's send a request to
40:35 - the back end
40:37 - let's look in the console and it says
40:39 - uncaught token expected json okay let me
40:42 - have a quick look here and i'll be right
40:44 - back all right so i actually just loaded
40:46 - the application here again after that
40:48 - error was occurring and i got this
40:49 - invalid host header so what i did was i
40:51 - just re-ran the npm command just because
40:54 - i thought it wasn't actually reading the
40:56 - proxy and then i got this issue now the
40:58 - fix to this issue is a little bit weird
41:00 - but essentially since we're using ngrok
41:01 - we're getting kind of this weird host
41:03 - error where it's not allowing us to
41:06 - connect to the react app so what i need
41:08 - to do is add something here in my
41:09 - environment variable file for the react
41:12 - application not for for the back end now
41:14 - this is a kind of a hilarious thing that
41:16 - i have to add but i'm just going to
41:18 - paste it in here it's dangerously
41:20 - disable host check so obviously you
41:22 - don't want to do this in production but
41:23 - for now this is fine and it just
41:25 - disables checking the host so that
41:26 - hopefully now we're not going to get
41:28 - this error now i need to reload this so
41:30 - we reload the environment variable
41:32 - so let's do that
41:34 - and then when i go back here hopefully
41:36 - all should be good okay so everything is
41:38 - working fine now so let's go back to
41:40 - slash profile and let's try to send a
41:42 - request to the back end and then notice
41:44 - i get my identifier here as tech with
41:46 - tim right so that's pretty much all i
41:48 - need to show you now i will quickly
41:50 - mention kind of how this is working a
41:51 - little bit more on the back end so if we
41:54 - go to our flask application which is
41:56 - running here and let's just have a look
41:59 - at
42:00 - flasks let's go to maine.pi uh really
42:03 - what this actually does when when you
42:05 - add this kind of middleware section here
42:07 - and you're authenticating the request is
42:08 - it looks for a cookie or it looks for a
42:11 - header that contains a jwt token which
42:14 - is kind of your authentication token now
42:17 - that will automatically be proxied to
42:19 - the back end based on the way that we've
42:21 - done this we don't have to manually send
42:23 - it but what happens is when you sign in
42:25 - here so let's just go back to log in
42:28 - there's a cookie and there's like a
42:29 - token that's stored in local storage and
42:32 - that's kind of like your session data
42:35 - right that's telling passage that you're
42:37 - signed in you're authenticated and
42:39 - that's how use current user here is able
42:41 - to get your data by using the token
42:43 - that's stored in local storage in the
42:45 - session data whatever so if you want to
42:47 - manually access that data what you can
42:50 - do is the following so let's go to
42:52 - profile here and let's just print it out
42:54 - i guess i can just print it out like
42:57 - actually where would it make sense to
42:59 - show it maybe i could show it here so
43:00 - let's just put it in a p tag
43:03 - and i can do something like local
43:05 - storage and then dog get item and i
43:08 - believe the name of this is gonna be
43:11 - passage
43:12 - off
43:14 - token or something along those lines i
43:16 - might be wrong but let's see if that's
43:17 - what it is so let's go to
43:20 - slash profile
43:23 - okay and there you go so it's going to
43:24 - show the token so obviously you don't
43:25 - want to show this token to people but
43:27 - this token is being sent automatically
43:29 - to the back end and that's how it's
43:30 - authenticating us if you don't have this
43:32 - token or if i like change the token then
43:35 - it's not going to work and you'll see
43:36 - that we won't be able to access that
43:37 - page sorry for the abrupt cut there my
43:39 - cat was going crazy had to take her out
43:41 - of the room anyways point is uh you have
43:44 - this in local storage you also have this
43:45 - stored in a cookie and that data is
43:48 - going to be forwarded again to the back
43:49 - end that's how it's authenticated so i
43:51 - just want to show you can get access to
43:52 - that manually if you're sending you know
43:54 - you want to send it as a header or
43:56 - however you're going to you know verify
43:57 - it or check it just wanted to mention
43:59 - that so you have that information with
44:01 - that said i think i'm going to wrap up
44:03 - the video here it's a little bit longer
44:05 - than i was expecting it to be but
44:06 - obviously want to build up kind of an
44:08 - entire project and show you how we set
44:09 - up everything from the back end to the
44:11 - front end and link them together but
44:12 - when you really look at what's going on
44:14 - for the authentication here again it's
44:16 - only a few lines of code like if we go
44:18 - to login here we go we have you know you
44:20 - could call this one line of code three
44:21 - lines of code whatever we have an app id
44:24 - and then we wrote this hook which you
44:25 - know is more complicated than it needs
44:27 - to be it's good it's flexible you can
44:29 - use in your app but really all you need
44:30 - is this passageuser.userinfo.then
44:33 - grab the info look and see if you have
44:36 - it undefined or not grab the email grab
44:38 - the phone number there's some other data
44:39 - you can get to
44:40 - and there you go you have pretty much
44:42 - everything that you need for user
44:44 - authentication all of your users users
44:46 - will be stored by passage you can go and
44:48 - have a look at the dashboard you can
44:49 - change the emails you can change the
44:51 - form
44:52 - you can customize as you please you can
44:54 - link this with a database that you have
44:56 - in your application for storing user
44:58 - data all kinds of stuff you can do with
45:00 - passage so that said i will end it here
45:02 - thanks again to passage for sponsoring
45:04 - this video if you guys enjoyed make sure
45:06 - to leave a like subscribe to the channel
45:07 - and i will see you in another one
45:11 - [Music]

Cleaned transcript:

if you're watching this video then chances are you've worked with authentication before maybe you've tried to add it to an api to a website to some other type of app and you've probably seen how time consuming and difficult it can be to do that not to mention you can introduce a ton of security vulnerabilities into your application if you try to do this say on your own from scratch where you're storing passwords hashing passwords and all of that mess that you really don't want to have to do in this video though i'm going to show you the easiest authentication i've ever used which is called passage now passage provides biometric authentication so you can do face id you can do it with your finger if you have windows hello face you can use that or if none of those work then you can get an email sent to you and click on that now this video is sponsored by passage however they are super simple to use and this is probably the authentication i'm going to use going forward considering it takes literally a few lines of code to add this to an app now of course passage is free you do not have to pay to use this and you can create an account at the link in the description and then actually start building your applications now in this video specifically i'm going to show you how you build a react frontend that's authenticated with passage and a flask backend so we'll have the frontend authenticated you'll sign in on the frontend and then you can send proxy requests to the backend and those will be authenticated as well of course if you want to use a different text stacks or you can do that as well they have pretty good documentation that shows you how to do this for pretty much any language and framework that you can think of but again here we're going to do react and flask for now though let me give you a quick demo of how this works and you will see well how it works so in this case we have passage demo i have a login form i can also click here for register now i didn't build these passage provides these and you can customize these if you want for now though let's log into an account that i already have so check with tim gmail.com let's click continue and then notice what it says here it says okay it's making sure it's you you're going to log in with biometrics so log into your account with the method you already used to unlock your device now i don't have windows hello face on here which is like face id for windows if i had that it would have popped up my camera instead though it's asking me for the pin for my computer so let me type that in and then it should sign me in i'm now brought to this page you can see my email is here and i can test my back end authentication by clicking this button and seeing if i send an authorized request now i'll play a demo on my phone while i continue to go through this so that you can see that it works a bit different on the phone and it will bring up my face id it automatically detects the device and then it shows the correct authentication method based on that device and again if that doesn't work then it will send you an email and you can sign in with a magic link all right so that is it for the demo this is really cool again this is super simple to do you're going to see how easy it is in a second so now let me hop over to vs code and we'll start building out this project where we have an authenticated front end and back end using biometric data all right so i'm here in vs code which is the editor i'm going to use for this video feel free to use whatever you want but just open up some folder or directory in this case i have one called passage tutorial it's on my desktop and this is where we'll start creating our different apps we're going to start with the react front end then we'll go to the python back end this is not a tutorial for complete beginners but you can watch it and you can see how i add the authentication then that will help you if you're adding it to your own app or you can do you know every single step that i do in this video it's up to you but i'm not going to explain all the react basics like what a hook is what a component is i have a whole react series on my channel so i'll leave that in the description in case you want to watch it and then same thing for python and flask i'm just going to go through building the app i'm not going to explain all like the flask concepts and that stuff i have a flash tutorial on my channel as well that you could watch if you want to learn that anyways we need to install a few things here before we get started so we need node.js i assume most of you already have that i'll leave a link in the description though and then we're going to use something called ngrok now when we're using passage if we want to get access to the full suite of biometric features that it has in authentication we need to have ssl and https secure connection so in order to do that we're going to use this tool called ngrok which allows us to create kind of a tunnel or a proxy from a temporary public address or public domain to our local host machine so this will allow you to use this from well any computer that you want and it will forward the requests from that temporary public url to your localhost machine server or whatever you want to call it it's quite cool but you do need to download this so link in the description it's also just ngoc.com download it and then what you're going to have to do after you download this is you're going to have to extract it from a zip folder so i've just placed it right inside of where i'm going to be doing this so inside a passive tutorial i have the exe and then what you can do is in when you're in the same directory as this file you can type ngrok and then whatever the command is that you want to run however you do need to create an account on ngrok and get an authorization token so just scroll down on this page where the download is and if you don't have an auth token then sign up since i'm already signed up it's going to bring me to the dashboard and then here you'll see a command where it says ngrok auth token and then whatever the token is copy that paste that in your terminal wherever the ngrok.exe file is and then you'll be good to go and you can start using and okay so now that we have that installed and i'm assuming you have node.js installed we're going to create our react frontend using an npx command so i'm going to type mpx create and then react app and then the name of my app i want to be frontend it will make a frontend directory for me inside of here so let's hit enter okay that's going to take a second while that happens let's run the ngrok command so you can see how this works and then we'll set up our passage account so i'm going to say ngrok http and then 3000 now ngrok obviously is the name of the command http is what type of request we want to be forward and then 3000 is the port that our react application is going to be running on this is just the default port so when i do this let's make this a bit larger we can close that here you're going to see that it opens up this page here and we get these urls and these urls are forwarding to http localhost colon 3000. so if i send a request to this url right here it will send it to localhost 3000 get the result and then send it back so very cool again this is temporary so if you restart ngrok this url will change and this url will not exist forever uh you have to like i guess it'll give you a new url after a certain period of time i think you can pay and have it stay for longer but we're just going to use the free version we don't need to pay for them for now though we want to copy this https url because that's what we're going to use for our app and just have that on your clipboard for the next step here so now we're going to go back to the passage website we need to make an account here for our auth so sign up if you don't already have an account i'll leave this link in the description i have one so i'm going to log in and then what you can do is create a new application so for our application i'll just call this tutorial call yours whatever you want the authentication origin this is where we're going to paste that ngrok url because that's how we're going to access our website from now on and just note that if this changes you're going to have to change the authentication origin and i'll show you how you do that in a second and then the redirect url this is what page you want to go to based off this base url when you sign in so in our case we want to have a profile page and the profile will just show us if the user is signed in what their email is so for now we'll just put slash profile we can change that later too and then we can choose our text stack i'm just going to go with react in python because that's what we're using okay create new application and then it actually tells us how we can do this right so you can see how simple this is we install with one command and then we add a passage element to our react front end that then gives us the login form the sign up form all that kind of stuff and then for python if we want we can have a look at the documentation here or the github example i will link some of this stuff in the description or at least the link to the documentation so you can read about other tech stacks and a bunch of features because i'm not going to show you everything in this video for now though let's just go to our dashboard and what we want to look for right now is the application id so let's copy that application id because we're going to need that and now what we want to do is go back here and our front end has been created so inside of our front end directory i'm going to make a new file called dot env and i just need to put this app id inside of here so i'm going to say react app underscore passage underscore and we'll say app underscore id is equal to and then we'll paste our application id inside of here and this is an environment variable that we're going to use to actually we'll connect to passage right okay so now that we have that uh what we can do for now is just clean up this directory a bit because we don't need everything inside of here so for now i'm going to delete a few files specifically all of these ones so app.css app.test.js logo report web vitals and setup tests we don't need any of those so let's delete those now let's go to index.js let's get rid of the import of web vitals let's get rid of that let's go to app.js let's get rid of those imports and let's clear everything inside of here and for now let's just put a p tag and say hello world exclamation point okay nice we've cleaned all of that up now what we're gonna do is run our react frontend so let's go npm start and we got an issue it says package.json uh a complete log this is related to npm not being able to find oh it's because i did not go into the front end directory so let's go cd front end where our app actually is and then mpm start okay so it's going to take a second to run but now we should be able to access the react front end from this ngrok url because it's forwarding the request to there so let me just copy this url here okay let's grab all of that let's go here and let's paste that and then notice it's going to show me hello world okay awesome so ngrok url is working react app is running passage account is created now let's start actually setting up the react application that's going to allow us to log in and use that authentication so we're going to create two pages one that's going to be the login page another that's going to be the profile page so we need some way to route between those so the first thing i'm going to do here is i'm just going to stop this application and i'm going to import a few packages that we need so the first one is going to be react router dom so we're going to install react router dom like that let's see if i can make this a bit easier to read okay npm install react router dom uh it'd be helpful if i typed npm correctly okay once that's done i'll be right back okay that is finished then we are going to install the package for passage so i'm going to type npm install at and then this is passage identity i think i spelt that correctly slash passage off and then this is going to be at and we want a specific version here 0.1.0 and then this is going to be the beta dot and then 2 7. okay so that's the specific one we want it's just the most uptodate one that's why i'm installing it okay again pause the video if you need to type in that command once that's done i will be right back okay so that is finished now that we have done that we want to set up two pages as i was saying the login page and the profile page so i'm gonna make a new folder here called components and inside of the component i'm going to put a profile.js and i'm also going to put a login.js and for now let's just put some kind of boilerplate components here so i'm going to say export default and then this will be login and this needs to be a function okay and let's simply return from here a p tag that just says login let's copy that let's put the same in profile except we're of course going to change login to b profile okay now let's go to app.js and let's set up the router so that we can go between the different pages so i'm going to say import and let's import a link actually not a link let's import a route our routes and then our browser router like that if we could type this properly of course from and then this is going to be react router hyphen dom okay now that we have that we want to import our two components i'm going to import profile from and then this is going to be dot slash components slash profile and then same for login import login from component slash login okay now that we have that let's set up the different routes so we're going to have our browser router like that should have just typed it properly and then inside of here let's do the tag properly this time we want to have our different routes so we'll have our roots like that okay and then we need our individual roots so i'll put them in here and these can be i guess selfending tags whatever you call those okay so we're gonna have two roots the first root is gonna have an element which is equal to and then this is going to be the login element okay and again we can just close the tag in itself and the path for this is going to be slash so when you go to slash it'll just bring you to the login page that's fine and we'll make that an exact path okay then we're going to have an element this is going to be equal to profile and then the path is going to be equal to not slash we also don't need exact it'll just be slash profile okay so now that should be the routing for our application so we can get to the different components so let's test that out let's just rerun our application here so npm start okay and i hope my url didn't change actually it looked like my url might have changed so i might have to fix something here in a second uh let's see if i refresh this okay no looks like we're all good so url did not change for some reason i thought it did but if i go to slash and then profile brings me to profile and if i just go to slash brings me to the login page nice so that is working now let's code the login page so for login you're going to see how extremely simple this is but i'm just going to say import and then this is at passage identity passage auth now that we've done that what we can do is just use a component from that module package library whatever you want to call it first though let's just make the page look a little bit nicer so let's say div let's put an h1 tag okay slash h1 let's just say passage demo and then let's put the component i was talking about this component i believe is just passage actually i don't think it's login i think it's auth i need to have a look here though and see yeah it's going to be passage off so a few other components you can use as well but for now we're just going to use the auth component and then we need to put here the app id now the app id is stored in our env file so the way that we access that is we say process dot env dot and then let's just copy this here so we don't mistype it okay let's go to log in and let's paste it and that is literally all we need for the component now this is going to show a login form and a register form and allow us to create new users again you can customize that if you want if you wanted to add more fields like when you're signing up you want to collect a first name a last name a profile photo that type of stuff there is a way to do that with passage you also can connect all of your users from passage to a local database by just associating the passage user id in your local database i assume you guys can figure that out i'll show you like all the users in passion passage in a few minutes but i just wanted to mention that if you want to customize this more you totally can do that i'm just showing you kind of the most basic option here anyways we have our passage demo we have this let me just add a class here just so that we center everything so i'm going to call this container and let's go to index.css and let's just write the container class here before i forget so container i just want the what do you call this the display to be flex i want the flex direction to be column and i want to align the items in the center and i think that should be good okay so now that we have that let's have a look at our login page so let's refresh and notice we get our passage demo we have login email address and then if want to we can register so let's just try registering for now let's type in email tech with tim gmail.com okay you have to actually have access to the email so make sure you type in the correct email okay sign in with biometrics let's just zoom in here let's register and then again if you're on your phone or something it show your face id but since i don't have that it's just showing me the regular pin okay then it redirected me to profile because i signed in now if we go to passage we can refresh the dashboard here and notice that i was signed in i just created a new account so we have one user a hundred percent with biometrics zero percent magic links if you're signing in with email i'm like you know clicking the link in your email that'll go up obviously and if we want we could change this so if i go to branding maybe i want to change the color can i click on this ah nice let's make it like a red or something and then that's how the email will look as well as actually i don't know if this is just the email yeah okay customize email sent by passage with your company's branding okay so that's just gonna change the email but that's fine let's change it anyways okay going back here i actually wanted to show you users so here we have users i have the user id i have the sign update last login all of that and all of this information you can get access to in the front end or in the back end and i'll show you briefly how to do that anyways there you go that is what i want to show you we just implemented authentication now though let's try to sign in so let's go back to just slash and let's sign in so tech with dim gmail.com continue okay let's type in our pin boom brings me back to profile and signs me in now of course we're not verifying if we're actually authenticated that's what we're going to do now but that was the basics on actually creating and signing up for accounts and having those all stored in the cloud you don't have to store those yourself okay so now that we've made login what we want to do is for the profile page we want to verify if the user is signed in or not if they're not signed in i don't want to show them the page if they are signed in then of course i'll show it to them so i'm going to make a hook here and this hook is just going to be a flexible way that allows me from anywhere in my app to grab information about a user and see if they're logged in now there's a few other ways to do this again i'm just showing you some basics here but for now let's make a hook the hook's going to be called use current user okay and then inside of here we're going to say export and this is going to be function and then use current user okay and inside of here we're just going to write something that will give us the information about the current user so we're going to say const and then this is going to be is equal to use state so let's just import use state and then i'll write the variables so let's go from let's go import use state while we're at it we need use effect as well from and then react okay we're going to say const and then what do we want to call this i guess it's going to be result and then set result that will be equal to use state and then the default state we want here is three piece of information we want is loading so are we loading or not so by default that will be true okay we also want to have is authorized okay by default that's going to be false and then we want the username of the user which for now is going to be username so whenever we call this hook here what i'm going to do is have a use effect and the use effect is just going to get the current user and essentially check if they're signed in from passage so let me just look at my other screen here we need to import something so we're going to say import and then this is going to be passage user like that from and then this will be at passage identity passage auth slash passage user okay so the passage user class allows us to get access to the user's information like their email or their phone number or whatever they signed up with as well as get their user id and a bunch of other stuff for now we'll just get the username and check if they're signed in but just keep in mind you can use the class for a lot more so inside of here we want to do the following we're going to say let and then this is going to be passage user and just empty parentheses like this dot get user like that or not get user that's going to be user info like that and then this will be a promise we're going to say dot then we're going to say user info and then inside of here we'll process the user info now first i'm just going to make a variable here say const cancel request is equal to false okay and inside of here we want to handle this data so i'm going to say if we have cancelled the request by the time that this promise is occurring then let's just return or this is resolving sorry otherwise though we're going to check if we have some user data so we're going to say if user info is equal to undefined then that means that we are not signed in so if it's equal to undefined then what we want to do is say set result and the result that we want to set is actually going to be this except is loading is going to be false so here make that false okay so if we have no user info that means no user is currently signed in and so we set the result say okay we're no longer loading you are not authorized and you don't have a username otherwise though so let's make sure we return here then what we'll do is say set result in a similar way we're going to now set the result but we're going to say true this is going to be false and then we're going to grab the user's information so let me uh why is this okay so let me now grab the username so the way i do that is i say user info dot username but the thing is users can sign up with their username or phone number show that to you in a second so i'm going to check if it has a username if it does i'll use the username otherwise i will use the phone and sorry is it username or is it email i think it's email so let's change that to email yes it is indeed you know okay so we'll go through this hook in a second i think it's fairly straightforward but let me just show you something here if you go to passage and you go to authentication you can change this so that you can have email or phone number only email or only phone so that's what i'm talking about and why we're checking for a phone number anyways that's that a few more things we need to do here is inside of the use effect so i think these effect ends right here let's add our square brackets let's also have a return and then a clean up operation and for the cleanup operation here what we're going to do is cancel request is equal to trip okay and then lastly here we're going to return whatever the result is here that is stored inside of our state from the hook so now use this hook inside of any component and you can check if the user is authorized all right so let's close the hook now let's go to profile and let's use the hook so i'm going to say import use current like this user from and then it's going to be dot dot slash component slash and then use current user believe are not components sorry it's going to be hooks okay now that we have that let's use the hook so i'm going to say const we have three pieces of information that we want we want to get the is loading the is authorized and then the username and this will be equal to and then the use current user okay now that we have that what i can do is the following i can say well if we are loading so if is loading then just return null because we don't want to show anything if we're loading then we're going to say well if you're not authorized so if not is authorized then let's just return something that says hey you need to sign in to view this page so let's go with a p tag which is very basic let's say you must sign in to view this page exclamation point and then we can just make this a link so let's change this to login and let's import a link here so let's say import link from react router dom okay and then this will be link spelt correctly let's place login inside of here and then let's say this is going to and then just slash because that's our login page okay so that's what happens if we're not authorized otherwise let's just say you are signed in as and let's do a strong tag and let's put username inside of there my autocomplete knows exactly what i want okay uh let's end the p tag and looks like we are good for now for the profile page so hopefully what will happen now is if we go to the profile page and we are not signed in it will show us hey you must sign in you are unauthorized but if we are signed in then it will just show us whatever our username is so let's test this out now uh compiled with one error what is the error it says hooks i use current user does not exist all right the issue is that i called this hook instead of hooks so let's rename that directory and now i think we should be good and awesome okay uh oh so sorry this is const i need to just change this to be let because we actually changed that variable so let's change that okay now that we've done that let's go here and let's refresh okay and what's the problem now okay it says you are signed in as tech with tim gmail.com now the reason it's showing me that is because my signin data is stored in a session or at least the fact that i'm signed in is stored in a session now if you want to change when that expires you can go here to session management and change this to say like 5 minutes instead of 60 minutes so then every five minutes you would have to sign in again in this case that's fine but there you go you can see that it's showing me my data and again we're getting that from the hook that i created so now let's go back to login let's go back to slash okay and everything seems to be working nice so there we go that is all functioning the profile page is working and really that's all you need for frontend authentication right if you want to check if someone's authenticated then you can just look at the is authorized right here then render something or not render something now there's a few other ways that you can handle this again i'm not showing you everything here but now what i want to do is build out the back end and show you how we send an authenticated request to a flask back end so if you want to create maybe an api or you maybe want to do what i'm doing sending an authenticated request and make sure the user is signed in before they get access to say user data then you can do that so this will be a little bit less time consuming but will still take us a few minutes let's make a new terminal here so let's go here for a new one and let's make a new directory here and let's call this backend and we're going to start setting up a flask project okay so we need to install a few things here with pip let me just throw them up on the screen you guys can pause and install them one by one if you want we need passage identity greater than or equal to 1.2.3 flask request and then python.env now all of these will be available from the link in description so all the code i write will be on github so you guys can just grab this requirements.txt file and install it directly or copy line by line if you want i want to install this you type pip install and then you know name of requirement here i won't go through because i already have them installed if pip doesn't work for you try pip 3 and if that doesn't work for you try python 3 hyphen m and then pip install name requirement or you can try python hyphen m pip install one of those hopefully should work for you for installing those modules anyways i'm assuming you have those installed at this point now we're going to go inside a back end i'm going to create another directory here called app and i'm going to start coding a few things out so inside of back end i'm going to create a dot env file and inside of here we need to have a few pieces of data for our what do you call a passage app so the first thing we want is the app id which i can just grab from right here so let's just paste that in here we're going to call it passage app id and then we also want to get the passage api token which is something that we need to create so let me just see what i called this variable here i think it's just passage underscore api underscore key and that's going to be equal to and then we're going to have to grab that from the console so to do that let's go here to our dashboard let's go to api keys it's fine we don't need to save that and let's create a new api key here i'll just give its name first let's copy the key make sure you copy it now you can't view it after and i'm going to paste it here now of course you don't want to share this with people i'm just showing you because after this video is gone i'm going to delete this application okay so we have our dot env file next what we're going to do is make a new file here called run dot py now inside of run.py we'll write some code that will run our flask app but before we can do that we need to create our flask app so inside of app i'm going to make a folder called init.pi or not a folder sorry a file called init.pi i'm going to make another folder here or another another file called main.pi and i think that's all i need yeah that looks good to me okay so inside of a nit.pi we're going to set up our flask app so i'm going to say from flask import and then that's going to be flask and then i'm going to say define create underscore app this will be a function that we call to make an app i'm going to say app is equal to flask we need to pass underscore underscore name underscore underscore and then i'm going to import something from my main file that we've yet to create i'm going to say from dot main import auth as and then this will be auth underscore blueprint we're going to use flask blueprints just a way to separate out our application and i'm going to say app dot register underscore blueprint and i'm going to pass the auth underscore blueprint uh my autocomplete did not want to help me there okay then we're going to return the app nice so i understand this might be confusing because we haven't yet code out this file but you'll see very quickly why we're doing that inside of our main.pi file now we're going to say from flask import we're going to import request we're going to import blueprint we're going to import something called g and we're going to import actually i think that's all uh one more we need jsonify okay then we're going to import os and we're going to import something from passage so we're going to say from passage and then identity i believe is what it's called we're going to import passage as well as passage error now i'll go through all this in a second i just need to get our imports down we're now going to create our blueprint so i'm going to say auth is equal to and this is going to be a blueprint and it will be called off and it will have name so just to slow down here we did our different imports so we need create our auth blueprint if we go to init.pi that's exactly what we're importing here right and then registering that as a blueprint so now we can write views inside of this file okay now we're going to go to run.pi and do a few things in run.pi this is going to be the entry point of our flask app i'm going to say import app or from app which is the name of this directory we're going to say import and then create underscore app this is how we're going to create our flask application i'm going to say from env import and this is going to be load.env and find.env now this is how we're going to load this dot env file that you can see so we get the environment variables you should have installed this as python.env before we started here and i'm going to say load.env and i'm going to put find.env and this will load that environment variable file for us i'm going to make my flask app and say flask app is equal to create app and i'm going to say if underscore underscore name underscore underscore is equal to main then flask app dot run and we'll run this in debug equals true mode now if you want to change the port of the host you can do that i don't care i'll just leave it the same okay so we have run we have a nit.pi now all we have to do is code out main.pi so what we can do here is we can write kind of a standard view and then we can have a passage authenticate all of the requests to the views or to the endpoints that we set up so let's handle kind of the passage middleware that's what you could call it here and then once that's done all of the requests that we send to anything decorated with this auth decorator will be authenticated automatically by passage so the first thing we're going to do is say passage underscore api underscore key is equal to os don viron.get passage api key and then we want the app id so the passage let's just go app underscore id is equal to passage app underscore id and let's space those out and just verify that we name these correctly wrong env file passage api key passage app id okay it looks good so now that we have our environment variables we're going to have a try except so i'm going to say try and psg standing for passage is going to be equal to passage like that and i'm going to initialize this with the app id and the api key and then i think that is fine for now okay so now that we've initialized passage we're going to accept a and then this is going to be a passage exception or passage error as e and i'm just going to print out whatever e is and then i'm going to exit meaning we're just going to quit the application if for some reason we could not load passage and we'll just print out the air first okay now we're going to set up kind of the middleware here we've connected to passage assuming that our information is correct i'm going to say auth.before request now if you haven't seen this before in flask this is a decorator you can use that will run a function before all of your requests so you can do stuff like authentication so here i'm going to say define before request we don't need to take in a request and what we're going to do is try to authenticate the request using passage and if we can't do that then we're going to return some json that says you are unauthorized you cannot view this page or you cannot view this root whatever so i'm going to say try and this is going to be g.user is equal to psg dot and then it's going to be authenticate and then request like that and we're gonna pass in the request object that we imported right here okay and i'm gonna say accept and we can accept a passage error again all right not pass not password reset error this is passage error as e and then what we're going to do is return jsonify and then we can return the error and we can return e or we can return our own custom message in this case we'll just return e okay so this is going to run before every single request to any of our authentication endpoints so now lastly we can do something like dot auth or auth dot and then whatever we want this root to be so we'll say root and this could be like slash get user info okay and the methods we'll accept here will just be get and i'm going to say define and we'll go get user info and now inside of here we can get the current user by doing the following let's say psg underscore user is equal to and then it's going to be psg.getuser and we're going to say g.user okay and then i can say identifier is equal to an empty string and we're almost done here don't worry i know i've gone through a lot i'm going to say if psg underscore user dot email so if they signed in with their email essentially then we're going to say the identifier is equal to psg.email l if and then this will be psg user dot and this will be phone so if they signed in with their phone number instead then the identifier will be psg.phone and then lastly we can return jsonify identifier identifier and just tell uh you know what the identifier is for the current user that's signed in just a test route again there's a lot more stuff you can do here with the user and more information that you can get okay i know i just went through a lot quick recap here we get the information from our environment variables we then set up the passage object okay if there's an error then we're going to exit and print it out we set up our authentication middleware if you want to call it that this is going to happen before all of the requests so we're going to try to get the current user by authenticating the requests using authenticate request from passage if we were able to do that we'll store it in g and then if we can't we're going to return whatever the error was because the user is unauthorized then we set up this needs to be a root not router the get user info root now here we're going to get the user find their identifier and then simply return it to whoever called this okay there you go that is all we need for our back end so let's now run this let's go python we need to cd into backend so cd into backend and then python run.pi fingers crossed everything will work and there we go okay so it is now running so let's go ngrok split terminal okay that's all working let's go here and refresh and now what we need to do is we need to send a request to the backend and then get that information so to do that we're going to go to our package.json we're going to add something in here called proxy and what this allows us to do is proxy a request to a backend so for the url that we want here we're going to say http localhost colon and then it's going to be port 5000 that's the port that we're running flask on so now any request that's not handled by a frontend will be proxied to this url right here our back end and then we'll be able to get the result so now if i do something like go to profile let's make a function that's going to send a request to the back end so i'm going to say function and then this will be you know send request okay and what we can do is say fetch we can fetch slash get user info i know we already have the info but we're just doing a test here right and then i can say dot and then then okay and we can say response and say res.json okay and then dot then we can get our data and we can say data like that and we can just print it out and have a look at it for now so console.log and then data and then let's just add a button that will allow us to actually do that so let's add a button i guess we'll make this a div now or actually that could be a p and then this will be a div okay let's go button and inside of here we'll just say send quest to backend and this will be on click equal to send request all right let's try this now so let's go here let's refresh let's go to our profile we are signed in let's send a request to the back end let's look in the console and it says uncaught token expected json okay let me have a quick look here and i'll be right back all right so i actually just loaded the application here again after that error was occurring and i got this invalid host header so what i did was i just reran the npm command just because i thought it wasn't actually reading the proxy and then i got this issue now the fix to this issue is a little bit weird but essentially since we're using ngrok we're getting kind of this weird host error where it's not allowing us to connect to the react app so what i need to do is add something here in my environment variable file for the react application not for for the back end now this is a kind of a hilarious thing that i have to add but i'm just going to paste it in here it's dangerously disable host check so obviously you don't want to do this in production but for now this is fine and it just disables checking the host so that hopefully now we're not going to get this error now i need to reload this so we reload the environment variable so let's do that and then when i go back here hopefully all should be good okay so everything is working fine now so let's go back to slash profile and let's try to send a request to the back end and then notice i get my identifier here as tech with tim right so that's pretty much all i need to show you now i will quickly mention kind of how this is working a little bit more on the back end so if we go to our flask application which is running here and let's just have a look at flasks let's go to maine.pi uh really what this actually does when when you add this kind of middleware section here and you're authenticating the request is it looks for a cookie or it looks for a header that contains a jwt token which is kind of your authentication token now that will automatically be proxied to the back end based on the way that we've done this we don't have to manually send it but what happens is when you sign in here so let's just go back to log in there's a cookie and there's like a token that's stored in local storage and that's kind of like your session data right that's telling passage that you're signed in you're authenticated and that's how use current user here is able to get your data by using the token that's stored in local storage in the session data whatever so if you want to manually access that data what you can do is the following so let's go to profile here and let's just print it out i guess i can just print it out like actually where would it make sense to show it maybe i could show it here so let's just put it in a p tag and i can do something like local storage and then dog get item and i believe the name of this is gonna be passage off token or something along those lines i might be wrong but let's see if that's what it is so let's go to slash profile okay and there you go so it's going to show the token so obviously you don't want to show this token to people but this token is being sent automatically to the back end and that's how it's authenticating us if you don't have this token or if i like change the token then it's not going to work and you'll see that we won't be able to access that page sorry for the abrupt cut there my cat was going crazy had to take her out of the room anyways point is uh you have this in local storage you also have this stored in a cookie and that data is going to be forwarded again to the back end that's how it's authenticated so i just want to show you can get access to that manually if you're sending you know you want to send it as a header or however you're going to you know verify it or check it just wanted to mention that so you have that information with that said i think i'm going to wrap up the video here it's a little bit longer than i was expecting it to be but obviously want to build up kind of an entire project and show you how we set up everything from the back end to the front end and link them together but when you really look at what's going on for the authentication here again it's only a few lines of code like if we go to login here we go we have you know you could call this one line of code three lines of code whatever we have an app id and then we wrote this hook which you know is more complicated than it needs to be it's good it's flexible you can use in your app but really all you need is this passageuser.userinfo.then grab the info look and see if you have it undefined or not grab the email grab the phone number there's some other data you can get to and there you go you have pretty much everything that you need for user authentication all of your users users will be stored by passage you can go and have a look at the dashboard you can change the emails you can change the form you can customize as you please you can link this with a database that you have in your application for storing user data all kinds of stuff you can do with passage so that said i will end it here thanks again to passage for sponsoring this video if you guys enjoyed make sure to leave a like subscribe to the channel and i will see you in another one
