With timestamps:

00:00 - hello everybody and welcome back to only
00:01 - flash tutorial so in this video we're
00:03 - gonna be talking about blueprints which
00:05 - essentially allows us allows us to
00:07 - divide up our application into separate
00:10 - Python files where we can actually pass
00:12 - specific views and render templates from
00:15 - different areas of our kind of project
00:17 - our application now this is really nice
00:19 - because sometimes you might create let's
00:21 - say maybe like an admin page or specific
00:23 - login script or something that you could
00:26 - reuse in different applications well
00:28 - with our previous knowledge we would
00:29 - have had to put all of that in the same
00:31 - Python file which would make it much
00:32 - more difficult to reuse those different
00:34 - components in new flask applications so
00:37 - here I'm gonna show you how we can
00:39 - divide things up with blueprints how we
00:40 - can create kind of our own little mini
00:42 - apps inside of the big web application
00:44 - and then how we kind of reference those
00:46 - and use those properly shouldn't take
00:48 - too long
00:48 - but let's go ahead and get started now
00:50 - the first thing I'm gonna do is create a
00:52 - new Python file which is gonna be our
00:54 - blueprint now the blueprints are kind of
00:56 - just extensions to your app so you're
00:58 - gonna think of this main file that we
00:59 - have and I've just kind of modified this
01:01 - a little bit from last time and I'm sure
01:02 - you guys understand what's going on here
01:04 - as like the driver for our application
01:06 - this is kind of what sets all the
01:08 - blueprints up it's the first thing that
01:10 - we go to and this is gonna define kind
01:12 - of the behavior and those blueprints are
01:14 - kind of little extensions that can be
01:15 - used from this file so what I'm gonna do
01:17 - is go file new file to keep this simple
01:20 - I'm going to save this directly in the
01:21 - same directory as my main dot PI file
01:23 - I'm gonna call it second PI and what
01:26 - we're gonna do is just import a few
01:28 - things at the top here so from flask
01:30 - import blueprint and import render
01:33 - template now what I'm gonna do is set up
01:36 - this as a blueprint so the way that I do
01:38 - that is I'm gonna create a variable in
01:40 - this case I'm gonna call it second but
01:41 - you can call this variable whatever you
01:42 - want so long as you know the name of it
01:44 - and I'm gonna say is equal to blueprint
01:46 - now in here I'm gonna set the name of my
01:49 - blueprint which I recommend is the same
01:51 - as the file name and as this variable
01:54 - but doesn't have to be and then our
01:56 - import name is always going to be under
01:58 - Stratus core name pretty much like
02:00 - unless you're doing some advanced uses
02:01 - you're always just going to do this
02:02 - which represents the name of this file
02:04 - it's a special Python variable now the
02:06 - next thing that we need to define and
02:08 - this is optional but you usually will
02:10 - want to define it is the path
02:12 - your static folder and your template
02:14 - folder now the reason you do this is
02:16 - because technically you could have a
02:18 - different folder that stores the
02:19 - templates for these views and this is
02:22 - gonna have whatever functions we define
02:24 - here maybe they want to use templates
02:25 - with the same name but that look a
02:28 - little bit different so in that case
02:29 - maybe we create a new template folder we
02:31 - create a new based on HTML file and from
02:34 - this template or from this blueprint
02:35 - we're gonna render those templates now
02:38 - in this case what I want to do is just
02:39 - reference the original template and
02:41 - static folder that we have so to do that
02:42 - I'm gonna say static under square root
02:45 - folder equals static like that and I'm
02:49 - gonna say template underscore folder
02:51 - equals templates if I could spell that
02:56 - correctly okay so that's as easy as it
02:58 - is and again you can change the name
03:00 - those to be whatever you want and what
03:02 - is this black box I'm gonna try to get
03:03 - rid of this and be right back okay so I
03:05 - don't know what that was but anyways now
03:07 - that we've done this um everything's
03:09 - kind of the same as what we've done
03:10 - before there's no need to run like app
03:12 - dot Ron do this if name equals main
03:14 - because we're not gonna be running the
03:15 - application from this file we're only
03:17 - gonna run it from here and then we'll
03:18 - just use some code from here so what we
03:20 - can do is just set up our routes and set
03:22 - up our functions like we would before so
03:24 - what I'm gonna do is rather than using a
03:26 - hat app this time I'm gonna say at
03:28 - second dot root and then I can set these
03:31 - root to be whatever I want so let's
03:32 - start by just doing slash home and let's
03:34 - actually set another root and let's just
03:36 - make it equal to slash as well now we'll
03:39 - just make this really basic we'll say
03:40 - define home render underscore template
03:43 - and then we have that home dot HTML
03:45 - template since we've referenced this
03:46 - templates folder up here we have home
03:49 - dot HTML we can render that and then
03:51 - we'll see this image popping up I'll
03:52 - just get rid of that h1 tag for now ok
03:55 - awesome so now that we have that what
03:57 - we're gonna do is actually set up this
03:58 - blueprint from our main flask
04:00 - application set we actually use it
04:02 - properly now what we need to do when we
04:05 - start doing this is just import the
04:06 - actual Python file that holds this
04:09 - blueprint so second is the blueprint we
04:11 - need to import that file so I'm gonna
04:12 - say from second import second now if you
04:17 - named your variable something else so
04:19 - maybe you named it second one like that
04:21 - then you would have to change this to
04:22 - second one there because that's actually
04:24 - what you
04:25 - want to import in what you want to use
04:26 - okay so that's pretty much all we really
04:29 - need to do now we're just gonna say app
04:30 - dot register blueprint we're gonna type
04:33 - the name blur blueprint which is second
04:35 - then we're gonna set an optional URL
04:37 - prefix I'm gonna set it equal to blank
04:39 - for now and we'll get back to this in a
04:41 - second and talk about what that is this
04:42 - is as easy as it is with any other
04:44 - blueprints you have if they're in the
04:45 - same directory you just go from third
04:47 - import third from fourth import fourth
04:49 - and obviously you can name them whatever
04:50 - you want just do those import register
04:53 - the blueprint as whatever it is and then
04:55 - whenever you go to /home it'll just find
04:57 - it in this blueprint and you'll be
04:59 - you'll go there and we'll talk about how
05:01 - this works in a second so notice first
05:03 - of all before I run this that I have
05:04 - this app dot root a slash so test is
05:07 - slash and it's gonna render h1 test now
05:11 - but here I have slash as well so what
05:14 - does that actually mean when I type
05:16 - slash am I gonna go to test or am I
05:18 - gonna go to the home page well that's
05:20 - what we're gonna test right now but take
05:22 - your guess and you know why you think
05:23 - we're gonna go there so let's run Python
05:25 - main dot pie let's get our web browser
05:28 - up here I'm just gonna go this was
05:30 - already up before so let's go slash hit
05:32 - enter and whoa and we get an error and
05:35 - that is because I forgot to return from
05:38 - here so let's make sure that we returned
05:40 - that let's refresh this page or it
05:42 - actually already refreshed for us and
05:45 - give me a second there we go so notice
05:47 - that when I go to slash and I apologize
05:49 - about that that I go directly to the
05:52 - home page I don't actually go to that
05:54 - test page that was here the reason this
05:57 - is is because essentially whenever we
05:59 - register a blueprint we look at this URL
06:01 - prefix which in this case is blank which
06:03 - means any URL we pass it to the
06:05 - blueprint so into here and we see if
06:07 - anything matches so we say in this case
06:09 - we type slash we go to this blueprint we
06:11 - see that slash matches so we immediately
06:13 - return and render this home HTML now if
06:16 - slash didn't exist in here so if we get
06:18 - rid of that and we run this again
06:21 - so let's go here now if click enter on
06:25 - this you see we get directed to test and
06:27 - that's because we didn't have that slash
06:29 - root in this specific file so since it
06:32 - didn't find it in there we went to here
06:33 - now how can I make it so that we can
06:36 - actually reference slash here but we can
06:38 - also reference
06:39 - the /root over here maybe using a little
06:41 - bit of a different URL well this is
06:43 - where things get a little bit
06:44 - interesting and this is where we can do
06:46 - the URL prefix so essentially the URL
06:48 - prefix is what needs to come first for
06:51 - us to send something to that blueprint
06:53 - so let's say this blueprint represented
06:55 - all of the admin functionality of our
06:57 - website in this case our URL prefix
06:59 - would be admin and I guess we can do
07:01 - admin slash like that or slash admin and
07:04 - if we see slash admin what we'll do is
07:08 - we'll actually pass the rest of the URL
07:10 - to this second dot PI file and then go
07:14 - to this view based on that so in this
07:16 - case what's gonna happen is if we type
07:17 - slash admin and we don't type anything
07:20 - else what we'll get is just go to this
07:22 - slash page here because the like kind of
07:24 - extension actor slash admin it was
07:26 - nothing so we're gonna return home and
07:28 - then if we go to slash admin slash home
07:31 - will reference home here and we'll go to
07:33 - that page now to make this a bit more
07:35 - clear I'm just gonna say define test and
07:37 - we'll add a root here so at second root
07:42 - let's just make this test so that you
07:43 - guys understand how this works and under
07:45 - street return in this case we'll return
07:48 - some h1 tags and just say tests like
07:51 - that okay so let's run this again and
07:53 - let me kind of show you an example so
07:54 - this makes a bit more sense so why do we
07:56 - run this by default now we go to test
07:58 - that is because again if we look here we
08:00 - have slash that's gonna go to test and
08:02 - we only go to this blueprint if we see
08:04 - slash admin so now watch what happens
08:07 - I type slash admin you see that we
08:09 - rendered this home page now why did that
08:11 - work well we have URL prefix of admin so
08:14 - what we do is we pass whatever comes
08:16 - after slash admin so if we add like
08:17 - slash admin slash like that's what came
08:20 - after it so we passed that here we see
08:23 - that we have a slash so we render the
08:25 - home template now let's do a few more
08:27 - tests I guess I'm gonna have to actually
08:29 - get rid of whatever I wrote here so this
08:31 - doesn't crash it so let's do that and
08:34 - let's go to slash pad min slash test and
08:37 - notice when we do that we get this test
08:39 - because again we took that slash test
08:41 - after admin rendered the view this is
08:44 - very useful this makes it a lot cleaner
08:46 - so you don't the type slash admin slash
08:47 - home slash whatever in all of these
08:49 - blueprints and that is kind of
08:51 - how that works so now I'm going to show
08:53 - you how we can do this in a bit more
08:54 - advanced way with different template
08:56 - folder and different static folders
08:57 - inside of kind of different directories
08:59 - and then we'll be done talking about
09:00 - blueprints all right so now I'm going to
09:02 - show you kind of a more advanced part of
09:03 - templates where what we can actually do
09:05 - is have a better structure in here where
09:07 - we kind of have mini apps inside of our
09:09 - main app so to do this I just want to
09:11 - quickly mention that I actually found
09:12 - this webpage you guys might have seen me
09:14 - pop it up before that explains this
09:17 - really well kind of how this project
09:18 - structure works so I'll leave a link to
09:20 - this is kind of the way that I figured
09:22 - out how all of this work so I figured
09:23 - I'd give them a little bit of credit and
09:24 - put it in the description so anyways you
09:27 - guys can have a look at that it explains
09:28 - it really well but I'm gonna go through
09:29 - kind of an example here because if the
09:31 - web page doesn't really go through
09:32 - examples it kind of just explains it on
09:34 - how we do this
09:35 - so what I actually want to do is put my
09:38 - second dot pipe file in its own folder
09:40 - and it has its own static images and its
09:43 - own templates because realistically if
09:46 - we can do that then that means we can
09:47 - just take that folder and we can just
09:49 - put that into any flask application and
09:51 - just use that as kind of like a little
09:53 - component of the app so for example you
09:55 - know logging in had been all that kind
09:57 - of stuff is some basic examples of what
09:59 - when we might use that so I'm going to
10:00 - start by just creating a new folder in
10:02 - here and let's just start by calling
10:04 - this I don't know admin so it has some
10:07 - admin functionality for our application
10:09 - now what I'm gonna do is move this
10:11 - templates folder move this static folder
10:13 - and move the second up high file into
10:15 - admin so to do that this actually might
10:18 - take me a second I think I can move this
10:20 - okay so we'll say admin slash perfect
10:25 - that move that what the same one here so
10:28 - admin oops slash and then we'll move
10:32 - this second up high so last one admin /
10:36 - awesome so we move those in here into
10:38 - this admin folder and we have this maned
10:40 - up high file so now how can I actually
10:43 - import the second file and have the
10:45 - blueprint work properly like you did
10:47 - before well all we actually need to do
10:49 - is add one file inside of our admin
10:52 - folder to create this as a Python
10:54 - package now I'm not gonna explain how
10:56 - this works because it's kind of a whole
10:58 - new topic on its own but essentially
11:00 - creating an underscore underscore and
11:01 - knit underscore underscore dot pi file
11:04 - just saving it and not putting anything
11:06 - in it inside of a folder will actually
11:08 - make that folder a Python package and
11:11 - what that allows you to do is reference
11:13 - the folder name to import modules from
11:15 - it now this might seem a bit confusing
11:16 - but from my main dot pi file now I can't
11:19 - just import second because the thing is
11:21 - there's no second file in the same
11:23 - directory as this main dump I file so
11:26 - how do I actually import that file it's
11:28 - inside admin well to do that all you do
11:30 - is admin dot second import second and we
11:32 - don't have to change anything this is
11:34 - just gonna work properly now now the
11:36 - reason this works is because when you
11:38 - create a Python package with this init
11:40 - PI it allows you to reference the folder
11:42 - name and then that other folder but if
11:44 - we didn't add this an it to up hi in
11:45 - there we'd be out of luck this wouldn't
11:47 - work because we couldn't reference admin
11:49 - dot second so anyways to prove you guys
11:50 - are not making this up I'll just
11:52 - actually run the app again so you see my
11:54 - go-to slash admin that works fine when I
11:57 - go to slash admin test
11:59 - same thing and then we can go back to
12:00 - the home page and we just get the big
12:02 - upper case test so that works properly
12:04 - that's how you do that then inside here
12:07 - now we have our own static and our own
12:09 - template folder and if I wanted to
12:11 - create a new kind of like mini app that
12:14 - had its own blueprint again well I can
12:16 - just create another new folder in this
12:17 - case we'll just call this like I don't
12:19 - know other and then inside here what I
12:22 - can do is the exact same thing I did
12:23 - here so I can create another file
12:25 - another nipped up hi templates static
12:28 - just mention again like we have in
12:30 - second that our static folder is static
12:32 - our template folders template it will
12:34 - use the ones that are inside this
12:36 - interior directory so inside other and
12:38 - then we can have different kind of
12:40 - templates and different static files for
12:41 - that so that is how blueprints work you
12:45 - can use as many blueprints as you want
12:46 - all you need to do is just register them
12:48 - here and set their URL prefix and that's
12:51 - pretty much all there is to it so with
12:53 - that being said that has been it for
12:54 - blueprints this will probably the last
12:56 - technical video and we're actually gonna
12:58 - do a deploy next I think and show how we
13:00 - can get this flask application out onto
13:02 - the web so that anyone can access it but
13:04 - with that being said if you guys enjoyed
13:05 - make sure leave a like and I will see
13:07 - you guys in another video

Cleaned transcript:

hello everybody and welcome back to only flash tutorial so in this video we're gonna be talking about blueprints which essentially allows us allows us to divide up our application into separate Python files where we can actually pass specific views and render templates from different areas of our kind of project our application now this is really nice because sometimes you might create let's say maybe like an admin page or specific login script or something that you could reuse in different applications well with our previous knowledge we would have had to put all of that in the same Python file which would make it much more difficult to reuse those different components in new flask applications so here I'm gonna show you how we can divide things up with blueprints how we can create kind of our own little mini apps inside of the big web application and then how we kind of reference those and use those properly shouldn't take too long but let's go ahead and get started now the first thing I'm gonna do is create a new Python file which is gonna be our blueprint now the blueprints are kind of just extensions to your app so you're gonna think of this main file that we have and I've just kind of modified this a little bit from last time and I'm sure you guys understand what's going on here as like the driver for our application this is kind of what sets all the blueprints up it's the first thing that we go to and this is gonna define kind of the behavior and those blueprints are kind of little extensions that can be used from this file so what I'm gonna do is go file new file to keep this simple I'm going to save this directly in the same directory as my main dot PI file I'm gonna call it second PI and what we're gonna do is just import a few things at the top here so from flask import blueprint and import render template now what I'm gonna do is set up this as a blueprint so the way that I do that is I'm gonna create a variable in this case I'm gonna call it second but you can call this variable whatever you want so long as you know the name of it and I'm gonna say is equal to blueprint now in here I'm gonna set the name of my blueprint which I recommend is the same as the file name and as this variable but doesn't have to be and then our import name is always going to be under Stratus core name pretty much like unless you're doing some advanced uses you're always just going to do this which represents the name of this file it's a special Python variable now the next thing that we need to define and this is optional but you usually will want to define it is the path your static folder and your template folder now the reason you do this is because technically you could have a different folder that stores the templates for these views and this is gonna have whatever functions we define here maybe they want to use templates with the same name but that look a little bit different so in that case maybe we create a new template folder we create a new based on HTML file and from this template or from this blueprint we're gonna render those templates now in this case what I want to do is just reference the original template and static folder that we have so to do that I'm gonna say static under square root folder equals static like that and I'm gonna say template underscore folder equals templates if I could spell that correctly okay so that's as easy as it is and again you can change the name those to be whatever you want and what is this black box I'm gonna try to get rid of this and be right back okay so I don't know what that was but anyways now that we've done this um everything's kind of the same as what we've done before there's no need to run like app dot Ron do this if name equals main because we're not gonna be running the application from this file we're only gonna run it from here and then we'll just use some code from here so what we can do is just set up our routes and set up our functions like we would before so what I'm gonna do is rather than using a hat app this time I'm gonna say at second dot root and then I can set these root to be whatever I want so let's start by just doing slash home and let's actually set another root and let's just make it equal to slash as well now we'll just make this really basic we'll say define home render underscore template and then we have that home dot HTML template since we've referenced this templates folder up here we have home dot HTML we can render that and then we'll see this image popping up I'll just get rid of that h1 tag for now ok awesome so now that we have that what we're gonna do is actually set up this blueprint from our main flask application set we actually use it properly now what we need to do when we start doing this is just import the actual Python file that holds this blueprint so second is the blueprint we need to import that file so I'm gonna say from second import second now if you named your variable something else so maybe you named it second one like that then you would have to change this to second one there because that's actually what you want to import in what you want to use okay so that's pretty much all we really need to do now we're just gonna say app dot register blueprint we're gonna type the name blur blueprint which is second then we're gonna set an optional URL prefix I'm gonna set it equal to blank for now and we'll get back to this in a second and talk about what that is this is as easy as it is with any other blueprints you have if they're in the same directory you just go from third import third from fourth import fourth and obviously you can name them whatever you want just do those import register the blueprint as whatever it is and then whenever you go to /home it'll just find it in this blueprint and you'll be you'll go there and we'll talk about how this works in a second so notice first of all before I run this that I have this app dot root a slash so test is slash and it's gonna render h1 test now but here I have slash as well so what does that actually mean when I type slash am I gonna go to test or am I gonna go to the home page well that's what we're gonna test right now but take your guess and you know why you think we're gonna go there so let's run Python main dot pie let's get our web browser up here I'm just gonna go this was already up before so let's go slash hit enter and whoa and we get an error and that is because I forgot to return from here so let's make sure that we returned that let's refresh this page or it actually already refreshed for us and give me a second there we go so notice that when I go to slash and I apologize about that that I go directly to the home page I don't actually go to that test page that was here the reason this is is because essentially whenever we register a blueprint we look at this URL prefix which in this case is blank which means any URL we pass it to the blueprint so into here and we see if anything matches so we say in this case we type slash we go to this blueprint we see that slash matches so we immediately return and render this home HTML now if slash didn't exist in here so if we get rid of that and we run this again so let's go here now if click enter on this you see we get directed to test and that's because we didn't have that slash root in this specific file so since it didn't find it in there we went to here now how can I make it so that we can actually reference slash here but we can also reference the /root over here maybe using a little bit of a different URL well this is where things get a little bit interesting and this is where we can do the URL prefix so essentially the URL prefix is what needs to come first for us to send something to that blueprint so let's say this blueprint represented all of the admin functionality of our website in this case our URL prefix would be admin and I guess we can do admin slash like that or slash admin and if we see slash admin what we'll do is we'll actually pass the rest of the URL to this second dot PI file and then go to this view based on that so in this case what's gonna happen is if we type slash admin and we don't type anything else what we'll get is just go to this slash page here because the like kind of extension actor slash admin it was nothing so we're gonna return home and then if we go to slash admin slash home will reference home here and we'll go to that page now to make this a bit more clear I'm just gonna say define test and we'll add a root here so at second root let's just make this test so that you guys understand how this works and under street return in this case we'll return some h1 tags and just say tests like that okay so let's run this again and let me kind of show you an example so this makes a bit more sense so why do we run this by default now we go to test that is because again if we look here we have slash that's gonna go to test and we only go to this blueprint if we see slash admin so now watch what happens I type slash admin you see that we rendered this home page now why did that work well we have URL prefix of admin so what we do is we pass whatever comes after slash admin so if we add like slash admin slash like that's what came after it so we passed that here we see that we have a slash so we render the home template now let's do a few more tests I guess I'm gonna have to actually get rid of whatever I wrote here so this doesn't crash it so let's do that and let's go to slash pad min slash test and notice when we do that we get this test because again we took that slash test after admin rendered the view this is very useful this makes it a lot cleaner so you don't the type slash admin slash home slash whatever in all of these blueprints and that is kind of how that works so now I'm going to show you how we can do this in a bit more advanced way with different template folder and different static folders inside of kind of different directories and then we'll be done talking about blueprints all right so now I'm going to show you kind of a more advanced part of templates where what we can actually do is have a better structure in here where we kind of have mini apps inside of our main app so to do this I just want to quickly mention that I actually found this webpage you guys might have seen me pop it up before that explains this really well kind of how this project structure works so I'll leave a link to this is kind of the way that I figured out how all of this work so I figured I'd give them a little bit of credit and put it in the description so anyways you guys can have a look at that it explains it really well but I'm gonna go through kind of an example here because if the web page doesn't really go through examples it kind of just explains it on how we do this so what I actually want to do is put my second dot pipe file in its own folder and it has its own static images and its own templates because realistically if we can do that then that means we can just take that folder and we can just put that into any flask application and just use that as kind of like a little component of the app so for example you know logging in had been all that kind of stuff is some basic examples of what when we might use that so I'm going to start by just creating a new folder in here and let's just start by calling this I don't know admin so it has some admin functionality for our application now what I'm gonna do is move this templates folder move this static folder and move the second up high file into admin so to do that this actually might take me a second I think I can move this okay so we'll say admin slash perfect that move that what the same one here so admin oops slash and then we'll move this second up high so last one admin / awesome so we move those in here into this admin folder and we have this maned up high file so now how can I actually import the second file and have the blueprint work properly like you did before well all we actually need to do is add one file inside of our admin folder to create this as a Python package now I'm not gonna explain how this works because it's kind of a whole new topic on its own but essentially creating an underscore underscore and knit underscore underscore dot pi file just saving it and not putting anything in it inside of a folder will actually make that folder a Python package and what that allows you to do is reference the folder name to import modules from it now this might seem a bit confusing but from my main dot pi file now I can't just import second because the thing is there's no second file in the same directory as this main dump I file so how do I actually import that file it's inside admin well to do that all you do is admin dot second import second and we don't have to change anything this is just gonna work properly now now the reason this works is because when you create a Python package with this init PI it allows you to reference the folder name and then that other folder but if we didn't add this an it to up hi in there we'd be out of luck this wouldn't work because we couldn't reference admin dot second so anyways to prove you guys are not making this up I'll just actually run the app again so you see my goto slash admin that works fine when I go to slash admin test same thing and then we can go back to the home page and we just get the big upper case test so that works properly that's how you do that then inside here now we have our own static and our own template folder and if I wanted to create a new kind of like mini app that had its own blueprint again well I can just create another new folder in this case we'll just call this like I don't know other and then inside here what I can do is the exact same thing I did here so I can create another file another nipped up hi templates static just mention again like we have in second that our static folder is static our template folders template it will use the ones that are inside this interior directory so inside other and then we can have different kind of templates and different static files for that so that is how blueprints work you can use as many blueprints as you want all you need to do is just register them here and set their URL prefix and that's pretty much all there is to it so with that being said that has been it for blueprints this will probably the last technical video and we're actually gonna do a deploy next I think and show how we can get this flask application out onto the web so that anyone can access it but with that being said if you guys enjoyed make sure leave a like and I will see you guys in another video
