With timestamps:

00:00 - if you're a beginner or intermediate
00:01 - python programmer and you're looking for
00:03 - some short fun yet interesting projects
00:06 - to work on then this video is for you
00:08 - what I'll be doing is showing you three
00:10 - unique python projects and I'm going to
00:12 - walk you through the entire process from
00:13 - the beginning to the end that means that
00:15 - I'm going to be coding these completely
00:17 - from scratch I haven't attempted them I
00:19 - haven't looked at them yet and you're
00:20 - going to be able to see my entire
00:21 - thought process how I break down the
00:23 - problem how I attempt to come up with
00:25 - the solution and how I deal with any
00:27 - problems or bugs that occur in my
00:29 - program hopefully you guys will find
00:30 - that valuable and it will make it a lot
00:32 - easier for you to go work on your own
00:34 - projects or to extend these afterwards
00:36 - now one of the projects we're going to
00:38 - build well they will be time stamped
00:39 - down below but the first one is a pig
00:42 - game now this is kind of a dice rolling
00:43 - game where you roll until you get a one
00:45 - and then the next person gets to go then
00:48 - we're gonna work on a Mad Libs generator
00:50 - this means we're gonna have a story with
00:51 - a bunch of words that we're going to ask
00:53 - the user to fill in and the last one
00:55 - will be kind of a timed math quiz where
00:57 - we're going to ask a series of random
00:59 - math question and the user will have to
01:01 - answer them we're going to time them and
01:03 - see what their accuracy was with that
01:04 - said let's go ahead and get started and
01:06 - work on these three unique python
01:09 - projects alright so let's begin here
01:11 - right now I'm inside of Visual Studio
01:12 - code and I've opened up a directory that
01:14 - contains some different python files
01:16 - project 1 Project 2 and project three
01:18 - now you can write your python code
01:19 - wherever you want just make sure you
01:21 - know how to run the code and you can
01:23 - kind of interact with the editor and all
01:24 - of that so I'm sure some of you may be
01:25 - using idle which is the basic python
01:28 - terminal that's completely fine you can
01:30 - write your code there or you can do it
01:31 - in vs code like I have now I'm using
01:33 - python version 3.9 you can use any
01:36 - version you'd like and I'm just going to
01:38 - mention that I am going to assume a
01:40 - little bit of knowledge of python so I
01:42 - know that a lot of you are beginners you
01:43 - may not have even ridden python before
01:45 - but just in the sake of time I'm going
01:47 - to assume you know what a variable is
01:48 - you know print statements inputs for
01:51 - Loops kind of that basic surface level
01:53 - syntax although I will of course explain
01:55 - everything that I'm doing all right
01:57 - let's start with project number one here
01:58 - which is pig I also want to quickly
02:00 - mention I do have a programming course
02:01 - it's called programmingexpert.io if you
02:04 - guys like this style of teaching check
02:05 - it out from the link in the description
02:06 - and you can use discount code Tim the
02:08 - Big Value it has a ton of projects a ton
02:10 - of practice questions and over a hundred
02:12 - unique videos teaching python go Etc so
02:15 - we want to build Pig now first we need
02:17 - to understand what this project is so
02:18 - how does pig work well it is a
02:20 - multiplayer game first of all everyone
02:22 - plays a little bit different but the way
02:23 - that I play is that you essentially get
02:25 - a turn so comes your turn and you get to
02:28 - roll the die when you roll the die
02:29 - you're going to get some number from one
02:30 - to six if you get anything other than
02:32 - one you take that and you add that to
02:34 - the score of your turn so let's say you
02:36 - get a five now you're at five roll it
02:38 - again you get another five you're at ten
02:39 - and you can decide how many times you
02:41 - want to roll the dice now the catch is
02:43 - as soon as you hit a one whatever you
02:45 - got on your roll is gonna be done
02:47 - whatever you got on your turn is is zero
02:49 - like you completely remove the score so
02:51 - you can roll five times three times four
02:53 - times ten times twenty times as much as
02:55 - you want but every additional role
02:57 - you're gambling the possibility of
02:59 - losing your score score so you need to
03:01 - decide when you want to stop as soon as
03:03 - you stop whatever your current score is
03:04 - assuming it's not zero is going to get
03:06 - added to your total score and then you
03:08 - can determine the number of total rolls
03:10 - you want to have or it's whoever reaches
03:11 - like a hundred first or 51st whatever
03:14 - you want to do in our case we'll say
03:15 - like the max score is something like 50
03:17 - whoever hits 50 First is just the winner
03:19 - of the game okay so how are we going to
03:21 - build this out well let's break down the
03:23 - individual things that we need to do
03:25 - first we need to allow the user to roll
03:27 - the dice this means we need to come up
03:29 - with a way to roll so we have to have
03:30 - some random number generator giving us a
03:32 - number between one and six we then need
03:35 - to ask the user if they want to continue
03:36 - to roll so either roll again or stop
03:39 - their track if they stop their turn we
03:41 - need to take whatever their score is and
03:42 - add that to some total score then we
03:45 - need to constantly check if either
03:46 - player has a score that is above 50 if
03:50 - it is above 50 then we need to end the
03:52 - game and tell someone that they won
03:53 - there's a few other things that are
03:54 - involved but those are the basic steps
03:56 - let's start by generating a random
03:58 - number
03:59 - so what I'm going to do
04:01 - is import the random module now random
04:05 - allows you to Generate random numbers
04:06 - what I'm going to do is just Define
04:09 - a rule function now a function in Python
04:12 - is a reusable block of code
04:14 - you make it using def standing for
04:16 - Define you then put the name of the
04:18 - function and then a set of parentheses
04:19 - we're then going to put inside of here
04:21 - in an indented block after a colon so
04:24 - notice some kind of one tab over any
04:26 - code we want to run whenever we call the
04:28 - function
04:29 - so what I'll do here is I'll say Min or
04:33 - Min value is equal to one
04:36 - max value is equal to 6 and then I'm
04:39 - going to roll the die in between them
04:41 - now there's a few different ways to do
04:42 - this with the random module but I
04:45 - believe we can say roll is equal to and
04:48 - this is going to be random dot Rand and
04:51 - then int like that
04:53 - and then this is going to be the Min
04:55 - value
04:56 - and the maximum value of our die then
05:00 - we're simply going to return Rule now
05:02 - the way the return keyword works is it's
05:04 - going to give whoever called the
05:06 - function this value kind of back it's
05:08 - going to return it to them so if I come
05:10 - down here and I say value is equal to
05:14 - roll the way I call the function is I
05:16 - use my set of parentheses
05:18 - and then I can simply print out the
05:20 - value here
05:21 - and you'll see that if I bring my
05:22 - terminal up
05:23 - and we run the code we get the value
05:25 - three we can run it again we're getting
05:27 - six three six five five two let's see if
05:31 - we can get a one
05:33 - okay it looks like it really doesn't
05:34 - want to give us a one this would have
05:36 - been a fantastic turn okay and there you
05:38 - go we got a one so that would have ended
05:39 - our turn all right
05:41 - there you go that is how we generate a
05:43 - random role okay so now that we have
05:46 - that we want to kind of set up the game
05:48 - and we might Begin by asking how many
05:51 - players are going to be participating
05:52 - and then we can keep track of all the
05:53 - different players maybe we set it to say
05:55 - a maximum of four or something like that
05:58 - so let's go down here I'm just going to
06:00 - zoom out a little bit and let's set up a
06:02 - while loop what we say actually not well
06:05 - we're going to say input so we'll say
06:08 - players is equal to input we're going to
06:11 - say enter the number
06:15 - of players
06:17 - and we'll say kind of one to four like
06:20 - that and then notice I'm putting a space
06:22 - here at the end just so we have a little
06:24 - bit of padding between where the user is
06:26 - going to give us the answer so the idea
06:27 - is we're going to ask the user okay give
06:29 - us some value between one to four then
06:31 - what we need to do is we need to check
06:32 - if this is a valid number so I'm
06:34 - actually going to kind of put a while
06:36 - loop here and I'm going to say while
06:38 - true
06:39 - and then I'm going to put this inside
06:40 - the reason for this is I want to
06:41 - continue to ask the user to input a
06:44 - number until they give me one that's
06:45 - valid so I say while true and then I'm
06:48 - going to break out if they give me a
06:49 - valid number
06:50 - so I'm going to say
06:51 - try
06:53 - or actually we can do the following we
06:55 - can say if players Dot
06:58 - is digit now is digit is going to tell
07:01 - us if this is a digit or not so if it's
07:03 - a number if it's a valid whole number
07:04 - specifically is what it will give us so
07:06 - I'm going to say if players is digit I'm
07:08 - going to say players is equal to int
07:11 - and then players now what this does is
07:13 - convert what's going to be a string here
07:15 - into an integer and the reason I need to
07:18 - check if it's a number first is because
07:19 - if I try to convert a string into an
07:21 - integer and it's not a valid integer
07:23 - it's going to give me an error so I
07:24 - don't want to crash the program so I'm
07:26 - saying okay if this is actually a valid
07:27 - number let's convert it into that number
07:29 - the reason I need to do that is I now
07:31 - need to check if this number is greater
07:33 - than 1 and less than 4. if it is I can
07:36 - then break out of this while loop
07:37 - because I have a valid number of players
07:39 - otherwise I need to continue to keep
07:41 - asking them to enter a valid player so
07:44 - I'm going to say if
07:46 - 1 less than or equal to players less
07:50 - than or equal to four
07:51 - okay then I will simply break what the
07:54 - break keyword will do is immediately
07:56 - exit outside of this while loop meaning
07:58 - we'll have access to the player's
07:59 - variable down here and we can just print
08:01 - out what the number of players is if we
08:04 - don't encounter this break keyword we
08:06 - will continue to ask the user until they
08:07 - give us a valid number of players now we
08:09 - could give them some output and say
08:11 - something like
08:13 - print
08:14 - invalid
08:16 - try again and we could do something here
08:19 - where we say something like prints
08:22 - must be between one to four players
08:27 - and actually it can't even be a one sb2
08:29 - right so we'll have two to four like
08:31 - that and we'll put a two and we'll put a
08:34 - two because we need to have at least two
08:36 - players to be able to play the game all
08:37 - right so let's try this out
08:39 - let's run our code enter the number of
08:41 - players let's enter one says we need to
08:43 - do it again okay so it didn't actually
08:45 - print anything out
08:47 - um
08:48 - I don't know why that happened oh sorry
08:50 - it's because okay I'll fix that in one
08:52 - second that's an error anyways we enter
08:53 - two it says must be between two to four
08:56 - players which is a mistake and then two
08:57 - so notice I made a bit of an error
08:59 - because I put this inside of the if
09:00 - statement when I wanted to
09:03 - put an else statement here and then put
09:06 - this here because if this is valid we
09:08 - break which means we exit the while loop
09:09 - otherwise we tell them okay that was the
09:12 - error so we just need to make that quick
09:13 - fix there with the if statement
09:15 - okay in case you're confused by the way
09:17 - if statement checks if something is true
09:19 - if it is we kind of enter in this
09:21 - indented block which happens after the
09:22 - colon otherwise we have this else
09:24 - statement which will trigger if the uh
09:26 - if statement is false okay
09:28 - so I'm going to clear
09:30 - and run and let's go one okay it must be
09:33 - between two and four let's go five let's
09:35 - go hello let's go three and we're good
09:39 - to go okay so now we have the number of
09:41 - players and what we want to do is
09:43 - essentially simulate each player's turn
09:44 - where we ask them you know do you want
09:46 - to roll the dice yes or no they tell us
09:48 - yes or no they roll and then we start
09:49 - kind of calculating their score
09:51 - so let's do this
09:53 - first of all let's make some variables
09:54 - here and let's say our Max score
09:59 - is equal to and then we can do something
10:02 - like
10:03 - we'll go with maybe yeah let's go with
10:05 - 50 for now we'd probably want to make
10:06 - that larger but just kind of for the
10:08 - sake of time when we're testing this
10:09 - we'll make it small then we want to have
10:12 - our player underscore scores and what
10:16 - we'll do for our player scores is we'll
10:17 - just have a list which contains all of
10:20 - the individual scores now we don't know
10:22 - if we're gonna have two players three
10:23 - players or four players so we're gonna
10:24 - have this list kind of change size based
10:27 - on the number of players that we have
10:28 - now the way that we can kind of create
10:30 - or initialize this list based on the
10:32 - number of players is we can say 0 4
10:35 - underscore in and then
10:39 - something like this in range the Len
10:43 - of players now what this is is actually
10:46 - a list comprehension I was thinking of
10:49 - the name there what this does is it
10:52 - essentially puts a zero inside of the
10:54 - list for every single player that we
10:56 - have so what I'm doing is saying for
10:58 - underscore now I could put I here but
11:00 - the thing is I don't actually care about
11:02 - what the variable is I just want to do
11:03 - this the number of player times so I can
11:06 - put an underscore essentially saying hey
11:07 - I don't really care what the variable is
11:09 - so like you know we need to have
11:10 - something there but I'm just going to
11:11 - put an underscore because I don't really
11:12 - want to use this and then I'm going to
11:14 - say in range the Lan of players so what
11:18 - this range function will do is Loop the
11:20 - number of players with the length of
11:22 - actually sorry we don't need Len just
11:23 - players here it will Loop the number of
11:25 - players times that we have notice that
11:27 - our players is going to be an INT right
11:29 - so if it's three this will happen three
11:30 - times if it's four it will happen four
11:32 - times Etc ignore the Len that I had
11:34 - there I don't know why I put that there
11:35 - just a silly mistake okay
11:37 - so now we can print out our player
11:40 - scores
11:41 - and you'll see that we'll get an array
11:42 - filled with zeros based on number of
11:44 - players that we have so if we do three
11:45 - gives us three zeros if we run it again
11:47 - four we get four zeros so now we are
11:50 - able to store each of our players scores
11:52 - inside of this array fantastic
11:55 - okay now we need to go through our
11:57 - player terms so we're essentially going
11:59 - to say
12:00 - wow
12:01 - the maximum
12:03 - of our player scores is less than the
12:07 - max score then we'll keep looping now
12:09 - what Max will do is give us the maximum
12:11 - value from this array or from this list
12:13 - so if it's 23 gives us 23 if it's 55
12:16 - gives us that we're saying okay as long
12:18 - as it's less than the maximum score
12:20 - means no one's reached the max we'll
12:21 - keep going as soon as someone does reach
12:23 - the maximum score we need to stop and
12:25 - then tell the user whatever the um sorry
12:27 - tell the players whoever kind of won the
12:30 - game
12:30 - all right
12:32 - how we gonna do this uh well let's go
12:35 - here
12:36 - and we will say
12:38 - first of all roll we'll say should
12:42 - underscore rule is equal to input and
12:46 - we'll say would you like to roll
12:49 - question mark
12:51 - and we're just going to put here A Y
12:53 - which means we want the user to input
12:55 - the key y so then we can come here we
12:58 - can say if should roll
13:00 - dot lower
13:02 - is equal to Y the reason I'm converting
13:05 - this to lowercase which is what dot
13:06 - lower does is because if they enter a
13:08 - capital Y I still want them to roll
13:10 - right so this is just checking is it
13:12 - capital or lowercase doesn't matter
13:14 - we're going to convert it to lowercase
13:15 - and then check if it's equal to the
13:16 - lowercase y if it is then we're going to
13:18 - roll the dice for them so we're going to
13:20 - say roll is equal to and actually I
13:23 - can't use roll because let's name my
13:24 - function so I'm going to say value is
13:27 - equal to roll
13:29 - okay otherwise I'm simply going to break
13:32 - and actually a better way to do this is
13:34 - going to be a little bit cleaner for me
13:35 - is I'm going to say if should roll.lower
13:38 - does not equal y
13:40 - then I will break out
13:43 - otherwise I will say my value is equal
13:45 - to the rule so the reason I'm doing this
13:47 - is because I want to have all my code
13:49 - kind of not indented if I don't have to
13:51 - have it indented so I'm saying okay if
13:52 - you didn't hit Y that means we're just
13:54 - going to stop your turn otherwise we're
13:56 - going to roll the dice now there's a lot
13:57 - more code we're going to need to write
13:58 - but I'm just kind of going through this
14:00 - um you know as I normally would and then
14:02 - we'll kind of stop and fix things since
14:03 - we need to so we're going to grab that
14:05 - rule and we're going to check if that
14:06 - rule is equal to one if it is equal to
14:08 - one then whenever the player's current
14:09 - score is is just going to become zero
14:11 - and we're going to move to the next
14:12 - person's turn now we still need to
14:14 - simulate the terms and all of that which
14:15 - we'll do in a minute but for now just
14:17 - kind of bear with me so we're going to
14:18 - say if value
14:21 - is equal to zero
14:23 - then we can simply say print
14:26 - or sorry not zero I'm going to say you
14:28 - rolled a one
14:30 - turn done exclamation point
14:33 - otherwise
14:35 - we'll print
14:38 - you
14:39 - rolled a and then whatever the rule is
14:42 - so we can say something like
14:44 - actually
14:46 - value
14:48 - like that
14:51 - okay so let's put a colon
14:52 - U rolled uh and then whatever the value
14:54 - is all right so now that we have this
14:56 - we're kind of printing out what they
14:57 - ruled I'm just going to go up here and
14:59 - I'm going to Mark the current score
15:01 - equal to zero because we need something
15:03 - to keep track of what the player's score
15:04 - is now if they didn't roll a one then
15:07 - what I'm going to do is I'm going to say
15:08 - the current score plus equals whatever
15:11 - the value of the die was I'm going to
15:13 - tell them what they rolled and then down
15:15 - here I'm just going to print
15:18 - your current or your
15:22 - score is
15:24 - and then we'll print out whatever the
15:26 - current score is and then we'll kind of
15:27 - continue now
15:29 - here I'm just going to break this
15:31 - because the idea is all right well if
15:33 - you roll to one your turn's done so
15:35 - we're gonna break out all right so this
15:37 - kind of simulates ones per one person's
15:39 - turn story but again we haven't really
15:41 - kind of handled uh the fact that we have
15:43 - multiple people going at once and
15:45 - allowing someone's turn to continue
15:47 - multiple times so what we actually need
15:49 - to do is we need to use a for Loop here
15:51 - what we'll do is we'll put a for Loop
15:54 - kind of right here and we'll say four
15:57 - I in
15:59 - range players
16:02 - so I is going to represent the current
16:03 - player so we'll say
16:05 - player underscore index or player idx so
16:09 - player zero one two three or player one
16:11 - two three four whatever you want to call
16:13 - it and in this for Loop we'll then
16:15 - simulate one person's entire term so
16:18 - we'll mark the current score but then
16:19 - all of the stuff that's going on here
16:21 - needs to happen until the player stops
16:24 - their turn so what we'll do is we'll
16:26 - have a wall Loop and we'll say while
16:27 - true and then we'll put all of this here
16:30 - then outside of the while loop we're
16:33 - going to say that the player underscore
16:36 - scores at index player idx is going to
16:41 - be plus equal to whatever their current
16:43 - score is so like the current score is
16:46 - kind of the score per turn and then the
16:48 - total score is what we're going to be
16:50 - adding to after they finish their turn
16:53 - so what we'll do after we add that is
16:55 - we'll say print
16:57 - your total score is colon and then we
17:00 - will say that this is going to be the
17:02 - player scores at the player idx okay
17:07 - we'll go through this again in one
17:09 - second but for now I we're making good
17:11 - progress on the terms all right so I'm
17:12 - just reading through this uh it's
17:14 - looking okay however I'm realizing that
17:16 - if the value is 1 then we're going to
17:19 - have to set the current score equal to
17:20 - zero just so we make sure we don't add
17:23 - what their score was before they rolled
17:24 - a one all right so let's kind of run
17:26 - through this here we have our for Loop
17:27 - we say four player index in range
17:29 - players which means We're looping over
17:30 - all of our different players so they
17:32 - each get a turn we probably want to
17:34 - print out something like
17:37 - player and then
17:40 - let's say player idx plus one
17:43 - turn
17:45 - has just started
17:47 - just they know that it's now their turn
17:48 - and what I'm going to do is print a
17:50 - backslash n
17:51 - right here and a backslash n what this
17:55 - is going to do is just add a line break
17:56 - so that we have a bit of Separation when
17:58 - the player's turn starts so we say okay
18:00 - player and then we're doing plus one
18:01 - because this is going to be zero one two
18:02 - three well we probably want to show one
18:04 - two three four so that's what we're
18:06 - showing so we say player whatever it is
18:07 - turn has just started we can say player
18:10 - number turn has just started okay we
18:12 - said the current score equal to zero for
18:13 - the turn
18:14 - we simulate the turn we ask them if
18:16 - they'd like to roll if they say yes or
18:18 - if they don't say yes sorry we break out
18:20 - otherwise we rule if they get a one we
18:23 - say they roll to one their turn is done
18:24 - their current score is zero we break out
18:27 - otherwise we take whatever the current
18:29 - score is and we add to that the value
18:30 - that they rolled because it wasn't a one
18:32 - and then we continue this whole process
18:34 - again so we tell them this is what you
18:36 - rolled and then we say your current
18:37 - score is this which is going to be the
18:39 - sum of what they rolled plus you know
18:41 - what their current score is okay then
18:42 - eventually we're going to get outside of
18:44 - this while loop when they roll one or
18:45 - when they tell us that they don't want
18:47 - to roll anymore we're going to take that
18:49 - score add that to their total score and
18:51 - then print that out now we're not quite
18:52 - finished but this will simulate most of
18:54 - the game so far all we really need to do
18:56 - is determine when someone wins so let's
18:58 - zoom out a bit
18:59 - just so we can kind of read most of what
19:01 - we have here
19:02 - we have our role function we ask the
19:05 - player or we asked to input the number
19:06 - of players we want we have the maximum
19:08 - score generate kind of an empty list for
19:10 - storing the scores and then we have this
19:12 - code which is going to simulate the
19:14 - terms let's run this and see what we get
19:17 - here
19:18 - okay so let's zoom in a bit enter the
19:20 - number of players let's go with two
19:21 - player number one turn has started okay
19:24 - would you like to roll yes you roll the
19:27 - six your score is six would you like to
19:28 - roll yes you rule to four your score is
19:31 - 10 would you like to roll okay yes let's
19:34 - keep rolling
19:35 - yes
19:36 - yes yes yes I'm trying to get a one here
19:40 - and it says you roll to one your turn is
19:42 - done yours total score is zero player
19:44 - two staring at sorry would you like to
19:45 - roll yes five okay let's roll again and
19:49 - we roll the one all right and you'll see
19:51 - that we can continue this right so I'm
19:52 - gonna try to get a pretty high score
19:54 - although this isn't working too well for
19:56 - me okay let's stop rolling there now our
19:59 - total score is 15 player two Stern okay
20:00 - yes yes yes yes yes yes yes really
20:04 - gambling here okay let's stop the roll
20:05 - okay yes roll to six your score is six
20:09 - yes yes yes yes yes
20:11 - no okay total score 42 let's roll roll
20:15 - roll
20:17 - and no total score is 51 and then notice
20:20 - the program ends here because all of the
20:22 - players turns have finished and someone
20:23 - had a score of 51. so we end we should
20:26 - really be telling them you know that you
20:28 - won which is what we're gonna do now but
20:29 - that kind of simulates the program
20:31 - there's a few things we'd probably want
20:32 - to do to make this a bit better for
20:34 - example at the beginning of the turn we
20:35 - should probably tell them what their
20:37 - score is so that they know that before
20:38 - they go into the turn so they can stop
20:41 - um you know once they hit what the max
20:42 - score is okay so let's do this uh we're
20:45 - gonna say player one's turn has just
20:47 - started
20:48 - and then we're going to print here
20:51 - your total score is
20:55 - colon and then the player scores
20:59 - at the player idx okay and then we're
21:02 - going to begin the turn so we can
21:03 - actually just remove that backslash n
21:05 - and we'll just put one right here
21:08 - just so that we kind of go one line down
21:10 - okay do all of this
21:12 - and then as soon as this ends what that
21:14 - tells us is that at least one player has
21:17 - a score above 50. now multiple players
21:20 - can have a square above 50 and the
21:22 - reason this works is as soon as someone
21:23 - hits 50 we don't end until every player
21:25 - gets to turn the reason why that's fair
21:27 - is because whoever goes first would have
21:29 - an advantage so in this case we let
21:30 - everyone have at least that last Rule
21:32 - and then we see whoever has the max
21:34 - score after the last roll so what we can
21:36 - do now
21:37 - is we can just find what that maximum
21:39 - score is we can actually get the index
21:42 - of that score inside of our player's
21:44 - scores and that will tell us which
21:45 - player won so the way we do this is we
21:48 - simply say Max score
21:52 - is equal to the max of our player's
21:55 - scores and then we're going to say
21:56 - player winning idx is equal to or
22:01 - actually we can just say winning idx
22:04 - is equal to the player's scores dot
22:07 - index and we can index the maximum score
22:09 - what that does is give us the index
22:11 - either 0 1 2 or 3 of where that maximum
22:13 - score is which tells us player zero
22:15 - player one player two Etc so then we can
22:17 - just print
22:19 - player
22:20 - comma winning index plus one so we'll
22:23 - say player number and the reason we're
22:26 - adding one is because again we're going
22:27 - to start at zero so we want to make sure
22:29 - we're going from one to four not zero to
22:30 - three
22:31 - and we'll say
22:33 - is
22:35 - the winner
22:36 - with a score of colon and then what the
22:39 - maximum score was okay so that should
22:42 - wrap up the game let's give this one
22:44 - last run here okay Enter the number of
22:46 - players let's go with two player number
22:48 - one's turn is just started your total
22:49 - score is zero would you like to roll yes
22:51 - roll to five let's roll again
22:53 - roll again roll again
22:55 - and no okay 16 would you like to roll
22:58 - yes okay that ended fast you like to
23:01 - roll yes yes yes yes yes no okay and
23:06 - Toes score is zero would you like to
23:07 - roll yes yes yes yes yes yes yes okay
23:09 - yes yes
23:11 - and no okay now it's player two's turn
23:13 - so let's roll yes okay that ended fast
23:17 - yes okay now we have the max score so
23:19 - let's say no player two still gets a
23:21 - turn even though we now have a score 51
23:23 - I'm just gonna say no and it says player
23:26 - number one is the winner with a score of
23:28 - 51. okay so that completes that first
23:30 - project all of this code will be
23:33 - available from the link in the
23:34 - description by the way in case you want
23:35 - to download this it'll kind of scroll
23:37 - through it quickly so you can get a
23:38 - sense of how we wrote this that was
23:40 - Project one hopefully you found that
23:42 - interesting and useful now let's move on
23:43 - to project number two alright for
23:45 - project number two we're gonna do that
23:47 - Mad Libs generator the idea is we'll
23:49 - have some type of story this story will
23:52 - have replaceable words like an adjective
23:54 - or a location or a weather condition
23:56 - whatever it may be what we'll then do is
23:59 - we'll ask the user to give us all of the
24:01 - different words we'll then inject them
24:02 - in the story and then read the story
24:04 - back out to the user now the first thing
24:06 - we're going to need for this is a story
24:07 - so the process as I kind of described
24:10 - there is have a story with those
24:12 - injectable words essentially grab what
24:14 - those words are ask the user to input
24:16 - them and then place them in the story
24:17 - now I'm going to show you that there's a
24:20 - lot easier way to do what I'm about to
24:22 - do or I'm going to mention this a lot
24:24 - easier way to do what I'm going to do
24:25 - but I want to show you a way that we can
24:26 - do it with any story so that means that
24:29 - you can make this program really Dynamic
24:31 - and you could have like 20 stories 50
24:33 - stories 100 stories or you can just
24:35 - replace them without having to write any
24:37 - additional code the way we're going to
24:38 - do that is by taking the story and
24:40 - placing it inside of a text file that
24:43 - way as long as the story is written in a
24:45 - specific format we can read in the story
24:47 - do the operations we need to and then
24:49 - kind of run the program as we see fit
24:51 - now what I always do whenever I need
24:53 - something like this is I don't write it
24:54 - from scratch because I'm a lazy
24:55 - programmer I go to chatgpt
24:58 - so what I actually did here is I asked
25:01 - it using this prompt I'm making a
25:03 - Madlibs generator in Python let's make
25:04 - this full screen I'm going to need a
25:06 - story where the user can give me some
25:08 - words can you give me the story or even
25:10 - though I spelled that correctly and for
25:11 - all of the words where the user needs to
25:12 - give them to me make them like this
25:13 - angle bracket word now it gave me a nice
25:16 - long story and it had all the different
25:17 - words and it kind of listed them all out
25:19 - that was a bit long for me so I said
25:21 - that's okay but can you make it in less
25:22 - words please and then it gave me uh kind
25:25 - of a shorter story
25:26 - so the idea here is that whenever we
25:28 - have these angle brackets we're going to
25:30 - kind of treat that as a word that needs
25:32 - to be replaced so what we'll do is we'll
25:34 - take this story from chat EBT so I'm
25:36 - just going to copy this on my clipboard
25:37 - we'll put it in a text file we'll load
25:40 - that story in for all of those
25:41 - individual words we'll then kind of grab
25:44 - them figure out what they are ask the
25:45 - user to give us a word for them and then
25:47 - replace them in the story
25:49 - all right
25:50 - how do we want to do this
25:52 - well the way I will do this is I will
25:54 - copy that first of all and I will go
25:57 - here to vs code
25:59 - I will make a file called story.txt
26:03 - and I will paste that inside of here now
26:05 - make sure when you do this that you put
26:07 - your story in the same directory where
26:09 - your python file is so here I have
26:12 - project 2. pi and I have story.txt in
26:15 - the same directory very important that
26:16 - you do that otherwise this isn't going
26:17 - to work for you okay and if you want
26:19 - this story you can go click the link in
26:21 - the description and just download the
26:22 - story from GitHub I'll make it available
26:24 - for you um after
26:25 - okay
26:27 - so how do we do this first thing we need
26:28 - to do is load this in now I want to load
26:31 - this in as a string essentially and then
26:33 - be able to kind of parse through that
26:34 - string and look for all of those
26:36 - different words now there's a few ways
26:38 - to do this but the way I will do this is
26:40 - I will say with open
26:43 - I'm going to open
26:45 - story.txt
26:47 - in read mode as F and I'm going to put a
26:49 - cooling now what I've done here is I've
26:52 - used the open function and the open
26:54 - function allows me to open a file so I
26:56 - can open a text file a Json file really
26:58 - any type of file I want and the mode
27:00 - here which is what I've placed second is
27:02 - the way in which we're kind of reading
27:04 - it in so I'm going to read it in in read
27:05 - mode which is R mode if I put W this
27:08 - stands for right mode where we'd
27:09 - actually be creating a new file and
27:11 - overriding a file if it already existed
27:13 - with the same name so we don't want to
27:14 - use W mode we want to use R mode this
27:17 - now allows me to read this story.txt
27:19 - file in and the reason I'm using this
27:21 - with syntax is what this does is provide
27:23 - something known as a context for this
27:25 - file which means I can do any file
27:28 - operations on this variable F inside of
27:31 - this indented block and as soon as I get
27:33 - outside of that indented block python is
27:35 - automatically going to clean up the file
27:37 - for me which means it will close it and
27:39 - make sure everything's good with the
27:40 - file it's kind of best practice in terms
27:42 - of opening files here so what I'm going
27:43 - to do is say my story is equal to F dot
27:46 - read
27:47 - now when I do dot read all this does is
27:49 - give me all of the text inside of the
27:51 - file so I can simply print out story
27:53 - here and you'll see if I run this
27:56 - that I get my story
27:58 - appearing here in my term
28:00 - okay so now that we've read that in
28:02 - what I would like to do is look for all
28:05 - of the words in my story
28:07 - now there's a bunch of different ways to
28:09 - do this but essentially what we need to
28:11 - do is find the presence of this angle
28:13 - bracket
28:15 - as soon as we find that we want to find
28:17 - up to this closing bracket right so we
28:20 - want to find every individual word take
28:22 - that word store that in some kind of
28:24 - list that we're going to have access to
28:26 - ask the user to give us a word to
28:28 - replace it with and then go and replace
28:30 - all of the instances of this word with
28:33 - whatever the user told us
28:35 - okay so let's do that
28:37 - what we want to do is a loop through our
28:39 - story now our string we can actually
28:41 - access all of the individual characters
28:43 - as an index so what I can do let's zoom
28:45 - in here
28:46 - I say for I comma character
28:49 - in enumerate
28:51 - and we're going to enumerate the story
28:53 - now what enumerate does is give us
28:54 - access to the position as well as the
28:57 - element at that position just makes it a
28:59 - little bit cleaner for us here
29:00 - so now I'm just going to check
29:02 - essentially if this is equal to an angle
29:05 - bracket if it is equal to an angle
29:07 - bracket then I kind of need to do
29:09 - something to Mark the fact that I found
29:10 - the start of a word and then I need to
29:12 - go until I find the end of it so we're
29:14 - going to set up a few variables here
29:16 - and we're going to say words is equal to
29:18 - this because we want to store what all
29:19 - of these different words are
29:21 - and then what should we do here we
29:24 - should say
29:26 - start
29:28 - of word is equal to negative one
29:31 - okay so we're going to have this
29:32 - variable and this variable is pretty
29:34 - much going to tell us if we've currently
29:36 - found the starting index of a word if we
29:38 - have that means we can then look for the
29:40 - end if we haven't then we're going to
29:42 - wait until we find that starting index
29:43 - so what we'll do here is we'll say if
29:46 - Char is equal to and I'm going to make
29:48 - another variable I'm going to call this
29:51 - Target underscore start this is going to
29:54 - be equal to the open angle bracket I'm
29:56 - going to have my target ends
29:58 - equal to the closing angle bracket just
30:00 - so that if we were to change the format
30:02 - of the story we could easily adjust this
30:03 - by changing the value of the variables
30:05 - so I'm going to say if the Char is equal
30:08 - to the Target start
30:10 - then what I'll do is I'll say the start
30:12 - of the word is equal to index I so if I
30:15 - found that opening angle bracket okay we
30:17 - just found the beginning of the word
30:18 - let's mark that by indicating that in
30:20 - our variable
30:21 - now what we'll do is we'll say if the
30:24 - Char is equal to the Target end
30:27 - and the start of word does not equal
30:31 - negative one
30:32 - the reason why we're doing this is we're
30:33 - saying if we found the ending angle
30:35 - bracket and we had the starting angle
30:38 - bracket right which will be marked by
30:40 - the start of word variable which if it's
30:42 - equal to negative one means we haven't
30:43 - yet found the beginning if it's equal to
30:45 - anything else that means we did find the
30:46 - beginning then we can take that entire
30:49 - word and add that to our words list so
30:52 - what we'll do now
30:53 - is we'll say word
30:54 - is equal to and this is going to be
30:57 - story
30:58 - at index
31:00 - start of word up to the index I plus 1.
31:05 - now what this gives us access to is a
31:08 - slice which is a subsection of the
31:10 - string so this is the slice operator
31:12 - here in Python where we indicate the
31:14 - starting character so the character we
31:16 - want to begin taking a slice from and
31:18 - then the ending character that we're
31:19 - going to go up to but not including or
31:21 - the ending index so in this case we know
31:23 - the start of the word so we put that
31:25 - here and we know the end of the word
31:26 - because that's the current index that
31:28 - we're on that we just found but we need
31:30 - to add one to it to make sure that we
31:31 - include this ending index in our word so
31:34 - we're going to grab that
31:36 - we're going to put that inside of our uh
31:38 - word or word variable sorry we're going
31:40 - to say words dot append word which means
31:43 - we're going to now add this word into
31:44 - our words list and then we're going to
31:47 - set our start of word equal to negative
31:50 - one because we've now found one whole
31:53 - word so now we reset the start of word
31:55 - so we're ready to handle it for the next
31:57 - uh character that we find which is that
31:59 - opening angle bracket so this code here
32:01 - will actually find all the different
32:02 - words for us in the story so let's test
32:05 - this by printing
32:07 - our words
32:09 - okay let's run the code
32:11 - and I think my terminal is a little bit
32:13 - cut off but you can see that we get all
32:14 - of the different words now what you
32:16 - might notice here is that we have
32:18 - duplicated words now the reason we have
32:20 - duplicated words is because this word
32:22 - could appear multiple different times
32:24 - now that's fine if it does but I only
32:27 - want to have the words that are unique
32:29 - now the way that we can essentially do
32:32 - this is we can change from using a list
32:35 - and instead we can use a set now a set
32:37 - is a data structure which will only
32:39 - contain unique elements so if I add the
32:41 - same element in it's not going to do
32:42 - anything we just have one instance of
32:44 - each unique element the way to do that
32:46 - is just to write set here instead of a
32:49 - list and then rather than append we're
32:51 - just going to say add
32:53 - now add we'll just add this to the set
32:55 - and you'll see now that when we run this
32:57 - we'll just get all of the different
32:59 - unique words perfect
33:01 - okay now that we have those words what
33:04 - we want to do is ask the user to give us
33:06 - a value for each of the words so the way
33:08 - we'll do this is we'll set up a
33:10 - dictionary so we're going to say answers
33:12 - is equal to a dictionary the idea is we
33:15 - want to have the word as the key so
33:16 - something like
33:18 - name and then the value in our
33:21 - dictionary will be whatever answer they
33:22 - gave us so something like temp the
33:24 - reason we'll do this is so we can very
33:26 - easily look up the value of a word
33:29 - so we say name Tim blah blah okay and
33:31 - then what we'll do is we'll take
33:33 - whatever these values are and replace
33:34 - them in our story later on the way the
33:37 - dictionary works is you add a key by
33:39 - doing something like this answer is key
33:41 - is equal to and then whatever the value
33:44 - you want and you can access the key by
33:46 - just using the square bracket syntax
33:48 - like this
33:49 - okay so we have our answers this is
33:51 - going to be empty dictionary
33:53 - what we'll now do is we'll Loop through
33:55 - all of the unique words that we have and
33:57 - we'll ask the user to give us a value
33:58 - for them so we're going to say forward
34:00 - inwards iterating through our set and
34:03 - we're going to say answer is equal to
34:05 - input
34:07 - enter a word for and then we're gonna do
34:12 - Plus
34:13 - and then whatever the word is now notice
34:15 - we can't do a comma here because we're
34:17 - using the input statement not the print
34:19 - statement so we need to concatenate
34:21 - which means add two strings together so
34:23 - we take the word add it to enter word
34:24 - four and then we can just put here
34:27 - a colon with a space at the end so that
34:29 - the user knows where to start writing
34:31 - okay so that gives us an answer we're
34:33 - then going to say answers
34:35 - at word
34:37 - is equal to answer
34:38 - and let's spell answers correctly okay
34:41 - that will now create a dictionary that
34:43 - has all the words associated with all of
34:45 - the values
34:46 - so let's now print out answers
34:49 - okay so let's come here it says enter a
34:51 - word for object
34:53 - uh let's go something like chair
34:55 - weather condition
34:57 - Sunny adverb uh I don't know let's see
35:01 - gently place
35:03 - School emotion two
35:06 - sad animal
35:09 - bear place to
35:11 - um I don't know house Terrain
35:15 - what is this grass okay character Tim
35:18 - adjective one
35:20 - jumps emotion
35:23 - happy and there you go it gives us now
35:26 - all of the different words and their
35:28 - answers now that we have that we can
35:30 - take every single instance of these
35:32 - words and essentially kind of replace
35:34 - them in the story so now we're gonna
35:37 - have another for Loop and we're going to
35:39 - say forward in words
35:42 - now the great thing in Python is that we
35:44 - have this method called replace all or
35:46 - replace I don't know which one is I
35:48 - think it's replace all either way what
35:49 - this is going to do is replace every
35:51 - single instance of one string with
35:52 - another so that's super convenient for
35:55 - us because we know this string we want
35:56 - to look at which is that kind of angle
35:58 - bracket and we want to replace that with
36:00 - our answer so now what we'll do is we'll
36:02 - simply say story dot replace I think
36:05 - this replaces all instances of it we're
36:07 - going to check that in one second and
36:09 - we're going to replace our word which is
36:10 - that angle bracket string with the
36:12 - answers
36:14 - of our word and then we can just print
36:16 - out our story
36:18 - and we'll be good we'll have the entire
36:20 - program finished so let me quickly run
36:22 - through the code and then I'll show you
36:23 - how this works so we open up our
36:25 - story.txt we read this in
36:28 - we create a set of all of our unique
36:30 - words we then say the start of the word
36:32 - is equal to negative one we have our
36:34 - Target uh kind of opening bracket Target
36:36 - closing bracket and this first block of
36:38 - code here goes and locates all of the
36:40 - different words that are inside of our
36:42 - story so we say for I character and
36:44 - enumerate story getting the index as
36:46 - well as the value we say if the
36:48 - character is equal to that starting kind
36:50 - of open angle bracket let's mark that by
36:52 - saying the start of word is equal to I
36:53 - then down here if we found the ending
36:56 - bracket and we have the start of a word
36:57 - we've just found the end of the word so
36:59 - now what we can do is grab that word
37:01 - using our slice syntax add that to our
37:03 - set and then reset start of word
37:06 - then we have all of our words so we need
37:08 - to generate an answer for them which we
37:09 - asked the user to do and then we simply
37:11 - go through and replace all of the
37:13 - instances of our word with the answer
37:14 - the user gave us
37:16 - awesome let's give this a shot let's
37:18 - make this full screen and run animal
37:21 - bear adverb gently character Tim I
37:26 - probably should do lowercase four but
37:27 - that's fine weather condition
37:30 - Sunny terrain grass place
37:34 - School adjective one
37:37 - um I don't know throw emotion two sad
37:40 - place two let's go with
37:45 - soccer field emotion
37:47 - happy object chair okay and
37:51 - unfortunately it seems as though this
37:54 - actually didn't work so I'm gonna have
37:55 - to look at what the problem was here ah
37:59 - I already know what the issue so I said
38:01 - story don't replace however what this
38:03 - does is this gives me a new string so
38:06 - what I was doing is I was just kind of
38:08 - generating a string that I wasn't
38:10 - storing anywhere so story didn't change
38:12 - this gives me a new string so what I
38:14 - actually need to do here is say story is
38:16 - equal to and then story dialer place and
38:18 - then do this now there's more efficient
38:19 - ways to go about doing this but this
38:21 - will be perfectly fine for our purposes
38:22 - so if we fix this up now
38:25 - and let's save that so again just we
38:27 - kind of are now changing the story every
38:29 - time by updating that variable
38:31 - what I'll do is run this again motion
38:33 - sad adjective
38:35 - throw character
38:37 - Tim place
38:39 - School terrain grass place two
38:44 - soccer field object chair adverb gently
38:49 - motion sad animal bear weather condition
38:53 - Sunny okay in the throw land of school
38:56 - oh adjective okay I I probably used the
38:59 - wrong thing for an adjective there
39:00 - anyways in the throw land of school a
39:02 - bear was feeling sad the bear had lost
39:03 - its chair suddenly a Tim appeared I will
39:06 - help you find the chair they said
39:07 - together they journeyed through grass
39:09 - and face the sunny okay I probably
39:11 - should have said like raining or
39:13 - something finally they found the chair
39:14 - in a soccer field the bear was so sad
39:16 - and thanked the Tim they lived gently
39:18 - Ever After
39:19 - all right you know what that's not so
39:20 - bad I think there was a few uh words
39:22 - that are probably messed up writing but
39:23 - there we go we get the story and yeah
39:26 - there you are now if you wanted to you
39:28 - could store that in a text file but I
39:30 - think that that pretty much wraps up
39:32 - this project that was pretty cool and
39:33 - obviously if you kind of change the
39:34 - story around give some better words you
39:36 - could get some pretty interesting
39:37 - results there regardless hope you guys
39:39 - enjoyed let's move to the next project
39:41 - alright so let's get into project three
39:44 - now the idea for project three is we
39:46 - want to randomly generate a bunch of
39:48 - different math questions ask the user
39:51 - those questions and then not let them
39:53 - continue until they get it correct well
39:55 - then time how long it takes them to
39:56 - answer all of the questions so the first
39:59 - thing we need to do is be able to
40:00 - randomly generate these problems now
40:02 - there's much different parameters we can
40:04 - use right we have a set of operators we
40:06 - can use it's like plus minus addition
40:07 - multiplication we can even use exponent
40:09 - and stuff if we wanted to and then we
40:12 - have kind of the max values as the Opera
40:14 - Ranch like the min max value Etc so what
40:16 - I'm going to do
40:18 - is write a few variables that we'll use
40:20 - as constants that we can change that
40:22 - will make this either easier or harder
40:24 - depending on what you want to do
40:26 - now first of all we're going to need the
40:27 - random because we're going to be
40:28 - randomly generating operands then we're
40:31 - going to need the operators so I'm
40:34 - actually going to do this in all
40:35 - capitals
40:36 - I'm going to say
40:37 - operators is equal to this and I'm going
40:41 - to say min
40:42 - operand and Max uprant okay we'll say
40:47 - for the Min maybe we'll have a Min value
40:48 - of three and for the max goes something
40:50 - like 12.
40:52 - for The Operators I'm going to use a
40:54 - string and I'm going to put in python
40:57 - operators okay it's important that these
40:58 - are ones that could actually be used in
41:00 - Python because I'm going to show you the
41:02 - way that we'll actually figure out what
41:04 - the answer is this is not going to be
41:06 - that long of a project but it'll show
41:07 - you a cool function that you might not
41:09 - have seen before in Python so what we're
41:11 - going to do is write a function called
41:14 - generate problem okay
41:18 - now what this is going to do is generate
41:19 - a problem for us that uses one of these
41:21 - operators and then a random operand on
41:23 - the left and right side
41:25 - so we're going to say left is equal to
41:27 - random dot Rand int and this is going to
41:30 - be the Min operand and the max operand
41:33 - we're then going to say right is equal
41:36 - to random dot Rand int
41:39 - and again the main operand and the max
41:42 - Opera now I'm actually going to remove
41:43 - the vision because I'm realizing that
41:45 - the way I'm going to write this is not
41:47 - going to work too well with division we
41:48 - need like a separate set of parameters
41:49 - so for now we'll just use these three
41:51 - operations which I think is fine
41:53 - okay we're then going to randomly select
41:55 - an operator
41:56 - so we're going to say operator is equal
41:58 - to random and there's actually this
42:00 - function called Choice what this does is
42:02 - just randomly pick one of the elements
42:04 - from a list so I can say random not
42:05 - Choice operators and that'll just give
42:07 - me randomly one of these then I'm going
42:09 - to say my expression which is XPR or
42:12 - expr here is going to be equal to the
42:14 - left Plus
42:16 - the right plus the operator however
42:20 - I need my left to be a string
42:23 - and I need my right to be a string okay
42:25 - so
42:28 - this is going to give us the expression
42:29 - which will be the left hand side plus
42:31 - the right hand side and what we'll
42:33 - actually do is we'll just add a space in
42:36 - between here so I can print this out and
42:38 - you can just see kind of what it looks
42:39 - like
42:40 - so let's add a space
42:43 - like that okay so now let's call
42:45 - generate problem
42:46 - and let's just print out
42:49 - the expression
42:50 - and then return it
42:52 - just so we can see what that is okay so
42:55 - clear and python project three and I got
43:00 - an error can only concatenate string not
43:02 - into to string okay ah sorry that's
43:05 - because I put this in the wrong order so
43:06 - operand
43:08 - or operator sorry plus
43:11 - the right okay
43:13 - so let's fix this and run again
43:16 - and we get 12 plus 9. let's run a few
43:18 - more times and you can see we're kind of
43:20 - getting random operands and random
43:21 - values sweet
43:23 - all right that's working
43:25 - now the question becomes okay we
43:27 - randomly generated this but we need to
43:29 - know what the answer is right
43:31 - since we're randomly generating it it
43:33 - becomes a bit more difficult to
43:34 - calculate the answer now what we could
43:36 - do is just use a bunch of if statements
43:38 - right and I can say if the operand is
43:40 - plus add them together if it's minus
43:43 - subtract them if it's multiplication
43:44 - multiply them that's fine
43:47 - however I want to make this a bit more
43:49 - Dynamic such that we can kind of make
43:52 - this a bit larger and we don't have to
43:53 - do all those if statements now the way
43:55 - to do that
43:56 - so we'd actually do this
43:58 - we can say answer
44:00 - is equal to a function called eval
44:02 - now what eval does is evaluate a string
44:05 - as if it was a python expression now
44:08 - notice we have an expression that is
44:11 - valid python code like 6 minus 12 is
44:14 - valid code that we can evaluate so all I
44:16 - have to do is put this expression inside
44:19 - of the evaluation and it actually just
44:21 - tells me what the answer is so now what
44:23 - I can do is I can return my expression
44:27 - and the answer like that
44:30 - and if I go here and say expr answer is
44:34 - equal to that I can print them out so I
44:37 - can print the expression excuse me there
44:39 - sorry but I can print the expression and
44:41 - the answer and will tell me what it is
44:43 - so I'm just showing you how we can kind
44:45 - of avoid having like if it's this do
44:47 - this otherwise do this that's fine
44:49 - that's valid to it to evaluate it that
44:50 - way but we can use this eval function so
44:53 - if I run this I get 7 minus 3 that's 4
44:55 - right 12 minus 4 8 10 plus 5 15. so I
44:59 - figured you guys would find this eval
45:01 - function kind of cool
45:02 - hence why I wanted to show it to you
45:04 - alright so that is our generate problem
45:06 - and that's really most of the coding
45:08 - done what we need to do now is determine
45:11 - the total number of problems we then
45:13 - essentially need to set the timer when
45:14 - the user begins and we need to ask them
45:16 - to answer it right so what I'm going to
45:18 - do is say total problems
45:22 - is equal to 10. set this to whatever you
45:24 - want but the idea is I'm putting all of
45:26 - these capital or all capital variables
45:28 - at the top of my program these are
45:30 - constants meaning they're not going to
45:32 - change and we can simply change them
45:34 - around like once we're kind of going to
45:36 - run the program a second third time to
45:38 - make this more challenging easier like
45:40 - we can set the parameters of the program
45:42 - from these variables right up here
45:45 - okay so now that we have that what we'll
45:48 - do to begin is we'll kind of just ask
45:49 - them the number of problems then we'll
45:51 - set up the timer
45:52 - so we're going to say four
45:55 - I in range and then this will be the
45:59 - total problems
46:01 - and then we'll print
46:02 - something like this we're going to say
46:04 - expression answer is equal to generate
46:07 - problem so that gets us a unique problem
46:09 - we're then going to print
46:12 - problem number
46:15 - and then we'll say plus I plus 1
46:19 - inside of parentheses and this will need
46:21 - to be a string so what we're doing is
46:23 - we're converting I plus 1 to a string so
46:25 - it'll be like problem one problem two
46:27 - problem three so they know
46:28 - then we're going to say plus a colon now
46:31 - notice the reason I'm using pluses here
46:33 - is because I don't want to have a space
46:34 - between my different values I just want
46:36 - to have them kind of inline so I'm
46:38 - saying problem number one colon space
46:41 - plus and then the expression okay and
46:45 - then we'll put
46:46 - actually
46:48 - I'm realizing we're going to put this
46:50 - inside of an input statement sorry so
46:51 - we're going to switch this around
46:53 - and we're going to say
46:55 - guess
46:56 - is equal
46:58 - to input and then we'll have plus the
47:00 - expression plus a equal sign like that
47:04 - so now what we're doing is we're saying
47:05 - okay problem number one here's the
47:07 - expression so here's the problem
47:09 - equals and then the user can type in
47:10 - their answer and then what we'll do is
47:12 - we'll keep asking them this until they
47:14 - get it correct
47:16 - sweet so then inside of here we'll do a
47:18 - while loop and we'll say while true
47:20 - we'll do this
47:22 - we'll say if guess
47:24 - is equal to answer
47:27 - then we will break
47:30 - now the thing is our answer is going to
47:33 - be an integer but our guess is going to
47:35 - be a string so we're going to convert r
47:39 - into a string
47:42 - so we can compare the same types because
47:44 - if you compare an INT to a string even
47:46 - if they're the same value like the
47:48 - string 10 the number 10 is going to say
47:50 - false now I want to convert the answer
47:52 - to a string not the guess to an INT
47:54 - because if I tried to convert the guess
47:55 - to an INT to match the answer type and
47:57 - they had typed in something that wasn't
47:59 - a valid int then that would crash my
48:01 - program which I don't want so this way
48:02 - I'm kind of solving for that I'm going
48:04 - to make sure that I don't have any
48:05 - potential crashes okay so if they get a
48:08 - right break otherwise we're just going
48:10 - to keep asking it to them we don't need
48:11 - to give them any feedback they can just
48:12 - keep attempting the answer okay
48:15 - so that's good and I think that's
48:18 - actually going to be it for all of our
48:20 - problems all right so let's run this now
48:22 - give this a shot now I'm about to
48:24 - embarrass myself I haven't done math in
48:25 - so long so let's hope it gives me some
48:27 - easy ones okay
48:29 - nine
48:31 - five five times eight forty okay 20 10 8
48:37 - times 7 I always mess these ones up uh
48:40 - not 64.56 okay
48:43 - 88 and there we go we finish the
48:46 - problems all right so that was actually
48:48 - pretty good did I get any wrong no I
48:49 - didn't okay let's try it again let's get
48:51 - one wrong this time and no this is going
48:53 - to keep asking until we get this correct
48:55 - and then we continue I'm just gonna hit
48:57 - Ctrl C to exit out of that and now what
48:59 - we'll do is we'll set up the timer now I
49:02 - would love to make it so the timer like
49:04 - it shows you the timer it's gonna be a
49:06 - little bit difficult to do without going
49:08 - into some more advanced code so what
49:09 - we'll do is we'll just start the timer
49:11 - as soon as they say like they're ready
49:12 - to start and then we'll tell them what
49:14 - their time was at the end and we can
49:15 - also tell them like number of correct
49:16 - answers
49:17 - so let's do something like this
49:19 - we'll say
49:22 - wrong
49:24 - is equal to zero and every time they get
49:26 - it wrong
49:27 - so we can just go here and say wrong
49:29 - plus equals one and then that way we can
49:32 - tell them kind of what their accuracy
49:33 - was
49:34 - at the end all right so wrong we're also
49:37 - going to import time
49:40 - all right and now before we start doing
49:42 - all of this we just want to ask them
49:44 - like okay are you ready to begin as soon
49:46 - as they hit enter then we start the
49:48 - timer just they have a second to like
49:49 - gather themselves before it begins so
49:51 - I'm going to say input I'm going to say
49:53 - press enter to start
49:57 - okay really they can press anything they
49:59 - want and it's going to continue as long
50:00 - as they go to the next line so they can
50:02 - type something in if they want doesn't
50:03 - matter so press enter to start we'll
50:05 - print out
50:06 - like this okay
50:08 - and then it will begin and I'm just
50:09 - going to take this and print it once
50:11 - they're done
50:12 - and then we'll print
50:15 - nice work and then whatever else we want
50:17 - to do okay so as soon as we do this so
50:19 - as soon as they hit input we're going to
50:21 - start the time now I imported this time
50:22 - module and what I can do is I can say
50:25 - the start time is equal to time.time now
50:29 - this is going to give me what's known as
50:30 - the Unix time yeah I think it's that's
50:32 - what it's called let's see here so
50:33 - actually sorry it says return the
50:35 - current time in seconds since the epoch
50:37 - don't worry too much about exactly what
50:39 - that means but it's going to give us
50:40 - some kind of time stamp in seconds so
50:42 - what we do is we kind of Mark the start
50:44 - time then we just need to figure out
50:45 - what time they ended at and we subtract
50:47 - the two times and that tells us the
50:49 - total amount of time so as soon as they
50:51 - finish the for Loop here we say end time
50:53 - is equal to time.time and then we just
50:57 - say
50:57 - total time is equal to the end time
51:01 - minus the start time and then we can
51:04 - print out how long it took them so we'll
51:06 - do that down here nice work
51:08 - you finished in comma total time
51:14 - and we'll do comma
51:17 - seconds like that now we could parse
51:19 - this and do minutes hours Etc but I
51:21 - think just doing the number of seconds
51:22 - is fine and that will be our program
51:26 - okay let's give this a shot
51:28 - so run the code press enter to start
51:30 - okay so that's 80 that is 17 negative 2.
51:37 - negative 6 11
51:40 - 77 fortunately it's giving me some easy
51:43 - ones here 16 negative 3
51:47 - 36. okay nice work you finished in 16.95
51:50 - blah blah whatever seconds we could
51:52 - probably round this off if we wanted to
51:53 - to make it a little bit better so let's
51:55 - do that
51:56 - and we will take this
51:58 - and round this to the nearest two digits
52:02 - okay let's do this one more time see if
52:05 - we can beat our time of 16 seconds that
52:07 - was pretty fast I don't know if I'm
52:09 - gonna be able to do that
52:10 - Okay negative two negative one negative
52:14 - one oh what am I think one okay
52:15 - definitely not gonna win Now 49 14 30.
52:21 - negative 4
52:23 - 12 0 10
52:27 - 21 17 oh I was pretty close even with
52:29 - that mistake I was reading it as 7 minus
52:32 - eight not eight minus seven hence why I
52:34 - made the mistake three times anyways
52:36 - that was pretty good all right so that
52:37 - completes our program and all of our
52:40 - projects now I realize I kind of ended
52:43 - up doing the projects in the reverse
52:44 - difficulty order where the first one was
52:46 - the hardest second was medium last one
52:48 - was the easiest anyways I actually had a
52:51 - lot of fun building these projects like
52:52 - I said I haven't done any of them before
52:54 - I hope that you guys enjoyed this video
52:55 - as well and uh kind of got the taste for
52:58 - how I write code how I come up with the
53:00 - solution how I break this down to be
53:02 - honest this is relatively simple for me
53:04 - a lot of this you know doesn't require a
53:05 - ton of thought but I hope for you guys
53:07 - that it was valuable and you can kind of
53:09 - see how you even make variable names how
53:11 - you structure things into functions I
53:13 - could clean this code up and make it a
53:15 - lot better but I wanted to kind of you
53:17 - know blur the line between you know what
53:19 - could be expected of a more beginner
53:21 - programmer and what are some better
53:22 - practices when it comes to coding if you
53:25 - guys want any of the code it will be
53:26 - available from the link in the
53:27 - description let me know if you enjoyed
53:29 - these projects if you extend them if
53:30 - you're working on some other cool
53:31 - projects always love to see your
53:33 - comments again if you guys want to check
53:35 - it out I have that programming course
53:36 - programmingexpert.io that'll be
53:38 - available from the link in the
53:39 - description if you enjoyed make sure to
53:40 - leave a like subscribe the channel and I
53:42 - will see you in the next one
53:47 - foreign
53:51 - [Music]

Cleaned transcript:

if you're a beginner or intermediate python programmer and you're looking for some short fun yet interesting projects to work on then this video is for you what I'll be doing is showing you three unique python projects and I'm going to walk you through the entire process from the beginning to the end that means that I'm going to be coding these completely from scratch I haven't attempted them I haven't looked at them yet and you're going to be able to see my entire thought process how I break down the problem how I attempt to come up with the solution and how I deal with any problems or bugs that occur in my program hopefully you guys will find that valuable and it will make it a lot easier for you to go work on your own projects or to extend these afterwards now one of the projects we're going to build well they will be time stamped down below but the first one is a pig game now this is kind of a dice rolling game where you roll until you get a one and then the next person gets to go then we're gonna work on a Mad Libs generator this means we're gonna have a story with a bunch of words that we're going to ask the user to fill in and the last one will be kind of a timed math quiz where we're going to ask a series of random math question and the user will have to answer them we're going to time them and see what their accuracy was with that said let's go ahead and get started and work on these three unique python projects alright so let's begin here right now I'm inside of Visual Studio code and I've opened up a directory that contains some different python files project 1 Project 2 and project three now you can write your python code wherever you want just make sure you know how to run the code and you can kind of interact with the editor and all of that so I'm sure some of you may be using idle which is the basic python terminal that's completely fine you can write your code there or you can do it in vs code like I have now I'm using python version 3.9 you can use any version you'd like and I'm just going to mention that I am going to assume a little bit of knowledge of python so I know that a lot of you are beginners you may not have even ridden python before but just in the sake of time I'm going to assume you know what a variable is you know print statements inputs for Loops kind of that basic surface level syntax although I will of course explain everything that I'm doing all right let's start with project number one here which is pig I also want to quickly mention I do have a programming course it's called programmingexpert.io if you guys like this style of teaching check it out from the link in the description and you can use discount code Tim the Big Value it has a ton of projects a ton of practice questions and over a hundred unique videos teaching python go Etc so we want to build Pig now first we need to understand what this project is so how does pig work well it is a multiplayer game first of all everyone plays a little bit different but the way that I play is that you essentially get a turn so comes your turn and you get to roll the die when you roll the die you're going to get some number from one to six if you get anything other than one you take that and you add that to the score of your turn so let's say you get a five now you're at five roll it again you get another five you're at ten and you can decide how many times you want to roll the dice now the catch is as soon as you hit a one whatever you got on your roll is gonna be done whatever you got on your turn is is zero like you completely remove the score so you can roll five times three times four times ten times twenty times as much as you want but every additional role you're gambling the possibility of losing your score score so you need to decide when you want to stop as soon as you stop whatever your current score is assuming it's not zero is going to get added to your total score and then you can determine the number of total rolls you want to have or it's whoever reaches like a hundred first or 51st whatever you want to do in our case we'll say like the max score is something like 50 whoever hits 50 First is just the winner of the game okay so how are we going to build this out well let's break down the individual things that we need to do first we need to allow the user to roll the dice this means we need to come up with a way to roll so we have to have some random number generator giving us a number between one and six we then need to ask the user if they want to continue to roll so either roll again or stop their track if they stop their turn we need to take whatever their score is and add that to some total score then we need to constantly check if either player has a score that is above 50 if it is above 50 then we need to end the game and tell someone that they won there's a few other things that are involved but those are the basic steps let's start by generating a random number so what I'm going to do is import the random module now random allows you to Generate random numbers what I'm going to do is just Define a rule function now a function in Python is a reusable block of code you make it using def standing for Define you then put the name of the function and then a set of parentheses we're then going to put inside of here in an indented block after a colon so notice some kind of one tab over any code we want to run whenever we call the function so what I'll do here is I'll say Min or Min value is equal to one max value is equal to 6 and then I'm going to roll the die in between them now there's a few different ways to do this with the random module but I believe we can say roll is equal to and this is going to be random dot Rand and then int like that and then this is going to be the Min value and the maximum value of our die then we're simply going to return Rule now the way the return keyword works is it's going to give whoever called the function this value kind of back it's going to return it to them so if I come down here and I say value is equal to roll the way I call the function is I use my set of parentheses and then I can simply print out the value here and you'll see that if I bring my terminal up and we run the code we get the value three we can run it again we're getting six three six five five two let's see if we can get a one okay it looks like it really doesn't want to give us a one this would have been a fantastic turn okay and there you go we got a one so that would have ended our turn all right there you go that is how we generate a random role okay so now that we have that we want to kind of set up the game and we might Begin by asking how many players are going to be participating and then we can keep track of all the different players maybe we set it to say a maximum of four or something like that so let's go down here I'm just going to zoom out a little bit and let's set up a while loop what we say actually not well we're going to say input so we'll say players is equal to input we're going to say enter the number of players and we'll say kind of one to four like that and then notice I'm putting a space here at the end just so we have a little bit of padding between where the user is going to give us the answer so the idea is we're going to ask the user okay give us some value between one to four then what we need to do is we need to check if this is a valid number so I'm actually going to kind of put a while loop here and I'm going to say while true and then I'm going to put this inside the reason for this is I want to continue to ask the user to input a number until they give me one that's valid so I say while true and then I'm going to break out if they give me a valid number so I'm going to say try or actually we can do the following we can say if players Dot is digit now is digit is going to tell us if this is a digit or not so if it's a number if it's a valid whole number specifically is what it will give us so I'm going to say if players is digit I'm going to say players is equal to int and then players now what this does is convert what's going to be a string here into an integer and the reason I need to check if it's a number first is because if I try to convert a string into an integer and it's not a valid integer it's going to give me an error so I don't want to crash the program so I'm saying okay if this is actually a valid number let's convert it into that number the reason I need to do that is I now need to check if this number is greater than 1 and less than 4. if it is I can then break out of this while loop because I have a valid number of players otherwise I need to continue to keep asking them to enter a valid player so I'm going to say if 1 less than or equal to players less than or equal to four okay then I will simply break what the break keyword will do is immediately exit outside of this while loop meaning we'll have access to the player's variable down here and we can just print out what the number of players is if we don't encounter this break keyword we will continue to ask the user until they give us a valid number of players now we could give them some output and say something like print invalid try again and we could do something here where we say something like prints must be between one to four players and actually it can't even be a one sb2 right so we'll have two to four like that and we'll put a two and we'll put a two because we need to have at least two players to be able to play the game all right so let's try this out let's run our code enter the number of players let's enter one says we need to do it again okay so it didn't actually print anything out um I don't know why that happened oh sorry it's because okay I'll fix that in one second that's an error anyways we enter two it says must be between two to four players which is a mistake and then two so notice I made a bit of an error because I put this inside of the if statement when I wanted to put an else statement here and then put this here because if this is valid we break which means we exit the while loop otherwise we tell them okay that was the error so we just need to make that quick fix there with the if statement okay in case you're confused by the way if statement checks if something is true if it is we kind of enter in this indented block which happens after the colon otherwise we have this else statement which will trigger if the uh if statement is false okay so I'm going to clear and run and let's go one okay it must be between two and four let's go five let's go hello let's go three and we're good to go okay so now we have the number of players and what we want to do is essentially simulate each player's turn where we ask them you know do you want to roll the dice yes or no they tell us yes or no they roll and then we start kind of calculating their score so let's do this first of all let's make some variables here and let's say our Max score is equal to and then we can do something like we'll go with maybe yeah let's go with 50 for now we'd probably want to make that larger but just kind of for the sake of time when we're testing this we'll make it small then we want to have our player underscore scores and what we'll do for our player scores is we'll just have a list which contains all of the individual scores now we don't know if we're gonna have two players three players or four players so we're gonna have this list kind of change size based on the number of players that we have now the way that we can kind of create or initialize this list based on the number of players is we can say 0 4 underscore in and then something like this in range the Len of players now what this is is actually a list comprehension I was thinking of the name there what this does is it essentially puts a zero inside of the list for every single player that we have so what I'm doing is saying for underscore now I could put I here but the thing is I don't actually care about what the variable is I just want to do this the number of player times so I can put an underscore essentially saying hey I don't really care what the variable is so like you know we need to have something there but I'm just going to put an underscore because I don't really want to use this and then I'm going to say in range the Lan of players so what this range function will do is Loop the number of players with the length of actually sorry we don't need Len just players here it will Loop the number of players times that we have notice that our players is going to be an INT right so if it's three this will happen three times if it's four it will happen four times Etc ignore the Len that I had there I don't know why I put that there just a silly mistake okay so now we can print out our player scores and you'll see that we'll get an array filled with zeros based on number of players that we have so if we do three gives us three zeros if we run it again four we get four zeros so now we are able to store each of our players scores inside of this array fantastic okay now we need to go through our player terms so we're essentially going to say wow the maximum of our player scores is less than the max score then we'll keep looping now what Max will do is give us the maximum value from this array or from this list so if it's 23 gives us 23 if it's 55 gives us that we're saying okay as long as it's less than the maximum score means no one's reached the max we'll keep going as soon as someone does reach the maximum score we need to stop and then tell the user whatever the um sorry tell the players whoever kind of won the game all right how we gonna do this uh well let's go here and we will say first of all roll we'll say should underscore rule is equal to input and we'll say would you like to roll question mark and we're just going to put here A Y which means we want the user to input the key y so then we can come here we can say if should roll dot lower is equal to Y the reason I'm converting this to lowercase which is what dot lower does is because if they enter a capital Y I still want them to roll right so this is just checking is it capital or lowercase doesn't matter we're going to convert it to lowercase and then check if it's equal to the lowercase y if it is then we're going to roll the dice for them so we're going to say roll is equal to and actually I can't use roll because let's name my function so I'm going to say value is equal to roll okay otherwise I'm simply going to break and actually a better way to do this is going to be a little bit cleaner for me is I'm going to say if should roll.lower does not equal y then I will break out otherwise I will say my value is equal to the rule so the reason I'm doing this is because I want to have all my code kind of not indented if I don't have to have it indented so I'm saying okay if you didn't hit Y that means we're just going to stop your turn otherwise we're going to roll the dice now there's a lot more code we're going to need to write but I'm just kind of going through this um you know as I normally would and then we'll kind of stop and fix things since we need to so we're going to grab that rule and we're going to check if that rule is equal to one if it is equal to one then whenever the player's current score is is just going to become zero and we're going to move to the next person's turn now we still need to simulate the terms and all of that which we'll do in a minute but for now just kind of bear with me so we're going to say if value is equal to zero then we can simply say print or sorry not zero I'm going to say you rolled a one turn done exclamation point otherwise we'll print you rolled a and then whatever the rule is so we can say something like actually value like that okay so let's put a colon U rolled uh and then whatever the value is all right so now that we have this we're kind of printing out what they ruled I'm just going to go up here and I'm going to Mark the current score equal to zero because we need something to keep track of what the player's score is now if they didn't roll a one then what I'm going to do is I'm going to say the current score plus equals whatever the value of the die was I'm going to tell them what they rolled and then down here I'm just going to print your current or your score is and then we'll print out whatever the current score is and then we'll kind of continue now here I'm just going to break this because the idea is all right well if you roll to one your turn's done so we're gonna break out all right so this kind of simulates ones per one person's turn story but again we haven't really kind of handled uh the fact that we have multiple people going at once and allowing someone's turn to continue multiple times so what we actually need to do is we need to use a for Loop here what we'll do is we'll put a for Loop kind of right here and we'll say four I in range players so I is going to represent the current player so we'll say player underscore index or player idx so player zero one two three or player one two three four whatever you want to call it and in this for Loop we'll then simulate one person's entire term so we'll mark the current score but then all of the stuff that's going on here needs to happen until the player stops their turn so what we'll do is we'll have a wall Loop and we'll say while true and then we'll put all of this here then outside of the while loop we're going to say that the player underscore scores at index player idx is going to be plus equal to whatever their current score is so like the current score is kind of the score per turn and then the total score is what we're going to be adding to after they finish their turn so what we'll do after we add that is we'll say print your total score is colon and then we will say that this is going to be the player scores at the player idx okay we'll go through this again in one second but for now I we're making good progress on the terms all right so I'm just reading through this uh it's looking okay however I'm realizing that if the value is 1 then we're going to have to set the current score equal to zero just so we make sure we don't add what their score was before they rolled a one all right so let's kind of run through this here we have our for Loop we say four player index in range players which means We're looping over all of our different players so they each get a turn we probably want to print out something like player and then let's say player idx plus one turn has just started just they know that it's now their turn and what I'm going to do is print a backslash n right here and a backslash n what this is going to do is just add a line break so that we have a bit of Separation when the player's turn starts so we say okay player and then we're doing plus one because this is going to be zero one two three well we probably want to show one two three four so that's what we're showing so we say player whatever it is turn has just started we can say player number turn has just started okay we said the current score equal to zero for the turn we simulate the turn we ask them if they'd like to roll if they say yes or if they don't say yes sorry we break out otherwise we rule if they get a one we say they roll to one their turn is done their current score is zero we break out otherwise we take whatever the current score is and we add to that the value that they rolled because it wasn't a one and then we continue this whole process again so we tell them this is what you rolled and then we say your current score is this which is going to be the sum of what they rolled plus you know what their current score is okay then eventually we're going to get outside of this while loop when they roll one or when they tell us that they don't want to roll anymore we're going to take that score add that to their total score and then print that out now we're not quite finished but this will simulate most of the game so far all we really need to do is determine when someone wins so let's zoom out a bit just so we can kind of read most of what we have here we have our role function we ask the player or we asked to input the number of players we want we have the maximum score generate kind of an empty list for storing the scores and then we have this code which is going to simulate the terms let's run this and see what we get here okay so let's zoom in a bit enter the number of players let's go with two player number one turn has started okay would you like to roll yes you roll the six your score is six would you like to roll yes you rule to four your score is 10 would you like to roll okay yes let's keep rolling yes yes yes yes I'm trying to get a one here and it says you roll to one your turn is done yours total score is zero player two staring at sorry would you like to roll yes five okay let's roll again and we roll the one all right and you'll see that we can continue this right so I'm gonna try to get a pretty high score although this isn't working too well for me okay let's stop rolling there now our total score is 15 player two Stern okay yes yes yes yes yes yes yes really gambling here okay let's stop the roll okay yes roll to six your score is six yes yes yes yes yes no okay total score 42 let's roll roll roll and no total score is 51 and then notice the program ends here because all of the players turns have finished and someone had a score of 51. so we end we should really be telling them you know that you won which is what we're gonna do now but that kind of simulates the program there's a few things we'd probably want to do to make this a bit better for example at the beginning of the turn we should probably tell them what their score is so that they know that before they go into the turn so they can stop um you know once they hit what the max score is okay so let's do this uh we're gonna say player one's turn has just started and then we're going to print here your total score is colon and then the player scores at the player idx okay and then we're going to begin the turn so we can actually just remove that backslash n and we'll just put one right here just so that we kind of go one line down okay do all of this and then as soon as this ends what that tells us is that at least one player has a score above 50. now multiple players can have a square above 50 and the reason this works is as soon as someone hits 50 we don't end until every player gets to turn the reason why that's fair is because whoever goes first would have an advantage so in this case we let everyone have at least that last Rule and then we see whoever has the max score after the last roll so what we can do now is we can just find what that maximum score is we can actually get the index of that score inside of our player's scores and that will tell us which player won so the way we do this is we simply say Max score is equal to the max of our player's scores and then we're going to say player winning idx is equal to or actually we can just say winning idx is equal to the player's scores dot index and we can index the maximum score what that does is give us the index either 0 1 2 or 3 of where that maximum score is which tells us player zero player one player two Etc so then we can just print player comma winning index plus one so we'll say player number and the reason we're adding one is because again we're going to start at zero so we want to make sure we're going from one to four not zero to three and we'll say is the winner with a score of colon and then what the maximum score was okay so that should wrap up the game let's give this one last run here okay Enter the number of players let's go with two player number one's turn is just started your total score is zero would you like to roll yes roll to five let's roll again roll again roll again and no okay 16 would you like to roll yes okay that ended fast you like to roll yes yes yes yes yes no okay and Toes score is zero would you like to roll yes yes yes yes yes yes yes okay yes yes and no okay now it's player two's turn so let's roll yes okay that ended fast yes okay now we have the max score so let's say no player two still gets a turn even though we now have a score 51 I'm just gonna say no and it says player number one is the winner with a score of 51. okay so that completes that first project all of this code will be available from the link in the description by the way in case you want to download this it'll kind of scroll through it quickly so you can get a sense of how we wrote this that was Project one hopefully you found that interesting and useful now let's move on to project number two alright for project number two we're gonna do that Mad Libs generator the idea is we'll have some type of story this story will have replaceable words like an adjective or a location or a weather condition whatever it may be what we'll then do is we'll ask the user to give us all of the different words we'll then inject them in the story and then read the story back out to the user now the first thing we're going to need for this is a story so the process as I kind of described there is have a story with those injectable words essentially grab what those words are ask the user to input them and then place them in the story now I'm going to show you that there's a lot easier way to do what I'm about to do or I'm going to mention this a lot easier way to do what I'm going to do but I want to show you a way that we can do it with any story so that means that you can make this program really Dynamic and you could have like 20 stories 50 stories 100 stories or you can just replace them without having to write any additional code the way we're going to do that is by taking the story and placing it inside of a text file that way as long as the story is written in a specific format we can read in the story do the operations we need to and then kind of run the program as we see fit now what I always do whenever I need something like this is I don't write it from scratch because I'm a lazy programmer I go to chatgpt so what I actually did here is I asked it using this prompt I'm making a Madlibs generator in Python let's make this full screen I'm going to need a story where the user can give me some words can you give me the story or even though I spelled that correctly and for all of the words where the user needs to give them to me make them like this angle bracket word now it gave me a nice long story and it had all the different words and it kind of listed them all out that was a bit long for me so I said that's okay but can you make it in less words please and then it gave me uh kind of a shorter story so the idea here is that whenever we have these angle brackets we're going to kind of treat that as a word that needs to be replaced so what we'll do is we'll take this story from chat EBT so I'm just going to copy this on my clipboard we'll put it in a text file we'll load that story in for all of those individual words we'll then kind of grab them figure out what they are ask the user to give us a word for them and then replace them in the story all right how do we want to do this well the way I will do this is I will copy that first of all and I will go here to vs code I will make a file called story.txt and I will paste that inside of here now make sure when you do this that you put your story in the same directory where your python file is so here I have project 2. pi and I have story.txt in the same directory very important that you do that otherwise this isn't going to work for you okay and if you want this story you can go click the link in the description and just download the story from GitHub I'll make it available for you um after okay so how do we do this first thing we need to do is load this in now I want to load this in as a string essentially and then be able to kind of parse through that string and look for all of those different words now there's a few ways to do this but the way I will do this is I will say with open I'm going to open story.txt in read mode as F and I'm going to put a cooling now what I've done here is I've used the open function and the open function allows me to open a file so I can open a text file a Json file really any type of file I want and the mode here which is what I've placed second is the way in which we're kind of reading it in so I'm going to read it in in read mode which is R mode if I put W this stands for right mode where we'd actually be creating a new file and overriding a file if it already existed with the same name so we don't want to use W mode we want to use R mode this now allows me to read this story.txt file in and the reason I'm using this with syntax is what this does is provide something known as a context for this file which means I can do any file operations on this variable F inside of this indented block and as soon as I get outside of that indented block python is automatically going to clean up the file for me which means it will close it and make sure everything's good with the file it's kind of best practice in terms of opening files here so what I'm going to do is say my story is equal to F dot read now when I do dot read all this does is give me all of the text inside of the file so I can simply print out story here and you'll see if I run this that I get my story appearing here in my term okay so now that we've read that in what I would like to do is look for all of the words in my story now there's a bunch of different ways to do this but essentially what we need to do is find the presence of this angle bracket as soon as we find that we want to find up to this closing bracket right so we want to find every individual word take that word store that in some kind of list that we're going to have access to ask the user to give us a word to replace it with and then go and replace all of the instances of this word with whatever the user told us okay so let's do that what we want to do is a loop through our story now our string we can actually access all of the individual characters as an index so what I can do let's zoom in here I say for I comma character in enumerate and we're going to enumerate the story now what enumerate does is give us access to the position as well as the element at that position just makes it a little bit cleaner for us here so now I'm just going to check essentially if this is equal to an angle bracket if it is equal to an angle bracket then I kind of need to do something to Mark the fact that I found the start of a word and then I need to go until I find the end of it so we're going to set up a few variables here and we're going to say words is equal to this because we want to store what all of these different words are and then what should we do here we should say start of word is equal to negative one okay so we're going to have this variable and this variable is pretty much going to tell us if we've currently found the starting index of a word if we have that means we can then look for the end if we haven't then we're going to wait until we find that starting index so what we'll do here is we'll say if Char is equal to and I'm going to make another variable I'm going to call this Target underscore start this is going to be equal to the open angle bracket I'm going to have my target ends equal to the closing angle bracket just so that if we were to change the format of the story we could easily adjust this by changing the value of the variables so I'm going to say if the Char is equal to the Target start then what I'll do is I'll say the start of the word is equal to index I so if I found that opening angle bracket okay we just found the beginning of the word let's mark that by indicating that in our variable now what we'll do is we'll say if the Char is equal to the Target end and the start of word does not equal negative one the reason why we're doing this is we're saying if we found the ending angle bracket and we had the starting angle bracket right which will be marked by the start of word variable which if it's equal to negative one means we haven't yet found the beginning if it's equal to anything else that means we did find the beginning then we can take that entire word and add that to our words list so what we'll do now is we'll say word is equal to and this is going to be story at index start of word up to the index I plus 1. now what this gives us access to is a slice which is a subsection of the string so this is the slice operator here in Python where we indicate the starting character so the character we want to begin taking a slice from and then the ending character that we're going to go up to but not including or the ending index so in this case we know the start of the word so we put that here and we know the end of the word because that's the current index that we're on that we just found but we need to add one to it to make sure that we include this ending index in our word so we're going to grab that we're going to put that inside of our uh word or word variable sorry we're going to say words dot append word which means we're going to now add this word into our words list and then we're going to set our start of word equal to negative one because we've now found one whole word so now we reset the start of word so we're ready to handle it for the next uh character that we find which is that opening angle bracket so this code here will actually find all the different words for us in the story so let's test this by printing our words okay let's run the code and I think my terminal is a little bit cut off but you can see that we get all of the different words now what you might notice here is that we have duplicated words now the reason we have duplicated words is because this word could appear multiple different times now that's fine if it does but I only want to have the words that are unique now the way that we can essentially do this is we can change from using a list and instead we can use a set now a set is a data structure which will only contain unique elements so if I add the same element in it's not going to do anything we just have one instance of each unique element the way to do that is just to write set here instead of a list and then rather than append we're just going to say add now add we'll just add this to the set and you'll see now that when we run this we'll just get all of the different unique words perfect okay now that we have those words what we want to do is ask the user to give us a value for each of the words so the way we'll do this is we'll set up a dictionary so we're going to say answers is equal to a dictionary the idea is we want to have the word as the key so something like name and then the value in our dictionary will be whatever answer they gave us so something like temp the reason we'll do this is so we can very easily look up the value of a word so we say name Tim blah blah okay and then what we'll do is we'll take whatever these values are and replace them in our story later on the way the dictionary works is you add a key by doing something like this answer is key is equal to and then whatever the value you want and you can access the key by just using the square bracket syntax like this okay so we have our answers this is going to be empty dictionary what we'll now do is we'll Loop through all of the unique words that we have and we'll ask the user to give us a value for them so we're going to say forward inwards iterating through our set and we're going to say answer is equal to input enter a word for and then we're gonna do Plus and then whatever the word is now notice we can't do a comma here because we're using the input statement not the print statement so we need to concatenate which means add two strings together so we take the word add it to enter word four and then we can just put here a colon with a space at the end so that the user knows where to start writing okay so that gives us an answer we're then going to say answers at word is equal to answer and let's spell answers correctly okay that will now create a dictionary that has all the words associated with all of the values so let's now print out answers okay so let's come here it says enter a word for object uh let's go something like chair weather condition Sunny adverb uh I don't know let's see gently place School emotion two sad animal bear place to um I don't know house Terrain what is this grass okay character Tim adjective one jumps emotion happy and there you go it gives us now all of the different words and their answers now that we have that we can take every single instance of these words and essentially kind of replace them in the story so now we're gonna have another for Loop and we're going to say forward in words now the great thing in Python is that we have this method called replace all or replace I don't know which one is I think it's replace all either way what this is going to do is replace every single instance of one string with another so that's super convenient for us because we know this string we want to look at which is that kind of angle bracket and we want to replace that with our answer so now what we'll do is we'll simply say story dot replace I think this replaces all instances of it we're going to check that in one second and we're going to replace our word which is that angle bracket string with the answers of our word and then we can just print out our story and we'll be good we'll have the entire program finished so let me quickly run through the code and then I'll show you how this works so we open up our story.txt we read this in we create a set of all of our unique words we then say the start of the word is equal to negative one we have our Target uh kind of opening bracket Target closing bracket and this first block of code here goes and locates all of the different words that are inside of our story so we say for I character and enumerate story getting the index as well as the value we say if the character is equal to that starting kind of open angle bracket let's mark that by saying the start of word is equal to I then down here if we found the ending bracket and we have the start of a word we've just found the end of the word so now what we can do is grab that word using our slice syntax add that to our set and then reset start of word then we have all of our words so we need to generate an answer for them which we asked the user to do and then we simply go through and replace all of the instances of our word with the answer the user gave us awesome let's give this a shot let's make this full screen and run animal bear adverb gently character Tim I probably should do lowercase four but that's fine weather condition Sunny terrain grass place School adjective one um I don't know throw emotion two sad place two let's go with soccer field emotion happy object chair okay and unfortunately it seems as though this actually didn't work so I'm gonna have to look at what the problem was here ah I already know what the issue so I said story don't replace however what this does is this gives me a new string so what I was doing is I was just kind of generating a string that I wasn't storing anywhere so story didn't change this gives me a new string so what I actually need to do here is say story is equal to and then story dialer place and then do this now there's more efficient ways to go about doing this but this will be perfectly fine for our purposes so if we fix this up now and let's save that so again just we kind of are now changing the story every time by updating that variable what I'll do is run this again motion sad adjective throw character Tim place School terrain grass place two soccer field object chair adverb gently motion sad animal bear weather condition Sunny okay in the throw land of school oh adjective okay I I probably used the wrong thing for an adjective there anyways in the throw land of school a bear was feeling sad the bear had lost its chair suddenly a Tim appeared I will help you find the chair they said together they journeyed through grass and face the sunny okay I probably should have said like raining or something finally they found the chair in a soccer field the bear was so sad and thanked the Tim they lived gently Ever After all right you know what that's not so bad I think there was a few uh words that are probably messed up writing but there we go we get the story and yeah there you are now if you wanted to you could store that in a text file but I think that that pretty much wraps up this project that was pretty cool and obviously if you kind of change the story around give some better words you could get some pretty interesting results there regardless hope you guys enjoyed let's move to the next project alright so let's get into project three now the idea for project three is we want to randomly generate a bunch of different math questions ask the user those questions and then not let them continue until they get it correct well then time how long it takes them to answer all of the questions so the first thing we need to do is be able to randomly generate these problems now there's much different parameters we can use right we have a set of operators we can use it's like plus minus addition multiplication we can even use exponent and stuff if we wanted to and then we have kind of the max values as the Opera Ranch like the min max value Etc so what I'm going to do is write a few variables that we'll use as constants that we can change that will make this either easier or harder depending on what you want to do now first of all we're going to need the random because we're going to be randomly generating operands then we're going to need the operators so I'm actually going to do this in all capitals I'm going to say operators is equal to this and I'm going to say min operand and Max uprant okay we'll say for the Min maybe we'll have a Min value of three and for the max goes something like 12. for The Operators I'm going to use a string and I'm going to put in python operators okay it's important that these are ones that could actually be used in Python because I'm going to show you the way that we'll actually figure out what the answer is this is not going to be that long of a project but it'll show you a cool function that you might not have seen before in Python so what we're going to do is write a function called generate problem okay now what this is going to do is generate a problem for us that uses one of these operators and then a random operand on the left and right side so we're going to say left is equal to random dot Rand int and this is going to be the Min operand and the max operand we're then going to say right is equal to random dot Rand int and again the main operand and the max Opera now I'm actually going to remove the vision because I'm realizing that the way I'm going to write this is not going to work too well with division we need like a separate set of parameters so for now we'll just use these three operations which I think is fine okay we're then going to randomly select an operator so we're going to say operator is equal to random and there's actually this function called Choice what this does is just randomly pick one of the elements from a list so I can say random not Choice operators and that'll just give me randomly one of these then I'm going to say my expression which is XPR or expr here is going to be equal to the left Plus the right plus the operator however I need my left to be a string and I need my right to be a string okay so this is going to give us the expression which will be the left hand side plus the right hand side and what we'll actually do is we'll just add a space in between here so I can print this out and you can just see kind of what it looks like so let's add a space like that okay so now let's call generate problem and let's just print out the expression and then return it just so we can see what that is okay so clear and python project three and I got an error can only concatenate string not into to string okay ah sorry that's because I put this in the wrong order so operand or operator sorry plus the right okay so let's fix this and run again and we get 12 plus 9. let's run a few more times and you can see we're kind of getting random operands and random values sweet all right that's working now the question becomes okay we randomly generated this but we need to know what the answer is right since we're randomly generating it it becomes a bit more difficult to calculate the answer now what we could do is just use a bunch of if statements right and I can say if the operand is plus add them together if it's minus subtract them if it's multiplication multiply them that's fine however I want to make this a bit more Dynamic such that we can kind of make this a bit larger and we don't have to do all those if statements now the way to do that so we'd actually do this we can say answer is equal to a function called eval now what eval does is evaluate a string as if it was a python expression now notice we have an expression that is valid python code like 6 minus 12 is valid code that we can evaluate so all I have to do is put this expression inside of the evaluation and it actually just tells me what the answer is so now what I can do is I can return my expression and the answer like that and if I go here and say expr answer is equal to that I can print them out so I can print the expression excuse me there sorry but I can print the expression and the answer and will tell me what it is so I'm just showing you how we can kind of avoid having like if it's this do this otherwise do this that's fine that's valid to it to evaluate it that way but we can use this eval function so if I run this I get 7 minus 3 that's 4 right 12 minus 4 8 10 plus 5 15. so I figured you guys would find this eval function kind of cool hence why I wanted to show it to you alright so that is our generate problem and that's really most of the coding done what we need to do now is determine the total number of problems we then essentially need to set the timer when the user begins and we need to ask them to answer it right so what I'm going to do is say total problems is equal to 10. set this to whatever you want but the idea is I'm putting all of these capital or all capital variables at the top of my program these are constants meaning they're not going to change and we can simply change them around like once we're kind of going to run the program a second third time to make this more challenging easier like we can set the parameters of the program from these variables right up here okay so now that we have that what we'll do to begin is we'll kind of just ask them the number of problems then we'll set up the timer so we're going to say four I in range and then this will be the total problems and then we'll print something like this we're going to say expression answer is equal to generate problem so that gets us a unique problem we're then going to print problem number and then we'll say plus I plus 1 inside of parentheses and this will need to be a string so what we're doing is we're converting I plus 1 to a string so it'll be like problem one problem two problem three so they know then we're going to say plus a colon now notice the reason I'm using pluses here is because I don't want to have a space between my different values I just want to have them kind of inline so I'm saying problem number one colon space plus and then the expression okay and then we'll put actually I'm realizing we're going to put this inside of an input statement sorry so we're going to switch this around and we're going to say guess is equal to input and then we'll have plus the expression plus a equal sign like that so now what we're doing is we're saying okay problem number one here's the expression so here's the problem equals and then the user can type in their answer and then what we'll do is we'll keep asking them this until they get it correct sweet so then inside of here we'll do a while loop and we'll say while true we'll do this we'll say if guess is equal to answer then we will break now the thing is our answer is going to be an integer but our guess is going to be a string so we're going to convert r into a string so we can compare the same types because if you compare an INT to a string even if they're the same value like the string 10 the number 10 is going to say false now I want to convert the answer to a string not the guess to an INT because if I tried to convert the guess to an INT to match the answer type and they had typed in something that wasn't a valid int then that would crash my program which I don't want so this way I'm kind of solving for that I'm going to make sure that I don't have any potential crashes okay so if they get a right break otherwise we're just going to keep asking it to them we don't need to give them any feedback they can just keep attempting the answer okay so that's good and I think that's actually going to be it for all of our problems all right so let's run this now give this a shot now I'm about to embarrass myself I haven't done math in so long so let's hope it gives me some easy ones okay nine five five times eight forty okay 20 10 8 times 7 I always mess these ones up uh not 64.56 okay 88 and there we go we finish the problems all right so that was actually pretty good did I get any wrong no I didn't okay let's try it again let's get one wrong this time and no this is going to keep asking until we get this correct and then we continue I'm just gonna hit Ctrl C to exit out of that and now what we'll do is we'll set up the timer now I would love to make it so the timer like it shows you the timer it's gonna be a little bit difficult to do without going into some more advanced code so what we'll do is we'll just start the timer as soon as they say like they're ready to start and then we'll tell them what their time was at the end and we can also tell them like number of correct answers so let's do something like this we'll say wrong is equal to zero and every time they get it wrong so we can just go here and say wrong plus equals one and then that way we can tell them kind of what their accuracy was at the end all right so wrong we're also going to import time all right and now before we start doing all of this we just want to ask them like okay are you ready to begin as soon as they hit enter then we start the timer just they have a second to like gather themselves before it begins so I'm going to say input I'm going to say press enter to start okay really they can press anything they want and it's going to continue as long as they go to the next line so they can type something in if they want doesn't matter so press enter to start we'll print out like this okay and then it will begin and I'm just going to take this and print it once they're done and then we'll print nice work and then whatever else we want to do okay so as soon as we do this so as soon as they hit input we're going to start the time now I imported this time module and what I can do is I can say the start time is equal to time.time now this is going to give me what's known as the Unix time yeah I think it's that's what it's called let's see here so actually sorry it says return the current time in seconds since the epoch don't worry too much about exactly what that means but it's going to give us some kind of time stamp in seconds so what we do is we kind of Mark the start time then we just need to figure out what time they ended at and we subtract the two times and that tells us the total amount of time so as soon as they finish the for Loop here we say end time is equal to time.time and then we just say total time is equal to the end time minus the start time and then we can print out how long it took them so we'll do that down here nice work you finished in comma total time and we'll do comma seconds like that now we could parse this and do minutes hours Etc but I think just doing the number of seconds is fine and that will be our program okay let's give this a shot so run the code press enter to start okay so that's 80 that is 17 negative 2. negative 6 11 77 fortunately it's giving me some easy ones here 16 negative 3 36. okay nice work you finished in 16.95 blah blah whatever seconds we could probably round this off if we wanted to to make it a little bit better so let's do that and we will take this and round this to the nearest two digits okay let's do this one more time see if we can beat our time of 16 seconds that was pretty fast I don't know if I'm gonna be able to do that Okay negative two negative one negative one oh what am I think one okay definitely not gonna win Now 49 14 30. negative 4 12 0 10 21 17 oh I was pretty close even with that mistake I was reading it as 7 minus eight not eight minus seven hence why I made the mistake three times anyways that was pretty good all right so that completes our program and all of our projects now I realize I kind of ended up doing the projects in the reverse difficulty order where the first one was the hardest second was medium last one was the easiest anyways I actually had a lot of fun building these projects like I said I haven't done any of them before I hope that you guys enjoyed this video as well and uh kind of got the taste for how I write code how I come up with the solution how I break this down to be honest this is relatively simple for me a lot of this you know doesn't require a ton of thought but I hope for you guys that it was valuable and you can kind of see how you even make variable names how you structure things into functions I could clean this code up and make it a lot better but I wanted to kind of you know blur the line between you know what could be expected of a more beginner programmer and what are some better practices when it comes to coding if you guys want any of the code it will be available from the link in the description let me know if you enjoyed these projects if you extend them if you're working on some other cool projects always love to see your comments again if you guys want to check it out I have that programming course programmingexpert.io that'll be available from the link in the description if you enjoyed make sure to leave a like subscribe the channel and I will see you in the next one foreign
