With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - react tutorial for beginners
00:12 - in this video i'm going to be covering
00:14 - something known as state
00:15 - now state is the data that your
00:17 - application is holding and kind of
00:19 - keeping
00:19 - track of and so in our case here we're
00:21 - going to be implementing state in our
00:23 - different components
00:24 - and while the page our react application
00:26 - has not been refreshed
00:28 - the state will stay the same it will be
00:29 - persistent across our application
00:32 - however as soon as we refresh the react
00:34 - application the state will disappear
00:36 - and we'll talk all about state in this
00:37 - video but just understand that state
00:39 - here is kind of temporary it's stored
00:41 - only in our front end
00:42 - it is not stored in the back end if we
00:45 - were talking about truly persistent data
00:47 - we would want to be storing this data in
00:48 - a database so it's actually stored in
00:50 - some file right on you know file system
00:53 - and can be accessed from anywhere and at
00:55 - any point in time
00:56 - here this is temporary it's only going
00:58 - to stay persistent and
00:59 - you know be the same across our
01:01 - application while our application has
01:03 - not been refreshed
01:04 - and one small note here as well the
01:06 - state that is uh
01:07 - for one client so one person visiting
01:10 - the website
01:10 - will not be the same for everybody so if
01:12 - i have some state on my website
01:14 - and then you go and you visit the
01:16 - website from your computer you're not
01:17 - going to have the same state as me
01:19 - this is kind of local like it's to the
01:21 - client if that makes sense it's not a
01:23 - global state
01:24 - all right hopefully that's clear anyways
01:26 - let me show you how we can implement
01:27 - state and really what that is now the
01:29 - first thing i'm going to do here
01:30 - is i'm actually just going to erase a
01:32 - bunch of stuff because we're going to
01:33 - rewrite a ton so i'm going to remove add
01:35 - item
01:36 - so i need to remove all of the
01:37 - references to it and
01:39 - this info component will keep for now
01:41 - just because it's a class-based
01:42 - component and we'll
01:43 - look at how to implement state in a
01:45 - class-based component later
01:46 - anyways let's go to app.js and let me
01:49 - actually make a new component here
01:51 - and this will be a functional component
01:53 - that's going to have some state
01:54 - so i'm going to say function and let's
01:56 - just make this
01:58 - button state kind of a weird name but
02:02 - again this is just going to be an
02:03 - example that we'll kind of throw away
02:04 - and delete after this is just to
02:06 - understand how state works and then what
02:08 - i'm going to do is return
02:09 - in here and i'm actually going to create
02:12 - two buttons and two
02:13 - text fields so i'm going to say p
02:16 - and in here let's just say i don't know
02:19 - title
02:20 - colon and then we'll put some title
02:22 - there we'll have another p tag
02:23 - and we will say i don't know counter
02:28 - and oops if i can type this counter and
02:30 - then end the tag and then here
02:32 - we will have some state as well now all
02:35 - this needs to be wrapped inside of a div
02:37 - always forget about that so let's take
02:39 - this div tag
02:40 - and put it down here and now let's
02:43 - create two buttons so i'm going to make
02:45 - an input or actually a button
02:50 - like that and then we'll say slash
02:51 - buttons and we'll just say
02:53 - update title okay and then we'll make
02:57 - another button and what this one will
02:59 - say
02:59 - is update counter
03:04 - all right so there we go we have now
03:05 - created our button state component let's
03:07 - just render this on the screen so let's
03:09 - go slash
03:09 - button state and let's
03:13 - see what this looks like refresh and
03:15 - notice we have our title we have our
03:17 - counter we have update
03:18 - title and update counter and when we
03:19 - click these it does nothing
03:21 - so the idea here is that i want to have
03:23 - some state this state
03:25 - is going to uh kind of pertain to this
03:27 - title and this counter
03:28 - and when i press these buttons i want to
03:30 - update the state i want to
03:32 - change it so how do we implement state
03:34 - well these things in react
03:36 - called hooks and what a hook is is kind
03:37 - of a function that's provided by react
03:40 - that you can use to well hook into and
03:42 - kind of modify its behavior
03:44 - so you see what i mean in a second but
03:45 - what we're going to have to do here is
03:46 - import something that allows us to use
03:48 - state
03:48 - it's actually called use state and is
03:52 - imported
03:52 - from react not react dom just from
03:56 - react so whenever you want to set up
03:58 - state in a functional component
03:59 - what you do is you create a constant so
04:01 - you need to use const
04:02 - and then you do these square brackets
04:05 - like this
04:06 - and you define two values first you
04:08 - define the actual variable that's going
04:09 - to store your state
04:10 - and then you define the name of the
04:12 - function that you're going to use to
04:13 - update this state or update this
04:15 - variable
04:15 - so in this case i want a title so i'm
04:17 - going to say title and then i'm going to
04:18 - say
04:19 - set title like that and this is going to
04:21 - be equal to use
04:22 - state now inside of use state you define
04:25 - the default state
04:27 - so in this case i'm just going to make
04:28 - it an empty string so when we start our
04:30 - application
04:31 - title is going to be equal to an empty
04:33 - string and if i want to modify title i
04:35 - use this set title function and you'll
04:37 - see how that works in one minute
04:39 - next i'm going to define my next piece
04:41 - of state which is the counter
04:43 - so i'm just going to say count like that
04:45 - and then i'm going to say
04:46 - set count and make this equal to
04:49 - use state now it's worth noting you can
04:53 - name these whatever you want you don't
04:54 - have to make this set count
04:56 - i could make this whatever but it's kind
04:57 - of good practice you just have set
04:59 - followed by the name of the state
05:02 - variable that you're actually going to
05:03 - be updating
05:04 - all right so now that we have our title
05:06 - and our account we can use these just
05:07 - like regular variables in javascript so
05:09 - i can
05:10 - implement them here into my kind of
05:11 - render field and i'll put
05:13 - title like that and then for the counter
05:15 - i will put my cat
05:17 - now for the counter actually i need to
05:19 - make the default state 0
05:20 - that's because this is going to be an
05:22 - integer and then we will update this
05:23 - integer
05:24 - so let me refresh the page here and
05:25 - notice the counter is equal to zero
05:27 - and the title is equal to an empty
05:29 - string we see nothing
05:31 - so now what i want to do is make it so
05:32 - that when we press these buttons
05:34 - we update our state and whenever you
05:36 - update the state of a component
05:38 - it tells that component to re-render
05:41 - itself on the screen
05:42 - so only that component and any of the
05:44 - children components
05:45 - it's rendering but not the entire
05:47 - application so hopefully that kind of
05:49 - makes sense
05:50 - but the idea here is that inside of
05:52 - button state
05:53 - as soon as either of these states are
05:55 - modified this entire component will
05:57 - re-render itself so this return
05:59 - statement will kind of re-run
06:00 - again that doesn't mean that the app
06:02 - component is going to re-render
06:04 - everything that's here
06:05 - it just means that this individual
06:07 - component is going to re-render
06:08 - everything that it's returning and so if
06:10 - you have any children components inside
06:12 - of here
06:13 - all of those will be re-rendered now
06:14 - this is where you can kind of get into
06:16 - performance and efficiency of react
06:17 - components
06:18 - and how you're storing and handling this
06:20 - state because if all of your state is
06:22 - being stored in say an upper level
06:23 - component like
06:24 - app then that means whenever that state
06:26 - is changed it's going to re-render the
06:27 - entire application which is obviously
06:29 - going to take longer
06:30 - than just re-rendering one component at
06:33 - a time so there's advantages and
06:34 - disadvantages we'll talk about those in
06:36 - much later videos
06:37 - but for now just understand when state
06:39 - is updated the component will
06:40 - automatically re-render itself so that
06:42 - it can show the updated state
06:45 - okay so what i'm going to do now is i'm
06:47 - going to make an
06:48 - on click kind of handler for both of
06:50 - these buttons
06:52 - so what you need to do whenever you want
06:54 - to call a javascript function when a
06:55 - button is clicked you need to use on
06:57 - click
06:57 - i forget if we've seen this before if i
06:59 - showed it to you so i'm just going to
07:00 - re-explain it
07:01 - what you need to do is pass a function
07:03 - that you want to be called when this
07:04 - button is clicked
07:05 - so in this case the function that i want
07:07 - to be called is set title and
07:09 - set count but i need to call these
07:12 - functions with arguments
07:13 - those arguments are going to be what i
07:15 - want to set the title to or set the
07:16 - count to
07:17 - and so i'm just going to create two
07:18 - functions here i'm going to say
07:20 - const and this will say i don't know
07:25 - update title clicked
07:28 - like that and this will be equal to an
07:30 - arrow function
07:32 - like that i think that's good okay i'm
07:34 - gonna copy this
07:36 - i'm gonna make another function and this
07:37 - will be update
07:39 - and then counter clicked
07:42 - all right so now for the on click i'm
07:44 - just going to make it equal to these two
07:45 - functions so i'm going to say update
07:46 - title clicked
07:47 - and i'm going to say update counter
07:50 - click now notice i didn't add the
07:51 - parentheses here
07:52 - this is because i'm just giving the name
07:54 - of the function and then this button
07:56 - will
07:56 - call the function that i gave it
07:58 - whenever we click it and anyways inside
08:00 - of here
08:00 - what i'm going to do now is set the
08:02 - title and set the cap so i'm going to
08:03 - say set
08:05 - title like that and then i need to pass
08:07 - what i want to set the title to so in
08:08 - this case we'll just hard code something
08:10 - in
08:10 - and we'll say we now have a title
08:14 - exclamation point and then for the
08:16 - counter i'm going to say set
08:18 - counter and then we will set this equal
08:20 - to whatever the count
08:22 - previously was plus 1. all right so
08:25 - let's save this now
08:26 - and set counter is not defined uh sorry
08:29 - this is going to be set
08:30 - count not set counter and hopefully that
08:33 - will work now okay
08:34 - so now ideally what should happen when
08:36 - we press these buttons is we're going to
08:38 - update the title state
08:39 - that will cause the component to
08:41 - re-render and so we should see the
08:42 - updated title so let's press that
08:44 - and notice it says we now have a title
08:46 - and every time i press this it's going
08:48 - to keep
08:48 - re-rendering the component because we're
08:50 - updating the state but in this case here
08:52 - since the state is the same we don't see
08:53 - anything different right
08:55 - now when i go to update counter let's
08:56 - press it we can see the counter goes to
08:58 - one
08:58 - and then to two and then to three and
09:00 - then to four and five and six and so on
09:02 - and so forth
09:03 - and there you go that is pretty much how
09:05 - you can deal with state
09:07 - it's pretty simple you just define the
09:08 - state variable
09:10 - you then define the function that you're
09:11 - going to use to update that state
09:13 - whenever you want to update the state
09:14 - you simply call the function with the
09:16 - updated value
09:17 - and there you go whenever you do this
09:19 - whenever you call one of these functions
09:21 - it will force react to re-render the
09:23 - component so anything inside of here
09:24 - will be re-rendered
09:25 - so we will continue in one second but i
09:27 - need to quickly thank the sponsor of
09:29 - this video and this series which is algo
09:31 - expert algo xbox is the best platform to
09:33 - use when preparing for your software
09:35 - engineering coding
09:36 - interviews there's also a product on
09:37 - algo expert called systems expert that
09:39 - you can use to prepare for your system's
09:41 - design interviews
09:42 - get started on algal experience today by
09:44 - clicking the link in the description and
09:45 - using the code tech with tim for a
09:46 - discount on the platform
09:48 - now what i want to show you though is
09:49 - what happens when we want to pass this
09:51 - state down
09:53 - to components uh that are different
09:55 - components
09:56 - so for example say we have some data
09:57 - components and maybe that data component
09:59 - or
10:00 - components whatever they are are
10:01 - actually going to show the title and
10:03 - show the count
10:04 - and from here we want these buttons to
10:06 - update the title and update the count
10:08 - and then we want those components to
10:09 - show that updated count
10:11 - so what i'm going to do is make a new
10:12 - function here and we're just going to
10:14 - call this data
10:15 - and this is going to take in some props
10:16 - because remember if we want to pass
10:18 - information down to components
10:20 - from one of the upper level components
10:21 - we can pass that through the props
10:23 - and here all i'm going to do is i'm just
10:25 - going to return
10:26 - we'll do our parentheses here a div
10:30 - and we're going to expect that we get
10:31 - two props here so the first prop that i
10:34 - want is going to be the title and the
10:35 - second prop that i want is going to be
10:36 - the count so i'm going to say
10:38 - that the title is equal to and then this
10:41 - will be
10:42 - props dot title and then we'll do
10:45 - another
10:46 - p tag and we'll say the count is going
10:48 - to be equal to
10:50 - props dot count all right so there we go
10:53 - we have a super simple component and now
10:55 - what we're going to do is just replace
10:56 - this here with that data component so
10:58 - i'm going to say data and then we're
11:00 - going to
11:00 - pass in here a title and account so i'm
11:03 - going to say title
11:04 - equals and then i'm going to say title
11:06 - right that's my state variable
11:08 - and then i'm going to say that the count
11:11 - is equal
11:12 - to count again that's my state variable
11:15 - and there you go let's refresh the page
11:16 - here and notice that the count resets
11:18 - and the title resets
11:19 - okay so if i press update title now you
11:21 - can see this still works
11:22 - if i press update count you can see that
11:24 - this still works again
11:26 - and the reason that this works is
11:28 - because title and count are both
11:30 - state right they're then passed in the
11:32 - props to this component
11:34 - and what happens is whenever you have
11:36 - the state updating
11:37 - it's re-rendering this entire thing and
11:39 - so the props here are going to change
11:40 - based on what the state
11:42 - is and that means we're going to show
11:43 - that in the component it's going to have
11:45 - those updated values
11:46 - so hopefully that kind of makes sense
11:47 - but i just wanted to show you the
11:48 - process
11:49 - of taking state from a component like
11:51 - this and passing it to a component kind
11:53 - of below it in the hierarchy that will
11:55 - then display
11:56 - and now is a good point to actually look
11:58 - at the react developer tools so if we go
12:00 - to inspect
12:01 - and we go to components here
12:04 - you can see that we have kind of the
12:06 - tree hierarchy of the different
12:07 - components that are being rendered so we
12:08 - have our app component our info
12:10 - component
12:11 - we have our button state component and
12:12 - then our data component
12:14 - and if we look here we can see the props
12:15 - are count for title we now have a title
12:19 - rendered by button state and app and if
12:21 - we go to button state we can see we
12:23 - don't have any props
12:24 - but we have a hook we have the state we
12:26 - now have a title and the state
12:27 - four and there you go that's kind of a
12:29 - way that you can look at
12:31 - what's actually being passed around to
12:32 - the different components
12:34 - okay so that is kind of the basics of
12:36 - state hard to get in
12:37 - into any advanced examples right now
12:39 - because well we just need to learn about
12:41 - this stuff before we can really start
12:42 - creating our application
12:44 - what i'm going to do now is show you how
12:45 - we can influence state in our info
12:47 - component
12:48 - and actually what i'll do here is i will
12:49 - just render the button state component
12:52 - and inside of the button state component
12:53 - i will change this to render info
12:56 - so let's actually i'm thinking here if
12:59 - this makes sense to do or not
13:00 - uh you know what no what we're going to
13:01 - do instead is we'll we'll keep info up
13:03 - here and we'll just add a button or
13:04 - something to info and it can handle its
13:06 - own state
13:07 - okay so the use state inside of a class
13:09 - based component is a little bit more
13:11 - complicated than a functional component
13:13 - but obviously we need to learn how to do
13:14 - that so let's do that
13:16 - what i'm going to do in inside of info
13:18 - here is i'm going to start
13:20 - by defining what i want to be held in my
13:22 - state
13:23 - and the way you do this is you say this
13:25 - dot state
13:26 - and then you make this equal to a
13:27 - javascript object and inside of here you
13:30 - define your keys kind of your state
13:31 - values
13:32 - and what their default values are going
13:34 - to be so in this case
13:35 - for our info component let's just do the
13:38 - same thing let's just have a counter
13:39 - it's kind of the easiest example to go
13:40 - through
13:41 - so we'll say count and by default this
13:43 - is equal to 0. so that's the only thing
13:44 - that we're going to be storing in our
13:45 - state
13:46 - and the reason we know that is because
13:47 - we've defined that in the constructor
13:49 - so you start by defining whatever is
13:51 - going to be stored in your state
13:52 - in the constructor like this if i wanted
13:54 - another value maybe like a title
13:56 - then i would define title and then
13:58 - whatever its default value or starting
14:00 - value is going to be so let me remove
14:01 - title because i don't want that
14:03 - okay so now what i'm going to do is
14:04 - actually just remove all the stuff that
14:06 - this is rendering and instead we'll just
14:08 - quite simply
14:09 - show a p tag that's going to have the
14:12 - count so we'll say p
14:13 - we'll say count colon and then this will
14:16 - be equal to
14:17 - this dot state dot and then count and so
14:20 - that's how you access the state you go
14:21 - this dot state and then whatever it is
14:24 - from the state that you want to show in
14:25 - this case we want to show the count now
14:27 - let's remove
14:28 - the props here we don't need these
14:29 - default props anymore
14:31 - and now let's see how we can actually
14:32 - update this state well to update this
14:34 - state we're going to need some type of
14:35 - button or some event that we can use to
14:36 - trigger this so i'm going to say button
14:38 - and then slash button i'm going to say
14:41 - click me
14:42 - exclamation point and then we need to
14:44 - wrap all of this in a div
14:45 - and we need to return it i forgot about
14:47 - that okay so let's say return
14:49 - div let's put all of this here inside of
14:53 - the div and let's remove that semicolon
14:55 - and now you can see that we have a count
14:57 - and a click me but obviously when i
14:59 - press click me nothing has happened
15:01 - so now what i'm going to do let's get
15:02 - rid of these why is there an empty
15:04 - string showing up here i don't want that
15:06 - so now what i'm going to do is do an on
15:07 - click here so i'm going to say on click
15:09 - is equal to and then we're going to
15:10 - define a function here we're just going
15:12 - to say
15:13 - you know button press so button
15:17 - pressed like that and then we will put
15:20 - button pressed all right so now we will
15:23 - call this function
15:24 - notice i had to do with this dot button
15:26 - pressed and the reason for that is
15:28 - because we're inside of a class based
15:29 - component so we have to reference the
15:31 - function with this
15:32 - now actually i'm realizing i do have to
15:35 - explain something to you about how we
15:36 - kind of call functions from a class
15:38 - based component
15:39 - we'll do that one second but for now
15:40 - let's update the state so to update the
15:42 - state
15:42 - inside of a class based component you
15:44 - say this dot set
15:46 - state like that and then inside of here
15:48 - you pass a javascript object with any of
15:50 - the values that you want to update in
15:52 - the state
15:53 - now you do not need to pass every value
15:54 - that's in the state to be able to update
15:56 - them for example what i'm going to do
15:57 - here is say count
15:59 - is equal to this dot state dot
16:02 - count plus one and then this will update
16:05 - the state
16:06 - now if there was another value in the
16:08 - state here so if i had like title
16:10 - colon empty string or i had it equal to
16:12 - a hello or whatever
16:13 - just because i'm only passing count here
16:15 - doesn't mean that this is going to be
16:17 - uh kind of removed or or not updated or
16:19 - whatever what happens here is any of the
16:21 - fields that you pass in here are kind of
16:23 - merged with the existing state and so if
16:25 - you just pass count it will just update
16:27 - count
16:28 - any of the other state values will stay
16:29 - the same so don't worry about that
16:31 - there's no need to throw in like a title
16:33 - colon title or something um you don't
16:36 - need to do that like react is smart
16:37 - enough to realize that if you're only
16:39 - passing one value you're only updating
16:40 - one value
16:41 - and so there's no need to pass anything
16:43 - more than what you want to update
16:45 - anyways hopefully that kind of makes
16:46 - sense but let's just see what happens
16:47 - here i'm going to refresh this and when
16:48 - i press click me
16:50 - cannot read property set state of
16:51 - undefined this is interesting
16:54 - sorry this is probably this dot state
16:56 - dot set state
16:57 - is that the way you do it let's see if
16:59 - that's correct can i read property state
17:01 - of undefined
17:02 - okay so you can see we're getting this
17:04 - error here and this is what i was
17:05 - talking about like a minute ago and i
17:06 - said i'm gonna have to explain something
17:08 - to you about
17:08 - creating these these kind of functions
17:10 - in the class-based component
17:11 - what happens by default when i define
17:13 - this function here inside of the class
17:15 - is it does not have access to this
17:17 - keyword so to give it access to this
17:20 - keyword we need to actually
17:21 - bind it into this class because right
17:23 - now this is just a function that's
17:24 - defined inside of this class
17:26 - doesn't mean it's actually a part of
17:28 - this kind of class instance and so it
17:30 - can't access
17:31 - this now there's two ways to fix this
17:33 - the first way
17:34 - is to define an arrow function inside of
17:36 - here like this
17:37 - so if you simply put the two parentheses
17:40 - then an arrow and then you actually
17:41 - manually call
17:42 - this stop button pressed this will fix
17:44 - the problem for you notice if i refresh
17:46 - and i press this
17:47 - the counter is working totally fine but
17:49 - if you don't want to do this you don't
17:50 - want to do this arrow function
17:52 - then what you can do instead is you can
17:54 - go up to your constructor
17:55 - and you can say this dot button pressed
17:58 - is equal to uh
18:00 - yeah this dot button pressed dot bind
18:04 - and then you can pass the this keyword
18:06 - now let's see if this works
18:07 - now when i press click me you can see
18:09 - that this works fine essentially what
18:10 - we're doing is we're binding the button
18:12 - press
18:13 - to this class and so now it has access
18:16 - to this keyword
18:17 - whereas previously it didn't now i
18:19 - recommend you use the other way so let
18:20 - me just comment this out
18:21 - where you just do the arrow function and
18:23 - the reason why the arrow function works
18:25 - is because since this is a function
18:26 - defined
18:27 - inside of the render method which is
18:29 - already attached to this class
18:30 - it has access to this keyword and so
18:32 - then when you call this thought button
18:34 - pressed
18:34 - it gets access to this keyword as well
18:36 - that's probably a poor explanation you
18:38 - don't need to worry about it too much
18:39 - just realize that this will then
18:40 - give you access to the this keyword
18:43 - anyways
18:43 - now when i do this and i press this if i
18:45 - refresh here
18:47 - uh hmm what's going on here this double
18:49 - button press sorry i need to make sure i
18:51 - actually
18:51 - call that function okay it's refresh you
18:54 - can see that
18:55 - the counter is working totally fine and
18:56 - notice that the counter here
18:58 - is independent of the counter here right
19:00 - and when i press this it's not updating
19:02 - any of this stuff
19:04 - because the state is only changing
19:05 - inside of this component whereas when i
19:07 - press these buttons
19:08 - it's updating in here and it's not
19:10 - updating up here
19:11 - hopefully that makes sense but that's
19:13 - pretty much what i need to show you
19:14 - relating to state
19:16 - kind of the key takeaways here is that
19:18 - state is how we store you know
19:19 - persistent information
19:20 - on the web page as long as you don't
19:22 - refresh obviously when you do that it
19:23 - goes away
19:24 - and a state is kind of local to a
19:26 - component
19:27 - but whenever you update a state it will
19:29 - cause that component to re-render
19:31 - and that means that any of the stuff
19:32 - that it's rendering will also be
19:34 - re-rendered
19:34 - to pass state down to children
19:36 - components like this data component here
19:38 - you simply pass it through the props and
19:40 - if you want to update the state of a
19:42 - parent component from a child component
19:45 - you need to pass something known as a
19:47 - callback
19:47 - i'll discuss that in a minute the reason
19:49 - for that is that if we're looking at
19:50 - this kind of data tag if i try to modify
19:53 - the title inside of here
19:54 - we get a problem the reason we get a
19:56 - problem is because our properties
19:58 - are read only values so just remember
20:00 - that that's why i emphasized that a lot
20:02 - in the last video
20:03 - when you are passing props through even
20:05 - if they are state of kind of a
20:07 - upper level component you cannot
20:09 - directly modify them
20:10 - in the child component and so to be able
20:12 - to change them from the child component
20:14 - you actually need to call a function
20:16 - that is contained in the parent
20:18 - component
20:18 - that can then update the state this is
20:20 - known as a callback i'll discuss that in
20:22 - the next video when we get into forums
20:24 - and actually working on some components
20:26 - that we're not going to delete
20:27 - afterwards
20:27 - so hopefully that was a decent summary
20:29 - of state hopefully this kind of makes
20:30 - sense again this is how you do it in a
20:32 - functional way
20:32 - this is the way you do it in the
20:34 - class-based way and in the next video
20:36 - we'll be talking about forms and events
20:38 - and some kind of real examples
20:40 - hopefully you guys enjoyed if you did
20:41 - make sure to leave a like subscribe to
20:42 - the channel and i will see you in the
20:44 - next react
20:46 - tutorial
20:48 - [Music]
20:54 - you

Cleaned transcript:

hello everybody and welcome to another react tutorial for beginners in this video i'm going to be covering something known as state now state is the data that your application is holding and kind of keeping track of and so in our case here we're going to be implementing state in our different components and while the page our react application has not been refreshed the state will stay the same it will be persistent across our application however as soon as we refresh the react application the state will disappear and we'll talk all about state in this video but just understand that state here is kind of temporary it's stored only in our front end it is not stored in the back end if we were talking about truly persistent data we would want to be storing this data in a database so it's actually stored in some file right on you know file system and can be accessed from anywhere and at any point in time here this is temporary it's only going to stay persistent and you know be the same across our application while our application has not been refreshed and one small note here as well the state that is uh for one client so one person visiting the website will not be the same for everybody so if i have some state on my website and then you go and you visit the website from your computer you're not going to have the same state as me this is kind of local like it's to the client if that makes sense it's not a global state all right hopefully that's clear anyways let me show you how we can implement state and really what that is now the first thing i'm going to do here is i'm actually just going to erase a bunch of stuff because we're going to rewrite a ton so i'm going to remove add item so i need to remove all of the references to it and this info component will keep for now just because it's a classbased component and we'll look at how to implement state in a classbased component later anyways let's go to app.js and let me actually make a new component here and this will be a functional component that's going to have some state so i'm going to say function and let's just make this button state kind of a weird name but again this is just going to be an example that we'll kind of throw away and delete after this is just to understand how state works and then what i'm going to do is return in here and i'm actually going to create two buttons and two text fields so i'm going to say p and in here let's just say i don't know title colon and then we'll put some title there we'll have another p tag and we will say i don't know counter and oops if i can type this counter and then end the tag and then here we will have some state as well now all this needs to be wrapped inside of a div always forget about that so let's take this div tag and put it down here and now let's create two buttons so i'm going to make an input or actually a button like that and then we'll say slash buttons and we'll just say update title okay and then we'll make another button and what this one will say is update counter all right so there we go we have now created our button state component let's just render this on the screen so let's go slash button state and let's see what this looks like refresh and notice we have our title we have our counter we have update title and update counter and when we click these it does nothing so the idea here is that i want to have some state this state is going to uh kind of pertain to this title and this counter and when i press these buttons i want to update the state i want to change it so how do we implement state well these things in react called hooks and what a hook is is kind of a function that's provided by react that you can use to well hook into and kind of modify its behavior so you see what i mean in a second but what we're going to have to do here is import something that allows us to use state it's actually called use state and is imported from react not react dom just from react so whenever you want to set up state in a functional component what you do is you create a constant so you need to use const and then you do these square brackets like this and you define two values first you define the actual variable that's going to store your state and then you define the name of the function that you're going to use to update this state or update this variable so in this case i want a title so i'm going to say title and then i'm going to say set title like that and this is going to be equal to use state now inside of use state you define the default state so in this case i'm just going to make it an empty string so when we start our application title is going to be equal to an empty string and if i want to modify title i use this set title function and you'll see how that works in one minute next i'm going to define my next piece of state which is the counter so i'm just going to say count like that and then i'm going to say set count and make this equal to use state now it's worth noting you can name these whatever you want you don't have to make this set count i could make this whatever but it's kind of good practice you just have set followed by the name of the state variable that you're actually going to be updating all right so now that we have our title and our account we can use these just like regular variables in javascript so i can implement them here into my kind of render field and i'll put title like that and then for the counter i will put my cat now for the counter actually i need to make the default state 0 that's because this is going to be an integer and then we will update this integer so let me refresh the page here and notice the counter is equal to zero and the title is equal to an empty string we see nothing so now what i want to do is make it so that when we press these buttons we update our state and whenever you update the state of a component it tells that component to rerender itself on the screen so only that component and any of the children components it's rendering but not the entire application so hopefully that kind of makes sense but the idea here is that inside of button state as soon as either of these states are modified this entire component will rerender itself so this return statement will kind of rerun again that doesn't mean that the app component is going to rerender everything that's here it just means that this individual component is going to rerender everything that it's returning and so if you have any children components inside of here all of those will be rerendered now this is where you can kind of get into performance and efficiency of react components and how you're storing and handling this state because if all of your state is being stored in say an upper level component like app then that means whenever that state is changed it's going to rerender the entire application which is obviously going to take longer than just rerendering one component at a time so there's advantages and disadvantages we'll talk about those in much later videos but for now just understand when state is updated the component will automatically rerender itself so that it can show the updated state okay so what i'm going to do now is i'm going to make an on click kind of handler for both of these buttons so what you need to do whenever you want to call a javascript function when a button is clicked you need to use on click i forget if we've seen this before if i showed it to you so i'm just going to reexplain it what you need to do is pass a function that you want to be called when this button is clicked so in this case the function that i want to be called is set title and set count but i need to call these functions with arguments those arguments are going to be what i want to set the title to or set the count to and so i'm just going to create two functions here i'm going to say const and this will say i don't know update title clicked like that and this will be equal to an arrow function like that i think that's good okay i'm gonna copy this i'm gonna make another function and this will be update and then counter clicked all right so now for the on click i'm just going to make it equal to these two functions so i'm going to say update title clicked and i'm going to say update counter click now notice i didn't add the parentheses here this is because i'm just giving the name of the function and then this button will call the function that i gave it whenever we click it and anyways inside of here what i'm going to do now is set the title and set the cap so i'm going to say set title like that and then i need to pass what i want to set the title to so in this case we'll just hard code something in and we'll say we now have a title exclamation point and then for the counter i'm going to say set counter and then we will set this equal to whatever the count previously was plus 1. all right so let's save this now and set counter is not defined uh sorry this is going to be set count not set counter and hopefully that will work now okay so now ideally what should happen when we press these buttons is we're going to update the title state that will cause the component to rerender and so we should see the updated title so let's press that and notice it says we now have a title and every time i press this it's going to keep rerendering the component because we're updating the state but in this case here since the state is the same we don't see anything different right now when i go to update counter let's press it we can see the counter goes to one and then to two and then to three and then to four and five and six and so on and so forth and there you go that is pretty much how you can deal with state it's pretty simple you just define the state variable you then define the function that you're going to use to update that state whenever you want to update the state you simply call the function with the updated value and there you go whenever you do this whenever you call one of these functions it will force react to rerender the component so anything inside of here will be rerendered so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo xbox is the best platform to use when preparing for your software engineering coding interviews there's also a product on algo expert called systems expert that you can use to prepare for your system's design interviews get started on algal experience today by clicking the link in the description and using the code tech with tim for a discount on the platform now what i want to show you though is what happens when we want to pass this state down to components uh that are different components so for example say we have some data components and maybe that data component or components whatever they are are actually going to show the title and show the count and from here we want these buttons to update the title and update the count and then we want those components to show that updated count so what i'm going to do is make a new function here and we're just going to call this data and this is going to take in some props because remember if we want to pass information down to components from one of the upper level components we can pass that through the props and here all i'm going to do is i'm just going to return we'll do our parentheses here a div and we're going to expect that we get two props here so the first prop that i want is going to be the title and the second prop that i want is going to be the count so i'm going to say that the title is equal to and then this will be props dot title and then we'll do another p tag and we'll say the count is going to be equal to props dot count all right so there we go we have a super simple component and now what we're going to do is just replace this here with that data component so i'm going to say data and then we're going to pass in here a title and account so i'm going to say title equals and then i'm going to say title right that's my state variable and then i'm going to say that the count is equal to count again that's my state variable and there you go let's refresh the page here and notice that the count resets and the title resets okay so if i press update title now you can see this still works if i press update count you can see that this still works again and the reason that this works is because title and count are both state right they're then passed in the props to this component and what happens is whenever you have the state updating it's rerendering this entire thing and so the props here are going to change based on what the state is and that means we're going to show that in the component it's going to have those updated values so hopefully that kind of makes sense but i just wanted to show you the process of taking state from a component like this and passing it to a component kind of below it in the hierarchy that will then display and now is a good point to actually look at the react developer tools so if we go to inspect and we go to components here you can see that we have kind of the tree hierarchy of the different components that are being rendered so we have our app component our info component we have our button state component and then our data component and if we look here we can see the props are count for title we now have a title rendered by button state and app and if we go to button state we can see we don't have any props but we have a hook we have the state we now have a title and the state four and there you go that's kind of a way that you can look at what's actually being passed around to the different components okay so that is kind of the basics of state hard to get in into any advanced examples right now because well we just need to learn about this stuff before we can really start creating our application what i'm going to do now is show you how we can influence state in our info component and actually what i'll do here is i will just render the button state component and inside of the button state component i will change this to render info so let's actually i'm thinking here if this makes sense to do or not uh you know what no what we're going to do instead is we'll we'll keep info up here and we'll just add a button or something to info and it can handle its own state okay so the use state inside of a class based component is a little bit more complicated than a functional component but obviously we need to learn how to do that so let's do that what i'm going to do in inside of info here is i'm going to start by defining what i want to be held in my state and the way you do this is you say this dot state and then you make this equal to a javascript object and inside of here you define your keys kind of your state values and what their default values are going to be so in this case for our info component let's just do the same thing let's just have a counter it's kind of the easiest example to go through so we'll say count and by default this is equal to 0. so that's the only thing that we're going to be storing in our state and the reason we know that is because we've defined that in the constructor so you start by defining whatever is going to be stored in your state in the constructor like this if i wanted another value maybe like a title then i would define title and then whatever its default value or starting value is going to be so let me remove title because i don't want that okay so now what i'm going to do is actually just remove all the stuff that this is rendering and instead we'll just quite simply show a p tag that's going to have the count so we'll say p we'll say count colon and then this will be equal to this dot state dot and then count and so that's how you access the state you go this dot state and then whatever it is from the state that you want to show in this case we want to show the count now let's remove the props here we don't need these default props anymore and now let's see how we can actually update this state well to update this state we're going to need some type of button or some event that we can use to trigger this so i'm going to say button and then slash button i'm going to say click me exclamation point and then we need to wrap all of this in a div and we need to return it i forgot about that okay so let's say return div let's put all of this here inside of the div and let's remove that semicolon and now you can see that we have a count and a click me but obviously when i press click me nothing has happened so now what i'm going to do let's get rid of these why is there an empty string showing up here i don't want that so now what i'm going to do is do an on click here so i'm going to say on click is equal to and then we're going to define a function here we're just going to say you know button press so button pressed like that and then we will put button pressed all right so now we will call this function notice i had to do with this dot button pressed and the reason for that is because we're inside of a class based component so we have to reference the function with this now actually i'm realizing i do have to explain something to you about how we kind of call functions from a class based component we'll do that one second but for now let's update the state so to update the state inside of a class based component you say this dot set state like that and then inside of here you pass a javascript object with any of the values that you want to update in the state now you do not need to pass every value that's in the state to be able to update them for example what i'm going to do here is say count is equal to this dot state dot count plus one and then this will update the state now if there was another value in the state here so if i had like title colon empty string or i had it equal to a hello or whatever just because i'm only passing count here doesn't mean that this is going to be uh kind of removed or or not updated or whatever what happens here is any of the fields that you pass in here are kind of merged with the existing state and so if you just pass count it will just update count any of the other state values will stay the same so don't worry about that there's no need to throw in like a title colon title or something um you don't need to do that like react is smart enough to realize that if you're only passing one value you're only updating one value and so there's no need to pass anything more than what you want to update anyways hopefully that kind of makes sense but let's just see what happens here i'm going to refresh this and when i press click me cannot read property set state of undefined this is interesting sorry this is probably this dot state dot set state is that the way you do it let's see if that's correct can i read property state of undefined okay so you can see we're getting this error here and this is what i was talking about like a minute ago and i said i'm gonna have to explain something to you about creating these these kind of functions in the classbased component what happens by default when i define this function here inside of the class is it does not have access to this keyword so to give it access to this keyword we need to actually bind it into this class because right now this is just a function that's defined inside of this class doesn't mean it's actually a part of this kind of class instance and so it can't access this now there's two ways to fix this the first way is to define an arrow function inside of here like this so if you simply put the two parentheses then an arrow and then you actually manually call this stop button pressed this will fix the problem for you notice if i refresh and i press this the counter is working totally fine but if you don't want to do this you don't want to do this arrow function then what you can do instead is you can go up to your constructor and you can say this dot button pressed is equal to uh yeah this dot button pressed dot bind and then you can pass the this keyword now let's see if this works now when i press click me you can see that this works fine essentially what we're doing is we're binding the button press to this class and so now it has access to this keyword whereas previously it didn't now i recommend you use the other way so let me just comment this out where you just do the arrow function and the reason why the arrow function works is because since this is a function defined inside of the render method which is already attached to this class it has access to this keyword and so then when you call this thought button pressed it gets access to this keyword as well that's probably a poor explanation you don't need to worry about it too much just realize that this will then give you access to the this keyword anyways now when i do this and i press this if i refresh here uh hmm what's going on here this double button press sorry i need to make sure i actually call that function okay it's refresh you can see that the counter is working totally fine and notice that the counter here is independent of the counter here right and when i press this it's not updating any of this stuff because the state is only changing inside of this component whereas when i press these buttons it's updating in here and it's not updating up here hopefully that makes sense but that's pretty much what i need to show you relating to state kind of the key takeaways here is that state is how we store you know persistent information on the web page as long as you don't refresh obviously when you do that it goes away and a state is kind of local to a component but whenever you update a state it will cause that component to rerender and that means that any of the stuff that it's rendering will also be rerendered to pass state down to children components like this data component here you simply pass it through the props and if you want to update the state of a parent component from a child component you need to pass something known as a callback i'll discuss that in a minute the reason for that is that if we're looking at this kind of data tag if i try to modify the title inside of here we get a problem the reason we get a problem is because our properties are read only values so just remember that that's why i emphasized that a lot in the last video when you are passing props through even if they are state of kind of a upper level component you cannot directly modify them in the child component and so to be able to change them from the child component you actually need to call a function that is contained in the parent component that can then update the state this is known as a callback i'll discuss that in the next video when we get into forums and actually working on some components that we're not going to delete afterwards so hopefully that was a decent summary of state hopefully this kind of makes sense again this is how you do it in a functional way this is the way you do it in the classbased way and in the next video we'll be talking about forms and events and some kind of real examples hopefully you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in the next react tutorial you
