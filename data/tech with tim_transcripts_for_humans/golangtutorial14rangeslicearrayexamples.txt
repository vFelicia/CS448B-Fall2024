With timestamps:

00:02 - [Music]
00:06 - hello everybody and welcome back to the
00:08 - golang tutorial
00:10 - so in this video we're going to talk
00:11 - about range now range is a key word in
00:13 - the language that allows us to actually
00:15 - iterate over different items and
00:17 - elements
00:18 - inside of things like slices arrays and
00:20 - strings
00:21 - now don't worry i'll show a bunch of
00:22 - examples in this video so you'll really
00:24 - understand what i mean
00:25 - but what i want to show here is just a
00:27 - few common problems that can be solved
00:29 - with
00:30 - range and then hopefully tie together
00:31 - some of the syntax we've learned
00:33 - previously into a few problems here so
00:35 - you can see how we would use these
00:36 - different things together
00:37 - all right so let's go ahead and get
00:39 - started now the first thing i want to do
00:40 - is actually just make an array that
00:41 - we're going to iterate over
00:43 - when i say iterate over that simply
00:45 - means loop through
00:46 - so we've seen for loops before and i'm
00:48 - going to show you
00:50 - how this range kind of thing i don't
00:52 - even know the way to describe it range
00:54 - keyword i guess
00:55 - can substitute a longer version of the
00:57 - for loop which i'll write here so i'm
00:58 - just going to say var
00:59 - a we'll do into ray actually let's just
01:01 - do int
01:02 - slice like that and then we'll make that
01:04 - equal to a slice of int
01:06 - with the following random values inside
01:10 - okay so there we go we have a slice of
01:12 - ins what i'm going to do now is make a
01:14 - for loop and i'm going to show you how i
01:16 - can print out all of the values of this
01:18 - slice
01:18 - from a for loop so traditionally without
01:21 - actually knowing the
01:23 - this range that you see is popping up
01:25 - here what we would have to do is
01:26 - something like this
01:27 - so we'd have to say i colon equals zero
01:30 - i
01:30 - is less than the len of a
01:33 - and then i plus plus now you may not
01:36 - have seen this before but what this is
01:37 - saying is okay
01:38 - let's set i z i had 0 let's say let's
01:41 - keep going until we're at the length of
01:43 - a and let's increment by 1.
01:44 - now what that's going to mean is that
01:46 - this i variable here is going to keep
01:48 - counting up
01:49 - and we can use that variable on every
01:51 - iteration to access a different index
01:53 - from this
01:54 - array so when i zero will access one
01:56 - when it's one will access three when
01:58 - it's two will access four and the way
01:59 - we'll do that is just simply by going
02:01 - ai so this means every time i gets
02:04 - incremented we'll look at a new element
02:05 - inside of the list or the slice here
02:08 - and since we're going up to the len of a
02:10 - but not including the len of a
02:12 - we'll hit the maximum index and not go
02:14 - over so we won't have an error in our
02:16 - code
02:16 - so let's just fmt dot print
02:20 - ln here and oops if i can put the n
02:23 - what is it asterix okay so fmd.println
02:26 - uh let's go go run um do
02:30 - tutorial.go and see what we get
02:32 - okay so there you go you can see we
02:34 - successfully printed out all of the
02:35 - values
02:36 - now that's one way to do it but there's
02:38 - an easier way with the range keyword
02:39 - which is what this video is about
02:41 - so range the way this works is you put
02:44 - actually an iterator
02:45 - and then you put an element and then
02:48 - yeah okay so that's a bad explanation
02:50 - what you put here is a variable that
02:52 - will represent the
02:53 - index you're currently looking at and a
02:55 - variable that would represent the
02:56 - element you're currently looking at so
02:57 - i'm going to say
02:58 - i element and then i'm going to say
03:01 - range colon equals
03:04 - the range of a now what this is saying
03:08 - is we're going to have i represent the
03:11 - index of the element we're currently
03:13 - looking at
03:13 - in the list or in the slicer in the
03:15 - array i'm going to keep calling it list
03:17 - accidentally because i'm used to python
03:18 - but when you hear lists just think of
03:19 - slice
03:20 - okay so we're going to access all the
03:22 - elements in this slice
03:23 - so i is going to count up just like the
03:25 - i would in this for loop so it's going
03:27 - to start at 0 and it's going to go to
03:29 - whatever the index
03:30 - 6 is at here so whatever that maximum
03:32 - index is which would be len
03:33 - a minus 1. now what element is going to
03:36 - do though
03:37 - this is actually going to stand for the
03:39 - element at that
03:40 - index so element will be equal to
03:43 - a i from up here that's what element
03:45 - will be equal to
03:46 - so when we say i comma element colon
03:49 - equals range a
03:51 - that's what allows us to do that so
03:52 - range a returns to us
03:54 - the index and the element for all of the
03:56 - elements inside of
03:58 - the slice or the array whatever we put
04:00 - here so you can see that if i go
04:02 - fmt.printline and what i'll do is i'll
04:04 - print i
04:06 - actually i don't know if i can plus it
04:07 - like that let's do fmt.printf
04:10 - and let's go percent d plus um
04:14 - actually we don't need colon let's
04:15 - present t colon uh
04:17 - and then percent percent
04:20 - d and let's go i comma element so we'll
04:24 - print those both out
04:25 - all right so i got through that code
04:27 - that was a little bit painful to watch
04:28 - but let's just go ahead and run this and
04:30 - see what we get
04:31 - now so you can see that what we get is
04:33 - ah well i forgot to print a backslash n
04:36 - so one second here guys let's just do
04:38 - cls
04:40 - okay so what this is saying is there we
04:42 - go so we print out
04:44 - i which is the index and then we print
04:46 - out the element
04:47 - at that index so this is how range works
04:50 - it lets
04:50 - us set up this structure so we get the
04:52 - index and then we get the element and
04:54 - that means that we can avoid having to
04:56 - do what we did before
04:57 - where we actually have to access a i and
05:00 - that's
05:00 - useful there's a lot of cases where we'd
05:02 - want to do something like this this is
05:03 - just like a short form
05:05 - for being able to loop through all the
05:06 - elements in the array now let's say that
05:08 - we didn't care about the element
05:10 - or we didn't care about the index and we
05:11 - weren't going to use them
05:13 - we know in golang that it's actually an
05:15 - error to define a variable that we don't
05:17 - use
05:18 - so if i have i here and i have elements
05:20 - here and i don't use them
05:21 - we run into a problem and in fact let me
05:23 - show you what i mean so if i do
05:24 - this and i save now we should see that
05:27 - we're getting a red squiggly line saying
05:29 - i declared and not
05:30 - used so how can i do this how can i
05:33 - still use the range keyword
05:35 - without using i or element because maybe
05:37 - i just don't want to use it well what i
05:38 - can do is simply replace this variable
05:40 - with an underscore now an underscore
05:42 - kind of stands for an anonymous variable
05:44 - you cannot
05:45 - access the value of this underscore like
05:48 - i can't
05:49 - just throw underscore here and it prints
05:52 - out the value no that's not how it works
05:53 - this pretty much says that hey you know
05:55 - this thing is giving us
05:56 - two elements i only want the last one
05:59 - but since i can't
06:00 - just put element here i need to put
06:02 - something before it i'm going to put
06:04 - underscore
06:04 - comma element where we're just going to
06:06 - say we don't care about whatever that
06:07 - variable is
06:08 - so i can swap these around i could say i
06:11 - comma
06:12 - underscore like that no problem but
06:15 - underscore can be used pretty well
06:16 - anywhere and it just stands for an
06:17 - anonymous variable
06:19 - so if we do that and we have the
06:20 - underscore we just print out the
06:21 - elements let's have a look at what we
06:22 - get
06:23 - now and we get just all the elements
06:26 - printing out
06:27 - so that is how we use range to loop
06:29 - through a slice or loop through an array
06:31 - now this wouldn't make a difference if
06:32 - this was an array we could do the same
06:33 - thing we could loop through it but now
06:35 - what i'm going to do is show you
06:37 - how we can actually let's do an example
06:40 - of a problem here
06:41 - okay so the problem i've come up with
06:43 - here is to essentially print out any
06:45 - duplicates
06:46 - inside of a slice so given a slice a
06:49 - we want to look through the slice and we
06:50 - want to see if there's any duplicate
06:52 - elements
06:52 - so inside of this slice we know that the
06:54 - only duplicate elements are
06:55 - 4 and we only want to print out those
06:58 - duplicates
06:59 - once so i don't want to print out 4
07:00 - twice like you can see that's happening
07:02 - down here
07:03 - and i was just testing this previously
07:05 - what i want to do is i want to print out
07:07 - 4 one time because it was only
07:08 - duplicated once
07:09 - now if 4 was duplicated twice and what i
07:12 - mean by that is there's
07:13 - a set of 3 fours inside of here it's
07:16 - okay to print that twice
07:18 - but i just don't want to print four two
07:20 - times because that's only
07:21 - one pair of duplicates if that makes any
07:24 - sense
07:25 - what i'm kind of going with but that's
07:26 - the idea that's the problem so let's see
07:28 - if we can solve it
07:30 - so essentially to be able to solve this
07:31 - problem the way we start is just by
07:33 - thinking about how we would do this
07:34 - as humans right i mean to determine if
07:36 - there's any duplicates for us
07:38 - all we have to do is kind of just look
07:39 - at this array and it's quite easy to see
07:41 - that 4
07:42 - appears twice but for computers what
07:44 - they need to do is they need to look
07:45 - through sequentially right they need to
07:47 - look through every single element
07:48 - and check if there's any duplicates so
07:50 - the process would be
07:51 - start with element one look through the
07:54 - rest of the
07:55 - slice here and see if there's any more
07:57 - ones okay
07:58 - move on look at three look through the
08:00 - arrest rest of the
08:02 - slice here and see if there's any more
08:03 - threes right that's the process that we
08:05 - need to do
08:06 - so to accomplish that inside of this for
08:08 - loop that we have right here i'm
08:09 - actually going to put another for loop
08:11 - i'm going to put 4j element 2
08:14 - colon equals range a so what this is
08:17 - saying is
08:18 - for every element in this slice let's
08:21 - look at
08:21 - every element in this slice so 4 1
08:24 - let's look at every other element in
08:26 - this slice and see if anything else
08:27 - equals 1. so kind of the naive approach
08:30 - to do this if you haven't seen something
08:31 - like this would just to be what i'm
08:32 - about to do here say if
08:35 - element equals equals element 2
08:38 - and we don't need a colon we need fmt
08:41 - dot print ln if i can uh
08:45 - get my capitals working here okay so
08:47 - fmt.println
08:48 - and we print element so what this is
08:50 - saying is okay
08:51 - so you know we have we're looking
08:52 - through every element we're looking
08:54 - through every element again
08:54 - if element equals element two then
08:56 - fmt.print element
08:58 - you know you would think that that
08:59 - should return to us any duplicates so
09:01 - let's actually have a look at this code
09:03 - and i'll give you a chance to kind of
09:04 - analyze it and tell me if you think this
09:06 - is gonna work or not i mean obviously
09:08 - you're not going to tell me but
09:09 - just have a look at it think does this
09:11 - make sense is this logical what i've
09:13 - done with your understanding of for
09:14 - loops
09:15 - and if statements okay so i'm going to
09:17 - go ahead and run this now i'm assuming
09:18 - you would have paused and thought about
09:19 - that if you want
09:20 - so let's go ahead and run and we get
09:23 - four four so that's interesting
09:27 - uh so element element oops i don't think
09:29 - i actually saved this
09:30 - one second that shouldn't have given me
09:32 - four four let me run this one more time
09:34 - okay so go run tutorial to go oh i and j
09:36 - declared and not used so let's change
09:38 - those to underscores
09:40 - my apologies guys um ignore any of the
09:42 - runs i've done
09:43 - those were just mistakes so those need
09:44 - to be under squares but let's run this
09:46 - so go run tutorial dot go
09:48 - and would you look at that we actually
09:50 - get every single element
09:52 - printed out now that's quite strange why
09:55 - is that happening
09:57 - and we get four printed out twice
09:59 - whenever it occurs
10:00 - well the reason that we're getting this
10:01 - output is because if we think about what
10:03 - i've actually just done here
10:04 - uh when i'm looking so let's say we're
10:07 - looking for all the elements and we're
10:08 - looking for all the elements again
10:09 - on the very first loop here what's going
10:11 - to happen is well elements going to be
10:13 - equal to
10:13 - 1 because that's the first element we
10:15 - look at element 2
10:16 - is going to be equal to 1 as well
10:18 - because we didn't start any further in
10:20 - the slice
10:21 - we started right at element right or
10:24 - right at the very beginning
10:25 - so 1 equals 1 and immediately we printed
10:28 - out 1.
10:29 - now that's a problem that means we're
10:31 - printing out elements when they're
10:32 - actually not duplicated so how can i fix
10:34 - this
10:35 - well there's a way to do this if i go
10:37 - ahead and add my i and j back
10:38 - what i can say is okay well let's check
10:40 - if the elements are the same
10:42 - and they're not in the same position so
10:44 - we say and
10:46 - i does not equal j so if we do that now
10:49 - what this is saying is okay well we'll
10:51 - go ahead and we'll do this loop again
10:52 - but if i and j are the same
10:56 - we're not going to print that out
10:57 - because that means that they are the
10:58 - same position or the same
11:00 - element in the slice right so let's run
11:02 - this again
11:03 - go run tutorial dot go and there we go
11:06 - this time we actually got the correct
11:07 - output
11:08 - of 4 so it printed out 4 was duplicated
11:10 - but
11:11 - it printed 4 twice now can we think of
11:13 - why that happened
11:15 - well when we get to four here we're
11:17 - going to look through all the elements
11:18 - in the array again
11:19 - starting right from the beginning and we
11:20 - find this other four so we print it out
11:23 - but then what happens is well
11:26 - we move further on and we get to this 4.
11:28 - so the first loop in a here is looking
11:30 - at this 4
11:31 - and then we loop through all the way
11:32 - again and then we look at this 4 and we
11:35 - find that 4.
11:36 - and now these equal each other and we
11:38 - print that out
11:39 - so the problem with this is that as soon
11:41 - as we found the duplicate so we found
11:43 - 4 and 4 well when we got to this 4 that
11:46 - we had already printed out
11:48 - we found this one so what we actually
11:50 - need to do here to solve this problem is
11:52 - well there's a few different things we
11:53 - could try
11:53 - but what i'm going to do is say okay
11:55 - only print out the duplicates
11:57 - if the duplicate we find is uh greater
12:00 - in the array so what i'm going to do is
12:02 - say i
12:03 - is actually greater than j
12:07 - yes i is greater than j so what this is
12:09 - saying
12:10 - is that essentially we're not going to
12:12 - print out the fact that we found any
12:13 - duplicates
12:14 - unless the position here is greater than
12:17 - the position oh sorry this should be the
12:19 - other way around unless j
12:21 - is greater than i so what that means is
12:23 - okay we're only going to print out that
12:25 - we found a duplicate if whatever
12:26 - position we're looking at here
12:28 - is further along then what one is here
12:30 - so in this case when we find
12:31 - 4 we won't print this 4 behind because
12:35 - well it's not greater than the position
12:37 - we're currently at so that's what this
12:39 - problem is trying to say apologize that
12:41 - i i butchered this a little bit
12:42 - but you know i do make mistakes as well
12:44 - okay so let's go ahead and run this go
12:46 - run tutorial.go
12:47 - and see what we get now and i would be
12:49 - helpful if i saved my code so let's
12:51 - actually save it
12:52 - and we get the value 4. so notice this
12:55 - is only printing 4
12:57 - one time so that fixed it when we did j
12:59 - greater than i
13:00 - because that's making sure that we're
13:02 - only looking further in the array
13:03 - okay so there's actually a way that we
13:05 - can simplify this even further and avoid
13:07 - having to do all these element checks i
13:09 - j all of that and the way to do that is
13:11 - to actually rewrite this entire section
13:13 - in here entirely so what i'm going to
13:15 - say here is i'm going to change the for
13:16 - loop to do this
13:18 - i'm going to say 4 j oops
13:21 - j colon equals i
13:24 - plus 1 and then i'm going to say
13:26 - semicolon
13:27 - j is less than the land of a
13:30 - colon j plus plus if i can
13:34 - type properly here okay so j plus plus
13:36 - now what this is saying is
13:38 - let's start j at i plus 1 which means
13:41 - start it at the position greater than
13:43 - whatever position we're currently
13:44 - looking at
13:45 - so that means automatically that now
13:47 - we'll never have a situation where j is
13:49 - less than i
13:50 - which means any match we find will
13:52 - automatically be valid so what i'm going
13:54 - to say here is
13:55 - element 2 like this colon equals a
13:59 - j because i don't have access to the
14:02 - element here and i'm not using range
14:03 - i need to access it like i did before so
14:05 - i'll say aha
14:07 - and then what i'm going to do is go
14:09 - ahead and say if
14:11 - actually we don't even need brackets if
14:12 - element 2 equals equals element
14:15 - then we'll fmt dot print
14:18 - ln and we will print the element which i
14:21 - guess we can just do
14:22 - like that so now i've avoided having to
14:25 - do these ij
14:26 - checks because it just automatically
14:28 - happens at the top of the for loop
14:30 - and in fact we're actually able to avoid
14:32 - a ton of unnecessary comparisons
14:34 - because we start right at i plus 1 which
14:36 - means when we start at element 1
14:39 - then down here this j starts here so i
14:42 - up at 1 j at 3 which means we won't ever
14:45 - look at the same element and we won't
14:46 - ever look
14:47 - back now you will reach a situation when
14:49 - you get to the very end
14:50 - where j will actually be greater than
14:53 - the length of a
14:54 - and when that happens or sorry it'll be
14:56 - equal to the length of a when that
14:58 - happens
14:58 - this for loop just won't run and we just
15:00 - won't find any duplicates because if
15:02 - there was any duplicate for 6 we would
15:04 - have found it previously
15:05 - in the array or in the slice so let me
15:07 - run this now and show you that this does
15:09 - indeed work the same way
15:11 - so we do that and we get the value four
15:13 - and let me show you now if i add say six
15:15 - here so we have two sixes
15:17 - they will print out that duplicate as
15:18 - well so let's have a look here
15:20 - and we get four six okay so that was the
15:23 - example i wanted to do i just wanted to
15:24 - put something
15:25 - kind of complicated maybe for some of
15:26 - you in here just to show you how we
15:28 - would go about solving something like
15:29 - this and how we can use
15:31 - a for loop inside of a for loop because
15:33 - the range function itself is
15:35 - useful but i wanted to do some examples
15:37 - so anyways i hope this was helpful if
15:38 - you guys enjoyed make sure you leave a
15:39 - like
15:40 - subscribe and i will see you in the next
15:42 - golang tutorial

Cleaned transcript:

hello everybody and welcome back to the golang tutorial so in this video we're going to talk about range now range is a key word in the language that allows us to actually iterate over different items and elements inside of things like slices arrays and strings now don't worry i'll show a bunch of examples in this video so you'll really understand what i mean but what i want to show here is just a few common problems that can be solved with range and then hopefully tie together some of the syntax we've learned previously into a few problems here so you can see how we would use these different things together all right so let's go ahead and get started now the first thing i want to do is actually just make an array that we're going to iterate over when i say iterate over that simply means loop through so we've seen for loops before and i'm going to show you how this range kind of thing i don't even know the way to describe it range keyword i guess can substitute a longer version of the for loop which i'll write here so i'm just going to say var a we'll do into ray actually let's just do int slice like that and then we'll make that equal to a slice of int with the following random values inside okay so there we go we have a slice of ins what i'm going to do now is make a for loop and i'm going to show you how i can print out all of the values of this slice from a for loop so traditionally without actually knowing the this range that you see is popping up here what we would have to do is something like this so we'd have to say i colon equals zero i is less than the len of a and then i plus plus now you may not have seen this before but what this is saying is okay let's set i z i had 0 let's say let's keep going until we're at the length of a and let's increment by 1. now what that's going to mean is that this i variable here is going to keep counting up and we can use that variable on every iteration to access a different index from this array so when i zero will access one when it's one will access three when it's two will access four and the way we'll do that is just simply by going ai so this means every time i gets incremented we'll look at a new element inside of the list or the slice here and since we're going up to the len of a but not including the len of a we'll hit the maximum index and not go over so we won't have an error in our code so let's just fmt dot print ln here and oops if i can put the n what is it asterix okay so fmd.println uh let's go go run um do tutorial.go and see what we get okay so there you go you can see we successfully printed out all of the values now that's one way to do it but there's an easier way with the range keyword which is what this video is about so range the way this works is you put actually an iterator and then you put an element and then yeah okay so that's a bad explanation what you put here is a variable that will represent the index you're currently looking at and a variable that would represent the element you're currently looking at so i'm going to say i element and then i'm going to say range colon equals the range of a now what this is saying is we're going to have i represent the index of the element we're currently looking at in the list or in the slicer in the array i'm going to keep calling it list accidentally because i'm used to python but when you hear lists just think of slice okay so we're going to access all the elements in this slice so i is going to count up just like the i would in this for loop so it's going to start at 0 and it's going to go to whatever the index 6 is at here so whatever that maximum index is which would be len a minus 1. now what element is going to do though this is actually going to stand for the element at that index so element will be equal to a i from up here that's what element will be equal to so when we say i comma element colon equals range a that's what allows us to do that so range a returns to us the index and the element for all of the elements inside of the slice or the array whatever we put here so you can see that if i go fmt.printline and what i'll do is i'll print i actually i don't know if i can plus it like that let's do fmt.printf and let's go percent d plus um actually we don't need colon let's present t colon uh and then percent percent d and let's go i comma element so we'll print those both out all right so i got through that code that was a little bit painful to watch but let's just go ahead and run this and see what we get now so you can see that what we get is ah well i forgot to print a backslash n so one second here guys let's just do cls okay so what this is saying is there we go so we print out i which is the index and then we print out the element at that index so this is how range works it lets us set up this structure so we get the index and then we get the element and that means that we can avoid having to do what we did before where we actually have to access a i and that's useful there's a lot of cases where we'd want to do something like this this is just like a short form for being able to loop through all the elements in the array now let's say that we didn't care about the element or we didn't care about the index and we weren't going to use them we know in golang that it's actually an error to define a variable that we don't use so if i have i here and i have elements here and i don't use them we run into a problem and in fact let me show you what i mean so if i do this and i save now we should see that we're getting a red squiggly line saying i declared and not used so how can i do this how can i still use the range keyword without using i or element because maybe i just don't want to use it well what i can do is simply replace this variable with an underscore now an underscore kind of stands for an anonymous variable you cannot access the value of this underscore like i can't just throw underscore here and it prints out the value no that's not how it works this pretty much says that hey you know this thing is giving us two elements i only want the last one but since i can't just put element here i need to put something before it i'm going to put underscore comma element where we're just going to say we don't care about whatever that variable is so i can swap these around i could say i comma underscore like that no problem but underscore can be used pretty well anywhere and it just stands for an anonymous variable so if we do that and we have the underscore we just print out the elements let's have a look at what we get now and we get just all the elements printing out so that is how we use range to loop through a slice or loop through an array now this wouldn't make a difference if this was an array we could do the same thing we could loop through it but now what i'm going to do is show you how we can actually let's do an example of a problem here okay so the problem i've come up with here is to essentially print out any duplicates inside of a slice so given a slice a we want to look through the slice and we want to see if there's any duplicate elements so inside of this slice we know that the only duplicate elements are 4 and we only want to print out those duplicates once so i don't want to print out 4 twice like you can see that's happening down here and i was just testing this previously what i want to do is i want to print out 4 one time because it was only duplicated once now if 4 was duplicated twice and what i mean by that is there's a set of 3 fours inside of here it's okay to print that twice but i just don't want to print four two times because that's only one pair of duplicates if that makes any sense what i'm kind of going with but that's the idea that's the problem so let's see if we can solve it so essentially to be able to solve this problem the way we start is just by thinking about how we would do this as humans right i mean to determine if there's any duplicates for us all we have to do is kind of just look at this array and it's quite easy to see that 4 appears twice but for computers what they need to do is they need to look through sequentially right they need to look through every single element and check if there's any duplicates so the process would be start with element one look through the rest of the slice here and see if there's any more ones okay move on look at three look through the arrest rest of the slice here and see if there's any more threes right that's the process that we need to do so to accomplish that inside of this for loop that we have right here i'm actually going to put another for loop i'm going to put 4j element 2 colon equals range a so what this is saying is for every element in this slice let's look at every element in this slice so 4 1 let's look at every other element in this slice and see if anything else equals 1. so kind of the naive approach to do this if you haven't seen something like this would just to be what i'm about to do here say if element equals equals element 2 and we don't need a colon we need fmt dot print ln if i can uh get my capitals working here okay so fmt.println and we print element so what this is saying is okay so you know we have we're looking through every element we're looking through every element again if element equals element two then fmt.print element you know you would think that that should return to us any duplicates so let's actually have a look at this code and i'll give you a chance to kind of analyze it and tell me if you think this is gonna work or not i mean obviously you're not going to tell me but just have a look at it think does this make sense is this logical what i've done with your understanding of for loops and if statements okay so i'm going to go ahead and run this now i'm assuming you would have paused and thought about that if you want so let's go ahead and run and we get four four so that's interesting uh so element element oops i don't think i actually saved this one second that shouldn't have given me four four let me run this one more time okay so go run tutorial to go oh i and j declared and not used so let's change those to underscores my apologies guys um ignore any of the runs i've done those were just mistakes so those need to be under squares but let's run this so go run tutorial dot go and would you look at that we actually get every single element printed out now that's quite strange why is that happening and we get four printed out twice whenever it occurs well the reason that we're getting this output is because if we think about what i've actually just done here uh when i'm looking so let's say we're looking for all the elements and we're looking for all the elements again on the very first loop here what's going to happen is well elements going to be equal to 1 because that's the first element we look at element 2 is going to be equal to 1 as well because we didn't start any further in the slice we started right at element right or right at the very beginning so 1 equals 1 and immediately we printed out 1. now that's a problem that means we're printing out elements when they're actually not duplicated so how can i fix this well there's a way to do this if i go ahead and add my i and j back what i can say is okay well let's check if the elements are the same and they're not in the same position so we say and i does not equal j so if we do that now what this is saying is okay well we'll go ahead and we'll do this loop again but if i and j are the same we're not going to print that out because that means that they are the same position or the same element in the slice right so let's run this again go run tutorial dot go and there we go this time we actually got the correct output of 4 so it printed out 4 was duplicated but it printed 4 twice now can we think of why that happened well when we get to four here we're going to look through all the elements in the array again starting right from the beginning and we find this other four so we print it out but then what happens is well we move further on and we get to this 4. so the first loop in a here is looking at this 4 and then we loop through all the way again and then we look at this 4 and we find that 4. and now these equal each other and we print that out so the problem with this is that as soon as we found the duplicate so we found 4 and 4 well when we got to this 4 that we had already printed out we found this one so what we actually need to do here to solve this problem is well there's a few different things we could try but what i'm going to do is say okay only print out the duplicates if the duplicate we find is uh greater in the array so what i'm going to do is say i is actually greater than j yes i is greater than j so what this is saying is that essentially we're not going to print out the fact that we found any duplicates unless the position here is greater than the position oh sorry this should be the other way around unless j is greater than i so what that means is okay we're only going to print out that we found a duplicate if whatever position we're looking at here is further along then what one is here so in this case when we find 4 we won't print this 4 behind because well it's not greater than the position we're currently at so that's what this problem is trying to say apologize that i i butchered this a little bit but you know i do make mistakes as well okay so let's go ahead and run this go run tutorial.go and see what we get now and i would be helpful if i saved my code so let's actually save it and we get the value 4. so notice this is only printing 4 one time so that fixed it when we did j greater than i because that's making sure that we're only looking further in the array okay so there's actually a way that we can simplify this even further and avoid having to do all these element checks i j all of that and the way to do that is to actually rewrite this entire section in here entirely so what i'm going to say here is i'm going to change the for loop to do this i'm going to say 4 j oops j colon equals i plus 1 and then i'm going to say semicolon j is less than the land of a colon j plus plus if i can type properly here okay so j plus plus now what this is saying is let's start j at i plus 1 which means start it at the position greater than whatever position we're currently looking at so that means automatically that now we'll never have a situation where j is less than i which means any match we find will automatically be valid so what i'm going to say here is element 2 like this colon equals a j because i don't have access to the element here and i'm not using range i need to access it like i did before so i'll say aha and then what i'm going to do is go ahead and say if actually we don't even need brackets if element 2 equals equals element then we'll fmt dot print ln and we will print the element which i guess we can just do like that so now i've avoided having to do these ij checks because it just automatically happens at the top of the for loop and in fact we're actually able to avoid a ton of unnecessary comparisons because we start right at i plus 1 which means when we start at element 1 then down here this j starts here so i up at 1 j at 3 which means we won't ever look at the same element and we won't ever look back now you will reach a situation when you get to the very end where j will actually be greater than the length of a and when that happens or sorry it'll be equal to the length of a when that happens this for loop just won't run and we just won't find any duplicates because if there was any duplicate for 6 we would have found it previously in the array or in the slice so let me run this now and show you that this does indeed work the same way so we do that and we get the value four and let me show you now if i add say six here so we have two sixes they will print out that duplicate as well so let's have a look here and we get four six okay so that was the example i wanted to do i just wanted to put something kind of complicated maybe for some of you in here just to show you how we would go about solving something like this and how we can use a for loop inside of a for loop because the range function itself is useful but i wanted to do some examples so anyways i hope this was helpful if you guys enjoyed make sure you leave a like subscribe and i will see you in the next golang tutorial
