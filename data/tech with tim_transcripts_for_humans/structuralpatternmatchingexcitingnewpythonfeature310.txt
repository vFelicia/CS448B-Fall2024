With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'm
00:12 - going to be sharing with you an exciting
00:14 - new feature that's coming to python
00:15 - version 3.10 which is structural pattern
00:18 - matching now this is very similar to a
00:21 - switch statement if you've seen that in
00:22 - other programming languages except this
00:25 - is much more powerful and you can do way
00:27 - more than you can do with most switch
00:28 - statements in most programming languages
00:31 - in fact the keyword for this is not
00:33 - switch it is match and you'll see why
00:35 - it's called that in a second as i kind
00:37 - of go through and give you a mini
00:38 - tutorial on this feature now before we
00:40 - dive into that i need to mention that
00:42 - python 3.10 is currently in beta so i'm
00:44 - filming this video on august 6th 2021
00:47 - when i'm filming this it's in beta i
00:49 - don't know the beta version exactly but
00:51 - anyways if you want to download the beta
00:53 - you can do that from the link in the
00:54 - description from the python website i'm
00:56 - running it on my computer right now
00:58 - seems relatively stable but things could
01:00 - change when this feature is released now
01:02 - there's also a lot of other new features
01:04 - coming in python version 3.10 i mean the
01:06 - main one is structural pattern matching
01:08 - but you also have parenthesized context
01:10 - managers you have a few other random
01:12 - things like this that i don't care about
01:13 - mostly related to syntax errors but i
01:15 - will leave this document in the
01:16 - description in case you guys care to
01:18 - look at it alright so let's go ahead and
01:20 - dive into this new feature but first i
01:22 - need to talk to you about something that
01:23 - is not new which is the sponsor of this
01:25 - video before we get started i need to
01:27 - thank the sponsor of this video which is
01:29 - alcoexpert algo expert is the best
01:32 - platform to use for preparing for your
01:33 - software engineering coding interviews
01:35 - and has the highest quality coding
01:37 - interview practice questions with 160
01:40 - practice questions detailed solutions in
01:42 - nine of the most popular programming
01:44 - languages a feature-packed browser-based
01:46 - coding environment extensive test suites
01:48 - and conceptual overviews and code
01:50 - walk-throughs for each and every problem
01:52 - algo expert is the best resource to use
01:54 - to ace your coding interviews
01:56 - aligoexpert also has a data structures
01:58 - crash course coding interview
02:00 - assessments and a mock interviews
02:01 - feature i can highly recommend algo
02:04 - expert as a former customer myself and
02:06 - now an official instructor on the
02:08 - platform get started using algo expert
02:10 - today by clicking the link in the
02:11 - description and using the code tech with
02:13 - tim for a discount on the platform all
02:16 - right so as promised i'm going to show
02:17 - you structural pattern matching so let's
02:19 - just go ahead and dive in i will show
02:21 - you the syntax for a match statement so
02:24 - in other programming languages you may
02:25 - see something like this you may see
02:27 - switch then you have some variable here
02:29 - so let's say we have x equals
02:31 - hello and then maybe you switch on x and
02:33 - then what you do is something like case
02:35 - and maybe you do
02:37 - hello here as the case and then you
02:40 - write something like print it is hello
02:43 - and then you usually see this break
02:45 - keyword now the python syntax for the
02:47 - match statement is very similar but the
02:50 - difference here is that the switch
02:52 - statement only allows you to directly
02:54 - check if this value here is equal to x
02:57 - so you can have a bunch of different
02:58 - cases and it just checks if x is equal
03:00 - to these things with the match statement
03:02 - you can actually do pattern matching
03:04 - hence why it's called the match
03:05 - statement not just the switch statement
03:07 - okay anyways let me comment all of that
03:08 - out and let me show you the match
03:10 - statement so the match statement looks
03:11 - like this very similar syntax you match
03:13 - on some variable
03:15 - then you define some case in this case i
03:17 - will say hello you do a colon and then
03:20 - in python obviously everything is
03:21 - indented so we indent one block and then
03:24 - we can do whatever it is that we want if
03:26 - this is the case for x so here if i
03:29 - print i don't know it is hello we'll
03:31 - keep that same case and i will just add
03:33 - another case and show you how this
03:35 - actually works so obviously you can add
03:37 - as many cases as you want uh i will go
03:39 - with high and i'll just say it is high
03:43 - all right so if i run this here x is
03:44 - equal to hello we should see that we get
03:47 - it is hello printing out so it just
03:49 - checks the value of x against all of
03:50 - these cases checks the first case first
03:52 - obviously if that is the case no pun
03:54 - intended it prints this and skips the
03:56 - rest of the cases okay so let's go here
03:59 - and make this high
04:00 - if i run this notice you get it is hot
04:03 - so that's the most basic example you can
04:05 - check if some value is a bunch of other
04:07 - values and some people argue this is
04:09 - more readable than doing like an if or
04:11 - lf statement because this example right
04:13 - here you can replicate using if alif or
04:16 - just multiple if statements right
04:17 - okay nice so that is basic but now what
04:20 - i need to show you is what's known as
04:21 - the default case so notice here if i
04:23 - just have an empty string for example
04:25 - nothing's going to print out because
04:27 - there is no case for the empty string
04:29 - however if i want to have a default case
04:32 - a case that is kind of like the else for
04:34 - my switch saving here a match statement
04:36 - what i do is the following i do case
04:38 - underscore underscore i don't think it's
04:41 - i believe it's called the wild card
04:42 - character i'm not sure exactly what this
04:44 - is uh but essentially when you do an
04:46 - underscore that will match with anything
04:49 - so in this case if i go print and then i
04:51 - just go
04:52 - not a case like that and i run this
04:56 - you're going to see that we get not a
04:57 - case didn't mean to open that new file
04:59 - so that is how you do it the default
05:00 - case now this seems interesting this is
05:02 - cool but this is just like any other
05:04 - switch statement at this point in time
05:06 - now i'm going to show you some cool
05:08 - examples so let me remove this here in
05:10 - fact let me get rid of all of this i'm
05:12 - gonna bring in an example that i have on
05:13 - my other screen here uh it's called
05:15 - example two really this should be
05:17 - example one but you get the idea so this
05:19 - is something that you can actually do
05:20 - with the match statement it looks a
05:22 - little bit overwhelming but i'll walk
05:23 - you through it right here so i have a
05:24 - function called example two and notice
05:27 - we're matching on chords now chords is
05:29 - meant to be coordinates and we're meant
05:30 - to accept a tuple now what i can
05:32 - actually do here is i can check if this
05:34 - tuple is equal to zero zero that's
05:36 - pretty much the same thing i showed you
05:38 - before if that's the case i print origin
05:40 - however what i also can do is check
05:42 - parts of this tuple so i can say okay is
05:45 - the first element zero and is the second
05:47 - element anything that's kind of what
05:49 - this is saying right here i'm saying
05:50 - let's check if the first element is zero
05:52 - and then the second element will
05:54 - represent by y and all we care about is
05:56 - the fact that y exists that we have some
05:58 - second element and if that's the case we
06:00 - have zero as the first element and we
06:02 - have some second element that second
06:04 - element will actually get assigned to
06:05 - the variable one so to show you a really
06:08 - simple example here let's just zoom out
06:09 - a little bit
06:10 - if i go example underscore two and then
06:13 - i pass a zero and a one
06:15 - notice you're going to see we get
06:16 - vertical line at y equals one so it
06:19 - prints out the value of the second
06:21 - element in my tuple now same thing works
06:24 - here we have x zero so we check if we
06:26 - have some value for x and then we have a
06:28 - zero so let's swap this around
06:31 - let's go one zero
06:32 - notice we get horizontal line at x
06:35 - equals one now where it starts to get a
06:36 - little bit more advanced is right here
06:38 - at this case so for this case i have x
06:41 - comma y
06:42 - if x equals equals y now this is
06:44 - formally called a guard and what this
06:46 - means is we're going to check this
06:48 - condition before we get into this case
06:50 - so we're saying do we have a tuple that
06:52 - has two elements if we do assign the
06:53 - first element x assign the second
06:55 - element to y sorry and then if x is
06:58 - equal equal to y print x equals y so
07:00 - let's test that and let's go 1 1
07:03 - like that notice that we get x equals y
07:06 - all right now we also can do this one
07:08 - right here so x y if the abs of x is
07:11 - equal to the abs of y so in this case i
07:13 - go negative 1 1 you're gonna see that we
07:15 - get the absolute value of x equals the
07:17 - absolute value of y and then notice here
07:19 - i've used two wild cards so what this is
07:21 - saying is do i have two elements in a
07:23 - tuple if i do we just print okay these
07:26 - are valid coordinates so let's do
07:27 - something that's not the case there so
07:29 - negative two and one and we get valid
07:32 - chords and then of course we have our
07:34 - default case right here so if i just do
07:36 - you know some random value let's just go
07:38 - with the string like a uh we get invalid
07:41 - coordinates because this again matches
07:43 - with anything so there you go that is
07:45 - the second example kind of showing you
07:47 - the power of the match case here right
07:49 - we can check parts of for in this
07:52 - example a tuple but we also could check
07:54 - just like more advanced patterns in
07:56 - general these are relatively simple
07:57 - patterns but i'm going to show you how
07:59 - we can do some even more complicated
08:01 - ones so let me remove
08:03 - this and let me bring in my example
08:05 - three
08:06 - and this example has some more advanced
08:08 - stuff that uses an interval which is a
08:10 - list although a top was an iterable as
08:12 - well but hopefully you get the idea all
08:14 - right so let's just have a look at this
08:15 - right here so what we can actually do is
08:17 - we can check if we have an element in
08:19 - our list now that's similar to what we
08:20 - did with the tuples but this just checks
08:23 - if we have at least one element doesn't
08:25 - care what the element is if we have
08:26 - sorry not at least if we have exactly
08:28 - one element then we print one element
08:30 - now here same thing two elements right
08:32 - if we have exactly two elements we print
08:34 - two elements now here i'm checking if i
08:36 - have three elements but i'm assigning
08:38 - their values to x y and z printing out
08:40 - those three values and here is where it
08:42 - gets a little bit interesting right i
08:44 - have x y comma z asterisk a now if you
08:47 - haven't seen uh star args and star star
08:49 - quarks before essentially what this
08:51 - allows you to do is accept unlimited
08:54 - arguments coming after this so really as
08:57 - this says right here this is going to be
08:58 - three or more elements so you have to
09:00 - have at least three elements but we can
09:03 - accept any more than three elements here
09:06 - and then we'll match that case so if you
09:08 - have at least three elements and then
09:09 - any other number of elements it could be
09:11 - zero elements it could be 25 more
09:13 - elements they'll all get stored in a and
09:15 - in fact i can print out a here and show
09:17 - you how that works in a second and then
09:19 - lastly here we go to uh this one so x y
09:22 - z underscore comma a so now what this
09:25 - one is saying is okay you must have four
09:26 - elements we're going to store the first
09:28 - three elements in x y and z and then
09:30 - we'll accept any number of elements
09:31 - after that in the list okay and then
09:34 - finally we have our default case so if
09:36 - we don't match any of these we will
09:38 - automatically match with this one and of
09:39 - course you don't need the default case
09:41 - okay so let me show you uh this case
09:43 - right here
09:44 - so if i go to example three and i pass a
09:47 - list that's one two three four
09:49 - five six like that
09:51 - see that we end up getting here three
09:54 - elements or more and then it shows us
09:56 - the three last elements that gets stored
09:58 - in value a or in variable a now notice
10:02 - here that this case didn't get matched
10:04 - even though we had four elements and
10:05 - then we had two more elements coming
10:07 - after the reason this case didn't get
10:09 - matched is because this one is always
10:10 - going to be matched before this case so
10:13 - if we want this case to exist we need to
10:14 - actually move it above this case here
10:17 - because this will always uh sorry this
10:20 - will always match anything that this
10:21 - case matches hopefully that kind of
10:23 - makes sense but this is saying three
10:25 - elements or more this is four elements
10:27 - or more so if we have four elements or
10:29 - more we'll always match with the case
10:30 - three elements or or more sorry so now
10:32 - if i move this case up here
10:35 - like that
10:37 - and i run this we get four elements or
10:40 - more
10:41 - there you go now there's some more stuff
10:42 - that you can do with this but i'm going
10:44 - to let you guys explore that for
10:45 - yourself but this is kind of all i
10:46 - wanted to show you in this video how
10:48 - this match statement works this is a
10:50 - very powerful thing you can write some
10:52 - really interesting code with this and i
10:53 - just think it makes it way more readable
10:55 - too when you're trying to check
10:57 - specifically one variable and see what
10:59 - value it is or check you know more
11:01 - advanced stuff like this like how many
11:02 - elements it has
11:04 - you get the idea anyways i hope you guys
11:05 - enjoyed the video if you did make sure
11:07 - to leave a like subscribe to the channel
11:08 - i will see you in another one
11:12 - [Music]
11:18 - you

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video i'm going to be sharing with you an exciting new feature that's coming to python version 3.10 which is structural pattern matching now this is very similar to a switch statement if you've seen that in other programming languages except this is much more powerful and you can do way more than you can do with most switch statements in most programming languages in fact the keyword for this is not switch it is match and you'll see why it's called that in a second as i kind of go through and give you a mini tutorial on this feature now before we dive into that i need to mention that python 3.10 is currently in beta so i'm filming this video on august 6th 2021 when i'm filming this it's in beta i don't know the beta version exactly but anyways if you want to download the beta you can do that from the link in the description from the python website i'm running it on my computer right now seems relatively stable but things could change when this feature is released now there's also a lot of other new features coming in python version 3.10 i mean the main one is structural pattern matching but you also have parenthesized context managers you have a few other random things like this that i don't care about mostly related to syntax errors but i will leave this document in the description in case you guys care to look at it alright so let's go ahead and dive into this new feature but first i need to talk to you about something that is not new which is the sponsor of this video before we get started i need to thank the sponsor of this video which is alcoexpert algo expert is the best platform to use for preparing for your software engineering coding interviews and has the highest quality coding interview practice questions with 160 practice questions detailed solutions in nine of the most popular programming languages a featurepacked browserbased coding environment extensive test suites and conceptual overviews and code walkthroughs for each and every problem algo expert is the best resource to use to ace your coding interviews aligoexpert also has a data structures crash course coding interview assessments and a mock interviews feature i can highly recommend algo expert as a former customer myself and now an official instructor on the platform get started using algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform all right so as promised i'm going to show you structural pattern matching so let's just go ahead and dive in i will show you the syntax for a match statement so in other programming languages you may see something like this you may see switch then you have some variable here so let's say we have x equals hello and then maybe you switch on x and then what you do is something like case and maybe you do hello here as the case and then you write something like print it is hello and then you usually see this break keyword now the python syntax for the match statement is very similar but the difference here is that the switch statement only allows you to directly check if this value here is equal to x so you can have a bunch of different cases and it just checks if x is equal to these things with the match statement you can actually do pattern matching hence why it's called the match statement not just the switch statement okay anyways let me comment all of that out and let me show you the match statement so the match statement looks like this very similar syntax you match on some variable then you define some case in this case i will say hello you do a colon and then in python obviously everything is indented so we indent one block and then we can do whatever it is that we want if this is the case for x so here if i print i don't know it is hello we'll keep that same case and i will just add another case and show you how this actually works so obviously you can add as many cases as you want uh i will go with high and i'll just say it is high all right so if i run this here x is equal to hello we should see that we get it is hello printing out so it just checks the value of x against all of these cases checks the first case first obviously if that is the case no pun intended it prints this and skips the rest of the cases okay so let's go here and make this high if i run this notice you get it is hot so that's the most basic example you can check if some value is a bunch of other values and some people argue this is more readable than doing like an if or lf statement because this example right here you can replicate using if alif or just multiple if statements right okay nice so that is basic but now what i need to show you is what's known as the default case so notice here if i just have an empty string for example nothing's going to print out because there is no case for the empty string however if i want to have a default case a case that is kind of like the else for my switch saving here a match statement what i do is the following i do case underscore underscore i don't think it's i believe it's called the wild card character i'm not sure exactly what this is uh but essentially when you do an underscore that will match with anything so in this case if i go print and then i just go not a case like that and i run this you're going to see that we get not a case didn't mean to open that new file so that is how you do it the default case now this seems interesting this is cool but this is just like any other switch statement at this point in time now i'm going to show you some cool examples so let me remove this here in fact let me get rid of all of this i'm gonna bring in an example that i have on my other screen here uh it's called example two really this should be example one but you get the idea so this is something that you can actually do with the match statement it looks a little bit overwhelming but i'll walk you through it right here so i have a function called example two and notice we're matching on chords now chords is meant to be coordinates and we're meant to accept a tuple now what i can actually do here is i can check if this tuple is equal to zero zero that's pretty much the same thing i showed you before if that's the case i print origin however what i also can do is check parts of this tuple so i can say okay is the first element zero and is the second element anything that's kind of what this is saying right here i'm saying let's check if the first element is zero and then the second element will represent by y and all we care about is the fact that y exists that we have some second element and if that's the case we have zero as the first element and we have some second element that second element will actually get assigned to the variable one so to show you a really simple example here let's just zoom out a little bit if i go example underscore two and then i pass a zero and a one notice you're going to see we get vertical line at y equals one so it prints out the value of the second element in my tuple now same thing works here we have x zero so we check if we have some value for x and then we have a zero so let's swap this around let's go one zero notice we get horizontal line at x equals one now where it starts to get a little bit more advanced is right here at this case so for this case i have x comma y if x equals equals y now this is formally called a guard and what this means is we're going to check this condition before we get into this case so we're saying do we have a tuple that has two elements if we do assign the first element x assign the second element to y sorry and then if x is equal equal to y print x equals y so let's test that and let's go 1 1 like that notice that we get x equals y all right now we also can do this one right here so x y if the abs of x is equal to the abs of y so in this case i go negative 1 1 you're gonna see that we get the absolute value of x equals the absolute value of y and then notice here i've used two wild cards so what this is saying is do i have two elements in a tuple if i do we just print okay these are valid coordinates so let's do something that's not the case there so negative two and one and we get valid chords and then of course we have our default case right here so if i just do you know some random value let's just go with the string like a uh we get invalid coordinates because this again matches with anything so there you go that is the second example kind of showing you the power of the match case here right we can check parts of for in this example a tuple but we also could check just like more advanced patterns in general these are relatively simple patterns but i'm going to show you how we can do some even more complicated ones so let me remove this and let me bring in my example three and this example has some more advanced stuff that uses an interval which is a list although a top was an iterable as well but hopefully you get the idea all right so let's just have a look at this right here so what we can actually do is we can check if we have an element in our list now that's similar to what we did with the tuples but this just checks if we have at least one element doesn't care what the element is if we have sorry not at least if we have exactly one element then we print one element now here same thing two elements right if we have exactly two elements we print two elements now here i'm checking if i have three elements but i'm assigning their values to x y and z printing out those three values and here is where it gets a little bit interesting right i have x y comma z asterisk a now if you haven't seen uh star args and star star quarks before essentially what this allows you to do is accept unlimited arguments coming after this so really as this says right here this is going to be three or more elements so you have to have at least three elements but we can accept any more than three elements here and then we'll match that case so if you have at least three elements and then any other number of elements it could be zero elements it could be 25 more elements they'll all get stored in a and in fact i can print out a here and show you how that works in a second and then lastly here we go to uh this one so x y z underscore comma a so now what this one is saying is okay you must have four elements we're going to store the first three elements in x y and z and then we'll accept any number of elements after that in the list okay and then finally we have our default case so if we don't match any of these we will automatically match with this one and of course you don't need the default case okay so let me show you uh this case right here so if i go to example three and i pass a list that's one two three four five six like that see that we end up getting here three elements or more and then it shows us the three last elements that gets stored in value a or in variable a now notice here that this case didn't get matched even though we had four elements and then we had two more elements coming after the reason this case didn't get matched is because this one is always going to be matched before this case so if we want this case to exist we need to actually move it above this case here because this will always uh sorry this will always match anything that this case matches hopefully that kind of makes sense but this is saying three elements or more this is four elements or more so if we have four elements or more we'll always match with the case three elements or or more sorry so now if i move this case up here like that and i run this we get four elements or more there you go now there's some more stuff that you can do with this but i'm going to let you guys explore that for yourself but this is kind of all i wanted to show you in this video how this match statement works this is a very powerful thing you can write some really interesting code with this and i just think it makes it way more readable too when you're trying to check specifically one variable and see what value it is or check you know more advanced stuff like this like how many elements it has you get the idea anyways i hope you guys enjoyed the video if you did make sure to leave a like subscribe to the channel i will see you in another one you
