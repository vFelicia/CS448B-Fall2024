With timestamps:

00:00 - hello and welcome to another machine
00:02 - learning tutorial so in the next few
00:05 - videos and today's video we're going to
00:06 - be going through an algorithm called K
00:08 - and and now that stands for K nearest
00:11 - neighbors where K is any kind of integer
00:14 - alright now they also have a nearest
00:16 - neighbor algorithm which is precisely
00:18 - the same thing as K nearest neighbors
00:20 - except it's just assumed that you only
00:22 - have one neighbor that you're looking
00:25 - for and we're gonna talk about how this
00:27 - algorithm works and really implementing
00:28 - it in the next video but in today's
00:30 - video we're going to be going through
00:31 - collecting some irregular kind of data
00:34 - and how we can read in data that's not
00:36 - in a perfect data frame already now when
00:39 - I say that in the last video we had
00:41 - mostly integer values as our data and we
00:44 - didn't have any missing values we had
00:46 - everything nice it was set up it was in
00:48 - a CSV file the data we're gonna be using
00:51 - here is a bit different and there's some
00:52 - more manipulation we're gonna have to do
00:54 - with that before we can use it so with
00:56 - that being said let's get started now
00:58 - the data set that I'm going to be using
01:00 - here is the car evaluation data set now
01:02 - knn is used for classification typically
01:06 - now what that means is we're gonna be
01:07 - classifying some data sets or some data
01:11 - point to a certain class now in this
01:14 - case we're trying to classify cars based
01:16 - on a few different properties or a few
01:18 - different attributes here and the four
01:20 - different classes that we can have is a
01:22 - CC ACC good and very good so our
01:25 - algorithm is going to attempt to decide
01:27 - on one of these four classes represented
01:30 - between zero and three based on the
01:33 - input that we're given now I won't go in
01:36 - and talk too much about the data sex
01:38 - I've already kind of gone through what
01:39 - this means but essentially you can see
01:40 - this just says classification here we
01:42 - have a quite a few instances and six
01:44 - attributes for each instance okay so
01:46 - let's go ahead and go to down a folder
01:48 - here and what we're gonna do is we're
01:50 - just going to download card data sorry
01:53 - guys just a quick side note here if you
01:54 - want to follow along with the tutorial
01:55 - and see the text-based version of this
01:57 - as well as all the code and resources
01:59 - and assets that I'm using as well this
02:01 - data file here go ahead and hop over to
02:03 - tech with Tim dawn net the link is gonna
02:05 - be in the description down below and on
02:07 - there you can see all the code that I
02:08 - write
02:09 - and have all the downloads and
02:10 - everything in one place now when you
02:12 - click this you should get something that
02:13 - looks like this obviously you can just
02:15 - like copy and paste it like that if you
02:16 - want or you could just right-click on it
02:18 - and click Save As
02:19 - pick your directory and then just save
02:21 - it as card data okay so once you've done
02:24 - that actually I'll leave this window
02:26 - open in case you want to come back to it
02:27 - you should have a file that looks
02:29 - something like this in the directory of
02:32 - wherever your script is we're gonna be
02:34 - working in so essentially this is gonna
02:36 - want to be in the same what do you call
02:38 - it environment that we were working in
02:40 - before and you should just have like
02:42 - whatever file you're gonna be using and
02:43 - then card add data ok so what I'm gonna
02:46 - do actually and I've already done it
02:47 - here but I need you to add this line to
02:49 - the top of your data so yours should
02:52 - look like this and then just keep going
02:54 - what I need you to do is click enter and
02:57 - do this now essentially the reason we're
02:59 - doing this is because we want to use
03:01 - pandas to read this data in and pandas
03:03 - reads the first line of our text file or
03:05 - our file as the the attributes right or
03:08 - the labels for our other features sorry
03:10 - for our data set so essentially I am
03:13 - just defining what these features are
03:15 - and it's the exact same if you go on the
03:17 - website I knew there was a reason I left
03:19 - it up and we go back here you can see
03:22 - that the name of all of them are here
03:23 - and yeah so I just literally picked
03:26 - these names and just type them out and
03:28 - separated by commas just to make our
03:29 - lives a little bit easier now yes I
03:32 - could have done this from code but it's
03:34 - such an easy that'll like typing things
03:35 - so I just decided to do it in here ok so
03:37 - once you do that make sure you hit
03:38 - control s and save that file and now
03:40 - we're going to go into whatever file
03:42 - we're gonna be working in I'm just gonna
03:43 - import a few dependencies okay so
03:45 - obviously we need to input s Caitlyn
03:47 - from SK learn
03:49 - utils we're gonna import shuffle and
03:53 - then we're going to import SK or from SK
03:58 - learn dot neighbors import K nearest
04:03 - neighbors classifier okay and what else
04:06 - do we need we need to import pandas as
04:08 - PD so and we need to import numpy as NP
04:12 - and is there anything else we need then
04:15 - we have a trick here we need to oh yes
04:18 - one more here I'm just gonna copy it in
04:20 - because I don't want to type it out
04:21 - we need to import linear model and
04:23 - pre-processing from SK learn so now let
04:27 - me talk about essentially what we're
04:28 - gonna do with this data so actually
04:29 - first let's just read it in using pandas
04:31 - which we already know to do so PD we're
04:34 - going to read CSV even though it's not a
04:36 - CSV file because it's like the same
04:38 - thing separated by commas and then we're
04:39 - gonna do car dot data okay and now just
04:44 - to ensure that this is working we can
04:45 - just print the our data head here and
04:47 - just make sure that everything looks
04:49 - fine so let's just run this quickly KNN
04:52 - yes tutorial file now I need to change
04:55 - this configuration sorry one second to
04:58 - change this to working file what's so
05:00 - when I'm working in right now and we'll
05:02 - just hit run give it a second to load up
05:06 - our CSV file here and there we go okay
05:10 - so we can see we have buying dist answer
05:12 - maintenance and then it goes through and
05:13 - you can see all of the different
05:14 - properties and that is working fine for
05:16 - us okay so now let's talk about what we
05:19 - need to do essentially so remember I was
05:21 - saying in the last video not to use
05:23 - features that have non numerical data so
05:27 - for example a feature that says like yes
05:28 - or no now the reason I said not to use
05:31 - that is because we're doing computations
05:34 - on this data and we're performing
05:35 - operations we're subtracting adding
05:37 - multiplying whatever and we can't do
05:39 - that with data that is not numerical so
05:41 - that means we have to convert our non
05:43 - numerical data into numerical data so if
05:46 - we go in the car data set here we can
05:48 - see that actually almost all of our data
05:50 - is non numeric so we actually have to do
05:53 - and what he call its SK learned comes
05:57 - with something that can help us do this
05:58 - code pre-processing so we have to
06:00 - convert something like V high and on a
06:02 - sea C and medium and low into integer
06:05 - values that correspond with like medium
06:09 - so all of our mediums would be like a1
06:11 - all of our lobes would be a0 all of our
06:12 - highs would be a2 and then same thing
06:14 - for like small V high ok no we could do
06:18 - this in like it's very it's not easy but
06:20 - you can do it by just like reading in
06:22 - the file and manually going through and
06:24 - modifying elements but why would we do
06:27 - that when SK learn actually has
06:28 - something called pre-processing for us
06:30 - which can help us to do that so
06:34 - essentially I'm going to create a new
06:35 - here I was gonna call it pre-processing
06:38 - dots what is it called here one second
06:42 - guys pre-processing the label encoder
06:44 - okay so yes that's what it is so
06:46 - essentially what this is going to do is
06:48 - it is gonna take the labels that are
06:50 - here and it's going to encode them into
06:53 - appropriate integer values now this is
06:55 - just the object that will do this for us
06:56 - we haven't done it yet
06:58 - obviously we need to pass our data frame
07:00 - so essentially what I'm gonna do now is
07:02 - I'm actually gonna create an array for
07:05 - each of our columns okay or an array
07:08 - actually we're gonna do a list so buying
07:10 - is gonna have one main two door person
07:12 - slug but-- safety just because the way
07:13 - that this works is it needs to take a
07:15 - list and right now we have a panda's
07:17 - data frame now you might ask well why
07:19 - don't we read it in with pandas it just
07:21 - cuz it makes it a lot easier than trying
07:23 - to read it in just using like for loops
07:25 - and open and all that but you'll see
07:28 - what and why I'm doing this in just a
07:30 - second so let me just have a look at
07:31 - these attributes we're gonna make a
07:32 - variable called buying it's gonna be
07:34 - equal to and this is gonna be weird but
07:35 - just follow along with me okay list and
07:37 - then what we're gonna do here and do
07:39 - data le in here and for that so we're
07:44 - going to do le dot what do you call it
07:47 - fit transform and we're going to put
07:50 - this in here okay but I'm sorry
07:52 - instead of data le I don't know why I
07:54 - did that we're just gonna pick buying as
07:56 - our column okay so essentially what this
07:59 - is gonna do is it's gonna get the entire
08:00 - buying column so it's gonna get all of
08:02 - these V highs alright it's gonna turn
08:04 - them into a list and then it's going to
08:06 - transform those into a appropriate
08:09 - integer values now I'm just gonna copy
08:11 - this in paces a few times because we're
08:12 - going to need to do this for actually
08:13 - all of our values except for one I
08:16 - believe because one of them is actually
08:17 - already numeric so the next one is
08:19 - maintenance so weird should I do the
08:21 - exact same thing and we're going to
08:22 - replace this with maintenance
08:24 - what's the one after this we have doors
08:26 - so I believe doors actually doors maybe
08:30 - non-numerical in some instance as well
08:32 - so we'll just do this in case what's the
08:34 - next one we have person's and lug boot
08:36 - okay so persons and in here obviously we
08:40 - need persons and then lug boot and I
08:43 - think there's two more which would be
08:45 - the class and safety
08:47 - so essentially what we're gonna do after
08:49 - we finish this here is we're just gonna
08:51 - add these back into like a main list and
08:54 - you'll see what I'm doing in one second
08:56 - so safety and we need safety here as
08:59 - well and then we need finally the class
09:02 - which is what I can't actually name that
09:05 - class I'll just name it CLS and then
09:07 - here this will be named class okay now
09:10 - I'm just gonna create a predict variable
09:12 - here just like I did before and I'm just
09:14 - gonna name this class just so this can
09:17 - save us a bit of time when we're trying
09:19 - to create our likes like splitting our
09:21 - data into things okay so essentially
09:23 - what we have now is this is actually
09:26 - going to return to us a numpy array okay
09:29 - and essentially we're just turning
09:32 - buying into all integer value so
09:35 - actually I'll prove it to you I'll just
09:36 - show you what it looks like in case any
09:37 - of you are confused
09:38 - so just by printing out buying what
09:41 - we're doing now essentially is we're
09:42 - turning this Oh actually you'll just
09:45 - show you here quickly so we don't get
09:46 - confused okay so you can see buying is
09:49 - equal to like V hi V hi V hi whatever so
09:52 - now you can see we go and it's turned
09:53 - that V hi into a three value and then
09:56 - you can see that other values in the
09:57 - list that we're like low or whatever
09:58 - have been turned into one so now that we
10:01 - have integers we can actually work with
10:03 - this data so essentially what I need to
10:06 - do now is I just need to actually create
10:08 - my X list and my Y list now what I'm
10:12 - gonna do is our X is obviously going to
10:14 - be our features well Y is gonna be our
10:15 - label so Y is easy enough and it's
10:18 - actually just going to turn our what do
10:20 - you call it class into a list because
10:23 - this we're gonna need to use and then X
10:25 - is we're gonna actually use zip to put
10:30 - all of our different what do you call it
10:32 - features here into one list so you don't
10:35 - know what zip does essentially it just
10:37 - creates a bunch of tuple objects with
10:38 - all of the different values
10:40 - corresponding with the lists we give it
10:43 - so you'll see what I mean in a second so
10:45 - anyways I'm just going to type all these
10:46 - names so by maintenance door what do you
10:50 - call it persons lug underscore boots and
10:55 - safety okay so we should probably spell
10:58 - that correctly
10:59 - again so essentially all this is doing
11:01 - is it just gonna convert all of this
11:02 - into one big list for us and so we have
11:04 - this list conversion here and this is
11:06 - just gonna take our numpy array and it's
11:08 - gonna convert it into a list because
11:09 - that's what we need when we're doing
11:11 - like that's a few different things okay
11:12 - so now what we're gonna do is we're
11:15 - gonna do this like split train test
11:17 - thing like we did before so I'll just
11:18 - copy it in just because I've already
11:20 - kind of went through what this does and
11:21 - it's easy enough so essentially we're
11:24 - gonna have our X train X test Y train Y
11:26 - test and then we're gonna use the exact
11:28 - same thing so SK learned model selection
11:30 - trains test split and then test size of
11:33 - 0.1 if you'd like a larger test size to
11:36 - test on more values you could do 0.2 0.3
11:38 - but essentially once you start going
11:40 - more than 0.2 you're kind of sacrificing
11:43 - performance by not having as much data
11:45 - to train on okay so now that we've done
11:48 - that let's just print out a few of our
11:50 - lists here just so we can see that
11:53 - everything is working and then I think
11:55 - we're probably going to move into the
11:57 - next video so we'll just print X train
11:59 - and Y test and we can see that we're
12:01 - getting stuff that looks like this and
12:03 - this will be data that is fine that we
12:05 - can pass into our classifier to test on
12:08 - so essentially that is all for this
12:10 - video
12:10 - I just want to make sure we're getting
12:11 - our data in the correct form and kind of
12:14 - show you how would we go about
12:15 - transforming all of our data that is non
12:18 - numerical into numerical data we can
12:20 - just use this fit underscore transform
12:22 - we just have to make sure that we give
12:24 - it here we give it a list value as
12:25 - opposed to like a numpy array or a
12:28 - panda's data frame so if you guys
12:31 - enjoyed the video please make sure you
12:32 - leave a like and subscribe and I will
12:33 - see you again in the next one
12:35 - [Music]

Cleaned transcript:

hello and welcome to another machine learning tutorial so in the next few videos and today's video we're going to be going through an algorithm called K and and now that stands for K nearest neighbors where K is any kind of integer alright now they also have a nearest neighbor algorithm which is precisely the same thing as K nearest neighbors except it's just assumed that you only have one neighbor that you're looking for and we're gonna talk about how this algorithm works and really implementing it in the next video but in today's video we're going to be going through collecting some irregular kind of data and how we can read in data that's not in a perfect data frame already now when I say that in the last video we had mostly integer values as our data and we didn't have any missing values we had everything nice it was set up it was in a CSV file the data we're gonna be using here is a bit different and there's some more manipulation we're gonna have to do with that before we can use it so with that being said let's get started now the data set that I'm going to be using here is the car evaluation data set now knn is used for classification typically now what that means is we're gonna be classifying some data sets or some data point to a certain class now in this case we're trying to classify cars based on a few different properties or a few different attributes here and the four different classes that we can have is a CC ACC good and very good so our algorithm is going to attempt to decide on one of these four classes represented between zero and three based on the input that we're given now I won't go in and talk too much about the data sex I've already kind of gone through what this means but essentially you can see this just says classification here we have a quite a few instances and six attributes for each instance okay so let's go ahead and go to down a folder here and what we're gonna do is we're just going to download card data sorry guys just a quick side note here if you want to follow along with the tutorial and see the textbased version of this as well as all the code and resources and assets that I'm using as well this data file here go ahead and hop over to tech with Tim dawn net the link is gonna be in the description down below and on there you can see all the code that I write and have all the downloads and everything in one place now when you click this you should get something that looks like this obviously you can just like copy and paste it like that if you want or you could just rightclick on it and click Save As pick your directory and then just save it as card data okay so once you've done that actually I'll leave this window open in case you want to come back to it you should have a file that looks something like this in the directory of wherever your script is we're gonna be working in so essentially this is gonna want to be in the same what do you call it environment that we were working in before and you should just have like whatever file you're gonna be using and then card add data ok so what I'm gonna do actually and I've already done it here but I need you to add this line to the top of your data so yours should look like this and then just keep going what I need you to do is click enter and do this now essentially the reason we're doing this is because we want to use pandas to read this data in and pandas reads the first line of our text file or our file as the the attributes right or the labels for our other features sorry for our data set so essentially I am just defining what these features are and it's the exact same if you go on the website I knew there was a reason I left it up and we go back here you can see that the name of all of them are here and yeah so I just literally picked these names and just type them out and separated by commas just to make our lives a little bit easier now yes I could have done this from code but it's such an easy that'll like typing things so I just decided to do it in here ok so once you do that make sure you hit control s and save that file and now we're going to go into whatever file we're gonna be working in I'm just gonna import a few dependencies okay so obviously we need to input s Caitlyn from SK learn utils we're gonna import shuffle and then we're going to import SK or from SK learn dot neighbors import K nearest neighbors classifier okay and what else do we need we need to import pandas as PD so and we need to import numpy as NP and is there anything else we need then we have a trick here we need to oh yes one more here I'm just gonna copy it in because I don't want to type it out we need to import linear model and preprocessing from SK learn so now let me talk about essentially what we're gonna do with this data so actually first let's just read it in using pandas which we already know to do so PD we're going to read CSV even though it's not a CSV file because it's like the same thing separated by commas and then we're gonna do car dot data okay and now just to ensure that this is working we can just print the our data head here and just make sure that everything looks fine so let's just run this quickly KNN yes tutorial file now I need to change this configuration sorry one second to change this to working file what's so when I'm working in right now and we'll just hit run give it a second to load up our CSV file here and there we go okay so we can see we have buying dist answer maintenance and then it goes through and you can see all of the different properties and that is working fine for us okay so now let's talk about what we need to do essentially so remember I was saying in the last video not to use features that have non numerical data so for example a feature that says like yes or no now the reason I said not to use that is because we're doing computations on this data and we're performing operations we're subtracting adding multiplying whatever and we can't do that with data that is not numerical so that means we have to convert our non numerical data into numerical data so if we go in the car data set here we can see that actually almost all of our data is non numeric so we actually have to do and what he call its SK learned comes with something that can help us do this code preprocessing so we have to convert something like V high and on a sea C and medium and low into integer values that correspond with like medium so all of our mediums would be like a1 all of our lobes would be a0 all of our highs would be a2 and then same thing for like small V high ok no we could do this in like it's very it's not easy but you can do it by just like reading in the file and manually going through and modifying elements but why would we do that when SK learn actually has something called preprocessing for us which can help us to do that so essentially I'm going to create a new here I was gonna call it preprocessing dots what is it called here one second guys preprocessing the label encoder okay so yes that's what it is so essentially what this is going to do is it is gonna take the labels that are here and it's going to encode them into appropriate integer values now this is just the object that will do this for us we haven't done it yet obviously we need to pass our data frame so essentially what I'm gonna do now is I'm actually gonna create an array for each of our columns okay or an array actually we're gonna do a list so buying is gonna have one main two door person slug but safety just because the way that this works is it needs to take a list and right now we have a panda's data frame now you might ask well why don't we read it in with pandas it just cuz it makes it a lot easier than trying to read it in just using like for loops and open and all that but you'll see what and why I'm doing this in just a second so let me just have a look at these attributes we're gonna make a variable called buying it's gonna be equal to and this is gonna be weird but just follow along with me okay list and then what we're gonna do here and do data le in here and for that so we're going to do le dot what do you call it fit transform and we're going to put this in here okay but I'm sorry instead of data le I don't know why I did that we're just gonna pick buying as our column okay so essentially what this is gonna do is it's gonna get the entire buying column so it's gonna get all of these V highs alright it's gonna turn them into a list and then it's going to transform those into a appropriate integer values now I'm just gonna copy this in paces a few times because we're going to need to do this for actually all of our values except for one I believe because one of them is actually already numeric so the next one is maintenance so weird should I do the exact same thing and we're going to replace this with maintenance what's the one after this we have doors so I believe doors actually doors maybe nonnumerical in some instance as well so we'll just do this in case what's the next one we have person's and lug boot okay so persons and in here obviously we need persons and then lug boot and I think there's two more which would be the class and safety so essentially what we're gonna do after we finish this here is we're just gonna add these back into like a main list and you'll see what I'm doing in one second so safety and we need safety here as well and then we need finally the class which is what I can't actually name that class I'll just name it CLS and then here this will be named class okay now I'm just gonna create a predict variable here just like I did before and I'm just gonna name this class just so this can save us a bit of time when we're trying to create our likes like splitting our data into things okay so essentially what we have now is this is actually going to return to us a numpy array okay and essentially we're just turning buying into all integer value so actually I'll prove it to you I'll just show you what it looks like in case any of you are confused so just by printing out buying what we're doing now essentially is we're turning this Oh actually you'll just show you here quickly so we don't get confused okay so you can see buying is equal to like V hi V hi V hi whatever so now you can see we go and it's turned that V hi into a three value and then you can see that other values in the list that we're like low or whatever have been turned into one so now that we have integers we can actually work with this data so essentially what I need to do now is I just need to actually create my X list and my Y list now what I'm gonna do is our X is obviously going to be our features well Y is gonna be our label so Y is easy enough and it's actually just going to turn our what do you call it class into a list because this we're gonna need to use and then X is we're gonna actually use zip to put all of our different what do you call it features here into one list so you don't know what zip does essentially it just creates a bunch of tuple objects with all of the different values corresponding with the lists we give it so you'll see what I mean in a second so anyways I'm just going to type all these names so by maintenance door what do you call it persons lug underscore boots and safety okay so we should probably spell that correctly again so essentially all this is doing is it just gonna convert all of this into one big list for us and so we have this list conversion here and this is just gonna take our numpy array and it's gonna convert it into a list because that's what we need when we're doing like that's a few different things okay so now what we're gonna do is we're gonna do this like split train test thing like we did before so I'll just copy it in just because I've already kind of went through what this does and it's easy enough so essentially we're gonna have our X train X test Y train Y test and then we're gonna use the exact same thing so SK learned model selection trains test split and then test size of 0.1 if you'd like a larger test size to test on more values you could do 0.2 0.3 but essentially once you start going more than 0.2 you're kind of sacrificing performance by not having as much data to train on okay so now that we've done that let's just print out a few of our lists here just so we can see that everything is working and then I think we're probably going to move into the next video so we'll just print X train and Y test and we can see that we're getting stuff that looks like this and this will be data that is fine that we can pass into our classifier to test on so essentially that is all for this video I just want to make sure we're getting our data in the correct form and kind of show you how would we go about transforming all of our data that is non numerical into numerical data we can just use this fit underscore transform we just have to make sure that we give it here we give it a list value as opposed to like a numpy array or a panda's data frame so if you guys enjoyed the video please make sure you leave a like and subscribe and I will see you again in the next one
