With timestamps:

00:00 - hello everybody and welcome to video 4
00:02 - in this series
00:03 - now before we dive in i'm just going to
00:05 - spend a minute or two addressing some of
00:06 - the comments i got on the previous video
00:08 - and just reassuring you about some of
00:10 - the things that are going on in this
00:11 - series because a lot of you seem to be
00:13 - slightly concerned and while i want to
00:14 - make sure that you're reassured before
00:16 - we move
00:16 - forward so first of all the main comment
00:19 - i was getting is a lot of people were
00:20 - saying hey you should be using
00:21 - functional based components and not
00:23 - class based components
00:25 - now i'm going to give an apology right
00:26 - now because i am not a react
00:28 - master and in fact i probably should
00:30 - have stated that in the third video when
00:32 - we were setting up
00:33 - react but i am absolutely not a pro i'm
00:36 - not a master i am learning
00:38 - just like you guys and in fact that's
00:40 - why i make a lot of these tutorial
00:41 - series because i'm able to learn along
00:43 - with you
00:44 - and share what i've learned and kind of
00:45 - touch on the main pain points that i had
00:47 - when learning the framework
00:48 - which seemed to help you guys out so i
00:51 - was not aware that functional components
00:53 - were just
00:54 - extremely superior to class-based
00:55 - components and hence this series does
00:58 - use
00:58 - class-based components now the main
01:00 - reason behind that is when i worked at
01:02 - microsoft the entire code base that i
01:04 - used
01:05 - used class-based components so that is
01:06 - what i was comfortable with
01:08 - that's what i knew about react i knew
01:09 - functional components were a thing but i
01:11 - did not realize
01:12 - that now there's been kind of a shift
01:14 - and these are just the superior and
01:16 - better way to go
01:18 - so this will be using class-based
01:19 - components and some of you may be
01:21 - disappointed by that but i will state
01:23 - that it is very easy to translate these
01:25 - into functional base components
01:27 - and i will make an effort to make a
01:28 - video near the end of the series
01:30 - that goes through and translates some of
01:32 - these components that really don't need
01:34 - to be class-based components
01:35 - into functional components so you can
01:37 - understand how that works
01:38 - that being said class-based components
01:40 - are not going to be removed from react
01:42 - they're still an important part of the
01:44 - framework and learning them is still
01:45 - valuable so i don't think that that's
01:47 - going to be a huge hindrance to this
01:49 - tutorial
01:49 - and you're still going to learn a ton
01:51 - about web development react and django
01:54 - regardless if i'm using class or
01:56 - functional components now another thing
01:57 - people were saying is hey you're making
01:59 - this really complicated
02:00 - now i agree i'm making it complicated
02:02 - the reason why i spent as much time in
02:04 - the last video as i did
02:05 - is because i want to make sure you guys
02:07 - understand what is going on
02:09 - and you're able to deal with problems if
02:10 - they occur i cannot tell you guys how
02:12 - many times i've simply just typed in a
02:14 - command
02:15 - had everything done for me and then
02:17 - something goes wrong and it takes me
02:18 - hours or even days to figure out what
02:20 - the heck is going on because i actually
02:22 - don't understand the setup at all
02:23 - i just had some magical command do it
02:25 - for me so that was my motivation behind
02:27 - actually doing the manual setup with you
02:29 - guys
02:29 - and i hope that you can appreciate that
02:31 - and understand why we went through all
02:33 - of that kind of pain
02:34 - because that is going to save you a lot
02:35 - of time in the future if you ever need
02:37 - to modify the setup or you're wondering
02:39 - why something is not working
02:40 - so i do apologize for this long
02:42 - introduction but it's very important to
02:44 - me that i shared that information
02:45 - with you guys i do really care about the
02:47 - quality of this series and i do have to
02:49 - apologize
02:50 - because i really should have done that
02:51 - research before starting to film
02:53 - these videos that being said this
02:55 - project is really about just doing
02:57 - getting hands-on and actually creating
02:59 - something not everything is going to be
03:00 - done to the industry standard
03:02 - and i wouldn't expect it to be
03:04 - especially if you guys are just working
03:05 - on some kind of hobby project
03:07 - or trying to get up and running and
03:08 - build a simple react application
03:10 - so anyways i hope you guys enjoy if you
03:12 - do notice any mistakes of course leave
03:14 - them down below and i will try my best
03:15 - to address those comments
03:20 - [Music]
03:26 - i'm gonna keep saying it but if you are
03:27 - here give yourself a pat on the back
03:29 - now things are just starting to get good
03:31 - we're going to be writing a lot of code
03:33 - in these next videos
03:34 - and i guarantee you are going to learn a
03:36 - ton especially if you don't already know
03:37 - the react and django frameworks
03:39 - so in this video what we're going to be
03:41 - focusing on is adding a few little bits
03:43 - of styling to our app
03:44 - we're also going to be making another
03:46 - component and then we'll be working with
03:47 - the react
03:48 - router to actually handle page routing
03:50 - and i'll show you kind of how that works
03:52 - so let's go ahead and get started the
03:53 - first thing i want to do is add some
03:54 - styling to our app
03:56 - so if you look at index.html you might
03:58 - have noticed that i already loaded
04:00 - in a style sheet called index.css from
04:02 - the static
04:04 - css folder now if you look inside of
04:06 - that folder here notice that we don't
04:07 - actually have an index.css file
04:09 - so the first thing we're going to do is
04:11 - create one we're going to say index.css
04:13 - and put that inside of static
04:15 - css all right so now we have index.css
04:18 - and i'm just going to add a few basic
04:20 - styles that are going to expand
04:22 - our divs and we can look inside of
04:23 - index.html here so the main div
04:26 - and the appdiv to take up the entire
04:28 - screen and have kind of the correct
04:30 - layouts
04:30 - i'm not focusing heavily on styling in
04:32 - this tutorial series so i'll kind of
04:34 - briefly go through what it is that i'm
04:35 - doing and you're welcome to kind of look
04:36 - up this syntax if you don't know what it
04:38 - does
04:38 - but the first thing i'm going to do is
04:40 - i'm going to make the height equal to
04:41 - 100 percent for the body and the html
04:43 - tag
04:44 - then i'm going to say the margin is
04:45 - equal to zero or sorry this needs to be
04:47 - a semicolon there
04:49 - and the padding is equal to zero and i'm
04:52 - going to change the default color of the
04:53 - text to be
04:54 - white that is because we are going to
04:56 - add that cool gradient background that
04:58 - changes colors and the white text just
05:00 - looks better on it
05:01 - but now that i think about that we're
05:02 - not going to add that in this video so i
05:04 - might just
05:04 - can i do a comment in css i don't know
05:06 - how to do that i'm just going to remove
05:07 - the color tag like that
05:09 - so we will add that later but if you
05:10 - want to change the text color that's how
05:12 - you could do it
05:13 - next i'm going to apply some styles to
05:14 - my main div and i'm also going to apply
05:16 - some styles to my
05:18 - app div so the main div is wrapping the
05:20 - app div
05:21 - and the app div is where our react code
05:23 - is actually going to be rendered
05:24 - so here we'll go inside of main and the
05:26 - first thing i'm going to do is make the
05:27 - position fixed so that's not moving
05:29 - around
05:30 - i'm going to say the width equals 100
05:32 - and the height equals 100 percent
05:34 - we're going to position this at left 0
05:36 - and top
05:37 - 0 which pretty much means take this main
05:39 - div and just throw it at the top
05:41 - left hand corner of our screen and then
05:42 - make its width and height fill the
05:44 - entire screen
05:45 - and since the position is fixed this
05:47 - will mean that we're not going to have
05:48 - any
05:48 - scroll wheels or scroll bars on our on
05:51 - our page because we don't need them for
05:53 - this app
05:53 - so now we're going to go inside of apps
05:55 - we're going to do a very similar thing
05:56 - and make the width 100
05:57 - we're going to make the height you
05:58 - guessed it 100 and we're going to make
06:00 - the display
06:01 - actually be a flex display this is just
06:04 - because some of the components we're
06:05 - going to be using
06:06 - work in kind of the flex grid or
06:09 - whatever it is for css
06:10 - so we just need to apply this to the app
06:12 - if you don't add this you'll notice that
06:14 - a bunch of styles and stuff we do later
06:15 - on
06:16 - will be kind of all messed up but you
06:17 - know you're welcome to try that and see
06:18 - what does happen if you
06:20 - avoid adding that so now if you want to
06:22 - add any other
06:23 - unique styles to your app feel free to
06:25 - add them right inside of index.css
06:28 - because this style sheet is already
06:29 - loaded from our html document
06:31 - and now we're going to head over to the
06:32 - app.js file and just take a quick pause
06:35 - so i can once again thank the sponsor of
06:37 - this video and this series which is
06:39 - algo expert algo expert is a coding
06:41 - interview prep platform that has 100
06:43 - unique coding interview questions and is
06:45 - constantly being updated with new
06:46 - features and new questions
06:48 - algo expert now has a brand new mock
06:50 - interview feature on its platform
06:52 - which is arguably one of the best ways
06:54 - to get real world coding interview
06:55 - practice
06:56 - check it out from the link in the
06:57 - description and use the code tech with
06:59 - tim for a discount on the platform
07:01 - so now that we're inside of app.js i'm
07:03 - going to explain what this basic react
07:05 - code actually does
07:06 - and how react kind of works and then
07:08 - we'll build another component and we'll
07:09 - talk about react page routing
07:11 - using that thing called the react router
07:13 - so right here we have a component now
07:16 - the way that react works is we have a
07:18 - bunch of components
07:19 - and components can render other
07:21 - components so the entry point to our
07:23 - application is going to be our first
07:24 - component which we usually called app
07:27 - and notice that what we did is we simply
07:29 - rendered this component
07:31 - inside of the app div to our index.html
07:34 - template file
07:35 - so essentially what this is doing is
07:37 - taking this component right here
07:38 - and just placing it inside of that div
07:41 - and this component has some logic behind
07:43 - it
07:43 - and it has this method called render
07:45 - which will return
07:46 - the actual html that should be displayed
07:48 - on the page
07:49 - now this is really useful to have these
07:51 - kind of components because what this
07:53 - means is i can make my own custom
07:55 - components and i can reuse them
07:57 - so let's say i make a component for
07:59 - something like an image or i make
08:01 - something for like a responsive button
08:03 - well all i have to do is write out the
08:05 - components tag that looks something like
08:07 - this
08:07 - it's simply the name of the component
08:09 - and then inside of a standard html
08:12 - tag and well i can reuse that component
08:14 - and render it as many times as i want on
08:16 - the screen
08:17 - what i can also do is pass what's known
08:19 - as props
08:20 - to the component so if we have a look
08:22 - here what a prop is is simply an
08:25 - attribute or simply a argument that we
08:27 - give to the component
08:28 - it will internalize that and then it
08:30 - will use that in some way to modify the
08:32 - behavior
08:33 - of the component so if i go ahead and do
08:35 - something like app and then i pass a
08:37 - prop
08:38 - and i say name equals let's just go
08:40 - ahead and make that a string of tim
08:42 - now what i can do inside of my render
08:44 - method is i can change this testing
08:46 - react code
08:47 - to actually be equal to this dot props
08:51 - dot and you guessed it name so now what
08:54 - will happen is i will actually render
08:55 - the string tim
08:56 - or whatever was passed as the name prop
08:58 - to this app component so it doesn't make
09:00 - much sense to do this for a component
09:02 - that we're only using
09:03 - one time but if we were making say a
09:05 - button then maybe some props we would
09:06 - want to pass it with something like the
09:08 - color
09:08 - something like the text on the button
09:10 - maybe like the shadow color whatever you
09:12 - could get the idea we can pass
09:14 - properties to the components and then it
09:16 - can use those properties to modify its
09:18 - behavior
09:19 - now you may be asking me why did we add
09:20 - these little squiggly brackets here
09:22 - well whenever we want to actually write
09:24 - javascript code inside of our render
09:26 - function
09:27 - what we do is we simply put it inside of
09:29 - these little squiggly brackets at least
09:31 - sorry when we're in the return statement
09:33 - what this allows us to do
09:34 - is actually embed javascript code into
09:37 - our html text so it's really useful
09:40 - because i can write say an if statement
09:42 - inside of this return statement
09:43 - and all i have to do is just wrap it
09:45 - using these squiggly brackets
09:47 - and all is good and it will just take
09:49 - and evaluate whatever this is and put
09:51 - that into html code
09:53 - now of course i can write like a
09:55 - standard if statement up here without
09:56 - those brackets
09:57 - but as soon as i get into the return
09:59 - statement and i'm inside of some already
10:01 - written html codes like these h1 tags
10:04 - that's where i use these squiggly
10:05 - brackets and this will make more sense
10:06 - as we go on
10:08 - but now let's actually try this out i do
10:10 - have to rerun my server because i did
10:11 - close this
10:12 - before i re-recorded this video but
10:14 - let's go cd
10:15 - music controller and now let's go python
10:18 - manage.pi run server
10:22 - see if that's all good okay and now
10:23 - let's make another terminal here
10:26 - let's cd into music controller
10:29 - let's cd into front end and then let's
10:31 - go
10:32 - npm run dev like that
10:35 - give it a second to run here okay
10:37 - compilation started
10:38 - now i need to open up a browser window
10:41 - let's open up a new one here
10:43 - and let's go to 127.0.0.1 and notice
10:46 - tim is showing up on the screen so now
10:49 - if i go ahead and change this name and i
10:51 - say oh we're going to show
10:52 - bob on the screen instead and we have a
10:55 - refresh here
10:56 - bob shows up so that is how we pass
10:58 - props through to our components
11:00 - and there's one more thing that we can
11:01 - talk about which is called state
11:03 - now i don't really want to get too much
11:04 - into the state because that's probably
11:06 - for a later video but this is this thing
11:08 - called a state that we can store on our
11:10 - components
11:10 - so we can say something like this dot
11:12 - state equals and then inside of here we
11:14 - can define
11:15 - all of the stateful aspects i guess that
11:18 - we want to store
11:19 - and whenever the state of our component
11:21 - is modified it will automatically
11:23 - re-render the entire component now this
11:26 - is really cool because say
11:27 - the database updates and all of a sudden
11:29 - the state of our web page has to change
11:31 - all we have to do is modify the state of
11:34 - our component
11:34 - and it will automatically re-render just
11:37 - that component
11:38 - so we don't have to re-render the entire
11:40 - page it's just going to be that
11:42 - component that will update
11:43 - and that's really cool and that's what
11:45 - makes react really powerful and useful
11:46 - and we'll look at states later on
11:48 - but anyways now that we've done this i
11:50 - want to get into the actual react
11:52 - routing so i'm going to get rid of this
11:53 - prop we'll just go back to what we had
11:55 - before and just say
11:56 - test website or something and let's make
11:59 - another component now and then render
12:00 - that component from this main app
12:02 - component
12:03 - so i'm going to make a new file i'm
12:04 - going to call this one homepage.js
12:08 - and as you guess this is going to store
12:09 - the home page for our application
12:12 - so just like from before we're going to
12:13 - say import
12:16 - react comma component from and that
12:19 - should be
12:20 - react we don't need that render anymore
12:23 - so let's actually go back to app.js
12:24 - because we already rendered this app
12:26 - component
12:27 - and what we're going to do is render the
12:28 - home page component from the app
12:30 - component
12:31 - so let's just make this default class
12:33 - structure though so let's go to home
12:34 - page
12:34 - and let's say okay export default
12:38 - class let's call this the same thing as
12:40 - our file name that's standard
12:42 - convention and we're going to say extend
12:44 - component like that
12:46 - we need to make sure we add our
12:47 - constructor so we're going to say
12:50 - constructor like that we're going to say
12:52 - props and then inside of our constructor
12:54 - we always need to call the parent
12:56 - constructor so we're going to say super
12:57 - props that we'll call the constructor of
12:59 - component which is necessary
13:01 - we could do something else inside of the
13:02 - constructor if we want but for right now
13:04 - we'll leave that blank
13:05 - and then we'll say render inside of here
13:07 - and we'll simply return whatever html it
13:10 - is that we want to render
13:11 - so again just to kind of give us an
13:13 - example here
13:14 - let's just render a paragraph tag and
13:16 - another paragraph tag
13:18 - and let's say this is the
13:21 - home page like that so that is our
13:24 - component i don't think i messed
13:25 - anything up there
13:26 - let's now go to app.js let's import this
13:29 - component so i'm going to say import
13:32 - home page from and then we can guess
13:36 - it's going to be
13:37 - dot slash home page like that and now
13:40 - we'll be able to use this homepage
13:41 - component
13:42 - from right inside of this app so now
13:45 - instead of rendering this h1 tag
13:47 - i'm going to render the home page
13:50 - component like that now i could
13:53 - i can render it like this where we have
13:55 - two open our two tags sorry an opening
13:57 - tag and a closing tag but i also can
13:59 - just add the slash like that which is
14:00 - typically the convention
14:02 - and now if i wanted to i can add any
14:04 - props that i want to pass
14:05 - to my home page now i could also pass
14:08 - props that were passed to this app
14:10 - over to the home page right that's
14:11 - something that we could do we can pass
14:13 - all kinds of crazy stuff and well
14:15 - i just wanted to make that clear that we
14:18 - can pass things through to the component
14:20 - although i did already mention that
14:21 - so now we have a home page and just uh
14:24 - to kind of illustrate the react routing
14:26 - aspect
14:26 - let's make two more pages here so let's
14:28 - make a room
14:30 - join page so remember in our app we're
14:32 - going to have a page to
14:33 - join a room and we're going to have a
14:35 - page to create a room so let's say room
14:36 - join page.js
14:38 - and let's literally just go to homepage
14:40 - copy this exact same thing and we'll
14:42 - just change the component name
14:44 - to be room join
14:47 - page and then instead of this is the
14:48 - home page this is the room
14:51 - join page maybe we could say join room
14:53 - page maybe that makes more sense
14:54 - name it whatever you like and then copy
14:56 - this again
14:57 - let's make another component and let's
14:59 - call this one create
15:01 - room page dot js
15:04 - same thing here let's rename this
15:07 - to create room page and then instead of
15:10 - this is the room join page
15:12 - this is the create room
15:15 - page all right so now we have three
15:16 - components let's go back to app.js and
15:18 - import all of those
15:19 - so let's say import room
15:22 - join page from
15:26 - and then same thing dot slash room join
15:29 - page
15:30 - and then let's import create room
15:34 - page from dot slash
15:37 - create room page okay so now i want to
15:40 - show you how we can actually render
15:41 - all of these so let's do just a bracket
15:44 - here for our return statement
15:45 - and now let's just render all of these
15:48 - different components
15:49 - inside of a div so let's create a div
15:52 - let's bring that down oops i wanted to
15:55 - delete that
15:56 - and now we will render the other two
15:58 - components so room join page
16:01 - nope let's end the tag like that and
16:04 - create
16:05 - if i open the tag create room page
16:09 - like that so now technically we should
16:11 - be rendering all three of these
16:12 - components i'll have a look at my web
16:14 - browser in a second
16:15 - but notice that the reason i put them
16:17 - inside of a div is simply because when
16:18 - we return something
16:20 - there needs to be like an exterior
16:22 - wrapper for everything that we're
16:23 - returning if i just try to return
16:25 - this here you notice that we're getting
16:28 - an error it's giving us this red
16:29 - squiggly line
16:30 - and essentially it's saying we must have
16:31 - one parent element so it has to be one
16:33 - element that we return to start
16:35 - so we can return this div that then
16:36 - contains all of these inside of it
16:38 - that's why i added the diff but anyways
16:40 - let's go look at
16:40 - the web browser now let's refresh and we
16:43 - get this is the home page this is the
16:44 - room join page and this
16:46 - is the create room page so that is the
16:48 - basics on how these components work
16:50 - and i obviously could reuse them as many
16:51 - times as i want so now if i go look at
16:54 - my web browser and i refresh we get the
16:56 - create
16:57 - room page three times but this is no
16:59 - good i don't want to render all these on
17:00 - the same page i want to have urls that
17:02 - direct me to each of them
17:04 - so this is where we get into the react
17:06 - router aspect which i think is kind of
17:07 - cool so we're going to do that
17:09 - now from our home page so let's go over
17:12 - to our home page
17:13 - uh where is the home page first of all
17:16 - let's delete room join page and create
17:18 - join page we don't need that from here
17:20 - and let's go to the home page and let's
17:22 - actually import those two things so
17:24 - we'll import room join page
17:26 - and create room page because from here
17:28 - we're going to kind of do the routing
17:30 - system where we go to the different
17:31 - pages
17:32 - so first i'm going to import a few
17:34 - things that we need from react router so
17:36 - i'm going to say
17:37 - import and then inside of these curly
17:39 - brackets like this i'm going to import
17:41 - browser router as router what this means
17:45 - is we'll import the browser router but
17:46 - we'll just name it router so it's easier
17:48 - for us to use
17:49 - we'll also import switch we'll import
17:52 - route we'll import link and we'll import
17:56 - redirect we're not going to use all of
17:57 - these right now but we will use them
17:59 - later and then that's going to be
18:01 - from react router
18:04 - hyphen dom like that so now we have all
18:07 - the things that we need to use and
18:08 - notice when i saved it automatically
18:10 - formatted this for us
18:11 - for our actual routing system so now
18:14 - inside of the render what i'm going to
18:15 - do is instead of
18:16 - returning a simple p tag that says this
18:19 - is the home page
18:20 - we are going to return a router that
18:22 - will redirect us
18:24 - to the correct page so let's go ahead
18:26 - and say
18:27 - router like that in this case we
18:30 - actually do want a closing tag because
18:31 - we're going to put a bunch of stuff
18:32 - inside of this
18:33 - and we actually do need the brackets
18:36 - here for the return statement as well
18:37 - just to make sure that's all good
18:39 - and inside of router the first thing
18:40 - we're going to add is a switch
18:43 - and what this switch will allow us to do
18:45 - is pretty much switch on the path name
18:47 - so if you've ever used a switch
18:48 - statement before in something like
18:49 - javascript
18:50 - then you know what we can do is look at
18:52 - one variable
18:53 - in this case this is going to be the url
18:55 - or the path name that we're passing to
18:57 - this router
18:58 - and based on what that value is we can
19:00 - return something different
19:01 - so inside of here we need to make a
19:03 - bunch of roots you can think of these as
19:04 - like the cases of a switch statement
19:06 - and we simply say root we define the
19:09 - path
19:10 - and we say okay whatever is typed into
19:12 - the url bar that matches this path
19:14 - if it matches this path will return
19:16 - whatever we define inside of this root
19:18 - so we have our root and then what we
19:20 - have to do inside of the root is we have
19:22 - to say the component
19:24 - is equal to and whatever component we
19:26 - want to render
19:27 - if this root is true so if we go to say
19:30 - slash
19:30 - now in this case we don't have a
19:32 - specific component that we want to
19:34 - render if we go to the homepage right
19:35 - which is just a simple slash
19:37 - so what we can do instead is actually
19:39 - just give it some html
19:40 - that we want to show so i can simply end
19:42 - the root by doing
19:43 - slash root like that and now inside of
19:46 - here i can add some really basic html
19:48 - like say that p tag and say
19:51 - this is the home page so now if we go to
19:55 - the page slash we'll render this is the
19:57 - home page
19:58 - so let's copy this route down actually
20:00 - let's rewrite it because we're going to
20:01 - change this one a little bit
20:02 - and let's make another route now and
20:05 - let's make this path not equal to the
20:06 - home page
20:07 - but let's make this equal to the join
20:09 - page so the room join page so when we go
20:11 - to the path
20:12 - join the component that we want to
20:15 - render
20:15 - is what well we want to render the room
20:18 - join
20:19 - page so all we do is we type room
20:22 - join page like that we put it inside of
20:24 - our little squiggly brackets
20:25 - actually do i need to put inside the
20:27 - squiggly brackets yeah i think i do
20:28 - and that will simply render the room
20:31 - join page if we go to slash join in the
20:33 - url
20:34 - bar again i can simplify this by just
20:36 - adding the slash there
20:37 - and we'll do the same thing now except
20:39 - we'll do one for the create room page so
20:41 - instead of
20:41 - join we'll say create and then the
20:44 - component will be
20:45 - the create room page
20:49 - the reason i'm putting them in the
20:50 - squiggly brackets is because this
20:52 - is actual javascript code right we're
20:54 - getting it from up here
20:55 - and whenever we do that inside of our
20:56 - return statement we need to put it
20:58 - inside of squiggly brackets
20:59 - okay so now we have three routes this is
21:02 - all we need to do to actually have the
21:04 - react router working
21:05 - and now let's go to our um web page here
21:09 - let's refresh and notice that we get the
21:11 - home page now i just want to show you
21:13 - what happens if we try to go to the join
21:15 - page if we go there we get this weird
21:17 - thing
21:17 - that says hey the current path join did
21:20 - not match any of these paths
21:22 - but that's strange we have slash join
21:24 - right here inside of our react router
21:26 - well the reason this isn't working is
21:28 - because if we go look at the urls in our
21:29 - front end
21:30 - we only have one url which goes to the
21:33 - home page
21:34 - what we need to do is actually tell
21:37 - django that hey
21:38 - when we hit a url it's equal to slash
21:41 - join
21:41 - or equal to slash whatever else we want
21:44 - to render the index.html template
21:47 - that then react will take over and show
21:50 - the right page
21:51 - so whenever we create a path or a url we
21:53 - have to add it to both django
21:56 - and both react there's a way to avoid
21:58 - having to do this but for simplicity's
21:59 - sake we're just going to add it
22:01 - so i'm going to say inside of here
22:04 - path now i'm going to add join and i
22:07 - don't need the slash i can just say join
22:09 - and again we're going to render index
22:11 - when we go to join
22:12 - so now let's go back to our web page
22:15 - let's refresh
22:16 - and notice that when we render join
22:18 - we're getting this is the home page
22:19 - that's strange we shouldn't be getting
22:20 - this is the home page it should render
22:21 - something else
22:22 - i'll look into that in just one second
22:24 - but now join is working so just notice
22:26 - that
22:26 - but if i go to create oops and
22:30 - my history is here from what i was doing
22:32 - before but if i do create
22:34 - again we get page not found so what do
22:35 - we have to do well we have to add
22:38 - the path here for create so now we'll
22:40 - say create
22:41 - and when we do create we'll render index
22:44 - so let's go and have a look now at
22:46 - the app so app is rendering home page
22:48 - and home page has
22:50 - this route but for some reason it wasn't
22:52 - rendering this
22:53 - slash join or slash create page when we
22:56 - went to this path so let me just have a
22:58 - look here and see what's going wrong and
22:59 - i will be right back
23:00 - all right so i found the issue and this
23:02 - is something that is a little bit
23:03 - confusing but hopefully it will make
23:04 - sense to us we have to add this thing
23:06 - called exact right here
23:08 - to this route the reason for this is
23:10 - since we're checking this route first
23:12 - technically slash join and slash create
23:15 - match this path of just nothing i'm
23:18 - pretty sure that what this is saying and
23:19 - someone can correct me if i'm wrong on
23:21 - this but i'm pretty certain
23:22 - is if we see a path that looks like this
23:24 - so at least has the slash
23:27 - then go to this page so slash join and
23:31 - slash create
23:32 - technically match this path because even
23:34 - though they have join and create
23:36 - they have this default slash so we need
23:38 - to put exact which says hey
23:40 - this path must must match exactly
23:43 - and only in that situation when we go to
23:45 - this page and in fact to test that
23:46 - hypothesis let's save that
23:48 - let's go here and let's refresh and
23:50 - notice that this is the create room page
23:52 - is working when we go to create
23:53 - and slash join is working when we go to
23:55 - join now what happens if i go to join
23:56 - slash three
23:58 - well this didn't work because we didn't
23:59 - match the url pattern
24:01 - but i'm willing to bet that if we add
24:03 - that url
24:04 - into our urls configuration so let's
24:07 - actually go to
24:09 - urls and do this that it will bring us
24:11 - to that page so let's go here
24:13 - let's just add another url and let's say
24:15 - path
24:16 - join and let's just do join slash one
24:19 - and in this situation
24:20 - let's render index now i'm not going to
24:22 - add inside of my home page a path to
24:25 - join slash one and i want to see if we
24:27 - go to join slash one it gives us the
24:29 - room join page
24:30 - again i'm not sure if that's true but
24:31 - that's why we're going to test it out so
24:32 - let's go to join
24:34 - one refresh i think i might have messed
24:36 - up my web server here
24:38 - let's go look at the web server i'm
24:40 - missing one required positional argument
24:42 - so i must have messed something up in
24:44 - urls uh looks like
24:46 - if i go to urls uh that should be good
24:50 - let's just save that and see
24:52 - okay it looks like i just had to save
24:53 - the file am i bad on that let's go back
24:55 - to the web browser
24:57 - okay so i had some weird cache issue
24:58 - whatever anyways we're back but let's go
25:00 - to slash
25:00 - join slash one and notice that that path
25:03 - does indeed bring us to this is the room
25:05 - at join page
25:06 - so that's something interesting to note
25:08 - uh that the path if you don't add that
25:10 - exact keyword here
25:11 - doesn't have to match exactly it just
25:13 - has to match right it just has to at
25:15 - least have
25:16 - what is there so that is how we do react
25:18 - page routing we add some styles here we
25:20 - learned a bit about react and created
25:21 - some different components
25:22 - uh that is going to be it for this
25:24 - tutorial i hope you enjoyed if you did
25:26 - make sure you leave a like subscribe and
25:28 - i will see you in the next
25:30 - [Music]
25:37 - video

Cleaned transcript:

hello everybody and welcome to video 4 in this series now before we dive in i'm just going to spend a minute or two addressing some of the comments i got on the previous video and just reassuring you about some of the things that are going on in this series because a lot of you seem to be slightly concerned and while i want to make sure that you're reassured before we move forward so first of all the main comment i was getting is a lot of people were saying hey you should be using functional based components and not class based components now i'm going to give an apology right now because i am not a react master and in fact i probably should have stated that in the third video when we were setting up react but i am absolutely not a pro i'm not a master i am learning just like you guys and in fact that's why i make a lot of these tutorial series because i'm able to learn along with you and share what i've learned and kind of touch on the main pain points that i had when learning the framework which seemed to help you guys out so i was not aware that functional components were just extremely superior to classbased components and hence this series does use classbased components now the main reason behind that is when i worked at microsoft the entire code base that i used used classbased components so that is what i was comfortable with that's what i knew about react i knew functional components were a thing but i did not realize that now there's been kind of a shift and these are just the superior and better way to go so this will be using classbased components and some of you may be disappointed by that but i will state that it is very easy to translate these into functional base components and i will make an effort to make a video near the end of the series that goes through and translates some of these components that really don't need to be classbased components into functional components so you can understand how that works that being said classbased components are not going to be removed from react they're still an important part of the framework and learning them is still valuable so i don't think that that's going to be a huge hindrance to this tutorial and you're still going to learn a ton about web development react and django regardless if i'm using class or functional components now another thing people were saying is hey you're making this really complicated now i agree i'm making it complicated the reason why i spent as much time in the last video as i did is because i want to make sure you guys understand what is going on and you're able to deal with problems if they occur i cannot tell you guys how many times i've simply just typed in a command had everything done for me and then something goes wrong and it takes me hours or even days to figure out what the heck is going on because i actually don't understand the setup at all i just had some magical command do it for me so that was my motivation behind actually doing the manual setup with you guys and i hope that you can appreciate that and understand why we went through all of that kind of pain because that is going to save you a lot of time in the future if you ever need to modify the setup or you're wondering why something is not working so i do apologize for this long introduction but it's very important to me that i shared that information with you guys i do really care about the quality of this series and i do have to apologize because i really should have done that research before starting to film these videos that being said this project is really about just doing getting handson and actually creating something not everything is going to be done to the industry standard and i wouldn't expect it to be especially if you guys are just working on some kind of hobby project or trying to get up and running and build a simple react application so anyways i hope you guys enjoy if you do notice any mistakes of course leave them down below and i will try my best to address those comments i'm gonna keep saying it but if you are here give yourself a pat on the back now things are just starting to get good we're going to be writing a lot of code in these next videos and i guarantee you are going to learn a ton especially if you don't already know the react and django frameworks so in this video what we're going to be focusing on is adding a few little bits of styling to our app we're also going to be making another component and then we'll be working with the react router to actually handle page routing and i'll show you kind of how that works so let's go ahead and get started the first thing i want to do is add some styling to our app so if you look at index.html you might have noticed that i already loaded in a style sheet called index.css from the static css folder now if you look inside of that folder here notice that we don't actually have an index.css file so the first thing we're going to do is create one we're going to say index.css and put that inside of static css all right so now we have index.css and i'm just going to add a few basic styles that are going to expand our divs and we can look inside of index.html here so the main div and the appdiv to take up the entire screen and have kind of the correct layouts i'm not focusing heavily on styling in this tutorial series so i'll kind of briefly go through what it is that i'm doing and you're welcome to kind of look up this syntax if you don't know what it does but the first thing i'm going to do is i'm going to make the height equal to 100 percent for the body and the html tag then i'm going to say the margin is equal to zero or sorry this needs to be a semicolon there and the padding is equal to zero and i'm going to change the default color of the text to be white that is because we are going to add that cool gradient background that changes colors and the white text just looks better on it but now that i think about that we're not going to add that in this video so i might just can i do a comment in css i don't know how to do that i'm just going to remove the color tag like that so we will add that later but if you want to change the text color that's how you could do it next i'm going to apply some styles to my main div and i'm also going to apply some styles to my app div so the main div is wrapping the app div and the app div is where our react code is actually going to be rendered so here we'll go inside of main and the first thing i'm going to do is make the position fixed so that's not moving around i'm going to say the width equals 100 and the height equals 100 percent we're going to position this at left 0 and top 0 which pretty much means take this main div and just throw it at the top left hand corner of our screen and then make its width and height fill the entire screen and since the position is fixed this will mean that we're not going to have any scroll wheels or scroll bars on our on our page because we don't need them for this app so now we're going to go inside of apps we're going to do a very similar thing and make the width 100 we're going to make the height you guessed it 100 and we're going to make the display actually be a flex display this is just because some of the components we're going to be using work in kind of the flex grid or whatever it is for css so we just need to apply this to the app if you don't add this you'll notice that a bunch of styles and stuff we do later on will be kind of all messed up but you know you're welcome to try that and see what does happen if you avoid adding that so now if you want to add any other unique styles to your app feel free to add them right inside of index.css because this style sheet is already loaded from our html document and now we're going to head over to the app.js file and just take a quick pause so i can once again thank the sponsor of this video and this series which is algo expert algo expert is a coding interview prep platform that has 100 unique coding interview questions and is constantly being updated with new features and new questions algo expert now has a brand new mock interview feature on its platform which is arguably one of the best ways to get real world coding interview practice check it out from the link in the description and use the code tech with tim for a discount on the platform so now that we're inside of app.js i'm going to explain what this basic react code actually does and how react kind of works and then we'll build another component and we'll talk about react page routing using that thing called the react router so right here we have a component now the way that react works is we have a bunch of components and components can render other components so the entry point to our application is going to be our first component which we usually called app and notice that what we did is we simply rendered this component inside of the app div to our index.html template file so essentially what this is doing is taking this component right here and just placing it inside of that div and this component has some logic behind it and it has this method called render which will return the actual html that should be displayed on the page now this is really useful to have these kind of components because what this means is i can make my own custom components and i can reuse them so let's say i make a component for something like an image or i make something for like a responsive button well all i have to do is write out the components tag that looks something like this it's simply the name of the component and then inside of a standard html tag and well i can reuse that component and render it as many times as i want on the screen what i can also do is pass what's known as props to the component so if we have a look here what a prop is is simply an attribute or simply a argument that we give to the component it will internalize that and then it will use that in some way to modify the behavior of the component so if i go ahead and do something like app and then i pass a prop and i say name equals let's just go ahead and make that a string of tim now what i can do inside of my render method is i can change this testing react code to actually be equal to this dot props dot and you guessed it name so now what will happen is i will actually render the string tim or whatever was passed as the name prop to this app component so it doesn't make much sense to do this for a component that we're only using one time but if we were making say a button then maybe some props we would want to pass it with something like the color something like the text on the button maybe like the shadow color whatever you could get the idea we can pass properties to the components and then it can use those properties to modify its behavior now you may be asking me why did we add these little squiggly brackets here well whenever we want to actually write javascript code inside of our render function what we do is we simply put it inside of these little squiggly brackets at least sorry when we're in the return statement what this allows us to do is actually embed javascript code into our html text so it's really useful because i can write say an if statement inside of this return statement and all i have to do is just wrap it using these squiggly brackets and all is good and it will just take and evaluate whatever this is and put that into html code now of course i can write like a standard if statement up here without those brackets but as soon as i get into the return statement and i'm inside of some already written html codes like these h1 tags that's where i use these squiggly brackets and this will make more sense as we go on but now let's actually try this out i do have to rerun my server because i did close this before i rerecorded this video but let's go cd music controller and now let's go python manage.pi run server see if that's all good okay and now let's make another terminal here let's cd into music controller let's cd into front end and then let's go npm run dev like that give it a second to run here okay compilation started now i need to open up a browser window let's open up a new one here and let's go to 127.0.0.1 and notice tim is showing up on the screen so now if i go ahead and change this name and i say oh we're going to show bob on the screen instead and we have a refresh here bob shows up so that is how we pass props through to our components and there's one more thing that we can talk about which is called state now i don't really want to get too much into the state because that's probably for a later video but this is this thing called a state that we can store on our components so we can say something like this dot state equals and then inside of here we can define all of the stateful aspects i guess that we want to store and whenever the state of our component is modified it will automatically rerender the entire component now this is really cool because say the database updates and all of a sudden the state of our web page has to change all we have to do is modify the state of our component and it will automatically rerender just that component so we don't have to rerender the entire page it's just going to be that component that will update and that's really cool and that's what makes react really powerful and useful and we'll look at states later on but anyways now that we've done this i want to get into the actual react routing so i'm going to get rid of this prop we'll just go back to what we had before and just say test website or something and let's make another component now and then render that component from this main app component so i'm going to make a new file i'm going to call this one homepage.js and as you guess this is going to store the home page for our application so just like from before we're going to say import react comma component from and that should be react we don't need that render anymore so let's actually go back to app.js because we already rendered this app component and what we're going to do is render the home page component from the app component so let's just make this default class structure though so let's go to home page and let's say okay export default class let's call this the same thing as our file name that's standard convention and we're going to say extend component like that we need to make sure we add our constructor so we're going to say constructor like that we're going to say props and then inside of our constructor we always need to call the parent constructor so we're going to say super props that we'll call the constructor of component which is necessary we could do something else inside of the constructor if we want but for right now we'll leave that blank and then we'll say render inside of here and we'll simply return whatever html it is that we want to render so again just to kind of give us an example here let's just render a paragraph tag and another paragraph tag and let's say this is the home page like that so that is our component i don't think i messed anything up there let's now go to app.js let's import this component so i'm going to say import home page from and then we can guess it's going to be dot slash home page like that and now we'll be able to use this homepage component from right inside of this app so now instead of rendering this h1 tag i'm going to render the home page component like that now i could i can render it like this where we have two open our two tags sorry an opening tag and a closing tag but i also can just add the slash like that which is typically the convention and now if i wanted to i can add any props that i want to pass to my home page now i could also pass props that were passed to this app over to the home page right that's something that we could do we can pass all kinds of crazy stuff and well i just wanted to make that clear that we can pass things through to the component although i did already mention that so now we have a home page and just uh to kind of illustrate the react routing aspect let's make two more pages here so let's make a room join page so remember in our app we're going to have a page to join a room and we're going to have a page to create a room so let's say room join page.js and let's literally just go to homepage copy this exact same thing and we'll just change the component name to be room join page and then instead of this is the home page this is the room join page maybe we could say join room page maybe that makes more sense name it whatever you like and then copy this again let's make another component and let's call this one create room page dot js same thing here let's rename this to create room page and then instead of this is the room join page this is the create room page all right so now we have three components let's go back to app.js and import all of those so let's say import room join page from and then same thing dot slash room join page and then let's import create room page from dot slash create room page okay so now i want to show you how we can actually render all of these so let's do just a bracket here for our return statement and now let's just render all of these different components inside of a div so let's create a div let's bring that down oops i wanted to delete that and now we will render the other two components so room join page nope let's end the tag like that and create if i open the tag create room page like that so now technically we should be rendering all three of these components i'll have a look at my web browser in a second but notice that the reason i put them inside of a div is simply because when we return something there needs to be like an exterior wrapper for everything that we're returning if i just try to return this here you notice that we're getting an error it's giving us this red squiggly line and essentially it's saying we must have one parent element so it has to be one element that we return to start so we can return this div that then contains all of these inside of it that's why i added the diff but anyways let's go look at the web browser now let's refresh and we get this is the home page this is the room join page and this is the create room page so that is the basics on how these components work and i obviously could reuse them as many times as i want so now if i go look at my web browser and i refresh we get the create room page three times but this is no good i don't want to render all these on the same page i want to have urls that direct me to each of them so this is where we get into the react router aspect which i think is kind of cool so we're going to do that now from our home page so let's go over to our home page uh where is the home page first of all let's delete room join page and create join page we don't need that from here and let's go to the home page and let's actually import those two things so we'll import room join page and create room page because from here we're going to kind of do the routing system where we go to the different pages so first i'm going to import a few things that we need from react router so i'm going to say import and then inside of these curly brackets like this i'm going to import browser router as router what this means is we'll import the browser router but we'll just name it router so it's easier for us to use we'll also import switch we'll import route we'll import link and we'll import redirect we're not going to use all of these right now but we will use them later and then that's going to be from react router hyphen dom like that so now we have all the things that we need to use and notice when i saved it automatically formatted this for us for our actual routing system so now inside of the render what i'm going to do is instead of returning a simple p tag that says this is the home page we are going to return a router that will redirect us to the correct page so let's go ahead and say router like that in this case we actually do want a closing tag because we're going to put a bunch of stuff inside of this and we actually do need the brackets here for the return statement as well just to make sure that's all good and inside of router the first thing we're going to add is a switch and what this switch will allow us to do is pretty much switch on the path name so if you've ever used a switch statement before in something like javascript then you know what we can do is look at one variable in this case this is going to be the url or the path name that we're passing to this router and based on what that value is we can return something different so inside of here we need to make a bunch of roots you can think of these as like the cases of a switch statement and we simply say root we define the path and we say okay whatever is typed into the url bar that matches this path if it matches this path will return whatever we define inside of this root so we have our root and then what we have to do inside of the root is we have to say the component is equal to and whatever component we want to render if this root is true so if we go to say slash now in this case we don't have a specific component that we want to render if we go to the homepage right which is just a simple slash so what we can do instead is actually just give it some html that we want to show so i can simply end the root by doing slash root like that and now inside of here i can add some really basic html like say that p tag and say this is the home page so now if we go to the page slash we'll render this is the home page so let's copy this route down actually let's rewrite it because we're going to change this one a little bit and let's make another route now and let's make this path not equal to the home page but let's make this equal to the join page so the room join page so when we go to the path join the component that we want to render is what well we want to render the room join page so all we do is we type room join page like that we put it inside of our little squiggly brackets actually do i need to put inside the squiggly brackets yeah i think i do and that will simply render the room join page if we go to slash join in the url bar again i can simplify this by just adding the slash there and we'll do the same thing now except we'll do one for the create room page so instead of join we'll say create and then the component will be the create room page the reason i'm putting them in the squiggly brackets is because this is actual javascript code right we're getting it from up here and whenever we do that inside of our return statement we need to put it inside of squiggly brackets okay so now we have three routes this is all we need to do to actually have the react router working and now let's go to our um web page here let's refresh and notice that we get the home page now i just want to show you what happens if we try to go to the join page if we go there we get this weird thing that says hey the current path join did not match any of these paths but that's strange we have slash join right here inside of our react router well the reason this isn't working is because if we go look at the urls in our front end we only have one url which goes to the home page what we need to do is actually tell django that hey when we hit a url it's equal to slash join or equal to slash whatever else we want to render the index.html template that then react will take over and show the right page so whenever we create a path or a url we have to add it to both django and both react there's a way to avoid having to do this but for simplicity's sake we're just going to add it so i'm going to say inside of here path now i'm going to add join and i don't need the slash i can just say join and again we're going to render index when we go to join so now let's go back to our web page let's refresh and notice that when we render join we're getting this is the home page that's strange we shouldn't be getting this is the home page it should render something else i'll look into that in just one second but now join is working so just notice that but if i go to create oops and my history is here from what i was doing before but if i do create again we get page not found so what do we have to do well we have to add the path here for create so now we'll say create and when we do create we'll render index so let's go and have a look now at the app so app is rendering home page and home page has this route but for some reason it wasn't rendering this slash join or slash create page when we went to this path so let me just have a look here and see what's going wrong and i will be right back all right so i found the issue and this is something that is a little bit confusing but hopefully it will make sense to us we have to add this thing called exact right here to this route the reason for this is since we're checking this route first technically slash join and slash create match this path of just nothing i'm pretty sure that what this is saying and someone can correct me if i'm wrong on this but i'm pretty certain is if we see a path that looks like this so at least has the slash then go to this page so slash join and slash create technically match this path because even though they have join and create they have this default slash so we need to put exact which says hey this path must must match exactly and only in that situation when we go to this page and in fact to test that hypothesis let's save that let's go here and let's refresh and notice that this is the create room page is working when we go to create and slash join is working when we go to join now what happens if i go to join slash three well this didn't work because we didn't match the url pattern but i'm willing to bet that if we add that url into our urls configuration so let's actually go to urls and do this that it will bring us to that page so let's go here let's just add another url and let's say path join and let's just do join slash one and in this situation let's render index now i'm not going to add inside of my home page a path to join slash one and i want to see if we go to join slash one it gives us the room join page again i'm not sure if that's true but that's why we're going to test it out so let's go to join one refresh i think i might have messed up my web server here let's go look at the web server i'm missing one required positional argument so i must have messed something up in urls uh looks like if i go to urls uh that should be good let's just save that and see okay it looks like i just had to save the file am i bad on that let's go back to the web browser okay so i had some weird cache issue whatever anyways we're back but let's go to slash join slash one and notice that that path does indeed bring us to this is the room at join page so that's something interesting to note uh that the path if you don't add that exact keyword here doesn't have to match exactly it just has to match right it just has to at least have what is there so that is how we do react page routing we add some styles here we learned a bit about react and created some different components uh that is going to be it for this tutorial i hope you enjoyed if you did make sure you leave a like subscribe and i will see you in the next video
