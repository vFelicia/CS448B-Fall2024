With timestamps:

00:00 - hello everyone and welcome to video 5 in
00:02 - this flask blog tutorial series
00:05 - in this video we're going to be wrapping
00:06 - up the series by looking at how to like
00:08 - and unlike a post i'll also be showing
00:11 - you how we can implement calls to our
00:13 - backend so to the flask server
00:15 - using javascript so we don't have to
00:17 - refresh the page
00:18 - when we want to do something like add a
00:20 - comment add a like etc
00:22 - so let's go ahead and dive in
00:32 - all right so we're going to get started
00:33 - here by creating a database model for a
00:36 - like so obviously a like is associated
00:38 - with a post a user makes that
00:40 - like and so we need some way to store
00:42 - that so we know how many likes each post
00:44 - has so let's go to our models here and
00:46 - let's go class
00:47 - like db dot model sorry this is a
00:50 - capital
00:51 - m and let's start filling in what we
00:53 - need so the first thing we need
00:54 - is an id so just like all other models
00:56 - we can steal id
00:58 - we'll have an author of the like and
01:00 - then we'll also have a post
01:01 - id associated with the like so id author
01:05 - post id
01:06 - now we also could add a date created for
01:08 - the like i mean it can't really hurt to
01:10 - add that even if we don't end up using
01:12 - it so we might as well throw that in
01:14 - and honestly with that i think that's
01:15 - pretty much all we need for the like
01:17 - so now that we have the author and the
01:19 - post id we've created the foreign keys
01:21 - on
01:22 - the model here we need to add the
01:23 - relationships on
01:25 - our post and on our user so obviously
01:27 - each user will have a set of likes
01:29 - each post will have a set of likes and
01:31 - so let's add that relationship
01:33 - i'm just going to copy this relationship
01:34 - right here and change this now so that
01:37 - rather
01:38 - than comment it says likes so let's now
01:40 - change this to be like
01:41 - and we'll leave the back graph equal to
01:43 - users
01:44 - our user sorry all right now same thing
01:46 - let's paste this here
01:48 - actually i can just copy this thing and
01:50 - paste this here
01:52 - and make this backref equal to post
01:56 - all right so that should actually be all
01:57 - we need now we can access the number of
01:59 - likes by just looking at the length of
02:01 - our likes
02:02 - and then of course we have our like
02:04 - model here we'll create a new like when
02:05 - the user presses the like button
02:07 - and then we can delete the like when the
02:09 - user presses the like button again so
02:10 - kind of toggling
02:12 - liking and unliking the post okay so now
02:14 - that we have this
02:15 - we need a way for user to like or unlike
02:17 - the post so we're going to create
02:19 - some icons that will actually allow us
02:22 - to
02:22 - kind of see a thumbs up and then see
02:24 - like i guess not a thumbs down but we'll
02:26 - have
02:27 - a filled in thumbs up and then a
02:28 - non-filled in thumbs up to represent yes
02:30 - you've liked it
02:31 - or know you haven't liked this post yet
02:32 - and then some kind of counter on the
02:34 - left hand side
02:35 - showing all of the likes of a post so
02:37 - let's go to post
02:38 - div and let's start doing that alright
02:41 - so inside of here i want to add an icon
02:43 - again that thumbs up or that filled in
02:44 - thumbs up but i just realized that
02:46 - before we can do that we need to
02:47 - actually import a new css library
02:50 - that gives us access to different icons
02:52 - and this is going to be called
02:53 - font awesome so we're going to go inside
02:55 - of base.html
02:57 - and just like we have this style sheet
02:59 - right here we're going to add the
03:00 - corresponding style sheet for the one
03:02 - that gives us the icon
03:04 - so like the thumbs up icon so on there's
03:06 - a bunch of different icons you can use
03:07 - so the way we're going to get that is
03:09 - we're going to go to our web browser
03:11 - we're going to go to font awesome like
03:13 - that
03:14 - and then we're just going to press on
03:15 - font awesome now here notice it
03:18 - says start for free so we're going to
03:20 - press start for free i'll leave this
03:22 - link in the description by the way
03:23 - and then you need to enter your email so
03:25 - just enter your email and then
03:27 - set press send kit code and it will send
03:30 - you an
03:30 - email with one of the kits so i'm going
03:33 - to do this and i'll show you kind of
03:34 - what the email looks like and how we can
03:36 - get access to this okay so i've just got
03:37 - the email here i'm going to click to
03:39 - confirm my email address and set up an
03:41 - account i will make a quick password
03:45 - and let's continue okay what's your
03:47 - first name
03:48 - tim sika you
03:51 - used fontos i'm sure 2020. okay
03:54 - let's go and then notice it gives us a
03:57 - script right here that we can use to get
03:59 - access
04:00 - to font awesome so i'm going to copy
04:02 - this kit code notice it says copy your
04:05 - kits code into head
04:06 - of each template or page in your project
04:08 - that you want to use font awesome so
04:10 - copy that kit
04:11 - go right underneath our style sheet here
04:13 - we're going to paste that in and now we
04:15 - should be able to access all of the font
04:17 - awesome icons
04:18 - so here it's showing us okay we can look
04:20 - for some different icons that we can add
04:21 - and if you want to search for different
04:22 - icons well you can search for them so in
04:24 - this case i can do
04:25 - thumbs up or a like or something yeah
04:28 - let's
04:29 - search uh okay no maybe like will give
04:32 - us some results
04:33 - like okay for some reason the search
04:35 - doesn't seem to be working
04:36 - so let's just go explore icons and we
04:38 - can search
04:40 - somewhere else okay so let's search for
04:43 - a like here
04:44 - and let's see okay so we have a thumbs
04:47 - up
04:47 - now that's good we should also have a
04:50 - thumbs up that is not
04:51 - solid so this is f a solid f a thumbs up
04:56 - there should be a way to get one that's
04:57 - not solid as well
05:00 - so let me find that icon and i will be
05:01 - right back all right so i found the
05:03 - non-solid version so the non-installed
05:05 - version is fa hyphen regular fa hyphen
05:07 - thumbs up the solid version was fa
05:09 - hyphen solid fa thumbs up
05:11 - so i'm just going to copy this right
05:12 - here this i and i'm just going to show
05:14 - you where we're going to place this like
05:16 - button
05:17 - in our post div dot html
05:20 - so i want this to be right beside where
05:23 - the delete
05:24 - button would be if we were able to
05:25 - delete the post
05:27 - so that is going to be right here so
05:30 - that means i need to
05:31 - put a div around here
05:34 - and then place my like button inside of
05:35 - this dip so i'm going to say div
05:37 - like this and then we can end the div so
05:40 - slash div like that and inside of this
05:43 - div
05:43 - i am going to place my icon so i'm
05:46 - actually going to do this
05:47 - in another div do i want this in another
05:49 - div
05:51 - no it's fine i think i can just place it
05:52 - right here so let's just place this here
05:54 - for now
05:55 - this should actually show up the icon so
05:57 - let's refresh
05:58 - the page now and let's see if we see
06:01 - that like icon
06:02 - uh okay so i guess my server is not
06:04 - running so let's run
06:05 - the server and let's refresh
06:09 - and okay so the like icon is not showing
06:11 - up
06:12 - for some reason so let me have a quick
06:14 - look here and see why this is not
06:16 - appearing
06:16 - all right so i found the root of the
06:18 - issue i don't know why this was
06:20 - the case but i actually needed to change
06:21 - this to say fas
06:23 - rather than fa hyphen solid so i guess
06:26 - fas is the new way
06:28 - to represent solid or maybe the old way
06:30 - to represent solid i'm not sure but
06:32 - either way a s and then f a thumbs up
06:34 - works
06:35 - then if you change this to f a r that
06:37 - would be f a regular
06:39 - so if i do this and i refresh notice you
06:42 - have the non filled in like button
06:43 - and then if you go fas and you refresh
06:47 - you get the filled in
06:48 - like button but notice it's only showing
06:51 - up when this delete button is showing up
06:53 - obviously that's not what we want so i'm
06:54 - just going to need to kind of change a
06:56 - few things around here
06:57 - so i'm going to move this icon so that
06:59 - it is actually
07:00 - outside of this if statement and
07:02 - actually sorry no i'm not going to do
07:03 - that
07:04 - i'm going to move this if statement so
07:06 - that it's inside of the div
07:08 - so i'm going to put the if statement
07:09 - after the icon then take this
07:11 - end if and put it outside of this div
07:15 - or inside of this div sorry so now we
07:18 - have
07:18 - this which will only be shown if the
07:20 - user id is equal to post.author
07:22 - but we have this div which will still
07:24 - show the like icon
07:26 - even if the delete button is not being
07:29 - shown so that was kind of the mistake
07:30 - there so hopefully that's
07:31 - fixed now however what i want to do
07:34 - before i show
07:35 - this button here is i want to show the
07:36 - number of likes on this post
07:38 - so i'm going to do this quite simply by
07:40 - just making actually i'm not even going
07:41 - to make a tag i'm just going to put
07:44 - the post dot likes and then
07:47 - pipe length so that should give me the
07:50 - number of likes on this post it should
07:51 - just
07:52 - put that right here before the thumbs up
07:54 - icon so let's see this
07:56 - let's go here and refresh and okay we
07:59 - got an error
08:00 - it says there's no such table like okay
08:03 - the reason we're getting that error is
08:04 - because
08:05 - i forgot to recreate the database so
08:07 - let's go to init.pi
08:09 - let's go to where it says models let's
08:12 - import
08:12 - like now let's delete this database
08:16 - okay let's save
08:19 - let's go back here and refresh and now
08:22 - we need to create a new account again
08:23 - okay so let's do this we're going to go
08:25 - tim gmail.com tim one two three four
08:28 - five six
08:29 - seven one two three four five six seven
08:31 - okay sign up
08:32 - user created let's make a post okay
08:35 - testing
08:36 - post all right and there we go we get
08:38 - our like count now
08:40 - obviously at this point in time we don't
08:42 - have any functionality to actually add a
08:43 - like but we are showing the number of
08:45 - likes and we're showing our thumbs up
08:46 - button
08:47 - and if we just make another account so
08:49 - let's make a new account here let's go
08:51 - sign up
08:52 - tim2 gmail.com tim2
08:56 - okay we'll add our password here
09:00 - sign up notice that we get the like
09:02 - button still showing up even when the
09:03 - delete button is not
09:05 - appearing perfect okay so that is what i
09:07 - wanted
09:08 - now what we're going to do is we're
09:10 - going to make it so when we press on
09:11 - this like button it
09:12 - does something before we do that we need
09:14 - to set up the view
09:15 - to allow us to actually add or create a
09:18 - new like so let's do that now
09:19 - so let's create a function let's just
09:21 - call this like and i'm going to add a at
09:24 - views dot root and this is going to be
09:26 - slash
09:28 - like hyphen post slash and then post
09:31 - underscore id like that
09:34 - now let's make this at login required
09:37 - and let's get our post underscore id
09:40 - okay so we have our like
09:42 - now this method here i guess it could be
09:46 - a get request
09:47 - maybe we'll make it a post request
09:48 - because i think this makes more sense
09:49 - i'm going to say method
09:50 - equals post or methods equals
09:54 - a list post and inside of here the first
09:57 - thing we're going to do again
09:58 - is make sure that the
10:01 - what do you call it here that the post
10:03 - actually exists so we're going to say
10:05 - post
10:05 - is equal to post dot query
10:09 - dot filter underscore by and we're going
10:12 - to go id
10:13 - equal to post underscore id
10:17 - okay now if the post does not exist what
10:19 - we are going to do is
10:20 - we are going to say um
10:24 - if not post then we will flash a message
10:28 - this message will say post does not
10:31 - exist okay
10:32 - we'll say category
10:35 - is equal to error
10:39 - and then we'll say alif actually i don't
10:41 - think there's anything else we need to
10:42 - check here we can just now create the
10:45 - post
10:46 - ah this is what we need to check we need
10:48 - to see sorry if the user has already
10:50 - liked the post so we just checked if the
10:52 - post exists
10:53 - if it does exist then what we're going
10:55 - to do is check if the user has already
10:57 - liked the post
10:58 - if they've already liked the post then
11:00 - we're going to delete their like because
11:01 - this is kind of a toggle if you like the
11:03 - post and you already like it you unlike
11:05 - it
11:05 - if you've not liked the post then we
11:07 - will add a new like for that post
11:09 - so what we'll do here is we'll just do a
11:12 - query on the like object as well so
11:13 - we'll say like
11:14 - is equal to like dot query
11:18 - dot filter underscore by and then we're
11:20 - going to say
11:21 - author of the like is equal to current
11:24 - underscore user
11:25 - dot id dot first
11:29 - okay and we need to actually check the
11:31 - post as well so we'll say
11:33 - the post underscore id is equal to post
11:37 - underscore id so we need to check
11:38 - if the current user has liked the
11:40 - current post because they may have liked
11:42 - a different post
11:43 - so we need to make sure we have both
11:45 - parameters inside of here
11:47 - okay so now what we're going to do is
11:49 - import like
11:51 - okay so we'll go like there
11:55 - and this should now be good so now we're
11:56 - going to check if this like object
11:58 - exists so we'll say
11:59 - l if like so if the like object does
12:01 - exist if the user is like the post
12:03 - then we need to delete this so db dot
12:06 - session
12:07 - dot delete and we're going to delete
12:09 - like
12:10 - and then db dot session
12:13 - dot commit oops and
12:16 - actually we don't need to put anything
12:18 - inside of there nice okay now otherwise
12:20 - what we're going to do is make a new
12:21 - like so we're going to say like
12:23 - is equal to like and then we need to add
12:27 - the user or the author so the author is
12:29 - equal to the current user.id
12:32 - and the post id is equal to
12:35 - the post underscore oops underscore id
12:39 - i believe that's all we need and we'll
12:40 - go db dot session
12:43 - dot add like and what we can actually do
12:46 - here is we can take this commit
12:48 - and we can just put it at the bottom
12:49 - here because we're going to commit
12:52 - actually no sorry we need to put them
12:54 - inside of here because this does not
12:55 - actually add anything to the session so
12:57 - let's
12:58 - go db.session.commit and put that there
13:00 - i was going to just put it here
13:02 - but i realize that doesn't work because
13:03 - here we're not adding or deleting
13:05 - anything from the database we're just
13:06 - flashing a message
13:07 - nice and then from here what we're going
13:09 - to do is return
13:11 - a redirect to
13:14 - the url underscore 4 and this is going
13:17 - to be
13:18 - views dot like nice okay so that
13:22 - should be all good so now let's make it
13:26 - so when you press on that like button
13:28 - it actually sends a request to this so
13:31 - let's go
13:32 - to post div and let's make this
13:35 - now actually something that you can
13:36 - press on so let's go a
13:38 - href equals and this is going to be
13:41 - slash
13:42 - like hyphen post slash and then the id
13:46 - of the post is going to be post dot id
13:49 - okay now let's go slash a
13:53 - and that should be good okay so let's
13:55 - try this i'm going to go python app.pi
13:58 - i'm going to go here i'm going to
14:00 - refresh and now i'm gonna press on this
14:02 - like button and okay it says method not
14:05 - allowed
14:06 - okay that makes sense the reason that
14:07 - makes sense is because when we press on
14:09 - this button
14:10 - it is uh sending a post request not a
14:12 - get request so for now
14:14 - i'm gonna change used up high sorry so
14:17 - that this says a get
14:18 - i misspoke there i meant when you press
14:20 - on the button it's sending a get request
14:21 - not a post request and this was only
14:23 - accepting a post request before
14:25 - we'll actually make this just accept a
14:27 - get request okay so let's go here and
14:29 - let's refresh
14:30 - let's press on this and could not build
14:32 - url for
14:33 - endpoint views don't like okay i messed
14:35 - up there uh this should be views.home
14:38 - not views.like okay so now that we have
14:42 - the correct url
14:43 - we can refresh and when i press this
14:45 - notice we get
14:46 - one like now when i press it again
14:48 - notice we get zero
14:49 - but notice that the icon here is not
14:51 - changing right it's not changing from
14:53 - filled or unfilled
14:54 - obviously we haven't implemented that
14:55 - behavior yet but that's what we're going
14:57 - to do
14:58 - now so we want to actually be able to
15:00 - check
15:02 - from postdiv here if the current user
15:05 - has liked the post now this is a little
15:07 - bit more difficult than it
15:09 - seems to actually check this but we will
15:11 - do that
15:12 - and what we're going to do is we're
15:14 - going to change the class of this icon
15:17 - here
15:17 - to be filled in if the user has liked it
15:19 - and to be unfilled if the user has
15:21 - not liked it so what i'm actually going
15:23 - to do is make this class
15:25 - equal to icon underscore class
15:28 - and i'm going to use jenga to actually
15:30 - set a variable here
15:32 - called icon class that will be equal to
15:35 - the fielding class or the non-filled in
15:37 - class
15:37 - based on if the user has liked the post
15:39 - so i'm going to say percent percent
15:41 - if for now i'm just going to put true
15:43 - and then we'll actually fill that in a
15:45 - second
15:46 - i'm going to say else and then i'm going
15:48 - to say
15:49 - percent percent and if okay so
15:53 - here what i'm going to do is set a
15:55 - variable so i'm going to say set
15:57 - and then this will be icon underscore
15:59 - class
16:00 - equal to and this class will be fas and
16:02 - then fa
16:03 - hyphen thumbs hyphen up i believe that's
16:06 - what that class name was
16:08 - and then in the else we'll say this will
16:10 - be far
16:12 - so if the user likes the post we'll do
16:14 - that condition in a second
16:15 - we set the icon class to this otherwise
16:18 - we set it to this
16:19 - and then this uses the icon class this
16:22 - is how you set a variable in
16:23 - jenga now sorry i realized i made a
16:25 - mistake this needs to be a percent
16:27 - um not a double curly brace
16:30 - so just change that for both of these
16:32 - here and then we should be good so
16:34 - percent
16:36 - and make that a percent
16:40 - okay there we go now the next thing we
16:43 - need to change here is this condition
16:44 - right
16:45 - let me actually go back there because i
16:47 - don't like how it flattened all of that
16:49 - so we need to check if the user
16:52 - has liked the post now it's a little bit
16:55 - difficult to do this because we have
16:57 - post.likes and post.likes contains
17:00 - all of the like objects right so we have
17:03 - all the information related to each like
17:05 - so what i'm going to have to do here is
17:07 - loop through all of the
17:09 - likes and check if this user has liked
17:11 - this post
17:12 - so i'm going to go percent percent for
17:15 - like
17:15 - in post dot likes so what we'll do is
17:18 - we'll
17:18 - set a variable equal to true if the user
17:21 - has liked this post which means we need
17:23 - to set the variable up above
17:24 - equal to false so we're going to say set
17:27 - liked
17:28 - equal false notice i'm using a capital f
17:31 - not an uppercase f that is because in
17:34 - jenga you use
17:35 - lowercase for the booleans rather than
17:37 - capitals like you do in python
17:39 - okay i'm going to go percent percent and
17:41 - four and inside of here
17:43 - i'm going to say percent percent if like
17:48 - dot author is equal
17:51 - to user dot id then
17:55 - we will set that variable equal to true
17:56 - so percent percent
17:58 - set liked equal
18:01 - true okay and then we'll go percent
18:03 - percent
18:04 - and if and that should actually handle
18:07 - that for us
18:08 - and now tell us let me just indent this
18:10 - here
18:11 - uh if the current user has liked the
18:13 - post so now we can just make this if
18:15 - liked
18:16 - okay so i think this should work um not
18:19 - super confident oh god i hate how it
18:22 - flattens all of that let's
18:23 - save without formatting but let's give
18:25 - this a shot and just see what we get so
18:27 - save the formatting all right and
18:30 - save okay so now when i press this it
18:33 - does like
18:34 - but it doesn't change the icon so
18:36 - something is going wrong let me have a
18:38 - quick look and i'll be right back okay
18:40 - so i was having a ton of difficulties
18:41 - with the way i was trying to do this
18:42 - before
18:43 - so i've kind of changed strategies here
18:44 - i actually already wrote the code this
18:46 - was taking way too long
18:48 - longer than i want to admit so anyways i
18:49 - have the code here to do
18:51 - what we wanted to do change the icon
18:53 - based on if the user has liked or not
18:55 - liked the post
18:56 - so let me just walk you through this
18:57 - code here so i'm saying if
18:59 - the user.id so the current user logged
19:02 - in
19:03 - is in post dot likes and then i'm
19:06 - mapping
19:06 - post.likes to the attribute author
19:10 - so what this will do is create a list of
19:12 - all of the authors
19:14 - of the likes on this post that's what
19:17 - this line does right here
19:19 - then i'm converting that to a list
19:21 - because what this actually returns is a
19:23 - generator object
19:25 - you don't have to worry about what that
19:26 - means if you don't know what that means
19:28 - map doesn't return a list it returns a
19:29 - generator object so i convert that to a
19:31 - list
19:32 - so then i can check if the user id is in
19:34 - it if it is i'm going to show
19:36 - this so fas thumbs up otherwise i'm
19:39 - going to show this
19:40 - far thumbs up pretty straightforward but
19:43 - that's what this is doing right here
19:45 - that should get the like icon working
19:47 - properly
19:48 - so let's go ahead and do this again i
19:50 - hate how when i save it it
19:52 - flattens everything but anyways let's
19:54 - refresh and let's see if this works okay
19:56 - so we have one
19:57 - when i unlike there you go it goes back
20:00 - to a
20:00 - what is it hollow like button when i
20:02 - like it goes to a solid button
20:04 - now notice though the page is refreshing
20:07 - when i do this
20:08 - that's because in the method i just
20:10 - showed you we
20:11 - made it so that what he called it
20:13 - refreshes
20:14 - now i'm going to show you the way that
20:15 - we can do this using javascript so i'm
20:17 - going to pretty much rewrite what we
20:18 - just did here if you're happy with this
20:21 - you don't care about if the page
20:22 - refreshes or not then you're welcome to
20:24 - end the tutorial here because that's
20:25 - pretty much all i need to show you you
20:27 - now have a functioning blog
20:28 - application however if you want to see
20:30 - how we can do stuff without the page
20:32 - refreshing
20:33 - then follow along with this part right
20:34 - here i'm going to show you how we can
20:36 - link a javascript file to
20:37 - our flask project and then how we can
20:40 - make it so we actually dynamically
20:41 - change the page
20:42 - without having to refresh it so we will
20:44 - continue in one second we need to
20:46 - quickly thank the sponsor of this video
20:48 - and this series which is algo
20:49 - expert algo expert is the best platform
20:51 - to use for preparing for your software
20:53 - engineering coding interviews
20:54 - they also have two other products
20:56 - systems expert and machine learning
20:58 - expert
20:58 - to use when preparing for your system's
21:00 - design interviews or your machine
21:02 - learning interviews with that said get
21:04 - started using algo expert today by
21:05 - clicking the link in the description and
21:07 - using the code tech with tim for a
21:08 - discount on the platform
21:10 - all right so we're going to start by
21:11 - adding the javascript file to
21:13 - our page so the way we do that is we go
21:15 - inside of website and we create a folder
21:18 - this folder is called static it's very
21:20 - important you call it static
21:21 - and then you place in a javascript file
21:23 - call it whatever you want but i'm going
21:24 - to call mine index.js
21:27 - so the reason we put this inside of the
21:28 - static folder is this is a
21:30 - static asset which will be kind of
21:32 - rendered or served to us
21:34 - from the the flask web server so inside
21:36 - of static is where you would put things
21:38 - like
21:38 - images files and in this case any
21:41 - javascript files that you have so this
21:43 - is where we're going to put our
21:44 - javascript and this is where we're going
21:45 - to write the function
21:46 - that's going to get called when we press
21:48 - on that like button so while i'm in here
21:50 - i'm going to write a function i'm just
21:51 - going to
21:52 - call this like okay so function like and
21:55 - this is going to take a post underscore
21:56 - id
21:58 - for now all we're going to do is just
22:00 - console.log
22:01 - the post id okay so now we need to link
22:05 - up this javascript so to do that we're
22:06 - going to go to the base template
22:08 - and we're going to add a script at the
22:10 - bottom of our body
22:12 - that's going to reference this
22:14 - javascript file so we're going to say
22:15 - script
22:16 - type is equal to this is going to be
22:18 - text slash
22:20 - javascript actually yeah i think that's
22:22 - correct text
22:23 - javascript yes and we're going to say
22:25 - src standing for source
22:26 - is equal to and this is going to be
22:28 - inside of two uh
22:30 - brackets like this so we're using the
22:32 - jenga templating engine
22:33 - url underscore four and then this is
22:36 - going to be
22:36 - static comma and then file name
22:40 - is equal to and this is going to be
22:42 - index dot
22:43 - js and let me just make sure these are
22:45 - in single quotes
22:47 - okay so what this is going to do is it's
22:49 - going to reference the static
22:51 - folder which is right here inside of our
22:53 - our website folder
22:54 - and then it's going to find the index.js
22:56 - javascript file
22:57 - and it's going to render that or use
22:59 - that for a script now for some reason
23:01 - something's going wrong here oh it's
23:03 - because i haven't ended the script tag
23:04 - so let me just end the script tag
23:06 - right there and that's all we actually
23:08 - need to do
23:09 - to link this javascript now actually i
23:11 - think
23:12 - maybe i need to do another tag to end
23:15 - this because it's still showing me
23:16 - some html error okay yeah so that's
23:18 - proper so anyways that's what you need
23:20 - to do and then that will link up your
23:21 - javascript
23:22 - okay so now that we have that we can
23:24 - actually access any functions that we
23:26 - write
23:27 - inside of here okay so i'm back inside
23:29 - of post div
23:30 - and what i'm going to do is start
23:31 - modifying this a little bit so
23:33 - since i'm no longer going to be sending
23:35 - a get request to
23:36 - this url instead i'm going to use my
23:38 - javascript function to actually update
23:40 - the page
23:41 - i'm going to remove these a tags that i
23:43 - have here i no longer need them
23:44 - okay so i'm going to remove these a tags
23:47 - and what i'm going to do now
23:48 - is inside of my eye tags i'm going to
23:50 - start adding a few things so first i'm
23:52 - going to
23:52 - put an id i'm going to say the id is
23:55 - equal to the like
23:56 - hyphen button and then this is going to
23:58 - be for this post
24:00 - the post is going to be post dot id this
24:02 - is because i'll have multiple like
24:04 - buttons i need to know which one i'm
24:05 - referencing so let me grab my id
24:07 - and paste that inside of this icon as
24:10 - well
24:10 - this like button then i'm going to add
24:14 - a well the class is there the id is
24:16 - there i'm going to add an
24:18 - on click i'm going to say the on click
24:20 - is equal to
24:21 - and i am going to call like
24:24 - with if i can get my brackets right here
24:27 - the post dot id okay so let's add the on
24:30 - click
24:31 - to both of these so we'll add one here
24:34 - as well
24:35 - okay so there we go now the next thing i
24:37 - need to do is i need to put a
24:38 - span here and i'm going to put
24:41 - the span around my post dot likes
24:45 - the reason for this is i'm going to use
24:46 - the id of this span to change the likes
24:49 - dynamically without having to refresh
24:51 - the page
24:52 - so i'm going to say id is equal to likes
24:54 - hyphen
24:55 - count and then hyphen and then this will
24:58 - be
24:59 - post dot id okay
25:02 - so that should be good let's just make
25:05 - this look a little bit nicer for us
25:07 - okay let's move this back up here and
25:10 - let me save without formatting
25:12 - okay so let's just see if this still
25:13 - works so let's refresh
25:15 - and notice now that it's not highlighted
25:16 - in blue that's fine it's going to be
25:19 - in this color now if you want it to be
25:20 - in blue just surround it with an a tag
25:22 - but notice when i press this button that
25:24 - it's actually
25:25 - printing something in the console that's
25:27 - because the on click event is working
25:29 - if for some reason this isn't working
25:30 - for you right click on your page press
25:32 - inspect
25:33 - and then right click here and press
25:35 - empty cache and hard reload
25:37 - if you're using google chrome that will
25:38 - clear your web browser cache and then
25:40 - the javascript should get loaded
25:42 - that's a common error again this step is
25:44 - let me just close this here
25:46 - right click if you're in chrome press
25:47 - inspect right click here on the refresh
25:50 - press
25:50 - empty cache and hard reload and then you
25:53 - should get your javascript actually
25:54 - working properly
25:56 - okay now that we have that though i'm
25:58 - going to go inside of my javascript
26:00 - and i'm going to start writing some
26:01 - stuff that will update the like button
26:02 - when i press it
26:04 - so the first thing i want to do is get
26:05 - access to the like button so i can
26:07 - change its class to be
26:09 - filled in or non-filled in and i want to
26:11 - get access to the like
26:12 - count so i'm going to start by saying
26:14 - const like
26:15 - and then let me just go to my cheat
26:18 - sheet here
26:18 - the first one i'm getting is like count
26:20 - i'm going to say const like count is
26:22 - equal to document
26:24 - dot get element by id
26:27 - and then i'm going to put two back ticks
26:28 - here you'll see why in a second and i'm
26:30 - going to say
26:31 - like hyphen count or i believe this is
26:34 - likes hyphen count hyphen and then i'm
26:37 - going to do a
26:38 - dollar sign two curly braces and post
26:40 - underscore id
26:42 - uh this allows me to actually embed a
26:44 - variable inside of a string and have
26:45 - this expression evaluated
26:47 - so this will give me the string likes
26:49 - count and then whatever the id of the
26:50 - post is
26:51 - so that's my likes count now i want to
26:54 - get
26:54 - access to my like button so i'm going to
26:57 - say const like button
26:58 - is equal to document dot get element by
27:01 - id and in this case it's going to be
27:04 - like
27:04 - hyphen button hyphen and then
27:08 - post id again okay post underscore id
27:12 - now just because we're in javascript i'm
27:13 - going to change this so it's post
27:16 - and then capital id because in
27:18 - javascript
27:19 - you use camel case not snake case okay
27:22 - so now i have access to the like count
27:24 - and the like button
27:25 - so now what i'm going to do when i press
27:26 - this button is i'm going to print out
27:29 - the like count dot value
27:33 - okay so let's just see if this is
27:34 - working so let's refresh
27:36 - let's press this and notice i'm getting
27:38 - the value of the like
27:40 - count nice okay so now that i'm doing
27:42 - that
27:43 - what i need to do is actually send a
27:45 - request
27:46 - to the endpoint that i've created here
27:48 - to this like endpoint to actually like
27:50 - the post
27:51 - so i'm going to change this method here
27:52 - to be post rather than
27:54 - get i'm going to show you how from
27:56 - javascript we can send a request to this
27:58 - endpoint right here however the one
28:00 - change we need to make is that rather
28:02 - than
28:02 - redirecting us to the url for home what
28:05 - we're actually going to do is return
28:07 - something
28:08 - to the javascript that's calling this
28:10 - request since this isn't being called
28:13 - from
28:13 - kind of the main user page no that's a
28:16 - bad way to describe it since this isn't
28:18 - actually going to be rendering a view
28:19 - for us or redirecting anything
28:21 - we're just sending a request to this and
28:22 - having the likes updated
28:24 - what we want this to return to us is the
28:26 - number of likes on the post
28:28 - that's what we want to know we also want
28:30 - to know if the current user has
28:31 - liked the post so that is what we are
28:34 - going to uh
28:35 - what do you call it send back to the
28:37 - javascript you'll see how this works in
28:39 - one second
28:40 - so this means that rather than returning
28:41 - redirect url4
28:43 - we're going to import something called
28:44 - jsonify and we're going to go
28:46 - here and we are going to return
28:50 - the jsonify of the following python
28:53 - dictionary so jsonify
28:56 - like that and we're going to send likes
28:59 - is equal to and this is going to be post
29:02 - dot likes
29:02 - okay so it's actually going to be sorry
29:04 - the len of post.likes
29:07 - okay so this is going to seem a little
29:08 - bit strange but essentially i want to
29:10 - return
29:11 - json from this endpoint right here
29:14 - so from javascript i'm going to send a
29:16 - request and i'm going to receive some
29:18 - data back that data that i want to
29:19 - receive back
29:20 - is not going to be html it's going to be
29:22 - json json stands for javascript object
29:25 - notation
29:26 - now in python you can kind of create
29:28 - json by creating a dictionary so in this
29:30 - case i've created a dictionary has the
29:31 - key
29:32 - likes and that has the value post dot
29:34 - likes whatever the length of that is
29:36 - so i put that inside of this jsonify
29:38 - function and this jsonify function
29:40 - converts this to json
29:42 - and returns that as a response from this
29:45 - endpoint or url
29:46 - right here okay there we go so jsonify
29:49 - likes len of post.likes now we also want
29:53 - to return whether or not the current
29:54 - user has
29:55 - liked the post so i'm going to say liked
29:58 - is
29:58 - equal to and then in this case i will
30:01 - say
30:02 - current user dot id in
30:05 - and we're going to do the same thing
30:06 - we've done with map so i'm going to say
30:08 - map
30:09 - post dot likes we're going to say
30:12 - lambda x colon x and this will be
30:16 - dot author comma post dot likes so this
30:19 - will now tell me
30:20 - if the current user has liked the post
30:23 - nice
30:24 - did i do that anywhere else i forget if
30:25 - i showed that previously or not
30:27 - anyways that's what this will do it will
30:29 - tell us if the current user has liked
30:32 - the post by getting all of the authors
30:34 - of likes that have liked the post and
30:36 - then checking if the current user id
30:38 - is in them okay so that's good now the
30:41 - only thing is though we need to also
30:42 - return an error message if the post does
30:44 - not exist so from here
30:46 - rather than flashing a message i'm going
30:47 - to return
30:49 - jsonify and this is going to say error
30:53 - comma or colon and then we'll say post
30:57 - does not exist and then i'm going to say
31:00 - comma
31:02 - 405. actually
31:04 - 400. so what you can do is
31:07 - after the the text that you want to
31:10 - return you can return
31:11 - a status code by default the status code
31:13 - is 200 which stands for okay
31:15 - but i want to send a status code of 400
31:18 - i believe 400 is bad requests i could be
31:21 - wrong on that but i think it's bad
31:22 - request
31:22 - and so this will tell whoever sent the
31:25 - request
31:26 - to this endpoint here that hey this post
31:28 - doesn't exist you've got an error
31:30 - hopefully that kind of makes sense don't
31:31 - worry if you're not super clear on that
31:33 - but the status code is 400
31:34 - and this is the response that we're
31:36 - going to return or the information we're
31:37 - going to return
31:38 - okay so now i'm going to go to index.js
31:41 - and i'm going to use
31:42 - this fetch method now what fetch does is
31:44 - send a request so i'm going to say fetch
31:47 - where do i want to send the request well
31:48 - i want to send it to like hyphen post
31:51 - slash and then the post
31:54 - what is it i d like that okay now i'm
31:57 - going to put a dollar sign
31:59 - and i'm going to swap these with back
32:01 - ticks because that's actually what i
32:02 - want
32:04 - now what i need to do is i need to
32:05 - specify the type of this
32:07 - request or the method of this request so
32:10 - i'm going to say
32:11 - method colon and then this is going to
32:13 - be equal to post
32:14 - because i want to send a post request to
32:16 - this endpoint right here
32:18 - then i'm going to do dot then res
32:22 - and like this i'll explain what this is
32:24 - in one second essentially what this will
32:25 - do is wait for a response
32:27 - from this endpoint right here it will
32:29 - capture that response in this res
32:31 - variable and then what i will do is
32:33 - return the res.json
32:35 - so the res.json is the data associated
32:37 - with the response
32:38 - i'm then going to do another dot then
32:40 - and this is going to take in
32:41 - a data okay and this is going to get the
32:44 - data
32:46 - associated with the response so i get
32:48 - the res.json
32:50 - that means now i have my data so now i
32:52 - can access all of the stuff from the
32:54 - data here in the second dot
32:56 - then if you're unfamiliar with this
32:57 - notation essentially this is i believe
33:00 - it's es6 javascript functions
33:02 - this is creating a function right here
33:03 - this is the parameters of the function
33:05 - this is the body of the function
33:07 - and since i only have one line in my
33:09 - function by default this function will
33:11 - return whatever is here res.json okay
33:14 - now here this is taking data data will
33:16 - be whatever is returned from here so the
33:18 - response.json
33:20 - then inside of here i can access the
33:22 - data and do something like console.log
33:24 - data okay so let's try this for right
33:26 - now and i'll show you how this works so
33:28 - i'm going to go
33:29 - and run my application i'm going to go
33:31 - back and refresh
33:33 - i'm going to press this button now when
33:35 - i press this button
33:36 - notice it's still showing one so it's
33:38 - logging
33:40 - one the reason why it's doing that is
33:41 - because i need to empty my cache and
33:43 - hardware look
33:44 - so now that i do that when i press this
33:46 - notice i get undefined
33:47 - and it says post 500 internal server
33:50 - error
33:51 - there was an issue that occurred so
33:53 - let's see what issue we have it says
33:54 - base query object
33:55 - has no attribute likes okay so i know
33:58 - the problem let's go to
34:00 - views.pi and i'll show you what i did
34:02 - wrong here
34:03 - so i believe that for
34:07 - post here unfortunately i did not
34:10 - do dot first which is what i need so i'm
34:13 - going to say post
34:14 - is equal to post.query.filterby.first so
34:17 - just add that dot first and then that
34:19 - should fix the issue
34:20 - now let me try this again so let's
34:22 - refresh let's press
34:24 - this button and notice that i get liked
34:26 - true and likes
34:27 - one so when i sent that request it told
34:29 - me if the user had liked the post or not
34:31 - and then it tells me that the number of
34:33 - likes on the post is 1. now if i like it
34:34 - again
34:35 - it gives me no you have not liked it and
34:37 - the number of likes is 0 because i just
34:39 - unliked it now nothing's changing on the
34:40 - page yet
34:41 - but this is actually working this is
34:43 - doing what it's supposed to do
34:45 - so let's now continue okay so let's go
34:48 - to where were we index.js
34:53 - and let's get rid of this console.log
34:55 - first of all we don't need
34:56 - that and what we're going to do now is
34:58 - we're going to update
35:00 - these values right here uh based on the
35:03 - data that's returned to us
35:05 - so i'm gonna put some squiggly brackets
35:06 - here because this function will have a
35:08 - body
35:08 - and now we're gonna start updating the
35:09 - like count and the like button
35:11 - so the first thing i'm gonna do is say
35:13 - like count dot
35:15 - inner html is going to be equal to and
35:18 - this is going to be data
35:20 - at likes so now this is going to change
35:24 - the like count in our html to be well
35:26 - equal to data likes so if i go to post
35:29 - div here notice how i have a likes
35:31 - hyphen count
35:32 - hyphen post id so we're going to access
35:35 - that id so we're getting the document by
35:37 - its id so likes count post id
35:39 - and then of course we're just going to
35:40 - change that html
35:42 - now i think that should work likes
35:44 - hyphen count hyphen post id
35:47 - like siphon count hyphen post id okay
35:50 - uh yes let's hope that works okay so
35:53 - let's go here
35:54 - let's refresh let's press this and okay
35:57 - so for some reason
35:58 - it's not changing let me empty the cache
36:00 - and hard reload and okay so now you can
36:02 - see it's changing we're going 0 1
36:04 - 0 1 0 1 nice the last thing we need to
36:08 - change here is
36:09 - this icon so that it changes to be
36:10 - filled in or not filled in
36:12 - okay so that's actually pretty easy to
36:14 - do what we're going to do
36:16 - is grab this class name
36:19 - right here okay and we're going to go to
36:22 - index.js
36:24 - we're going to say like button
36:27 - dot class list i think that's right
36:30 - actually
36:30 - sorry it's going to be dot class name
36:34 - is equal to and then we're going to say
36:36 - f a r
36:37 - f a thumbs up and then i'm just going to
36:40 - copy this
36:41 - again and make this fas
36:44 - and now we'll implement our if so we're
36:46 - going to say if
36:48 - data liked then
36:51 - what we want is this so we'll put
36:56 - this right here oops okay otherwise
36:59 - so else we will do this
37:03 - okay so hopefully that makes sense we're
37:04 - saying if we have liked the post
37:06 - then we'll make this solid if we have
37:08 - not liked the post then we will make it
37:10 - not solid so let's go here and refresh
37:13 - so when i refresh notice we've liked it
37:14 - so it's solid when i unlike it
37:16 - it didn't change there okay so that's
37:19 - interesting why it didn't change
37:21 - it should be changing let's just see if
37:24 - i've messed something up here
37:26 - ah okay so the issue is i've said if
37:28 - data liked i need to say if
37:30 - data liked is equal equal to true
37:33 - like that okay so now if i do this
37:37 - and i refresh we've not liked so it is
37:39 - not filled in
37:40 - when i like it doesn't get filled in
37:43 - okay maybe
37:44 - my like button is not being referenced
37:47 - properly
37:47 - that is possible so let's see here i'm
37:50 - gonna go
37:52 - to my post div and i have this
37:55 - like button hyphen post dot id so i
37:57 - should be referencing this
37:58 - properly but for some reason
38:02 - it's not actually letting me change this
38:04 - okay so i've actually just emptied my
38:06 - cache and hard reloaded
38:08 - and now it's actually working so that is
38:09 - a common issue as i was saying before
38:12 - if it's not working empty the cache
38:13 - reload and then you should be good
38:15 - but notice that now this is changing and
38:17 - working properly
38:18 - and the page is not refreshing and the
38:21 - like is actually being there
38:22 - persistently so if i refresh now
38:24 - you can see i still have one like and if
38:26 - i unlike and i refresh
38:27 - i still have zero likes so everything is
38:30 - working
38:30 - as it should be there you go that is how
38:33 - you can
38:33 - uh what do you call it create the like
38:36 - or add the like without
38:37 - refreshing the page now the last thing
38:39 - i'll show you here is that you should
38:41 - really add a catch
38:43 - the reason you want to add a catch is
38:45 - because
38:46 - an error could occur so if an error
38:47 - occurs and for some reason any of this
38:49 - fails then you want to do something in
38:51 - my case what i'm going to do is i'm just
38:53 - going to show an alert so it's just a
38:54 - pop-up on the screen
38:55 - i'm just going to say like or could
38:59 - not like post okay so that's my catch
39:02 - that just means i'm not going to
39:03 - actually have an error occur i'm going
39:05 - to catch the error
39:06 - and then just let the user know hey we
39:08 - couldn't like the post for some reason
39:09 - because an error occurred here
39:11 - in this fetch all right so that should
39:14 - be it let's do one final test here
39:17 - let's add a comment okay comments are
39:21 - working
39:22 - and there you go all right so with that
39:24 - said i think i'm going to end the video
39:26 - here
39:26 - of course there's a lot more you can add
39:28 - to this blog but hopefully this gave you
39:30 - a pretty good kind of start and
39:32 - foundation and showed you different ways
39:34 - to go about doing things
39:35 - obviously it's better if you can update
39:37 - the page without having to refresh
39:39 - that uses a lot of javascript and i
39:41 - wanted to make this again python heavy
39:43 - and not focus on javascript that's why i
39:44 - didn't do that
39:45 - however what i just showed you with the
39:47 - likes you can kind of replicate with
39:49 - comments
39:50 - with creating new posts with anything
39:51 - you want and while you'll be able to
39:53 - have the page update
39:54 - without refreshing the page alright so i
39:56 - hope you guys enjoyed the video
39:58 - if you did make sure to leave a like
39:59 - subscribe to the channel and i will see
40:00 - you in another youtube
40:03 - [Music]
40:08 - video
40:10 - you

Cleaned transcript:

hello everyone and welcome to video 5 in this flask blog tutorial series in this video we're going to be wrapping up the series by looking at how to like and unlike a post i'll also be showing you how we can implement calls to our backend so to the flask server using javascript so we don't have to refresh the page when we want to do something like add a comment add a like etc so let's go ahead and dive in all right so we're going to get started here by creating a database model for a like so obviously a like is associated with a post a user makes that like and so we need some way to store that so we know how many likes each post has so let's go to our models here and let's go class like db dot model sorry this is a capital m and let's start filling in what we need so the first thing we need is an id so just like all other models we can steal id we'll have an author of the like and then we'll also have a post id associated with the like so id author post id now we also could add a date created for the like i mean it can't really hurt to add that even if we don't end up using it so we might as well throw that in and honestly with that i think that's pretty much all we need for the like so now that we have the author and the post id we've created the foreign keys on the model here we need to add the relationships on our post and on our user so obviously each user will have a set of likes each post will have a set of likes and so let's add that relationship i'm just going to copy this relationship right here and change this now so that rather than comment it says likes so let's now change this to be like and we'll leave the back graph equal to users our user sorry all right now same thing let's paste this here actually i can just copy this thing and paste this here and make this backref equal to post all right so that should actually be all we need now we can access the number of likes by just looking at the length of our likes and then of course we have our like model here we'll create a new like when the user presses the like button and then we can delete the like when the user presses the like button again so kind of toggling liking and unliking the post okay so now that we have this we need a way for user to like or unlike the post so we're going to create some icons that will actually allow us to kind of see a thumbs up and then see like i guess not a thumbs down but we'll have a filled in thumbs up and then a nonfilled in thumbs up to represent yes you've liked it or know you haven't liked this post yet and then some kind of counter on the left hand side showing all of the likes of a post so let's go to post div and let's start doing that alright so inside of here i want to add an icon again that thumbs up or that filled in thumbs up but i just realized that before we can do that we need to actually import a new css library that gives us access to different icons and this is going to be called font awesome so we're going to go inside of base.html and just like we have this style sheet right here we're going to add the corresponding style sheet for the one that gives us the icon so like the thumbs up icon so on there's a bunch of different icons you can use so the way we're going to get that is we're going to go to our web browser we're going to go to font awesome like that and then we're just going to press on font awesome now here notice it says start for free so we're going to press start for free i'll leave this link in the description by the way and then you need to enter your email so just enter your email and then set press send kit code and it will send you an email with one of the kits so i'm going to do this and i'll show you kind of what the email looks like and how we can get access to this okay so i've just got the email here i'm going to click to confirm my email address and set up an account i will make a quick password and let's continue okay what's your first name tim sika you used fontos i'm sure 2020. okay let's go and then notice it gives us a script right here that we can use to get access to font awesome so i'm going to copy this kit code notice it says copy your kits code into head of each template or page in your project that you want to use font awesome so copy that kit go right underneath our style sheet here we're going to paste that in and now we should be able to access all of the font awesome icons so here it's showing us okay we can look for some different icons that we can add and if you want to search for different icons well you can search for them so in this case i can do thumbs up or a like or something yeah let's search uh okay no maybe like will give us some results like okay for some reason the search doesn't seem to be working so let's just go explore icons and we can search somewhere else okay so let's search for a like here and let's see okay so we have a thumbs up now that's good we should also have a thumbs up that is not solid so this is f a solid f a thumbs up there should be a way to get one that's not solid as well so let me find that icon and i will be right back all right so i found the nonsolid version so the noninstalled version is fa hyphen regular fa hyphen thumbs up the solid version was fa hyphen solid fa thumbs up so i'm just going to copy this right here this i and i'm just going to show you where we're going to place this like button in our post div dot html so i want this to be right beside where the delete button would be if we were able to delete the post so that is going to be right here so that means i need to put a div around here and then place my like button inside of this dip so i'm going to say div like this and then we can end the div so slash div like that and inside of this div i am going to place my icon so i'm actually going to do this in another div do i want this in another div no it's fine i think i can just place it right here so let's just place this here for now this should actually show up the icon so let's refresh the page now and let's see if we see that like icon uh okay so i guess my server is not running so let's run the server and let's refresh and okay so the like icon is not showing up for some reason so let me have a quick look here and see why this is not appearing all right so i found the root of the issue i don't know why this was the case but i actually needed to change this to say fas rather than fa hyphen solid so i guess fas is the new way to represent solid or maybe the old way to represent solid i'm not sure but either way a s and then f a thumbs up works then if you change this to f a r that would be f a regular so if i do this and i refresh notice you have the non filled in like button and then if you go fas and you refresh you get the filled in like button but notice it's only showing up when this delete button is showing up obviously that's not what we want so i'm just going to need to kind of change a few things around here so i'm going to move this icon so that it is actually outside of this if statement and actually sorry no i'm not going to do that i'm going to move this if statement so that it's inside of the div so i'm going to put the if statement after the icon then take this end if and put it outside of this div or inside of this div sorry so now we have this which will only be shown if the user id is equal to post.author but we have this div which will still show the like icon even if the delete button is not being shown so that was kind of the mistake there so hopefully that's fixed now however what i want to do before i show this button here is i want to show the number of likes on this post so i'm going to do this quite simply by just making actually i'm not even going to make a tag i'm just going to put the post dot likes and then pipe length so that should give me the number of likes on this post it should just put that right here before the thumbs up icon so let's see this let's go here and refresh and okay we got an error it says there's no such table like okay the reason we're getting that error is because i forgot to recreate the database so let's go to init.pi let's go to where it says models let's import like now let's delete this database okay let's save let's go back here and refresh and now we need to create a new account again okay so let's do this we're going to go tim gmail.com tim one two three four five six seven one two three four five six seven okay sign up user created let's make a post okay testing post all right and there we go we get our like count now obviously at this point in time we don't have any functionality to actually add a like but we are showing the number of likes and we're showing our thumbs up button and if we just make another account so let's make a new account here let's go sign up tim2 gmail.com tim2 okay we'll add our password here sign up notice that we get the like button still showing up even when the delete button is not appearing perfect okay so that is what i wanted now what we're going to do is we're going to make it so when we press on this like button it does something before we do that we need to set up the view to allow us to actually add or create a new like so let's do that now so let's create a function let's just call this like and i'm going to add a at views dot root and this is going to be slash like hyphen post slash and then post underscore id like that now let's make this at login required and let's get our post underscore id okay so we have our like now this method here i guess it could be a get request maybe we'll make it a post request because i think this makes more sense i'm going to say method equals post or methods equals a list post and inside of here the first thing we're going to do again is make sure that the what do you call it here that the post actually exists so we're going to say post is equal to post dot query dot filter underscore by and we're going to go id equal to post underscore id okay now if the post does not exist what we are going to do is we are going to say um if not post then we will flash a message this message will say post does not exist okay we'll say category is equal to error and then we'll say alif actually i don't think there's anything else we need to check here we can just now create the post ah this is what we need to check we need to see sorry if the user has already liked the post so we just checked if the post exists if it does exist then what we're going to do is check if the user has already liked the post if they've already liked the post then we're going to delete their like because this is kind of a toggle if you like the post and you already like it you unlike it if you've not liked the post then we will add a new like for that post so what we'll do here is we'll just do a query on the like object as well so we'll say like is equal to like dot query dot filter underscore by and then we're going to say author of the like is equal to current underscore user dot id dot first okay and we need to actually check the post as well so we'll say the post underscore id is equal to post underscore id so we need to check if the current user has liked the current post because they may have liked a different post so we need to make sure we have both parameters inside of here okay so now what we're going to do is import like okay so we'll go like there and this should now be good so now we're going to check if this like object exists so we'll say l if like so if the like object does exist if the user is like the post then we need to delete this so db dot session dot delete and we're going to delete like and then db dot session dot commit oops and actually we don't need to put anything inside of there nice okay now otherwise what we're going to do is make a new like so we're going to say like is equal to like and then we need to add the user or the author so the author is equal to the current user.id and the post id is equal to the post underscore oops underscore id i believe that's all we need and we'll go db dot session dot add like and what we can actually do here is we can take this commit and we can just put it at the bottom here because we're going to commit actually no sorry we need to put them inside of here because this does not actually add anything to the session so let's go db.session.commit and put that there i was going to just put it here but i realize that doesn't work because here we're not adding or deleting anything from the database we're just flashing a message nice and then from here what we're going to do is return a redirect to the url underscore 4 and this is going to be views dot like nice okay so that should be all good so now let's make it so when you press on that like button it actually sends a request to this so let's go to post div and let's make this now actually something that you can press on so let's go a href equals and this is going to be slash like hyphen post slash and then the id of the post is going to be post dot id okay now let's go slash a and that should be good okay so let's try this i'm going to go python app.pi i'm going to go here i'm going to refresh and now i'm gonna press on this like button and okay it says method not allowed okay that makes sense the reason that makes sense is because when we press on this button it is uh sending a post request not a get request so for now i'm gonna change used up high sorry so that this says a get i misspoke there i meant when you press on the button it's sending a get request not a post request and this was only accepting a post request before we'll actually make this just accept a get request okay so let's go here and let's refresh let's press on this and could not build url for endpoint views don't like okay i messed up there uh this should be views.home not views.like okay so now that we have the correct url we can refresh and when i press this notice we get one like now when i press it again notice we get zero but notice that the icon here is not changing right it's not changing from filled or unfilled obviously we haven't implemented that behavior yet but that's what we're going to do now so we want to actually be able to check from postdiv here if the current user has liked the post now this is a little bit more difficult than it seems to actually check this but we will do that and what we're going to do is we're going to change the class of this icon here to be filled in if the user has liked it and to be unfilled if the user has not liked it so what i'm actually going to do is make this class equal to icon underscore class and i'm going to use jenga to actually set a variable here called icon class that will be equal to the fielding class or the nonfilled in class based on if the user has liked the post so i'm going to say percent percent if for now i'm just going to put true and then we'll actually fill that in a second i'm going to say else and then i'm going to say percent percent and if okay so here what i'm going to do is set a variable so i'm going to say set and then this will be icon underscore class equal to and this class will be fas and then fa hyphen thumbs hyphen up i believe that's what that class name was and then in the else we'll say this will be far so if the user likes the post we'll do that condition in a second we set the icon class to this otherwise we set it to this and then this uses the icon class this is how you set a variable in jenga now sorry i realized i made a mistake this needs to be a percent um not a double curly brace so just change that for both of these here and then we should be good so percent and make that a percent okay there we go now the next thing we need to change here is this condition right let me actually go back there because i don't like how it flattened all of that so we need to check if the user has liked the post now it's a little bit difficult to do this because we have post.likes and post.likes contains all of the like objects right so we have all the information related to each like so what i'm going to have to do here is loop through all of the likes and check if this user has liked this post so i'm going to go percent percent for like in post dot likes so what we'll do is we'll set a variable equal to true if the user has liked this post which means we need to set the variable up above equal to false so we're going to say set liked equal false notice i'm using a capital f not an uppercase f that is because in jenga you use lowercase for the booleans rather than capitals like you do in python okay i'm going to go percent percent and four and inside of here i'm going to say percent percent if like dot author is equal to user dot id then we will set that variable equal to true so percent percent set liked equal true okay and then we'll go percent percent and if and that should actually handle that for us and now tell us let me just indent this here uh if the current user has liked the post so now we can just make this if liked okay so i think this should work um not super confident oh god i hate how it flattens all of that let's save without formatting but let's give this a shot and just see what we get so save the formatting all right and save okay so now when i press this it does like but it doesn't change the icon so something is going wrong let me have a quick look and i'll be right back okay so i was having a ton of difficulties with the way i was trying to do this before so i've kind of changed strategies here i actually already wrote the code this was taking way too long longer than i want to admit so anyways i have the code here to do what we wanted to do change the icon based on if the user has liked or not liked the post so let me just walk you through this code here so i'm saying if the user.id so the current user logged in is in post dot likes and then i'm mapping post.likes to the attribute author so what this will do is create a list of all of the authors of the likes on this post that's what this line does right here then i'm converting that to a list because what this actually returns is a generator object you don't have to worry about what that means if you don't know what that means map doesn't return a list it returns a generator object so i convert that to a list so then i can check if the user id is in it if it is i'm going to show this so fas thumbs up otherwise i'm going to show this far thumbs up pretty straightforward but that's what this is doing right here that should get the like icon working properly so let's go ahead and do this again i hate how when i save it it flattens everything but anyways let's refresh and let's see if this works okay so we have one when i unlike there you go it goes back to a what is it hollow like button when i like it goes to a solid button now notice though the page is refreshing when i do this that's because in the method i just showed you we made it so that what he called it refreshes now i'm going to show you the way that we can do this using javascript so i'm going to pretty much rewrite what we just did here if you're happy with this you don't care about if the page refreshes or not then you're welcome to end the tutorial here because that's pretty much all i need to show you you now have a functioning blog application however if you want to see how we can do stuff without the page refreshing then follow along with this part right here i'm going to show you how we can link a javascript file to our flask project and then how we can make it so we actually dynamically change the page without having to refresh it so we will continue in one second we need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use for preparing for your software engineering coding interviews they also have two other products systems expert and machine learning expert to use when preparing for your system's design interviews or your machine learning interviews with that said get started using algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform all right so we're going to start by adding the javascript file to our page so the way we do that is we go inside of website and we create a folder this folder is called static it's very important you call it static and then you place in a javascript file call it whatever you want but i'm going to call mine index.js so the reason we put this inside of the static folder is this is a static asset which will be kind of rendered or served to us from the the flask web server so inside of static is where you would put things like images files and in this case any javascript files that you have so this is where we're going to put our javascript and this is where we're going to write the function that's going to get called when we press on that like button so while i'm in here i'm going to write a function i'm just going to call this like okay so function like and this is going to take a post underscore id for now all we're going to do is just console.log the post id okay so now we need to link up this javascript so to do that we're going to go to the base template and we're going to add a script at the bottom of our body that's going to reference this javascript file so we're going to say script type is equal to this is going to be text slash javascript actually yeah i think that's correct text javascript yes and we're going to say src standing for source is equal to and this is going to be inside of two uh brackets like this so we're using the jenga templating engine url underscore four and then this is going to be static comma and then file name is equal to and this is going to be index dot js and let me just make sure these are in single quotes okay so what this is going to do is it's going to reference the static folder which is right here inside of our our website folder and then it's going to find the index.js javascript file and it's going to render that or use that for a script now for some reason something's going wrong here oh it's because i haven't ended the script tag so let me just end the script tag right there and that's all we actually need to do to link this javascript now actually i think maybe i need to do another tag to end this because it's still showing me some html error okay yeah so that's proper so anyways that's what you need to do and then that will link up your javascript okay so now that we have that we can actually access any functions that we write inside of here okay so i'm back inside of post div and what i'm going to do is start modifying this a little bit so since i'm no longer going to be sending a get request to this url instead i'm going to use my javascript function to actually update the page i'm going to remove these a tags that i have here i no longer need them okay so i'm going to remove these a tags and what i'm going to do now is inside of my eye tags i'm going to start adding a few things so first i'm going to put an id i'm going to say the id is equal to the like hyphen button and then this is going to be for this post the post is going to be post dot id this is because i'll have multiple like buttons i need to know which one i'm referencing so let me grab my id and paste that inside of this icon as well this like button then i'm going to add a well the class is there the id is there i'm going to add an on click i'm going to say the on click is equal to and i am going to call like with if i can get my brackets right here the post dot id okay so let's add the on click to both of these so we'll add one here as well okay so there we go now the next thing i need to do is i need to put a span here and i'm going to put the span around my post dot likes the reason for this is i'm going to use the id of this span to change the likes dynamically without having to refresh the page so i'm going to say id is equal to likes hyphen count and then hyphen and then this will be post dot id okay so that should be good let's just make this look a little bit nicer for us okay let's move this back up here and let me save without formatting okay so let's just see if this still works so let's refresh and notice now that it's not highlighted in blue that's fine it's going to be in this color now if you want it to be in blue just surround it with an a tag but notice when i press this button that it's actually printing something in the console that's because the on click event is working if for some reason this isn't working for you right click on your page press inspect and then right click here and press empty cache and hard reload if you're using google chrome that will clear your web browser cache and then the javascript should get loaded that's a common error again this step is let me just close this here right click if you're in chrome press inspect right click here on the refresh press empty cache and hard reload and then you should get your javascript actually working properly okay now that we have that though i'm going to go inside of my javascript and i'm going to start writing some stuff that will update the like button when i press it so the first thing i want to do is get access to the like button so i can change its class to be filled in or nonfilled in and i want to get access to the like count so i'm going to start by saying const like and then let me just go to my cheat sheet here the first one i'm getting is like count i'm going to say const like count is equal to document dot get element by id and then i'm going to put two back ticks here you'll see why in a second and i'm going to say like hyphen count or i believe this is likes hyphen count hyphen and then i'm going to do a dollar sign two curly braces and post underscore id uh this allows me to actually embed a variable inside of a string and have this expression evaluated so this will give me the string likes count and then whatever the id of the post is so that's my likes count now i want to get access to my like button so i'm going to say const like button is equal to document dot get element by id and in this case it's going to be like hyphen button hyphen and then post id again okay post underscore id now just because we're in javascript i'm going to change this so it's post and then capital id because in javascript you use camel case not snake case okay so now i have access to the like count and the like button so now what i'm going to do when i press this button is i'm going to print out the like count dot value okay so let's just see if this is working so let's refresh let's press this and notice i'm getting the value of the like count nice okay so now that i'm doing that what i need to do is actually send a request to the endpoint that i've created here to this like endpoint to actually like the post so i'm going to change this method here to be post rather than get i'm going to show you how from javascript we can send a request to this endpoint right here however the one change we need to make is that rather than redirecting us to the url for home what we're actually going to do is return something to the javascript that's calling this request since this isn't being called from kind of the main user page no that's a bad way to describe it since this isn't actually going to be rendering a view for us or redirecting anything we're just sending a request to this and having the likes updated what we want this to return to us is the number of likes on the post that's what we want to know we also want to know if the current user has liked the post so that is what we are going to uh what do you call it send back to the javascript you'll see how this works in one second so this means that rather than returning redirect url4 we're going to import something called jsonify and we're going to go here and we are going to return the jsonify of the following python dictionary so jsonify like that and we're going to send likes is equal to and this is going to be post dot likes okay so it's actually going to be sorry the len of post.likes okay so this is going to seem a little bit strange but essentially i want to return json from this endpoint right here so from javascript i'm going to send a request and i'm going to receive some data back that data that i want to receive back is not going to be html it's going to be json json stands for javascript object notation now in python you can kind of create json by creating a dictionary so in this case i've created a dictionary has the key likes and that has the value post dot likes whatever the length of that is so i put that inside of this jsonify function and this jsonify function converts this to json and returns that as a response from this endpoint or url right here okay there we go so jsonify likes len of post.likes now we also want to return whether or not the current user has liked the post so i'm going to say liked is equal to and then in this case i will say current user dot id in and we're going to do the same thing we've done with map so i'm going to say map post dot likes we're going to say lambda x colon x and this will be dot author comma post dot likes so this will now tell me if the current user has liked the post nice did i do that anywhere else i forget if i showed that previously or not anyways that's what this will do it will tell us if the current user has liked the post by getting all of the authors of likes that have liked the post and then checking if the current user id is in them okay so that's good now the only thing is though we need to also return an error message if the post does not exist so from here rather than flashing a message i'm going to return jsonify and this is going to say error comma or colon and then we'll say post does not exist and then i'm going to say comma 405. actually 400. so what you can do is after the the text that you want to return you can return a status code by default the status code is 200 which stands for okay but i want to send a status code of 400 i believe 400 is bad requests i could be wrong on that but i think it's bad request and so this will tell whoever sent the request to this endpoint here that hey this post doesn't exist you've got an error hopefully that kind of makes sense don't worry if you're not super clear on that but the status code is 400 and this is the response that we're going to return or the information we're going to return okay so now i'm going to go to index.js and i'm going to use this fetch method now what fetch does is send a request so i'm going to say fetch where do i want to send the request well i want to send it to like hyphen post slash and then the post what is it i d like that okay now i'm going to put a dollar sign and i'm going to swap these with back ticks because that's actually what i want now what i need to do is i need to specify the type of this request or the method of this request so i'm going to say method colon and then this is going to be equal to post because i want to send a post request to this endpoint right here then i'm going to do dot then res and like this i'll explain what this is in one second essentially what this will do is wait for a response from this endpoint right here it will capture that response in this res variable and then what i will do is return the res.json so the res.json is the data associated with the response i'm then going to do another dot then and this is going to take in a data okay and this is going to get the data associated with the response so i get the res.json that means now i have my data so now i can access all of the stuff from the data here in the second dot then if you're unfamiliar with this notation essentially this is i believe it's es6 javascript functions this is creating a function right here this is the parameters of the function this is the body of the function and since i only have one line in my function by default this function will return whatever is here res.json okay now here this is taking data data will be whatever is returned from here so the response.json then inside of here i can access the data and do something like console.log data okay so let's try this for right now and i'll show you how this works so i'm going to go and run my application i'm going to go back and refresh i'm going to press this button now when i press this button notice it's still showing one so it's logging one the reason why it's doing that is because i need to empty my cache and hardware look so now that i do that when i press this notice i get undefined and it says post 500 internal server error there was an issue that occurred so let's see what issue we have it says base query object has no attribute likes okay so i know the problem let's go to views.pi and i'll show you what i did wrong here so i believe that for post here unfortunately i did not do dot first which is what i need so i'm going to say post is equal to post.query.filterby.first so just add that dot first and then that should fix the issue now let me try this again so let's refresh let's press this button and notice that i get liked true and likes one so when i sent that request it told me if the user had liked the post or not and then it tells me that the number of likes on the post is 1. now if i like it again it gives me no you have not liked it and the number of likes is 0 because i just unliked it now nothing's changing on the page yet but this is actually working this is doing what it's supposed to do so let's now continue okay so let's go to where were we index.js and let's get rid of this console.log first of all we don't need that and what we're going to do now is we're going to update these values right here uh based on the data that's returned to us so i'm gonna put some squiggly brackets here because this function will have a body and now we're gonna start updating the like count and the like button so the first thing i'm gonna do is say like count dot inner html is going to be equal to and this is going to be data at likes so now this is going to change the like count in our html to be well equal to data likes so if i go to post div here notice how i have a likes hyphen count hyphen post id so we're going to access that id so we're getting the document by its id so likes count post id and then of course we're just going to change that html now i think that should work likes hyphen count hyphen post id like siphon count hyphen post id okay uh yes let's hope that works okay so let's go here let's refresh let's press this and okay so for some reason it's not changing let me empty the cache and hard reload and okay so now you can see it's changing we're going 0 1 0 1 0 1 nice the last thing we need to change here is this icon so that it changes to be filled in or not filled in okay so that's actually pretty easy to do what we're going to do is grab this class name right here okay and we're going to go to index.js we're going to say like button dot class list i think that's right actually sorry it's going to be dot class name is equal to and then we're going to say f a r f a thumbs up and then i'm just going to copy this again and make this fas and now we'll implement our if so we're going to say if data liked then what we want is this so we'll put this right here oops okay otherwise so else we will do this okay so hopefully that makes sense we're saying if we have liked the post then we'll make this solid if we have not liked the post then we will make it not solid so let's go here and refresh so when i refresh notice we've liked it so it's solid when i unlike it it didn't change there okay so that's interesting why it didn't change it should be changing let's just see if i've messed something up here ah okay so the issue is i've said if data liked i need to say if data liked is equal equal to true like that okay so now if i do this and i refresh we've not liked so it is not filled in when i like it doesn't get filled in okay maybe my like button is not being referenced properly that is possible so let's see here i'm gonna go to my post div and i have this like button hyphen post dot id so i should be referencing this properly but for some reason it's not actually letting me change this okay so i've actually just emptied my cache and hard reloaded and now it's actually working so that is a common issue as i was saying before if it's not working empty the cache reload and then you should be good but notice that now this is changing and working properly and the page is not refreshing and the like is actually being there persistently so if i refresh now you can see i still have one like and if i unlike and i refresh i still have zero likes so everything is working as it should be there you go that is how you can uh what do you call it create the like or add the like without refreshing the page now the last thing i'll show you here is that you should really add a catch the reason you want to add a catch is because an error could occur so if an error occurs and for some reason any of this fails then you want to do something in my case what i'm going to do is i'm just going to show an alert so it's just a popup on the screen i'm just going to say like or could not like post okay so that's my catch that just means i'm not going to actually have an error occur i'm going to catch the error and then just let the user know hey we couldn't like the post for some reason because an error occurred here in this fetch all right so that should be it let's do one final test here let's add a comment okay comments are working and there you go all right so with that said i think i'm going to end the video here of course there's a lot more you can add to this blog but hopefully this gave you a pretty good kind of start and foundation and showed you different ways to go about doing things obviously it's better if you can update the page without having to refresh that uses a lot of javascript and i wanted to make this again python heavy and not focus on javascript that's why i didn't do that however what i just showed you with the likes you can kind of replicate with comments with creating new posts with anything you want and while you'll be able to have the page update without refreshing the page alright so i hope you guys enjoyed the video if you did make sure to leave a like subscribe to the channel and i will see you in another youtube video you
