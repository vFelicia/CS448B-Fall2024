With timestamps:

00:00 - hello everyone and welcome back to their
00:01 - Python quick tips in this video I'm
00:03 - gonna be talking about the difference
00:04 - between equals equals and is and how
00:07 - this works in Python on a fundamental
00:08 - level now this is something that a lot
00:11 - of people especially beginners in Python
00:12 - don't know or don't understand and if
00:14 - you consider yourself good at Python I
00:16 - would definitely recommend watching this
00:17 - entire video because this is very
00:19 - valuable information that you definitely
00:20 - should know that being said I apologize
00:22 - it's a bit longer than usual but I do
00:24 - need to kind of cover all the concepts
00:25 - involved in this so let's talk about
00:28 - equals equals vs. is now the first
00:30 - example I want to show is x equals
00:33 - equals y so we look at this example here
00:35 - we see I have x equals 1/2 y equals 1/2
00:37 - clearly these are the same running this
00:40 - should give us the value true ok it
00:43 - makes perfect sense now what happens
00:45 - when I change this to is well what does
00:47 - is do vs. equals equals some people
00:50 - might think it does the same thing you
00:53 - might think it says well 1 2 is
00:54 - definitely 1 2 so that should be true
00:56 - but you can see that after running this
00:58 - I mean around again we get the value
01:00 - false that is because we are not
01:03 - comparing equality with these two
01:05 - objects we are comparing the object
01:06 - itself now believe it or not even though
01:09 - these are the same value they're stored
01:11 - in different locations in memory and I
01:13 - can show you where these are actually
01:15 - stored in memory by using a function
01:16 - called
01:17 - ID so I'm just gonna print out the ID of
01:19 - X now I'm gonna print out the ID of Y
01:21 - and I'll show you that although these
01:23 - objects are the exact same in terms of
01:25 - the value they store they are actually
01:27 - different to our computer you can see
01:29 - this is the memory location of X and
01:31 - this is the memory location of Y I mean
01:32 - relatively but that's the way I'm gonna
01:34 - explain it ok so you can see that what
01:36 - this actually does is compare the ID of
01:38 - X and the ID of Y and if those are the
01:41 - same it's gonna give us true otherwise
01:43 - it's gonna give us false now let me
01:45 - prove to you that this does actually
01:46 - work so if I change Y and make it equal
01:49 - to X and now I do a comparison X is y
01:51 - and print this you see we get true that
01:54 - is because these objects are actually
01:56 - identical they're the same object and
01:59 - you can see the IDs here are the exact
02:01 - same so that is kind of the main
02:03 - fundamental difference with is but how
02:05 - do we actually use this properly
02:07 - especially on our own objects well this
02:10 - is where we get into some more
02:12 - complicated
02:12 - and I'm gonna be showing them right now
02:14 - so let me just get rid of this example
02:15 - here and now we're gonna move into my
02:16 - custom example with my custom class dog
02:18 - so based on what we just saw in theory
02:22 - Tim should really be equal to Jill
02:24 - because these equal signs can pair will
02:26 - the value of our two objects and in this
02:28 - case our objects are pretty much the
02:30 - same they have a name that's equal to em
02:32 - and they both have that so if I run this
02:35 - we should get the value true right but
02:37 - we don't and the reason we don't is
02:39 - because on our own objects we need to
02:42 - specify how we're gonna compare them dog
02:44 - object here that we've created has no
02:46 - idea what it means for two dogs to be
02:49 - equal maybe they have a attribute a m--
02:51 - our age maybe they have an attribute
02:53 - name maybe they have a bunch of other
02:54 - features about them what needs to be the
02:56 - same for us to say that this dog object
02:58 - is the same as another dog well that's
03:01 - what we're gonna specify it by ourselves
03:02 - by implementing a method here called
03:04 - equals so these are called dunder
03:06 - methods in Python there's also some
03:09 - other names for them as well but
03:10 - essentially what this allows us to do is
03:12 - overwrite standard basic functionality
03:15 - in Python so it will allow us to
03:16 - actually use something like the two
03:18 - equal signs on our dogs so let's show
03:21 - this so if I just throw itself in here
03:23 - and I throw other what I can do is write
03:27 - a quick method here that will take this
03:29 - other dog that's gonna be passed in and
03:30 - compare it to our dog and return true if
03:32 - they're the same and return false
03:34 - otherwise so the first thing I need to
03:36 - do is make sure that this other dog that
03:38 - we're comparing it to is actually an
03:40 - instance of dog so what I do that is I
03:43 - use this is instance method like this
03:45 - and this will tell me if this that I
03:47 - have here this object is actually an
03:49 - instance of the class dog now if that's
03:51 - true what I'll do is I'll say if other
03:54 - name equals equals self dot name return
03:58 - true essentially comparing the names of
04:00 - the two dogs and seeing if they are the
04:02 - same so if they're the same we'll return
04:04 - true otherwise we'll return false so
04:06 - after doing this now when I run my
04:08 - program you see we actually get a value
04:10 - of true now this is because when we
04:12 - implement this dunder equal sign method
04:14 - what this allows us to do is use the two
04:16 - equal signs between our dogs and get an
04:18 - accurate value comparison now this is
04:21 - again going to be different if I switch
04:23 - this to is so if I say tim is joe
04:25 - obviously we're gonna get
04:26 - because again the idea of Tim is gonna
04:28 - be different than the idea of Jill
04:30 - because although these objects are the
04:31 - same value eyes they have a different
04:33 - memory location they are actually unique
04:35 - different objects and they could change
04:37 - their properties at any point in time so
04:39 - that is kind of how that is versus
04:42 - equals equals work now let's just show
04:44 - one more thing if I do something like Jo
04:46 - equals Tim now when I say Tim is Jo we
04:50 - get the value true again because what
04:52 - actually happens is Jo points to the
04:54 - same dog object that Tim points to if
04:57 - you think about this kind of like in a
04:58 - pointer sense where these variables
05:00 - really are just holding the memory
05:02 - location of whatever object you want
05:04 - when you compare with is you'll see if
05:05 - they're actually the exact same object
05:07 - now sometimes this is useful because you
05:10 - need to know if you have you know the
05:11 - same object being passed in or if you
05:14 - have an object that's equivalent value
05:16 - wise but is its own unique object so
05:19 - anyways that is how this equals equals
05:20 - method works as well you can complete
05:23 - this on any of your own objects and this
05:25 - is what all of the built in standard
05:26 - datatypes have in Python so for example
05:29 - like an int datatype of five has a
05:31 - built-in method of double equal sign so
05:33 - it has this underscore underscore equals
05:35 - underscore underscore which allows you
05:37 - to do these equals equals now I won't
05:39 - get into this in this video because this
05:40 - will go much longer but there is tons of
05:42 - other methods like this that you can
05:43 - implement for example you can implement
05:45 - a method like add which will simply take
05:47 - you know will say self and some other
05:49 - object and you can add or change the
05:52 - value return a value based on that so
05:54 - maybe we want to add two dogs together
05:55 - and what we do when we do that is we
05:57 - simply return their names combined so I
05:59 - could do something like other dog named
06:00 - plus this dot name what am I saying this
06:04 - I'm not typing in Java yourself done it
06:07 - so now if we do something like that and
06:09 - I say you know Jo equals oh I'll have to
06:12 - actually make two dogs here otherwise
06:13 - this won't work okay so let's do dog
06:16 - Tim Jo and I print out the value of Tim
06:20 - Plus Jo we'll see that we get Jo Tim so
06:25 - what we do is we add those names
06:27 - together in reverse order so Jo Tim and
06:28 - return that so we can do stuff like this
06:30 - in Python and I just want to make this a
06:31 - quick tip video although it's not very
06:33 - quick I feel like a lot of people don't
06:35 - know this and it's super powerful and
06:36 - you can do a lot with it so
06:38 - that has been it for this video I hope
06:39 - you guys enjoyed if you want to see more
06:40 - complex Python stuff like this let me
06:43 - know because I have a whole kind of list
06:44 - of things I'd like to share on the
06:45 - channel

Cleaned transcript:

hello everyone and welcome back to their Python quick tips in this video I'm gonna be talking about the difference between equals equals and is and how this works in Python on a fundamental level now this is something that a lot of people especially beginners in Python don't know or don't understand and if you consider yourself good at Python I would definitely recommend watching this entire video because this is very valuable information that you definitely should know that being said I apologize it's a bit longer than usual but I do need to kind of cover all the concepts involved in this so let's talk about equals equals vs. is now the first example I want to show is x equals equals y so we look at this example here we see I have x equals 1/2 y equals 1/2 clearly these are the same running this should give us the value true ok it makes perfect sense now what happens when I change this to is well what does is do vs. equals equals some people might think it does the same thing you might think it says well 1 2 is definitely 1 2 so that should be true but you can see that after running this I mean around again we get the value false that is because we are not comparing equality with these two objects we are comparing the object itself now believe it or not even though these are the same value they're stored in different locations in memory and I can show you where these are actually stored in memory by using a function called ID so I'm just gonna print out the ID of X now I'm gonna print out the ID of Y and I'll show you that although these objects are the exact same in terms of the value they store they are actually different to our computer you can see this is the memory location of X and this is the memory location of Y I mean relatively but that's the way I'm gonna explain it ok so you can see that what this actually does is compare the ID of X and the ID of Y and if those are the same it's gonna give us true otherwise it's gonna give us false now let me prove to you that this does actually work so if I change Y and make it equal to X and now I do a comparison X is y and print this you see we get true that is because these objects are actually identical they're the same object and you can see the IDs here are the exact same so that is kind of the main fundamental difference with is but how do we actually use this properly especially on our own objects well this is where we get into some more complicated and I'm gonna be showing them right now so let me just get rid of this example here and now we're gonna move into my custom example with my custom class dog so based on what we just saw in theory Tim should really be equal to Jill because these equal signs can pair will the value of our two objects and in this case our objects are pretty much the same they have a name that's equal to em and they both have that so if I run this we should get the value true right but we don't and the reason we don't is because on our own objects we need to specify how we're gonna compare them dog object here that we've created has no idea what it means for two dogs to be equal maybe they have a attribute a m our age maybe they have an attribute name maybe they have a bunch of other features about them what needs to be the same for us to say that this dog object is the same as another dog well that's what we're gonna specify it by ourselves by implementing a method here called equals so these are called dunder methods in Python there's also some other names for them as well but essentially what this allows us to do is overwrite standard basic functionality in Python so it will allow us to actually use something like the two equal signs on our dogs so let's show this so if I just throw itself in here and I throw other what I can do is write a quick method here that will take this other dog that's gonna be passed in and compare it to our dog and return true if they're the same and return false otherwise so the first thing I need to do is make sure that this other dog that we're comparing it to is actually an instance of dog so what I do that is I use this is instance method like this and this will tell me if this that I have here this object is actually an instance of the class dog now if that's true what I'll do is I'll say if other name equals equals self dot name return true essentially comparing the names of the two dogs and seeing if they are the same so if they're the same we'll return true otherwise we'll return false so after doing this now when I run my program you see we actually get a value of true now this is because when we implement this dunder equal sign method what this allows us to do is use the two equal signs between our dogs and get an accurate value comparison now this is again going to be different if I switch this to is so if I say tim is joe obviously we're gonna get because again the idea of Tim is gonna be different than the idea of Jill because although these objects are the same value eyes they have a different memory location they are actually unique different objects and they could change their properties at any point in time so that is kind of how that is versus equals equals work now let's just show one more thing if I do something like Jo equals Tim now when I say Tim is Jo we get the value true again because what actually happens is Jo points to the same dog object that Tim points to if you think about this kind of like in a pointer sense where these variables really are just holding the memory location of whatever object you want when you compare with is you'll see if they're actually the exact same object now sometimes this is useful because you need to know if you have you know the same object being passed in or if you have an object that's equivalent value wise but is its own unique object so anyways that is how this equals equals method works as well you can complete this on any of your own objects and this is what all of the built in standard datatypes have in Python so for example like an int datatype of five has a builtin method of double equal sign so it has this underscore underscore equals underscore underscore which allows you to do these equals equals now I won't get into this in this video because this will go much longer but there is tons of other methods like this that you can implement for example you can implement a method like add which will simply take you know will say self and some other object and you can add or change the value return a value based on that so maybe we want to add two dogs together and what we do when we do that is we simply return their names combined so I could do something like other dog named plus this dot name what am I saying this I'm not typing in Java yourself done it so now if we do something like that and I say you know Jo equals oh I'll have to actually make two dogs here otherwise this won't work okay so let's do dog Tim Jo and I print out the value of Tim Plus Jo we'll see that we get Jo Tim so what we do is we add those names together in reverse order so Jo Tim and return that so we can do stuff like this in Python and I just want to make this a quick tip video although it's not very quick I feel like a lot of people don't know this and it's super powerful and you can do a lot with it so that has been it for this video I hope you guys enjoyed if you want to see more complex Python stuff like this let me know because I have a whole kind of list of things I'd like to share on the channel
