With timestamps:

00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial
00:03 - for beginners now in this video i'm
00:06 - going to be discussing
00:07 - for loops now before i do that i would
00:08 - love to hear your thoughts on my new
00:10 - kind of office setup here
00:12 - i'm using a much better camera hopefully
00:14 - the audio sounding maybe a little bit
00:15 - better
00:16 - i have no idea you guys let me know in
00:17 - the comments down below anyways as i
00:19 - said in this video we're going to be
00:20 - discussing for loops this is going to
00:22 - allow us to actually repeat something
00:24 - a set number of times very useful very
00:27 - important and with that said
00:28 - let's dive in
00:33 - [Music]
00:38 - so we're going to dive into the syntax
00:40 - of a for loop in just one second
00:42 - but i quickly want to state kind of the
00:44 - problem that a for loop
00:46 - solves for us so previously you would
00:48 - have seen that if we wanted to do
00:49 - something multiple times
00:51 - we had to actually write the code to do
00:53 - that thing
00:54 - multiple times right so if i wanted to
00:56 - see out say something like
00:58 - hello world and i wanted to do this
01:00 - multiple times then i had to actually
01:02 - take this line
01:03 - and well paste it and actually from now
01:05 - on this is a good point to talk about
01:06 - this
01:07 - i'm going to be running my code right
01:08 - from sublime text so
01:10 - what you can actually do to run your
01:11 - code in here is you can press ctrl
01:13 - b at least that's the key that i've set
01:15 - up to run my code
01:16 - i'm not really going to go through the
01:18 - entire setup here of how to do this
01:19 - because it can be kind of complicated
01:21 - uh but anyways i'm not going to go to
01:22 - the terminal some of you rightfully so
01:24 - said that's kind of a waste of time just
01:25 - run the code and sublime text so that's
01:27 - what i'm doing now
01:28 - anyways you get the idea we printed
01:29 - hello world three times but now what if
01:31 - i tell you hey
01:32 - print hello world 25 million times or
01:35 - something crazy like that
01:37 - are you going to copy and paste this
01:38 - code that many times you're going to go
01:40 - and count that many lines
01:41 - probably not and well that is where a
01:43 - for loop comes in
01:45 - a for loop allows us to repeat something
01:47 - or loop
01:48 - over something a set number of times
01:51 - when we know the number of times that we
01:53 - want to loop we use something called a
01:54 - for loop now there is situations in
01:56 - which we don't know how many times we
01:58 - want to loop
01:58 - and that is when we would use something
01:59 - called a while loop which i will discuss
02:01 - in the next video
02:03 - anyways let me show you the syntax for a
02:05 - for loop so when you define a for loop
02:07 - you say four you put your open in
02:08 - closing parenthesis
02:09 - you put your open curly brace and you're
02:11 - closing curly brace and then you define
02:13 - what's known as your iterator
02:14 - now an iterator is simply a variable
02:17 - that keeps track of what
02:18 - iteration in the loop that you are in so
02:20 - when i say
02:21 - iteration that is kind of one sequence
02:23 - or one step
02:24 - of the loop so if this loop is running
02:27 - ten times we're going to have some
02:28 - variable it's keeping track of well what
02:30 - iteration are we on are we on iteration
02:32 - zero
02:32 - which would be the first iteration are
02:34 - we on iteration one two three four
02:36 - so on and so forth and that variable is
02:38 - going to tell our loop when it needs to
02:40 - stop
02:41 - running so as soon as the variable gets
02:43 - to say 10 then we're going to go ahead
02:44 - and stop looping because well this loop
02:46 - has happened
02:47 - 10 times anyways let me show you how we
02:49 - define the iterator
02:50 - so the first thing that we do is we
02:52 - define a variable that's going to be our
02:55 - iterator so we say
02:56 - int x or int i is kind of traditional
02:59 - is equal to and then zero and then we
03:01 - put a semicolon
03:02 - now it's worth noting here that you can
03:04 - start your iterator at whatever value
03:06 - you want and it's going to be easier if
03:07 - i just go through one simple example and
03:09 - then talk to you about all the nuances
03:11 - but just keep in mind that you can make
03:12 - this variable whatever you want this
03:14 - does not necessarily need to be an
03:15 - int type but i won't really talk about
03:18 - any other ones
03:19 - than ins because this is kind of
03:20 - standard practice anyways
03:22 - int i equals zero and then what i'm
03:24 - going to say after this is i'm going to
03:26 - say i
03:27 - is less than and in this case i'm going
03:28 - to say 10 and then i'm going to say i
03:30 - plus plus now what i've just done is
03:33 - i've defined the three criteria that i
03:35 - need
03:36 - for a for loop i need to define my
03:38 - iterator variable so initialize this to
03:40 - some value
03:41 - i need to pick my ending condition and
03:44 - then i need to decide what my increment
03:46 - is going to be
03:47 - every single loop so what this for loop
03:49 - really says here
03:50 - is set i equal to 0 loop while
03:54 - i is less than 10. so while the value of
03:56 - i is less than 10
03:58 - keep looping and then we say i plus plus
04:01 - what this means is every single time one
04:03 - iteration of this loop completes add one
04:05 - to i
04:06 - i showed you what plus plus did
04:07 - previously when you do plus plus it just
04:09 - adds one to
04:10 - i uh you also could do something like i
04:12 - plus equals 3 right and then that would
04:14 - add
04:14 - 3 to i you could say i equals i times
04:18 - 3 that would multiply i by 3. so
04:20 - whatever you want you just have to
04:21 - change the value of i
04:23 - here so that it goes up or goes down
04:25 - based on what you're doing if you don't
04:27 - increment this like if you just
04:28 - did something like i equals 0 you're
04:30 - going to have what's an infinite loop
04:32 - the reason you'll have that is because
04:33 - the loop will never stop running right i
04:35 - will never be less than 10 and you don't
04:36 - want an infinite loop that's something
04:38 - you always want to avoid in programming
04:40 - now one small thing here i will note
04:42 - some people prefer to use the syntax
04:44 - plus plus i
04:45 - i didn't discuss this i i don't think i
04:47 - discussed this actually
04:48 - this is a just different way of kind of
04:51 - incrementing this variable i don't
04:52 - really want to get into all of the
04:53 - details but i know some of you c plus
04:55 - plus masters out there are going to
04:56 - comment that it's probably better to do
04:58 - plus plus i
04:59 - than do i plus plus for our purposes
05:01 - these do the exact same thing
05:03 - you can look up the difference if you
05:04 - want i just wanted to note that either
05:06 - of these ways is acceptable
05:07 - and some of the kind of i don't want to
05:08 - say older but maybe more experienced
05:10 - epos programmers would say plus plus i
05:13 - is uh preferred anyways we're going to
05:14 - go with i plus plus just because that's
05:15 - what i've shown previously
05:17 - and now let's actually you know see how
05:19 - this works so we will continue in one
05:20 - second but i need to quickly thank the
05:22 - sponsor of this video and this series
05:23 - which is algo expert
05:25 - algo expert is the best platform to use
05:27 - when preparing for your software
05:28 - engineering coding interviews
05:29 - it's what helped me land a job at
05:31 - shopify and at
05:33 - microsoft and while i can just highly
05:34 - recommend the platform of course i also
05:36 - work there as well
05:38 - with that said check out i'll go expert
05:39 - from the link in the description and use
05:40 - the code tech with tim for a discount on
05:42 - the plaques so i'm going to say c
05:44 - out and i'm just going to c out i and
05:46 - then after this i'm going to see out and
05:48 - end
05:48 - l so the idea here is i just want to see
05:50 - how this for loop actually operates so
05:52 - inside of this for loop i'm going to
05:53 - print out the value of i which is our
05:56 - iterator variable so let's go ahead and
05:57 - run this code
05:58 - and let's see what we get we get 0 1 2 3
06:02 - 4 5 so on and so forth now the reason we
06:05 - get this is because on our very first
06:07 - iteration so the first time we enter
06:09 - this for loop i is set so that's equal
06:11 - to zero
06:12 - then what we do is we print out i
06:15 - we come back up to the top of this for
06:17 - loop and we increment i the reason we
06:20 - increment i is because
06:21 - after this first iteration runs or after
06:24 - any iteration runs really
06:25 - we're going to do whatever this says
06:27 - right here which is incrementing our
06:29 - our variable here incrementing our
06:30 - iterator so then what we do
06:32 - is we check if i is less than 10. so i
06:35 - in this case after we've done the first
06:37 - iteration
06:37 - is going to be 1 and so 1 is less than
06:40 - 10 so we run the for loop again
06:42 - and we repeat this process all the way
06:43 - up until we get to 9
06:45 - then at 9 when we do our increment that
06:47 - changes i to 10
06:48 - 10 is not less than 10 we stop running
06:51 - the for loop
06:52 - so that is really the basics that's how
06:54 - a for loop works now
06:56 - you can put a ton of other stuff inside
06:58 - of a for loop right
06:59 - i can say something like if and let's do
07:01 - something like i
07:03 - mod 2 is equal to 0
07:06 - and then maybe only in the situation
07:08 - where i mod 2 is equal to 0. what this
07:10 - really means is i
07:11 - is an even number or equal to 0 then i
07:14 - print out
07:14 - i so let's just quickly see if this
07:16 - works if i made any mistakes here so if
07:17 - i say if i mod 2 equals equals 0
07:20 - then do this print statement you can see
07:21 - we only print out all of the even
07:23 - numbers
07:24 - and that's going from 0 to 10. so now
07:27 - let's look at another
07:27 - are a few variations of the for loop so
07:29 - if i change i to say
07:31 - be equal to 5 then that means that i is
07:33 - going to start at 5. so if i starts at 5
07:36 - when we run this for loop let me just
07:37 - get rid of this if statement
07:39 - right here let's just do that
07:43 - okay if we run this now you see we get
07:45 - five six seven eight
07:46 - nine the reason again is because we
07:48 - started at five
07:50 - now if i start i at say negative five
07:52 - let's run this
07:53 - and you see now that this loop runs 15
07:55 - times right
07:57 - so that is kind of just the basics of
07:58 - the for loop so you can start i
08:00 - whatever you want you can make this
08:02 - whatever you want you can make this
08:03 - condition
08:04 - something that will never occur but of
08:06 - course you don't want that to happen
08:07 - because you don't want to run into an
08:09 - infinite loop and in fact
08:10 - i don't want to show you an infinite
08:11 - loop because it's going to crash my
08:12 - recording software
08:14 - uh with the way the sublime text works
08:16 - but do an experiment on your own
08:17 - computer if you want
08:19 - okay so sorry i realized i was kind of
08:20 - just rambling on there what i'm trying
08:21 - to say is that if you want to see what
08:23 - an infinite loop
08:24 - looks like and just take my word for it
08:25 - essentially just means the loop never
08:26 - stops running
08:27 - but if you want to see what that looks
08:28 - like you can change this condition to
08:30 - something like i
08:30 - does not equal negative 6 and since i
08:33 - will never be equal to negative 6
08:35 - this condition will never be false and
08:37 - that means that this will just run
08:39 - continuously now another thing you could
08:41 - do is you could make it so your
08:42 - increment here is just
08:44 - invalid or just doesn't do anything you
08:45 - say like i equals
08:47 - zero as your increment and then well
08:49 - what that's gonna do is again run you in
08:50 - the same situation you're just gonna
08:52 - constantly have i being equal to 0 and
08:54 - that will be an infinite loop
08:55 - so again you guys can experiment with
08:56 - that on your own i'm not going to show
08:58 - you that here but i will show you some
08:59 - more variations of this for loop so
09:01 - let's take
09:02 - another one and put it down here and now
09:06 - let's just look at another variation
09:08 - here so let's say that i actually don't
09:09 - want to increment going upwards or i
09:11 - don't want to have my iterator go up i
09:13 - want it to have
09:14 - i want to have it go down so i could
09:16 - start i at say something like 10
09:17 - i can say while i is and in this case
09:20 - let's say greater than
09:22 - and make it greater than i don't know
09:25 - let's go 0
09:26 - then we can say i minus minus now what
09:28 - this is saying is start
09:29 - i at 10 decrement i so subtract 1 from
09:33 - it every single time
09:34 - and then while i is greater than zero
09:36 - continue to print this out so if i run
09:38 - this now
09:38 - you see that we're going to count down
09:40 - so we're going to start at 10 we're
09:41 - going to count down until
09:42 - 1. now we can count down by more than
09:44 - just one right i can say i
09:46 - minus equals 2 and now if i run this
09:49 - we're going to count down by 2 every
09:50 - single time i could count down by
09:52 - 5 if i want and notice that we just get
09:54 - two things printing out
09:55 - now if we do something like if i is
09:57 - greater than 11 right
09:59 - then what you're going to see is that
10:00 - this for loop will never run
10:02 - the reason why this for loop isn't going
10:03 - to run is because i starts being equal
10:05 - to
10:05 - 10. 10 is not greater than 11 and so we
10:08 - don't do any iterations we don't do any
10:10 - increments the for loop
10:11 - doesn't run so that is really the basics
10:14 - of the for loop
10:15 - now the reason i showed you a raise
10:17 - before i showed you this is because i
10:18 - want to show you how you can loop
10:20 - through
10:20 - an array so a very common thing to do in
10:23 - programming
10:24 - is to have an array and to loop through
10:26 - that array or to kind of initialize an
10:29 - array
10:29 - from a for loop i'll show you how you do
10:32 - both of them
10:32 - so let's create an array we'll just make
10:34 - an into array we'll say int
10:36 - x and we can just make this equal to
10:37 - like one two three four
10:39 - five uh and in fact actually let's make
10:41 - it something different five
10:42 - six seven eight nine ten 20
10:46 - 30 40. just add some more unique
10:48 - elements in there
10:49 - so we've declared uh a variable called
10:52 - x and this is an array and it's storing
10:54 - these values
10:55 - so very simply what i want to do is look
10:57 - through this array and i want to print
10:59 - out every single one of these values
11:01 - how can i do this well we have this very
11:03 - convenient variable here called i
11:05 - and i can use i to actually access the
11:08 - indices of this array
11:09 - so if i change i to start out being
11:11 - equal to 0 which is the first index of
11:14 - my array
11:14 - and then i want i to loop up until we're
11:17 - done with all the elements right so i
11:19 - need to figure out how many elements are
11:20 - in this array essentially
11:22 - and then i increment i by one i can use
11:24 - this variable to access the element so
11:26 - let me show you what i mean
11:27 - if i say something like i is less than
11:29 - and then the size of and we're going to
11:31 - take
11:32 - x and divide that by the size of
11:35 - and then we'll just say x zero what this
11:37 - will do is
11:38 - this will tell us the number of elements
11:40 - in the array and the reason why this is
11:42 - going to work for us is because i will
11:44 - loop
11:44 - up to but will not include the number of
11:47 - elements that we have so let's count
11:48 - this
11:49 - one two three four five six seven
11:52 - eight nine so we're gonna get nine here
11:54 - when we look at the size of
11:56 - the last indice is 8 for our array and
11:59 - so that means that i will go to
12:01 - 8 and then as soon as it hits 9 it will
12:03 - stop looping and so we won't get any
12:04 - weird kind of index errors or anything
12:06 - like that
12:07 - because we're only going to be accessing
12:08 - elements in this array
12:10 - that actually exist right or positions
12:12 - in this array that exist so what i'm
12:13 - going to do now is c
12:14 - out x at position i i'm using this
12:18 - iterator variable that we've just talked
12:20 - about to actually access
12:22 - elements in this array so let's just
12:23 - have a look at this here and see if this
12:24 - works
12:26 - and i got some type of error i will be
12:27 - right back just gonna have a quick look
12:29 - at this
12:29 - okay so i realized i did the wrong
12:31 - declaration for an array
12:33 - i work in a lot of different programming
12:34 - languages not an excuse but just a lot
12:36 - of times i just forget
12:37 - the syntax for languages and obviously
12:39 - as you guys know i'm a pretty beginner
12:41 - in c
12:41 - plus but anyways i realize that i need
12:43 - to put this over here so int
12:45 - x and then the parentheses and then we
12:47 - can initialize our ray
12:49 - like this so let's try this now let's
12:50 - see if this works and we don't get any
12:52 - errors i believe let's look up here
12:54 - and you can see that we now print out
12:56 - all of the values in this array by
12:58 - accessing them
12:59 - from the indicee now what we could do is
13:01 - we could look at say every other value
13:03 - in the array right if we wanted to do
13:04 - that then we would just change this to i
13:06 - plus equals two and now what you're
13:08 - going to see is that we access every
13:10 - other element so we have 5
13:11 - 7 9 20 and then 40.
13:15 - so that is kind of the basics of looping
13:17 - through and array now another thing we
13:19 - can do is initialize values in an
13:20 - array using a for loop so let's just
13:23 - create an array
13:24 - we'll say into x and let's say that we
13:26 - want this array to have
13:27 - five elements so into x give it five
13:29 - elements now what we're going to do
13:31 - is we're going to say i is less than 5
13:34 - which is the number of elements in this
13:35 - array
13:36 - what we also could do is the same thing
13:37 - that we did before so just size of x
13:39 - divided by size of x
13:40 - at 0. that will still work for us as
13:42 - well in fact let's leave that
13:44 - we're going to say i plus plus but now
13:46 - instead of just printing out these
13:48 - elements
13:49 - what i'm going to do is actually assign
13:51 - these elements so i'm going to say x
13:53 - at position i is equal to and let's just
13:56 - make it equal to i now we can make this
13:58 - equal to whatever we want we could fill
13:59 - this array with say tens
14:01 - or hundreds or something like that but
14:03 - in this case i'm just going to make it
14:04 - equal to i
14:05 - so x at position i is now going to be
14:08 - set equal to i
14:09 - then what i'm actually going to do after
14:11 - this so after i set this
14:12 - is i'm going to run another for loop and
14:15 - this for loop is just going to print out
14:17 - the the values of x so we can see what
14:19 - this array
14:20 - looks like so hopefully that's clear but
14:22 - let's run this and see if i made any
14:24 - mistakes
14:24 - looks like all is good you can see we
14:26 - get 0 1 2 3
14:28 - and 4. so actually sorry this shouldn't
14:30 - be printing out let me remove that print
14:32 - statement
14:33 - let's run this again and there you go
14:34 - okay so technically you saw the same
14:36 - output twice but
14:37 - i should have only been printing here i
14:39 - didn't want to print up here
14:40 - so again the idea here is that we wanted
14:42 - to fill this array with some elements in
14:44 - this case i just filled it with whatever
14:46 - value i want but i could also fill it
14:48 - with say the squares of i right
14:50 - i could say something like i multiplied
14:52 - by i
14:53 - now if i do this notice we're going to
14:55 - get all the squares so 0
14:57 - 1 4 9 16 we could do all the cubes
15:00 - so let's do that and we get 64 at the
15:03 - end
15:04 - or we could do something like just a
15:05 - static number like a hundred
15:07 - and now you can see that we just have a
15:08 - bunch of hundreds in this array so
15:10 - there's all kinds of other stuff that
15:12 - you can do with for loops we're going to
15:13 - be using them a lot
15:14 - in this series and i think here is where
15:16 - i'm going to leave off as kind of a
15:17 - really good introduction to for loops
15:19 - so hopefully this is clear just to
15:21 - quickly recap we have the definition of
15:23 - the iterator variable this does not need
15:25 - to be named eye you could name it
15:26 - whatever you want
15:27 - you can start this value or this
15:29 - variable sorry at whatever value you
15:30 - want
15:31 - you then have your condition so while
15:33 - this condition is true you are going to
15:34 - continue
15:35 - to loop you can put whatever condition
15:37 - here you want and then you have your
15:39 - increment your decrement or really just
15:40 - the change to the variable i
15:42 - so usually you're going to use plus plus
15:44 - you could use minus minus
15:46 - or if you wanted to go by a custom
15:47 - amount by like two three four
15:49 - then you do something like plus equals
15:51 - minus equals you could even do something
15:52 - like multiplied equals if you really
15:54 - wanted to so that is the basics of a for
15:56 - loops i hope this video was helpful to
15:57 - you if it was make sure to leave a like
15:59 - subscribe to the channel i will see you
16:00 - in another youtube video
16:10 - you

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners now in this video i'm going to be discussing for loops now before i do that i would love to hear your thoughts on my new kind of office setup here i'm using a much better camera hopefully the audio sounding maybe a little bit better i have no idea you guys let me know in the comments down below anyways as i said in this video we're going to be discussing for loops this is going to allow us to actually repeat something a set number of times very useful very important and with that said let's dive in so we're going to dive into the syntax of a for loop in just one second but i quickly want to state kind of the problem that a for loop solves for us so previously you would have seen that if we wanted to do something multiple times we had to actually write the code to do that thing multiple times right so if i wanted to see out say something like hello world and i wanted to do this multiple times then i had to actually take this line and well paste it and actually from now on this is a good point to talk about this i'm going to be running my code right from sublime text so what you can actually do to run your code in here is you can press ctrl b at least that's the key that i've set up to run my code i'm not really going to go through the entire setup here of how to do this because it can be kind of complicated uh but anyways i'm not going to go to the terminal some of you rightfully so said that's kind of a waste of time just run the code and sublime text so that's what i'm doing now anyways you get the idea we printed hello world three times but now what if i tell you hey print hello world 25 million times or something crazy like that are you going to copy and paste this code that many times you're going to go and count that many lines probably not and well that is where a for loop comes in a for loop allows us to repeat something or loop over something a set number of times when we know the number of times that we want to loop we use something called a for loop now there is situations in which we don't know how many times we want to loop and that is when we would use something called a while loop which i will discuss in the next video anyways let me show you the syntax for a for loop so when you define a for loop you say four you put your open in closing parenthesis you put your open curly brace and you're closing curly brace and then you define what's known as your iterator now an iterator is simply a variable that keeps track of what iteration in the loop that you are in so when i say iteration that is kind of one sequence or one step of the loop so if this loop is running ten times we're going to have some variable it's keeping track of well what iteration are we on are we on iteration zero which would be the first iteration are we on iteration one two three four so on and so forth and that variable is going to tell our loop when it needs to stop running so as soon as the variable gets to say 10 then we're going to go ahead and stop looping because well this loop has happened 10 times anyways let me show you how we define the iterator so the first thing that we do is we define a variable that's going to be our iterator so we say int x or int i is kind of traditional is equal to and then zero and then we put a semicolon now it's worth noting here that you can start your iterator at whatever value you want and it's going to be easier if i just go through one simple example and then talk to you about all the nuances but just keep in mind that you can make this variable whatever you want this does not necessarily need to be an int type but i won't really talk about any other ones than ins because this is kind of standard practice anyways int i equals zero and then what i'm going to say after this is i'm going to say i is less than and in this case i'm going to say 10 and then i'm going to say i plus plus now what i've just done is i've defined the three criteria that i need for a for loop i need to define my iterator variable so initialize this to some value i need to pick my ending condition and then i need to decide what my increment is going to be every single loop so what this for loop really says here is set i equal to 0 loop while i is less than 10. so while the value of i is less than 10 keep looping and then we say i plus plus what this means is every single time one iteration of this loop completes add one to i i showed you what plus plus did previously when you do plus plus it just adds one to i uh you also could do something like i plus equals 3 right and then that would add 3 to i you could say i equals i times 3 that would multiply i by 3. so whatever you want you just have to change the value of i here so that it goes up or goes down based on what you're doing if you don't increment this like if you just did something like i equals 0 you're going to have what's an infinite loop the reason you'll have that is because the loop will never stop running right i will never be less than 10 and you don't want an infinite loop that's something you always want to avoid in programming now one small thing here i will note some people prefer to use the syntax plus plus i i didn't discuss this i i don't think i discussed this actually this is a just different way of kind of incrementing this variable i don't really want to get into all of the details but i know some of you c plus plus masters out there are going to comment that it's probably better to do plus plus i than do i plus plus for our purposes these do the exact same thing you can look up the difference if you want i just wanted to note that either of these ways is acceptable and some of the kind of i don't want to say older but maybe more experienced epos programmers would say plus plus i is uh preferred anyways we're going to go with i plus plus just because that's what i've shown previously and now let's actually you know see how this works so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is algo expert algo expert is the best platform to use when preparing for your software engineering coding interviews it's what helped me land a job at shopify and at microsoft and while i can just highly recommend the platform of course i also work there as well with that said check out i'll go expert from the link in the description and use the code tech with tim for a discount on the plaques so i'm going to say c out and i'm just going to c out i and then after this i'm going to see out and end l so the idea here is i just want to see how this for loop actually operates so inside of this for loop i'm going to print out the value of i which is our iterator variable so let's go ahead and run this code and let's see what we get we get 0 1 2 3 4 5 so on and so forth now the reason we get this is because on our very first iteration so the first time we enter this for loop i is set so that's equal to zero then what we do is we print out i we come back up to the top of this for loop and we increment i the reason we increment i is because after this first iteration runs or after any iteration runs really we're going to do whatever this says right here which is incrementing our our variable here incrementing our iterator so then what we do is we check if i is less than 10. so i in this case after we've done the first iteration is going to be 1 and so 1 is less than 10 so we run the for loop again and we repeat this process all the way up until we get to 9 then at 9 when we do our increment that changes i to 10 10 is not less than 10 we stop running the for loop so that is really the basics that's how a for loop works now you can put a ton of other stuff inside of a for loop right i can say something like if and let's do something like i mod 2 is equal to 0 and then maybe only in the situation where i mod 2 is equal to 0. what this really means is i is an even number or equal to 0 then i print out i so let's just quickly see if this works if i made any mistakes here so if i say if i mod 2 equals equals 0 then do this print statement you can see we only print out all of the even numbers and that's going from 0 to 10. so now let's look at another are a few variations of the for loop so if i change i to say be equal to 5 then that means that i is going to start at 5. so if i starts at 5 when we run this for loop let me just get rid of this if statement right here let's just do that okay if we run this now you see we get five six seven eight nine the reason again is because we started at five now if i start i at say negative five let's run this and you see now that this loop runs 15 times right so that is kind of just the basics of the for loop so you can start i whatever you want you can make this whatever you want you can make this condition something that will never occur but of course you don't want that to happen because you don't want to run into an infinite loop and in fact i don't want to show you an infinite loop because it's going to crash my recording software uh with the way the sublime text works but do an experiment on your own computer if you want okay so sorry i realized i was kind of just rambling on there what i'm trying to say is that if you want to see what an infinite loop looks like and just take my word for it essentially just means the loop never stops running but if you want to see what that looks like you can change this condition to something like i does not equal negative 6 and since i will never be equal to negative 6 this condition will never be false and that means that this will just run continuously now another thing you could do is you could make it so your increment here is just invalid or just doesn't do anything you say like i equals zero as your increment and then well what that's gonna do is again run you in the same situation you're just gonna constantly have i being equal to 0 and that will be an infinite loop so again you guys can experiment with that on your own i'm not going to show you that here but i will show you some more variations of this for loop so let's take another one and put it down here and now let's just look at another variation here so let's say that i actually don't want to increment going upwards or i don't want to have my iterator go up i want it to have i want to have it go down so i could start i at say something like 10 i can say while i is and in this case let's say greater than and make it greater than i don't know let's go 0 then we can say i minus minus now what this is saying is start i at 10 decrement i so subtract 1 from it every single time and then while i is greater than zero continue to print this out so if i run this now you see that we're going to count down so we're going to start at 10 we're going to count down until 1. now we can count down by more than just one right i can say i minus equals 2 and now if i run this we're going to count down by 2 every single time i could count down by 5 if i want and notice that we just get two things printing out now if we do something like if i is greater than 11 right then what you're going to see is that this for loop will never run the reason why this for loop isn't going to run is because i starts being equal to 10. 10 is not greater than 11 and so we don't do any iterations we don't do any increments the for loop doesn't run so that is really the basics of the for loop now the reason i showed you a raise before i showed you this is because i want to show you how you can loop through an array so a very common thing to do in programming is to have an array and to loop through that array or to kind of initialize an array from a for loop i'll show you how you do both of them so let's create an array we'll just make an into array we'll say int x and we can just make this equal to like one two three four five uh and in fact actually let's make it something different five six seven eight nine ten 20 30 40. just add some more unique elements in there so we've declared uh a variable called x and this is an array and it's storing these values so very simply what i want to do is look through this array and i want to print out every single one of these values how can i do this well we have this very convenient variable here called i and i can use i to actually access the indices of this array so if i change i to start out being equal to 0 which is the first index of my array and then i want i to loop up until we're done with all the elements right so i need to figure out how many elements are in this array essentially and then i increment i by one i can use this variable to access the element so let me show you what i mean if i say something like i is less than and then the size of and we're going to take x and divide that by the size of and then we'll just say x zero what this will do is this will tell us the number of elements in the array and the reason why this is going to work for us is because i will loop up to but will not include the number of elements that we have so let's count this one two three four five six seven eight nine so we're gonna get nine here when we look at the size of the last indice is 8 for our array and so that means that i will go to 8 and then as soon as it hits 9 it will stop looping and so we won't get any weird kind of index errors or anything like that because we're only going to be accessing elements in this array that actually exist right or positions in this array that exist so what i'm going to do now is c out x at position i i'm using this iterator variable that we've just talked about to actually access elements in this array so let's just have a look at this here and see if this works and i got some type of error i will be right back just gonna have a quick look at this okay so i realized i did the wrong declaration for an array i work in a lot of different programming languages not an excuse but just a lot of times i just forget the syntax for languages and obviously as you guys know i'm a pretty beginner in c plus but anyways i realize that i need to put this over here so int x and then the parentheses and then we can initialize our ray like this so let's try this now let's see if this works and we don't get any errors i believe let's look up here and you can see that we now print out all of the values in this array by accessing them from the indicee now what we could do is we could look at say every other value in the array right if we wanted to do that then we would just change this to i plus equals two and now what you're going to see is that we access every other element so we have 5 7 9 20 and then 40. so that is kind of the basics of looping through and array now another thing we can do is initialize values in an array using a for loop so let's just create an array we'll say into x and let's say that we want this array to have five elements so into x give it five elements now what we're going to do is we're going to say i is less than 5 which is the number of elements in this array what we also could do is the same thing that we did before so just size of x divided by size of x at 0. that will still work for us as well in fact let's leave that we're going to say i plus plus but now instead of just printing out these elements what i'm going to do is actually assign these elements so i'm going to say x at position i is equal to and let's just make it equal to i now we can make this equal to whatever we want we could fill this array with say tens or hundreds or something like that but in this case i'm just going to make it equal to i so x at position i is now going to be set equal to i then what i'm actually going to do after this so after i set this is i'm going to run another for loop and this for loop is just going to print out the the values of x so we can see what this array looks like so hopefully that's clear but let's run this and see if i made any mistakes looks like all is good you can see we get 0 1 2 3 and 4. so actually sorry this shouldn't be printing out let me remove that print statement let's run this again and there you go okay so technically you saw the same output twice but i should have only been printing here i didn't want to print up here so again the idea here is that we wanted to fill this array with some elements in this case i just filled it with whatever value i want but i could also fill it with say the squares of i right i could say something like i multiplied by i now if i do this notice we're going to get all the squares so 0 1 4 9 16 we could do all the cubes so let's do that and we get 64 at the end or we could do something like just a static number like a hundred and now you can see that we just have a bunch of hundreds in this array so there's all kinds of other stuff that you can do with for loops we're going to be using them a lot in this series and i think here is where i'm going to leave off as kind of a really good introduction to for loops so hopefully this is clear just to quickly recap we have the definition of the iterator variable this does not need to be named eye you could name it whatever you want you can start this value or this variable sorry at whatever value you want you then have your condition so while this condition is true you are going to continue to loop you can put whatever condition here you want and then you have your increment your decrement or really just the change to the variable i so usually you're going to use plus plus you could use minus minus or if you wanted to go by a custom amount by like two three four then you do something like plus equals minus equals you could even do something like multiplied equals if you really wanted to so that is the basics of a for loops i hope this video was helpful to you if it was make sure to leave a like subscribe to the channel i will see you in another youtube video you
