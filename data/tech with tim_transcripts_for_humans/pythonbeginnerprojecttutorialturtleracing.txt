With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to a brand
00:10 - new
00:11 - youtube video so it's been a while since
00:13 - i've done a kind of beginner project
00:15 - something that really anyone can follow
00:17 - along with regardless of their
00:18 - background in python
00:19 - and so i wanted to do one for this video
00:22 - so what i'm going to be showing you how
00:23 - to do is actually create a graphical
00:25 - application so this is not just going to
00:27 - be text although it looks like that
00:28 - right now
00:29 - and what's going to happen is we're
00:30 - going to create a turtle racing program
00:33 - so essentially the user will be asked to
00:34 - decide how many turtles they would like
00:36 - to race
00:36 - based on their answer a screen will pop
00:39 - up as i will show you in one second
00:41 - and then it will race that many turtles
00:42 - by just randomly moving them
00:44 - on the screen now this is a great
00:45 - project to learn about how to build
00:47 - something a little bit bigger than a
00:48 - really simple hello world application
00:50 - i guarantee if you're new to python
00:52 - you're going to learn a ton here i
00:53 - purposely used a bunch of different
00:55 - syntax
00:56 - and functions and kind of showed you how
00:57 - we can lay out a relatively large
00:59 - program for beginners this is not a
01:01 - large program by any means
01:03 - in kind of a nice structured way where
01:04 - everything is just done in kind of the
01:06 - proper format
01:07 - so anyways let's go ahead and get
01:08 - started here i'm just going to show you
01:10 - a demo of what we're going to be
01:11 - building
01:11 - so it says welcome to turtle racing
01:13 - please enter the following information
01:15 - how many turtles would you like to race
01:17 - you can enter between two to eight
01:18 - turtles i'm going to select eight when i
01:21 - do this it's going to open up the turtle
01:23 - window this is built into python there's
01:25 - nothing fancy you need to install
01:26 - it's going to initialize all of our
01:28 - turtles and then it's going to start
01:30 - racing them
01:30 - on the screen so it looks like the red
01:33 - one is going to win here let's see
01:35 - and oh maybe not so it says here the
01:38 - winner of the race
01:39 - is pink and then it waits five seconds
01:41 - and then it stops
01:43 - now i will show you how we can run this
01:44 - multiple times if you'd like to do that
01:46 - that's the basics behind this program
01:48 - now let me show you one more time if i
01:49 - race say three turtles
01:50 - notice how they are evenly spaced out on
01:52 - the screen so i'm gonna be showing you
01:54 - how we can do that
01:55 - and there you go they race nice and it
01:57 - says the winner
01:59 - is orange awesome so let's dive into
02:02 - this video
02:02 - after a quick word from our sponsor
02:04 - before we get started i need to thank
02:06 - the sponsor of this video which is alco
02:08 - expert algo expert is the best platform
02:11 - to use from preparing for your software
02:12 - engineering coding interviews and has
02:14 - the highest quality coding interview
02:16 - practice questions
02:17 - with over 140 practice questions
02:20 - detailed solutions in nine of the most
02:22 - popular programming languages a
02:23 - feature-packed browser-based coding
02:25 - environment
02:26 - extensive test suites and conceptual
02:28 - overviews and code walk-throughs for
02:30 - each and every problem
02:31 - algo expert is the best resource to use
02:33 - to ace your coding interviews
02:35 - aligoexpert also has a data structures
02:37 - crash course coding interview
02:38 - assessments and a mock
02:40 - interviews feature i can highly
02:42 - recommend algo expert as a former
02:43 - customer myself
02:44 - and now an official instructor on the
02:46 - platform get started using algo expert
02:49 - today by clicking the link
02:50 - in the description and using the code
02:52 - tech with tim for a discount on
02:53 - the platform all right so let's get
02:55 - started by talking about what you're
02:57 - going to need to follow along with this
02:58 - tutorial
02:59 - you are going to need some type of code
03:02 - editor and an installation of python
03:04 - those are the only requirements here so
03:06 - if you have python already installed on
03:08 - your system which i'm assuming all of
03:09 - you do at this point in time then open
03:11 - up your favorite code editor it could be
03:13 - sublime text that's what i'm using right
03:15 - here
03:16 - or if you're not even sure what i'm
03:17 - showing you you've never seen this
03:18 - window before you don't even know what i
03:19 - mean by text editor
03:20 - just open up your standalone standard
03:22 - idle
03:24 - like this and for you to follow along
03:25 - with me here just go to file
03:27 - new file write all of your code in a
03:29 - file like this
03:30 - save it with some name it's very
03:33 - important that you do not
03:34 - name your file turtle do not name it
03:37 - turtle if you name it turtle you can
03:38 - potentially have some problems
03:40 - and you're going to go in here save this
03:42 - file as whatever you want that's not
03:43 - named turtle
03:44 - and save it in whatever location you
03:46 - want and then whenever you want to
03:47 - actually run your code
03:48 - when you're inside this file you can
03:50 - press the f5 key on your keyboard
03:52 - or you can go to run and then press run
03:54 - module
03:55 - and well that will run your python code
03:57 - now i'm going to be working in an editor
03:58 - called sublime text
04:00 - this is a free text editor i'll leave a
04:02 - link to it in the description
04:04 - what i've done here is i've created a
04:05 - new file it says turtle race
04:07 - tutorial dot pi and the way i'm going to
04:09 - be running my file is from my command
04:11 - line so i'm going to go to my cmd
04:13 - if you're on mac this would be your
04:15 - terminal i'm going to use the python
04:17 - command
04:17 - followed by the name of my file so in
04:19 - this case it's going to be
04:21 - turtle race and then tutorial dot pi and
04:24 - then this will actually run my file for
04:26 - me
04:26 - notice i've saved my file on the desktop
04:28 - that is why the path for my command
04:30 - prompt is on the desktop
04:32 - hopefully that gave you enough
04:33 - information so that you are confident to
04:34 - follow along
04:35 - if all of this makes no sense just open
04:37 - up idle and just write python code as
04:39 - how you normally write it you don't have
04:41 - to work in this
04:42 - text editor that i am here anyways let's
04:44 - go ahead and get
04:45 - started so the first thing that i want
04:47 - to do here is i want to ask my user to
04:49 - input the number of turtles that we are
04:51 - going to
04:52 - have so what i'm actually going to do
04:54 - here is i'm going to create a
04:55 - function if you've never seen a function
04:57 - before i'll explain them they're pretty
04:58 - straightforward but i'm going to say
05:00 - define
05:00 - and the name of this function is going
05:02 - to be get underscore
05:04 - number underscore of underscore and then
05:06 - we'll say
05:07 - racers like this or turtles whatever you
05:10 - want to call this
05:11 - and then inside of here this is where we
05:12 - are actually going to ask the user to
05:14 - insert the number of
05:16 - racers that they want to have now the
05:18 - reason you're going to see me kind of
05:19 - write things in this way in different
05:20 - functions and kind of different blocks
05:22 - is because it really separates out what
05:24 - every single aspect of our program is
05:26 - doing
05:26 - and it's just good practice when you're
05:28 - writing code to really have
05:30 - all of the different separate things
05:31 - happening kind of in different areas so
05:33 - later on if something goes wrong or you
05:35 - want to add something or change
05:36 - something it's really easy to do that
05:38 - you're not looking through a huge mess
05:39 - of code and well you'll see how this
05:41 - kind of evolves as we go through here
05:42 - so what i want to do is i want to ask
05:44 - the user for a number so i want them to
05:46 - insert a number between
05:47 - 2 and 10 and so i also need to validate
05:50 - that the number
05:51 - they're typing in is correct so what i'm
05:53 - going to say is
05:54 - racers is equal to zero and then i'm
05:57 - going to say
05:58 - wow true now the reason i have a while
06:01 - loop here
06:01 - is because i want to continue to ask the
06:03 - user to insert a number
06:05 - until they insert a valid number so if
06:07 - they insert something invalid then i'm
06:09 - going to keep
06:10 - asking them and say hey no that wasn't
06:11 - valid give me something that's valid
06:13 - because we can't start our program until
06:15 - we know how many turtles we're going to
06:17 - be racing
06:18 - so i start with racers equals zero i say
06:20 - well true now i'm going to use an
06:22 - input so i'm going to say racers is
06:24 - equal to
06:25 - and then input like this and i'm going
06:27 - to say enter
06:29 - the number of racers
06:32 - and then i will do kind of a little 2 to
06:34 - 10 thing here
06:36 - to indicate the fact that i would like
06:37 - them to type a number that is between
06:39 - 2 to 10. now you don't have to do it
06:41 - like this you can write whatever you
06:42 - want
06:42 - this is what i'm going to prompt the
06:44 - user with and then notice that here i've
06:46 - added a space
06:47 - so after my colon i have a space the
06:49 - reason i have a space is because the
06:50 - user starts typing immediately after
06:53 - this prompt so this text will be printed
06:55 - to the screen so i want to separate it
06:56 - from the colon so that it doesn't look
06:58 - like they're typing like right beside
06:59 - this line there's like a little bit of a
07:01 - space
07:02 - anyways what i'm now going to do is i'm
07:04 - going to check if this
07:05 - what they inputted is a number the
07:07 - reason i need to check if this is a
07:09 - number
07:09 - is if the user didn't input a number
07:11 - obviously that's invalid but also i want
07:13 - to convert what the user types in
07:15 - into a number if i can do so so in
07:17 - python by default when you use this
07:19 - input statement it's going to capture
07:21 - whatever the user types into the console
07:23 - and convert that into a string so we
07:25 - need to take that string and potentially
07:27 - convert that into an actual integer a
07:29 - numeric value
07:30 - so that we can use that in our program
07:32 - so i'm going to say if
07:33 - racers. and then is digit this is a
07:36 - method you can call on strings
07:38 - and this will tell you if the string is
07:39 - completely numeric or not so if the
07:41 - string is numeric
07:42 - then what that means i can do is i can
07:44 - convert this into an in so i can say int
07:47 - racers if you tried to just do this line
07:49 - without checking beforehand if it was
07:51 - numeric
07:52 - then this would crash the program
07:53 - because if you had a string that was
07:55 - typed in that was not numeric
07:56 - you say you try to convert say ins of
07:59 - tim
08:00 - to a int right you're trying to convert
08:02 - the string tim into an int this is inval
08:04 - that's going to crash
08:05 - you you can't do this so anyways let's
08:07 - move on now if this is not the case
08:09 - so if erasers are or if what the user in
08:12 - input sorry is not a digit then what we
08:14 - want to do is tell them hey this is
08:16 - invalid please try again right so i'm
08:18 - going to print
08:19 - and say input is not
08:23 - numeric dot dot try again
08:27 - exclamation point and then i'm going to
08:29 - say continue
08:30 - now what this continue does is
08:32 - immediately brings me back to the
08:33 - beginning of the wall
08:34 - so we don't really need this continue
08:36 - well we will based on what i write next
08:38 - but
08:39 - think of it this way as soon as we hit
08:40 - this statement it immediately jumps
08:42 - right back up to the top of the loop
08:44 - so anything below this had a print
08:46 - statement saying like
08:47 - print hi this print statement wouldn't
08:50 - run if we hit this continue before this
08:52 - print statement so that's why i have the
08:53 - continue here
08:55 - all right so if the racers is a digit so
08:57 - if what they inputted is a digit then we
08:59 - are going to convert it into an integer
09:01 - which is valid otherwise we'll tell them
09:02 - it's not numeric
09:03 - they need to try again and then we'll
09:04 - continue now if we make it past this so
09:08 - we don't hit this else and we did
09:09 - make this conversion now we want to
09:11 - check if this number is within the range
09:13 - of 2
09:13 - and 10. so i'm going to say if 2 is less
09:16 - than or equal to racers
09:19 - less than or equal to 10 then what i
09:21 - will do
09:22 - is i will just return
09:25 - the racers like that otherwise i will
09:28 - tell them that this number is not valid
09:30 - so the idea here is i check if racers
09:32 - which is now a number
09:33 - that's why i wanted to convert it to a
09:34 - number so i could do this comparison
09:36 - is less than or equal to 2 or less than
09:39 - or equal to 10. so if it's within our
09:40 - range of 2 to 10
09:41 - this is fine what i will do is return
09:43 - racers
09:44 - so whatever the user typed in we're
09:46 - going to return that from this function
09:48 - which means whatever called this
09:49 - function will now have access to it
09:51 - otherwise though if this was not valid
09:54 - what i want to do
09:55 - is i want to print number oops
09:58 - not in range 2 to 10
10:03 - try again exclamation point
10:06 - and then i could put a continue here but
10:08 - there's really no need to do that
10:10 - because nothing comes after this
10:11 - continue in this while loop and so by
10:13 - default we will just go back up to the
10:15 - top
10:16 - the reason i have to continue here is
10:18 - because i don't want to check
10:19 - if the number that is not a number right
10:21 - so what the user typed in i don't want
10:22 - to check if that's between
10:23 - 2 to 10 because if i do that and we
10:26 - haven't converted this into a number
10:27 - we're going to get an error let's say
10:29 - you know what the user typed in again
10:30 - was tim
10:31 - i can't check if 2 is less than or equal
10:34 - to tim this is just undefined this
10:35 - operation makes no sense
10:37 - and so that is why i'm continuing to
10:38 - make sure if i don't get a valid number
10:40 - i don't do this comparison and crash my
10:42 - program all right so now we have this
10:44 - function
10:45 - so i'll show you how we can use this
10:46 - right we can just call the function so
10:48 - get number of racers
10:49 - and we can say something like racers is
10:52 - equal to get number of racers
10:54 - and then we can just print out racers
10:56 - down here now what will happen
10:57 - is all of the code that we wrote inside
10:59 - of here notice it's indented after the
11:01 - colon
11:02 - right uh it's going to run all this code
11:04 - when we call the function
11:05 - and then as soon as we hit this return
11:07 - statement what will happen is we will
11:09 - actually return back to where we called
11:11 - this function so back to this line
11:13 - and we will pass whatever the value of
11:15 - racers was so racers will be equal to
11:17 - down here
11:18 - whatever is returned from this line so
11:19 - whatever number the user typed in that
11:21 - was numeric and between two to ten
11:23 - then i'm going to print out those number
11:25 - of racers that the user typed in
11:27 - and that's kind of the start of our
11:28 - program then we've got a few more stuff
11:29 - a few more steps sorry to do after that
11:31 - so let's try running our program i'm
11:33 - going to say python turtle
11:34 - racetutorial.pi
11:36 - again if you're an idle just press f5
11:38 - and
11:39 - come on enter it's just going to work
11:42 - okay something's wrong with my terminal
11:44 - python
11:46 - turtle racetutorial.pi okay enter number
11:48 - of racers 2 to 10. let's enter 5 and
11:50 - then it prints out 5.
11:52 - now let's try something involved let's
11:53 - try tim now it tells me input is not
11:55 - numeric
11:56 - try again let's try uh joe not numeric
11:59 - try again let's try 11. number is not in
12:01 - range let's try 10
12:03 - boom that works we get 10. awesome so
12:05 - this is indeed working we just did a few
12:07 - tests here
12:08 - and you can see that down here we are
12:10 - getting access to whatever this function
12:12 - returned
12:12 - so now that we have the number of racers
12:14 - what we want to do next is actually set
12:16 - up our turtle screen
12:18 - so i will show you what i mean by that
12:20 - but let's start by importing the
12:21 - internal module
12:23 - so the eternal module is built into
12:25 - python and this allows you to perform
12:27 - very basic 2d graphic operations with
12:29 - this thing called a turtle
12:31 - so you'll see it in a second but
12:33 - essentially it's like a little kind of
12:34 - header
12:35 - on the screen and you can kind of move
12:36 - it around it will draw lines and it's a
12:38 - really great way to just learn the
12:40 - basics of python in a nice visual way
12:42 - so now we have the number of racers now
12:44 - we've imported turtle
12:46 - and let's actually just see what happens
12:48 - now when we run the program after
12:49 - importing turtle
12:50 - so we're going to run this uh let's
12:53 - import our number of racers we can go
12:55 - four
12:56 - and we actually see that nothing
12:57 - happened i was thinking the turtle
12:59 - screen might pop up but it's i think
13:00 - it's because i haven't used this module
13:02 - yet
13:03 - so anyways that was a poor example what
13:06 - i'm going to do next is show you how we
13:07 - can create a turtle screen
13:08 - so ignore that last example uh what i
13:11 - was expecting to happen didn't happen
13:13 - often times when you import a module
13:14 - like something will happen when you
13:15 - import it
13:16 - so what i'm going to do now at the top
13:18 - of my screen is i'm going to define
13:20 - first of all the width and the height
13:21 - that i want my turtle screen to be
13:23 - so usually whenever you're working with
13:25 - graphics you need to define the size of
13:27 - a screen or the size of the canvas
13:29 - you're going to be working on
13:30 - so in this case i'm going to say in all
13:31 - capitals width comma height
13:34 - is equal to and then 500 comma 500. if
13:36 - you haven't seen this notation before
13:38 - this means width is equal to 500
13:40 - height is equal to 500 you can separate
13:42 - as many variables by commas as you want
13:44 - and then do the assignment with
13:45 - commas as well so the reason i'm doing
13:47 - this in all capitals is because these
13:49 - are constant values
13:50 - so in programming whenever you have a
13:52 - constant value in a language where you
13:54 - can't explicitly define that
13:56 - you usually have all capital letters to
13:58 - denote the fact that this value width
13:59 - and this value height
14:01 - will never change they're just here so
14:02 - that we have easy access to the width
14:04 - and the height
14:05 - all right so now that we have the width
14:07 - and the height we want to set up the
14:08 - turtle screen so we're going to start by
14:10 - creating a screen so we're going to say
14:12 - screen is equal to and then
14:15 - turtle dot and then all capitals screen
14:18 - now what this is going to do is
14:20 - initialize a screen for us with
14:22 - this turtle module and then we can kind
14:24 - of set some properties of the screen
14:25 - the first of which is going to be the
14:27 - width and the height so now that i have
14:29 - my screen
14:30 - i'm going to say screen dot and then
14:32 - this is set
14:33 - up and here we're going to pass the
14:35 - width and the height
14:37 - so this method right here takes two
14:39 - arguments a width and a height of the
14:41 - screen
14:41 - and then it makes the screen that size
14:44 - so now that we have that let's run the
14:46 - program
14:47 - and let's see what we get so python
14:49 - turtle ray stop high
14:50 - and notice you can see a screen pops up
14:52 - here immediately
14:53 - and then it's asking me to input the
14:55 - number of racers so i can input say 5
14:58 - and then the program ends and the screen
14:59 - automatically closes
15:01 - great but when i do this notice that we
15:04 - get python turtle graphics as the name
15:06 - of our window
15:07 - we might not want that we might want to
15:09 - change the name so let's actually go
15:11 - ahead and do that
15:12 - so i'm going to close this i probably
15:14 - should have left the cmd open but that's
15:15 - fine
15:16 - and now i'm going to say screen dot
15:18 - title
15:19 - and in here i'm going to put whatever i
15:20 - want the name of that window to be
15:22 - so i'm going to make mine turtle racing
15:25 - exclamation point
15:26 - now let me go and open up my command
15:28 - prompt again uh you can kind of ignore
15:30 - what i'm typing i'm just trying to get
15:32 - to where my file is
15:33 - so python turtle race tutorial dot pi
15:36 - when i run this notice now the title has
15:38 - changed to turtle racing
15:40 - awesome so let's just input a number and
15:41 - end the program there let me make this
15:43 - guy a little bit smaller
15:45 - okay so now we've gotten the number of
15:47 - racers we have set up
15:48 - the turtle screen and what we want to do
15:51 - next is
15:52 - actually create our turtles we want to
15:54 - start racing them on
15:55 - the screen so i'm going to start by
15:56 - showing you kind of the basic commands
15:58 - of a turtle so how you kind of move a
16:00 - turtle around the screen some of the
16:01 - things that are associated with it
16:03 - and then we'll create a bunch of
16:04 - different turtles and then obviously
16:05 - erase them
16:06 - so what i'm actually going to do though
16:07 - is i'm going to take all of this code
16:09 - related to the turtle stuff so the
16:10 - screen setup the screen title all of
16:12 - that
16:13 - i'm actually going to move that to
16:14 - underneath where my racers are and in
16:16 - fact i'm actually going to make a new
16:17 - function i change my mind
16:19 - i'm going to call this a knit underscore
16:22 - turtle
16:22 - and inside of this function we're going
16:24 - to set up everything related
16:27 - to our kind of turtle screen now the
16:29 - reason for this again is that we just
16:30 - want to kind of structure our program
16:32 - nicely
16:32 - so we won't show the turtle screen until
16:35 - we call this a knit turtle function
16:37 - so after we get the number of racers
16:39 - then we can pop up the turtle screen
16:41 - because i don't really want it to be
16:42 - shown until we've picked the number of
16:44 - turtle erasers that we have
16:45 - so after we get the number of racers we
16:47 - can say a knit turtle
16:48 - that will just run all of the code in
16:50 - here so we'll set up our turtle screen
16:52 - so let's actually go ahead and run this
16:54 - and let's see what happens notice that
16:55 - the turtle screen hasn't popped up this
16:57 - time
16:57 - but then when we type 4 it kind of pops
16:59 - up really quickly and then it closed
17:01 - because as soon as we pop it up the
17:03 - program ends there's nothing more that
17:04 - we need to do
17:05 - we're on a good start now that's kind of
17:06 - what we wanted to do okay so now i'm
17:08 - going to show you how we can kind of
17:09 - move a turtle around the screen
17:11 - so to do this you need to start by
17:13 - creating a new turtle object so to
17:15 - create a new turtle object
17:17 - what you need to do is say and in this
17:19 - case we'll just say racer
17:20 - is equal to and then turtle dot and then
17:23 - with a capital t
17:25 - this time turtle so what this will do is
17:27 - actually create kind of a drawing object
17:29 - for you
17:30 - on the canvas that you saw that white
17:31 - canvas that popped up and then what you
17:33 - can do with this
17:34 - is you can move it around so i'm going
17:35 - to say eraser dot
17:37 - and then just to show you one method you
17:38 - can use forward i'm going to move it
17:40 - forward by 100 pixels
17:43 - now i'm going to do something here that
17:44 - may seem a little bit confusing but i'm
17:46 - going to import a module called
17:48 - time at the top of my program and down
17:51 - here this is really the only new code
17:52 - that we've added
17:53 - right after i move my racer forward by
17:55 - 100 pixels
17:56 - i'm going to say time dot sleep and then
17:59 - five
18:00 - what this will do is pause the program
18:02 - for five seconds so that after we move
18:04 - our turtle we have a second to actually
18:05 - see where it went we don't just
18:06 - immediately close the turtle window
18:08 - although we may or may not do that um
18:10 - immediately close the turtle window
18:12 - anyways
18:12 - we'll see here after this happens so
18:14 - let's run
18:15 - this code right now and let's see what
18:18 - happens we'll say
18:18 - 4 and then notice it opens this turtle
18:21 - window and then it moves this kind of
18:22 - pointer over here
18:24 - by 100 pixels and then it closes
18:26 - obviously because now
18:27 - we are no longer sleeping so hopefully
18:29 - that kind of made sense but
18:31 - you would have seen uh let's run this
18:32 - one more time that it opens up the
18:35 - window it moves our little pointer here
18:36 - which funny enough
18:37 - isn't actually a turtle right over 100
18:39 - pixels and then it closes
18:41 - so this is one of the methods you can
18:43 - use with your turtle
18:45 - the turtle will start in the middle of
18:47 - the screen the turtle is really that
18:48 - drawing kind of arrow that you saw
18:50 - and every single time you move it it
18:52 - will create a line so you don't only
18:54 - have to move it forwards
18:55 - you can move it backwards and you can
18:56 - also change its direction so you can set
18:58 - it to move
18:59 - maybe in 90 degrees you can set it to go
19:01 - left you can set to go north east west
19:03 - whatever direction system you want to
19:04 - use you can set it to go in that
19:06 - direction so i can say racer
19:08 - dot left and then i can make it go left
19:10 - by 90 degrees
19:11 - and then i can say racer dot forward
19:14 - move it forward 100 again and then i can
19:16 - say racer
19:17 - dot and then let's just go left we can
19:20 - go left another 90 degrees
19:22 - and then we can say racer dot backwards
19:26 - is it backward or backwards well i guess
19:27 - we'll see when we run this
19:29 - and then by 100 pixels so let me run the
19:31 - code now
19:32 - python troll erase stop hi and there we
19:35 - go oh so it's saying turtle
19:37 - object has no attribute backwards that
19:39 - is because
19:41 - this is backward not backwards with the
19:43 - s so just don't add the s for the plural
19:45 - there
19:46 - and let's give this a shot now so python
19:49 - turtle racer
19:50 - and there you go that's what happened
19:52 - see we went
19:53 - right oh sorry it went straight then we
19:55 - went left then we turned
19:57 - uh left again but then instead of going
19:59 - forward we went backwards and so we went
20:01 - the other direction so you can kind of
20:03 - mess around with these uh forward
20:04 - left there's also right and inside of
20:08 - these methods here what you're placing
20:10 - is at least inside of the right method
20:12 - is the
20:12 - angle at which you want to turn the
20:14 - turtle so if you wanted to turn 90
20:16 - degrees you put 90. if you want to turn
20:17 - 180 degrees you put that if you want to
20:19 - turn 45
20:20 - degrees you put 45 i'll let you guys
20:22 - mess with that on your own
20:23 - and then this the number of pixels is
20:26 - well how far you're moving the actual
20:28 - turtle
20:28 - so when we open up the turtle window and
20:30 - let me time that sleep
20:32 - for say 20 seconds here just so we have
20:34 - lots of room
20:35 - so i can explain kind of the coordinate
20:37 - system so let's run this
20:39 - let's open up the turtle window all
20:41 - right so this turtle window
20:42 - is 500 by 500 pixels so the height is
20:45 - 500 pixels
20:46 - and the width is 500 pixels now the very
20:49 - middle of this turtle canvas
20:50 - it has the position of zero zero so the
20:53 - top of the canvas has a position of 250
20:56 - the bottom of the canvas has a position
20:58 - of negative 250
20:59 - the left of the canvas is negative 250
21:02 - and the right of the canvas is 250.
21:04 - let me open this up again the way this
21:07 - works right is that if the middle is 0
21:08 - 0 and we have a height of 500 then the
21:12 - top
21:12 - y position on our canvas when we're
21:14 - talking about just a standard 2d graph
21:16 - is going to be 250 whereas the bottom y
21:19 - position is going to be negative 250.
21:21 - so as you increase your y you go up as
21:24 - you decrease your y you go
21:25 - down as you decrease your x you go to
21:27 - the left as you increase your x you go
21:29 - to the right hopefully that makes sense
21:31 - and again negative 250 and
21:33 - positive 250 the reason that's the top
21:35 - and the bottom is because the height is
21:37 - 500 i just divided 500 by two
21:39 - and then applied a negative to one of
21:41 - the bounds hopefully that's making sense
21:43 - but that is the coordinate system
21:44 - the reason that's important is because
21:46 - when i say i move 100 pixels
21:48 - uh well we need to understand where
21:50 - that's actually going to move us to and
21:51 - what scale this is on so when i'm moving
21:53 - 100 pixels
21:54 - i'm really moving one-fifth of either
21:56 - the height or the width of the screen
21:57 - depending on the direction that i'm
21:59 - moving
21:59 - in so we're going to erase our turtles
22:01 - going up the screen but you could
22:02 - totally erase them going to the right
22:04 - going to the left whatever direction you
22:06 - want
22:06 - now a few more methods that are useful
22:08 - when we're talking about turtles here
22:09 - are things like the actual icon that's
22:12 - representing the turtle
22:13 - as well as the speed of our turtle so
22:15 - what i can do here is i can change my
22:16 - racer speed so i can say racer.speed
22:19 - and then set this equal to say 2. now
22:22 - let me actually check what the racer
22:23 - speeds are
22:24 - okay so i just checked what the
22:25 - different turtle speeds are here
22:27 - you can see that these are the potential
22:29 - speeds we have so we can insert a speed
22:31 - between 0 to 10 and let me just show you
22:33 - this method again we have
22:34 - the turtle object that we've created dot
22:36 - speed so we can set the speed of it to
22:38 - be slow or fast
22:40 - because you kind of saw how it's moving
22:41 - around the screen right so if we go here
22:43 - oops let's go back to google we can see
22:45 - 0 to 10
22:47 - where 0 actually means we're going the
22:49 - absolute fastest we can possibly go
22:51 - 1 is the slowest and then 10 is fast so
22:54 - really it's one to ten
22:55 - and then if you input zero it's saying
22:56 - just go as fast as the turtle can
22:58 - possibly move
22:59 - so let's try putting in a value of say
23:01 - two or even one and let's see how slow
23:03 - this turtle gets when i change its speed
23:06 - so i change its speed let's run and now
23:09 - notice it's moving much slower than it
23:11 - was
23:11 - before there we go that is our turtle
23:15 - oh yes it's going right now because i
23:16 - put that right 90 degrees awesome so
23:18 - let's wait for this to close
23:20 - and then i will show you that we can
23:21 - change say the color of the turtle and
23:23 - we can change what the actual icon looks
23:25 - like and all of that in fact i'm not
23:26 - going to wait for it let's just do it
23:27 - now
23:28 - so if i want to change the icon of the
23:30 - turtle what i can do is say racer
23:31 - dot and then i believe i'm actually
23:34 - going to have to look at my other screen
23:35 - here for a little
23:36 - cheat sheet this is the shape that's
23:38 - what it's called
23:39 - so i've been referring to this as the
23:40 - icon it's actually the thing you're
23:42 - seeing on the screen
23:43 - but there's a bunch of different shapes
23:44 - that you can choose for your turtle
23:46 - so i want to make mine turtle but some
23:48 - other valid ones i think
23:50 - are circle we have
23:53 - arrow and then you're welcome to look up
23:55 - the other possible shapes that you have
23:56 - for turtle i can't remember
23:57 - all of them but i know that at minimum
23:59 - two of them that exist are turtle
24:01 - and circle and then obviously there is
24:04 - arrow as well so sorry those are the
24:06 - three that i know that exist
24:08 - okay so let's change this to a turtle
24:09 - now and let's see what happens this time
24:11 - when i run my program i'm going to
24:12 - remove the sleep
24:14 - because i've slowed down the turtle so
24:15 - hopefully we have enough time to see it
24:17 - now
24:18 - so let's run this enter some number and
24:20 - now notice we get an
24:21 - actual turtle moving around the screen
24:24 - awesome so that is good
24:25 - now i will show you how we can change
24:27 - the uh color of the turtle
24:29 - so to change the colors pretty
24:30 - straightforward you can say racer.color
24:32 - and then inside of here you can put a
24:34 - string that represents the color you
24:35 - want to change this to
24:36 - so there's like a ton of different
24:37 - possible colors here i won't go through
24:39 - them all but for example
24:40 - one is scion we could do red we could do
24:43 - green we can do blue we can do
24:47 - yellow black orange so on and so forth
24:49 - so let's just change this to scion
24:51 - so let's run our code here and notice
24:55 - that now we get a cyan turtle
24:57 - and that the line that it has is psion
24:59 - as well now there's a ton of other stuff
25:00 - you can do with turtles
25:01 - if you want to see all of that i would
25:03 - just recommend you just look up turtle
25:05 - python like that and then you can see if
25:08 - you go to the turtle documentation here
25:11 - that there's a whole list of all of the
25:12 - possible stuff that you can do
25:14 - with your turtle so i'll be showing you
25:15 - some of this but i won't obviously go
25:17 - through all of it
25:18 - okay so the next thing to show you is
25:20 - what is called turtle.pen
25:22 - up so whenever the turtle's moving
25:24 - around the screen
25:25 - you notice it was kind of drawing that
25:27 - line right and we're calling that the
25:28 - pen
25:29 - so as the turtle moves it's kind of a
25:31 - pen and just drawing this line on the
25:33 - screen
25:33 - now if we want it to not draw the line
25:35 - but we still want it to move we can
25:37 - bring its
25:37 - pen up so we can say racer dot pen up
25:42 - like that and now you're going to notice
25:44 - when i run this program after i've moved
25:46 - the pen
25:46 - up is that as we move this turtle around
25:49 - the screen
25:50 - no line is being drawn right because
25:51 - it's pen is up so what i can do is i can
25:53 - move the turtle
25:54 - with its pen up i can put its pen down
25:56 - and then i can continue drawing so let's
25:58 - copy this line
25:59 - let's move the turtle uh forward by 100
26:02 - left by 90
26:03 - and then let's put its pen down so we're
26:05 - going to say eraser
26:07 - dot pen down so let's do this now
26:10 - python here and now notice that as soon
26:13 - as it turns that corner then the pen
26:14 - goes down
26:15 - so all this stuff i'm showing you you
26:17 - can change at any point in time you
26:18 - don't have to change it before the
26:20 - turtle starts moving or something like
26:21 - that
26:21 - all right so now i've showed you pretty
26:22 - much everything i need to in terms of
26:24 - the different methods for the turtle
26:26 - object
26:26 - just keep in mind you can make as many
26:28 - turtle objects as you want so i said
26:29 - racer equals turtle.turtle
26:31 - i can make a second uh turtle right it's
26:33 - a racer two and then i can move these
26:35 - turtles in different directions so just
26:36 - to give you a quick example we can copy
26:38 - all of this and then we can just change
26:41 - this to be
26:42 - say racer2 and we'll just make racer2 a
26:45 - different color so instead of psion
26:47 - we'll make it
26:47 - say brown like that maybe we'll make it
26:50 - speed a bit faster
26:51 - and then we'll change it so it goes
26:53 - forward like 150 just so you can see the
26:55 - difference in these two terms
26:57 - so let's change that to be 150.
27:01 - again notice i just had racer 2. we can
27:03 - kind of copy this and put it down here
27:05 - to separate these things out all right
27:07 - so let's try this now so let's go python
27:09 - turtle racetutorial.pie
27:11 - uh let's enter a number of racers three
27:13 - and then notice the first racer is going
27:15 - to move around
27:15 - and then our second guy kind of start
27:17 - moving really quickly right because we
27:18 - wrote all of this code
27:20 - after we wrote this code so i'm going to
27:22 - delete all of this just wanted to show
27:24 - you that
27:25 - and now what we are going to do is we
27:27 - are going to pick the colors of the
27:28 - different racers that we have so once we
27:30 - know how many racers we have
27:32 - we need to kind of create all of these
27:34 - turtle objects
27:35 - and we need to pick their colors so i'm
27:37 - going to create a list of colors up here
27:39 - in all capital and i'm just going to
27:41 - type out a bunch of them i have a list
27:42 - on my other monitor in case you see me
27:44 - looking over there so i'm going to say
27:45 - red
27:46 - we're going to say green we'll say blue
27:50 - uh we'll say orange we have
27:53 - if i can get my cursor here correctly
27:56 - yellow
27:57 - we have what's another one black
28:01 - purple we then have pink
28:04 - and did i do yellow yes i did what's the
28:06 - last one we have
28:08 - brown and cyan okay brown and then
28:11 - scion now note that there is a lot more
28:13 - colors than this i'm just doing 10 for
28:14 - right now
28:15 - so we can have at most 10 turtles so now
28:18 - that we have all of these colors
28:20 - we kind of need to pick after we've
28:22 - gotten our number of racers
28:24 - what turtle colors we actually want to
28:26 - use so i'm going to show you a cool way
28:27 - that we can do this so we can randomly
28:29 - select
28:30 - a bunch of colors from this color list
28:32 - that are unique so at the top of my
28:34 - program
28:34 - i'm going to import random all of these
28:38 - modules are built into python you don't
28:39 - need to install them or anything like
28:40 - that
28:41 - and then down here what i'm going to do
28:43 - is i'm going to say random
28:45 - dot shuffle and i'm going to shuffle my
28:47 - list of colors so all
28:49 - this capital list right here now what
28:51 - this is going to do is it's going to
28:53 - take the list and just
28:54 - randomize all of the items inside of it
28:56 - so i have no idea where these items are
28:57 - going to go but all of the items that i
28:59 - have here will just be kind of randomly
29:00 - placed around in the list
29:02 - then what i'm going to do is i'm going
29:04 - to select the first
29:05 - number of racers item from this list
29:08 - that
29:09 - that are there we'll use that as our
29:10 - color so i'm going to say colors
29:12 - is equal to and then colors and then
29:15 - this is going to be a slice
29:16 - up to the number of racers that we have
29:18 - so let me just quickly explain this
29:20 - we've gotten the number of racers we've
29:22 - initialized the turtle
29:23 - we're shuffling that colors list so just
29:25 - randomizing the order of all the
29:26 - elements there
29:27 - and then what this does is this gives us
29:30 - the first
29:31 - racers item from the list so if we had
29:34 - a list say one two three comma four and
29:36 - then we put this little slice operator
29:38 - this is what it's called when you use
29:39 - the colon
29:40 - and we said up to say 2 what this would
29:43 - give me is the first two elements in
29:44 - this list so i would get a new list
29:47 - that looks like 1 comma 2. now if i did
29:50 - the slice of
29:51 - say 3 this would give me the first three
29:53 - elements so one
29:54 - two three that's kind of the basics of a
29:57 - slice
29:57 - so the reason we're doing that is we're
29:58 - randomizing the list and then just
30:00 - taking the first
30:01 - say number of elements that number is
30:03 - equal to whatever the number is the user
30:05 - types in
30:06 - so now let me show you this we're going
30:07 - to print
30:09 - the colors after the user types in the
30:12 - number of turtles they want to race
30:14 - so let's do this python turtle race
30:16 - let's in insert five and then notice it
30:18 - kind of popped open that turtle window
30:20 - closed it and then it printed yellow
30:22 - purple green orange brown now if i do
30:23 - this again and i type five
30:25 - you're going to notice we get different
30:26 - colors right and they're in a different
30:27 - order so black red orange brown
30:29 - scion now this 100 will always select
30:32 - unique colors for us
30:34 - so we'll never have turtles that have
30:36 - the same color all right
30:38 - now that we have all of the colors we
30:40 - want to create all of these turtles
30:42 - so we're going to make a new function
30:43 - here we're going to say define and then
30:45 - create
30:45 - underscore turtles now inside of here
30:48 - we're going to create a list of turtles
30:51 - and then we're going to kind of place
30:52 - them on the screen in their starting
30:54 - position
30:55 - so ideally we want to have all of the
30:57 - turtles evenly spaced out at the bottom
30:59 - of the screen and kind of pointing
31:00 - upwards
31:01 - ready to start racing so let me show you
31:03 - how we do that well the first thing that
31:04 - we need to do here is we need to
31:06 - determine
31:06 - what colors our turtles are going to be
31:08 - and how many turtles we're going to have
31:10 - so this function as a parameter is going
31:12 - to take in
31:13 - colors so we are going to pass this
31:15 - function when we actually decide to call
31:17 - it the number of colors that we have
31:19 - and then what that's going to are not
31:21 - the numbers sorry just the colors that
31:22 - we've actually selected
31:23 - and by having this list here we will
31:25 - also know how many turtles we have
31:27 - because the number of elements in this
31:29 - list
31:29 - will tell us the number of turtles that
31:30 - we want to race so now what we're going
31:32 - to do is we're going to say that
31:34 - turtles is equal to an empty list then
31:36 - we're going to
31:37 - loop through all of the colors that we
31:38 - have and for every single color we're
31:40 - going to create a turtle and add it into
31:42 - the list
31:43 - the reason i'm creating a list is
31:45 - because i don't know how many turtles
31:46 - i'm going to have so i can't just define
31:48 - variables with like
31:49 - you know i can't find four variables for
31:51 - four different turtles or five variables
31:52 - for five different turtles i need to
31:54 - kind of dynamically create these turtles
31:56 - because again i don't know how many i'm
31:57 - gonna have so i'm gonna loop through now
31:59 - all of my colors i'm going to say 4i
32:01 - comma and then color in enumerate and
32:04 - this is going to be
32:05 - colors and what enumerate does is it
32:07 - gives me the index as well as the value
32:10 - of all of the elements in colors
32:12 - so if i'm looping through colors let's
32:13 - say like red and then
32:15 - green then what's going to happen is i'm
32:17 - on my first for loop iteration i will be
32:19 - equal to zero
32:20 - that's the position of this color color
32:22 - will be equal to red
32:24 - and that's great then on my next
32:25 - iteration i will be equal to one and
32:27 - color will be equal to green and if i
32:29 - had one more iteration say this was blue
32:31 - then i would be equal to two because
32:33 - this is the third element where the
32:34 - second index
32:35 - slash position and then the color will
32:37 - be equal to blue
32:39 - so that is what enumerate does gives us
32:40 - both the index and the value
32:43 - now what i want to do is create a turtle
32:45 - so i'm going to say racer is equal to
32:47 - and notice you can name these variables
32:48 - whatever you want and i'm going to make
32:50 - this equal to
32:51 - turtle.turtle just like we saw
32:53 - previously
32:54 - and then immediately i'm going to change
32:55 - the color of this turtle to be whatever
32:57 - color this is
32:58 - so i'm going to say racer dot color and
33:01 - i'm going to make this
33:02 - oops if my sublime text stops crashing
33:05 - okay
33:06 - it's crashing so i'll be back after this
33:07 - stops crashing alright so i am back that
33:09 - was really annoying sublime text just
33:11 - crashed on me but i have eraser.color
33:14 - and i'm going to set this color to be
33:15 - equal to color
33:16 - the reason i'm setting it equal to color
33:18 - is because this will be a string
33:19 - this string will come from this list of
33:21 - colors right here and so every one of
33:23 - our racers will be a different color
33:25 - then what i need to do is set a few
33:26 - other things i want to set the shape
33:28 - so i'm going to say racer.shape and this
33:31 - is equal to a turtle
33:32 - then what i want to do is place this
33:35 - racer in its starting position
33:37 - now before i do that i'm going to show
33:38 - you where they are placed initially
33:40 - but i also want to turn these racers so
33:43 - i want to say eraser.left
33:45 - by 90 degrees now the reason i'm doing
33:47 - this is because by default the
33:49 - kind of arrows or whatever are pointing
33:51 - to the right
33:52 - so if i want them to point upwards
33:53 - because i want to race my racers upwards
33:56 - and my turtles upwards
33:57 - then i need to turn them left by 90
33:59 - degrees so i'm going to take my eraser
34:01 - or
34:01 - make my eraser which is just a turtle
34:03 - i'm going to set its color i'm going to
34:04 - set it shape
34:05 - i'm going to set it's kind of heading so
34:06 - it goes and is facing upwards
34:08 - and then i'm going to add it to this
34:09 - list so i'm going to say turtles
34:11 - dot append and then i will append my
34:14 - eraser
34:15 - this way i have access to all of my
34:17 - turtles and then later on i can actually
34:18 - say move these turtles forward right and
34:20 - we'll move them by a random amount
34:22 - and that will kind of simulate these
34:23 - turtles being raised now i'm just
34:25 - looking at my other screen here
34:26 - one more thing that i'm going to do here
34:28 - is i'm actually going to put my racers
34:30 - pen
34:31 - up so i'm going to say racer dot pen up
34:33 - i'm then immediately going to say racer
34:35 - dot pen
34:36 - down and inside of here i'm going to set
34:39 - the position of my eraser
34:40 - so we'll just say set pause and we'll do
34:42 - that in one second
34:44 - all right so now let's run this code
34:46 - here so python turtle racetutorial.pi
34:49 - let's insert our number let's say three
34:51 - and what happened ah well we need to
34:53 - call this function if we want to see
34:54 - anything happening
34:55 - so after we get our colors let's call
34:58 - createturtles
35:00 - and let's pass our colors so now we'll
35:02 - have all the colors here
35:03 - we'll loop through them and create our
35:04 - races for each
35:06 - all right so let's run this python
35:08 - turtle race let's go five
35:10 - and notice when i do this it kind of
35:11 - spins up five turtles
35:13 - they you know spin to the left they're
35:14 - all different colors and then it's done
35:16 - so obviously this is not ideal right all
35:18 - of my turtles start in the middle of the
35:19 - screen
35:20 - and so i need to move them so they are
35:22 - at the bottom of the screen
35:23 - now i could move them like backwards
35:25 - turn them left move them to their
35:27 - correct position
35:28 - but that's kind of a pain so there's
35:30 - this method for our turtles called
35:32 - set position uh actually let me make
35:34 - sure it's called that yes it's called
35:35 - set pause so racer dot set
35:37 - pause and this takes an x and y value
35:40 - and will
35:40 - set the position of your turtle to well
35:43 - this position
35:44 - so this is why i'm putting the pen up
35:46 - then i'm going to set the position
35:47 - then i'm going to put the pen down so
35:49 - when i move this turtle to its position
35:51 - i don't draw a line from the middle of
35:53 - the screen to wherever it goes
35:54 - because that's just not optimal it's not
35:56 - ideal that's not what we want to do here
35:58 - so inside of set paws i need to choose
36:00 - an x and a y
36:01 - value for my turtle now the y value is
36:04 - pretty easy because all of my turtles
36:05 - will start at the same y
36:07 - and then they'll kind of increase their
36:08 - y as they race upwards so we know what
36:10 - the y value will be or we can just pick
36:12 - some random y value
36:14 - but what is the x value going to be well
36:17 - i want to space these turtles out
36:18 - completely evenly right so let me open
36:20 - up my kind of windows ink pad here
36:23 - where even is windows ink okay so i've
36:27 - just opened up paint here i
36:28 - unfortunately couldn't find the windows
36:30 - ink thing that i normally use i don't
36:31 - know where they would have
36:32 - hid it from me but anyways apparently
36:33 - it's gone so go easy on me i'm just
36:35 - using my mouse but i'm going to
36:36 - illustrate what we're going to do here
36:37 - so we have our canvas right
36:39 - now our canvas is of size 500 by 500 but
36:42 - to make math a bit easier we're going to
36:43 - say it's
36:44 - 400 by 400
36:47 - again my mouse is really hard to draw
36:49 - with okay so 400 by 400
36:51 - now we want all of our turtles to kind
36:53 - of be placed near the bottom of the
36:54 - screen
36:55 - so to pick this position is pretty easy
36:57 - we can kind of just take like the height
36:59 - of the screen
37:00 - we can divide it by two we can add a
37:02 - small value to it and then we'll say
37:03 - alright well that's where we want to
37:04 - place the turtles
37:05 - at that negative coordinate because
37:07 - right here in the middle is
37:09 - 0 0 right so as we go down this is
37:11 - negative so if we place that negative
37:12 - 200 they'd be like right at the bottom
37:14 - of the screen
37:15 - so we can move it up like 10 pixels and
37:17 - then that would bring us to this kind of
37:18 - red line that we have right here
37:20 - now the question becomes though what are
37:22 - the x values of our turtles so obviously
37:24 - we want our turtles to be kind of spaced
37:26 - out if we have two turtles we probably
37:28 - want them somewhere like here
37:30 - and here right want them equal distance
37:32 - from each other and then equal distance
37:34 - from the edge
37:35 - of the screen now i know this isn't
37:37 - exactly equal distance
37:39 - but hopefully you're kind of getting the
37:40 - idea if we have three turtles we want
37:41 - one guy in the middle
37:43 - one guy here and one guy here this way
37:46 - they're equal distance from the edge of
37:48 - the screen
37:49 - and from each other so how do we figure
37:51 - out the x positions
37:53 - well what we actually need to do is we
37:55 - need to figure out first of all the
37:56 - spacing between our turtles
37:58 - then what we can do is we can start our
37:59 - first turtle at whatever the spacing
38:02 - amount is
38:02 - we can then add whatever the next
38:04 - spacing is toward our next turtle
38:07 - and then our next spacing and so on and
38:09 - so forth
38:10 - so how do we figure out the spacing
38:12 - between the turtles well we actually
38:14 - take
38:14 - this number right here sorry this number
38:16 - right here which is the width of our
38:18 - screen
38:18 - and we divide it by the number of
38:20 - turtles that we have plus one
38:22 - so i want you to see this example if we
38:25 - take 400
38:26 - and we have four turtles a lot of people
38:29 - would say well the spacing between each
38:30 - turtle should be
38:31 - 100 pixels now the reason why that would
38:34 - actually be incorrect is because that
38:35 - would assume the first turtle starts at
38:37 - the far
38:38 - left hand side of the screen so if i put
38:41 - my first turtle
38:42 - right here and then i go 100 pixels over
38:46 - my next turtle is at position 100 right
38:50 - if we're talking about the x
38:51 - then my next guy comes over here and
38:53 - he's at 200
38:55 - and then my next guy comes here and he's
38:57 - at 300. it's
38:59 - really hard to do a three clearly this
39:01 - is my attempt at a three
39:03 - okay so 100 200 300 and then this first
39:06 - guy's obviously at zero
39:07 - so we don't want that we want to kind of
39:09 - shift this whole line over so there's
39:11 - equal distance between all of the
39:12 - turtles and the edge of the screen
39:14 - so what we really need to do is we need
39:16 - to divide this number by five
39:17 - and then we need to start our turtle at
39:19 - the first spacing position
39:22 - so if we take 400 and we divide this by
39:24 - five oh god this is testing my
39:26 - math skills 400 divided by 5 should
39:30 - give us a value of 80. yeah i think 80
39:33 - is correct
39:34 - 8 times 5 yeah 40 400 yeah okay 80 is
39:37 - correct so now if we do this at 80 let
39:39 - me kind of
39:40 - erase all of this here we'll say that
39:42 - our first turtle
39:43 - gets placed at position 80. so the first
39:46 - guy goes
39:47 - right here uh should i even attempt to
39:49 - do an eight okay we have eight
39:52 - zero then our next guy is going to go at
39:55 - 160 and then
39:58 - we'll move over again and then our next
40:00 - guy is going to go
40:01 - at 240.
40:04 - our next guy will go at 320
40:09 - and then this will be perfect we'll have
40:10 - our four turtles they'll be equal
40:12 - distance from the edge of the screen and
40:13 - equidistance from
40:14 - each other now i know this seems like
40:16 - they're not equal distance because i've
40:17 - kind of drawn this not to scale but
40:19 - that's the idea behind this so hopefully
40:21 - this long explanation
40:22 - gave you the idea of what we're doing
40:24 - we're going to divide the value that we
40:25 - have here by the number of turtles plus
40:27 - one
40:28 - then we're going to place the first
40:29 - turtle at spacing
40:31 - position so whatever the spacing is so
40:33 - starting at 80 the rest of them will go
40:35 - up
40:35 - by the increment of spacing every time
40:38 - so we'll leave that kind of open in the
40:39 - background in case you need to refer to
40:40 - it again
40:41 - but this means we are going to set the
40:43 - position and we need to figure out the
40:45 - turtle spacing so i'm going to say
40:47 - spacing x
40:48 - is equal to and then the len of colors
40:51 - this is the number of turtles that we
40:52 - have right
40:53 - plus one we're going to put these in
40:54 - parentheses and we're going to start
40:57 - by dividing the width by 2. so we're
41:00 - going to say width
41:01 - divided by 2 sorry not width divided by
41:03 - 2 with divided by the
41:05 - length of colors plus one so whatever
41:06 - our width is we divide it by the number
41:08 - of turtles plus one which is really just
41:10 - the number of colors that were given to
41:11 - us
41:12 - and there we go so now where do we want
41:14 - to start placing our turtles well what i
41:16 - was showing you before is i was starting
41:17 - replacing at 0 80 so on and so forth
41:20 - the only issue with that is that when
41:21 - we're at the left so we're to the left
41:23 - of the middle of the screen we're at a
41:25 - negative coordinate right
41:27 - so really when we're drawing the kind of
41:28 - coordinate axes here
41:30 - this is zero zero so as we're over here
41:33 - we're in the negatives
41:34 - so that's fine all that means is we need
41:36 - to add the negative width over 2
41:39 - as our starting position to all of these
41:41 - right here
41:42 - so the first position for our turtle
41:44 - will actually be at negative width over
41:46 - 2
41:46 - plus this value right here the reason
41:49 - that will work
41:51 - is because we will subtract this by
41:53 - negative
41:54 - 200 and then negative 200 plus 80
41:58 - that will be equal to what is this 120
42:01 - negative 120
42:02 - then we will go and be equal to negative
42:04 - 40 then we will be equal to 40
42:06 - then we will be equal to what's 80 plus
42:09 - 40 120
42:10 - and that will work and that will still
42:12 - give us the equal distance and it will
42:13 - just kind of translate everything over
42:15 - to the left
42:16 - which is what we want it to do so
42:18 - hopefully that's making sense
42:19 - we just need to account for the negative
42:20 - coordinate system so we're going to set
42:22 - position
42:23 - at negative width over two and then
42:25 - we're going to
42:26 - add to this i plus
42:29 - one let's guess why we need to do that
42:31 - in a second multiplied by
42:33 - and then the spacing x
42:36 - so this will be our x position and our y
42:38 - position will be equal to
42:40 - negative height divided by two plus 20
42:43 - pixels now this
42:44 - is kind of an arbitrary value i'm
42:45 - deciding i'm saying we want to be 20
42:47 - pixels from the bottom of the screen so
42:48 - we take the negative height divided by 2
42:50 - and add
42:51 - 20. the reason we have the i plus 1 is
42:53 - because we start indexing at zero so the
42:55 - first color is zero
42:56 - really we wanna make that one because
42:58 - remember we want to place the first
42:59 - turtle
43:00 - at the first spacing position so
43:02 - negative width over two
43:03 - plus whatever the spacing x is that's
43:05 - where the first turtle should go
43:07 - then the second turtle well that will be
43:08 - a one so that will give us
43:10 - two so then we'll be at the second
43:11 - spacing position then the third
43:13 - then the fourth so on and so forth so
43:16 - this should place our turtles in the
43:17 - correct position
43:18 - let's see if it does so so let's run our
43:21 - code here
43:21 - and let's say we want to have eight
43:23 - turtles so we have eight turtles notice
43:26 - that now we're going to move the turtles
43:27 - they are perfectly aligned on the screen
43:29 - and they have equal spacing between each
43:31 - other and between the edges so that's
43:33 - awesome
43:33 - now all we need to do is just return
43:37 - our turtles like that and now that we've
43:39 - created the turtles we've placed the
43:41 - turtles we've picked our colors and the
43:42 - number of turtles that we have
43:43 - we can start finally erasing them on the
43:46 - screen all right so now what i'm going
43:47 - to do is create a new function
43:49 - i'm going to call this function race and
43:52 - this function race is going to take in
43:54 - our colors now i'm going to change kind
43:56 - of the flow of our program a little bit
43:57 - let me zoom out here so you guys can
43:59 - kind of read
43:59 - more of what's going on so right now
44:02 - what we're doing
44:02 - is we're getting the number of racers
44:04 - we're initializing our turtles we're
44:05 - picking the colors and then we're
44:07 - creating the turtles
44:08 - that's great but i don't want to create
44:10 - my turtles until i'm ready to erase them
44:12 - so i'm going to take this create turtles
44:14 - kind of function call here
44:16 - and i'm going to put that inside of this
44:18 - race function
44:19 - now the idea is that we're going to pass
44:20 - the colors to race and then
44:22 - race will create our turtles for us so
44:24 - we'll say turtles is equal to and then
44:26 - create turtles
44:28 - because this function returns the
44:30 - turtles so then inside of here we will
44:32 - create
44:33 - all the turtles using our colors and the
44:35 - reason this is important
44:36 - is because i want to know what color
44:39 - every turtle is and by having access to
44:41 - colors
44:41 - and turtles i can do that so now rather
44:44 - than calling create turtles down here
44:46 - we're just going to call
44:47 - race so we're going to say race and then
44:50 - colors and then this will create our
44:51 - turtles for us and then in here we can
44:53 - race them
44:54 - so after i create my turtles i want to
44:56 - start racing them i want to start moving
44:57 - them so i'm going to say well true
44:59 - and then i'm going to move all of my
45:01 - turtles one by one now the idea behind
45:03 - this is that we don't know how long it's
45:04 - going to take us for our turtles to get
45:06 - to the top of the screen
45:07 - so what i need to do is have a while
45:09 - loop because i need to keep moving them
45:10 - until eventually one gets to the top of
45:12 - the screen
45:13 - so inside of here i'm going to say four
45:14 - racer
45:16 - in turtles and then what i'm going to do
45:19 - is move
45:19 - this racer so i'm going to say racer
45:23 - dot and then move and sorry this
45:25 - shouldn't say move that's actually going
45:26 - to be racer dot
45:28 - forward because it's now facing the
45:30 - correct direction it's facing
45:32 - up so when i move it forward that's the
45:33 - direction it's going to go in so racer
45:35 - dot forward and then i want to move it
45:37 - forward a random amount so i'm going to
45:38 - say
45:39 - move is equal to or maybe distance is a
45:42 - better variable name
45:43 - distance is equal to random dot and then
45:46 - rand
45:47 - range and inside of here we're going to
45:49 - put the minimum and maximum amount we
45:51 - want the turtle to possibly move at
45:53 - every iteration
45:54 - so i'm going to say 1 comma 20 and what
45:56 - this means is every time i decide to
45:58 - move my turtle
45:59 - i'm going to move it by either 1 or 20
46:01 - pixels or sorry between 1 to 20 pixels
46:03 - so it will randomly generate a number
46:05 - that is between
46:06 - 1 and 20 and move the turtle that amount
46:09 - that's what rand range
46:10 - does so you can make these values
46:12 - whatever you want the larger you make
46:14 - this minimum value
46:15 - the faster your turtles are going to
46:16 - move and obviously the larger you make
46:18 - this one
46:19 - the higher probability your turtles are
46:20 - going to move faster but really this
46:22 - minimum value will dictate kind of the
46:24 - slowest speed of the slowest turtle
46:26 - right
46:27 - so just keep that in mind i like to keep
46:29 - it at one so that the race
46:30 - kind of looks like they're like kind of
46:31 - inching forward rather than having big
46:33 - jumps every single time
46:35 - anyways we're going to say racer.forward
46:38 - we're going to move it forward
46:39 - the distance now once we've moved our
46:41 - racer forward
46:42 - what we want to do is check if this
46:44 - racer is kind of past the finish line
46:46 - so the reason we're looping through all
46:47 - of the turtles first of all is because
46:48 - we need to move
46:49 - every single one of them we have a list
46:51 - of turtles right we've created all of
46:52 - these turtles here
46:53 - stored them in a list now we need to
46:55 - move every single one of them
46:57 - so we loop through all of them and then
46:58 - we move them now for every racer we
47:01 - check if it's past the finish line so
47:02 - i'm going to say
47:03 - x comma y is equal to racer.pause
47:07 - what this does is give me the position
47:09 - of this turtle
47:10 - so i know the x and the y i don't care
47:12 - about the x i just care about the y
47:14 - i'm going to say if y is greater than or
47:18 - equal to
47:19 - and then height and this is going to be
47:21 - divided by 2
47:23 - and we'll subtract 10 here then what i
47:26 - want to do is i want to say that this
47:27 - turtle crossed the finish line that it
47:29 - was the winner so to do that i'm just
47:31 - going to return
47:32 - this turtle's color so if this turtle
47:34 - passed the finish line then it is the
47:36 - winner
47:37 - what this function is going to do is
47:39 - it's just going to return
47:40 - whatever the winning turtle is it's
47:42 - going to return the color of the winning
47:43 - turtle
47:44 - so we'll say return and then here we
47:46 - will return and this is going to say
47:48 - colors at index i now this may be a bit
47:52 - confusing
47:52 - but the idea here and oops index i i
47:55 - can't even use that
47:56 - um okay i'm going to show you a
47:57 - different way to do this i thought i had
47:59 - coded this in a different way
48:00 - i'm going to say colors at and then this
48:02 - is going to say turtles
48:03 - dot index turtle
48:07 - so this may be a bit confusing if you
48:08 - guys haven't worked with lists before
48:10 - but this is the rationale we want to
48:12 - find the winner
48:13 - or sorry the winning turtle color want
48:16 - to know the color of the winning turn
48:18 - so to do that we need to access its
48:19 - color now i don't think there's a way to
48:21 - get the color of a turtle from the
48:23 - actual turtle object
48:24 - i may be wrong on that but all we have
48:26 - access to here is just the turtle right
48:28 - we have the turtle that we're moving
48:29 - that's all we have so this kind of
48:30 - turtle.turtle that's all we have
48:33 - so the question then becomes okay how do
48:34 - i find the color of it well i have the
48:36 - colors of all of my turtles here
48:38 - so what i can do is i can find which
48:41 - turtle
48:42 - or the index of the turtle that was the
48:44 - winner and then i can use that same
48:46 - index to figure out the color of it in
48:48 - this colors list
48:49 - so think of it this way if i have a list
48:51 - of colors i have like blue
48:54 - and red and then i have my two turtles
48:55 - right so let's just say i have turtle
48:58 - turtle one and i have turtle two
49:01 - well turtle 2 is at index
49:04 - 1 right so we have index 0 and index 1.
49:07 - so turtle 2 is at index 1.
49:09 - so if i can find the index of this
49:11 - turtle all i have to do is reference
49:13 - that same index in my colors list and
49:15 - that tells me the color of it
49:17 - right same thing for turtle one well
49:18 - turtle one's at index zero its color
49:20 - must be index zero in the colors list
49:23 - this expands with any length of turtles
49:25 - so what turtles.index does
49:27 - is notice this is the name of the list
49:29 - i'm then passing the turtle that i'm
49:30 - looking for the index of
49:32 - it tells me the index of this turtle so
49:34 - and sorry this should be changed
49:36 - actually to be racer that's my bad i
49:38 - was probably confusing you guys there
49:39 - but we have access to the turtle
49:42 - so we say turtles.index racer gives us
49:44 - the index of this turtle object in
49:46 - the turtles list we then use that same
49:49 - index on the colors list
49:50 - to reference the color of that turtle
49:52 - and we return it
49:54 - so not really much more i can explain
49:55 - there that's probably the best that i
49:56 - can do for that
49:57 - we're going to return the actual color
49:59 - now that we have the color
50:01 - down here we'll say winner equals race
50:05 - and then we can just print out winner
50:08 - the idea being that this function is
50:09 - only finished
50:10 - once we return this color so just in
50:14 - case you're aware or just in case you're
50:15 - unaware sorry in a while loop whenever
50:17 - you return
50:18 - something or just in a function in
50:19 - general as soon as a return statement
50:21 - happens
50:22 - the function immediately stops so even
50:23 - though this is inside of a while loop
50:25 - the while loop will stop running as soon
50:27 - as one of the turtles has one
50:29 - so let's just run this code let's just
50:30 - see if this works then i can explain to
50:32 - you some more kind of details about this
50:34 - so let's go here python turtle race
50:36 - let's go with five turtles
50:38 - so we're going to create our five
50:39 - turtles and then they're going to start
50:42 - racing so they kind of start racing up
50:44 - the screen notice that they're drawing
50:45 - every single time
50:46 - and then boom it says pink the reason it
50:48 - says pink is because if you saw
50:49 - pink was the first turtle to cross the
50:51 - finish line
50:53 - now it's worth noting here that there is
50:55 - a little bit of a bias
50:57 - in the uh the first turtle so the very
50:59 - first turtle
51:00 - has a very very small probability of
51:02 - finishing
51:03 - uh earlier than all the other turtles
51:04 - like it has a better chance of doing
51:07 - that in a sense
51:08 - because it's the first turtle that we
51:09 - move we have to move the turtles
51:11 - sequentially
51:12 - like we can't move all of them at the
51:13 - exact same time so we move the first
51:15 - hurdle then the second turtle then the
51:17 - third turtle then the fourth turtle we
51:18 - check if any of them are past the finish
51:20 - line
51:21 - whatever one crosses first we say that's
51:23 - the winner so it's just a higher
51:24 - probability that the very first turtle
51:26 - we move
51:26 - will finish first so the last turtle
51:29 - kind of has you know the least
51:30 - chance of winning but based on this
51:32 - randomness here
51:33 - uh it ends up kind of counteracting that
51:36 - in some type of sense so
51:37 - hopefully you get what i mean i'm not
51:39 - going to worry about that for this
51:40 - problem right here
51:41 - if you guys were concerned about the
51:42 - fact that one turtle has like a little
51:44 - bit of bias which it kind of does
51:46 - what you could do is you could see if
51:48 - one turtle crossed the finish line and
51:50 - then if a turtle crossed the finish line
51:52 - you could still move every other turtle
51:54 - and whatever turtle moved the furthest
51:55 - so it was like the furthest past the
51:57 - finish line
51:58 - that's the one that you would say would
51:59 - be the winner there's no way other
52:01 - other than that to really kind of fix
52:03 - this problem
52:04 - so anyways that is really all we need to
52:06 - do here like that
52:08 - that is it for this program so the last
52:09 - thing i'm going to do is i am going to
52:11 - print out
52:12 - in kind of a nicer way what the winning
52:14 - turtle is so i'm going to say
52:16 - the winner is the
52:19 - turtle with color colon
52:22 - then comma and i will say winner
52:26 - so that's all we'll do so now we just
52:27 - have a nicer kind of output message
52:29 - saying this was the winning turtle
52:30 - and then i'm gonna say time dot sleep
52:33 - and i'm gonna sleep for five seconds
52:35 - just so that we have a few seconds to
52:36 - actually see which turtle was the winner
52:38 - before we just go ahead and close the
52:40 - program so
52:41 - hopefully that's clear but yeah that's
52:43 - really all we need so let's run this
52:46 - let's go with 10 turtles this time and
52:48 - let's see what we get
52:50 - let's just enjoy the turtle racing show
52:56 - okay so they're going to race you're
52:58 - going to notice the more turtles you
52:59 - have kind of the slower they go
53:01 - just because we have to move every
53:02 - single turtle one at a time we can't
53:04 - move like a bunch of turtles
53:06 - you know like the more chills we have
53:07 - the more we have to move into the longer
53:08 - it takes to run that's what i'm trying
53:09 - to say
53:10 - but we saw that the winner is the turtle
53:11 - with color green let's run this one more
53:13 - time with two turtles
53:14 - and you'll see that it goes like way
53:15 - faster because it's just these two guys
53:17 - that need to move
53:18 - purple was the winner and then if we
53:20 - kind of go back into cmd it says the
53:21 - winner is
53:22 - the turtle with color purple awesome
53:25 - so i think that's really all i need to
53:27 - show you here now all of this code will
53:29 - be available to download from the
53:30 - description in case you got lost or
53:32 - something that's not working
53:33 - but hopefully i did a good job at
53:34 - explaining a lot of these concepts
53:36 - hopefully you guys kind of learned how
53:37 - you can lay out a
53:39 - i don't want to say large but medium
53:40 - sized python program that has more than
53:42 - just a few
53:43 - lines of code and you get the idea
53:45 - behind these functions right
53:46 - so now at this point if i want to go
53:48 - change something like say i want to
53:49 - change the width of my screen
53:50 - since i use this width variable
53:52 - everywhere in my program and everything
53:54 - i did was very dynamic right i had like
53:56 - height over two
53:57 - i had width over two if i change the
54:00 - width up here now
54:01 - everything will just work right like if
54:02 - i change this to 700 and i change the
54:04 - height to 600 doesn't even have to be
54:06 - square
54:07 - let's just run the program again let's
54:09 - go with six
54:10 - racers and it's still going to be evenly
54:12 - spaced out on the screen
54:14 - right just because the way we did this
54:15 - is everything was dynamic it used the
54:17 - variables
54:18 - and we set it up in a way where if we
54:19 - made any changes later on
54:21 - it wouldn't completely ruin or mess up
54:23 - our program and what does it say the
54:25 - winner is here the winner is turtle with
54:26 - color blue
54:27 - so just keep that in mind hopefully you
54:29 - appreciate that kind of detail in
54:31 - writing this code
54:32 - and same thing here even with like
54:33 - validating the input right we're gonna
54:35 - keep asking the user
54:36 - for a valid input until they give us
54:38 - something that's valid
54:39 - and then race uh we're using another
54:41 - function
54:42 - inside of this function we could have
54:44 - just took take uh took and taken
54:46 - whatever all of this code
54:48 - and placed it inside of here but if we
54:50 - did that then if we wanted to change
54:52 - the way that we were creating our
54:53 - turtles well we could do that but it
54:54 - would just be a little bit harder and if
54:56 - we wanted to say use this function
54:57 - anywhere else
54:58 - same thing just wouldn't work as well so
55:00 - this way it's really easy to see
55:02 - laid out very nicely and this is just a
55:04 - better style of coding
55:06 - than writing everything in one line
55:07 - right because we could have written this
55:08 - entire program
55:10 - in just one line like we didn't have to
55:11 - use any functions it could have just all
55:13 - been in the main line of the program
55:14 - but then it wouldn't be very clear to
55:16 - see what part of the program was doing
55:18 - what
55:19 - awesome so i hope you guys enjoyed if
55:20 - you did make sure to leave a like that's
55:22 - really all i have for you today so
55:24 - subscribe to the channel
55:25 - and i will see you guys in another
55:26 - youtube video
55:35 - you

Cleaned transcript:

hello everybody and welcome to a brand new youtube video so it's been a while since i've done a kind of beginner project something that really anyone can follow along with regardless of their background in python and so i wanted to do one for this video so what i'm going to be showing you how to do is actually create a graphical application so this is not just going to be text although it looks like that right now and what's going to happen is we're going to create a turtle racing program so essentially the user will be asked to decide how many turtles they would like to race based on their answer a screen will pop up as i will show you in one second and then it will race that many turtles by just randomly moving them on the screen now this is a great project to learn about how to build something a little bit bigger than a really simple hello world application i guarantee if you're new to python you're going to learn a ton here i purposely used a bunch of different syntax and functions and kind of showed you how we can lay out a relatively large program for beginners this is not a large program by any means in kind of a nice structured way where everything is just done in kind of the proper format so anyways let's go ahead and get started here i'm just going to show you a demo of what we're going to be building so it says welcome to turtle racing please enter the following information how many turtles would you like to race you can enter between two to eight turtles i'm going to select eight when i do this it's going to open up the turtle window this is built into python there's nothing fancy you need to install it's going to initialize all of our turtles and then it's going to start racing them on the screen so it looks like the red one is going to win here let's see and oh maybe not so it says here the winner of the race is pink and then it waits five seconds and then it stops now i will show you how we can run this multiple times if you'd like to do that that's the basics behind this program now let me show you one more time if i race say three turtles notice how they are evenly spaced out on the screen so i'm gonna be showing you how we can do that and there you go they race nice and it says the winner is orange awesome so let's dive into this video after a quick word from our sponsor before we get started i need to thank the sponsor of this video which is alco expert algo expert is the best platform to use from preparing for your software engineering coding interviews and has the highest quality coding interview practice questions with over 140 practice questions detailed solutions in nine of the most popular programming languages a featurepacked browserbased coding environment extensive test suites and conceptual overviews and code walkthroughs for each and every problem algo expert is the best resource to use to ace your coding interviews aligoexpert also has a data structures crash course coding interview assessments and a mock interviews feature i can highly recommend algo expert as a former customer myself and now an official instructor on the platform get started using algo expert today by clicking the link in the description and using the code tech with tim for a discount on the platform all right so let's get started by talking about what you're going to need to follow along with this tutorial you are going to need some type of code editor and an installation of python those are the only requirements here so if you have python already installed on your system which i'm assuming all of you do at this point in time then open up your favorite code editor it could be sublime text that's what i'm using right here or if you're not even sure what i'm showing you you've never seen this window before you don't even know what i mean by text editor just open up your standalone standard idle like this and for you to follow along with me here just go to file new file write all of your code in a file like this save it with some name it's very important that you do not name your file turtle do not name it turtle if you name it turtle you can potentially have some problems and you're going to go in here save this file as whatever you want that's not named turtle and save it in whatever location you want and then whenever you want to actually run your code when you're inside this file you can press the f5 key on your keyboard or you can go to run and then press run module and well that will run your python code now i'm going to be working in an editor called sublime text this is a free text editor i'll leave a link to it in the description what i've done here is i've created a new file it says turtle race tutorial dot pi and the way i'm going to be running my file is from my command line so i'm going to go to my cmd if you're on mac this would be your terminal i'm going to use the python command followed by the name of my file so in this case it's going to be turtle race and then tutorial dot pi and then this will actually run my file for me notice i've saved my file on the desktop that is why the path for my command prompt is on the desktop hopefully that gave you enough information so that you are confident to follow along if all of this makes no sense just open up idle and just write python code as how you normally write it you don't have to work in this text editor that i am here anyways let's go ahead and get started so the first thing that i want to do here is i want to ask my user to input the number of turtles that we are going to have so what i'm actually going to do here is i'm going to create a function if you've never seen a function before i'll explain them they're pretty straightforward but i'm going to say define and the name of this function is going to be get underscore number underscore of underscore and then we'll say racers like this or turtles whatever you want to call this and then inside of here this is where we are actually going to ask the user to insert the number of racers that they want to have now the reason you're going to see me kind of write things in this way in different functions and kind of different blocks is because it really separates out what every single aspect of our program is doing and it's just good practice when you're writing code to really have all of the different separate things happening kind of in different areas so later on if something goes wrong or you want to add something or change something it's really easy to do that you're not looking through a huge mess of code and well you'll see how this kind of evolves as we go through here so what i want to do is i want to ask the user for a number so i want them to insert a number between 2 and 10 and so i also need to validate that the number they're typing in is correct so what i'm going to say is racers is equal to zero and then i'm going to say wow true now the reason i have a while loop here is because i want to continue to ask the user to insert a number until they insert a valid number so if they insert something invalid then i'm going to keep asking them and say hey no that wasn't valid give me something that's valid because we can't start our program until we know how many turtles we're going to be racing so i start with racers equals zero i say well true now i'm going to use an input so i'm going to say racers is equal to and then input like this and i'm going to say enter the number of racers and then i will do kind of a little 2 to 10 thing here to indicate the fact that i would like them to type a number that is between 2 to 10. now you don't have to do it like this you can write whatever you want this is what i'm going to prompt the user with and then notice that here i've added a space so after my colon i have a space the reason i have a space is because the user starts typing immediately after this prompt so this text will be printed to the screen so i want to separate it from the colon so that it doesn't look like they're typing like right beside this line there's like a little bit of a space anyways what i'm now going to do is i'm going to check if this what they inputted is a number the reason i need to check if this is a number is if the user didn't input a number obviously that's invalid but also i want to convert what the user types in into a number if i can do so so in python by default when you use this input statement it's going to capture whatever the user types into the console and convert that into a string so we need to take that string and potentially convert that into an actual integer a numeric value so that we can use that in our program so i'm going to say if racers. and then is digit this is a method you can call on strings and this will tell you if the string is completely numeric or not so if the string is numeric then what that means i can do is i can convert this into an in so i can say int racers if you tried to just do this line without checking beforehand if it was numeric then this would crash the program because if you had a string that was typed in that was not numeric you say you try to convert say ins of tim to a int right you're trying to convert the string tim into an int this is inval that's going to crash you you can't do this so anyways let's move on now if this is not the case so if erasers are or if what the user in input sorry is not a digit then what we want to do is tell them hey this is invalid please try again right so i'm going to print and say input is not numeric dot dot try again exclamation point and then i'm going to say continue now what this continue does is immediately brings me back to the beginning of the wall so we don't really need this continue well we will based on what i write next but think of it this way as soon as we hit this statement it immediately jumps right back up to the top of the loop so anything below this had a print statement saying like print hi this print statement wouldn't run if we hit this continue before this print statement so that's why i have the continue here all right so if the racers is a digit so if what they inputted is a digit then we are going to convert it into an integer which is valid otherwise we'll tell them it's not numeric they need to try again and then we'll continue now if we make it past this so we don't hit this else and we did make this conversion now we want to check if this number is within the range of 2 and 10. so i'm going to say if 2 is less than or equal to racers less than or equal to 10 then what i will do is i will just return the racers like that otherwise i will tell them that this number is not valid so the idea here is i check if racers which is now a number that's why i wanted to convert it to a number so i could do this comparison is less than or equal to 2 or less than or equal to 10. so if it's within our range of 2 to 10 this is fine what i will do is return racers so whatever the user typed in we're going to return that from this function which means whatever called this function will now have access to it otherwise though if this was not valid what i want to do is i want to print number oops not in range 2 to 10 try again exclamation point and then i could put a continue here but there's really no need to do that because nothing comes after this continue in this while loop and so by default we will just go back up to the top the reason i have to continue here is because i don't want to check if the number that is not a number right so what the user typed in i don't want to check if that's between 2 to 10 because if i do that and we haven't converted this into a number we're going to get an error let's say you know what the user typed in again was tim i can't check if 2 is less than or equal to tim this is just undefined this operation makes no sense and so that is why i'm continuing to make sure if i don't get a valid number i don't do this comparison and crash my program all right so now we have this function so i'll show you how we can use this right we can just call the function so get number of racers and we can say something like racers is equal to get number of racers and then we can just print out racers down here now what will happen is all of the code that we wrote inside of here notice it's indented after the colon right uh it's going to run all this code when we call the function and then as soon as we hit this return statement what will happen is we will actually return back to where we called this function so back to this line and we will pass whatever the value of racers was so racers will be equal to down here whatever is returned from this line so whatever number the user typed in that was numeric and between two to ten then i'm going to print out those number of racers that the user typed in and that's kind of the start of our program then we've got a few more stuff a few more steps sorry to do after that so let's try running our program i'm going to say python turtle racetutorial.pi again if you're an idle just press f5 and come on enter it's just going to work okay something's wrong with my terminal python turtle racetutorial.pi okay enter number of racers 2 to 10. let's enter 5 and then it prints out 5. now let's try something involved let's try tim now it tells me input is not numeric try again let's try uh joe not numeric try again let's try 11. number is not in range let's try 10 boom that works we get 10. awesome so this is indeed working we just did a few tests here and you can see that down here we are getting access to whatever this function returned so now that we have the number of racers what we want to do next is actually set up our turtle screen so i will show you what i mean by that but let's start by importing the internal module so the eternal module is built into python and this allows you to perform very basic 2d graphic operations with this thing called a turtle so you'll see it in a second but essentially it's like a little kind of header on the screen and you can kind of move it around it will draw lines and it's a really great way to just learn the basics of python in a nice visual way so now we have the number of racers now we've imported turtle and let's actually just see what happens now when we run the program after importing turtle so we're going to run this uh let's import our number of racers we can go four and we actually see that nothing happened i was thinking the turtle screen might pop up but it's i think it's because i haven't used this module yet so anyways that was a poor example what i'm going to do next is show you how we can create a turtle screen so ignore that last example uh what i was expecting to happen didn't happen often times when you import a module like something will happen when you import it so what i'm going to do now at the top of my screen is i'm going to define first of all the width and the height that i want my turtle screen to be so usually whenever you're working with graphics you need to define the size of a screen or the size of the canvas you're going to be working on so in this case i'm going to say in all capitals width comma height is equal to and then 500 comma 500. if you haven't seen this notation before this means width is equal to 500 height is equal to 500 you can separate as many variables by commas as you want and then do the assignment with commas as well so the reason i'm doing this in all capitals is because these are constant values so in programming whenever you have a constant value in a language where you can't explicitly define that you usually have all capital letters to denote the fact that this value width and this value height will never change they're just here so that we have easy access to the width and the height all right so now that we have the width and the height we want to set up the turtle screen so we're going to start by creating a screen so we're going to say screen is equal to and then turtle dot and then all capitals screen now what this is going to do is initialize a screen for us with this turtle module and then we can kind of set some properties of the screen the first of which is going to be the width and the height so now that i have my screen i'm going to say screen dot and then this is set up and here we're going to pass the width and the height so this method right here takes two arguments a width and a height of the screen and then it makes the screen that size so now that we have that let's run the program and let's see what we get so python turtle ray stop high and notice you can see a screen pops up here immediately and then it's asking me to input the number of racers so i can input say 5 and then the program ends and the screen automatically closes great but when i do this notice that we get python turtle graphics as the name of our window we might not want that we might want to change the name so let's actually go ahead and do that so i'm going to close this i probably should have left the cmd open but that's fine and now i'm going to say screen dot title and in here i'm going to put whatever i want the name of that window to be so i'm going to make mine turtle racing exclamation point now let me go and open up my command prompt again uh you can kind of ignore what i'm typing i'm just trying to get to where my file is so python turtle race tutorial dot pi when i run this notice now the title has changed to turtle racing awesome so let's just input a number and end the program there let me make this guy a little bit smaller okay so now we've gotten the number of racers we have set up the turtle screen and what we want to do next is actually create our turtles we want to start racing them on the screen so i'm going to start by showing you kind of the basic commands of a turtle so how you kind of move a turtle around the screen some of the things that are associated with it and then we'll create a bunch of different turtles and then obviously erase them so what i'm actually going to do though is i'm going to take all of this code related to the turtle stuff so the screen setup the screen title all of that i'm actually going to move that to underneath where my racers are and in fact i'm actually going to make a new function i change my mind i'm going to call this a knit underscore turtle and inside of this function we're going to set up everything related to our kind of turtle screen now the reason for this again is that we just want to kind of structure our program nicely so we won't show the turtle screen until we call this a knit turtle function so after we get the number of racers then we can pop up the turtle screen because i don't really want it to be shown until we've picked the number of turtle erasers that we have so after we get the number of racers we can say a knit turtle that will just run all of the code in here so we'll set up our turtle screen so let's actually go ahead and run this and let's see what happens notice that the turtle screen hasn't popped up this time but then when we type 4 it kind of pops up really quickly and then it closed because as soon as we pop it up the program ends there's nothing more that we need to do we're on a good start now that's kind of what we wanted to do okay so now i'm going to show you how we can kind of move a turtle around the screen so to do this you need to start by creating a new turtle object so to create a new turtle object what you need to do is say and in this case we'll just say racer is equal to and then turtle dot and then with a capital t this time turtle so what this will do is actually create kind of a drawing object for you on the canvas that you saw that white canvas that popped up and then what you can do with this is you can move it around so i'm going to say eraser dot and then just to show you one method you can use forward i'm going to move it forward by 100 pixels now i'm going to do something here that may seem a little bit confusing but i'm going to import a module called time at the top of my program and down here this is really the only new code that we've added right after i move my racer forward by 100 pixels i'm going to say time dot sleep and then five what this will do is pause the program for five seconds so that after we move our turtle we have a second to actually see where it went we don't just immediately close the turtle window although we may or may not do that um immediately close the turtle window anyways we'll see here after this happens so let's run this code right now and let's see what happens we'll say 4 and then notice it opens this turtle window and then it moves this kind of pointer over here by 100 pixels and then it closes obviously because now we are no longer sleeping so hopefully that kind of made sense but you would have seen uh let's run this one more time that it opens up the window it moves our little pointer here which funny enough isn't actually a turtle right over 100 pixels and then it closes so this is one of the methods you can use with your turtle the turtle will start in the middle of the screen the turtle is really that drawing kind of arrow that you saw and every single time you move it it will create a line so you don't only have to move it forwards you can move it backwards and you can also change its direction so you can set it to move maybe in 90 degrees you can set it to go left you can set to go north east west whatever direction system you want to use you can set it to go in that direction so i can say racer dot left and then i can make it go left by 90 degrees and then i can say racer dot forward move it forward 100 again and then i can say racer dot and then let's just go left we can go left another 90 degrees and then we can say racer dot backwards is it backward or backwards well i guess we'll see when we run this and then by 100 pixels so let me run the code now python troll erase stop hi and there we go oh so it's saying turtle object has no attribute backwards that is because this is backward not backwards with the s so just don't add the s for the plural there and let's give this a shot now so python turtle racer and there you go that's what happened see we went right oh sorry it went straight then we went left then we turned uh left again but then instead of going forward we went backwards and so we went the other direction so you can kind of mess around with these uh forward left there's also right and inside of these methods here what you're placing is at least inside of the right method is the angle at which you want to turn the turtle so if you wanted to turn 90 degrees you put 90. if you want to turn 180 degrees you put that if you want to turn 45 degrees you put 45 i'll let you guys mess with that on your own and then this the number of pixels is well how far you're moving the actual turtle so when we open up the turtle window and let me time that sleep for say 20 seconds here just so we have lots of room so i can explain kind of the coordinate system so let's run this let's open up the turtle window all right so this turtle window is 500 by 500 pixels so the height is 500 pixels and the width is 500 pixels now the very middle of this turtle canvas it has the position of zero zero so the top of the canvas has a position of 250 the bottom of the canvas has a position of negative 250 the left of the canvas is negative 250 and the right of the canvas is 250. let me open this up again the way this works right is that if the middle is 0 0 and we have a height of 500 then the top y position on our canvas when we're talking about just a standard 2d graph is going to be 250 whereas the bottom y position is going to be negative 250. so as you increase your y you go up as you decrease your y you go down as you decrease your x you go to the left as you increase your x you go to the right hopefully that makes sense and again negative 250 and positive 250 the reason that's the top and the bottom is because the height is 500 i just divided 500 by two and then applied a negative to one of the bounds hopefully that's making sense but that is the coordinate system the reason that's important is because when i say i move 100 pixels uh well we need to understand where that's actually going to move us to and what scale this is on so when i'm moving 100 pixels i'm really moving onefifth of either the height or the width of the screen depending on the direction that i'm moving in so we're going to erase our turtles going up the screen but you could totally erase them going to the right going to the left whatever direction you want now a few more methods that are useful when we're talking about turtles here are things like the actual icon that's representing the turtle as well as the speed of our turtle so what i can do here is i can change my racer speed so i can say racer.speed and then set this equal to say 2. now let me actually check what the racer speeds are okay so i just checked what the different turtle speeds are here you can see that these are the potential speeds we have so we can insert a speed between 0 to 10 and let me just show you this method again we have the turtle object that we've created dot speed so we can set the speed of it to be slow or fast because you kind of saw how it's moving around the screen right so if we go here oops let's go back to google we can see 0 to 10 where 0 actually means we're going the absolute fastest we can possibly go 1 is the slowest and then 10 is fast so really it's one to ten and then if you input zero it's saying just go as fast as the turtle can possibly move so let's try putting in a value of say two or even one and let's see how slow this turtle gets when i change its speed so i change its speed let's run and now notice it's moving much slower than it was before there we go that is our turtle oh yes it's going right now because i put that right 90 degrees awesome so let's wait for this to close and then i will show you that we can change say the color of the turtle and we can change what the actual icon looks like and all of that in fact i'm not going to wait for it let's just do it now so if i want to change the icon of the turtle what i can do is say racer dot and then i believe i'm actually going to have to look at my other screen here for a little cheat sheet this is the shape that's what it's called so i've been referring to this as the icon it's actually the thing you're seeing on the screen but there's a bunch of different shapes that you can choose for your turtle so i want to make mine turtle but some other valid ones i think are circle we have arrow and then you're welcome to look up the other possible shapes that you have for turtle i can't remember all of them but i know that at minimum two of them that exist are turtle and circle and then obviously there is arrow as well so sorry those are the three that i know that exist okay so let's change this to a turtle now and let's see what happens this time when i run my program i'm going to remove the sleep because i've slowed down the turtle so hopefully we have enough time to see it now so let's run this enter some number and now notice we get an actual turtle moving around the screen awesome so that is good now i will show you how we can change the uh color of the turtle so to change the colors pretty straightforward you can say racer.color and then inside of here you can put a string that represents the color you want to change this to so there's like a ton of different possible colors here i won't go through them all but for example one is scion we could do red we could do green we can do blue we can do yellow black orange so on and so forth so let's just change this to scion so let's run our code here and notice that now we get a cyan turtle and that the line that it has is psion as well now there's a ton of other stuff you can do with turtles if you want to see all of that i would just recommend you just look up turtle python like that and then you can see if you go to the turtle documentation here that there's a whole list of all of the possible stuff that you can do with your turtle so i'll be showing you some of this but i won't obviously go through all of it okay so the next thing to show you is what is called turtle.pen up so whenever the turtle's moving around the screen you notice it was kind of drawing that line right and we're calling that the pen so as the turtle moves it's kind of a pen and just drawing this line on the screen now if we want it to not draw the line but we still want it to move we can bring its pen up so we can say racer dot pen up like that and now you're going to notice when i run this program after i've moved the pen up is that as we move this turtle around the screen no line is being drawn right because it's pen is up so what i can do is i can move the turtle with its pen up i can put its pen down and then i can continue drawing so let's copy this line let's move the turtle uh forward by 100 left by 90 and then let's put its pen down so we're going to say eraser dot pen down so let's do this now python here and now notice that as soon as it turns that corner then the pen goes down so all this stuff i'm showing you you can change at any point in time you don't have to change it before the turtle starts moving or something like that all right so now i've showed you pretty much everything i need to in terms of the different methods for the turtle object just keep in mind you can make as many turtle objects as you want so i said racer equals turtle.turtle i can make a second uh turtle right it's a racer two and then i can move these turtles in different directions so just to give you a quick example we can copy all of this and then we can just change this to be say racer2 and we'll just make racer2 a different color so instead of psion we'll make it say brown like that maybe we'll make it speed a bit faster and then we'll change it so it goes forward like 150 just so you can see the difference in these two terms so let's change that to be 150. again notice i just had racer 2. we can kind of copy this and put it down here to separate these things out all right so let's try this now so let's go python turtle racetutorial.pie uh let's enter a number of racers three and then notice the first racer is going to move around and then our second guy kind of start moving really quickly right because we wrote all of this code after we wrote this code so i'm going to delete all of this just wanted to show you that and now what we are going to do is we are going to pick the colors of the different racers that we have so once we know how many racers we have we need to kind of create all of these turtle objects and we need to pick their colors so i'm going to create a list of colors up here in all capital and i'm just going to type out a bunch of them i have a list on my other monitor in case you see me looking over there so i'm going to say red we're going to say green we'll say blue uh we'll say orange we have if i can get my cursor here correctly yellow we have what's another one black purple we then have pink and did i do yellow yes i did what's the last one we have brown and cyan okay brown and then scion now note that there is a lot more colors than this i'm just doing 10 for right now so we can have at most 10 turtles so now that we have all of these colors we kind of need to pick after we've gotten our number of racers what turtle colors we actually want to use so i'm going to show you a cool way that we can do this so we can randomly select a bunch of colors from this color list that are unique so at the top of my program i'm going to import random all of these modules are built into python you don't need to install them or anything like that and then down here what i'm going to do is i'm going to say random dot shuffle and i'm going to shuffle my list of colors so all this capital list right here now what this is going to do is it's going to take the list and just randomize all of the items inside of it so i have no idea where these items are going to go but all of the items that i have here will just be kind of randomly placed around in the list then what i'm going to do is i'm going to select the first number of racers item from this list that that are there we'll use that as our color so i'm going to say colors is equal to and then colors and then this is going to be a slice up to the number of racers that we have so let me just quickly explain this we've gotten the number of racers we've initialized the turtle we're shuffling that colors list so just randomizing the order of all the elements there and then what this does is this gives us the first racers item from the list so if we had a list say one two three comma four and then we put this little slice operator this is what it's called when you use the colon and we said up to say 2 what this would give me is the first two elements in this list so i would get a new list that looks like 1 comma 2. now if i did the slice of say 3 this would give me the first three elements so one two three that's kind of the basics of a slice so the reason we're doing that is we're randomizing the list and then just taking the first say number of elements that number is equal to whatever the number is the user types in so now let me show you this we're going to print the colors after the user types in the number of turtles they want to race so let's do this python turtle race let's in insert five and then notice it kind of popped open that turtle window closed it and then it printed yellow purple green orange brown now if i do this again and i type five you're going to notice we get different colors right and they're in a different order so black red orange brown scion now this 100 will always select unique colors for us so we'll never have turtles that have the same color all right now that we have all of the colors we want to create all of these turtles so we're going to make a new function here we're going to say define and then create underscore turtles now inside of here we're going to create a list of turtles and then we're going to kind of place them on the screen in their starting position so ideally we want to have all of the turtles evenly spaced out at the bottom of the screen and kind of pointing upwards ready to start racing so let me show you how we do that well the first thing that we need to do here is we need to determine what colors our turtles are going to be and how many turtles we're going to have so this function as a parameter is going to take in colors so we are going to pass this function when we actually decide to call it the number of colors that we have and then what that's going to are not the numbers sorry just the colors that we've actually selected and by having this list here we will also know how many turtles we have because the number of elements in this list will tell us the number of turtles that we want to race so now what we're going to do is we're going to say that turtles is equal to an empty list then we're going to loop through all of the colors that we have and for every single color we're going to create a turtle and add it into the list the reason i'm creating a list is because i don't know how many turtles i'm going to have so i can't just define variables with like you know i can't find four variables for four different turtles or five variables for five different turtles i need to kind of dynamically create these turtles because again i don't know how many i'm gonna have so i'm gonna loop through now all of my colors i'm going to say 4i comma and then color in enumerate and this is going to be colors and what enumerate does is it gives me the index as well as the value of all of the elements in colors so if i'm looping through colors let's say like red and then green then what's going to happen is i'm on my first for loop iteration i will be equal to zero that's the position of this color color will be equal to red and that's great then on my next iteration i will be equal to one and color will be equal to green and if i had one more iteration say this was blue then i would be equal to two because this is the third element where the second index slash position and then the color will be equal to blue so that is what enumerate does gives us both the index and the value now what i want to do is create a turtle so i'm going to say racer is equal to and notice you can name these variables whatever you want and i'm going to make this equal to turtle.turtle just like we saw previously and then immediately i'm going to change the color of this turtle to be whatever color this is so i'm going to say racer dot color and i'm going to make this oops if my sublime text stops crashing okay it's crashing so i'll be back after this stops crashing alright so i am back that was really annoying sublime text just crashed on me but i have eraser.color and i'm going to set this color to be equal to color the reason i'm setting it equal to color is because this will be a string this string will come from this list of colors right here and so every one of our racers will be a different color then what i need to do is set a few other things i want to set the shape so i'm going to say racer.shape and this is equal to a turtle then what i want to do is place this racer in its starting position now before i do that i'm going to show you where they are placed initially but i also want to turn these racers so i want to say eraser.left by 90 degrees now the reason i'm doing this is because by default the kind of arrows or whatever are pointing to the right so if i want them to point upwards because i want to race my racers upwards and my turtles upwards then i need to turn them left by 90 degrees so i'm going to take my eraser or make my eraser which is just a turtle i'm going to set its color i'm going to set it shape i'm going to set it's kind of heading so it goes and is facing upwards and then i'm going to add it to this list so i'm going to say turtles dot append and then i will append my eraser this way i have access to all of my turtles and then later on i can actually say move these turtles forward right and we'll move them by a random amount and that will kind of simulate these turtles being raised now i'm just looking at my other screen here one more thing that i'm going to do here is i'm actually going to put my racers pen up so i'm going to say racer dot pen up i'm then immediately going to say racer dot pen down and inside of here i'm going to set the position of my eraser so we'll just say set pause and we'll do that in one second all right so now let's run this code here so python turtle racetutorial.pi let's insert our number let's say three and what happened ah well we need to call this function if we want to see anything happening so after we get our colors let's call createturtles and let's pass our colors so now we'll have all the colors here we'll loop through them and create our races for each all right so let's run this python turtle race let's go five and notice when i do this it kind of spins up five turtles they you know spin to the left they're all different colors and then it's done so obviously this is not ideal right all of my turtles start in the middle of the screen and so i need to move them so they are at the bottom of the screen now i could move them like backwards turn them left move them to their correct position but that's kind of a pain so there's this method for our turtles called set position uh actually let me make sure it's called that yes it's called set pause so racer dot set pause and this takes an x and y value and will set the position of your turtle to well this position so this is why i'm putting the pen up then i'm going to set the position then i'm going to put the pen down so when i move this turtle to its position i don't draw a line from the middle of the screen to wherever it goes because that's just not optimal it's not ideal that's not what we want to do here so inside of set paws i need to choose an x and a y value for my turtle now the y value is pretty easy because all of my turtles will start at the same y and then they'll kind of increase their y as they race upwards so we know what the y value will be or we can just pick some random y value but what is the x value going to be well i want to space these turtles out completely evenly right so let me open up my kind of windows ink pad here where even is windows ink okay so i've just opened up paint here i unfortunately couldn't find the windows ink thing that i normally use i don't know where they would have hid it from me but anyways apparently it's gone so go easy on me i'm just using my mouse but i'm going to illustrate what we're going to do here so we have our canvas right now our canvas is of size 500 by 500 but to make math a bit easier we're going to say it's 400 by 400 again my mouse is really hard to draw with okay so 400 by 400 now we want all of our turtles to kind of be placed near the bottom of the screen so to pick this position is pretty easy we can kind of just take like the height of the screen we can divide it by two we can add a small value to it and then we'll say alright well that's where we want to place the turtles at that negative coordinate because right here in the middle is 0 0 right so as we go down this is negative so if we place that negative 200 they'd be like right at the bottom of the screen so we can move it up like 10 pixels and then that would bring us to this kind of red line that we have right here now the question becomes though what are the x values of our turtles so obviously we want our turtles to be kind of spaced out if we have two turtles we probably want them somewhere like here and here right want them equal distance from each other and then equal distance from the edge of the screen now i know this isn't exactly equal distance but hopefully you're kind of getting the idea if we have three turtles we want one guy in the middle one guy here and one guy here this way they're equal distance from the edge of the screen and from each other so how do we figure out the x positions well what we actually need to do is we need to figure out first of all the spacing between our turtles then what we can do is we can start our first turtle at whatever the spacing amount is we can then add whatever the next spacing is toward our next turtle and then our next spacing and so on and so forth so how do we figure out the spacing between the turtles well we actually take this number right here sorry this number right here which is the width of our screen and we divide it by the number of turtles that we have plus one so i want you to see this example if we take 400 and we have four turtles a lot of people would say well the spacing between each turtle should be 100 pixels now the reason why that would actually be incorrect is because that would assume the first turtle starts at the far left hand side of the screen so if i put my first turtle right here and then i go 100 pixels over my next turtle is at position 100 right if we're talking about the x then my next guy comes over here and he's at 200 and then my next guy comes here and he's at 300. it's really hard to do a three clearly this is my attempt at a three okay so 100 200 300 and then this first guy's obviously at zero so we don't want that we want to kind of shift this whole line over so there's equal distance between all of the turtles and the edge of the screen so what we really need to do is we need to divide this number by five and then we need to start our turtle at the first spacing position so if we take 400 and we divide this by five oh god this is testing my math skills 400 divided by 5 should give us a value of 80. yeah i think 80 is correct 8 times 5 yeah 40 400 yeah okay 80 is correct so now if we do this at 80 let me kind of erase all of this here we'll say that our first turtle gets placed at position 80. so the first guy goes right here uh should i even attempt to do an eight okay we have eight zero then our next guy is going to go at 160 and then we'll move over again and then our next guy is going to go at 240. our next guy will go at 320 and then this will be perfect we'll have our four turtles they'll be equal distance from the edge of the screen and equidistance from each other now i know this seems like they're not equal distance because i've kind of drawn this not to scale but that's the idea behind this so hopefully this long explanation gave you the idea of what we're doing we're going to divide the value that we have here by the number of turtles plus one then we're going to place the first turtle at spacing position so whatever the spacing is so starting at 80 the rest of them will go up by the increment of spacing every time so we'll leave that kind of open in the background in case you need to refer to it again but this means we are going to set the position and we need to figure out the turtle spacing so i'm going to say spacing x is equal to and then the len of colors this is the number of turtles that we have right plus one we're going to put these in parentheses and we're going to start by dividing the width by 2. so we're going to say width divided by 2 sorry not width divided by 2 with divided by the length of colors plus one so whatever our width is we divide it by the number of turtles plus one which is really just the number of colors that were given to us and there we go so now where do we want to start placing our turtles well what i was showing you before is i was starting replacing at 0 80 so on and so forth the only issue with that is that when we're at the left so we're to the left of the middle of the screen we're at a negative coordinate right so really when we're drawing the kind of coordinate axes here this is zero zero so as we're over here we're in the negatives so that's fine all that means is we need to add the negative width over 2 as our starting position to all of these right here so the first position for our turtle will actually be at negative width over 2 plus this value right here the reason that will work is because we will subtract this by negative 200 and then negative 200 plus 80 that will be equal to what is this 120 negative 120 then we will go and be equal to negative 40 then we will be equal to 40 then we will be equal to what's 80 plus 40 120 and that will work and that will still give us the equal distance and it will just kind of translate everything over to the left which is what we want it to do so hopefully that's making sense we just need to account for the negative coordinate system so we're going to set position at negative width over two and then we're going to add to this i plus one let's guess why we need to do that in a second multiplied by and then the spacing x so this will be our x position and our y position will be equal to negative height divided by two plus 20 pixels now this is kind of an arbitrary value i'm deciding i'm saying we want to be 20 pixels from the bottom of the screen so we take the negative height divided by 2 and add 20. the reason we have the i plus 1 is because we start indexing at zero so the first color is zero really we wanna make that one because remember we want to place the first turtle at the first spacing position so negative width over two plus whatever the spacing x is that's where the first turtle should go then the second turtle well that will be a one so that will give us two so then we'll be at the second spacing position then the third then the fourth so on and so forth so this should place our turtles in the correct position let's see if it does so so let's run our code here and let's say we want to have eight turtles so we have eight turtles notice that now we're going to move the turtles they are perfectly aligned on the screen and they have equal spacing between each other and between the edges so that's awesome now all we need to do is just return our turtles like that and now that we've created the turtles we've placed the turtles we've picked our colors and the number of turtles that we have we can start finally erasing them on the screen all right so now what i'm going to do is create a new function i'm going to call this function race and this function race is going to take in our colors now i'm going to change kind of the flow of our program a little bit let me zoom out here so you guys can kind of read more of what's going on so right now what we're doing is we're getting the number of racers we're initializing our turtles we're picking the colors and then we're creating the turtles that's great but i don't want to create my turtles until i'm ready to erase them so i'm going to take this create turtles kind of function call here and i'm going to put that inside of this race function now the idea is that we're going to pass the colors to race and then race will create our turtles for us so we'll say turtles is equal to and then create turtles because this function returns the turtles so then inside of here we will create all the turtles using our colors and the reason this is important is because i want to know what color every turtle is and by having access to colors and turtles i can do that so now rather than calling create turtles down here we're just going to call race so we're going to say race and then colors and then this will create our turtles for us and then in here we can race them so after i create my turtles i want to start racing them i want to start moving them so i'm going to say well true and then i'm going to move all of my turtles one by one now the idea behind this is that we don't know how long it's going to take us for our turtles to get to the top of the screen so what i need to do is have a while loop because i need to keep moving them until eventually one gets to the top of the screen so inside of here i'm going to say four racer in turtles and then what i'm going to do is move this racer so i'm going to say racer dot and then move and sorry this shouldn't say move that's actually going to be racer dot forward because it's now facing the correct direction it's facing up so when i move it forward that's the direction it's going to go in so racer dot forward and then i want to move it forward a random amount so i'm going to say move is equal to or maybe distance is a better variable name distance is equal to random dot and then rand range and inside of here we're going to put the minimum and maximum amount we want the turtle to possibly move at every iteration so i'm going to say 1 comma 20 and what this means is every time i decide to move my turtle i'm going to move it by either 1 or 20 pixels or sorry between 1 to 20 pixels so it will randomly generate a number that is between 1 and 20 and move the turtle that amount that's what rand range does so you can make these values whatever you want the larger you make this minimum value the faster your turtles are going to move and obviously the larger you make this one the higher probability your turtles are going to move faster but really this minimum value will dictate kind of the slowest speed of the slowest turtle right so just keep that in mind i like to keep it at one so that the race kind of looks like they're like kind of inching forward rather than having big jumps every single time anyways we're going to say racer.forward we're going to move it forward the distance now once we've moved our racer forward what we want to do is check if this racer is kind of past the finish line so the reason we're looping through all of the turtles first of all is because we need to move every single one of them we have a list of turtles right we've created all of these turtles here stored them in a list now we need to move every single one of them so we loop through all of them and then we move them now for every racer we check if it's past the finish line so i'm going to say x comma y is equal to racer.pause what this does is give me the position of this turtle so i know the x and the y i don't care about the x i just care about the y i'm going to say if y is greater than or equal to and then height and this is going to be divided by 2 and we'll subtract 10 here then what i want to do is i want to say that this turtle crossed the finish line that it was the winner so to do that i'm just going to return this turtle's color so if this turtle passed the finish line then it is the winner what this function is going to do is it's just going to return whatever the winning turtle is it's going to return the color of the winning turtle so we'll say return and then here we will return and this is going to say colors at index i now this may be a bit confusing but the idea here and oops index i i can't even use that um okay i'm going to show you a different way to do this i thought i had coded this in a different way i'm going to say colors at and then this is going to say turtles dot index turtle so this may be a bit confusing if you guys haven't worked with lists before but this is the rationale we want to find the winner or sorry the winning turtle color want to know the color of the winning turn so to do that we need to access its color now i don't think there's a way to get the color of a turtle from the actual turtle object i may be wrong on that but all we have access to here is just the turtle right we have the turtle that we're moving that's all we have so this kind of turtle.turtle that's all we have so the question then becomes okay how do i find the color of it well i have the colors of all of my turtles here so what i can do is i can find which turtle or the index of the turtle that was the winner and then i can use that same index to figure out the color of it in this colors list so think of it this way if i have a list of colors i have like blue and red and then i have my two turtles right so let's just say i have turtle turtle one and i have turtle two well turtle 2 is at index 1 right so we have index 0 and index 1. so turtle 2 is at index 1. so if i can find the index of this turtle all i have to do is reference that same index in my colors list and that tells me the color of it right same thing for turtle one well turtle one's at index zero its color must be index zero in the colors list this expands with any length of turtles so what turtles.index does is notice this is the name of the list i'm then passing the turtle that i'm looking for the index of it tells me the index of this turtle so and sorry this should be changed actually to be racer that's my bad i was probably confusing you guys there but we have access to the turtle so we say turtles.index racer gives us the index of this turtle object in the turtles list we then use that same index on the colors list to reference the color of that turtle and we return it so not really much more i can explain there that's probably the best that i can do for that we're going to return the actual color now that we have the color down here we'll say winner equals race and then we can just print out winner the idea being that this function is only finished once we return this color so just in case you're aware or just in case you're unaware sorry in a while loop whenever you return something or just in a function in general as soon as a return statement happens the function immediately stops so even though this is inside of a while loop the while loop will stop running as soon as one of the turtles has one so let's just run this code let's just see if this works then i can explain to you some more kind of details about this so let's go here python turtle race let's go with five turtles so we're going to create our five turtles and then they're going to start racing so they kind of start racing up the screen notice that they're drawing every single time and then boom it says pink the reason it says pink is because if you saw pink was the first turtle to cross the finish line now it's worth noting here that there is a little bit of a bias in the uh the first turtle so the very first turtle has a very very small probability of finishing uh earlier than all the other turtles like it has a better chance of doing that in a sense because it's the first turtle that we move we have to move the turtles sequentially like we can't move all of them at the exact same time so we move the first hurdle then the second turtle then the third turtle then the fourth turtle we check if any of them are past the finish line whatever one crosses first we say that's the winner so it's just a higher probability that the very first turtle we move will finish first so the last turtle kind of has you know the least chance of winning but based on this randomness here uh it ends up kind of counteracting that in some type of sense so hopefully you get what i mean i'm not going to worry about that for this problem right here if you guys were concerned about the fact that one turtle has like a little bit of bias which it kind of does what you could do is you could see if one turtle crossed the finish line and then if a turtle crossed the finish line you could still move every other turtle and whatever turtle moved the furthest so it was like the furthest past the finish line that's the one that you would say would be the winner there's no way other other than that to really kind of fix this problem so anyways that is really all we need to do here like that that is it for this program so the last thing i'm going to do is i am going to print out in kind of a nicer way what the winning turtle is so i'm going to say the winner is the turtle with color colon then comma and i will say winner so that's all we'll do so now we just have a nicer kind of output message saying this was the winning turtle and then i'm gonna say time dot sleep and i'm gonna sleep for five seconds just so that we have a few seconds to actually see which turtle was the winner before we just go ahead and close the program so hopefully that's clear but yeah that's really all we need so let's run this let's go with 10 turtles this time and let's see what we get let's just enjoy the turtle racing show okay so they're going to race you're going to notice the more turtles you have kind of the slower they go just because we have to move every single turtle one at a time we can't move like a bunch of turtles you know like the more chills we have the more we have to move into the longer it takes to run that's what i'm trying to say but we saw that the winner is the turtle with color green let's run this one more time with two turtles and you'll see that it goes like way faster because it's just these two guys that need to move purple was the winner and then if we kind of go back into cmd it says the winner is the turtle with color purple awesome so i think that's really all i need to show you here now all of this code will be available to download from the description in case you got lost or something that's not working but hopefully i did a good job at explaining a lot of these concepts hopefully you guys kind of learned how you can lay out a i don't want to say large but medium sized python program that has more than just a few lines of code and you get the idea behind these functions right so now at this point if i want to go change something like say i want to change the width of my screen since i use this width variable everywhere in my program and everything i did was very dynamic right i had like height over two i had width over two if i change the width up here now everything will just work right like if i change this to 700 and i change the height to 600 doesn't even have to be square let's just run the program again let's go with six racers and it's still going to be evenly spaced out on the screen right just because the way we did this is everything was dynamic it used the variables and we set it up in a way where if we made any changes later on it wouldn't completely ruin or mess up our program and what does it say the winner is here the winner is turtle with color blue so just keep that in mind hopefully you appreciate that kind of detail in writing this code and same thing here even with like validating the input right we're gonna keep asking the user for a valid input until they give us something that's valid and then race uh we're using another function inside of this function we could have just took take uh took and taken whatever all of this code and placed it inside of here but if we did that then if we wanted to change the way that we were creating our turtles well we could do that but it would just be a little bit harder and if we wanted to say use this function anywhere else same thing just wouldn't work as well so this way it's really easy to see laid out very nicely and this is just a better style of coding than writing everything in one line right because we could have written this entire program in just one line like we didn't have to use any functions it could have just all been in the main line of the program but then it wouldn't be very clear to see what part of the program was doing what awesome so i hope you guys enjoyed if you did make sure to leave a like that's really all i have for you today so subscribe to the channel and i will see you guys in another youtube video you
