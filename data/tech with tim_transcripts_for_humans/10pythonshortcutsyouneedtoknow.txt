With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome back
00:10 - in this video i'm going to be showing
00:12 - you 10 python shortcuts that you
00:14 - need to know none of these shortcuts are
00:16 - advanced they are simply python language
00:18 - features
00:19 - that save you a few lines of code and a
00:21 - little bit of time
00:22 - these things may exist in other
00:23 - programming languages but most of them
00:25 - are specific to python
00:26 - and well if you write in python a fair
00:28 - amount this is definitely something
00:29 - worth watching
00:30 - and shortcuts worth remembering so with
00:32 - that said the first
00:34 - thing that you need to know is actually
00:36 - the sponsor of this video
00:38 - thanks to career karma for sponsoring
00:39 - this video career karma is a platform
00:42 - that helps connect learners like you to
00:43 - amazing boot camps and courses that
00:45 - prepare you for jobs in tech
00:47 - i've worked with career karma in the
00:48 - past and share their mission of
00:50 - inspiring
00:50 - motivating and helping others get
00:52 - started with their tech careers
00:54 - if you're looking to start your career
00:55 - in tech as a web developer data
00:57 - scientist
00:58 - ui ux designer whatever it may be then
01:00 - career karma can help you in your
01:02 - journey
01:02 - and get you into some great boot camps
01:04 - boot camps are the fastest way to
01:06 - quickly switch to a tech career
01:07 - that affords a six-figure salary work
01:09 - from home flexibility and high job
01:11 - satisfaction
01:12 - on the career karma app you can join
01:14 - live audio rooms and speak to people
01:16 - like me
01:17 - in fact i just did a live audio room the
01:19 - other day and it was a great experience
01:21 - to get started download the career karma
01:23 - app from the app store or click the link
01:25 - in the description
01:26 - where the first 1000 of my subscribers
01:28 - will get exclusive access to a free
01:30 - coaching session
01:30 - with the career karma coach thanks again
01:33 - to career karma for sponsoring this
01:35 - video alright so let's go ahead and dive
01:37 - in the first shortcut i have to show you
01:39 - is called f strings
01:40 - now f strings only work in python
01:42 - version 3.6
01:43 - and above but they simply allow you to
01:45 - embed python expressions or variables
01:48 - inside of a string without having to use
01:50 - concatenation or string formatting or
01:52 - any other method you may use
01:54 - so for example let's say we have some
01:56 - variable
01:57 - and it is called name it is equal to tim
02:00 - let's say we then want to print out
02:01 - hello and then whatever the value of the
02:03 - name variable is to the screen
02:05 - well a few ways we could do this would
02:06 - be the following we could print
02:08 - something like hello
02:09 - comma name that would work we could
02:12 - print something
02:13 - like hello space plus name
02:16 - and that would work or we could use an f
02:18 - string which just makes things a lot
02:20 - easier
02:20 - and f string is simply a lowercase or
02:22 - uppercase f followed by a string either
02:24 - double quotes
02:25 - single quotes or triple quotes in either
02:28 - single or double quotation marks
02:29 - and then inside of the f string you can
02:31 - simply write any python expression or
02:33 - variable
02:34 - inside of curly braces and it will be
02:36 - evaluated as a string
02:38 - so if i print hello name like that let's
02:40 - just remove this
02:41 - we can see that this actually works we
02:43 - get hello
02:44 - tim now the great thing is when you have
02:46 - complicated strings that are using
02:47 - variables or expressions
02:49 - you can add stuff before and after the f
02:50 - string or sorry before and after the
02:52 - expression
02:53 - you can embed multiple expressions so i
02:54 - can do something like name
02:56 - times two and then i get hello tim tim i
02:58 - could even do some basic addition maybe
03:00 - two plus three
03:01 - like that i could write maybe a list
03:04 - inside of here
03:04 - right i could do something like one two
03:08 - three and then that gets displayed as a
03:10 - list there's a lot you can do with f
03:11 - strings again it's a lowercase or
03:13 - uppercase f only works in python version
03:15 - 3.6
03:16 - or above and in my opinion is a shortcut
03:18 - to create a string now lastly you also
03:20 - could do something like x is equal to
03:23 - and then do that you don't have to be
03:24 - printing the f string and then i could
03:26 - obviously print this string so print x
03:28 - and you get
03:28 - the same thing all right that is
03:30 - shortcut number one let's move on to
03:31 - number two so moving on to shortcut
03:33 - number two i have for you
03:35 - unpacking now unpacking is extremely
03:38 - useful
03:38 - and essentially what this means or what
03:40 - this allows you to do is assign
03:42 - variables to all of the values inside of
03:45 - some type of collection in python
03:47 - so a collection in python could be
03:49 - something like a list like a dictionary
03:51 - like a string those are all examples of
03:54 - collections and
03:55 - what you can do is something like the
03:56 - following so see here inside of top
03:58 - standing for tuple
03:59 - i have five values one two three four
04:01 - five let's say i wanted to assign all of
04:03 - those values to variables
04:04 - well i could do something like a equals
04:06 - top at index
04:08 - zero and then b equals top at index
04:11 - one so on and so forth but that's pretty
04:13 - uh repetitive and i don't really want to
04:15 - write that so instead what i could do is
04:17 - a
04:17 - comma b comma c comma d comma e is equal
04:20 - to
04:21 - top and when i do that python knows to
04:23 - automatically assign
04:24 - a equal to 1 b equal to two
04:27 - c equal to three so on and so forth and
04:30 - to prove this to you
04:31 - i can just print them all out so if i do
04:34 - this you see we get one two three four
04:35 - five so you can do that with pretty much
04:36 - any collection
04:37 - i can also do this with my list so lst
04:40 - notice that works as well i could do
04:43 - this with my string so let's go ahead
04:45 - and do that
04:46 - i get hello well all spaced out hello i
04:49 - can do this with my dictionary so let's
04:51 - change this to just be a b
04:53 - and then dic okay
04:57 - a b like that notice this works notice
04:59 - when i do this with a dictionary it
05:01 - gives me the
05:01 - keys it does not give me the values if i
05:04 - wanted the values i would do or sorry
05:06 - items
05:06 - i would do dick dot actually not items
05:09 - dot values
05:10 - and then that's going to give me the
05:11 - values and if i did items
05:14 - you'll actually see what we get here we
05:16 - will get tuples so a1 b2
05:18 - a is obviously the key 1 is the value b
05:22 - is the key 2 is the value so works with
05:25 - that and then a very common way or
05:27 - reason people use this is you have
05:28 - something like coordinates and you want
05:30 - to
05:30 - unpack them into x y so you can see i
05:32 - have my chords here 4
05:34 - 5 x y and then i go x comma y
05:37 - and well there you go i've unpacked this
05:40 - collection that's pretty much it for how
05:42 - unpacking works pretty simple but
05:43 - definitely very useful and saves you
05:45 - from having to write out a bunch of
05:46 - different variables
05:47 - on a bunch of different lines you can
05:49 - simply unpack the collection in
05:51 - this fashion one last thing to note is
05:53 - that if you have something like x y z
05:55 - equals chords
05:55 - you're gonna get an error because it
05:57 - cannot unpack there's not enough values
05:59 - here
05:59 - to unpack into these three variables all
06:02 - right let's move on to shortcut number
06:04 - three
06:04 - so i don't really have a proper name for
06:06 - this one but i'm going to call it
06:07 - multiple assignment or
06:08 - variable swap but essentially this
06:10 - shortcut allows you to assign multiple
06:12 - variables on the same line this is
06:14 - common in other programming languages
06:15 - but i figured i'd show it here in python
06:18 - so for example let's say i have a width
06:19 - and a height i can define them like this
06:21 - 400 500 so rather than having to write
06:24 - two lines
06:24 - width equals 400 and height equals 500
06:28 - i can simply do it on one line so that's
06:31 - great but the more useful aspect of this
06:33 - feature
06:34 - is that i can actually swap the values
06:36 - of variables in one line
06:37 - as well so in other programming
06:39 - languages if you wanted to swap the
06:40 - value of width and height what you would
06:42 - have to do is something like this
06:43 - temp is equal to width width is equal to
06:47 - height
06:47 - and height is equal to temp because you
06:50 - need some way to store
06:51 - the value after you reassign this
06:54 - variable because once i assign width
06:55 - equal to height
06:56 - i lose the value for width and so i need
06:58 - to store it in this temporary variable
07:00 - so instead of having to do that in
07:01 - python what you can simply do is say
07:03 - width
07:03 - and then comma height is equal to height
07:07 - comma width and just to show you that
07:09 - i'm not lying here
07:10 - i can print the width and the height
07:12 - let's delete
07:13 - all of this and you should see that we
07:14 - get 500 400 because we have swapped the
07:17 - width and the height
07:18 - so that's it for this you can obviously
07:20 - do this with multiple values as well so
07:21 - even this inline swap
07:23 - i could say with comma height comma x
07:25 - and then i don't know maybe make this
07:26 - like
07:27 - 5 or something and well that still works
07:30 - all right so with that said
07:31 - let's move on to the next shortcut all
07:33 - right so moving on to one of the more
07:34 - useful and popular python shortcuts we
07:37 - have
07:37 - comprehensions now a comprehension is a
07:40 - way to initialize or create some type of
07:42 - collection in python in one
07:44 - line so let me just show you with a list
07:46 - first and then i'll show you with some
07:47 - other collections
07:48 - so here we have a list and i want to
07:50 - initialize this list with some values
07:52 - let's say i want to fill it with zeros
07:54 - maybe i want to fill it with a hundred
07:55 - zeros well i could write a for loop i
07:56 - could say 4i
07:58 - in range a hundred and then say x
08:02 - dot append zero but this is not the
08:04 - pythonic way to do this
08:06 - the pythonic way to do it is the
08:07 - following zero for i
08:10 - in range a hundred when you do this it
08:13 - is going to put whatever is on the left
08:15 - of the for statement
08:16 - inside of the list however many times
08:18 - this is running
08:20 - so in this case if i print out x now we
08:22 - see we get a list filled with a hundred
08:24 - zeros now of course i could use the
08:26 - value i here so i for i and range 100
08:28 - now i get a list that goes up to 99
08:30 - starting at zero and if i wanted to get
08:32 - even more advanced i could add an if
08:34 - statement here so i
08:35 - for i in range 100 if i mod 2
08:38 - is equal to 0. now we're only going to
08:40 - get the even numbers
08:42 - plus 0 inside of here i could add
08:44 - another for loop so i could say 4
08:46 - and j in range 10 and then maybe i do
08:49 - the product
08:50 - of i times j now if i do this obviously
08:53 - i get a large list but you can see where
08:55 - i'm going with this and
08:56 - how advanced you can really make this of
08:58 - course you can do a nested list
09:00 - comprehension as well i could do a list
09:02 - inside of here and say zero for
09:04 - underscore in range five
09:07 - for underscore in range five
09:10 - this will create a two-dimensional array
09:12 - for me so here you can see now we have
09:14 - an array or a list inside of a
09:16 - list if you're curious what the
09:17 - underscore is you can simply use an
09:19 - underscore instead of a variable name
09:21 - if you're not going to actually use the
09:22 - variable or iterator for your for loop
09:25 - and yeah that's pretty much how you use
09:27 - or do a list comprehension
09:29 - now of course you don't only have to do
09:30 - a list comprehension you could do this
09:32 - with a dictionary a tuple other data
09:34 - structures i'll quickly show you
09:35 - so what i'm actually going to do here is
09:37 - create something known as a generator
09:38 - you don't have to know what that is but
09:39 - that's why you'll see some weird output
09:41 - in a second
09:41 - so i'm going to say i 4i in and let's
09:44 - just go with
09:46 - hello and now notice i get a generator
09:48 - object
09:49 - don't worry about what that is but if i
09:50 - convert this to a list
09:53 - you can see that i get hello so this
09:55 - does work with tuples as well or sorry
09:57 - i could just convert this to a tuple and
10:00 - then i get that in
10:01 - a tuple nice okay uh other than that i
10:03 - could do this with a dictionary so a
10:05 - useful thing we can do with the
10:06 - dictionary is say count all of the
10:08 - characters in a word so let's say i have
10:10 - a word
10:10 - which is equal to hello my name is tim i
10:13 - understand this isn't a word but
10:15 - we can just change this to sentence what
10:17 - i can do now is something like
10:19 - char colon and then sentence
10:22 - dot count char or char
10:25 - in the set of the sentence this might
10:28 - seem a little bit complicated but i'm
10:30 - getting all of the unique letters from
10:31 - the sentence i'm looping through them
10:33 - and then for every single one of those
10:34 - letters i'm counting how many times they
10:36 - occur inside of the sentence not the
10:37 - most efficient way to do this but this
10:39 - will give me
10:39 - the frequency of these characters in the
10:41 - sentence so if i do this
10:42 - now you can see i am getting that from
10:45 - this dictionary comprehension
10:46 - all right i'm going to end it there you
10:47 - can do this with a few other collections
10:49 - as well
10:50 - let's move on to the next shortcut the
10:52 - next shortcut i have for you is a simple
10:53 - one this is
10:54 - object multiplication this simply allows
10:56 - you to multiply objects
10:58 - in python when i say objects i don't
11:00 - just mean numbers i mean strings
11:02 - lists etc so let me show you so a very
11:04 - popular thing to do is to multiply a
11:06 - string so let's say i have a string
11:07 - hello maybe i want to multiply this by
11:09 - 5. well you can guess what the result is
11:12 - going to be well we get hello
11:13 - five times so that's what i'm talking
11:15 - about here now of course you can
11:16 - multiply a list as well so one two three
11:18 - times five i get one two three
11:20 - five times in the same list we can
11:23 - multiply a nested list if we wanted to
11:25 - do that
11:26 - one two three and then we get the nested
11:28 - list inside of the
11:29 - larger list i could of course do this
11:31 - with a tuple as well
11:33 - so let's just go one two times five of
11:35 - course you can make this
11:36 - a larger number now if you try to do
11:39 - this with two tuples or something you'll
11:40 - see that
11:44 - a few things i just showed you list
11:45 - tuples and strings definitely are
11:47 - multipliable
11:48 - in python the next shortcut i have for
11:50 - you is very popular in most
11:52 - programming languages in javascript they
11:53 - have this in other programming languages
11:55 - they have this
11:56 - and this is the ternary or in line
11:58 - operator
11:59 - slash condition slash if statement so
12:01 - what i mean by this is the following in
12:03 - python you can do something like this
12:05 - x is equal to and then i could say maybe
12:08 - 1 if
12:09 - 2 is greater than 3 else 0 and if i
12:12 - print the value of
12:13 - x well you're going to see we get what
12:15 - we would expect here so you can put some
12:17 - type of condition you put what you want
12:19 - to occur or what you want to be assigned
12:21 - to the variable on the left hand side of
12:23 - the if statement and then what you want
12:24 - to happen
12:24 - if this is not the case after the else
12:27 - so whenever you do this you do need an
12:28 - else notice if i go like here
12:30 - and i don't add an else we get invalid
12:32 - syntax you must have
12:34 - an else pretty straightforward that's
12:36 - what it is now in javascript the
12:37 - parallel here would be this
12:38 - x is equal to uh two greater than three
12:42 - question mark one colon zero so you're
12:44 - putting the condition first then you're
12:46 - putting what
12:46 - occurs if this condition is true
12:49 - otherwise
12:50 - you are putting what happens otherwise
12:52 - right if this condition is false
12:54 - so pretty straightforward but this can
12:55 - be useful if you want to not have to
12:57 - actually write the entire if statement
12:58 - obviously if i wanted to write this out
13:00 - i would have to do something like if two
13:02 - is greater than three x
13:03 - equals one else colon
13:07 - x equals zero so you can see this saves
13:09 - you quite a few lines of code and just
13:10 - looks a bit cleaner
13:12 - and definitely has its place in python
13:14 - programs the next shortcut i have for
13:15 - you in python is the zip
13:17 - function so i'll write it out right here
13:19 - but it looks like this
13:20 - what this will do is combine lists or
13:22 - collections together so usually you can
13:25 - iterate through them at the same time
13:27 - now before i iterate through them i'll
13:28 - just show you exactly what this does and
13:29 - you'll see why it's useful
13:31 - i'm going to print the list of the
13:34 - zip of the names ages and
13:37 - i underscore color notice how tim
13:39 - corresponds with
13:40 - 21 and blue joe corresponds with 19 and
13:44 - brown so on and so forth all of these
13:46 - kind of correspond with each other at
13:47 - the corresponding indexes
13:49 - if i print this out notice that we get
13:51 - tuples that are combining
13:52 - all three of these things so tim 21 blue
13:55 - joe
13:56 - 19 brown so on and so forth that's what
13:58 - the zip function does now of course i
14:00 - can do this with less things
14:02 - just names and ages now if i run this we
14:04 - just get the name and the age
14:06 - i could of course do this with just the
14:09 - names and the eye color
14:10 - like that and then i just want to show
14:12 - you what happens if you have too many
14:13 - elements in
14:14 - one of your lists so here let's just say
14:16 - i add an extra element so this has four
14:19 - this has four this has five now i'm
14:21 - trying to zip something that has
14:22 - four elements and five elements watch
14:25 - what happens nothing
14:26 - no error it simply skips or doesn't
14:28 - consider
14:29 - this last element or extra element in
14:32 - this eye color list
14:34 - so why is this useful well a lot of
14:35 - times you want to loop through the zip
14:37 - of lists so rather than looping through
14:39 - them and using the index to access the
14:41 - elements
14:42 - what you can do is set is something like
14:43 - this so for let's go name
14:46 - age in zip names ages
14:50 - and then i could simply do something
14:51 - like if the age is greater than
14:54 - 20 print the name
14:57 - and then i get tim and i get sally
14:59 - printing out so that's kind of where
15:00 - this would become useful
15:02 - of course i could add in the eye color
15:03 - as well i would just need to add
15:06 - i underscore color let's change that to
15:09 - colors
15:10 - and then i could just print the i
15:13 - underscore color
15:14 - no matter what so there you go that is
15:16 - zip pretty useful and yeah definitely
15:18 - just cleans up the program a little bit
15:20 - so the next shortcut i have for you is a
15:21 - little bit more advanced but this is
15:22 - star args and star star quarks now arg
15:25 - stands for
15:26 - arguments positional arguments
15:27 - specifically and quarks stands for
15:29 - key word arguments now positional
15:31 - argument is one in which position
15:33 - matters
15:34 - so if you look at this arg1 arg2 arg3
15:36 - when i call this function the first
15:38 - value i pass in will be arg1 the second
15:40 - arg2
15:41 - the third arg3 hence they are positional
15:43 - the position in which i pass the
15:45 - arguments matters
15:46 - whereas if you look at this function
15:47 - right here these are keyword arguments
15:49 - which means i could call this function
15:50 - like this
15:51 - func two arg2 equals x whatever i could
15:54 - do arg1 equals that
15:56 - i don't even need to pass these
15:57 - arguments and i can pass them in any
15:59 - order that i want whereas up here i need
16:00 - to pass all of them
16:01 - and i need to pass them in a specific
16:03 - order so
16:05 - what is star args and star star quarks
16:07 - well let's say i have a list that has
16:09 - all of the arguments i want to pass to a
16:11 - function or some collection maybe a
16:12 - tuple maybe a string
16:14 - that has all the stuff i want to pass to
16:16 - a function
16:17 - well the way that i can do this is
16:19 - something like this right i could go
16:20 - func one and then i could say args at
16:23 - index zero
16:24 - and then args at index one or i could
16:27 - decompose this right or break this down
16:29 - unpack it and have you know abc equals
16:31 - args then pass
16:32 - abc right here but there is a much
16:35 - faster way to do this what i can
16:36 - actually do is write
16:37 - star args now what star args will do is
16:40 - unpack this
16:41 - and split this into all of the three
16:44 - individual items so you can kind of
16:45 - imagine that star args removes this
16:48 - list right here and passes the values
16:50 - one two three like that
16:52 - as positional arguments to this function
16:54 - so when i go star args
16:55 - you will see here that i get one two
16:57 - three printing out now obviously let's
16:59 - just change this two two three
17:00 - it shows two two three now one of the
17:02 - best ways to visualize star args is to
17:04 - do the following
17:05 - if i print args notice we get a list if
17:08 - i print
17:09 - star args notice i get 2 2 3. the reason
17:11 - for that is
17:12 - all three of these values are passed as
17:14 - arguments to the print function
17:16 - so i print two then i print to then i
17:19 - print three so it would look like
17:20 - two two three inside of here when you do
17:24 - star arcs hopefully that's clear but
17:26 - that's what you can do
17:27 - with positional arguments great now when
17:29 - you have keyword arguments it's a little
17:31 - bit different so notice what happens
17:32 - here
17:33 - if i pass to func 2 quarks okay so we're
17:36 - looking at funct2 and we're looking at
17:38 - our keyword arguments right here if i do
17:39 - one asterisk and i pass
17:41 - quarks notice i'm printing out arg2 arg1
17:44 - and arg3 the reason for that is i am
17:47 - actually passing these as positional
17:49 - arguments and specifically i am passing
17:51 - the keys
17:52 - in my dictionary as positional arguments
17:54 - to this function
17:55 - so arg one is actually equal to the
17:57 - string arg2 arg2 is equal to the string
17:59 - arg1
18:00 - you can read the output and you can see
18:01 - what they're equal to that's because
18:02 - we're just passing the keys as
18:04 - positional arguments
18:05 - however if i do two asterisks this will
18:08 - actually pass
18:09 - the key as the argument name and or
18:12 - parameter name whatever you want to call
18:13 - it and then the value as the value for
18:15 - that argument or parameter so in this
18:17 - case we'll pass arg2 equals two our one
18:19 - equals one
18:20 - and we should get things printing out in
18:22 - the correct order now because
18:23 - we're passing the correct keyword
18:24 - arguments so to break this down for you
18:26 - as well what this would look like
18:28 - is arg2 is equal to two arg one is equal
18:32 - to one
18:32 - and then arg3 is equal to three that's
18:36 - what it looks like when you do
18:37 - star star quarkx like that all right so
18:39 - a little bit more advanced
18:40 - that's where i'll leave it though also
18:42 - note that you can do something like star
18:43 - args
18:44 - and let's go here star star wargs in the
18:48 - parameters but i'm not going to show
18:49 - that
18:50 - in this video so the next shortcut i
18:52 - have for you is one that many people do
18:53 - not know about and this is the four else
18:55 - or
18:56 - while else statement now what this
18:58 - allows you to do is determine if you
19:00 - broke out of a for loop or a while loop
19:02 - without having to use a flag
19:04 - so let me show you a classic example
19:05 - here let's say we have some target value
19:08 - let's say this target is equal to seven
19:10 - let's say we have some search array or
19:12 - search list
19:13 - and let's just give it some numbers okay
19:14 - one two three four five
19:16 - six and seven what you'll do often times
19:19 - is you'll look through this search list
19:21 - and you'll try to determine
19:22 - obviously we need an equal sign here if
19:24 - the target value is in the search data
19:26 - structure
19:26 - so in this case i would do something
19:28 - like for element in
19:30 - search and then i would check if the
19:32 - element is equal to the target
19:34 - the element is equal to the target i
19:35 - found what i'm looking for so i can
19:37 - break and then maybe i would print
19:38 - something like
19:39 - i found it exclamation point okay now
19:42 - the thing is i don't know if i got out
19:44 - of this for loop because i broke out of
19:45 - it or because i ran out of elements to
19:47 - look through
19:48 - so what a lot of people do is something
19:49 - like this they will say found is
19:51 - equal to false and then they can say
19:54 - found is equal to true
19:55 - and now outside of here i can check if
19:58 - found and i can maybe do something like
19:59 - if
20:00 - not found print
20:03 - i didn't find it exclamation point okay
20:07 - so that's what people usually do however
20:08 - there is a way to actually make this
20:10 - faster
20:11 - shortcut right what i can do instead is
20:13 - i can simply place an
20:15 - else statement here now what the else
20:16 - statement will do is it will be
20:18 - triggered
20:18 - if we get through the entire for loop
20:20 - without breaking
20:22 - so in this situation if i get rid of
20:24 - found here
20:25 - and i run this notice we get i found it
20:28 - because well
20:28 - we found it the else was not triggered
20:30 - we broke out of the for loop
20:32 - however if i make this target now eight
20:34 - and i run this we get i didn't find it
20:36 - because i didn't break out of the for
20:38 - loop
20:38 - there you go that's as simple as it is
20:40 - the else triggers if you don't break out
20:42 - otherwise it doesn't trigger if you
20:43 - break out you just escape it
20:45 - okay now you can do the same thing with
20:47 - a while loop so i will say
20:49 - well that's not going to work
20:52 - we could say well i is less than
20:55 - the len of search
20:59 - i is equal to 0. obviously a for loop is
21:01 - better for this purpose and i could say
21:03 - element is equal to search at i
21:07 - and while the same thing is going to
21:08 - work assuming i increment i
21:11 - uh oops i plus equals one i forgot what
21:13 - programming language we're writing in
21:15 - here for a second
21:16 - okay i didn't find it so same thing
21:17 - works with a four and a while loop
21:19 - that is all i want to show you the four
21:21 - else and while elsa statement all right
21:23 - so the next shortcut i have to show you
21:24 - is called sort by key and it is going to
21:26 - be relatable for you if you are trying
21:28 - to sort something that is relatively
21:29 - advanced or your search
21:30 - sorting criteria sorry is not default
21:33 - like you're not sorting in ascending or
21:34 - descending order
21:35 - what you're sorting by is something
21:37 - unique that the built-in python function
21:39 - just doesn't do
21:40 - so let me show you if i were to sort
21:42 - this list so lst.sort this will sort the
21:45 - list in place
21:46 - and i print lst what do you think is
21:47 - going to sort it by well it sorts it by
21:50 - the first element
21:51 - inside of the nested list that makes
21:53 - sense that's intuitive so we get
21:54 - negative one
21:55 - one two three four and four however what
21:58 - if i want to sort by the second element
22:00 - in the list
22:01 - well there's not really a way to do that
22:03 - i mean i could sort this in reverse i
22:05 - could say
22:06 - reversed equals true
22:09 - and now if i do this reverse equals true
22:12 - maybe
22:13 - it gives it to me in the reverse order
22:15 - however again i want to sort by
22:16 - this second element so i could write my
22:18 - own custom function
22:20 - that sorts this but instead there's
22:22 - actually a way you can do this using the
22:24 - built-in
22:24 - sort method what you do is you pass an
22:27 - argument to this called key
22:28 - now key tells you what it should sort
22:30 - each element inside of the list
22:32 - by so every element inside the list is
22:34 - one of these nested lists so what you
22:36 - need to do here is pass a
22:37 - function that returns what it should
22:40 - sort by
22:41 - for each element so in this case i'm
22:43 - going to say key equals
22:45 - lambda x colon x1 now what is lambda
22:48 - lambda is a one-line anonymous function
22:51 - not really going to explain it too much
22:52 - but essentially x is our parameter for
22:55 - this function
22:56 - and what i'm returning is x1 x1 is going
22:58 - to give me the second element
23:00 - inside of the nested list so if i do
23:02 - this now it's going to sort by the
23:03 - second key
23:04 - or sorry second element so we get 2 2 3
23:08 - 3 4 5. there you go that's as easy as it
23:11 - is
23:12 - now you can make this more advanced if
23:13 - you want i could sort it by x1
23:16 - plus x0 and now we'll sort it by the sum
23:19 - of the the values in this list so if i
23:21 - do this here
23:22 - we get this is the lowest then three
23:24 - then five then
23:25 - six then seven and then nine makes sense
23:29 - now in case the lambda is confusing any
23:30 - of you
23:31 - it's the exact same as doing this so i
23:33 - can define say sort underscore function
23:36 - this is going to take in x and i'm going
23:37 - to return x0
23:40 - plus x1 now instead of passing the
23:42 - lambda what i would do is pass the sort
23:44 - underscore function
23:45 - it's going to then return x0 plus x1 and
23:48 - then it will sort
23:49 - based on this key that we've put here so
23:51 - this will give us the exact
23:52 - same thing hopefully that makes sense
23:54 - but a useful feature this works not only
23:56 - inside of the dot sort
23:58 - it works inside of the sorted as well i
24:00 - can pass lst and then key equals and
24:02 - anything that sorts in python you can
24:04 - usually pass this key parameter
24:05 - all right so that was all of the
24:06 - shortcuts that i wanted to show you but
24:08 - if you stuck around until this point i'm
24:10 - going to give you a bonus shortcut this
24:12 - is called
24:12 - eatertools now itotools is a very cool
24:15 - module in python that allows you to do
24:17 - iteration related operations and can
24:19 - save you a ton of time a lot of stuff
24:21 - you normally do manually you can
24:22 - probably just take
24:23 - right from inner tools i'm just going to
24:25 - give you a few very short examples here
24:27 - of what eater tools can do and then of
24:28 - course you can look up the documentation
24:30 - on your own
24:30 - so first there's this function from
24:32 - either tools called accumulate what this
24:34 - will do is accumulate the sums
24:35 - of the values in order or in sequence
24:38 - from
24:39 - this list i probably misdescribed that
24:40 - we just have a look at what we get here
24:42 - when i do this notice i get the sum of
24:44 - the first element which is one then the
24:45 - sum of the first and the second element
24:47 - which is
24:47 - three then the sum of the first three
24:49 - elements which is six then the first
24:51 - four which is ten and then finally
24:52 - fifteen
24:53 - that is accumulate from iter tools the
24:56 - next thing i'm gonna show you is called
24:58 - chain so let's have a look at this
25:00 - pretty straightforward but what chain
25:01 - will do is combine
25:02 - the two lists that you have into one
25:05 - list
25:06 - without actually creating a new list
25:08 - such that you can iterate through it
25:09 - so all of these iter tools related stuff
25:11 - they usually return to an iterator
25:13 - now if you're not familiar with the
25:15 - difference between an iterator and a
25:16 - data structure
25:17 - an iterator is something that allows you
25:19 - to iterate through something it doesn't
25:21 - necessarily
25:22 - create a data structure so in this case
25:24 - when i chain
25:25 - two lists together i'm chaining list one
25:27 - and list two
25:28 - this returns an iterator that i can loop
25:30 - through that doesn't necessarily
25:32 - create a new data structure that has
25:35 - list and list two together
25:37 - the reason that's important is because
25:38 - if you were to create that data
25:39 - structure using up more memory in your
25:41 - program more space in ram
25:43 - so rather than actually creating it
25:45 - which you and i would usually do if we
25:46 - want to loop through both of these
25:48 - and have them kind of combined together
25:50 - you can just use dot chain
25:51 - and well it just works hopefully that
25:53 - was a decent explanation but
25:55 - let me run this and show you so when i
25:56 - chain this i get 1 2 3 4 5
25:58 - a b c d now in this case since i
26:00 - converted this iterator to a list
26:02 - it did create a list but you could loop
26:04 - through this in a for loop and it
26:05 - wouldn't actually create the data
26:07 - structure for you it would use the two
26:08 - existing data structures
26:10 - and loop through them in the correct
26:11 - order okay that is
26:13 - uh the chain now the last one i will
26:15 - show you here is called compress
26:17 - what compress will do is it will only
26:19 - give you the values that correspond with
26:21 - a true condition
26:23 - in another list a little bit confusing
26:25 - but look here i'm compressing names and
26:27 - show
26:28 - names is a list of names strings show is
26:30 - some boolean values so one is true zero
26:32 - is false okay
26:33 - if this in this case here when i run
26:35 - this and you look at this i get
26:37 - tim bill gen notice tim corresponds with
26:39 - one bill corresponds with one
26:41 - gen corresponds with one it doesn't give
26:42 - me joe and it doesn't give me susan
26:45 - because here we have zero so that's a
26:47 - false right this is imagine these are
26:49 - just true and false
26:50 - that's what compressed does again
26:51 - doesn't necessarily create the data
26:53 - structure for you
26:53 - allows you to iterate through it but
26:55 - since we're converting it to a list so
26:57 - we can see what it's actually returning
26:58 - in this case it does create the
27:00 - structure all right i don't want to get
27:01 - into those in too much detail
27:02 - just wanted to introduce this to you in
27:04 - case any of you have not seen it i may
27:05 - actually be making a tutorial on it in
27:07 - the future
27:08 - but with that said i'm going to end the
27:10 - video here i tried to go pretty fast so
27:12 - that i didn't waste any of your time if
27:13 - you guys enjoyed the video make sure to
27:14 - leave a like
27:15 - subscribe to the channel i will see you
27:17 - in another one
27:20 - [Music]

Cleaned transcript:

hello everybody and welcome back in this video i'm going to be showing you 10 python shortcuts that you need to know none of these shortcuts are advanced they are simply python language features that save you a few lines of code and a little bit of time these things may exist in other programming languages but most of them are specific to python and well if you write in python a fair amount this is definitely something worth watching and shortcuts worth remembering so with that said the first thing that you need to know is actually the sponsor of this video thanks to career karma for sponsoring this video career karma is a platform that helps connect learners like you to amazing boot camps and courses that prepare you for jobs in tech i've worked with career karma in the past and share their mission of inspiring motivating and helping others get started with their tech careers if you're looking to start your career in tech as a web developer data scientist ui ux designer whatever it may be then career karma can help you in your journey and get you into some great boot camps boot camps are the fastest way to quickly switch to a tech career that affords a sixfigure salary work from home flexibility and high job satisfaction on the career karma app you can join live audio rooms and speak to people like me in fact i just did a live audio room the other day and it was a great experience to get started download the career karma app from the app store or click the link in the description where the first 1000 of my subscribers will get exclusive access to a free coaching session with the career karma coach thanks again to career karma for sponsoring this video alright so let's go ahead and dive in the first shortcut i have to show you is called f strings now f strings only work in python version 3.6 and above but they simply allow you to embed python expressions or variables inside of a string without having to use concatenation or string formatting or any other method you may use so for example let's say we have some variable and it is called name it is equal to tim let's say we then want to print out hello and then whatever the value of the name variable is to the screen well a few ways we could do this would be the following we could print something like hello comma name that would work we could print something like hello space plus name and that would work or we could use an f string which just makes things a lot easier and f string is simply a lowercase or uppercase f followed by a string either double quotes single quotes or triple quotes in either single or double quotation marks and then inside of the f string you can simply write any python expression or variable inside of curly braces and it will be evaluated as a string so if i print hello name like that let's just remove this we can see that this actually works we get hello tim now the great thing is when you have complicated strings that are using variables or expressions you can add stuff before and after the f string or sorry before and after the expression you can embed multiple expressions so i can do something like name times two and then i get hello tim tim i could even do some basic addition maybe two plus three like that i could write maybe a list inside of here right i could do something like one two three and then that gets displayed as a list there's a lot you can do with f strings again it's a lowercase or uppercase f only works in python version 3.6 or above and in my opinion is a shortcut to create a string now lastly you also could do something like x is equal to and then do that you don't have to be printing the f string and then i could obviously print this string so print x and you get the same thing all right that is shortcut number one let's move on to number two so moving on to shortcut number two i have for you unpacking now unpacking is extremely useful and essentially what this means or what this allows you to do is assign variables to all of the values inside of some type of collection in python so a collection in python could be something like a list like a dictionary like a string those are all examples of collections and what you can do is something like the following so see here inside of top standing for tuple i have five values one two three four five let's say i wanted to assign all of those values to variables well i could do something like a equals top at index zero and then b equals top at index one so on and so forth but that's pretty uh repetitive and i don't really want to write that so instead what i could do is a comma b comma c comma d comma e is equal to top and when i do that python knows to automatically assign a equal to 1 b equal to two c equal to three so on and so forth and to prove this to you i can just print them all out so if i do this you see we get one two three four five so you can do that with pretty much any collection i can also do this with my list so lst notice that works as well i could do this with my string so let's go ahead and do that i get hello well all spaced out hello i can do this with my dictionary so let's change this to just be a b and then dic okay a b like that notice this works notice when i do this with a dictionary it gives me the keys it does not give me the values if i wanted the values i would do or sorry items i would do dick dot actually not items dot values and then that's going to give me the values and if i did items you'll actually see what we get here we will get tuples so a1 b2 a is obviously the key 1 is the value b is the key 2 is the value so works with that and then a very common way or reason people use this is you have something like coordinates and you want to unpack them into x y so you can see i have my chords here 4 5 x y and then i go x comma y and well there you go i've unpacked this collection that's pretty much it for how unpacking works pretty simple but definitely very useful and saves you from having to write out a bunch of different variables on a bunch of different lines you can simply unpack the collection in this fashion one last thing to note is that if you have something like x y z equals chords you're gonna get an error because it cannot unpack there's not enough values here to unpack into these three variables all right let's move on to shortcut number three so i don't really have a proper name for this one but i'm going to call it multiple assignment or variable swap but essentially this shortcut allows you to assign multiple variables on the same line this is common in other programming languages but i figured i'd show it here in python so for example let's say i have a width and a height i can define them like this 400 500 so rather than having to write two lines width equals 400 and height equals 500 i can simply do it on one line so that's great but the more useful aspect of this feature is that i can actually swap the values of variables in one line as well so in other programming languages if you wanted to swap the value of width and height what you would have to do is something like this temp is equal to width width is equal to height and height is equal to temp because you need some way to store the value after you reassign this variable because once i assign width equal to height i lose the value for width and so i need to store it in this temporary variable so instead of having to do that in python what you can simply do is say width and then comma height is equal to height comma width and just to show you that i'm not lying here i can print the width and the height let's delete all of this and you should see that we get 500 400 because we have swapped the width and the height so that's it for this you can obviously do this with multiple values as well so even this inline swap i could say with comma height comma x and then i don't know maybe make this like 5 or something and well that still works all right so with that said let's move on to the next shortcut all right so moving on to one of the more useful and popular python shortcuts we have comprehensions now a comprehension is a way to initialize or create some type of collection in python in one line so let me just show you with a list first and then i'll show you with some other collections so here we have a list and i want to initialize this list with some values let's say i want to fill it with zeros maybe i want to fill it with a hundred zeros well i could write a for loop i could say 4i in range a hundred and then say x dot append zero but this is not the pythonic way to do this the pythonic way to do it is the following zero for i in range a hundred when you do this it is going to put whatever is on the left of the for statement inside of the list however many times this is running so in this case if i print out x now we see we get a list filled with a hundred zeros now of course i could use the value i here so i for i and range 100 now i get a list that goes up to 99 starting at zero and if i wanted to get even more advanced i could add an if statement here so i for i in range 100 if i mod 2 is equal to 0. now we're only going to get the even numbers plus 0 inside of here i could add another for loop so i could say 4 and j in range 10 and then maybe i do the product of i times j now if i do this obviously i get a large list but you can see where i'm going with this and how advanced you can really make this of course you can do a nested list comprehension as well i could do a list inside of here and say zero for underscore in range five for underscore in range five this will create a twodimensional array for me so here you can see now we have an array or a list inside of a list if you're curious what the underscore is you can simply use an underscore instead of a variable name if you're not going to actually use the variable or iterator for your for loop and yeah that's pretty much how you use or do a list comprehension now of course you don't only have to do a list comprehension you could do this with a dictionary a tuple other data structures i'll quickly show you so what i'm actually going to do here is create something known as a generator you don't have to know what that is but that's why you'll see some weird output in a second so i'm going to say i 4i in and let's just go with hello and now notice i get a generator object don't worry about what that is but if i convert this to a list you can see that i get hello so this does work with tuples as well or sorry i could just convert this to a tuple and then i get that in a tuple nice okay uh other than that i could do this with a dictionary so a useful thing we can do with the dictionary is say count all of the characters in a word so let's say i have a word which is equal to hello my name is tim i understand this isn't a word but we can just change this to sentence what i can do now is something like char colon and then sentence dot count char or char in the set of the sentence this might seem a little bit complicated but i'm getting all of the unique letters from the sentence i'm looping through them and then for every single one of those letters i'm counting how many times they occur inside of the sentence not the most efficient way to do this but this will give me the frequency of these characters in the sentence so if i do this now you can see i am getting that from this dictionary comprehension all right i'm going to end it there you can do this with a few other collections as well let's move on to the next shortcut the next shortcut i have for you is a simple one this is object multiplication this simply allows you to multiply objects in python when i say objects i don't just mean numbers i mean strings lists etc so let me show you so a very popular thing to do is to multiply a string so let's say i have a string hello maybe i want to multiply this by 5. well you can guess what the result is going to be well we get hello five times so that's what i'm talking about here now of course you can multiply a list as well so one two three times five i get one two three five times in the same list we can multiply a nested list if we wanted to do that one two three and then we get the nested list inside of the larger list i could of course do this with a tuple as well so let's just go one two times five of course you can make this a larger number now if you try to do this with two tuples or something you'll see that a few things i just showed you list tuples and strings definitely are multipliable in python the next shortcut i have for you is very popular in most programming languages in javascript they have this in other programming languages they have this and this is the ternary or in line operator slash condition slash if statement so what i mean by this is the following in python you can do something like this x is equal to and then i could say maybe 1 if 2 is greater than 3 else 0 and if i print the value of x well you're going to see we get what we would expect here so you can put some type of condition you put what you want to occur or what you want to be assigned to the variable on the left hand side of the if statement and then what you want to happen if this is not the case after the else so whenever you do this you do need an else notice if i go like here and i don't add an else we get invalid syntax you must have an else pretty straightforward that's what it is now in javascript the parallel here would be this x is equal to uh two greater than three question mark one colon zero so you're putting the condition first then you're putting what occurs if this condition is true otherwise you are putting what happens otherwise right if this condition is false so pretty straightforward but this can be useful if you want to not have to actually write the entire if statement obviously if i wanted to write this out i would have to do something like if two is greater than three x equals one else colon x equals zero so you can see this saves you quite a few lines of code and just looks a bit cleaner and definitely has its place in python programs the next shortcut i have for you in python is the zip function so i'll write it out right here but it looks like this what this will do is combine lists or collections together so usually you can iterate through them at the same time now before i iterate through them i'll just show you exactly what this does and you'll see why it's useful i'm going to print the list of the zip of the names ages and i underscore color notice how tim corresponds with 21 and blue joe corresponds with 19 and brown so on and so forth all of these kind of correspond with each other at the corresponding indexes if i print this out notice that we get tuples that are combining all three of these things so tim 21 blue joe 19 brown so on and so forth that's what the zip function does now of course i can do this with less things just names and ages now if i run this we just get the name and the age i could of course do this with just the names and the eye color like that and then i just want to show you what happens if you have too many elements in one of your lists so here let's just say i add an extra element so this has four this has four this has five now i'm trying to zip something that has four elements and five elements watch what happens nothing no error it simply skips or doesn't consider this last element or extra element in this eye color list so why is this useful well a lot of times you want to loop through the zip of lists so rather than looping through them and using the index to access the elements what you can do is set is something like this so for let's go name age in zip names ages and then i could simply do something like if the age is greater than 20 print the name and then i get tim and i get sally printing out so that's kind of where this would become useful of course i could add in the eye color as well i would just need to add i underscore color let's change that to colors and then i could just print the i underscore color no matter what so there you go that is zip pretty useful and yeah definitely just cleans up the program a little bit so the next shortcut i have for you is a little bit more advanced but this is star args and star star quarks now arg stands for arguments positional arguments specifically and quarks stands for key word arguments now positional argument is one in which position matters so if you look at this arg1 arg2 arg3 when i call this function the first value i pass in will be arg1 the second arg2 the third arg3 hence they are positional the position in which i pass the arguments matters whereas if you look at this function right here these are keyword arguments which means i could call this function like this func two arg2 equals x whatever i could do arg1 equals that i don't even need to pass these arguments and i can pass them in any order that i want whereas up here i need to pass all of them and i need to pass them in a specific order so what is star args and star star quarks well let's say i have a list that has all of the arguments i want to pass to a function or some collection maybe a tuple maybe a string that has all the stuff i want to pass to a function well the way that i can do this is something like this right i could go func one and then i could say args at index zero and then args at index one or i could decompose this right or break this down unpack it and have you know abc equals args then pass abc right here but there is a much faster way to do this what i can actually do is write star args now what star args will do is unpack this and split this into all of the three individual items so you can kind of imagine that star args removes this list right here and passes the values one two three like that as positional arguments to this function so when i go star args you will see here that i get one two three printing out now obviously let's just change this two two three it shows two two three now one of the best ways to visualize star args is to do the following if i print args notice we get a list if i print star args notice i get 2 2 3. the reason for that is all three of these values are passed as arguments to the print function so i print two then i print to then i print three so it would look like two two three inside of here when you do star arcs hopefully that's clear but that's what you can do with positional arguments great now when you have keyword arguments it's a little bit different so notice what happens here if i pass to func 2 quarks okay so we're looking at funct2 and we're looking at our keyword arguments right here if i do one asterisk and i pass quarks notice i'm printing out arg2 arg1 and arg3 the reason for that is i am actually passing these as positional arguments and specifically i am passing the keys in my dictionary as positional arguments to this function so arg one is actually equal to the string arg2 arg2 is equal to the string arg1 you can read the output and you can see what they're equal to that's because we're just passing the keys as positional arguments however if i do two asterisks this will actually pass the key as the argument name and or parameter name whatever you want to call it and then the value as the value for that argument or parameter so in this case we'll pass arg2 equals two our one equals one and we should get things printing out in the correct order now because we're passing the correct keyword arguments so to break this down for you as well what this would look like is arg2 is equal to two arg one is equal to one and then arg3 is equal to three that's what it looks like when you do star star quarkx like that all right so a little bit more advanced that's where i'll leave it though also note that you can do something like star args and let's go here star star wargs in the parameters but i'm not going to show that in this video so the next shortcut i have for you is one that many people do not know about and this is the four else or while else statement now what this allows you to do is determine if you broke out of a for loop or a while loop without having to use a flag so let me show you a classic example here let's say we have some target value let's say this target is equal to seven let's say we have some search array or search list and let's just give it some numbers okay one two three four five six and seven what you'll do often times is you'll look through this search list and you'll try to determine obviously we need an equal sign here if the target value is in the search data structure so in this case i would do something like for element in search and then i would check if the element is equal to the target the element is equal to the target i found what i'm looking for so i can break and then maybe i would print something like i found it exclamation point okay now the thing is i don't know if i got out of this for loop because i broke out of it or because i ran out of elements to look through so what a lot of people do is something like this they will say found is equal to false and then they can say found is equal to true and now outside of here i can check if found and i can maybe do something like if not found print i didn't find it exclamation point okay so that's what people usually do however there is a way to actually make this faster shortcut right what i can do instead is i can simply place an else statement here now what the else statement will do is it will be triggered if we get through the entire for loop without breaking so in this situation if i get rid of found here and i run this notice we get i found it because well we found it the else was not triggered we broke out of the for loop however if i make this target now eight and i run this we get i didn't find it because i didn't break out of the for loop there you go that's as simple as it is the else triggers if you don't break out otherwise it doesn't trigger if you break out you just escape it okay now you can do the same thing with a while loop so i will say well that's not going to work we could say well i is less than the len of search i is equal to 0. obviously a for loop is better for this purpose and i could say element is equal to search at i and while the same thing is going to work assuming i increment i uh oops i plus equals one i forgot what programming language we're writing in here for a second okay i didn't find it so same thing works with a four and a while loop that is all i want to show you the four else and while elsa statement all right so the next shortcut i have to show you is called sort by key and it is going to be relatable for you if you are trying to sort something that is relatively advanced or your search sorting criteria sorry is not default like you're not sorting in ascending or descending order what you're sorting by is something unique that the builtin python function just doesn't do so let me show you if i were to sort this list so lst.sort this will sort the list in place and i print lst what do you think is going to sort it by well it sorts it by the first element inside of the nested list that makes sense that's intuitive so we get negative one one two three four and four however what if i want to sort by the second element in the list well there's not really a way to do that i mean i could sort this in reverse i could say reversed equals true and now if i do this reverse equals true maybe it gives it to me in the reverse order however again i want to sort by this second element so i could write my own custom function that sorts this but instead there's actually a way you can do this using the builtin sort method what you do is you pass an argument to this called key now key tells you what it should sort each element inside of the list by so every element inside the list is one of these nested lists so what you need to do here is pass a function that returns what it should sort by for each element so in this case i'm going to say key equals lambda x colon x1 now what is lambda lambda is a oneline anonymous function not really going to explain it too much but essentially x is our parameter for this function and what i'm returning is x1 x1 is going to give me the second element inside of the nested list so if i do this now it's going to sort by the second key or sorry second element so we get 2 2 3 3 4 5. there you go that's as easy as it is now you can make this more advanced if you want i could sort it by x1 plus x0 and now we'll sort it by the sum of the the values in this list so if i do this here we get this is the lowest then three then five then six then seven and then nine makes sense now in case the lambda is confusing any of you it's the exact same as doing this so i can define say sort underscore function this is going to take in x and i'm going to return x0 plus x1 now instead of passing the lambda what i would do is pass the sort underscore function it's going to then return x0 plus x1 and then it will sort based on this key that we've put here so this will give us the exact same thing hopefully that makes sense but a useful feature this works not only inside of the dot sort it works inside of the sorted as well i can pass lst and then key equals and anything that sorts in python you can usually pass this key parameter all right so that was all of the shortcuts that i wanted to show you but if you stuck around until this point i'm going to give you a bonus shortcut this is called eatertools now itotools is a very cool module in python that allows you to do iteration related operations and can save you a ton of time a lot of stuff you normally do manually you can probably just take right from inner tools i'm just going to give you a few very short examples here of what eater tools can do and then of course you can look up the documentation on your own so first there's this function from either tools called accumulate what this will do is accumulate the sums of the values in order or in sequence from this list i probably misdescribed that we just have a look at what we get here when i do this notice i get the sum of the first element which is one then the sum of the first and the second element which is three then the sum of the first three elements which is six then the first four which is ten and then finally fifteen that is accumulate from iter tools the next thing i'm gonna show you is called chain so let's have a look at this pretty straightforward but what chain will do is combine the two lists that you have into one list without actually creating a new list such that you can iterate through it so all of these iter tools related stuff they usually return to an iterator now if you're not familiar with the difference between an iterator and a data structure an iterator is something that allows you to iterate through something it doesn't necessarily create a data structure so in this case when i chain two lists together i'm chaining list one and list two this returns an iterator that i can loop through that doesn't necessarily create a new data structure that has list and list two together the reason that's important is because if you were to create that data structure using up more memory in your program more space in ram so rather than actually creating it which you and i would usually do if we want to loop through both of these and have them kind of combined together you can just use dot chain and well it just works hopefully that was a decent explanation but let me run this and show you so when i chain this i get 1 2 3 4 5 a b c d now in this case since i converted this iterator to a list it did create a list but you could loop through this in a for loop and it wouldn't actually create the data structure for you it would use the two existing data structures and loop through them in the correct order okay that is uh the chain now the last one i will show you here is called compress what compress will do is it will only give you the values that correspond with a true condition in another list a little bit confusing but look here i'm compressing names and show names is a list of names strings show is some boolean values so one is true zero is false okay if this in this case here when i run this and you look at this i get tim bill gen notice tim corresponds with one bill corresponds with one gen corresponds with one it doesn't give me joe and it doesn't give me susan because here we have zero so that's a false right this is imagine these are just true and false that's what compressed does again doesn't necessarily create the data structure for you allows you to iterate through it but since we're converting it to a list so we can see what it's actually returning in this case it does create the structure all right i don't want to get into those in too much detail just wanted to introduce this to you in case any of you have not seen it i may actually be making a tutorial on it in the future but with that said i'm going to end the video here i tried to go pretty fast so that i didn't waste any of your time if you guys enjoyed the video make sure to leave a like subscribe to the channel i will see you in another one
