With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome back to the
00:10 - slack
00:11 - python bot tutorial so in today's video
00:13 - what we're going to be doing is actually
00:15 - sending markdown text and some more
00:17 - nicely formatted messages
00:19 - into our slack channel now the specif
00:22 - specific example story that we're going
00:23 - to be doing in this video
00:25 - is actually sending a welcome message
00:27 - that has a task that the user needs to
00:29 - complete so in this case we're going to
00:30 - ask the user to react to a message
00:33 - so you can kind of think of this as like
00:34 - you know like well welcoming the user
00:36 - giving them
00:37 - information about slack and the things
00:38 - that they can do so we'll say hey you
00:40 - know react to this message
00:42 - and then as soon as they actually make a
00:43 - reaction to that message
00:45 - what we'll do is we'll change the
00:46 - message that shows a check mark next to
00:48 - that task they needed to complete
00:50 - now of course you can extend this and
00:52 - make this you need to complete more
00:53 - tasks but this will show you how we can
00:55 - modify messages how we can handle
00:56 - reactions and how we can send mark down
00:58 - text so let's go ahead and get started
01:02 - first thing i'm going to do here is set
01:04 - up a class that can actually
01:05 - kind of handle this for us the idea
01:07 - behind this
01:08 - is that we may have multiple users
01:10 - coming into the channel right so we need
01:12 - to make sure
01:13 - that these welcome messages are working
01:15 - for each of these users right and then
01:16 - we're going to send that welcome message
01:18 - as a dm so a direct message
01:20 - i'll show you how we can do that again
01:21 - the first thing that i'm going to do is
01:23 - create class and i'm going to call this
01:25 - welcome message
01:26 - pretty straightforward actually i don't
01:28 - need the brackets there now the first
01:30 - thing i'll do is i'll define an init
01:31 - method
01:32 - and what we're going to need to take
01:33 - here is we're going to need to take the
01:35 - channel
01:35 - and the user the reason for this is that
01:38 - we need to keep track of what
01:39 - channel this welcome message was sent
01:41 - into and what user it was sent to as
01:43 - well
01:44 - now inside of here what i'm going to do
01:45 - is go self.channel equals channel
01:48 - we'll say self.user equals user and
01:50 - we'll define a few other things as well
01:51 - that we're going to use
01:52 - so in this case i'm actually going to
01:54 - show us how we can add an emoji as the
01:56 - icon beside our bot so we'll say the
01:58 - icon emoji is going to be equal to
02:01 - in this case robot underscore face now
02:03 - if you're not familiar
02:05 - the two colons surrounding a word is the
02:07 - uh
02:08 - like i don't know denoting the fact that
02:10 - it's an emoji so you could put like you
02:12 - know a smiley face or blush
02:13 - blush face or whatever the other emojis
02:15 - are inside of these colons and then that
02:17 - would show up as an emoji inside of
02:19 - slack
02:20 - you can test it out in slack and you'll
02:21 - see what the different emojis are
02:23 - next we're going to say timestamp equals
02:26 - blank
02:26 - we'll update this when we send the
02:28 - original message the reason for this is
02:30 - that since we are going to potentially
02:31 - be updating this message which will be
02:33 - stored in this class
02:34 - we want to know what time it was sent at
02:37 - so that we can then
02:37 - update that time later on to the new
02:40 - time that that message was edited at if
02:41 - that makes sense
02:42 - next we're going to say self.completed
02:46 - equals and we're going to go ahead and
02:48 - make that false now this is just to keep
02:50 - track of whether or not the user has
02:52 - completed the task
02:53 - that will tell us whether or not we're
02:54 - going to show a check mark or whether
02:55 - we're going to show like an empty box
02:57 - beside the task
02:58 - now above this what i'm going to do is
03:00 - to find two variables
03:02 - that are going to be the markdown text
03:03 - that's going to be a part of our message
03:05 - so i'm going to say start underscore
03:08 - text
03:09 - equals and i'm actually going to make
03:11 - sorry curly brackets here
03:13 - i'm going to define the type here as a
03:15 - section
03:16 - you'll see what that does in a second
03:18 - but you can have a bunch of different
03:19 - types for your
03:20 - i don't know sections i guess or or the
03:23 - different parts of the message that
03:24 - you're going to be sending so i'll say
03:25 - type
03:26 - equals section next i'm going to say
03:28 - text
03:29 - and then this is going to be equal again
03:30 - to another set of curly brackets
03:32 - here inside of here we're going to
03:33 - define the type of this
03:35 - text by default i believe it's like
03:37 - utf-8 or just
03:38 - text right in this case we're actually
03:40 - going to make this markdown
03:42 - to make this markdown we're going to do
03:44 - mrkdwn
03:45 - if you're not familiar with markdown
03:46 - that allows us it's like what you would
03:48 - use on github to make a dot
03:50 - md file so like you know your welcome
03:52 - file on github
03:53 - uh you can add you know i guess what is
03:55 - it like the pound sign
03:57 - and like a bunch of other stuff to the
03:59 - markdown file so it's like formatted
04:01 - text
04:01 - next what i'm going to do is say text
04:04 - now this is going to seem strange but
04:05 - i'm just going to open up some
04:06 - parentheses here just so i can put this
04:08 - text on multiple lines
04:10 - important here make sure you don't
04:11 - separate these two things by commas
04:14 - it's just important that you don't do
04:15 - that but you'll see why so i'm going to
04:17 - start by saying
04:18 - welcome to this awesome
04:21 - channel and we'll do backslash n
04:25 - backslash n so a new line two times and
04:28 - then in bold
04:29 - i'm going to say so that's two asterisks
04:31 - for bold and markdown
04:32 - get started oops by
04:36 - completing the tasks all right so that's
04:40 - going to be our start
04:40 - text next i'm going to make a divider
04:43 - the divider is simply going to be the
04:45 - curly brackets
04:46 - inside of here we're just going to say
04:48 - type and then colon
04:49 - dividers this is another example one of
04:51 - the types that we can use
04:52 - now all of this will kind of be broken
04:54 - down when we actually
04:56 - make this message which you'll see later
04:58 - on but just kind of follow with me for
04:59 - now
04:59 - it's all going to come together next
05:02 - what we're going to do is we're going to
05:02 - say define
05:03 - and then get underscore message what
05:06 - this is going to do is simply return to
05:08 - us
05:09 - the message that's going to use this
05:10 - start text this divider and then
05:12 - something else as well
05:13 - inside of here for right now i'll just
05:15 - return and i'm just going to return that
05:16 - for right now we'll change that later on
05:19 - next we're going to make another method
05:20 - which is an underscore method just
05:22 - meaning this is a private method and
05:24 - that this shouldn't be called from
05:25 - outside of the class that's the
05:26 - convention in python you just prefix it
05:28 - with an underscore
05:29 - we'll do define underscore get and in
05:31 - this case
05:32 - underscore get reaction underscore task
05:35 - so if you can't already guess by the
05:37 - name what this will do is give us the
05:38 - portion of the message that will say hey
05:39 - you know react to this message before
05:41 - you can move on right
05:42 - so inside of here what we're going to do
05:44 - is we're going to say check mark
05:46 - equals now this is going to be an emoji
05:48 - the default emoji is going to be a not
05:51 - wa it's gonna be white underscore large
05:53 - sorry
05:54 - white underscore check underscore mark
05:58 - so that's what we'll do and then we'll
05:59 - say if not
06:01 - self dot completed we'll say check mark
06:05 - equals and then again inside of colons
06:08 - in this case we're going to say white
06:10 - underscore large
06:12 - underscore box uh sorry not box
06:15 - square very close so this is just going
06:17 - to be like you know a little box and
06:19 - then the check
06:20 - mark will be replacing that box if this
06:22 - task is complete
06:23 - next what we'll do is we'll say text
06:25 - equals an f string
06:27 - inside of the f string we're going to
06:28 - say check mark that's going to be the
06:30 - prefix and then we'll say
06:31 - in bold react to
06:34 - this message exclamation point
06:38 - and finally we're going to return what's
06:40 - going to seem kind of strange it's going
06:41 - to be a list
06:43 - inside of this list we're simply going
06:44 - to have one element this is going to be
06:46 - type
06:47 - colon section comma
06:50 - and text colon and then we need the type
06:54 - in this case you can guess this is going
06:56 - to be marked down again because we're
06:57 - using those
06:58 - asterisks for the bold so we'll say
07:01 - markdown
07:02 - and then finally comma text colon text
07:06 - i understand the syntax is a little bit
07:07 - confusing but just kind of follow along
07:08 - with it this is the basic structure
07:10 - i will leave a link down below someone
07:13 - remind me because i'll probably forget
07:15 - to how you actually find what this
07:16 - should look like all right so now that
07:18 - we have that let's start building out
07:20 - the final message which is going to use
07:21 - all of these different things
07:23 - and then we'll send it in the channel
07:24 - and see how that works so the first
07:25 - thing we're going to do is we're going
07:26 - to pass a timestamp
07:28 - the timestamp is just ts right so we're
07:29 - going to say self.timestamp
07:32 - next we're going to pass the channel so
07:33 - this would be the channel that we want
07:35 - to send this message in
07:36 - in this case we're going to say
07:38 - self.channel
07:40 - we're going to pass the username now we
07:42 - can set this username to whatever we
07:44 - want so it doesn't need to be the same
07:45 - as our actual
07:46 - app name we can make this whatever we
07:48 - want so i'll just say you know
07:50 - welcome robot because it's going to have
07:53 - that
07:54 - robot emoji and then next we will say
07:56 - icon underscore emoji
07:58 - that will be equal to self dot icon
08:01 - emoji
08:02 - and finally we are going to define the
08:04 - blocks that we want to send
08:06 - now again you'll see how this works in a
08:08 - second but all of these things inside of
08:10 - here are actually keyword arguments
08:12 - to the chat.postmessage
08:16 - or chat underscore post message so you
08:18 - see here we have channel we have text
08:20 - well if you have a look here we have
08:22 - channel we have a few other things that
08:23 - we could
08:24 - actually use just as regular arguments
08:26 - in here right like i could go
08:28 - icon underscore emoji and then i could
08:30 - pass in an emoji
08:32 - but you'll see how we use that in a
08:33 - second just wanted to remind you of that
08:35 - so we'll say blocks
08:36 - now inside of here we're going to say
08:37 - self dot
08:39 - start text comma self dot divider
08:43 - comma asterisk self dot underscore get
08:46 - reaction
08:47 - task now technically what we could do is
08:50 - just remove the list here in fact let's
08:52 - do this to make a little bit simpler
08:53 - then we can remove this asterisk and
08:55 - that's going to prevent me
08:56 - from having to explain why we needed
08:58 - that asterisk there okay so hopefully
08:59 - you caught that sorry i just removed the
09:01 - list from here and just removed the
09:02 - asterisks and had self.reaction task
09:04 - now of course you can assume the blocks
09:06 - are going to happen in the order that we
09:07 - pass them
09:08 - we're going to start by doing the start
09:10 - text then the divider and then
09:11 - the reaction task great now that we have
09:14 - that let's actually send that into a
09:16 - channel
09:17 - now we want to send that only when the
09:19 - user sends us a text that says start
09:22 - so we could technically send this on
09:24 - like when the user joins the server
09:26 - to do that you would need to link up
09:28 - another event here
09:29 - so you'd have an event for like on team
09:32 - join or
09:33 - i think that's what is team join i
09:35 - believe it's team hyphen join
09:37 - and then you can send that message but
09:38 - since i can't rejoin this because i'm
09:41 - like the owner of this workspace
09:43 - i can't show you how that works so i'm
09:45 - just going to show you how we can send
09:46 - this if they send text that is a
09:48 - specific thing
09:49 - so first of all this is going to seem
09:50 - weird but what i need to do is make sure
09:52 - that the user underscore id does not
09:55 - equal
09:55 - none and bot id does not equal user id
10:00 - so what this is going to do is just make
10:01 - sure that the user id
10:03 - is not none and then again that the bot
10:05 - didn't send this message before we go
10:06 - ahead and do whatever is inside of here
10:08 - the reason for this is when we update a
10:10 - message which we'll do later on there is
10:12 - technically no user for that updated
10:14 - message because the bot's updating it
10:16 - i don't know why it works like that i
10:18 - would hope i would have assumed that the
10:19 - bot would be the user but
10:20 - it breaks in that situation so we just
10:22 - need to add this in
10:24 - next what i'm going to do is i'm going
10:25 - to say if text dot
10:27 - lower equals equals and then inside of
10:30 - here
10:30 - i'm going to put start you can put
10:32 - whatever you want but i'm just going to
10:33 - have start be the string that we put in
10:35 - there to do the start message
10:37 - then what we will do is well we can
10:38 - create a welcome message and we can send
10:40 - that
10:41 - now i don't want to just do that i want
10:43 - to do a little bit more of a complex
10:44 - setup here
10:45 - the reason for that is because i need to
10:46 - keep track of all these welcome messages
10:48 - because we could potentially have a
10:49 - bunch of them
10:50 - and i need to update them later on when
10:52 - the user reacts to them so what i'm
10:53 - going to do is make a function
10:54 - i'm going to say define send underscore
10:57 - welcome underscore message
10:59 - like that and this is going to take a
11:01 - channel and this is going to take a user
11:03 - what we'll do inside of here is we'll
11:04 - say welcome equals and we'll make a
11:06 - welcome message
11:08 - we'll pass what was the order the
11:10 - channel and the user great so we'll pass
11:12 - channel and then comma user and then we
11:15 - can actually go ahead and
11:16 - send that message as well as add it to
11:18 - something else
11:19 - so we'll say message equals welcome
11:22 - dot get underscore message remember
11:25 - that's the method we wrote right here so
11:26 - that'll generate the message for us
11:28 - next we'll say response is equal to
11:31 - client
11:32 - dot chat underscore post message i guess
11:35 - i might as well just type it
11:37 - and we'll do astrix asterix message
11:41 - now if you don't know what this is this
11:42 - is um the unpack operator for
11:44 - dictionaries
11:45 - what this will do essentially is take
11:46 - all of these values and it will
11:48 - pretty much rewrite them so it says ts
11:50 - equals self.timestamp
11:52 - channel equals self.channel so if we
11:54 - were to kind of you know decompose this
11:56 - it would go like ts
11:57 - equals and then whatever that was equal
11:59 - to and then channel
12:00 - equals so on so forth so all of the keys
12:03 - are the left-hand side keyword arguments
12:05 - and the right-hand side is all the
12:06 - values hopefully that makes sense
12:08 - don't worry if it doesn't but we're just
12:09 - going to pass all those values in here
12:11 - next we're going to say oops welcome
12:14 - dot timestamp equals and then we're
12:17 - going to say response
12:18 - which is going to be the response from
12:20 - the server with information about our
12:21 - message
12:22 - and in this case we'll do ts all right
12:25 - so we should be good with that
12:26 - and then the next thing we're going to
12:27 - do is we're going to set up a dictionary
12:29 - here
12:30 - outside of message counts now i realize
12:33 - i probably should have put this full
12:34 - screen it looks a little bit nicer
12:35 - but let's go welcome underscore
12:38 - messages equals and then an empty uh
12:41 - dictionary
12:42 - and what we will do is actually add into
12:44 - this dictionary
12:45 - the channel and the user that we sent
12:47 - this welcome message to
12:49 - so we're going to say if the channel
12:52 - not in what is this
12:56 - what did i call this welcome underscore
12:58 - message
12:59 - and let's make this welcome messages so
13:01 - a plural there
13:04 - so if channel is not in welcome messages
13:06 - then we will do is we'll say
13:08 - welcome underscore messages
13:12 - channel equals another dictionary then
13:15 - we will say
13:16 - welcome underscore messages channel
13:20 - user equals and
13:24 - welcome all right so hopefully this
13:26 - makes sense but essentially we're going
13:27 - to store all of the different channels
13:29 - right so all the different channels we
13:30 - would have sent
13:31 - this welcome message into and then for
13:33 - each of those channels we will store
13:34 - each of the users
13:36 - that we potentially sent this welcome
13:38 - message to right so we have
13:39 - each channel which is kind of one main
13:41 - key here and then
13:43 - all of the users inside of that channel
13:45 - will have their own welcome message
13:46 - stored here
13:47 - again we need that for when we react to
13:49 - the message so we can update it and
13:51 - um like rewrite the message like it's
13:53 - like editing the message right
13:55 - okay so we have all of that so now we
13:57 - can use send welcome message so let's
13:58 - say send
13:59 - underscore welcome message let's pass
14:02 - the
14:02 - channel and let's pass the user
14:05 - now i will show us how to send this as a
14:07 - dm for right now it's not going to go as
14:09 - a dm
14:10 - but that's what we can do next and sorry
14:11 - this needs to be channel id
14:13 - and user underscore id okay so i'm
14:15 - hoping this is going to work
14:16 - although i don't have too much
14:17 - confidence i may have messed it up so
14:20 - let's run this here
14:21 - and come on okay there we go let's go
14:24 - over to slack
14:26 - and you can see my youtube bot is here
14:28 - let's type start
14:30 - and there we go we say welcome to this
14:33 - awesome channel
14:34 - the emoji for some reason isn't working
14:35 - i'm going to look into that in a second
14:37 - and then get started by completing this
14:38 - task
14:39 - you see the little box and it says react
14:40 - to this message all right so let's see
14:42 - why that emoji isn't working
14:44 - i have a feeling it's probably just a
14:45 - stupid spelling mistake all right so
14:47 - guys i'm gonna be honest with you i have
14:49 - no idea why that isn't working
14:51 - previously that was working for me so
14:53 - i'm gonna assume for some of you guys
14:55 - that that
14:55 - does work um if it doesn't please let me
14:58 - know i'll look into it and see if i can
15:00 - fix that but essentially this
15:01 - icon should have changed and this name
15:03 - should have changed again
15:04 - no idea why that's not working i've
15:06 - looked at it for a while and can't get
15:07 - it so i'm just
15:08 - going to move on because it's kind of a
15:10 - waste of time if it's just not going to
15:12 - work
15:12 - all right so now what we're going to do
15:13 - is make it so that rather than just
15:15 - sending this in the general chat we'll
15:16 - send this as a direct message
15:18 - actually the first thing we need to do
15:20 - to do that is add the permission to
15:22 - send a direct message so we need to go
15:24 - to oauth and permissions from our api
15:26 - panel here
15:27 - we're going to go to scopes you can see
15:29 - i've been trying to add a few of them to
15:30 - get this to work i just couldn't get it
15:31 - to work
15:32 - while we're here we might as well add
15:33 - reactions read because we're going to
15:35 - need that
15:36 - and then we should add im and i think
15:39 - it's i
15:39 - am right yes start direct messages with
15:41 - people i am right that's what we want
15:43 - so add those two reactions read i am
15:45 - right and then we need to reinstall our
15:47 - app
15:48 - so let's do that we will allow our app
15:50 - to have those permissions
15:52 - now we can go back here to our code and
15:55 - we can modify
15:56 - inside of message here so that rather
15:58 - than sending in that default channel we
16:00 - will send actually back as a direct
16:02 - message
16:02 - now we could send it to the main channel
16:03 - if we want and i already showed you how
16:05 - to do that but to send a direct message
16:06 - is actually really easy
16:08 - all we need to do is simply change the
16:09 - channel to be at
16:11 - so the at symbol and then the user's id
16:14 - so what i can do here is instead of
16:15 - putting channel id
16:16 - and send welcome message i can put an f
16:18 - string and put an at sign and then i can
16:20 - just embed inside of here the user id
16:23 - and what you'll notice now and just keep
16:24 - in mind i already tested this so that's
16:26 - why you'll see this
16:26 - coming up in a second uh what will
16:28 - happen is we'll just send a direct
16:29 - message to this user
16:31 - so let's go back to slack notice this is
16:33 - the one i was sending before
16:35 - let's go back to test here let's go
16:38 - start
16:38 - like that and let's give it a second go
16:41 - to youtube bot and we can see that it
16:43 - sent this message
16:45 - now i think it was sending it twice i
16:46 - think i had some like caching issue so
16:48 - like the request just came in
16:50 - uh but let's try it one more time and
16:51 - just make sure it only comes in once
16:53 - boom we get the dm and there we go so
16:56 - this has been long enough for this video
16:58 - in the next video i will show you how we
16:59 - can handle reactions
17:01 - uh and then yeah how we can you know
17:03 - update that message based on if the user
17:04 - reacts or if they don't

Cleaned transcript:

hello everybody and welcome back to the slack python bot tutorial so in today's video what we're going to be doing is actually sending markdown text and some more nicely formatted messages into our slack channel now the specif specific example story that we're going to be doing in this video is actually sending a welcome message that has a task that the user needs to complete so in this case we're going to ask the user to react to a message so you can kind of think of this as like you know like well welcoming the user giving them information about slack and the things that they can do so we'll say hey you know react to this message and then as soon as they actually make a reaction to that message what we'll do is we'll change the message that shows a check mark next to that task they needed to complete now of course you can extend this and make this you need to complete more tasks but this will show you how we can modify messages how we can handle reactions and how we can send mark down text so let's go ahead and get started first thing i'm going to do here is set up a class that can actually kind of handle this for us the idea behind this is that we may have multiple users coming into the channel right so we need to make sure that these welcome messages are working for each of these users right and then we're going to send that welcome message as a dm so a direct message i'll show you how we can do that again the first thing that i'm going to do is create class and i'm going to call this welcome message pretty straightforward actually i don't need the brackets there now the first thing i'll do is i'll define an init method and what we're going to need to take here is we're going to need to take the channel and the user the reason for this is that we need to keep track of what channel this welcome message was sent into and what user it was sent to as well now inside of here what i'm going to do is go self.channel equals channel we'll say self.user equals user and we'll define a few other things as well that we're going to use so in this case i'm actually going to show us how we can add an emoji as the icon beside our bot so we'll say the icon emoji is going to be equal to in this case robot underscore face now if you're not familiar the two colons surrounding a word is the uh like i don't know denoting the fact that it's an emoji so you could put like you know a smiley face or blush blush face or whatever the other emojis are inside of these colons and then that would show up as an emoji inside of slack you can test it out in slack and you'll see what the different emojis are next we're going to say timestamp equals blank we'll update this when we send the original message the reason for this is that since we are going to potentially be updating this message which will be stored in this class we want to know what time it was sent at so that we can then update that time later on to the new time that that message was edited at if that makes sense next we're going to say self.completed equals and we're going to go ahead and make that false now this is just to keep track of whether or not the user has completed the task that will tell us whether or not we're going to show a check mark or whether we're going to show like an empty box beside the task now above this what i'm going to do is to find two variables that are going to be the markdown text that's going to be a part of our message so i'm going to say start underscore text equals and i'm actually going to make sorry curly brackets here i'm going to define the type here as a section you'll see what that does in a second but you can have a bunch of different types for your i don't know sections i guess or or the different parts of the message that you're going to be sending so i'll say type equals section next i'm going to say text and then this is going to be equal again to another set of curly brackets here inside of here we're going to define the type of this text by default i believe it's like utf8 or just text right in this case we're actually going to make this markdown to make this markdown we're going to do mrkdwn if you're not familiar with markdown that allows us it's like what you would use on github to make a dot md file so like you know your welcome file on github uh you can add you know i guess what is it like the pound sign and like a bunch of other stuff to the markdown file so it's like formatted text next what i'm going to do is say text now this is going to seem strange but i'm just going to open up some parentheses here just so i can put this text on multiple lines important here make sure you don't separate these two things by commas it's just important that you don't do that but you'll see why so i'm going to start by saying welcome to this awesome channel and we'll do backslash n backslash n so a new line two times and then in bold i'm going to say so that's two asterisks for bold and markdown get started oops by completing the tasks all right so that's going to be our start text next i'm going to make a divider the divider is simply going to be the curly brackets inside of here we're just going to say type and then colon dividers this is another example one of the types that we can use now all of this will kind of be broken down when we actually make this message which you'll see later on but just kind of follow with me for now it's all going to come together next what we're going to do is we're going to say define and then get underscore message what this is going to do is simply return to us the message that's going to use this start text this divider and then something else as well inside of here for right now i'll just return and i'm just going to return that for right now we'll change that later on next we're going to make another method which is an underscore method just meaning this is a private method and that this shouldn't be called from outside of the class that's the convention in python you just prefix it with an underscore we'll do define underscore get and in this case underscore get reaction underscore task so if you can't already guess by the name what this will do is give us the portion of the message that will say hey you know react to this message before you can move on right so inside of here what we're going to do is we're going to say check mark equals now this is going to be an emoji the default emoji is going to be a not wa it's gonna be white underscore large sorry white underscore check underscore mark so that's what we'll do and then we'll say if not self dot completed we'll say check mark equals and then again inside of colons in this case we're going to say white underscore large underscore box uh sorry not box square very close so this is just going to be like you know a little box and then the check mark will be replacing that box if this task is complete next what we'll do is we'll say text equals an f string inside of the f string we're going to say check mark that's going to be the prefix and then we'll say in bold react to this message exclamation point and finally we're going to return what's going to seem kind of strange it's going to be a list inside of this list we're simply going to have one element this is going to be type colon section comma and text colon and then we need the type in this case you can guess this is going to be marked down again because we're using those asterisks for the bold so we'll say markdown and then finally comma text colon text i understand the syntax is a little bit confusing but just kind of follow along with it this is the basic structure i will leave a link down below someone remind me because i'll probably forget to how you actually find what this should look like all right so now that we have that let's start building out the final message which is going to use all of these different things and then we'll send it in the channel and see how that works so the first thing we're going to do is we're going to pass a timestamp the timestamp is just ts right so we're going to say self.timestamp next we're going to pass the channel so this would be the channel that we want to send this message in in this case we're going to say self.channel we're going to pass the username now we can set this username to whatever we want so it doesn't need to be the same as our actual app name we can make this whatever we want so i'll just say you know welcome robot because it's going to have that robot emoji and then next we will say icon underscore emoji that will be equal to self dot icon emoji and finally we are going to define the blocks that we want to send now again you'll see how this works in a second but all of these things inside of here are actually keyword arguments to the chat.postmessage or chat underscore post message so you see here we have channel we have text well if you have a look here we have channel we have a few other things that we could actually use just as regular arguments in here right like i could go icon underscore emoji and then i could pass in an emoji but you'll see how we use that in a second just wanted to remind you of that so we'll say blocks now inside of here we're going to say self dot start text comma self dot divider comma asterisk self dot underscore get reaction task now technically what we could do is just remove the list here in fact let's do this to make a little bit simpler then we can remove this asterisk and that's going to prevent me from having to explain why we needed that asterisk there okay so hopefully you caught that sorry i just removed the list from here and just removed the asterisks and had self.reaction task now of course you can assume the blocks are going to happen in the order that we pass them we're going to start by doing the start text then the divider and then the reaction task great now that we have that let's actually send that into a channel now we want to send that only when the user sends us a text that says start so we could technically send this on like when the user joins the server to do that you would need to link up another event here so you'd have an event for like on team join or i think that's what is team join i believe it's team hyphen join and then you can send that message but since i can't rejoin this because i'm like the owner of this workspace i can't show you how that works so i'm just going to show you how we can send this if they send text that is a specific thing so first of all this is going to seem weird but what i need to do is make sure that the user underscore id does not equal none and bot id does not equal user id so what this is going to do is just make sure that the user id is not none and then again that the bot didn't send this message before we go ahead and do whatever is inside of here the reason for this is when we update a message which we'll do later on there is technically no user for that updated message because the bot's updating it i don't know why it works like that i would hope i would have assumed that the bot would be the user but it breaks in that situation so we just need to add this in next what i'm going to do is i'm going to say if text dot lower equals equals and then inside of here i'm going to put start you can put whatever you want but i'm just going to have start be the string that we put in there to do the start message then what we will do is well we can create a welcome message and we can send that now i don't want to just do that i want to do a little bit more of a complex setup here the reason for that is because i need to keep track of all these welcome messages because we could potentially have a bunch of them and i need to update them later on when the user reacts to them so what i'm going to do is make a function i'm going to say define send underscore welcome underscore message like that and this is going to take a channel and this is going to take a user what we'll do inside of here is we'll say welcome equals and we'll make a welcome message we'll pass what was the order the channel and the user great so we'll pass channel and then comma user and then we can actually go ahead and send that message as well as add it to something else so we'll say message equals welcome dot get underscore message remember that's the method we wrote right here so that'll generate the message for us next we'll say response is equal to client dot chat underscore post message i guess i might as well just type it and we'll do astrix asterix message now if you don't know what this is this is um the unpack operator for dictionaries what this will do essentially is take all of these values and it will pretty much rewrite them so it says ts equals self.timestamp channel equals self.channel so if we were to kind of you know decompose this it would go like ts equals and then whatever that was equal to and then channel equals so on so forth so all of the keys are the lefthand side keyword arguments and the righthand side is all the values hopefully that makes sense don't worry if it doesn't but we're just going to pass all those values in here next we're going to say oops welcome dot timestamp equals and then we're going to say response which is going to be the response from the server with information about our message and in this case we'll do ts all right so we should be good with that and then the next thing we're going to do is we're going to set up a dictionary here outside of message counts now i realize i probably should have put this full screen it looks a little bit nicer but let's go welcome underscore messages equals and then an empty uh dictionary and what we will do is actually add into this dictionary the channel and the user that we sent this welcome message to so we're going to say if the channel not in what is this what did i call this welcome underscore message and let's make this welcome messages so a plural there so if channel is not in welcome messages then we will do is we'll say welcome underscore messages channel equals another dictionary then we will say welcome underscore messages channel user equals and welcome all right so hopefully this makes sense but essentially we're going to store all of the different channels right so all the different channels we would have sent this welcome message into and then for each of those channels we will store each of the users that we potentially sent this welcome message to right so we have each channel which is kind of one main key here and then all of the users inside of that channel will have their own welcome message stored here again we need that for when we react to the message so we can update it and um like rewrite the message like it's like editing the message right okay so we have all of that so now we can use send welcome message so let's say send underscore welcome message let's pass the channel and let's pass the user now i will show us how to send this as a dm for right now it's not going to go as a dm but that's what we can do next and sorry this needs to be channel id and user underscore id okay so i'm hoping this is going to work although i don't have too much confidence i may have messed it up so let's run this here and come on okay there we go let's go over to slack and you can see my youtube bot is here let's type start and there we go we say welcome to this awesome channel the emoji for some reason isn't working i'm going to look into that in a second and then get started by completing this task you see the little box and it says react to this message all right so let's see why that emoji isn't working i have a feeling it's probably just a stupid spelling mistake all right so guys i'm gonna be honest with you i have no idea why that isn't working previously that was working for me so i'm gonna assume for some of you guys that that does work um if it doesn't please let me know i'll look into it and see if i can fix that but essentially this icon should have changed and this name should have changed again no idea why that's not working i've looked at it for a while and can't get it so i'm just going to move on because it's kind of a waste of time if it's just not going to work all right so now what we're going to do is make it so that rather than just sending this in the general chat we'll send this as a direct message actually the first thing we need to do to do that is add the permission to send a direct message so we need to go to oauth and permissions from our api panel here we're going to go to scopes you can see i've been trying to add a few of them to get this to work i just couldn't get it to work while we're here we might as well add reactions read because we're going to need that and then we should add im and i think it's i am right yes start direct messages with people i am right that's what we want so add those two reactions read i am right and then we need to reinstall our app so let's do that we will allow our app to have those permissions now we can go back here to our code and we can modify inside of message here so that rather than sending in that default channel we will send actually back as a direct message now we could send it to the main channel if we want and i already showed you how to do that but to send a direct message is actually really easy all we need to do is simply change the channel to be at so the at symbol and then the user's id so what i can do here is instead of putting channel id and send welcome message i can put an f string and put an at sign and then i can just embed inside of here the user id and what you'll notice now and just keep in mind i already tested this so that's why you'll see this coming up in a second uh what will happen is we'll just send a direct message to this user so let's go back to slack notice this is the one i was sending before let's go back to test here let's go start like that and let's give it a second go to youtube bot and we can see that it sent this message now i think it was sending it twice i think i had some like caching issue so like the request just came in uh but let's try it one more time and just make sure it only comes in once boom we get the dm and there we go so this has been long enough for this video in the next video i will show you how we can handle reactions uh and then yeah how we can you know update that message based on if the user reacts or if they don't
