With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome back to part
00:10 - three of the slack bot
00:12 - tutorial so in this video we're gonna be
00:14 - going over commands this one will be a
00:16 - little bit shorter than the previous one
00:17 - i apologize that one was about 20
00:19 - minutes long but i did need to cover
00:20 - everything
00:21 - and this will show us how we can use
00:22 - like slash commands inside of slack and
00:24 - send that to a specific endpoint on our
00:26 - server
00:27 - that can handle that and do something
00:28 - with it now i want to make it very clear
00:30 - that commands are different than events
00:32 - so if we look actually at the slack
00:34 - api here or if we even just look at our
00:36 - slack thing right whenever we do
00:38 - something in the channel
00:39 - that's kind of an event right like if i
00:40 - react to this message so say i go here
00:42 - and i you know add a reaction
00:44 - or maybe i even edit this message right
00:46 - so maybe i mark it as unread or i pin it
00:48 - to the channel or edit it
00:49 - then is that is an example of an event
00:52 - now a command
00:53 - is something like this right if i go
00:54 - slash slash message or slash me or
00:57 - whatever
00:58 - these are commands so how can we add
01:00 - specific commands custom commands to
01:02 - our bot well what we can actually do is
01:05 - we can go here we can go
01:07 - to slash commands and we can create a
01:10 - new command now it's actually pretty
01:11 - straightforward
01:12 - what we do is we add the command that we
01:14 - want so in this case
01:15 - the first command that i'm going to show
01:16 - us is how we can get the amount of
01:18 - messages
01:20 - that a user has sent so i'm going to say
01:21 - message hyphen
01:23 - count is going to be this command now
01:25 - it's asking me
01:26 - for a request url the request url
01:30 - is what we're going to send the command
01:33 - to or send this event to whatever you
01:35 - want to call it
01:35 - when this command is called so this
01:37 - needs to be the same thing that we used
01:40 - for our events so if we look at our
01:42 - forwarding we see that we have this
01:44 - address right here
01:45 - so we're going to add that as the base
01:47 - of our url so we're going to put that
01:48 - like that
01:49 - and then we need to make some endpoint
01:51 - on our server that can handle
01:53 - this specific request so if i go back to
01:56 - my app here
01:57 - what i need to do is make a new route or
02:00 - make a new
02:00 - endpoint whatever you want to call it an
02:02 - endpoint is just like you know slash
02:04 - home or
02:05 - slash back or slash login those are all
02:07 - examples of endpoints
02:09 - that we can hit with this request so i'm
02:11 - going to say at
02:13 - app.root and this is the basic way that
02:16 - we add a new route or we add a new
02:17 - endpoint to our server
02:19 - so at app.root and i'm going to say
02:21 - slash and in this case
02:22 - what am i going to call it message
02:24 - hyphen count all right so there we go
02:27 - we're going to add that endpoint and
02:28 - we're going to say define message
02:30 - underscore account like that and then
02:33 - inside of here we're going to return
02:36 - a response and then 200. now i'll
02:38 - explain what this is in a second but go
02:40 - up to the top of our program and from
02:42 - flask what we need to do is we need to
02:44 - import request
02:45 - and we need to import response with a
02:47 - capital
02:48 - so if we go down here now what we're
02:50 - doing is returning response
02:52 - 200 all this is saying is okay i think
02:55 - we actually need brackets here my
02:56 - apologies
02:56 - we're going to return some empty
02:58 - response whenever we hit this endpoint
03:00 - and we're going to return the status
03:02 - code 200 which simply
03:04 - stands for okay now you may be familiar
03:06 - with the status code 404 you know
03:08 - endpoint not found or url not found this
03:10 - is just saying hey we're just going to
03:11 - tell
03:12 - whatever hits this that yep we're all
03:14 - good even though we
03:15 - haven't even really done anything inside
03:16 - of this function right so let's get out
03:18 - of this for one second
03:20 - and let's go back to the thing right
03:23 - here
03:23 - and now what we're going to do is add
03:25 - the endpoint message hyphen count
03:28 - so we're going to add that base url
03:29 - right which is what we use for the
03:30 - events and our callback and all that
03:32 - stuff and then we're going to say slash
03:34 - message hyphen count we can add a short
03:36 - description
03:37 - in this case returns your current
03:38 - message count you can tell i've already
03:40 - prepared doing this before
03:41 - and what i will do is simply save this
03:44 - all right so you've changed the
03:45 - permission scope of your app
03:46 - please reinstall your app okay great so
03:48 - we got to do that let's go reinstall
03:50 - press allow and now we are good all
03:53 - right
03:54 - so if we go back now to our ngrok thing
03:57 - we should actually won't see any because
03:59 - it hasn't hit yet
04:00 - but essentially we need to run this
04:02 - server so
04:03 - let's rerun this and now
04:06 - if we hit uh this slash message count
04:10 - you know endpoint something will happen
04:12 - so let's go back to slack
04:15 - and let's go slash message hyphen count
04:18 - let's hit that and we failed with error
04:20 - dispatch
04:21 - failed so something happened here inside
04:24 - of message count
04:25 - let's actually have a look here it says
04:27 - 405 method not allowed
04:29 - so what does that mean well what
04:31 - happened here is we sent what's known as
04:33 - a post request
04:34 - to this route now by default when we set
04:37 - up a root in flask it only accepts the
04:40 - method of get
04:41 - so there's all these different http
04:42 - methods right we have post we have get
04:45 - we have put we have delete
04:46 - what we need to do here is simply define
04:49 - that we are allowed to send a post
04:51 - request so i'm going to say methods
04:52 - inside of here and all capitals inside
04:55 - of a list i'm going to put post
04:57 - now let's say that we wanted to
04:58 - potentially receive a get and a post
05:00 - request
05:01 - well we would simply do get comma post
05:03 - right
05:04 - pretty straightforward in our case we
05:06 - only want post and post the reason we
05:08 - have that
05:09 - is because we're just going to be
05:10 - looking for some data to be posted to
05:12 - this endpoint
05:13 - so now that i added this if i rerun the
05:15 - server
05:16 - and we go back to ngrok or sorry we go
05:19 - back to slack my bad
05:20 - we resend this we should actually be
05:22 - good so we have a look here we can see
05:24 - in our flask
05:25 - console we actually got the post request
05:28 - to slash message count
05:29 - if we go to ngrok we can see that 200
05:32 - okay
05:33 - happened when we sent the post request
05:35 - to message count
05:37 - so now the question is how do we
05:39 - actually do something with this command
05:41 - right you know i want to keep track
05:42 - of all the messages that a user sent and
05:44 - then tell them how many that they've
05:46 - sent back
05:47 - well there's a few different steps here
05:48 - it doesn't really matter what order we
05:49 - do these in
05:50 - but first i will show you how we can get
05:52 - information
05:53 - about the user from this route right
05:56 - because we no longer have a payload like
05:58 - we had previously let me go back to full
06:00 - screen
06:00 - so i can't really do the same thing i
06:02 - did before where i print out the payload
06:04 - and then i get the event
06:06 - and all of that i can't do that i don't
06:07 - have a payload so what i actually need
06:09 - to do
06:09 - is i need to get the information from
06:12 - the post request
06:13 - form is what it's called so it's kind of
06:15 - like the data that was sent
06:16 - with the post request it wasn't sent as
06:19 - a payload it was sent in a different way
06:21 - so what i'm going to do here is i'm
06:22 - going to say okay data
06:25 - in lowercase equals request dot
06:29 - in this case form now form is going to
06:32 - give me
06:32 - a dictionary of all of the key value
06:34 - pairs that were sent here so let me just
06:36 - print
06:37 - out data and show you what it looks like
06:39 - so print data
06:41 - and now let's go back to slack and let's
06:44 - type hi like that oops what am i saying
06:47 - hi slash message count
06:49 - let's run that the command happened and
06:52 - well it would be helpful if our server
06:54 - was running so am i bad about that
06:56 - go back to slack again slash message
06:59 - count and now you can see that we print
07:01 - out all of this stuff
07:03 - so if we have a look here we get an
07:04 - immutable multi-dictionary you don't
07:06 - have to know what that means but that's
07:08 - just the data type that essentially
07:09 - we're getting when we look at the form
07:11 - and we can see we have a token we have a
07:13 - team id domain
07:15 - channel id channel name user id and all
07:18 - of this other information right so the
07:19 - username is tech with tim this was the
07:20 - command
07:21 - this was the text because we could
07:23 - technically do something like slash
07:25 - message count and then add you know some
07:26 - arguments afterwards
07:28 - we're not doing that in this situation
07:29 - but we could do that if we wanted to
07:31 - so what we need to do now is get the
07:33 - user id
07:34 - from this immutable dictionary so we're
07:36 - going to do is we're going to say all
07:38 - right
07:39 - user or user underscore id
07:43 - equals data dot get and then inside of
07:46 - here
07:46 - what are we going to type well you
07:48 - guessed it user id
07:50 - now of course we also can check to make
07:52 - sure this wasn't the bot but we know the
07:53 - bot's not really going to be
07:54 - doing a command right so that's not
07:56 - something we need to be worried about
07:57 - and
07:58 - then we can return to them the amount of
07:59 - messages that they have so in this case
08:01 - let's just actually print something to
08:03 - the screen or let's send a message back
08:05 - into that channel
08:06 - and just tell them some random thing for
08:08 - now just to make sure this is working
08:10 - and then we'll actually make it send
08:11 - them the amount of messages
08:12 - so we actually want the channel id as
08:14 - well so let's grab the channel id while
08:16 - we're at it we'll say channel underscore
08:18 - id
08:18 - equals data dot get
08:22 - channel underscore id and then for the
08:24 - text
08:25 - let's send back
08:29 - i got the command all right so running
08:31 - let's go back to slack
08:33 - and let's see slash message count
08:37 - and i got the command gets returned to
08:40 - us awesome so that indeed is working
08:42 - so now we need a way to actually track
08:43 - how many messages that they've sent so
08:45 - this is pretty straightforward
08:46 - we could do this in a database but i'm
08:48 - not going to be worrying about the
08:49 - database right now we might do that
08:50 - later on in the series
08:52 - i'm just going to make a dictionary here
08:53 - and i'm just going to say message
08:55 - underscore counts equals this
08:58 - what we're going to store inside of this
09:00 - dictionary is keys
09:02 - that are equal to the user id and values
09:04 - that are equal to the number of messages
09:06 - that they've sent
09:07 - so i'm going to say user id colon and
09:09 - then whatever the number of messages
09:10 - is now to do this is pretty
09:12 - straightforward we're going to go
09:14 - inside of the message function here and
09:18 - same thing here if the bot is not here
09:20 - so if it's not the bot then what we will
09:22 - do is we'll say okay
09:23 - if user id in message counts
09:28 - then what we'll do is we will say
09:31 - message counts
09:33 - user id plus equals 1.
09:36 - the reason i'm doing this is because i'm
09:37 - essentially saying is all right if we've
09:39 - already added this user id
09:41 - into our message counts dictionary and
09:43 - notice that it starts off blank
09:44 - then all we have to do is increment the
09:46 - value that's stored for this key right
09:48 - we just need to increment that number
09:50 - otherwise what we need to do is say
09:53 - message counts
09:54 - user id equals one because if this is
09:57 - the first time
09:58 - that we are like keeping track of this
10:00 - user maybe it's the first time they sent
10:01 - a message
10:02 - we need to add them into this dictionary
10:05 - and then we'll just
10:06 - default or instantiate their value to
10:08 - one because this is the first message
10:09 - that they sent
10:10 - so hopefully that makes sense but this
10:12 - will simply add up all of the messages
10:14 - we'll add in users if they're not
10:16 - already in there and if they're already
10:17 - in there we'll simply increment the
10:19 - value now keep in mind this is going to
10:21 - be stored in memory right so in ram
10:23 - so if we ever stop this server and
10:25 - re-run it
10:26 - then this value is going to reset so
10:28 - obviously this would make sense to put
10:30 - in a database
10:30 - but that's a little bit beyond the scope
10:32 - of this tutorial so maybe we'll handle
10:33 - that later on
10:34 - but anyways what we can do now is go
10:36 - back to message counts
10:38 - and now rather than just returning text
10:40 - we can simply return that user's number
10:42 - of messages
10:43 - so the first thing that we're going to
10:44 - check is we're going to make sure that
10:45 - the user id
10:46 - is inside of the message counts right
10:50 - so we can do this in a few different
10:51 - ways but actually what i'll do is i'll
10:53 - say
10:54 - message underscore count equals and then
10:57 - message
10:57 - underscore counts dot get and
11:01 - we'll do user underscore id comma 0.
11:04 - now what this is saying is okay let's
11:06 - look inside of the message count's
11:08 - dictionary
11:08 - trying to find the user id if we don't
11:11 - find that
11:12 - and only if we don't find that return 0.
11:14 - if we do find that
11:16 - return the value that was stored for our
11:18 - user id
11:19 - hopefully that makes sense and then for
11:21 - the text we can say
11:23 - messages colon and i'm actually going to
11:26 - use an f string
11:27 - again you need to be using python 3.6 or
11:29 - above for this to work
11:31 - we'll say message and then inside of
11:32 - here message underscore cat
11:35 - what this will do is simply just replace
11:37 - inside of the string whatever number
11:39 - this this value is equal to hopefully
11:40 - that makes sense but we'll run this and
11:42 - you guys will see in a second
11:43 - so let's run this and let's go to slack
11:48 - and let's just type a bunch of messages
11:49 - and just do a bunch of gibberish
11:52 - and oh i forgot that it was going to
11:53 - return to us all of those messages
11:55 - that's funny but let's go
11:56 - slash message count and let's run this
11:59 - and it says we have five messages now
12:01 - let's send another message
12:02 - okay and let's go slash message count
12:06 - and how many do we have now we have six
12:08 - and we'll send two more
12:10 - and then slash message count and we
12:13 - get eight right so it makes sense that
12:15 - is how the command works
12:16 - now i actually think i'm going to leave
12:18 - the video there i will quickly just
12:20 - remove the fact that we're sending this
12:22 - post message
12:22 - i actually don't want to do that the
12:24 - reason i set up this message event
12:25 - previously was so that we could kind of
12:27 - transition into this keeping track of
12:29 - how many messages were sent
12:30 - but with that being said that has been
12:32 - this tutorial so if you guys enjoyed
12:33 - make sure to leave a like
12:34 - subscribe to the channel and again i
12:36 - will see you in another slack bot
12:38 - [Music]
12:45 - tutorial

Cleaned transcript:

hello everybody and welcome back to part three of the slack bot tutorial so in this video we're gonna be going over commands this one will be a little bit shorter than the previous one i apologize that one was about 20 minutes long but i did need to cover everything and this will show us how we can use like slash commands inside of slack and send that to a specific endpoint on our server that can handle that and do something with it now i want to make it very clear that commands are different than events so if we look actually at the slack api here or if we even just look at our slack thing right whenever we do something in the channel that's kind of an event right like if i react to this message so say i go here and i you know add a reaction or maybe i even edit this message right so maybe i mark it as unread or i pin it to the channel or edit it then is that is an example of an event now a command is something like this right if i go slash slash message or slash me or whatever these are commands so how can we add specific commands custom commands to our bot well what we can actually do is we can go here we can go to slash commands and we can create a new command now it's actually pretty straightforward what we do is we add the command that we want so in this case the first command that i'm going to show us is how we can get the amount of messages that a user has sent so i'm going to say message hyphen count is going to be this command now it's asking me for a request url the request url is what we're going to send the command to or send this event to whatever you want to call it when this command is called so this needs to be the same thing that we used for our events so if we look at our forwarding we see that we have this address right here so we're going to add that as the base of our url so we're going to put that like that and then we need to make some endpoint on our server that can handle this specific request so if i go back to my app here what i need to do is make a new route or make a new endpoint whatever you want to call it an endpoint is just like you know slash home or slash back or slash login those are all examples of endpoints that we can hit with this request so i'm going to say at app.root and this is the basic way that we add a new route or we add a new endpoint to our server so at app.root and i'm going to say slash and in this case what am i going to call it message hyphen count all right so there we go we're going to add that endpoint and we're going to say define message underscore account like that and then inside of here we're going to return a response and then 200. now i'll explain what this is in a second but go up to the top of our program and from flask what we need to do is we need to import request and we need to import response with a capital so if we go down here now what we're doing is returning response 200 all this is saying is okay i think we actually need brackets here my apologies we're going to return some empty response whenever we hit this endpoint and we're going to return the status code 200 which simply stands for okay now you may be familiar with the status code 404 you know endpoint not found or url not found this is just saying hey we're just going to tell whatever hits this that yep we're all good even though we haven't even really done anything inside of this function right so let's get out of this for one second and let's go back to the thing right here and now what we're going to do is add the endpoint message hyphen count so we're going to add that base url right which is what we use for the events and our callback and all that stuff and then we're going to say slash message hyphen count we can add a short description in this case returns your current message count you can tell i've already prepared doing this before and what i will do is simply save this all right so you've changed the permission scope of your app please reinstall your app okay great so we got to do that let's go reinstall press allow and now we are good all right so if we go back now to our ngrok thing we should actually won't see any because it hasn't hit yet but essentially we need to run this server so let's rerun this and now if we hit uh this slash message count you know endpoint something will happen so let's go back to slack and let's go slash message hyphen count let's hit that and we failed with error dispatch failed so something happened here inside of message count let's actually have a look here it says 405 method not allowed so what does that mean well what happened here is we sent what's known as a post request to this route now by default when we set up a root in flask it only accepts the method of get so there's all these different http methods right we have post we have get we have put we have delete what we need to do here is simply define that we are allowed to send a post request so i'm going to say methods inside of here and all capitals inside of a list i'm going to put post now let's say that we wanted to potentially receive a get and a post request well we would simply do get comma post right pretty straightforward in our case we only want post and post the reason we have that is because we're just going to be looking for some data to be posted to this endpoint so now that i added this if i rerun the server and we go back to ngrok or sorry we go back to slack my bad we resend this we should actually be good so we have a look here we can see in our flask console we actually got the post request to slash message count if we go to ngrok we can see that 200 okay happened when we sent the post request to message count so now the question is how do we actually do something with this command right you know i want to keep track of all the messages that a user sent and then tell them how many that they've sent back well there's a few different steps here it doesn't really matter what order we do these in but first i will show you how we can get information about the user from this route right because we no longer have a payload like we had previously let me go back to full screen so i can't really do the same thing i did before where i print out the payload and then i get the event and all of that i can't do that i don't have a payload so what i actually need to do is i need to get the information from the post request form is what it's called so it's kind of like the data that was sent with the post request it wasn't sent as a payload it was sent in a different way so what i'm going to do here is i'm going to say okay data in lowercase equals request dot in this case form now form is going to give me a dictionary of all of the key value pairs that were sent here so let me just print out data and show you what it looks like so print data and now let's go back to slack and let's type hi like that oops what am i saying hi slash message count let's run that the command happened and well it would be helpful if our server was running so am i bad about that go back to slack again slash message count and now you can see that we print out all of this stuff so if we have a look here we get an immutable multidictionary you don't have to know what that means but that's just the data type that essentially we're getting when we look at the form and we can see we have a token we have a team id domain channel id channel name user id and all of this other information right so the username is tech with tim this was the command this was the text because we could technically do something like slash message count and then add you know some arguments afterwards we're not doing that in this situation but we could do that if we wanted to so what we need to do now is get the user id from this immutable dictionary so we're going to do is we're going to say all right user or user underscore id equals data dot get and then inside of here what are we going to type well you guessed it user id now of course we also can check to make sure this wasn't the bot but we know the bot's not really going to be doing a command right so that's not something we need to be worried about and then we can return to them the amount of messages that they have so in this case let's just actually print something to the screen or let's send a message back into that channel and just tell them some random thing for now just to make sure this is working and then we'll actually make it send them the amount of messages so we actually want the channel id as well so let's grab the channel id while we're at it we'll say channel underscore id equals data dot get channel underscore id and then for the text let's send back i got the command all right so running let's go back to slack and let's see slash message count and i got the command gets returned to us awesome so that indeed is working so now we need a way to actually track how many messages that they've sent so this is pretty straightforward we could do this in a database but i'm not going to be worrying about the database right now we might do that later on in the series i'm just going to make a dictionary here and i'm just going to say message underscore counts equals this what we're going to store inside of this dictionary is keys that are equal to the user id and values that are equal to the number of messages that they've sent so i'm going to say user id colon and then whatever the number of messages is now to do this is pretty straightforward we're going to go inside of the message function here and same thing here if the bot is not here so if it's not the bot then what we will do is we'll say okay if user id in message counts then what we'll do is we will say message counts user id plus equals 1. the reason i'm doing this is because i'm essentially saying is all right if we've already added this user id into our message counts dictionary and notice that it starts off blank then all we have to do is increment the value that's stored for this key right we just need to increment that number otherwise what we need to do is say message counts user id equals one because if this is the first time that we are like keeping track of this user maybe it's the first time they sent a message we need to add them into this dictionary and then we'll just default or instantiate their value to one because this is the first message that they sent so hopefully that makes sense but this will simply add up all of the messages we'll add in users if they're not already in there and if they're already in there we'll simply increment the value now keep in mind this is going to be stored in memory right so in ram so if we ever stop this server and rerun it then this value is going to reset so obviously this would make sense to put in a database but that's a little bit beyond the scope of this tutorial so maybe we'll handle that later on but anyways what we can do now is go back to message counts and now rather than just returning text we can simply return that user's number of messages so the first thing that we're going to check is we're going to make sure that the user id is inside of the message counts right so we can do this in a few different ways but actually what i'll do is i'll say message underscore count equals and then message underscore counts dot get and we'll do user underscore id comma 0. now what this is saying is okay let's look inside of the message count's dictionary trying to find the user id if we don't find that and only if we don't find that return 0. if we do find that return the value that was stored for our user id hopefully that makes sense and then for the text we can say messages colon and i'm actually going to use an f string again you need to be using python 3.6 or above for this to work we'll say message and then inside of here message underscore cat what this will do is simply just replace inside of the string whatever number this this value is equal to hopefully that makes sense but we'll run this and you guys will see in a second so let's run this and let's go to slack and let's just type a bunch of messages and just do a bunch of gibberish and oh i forgot that it was going to return to us all of those messages that's funny but let's go slash message count and let's run this and it says we have five messages now let's send another message okay and let's go slash message count and how many do we have now we have six and we'll send two more and then slash message count and we get eight right so it makes sense that is how the command works now i actually think i'm going to leave the video there i will quickly just remove the fact that we're sending this post message i actually don't want to do that the reason i set up this message event previously was so that we could kind of transition into this keeping track of how many messages were sent but with that being said that has been this tutorial so if you guys enjoyed make sure to leave a like subscribe to the channel and again i will see you in another slack bot tutorial
