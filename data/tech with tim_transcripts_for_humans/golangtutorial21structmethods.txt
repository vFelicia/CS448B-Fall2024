With timestamps:

00:02 - [Music]
00:06 - hello everybody and welcome back to
00:08 - under golang tutorial so in this video
00:10 - we're gonna be talking about methods and
00:12 - for those of you that don't know what
00:13 - methods are essentially they are some
00:15 - function that we perform on an object
00:18 - now in this case we can actually make
00:20 - our own methods for these type of
00:23 - objects now an example of a method would
00:25 - be something so this is a student
00:27 - example that I've done here it has a
00:28 - name it has a list of grades so a slice
00:31 - of grades that are int and it has some
00:33 - age an example of a method that we could
00:36 - use on students would be something like
00:38 - get grades right and what that would do
00:40 - is return to us all of the students
00:42 - grades another example could be
00:44 - something like is older than 18 and that
00:47 - could maybe return to us true or false
00:48 - depending on if the age was older than
00:51 - 18 another one might be get average
00:53 - grade right if we have a bunch of grades
00:55 - inside of this slice so we have you know
00:56 - like 50 70 80 maybe we would want to be
01:01 - able to get the average grades what I'm
01:02 - trying to do is just make you think
01:04 - about some operations that we might want
01:05 - to perform on a student and that's
01:08 - specific to a student right only a
01:10 - student object will have the method get
01:13 - average grade because it'll be specific
01:15 - to the types of fields that are defined
01:17 - inside of this object now I hope that's
01:20 - kind of making sense you've probably
01:21 - seen methods before and going I can't
01:23 - remember most of the ones we've used so
01:25 - far but the idea is if we have some
01:27 - variable let's say var X in equals 5
01:29 - right um this isn't a good example but
01:32 - we can write the variable we can do a
01:34 - dot operator and then just like we
01:36 - accessed when we had a student you know
01:37 - the dot name what we'll do this time is
01:40 - we'll say dot get grades right if that's
01:43 - the name of the method we'll put some
01:45 - brackets because methods are typically
01:47 - they're just kind of functions that act
01:49 - on a specific object and then maybe
01:51 - inside of here we pass some value or
01:53 - this returns to us some value we store
01:55 - it in an array or whatever it may be or
01:58 - a list or an INT or whatever but this is
02:00 - the idea of a method you write dot
02:01 - whatever the name of the method is and
02:03 - then some braces may be you pass a value
02:05 - maybe you don't but this acts just like
02:07 - a function except on a specific object
02:09 - so let me show you what I mean let's
02:11 - make a student first of all let's say s
02:13 - : equals let's go student let's give it
02:16 - a name let's call it Tim let's give it a
02:19 - I believe I have to do this a slice of
02:22 - grade so we'll say that Tim's grades are
02:24 - 70 90 80 85 okay
02:28 - and then how old 19 all right so we've
02:31 - just created a student now what I'm
02:33 - going to show you how to do is how we
02:34 - can actually make a method that will
02:36 - return to us let's start really simple
02:38 - and it just can't return to us the age
02:40 - of the student so what we write is this
02:42 - we write func because we're just gonna
02:44 - make a function that acts on a student
02:46 - object now this is where it gets a bit
02:48 - weird
02:48 - we put brackets and then we put some
02:51 - variable name that we want to represent
02:53 - our students in this case I'm gonna put
02:54 - s we put the type that we want which in
02:57 - this case is gonna be student and then
02:59 - here we put the name of the method so
03:02 - this is saying that this is gonna act on
03:04 - a student object that's what this first
03:06 - set of braces looks like and then
03:07 - afterwards I'll say something like get
03:10 - each okay then I'll put my brackets and
03:13 - now I just write a function like I
03:15 - normally would so here it's gonna return
03:17 - an int and then I'm gonna put my braces
03:19 - like that so what this is saying is this
03:21 - is a method that acts on a student
03:23 - object it's called get age it takes no
03:26 - arguments or parameters and it returns
03:28 - an int so now what I can do is I can say
03:31 - something like return s dot age and what
03:34 - this is saying is that when I call and I
03:36 - go down here and I go s1 dot get age
03:40 - this s is equal to whatever student I
03:44 - called this method on so since I called
03:46 - get age on s1 and we have these brackets
03:49 - set up before here s inside of this
03:52 - method will be equal to this student so
03:55 - if I want to access the age of that
03:57 - student I would just do dot age and then
03:59 - I can return that and that gives me the
04:01 - age now I know a lot of you are probably
04:03 - like why am i doing that why couldn't I
04:04 - just do s1 dot H you totally can I mean
04:07 - I get it this is not a great example but
04:09 - I'm just trying to show you in a simple
04:11 - case what you can do you have this s
04:14 - which is the student and then now you
04:16 - can reference any of the fields from
04:17 - that student do things with them return
04:19 - them whatever right and you call this on
04:21 - a student now let's say I went in here
04:23 - and for some reason actually let's
04:25 - change this to set age so we
04:26 - want to change the a you'd rather than
04:28 - get the age well now we gotta actually
04:30 - change a few different things first of
04:32 - all this is gonna be set age we're not
04:33 - gonna return anything
04:34 - we're actually gonna take probably some
04:36 - age as our value so we'll say age int
04:39 - and now inside of here I want to say s
04:42 - age equals age so I'm changing the
04:45 - students age to be equal to whatever age
04:47 - they passed in so maybe I say s one set
04:49 - age and I put seven well then we would
04:51 - expect that this students age would
04:53 - change to seven now I want you to think
04:56 - though very carefully will this work and
04:59 - you probably won't know the answer to
05:00 - this but we talked about pointers in the
05:02 - previous video and this is where they
05:04 - become really important if I actually
05:06 - want to do this operation when I'm
05:08 - setting or changing anything about the
05:11 - student object so anything about this
05:13 - here I actually want to change it so it
05:15 - permanently changes then what I need to
05:17 - do is make this a pointer so I need to
05:19 - make that a pointer and now what I call
05:21 - s 1 dot set age I'm hoping this will
05:24 - actually work we'll see if I save this
05:25 - if we get an error or not I think we're
05:28 - good yeah so if I change this to a
05:29 - pointer now what I'm saying is when I
05:32 - call s 1 get age I actually want to get
05:34 - the pointer of s 1 so that inside of
05:37 - here I can modify the age value and it
05:40 - will change down here I hope that makes
05:42 - sense but let's FM t dot print line
05:45 - let's print s 1 and then let's print s 1
05:48 - again so let's have a look here if we go
05:51 - and go run tutorial go and let's see
05:53 - what our output is okay so we get Tim
05:57 - and then obviously it has the age 19 and
05:59 - then afterwards it has the age 7 so this
06:02 - did actually change in here because we
06:04 - had the pointer now if I change this and
06:07 - I get rid of the asterisks let's have a
06:09 - look at what we get now 19 19
06:13 - so although here yes we did change the
06:16 - age since we didn't pass the pointer we
06:19 - weren't able to change it down here it
06:21 - just changed kind of that local copy
06:22 - that got passed into this method so the
06:25 - rule of thumb kind of here is that if
06:27 - you have a method that's modifying this
06:29 - object itself you actually want to make
06:32 - sure that you have the pointer here and
06:33 - for most methods you're always going to
06:35 - want to use the pointer inside of this
06:37 - so that you have your
06:39 - variable that's actually pointing to the
06:41 - original object so you can modify you
06:43 - can change things if you just care about
06:45 - getting values or maybe like
06:47 - manipulating values are calculating
06:49 - something which we're gonna do in a
06:50 - second then you don't need the pointer
06:52 - you can just take the value but common
06:54 - practices just take the pointer anyways
06:55 - because it's not really gonna matter if
06:58 - you take the pointer versus not take it
07:00 - when you're returning a value so I hope
07:01 - that makes sense but what I'm gonna do
07:03 - now is to find another method and I'm
07:04 - gonna call this method actually get
07:07 - average grade so I'm gonna say s student
07:09 - and I'm gonna say get average grade like
07:13 - that and we're gonna return a actually
07:15 - this is probably have to be a float 32
07:17 - that will be the average grade so inside
07:21 - of here now what do I want to do well I
07:23 - want to calculate the average grade of
07:24 - the student now this doesn't need to be
07:26 - a pointer because I'm not gonna be
07:27 - changing anything about the student I'm
07:29 - just gonna return a float 32 value it
07:32 - tells me the information about the
07:33 - average grade of whatever student we
07:35 - have so first of all let me get rid of
07:36 - some of this which means I'm actually
07:38 - gonna have to comment this out so we'll
07:41 - do that like that and inside of here I'm
07:43 - going to start writing how I calculate
07:45 - the average grade so I'm gonna make a
07:47 - variable called sum I'm gonna say son
07:48 - colon equals zero
07:49 - oops there is easier ways to do this but
07:52 - I just want to walk you guys through an
07:53 - example here and we'll say for
07:55 - underscore comma B so that's the value
07:58 - colon equals range of in this case it's
08:01 - gonna be s dot grades you can see it's
08:03 - even popping up for us there then so
08:05 - this is accessing all the grades right
08:07 - which is a slice of int we're gonna say
08:09 - sum plus equals V so we're gonna add
08:13 - whatever the grade value is to the sum
08:16 - and then finally we're gonna return the
08:19 - sum over in this case it's gonna have to
08:22 - be a float 32 value of the Len of s dot
08:28 - grades so this should give us the
08:30 - average we sum up all the values and
08:32 - then we divide by some float 32 just to
08:34 - make sure that this is float 32 and in
08:36 - fact this is gonna have to be float 32
08:38 - as well the Len of s dot grades which
08:41 - should give us the the answer right
08:43 - whatever that average grade is so let's
08:45 - have a look at this I'm actually gonna
08:46 - say it let's say average colon equals s1
08:52 - dot
08:53 - get a bridge why is it not popping up
08:56 - here get average grades okay and then
08:59 - we're going to go fmt dot print LM of
09:05 - average okay so I don't think I made any
09:07 - mistakes there I know I went kind of
09:09 - fast oh well let's see oh this is plus I
09:11 - colon equals range that might have been
09:14 - the problem there let's have a look
09:15 - get average grade what's the problem
09:17 - here s 1 to get average grades undefined
09:21 - oh that's s needs to be get average
09:23 - grade okay so let's see now if this
09:26 - works let's run the program and we get
09:29 - the value eighty one point two five so
09:32 - you can see this works now the reason
09:34 - this is a useful thing to do is because
09:35 - what happens when I have another student
09:37 - right because you could say well oh I
09:38 - can just sum up the grades down here
09:40 - that's fine well when you have another
09:42 - student that you create right and you
09:43 - want to get the average grades of them
09:45 - so I say like s2 equals Jo maybe we add
09:49 - another grade here so we said like 90 90
09:51 - 95 let's change the age like 21 now if I
09:56 - want to get the average grades of this
09:58 - student well all I have to do is just
10:00 - say average 2 colon equals s to get
10:04 - average grade since I've made this
10:06 - method now I can use it on any single
10:08 - instance of a student so any s 1 s 2
10:11 - doesn't matter any student I have I can
10:13 - use this method so it becomes really
10:15 - useful so now I can print average and
10:18 - average too so let's have a look at this
10:22 - and let's see what we get okay so we get
10:25 - eighty one point two five and eighty
10:26 - five point seven one four two nine so
10:29 - that is kind of the basics of methods
10:31 - now of course like you've seen we can
10:33 - take arguments inside of methods they
10:34 - work the exact same way that a function
10:37 - works except now we have a reference to
10:39 - whatever object it is that we're calling
10:41 - this method on so when I do s1 dot get
10:44 - average grade s becomes s1 and then down
10:46 - here s becomes s2 so here of course
10:49 - we're not getting the pointer so we just
10:51 - have the values of both of these but if
10:54 - we wanted the pointer it's as easy as
10:55 - changing that to an asterisk and now we
10:57 - can actually modify any of the fields
11:01 - inside of that object right so that is
11:03 - kind of the power of structs and
11:06 - that's right when we have things we want
11:07 - to represent that are more complicated
11:09 - than just an int or a bool like they're
11:11 - a combination of fields we make some
11:13 - custom object in this case I've called
11:15 - it a student a student has a name which
11:17 - is a string grades which are slice of
11:19 - int and then an age and now I made this
11:22 - method so that any student I make I can
11:24 - get its average grade now let's do one
11:26 - more and let's make a function that gets
11:28 - the maximum grade so let's say func S
11:32 - student we don't need the pointer here
11:34 - but I'm gonna put it here and we're
11:35 - gonna say gets max oops I could type
11:39 - this properly get max grade and then in
11:42 - this case we're just going to return an
11:43 - INT because we know it's just gonna be a
11:44 - slice of n so we're looping through so
11:46 - we can do that so now I'm gonna say cur
11:49 - underscore Max or cur max we'll keep our
11:51 - pattern here equals colon equals zero
11:55 - we're gonna save for yeah we'll go
11:59 - underscore v : equals range of s dot
12:02 - grades and we'll just say if cur max is
12:08 - less than V so this is the great then
12:12 - what we'll do is we'll say cur max
12:16 - equals V there you go so essentially if
12:20 - the current maximum value is less than
12:21 - whatever this grade is then curve
12:23 - maximum becomes equal to V and then we
12:26 - can return cur max so this is just
12:29 - storing the current maximum value as
12:31 - soon as we see value greater than it
12:33 - will change it and this will get us the
12:35 - max value from the array so we return
12:36 - cur Max and now let's actually just
12:38 - change this instead of average we can
12:40 - say get max grade just copy that method
12:44 - and throw it here get max grade and then
12:46 - of course we'll just say max and max2
12:50 - and then this will need to change to be
12:52 - max
12:52 - oops and max - okay so let's have a look
12:56 - at this alright so go run tutorial dot
13:00 - go and we get to 90 and 95 so you can
13:04 - see that works properly here the high
13:06 - screen is 95 here the highest grade is
13:07 - 90 and of course you can go on and make
13:09 - as many methods as you want and use them
13:11 - in combination with each other really it
13:14 - doesn't matter it's all zoom out a bit
13:15 - so you guys can kind of read everything
13:16 - that we've done here but we made
13:18 - the student struct we made some methods
13:20 - for the student I showed you how we can
13:22 - modify fields on the student as well we
13:24 - can make another method called add grade
13:26 - and all that does is append to this
13:28 - slice another grade that would be
13:30 - something that's maybe useful to do and
13:32 - yeah that is kind of the introduction to
13:34 - methods so I hope you learned something
13:35 - if you did make sure you leave a like
13:37 - subscribe and I will see you in another
13:39 - golang tutorial

Cleaned transcript:

hello everybody and welcome back to under golang tutorial so in this video we're gonna be talking about methods and for those of you that don't know what methods are essentially they are some function that we perform on an object now in this case we can actually make our own methods for these type of objects now an example of a method would be something so this is a student example that I've done here it has a name it has a list of grades so a slice of grades that are int and it has some age an example of a method that we could use on students would be something like get grades right and what that would do is return to us all of the students grades another example could be something like is older than 18 and that could maybe return to us true or false depending on if the age was older than 18 another one might be get average grade right if we have a bunch of grades inside of this slice so we have you know like 50 70 80 maybe we would want to be able to get the average grades what I'm trying to do is just make you think about some operations that we might want to perform on a student and that's specific to a student right only a student object will have the method get average grade because it'll be specific to the types of fields that are defined inside of this object now I hope that's kind of making sense you've probably seen methods before and going I can't remember most of the ones we've used so far but the idea is if we have some variable let's say var X in equals 5 right um this isn't a good example but we can write the variable we can do a dot operator and then just like we accessed when we had a student you know the dot name what we'll do this time is we'll say dot get grades right if that's the name of the method we'll put some brackets because methods are typically they're just kind of functions that act on a specific object and then maybe inside of here we pass some value or this returns to us some value we store it in an array or whatever it may be or a list or an INT or whatever but this is the idea of a method you write dot whatever the name of the method is and then some braces may be you pass a value maybe you don't but this acts just like a function except on a specific object so let me show you what I mean let's make a student first of all let's say s equals let's go student let's give it a name let's call it Tim let's give it a I believe I have to do this a slice of grade so we'll say that Tim's grades are 70 90 80 85 okay and then how old 19 all right so we've just created a student now what I'm going to show you how to do is how we can actually make a method that will return to us let's start really simple and it just can't return to us the age of the student so what we write is this we write func because we're just gonna make a function that acts on a student object now this is where it gets a bit weird we put brackets and then we put some variable name that we want to represent our students in this case I'm gonna put s we put the type that we want which in this case is gonna be student and then here we put the name of the method so this is saying that this is gonna act on a student object that's what this first set of braces looks like and then afterwards I'll say something like get each okay then I'll put my brackets and now I just write a function like I normally would so here it's gonna return an int and then I'm gonna put my braces like that so what this is saying is this is a method that acts on a student object it's called get age it takes no arguments or parameters and it returns an int so now what I can do is I can say something like return s dot age and what this is saying is that when I call and I go down here and I go s1 dot get age this s is equal to whatever student I called this method on so since I called get age on s1 and we have these brackets set up before here s inside of this method will be equal to this student so if I want to access the age of that student I would just do dot age and then I can return that and that gives me the age now I know a lot of you are probably like why am i doing that why couldn't I just do s1 dot H you totally can I mean I get it this is not a great example but I'm just trying to show you in a simple case what you can do you have this s which is the student and then now you can reference any of the fields from that student do things with them return them whatever right and you call this on a student now let's say I went in here and for some reason actually let's change this to set age so we want to change the a you'd rather than get the age well now we gotta actually change a few different things first of all this is gonna be set age we're not gonna return anything we're actually gonna take probably some age as our value so we'll say age int and now inside of here I want to say s age equals age so I'm changing the students age to be equal to whatever age they passed in so maybe I say s one set age and I put seven well then we would expect that this students age would change to seven now I want you to think though very carefully will this work and you probably won't know the answer to this but we talked about pointers in the previous video and this is where they become really important if I actually want to do this operation when I'm setting or changing anything about the student object so anything about this here I actually want to change it so it permanently changes then what I need to do is make this a pointer so I need to make that a pointer and now what I call s 1 dot set age I'm hoping this will actually work we'll see if I save this if we get an error or not I think we're good yeah so if I change this to a pointer now what I'm saying is when I call s 1 get age I actually want to get the pointer of s 1 so that inside of here I can modify the age value and it will change down here I hope that makes sense but let's FM t dot print line let's print s 1 and then let's print s 1 again so let's have a look here if we go and go run tutorial go and let's see what our output is okay so we get Tim and then obviously it has the age 19 and then afterwards it has the age 7 so this did actually change in here because we had the pointer now if I change this and I get rid of the asterisks let's have a look at what we get now 19 19 so although here yes we did change the age since we didn't pass the pointer we weren't able to change it down here it just changed kind of that local copy that got passed into this method so the rule of thumb kind of here is that if you have a method that's modifying this object itself you actually want to make sure that you have the pointer here and for most methods you're always going to want to use the pointer inside of this so that you have your variable that's actually pointing to the original object so you can modify you can change things if you just care about getting values or maybe like manipulating values are calculating something which we're gonna do in a second then you don't need the pointer you can just take the value but common practices just take the pointer anyways because it's not really gonna matter if you take the pointer versus not take it when you're returning a value so I hope that makes sense but what I'm gonna do now is to find another method and I'm gonna call this method actually get average grade so I'm gonna say s student and I'm gonna say get average grade like that and we're gonna return a actually this is probably have to be a float 32 that will be the average grade so inside of here now what do I want to do well I want to calculate the average grade of the student now this doesn't need to be a pointer because I'm not gonna be changing anything about the student I'm just gonna return a float 32 value it tells me the information about the average grade of whatever student we have so first of all let me get rid of some of this which means I'm actually gonna have to comment this out so we'll do that like that and inside of here I'm going to start writing how I calculate the average grade so I'm gonna make a variable called sum I'm gonna say son colon equals zero oops there is easier ways to do this but I just want to walk you guys through an example here and we'll say for underscore comma B so that's the value colon equals range of in this case it's gonna be s dot grades you can see it's even popping up for us there then so this is accessing all the grades right which is a slice of int we're gonna say sum plus equals V so we're gonna add whatever the grade value is to the sum and then finally we're gonna return the sum over in this case it's gonna have to be a float 32 value of the Len of s dot grades so this should give us the average we sum up all the values and then we divide by some float 32 just to make sure that this is float 32 and in fact this is gonna have to be float 32 as well the Len of s dot grades which should give us the the answer right whatever that average grade is so let's have a look at this I'm actually gonna say it let's say average colon equals s1 dot get a bridge why is it not popping up here get average grades okay and then we're going to go fmt dot print LM of average okay so I don't think I made any mistakes there I know I went kind of fast oh well let's see oh this is plus I colon equals range that might have been the problem there let's have a look get average grade what's the problem here s 1 to get average grades undefined oh that's s needs to be get average grade okay so let's see now if this works let's run the program and we get the value eighty one point two five so you can see this works now the reason this is a useful thing to do is because what happens when I have another student right because you could say well oh I can just sum up the grades down here that's fine well when you have another student that you create right and you want to get the average grades of them so I say like s2 equals Jo maybe we add another grade here so we said like 90 90 95 let's change the age like 21 now if I want to get the average grades of this student well all I have to do is just say average 2 colon equals s to get average grade since I've made this method now I can use it on any single instance of a student so any s 1 s 2 doesn't matter any student I have I can use this method so it becomes really useful so now I can print average and average too so let's have a look at this and let's see what we get okay so we get eighty one point two five and eighty five point seven one four two nine so that is kind of the basics of methods now of course like you've seen we can take arguments inside of methods they work the exact same way that a function works except now we have a reference to whatever object it is that we're calling this method on so when I do s1 dot get average grade s becomes s1 and then down here s becomes s2 so here of course we're not getting the pointer so we just have the values of both of these but if we wanted the pointer it's as easy as changing that to an asterisk and now we can actually modify any of the fields inside of that object right so that is kind of the power of structs and that's right when we have things we want to represent that are more complicated than just an int or a bool like they're a combination of fields we make some custom object in this case I've called it a student a student has a name which is a string grades which are slice of int and then an age and now I made this method so that any student I make I can get its average grade now let's do one more and let's make a function that gets the maximum grade so let's say func S student we don't need the pointer here but I'm gonna put it here and we're gonna say gets max oops I could type this properly get max grade and then in this case we're just going to return an INT because we know it's just gonna be a slice of n so we're looping through so we can do that so now I'm gonna say cur underscore Max or cur max we'll keep our pattern here equals colon equals zero we're gonna save for yeah we'll go underscore v equals range of s dot grades and we'll just say if cur max is less than V so this is the great then what we'll do is we'll say cur max equals V there you go so essentially if the current maximum value is less than whatever this grade is then curve maximum becomes equal to V and then we can return cur max so this is just storing the current maximum value as soon as we see value greater than it will change it and this will get us the max value from the array so we return cur Max and now let's actually just change this instead of average we can say get max grade just copy that method and throw it here get max grade and then of course we'll just say max and max2 and then this will need to change to be max oops and max okay so let's have a look at this alright so go run tutorial dot go and we get to 90 and 95 so you can see that works properly here the high screen is 95 here the highest grade is 90 and of course you can go on and make as many methods as you want and use them in combination with each other really it doesn't matter it's all zoom out a bit so you guys can kind of read everything that we've done here but we made the student struct we made some methods for the student I showed you how we can modify fields on the student as well we can make another method called add grade and all that does is append to this slice another grade that would be something that's maybe useful to do and yeah that is kind of the introduction to methods so I hope you learned something if you did make sure you leave a like subscribe and I will see you in another golang tutorial
