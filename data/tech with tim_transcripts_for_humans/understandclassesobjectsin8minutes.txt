With timestamps:

00:01 - thank you
00:02 - [Music]
00:08 - so unfortunately University professors
00:10 - consistently failed to explain the
00:12 - difference between a class and an object
00:14 - and what that actually means obviously
00:17 - you need to understand this before you
00:19 - can start working in object-oriented
00:20 - programming languages and actually write
00:22 - object oriented programming code so in
00:25 - the next five minutes I'm going to
00:26 - explain this to you let's get it alright
00:28 - so on my screen here I'm just going to
00:30 - write a few variables so I have x equals
00:32 - 1 y equals string now what do we know
00:36 - about these variables well we know that
00:38 - each of these variables have a type
00:40 - right we know data types exist in Python
00:42 - and one is type int and this string here
00:46 - is type Str we have a bunch of other
00:48 - types as well and depending on the value
00:51 - that we use it has a different type now
00:53 - what you need to understand about the
00:55 - type of an object is that is really the
00:57 - class that was used to create the object
00:59 - now it's a bit hidden here in Python
01:02 - because something like one and something
01:04 - like string are built into the language
01:06 - and when I write one I don't have to
01:08 - explicitly say oh I'm going to use the
01:10 - int class to Define this however there
01:13 - is an INT class and there is a Str or
01:15 - string class that exists in Python and
01:18 - anytime you do something like create a
01:19 - new string or create a new int you are
01:22 - using that class to create the object
01:25 - okay so almost anything you see in
01:27 - Python so something like one something
01:28 - like two something like a list something
01:31 - like a function these are all objects
01:33 - and they all have a type the type is the
01:36 - class that was used to create them and
01:38 - even though you don't necessarily see
01:39 - that that's still their type right so we
01:41 - know this is an INT we know this is a
01:42 - string now the class is really a
01:45 - blueprint that defines the functionality
01:47 - that an object has the reason why I can
01:51 - do something like Z is equal to one plus
01:54 - one is because the int class which is
01:57 - the type of these two objects defines
02:00 - that I can add two integers together if
02:02 - it didn't Define that I couldn't add
02:04 - them together
02:05 - same reason I can use subtraction
02:07 - multiplication same reason I can use any
02:10 - operation you see in Python it's because
02:12 - the class which is the type of the
02:14 - object defines that behavior it says I
02:17 - can add these two objects now let's look
02:19 - at this example what if I try to do one
02:21 - plus Str well this is not an accepted
02:25 - operation I can't do this if you run
02:26 - this code in Python we will get an error
02:28 - now the reason we'll get an error is
02:30 - because this behavior is not implemented
02:33 - on the string or the int Class A String
02:35 - doesn't know how to add an into it and
02:37 - an INT doesn't know how to add a string
02:39 - to it it's not defined Behavior if it
02:41 - was defined we'd be able to do this so
02:44 - the way you think about this a class is
02:46 - the blueprint that defines the behavior
02:48 - that is allowed on an object an object
02:52 - is an instance of a class you can have
02:54 - multiple objects as many as you want of
02:57 - the same class so I can have a bunch of
02:58 - in so I can have a bunch of floats I can
03:00 - have a bunch of strings all of these
03:02 - objects are dependent they're unique and
03:04 - they use the class to to understand what
03:06 - Behavior they have access to now let's
03:09 - look at a custom class and I'll make
03:10 - this even more clear all right so I've
03:12 - got a custom class on the screen let's
03:13 - dissect this a little bit and then I
03:15 - will create an instance and show you how
03:17 - this works so we have dog class first of
03:20 - all this is the name of our class any
03:23 - instance we create of this class will be
03:25 - of type doc because that's the name of
03:27 - our class just like of type ins string
03:30 - Etc that's the name of our class that's
03:31 - the type of the objects we create using
03:34 - the class now the first method you see
03:37 - here now this is a function but we call
03:38 - it a method because it's inside of a
03:40 - class is what's known as The Constructor
03:42 - or the initializer this is what is
03:45 - called every time you create a new
03:47 - instance now this is called on classes
03:49 - like int on float on string you just
03:52 - don't see it because it's built into the
03:53 - language so I'm kind of exposing to what
03:56 - a class looks like whereas the ones
03:57 - built in are kind of hidden you don't
03:58 - really see them anyways we have in here
04:01 - right and what we take is a name age and
04:04 - breed as well as this self keyword now
04:07 - the self keyword refers to the instance
04:09 - that this is being called on that this
04:12 - function or this method is being called
04:14 - it's important to have that distinction
04:16 - because we have multiple instances self
04:19 - is referring to the individual instance
04:21 - that is being called upon or being used
04:23 - in this context you're going to see what
04:25 - I mean in a second but when I say
04:27 - something like self.name equals name I'm
04:29 - saying I want to create an attribute
04:31 - this is data that's stored on the
04:33 - instance not on the class on the
04:35 - instance called name and I'm making it
04:38 - equal to the name value that I passed to
04:40 - this Constructor continuing same with
04:42 - age same with breed we'll look at an
04:44 - example in a minute now we move down
04:46 - here to our other methods now these
04:49 - methods are essentially the behavior of
04:51 - this type right the behavior of
04:54 - instances this class is Blueprinting
04:56 - what all of my instances are able to do
04:59 - so when I put something like bark this
05:01 - means that I can call the bark method so
05:03 - I can do something like dot bar Arc
05:06 - right on any instance of this class
05:09 - because the method is defined same thing
05:11 - with get info I can call this get info
05:14 - method here and it will return
05:16 - information about the instance that I
05:19 - called this on okay so enough of that
05:21 - let's put this over the side let's look
05:22 - at an example of creating an instance so
05:25 - let me just zoom in a bit here let's say
05:26 - I have
05:28 - dog is equal to Doc now first of all
05:31 - this is how you create an instance of a
05:33 - class if it's not built into python you
05:35 - write the name of the class which is dog
05:37 - you put your parentheses and then you
05:39 - pass any required parameters to the
05:42 - Constructor so we need a name age and
05:44 - breed so I'm going to pass Tim let's
05:46 - just pass four for breed uh let's just
05:49 - go with person I know that's not a dog
05:51 - breed but I can't think of any right now
05:52 - so we'll go with something that doesn't
05:54 - really make sense all right so we passed
05:56 - name age person when we do this by
06:00 - default this Constructor here this
06:02 - initializer gets called and it assigns
06:05 - these attributes to our dog instance
06:07 - this is one
06:09 - instance right now if I write something
06:12 - like
06:13 - dog 2 is equal to dog now let's just
06:16 - imagine I have some values in here I'm
06:18 - not going to write them out what I've
06:19 - done is created a separate instance so
06:23 - we have two individual instances that
06:25 - all have their own attributes now since
06:28 - they are the same type they have the
06:30 - same defined Behavior we know that they
06:32 - have a name we know that they have an
06:33 - age we know that we have a breed we
06:35 - don't know what the name age or breed is
06:37 - but we know that they have that because
06:39 - they are type Doc and we know that on
06:41 - both of these instances I can call the
06:43 - bark method and I can call the get info
06:45 - method because that's the defined
06:47 - behavior in the class so if I go here
06:49 - and I write something like dog dot bark
06:52 - if we were in our terminal or if we're
06:54 - actually running this code you would see
06:56 - that bark would print out again the only
06:58 - reason I can do that is the blueprint
06:59 - the type the class has defined this
07:02 - functionality okay very important to
07:05 - understand here as I wrap up this video
07:07 - that each instance stores its own
07:09 - attributes it has its own
07:11 - information right so when I created this
07:14 - first dog and it has Tim for person then
07:16 - I create the second dog me creating this
07:18 - second dog has no effect on this first
07:21 - dog it doesn't change the name it
07:23 - doesn't change the age it doesn't change
07:24 - the breed they all have their own name
07:27 - age and breed because they are instances
07:29 - of the class okay the class is the
07:31 - blueprint defining the behavior for the
07:34 - object the object kind of uses the class
07:36 - to understand what Behavior it has
07:38 - access to to have its attributes
07:40 - assigned all of that obviously I could
07:43 - continue going with this for hours upon
07:45 - hours upon hours the point of this video
07:46 - was to give you a quick understanding of
07:48 - the difference between classes and
07:50 - objects and hopefully conceptualize in
07:52 - your brain what is a class what is an
07:55 - object what do they mean key point class
07:57 - blueprint object instance of the
08:00 - blueprint object uses the class to
08:03 - understand what Behavior it has the
08:04 - class defines the behavior of all of the
08:06 - objects hopefully this was helpful let
08:09 - me know if you like these short
08:09 - explainer videos I'm happy to do more
08:12 - hopefully I'll see you at another
08:13 - YouTube video
08:14 - [Music]

Cleaned transcript:

thank you so unfortunately University professors consistently failed to explain the difference between a class and an object and what that actually means obviously you need to understand this before you can start working in objectoriented programming languages and actually write object oriented programming code so in the next five minutes I'm going to explain this to you let's get it alright so on my screen here I'm just going to write a few variables so I have x equals 1 y equals string now what do we know about these variables well we know that each of these variables have a type right we know data types exist in Python and one is type int and this string here is type Str we have a bunch of other types as well and depending on the value that we use it has a different type now what you need to understand about the type of an object is that is really the class that was used to create the object now it's a bit hidden here in Python because something like one and something like string are built into the language and when I write one I don't have to explicitly say oh I'm going to use the int class to Define this however there is an INT class and there is a Str or string class that exists in Python and anytime you do something like create a new string or create a new int you are using that class to create the object okay so almost anything you see in Python so something like one something like two something like a list something like a function these are all objects and they all have a type the type is the class that was used to create them and even though you don't necessarily see that that's still their type right so we know this is an INT we know this is a string now the class is really a blueprint that defines the functionality that an object has the reason why I can do something like Z is equal to one plus one is because the int class which is the type of these two objects defines that I can add two integers together if it didn't Define that I couldn't add them together same reason I can use subtraction multiplication same reason I can use any operation you see in Python it's because the class which is the type of the object defines that behavior it says I can add these two objects now let's look at this example what if I try to do one plus Str well this is not an accepted operation I can't do this if you run this code in Python we will get an error now the reason we'll get an error is because this behavior is not implemented on the string or the int Class A String doesn't know how to add an into it and an INT doesn't know how to add a string to it it's not defined Behavior if it was defined we'd be able to do this so the way you think about this a class is the blueprint that defines the behavior that is allowed on an object an object is an instance of a class you can have multiple objects as many as you want of the same class so I can have a bunch of in so I can have a bunch of floats I can have a bunch of strings all of these objects are dependent they're unique and they use the class to to understand what Behavior they have access to now let's look at a custom class and I'll make this even more clear all right so I've got a custom class on the screen let's dissect this a little bit and then I will create an instance and show you how this works so we have dog class first of all this is the name of our class any instance we create of this class will be of type doc because that's the name of our class just like of type ins string Etc that's the name of our class that's the type of the objects we create using the class now the first method you see here now this is a function but we call it a method because it's inside of a class is what's known as The Constructor or the initializer this is what is called every time you create a new instance now this is called on classes like int on float on string you just don't see it because it's built into the language so I'm kind of exposing to what a class looks like whereas the ones built in are kind of hidden you don't really see them anyways we have in here right and what we take is a name age and breed as well as this self keyword now the self keyword refers to the instance that this is being called on that this function or this method is being called it's important to have that distinction because we have multiple instances self is referring to the individual instance that is being called upon or being used in this context you're going to see what I mean in a second but when I say something like self.name equals name I'm saying I want to create an attribute this is data that's stored on the instance not on the class on the instance called name and I'm making it equal to the name value that I passed to this Constructor continuing same with age same with breed we'll look at an example in a minute now we move down here to our other methods now these methods are essentially the behavior of this type right the behavior of instances this class is Blueprinting what all of my instances are able to do so when I put something like bark this means that I can call the bark method so I can do something like dot bar Arc right on any instance of this class because the method is defined same thing with get info I can call this get info method here and it will return information about the instance that I called this on okay so enough of that let's put this over the side let's look at an example of creating an instance so let me just zoom in a bit here let's say I have dog is equal to Doc now first of all this is how you create an instance of a class if it's not built into python you write the name of the class which is dog you put your parentheses and then you pass any required parameters to the Constructor so we need a name age and breed so I'm going to pass Tim let's just pass four for breed uh let's just go with person I know that's not a dog breed but I can't think of any right now so we'll go with something that doesn't really make sense all right so we passed name age person when we do this by default this Constructor here this initializer gets called and it assigns these attributes to our dog instance this is one instance right now if I write something like dog 2 is equal to dog now let's just imagine I have some values in here I'm not going to write them out what I've done is created a separate instance so we have two individual instances that all have their own attributes now since they are the same type they have the same defined Behavior we know that they have a name we know that they have an age we know that we have a breed we don't know what the name age or breed is but we know that they have that because they are type Doc and we know that on both of these instances I can call the bark method and I can call the get info method because that's the defined behavior in the class so if I go here and I write something like dog dot bark if we were in our terminal or if we're actually running this code you would see that bark would print out again the only reason I can do that is the blueprint the type the class has defined this functionality okay very important to understand here as I wrap up this video that each instance stores its own attributes it has its own information right so when I created this first dog and it has Tim for person then I create the second dog me creating this second dog has no effect on this first dog it doesn't change the name it doesn't change the age it doesn't change the breed they all have their own name age and breed because they are instances of the class okay the class is the blueprint defining the behavior for the object the object kind of uses the class to understand what Behavior it has access to to have its attributes assigned all of that obviously I could continue going with this for hours upon hours upon hours the point of this video was to give you a quick understanding of the difference between classes and objects and hopefully conceptualize in your brain what is a class what is an object what do they mean key point class blueprint object instance of the blueprint object uses the class to understand what Behavior it has the class defines the behavior of all of the objects hopefully this was helpful let me know if you like these short explainer videos I'm happy to do more hopefully I'll see you at another YouTube video
