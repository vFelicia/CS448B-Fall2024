With timestamps:

00:00 - so the reality is most people work very
00:02 - slowly they're not very efficient they
00:04 - don't care about how fast they're doing
00:05 - things and in many job environments
00:07 - that's accepted and that's fine and kind
00:09 - of everyone works at about 50%
00:10 - efficiency and never pushes forward now
00:13 - in programming that is not really
00:15 - acceptable and being able to program
00:17 - faster is a massive advantage that's
00:19 - gonna set you apart from virtually
00:21 - everyone else that's on your team now
00:23 - these skills are what you learn as you
00:25 - program for a long time and that's what
00:26 - I'm gonna share with you here today
00:27 - first of all the five kind of reasons
00:30 - why you're being slowed down when you're
00:31 - programming and then how we can combat
00:33 - those and get faster and faster and
00:35 - eventually work our way up to close to a
00:37 - hundred percent efficiency when we're
00:38 - actually programming now in reality
00:40 - there's thousands of things that can
00:42 - slow you down when you're programming
00:43 - but the ones that I'm going to mention
00:44 - here kind of the five main points and
00:46 - the things that make the biggest
00:47 - difference now the first and most
00:49 - obvious thing that's gonna slow you down
00:50 - while you're coding is bugs now
00:52 - debugging trying to find logical errors
00:54 - that's gonna be the number one thing
00:56 - that slows you down I'm gonna talk about
00:57 - how we can kind of avoid that now the
00:59 - second thing that I notice that slows me
01:01 - down personally a lot is redesigning and
01:03 - rewriting code so I don't do it right
01:06 - the first time or I don't come up with a
01:07 - good design right don't plan out my code
01:09 - and I end up having to change things and
01:11 - change the structure and kind of the way
01:12 - that I've laid out my code which takes a
01:14 - really long time now the third thing is
01:17 - gonna slow you down is distractions now
01:19 - this is going to apply to every job
01:20 - field but specifically programming
01:22 - programming is something where you need
01:24 - to be dialed in you often hear the term
01:26 - you know he's wired in don't talk to him
01:28 - don't mess with them don't say anything
01:29 - because you're just programming you're
01:31 - wired in and your laser focus and that's
01:33 - something that you need to get to if you
01:35 - want to be efficient now the next thing
01:37 - that's gonna slow you down is reading
01:38 - documentation now this is vital for most
01:41 - things that you do but how can you do it
01:43 - efficiently effectively and kind of
01:45 - avoid just sifting through it and not
01:46 - really getting the information you need
01:48 - and the last thing that's gonna slow you
01:49 - down is well just having no idea what
01:52 - you're doing and learning while you're
01:54 - programming something now we're gonna
01:56 - get into this in more detail and talk
01:57 - about exactly what this means but these
01:58 - are kind of the main things that are
02:00 - gonna slow you down so now let's talk
02:01 - about how we can avoid them now the
02:03 - sponsor of today's video actually wants
02:04 - to help you code faster by downloading
02:06 - their free product called kite now kite
02:09 - is a free plugin for your IDE or text
02:11 - editor uses machine learning to give you
02:12 - the
02:13 - two possible completions for your Python
02:15 - code it's capable of completing entire
02:17 - lines entire function calls and it ranks
02:19 - all of its completions by relevance so
02:21 - you get shown the best ones first even
02:23 - as another feature called intelligence
02:25 - snippets which allows you to quickly tab
02:26 - to the different options and choose
02:28 - which completion you'd like one of the
02:30 - coolest features that comes with kite is
02:31 - called co-pilot
02:32 - now what code pilot does this provide
02:34 - one-click documentation it shows you
02:36 - information about modules classes
02:38 - methods and functions based on your
02:40 - cursor location now the best part of
02:42 - kite is that it's free and you can
02:44 - download it at the link below alright
02:46 - it's the first thing to do that's gonna
02:48 - save you a lot of time is to avoid bugs
02:50 - now I will save and I acknowledge this
02:52 - bugs are gonna happen they're inevitable
02:54 - you're gonna run into them so being able
02:56 - to kind of avoid as many as possible and
02:58 - then understanding how to solve them
02:59 - when you run into them is gonna save you
03:01 - massive amounts of time I know you guys
03:04 - have been here where you're writing a
03:05 - program and then all of a sudden it
03:06 - might not even be a syntax bug it might
03:08 - just be some kind of logical bug you
03:09 - implemented to the program you have no
03:11 - idea where it is you get frustrated you
03:13 - can't do anything you give up or you
03:15 - start writing something else the bug
03:16 - messes up and then eventually you find
03:18 - it and you fix it or you just change
03:20 - some random lines and you know you end
03:21 - up fixing in you hope it doesn't come
03:23 - back this is really not a good way to do
03:25 - things and I'm gonna talk about how we
03:27 - can fix that in a second but the first
03:29 - thing is avoiding bugs to avoid bugs the
03:31 - first thing I recommend is just thinking
03:33 - before you start rambling just writing a
03:35 - ton of code what I usually do and you
03:37 - guys can see this in any of my live
03:39 - streams I've done where I've done some
03:40 - live coding is I'll bring up my
03:42 - whiteboard and I'll bring out my tablet
03:43 - and I'll start drawing stuff out and
03:45 - just thinking logically about the
03:46 - problem and I start thinking about
03:48 - possible edge cases for what I'm doing
03:50 - why this might break and I'm trying to
03:52 - break my own kind of concepts an idea
03:54 - before I even bother implementing it
03:56 - into code for me it's much more worth it
03:58 - to spend 20 minutes on the whiteboard
04:00 - writing stuff out in thinking about the
04:02 - perfect solution and testing it like
04:03 - that then is to write a bunch of junk
04:05 - code mess with it have to tweak it fix
04:07 - some bugs and then eventually end up
04:09 - rewriting it anyways so I always
04:10 - recommend think before you implement and
04:13 - just really you know think about what it
04:15 - is that you're gonna do and that's
04:16 - something that so many people don't do
04:17 - these days is just simply think okay so
04:19 - let's say you've done that you know
04:20 - you're writing your program and now you
04:22 - run into a bug you've thought about it
04:24 - you don't know what's wrong with it well
04:25 - the thing that's large
04:26 - to do is to start eliminating where this
04:29 - bug could be and what I mean by that is
04:31 - kinda have to think of what could be
04:33 - going wrong maybe there's 20 maybe
04:35 - there's 30 different things that could
04:36 - be going wrong
04:37 - what I'm gonna do if this happens to me
04:38 - I'm gonna list those things out and I'm
04:40 - gonna check them one at a time I'm gonna
04:41 - check you know the server side I'm gonna
04:43 - check the client side I'm gonna go and
04:45 - I'm gonna check this and I'm gonna find
04:46 - things that I know work a hundred
04:48 - percent correct on it be aware of that
04:50 - and then I'm gonna slowly work through
04:51 - things until I find what's going wrong
04:54 - and this is the process of kind of just
04:55 - solving any problem in general now it
04:58 - applies specifically to programming
05:00 - because oftentimes you can have a lot of
05:01 - different paths you could be going on so
05:03 - if you can kind of cross off paths and
05:05 - say nope there's nothing wrong with that
05:06 - one I don't need to look at that that's
05:07 - really good that's gonna help you move
05:09 - towards the bug and the problem rather
05:10 - than just randomly guessing and changing
05:12 - lines and possibly breaking your program
05:14 - more than RT is so the next thing you
05:16 - want to avoid if you want to become a
05:17 - faster programmer is restructuring and
05:19 - redesigning your code constantly and
05:22 - what I mean by that is you go in you
05:23 - just start coding a project you don't
05:24 - really think about what you're gonna do
05:26 - and then halfway in the middle of your
05:27 - project while you're coding you're like
05:29 - damn I want to add this in I want to
05:31 - have this feature I want to create this
05:32 - new thing but the way that you've
05:34 - designed this so far does not allow for
05:36 - that to happen in other words you
05:38 - haven't programmed the scalable you
05:39 - haven't thought it out well enough and
05:41 - now you have to redesign the entire
05:42 - document the entire code base to add
05:45 - this one feature to add something new
05:46 - now this is gonna obviously take you a
05:48 - lot of time and it's gonna require you
05:50 - doing exactly what I'm about to mention
05:52 - you should do before you start
05:53 - programming and that is coming up with a
05:55 - plan before you start writing any code
05:57 - for somewhat of a large project or even
06:00 - a medium-sized project you should really
06:01 - plan out exactly what you're gonna need
06:03 - what data structures you're going to
06:05 - need what kind of classes the
06:06 - interaction between objects and other
06:08 - data and pieces of information you need
06:10 - to create some kind of document almost
06:13 - listing all these things now typically
06:15 - they call this a UML document but
06:17 - whatever it is you guys want to make is
06:18 - fine by me so long as you come up with
06:20 - some kind of plan this saves you
06:22 - tremendous amounts of time it's like
06:24 - seriously crazy amounts of time by doing
06:26 - this because now when you're programming
06:28 - something you don't have to be thinking
06:29 - about the design and the structure
06:31 - constantly because you've already laid
06:32 - it out you've already thought of it and
06:33 - now you're just implementing that design
06:35 - and that is really the process of
06:37 - writing good code is first you know
06:39 - figuring out the problem
06:40 - but you want to solve then designing it
06:42 - then implementing it and then you can
06:43 - obviously change things later on to have
06:46 - a better suited structure for what you
06:47 - want to do now another small point here
06:49 - to mention is when you're implementing
06:50 - methods and classes try to keep things
06:53 - simple now I'm guilty of this as well
06:55 - but most people and especially younger
06:56 - program is at least from what I can see
06:58 - is right crazy convoluted methods and
07:01 - just ways of doing things that are super
07:03 - advanced to try to show what they know
07:05 - or to try to prove that they're smarter
07:07 - than other people now you know whatever
07:09 - go ahead if you want to do this but it
07:11 - just is such a headache in the future
07:13 - one maybe you haven't programmed in a
07:14 - month or you haven't looked at this code
07:16 - in a while and you come back and you're
07:17 - adding a new feature and you run into a
07:19 - bug and then you realize maybe that bug
07:20 - is from something you wrote before you
07:22 - go back and you try to read these
07:24 - methods and you're like holy crap what
07:26 - was i doing whereas if you would just
07:28 - added you know two or three lines
07:29 - simplified things a bit but made them a
07:31 - bit more readable this would have saved
07:32 - you a tremendous amount of time so just
07:34 - keep things simple to start it might
07:36 - seem like it takes a little bit longer
07:37 - at the beginning to write those methods
07:39 - and do all of that but in the long term
07:41 - this is gonna save you a huge amount of
07:42 - time and just the amount of time you can
07:44 - avoid by debugging and having to read
07:46 - this code in the future is definitely
07:48 - well worth it all right so this next
07:49 - point is going to apply to pretty much
07:51 - every discipline not just programming
07:53 - and that is eliminate all distractions
07:55 - now anyone who programs knows that to
07:58 - really be able to get anything done you
08:00 - need to build a focus for multiple hours
08:02 - at a time and you guys have seen this
08:03 - before I've done live programming
08:05 - streams where I program for 12 18 hours
08:08 - live straight now the reason I do
08:10 - something ridiculous like this is not
08:11 - just to show off to you guys but it's
08:13 - also because being able to focus on a
08:16 - project for a crazy amount of time
08:18 - allows you to keep your head completely
08:20 - in what you're doing so you can
08:21 - constantly keep your train of thought
08:23 - you can just flow and just go with
08:25 - things I would much rather work for five
08:27 - hours straight then work for an hour
08:29 - take a break for half an hour work for
08:31 - another hour I'd be way less efficient
08:33 - doing that because if I can just focus
08:34 - four hours like four or five hours at a
08:37 - time without having to take breaks
08:38 - without being distracted by my phone or
08:40 - all these different things I can get a
08:42 - lot done and that's what you guys will
08:44 - notice as you start programming larger
08:46 - projects is when you can just dial in
08:48 - and really focus on something you're
08:49 - gonna be crazy efficient and it just is
08:51 - the best way to
08:52 - get things done now I'm not recommending
08:54 - anyone does what I do and just sit there
08:55 - for 12 hours because that is a bit
08:57 - ridiculous you do need to take breaks
08:59 - you do need to maintain your eyes and
09:00 - look away from the screen and all of
09:01 - that but what I'm saying is try to find
09:03 - times in your day where you can dial in
09:06 - really get focused for two or three
09:07 - hours and just coat a bunch of stuff in
09:10 - that time and avoid all distractions now
09:12 - a good way that I like to avoid
09:13 - distractions is first of all just you
09:15 - know throwing my phone away leaving it
09:16 - on the other side of the room I usually
09:18 - like to put on some nice music so I kind
09:19 - of get relaxed and then I just set up my
09:22 - setup and and go and just code the
09:24 - entire time and I'm like for this three
09:25 - hours that's what I'm doing I'm coding
09:27 - there's no distractions I'm not looking
09:29 - at YouTube videos I'm not doing any of
09:30 - this and you get a lot done now another
09:33 - thing to mention here is make sure that
09:35 - your setup is good now personally I mean
09:37 - you guys can see here I've invested a
09:39 - lot of money in my programming setup and
09:41 - it saves me a lot of time because I'm
09:43 - very comfortable where I am I have
09:44 - everything I need I don't need to get up
09:46 - and walk around and look for things and
09:48 - do all this I have a nice keyboard just
09:50 - invest in yourself and invest in your
09:52 - setup because that's where you're gonna
09:53 - be spending long periods of time and you
09:54 - don't want to be miserable when you're
09:56 - spending you know three four hours
09:57 - programming in a row now the next thing
09:59 - that's gonna slow you down tremendously
10:01 - is reading documentation or trying to
10:03 - learn something new now the reality is
10:05 - when you create something you're
10:07 - probably gonna have to learn something
10:08 - new you're gonna have to look stuff up
10:10 - and Google should be your best friend
10:12 - personally for me I always have a Google
10:14 - window open on my other tab and I just
10:16 - go to it whenever I need something
10:17 - really quickly look it up and then
10:18 - cross-reference my code and whenever I
10:20 - have on Google there to see what's
10:22 - happening the best programs in the world
10:24 - will do this constantly if you think
10:26 - that you're just gonna memorize syntax
10:27 - and you're gonna already know how
10:29 - everything works then you're just I
10:30 - don't know what to say but people just
10:32 - constantly are looking up documentation
10:34 - it's a skill you need to master and it's
10:36 - gonna save you a ton of time if you can
10:37 - quickly go to a Stack Overflow or you
10:39 - can quickly read through this api's
10:41 - documentation and understand how it
10:42 - works
10:43 - now the first thing I say is if this is
10:45 - your first run looking through
10:46 - documentation don't just copy and paste
10:49 - stuff what you want to do is understand
10:51 - how this works and as soon as you start
10:54 - to kind of understand the way that
10:55 - they've built this program and the way
10:56 - they built this API the way they do
10:58 - things you'll be able to very quickly
11:00 - pick up the rest of it now this goes
11:02 - without saying but to be able to really
11:04 - read documentation to understand
11:06 - you have to be a somewhat experienced
11:07 - programmer and what I mean by that is
11:09 - you have to understand classes you have
11:11 - to understand objects if you don't
11:12 - understand those things well there's no
11:14 - way you're gonna be able to read the
11:15 - documentation they're literally just
11:16 - built on explaining those different
11:18 - aspects to you see I got to get that
11:19 - down first but after you've done that
11:21 - what I recommend is try practicing
11:24 - reading documentation I know this is the
11:26 - most boring thing in the world and
11:28 - you're probably gonna hate the time you
11:29 - spend doing it but if you can get good
11:31 - at being able to find information on a
11:32 - page seek through documentation that's
11:35 - gonna save you a lot of time in the
11:36 - future now the next thing to talk about
11:38 - here is the fact that a lot of people
11:40 - jump into projects or start doing things
11:42 - and they have absolutely no idea what's
11:44 - involved in it and they have no idea
11:45 - what they're getting themselves into now
11:47 - let's say this is specific to Python and
11:49 - you want a program neural networks and
11:51 - make machine learning applications okay
11:52 - great that's awesome do you know what's
11:54 - involved in doing that do you have the
11:56 - prerequisites for that do you understand
11:58 - Python if you don't you should probably
11:59 - enroll in my course which I'll give you
12:01 - 25% off for right now if you just look
12:03 - click it should be like a little thing
12:05 - here that says the code as well as the
12:06 - link in the description but continuing
12:08 - if you don't know what you're doing you
12:09 - don't know the basics of a language you
12:11 - should really get that down before you
12:13 - start jumping into a massive project so
12:16 - just do some research beforehand come up
12:18 - with a plan and figure out if this is
12:19 - even possible to do with your current
12:22 - knowledge base because you don't want to
12:24 - be wasting your time trying to implement
12:26 - this crazy complicated algorithm or do
12:28 - this you know ridiculous thing that you
12:30 - have no idea what to do now the other
12:32 - way here is you know maybe you do know
12:33 - what to do you you have the skill set
12:35 - but you don't know the way to approach a
12:37 - problem what I would say then is look it
12:40 - up you know try to figure out what you
12:42 - should be doing do some research make a
12:44 - plan and then that way when you start
12:45 - programming you'll have a better idea
12:47 - what you need to do that's gonna save
12:49 - you a lot of time from just you know
12:50 - checking and gassing and doing all that
12:52 - which happens all the time so anyways
12:54 - those are kind of my tips to become a
12:56 - faster programmer I understand that some
12:58 - of these won't be applicable in every
13:00 - sense and you know some are more
13:01 - important than the other I haven't
13:03 - listed these in any specific order but I
13:05 - just want you guys to you know be aware
13:07 - of how much time is being wasted and how
13:09 - much more efficient you could be if you
13:11 - get one thing from this video spend long
13:13 - times programming I guarantee you this
13:15 - will be the number one factor that
13:17 - increases your productivity you know
13:19 - spend three
13:19 - for five hours straight programming
13:21 - sounds ridiculous but if you can do this
13:23 - you will be much much faster so with
13:27 - that being said that is it for today
13:28 - guys again if you want to enroll in the
13:30 - course there is a discount code here for
13:31 - 25% off you know see you guys

Cleaned transcript:

so the reality is most people work very slowly they're not very efficient they don't care about how fast they're doing things and in many job environments that's accepted and that's fine and kind of everyone works at about 50% efficiency and never pushes forward now in programming that is not really acceptable and being able to program faster is a massive advantage that's gonna set you apart from virtually everyone else that's on your team now these skills are what you learn as you program for a long time and that's what I'm gonna share with you here today first of all the five kind of reasons why you're being slowed down when you're programming and then how we can combat those and get faster and faster and eventually work our way up to close to a hundred percent efficiency when we're actually programming now in reality there's thousands of things that can slow you down when you're programming but the ones that I'm going to mention here kind of the five main points and the things that make the biggest difference now the first and most obvious thing that's gonna slow you down while you're coding is bugs now debugging trying to find logical errors that's gonna be the number one thing that slows you down I'm gonna talk about how we can kind of avoid that now the second thing that I notice that slows me down personally a lot is redesigning and rewriting code so I don't do it right the first time or I don't come up with a good design right don't plan out my code and I end up having to change things and change the structure and kind of the way that I've laid out my code which takes a really long time now the third thing is gonna slow you down is distractions now this is going to apply to every job field but specifically programming programming is something where you need to be dialed in you often hear the term you know he's wired in don't talk to him don't mess with them don't say anything because you're just programming you're wired in and your laser focus and that's something that you need to get to if you want to be efficient now the next thing that's gonna slow you down is reading documentation now this is vital for most things that you do but how can you do it efficiently effectively and kind of avoid just sifting through it and not really getting the information you need and the last thing that's gonna slow you down is well just having no idea what you're doing and learning while you're programming something now we're gonna get into this in more detail and talk about exactly what this means but these are kind of the main things that are gonna slow you down so now let's talk about how we can avoid them now the sponsor of today's video actually wants to help you code faster by downloading their free product called kite now kite is a free plugin for your IDE or text editor uses machine learning to give you the two possible completions for your Python code it's capable of completing entire lines entire function calls and it ranks all of its completions by relevance so you get shown the best ones first even as another feature called intelligence snippets which allows you to quickly tab to the different options and choose which completion you'd like one of the coolest features that comes with kite is called copilot now what code pilot does this provide oneclick documentation it shows you information about modules classes methods and functions based on your cursor location now the best part of kite is that it's free and you can download it at the link below alright it's the first thing to do that's gonna save you a lot of time is to avoid bugs now I will save and I acknowledge this bugs are gonna happen they're inevitable you're gonna run into them so being able to kind of avoid as many as possible and then understanding how to solve them when you run into them is gonna save you massive amounts of time I know you guys have been here where you're writing a program and then all of a sudden it might not even be a syntax bug it might just be some kind of logical bug you implemented to the program you have no idea where it is you get frustrated you can't do anything you give up or you start writing something else the bug messes up and then eventually you find it and you fix it or you just change some random lines and you know you end up fixing in you hope it doesn't come back this is really not a good way to do things and I'm gonna talk about how we can fix that in a second but the first thing is avoiding bugs to avoid bugs the first thing I recommend is just thinking before you start rambling just writing a ton of code what I usually do and you guys can see this in any of my live streams I've done where I've done some live coding is I'll bring up my whiteboard and I'll bring out my tablet and I'll start drawing stuff out and just thinking logically about the problem and I start thinking about possible edge cases for what I'm doing why this might break and I'm trying to break my own kind of concepts an idea before I even bother implementing it into code for me it's much more worth it to spend 20 minutes on the whiteboard writing stuff out in thinking about the perfect solution and testing it like that then is to write a bunch of junk code mess with it have to tweak it fix some bugs and then eventually end up rewriting it anyways so I always recommend think before you implement and just really you know think about what it is that you're gonna do and that's something that so many people don't do these days is just simply think okay so let's say you've done that you know you're writing your program and now you run into a bug you've thought about it you don't know what's wrong with it well the thing that's large to do is to start eliminating where this bug could be and what I mean by that is kinda have to think of what could be going wrong maybe there's 20 maybe there's 30 different things that could be going wrong what I'm gonna do if this happens to me I'm gonna list those things out and I'm gonna check them one at a time I'm gonna check you know the server side I'm gonna check the client side I'm gonna go and I'm gonna check this and I'm gonna find things that I know work a hundred percent correct on it be aware of that and then I'm gonna slowly work through things until I find what's going wrong and this is the process of kind of just solving any problem in general now it applies specifically to programming because oftentimes you can have a lot of different paths you could be going on so if you can kind of cross off paths and say nope there's nothing wrong with that one I don't need to look at that that's really good that's gonna help you move towards the bug and the problem rather than just randomly guessing and changing lines and possibly breaking your program more than RT is so the next thing you want to avoid if you want to become a faster programmer is restructuring and redesigning your code constantly and what I mean by that is you go in you just start coding a project you don't really think about what you're gonna do and then halfway in the middle of your project while you're coding you're like damn I want to add this in I want to have this feature I want to create this new thing but the way that you've designed this so far does not allow for that to happen in other words you haven't programmed the scalable you haven't thought it out well enough and now you have to redesign the entire document the entire code base to add this one feature to add something new now this is gonna obviously take you a lot of time and it's gonna require you doing exactly what I'm about to mention you should do before you start programming and that is coming up with a plan before you start writing any code for somewhat of a large project or even a mediumsized project you should really plan out exactly what you're gonna need what data structures you're going to need what kind of classes the interaction between objects and other data and pieces of information you need to create some kind of document almost listing all these things now typically they call this a UML document but whatever it is you guys want to make is fine by me so long as you come up with some kind of plan this saves you tremendous amounts of time it's like seriously crazy amounts of time by doing this because now when you're programming something you don't have to be thinking about the design and the structure constantly because you've already laid it out you've already thought of it and now you're just implementing that design and that is really the process of writing good code is first you know figuring out the problem but you want to solve then designing it then implementing it and then you can obviously change things later on to have a better suited structure for what you want to do now another small point here to mention is when you're implementing methods and classes try to keep things simple now I'm guilty of this as well but most people and especially younger program is at least from what I can see is right crazy convoluted methods and just ways of doing things that are super advanced to try to show what they know or to try to prove that they're smarter than other people now you know whatever go ahead if you want to do this but it just is such a headache in the future one maybe you haven't programmed in a month or you haven't looked at this code in a while and you come back and you're adding a new feature and you run into a bug and then you realize maybe that bug is from something you wrote before you go back and you try to read these methods and you're like holy crap what was i doing whereas if you would just added you know two or three lines simplified things a bit but made them a bit more readable this would have saved you a tremendous amount of time so just keep things simple to start it might seem like it takes a little bit longer at the beginning to write those methods and do all of that but in the long term this is gonna save you a huge amount of time and just the amount of time you can avoid by debugging and having to read this code in the future is definitely well worth it all right so this next point is going to apply to pretty much every discipline not just programming and that is eliminate all distractions now anyone who programs knows that to really be able to get anything done you need to build a focus for multiple hours at a time and you guys have seen this before I've done live programming streams where I program for 12 18 hours live straight now the reason I do something ridiculous like this is not just to show off to you guys but it's also because being able to focus on a project for a crazy amount of time allows you to keep your head completely in what you're doing so you can constantly keep your train of thought you can just flow and just go with things I would much rather work for five hours straight then work for an hour take a break for half an hour work for another hour I'd be way less efficient doing that because if I can just focus four hours like four or five hours at a time without having to take breaks without being distracted by my phone or all these different things I can get a lot done and that's what you guys will notice as you start programming larger projects is when you can just dial in and really focus on something you're gonna be crazy efficient and it just is the best way to get things done now I'm not recommending anyone does what I do and just sit there for 12 hours because that is a bit ridiculous you do need to take breaks you do need to maintain your eyes and look away from the screen and all of that but what I'm saying is try to find times in your day where you can dial in really get focused for two or three hours and just coat a bunch of stuff in that time and avoid all distractions now a good way that I like to avoid distractions is first of all just you know throwing my phone away leaving it on the other side of the room I usually like to put on some nice music so I kind of get relaxed and then I just set up my setup and and go and just code the entire time and I'm like for this three hours that's what I'm doing I'm coding there's no distractions I'm not looking at YouTube videos I'm not doing any of this and you get a lot done now another thing to mention here is make sure that your setup is good now personally I mean you guys can see here I've invested a lot of money in my programming setup and it saves me a lot of time because I'm very comfortable where I am I have everything I need I don't need to get up and walk around and look for things and do all this I have a nice keyboard just invest in yourself and invest in your setup because that's where you're gonna be spending long periods of time and you don't want to be miserable when you're spending you know three four hours programming in a row now the next thing that's gonna slow you down tremendously is reading documentation or trying to learn something new now the reality is when you create something you're probably gonna have to learn something new you're gonna have to look stuff up and Google should be your best friend personally for me I always have a Google window open on my other tab and I just go to it whenever I need something really quickly look it up and then crossreference my code and whenever I have on Google there to see what's happening the best programs in the world will do this constantly if you think that you're just gonna memorize syntax and you're gonna already know how everything works then you're just I don't know what to say but people just constantly are looking up documentation it's a skill you need to master and it's gonna save you a ton of time if you can quickly go to a Stack Overflow or you can quickly read through this api's documentation and understand how it works now the first thing I say is if this is your first run looking through documentation don't just copy and paste stuff what you want to do is understand how this works and as soon as you start to kind of understand the way that they've built this program and the way they built this API the way they do things you'll be able to very quickly pick up the rest of it now this goes without saying but to be able to really read documentation to understand you have to be a somewhat experienced programmer and what I mean by that is you have to understand classes you have to understand objects if you don't understand those things well there's no way you're gonna be able to read the documentation they're literally just built on explaining those different aspects to you see I got to get that down first but after you've done that what I recommend is try practicing reading documentation I know this is the most boring thing in the world and you're probably gonna hate the time you spend doing it but if you can get good at being able to find information on a page seek through documentation that's gonna save you a lot of time in the future now the next thing to talk about here is the fact that a lot of people jump into projects or start doing things and they have absolutely no idea what's involved in it and they have no idea what they're getting themselves into now let's say this is specific to Python and you want a program neural networks and make machine learning applications okay great that's awesome do you know what's involved in doing that do you have the prerequisites for that do you understand Python if you don't you should probably enroll in my course which I'll give you 25% off for right now if you just look click it should be like a little thing here that says the code as well as the link in the description but continuing if you don't know what you're doing you don't know the basics of a language you should really get that down before you start jumping into a massive project so just do some research beforehand come up with a plan and figure out if this is even possible to do with your current knowledge base because you don't want to be wasting your time trying to implement this crazy complicated algorithm or do this you know ridiculous thing that you have no idea what to do now the other way here is you know maybe you do know what to do you you have the skill set but you don't know the way to approach a problem what I would say then is look it up you know try to figure out what you should be doing do some research make a plan and then that way when you start programming you'll have a better idea what you need to do that's gonna save you a lot of time from just you know checking and gassing and doing all that which happens all the time so anyways those are kind of my tips to become a faster programmer I understand that some of these won't be applicable in every sense and you know some are more important than the other I haven't listed these in any specific order but I just want you guys to you know be aware of how much time is being wasted and how much more efficient you could be if you get one thing from this video spend long times programming I guarantee you this will be the number one factor that increases your productivity you know spend three for five hours straight programming sounds ridiculous but if you can do this you will be much much faster so with that being said that is it for today guys again if you want to enroll in the course there is a discount code here for 25% off you know see you guys
