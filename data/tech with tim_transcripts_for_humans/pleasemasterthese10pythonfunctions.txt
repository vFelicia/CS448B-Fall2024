With timestamps:

00:00 - if you write any code in Python then
00:02 - you'll see these 10 python functions a
00:04 - ton and it's important you master them
00:06 - some of them may seem simple but they
00:08 - have a lot of additional parameters that
00:09 - you need to understand as they can save
00:11 - you a ton of time so with that said
00:14 - let's dive in and look at function
00:15 - number one so the first function we'll
00:17 - look at here is the print function now
00:19 - this is probably the first thing you
00:20 - learn When You Learn Python and it seems
00:22 - super basic we can print out a few
00:24 - different things we can separate them by
00:26 - commas and you can see that we can print
00:28 - a mix of strings and variables and when
00:30 - we do that they'll get printed out
00:32 - separated by a space but what you
00:34 - probably didn't know is that we can pass
00:36 - additional arguments to the print
00:37 - function then modify how it works for
00:40 - example I can pass this sep argument
00:43 - here so sep is equal to and I'll go with
00:45 - something like a pipe and now what will
00:47 - happen is rather than using a space as
00:49 - the delimiter or what goes in between
00:51 - the different arguments we passed to the
00:53 - print function we'll use this pipe so
00:56 - when I run the code now you see we get
00:58 - my name is and then pipe pipe and I am
01:01 - pipe 23 pipe years old so we can
01:04 - override that default Behavior which is
01:06 - to use a space to separate all the
01:08 - different things we're Printing and in
01:09 - this case we use a pipe now maybe
01:11 - instead we want to use a comma so let's
01:13 - go back here and change that to a comma
01:15 - and print this out and now you can see
01:17 - that we're printing things with a comma
01:18 - this is quite useful especially when you
01:20 - want to print out things that have a
01:21 - certain formatting and you don't want to
01:23 - do the manual formatting yourself now
01:25 - another thing we should know about the
01:26 - print function is how we change what
01:28 - gets printed at the end of the line line
01:30 - so you may not know this but by default
01:32 - when you print something with this
01:34 - function it's going to actually add a
01:36 - back sln which is a new line character
01:38 - which will force the terminal to go to
01:40 - the next line so when you print
01:42 - something else it won't be on the same
01:44 - line now typically this is what you want
01:46 - and that means when I run the code here
01:48 - you'll see we get these two print
01:49 - statements on separate lines but
01:51 - sometimes you actually want to print
01:52 - things on the same line so how do you do
01:55 - that well what we can actually do is we
01:56 - can override this end argument here and
01:59 - we can pass this something different
02:00 - than the new line character so I could
02:03 - pass say end is equal to a pipe and
02:05 - maybe put some spaces around it and if
02:07 - we clear here and run you'll see now we
02:10 - get hello world and at the end of this
02:12 - print statement it prints the pipe with
02:15 - the spaces and then when we go to print
02:17 - the next line it will happen on the same
02:19 - line here because we didn't move down to
02:21 - the next line so now we're going to dive
02:23 - into the second function here which is
02:25 - the help function but first I need to
02:27 - share with you something that's going to
02:28 - be very helpful and that is the sponsor
02:31 - of this video today's video is sponsored
02:34 - by mail trap an email delivery platform
02:37 - that developers Love Now what's cool
02:40 - about mail trap it's actionable
02:42 - analytics the best in the industry with
02:45 - full statistics and drill down reports
02:47 - on each and every email you
02:49 - sent mail trap offers separate streams
02:52 - for transactional and bulk emails SMTP
02:55 - and API Integrations Plus sdks for major
02:59 - Pro programming languages at mail trap
03:02 - human support is available round the
03:04 - clock for all customers try today at
03:07 - mail
03:09 - trap. so hopefully you appreciated that
03:12 - segue there but now let's have a look at
03:14 - the help function now the help function
03:16 - allows us to print out the documentation
03:18 - of a python function so we don't need to
03:20 - go to the internet to look it up and we
03:22 - can really quickly get access to how a
03:24 - function works now what this will do is
03:26 - read the dock strings of a function and
03:28 - simply give it to us so what I can do is
03:30 - something like help and then I can pass
03:32 - to this maybe the print function and
03:34 - notice I'm not calling the print
03:35 - function I'm just writing the name of it
03:38 - and now when I run the code you'll see
03:39 - that it actually prints out all of the
03:41 - documentation for the print function
03:43 - this is what's contained in the doc
03:45 - string for it so you can see it says
03:47 - print kind of shows you an example of
03:48 - how it works and then it gives you a
03:50 - description of the different arguments
03:51 - or the parameters for this function now
03:54 - this also works for your own functions
03:55 - so let me show you that so you can see
03:57 - here I've written a custom function
03:59 - called test Funk and I've just written a
04:01 - doc string for it just as an example so
04:03 - we can see how this works now when I run
04:05 - my code here notice it will actually
04:07 - give me the documentation of this
04:08 - function so it says a b and then the
04:11 - return type again it's really just
04:12 - printing out what the doc string is
04:14 - that's written here so this is useful
04:15 - for built-in functions but also when
04:17 - you're working with a library or code
04:19 - written by other people so you don't
04:20 - need to search through and find the
04:22 - actual function definition you can just
04:24 - use this help function it will print it
04:26 - out for you so the next function on my
04:28 - list is a very common one and you you've
04:29 - probably seen this especially if you're
04:31 - working with a for Loop and that is
04:33 - range now as much as range can be used
04:35 - to iterate through values in a for Loop
04:37 - we can also use it just to generate a
04:39 - list of numbers and I'll quickly walk
04:40 - through how it works because it is a
04:42 - very important function so what range
04:44 - will do is generate a range of numbers
04:46 - starting at some value stopping at some
04:49 - value and stepping by some value now by
04:52 - default when you only pass one value
04:53 - here to the range function this acts as
04:56 - the stop that means it's going to go up
04:58 - to but not include this number and it's
05:00 - going to start at one and step by one
05:02 - which means go up by one each time so if
05:05 - I run the code here you can see that
05:06 - this gives us the values 0 through 9
05:09 - again because we go to the stopping
05:10 - point but we do not include it now if I
05:13 - have a second value here something like
05:15 - two and then 10 this will act as the
05:18 - start value and this will act as the
05:20 - stop value and now when I run this you
05:22 - see that we will simply start at two we
05:24 - will go up to 10 but not include it if I
05:26 - decide to add a third value here
05:28 - something like two this will act as the
05:30 - step value and this will be the
05:32 - increment that we will go up by each
05:34 - time so if I run this here we get 2 4 6
05:36 - 8 now this is quite useful and we can do
05:39 - this in many different kind of ways to
05:41 - generate a lot of different sequences of
05:42 - numbers for example I can change this to
05:44 - ative -2 and I can swap these values
05:46 - around and go maybe 10 and maybe we're
05:49 - actually going to go to something like
05:50 - -10 and now this will give us a negative
05:52 - range where we start at 10 and we
05:54 - subtract two each time until we hit the
05:56 - stopping value of -10 which we do not
05:58 - include very useful for for Loops but
06:00 - also if you convert this range into a
06:02 - list then you can simply use it as a
06:04 - list of values one thing to note if you
06:07 - print out range itself which we can do
06:10 - here you'll see that we actually get a
06:12 - range object that's because range
06:14 - returns to us something known as an
06:16 - iterator an iterator is something that
06:18 - we step through using kind of a specific
06:20 - process that I don't need to get into in
06:21 - this video the point is if you want to
06:24 - actually get an entire list of values
06:26 - you do need to manually convert this to
06:28 - a list okay so to do that we just write
06:31 - the list function around range and then
06:33 - as you saw before it gives us a list of
06:34 - values rather than this range object
06:37 - which again is an iterator now the next
06:39 - function we're looking at is the map
06:40 - function now a map function allows us to
06:43 - apply a function to every single item in
06:45 - an iterable object an iterable object is
06:48 - anything that you can Loop through so
06:50 - something like a string a list a tupple
06:53 - something like a set it works for all of
06:55 - those so let's have a look at a quick
06:57 - example so let's say that what we want
06:59 - to do is we want to get the length of
07:00 - all of the different strings in this
07:02 - list well we could iterate through every
07:05 - single one of these strings manually
07:07 - apply the length function and then just
07:09 - print it out or store it in a new list
07:11 - but instead we can actually use the map
07:13 - function that does all of this for us so
07:15 - I can say the lengths is equal to and
07:18 - then I can use my map function and the
07:20 - first thing I pass to the map function
07:22 - is the function that I want to apply to
07:24 - all of the different items in my
07:26 - iterable so in this case I passed the
07:27 - Len function we can pass our own
07:29 - function or in this case a built-in one
07:31 - in Python and then I pass the iterable
07:33 - that I want to apply this to which is
07:35 - strings now what I can do is I can print
07:37 - out and I need to convert this to a list
07:39 - because again this is going to return an
07:40 - iterator so it's going to return a map
07:42 - object if we want to see all of the
07:44 - results then we need to First convert it
07:46 - to a list and now if I run my code you
07:48 - see that it gives me the length of all
07:50 - of these different items so it simply
07:53 - took this function applied it to every
07:55 - single item that was in this list and
07:57 - then gave me that result inside of in
07:59 - this case a new list or really a new
08:01 - iterable that we converted to a list now
08:03 - in this case we used a built-in function
08:06 - in Python but we can also use a custom
08:08 - function that we write ourself now it's
08:10 - common here to use what's known as a
08:12 - Lambda function a Lambda function is a
08:14 - oneline a nymous function where you can
08:16 - do something like Lambda you can pass a
08:18 - parameter in this case it will be X and
08:20 - then if we want we could do something
08:23 - like x + S now what this is going to do
08:26 - is it's going to pass every single one
08:27 - of the strings to this function as the
08:29 - parameter X and we're simply going to
08:31 - add an S to all of these different
08:33 - strings so now what I'm going to do is
08:35 - write run this code sory and you can see
08:37 - we get an S tacked on to every single
08:39 - one of these strings now if you don't
08:41 - want to use a Lambda function you can
08:42 - Define your own function so we can say
08:44 - addore s we can take in our string okay
08:48 - and then we can say something like
08:51 - return and then string plus s and now we
08:54 - can just put the name of this function
08:55 - notice I'm not calling it I'm just
08:57 - putting it uh as the name and then when
08:59 - I run this you can see that we get the
09:01 - exact same result so that is map it is
09:03 - extremely useful again you pass the
09:05 - function you pass the iterable object
09:08 - and then it will apply this function to
09:10 - every single item and give you all of
09:12 - the results so now we're moving on to
09:14 - the next function which is the filter
09:15 - function which is closely related to the
09:17 - map function the way the filter function
09:20 - will work is it will take every single
09:22 - item in our iterable object it will pass
09:25 - it to some function in this case it's
09:27 - called the filter function and if that
09:29 - function returns true it will keep that
09:31 - item otherwise it will remove it from
09:34 - the result so let me show you an example
09:36 - we'll just say filter is equal to and
09:38 - then we're going to use filter same
09:40 - thing we're going to pass our function
09:42 - in this case I'm going to pass this
09:43 - custom function I wrote called longer
09:45 - than four which just returns true if the
09:47 - length of a string is greater than four
09:49 - and then I'm going to pass my iterable
09:51 - which is strings and we are going to
09:54 - print out the list of our filtered okay
09:59 - so let's spell that correctly and let's
10:01 - run our code and notice that we only get
10:03 - world and apple the reason for that is
10:06 - what really happens here is we take
10:07 - every single one of our items so we
10:09 - start with my we pass it to this
10:11 - function this function returns false
10:13 - because my is not a length greater than
10:15 - four we pass world we return true
10:18 - because this is length five same thing
10:20 - with apple length five pair is length
10:22 - four so it's not greater than length
10:23 - four so we don't include it so we end up
10:26 - with world and apple obviously this is a
10:28 - very simple function we can write very
10:30 - complex functions and this allows us to
10:32 - filter an iterable object based on some
10:34 - function which can be very very useful
10:37 - mess around with this and also remember
10:39 - that you can use the Lambda function as
10:41 - well so we could have written it like
10:42 - this Lambda X and then we could say Len
10:44 - X is greater than four and to prove that
10:48 - to you if we type this correctly and we
10:52 - run the code you see that we get the
10:54 - exact same result so the next function
10:57 - to look at here is a simple one and this
10:59 - is is the sum function the sum function
11:01 - is simply going to return the sum of all
11:03 - of the different numbers that you pass
11:04 - it from some kind of iterable object in
11:07 - this case we're passing an iterable
11:08 - which is a set we could pass a list we
11:10 - could pass a tuple doesn't matter so
11:12 - long as the values inside of the
11:14 - iterable are numbers if they are not
11:16 - numeric so not an INT or a float then
11:18 - you are going to get some kind of error
11:20 - so quickly we can run the code here and
11:21 - you can see that we get the sum of
11:23 - 35.5 now one thing you might not know
11:25 - about the sum function is that you can
11:27 - actually pass to this a start value so
11:29 - we can pass a start of say 10 and now we
11:31 - will start summing at 10 so now you'll
11:33 - see we get 45.5 now of course we can
11:36 - make this a negative value as well so
11:38 - let's go ahead and do that and you can
11:40 - see that this works perfectly fine now
11:42 - the next function on my list is the
11:44 - sorted function now this is pretty
11:45 - straightforward this is going to sort an
11:47 - iterable object in ascending or
11:49 - descending order depending on what we
11:52 - tell it now in this case we just have a
11:54 - bunch of different numbers by default
11:55 - it's going to sort this in ascending
11:57 - order so if I run the code here you can
11:59 - see that we get these numbers sorted in
12:01 - ascending order now there are a few
12:03 - different arguments that I can pass to
12:05 - this sorted function to change its
12:06 - behavior for example I can pass reverse
12:10 - if we spell this correctly equal to true
12:12 - and then when I run my code here you can
12:14 - see that we actually get all of the
12:15 - values in reverse order but another more
12:18 - interesting argument we can pass here is
12:20 - a key now the key will actually be a
12:22 - python function and we will apply this
12:24 - python function to every single item
12:27 - inside of our iterable and we will s ort
12:29 - the items based on what's returned from
12:31 - the key function now I'm going to show
12:33 - you a better example of this so stay
12:35 - with me for one second okay so I just
12:36 - created a better example here so you can
12:38 - see how this works so I have a list of
12:40 - people and notice that if I try to sort
12:43 - this list of people we just have python
12:45 - dictionaries here and the sorted
12:46 - function isn't really going to know how
12:48 - to sort this it will do some kind of
12:50 - sort for us but it's going to be pretty
12:51 - unpredictable so instead what we do is
12:54 - we pass to this a key now this key is a
12:57 - Lambda function we take in one argument
12:59 - in this case it is person and in this
13:01 - case we get access to the person's age
13:04 - so what we're doing effectively here is
13:06 - we're sorting these people based on
13:08 - their age so now when I run the code
13:11 - here and we print this out you can see
13:13 - that we get all of the people sorted in
13:15 - ascending order based on their age
13:17 - because we're sorting all of the
13:18 - different items using this key now if we
13:21 - wanted to go a step further we could
13:22 - reverse this as well and now we could
13:24 - sort this in ascending or sorry
13:26 - descending order and you can see we can
13:28 - start with the oldest person and go to
13:30 - the youngest moving on the next function
13:32 - to show you is enumerate but in order to
13:34 - see the value of a numerate we first
13:36 - have to look at what happens when we
13:38 - don't use it so often times when we're
13:40 - iterating with a for Loop we want to
13:42 - have access to both the index and the
13:44 - value When We're looping through
13:45 - something like a list in this case you
13:47 - see that I create a simple for loop I
13:49 - say four index in range and then the
13:51 - length of tasks and then I use that
13:53 - index to access the task that's at that
13:55 - specific position I then print out index
13:58 - plus one and the task and this gives us
14:00 - kind of a nice list so if we run the
14:02 - code here you can see that we get a list
14:03 - of all of our various tasks now this is
14:06 - fine there's nothing wrong with this
14:07 - code we can clean it up quite a bit by
14:09 - using the enumerate function now this is
14:11 - helpful again when you want the index
14:13 - and the value iterating through some
14:15 - kind of iterable so what I'm going to do
14:17 - is change this here to use enumerate and
14:20 - I'm going to enumerate over tasks now
14:22 - when I do that the first value that I'm
14:24 - going to have access access to here
14:26 - sorry is the index and the next value
14:28 - will be the task so what en numerate
14:30 - will really do is it will return to me a
14:32 - tuple a tle for every single object
14:34 - where the first object inside of that
14:36 - tupple is the index and the second
14:38 - object is the value so now what I can do
14:41 - is I can clear this and I can run and
14:43 - you see we get the exact same thing so
14:46 - again first variable is going to be the
14:47 - index second value is going to be
14:49 - whatever the value actually is and we
14:51 - can use that for a numerate now it's
14:53 - also worth noting that we don't need to
14:55 - use a numerate just in a for Loop if we
14:57 - print out for example the list
14:59 - representation of a numerate you will
15:02 - see what we get and it is a tupple where
15:05 - we have the index first and then the
15:07 - value index value index value Etc so
15:11 - moving on the next function on my list
15:13 - is the zip function but in order to
15:15 - understand the value of using the zip
15:16 - function we first have to see what it
15:18 - looks like when we don't use it so in
15:20 - this case you can see we have two lists
15:21 - right we have names and we have ages now
15:24 - these have corresponding values so the
15:26 - name at position zero corresponds to the
15:28 - age position zero in the other list so
15:31 - what I'm doing here is I'm looping
15:32 - through both of these lists at the same
15:34 - time and then I'm printing out name is 8
15:37 - years old I'm essentially combining
15:38 - these two values together and using them
15:40 - in some kind of expression now notice
15:42 - that what I had to do here with my range
15:44 - is I had to get the minimum length of
15:46 - the names and the ages list the reason
15:49 - why I had to look for the minimum is
15:51 - because if we have an extra age or an
15:53 - extra name then we'll get an index out
15:55 - of bounds exception when we try to
15:57 - access the corresponding position in the
15:59 - other list for example if we add another
16:01 - name like Tim here and we don't have a
16:03 - corresponding age when we looked for the
16:05 - age at that index if we were just
16:06 - looping through the length of names then
16:08 - we're going to get an error so I have to
16:10 - look at the minimum okay so when I run
16:12 - this code you can see that we get all of
16:14 - the different kind of printed out
16:16 - statements here Alice is 30 Bob is 25
16:18 - Etc now this is fine again nothing wrong
16:20 - with this code but let me show you how
16:22 - much easier it is for us to actually
16:24 - execute this using the zip function so
16:26 - I'm going to paste this in here and you
16:28 - can see that now we're using the zip
16:30 - function now what the zip function will
16:31 - do is combine different iterable objects
16:34 - together and automatically handle when
16:36 - one iterable object has more objects
16:38 - than the other so in this case what's
16:40 - going to happen is it's going to combine
16:42 - our names and ages into actually a list
16:45 - of tupples and then this allows us to
16:47 - Loop through them really easily so let
16:49 - me just run this you can see how it
16:50 - works and then we can break it down more
16:52 - in depth so first let's print out what
16:55 - the zip actually looks like so I'm going
16:58 - to say print
16:59 - combined and you can see when I do that
17:01 - we actually get a bunch of different
17:03 - tuples right so we get the name then we
17:05 - get the age name age name age and notice
17:07 - it didn't include Tim because we didn't
17:09 - have a corresponding age now if we
17:11 - wanted to go a step further we could
17:13 - actually include another list so we
17:14 - could have maybe a gender and we have
17:16 - female male and then male and now notice
17:21 - if I add my gender in here and then we
17:23 - add gender here and we go and is gender
17:29 - when we print this out you'll see that
17:31 - we're only going to get three lines this
17:32 - time and that's because the minimum
17:34 - length of all of the different lists we
17:36 - had was three so it can combine as many
17:38 - different iterables as we want and
17:40 - automatically handle when we have a
17:42 - mismatch number of them so again we get
17:44 - Alice 30 female Bob 25 male Charlie 35
17:47 - male and then we can print all of this
17:49 - out zip is super super useful I use it
17:52 - all the time and I'd highly recommend
17:53 - you use it in your code as well
17:55 - especially when you have corresponding
17:57 - values in multiple different iterable
17:59 - objects so now we move on to the final
18:01 - function on my list which is open now
18:03 - open can be used to open a file read to
18:06 - it write from it it has a lot of
18:07 - different usage and let me explain to
18:09 - you how to properly use it so first
18:11 - let's create a variable called file and
18:13 - we'll use the open function and the
18:15 - first argument we pass to open is the
18:16 - file name we want to open so I'm going
18:18 - to go with test.txt now the second
18:21 - option is going to be the file mode
18:23 - there's a lot of other options as well
18:24 - as you can see here and there is a lot
18:26 - of different modes now the most common
18:28 - modes you're going to need to know about
18:29 - are going to be R which stands for read
18:32 - W which stands for write and then a
18:34 - which stands for append again there's a
18:36 - lot of other options but these are the
18:38 - three main ones you want to know now for
18:40 - now we're going to go with W because we
18:41 - want to create a new file and when you
18:43 - use W mode this is going to override a
18:45 - file if it already exists and
18:47 - essentially clear everything that's
18:48 - inside of it so make sure you're careful
18:50 - when you use this so now we've opened
18:52 - our file what we can do is write to it
18:54 - so we can say file. write and when we
18:57 - write we can just write some string so
18:59 - something like hello world and if we
19:01 - want to move to the next line in the
19:02 - file we need to make sure we use a
19:04 - backline or a new line character sorry I
19:06 - can say hello world my name is Tim like
19:10 - that so now if I run my code you'll see
19:12 - that a new file is created and we have
19:14 - Hello World my name is Tim however it's
19:17 - very important that after we create this
19:19 - file and we write to it that we close it
19:22 - so we need to actually say file. close
19:25 - just to make sure that we don't have any
19:26 - memory leaks and we don't leave the file
19:28 - open in memory when we actually don't
19:30 - mean to do that now in this case
19:32 - everything's fine if we don't uh
19:34 - actually close it but we just want to
19:35 - make sure that we do close them and
19:37 - that's actually why I'm going to
19:38 - recommend that when you are working with
19:40 - files rather than manually opening and
19:43 - closing them like this you use the
19:45 - syntax which is the following now this
19:47 - is the wi syntax so you're going to say
19:49 - with open and then again we can go our
19:53 - test.txt put our mode as W and we can
19:57 - say as and then in this case file and
19:59 - then we can say file. write and whatever
20:02 - we want to write here okay that's great
20:06 - and now anything that's indented will
20:08 - happen inside of this context manager
20:10 - that's what this is referred to and as
20:12 - soon as we exit this so as soon as we
20:14 - finish our operations it's automatically
20:16 - going to handle closing the file for us
20:18 - so this is the best practice when it
20:20 - comes to working with files rather than
20:22 - opening and closing them yourself you
20:24 - always use a context manager which will
20:26 - ensure that the file is always closed po
20:29 - properly even if an error occurs inside
20:31 - of the kind of lines where you're trying
20:33 - to manipulate the file so just make sure
20:35 - you do that anyways we have the mode so
20:37 - we have w we have R now if we use R mode
20:41 - this allows us to actually read the
20:42 - contents of the file so to do that we
20:44 - can say file. read and if we read this
20:48 - we will get all of the text inside of
20:50 - here so we can say
20:52 - print and then text so let's print that
20:54 - out and you can see Hello World my name
20:56 - is Tim gets printed and then if we want
20:59 - to we can also append to a file now
21:01 - appending to a file is not going to
21:03 - override it it's simply going to add to
21:05 - the end so if you want to keep adding to
21:06 - the end of a file rather than replacing
21:08 - the contents inside of it then you use
21:10 - the append mode now what we can do is
21:14 - say
21:16 - file. write new edition like that and if
21:21 - we run the code here and we open this up
21:22 - you can see that we have the new
21:23 - addition getting added and which just
21:25 - going to get added at the end of
21:26 - wherever the file was so in this case we
21:28 - didn't have a new line character so it
21:29 - just gets smooshed to this line if you
21:32 - wanted it to be on a new line then you
21:33 - would need to add the new line character
21:35 - like that now there are also combination
21:38 - modes so for example you can do
21:39 - something like WR mode right where
21:42 - you're reading and you're writing to the
21:44 - file you can have like ra mode I think
21:46 - that's probably a mode I'm not sure if
21:48 - that's actually a valid one reading and
21:49 - appending and there are all kinds of
21:51 - other modes that you can look up and you
21:52 - can even ask chat GPT to tell you it's
21:55 - just too many for me to cover in this
21:56 - video anyways with that said that is
21:58 - going to cover the 10 python functions
22:00 - that you need to master I hope you found
22:02 - this video helpful if you did make sure
22:04 - you leave a like subscribe to the
22:05 - channel and I will see you in the next
22:07 - one
22:09 - [Music]

Cleaned transcript:

if you write any code in Python then you'll see these 10 python functions a ton and it's important you master them some of them may seem simple but they have a lot of additional parameters that you need to understand as they can save you a ton of time so with that said let's dive in and look at function number one so the first function we'll look at here is the print function now this is probably the first thing you learn When You Learn Python and it seems super basic we can print out a few different things we can separate them by commas and you can see that we can print a mix of strings and variables and when we do that they'll get printed out separated by a space but what you probably didn't know is that we can pass additional arguments to the print function then modify how it works for example I can pass this sep argument here so sep is equal to and I'll go with something like a pipe and now what will happen is rather than using a space as the delimiter or what goes in between the different arguments we passed to the print function we'll use this pipe so when I run the code now you see we get my name is and then pipe pipe and I am pipe 23 pipe years old so we can override that default Behavior which is to use a space to separate all the different things we're Printing and in this case we use a pipe now maybe instead we want to use a comma so let's go back here and change that to a comma and print this out and now you can see that we're printing things with a comma this is quite useful especially when you want to print out things that have a certain formatting and you don't want to do the manual formatting yourself now another thing we should know about the print function is how we change what gets printed at the end of the line line so you may not know this but by default when you print something with this function it's going to actually add a back sln which is a new line character which will force the terminal to go to the next line so when you print something else it won't be on the same line now typically this is what you want and that means when I run the code here you'll see we get these two print statements on separate lines but sometimes you actually want to print things on the same line so how do you do that well what we can actually do is we can override this end argument here and we can pass this something different than the new line character so I could pass say end is equal to a pipe and maybe put some spaces around it and if we clear here and run you'll see now we get hello world and at the end of this print statement it prints the pipe with the spaces and then when we go to print the next line it will happen on the same line here because we didn't move down to the next line so now we're going to dive into the second function here which is the help function but first I need to share with you something that's going to be very helpful and that is the sponsor of this video today's video is sponsored by mail trap an email delivery platform that developers Love Now what's cool about mail trap it's actionable analytics the best in the industry with full statistics and drill down reports on each and every email you sent mail trap offers separate streams for transactional and bulk emails SMTP and API Integrations Plus sdks for major Pro programming languages at mail trap human support is available round the clock for all customers try today at mail trap. so hopefully you appreciated that segue there but now let's have a look at the help function now the help function allows us to print out the documentation of a python function so we don't need to go to the internet to look it up and we can really quickly get access to how a function works now what this will do is read the dock strings of a function and simply give it to us so what I can do is something like help and then I can pass to this maybe the print function and notice I'm not calling the print function I'm just writing the name of it and now when I run the code you'll see that it actually prints out all of the documentation for the print function this is what's contained in the doc string for it so you can see it says print kind of shows you an example of how it works and then it gives you a description of the different arguments or the parameters for this function now this also works for your own functions so let me show you that so you can see here I've written a custom function called test Funk and I've just written a doc string for it just as an example so we can see how this works now when I run my code here notice it will actually give me the documentation of this function so it says a b and then the return type again it's really just printing out what the doc string is that's written here so this is useful for builtin functions but also when you're working with a library or code written by other people so you don't need to search through and find the actual function definition you can just use this help function it will print it out for you so the next function on my list is a very common one and you you've probably seen this especially if you're working with a for Loop and that is range now as much as range can be used to iterate through values in a for Loop we can also use it just to generate a list of numbers and I'll quickly walk through how it works because it is a very important function so what range will do is generate a range of numbers starting at some value stopping at some value and stepping by some value now by default when you only pass one value here to the range function this acts as the stop that means it's going to go up to but not include this number and it's going to start at one and step by one which means go up by one each time so if I run the code here you can see that this gives us the values 0 through 9 again because we go to the stopping point but we do not include it now if I have a second value here something like two and then 10 this will act as the start value and this will act as the stop value and now when I run this you see that we will simply start at two we will go up to 10 but not include it if I decide to add a third value here something like two this will act as the step value and this will be the increment that we will go up by each time so if I run this here we get 2 4 6 8 now this is quite useful and we can do this in many different kind of ways to generate a lot of different sequences of numbers for example I can change this to ative 2 and I can swap these values around and go maybe 10 and maybe we're actually going to go to something like 10 and now this will give us a negative range where we start at 10 and we subtract two each time until we hit the stopping value of 10 which we do not include very useful for for Loops but also if you convert this range into a list then you can simply use it as a list of values one thing to note if you print out range itself which we can do here you'll see that we actually get a range object that's because range returns to us something known as an iterator an iterator is something that we step through using kind of a specific process that I don't need to get into in this video the point is if you want to actually get an entire list of values you do need to manually convert this to a list okay so to do that we just write the list function around range and then as you saw before it gives us a list of values rather than this range object which again is an iterator now the next function we're looking at is the map function now a map function allows us to apply a function to every single item in an iterable object an iterable object is anything that you can Loop through so something like a string a list a tupple something like a set it works for all of those so let's have a look at a quick example so let's say that what we want to do is we want to get the length of all of the different strings in this list well we could iterate through every single one of these strings manually apply the length function and then just print it out or store it in a new list but instead we can actually use the map function that does all of this for us so I can say the lengths is equal to and then I can use my map function and the first thing I pass to the map function is the function that I want to apply to all of the different items in my iterable so in this case I passed the Len function we can pass our own function or in this case a builtin one in Python and then I pass the iterable that I want to apply this to which is strings now what I can do is I can print out and I need to convert this to a list because again this is going to return an iterator so it's going to return a map object if we want to see all of the results then we need to First convert it to a list and now if I run my code you see that it gives me the length of all of these different items so it simply took this function applied it to every single item that was in this list and then gave me that result inside of in this case a new list or really a new iterable that we converted to a list now in this case we used a builtin function in Python but we can also use a custom function that we write ourself now it's common here to use what's known as a Lambda function a Lambda function is a oneline a nymous function where you can do something like Lambda you can pass a parameter in this case it will be X and then if we want we could do something like x + S now what this is going to do is it's going to pass every single one of the strings to this function as the parameter X and we're simply going to add an S to all of these different strings so now what I'm going to do is write run this code sory and you can see we get an S tacked on to every single one of these strings now if you don't want to use a Lambda function you can Define your own function so we can say addore s we can take in our string okay and then we can say something like return and then string plus s and now we can just put the name of this function notice I'm not calling it I'm just putting it uh as the name and then when I run this you can see that we get the exact same result so that is map it is extremely useful again you pass the function you pass the iterable object and then it will apply this function to every single item and give you all of the results so now we're moving on to the next function which is the filter function which is closely related to the map function the way the filter function will work is it will take every single item in our iterable object it will pass it to some function in this case it's called the filter function and if that function returns true it will keep that item otherwise it will remove it from the result so let me show you an example we'll just say filter is equal to and then we're going to use filter same thing we're going to pass our function in this case I'm going to pass this custom function I wrote called longer than four which just returns true if the length of a string is greater than four and then I'm going to pass my iterable which is strings and we are going to print out the list of our filtered okay so let's spell that correctly and let's run our code and notice that we only get world and apple the reason for that is what really happens here is we take every single one of our items so we start with my we pass it to this function this function returns false because my is not a length greater than four we pass world we return true because this is length five same thing with apple length five pair is length four so it's not greater than length four so we don't include it so we end up with world and apple obviously this is a very simple function we can write very complex functions and this allows us to filter an iterable object based on some function which can be very very useful mess around with this and also remember that you can use the Lambda function as well so we could have written it like this Lambda X and then we could say Len X is greater than four and to prove that to you if we type this correctly and we run the code you see that we get the exact same result so the next function to look at here is a simple one and this is is the sum function the sum function is simply going to return the sum of all of the different numbers that you pass it from some kind of iterable object in this case we're passing an iterable which is a set we could pass a list we could pass a tuple doesn't matter so long as the values inside of the iterable are numbers if they are not numeric so not an INT or a float then you are going to get some kind of error so quickly we can run the code here and you can see that we get the sum of 35.5 now one thing you might not know about the sum function is that you can actually pass to this a start value so we can pass a start of say 10 and now we will start summing at 10 so now you'll see we get 45.5 now of course we can make this a negative value as well so let's go ahead and do that and you can see that this works perfectly fine now the next function on my list is the sorted function now this is pretty straightforward this is going to sort an iterable object in ascending or descending order depending on what we tell it now in this case we just have a bunch of different numbers by default it's going to sort this in ascending order so if I run the code here you can see that we get these numbers sorted in ascending order now there are a few different arguments that I can pass to this sorted function to change its behavior for example I can pass reverse if we spell this correctly equal to true and then when I run my code here you can see that we actually get all of the values in reverse order but another more interesting argument we can pass here is a key now the key will actually be a python function and we will apply this python function to every single item inside of our iterable and we will s ort the items based on what's returned from the key function now I'm going to show you a better example of this so stay with me for one second okay so I just created a better example here so you can see how this works so I have a list of people and notice that if I try to sort this list of people we just have python dictionaries here and the sorted function isn't really going to know how to sort this it will do some kind of sort for us but it's going to be pretty unpredictable so instead what we do is we pass to this a key now this key is a Lambda function we take in one argument in this case it is person and in this case we get access to the person's age so what we're doing effectively here is we're sorting these people based on their age so now when I run the code here and we print this out you can see that we get all of the people sorted in ascending order based on their age because we're sorting all of the different items using this key now if we wanted to go a step further we could reverse this as well and now we could sort this in ascending or sorry descending order and you can see we can start with the oldest person and go to the youngest moving on the next function to show you is enumerate but in order to see the value of a numerate we first have to look at what happens when we don't use it so often times when we're iterating with a for Loop we want to have access to both the index and the value When We're looping through something like a list in this case you see that I create a simple for loop I say four index in range and then the length of tasks and then I use that index to access the task that's at that specific position I then print out index plus one and the task and this gives us kind of a nice list so if we run the code here you can see that we get a list of all of our various tasks now this is fine there's nothing wrong with this code we can clean it up quite a bit by using the enumerate function now this is helpful again when you want the index and the value iterating through some kind of iterable so what I'm going to do is change this here to use enumerate and I'm going to enumerate over tasks now when I do that the first value that I'm going to have access access to here sorry is the index and the next value will be the task so what en numerate will really do is it will return to me a tuple a tle for every single object where the first object inside of that tupple is the index and the second object is the value so now what I can do is I can clear this and I can run and you see we get the exact same thing so again first variable is going to be the index second value is going to be whatever the value actually is and we can use that for a numerate now it's also worth noting that we don't need to use a numerate just in a for Loop if we print out for example the list representation of a numerate you will see what we get and it is a tupple where we have the index first and then the value index value index value Etc so moving on the next function on my list is the zip function but in order to understand the value of using the zip function we first have to see what it looks like when we don't use it so in this case you can see we have two lists right we have names and we have ages now these have corresponding values so the name at position zero corresponds to the age position zero in the other list so what I'm doing here is I'm looping through both of these lists at the same time and then I'm printing out name is 8 years old I'm essentially combining these two values together and using them in some kind of expression now notice that what I had to do here with my range is I had to get the minimum length of the names and the ages list the reason why I had to look for the minimum is because if we have an extra age or an extra name then we'll get an index out of bounds exception when we try to access the corresponding position in the other list for example if we add another name like Tim here and we don't have a corresponding age when we looked for the age at that index if we were just looping through the length of names then we're going to get an error so I have to look at the minimum okay so when I run this code you can see that we get all of the different kind of printed out statements here Alice is 30 Bob is 25 Etc now this is fine again nothing wrong with this code but let me show you how much easier it is for us to actually execute this using the zip function so I'm going to paste this in here and you can see that now we're using the zip function now what the zip function will do is combine different iterable objects together and automatically handle when one iterable object has more objects than the other so in this case what's going to happen is it's going to combine our names and ages into actually a list of tupples and then this allows us to Loop through them really easily so let me just run this you can see how it works and then we can break it down more in depth so first let's print out what the zip actually looks like so I'm going to say print combined and you can see when I do that we actually get a bunch of different tuples right so we get the name then we get the age name age name age and notice it didn't include Tim because we didn't have a corresponding age now if we wanted to go a step further we could actually include another list so we could have maybe a gender and we have female male and then male and now notice if I add my gender in here and then we add gender here and we go and is gender when we print this out you'll see that we're only going to get three lines this time and that's because the minimum length of all of the different lists we had was three so it can combine as many different iterables as we want and automatically handle when we have a mismatch number of them so again we get Alice 30 female Bob 25 male Charlie 35 male and then we can print all of this out zip is super super useful I use it all the time and I'd highly recommend you use it in your code as well especially when you have corresponding values in multiple different iterable objects so now we move on to the final function on my list which is open now open can be used to open a file read to it write from it it has a lot of different usage and let me explain to you how to properly use it so first let's create a variable called file and we'll use the open function and the first argument we pass to open is the file name we want to open so I'm going to go with test.txt now the second option is going to be the file mode there's a lot of other options as well as you can see here and there is a lot of different modes now the most common modes you're going to need to know about are going to be R which stands for read W which stands for write and then a which stands for append again there's a lot of other options but these are the three main ones you want to know now for now we're going to go with W because we want to create a new file and when you use W mode this is going to override a file if it already exists and essentially clear everything that's inside of it so make sure you're careful when you use this so now we've opened our file what we can do is write to it so we can say file. write and when we write we can just write some string so something like hello world and if we want to move to the next line in the file we need to make sure we use a backline or a new line character sorry I can say hello world my name is Tim like that so now if I run my code you'll see that a new file is created and we have Hello World my name is Tim however it's very important that after we create this file and we write to it that we close it so we need to actually say file. close just to make sure that we don't have any memory leaks and we don't leave the file open in memory when we actually don't mean to do that now in this case everything's fine if we don't uh actually close it but we just want to make sure that we do close them and that's actually why I'm going to recommend that when you are working with files rather than manually opening and closing them like this you use the syntax which is the following now this is the wi syntax so you're going to say with open and then again we can go our test.txt put our mode as W and we can say as and then in this case file and then we can say file. write and whatever we want to write here okay that's great and now anything that's indented will happen inside of this context manager that's what this is referred to and as soon as we exit this so as soon as we finish our operations it's automatically going to handle closing the file for us so this is the best practice when it comes to working with files rather than opening and closing them yourself you always use a context manager which will ensure that the file is always closed po properly even if an error occurs inside of the kind of lines where you're trying to manipulate the file so just make sure you do that anyways we have the mode so we have w we have R now if we use R mode this allows us to actually read the contents of the file so to do that we can say file. read and if we read this we will get all of the text inside of here so we can say print and then text so let's print that out and you can see Hello World my name is Tim gets printed and then if we want to we can also append to a file now appending to a file is not going to override it it's simply going to add to the end so if you want to keep adding to the end of a file rather than replacing the contents inside of it then you use the append mode now what we can do is say file. write new edition like that and if we run the code here and we open this up you can see that we have the new addition getting added and which just going to get added at the end of wherever the file was so in this case we didn't have a new line character so it just gets smooshed to this line if you wanted it to be on a new line then you would need to add the new line character like that now there are also combination modes so for example you can do something like WR mode right where you're reading and you're writing to the file you can have like ra mode I think that's probably a mode I'm not sure if that's actually a valid one reading and appending and there are all kinds of other modes that you can look up and you can even ask chat GPT to tell you it's just too many for me to cover in this video anyways with that said that is going to cover the 10 python functions that you need to master I hope you found this video helpful if you did make sure you leave a like subscribe to the channel and I will see you in the next one
