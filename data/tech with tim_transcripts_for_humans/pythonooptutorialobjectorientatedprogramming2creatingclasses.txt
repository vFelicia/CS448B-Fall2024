With timestamps:

00:00 - hey guys and welcome back to the second
00:02 - video in this object and class tutorial
00:05 - series in this video we're going to be
00:07 - going over creating your own objects and
00:09 - your own classes and what that looks
00:11 - like in Python so we'll just go ahead
00:13 - and delete this code from the last video
00:15 - and start fresh so if you guys remember
00:17 - the last video we talked all about
00:19 - objects to talk to methods and that's
00:21 - all cool we kind of already understood a
00:23 - lot of that stuff like we've used those
00:24 - methods it makes sense how they work but
00:27 - now how do we create our own and this is
00:29 - the whole goal of this tutorial series
00:30 - to create your own classes and your own
00:32 - objects and add functionality to your
00:33 - program so to create a new class and
00:35 - this is going to be a new like datatype
00:37 - something like that we'll talk about
00:39 - that in a second you just simply type
00:41 - class and then whatever you want the
00:42 - name of your class to be so in Python
00:43 - they have into string the list whatever
00:45 - okay we're gonna create a class and I'm
00:47 - just going to call it dog now you
00:49 - probably have seen this example before
00:51 - if you do anything what do you call it
00:54 - with like classes or objects because
00:57 - people like to use animals but it's a
00:58 - really good example so this is now
01:00 - creating a new class of dog now what we
01:03 - have to do whenever we create a class is
01:05 - we have to add some methods into it so
01:08 - remember I talked to a methods or things
01:09 - that you call on the actual class itself
01:11 - so I'm just gonna type define underscore
01:13 - underscore anit underscore underscore
01:15 - and we're gonna talk about what this
01:16 - does in a second and make sure you don't
01:18 - forget this self keyword this object
01:20 - keyword you can leave out if you want I
01:22 - just like to type it because I don't
01:24 - know it just a habit right because we
01:27 - have class dog define an it and I'm
01:30 - gonna make one more method and we're
01:31 - gonna call it speak okay and make sure
01:34 - you don't forget this self key we're
01:35 - going to talk about what all this does
01:36 - in a second okay pass and in here I'm
01:39 - gonna say pass alright so we've now just
01:42 - created our own class it does not do
01:45 - anything but we've created our own class
01:47 - so what we actually do here is we're
01:51 - creating well new costs equal to dog
01:53 - inherits from object don't worry about
01:55 - that and this is what's known as the
01:58 - constructor method now this underscore
02:01 - underscore init underscore underscore
02:03 - needs to be in most of your classes okay
02:06 - so if you guys want anything to happen
02:08 - initially when you first create a class
02:10 - you need to make this a knit class and
02:12 - what
02:12 - happens is when we create a new object
02:14 - and the way we can do this is by doing
02:15 - something like I don't know Tim equals
02:18 - dog like that this method is
02:22 - automatically gonna fire it's
02:24 - automatically gonna go off we don't have
02:25 - to say Tim dot underscore underscore
02:29 - name underscore underscore we don't have
02:31 - to do that whenever we create a new
02:34 - object of type dog this is automatically
02:36 - going to happen so for example if every
02:39 - time I created a new object of dog I
02:41 - wanted to print out nice
02:44 - you made a dog like this then every time
02:49 - that we do this so it's like Fred equals
02:53 - dog as well then it's gonna print this
02:55 - to the screen and I can prove this to
02:56 - you by simply running okay so he says
02:58 - nice you made a dog nice - you made a
03:00 - dog alright we didn't have to call this
03:02 - a net it just automatically happened
03:04 - whenever we created this dog so let's
03:06 - talk more about this in net and what we
03:08 - can do with it so in classes there's
03:11 - things called attributes and methods all
03:14 - right
03:14 - methods are anything that you create
03:16 - using define okay and they look just
03:18 - like functions except you have to call
03:20 - them using an object and like we talked
03:24 - about in the last video then attributes
03:26 - are kind of like variables that belong
03:29 - to a certain object so to create a
03:33 - attributes you need to use this self
03:36 - keyword alright what this self keyword
03:38 - actually stands for is it stands for the
03:42 - instance that you're calling so Tim is
03:44 - known as an instance of type dog worth
03:47 - class dog now fred is another instance
03:51 - of type dog now I'm just gonna do this
03:54 - and then hopefully you guys can
03:55 - understand how this kind of works
03:56 - because it is somewhat difficult to
03:58 - explain okay so now what we're saying is
04:01 - we've created this initialization all
04:04 - right and we have now that it takes a
04:07 - name okay so what that actually means is
04:10 - we have to now type a name into our
04:13 - initialization so whenever we create a
04:15 - dog we have to give it a name so in here
04:17 - I'm gonna give it a name Tim and in here
04:19 - I'm gonna give it a name Fred all right
04:21 - and don't worry if you hasn't confused
04:22 - I'm gonna explain this all in depth in a
04:24 - second
04:24 - okay and I'm just gonna do this so that
04:27 - we can actually see what our name is
04:28 - print
04:29 - hi I am kama self dot name and we'll
04:35 - talk about what self does in a second
04:36 - okay
04:37 - Steve Tim dot speak and Fred does speak
04:43 - as well okay so let's print this and he
04:46 - says hi I'm Tim hi I'm Fred okay so how
04:49 - does this work
04:50 - so in this initialization this fires
04:53 - automatically when we create doc okay so
04:55 - by calling this we're automatically
04:57 - calling a knit so if we put a parameter
05:01 - in an int so name that means that we now
05:03 - have to pass a parameter when we create
05:05 - our dog and just like a function we can
05:07 - create multiple parameters we do like
05:08 - name age color kind we can do as many as
05:12 - we want okay and that works fine now
05:15 - what does this self do so this self
05:18 - actually represents the instance right
05:20 - so if I'm if I call dog equals Tim or
05:24 - dog Tim whatever and I set that equal to
05:26 - Tim well Tim is what's being passed into
05:29 - this self parameter here and notice how
05:31 - we have two parameters but we only pass
05:32 - one thing that's because self always
05:34 - needs to be here except in like really
05:37 - specific cases so that we're going to
05:38 - talk about later so when we call self
05:42 - dot name we're saying that Tim dot name
05:45 - is equal to whatever name we put in here
05:48 - and that's the same thing with Fred
05:50 - right so when we call it on Fred then we
05:53 - say well Fred dot name is equal to Fred
05:56 - all right if we didn't do that and we
05:59 - said something like name equals name if
06:01 - I try to print self-doubt would just
06:04 - crash it wouldn't work because we don't
06:06 - know which instance has what name okay
06:10 - so this self means belong that kind of
06:12 - means like belongs to the instance that
06:14 - you're calling on I'm trying to explain
06:15 - this as good as I can because you you
06:17 - really understand this I'm gonna do
06:18 - another parameter here to Qasim self
06:20 - done age equals page all right and let's
06:25 - just print this out and I am
06:30 - self-taught age years old right
06:35 - okay so let's print this out and see
06:37 - what we get
06:38 - missing one age sir I'm gonna put the
06:40 - page in here fifty-five three okay so
06:45 - now if I present say hi I'm Tim and I'm
06:46 - 55 years old hi I'm I I am Fred and I'm
06:48 - three years old okay so each of these
06:52 - are instances of class dog and they each
06:54 - have a name and an age and you're able
06:56 - to call the speak method on them
06:59 - now what this speak method does is
07:00 - notice how when I call speak it
07:02 - automatically takes self because it has
07:04 - to know what instance I'm calling on and
07:06 - that way it's able to access the name
07:09 - and the H now in here you can actually
07:12 - change the name in the H so I'm gonna
07:14 - create a new method I'm gonna say change
07:16 - underscore age like this okay
07:18 - and notice how it takes self no matter
07:20 - what it automatically types it in for me
07:22 - and here I'm going to do age all right
07:24 - now what I can do is I can say self done
07:27 - age is equal to H and if I call let's
07:31 - see here
07:32 - Tim done change age and I give it
07:34 - something like five now if I speak you
07:38 - can see that we get hi I'm Tim and I'm
07:40 - five years old and we say hi I'm Fred
07:42 - and I am three years old now obviously
07:45 - you guys can create as many methods as
07:46 - you want you can do call them whatever
07:48 - you want just make sure whenever you
07:50 - create them they first of all have self
07:52 - because we have to know what instance
07:53 - we're calling it on so we can access
07:54 - those attributes all right and you can
07:57 - change these attributes however you like
07:58 - within those methods now I will show you
08:01 - what else you can do okay so say you
08:03 - wanted to access Tim's H and you didn't
08:06 - want to print out like hi I am all this
08:08 - you didn't want to speak you just want
08:09 - to know what his ages well what you can
08:11 - actually do is you can simply print Tim
08:14 - dot H and now you can see if I run the
08:18 - program we get five down at the bottom
08:20 - and you can do the same thing with name
08:22 - so Tim dot name and it gives us Tim like
08:26 - that so we're actually able to access
08:28 - the attributes of our object from just
08:33 - simply calling whatever that attribute
08:35 - is and in this case its name so whenever
08:37 - you want something to be like public to
08:39 - the instance so that they can see it
08:42 - through it all the methods you need to
08:43 - simply you need
08:44 - to do self dot and whatever you want to
08:46 - call it so I could say like self dot I
08:48 - don't know let's say Li it's gonna stand
08:51 - for a list you can have a list of like
08:53 - one three four and now if I call Tim Li
08:58 - you can see we get one three four and
09:00 - obviously if I call friend Li well this
09:03 - is gonna work as well we get one three
09:06 - four now the main benefit of classes is
09:09 - that you can create things you can
09:12 - create multiple objects of a class so if
09:15 - I wanted to store like the name the age
09:17 - and a list for 300 dog objects if I
09:21 - wasn't using classes what I would have
09:23 - to do is that have to do like dog one
09:26 - name equals Tim and then I'd have to do
09:30 - dog one age equals five and then I do
09:33 - dog two H equals Fred and you'd have to
09:35 - continually keep doing that with a ton
09:37 - of variables and obviously you don't
09:39 - want that so these classes allow you to
09:41 - create infinite amount of objects of
09:43 - that type class and have all of these
09:45 - properties and attributes apply to them
09:48 - okay so what else should we talk about
09:50 - here maybe creating new attributes okay
09:53 - so attributes are anything to have this
09:54 - excel Fame self that age left at li
09:57 - whatever and methods are with these
09:58 - defined keys okay so if I create a new
10:01 - one and I say define and add what do you
10:05 - call it wait okay say add wait I'm gonna
10:09 - give it a weight and then we can say
10:13 - self dot weight is equal to weight and
10:16 - what this does now is it creates a new
10:19 - instance attribute that is going to be
10:21 - applied to this dog class now you see
10:24 - it's giving us an error so this instance
10:26 - attribute weight to find outside of an
10:27 - it that's because it wants us to define
10:30 - that inside of this initialization but
10:32 - it's fine you can actually do it out
10:33 - here so now if I do
10:35 - Tim dot add weight I give it a weight of
10:38 - like 70 okay and I'll print send out
10:46 - weight like here let's see what we get
10:47 - we get 70 okay now what if I try to
10:51 - print fred' dog weight
10:53 - well let's see what happens we get Fred
10:55 - has no attribute weight our dog object
10:58 - has no attribute weight and that's
10:59 - because we have not yet added this by
11:01 - calling add weight on our instance Fred
11:04 - okay
11:05 - so I think I'm going to cut the video
11:06 - off here hopefully you guys have a basic
11:09 - understanding of how classes worked it
11:11 - is kind of difficult to explain it if
11:13 - you guys have any questions leave them
11:14 - down below cuz I feel like I might have
11:16 - butchered the explanation on some of it
11:17 - other than that in next video we're
11:19 - gonna go over
11:20 - I think inheritance and creating some
11:22 - more advanced methods and talking about
11:25 - how those work okay
11:26 - so if you guys enjoyed please make sure
11:28 - you leave a like and subscribe and I'll
11:29 - see you again in the next one
11:31 - [Music]

Cleaned transcript:

hey guys and welcome back to the second video in this object and class tutorial series in this video we're going to be going over creating your own objects and your own classes and what that looks like in Python so we'll just go ahead and delete this code from the last video and start fresh so if you guys remember the last video we talked all about objects to talk to methods and that's all cool we kind of already understood a lot of that stuff like we've used those methods it makes sense how they work but now how do we create our own and this is the whole goal of this tutorial series to create your own classes and your own objects and add functionality to your program so to create a new class and this is going to be a new like datatype something like that we'll talk about that in a second you just simply type class and then whatever you want the name of your class to be so in Python they have into string the list whatever okay we're gonna create a class and I'm just going to call it dog now you probably have seen this example before if you do anything what do you call it with like classes or objects because people like to use animals but it's a really good example so this is now creating a new class of dog now what we have to do whenever we create a class is we have to add some methods into it so remember I talked to a methods or things that you call on the actual class itself so I'm just gonna type define underscore underscore anit underscore underscore and we're gonna talk about what this does in a second and make sure you don't forget this self keyword this object keyword you can leave out if you want I just like to type it because I don't know it just a habit right because we have class dog define an it and I'm gonna make one more method and we're gonna call it speak okay and make sure you don't forget this self key we're going to talk about what all this does in a second okay pass and in here I'm gonna say pass alright so we've now just created our own class it does not do anything but we've created our own class so what we actually do here is we're creating well new costs equal to dog inherits from object don't worry about that and this is what's known as the constructor method now this underscore underscore init underscore underscore needs to be in most of your classes okay so if you guys want anything to happen initially when you first create a class you need to make this a knit class and what happens is when we create a new object and the way we can do this is by doing something like I don't know Tim equals dog like that this method is automatically gonna fire it's automatically gonna go off we don't have to say Tim dot underscore underscore name underscore underscore we don't have to do that whenever we create a new object of type dog this is automatically going to happen so for example if every time I created a new object of dog I wanted to print out nice you made a dog like this then every time that we do this so it's like Fred equals dog as well then it's gonna print this to the screen and I can prove this to you by simply running okay so he says nice you made a dog nice you made a dog alright we didn't have to call this a net it just automatically happened whenever we created this dog so let's talk more about this in net and what we can do with it so in classes there's things called attributes and methods all right methods are anything that you create using define okay and they look just like functions except you have to call them using an object and like we talked about in the last video then attributes are kind of like variables that belong to a certain object so to create a attributes you need to use this self keyword alright what this self keyword actually stands for is it stands for the instance that you're calling so Tim is known as an instance of type dog worth class dog now fred is another instance of type dog now I'm just gonna do this and then hopefully you guys can understand how this kind of works because it is somewhat difficult to explain okay so now what we're saying is we've created this initialization all right and we have now that it takes a name okay so what that actually means is we have to now type a name into our initialization so whenever we create a dog we have to give it a name so in here I'm gonna give it a name Tim and in here I'm gonna give it a name Fred all right and don't worry if you hasn't confused I'm gonna explain this all in depth in a second okay and I'm just gonna do this so that we can actually see what our name is print hi I am kama self dot name and we'll talk about what self does in a second okay Steve Tim dot speak and Fred does speak as well okay so let's print this and he says hi I'm Tim hi I'm Fred okay so how does this work so in this initialization this fires automatically when we create doc okay so by calling this we're automatically calling a knit so if we put a parameter in an int so name that means that we now have to pass a parameter when we create our dog and just like a function we can create multiple parameters we do like name age color kind we can do as many as we want okay and that works fine now what does this self do so this self actually represents the instance right so if I'm if I call dog equals Tim or dog Tim whatever and I set that equal to Tim well Tim is what's being passed into this self parameter here and notice how we have two parameters but we only pass one thing that's because self always needs to be here except in like really specific cases so that we're going to talk about later so when we call self dot name we're saying that Tim dot name is equal to whatever name we put in here and that's the same thing with Fred right so when we call it on Fred then we say well Fred dot name is equal to Fred all right if we didn't do that and we said something like name equals name if I try to print selfdoubt would just crash it wouldn't work because we don't know which instance has what name okay so this self means belong that kind of means like belongs to the instance that you're calling on I'm trying to explain this as good as I can because you you really understand this I'm gonna do another parameter here to Qasim self done age equals page all right and let's just print this out and I am selftaught age years old right okay so let's print this out and see what we get missing one age sir I'm gonna put the page in here fiftyfive three okay so now if I present say hi I'm Tim and I'm 55 years old hi I'm I I am Fred and I'm three years old okay so each of these are instances of class dog and they each have a name and an age and you're able to call the speak method on them now what this speak method does is notice how when I call speak it automatically takes self because it has to know what instance I'm calling on and that way it's able to access the name and the H now in here you can actually change the name in the H so I'm gonna create a new method I'm gonna say change underscore age like this okay and notice how it takes self no matter what it automatically types it in for me and here I'm going to do age all right now what I can do is I can say self done age is equal to H and if I call let's see here Tim done change age and I give it something like five now if I speak you can see that we get hi I'm Tim and I'm five years old and we say hi I'm Fred and I am three years old now obviously you guys can create as many methods as you want you can do call them whatever you want just make sure whenever you create them they first of all have self because we have to know what instance we're calling it on so we can access those attributes all right and you can change these attributes however you like within those methods now I will show you what else you can do okay so say you wanted to access Tim's H and you didn't want to print out like hi I am all this you didn't want to speak you just want to know what his ages well what you can actually do is you can simply print Tim dot H and now you can see if I run the program we get five down at the bottom and you can do the same thing with name so Tim dot name and it gives us Tim like that so we're actually able to access the attributes of our object from just simply calling whatever that attribute is and in this case its name so whenever you want something to be like public to the instance so that they can see it through it all the methods you need to simply you need to do self dot and whatever you want to call it so I could say like self dot I don't know let's say Li it's gonna stand for a list you can have a list of like one three four and now if I call Tim Li you can see we get one three four and obviously if I call friend Li well this is gonna work as well we get one three four now the main benefit of classes is that you can create things you can create multiple objects of a class so if I wanted to store like the name the age and a list for 300 dog objects if I wasn't using classes what I would have to do is that have to do like dog one name equals Tim and then I'd have to do dog one age equals five and then I do dog two H equals Fred and you'd have to continually keep doing that with a ton of variables and obviously you don't want that so these classes allow you to create infinite amount of objects of that type class and have all of these properties and attributes apply to them okay so what else should we talk about here maybe creating new attributes okay so attributes are anything to have this excel Fame self that age left at li whatever and methods are with these defined keys okay so if I create a new one and I say define and add what do you call it wait okay say add wait I'm gonna give it a weight and then we can say self dot weight is equal to weight and what this does now is it creates a new instance attribute that is going to be applied to this dog class now you see it's giving us an error so this instance attribute weight to find outside of an it that's because it wants us to define that inside of this initialization but it's fine you can actually do it out here so now if I do Tim dot add weight I give it a weight of like 70 okay and I'll print send out weight like here let's see what we get we get 70 okay now what if I try to print fred' dog weight well let's see what happens we get Fred has no attribute weight our dog object has no attribute weight and that's because we have not yet added this by calling add weight on our instance Fred okay so I think I'm going to cut the video off here hopefully you guys have a basic understanding of how classes worked it is kind of difficult to explain it if you guys have any questions leave them down below cuz I feel like I might have butchered the explanation on some of it other than that in next video we're gonna go over I think inheritance and creating some more advanced methods and talking about how those work okay so if you guys enjoyed please make sure you leave a like and subscribe and I'll see you again in the next one
