With timestamps:

00:00 - so what is a stack the easiest way to
00:03 - think of it a stack is like a stack of
00:04 - plates if you have a table say this one
00:07 - right here when you start stacking
00:09 - plates you're gonna put them on top of
00:10 - each other so you have a plate here you
00:12 - have another one and then you keep
00:13 - adding a few more now the last plate
00:17 - that you stack so the one on top is
00:19 - actually always gonna be the first one
00:21 - you take off so this fall is what's
00:23 - known as Philo first in last out the
00:27 - first plate that we put was actually
00:29 - this one and it's gonna be the last
00:31 - plate that we take off the stack because
00:33 - we need to take off plates two three and
00:36 - four before we can access that one and
00:38 - if you understand this you understand
00:40 - stacks they're very straightforward so
00:42 - now let's talk about some of the methods
00:44 - involved with a stack and how this
00:45 - actually works in kind your computer's
00:47 - memory and all of that now firstly just
00:50 - like use all these methods on the side
00:52 - follow what's known as constant time and
00:54 - that means doing this does not change
00:56 - based on how many items you have in your
00:58 - stack so it's gonna happen pretty well
01:00 - instantly in the computer and if you
01:03 - have 10,000 item integers in your stack
01:05 - it's gonna take as much time as if you
01:06 - have two or three items in your stack so
01:09 - that's the way to think about constant
01:10 - time so let me just erase this no will
01:11 - move on to these methods so to add
01:13 - something to our stack we can use one of
01:15 - two methods now I'm just putting the
01:18 - over here because this means that they
01:20 - can be named something differently but
01:21 - we can use what's known as put or push
01:24 - now the standard convention is usually
01:26 - push and this means push an item on top
01:28 - of a stack just like if you're gonna
01:30 - push a new plate on top of the stack of
01:32 - plates so if we go here and we say push
01:34 - and we push maybe the item 7 onto our
01:38 - stack what's gonna happen is we're gonna
01:40 - come in from one side because our stack
01:42 - is one ended as opposed to two ended
01:44 - like our queue that we talked about
01:46 - previously we're gonna come up through
01:48 - the front which is also at the back
01:50 - because it's one side we're gonna put
01:52 - our item seven at the very bottom of our
01:54 - stack well in this case there's only one
01:55 - item but again it's still gonna be the
01:57 - bottom now if we go and we decide to
01:59 - push another item onto her stack let's
02:01 - do that and let's see what happens when
02:03 - we push let's say the item six onto our
02:06 - stack well six is gonna come in through
02:08 - the front but it's also coming in
02:09 - through the back because there's only
02:10 - one end and well we're gonna get sick
02:13 - on top of seven and that is how we push
02:16 - or add items onto the stack and notice
02:18 - that they well stack and that the most
02:21 - recent item you added is always gonna be
02:23 - at what we call the top of the stack
02:25 - alright so now that we've done that
02:29 - let's talk about how we can get an item
02:31 - off of the stack so if we want to get
02:33 - and remove an item from our stack we can
02:36 - use one of two methods yet or pump again
02:39 - these just really depend on what you're
02:40 - naming your methods they do the same
02:42 - thing so if we decide to pop an item off
02:45 - our stack what actually ends up
02:47 - happening as we go to the very top of
02:48 - our stack so the last item we added on
02:50 - which in this case is six and we bring
02:53 - it we delete it and we bring it and
02:55 - return it to wherever pop was called so
02:58 - what's actually happening here is let's
02:59 - say you know we go maybe something like
03:02 - x equals pump
03:03 - well now X is actually gonna be equal to
03:06 - six because that's what we popped off of
03:07 - the stack and we're gonna remove 6 from
03:10 - our stack entirely now if we do pump
03:14 - again what will happen is we will now be
03:16 - removing 7 because 6 was already removed
03:18 - so now 7 is the highest item on the
03:20 - stack or the last one to go in so it's
03:22 - now coming out again following this
03:25 - first in last out right and that is kind
03:28 - of the principle to go by with these
03:29 - stacks so let's go back and now let's
03:33 - look at another method so let's pretend
03:35 - that instead of removing an item from
03:37 - our stack we actually just want to look
03:39 - at what the top item is well a lot of
03:42 - times we want to do that and this is
03:44 - where we can use what's known as peek or
03:45 - front so if we want to check what the
03:48 - front item in our stack is at the
03:49 - highest item the most recent item to go
03:51 - on we can use peek or front and this is
03:54 - gonna look and tell us what the item is
03:56 - without actually removing it so if I
03:58 - call front here what's gonna happen is
04:00 - we're gonna look we're gonna see 7 is
04:02 - there and we're gonna return 7 to
04:04 - wherever we called front so it's gonna
04:05 - go 7 is gonna go here but we're not
04:08 - gonna remove it from the stack again
04:09 - it's a very useful thing that we often
04:11 - want often times we want to do all right
04:13 - so that is how you kind of do that we
04:15 - can use peek front whatever we're
04:16 - calling it again for that now the last
04:18 - two methods to talk about our is empty n
04:20 - is full these do exactly what they say
04:22 - they're going to tell us if the stack is
04:24 - empty or if the stack is full now
04:27 - the reason we need these methods is
04:28 - because if we try to pop an item or peek
04:31 - an item and their stack is empty we're
04:33 - gonna run into an error so oftentimes we
04:35 - need to check by using an if statement
04:37 - and saying if not stack is empty right
04:41 - then we can go ahead and we can do that
04:44 - pop or we can do that peek that we want
04:46 - to do now this applies the same to is
04:48 - full sometimes depending on what
04:50 - language you're programming in and how
04:51 - you implement a stack you may have a
04:54 - limit on the amount of items that can go
04:55 - into the stack so before you push a new
04:58 - item onto the stack you need to make
05:00 - sure that there's enough room for it and
05:01 - that it can accept it right just like if
05:04 - you try to put a plate too high on a
05:05 - pile of plates it's gonna fall over if
05:07 - it can't hold that right I'm just a
05:09 - basic example so it means that is kind
05:11 - of how each stack works so now I want to
05:13 - demonstrate the use of stacks an example
05:15 - where I want to use two stacks to
05:17 - simulate a queue now if you haven't
05:19 - watched my video on queue I recommend
05:20 - that you do but essentially a queue is
05:22 - kind of the opposite of a stack where
05:24 - rather than the first item in is the
05:26 - last item out the first item in is the
05:28 - first item out so you can see our queue
05:30 - is on this side here and when I add
05:32 - items the first item to be added will be
05:34 - the first item to be taken off when
05:36 - we're using those push pop operations or
05:38 - those debts and on Q&D queue and all of
05:40 - that that I've talked about previously
05:42 - anyways thank for yourself for a second
05:44 - how can I use two stacks to simulate a
05:47 - queue now once you're done thinking I'm
05:49 - gonna explain this example in detail so
05:51 - let's start by just creating and adding
05:53 - a few things to our stack so we're gonna
05:55 - turn this into a queue in just a second
05:57 - but let's add a few items so let's add
05:58 - three two and one actually that's kind
06:01 - of weird numbers to add in that order
06:03 - we'll do like five seven and negative
06:05 - four in this order so starting with five
06:07 - so let's add that to stack one so we
06:09 - know that when we add items and we stack
06:11 - them on here we push them we have five
06:12 - we're gonna have seven and then we're
06:14 - gonna have negative four and since
06:15 - negative four was the last item it's
06:17 - gonna be the first one that we take off
06:18 - of stack one okay so that's great but
06:21 - that doesn't really work for our cube
06:24 - does it if we add our queue what our
06:26 - queue would look like would be five
06:28 - seven negative four we're five right
06:32 - here is gonna be the first item to come
06:33 - off so how do we use this other stack to
06:36 - do that well this is how we do it when
06:39 - we add items so
06:41 - remove these items from here now we're
06:43 - gonna follow a little bit of a different
06:44 - procedure we're gonna use this second
06:45 - stack we're gonna start by taking all
06:48 - the items in stack one and putting them
06:50 - onto stack two so pushing them off or
06:52 - sorry popping them off stack one and
06:54 - pushing them to stack two so in this
06:56 - case it's empty so all we actually end
06:58 - up doing is just putting this first item
07:00 - that we want to add here which is five
07:01 - on to stack one now this works as our
07:05 - cube because well there's only one item
07:07 - so obviously that's gonna be the item we
07:08 - take off but now let's move to the next
07:10 - example where we have seven so how do we
07:13 - now make sure that seven since it's
07:14 - added after five isn't gonna be taken
07:16 - off first because we just put seven and
07:18 - we start taking it off well then seven
07:21 - is gonna get taken off first what we
07:22 - actually do is we move all the items
07:25 - from stack one on to stack two so we put
07:28 - five which is this right here on to
07:30 - stack - I know I'm butchering writing
07:32 - five and we erase five from this stack
07:34 - we then take seven which we want here
07:37 - and we push it onto stack one like this
07:39 - now we take all the items from stack two
07:42 - and we re stack them onto stack one so
07:44 - we pop them off here and push them back
07:46 - and now when we do that we get five here
07:49 - and well we can erase this from stack
07:51 - two is this is just kind of our
07:52 - intermediate stack all right that's
07:54 - great pretty simple for two items now
07:56 - what about three we'll watch this same
07:58 - process as before we take five and we
08:01 - stack it on to stack two so we pop off
08:03 - the top of this and push on to the top
08:05 - of this then seven same thing seven goes
08:08 - here now we can erase these from here
08:10 - they no longer exist
08:11 - we take our new item which is negative
08:13 - four now and we put negative four on to
08:16 - our stack which is stack one now from
08:19 - stack two we take all these items and we
08:21 - put them back onto stack one so when we
08:23 - do that we're gonna get these in reverse
08:25 - which means we're gonna get seven and
08:26 - five and now you can see this is
08:29 - following the queue order so when I want
08:31 - to take items off and I'll just erase
08:32 - them from here to make sure no one's
08:33 - confused we start by taking five then
08:35 - seven then negative four and every time
08:38 - we add an item we simply take all the
08:40 - items off stack one put them on a
08:41 - temporary stack - just by popping and
08:44 - pushing and then we add that item to
08:46 - stack one and then pop and push back off
08:48 - the temporary stack so we get in the
08:50 - correct order so the new item you add
08:52 - will all
08:52 - be at the end of the stack and be the
08:54 - last item to take off which follows FIFO
08:56 - which is the way that our cubes work
08:58 - first-in first-out
09:00 - so it means that has been the video on
09:01 - stacks I hope you guys learned a little
09:03 - bit if you did make sure you leave a
09:04 - like and subscribe and I will see you
09:06 - guys again in the next data structures
09:07 - video

Cleaned transcript:

so what is a stack the easiest way to think of it a stack is like a stack of plates if you have a table say this one right here when you start stacking plates you're gonna put them on top of each other so you have a plate here you have another one and then you keep adding a few more now the last plate that you stack so the one on top is actually always gonna be the first one you take off so this fall is what's known as Philo first in last out the first plate that we put was actually this one and it's gonna be the last plate that we take off the stack because we need to take off plates two three and four before we can access that one and if you understand this you understand stacks they're very straightforward so now let's talk about some of the methods involved with a stack and how this actually works in kind your computer's memory and all of that now firstly just like use all these methods on the side follow what's known as constant time and that means doing this does not change based on how many items you have in your stack so it's gonna happen pretty well instantly in the computer and if you have 10,000 item integers in your stack it's gonna take as much time as if you have two or three items in your stack so that's the way to think about constant time so let me just erase this no will move on to these methods so to add something to our stack we can use one of two methods now I'm just putting the over here because this means that they can be named something differently but we can use what's known as put or push now the standard convention is usually push and this means push an item on top of a stack just like if you're gonna push a new plate on top of the stack of plates so if we go here and we say push and we push maybe the item 7 onto our stack what's gonna happen is we're gonna come in from one side because our stack is one ended as opposed to two ended like our queue that we talked about previously we're gonna come up through the front which is also at the back because it's one side we're gonna put our item seven at the very bottom of our stack well in this case there's only one item but again it's still gonna be the bottom now if we go and we decide to push another item onto her stack let's do that and let's see what happens when we push let's say the item six onto our stack well six is gonna come in through the front but it's also coming in through the back because there's only one end and well we're gonna get sick on top of seven and that is how we push or add items onto the stack and notice that they well stack and that the most recent item you added is always gonna be at what we call the top of the stack alright so now that we've done that let's talk about how we can get an item off of the stack so if we want to get and remove an item from our stack we can use one of two methods yet or pump again these just really depend on what you're naming your methods they do the same thing so if we decide to pop an item off our stack what actually ends up happening as we go to the very top of our stack so the last item we added on which in this case is six and we bring it we delete it and we bring it and return it to wherever pop was called so what's actually happening here is let's say you know we go maybe something like x equals pump well now X is actually gonna be equal to six because that's what we popped off of the stack and we're gonna remove 6 from our stack entirely now if we do pump again what will happen is we will now be removing 7 because 6 was already removed so now 7 is the highest item on the stack or the last one to go in so it's now coming out again following this first in last out right and that is kind of the principle to go by with these stacks so let's go back and now let's look at another method so let's pretend that instead of removing an item from our stack we actually just want to look at what the top item is well a lot of times we want to do that and this is where we can use what's known as peek or front so if we want to check what the front item in our stack is at the highest item the most recent item to go on we can use peek or front and this is gonna look and tell us what the item is without actually removing it so if I call front here what's gonna happen is we're gonna look we're gonna see 7 is there and we're gonna return 7 to wherever we called front so it's gonna go 7 is gonna go here but we're not gonna remove it from the stack again it's a very useful thing that we often want often times we want to do all right so that is how you kind of do that we can use peek front whatever we're calling it again for that now the last two methods to talk about our is empty n is full these do exactly what they say they're going to tell us if the stack is empty or if the stack is full now the reason we need these methods is because if we try to pop an item or peek an item and their stack is empty we're gonna run into an error so oftentimes we need to check by using an if statement and saying if not stack is empty right then we can go ahead and we can do that pop or we can do that peek that we want to do now this applies the same to is full sometimes depending on what language you're programming in and how you implement a stack you may have a limit on the amount of items that can go into the stack so before you push a new item onto the stack you need to make sure that there's enough room for it and that it can accept it right just like if you try to put a plate too high on a pile of plates it's gonna fall over if it can't hold that right I'm just a basic example so it means that is kind of how each stack works so now I want to demonstrate the use of stacks an example where I want to use two stacks to simulate a queue now if you haven't watched my video on queue I recommend that you do but essentially a queue is kind of the opposite of a stack where rather than the first item in is the last item out the first item in is the first item out so you can see our queue is on this side here and when I add items the first item to be added will be the first item to be taken off when we're using those push pop operations or those debts and on Q&D queue and all of that that I've talked about previously anyways thank for yourself for a second how can I use two stacks to simulate a queue now once you're done thinking I'm gonna explain this example in detail so let's start by just creating and adding a few things to our stack so we're gonna turn this into a queue in just a second but let's add a few items so let's add three two and one actually that's kind of weird numbers to add in that order we'll do like five seven and negative four in this order so starting with five so let's add that to stack one so we know that when we add items and we stack them on here we push them we have five we're gonna have seven and then we're gonna have negative four and since negative four was the last item it's gonna be the first one that we take off of stack one okay so that's great but that doesn't really work for our cube does it if we add our queue what our queue would look like would be five seven negative four we're five right here is gonna be the first item to come off so how do we use this other stack to do that well this is how we do it when we add items so remove these items from here now we're gonna follow a little bit of a different procedure we're gonna use this second stack we're gonna start by taking all the items in stack one and putting them onto stack two so pushing them off or sorry popping them off stack one and pushing them to stack two so in this case it's empty so all we actually end up doing is just putting this first item that we want to add here which is five on to stack one now this works as our cube because well there's only one item so obviously that's gonna be the item we take off but now let's move to the next example where we have seven so how do we now make sure that seven since it's added after five isn't gonna be taken off first because we just put seven and we start taking it off well then seven is gonna get taken off first what we actually do is we move all the items from stack one on to stack two so we put five which is this right here on to stack I know I'm butchering writing five and we erase five from this stack we then take seven which we want here and we push it onto stack one like this now we take all the items from stack two and we re stack them onto stack one so we pop them off here and push them back and now when we do that we get five here and well we can erase this from stack two is this is just kind of our intermediate stack all right that's great pretty simple for two items now what about three we'll watch this same process as before we take five and we stack it on to stack two so we pop off the top of this and push on to the top of this then seven same thing seven goes here now we can erase these from here they no longer exist we take our new item which is negative four now and we put negative four on to our stack which is stack one now from stack two we take all these items and we put them back onto stack one so when we do that we're gonna get these in reverse which means we're gonna get seven and five and now you can see this is following the queue order so when I want to take items off and I'll just erase them from here to make sure no one's confused we start by taking five then seven then negative four and every time we add an item we simply take all the items off stack one put them on a temporary stack just by popping and pushing and then we add that item to stack one and then pop and push back off the temporary stack so we get in the correct order so the new item you add will all be at the end of the stack and be the last item to take off which follows FIFO which is the way that our cubes work firstin firstout so it means that has been the video on stacks I hope you guys learned a little bit if you did make sure you leave a like and subscribe and I will see you guys again in the next data structures video
