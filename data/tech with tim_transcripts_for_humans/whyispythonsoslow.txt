With timestamps:

00:00 - so is Python too slow now the reality is
00:03 - Python is an extremely slow programming
00:05 - language when we look at something like
00:07 - Java C and C++ it's embarrassing how
00:10 - much faster they can do things than
00:12 - Python in fact specific algorithms and
00:14 - applications can actually do things
00:16 - about a hundred to two hundred times
00:18 - faster than the native Python language
00:20 - so in this video we're going to discuss
00:22 - why that is and the different techniques
00:24 - that we can use as Python programmers to
00:26 - speed up and run more concurrent Python
00:29 - applications now before I get too far it
00:31 - is worth noting that wood python lacks
00:33 - and speed it makes up for in development
00:35 - time and cost typically developing
00:38 - programs in python is much faster
00:39 - simpler and ends up costing less as
00:42 - there's less labor involved with the
00:43 - project now this is a massive advantage
00:45 - in in many cases you can actually write
00:47 - you know a Jabba whip like code in
00:49 - Python and about four or five times
00:51 - faster than you'd be able to do it in
00:53 - that language so this is something to
00:54 - consider and this actually brings me
00:55 - nicely into the sponsor of today's video
00:57 - which is kite now kite wants to help you
01:00 - write your Python code as fast as
01:02 - possible by using their awesome
01:04 - autocomplete engine for Python which
01:06 - happens to be a plug-in for your IDE or
01:08 - text editor kite runs a machine learning
01:10 - model on your computer while you type to
01:12 - show you the best possible completions
01:14 - it ranks all of its completions by
01:16 - relevance so you get shown the best ones
01:18 - first and it has a ton of awesome
01:19 - features like intelligent snippets which
01:21 - save you a ton of time when you're
01:23 - writing code one of the best parts of
01:25 - kite is actually the co-pilot window now
01:27 - the copilot window acts as a companion
01:29 - window while you're coding you can pop
01:31 - it up on the left or right side of your
01:32 - screen and it shows you relevant
01:34 - documentation following your cursor
01:36 - throughout the file kites awesome I
01:38 - personally have been using it for the
01:39 - past about two months I absolutely love
01:42 - it and the best part of it is that it's
01:43 - free and you guys can download it at the
01:45 - link in the description so why is Python
01:48 - so slow now there's a variety of
01:50 - different reasons why this language is
01:51 - slow but I just want to combat a few
01:53 - rumors here the main reason this
01:55 - language is slow is not the global
01:57 - interpreter lock although that
01:59 - definitely is a factor to the speed and
02:01 - the way that we can write you know
02:02 - faster Python programs that is not the
02:05 - reason fundamentally why the language is
02:07 - slow the reason the language is slow is
02:09 - because it's dynamically typed now we're
02:11 - going to talk about this more in detail
02:12 - but I want to
02:13 - comparison to a language like Java which
02:15 - I actually personally write in now in
02:17 - Java
02:18 - everything is statically typed and this
02:20 - language is actually compiled before
02:22 - it's run unlike Python that's compiled
02:24 - at runtime through an interpreter now
02:26 - what happens in Java when you write code
02:28 - is you need to define what type each of
02:30 - your variables are gonna be what type
02:32 - you know your methods and functions are
02:34 - gonna be returning and you pretty much
02:36 - have to define exactly what everything's
02:38 - gonna be throughout your code now
02:40 - although this leads to you know much
02:41 - longer development times and takes a
02:43 - much longer time to write your code what
02:45 - it does is increase efficiency
02:47 - exponentially when you're compiling now
02:50 - the reason this actually works and the
02:52 - reason this works so much faster than
02:53 - Python code is because if you know the
02:55 - type that a specific variable or object
02:58 - is gonna be you can perform a ton of
03:00 - different optimizations and avoid
03:02 - performing a ton of different checks
03:03 - while you're actually running the code
03:06 - because these checks are performed at
03:07 - compile time in Java essentially you
03:10 - can't compile any Java code that hasn't
03:12 - actual or you know even just like typed
03:15 - errors while you're writing that code so
03:17 - you're gonna try to compile it and it's
03:19 - gonna say you know this type isn't
03:20 - accurate you can't do this you can't
03:22 - compile it because it knows that when it
03:24 - comes to runtime that's not gonna work
03:25 - so essentially all of these checks that
03:27 - actually need to be performed in Python
03:29 - when the code is running are performed
03:31 - beforehand and there's just a ton of
03:33 - optimization done because of this
03:35 - statically typed length now you might be
03:38 - asking well why doesn't Python do this
03:40 - well Python is dynamically typed which
03:43 - essentially means that any variable can
03:45 - change its type and can change its value
03:47 - at any point in the program while it's
03:49 - running this essentially means that we
03:51 - can't actually compile the entire
03:52 - program beforehand because we can't do
03:55 - all of these checks at once because we
03:57 - don't know what type these variables are
03:59 - gonna be they're gonna change at runtime
04:00 - different things are gonna happen and
04:02 - because of that you know we can't get
04:04 - all this optimization that we might have
04:06 - in a lower level language like Java C or
04:09 - C++ and that is kind of the fundamental
04:11 - reason the language is slow this typing
04:14 - this dynamic typing and any fast
04:16 - language is gonna have a compiler that's
04:18 - gonna run through its gonna make sure
04:20 - that everything is good it's gonna do
04:21 - all these checks before it actually ends
04:23 - up running the code at runtime where
04:25 - what happens in python is
04:27 - all of your code is actually compiled
04:28 - and checked at runtime so rather than
04:31 - you know compiling it before and taking
04:33 - all that time beforehand while you're
04:35 - running the code a ton of different
04:36 - checks need to be happening to make sure
04:39 - that you know this object is correct
04:40 - these types are proper everything is
04:42 - working the same now that is kind of the
04:45 - fundamental reason and that's what we're
04:47 - gonna keep going back to in this video
04:48 - we talk about some other slow parts of
04:50 - Python then the next thing to talk about
04:52 - is obviously the lack of concurrency in
04:54 - Python this is going to be your major
04:56 - kind of factor on speed if you're
04:58 - writing an application in Java C C sharp
04:59 - you can kind of spread everything out
05:01 - throughout multiple threads and what
05:03 - this allows you to do is utilize all of
05:05 - the cores of your CPU so to kind of
05:07 - break this down in modern day computing
05:09 - most of us have four core CPUs or higher
05:12 - and that allows us to actually run for
05:14 - tasks at the exact same time
05:16 - concurrently now with Python this isn't
05:20 - possible
05:20 - well Python says is well for each
05:23 - interpreter we can have at most one
05:25 - thread running at a time and a thread is
05:27 - just you know you can think of it as
05:28 - some kind of operation that's happening
05:30 - on a CPU core so that means that even if
05:32 - we create a ton of different threads in
05:34 - our Python program we can only be using
05:36 - one CPU core wow you know a Java program
05:39 - or a C program could be using all eight
05:41 - or could be using all four which is
05:42 - obviously going to lead to you know a 4x
05:44 - increase in speed now we can get around
05:47 - this in Python by using something called
05:49 - multiprocessing
05:50 - but I'm gonna discuss some of the issues
05:51 - with that in just a second now a lot of
05:53 - you are probably wondering why the
05:55 - global interpreter lock exists in Python
05:57 - why would they make that a feature of
05:58 - the language well this boils down again
06:00 - to the dynamic type of Python so the way
06:04 - that memory is actually managed in
06:05 - Python and I'm not an expert on this and
06:07 - any means I've just kind of looked up a
06:08 - few things and made sure I kind of had
06:10 - an idea what I was talking about is that
06:12 - it's not thread safe now what that means
06:14 - is that if two threads are to separate
06:17 - you know pieces of code are trying to
06:18 - access one specific object in memory at
06:21 - the same time you're gonna run into
06:23 - issues and essentially we can't allow
06:25 - that to happen so what we do is we say
06:27 - at least what pythons done is said well
06:29 - we're gonna have a global interpreter
06:30 - lock that means that only one thread can
06:32 - run at a time to prevent this from
06:34 - happening because we know one of the
06:36 - main issues with running multiprocessing
06:38 - and multi-threading applications is you
06:40 - have
06:40 - deal with locking and sharing memory and
06:42 - that is kind of one of the things that
06:44 - I'm gonna get into now with the multi
06:45 - processing module in Python
06:47 - so although concurrency is possible in
06:50 - Python by using the module called multi
06:52 - processing which essentially allows you
06:54 - to spawn another Python interpreter that
06:56 - can run its own threads it's very
06:58 - difficult to actually achieve
06:59 - effectively I've tried it personally
07:01 - obviously you know I'm not a pro but
07:03 - I've had difficulty doing this because
07:05 - of the way that memory is managed
07:07 - whenever you do this you need to shut up
07:08 - set up a shared memory object which
07:11 - allows you to actually transfer memory
07:13 - between one Python interpreter to the
07:16 - other this is difficult to do and it's
07:18 - not you know very it's not intuitive to
07:21 - actually get working so that's kind of
07:23 - one of the issues with it and even
07:24 - though you can do this you still run
07:26 - into a lot of the speed issues with
07:28 - Python coming from the way that it's
07:30 - interpreted and the way that it works
07:31 - you can't actually achieve multi
07:33 - processing and concurrency in Python but
07:35 - it is difficult and you have to deal
07:36 - with much more difficulties and kind of
07:39 - things getting in your way than I would
07:40 - say in Java C and other languages like
07:42 - that where you can just you know make
07:44 - threads and they will run automatically
07:45 - on the other cores without having to
07:47 - define shared memory objects and locks
07:49 - and stuff like that so other than multi
07:52 - processing how can we speed up our
07:53 - Python code well one way to do this is
07:56 - to actually use C code as an extension
07:58 - to our Python library or whatever it is
08:00 - that we're creating now python is really
08:03 - built on top of C a lot of people don't
08:05 - know this but there's a lot of you know
08:06 - functions and things that you're
08:07 - actually using that are written natively
08:09 - and C and that Python kind of just has
08:11 - an extension for that allow you to use
08:13 - them and that's why for example the
08:14 - sorting algorithm in Python will run you
08:16 - know much faster than if you write your
08:18 - own just native sort actually in Python
08:20 - we have a lot of optimizations done and
08:22 - a lot of things written lower-level in C
08:24 - now this actually means that you can do
08:27 - this yourself so if you need to create
08:29 - something that's gonna run very quickly
08:31 - in Python and you can't use a different
08:32 - language what you can actually do is
08:34 - write that algorithm and see and import
08:36 - it into your Python code as you know in
08:39 - extension so you can run that code
08:41 - faster than if you had just written it
08:42 - natively in Python so to sum it all up
08:44 - here python is slow mainly because of
08:47 - the way that the language is built
08:48 - there's a lot of other factors but
08:50 - because of the dynamic typing involved
08:52 - in python we're not able to introdu
08:54 - a lot of optimizations in our compiling
08:56 - and interpreting that we have in other
08:58 - languages like Java now this leads us
09:01 - into well how can we actually make
09:02 - Python usable and much faster now Python
09:05 - obviously is usable and in a lot of
09:07 - cases you don't actually care a ton
09:09 - about the runtime of your code or it
09:11 - would be nice if it ran faster but at
09:13 - the end of the day you know a few
09:14 - milliseconds isn't gonna be drastic to
09:17 - whatever application or product you're
09:19 - building and in this case Python is
09:20 - great because it's much faster to
09:22 - develop and to write code in and
09:24 - typically a lot easier and more readable
09:26 - when you're developing a project now to
09:29 - actually increase the speed of your
09:30 - Python code you can introduce some kind
09:32 - of threading and concurrency you can use
09:34 - the multi processing module which will
09:36 - allow you to have multiple interpreters
09:38 - running at once and get past that global
09:39 - interpreter lock but you may run into
09:41 - some issues with shared and locking
09:43 - memory now other than that you can also
09:45 - write C extensions for your Python code
09:47 - obviously this isn't gonna be for
09:49 - everyone as you need to know C to do
09:50 - that but if you're really in a pickle
09:51 - you need to get something fast and you
09:53 - need to use Python for it writing
09:55 - something and C and importing that will
09:56 - speed up your code by a drastic amount
09:59 - of time especially if you have like
10:01 - searching or sorting algorithms or
10:03 - things that are just really intensive
10:04 - computationally if you write those in
10:06 - seed that's gonna speed up the execution
10:08 - of time of those exponentially and
10:11 - that's gonna save you a ton of time and
10:12 - a ton of headache rather than trying to
10:14 - learn you know an entire new language
10:15 - when you can just kind of pick out some
10:16 - pieces of C and write a small extension
10:18 - for your Python code so with that being
10:20 - said that has been why Python is slow
10:23 - how to make it a bit faster and just
10:24 - some information about the language in
10:26 - general I'm sure I might have made some
10:27 - minor mistakes here if I had please
10:29 - don't hesitate to leave a comment down
10:30 - below and let me know just like you guys
10:32 - I'm learning as well and this is my kind
10:34 - of surface level understanding of the
10:36 - Python language so with that being said
10:38 - if you guys enjoyed the video make sure
10:39 - you leave a like and subscribe to the
10:41 - channel down below and let me know what
10:42 - you want to see

Cleaned transcript:

so is Python too slow now the reality is Python is an extremely slow programming language when we look at something like Java C and C++ it's embarrassing how much faster they can do things than Python in fact specific algorithms and applications can actually do things about a hundred to two hundred times faster than the native Python language so in this video we're going to discuss why that is and the different techniques that we can use as Python programmers to speed up and run more concurrent Python applications now before I get too far it is worth noting that wood python lacks and speed it makes up for in development time and cost typically developing programs in python is much faster simpler and ends up costing less as there's less labor involved with the project now this is a massive advantage in in many cases you can actually write you know a Jabba whip like code in Python and about four or five times faster than you'd be able to do it in that language so this is something to consider and this actually brings me nicely into the sponsor of today's video which is kite now kite wants to help you write your Python code as fast as possible by using their awesome autocomplete engine for Python which happens to be a plugin for your IDE or text editor kite runs a machine learning model on your computer while you type to show you the best possible completions it ranks all of its completions by relevance so you get shown the best ones first and it has a ton of awesome features like intelligent snippets which save you a ton of time when you're writing code one of the best parts of kite is actually the copilot window now the copilot window acts as a companion window while you're coding you can pop it up on the left or right side of your screen and it shows you relevant documentation following your cursor throughout the file kites awesome I personally have been using it for the past about two months I absolutely love it and the best part of it is that it's free and you guys can download it at the link in the description so why is Python so slow now there's a variety of different reasons why this language is slow but I just want to combat a few rumors here the main reason this language is slow is not the global interpreter lock although that definitely is a factor to the speed and the way that we can write you know faster Python programs that is not the reason fundamentally why the language is slow the reason the language is slow is because it's dynamically typed now we're going to talk about this more in detail but I want to comparison to a language like Java which I actually personally write in now in Java everything is statically typed and this language is actually compiled before it's run unlike Python that's compiled at runtime through an interpreter now what happens in Java when you write code is you need to define what type each of your variables are gonna be what type you know your methods and functions are gonna be returning and you pretty much have to define exactly what everything's gonna be throughout your code now although this leads to you know much longer development times and takes a much longer time to write your code what it does is increase efficiency exponentially when you're compiling now the reason this actually works and the reason this works so much faster than Python code is because if you know the type that a specific variable or object is gonna be you can perform a ton of different optimizations and avoid performing a ton of different checks while you're actually running the code because these checks are performed at compile time in Java essentially you can't compile any Java code that hasn't actual or you know even just like typed errors while you're writing that code so you're gonna try to compile it and it's gonna say you know this type isn't accurate you can't do this you can't compile it because it knows that when it comes to runtime that's not gonna work so essentially all of these checks that actually need to be performed in Python when the code is running are performed beforehand and there's just a ton of optimization done because of this statically typed length now you might be asking well why doesn't Python do this well Python is dynamically typed which essentially means that any variable can change its type and can change its value at any point in the program while it's running this essentially means that we can't actually compile the entire program beforehand because we can't do all of these checks at once because we don't know what type these variables are gonna be they're gonna change at runtime different things are gonna happen and because of that you know we can't get all this optimization that we might have in a lower level language like Java C or C++ and that is kind of the fundamental reason the language is slow this typing this dynamic typing and any fast language is gonna have a compiler that's gonna run through its gonna make sure that everything is good it's gonna do all these checks before it actually ends up running the code at runtime where what happens in python is all of your code is actually compiled and checked at runtime so rather than you know compiling it before and taking all that time beforehand while you're running the code a ton of different checks need to be happening to make sure that you know this object is correct these types are proper everything is working the same now that is kind of the fundamental reason and that's what we're gonna keep going back to in this video we talk about some other slow parts of Python then the next thing to talk about is obviously the lack of concurrency in Python this is going to be your major kind of factor on speed if you're writing an application in Java C C sharp you can kind of spread everything out throughout multiple threads and what this allows you to do is utilize all of the cores of your CPU so to kind of break this down in modern day computing most of us have four core CPUs or higher and that allows us to actually run for tasks at the exact same time concurrently now with Python this isn't possible well Python says is well for each interpreter we can have at most one thread running at a time and a thread is just you know you can think of it as some kind of operation that's happening on a CPU core so that means that even if we create a ton of different threads in our Python program we can only be using one CPU core wow you know a Java program or a C program could be using all eight or could be using all four which is obviously going to lead to you know a 4x increase in speed now we can get around this in Python by using something called multiprocessing but I'm gonna discuss some of the issues with that in just a second now a lot of you are probably wondering why the global interpreter lock exists in Python why would they make that a feature of the language well this boils down again to the dynamic type of Python so the way that memory is actually managed in Python and I'm not an expert on this and any means I've just kind of looked up a few things and made sure I kind of had an idea what I was talking about is that it's not thread safe now what that means is that if two threads are to separate you know pieces of code are trying to access one specific object in memory at the same time you're gonna run into issues and essentially we can't allow that to happen so what we do is we say at least what pythons done is said well we're gonna have a global interpreter lock that means that only one thread can run at a time to prevent this from happening because we know one of the main issues with running multiprocessing and multithreading applications is you have deal with locking and sharing memory and that is kind of one of the things that I'm gonna get into now with the multi processing module in Python so although concurrency is possible in Python by using the module called multi processing which essentially allows you to spawn another Python interpreter that can run its own threads it's very difficult to actually achieve effectively I've tried it personally obviously you know I'm not a pro but I've had difficulty doing this because of the way that memory is managed whenever you do this you need to shut up set up a shared memory object which allows you to actually transfer memory between one Python interpreter to the other this is difficult to do and it's not you know very it's not intuitive to actually get working so that's kind of one of the issues with it and even though you can do this you still run into a lot of the speed issues with Python coming from the way that it's interpreted and the way that it works you can't actually achieve multi processing and concurrency in Python but it is difficult and you have to deal with much more difficulties and kind of things getting in your way than I would say in Java C and other languages like that where you can just you know make threads and they will run automatically on the other cores without having to define shared memory objects and locks and stuff like that so other than multi processing how can we speed up our Python code well one way to do this is to actually use C code as an extension to our Python library or whatever it is that we're creating now python is really built on top of C a lot of people don't know this but there's a lot of you know functions and things that you're actually using that are written natively and C and that Python kind of just has an extension for that allow you to use them and that's why for example the sorting algorithm in Python will run you know much faster than if you write your own just native sort actually in Python we have a lot of optimizations done and a lot of things written lowerlevel in C now this actually means that you can do this yourself so if you need to create something that's gonna run very quickly in Python and you can't use a different language what you can actually do is write that algorithm and see and import it into your Python code as you know in extension so you can run that code faster than if you had just written it natively in Python so to sum it all up here python is slow mainly because of the way that the language is built there's a lot of other factors but because of the dynamic typing involved in python we're not able to introdu a lot of optimizations in our compiling and interpreting that we have in other languages like Java now this leads us into well how can we actually make Python usable and much faster now Python obviously is usable and in a lot of cases you don't actually care a ton about the runtime of your code or it would be nice if it ran faster but at the end of the day you know a few milliseconds isn't gonna be drastic to whatever application or product you're building and in this case Python is great because it's much faster to develop and to write code in and typically a lot easier and more readable when you're developing a project now to actually increase the speed of your Python code you can introduce some kind of threading and concurrency you can use the multi processing module which will allow you to have multiple interpreters running at once and get past that global interpreter lock but you may run into some issues with shared and locking memory now other than that you can also write C extensions for your Python code obviously this isn't gonna be for everyone as you need to know C to do that but if you're really in a pickle you need to get something fast and you need to use Python for it writing something and C and importing that will speed up your code by a drastic amount of time especially if you have like searching or sorting algorithms or things that are just really intensive computationally if you write those in seed that's gonna speed up the execution of time of those exponentially and that's gonna save you a ton of time and a ton of headache rather than trying to learn you know an entire new language when you can just kind of pick out some pieces of C and write a small extension for your Python code so with that being said that has been why Python is slow how to make it a bit faster and just some information about the language in general I'm sure I might have made some minor mistakes here if I had please don't hesitate to leave a comment down below and let me know just like you guys I'm learning as well and this is my kind of surface level understanding of the Python language so with that being said if you guys enjoyed the video make sure you leave a like and subscribe to the channel down below and let me know what you want to see
