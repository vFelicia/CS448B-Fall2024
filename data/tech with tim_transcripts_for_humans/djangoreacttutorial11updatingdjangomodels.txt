With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome back to
00:10 - another django and react tutorial video
00:12 - in this video what we're going to be
00:14 - doing is actually building out the
00:16 - settings page or the settings tab on our
00:18 - room page
00:19 - so i don't know if i've discussed this
00:21 - previously but right now we just have
00:23 - this page that shows us
00:24 - information about the room and we can
00:26 - leave the room but ideally if the user
00:28 - is the host of the room
00:30 - they should be able to modify these
00:31 - settings they should be able to change
00:32 - the number of votes
00:33 - they should be able to change if the
00:35 - guests can pause and i guess that's
00:37 - really all the stuff that they're going
00:38 - to be modifying but either way we want
00:40 - to have like a nice settings page for
00:41 - them
00:42 - so that they can simply press settings
00:43 - and then modify the settings of the room
00:45 - so what we're going to do in this video
00:47 - and probably the next video as well
00:48 - is build out the ui for that settings
00:51 - page in fact we're actually going to use
00:53 - the same user interface or the same
00:55 - component
00:56 - that we've already used and i'm going to
00:57 - show you how we can modify them by
00:59 - messing with this component's props
01:01 - now what i mean by that is right now if
01:03 - i go to create a room this is a form
01:05 - right that allows me to pick the number
01:07 - of votes required to skip
01:08 - and play or pause right and then we have
01:11 - some nice information
01:12 - here we have create a room we have back
01:13 - whatever all this stuff
01:15 - but this component is very similar to
01:17 - the component that we would want to
01:18 - build out for our settings page right
01:20 - say we wanted to have a component that
01:22 - was specific for settings
01:24 - well it would look almost identical to
01:25 - this except the create a room button
01:27 - would be changed to update room or
01:29 - yeah i guess update room or change room
01:31 - and then create a room
01:32 - up here would just be settings right so
01:35 - what we're actually going to do is
01:36 - modify the existing create a room
01:38 - component
01:39 - and we're going to change it such that
01:41 - it's able to kind of dynamically modify
01:44 - itself
01:44 - based on information that we give to it
01:46 - so that's what we'll be doing
01:48 - we're of course also going to have to
01:49 - build another endpoint on the back end
01:51 - or in the api folder
01:52 - that's going to allow us to actually
01:54 - update the existing room
01:55 - so for that what we're going to have to
01:56 - do is make sure that the person trying
01:58 - to update this room actually is the host
02:00 - of the room
02:01 - and if they are we will let them modify
02:03 - it now since we usually start out by
02:05 - doing all the front end work and all the
02:06 - ui design and all of that
02:08 - let's switch it up and let's actually do
02:09 - the back end first this time
02:11 - we'll build out the view that we need or
02:13 - the api endpoint
02:14 - and then we'll get in and do the front
02:15 - end so let's go to views.pi
02:17 - and essentially what i want to do right
02:19 - is i want to be able to update a room
02:21 - so i have to ask myself what information
02:23 - do i need to update a room
02:25 - well i need the room right so i need the
02:27 - code for that room
02:28 - and then i need information that i'm
02:30 - going to be updating now the only two
02:31 - things we can really update
02:33 - is the number of votes required to skip
02:35 - and if the guest can pause or play
02:38 - so that's the only information that we
02:39 - need and well we just need those three
02:41 - pieces of information to be passed
02:43 - to some endpoint right or pass through
02:46 - as the data we can look at it and then
02:47 - we can do whatever we need to with it
02:49 - so let's make a view let's call this
02:51 - update view
02:53 - let's have this inherit from api view
02:55 - and then let's actually define a new
02:57 - method in here that we haven't seen yet
02:58 - which is called patch
03:00 - now patch is kind of another word for
03:02 - update essentially it means you're
03:04 - just modifying or updating something on
03:05 - the server you're not creating something
03:07 - new
03:08 - you're not deleting something now in
03:10 - leave room i used a post request
03:12 - some might argue that this wasn't the
03:14 - right request to use
03:15 - usually what you would do with post or
03:17 - with the post http method
03:19 - is you're actually creating something
03:21 - new on the server and we're just going
03:22 - to leave it here but just keep in mind
03:24 - that when you're updating something
03:25 - usually you use
03:26 - patch and well that's why we're going to
03:27 - use it here so i'm going to say self
03:29 - request format equals none and then
03:33 - inside of here we can start writing our
03:34 - code
03:35 - now since we actually need some
03:36 - information to be passed to this update
03:38 - view
03:39 - it's not like the leave room view where
03:41 - we're not actually taking any
03:42 - information we're simply just doing
03:43 - something when we hit this endpoint
03:45 - we actually need some information so
03:47 - we're going to define a serializer class
03:48 - here
03:49 - so i'm going to say serializer class
03:50 - equals and then we're actually going to
03:52 - go into the serializers file and we're
03:53 - going to make a new serializer that will
03:55 - let us kind of grab the information that
03:57 - we need
03:57 - so like we've done many times here you
03:59 - can see we set up a serializer
04:01 - we say the data is equal to the
04:02 - request.data we check if the serializer
04:04 - is valid
04:05 - and if it is we continue on so let's go
04:08 - to the serializers.pi file
04:09 - and let's set up a serializer that will
04:11 - take in the information that we need
04:13 - which is a code guest can pause and
04:15 - votes to skip
04:17 - this is pretty straightforward i'm just
04:18 - going to copy the create room serializer
04:21 - i'm going to change this to update and
04:24 - then
04:24 - i'm going to go inside of meta here and
04:26 - i'm going to simply add the field code
04:28 - now one thing to note here and this is
04:30 - kind of a nuance i realized this earlier
04:32 - when i was uh
04:34 - what do you call it actually messing
04:35 - around with this code is that since if
04:37 - we have a look at the models.pi file
04:39 - here
04:40 - the code field is unique what that means
04:43 - is that our serializer
04:45 - is actually going to not allow us to
04:47 - have valid data
04:48 - or it's going to say the data that we
04:50 - sent in is invalid
04:52 - if the code that we pass in is not
04:55 - unique
04:55 - so hopefully this makes sense but
04:57 - imagine we have a bunch of models or a
04:58 - bunch of different rooms and they all
05:00 - are that have some code right and we
05:02 - send the same code that
05:04 - already exists on one of our rooms to
05:07 - this serializer we use it in the
05:08 - serializer
05:09 - it's going to say that the information
05:11 - that was passed was invalid
05:12 - now of course we don't want that because
05:14 - we're not trying to create a new room
05:16 - with that code
05:17 - we're trying to update an existing room
05:18 - and well we need the code of that room
05:20 - to update it
05:21 - so pretty much the whole reason i'm
05:23 - saying this is because we just need to
05:24 - make a slight change here
05:25 - and just kind of redefine the code field
05:28 - so that
05:28 - inside of our serializer it doesn't
05:30 - think that we need to pass in a unique
05:32 - code because if we have to pass in a
05:34 - unique code well then everything's just
05:36 - going to be all messed up we can't pass
05:37 - a unique code because the code we're
05:39 - going to be passing
05:40 - will always belong to a room hopefully
05:42 - that's clear but
05:43 - you'll see when i start doing this so
05:44 - i'm going to say code equals serializers
05:47 - dot char field and then inside of here
05:50 - i'm simply going to say
05:51 - validators equals and then an empty list
05:53 - what i've done here
05:54 - is i've pretty much redefined the code
05:56 - field right in the serializer
05:59 - so that i'm not going to be referencing
06:01 - the code field from my model right if we
06:03 - go back to models we can see here
06:04 - that says unique has to be equal to true
06:06 - because again if unique is true
06:08 - it won't let me pass in a code that
06:10 - isn't unique but we want to be able to
06:12 - pass in a code that isn't unique because
06:13 - we need to use that code
06:15 - so anyways we redefine it here and that
06:17 - just means that now code will be
06:18 - referencing this field
06:20 - and that's totally fine that's all we
06:21 - need and now everything will work with
06:23 - this update room serializer
06:24 - so let's go back to views.pi we're going
06:26 - to import the update room serializer so
06:29 - let's go here
06:30 - and say update room serializer from
06:32 - serializers
06:34 - let's go back down to the bottom now and
06:36 - for serializer class we're going to say
06:38 - update room serializer so before we go
06:41 - any further i need to quickly thank the
06:43 - sponsor of this video and the series
06:45 - which is algo
06:46 - expert now i'll go expert is the best
06:48 - platform to use to prepare for your
06:49 - software engineering coding interviews
06:51 - as you know i work at algo expert at the
06:54 - time of recording this video
06:55 - there's over 110 coding interview
06:57 - questions on the platform
06:59 - five of which were ones that i made and
07:01 - i actually taught doing the conceptual
07:02 - overview the code walkthrough and all of
07:04 - that stuff
07:05 - so if you guys are looking to prepare
07:06 - for your software engineering coding
07:07 - interviews check out algo expert from
07:09 - the link in the description and use the
07:11 - discount code tech with tim
07:12 - for a discount on the platform all right
07:14 - so now that we have our serializer class
07:16 - defined
07:17 - let's go inside of the patch method and
07:19 - let's start writing some codes the first
07:20 - thing i'm going to say is serializer
07:22 - is equal to self.serializer class
07:25 - and then inside of here i'm going to say
07:27 - data is equal to request
07:29 - dot data so like we've done previously
07:32 - passing our data to the serializer so
07:34 - that we can check if it's valid
07:35 - so i'm going to say if serializer dot is
07:38 - underscore
07:38 - valid like that and we don't want a
07:41 - hyphen we want an i
07:42 - so let's do that so if the serializer
07:44 - data is valid we'll go ahead and do
07:46 - something but if it is not then we want
07:48 - to return a response
07:49 - looks like my autocomplete was smart
07:51 - enough to actually do that for me
07:52 - and the response that we're going to
07:53 - return is something that we should be
07:55 - quite familiar with at this point
07:56 - i'm just going to say bad request like
07:59 - that we can say
08:01 - invalid data exclamation point or dot
08:04 - dot depends how mean you want to be
08:06 - and then we can say status equals status
08:09 - dot
08:10 - http underscore 400 underscore
08:13 - bad request all right so there we go
08:16 - that is the response if our serializer
08:17 - data is not valid but if it is valid
08:19 - then what we want to do is grab some
08:21 - information
08:22 - from our serializer so the first piece
08:24 - of information that i want is guest can
08:25 - pause so not in capitals but guest
08:27 - underscore can underscore pause is equal
08:30 - to
08:31 - serializer dot i believe it's data
08:35 - dot get and then the first piece of data
08:37 - that we want to get is guest underscore
08:38 - can
08:39 - underscore pause all right now that we
08:42 - have that
08:42 - i'm just going to copy this line and i'm
08:45 - actually going to copy it twice and now
08:47 - we'll fill in the other fields that we
08:48 - want so the next field we want
08:49 - is votes underscore 2 underscore skip
08:52 - we'll put that inside of here as well so
08:54 - votes underscore two
08:55 - underscore skip and then finally we want
08:57 - the room code
08:58 - doesn't matter what order we write these
09:00 - in but we just want to grab this
09:01 - information from
09:02 - our data all right so now that we have
09:04 - that the next thing that we need to do
09:06 - since we're going to be updating a room
09:07 - is we need to find a room
09:09 - that has this same code so what i'm
09:11 - going to do is i'm going to say
09:13 - query set is equal to room
09:16 - dot objects dot filter
09:19 - and we're going to filter with code
09:21 - equal to code
09:22 - so that way we find any room that has
09:25 - this
09:25 - code now we want to make sure that of
09:27 - course we actually did find a room if we
09:29 - didn't find any rooms then that means
09:31 - that hey we can't update this room
09:32 - because it does not exist
09:34 - so i'm going to say if not query set
09:38 - dot exists and i believe i've used len
09:41 - of room results before we really could
09:42 - just use dot exists i think this is
09:44 - actually the proper way to do it
09:46 - keep in mind this is just telling us if
09:48 - we have any results so you would have
09:50 - seen sometimes i'm using len of results
09:51 - greater than zero
09:52 - other times i'm using dot exists that's
09:54 - just my inconsistency
09:56 - i would recommend you use dot exists
09:58 - again for the purpose of this tutorial
09:59 - series i'm not focusing too much on
10:01 - industry standards and all of that
10:03 - anyways i'm just going to return a
10:04 - response here so in the situation where
10:07 - we don't have a query set
10:08 - no rooms existed for that query we will
10:11 - return
10:11 - the response inside of here we can
10:14 - simply say msg for message or we can put
10:16 - whatever else it doesn't really matter
10:18 - and we can say room not found or room
10:21 - doesn't exist
10:22 - whatever you want and then we'll say
10:24 - status equal status dot
10:26 - http underscore i'm going to return a
10:28 - 404 here pretty much saying hey we could
10:30 - not find
10:31 - this room all right so now that we have
10:33 - that uh the next thing that we need to
10:35 - do
10:35 - is this will assume so pretty much if
10:38 - this happens we're gonna
10:39 - exit out of this patch request if we
10:41 - make it past this then we did actually
10:43 - find a valid room
10:44 - so let's store that room we'll say room
10:46 - equals query set at index zero
10:49 - now we need to make sure that the person
10:50 - trying to update this room actually is
10:52 - indeed
10:53 - the owner of this room right so that
10:55 - means we need to get their session
10:56 - key and we need to check it against the
10:58 - host of the room and make sure that the
11:00 - same person who created the room is the
11:01 - person who's trying to update it
11:03 - so i'm going to say user underscore id
11:05 - is equal to self
11:06 - dot request dot session dot session
11:09 - underscore key
11:10 - now since i'm using session in here i
11:12 - want to make sure my code doesn't error
11:13 - out if i don't yet have a valid session
11:15 - so let's go take the code that we've
11:17 - used at the top of the post request on
11:19 - line 58 so
11:20 - create room view let's take that and
11:23 - paste that
11:23 - right above here at the top of our patch
11:25 - request just to make sure that we create
11:27 - a session if we don't already have one
11:29 - all right so now that's good let's go
11:30 - back to user id now we're going to make
11:32 - sure that the user id is equal to the
11:34 - host of the room
11:36 - so to do this i'm going to say if room
11:37 - dot host remember room is what we just
11:39 - grabbed here from the query set
11:41 - is not equal to user id then we will
11:44 - return a response i'm just going to copy
11:46 - this one right here
11:47 - that pretty much tells you hey you can't
11:48 - do that that's not valid you don't own
11:50 - this room so we'll say you
11:52 - are not the host of
11:55 - this room dot and then for the status
11:58 - we're actually going to change this to a
11:59 - 403 which stands for forbidden so pretty
12:02 - much you don't have access to this
12:03 - content
12:04 - all right so http 403 forbidden all
12:07 - right so imagining
12:08 - that all of this is good we get past all
12:10 - of these if statements and all these
12:11 - returns
12:12 - then we are good we can go ahead and
12:14 - update the room so we're going to say
12:15 - room
12:15 - dot guest can pause is equal to guests
12:18 - can pause
12:19 - room dot votes to skip is equal to
12:22 - votes to skip finally we'll say room dot
12:26 - save
12:26 - and then we'll say update underscore
12:28 - fields are equal to
12:30 - and inside of here we'll say guest
12:32 - underscore can underscore
12:34 - pause and then votes
12:37 - underscore two underscore skip all right
12:40 - finally if this is all good we can
12:42 - return a response
12:44 - inside of this response what i'm going
12:46 - to do is say the room
12:48 - serializer we'll take in our room
12:52 - dot data and then we'll say status
12:55 - equals
12:56 - status dot http underscore 200
12:59 - underscore okay to say this is all good
13:02 - now some of you may be looking at this
13:04 - and realizing that this is very similar
13:06 - to the create room api view that we have
13:09 - here
13:09 - in fact you may be saying it's almost
13:11 - identical except we don't create a new
13:13 - room if one doesn't exist
13:15 - so why is it that i made a new view
13:17 - rather than just using the create room
13:19 - view
13:20 - well first of all i think it makes sense
13:21 - to have two separate views to do this
13:23 - and the other reason i'm doing this is
13:25 - just because in the future we may
13:26 - potentially want to have a situation
13:28 - where some users could say have multiple
13:30 - rooms
13:31 - or maybe we're in a situation where for
13:33 - some reason the database is storing
13:35 - multiple rooms for the same user
13:37 - well it would make sense for us to
13:38 - specify which room we want to update
13:40 - so with this method here we're not
13:42 - limiting ourselves to the future because
13:44 - we can update
13:45 - any room right and say in the future too
13:47 - maybe we want to allow the users to make
13:49 - someone like an
13:50 - admin in their room well then here we
13:52 - can simply uh
13:53 - change this code just a very slight bit
13:55 - instead of saying if room.host does not
13:56 - equal user id
13:58 - we can say if user id is not in
14:00 - authorized users right something like
14:01 - that and allow other people to update
14:03 - this room
14:04 - because if we didn't do that and we just
14:06 - use the create room here
14:07 - we'd be very limited in what we're able
14:09 - to do because we would either update an
14:11 - existing room
14:12 - or we would be creating a brand new one
14:13 - and we don't want to create a brand new
14:15 - one if we're just sending an
14:16 - update request right so that's kind of
14:18 - my rationale behind doing a
14:19 - separate api point here or endpoint
14:22 - whatever you want to call it
14:24 - i think it just makes more sense and for
14:26 - the future if we ever want to change
14:27 - something it's nice to have a separate
14:29 - endpoint that we're sending
14:30 - requests to anyways now we're going to
14:32 - go ahead and actually set this up with a
14:34 - url so i went to urls.pi
14:36 - inside of here i'm going to say update
14:38 - underscore room or not underscore sorry
14:40 - hyphen
14:41 - and then we will import this so update
14:44 - room and then here we will say update
14:48 - room dot as view now let me make sure i
14:51 - called the update room
14:52 - uh i call it update view oops we want to
14:54 - call this update room i'm sure you guys
14:56 - probably noticed that and let's make
14:58 - sure we named this right
14:59 - okay update room all right we are all
15:02 - good the back end
15:03 - is now done all right so now that the
15:05 - back end is finished let's go to room
15:07 - dot js and pretty much what i want to do
15:09 - now is add a settings button to this
15:11 - user interface
15:12 - and allow it or allow the user if
15:14 - they're a host and only if they're hosts
15:16 - we're going to show them the settings
15:17 - button
15:17 - when they press that send settings
15:19 - button we're going to render
15:21 - the settings page right which is really
15:23 - going to be a reuse of this create
15:25 - room page because we want it to look the
15:27 - exact same with a few minor tweaks
15:29 - so we're going to have to kind of rework
15:30 - this component to make sure that it's
15:32 - able to take in some information
15:34 - and modify how it looks based on that
15:36 - information anyways we'll get started in
15:38 - the room page though
15:39 - i think it makes most sense to do that
15:40 - so the first thing that we need to do is
15:42 - kind of figure out
15:43 - how are we going to like you know show
15:45 - this settings page are we going to go to
15:47 - a new page we're going to go to slash
15:48 - settings
15:48 - or do we want to just have it kind of
15:50 - show up on the same window
15:52 - so what i mean by that is if we go to
15:54 - create a room
15:56 - make a new page here we can have it so
15:58 - the settings appears on this route
16:00 - so on room slash and then this or we can
16:03 - make it go to like room
16:05 - slash whatever the room code is and then
16:07 - a settings url
16:08 - now you can do whatever you want you can
16:10 - make a new route or a route if that's
16:12 - easier for you
16:13 - but for me i'm just going to make it so
16:14 - that we change what this page looks like
16:17 - if we press the settings button
16:18 - so rather than redirecting us to an
16:20 - entirely new page this component will
16:22 - just
16:22 - change how it looks so it shows the
16:25 - settings page
16:26 - and the way we'll do that is we'll store
16:27 - some information in our state which will
16:29 - pretty much tell us hey are we looking
16:30 - at the settings page or are we looking
16:32 - at the actual room page
16:34 - then based on what the information in
16:35 - the state is so whether you know
16:37 - settings is being shown or not we either
16:39 - show the settings or we show
16:40 - this page right here anyways that's kind
16:43 - of what i'm trying to get at just giving
16:44 - you guys my thought process for how
16:46 - we're going to be making this
16:47 - but let's get started and actually go to
16:49 - the state and modify this slightly so
16:51 - inside of room we have votes to skip
16:53 - guest can pause and is host i want to
16:55 - add one more piece of information
16:57 - and i want to call this one show
16:58 - settings now by default we're going to
17:00 - make this equal to false
17:02 - and we'll modify this right and make it
17:03 - equal to true when we want to
17:05 - actually show the settings page so let's
17:07 - actually make a method right now
17:09 - let's call this one update show
17:12 - settings like that and inside of here
17:15 - we'll just take a value
17:16 - and all this is going to do is simply
17:18 - modify the state to be equal to this
17:20 - value so we'll say this
17:21 - dot set state and then inside of here
17:24 - we'll say
17:24 - show settings and this will be equal to
17:26 - value so of course we're assuming that
17:28 - value is going to be true or false so
17:30 - we'll simply modify show settings to
17:32 - whatever value is
17:33 - this will just make it a bit easier for
17:34 - us later on but we do need to bind this
17:36 - method to
17:37 - this keyword so let's go up here and do
17:39 - that we'll say this
17:41 - dot update show settings
17:44 - oops update show settings equals this
17:48 - dot update show settings dot bind to the
17:51 - this
17:52 - keyword all right so now we need a way
17:55 - or we need a button that's going to be
17:56 - like the settings button so let's
17:58 - actually code that out
17:59 - but i'm going to do something strange
18:00 - i'm going to make a method that's going
18:02 - to return
18:02 - the html to render this button so i'm
18:05 - going to say
18:06 - render settings
18:09 - button like that now the reason i'm
18:12 - making a method here is because we only
18:14 - want to show the settings button
18:15 - if the user is a host so rather than me
18:18 - hard coding it right into the render
18:20 - function here
18:21 - i'll add some logic in the render
18:22 - function that will only call
18:24 - this function to show the settings
18:26 - button if we are
18:28 - the host so it just makes it a little
18:29 - bit cleaner and kind of organizes the
18:31 - code a bit
18:31 - we could do this all right here in
18:33 - render but i just like to kind of spread
18:35 - things out and make it easier to read
18:36 - so inside of here what i'm going to do
18:38 - is i'm going to return and we're going
18:39 - to put two parentheses and now we're
18:41 - going to code out exactly what we want
18:42 - to return
18:43 - which is simply just going to be a grid
18:44 - item that contains a button
18:46 - so inside of here i'm going to say grid
18:48 - i'm going to say item
18:50 - xs is going to be equal to 12. a line is
18:53 - going to be equal to
18:55 - center like that and then close the grid
18:58 - okay
18:59 - now inside of the grid what we want to
19:01 - do is add a button soul state button
19:03 - we'll say the variant is equal to
19:06 - contained like all the other ones we've
19:08 - been using we'll say the color
19:11 - is equal to primary and we'll say the
19:14 - on click is equal to and what i'm
19:17 - actually going to do
19:18 - is i'm going to use an arrow function to
19:20 - call this
19:22 - dot update show settings with the value
19:24 - of true
19:25 - because what's going to happen here is
19:26 - when we press this button we're going to
19:28 - use this arrow function
19:29 - we're then going to call this dot update
19:31 - show settings pass the value of true
19:33 - that will modify the state so that show
19:35 - settings is equal to true
19:36 - and then down here in the render we'll
19:38 - show the settings when
19:40 - show settings is equal to true so
19:41 - hopefully that's clear but let's end
19:43 - that button
19:44 - there i think that's all we are sorry
19:46 - now let's end the button here
19:48 - and then we'll put the text that we want
19:49 - to show on the button obviously
19:51 - which in this case is just going to be
19:52 - settings okay so i think
19:54 - that's actually all i need for this so
19:58 - now let's actually call
19:59 - this method so i'm going to go inside of
20:01 - here i'm going to go actually right
20:03 - above
20:03 - leave room because i want the settings
20:05 - button to be above leave room you could
20:07 - put it below if you want but for me i
20:08 - want it above
20:09 - i'm going to put in two squiggly
20:11 - brackets like this
20:13 - and i'm going to say if the user is a
20:16 - host we'll render those buttons
20:17 - otherwise we just won't do
20:18 - anything so we'll say i guess this is
20:21 - going to be this
20:22 - dot state dot is host and then we'll say
20:26 - question mark so if it is we'll say this
20:28 - dot render settings button and we'll
20:30 - call that
20:31 - method otherwise we'll just put null
20:34 - which means we're not going to do
20:35 - anything
20:35 - so this is pretty much how conditionally
20:37 - we can show this settings button
20:39 - the user is not a host we won't show
20:40 - this settings button now keep in mind
20:42 - that a user could still without
20:45 - seeing the settings button be able to
20:47 - access or kind of like you know hack our
20:48 - front end
20:49 - so that they can modify the settings or
20:51 - at least they can see that page
20:53 - but if they are not the host of the uh
20:56 - the room sorry then our view right
20:58 - update room since we kind of added these
21:00 - security features in here to make sure
21:01 - they actually were the host of the room
21:03 - will not let them update it so even if
21:05 - somehow a user is able to send a patch
21:07 - request to update room
21:09 - they're not going to be able to actually
21:10 - update the room unless they're the host
21:12 - because of the way that we implemented
21:14 - that view so that's something to keep in
21:15 - mind you always want your backend to be
21:17 - really secure and to kind of consider
21:18 - the fact that
21:19 - people are going to try to hack your
21:21 - website and send requests and then mess
21:22 - with things right
21:24 - so that's why we're doing this anyways
21:25 - this dot state dot is host and now we
21:27 - should only see the settings button if
21:29 - we're the host
21:30 - so let's actually refresh this here i'm
21:32 - going to empty cache and hard reload
21:34 - and now you can see the settings button
21:36 - shows up when i press it nothing's
21:37 - happening obviously because we haven't
21:39 - really done anything for
21:40 - when settings is shown but now we have
21:42 - the settings button
21:43 - now if you were able to join a room say
21:45 - we were running this on our local
21:46 - network or something and you joined this
21:48 - from your phone
21:49 - you would not see the settings button if
21:50 - you weren't the host
21:52 - all right so let's continue and now
21:54 - let's actually
21:55 - show the settings so now we need another
21:57 - function or another method
21:58 - that will actually render what the
22:00 - settings page will look like for us
22:02 - so i'm going to call this one render
22:03 - settings like that
22:06 - and then inside of here we'll start
22:08 - writing all of i guess the jsx or html
22:10 - that we want to show so i'm going to
22:12 - start by making a grid that's actually
22:13 - going to be a container
22:15 - keep in mind that what i'm going to do
22:16 - for settings is going to be completely
22:18 - different than all of the stuff
22:20 - right here so this will be kind of its
22:22 - own page and what we do for settings
22:23 - will be again its own page
22:25 - so i can't assume that this is going to
22:27 - be called from within any of this that's
22:29 - why i'm setting up another grid
22:30 - container and all of that
22:32 - so i'm going to say container i'm going
22:34 - to say spacing equals 1
22:36 - i'm going to close the grid off like
22:37 - that now inside of the grid
22:40 - i'm going to put some grid items so i'm
22:42 - going to say grid
22:43 - item xs equals 12 like that
22:47 - i'm going to say line equals center i'm
22:50 - going to close off that grid item we're
22:52 - going to just copy this
22:54 - and put one more here and then inside of
22:56 - my first grid item
22:57 - what i'm actually gonna put is a create
23:00 - room page component
23:01 - now we really should change the name of
23:03 - this i can't think of a good name for it
23:05 - like a room properties page or something
23:07 - like that
23:08 - because this will be a multi-purpose
23:09 - component it's not just going to be used
23:11 - to create a room it will also be used to
23:13 - update a room and i'll show you how we
23:14 - modify this component in the next video
23:16 - but anyways we're going to be using this
23:17 - component what we're going to do is pass
23:19 - through some props to it
23:20 - and based on the props it gets it's
23:22 - going to change its appearance and kind
23:23 - of functionality as well
23:25 - anyways we want to use create room page
23:27 - so what i'm going to do is go to the top
23:28 - of my file here
23:29 - i'm going to import it so i'm going to
23:31 - say import
23:33 - create room page from
23:36 - and then we'll do dot slash create room
23:39 - page
23:39 - like that all right so now we can use
23:41 - that component so inside of here
23:43 - in render settings we're going to say
23:46 - create
23:46 - room page we're going to pass it a bunch
23:49 - of props so to pass props i can simply
23:51 - write the prop that i want to pass in
23:52 - this case i'm going to say update
23:54 - i'm going to pass a value of true
23:56 - obviously this
23:57 - hopefully should make sense but i'm
23:58 - trying to tell the create room page that
24:00 - hey you're going to be in
24:01 - update mode not in create mode right so
24:03 - that's why i'm passing this prop
24:04 - called update the next one i'm going to
24:06 - pass is votes to skip
24:08 - i'm going to say votes to skip is equal
24:10 - to and then this
24:11 - dot state dot votes to skip the reason
24:14 - i'm passing this is because by default i
24:16 - want the form or the create room page
24:18 - to have whatever this room's current
24:21 - votes to skips is
24:22 - as you know filling in that field that
24:25 - is what the default value should be so
24:26 - rather than showing two to start which
24:28 - we always usually would show
24:30 - we're going to show instead whatever is
24:31 - passed to us as votes to skip
24:34 - again this will be more clear as we
24:35 - start going through it but just trying
24:37 - to explain as we go now i'm going to say
24:38 - guest can pause
24:39 - this is going to be equal to pretty much
24:41 - the same thing we're going to say
24:43 - this.state.guest can pause and again
24:45 - this is so that we can show the most
24:47 - up-to-date information
24:48 - and then we're also going to pass the
24:50 - room code so we're going to say the room
24:52 - code is equal to
24:53 - this dot room code and then we will pass
24:57 - one more thing and actually i'll write
25:00 - it now and i'll talk about it later
25:01 - but this is going to be the update
25:03 - callback and that's going to be equal to
25:06 - something else that we won't fill in
25:08 - this minute but pretty much i just want
25:10 - this create room page to call a function
25:12 - whenever it actually does
25:14 - update the room you can probably guess
25:16 - what that function is going to be but it
25:17 - does need to call some function whatever
25:19 - it updates the room
25:20 - so that the parent component which is us
25:22 - right this room page
25:24 - can actually kind of update and get that
25:26 - new information so now that we have that
25:27 - and again we'll talk about this more in
25:29 - the next video let's make a button here
25:31 - so when i'm on the settings page
25:33 - i need a way to go back to this original
25:36 - page
25:36 - so if we look at create room page on
25:39 - create room page we do have a back
25:41 - button
25:42 - right but this back button redirects us
25:44 - to the home page
25:45 - of course i don't want to be redirected
25:47 - to the home page i want to be redirected
25:49 - back to just this regular room page
25:51 - but since we're not actually changing
25:53 - our url
25:55 - we're not going to like slash settings
25:57 - there's no way for me to
25:58 - redirect using a link or using a route
26:01 - to the right page
26:02 - so what i actually need to do here is
26:04 - make a button i'm going to call this
26:05 - button
26:06 - close and what this button will do is
26:08 - close this settings page so it won't
26:10 - actually redirect us anywhere
26:12 - but it will change the state so it will
26:14 - change show settings to be equal to
26:16 - false
26:16 - and then that way what we can do is we
26:19 - can actually remove
26:20 - showing the settings page on this screen
26:23 - so it's gonna be kind of confusing but
26:24 - we'll have this create room page
26:26 - component we'll then have a button below
26:28 - that component that says close
26:29 - when we press close it will pretty much
26:31 - just delete this component off the
26:32 - screen that's kind of an easy way to
26:34 - think of it
26:34 - but anyways let's just take one of the
26:36 - buttons here i'll just copy it to make
26:38 - this a little bit faster
26:40 - i will leave the color actually not as
26:42 - primary but as
26:43 - secondary like that on click now you can
26:47 - guess what this is going to change to
26:48 - we're just going to change this value to
26:50 - false because we want to stop showing
26:52 - the settings so we'll change the state
26:53 - to stop show settings
26:55 - and we'll just call this one close i
26:57 - think that's all we need actually for
26:58 - the button
27:00 - so let's do some testing in one second
27:02 - but
27:03 - now what i need to do is actually use
27:05 - render settings right
27:06 - so i'm going to go into my render method
27:08 - now and you can see that we're rendering
27:10 - all this main content
27:12 - but i only want to render this main
27:13 - content in the situation where we're not
27:15 - showing the settings page
27:17 - so i'm going to go up here i'm going to
27:18 - write an if statement before my return
27:20 - i'm going to say if this dot state dot
27:24 - show settings if that is the case then
27:26 - return
27:27 - this dot render settings okay otherwise
27:31 - we can return that we don't even need an
27:33 - else statement because of the way that
27:34 - the returns work
27:35 - we can simply have this so now whenever
27:38 - we have
27:38 - show settings that state being true we
27:41 - will actually just return
27:42 - the render settings or sorry that's this
27:44 - one right here
27:45 - otherwise we will simply just show this
27:49 - now since i'm using this keyword inside
27:52 - of the render setting button
27:53 - and render settings i need to bind it to
27:56 - this keyword
27:57 - so let's do that quickly let's go to the
27:58 - constructor let's say this
28:01 - dot render settings button is equal to
28:04 - this dot render settings button dot bind
28:08 - to this keyword and then we'll do the
28:10 - same thing here we'll say this dot
28:11 - render settings i think that's all we
28:13 - called it
28:14 - is equal to this dot render settings
28:18 - dot bind to this keyword
28:21 - all right so now that we have that let's
28:22 - have a look at our website let's refresh
28:25 - and we got an error what do we have here
28:28 - something
28:28 - looks pretty big okay uh let me have a
28:31 - quick look at this and i will be
28:32 - right back all right so it turns out the
28:34 - error was that i had
28:35 - update callback without anything inside
28:37 - of it and apparently you can't do that
28:39 - so i just put nola inside up here or we
28:41 - really we can just put an arrow function
28:42 - for now
28:44 - just have something valid inside of
28:45 - there again we'll change this but for
28:47 - now let's just have update callback
28:48 - equal to a blank arrow function
28:50 - all right so now that we changed that on
28:52 - the line 65 let's go back here
28:54 - let's refresh let's press settings and
28:56 - notice we get an error
28:58 - let me have a look and i will be back
29:01 - all right so another silly error inside
29:03 - of render settings actually did not
29:05 - return
29:06 - this code which of course is going to
29:07 - cause an issue because it means we're
29:08 - not rendering anything
29:10 - but yeah we just need to return all of
29:12 - this so that way when we go here and we
29:15 - return this.render settings it actually
29:17 - returns all of this code rather than
29:18 - returning nothing
29:20 - okay so that was the issue just need to
29:21 - add the return statement in render
29:23 - settings
29:23 - so let's refresh here uh now let's press
29:26 - on settings
29:26 - and notice that it shows us create a
29:28 - room we have the back button
29:29 - the close button which we added and then
29:31 - everything else that was just usually on
29:33 - create a room
29:34 - now if i press close notice it brings me
29:36 - back to this page and we don't change
29:38 - the url
29:38 - so settings close settings close we're
29:42 - on the same page
29:42 - and that's how we can kind of toggle
29:44 - showing two different pages
29:45 - now notice though if i go to settings
29:47 - and i press back
29:49 - it redirects me you saw the redirect it
29:51 - redirected me the home page and the home
29:53 - page redirect me back to this page
29:55 - now that's fine we we could use the back
29:57 - button but what we're going to do
29:59 - is we don't want to have all these
30:00 - redirects happening if we don't need
30:01 - them
30:02 - is we're going to modify let's go back
30:04 - to settings this page so first of all it
30:06 - says
30:06 - update room instead of saying create a
30:08 - room it says update room
30:10 - and then instead of having the back
30:11 - button it just doesn't have any button
30:12 - there at all
30:13 - and it kind of gets replaced with the
30:14 - close button that we added ourself
30:16 - from the other component so now we press
30:18 - close all is good and well that's where
30:20 - i'm going to conclude
30:21 - this video so hope you guys enjoyed if
30:23 - you did make sure to leave a like
30:24 - subscribe to the channel and i will see
30:26 - you in the next react and django
30:29 - [Music]
30:34 - tutorial
30:36 - you

Cleaned transcript:

hello everybody and welcome back to another django and react tutorial video in this video what we're going to be doing is actually building out the settings page or the settings tab on our room page so i don't know if i've discussed this previously but right now we just have this page that shows us information about the room and we can leave the room but ideally if the user is the host of the room they should be able to modify these settings they should be able to change the number of votes they should be able to change if the guests can pause and i guess that's really all the stuff that they're going to be modifying but either way we want to have like a nice settings page for them so that they can simply press settings and then modify the settings of the room so what we're going to do in this video and probably the next video as well is build out the ui for that settings page in fact we're actually going to use the same user interface or the same component that we've already used and i'm going to show you how we can modify them by messing with this component's props now what i mean by that is right now if i go to create a room this is a form right that allows me to pick the number of votes required to skip and play or pause right and then we have some nice information here we have create a room we have back whatever all this stuff but this component is very similar to the component that we would want to build out for our settings page right say we wanted to have a component that was specific for settings well it would look almost identical to this except the create a room button would be changed to update room or yeah i guess update room or change room and then create a room up here would just be settings right so what we're actually going to do is modify the existing create a room component and we're going to change it such that it's able to kind of dynamically modify itself based on information that we give to it so that's what we'll be doing we're of course also going to have to build another endpoint on the back end or in the api folder that's going to allow us to actually update the existing room so for that what we're going to have to do is make sure that the person trying to update this room actually is the host of the room and if they are we will let them modify it now since we usually start out by doing all the front end work and all the ui design and all of that let's switch it up and let's actually do the back end first this time we'll build out the view that we need or the api endpoint and then we'll get in and do the front end so let's go to views.pi and essentially what i want to do right is i want to be able to update a room so i have to ask myself what information do i need to update a room well i need the room right so i need the code for that room and then i need information that i'm going to be updating now the only two things we can really update is the number of votes required to skip and if the guest can pause or play so that's the only information that we need and well we just need those three pieces of information to be passed to some endpoint right or pass through as the data we can look at it and then we can do whatever we need to with it so let's make a view let's call this update view let's have this inherit from api view and then let's actually define a new method in here that we haven't seen yet which is called patch now patch is kind of another word for update essentially it means you're just modifying or updating something on the server you're not creating something new you're not deleting something now in leave room i used a post request some might argue that this wasn't the right request to use usually what you would do with post or with the post http method is you're actually creating something new on the server and we're just going to leave it here but just keep in mind that when you're updating something usually you use patch and well that's why we're going to use it here so i'm going to say self request format equals none and then inside of here we can start writing our code now since we actually need some information to be passed to this update view it's not like the leave room view where we're not actually taking any information we're simply just doing something when we hit this endpoint we actually need some information so we're going to define a serializer class here so i'm going to say serializer class equals and then we're actually going to go into the serializers file and we're going to make a new serializer that will let us kind of grab the information that we need so like we've done many times here you can see we set up a serializer we say the data is equal to the request.data we check if the serializer is valid and if it is we continue on so let's go to the serializers.pi file and let's set up a serializer that will take in the information that we need which is a code guest can pause and votes to skip this is pretty straightforward i'm just going to copy the create room serializer i'm going to change this to update and then i'm going to go inside of meta here and i'm going to simply add the field code now one thing to note here and this is kind of a nuance i realized this earlier when i was uh what do you call it actually messing around with this code is that since if we have a look at the models.pi file here the code field is unique what that means is that our serializer is actually going to not allow us to have valid data or it's going to say the data that we sent in is invalid if the code that we pass in is not unique so hopefully this makes sense but imagine we have a bunch of models or a bunch of different rooms and they all are that have some code right and we send the same code that already exists on one of our rooms to this serializer we use it in the serializer it's going to say that the information that was passed was invalid now of course we don't want that because we're not trying to create a new room with that code we're trying to update an existing room and well we need the code of that room to update it so pretty much the whole reason i'm saying this is because we just need to make a slight change here and just kind of redefine the code field so that inside of our serializer it doesn't think that we need to pass in a unique code because if we have to pass in a unique code well then everything's just going to be all messed up we can't pass a unique code because the code we're going to be passing will always belong to a room hopefully that's clear but you'll see when i start doing this so i'm going to say code equals serializers dot char field and then inside of here i'm simply going to say validators equals and then an empty list what i've done here is i've pretty much redefined the code field right in the serializer so that i'm not going to be referencing the code field from my model right if we go back to models we can see here that says unique has to be equal to true because again if unique is true it won't let me pass in a code that isn't unique but we want to be able to pass in a code that isn't unique because we need to use that code so anyways we redefine it here and that just means that now code will be referencing this field and that's totally fine that's all we need and now everything will work with this update room serializer so let's go back to views.pi we're going to import the update room serializer so let's go here and say update room serializer from serializers let's go back down to the bottom now and for serializer class we're going to say update room serializer so before we go any further i need to quickly thank the sponsor of this video and the series which is algo expert now i'll go expert is the best platform to use to prepare for your software engineering coding interviews as you know i work at algo expert at the time of recording this video there's over 110 coding interview questions on the platform five of which were ones that i made and i actually taught doing the conceptual overview the code walkthrough and all of that stuff so if you guys are looking to prepare for your software engineering coding interviews check out algo expert from the link in the description and use the discount code tech with tim for a discount on the platform all right so now that we have our serializer class defined let's go inside of the patch method and let's start writing some codes the first thing i'm going to say is serializer is equal to self.serializer class and then inside of here i'm going to say data is equal to request dot data so like we've done previously passing our data to the serializer so that we can check if it's valid so i'm going to say if serializer dot is underscore valid like that and we don't want a hyphen we want an i so let's do that so if the serializer data is valid we'll go ahead and do something but if it is not then we want to return a response looks like my autocomplete was smart enough to actually do that for me and the response that we're going to return is something that we should be quite familiar with at this point i'm just going to say bad request like that we can say invalid data exclamation point or dot dot depends how mean you want to be and then we can say status equals status dot http underscore 400 underscore bad request all right so there we go that is the response if our serializer data is not valid but if it is valid then what we want to do is grab some information from our serializer so the first piece of information that i want is guest can pause so not in capitals but guest underscore can underscore pause is equal to serializer dot i believe it's data dot get and then the first piece of data that we want to get is guest underscore can underscore pause all right now that we have that i'm just going to copy this line and i'm actually going to copy it twice and now we'll fill in the other fields that we want so the next field we want is votes underscore 2 underscore skip we'll put that inside of here as well so votes underscore two underscore skip and then finally we want the room code doesn't matter what order we write these in but we just want to grab this information from our data all right so now that we have that the next thing that we need to do since we're going to be updating a room is we need to find a room that has this same code so what i'm going to do is i'm going to say query set is equal to room dot objects dot filter and we're going to filter with code equal to code so that way we find any room that has this code now we want to make sure that of course we actually did find a room if we didn't find any rooms then that means that hey we can't update this room because it does not exist so i'm going to say if not query set dot exists and i believe i've used len of room results before we really could just use dot exists i think this is actually the proper way to do it keep in mind this is just telling us if we have any results so you would have seen sometimes i'm using len of results greater than zero other times i'm using dot exists that's just my inconsistency i would recommend you use dot exists again for the purpose of this tutorial series i'm not focusing too much on industry standards and all of that anyways i'm just going to return a response here so in the situation where we don't have a query set no rooms existed for that query we will return the response inside of here we can simply say msg for message or we can put whatever else it doesn't really matter and we can say room not found or room doesn't exist whatever you want and then we'll say status equal status dot http underscore i'm going to return a 404 here pretty much saying hey we could not find this room all right so now that we have that uh the next thing that we need to do is this will assume so pretty much if this happens we're gonna exit out of this patch request if we make it past this then we did actually find a valid room so let's store that room we'll say room equals query set at index zero now we need to make sure that the person trying to update this room actually is indeed the owner of this room right so that means we need to get their session key and we need to check it against the host of the room and make sure that the same person who created the room is the person who's trying to update it so i'm going to say user underscore id is equal to self dot request dot session dot session underscore key now since i'm using session in here i want to make sure my code doesn't error out if i don't yet have a valid session so let's go take the code that we've used at the top of the post request on line 58 so create room view let's take that and paste that right above here at the top of our patch request just to make sure that we create a session if we don't already have one all right so now that's good let's go back to user id now we're going to make sure that the user id is equal to the host of the room so to do this i'm going to say if room dot host remember room is what we just grabbed here from the query set is not equal to user id then we will return a response i'm just going to copy this one right here that pretty much tells you hey you can't do that that's not valid you don't own this room so we'll say you are not the host of this room dot and then for the status we're actually going to change this to a 403 which stands for forbidden so pretty much you don't have access to this content all right so http 403 forbidden all right so imagining that all of this is good we get past all of these if statements and all these returns then we are good we can go ahead and update the room so we're going to say room dot guest can pause is equal to guests can pause room dot votes to skip is equal to votes to skip finally we'll say room dot save and then we'll say update underscore fields are equal to and inside of here we'll say guest underscore can underscore pause and then votes underscore two underscore skip all right finally if this is all good we can return a response inside of this response what i'm going to do is say the room serializer we'll take in our room dot data and then we'll say status equals status dot http underscore 200 underscore okay to say this is all good now some of you may be looking at this and realizing that this is very similar to the create room api view that we have here in fact you may be saying it's almost identical except we don't create a new room if one doesn't exist so why is it that i made a new view rather than just using the create room view well first of all i think it makes sense to have two separate views to do this and the other reason i'm doing this is just because in the future we may potentially want to have a situation where some users could say have multiple rooms or maybe we're in a situation where for some reason the database is storing multiple rooms for the same user well it would make sense for us to specify which room we want to update so with this method here we're not limiting ourselves to the future because we can update any room right and say in the future too maybe we want to allow the users to make someone like an admin in their room well then here we can simply uh change this code just a very slight bit instead of saying if room.host does not equal user id we can say if user id is not in authorized users right something like that and allow other people to update this room because if we didn't do that and we just use the create room here we'd be very limited in what we're able to do because we would either update an existing room or we would be creating a brand new one and we don't want to create a brand new one if we're just sending an update request right so that's kind of my rationale behind doing a separate api point here or endpoint whatever you want to call it i think it just makes more sense and for the future if we ever want to change something it's nice to have a separate endpoint that we're sending requests to anyways now we're going to go ahead and actually set this up with a url so i went to urls.pi inside of here i'm going to say update underscore room or not underscore sorry hyphen and then we will import this so update room and then here we will say update room dot as view now let me make sure i called the update room uh i call it update view oops we want to call this update room i'm sure you guys probably noticed that and let's make sure we named this right okay update room all right we are all good the back end is now done all right so now that the back end is finished let's go to room dot js and pretty much what i want to do now is add a settings button to this user interface and allow it or allow the user if they're a host and only if they're hosts we're going to show them the settings button when they press that send settings button we're going to render the settings page right which is really going to be a reuse of this create room page because we want it to look the exact same with a few minor tweaks so we're going to have to kind of rework this component to make sure that it's able to take in some information and modify how it looks based on that information anyways we'll get started in the room page though i think it makes most sense to do that so the first thing that we need to do is kind of figure out how are we going to like you know show this settings page are we going to go to a new page we're going to go to slash settings or do we want to just have it kind of show up on the same window so what i mean by that is if we go to create a room make a new page here we can have it so the settings appears on this route so on room slash and then this or we can make it go to like room slash whatever the room code is and then a settings url now you can do whatever you want you can make a new route or a route if that's easier for you but for me i'm just going to make it so that we change what this page looks like if we press the settings button so rather than redirecting us to an entirely new page this component will just change how it looks so it shows the settings page and the way we'll do that is we'll store some information in our state which will pretty much tell us hey are we looking at the settings page or are we looking at the actual room page then based on what the information in the state is so whether you know settings is being shown or not we either show the settings or we show this page right here anyways that's kind of what i'm trying to get at just giving you guys my thought process for how we're going to be making this but let's get started and actually go to the state and modify this slightly so inside of room we have votes to skip guest can pause and is host i want to add one more piece of information and i want to call this one show settings now by default we're going to make this equal to false and we'll modify this right and make it equal to true when we want to actually show the settings page so let's actually make a method right now let's call this one update show settings like that and inside of here we'll just take a value and all this is going to do is simply modify the state to be equal to this value so we'll say this dot set state and then inside of here we'll say show settings and this will be equal to value so of course we're assuming that value is going to be true or false so we'll simply modify show settings to whatever value is this will just make it a bit easier for us later on but we do need to bind this method to this keyword so let's go up here and do that we'll say this dot update show settings oops update show settings equals this dot update show settings dot bind to the this keyword all right so now we need a way or we need a button that's going to be like the settings button so let's actually code that out but i'm going to do something strange i'm going to make a method that's going to return the html to render this button so i'm going to say render settings button like that now the reason i'm making a method here is because we only want to show the settings button if the user is a host so rather than me hard coding it right into the render function here i'll add some logic in the render function that will only call this function to show the settings button if we are the host so it just makes it a little bit cleaner and kind of organizes the code a bit we could do this all right here in render but i just like to kind of spread things out and make it easier to read so inside of here what i'm going to do is i'm going to return and we're going to put two parentheses and now we're going to code out exactly what we want to return which is simply just going to be a grid item that contains a button so inside of here i'm going to say grid i'm going to say item xs is going to be equal to 12. a line is going to be equal to center like that and then close the grid okay now inside of the grid what we want to do is add a button soul state button we'll say the variant is equal to contained like all the other ones we've been using we'll say the color is equal to primary and we'll say the on click is equal to and what i'm actually going to do is i'm going to use an arrow function to call this dot update show settings with the value of true because what's going to happen here is when we press this button we're going to use this arrow function we're then going to call this dot update show settings pass the value of true that will modify the state so that show settings is equal to true and then down here in the render we'll show the settings when show settings is equal to true so hopefully that's clear but let's end that button there i think that's all we are sorry now let's end the button here and then we'll put the text that we want to show on the button obviously which in this case is just going to be settings okay so i think that's actually all i need for this so now let's actually call this method so i'm going to go inside of here i'm going to go actually right above leave room because i want the settings button to be above leave room you could put it below if you want but for me i want it above i'm going to put in two squiggly brackets like this and i'm going to say if the user is a host we'll render those buttons otherwise we just won't do anything so we'll say i guess this is going to be this dot state dot is host and then we'll say question mark so if it is we'll say this dot render settings button and we'll call that method otherwise we'll just put null which means we're not going to do anything so this is pretty much how conditionally we can show this settings button the user is not a host we won't show this settings button now keep in mind that a user could still without seeing the settings button be able to access or kind of like you know hack our front end so that they can modify the settings or at least they can see that page but if they are not the host of the uh the room sorry then our view right update room since we kind of added these security features in here to make sure they actually were the host of the room will not let them update it so even if somehow a user is able to send a patch request to update room they're not going to be able to actually update the room unless they're the host because of the way that we implemented that view so that's something to keep in mind you always want your backend to be really secure and to kind of consider the fact that people are going to try to hack your website and send requests and then mess with things right so that's why we're doing this anyways this dot state dot is host and now we should only see the settings button if we're the host so let's actually refresh this here i'm going to empty cache and hard reload and now you can see the settings button shows up when i press it nothing's happening obviously because we haven't really done anything for when settings is shown but now we have the settings button now if you were able to join a room say we were running this on our local network or something and you joined this from your phone you would not see the settings button if you weren't the host all right so let's continue and now let's actually show the settings so now we need another function or another method that will actually render what the settings page will look like for us so i'm going to call this one render settings like that and then inside of here we'll start writing all of i guess the jsx or html that we want to show so i'm going to start by making a grid that's actually going to be a container keep in mind that what i'm going to do for settings is going to be completely different than all of the stuff right here so this will be kind of its own page and what we do for settings will be again its own page so i can't assume that this is going to be called from within any of this that's why i'm setting up another grid container and all of that so i'm going to say container i'm going to say spacing equals 1 i'm going to close the grid off like that now inside of the grid i'm going to put some grid items so i'm going to say grid item xs equals 12 like that i'm going to say line equals center i'm going to close off that grid item we're going to just copy this and put one more here and then inside of my first grid item what i'm actually gonna put is a create room page component now we really should change the name of this i can't think of a good name for it like a room properties page or something like that because this will be a multipurpose component it's not just going to be used to create a room it will also be used to update a room and i'll show you how we modify this component in the next video but anyways we're going to be using this component what we're going to do is pass through some props to it and based on the props it gets it's going to change its appearance and kind of functionality as well anyways we want to use create room page so what i'm going to do is go to the top of my file here i'm going to import it so i'm going to say import create room page from and then we'll do dot slash create room page like that all right so now we can use that component so inside of here in render settings we're going to say create room page we're going to pass it a bunch of props so to pass props i can simply write the prop that i want to pass in this case i'm going to say update i'm going to pass a value of true obviously this hopefully should make sense but i'm trying to tell the create room page that hey you're going to be in update mode not in create mode right so that's why i'm passing this prop called update the next one i'm going to pass is votes to skip i'm going to say votes to skip is equal to and then this dot state dot votes to skip the reason i'm passing this is because by default i want the form or the create room page to have whatever this room's current votes to skips is as you know filling in that field that is what the default value should be so rather than showing two to start which we always usually would show we're going to show instead whatever is passed to us as votes to skip again this will be more clear as we start going through it but just trying to explain as we go now i'm going to say guest can pause this is going to be equal to pretty much the same thing we're going to say this.state.guest can pause and again this is so that we can show the most uptodate information and then we're also going to pass the room code so we're going to say the room code is equal to this dot room code and then we will pass one more thing and actually i'll write it now and i'll talk about it later but this is going to be the update callback and that's going to be equal to something else that we won't fill in this minute but pretty much i just want this create room page to call a function whenever it actually does update the room you can probably guess what that function is going to be but it does need to call some function whatever it updates the room so that the parent component which is us right this room page can actually kind of update and get that new information so now that we have that and again we'll talk about this more in the next video let's make a button here so when i'm on the settings page i need a way to go back to this original page so if we look at create room page on create room page we do have a back button right but this back button redirects us to the home page of course i don't want to be redirected to the home page i want to be redirected back to just this regular room page but since we're not actually changing our url we're not going to like slash settings there's no way for me to redirect using a link or using a route to the right page so what i actually need to do here is make a button i'm going to call this button close and what this button will do is close this settings page so it won't actually redirect us anywhere but it will change the state so it will change show settings to be equal to false and then that way what we can do is we can actually remove showing the settings page on this screen so it's gonna be kind of confusing but we'll have this create room page component we'll then have a button below that component that says close when we press close it will pretty much just delete this component off the screen that's kind of an easy way to think of it but anyways let's just take one of the buttons here i'll just copy it to make this a little bit faster i will leave the color actually not as primary but as secondary like that on click now you can guess what this is going to change to we're just going to change this value to false because we want to stop showing the settings so we'll change the state to stop show settings and we'll just call this one close i think that's all we need actually for the button so let's do some testing in one second but now what i need to do is actually use render settings right so i'm going to go into my render method now and you can see that we're rendering all this main content but i only want to render this main content in the situation where we're not showing the settings page so i'm going to go up here i'm going to write an if statement before my return i'm going to say if this dot state dot show settings if that is the case then return this dot render settings okay otherwise we can return that we don't even need an else statement because of the way that the returns work we can simply have this so now whenever we have show settings that state being true we will actually just return the render settings or sorry that's this one right here otherwise we will simply just show this now since i'm using this keyword inside of the render setting button and render settings i need to bind it to this keyword so let's do that quickly let's go to the constructor let's say this dot render settings button is equal to this dot render settings button dot bind to this keyword and then we'll do the same thing here we'll say this dot render settings i think that's all we called it is equal to this dot render settings dot bind to this keyword all right so now that we have that let's have a look at our website let's refresh and we got an error what do we have here something looks pretty big okay uh let me have a quick look at this and i will be right back all right so it turns out the error was that i had update callback without anything inside of it and apparently you can't do that so i just put nola inside up here or we really we can just put an arrow function for now just have something valid inside of there again we'll change this but for now let's just have update callback equal to a blank arrow function all right so now that we changed that on the line 65 let's go back here let's refresh let's press settings and notice we get an error let me have a look and i will be back all right so another silly error inside of render settings actually did not return this code which of course is going to cause an issue because it means we're not rendering anything but yeah we just need to return all of this so that way when we go here and we return this.render settings it actually returns all of this code rather than returning nothing okay so that was the issue just need to add the return statement in render settings so let's refresh here uh now let's press on settings and notice that it shows us create a room we have the back button the close button which we added and then everything else that was just usually on create a room now if i press close notice it brings me back to this page and we don't change the url so settings close settings close we're on the same page and that's how we can kind of toggle showing two different pages now notice though if i go to settings and i press back it redirects me you saw the redirect it redirected me the home page and the home page redirect me back to this page now that's fine we we could use the back button but what we're going to do is we don't want to have all these redirects happening if we don't need them is we're going to modify let's go back to settings this page so first of all it says update room instead of saying create a room it says update room and then instead of having the back button it just doesn't have any button there at all and it kind of gets replaced with the close button that we added ourself from the other component so now we press close all is good and well that's where i'm going to conclude this video so hope you guys enjoyed if you did make sure to leave a like subscribe to the channel and i will see you in the next react and django tutorial you
