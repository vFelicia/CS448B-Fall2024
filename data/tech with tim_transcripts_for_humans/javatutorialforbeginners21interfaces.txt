With timestamps:

00:00 - hey guys oh and welcome back to another
00:01 - Java programming tutorial so in today's
00:04 - videos we're gonna be going over
00:05 - interfaces now interfaces are I think
00:08 - they're unique to Java actually because
00:10 - I haven't heard of them at any other
00:11 - languages but there's somewhat similar
00:13 - two classes they have to do with like
00:16 - inheritance and anyways you guys will
00:18 - see as we go through the video but
00:19 - they're pretty useful and yeah they're
00:21 - an important part of Java so we need to
00:23 - learn them so what we're gonna do first
00:25 - of all is we're going to create a new
00:26 - interface now just like we've created a
00:28 - new class we're just gonna right click
00:29 - on tutorial 1 our package go to new and
00:32 - instead of class obviously we're gonna
00:33 - click interface now I'm just gonna name
00:36 - this one vehicle for the example that
00:39 - I'm going to be doing so will click
00:40 - vehicle and that's all you need to do
00:42 - there's no like you know off do package
00:44 - January comments that's fine just do
00:46 - vehicle all right now we have an
00:48 - interface called vehicle so what is an
00:51 - interface well pretty much it is
00:53 - something that is completely abstract
00:55 - now this is kind of a new concept but it
00:57 - means that we're not actually gonna like
01:00 - do you can't create an instance of an
01:02 - interface all it's meant to do is to be
01:05 - inherited from so if we have a class
01:08 - like car for example that I've created
01:10 - here car could implement the interface
01:12 - and use it but we're never gonna create
01:14 - an instance of an interface it's just
01:16 - here so that we can implement it in two
01:19 - different classes hope that makes sense
01:21 - so inside of our interfaces and you'll
01:23 - see in a second we can only have public
01:27 - methods and we actually don't define
01:29 - anything inside the methods or the the
01:32 - attributes so when I create a method in
01:34 - an interface and I'll just make one now
01:36 - I guess I'm gonna do let's see here Boyd
01:39 - speed up and we'll take as a prouder in
01:43 - today that's all I do when I create a
01:46 - method I don't put those the brackets I
01:48 - don't do anything inside the method I
01:50 - just create this now you can see that
01:52 - this is completely abstract because it
01:55 - doesn't actually do anything it just
01:56 - defines the fact that this method exists
01:58 - so similar to when you create a variable
02:01 - and you don't give it a value that's
02:02 - kind of what we're doing here because
02:04 - we're gonna use this in our car class
02:07 - and you I kind of have to go through all
02:09 - of it before you're really gonna
02:10 - understand but when you create a method
02:11 - just know that you don't give it
02:13 - any Content all you do is just say like
02:15 - this method will exist in any of the
02:18 - classes that implement this okay
02:19 - so I'm gonna create a few methods here
02:21 - and what do you call it like a attribute
02:24 - and then we'll just move into actually
02:26 - using your face class the easiest way to
02:28 - understand it so I'm going to say we
02:30 - have speed up we're gonna slow down and
02:32 - we'll have let's go change gear as well
02:36 - okay just going a classic example that
02:39 - we're gonna implement a vehicle from a
02:41 - car and you guys will see what I mean
02:42 - something okay
02:44 - change gear okay and then I'm gonna add
02:46 - a attribute now any attribute I add in
02:50 - here like variables or whatever you guys
02:51 - want to call them they have to be final
02:54 - now I'm not sure if you remember in the
02:55 - last video but final means that it's a
02:57 - constant and it cannot change okay like
02:59 - we can't change this value so I'm gonna
03:02 - say final int a equals and then let's
03:06 - just say five okay actually or let's
03:08 - just go
03:09 - gears okay like final into each equals
03:11 - five saying that each thing we're using
03:13 - is gonna have five gears now watch if I
03:15 - try to just do int gears equals five and
03:18 - that still works but it's not gonna work
03:20 - in the way that we want okay so just
03:22 - make sure whatever you're doing this you
03:24 - make them final if you want to have like
03:27 - variables or whatever that you want to
03:28 - use in all of the different classes they
03:30 - must be final okay
03:32 - so right now we've defined three methods
03:34 - and we have one attribute which is just
03:36 - called github ace now and how does that
03:40 - how does that work well the way we use
03:42 - it is we type implements and you might
03:45 - have seen this before and then the name
03:47 - of the interface in this case vehicle
03:50 - okay you can see already that we're
03:52 - getting a redline we're getting an error
03:53 - so there's nothing wrong here because we
03:55 - can implement it but car is saying the
03:57 - car type car must implement the
03:58 - inherited abstract method okay so that
04:01 - means that since we have to find these
04:03 - three methods here inside of our
04:04 - interface of vehicle we have to define
04:08 - them inside our car class so whatever
04:10 - methods we put here if we implement one
04:13 - of the interfaces we have to define them
04:15 - because right now they're completely
04:17 - abstract and if we call them well we
04:19 - have no idea what to do because there's
04:20 - no content for them right so we're gonna
04:23 - have to create a void which is change
04:24 - gears I'm gonna say public
04:26 - boid change was did I call it gears are
04:31 - gear let's see change gear okay so
04:34 - change gear and then it's gonna have to
04:36 - take one parameter in this case we're
04:38 - gonna say int gear so like what gear do
04:41 - we want to change to okay and then we're
04:43 - just gonna go up here and we're just
04:44 - going to say private int gear because
04:49 - we're gonna define that when we when we
04:51 - change gears all right okay so now we're
04:53 - gonna go to and make another the other
04:56 - one that we need so let's just check
04:57 - here we need to speed up so say public
04:59 - void speed up and in here we'll have int
05:02 - speed I was like what speed or actually
05:05 - not speed where you go int change so how
05:08 - much we're gonna speed up by and then
05:10 - we'll do one more so public void slowed
05:13 - down like this and again we need this
05:16 - change and there we go so this now we're
05:21 - getting no errors because we've
05:23 - implemented all of the methods that were
05:25 - abstract over here okay now gears we
05:27 - don't need to do anything with it it's
05:28 - just like if we want to use it we could
05:30 - okay so what I'm gonna do now is inside
05:33 - I'm actually gonna create another
05:33 - private int I'm gonna call this speed
05:36 - okay what I'm gonna do now is I'm going
05:40 - to just just fill up these uh what he
05:42 - called these methods so I'm gonna say
05:43 - when we change gear we're just gonna say
05:45 - this start good gear equals whatever
05:48 - gear we're changing it to and then for
05:50 - speed up can say this speed actually
05:55 - plus equals change okay and then down
06:00 - here we'll say this does speed minus
06:02 - equals change game and change perfect
06:07 - okay so now what we're gonna do is we're
06:10 - actually just gonna add one more method
06:11 - just to show how this works so we've
06:13 - implemented the things we need to
06:15 - implement from our interface and now
06:17 - what we're gonna do is we are going to
06:20 - just create another method so in this
06:21 - case I'm gonna make this like a display
06:23 - method so that we can display our car
06:26 - pretty easily okay so public void
06:28 - display and inside of here I'm just
06:31 - gonna print out a few things the screen
06:33 - so assisted outdone put in jail N and in
06:36 - this case we'll just say I am a car
06:39 - and then we'll just add actually looks
06:43 - like going and how fast we going we're
06:46 - going this speed and if we wanted to get
06:51 - out like a little km/h so let's do that
06:53 - and I am in gear and we'll just add
06:59 - whatever the dearest so this ducks this
07:01 - dog gear perfect okay so let's now
07:06 - actually use this
07:07 - so we have our interface vehicle okay
07:10 - and we have our car so what we're gonna
07:12 - do now is gonna create car objects we'll
07:14 - say car I don't know let's say Forge
07:18 - okay equals new car okay perfect and now
07:24 - what we're gonna do is we're gonna say
07:26 - car dot forward I guess is what we need
07:30 - to do we'll say Ford speed up and let's
07:33 - maybe change it to 10 we'll add 10 to it
07:35 - and I just realized that we're actually
07:36 - gonna have to make this speed default at
07:38 - like 0 years let's just do that default
07:41 - 0 as well Lois you're gonna run into an
07:43 - error um actually here I guess you can't
07:45 - really be in gear 0 can you let's change
07:47 - that to 1 okay perfect okay so for don't
07:50 - speed up and I will say Ford done change
07:53 - here and let's just change the gear to
07:54 - okay and then if we want to display our
07:57 - Ford we give you Ford not display
08:00 - perfect okay so let's run this now and
08:03 - see if everything's working so we say
08:04 - I'm a car going 10 kilometers an hour
08:06 - and I am in gear 2 perfect so that's
08:09 - working fine and we've implemented all
08:11 - that stuff from our interface vehicle
08:14 - interface so now I'm going to show you
08:15 - some cool things we can add into our
08:17 - interfaces that make them a lot more
08:18 - useful so say for example you've used a
08:22 - bunch of interfaces with a bunch of
08:24 - classes you've inherited from them and
08:25 - now what you want to do is you want to
08:27 - add a method to all of those classes
08:30 - that are inherited from it well what you
08:31 - could do is if you do the same thing
08:33 - here and you could type something like
08:34 - this and then you could go into every
08:36 - single one of your classes and you could
08:37 - change them to be whatever you want but
08:39 - if you want the method to be the same
08:41 - for all of them we can actually use
08:43 - something this is why interfaces are
08:44 - kind of useful called default okay
08:47 - so if we type default and then maybe in
08:49 - this case void and let's just say like
08:51 - out like we're gonna print something out
08:52 - just make it easy what we'll do here is
08:55 - we'll just we can just create a method
08:57 - and we can use this from any of the
09:00 - classes that inherit our our interface
09:03 - okay
09:03 - so I'll do here is I'll say system dot
09:07 - out dot println in this case I'll just
09:10 - say default method okay I know very
09:17 - creative how did I your spell system and
09:22 - I okay anyways alright I'm tag guys I
09:25 - apologize system dot out dot println
09:26 - default method ok so now that we have
09:29 - that from within this car class we can
09:32 - use that default method so say when we
09:34 - display we want to print that and then
09:36 - we want to do the default what we could
09:38 - do believe is we can say just out maybe
09:42 - and yes that actually works fine so now
09:45 - that we have because that is a method
09:47 - within our vehicle class and we
09:49 - implemented let's see what happens when
09:51 - we run our program we get on a car going
09:54 - ten kilometers an hour and I am geared
09:55 - to and then says default method it's
09:58 - using that default method that we
09:59 - created inside of our interface now I
10:02 - believe we can actually use static
10:04 - methods as well so this would be known
10:06 - as something that's not a static method
10:07 - because we have to call it from within
10:10 - our our class but we can actually create
10:13 - static methods within our interface that
10:15 - we can then just call statically like we
10:18 - don't have to have an instance to call
10:20 - them so if you don't know what I mean
10:21 - just follow along for a second as I'm
10:23 - you doing just create a static I don't
10:25 - know let's just do like int let's return
10:29 - some of us change it up let's just call
10:31 - this math I feel like math is a keyword
10:33 - and that's fine we'll just do math okay
10:36 - we're gonna take int B and all we're
10:39 - gonna do is we're gonna return b-plus
10:42 - not okay I don't very basic but that's
10:45 - all we're gonna do just to prove a point
10:46 - so now say I'm in my main job alright
10:50 - and we get rid of this we don't create a
10:51 - car object and I want to use this static
10:55 - method inside of my interface well what
10:57 - I can do is I can do vehicle
10:59 - dot and then you can see it already has
11:02 - this function coming up for this method
11:03 - dot math give it a value like five I'm
11:07 - just actually set this equal to
11:08 - variables will say int X equals that and
11:11 - then we can system dot out that and see
11:14 - what we're actually getting as a value
11:16 - in this case we should be getting
11:18 - fourteen right yeah so fourteen there we
11:21 - go so let's say you can create a static
11:22 - method inside of your interface so in
11:26 - some cases you can kind of think these
11:27 - as functions alright say you had and I
11:30 - should you know I'll just do one as an
11:31 - example because this is kind of useful
11:33 - I go new interface and we call this math
11:36 - okay then inside here you could do a
11:39 - bunch of static methods that will do
11:42 - like math operations for you like maybe
11:44 - you have the quadratic formula maybe you
11:45 - had um I don't know like Euclidean
11:48 - distance so yeah I don't know a bunch of
11:49 - different math formulas you put them all
11:51 - in this math interface and then when you
11:53 - want to access them you would come in
11:55 - here and you'd say well math dot maybe
11:58 - you like square root like sq RT okay and
12:00 - then there you'd be able to use all of
12:02 - those I want to call functions but
12:04 - they're really methods inside the the
12:06 - interface really easily so that is a
12:10 - really good example of when you can kind
12:11 - of use interfaces so anyways that's been
12:14 - it for interfaces if you guys continue
12:15 - on with Java you will see that in many
12:18 - cases especially you're making games and
12:19 - stuff you're gonna be implementing other
12:20 - people's interfaces so it's good to know
12:23 - kind of how to create them how they work
12:24 - in the backend
12:25 - typically you probably won't be creating
12:27 - any of your own interfaces unless you
12:28 - have like large programs and a lot of
12:30 - abstraction and inheritance but anyways
12:32 - they're good to know so as always if you
12:34 - enjoyed the video please make sure you
12:35 - leave a like and subscribe and I'll see
12:37 - you again in another one
12:38 - [Music]

Cleaned transcript:

hey guys oh and welcome back to another Java programming tutorial so in today's videos we're gonna be going over interfaces now interfaces are I think they're unique to Java actually because I haven't heard of them at any other languages but there's somewhat similar two classes they have to do with like inheritance and anyways you guys will see as we go through the video but they're pretty useful and yeah they're an important part of Java so we need to learn them so what we're gonna do first of all is we're going to create a new interface now just like we've created a new class we're just gonna right click on tutorial 1 our package go to new and instead of class obviously we're gonna click interface now I'm just gonna name this one vehicle for the example that I'm going to be doing so will click vehicle and that's all you need to do there's no like you know off do package January comments that's fine just do vehicle all right now we have an interface called vehicle so what is an interface well pretty much it is something that is completely abstract now this is kind of a new concept but it means that we're not actually gonna like do you can't create an instance of an interface all it's meant to do is to be inherited from so if we have a class like car for example that I've created here car could implement the interface and use it but we're never gonna create an instance of an interface it's just here so that we can implement it in two different classes hope that makes sense so inside of our interfaces and you'll see in a second we can only have public methods and we actually don't define anything inside the methods or the the attributes so when I create a method in an interface and I'll just make one now I guess I'm gonna do let's see here Boyd speed up and we'll take as a prouder in today that's all I do when I create a method I don't put those the brackets I don't do anything inside the method I just create this now you can see that this is completely abstract because it doesn't actually do anything it just defines the fact that this method exists so similar to when you create a variable and you don't give it a value that's kind of what we're doing here because we're gonna use this in our car class and you I kind of have to go through all of it before you're really gonna understand but when you create a method just know that you don't give it any Content all you do is just say like this method will exist in any of the classes that implement this okay so I'm gonna create a few methods here and what do you call it like a attribute and then we'll just move into actually using your face class the easiest way to understand it so I'm going to say we have speed up we're gonna slow down and we'll have let's go change gear as well okay just going a classic example that we're gonna implement a vehicle from a car and you guys will see what I mean something okay change gear okay and then I'm gonna add a attribute now any attribute I add in here like variables or whatever you guys want to call them they have to be final now I'm not sure if you remember in the last video but final means that it's a constant and it cannot change okay like we can't change this value so I'm gonna say final int a equals and then let's just say five okay actually or let's just go gears okay like final into each equals five saying that each thing we're using is gonna have five gears now watch if I try to just do int gears equals five and that still works but it's not gonna work in the way that we want okay so just make sure whatever you're doing this you make them final if you want to have like variables or whatever that you want to use in all of the different classes they must be final okay so right now we've defined three methods and we have one attribute which is just called github ace now and how does that how does that work well the way we use it is we type implements and you might have seen this before and then the name of the interface in this case vehicle okay you can see already that we're getting a redline we're getting an error so there's nothing wrong here because we can implement it but car is saying the car type car must implement the inherited abstract method okay so that means that since we have to find these three methods here inside of our interface of vehicle we have to define them inside our car class so whatever methods we put here if we implement one of the interfaces we have to define them because right now they're completely abstract and if we call them well we have no idea what to do because there's no content for them right so we're gonna have to create a void which is change gears I'm gonna say public boid change was did I call it gears are gear let's see change gear okay so change gear and then it's gonna have to take one parameter in this case we're gonna say int gear so like what gear do we want to change to okay and then we're just gonna go up here and we're just going to say private int gear because we're gonna define that when we when we change gears all right okay so now we're gonna go to and make another the other one that we need so let's just check here we need to speed up so say public void speed up and in here we'll have int speed I was like what speed or actually not speed where you go int change so how much we're gonna speed up by and then we'll do one more so public void slowed down like this and again we need this change and there we go so this now we're getting no errors because we've implemented all of the methods that were abstract over here okay now gears we don't need to do anything with it it's just like if we want to use it we could okay so what I'm gonna do now is inside I'm actually gonna create another private int I'm gonna call this speed okay what I'm gonna do now is I'm going to just just fill up these uh what he called these methods so I'm gonna say when we change gear we're just gonna say this start good gear equals whatever gear we're changing it to and then for speed up can say this speed actually plus equals change okay and then down here we'll say this does speed minus equals change game and change perfect okay so now what we're gonna do is we're actually just gonna add one more method just to show how this works so we've implemented the things we need to implement from our interface and now what we're gonna do is we are going to just create another method so in this case I'm gonna make this like a display method so that we can display our car pretty easily okay so public void display and inside of here I'm just gonna print out a few things the screen so assisted outdone put in jail N and in this case we'll just say I am a car and then we'll just add actually looks like going and how fast we going we're going this speed and if we wanted to get out like a little km/h so let's do that and I am in gear and we'll just add whatever the dearest so this ducks this dog gear perfect okay so let's now actually use this so we have our interface vehicle okay and we have our car so what we're gonna do now is gonna create car objects we'll say car I don't know let's say Forge okay equals new car okay perfect and now what we're gonna do is we're gonna say car dot forward I guess is what we need to do we'll say Ford speed up and let's maybe change it to 10 we'll add 10 to it and I just realized that we're actually gonna have to make this speed default at like 0 years let's just do that default 0 as well Lois you're gonna run into an error um actually here I guess you can't really be in gear 0 can you let's change that to 1 okay perfect okay so for don't speed up and I will say Ford done change here and let's just change the gear to okay and then if we want to display our Ford we give you Ford not display perfect okay so let's run this now and see if everything's working so we say I'm a car going 10 kilometers an hour and I am in gear 2 perfect so that's working fine and we've implemented all that stuff from our interface vehicle interface so now I'm going to show you some cool things we can add into our interfaces that make them a lot more useful so say for example you've used a bunch of interfaces with a bunch of classes you've inherited from them and now what you want to do is you want to add a method to all of those classes that are inherited from it well what you could do is if you do the same thing here and you could type something like this and then you could go into every single one of your classes and you could change them to be whatever you want but if you want the method to be the same for all of them we can actually use something this is why interfaces are kind of useful called default okay so if we type default and then maybe in this case void and let's just say like out like we're gonna print something out just make it easy what we'll do here is we'll just we can just create a method and we can use this from any of the classes that inherit our our interface okay so I'll do here is I'll say system dot out dot println in this case I'll just say default method okay I know very creative how did I your spell system and I okay anyways alright I'm tag guys I apologize system dot out dot println default method ok so now that we have that from within this car class we can use that default method so say when we display we want to print that and then we want to do the default what we could do believe is we can say just out maybe and yes that actually works fine so now that we have because that is a method within our vehicle class and we implemented let's see what happens when we run our program we get on a car going ten kilometers an hour and I am geared to and then says default method it's using that default method that we created inside of our interface now I believe we can actually use static methods as well so this would be known as something that's not a static method because we have to call it from within our our class but we can actually create static methods within our interface that we can then just call statically like we don't have to have an instance to call them so if you don't know what I mean just follow along for a second as I'm you doing just create a static I don't know let's just do like int let's return some of us change it up let's just call this math I feel like math is a keyword and that's fine we'll just do math okay we're gonna take int B and all we're gonna do is we're gonna return bplus not okay I don't very basic but that's all we're gonna do just to prove a point so now say I'm in my main job alright and we get rid of this we don't create a car object and I want to use this static method inside of my interface well what I can do is I can do vehicle dot and then you can see it already has this function coming up for this method dot math give it a value like five I'm just actually set this equal to variables will say int X equals that and then we can system dot out that and see what we're actually getting as a value in this case we should be getting fourteen right yeah so fourteen there we go so let's say you can create a static method inside of your interface so in some cases you can kind of think these as functions alright say you had and I should you know I'll just do one as an example because this is kind of useful I go new interface and we call this math okay then inside here you could do a bunch of static methods that will do like math operations for you like maybe you have the quadratic formula maybe you had um I don't know like Euclidean distance so yeah I don't know a bunch of different math formulas you put them all in this math interface and then when you want to access them you would come in here and you'd say well math dot maybe you like square root like sq RT okay and then there you'd be able to use all of those I want to call functions but they're really methods inside the the interface really easily so that is a really good example of when you can kind of use interfaces so anyways that's been it for interfaces if you guys continue on with Java you will see that in many cases especially you're making games and stuff you're gonna be implementing other people's interfaces so it's good to know kind of how to create them how they work in the backend typically you probably won't be creating any of your own interfaces unless you have like large programs and a lot of abstraction and inheritance but anyways they're good to know so as always if you enjoyed the video please make sure you leave a like and subscribe and I'll see you again in another one
