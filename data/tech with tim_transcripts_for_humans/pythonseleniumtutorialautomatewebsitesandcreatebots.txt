With timestamps:

00:00 - in this video I'll teach you everything
00:01 - you need to know about selenium to get
00:03 - up and running as fast as possible even
00:06 - if you're a beginner python programmer
00:08 - you can follow along what I'm going to
00:10 - show you is actually pretty simple yet
00:12 - quite powerful when it comes to creating
00:14 - bots or doing web automation with python
00:17 - I'll show you how to navigate elements
00:18 - click on elements send Keys hit the
00:20 - enter button do a bunch of stuff and
00:22 - I'll even run you through an entire
00:24 - example of automating a website from the
00:26 - start to the finish so you have no
00:28 - doubts how to do that by the time you
00:30 - finish this video with that said let's
00:32 - go ahead and get started so to begin I'm
00:35 - going to assume that you have python
00:36 - installed on your system and you have
00:38 - some kind of editor or IDE in my case
00:40 - I'll be using vs code so please open up
00:43 - your editor if you don't already have
00:45 - one you can download one for free you
00:47 - can simply Google VSS code and download
00:49 - the editor what we'll do is make a
00:51 - python file in my case I'll just call
00:53 - this main.py and now that we have this
00:56 - open up we're going to go ahead and
00:57 - install selenium what I will do is open
01:00 - up my terminal here for this command to
01:02 - work you need to have python installed
01:05 - and you're going to type pip install and
01:08 - then selenium like this if you are Mac
01:10 - or Linux you're going to do pip three
01:13 - install selenium and notice that for me
01:15 - I actually already have this installed
01:16 - so went pretty quickly again you can try
01:18 - pip 3 install selenium and if that
01:20 - doesn't work python hyphen M pip install
01:25 - selenium or Python 3 henm pip install
01:28 - selenium if none of those work I will
01:30 - leave two videos on the screen that show
01:32 - you how to fix your pip command so you
01:34 - can get selenium installed now that you
01:37 - have selenium installed we can import it
01:39 - and start writing a basic script so at
01:41 - the top of our code we're going to write
01:42 - from selenium import web driver don't
01:47 - worry if you get a yellow squiggly line
01:49 - that just means it's not finding the
01:50 - installation but it will work when you
01:52 - run the code we're also going to say
01:54 - from selenium do web driver. Chrome .
02:00 - service import with a capital S service
02:04 - and what we're going to do now is set up
02:05 - our Chrome driver service which I'm
02:07 - going to talk about more and then use
02:09 - that to initialize our web driver now
02:11 - the way that selenium works or at least
02:13 - the way we're going to use it is we
02:15 - actually create something known as a web
02:16 - driver which we need to download and
02:18 - install in just one second which will be
02:20 - an automation tool that controls Google
02:23 - Chrome now you can do this with Firefox
02:25 - and a bunch of other browsers but Chrome
02:27 - is definitely the most popular so what
02:29 - we're going to do is create something
02:30 - known as a service and we're going to
02:31 - say service is equal to service and
02:33 - inside of here we're going to pass our
02:35 - executable uncore path and that's going
02:38 - to be equal to a string we're then going
02:41 - to say our driver is equal to web
02:44 - driver. Chrome and we're simply going to
02:47 - pass inside of here service is equal to
02:50 - service now at this point in time
02:52 - nothing is going to work because we
02:54 - don't yet have the web driver that we
02:55 - need again this is a piece of software
02:57 - which will be able to control Chrome for
03:00 - us and kind of act as a real user as we
03:03 - integrate or as we kind of automate the
03:04 - browser so what we'll need to do now is
03:07 - go to a link let me pull up that link
03:09 - and I will leave it in the description
03:11 - so we can download our Chrome web driver
03:14 - all right so I've copied the link here
03:15 - as a comment and I've also put it right
03:17 - here inside my browser now I'll put this
03:19 - as a link in the description so you can
03:20 - just click on it and this will bring you
03:22 - to the page where we'll be able to
03:24 - actually download our Chrome web driver
03:26 - now we need to make sure that the web
03:28 - driver we download is the same version
03:30 - of the Google Chrome instance that we
03:32 - have so what I'd recommend you do is
03:34 - just update your Google Chrome so it's
03:35 - the most recent version then what you
03:37 - can do is go to this little link here it
03:40 - says at the Chrome for testing
03:42 - availability dashboard so it says latest
03:44 - Chrome driver binaries we're going to
03:46 - click on this and it's going to bring us
03:48 - and show us all of the different
03:49 - versions of the web driver we can
03:51 - download now what we're going to do is
03:53 - click on the stable versions for
03:55 - whatever the most recent version of
03:56 - Chrome is in this case it's 119 when
03:59 - you're you're watching this video it'll
04:00 - probably be higher than that and when I
04:02 - click on that it's going to bring me to
04:04 - the stable links what we'll need to do
04:06 - is look for the Chrome driver
04:08 - installation not Chrome and we want to
04:10 - install the win64 version if we're on
04:13 - Windows if you're on Linux or Mac
04:15 - obviously you're going to install the
04:16 - appropriate version if you are on the um
04:19 - what do you call it M1 M2 M3 chips I
04:22 - believe you need armm and if you're on
04:23 - Intel you do the x64 installation so I'm
04:27 - going to copy this link here for Chrome
04:30 - driver for win64 and I'm going to paste
04:32 - this in my browser when I do that it
04:34 - will just pop up a download window for
04:36 - me what I'm going to do is find the
04:38 - location where I'd like to save this so
04:40 - it's going to be in the selenium folder
04:42 - and it's going to download a zip folder
04:44 - for me so now that I have that
04:46 - downloaded you can see it actually
04:47 - appears here in my vs code I'm just
04:50 - going to open this in my file explorer
04:52 - and I'm going to extract this zip folder
04:55 - on Windows you can do that by right
04:56 - clicking and click on extract all and
04:59 - just extract the files to this location
05:02 - on Mac you should just be able to double
05:04 - click it to open or you might need to
05:06 - use a kind of decompression tool but I'm
05:08 - sure on Mac you're familiar with using a
05:09 - zip file if not you can always ask chat
05:11 - gbt or look up how to uncompress it
05:14 - anyways what we're going to do here is
05:15 - grab this chromedriver.exe file I'm just
05:18 - going to copy this file so contrl C or
05:21 - in my case contrl X cuz I cut it and I'm
05:24 - going to paste it so it's directly in
05:26 - the same directory as my python file so
05:28 - notice I made my python file main.py
05:30 - here and chrome driver is right beside
05:32 - it then I can go ahead and delete these
05:34 - zip folders okay very important that
05:37 - Chrome driers is in the same folder as
05:39 - your python file once you have that exe
05:42 - file uh or whatever the installation
05:44 - file is depending Mac Linux Etc what
05:47 - you're going to do is put the name of it
05:49 - here so we're going to say
05:51 - chromedriver.exe
05:52 - okay so I've placed that here and now
05:55 - I'm specifying the path to this file is
05:57 - well this right which is right beside my
05:59 - python file again if you're on Mac or
06:01 - Linux you're going to have to adjust
06:03 - this so if it says like DMG or some
06:05 - other um kind of extension here you're
06:08 - going to replace exe with whatever the
06:09 - file name is that you have beside your
06:12 - python file I think that is fairly clear
06:15 - okay now that we have that we have the
06:16 - ability to actually grab a website so
06:19 - let's do that we're going to say driver.
06:21 - getet and then inside of here we can
06:23 - just put a URL that we want to go to so
06:25 - I'm going to say google.com just for
06:27 - testing purposes right now I'm going to
06:30 - import the time module okay and I'm just
06:34 - going to say time. sleep and I'm going
06:38 - to sleep for 10 seconds and then I'm
06:40 - going to say driver. quit now the reason
06:43 - I'm doing this is I just want to have a
06:44 - little bit of a delay so you guys can
06:46 - see what's going on you don't need to do
06:48 - this on your computer anyways this is
06:50 - all we need so once we have the Chrome
06:51 - driver we can do driver doget then we
06:54 - can go down here and say Python and then
06:57 - the name of our file which is main.py
06:59 - notice this only works when I am in the
07:02 - same directory where my python file is
07:05 - and if you know how to run your python
07:06 - code you can run it anyway you want this
07:07 - is just how I run it if you're on Mac or
07:10 - Linux you can do Python 3 main.py
07:13 - anyways I'm going to go ahead and hit
07:14 - enter notice it's going to go to
07:16 - google.com it's going to wait about 10
07:18 - seconds we'll get some logs down here
07:21 - and then it should actually quit the
07:22 - window for us let's give this a few
07:24 - seconds 5 4 okay and it quit and there
07:27 - you go that is the first instance of
07:30 - running selenium so we got Chrome driver
07:32 - set up we're able to navigate to any
07:34 - website we would like we're going to
07:36 - sleep for a few seconds and then we can
07:37 - quit the driver at any point we want by
07:39 - running driver. quit if there is no
07:41 - activity in the driver then it will
07:43 - automatically quit so I like to leave
07:45 - this sleep here just so we can see
07:47 - what's going on and actually visualize
07:49 - the whole process all right so now that
07:50 - we've done that I will quickly show you
07:52 - an example where we can actually search
07:54 - for something on Google and then we'll
07:55 - get into a bunch more interesting things
07:57 - we can do with selenium now that the
07:58 - setup is done so what I'm going to do is
08:00 - go to the top of my program and I'm
08:02 - going to say from selenium do web
08:06 - driver.
08:08 - common. bu import buy with a capital B
08:14 - now what I'm going to do right now is
08:15 - show you how we search for elements in
08:17 - the HTML and then once we have access to
08:20 - an element we're able to interact with
08:22 - it click it change it do whatever we
08:24 - need to do so what I want to do now is I
08:27 - want to actually find the Google search
08:29 - field and then I want to click into it
08:32 - and I want to type something in it and
08:33 - then hit enter so we actually perform a
08:35 - Google search Okay how are we going to
08:36 - do that well to do that we will say the
08:39 - input uncore element is equal to our web
08:44 - driver dot getor element and then we're
08:48 - going to say bu so by which we just
08:50 - imported up here Dot and then we have a
08:53 - bunch of different options here now in
08:55 - my case I think I'm going to go with
08:57 - class uncore name we'll talk about this
09:00 - in one second and then we're going to
09:01 - specify the class name of the input
09:03 - field that we want to access so let me
09:05 - explain this a bit more in depth and how
09:06 - this works let me just bring open
09:09 - google.com here okay so anytime we are
09:13 - scraping a website or interacting with
09:15 - it with a bot what we want to do is
09:17 - access the HTML elements that are on the
09:19 - page so that we can interact with them
09:21 - so the way that we can figure out which
09:23 - elements interact with is we can
09:25 - rightclick if we're in Google Chrome and
09:27 - hit inspect when we do that it will
09:30 - bring up the kind of console or terminal
09:32 - window here whatever you want to call it
09:35 - if I right click on this again it kind
09:37 - of shows me the element in the code now
09:40 - what I'm looking for here is some kind
09:42 - of identifier that I can use to access
09:44 - the element now we can use the ID we can
09:47 - use the class name we can use the tag
09:49 - name there's a bunch of different ways
09:50 - that we can access this but in our case
09:52 - right now we'll go with the class so
09:54 - notice the class here is GF YF has no
09:58 - meaning to me but I'm just going to copy
10:00 - that class and I'm going to paste that
10:02 - here now since I specified that we're
10:04 - searching by class name what we're going
10:05 - to do is look for the first element on
10:07 - the page that has this class and then
10:09 - we'll access it and be able to interact
10:11 - with it now if we wanted to we could
10:13 - search by the ID as well and we can
10:15 - search by a few other things that I'll
10:17 - show you later but for now we're going
10:18 - to do class name now once we have the
10:20 - input element what we can do is actually
10:23 - send keys to it and we can click on it
10:25 - so I'm going to say the input uncore
10:27 - element. send sendor keys and this
10:31 - allows me to just type something into
10:32 - the element so in this case I could type
10:34 - something like Tech with Tim and then
10:36 - you'll see if we go ahead and run our
10:39 - code that what should happen is we
10:41 - actually open up Google Chrome and we
10:43 - type Tech with Tim however it gave me an
10:45 - issue here it says web driver object has
10:47 - no attribute get element uh okay that's
10:51 - weird I believe it's because it is find
10:53 - element not get element so let's fix
10:56 - that up quickly and now you should see
10:58 - that it types Tech with Tim here in the
11:00 - Google search bar okay so there you go
11:02 - we access the element we're able to type
11:04 - in now what we probably want to do here
11:06 - is actually hit enter so we can search
11:08 - so to be able to send a specific key
11:11 - like an up Arrow key down arrow key
11:13 - something that's not something we can
11:14 - actually type what we need to do is
11:16 - another import we're going to say from
11:19 - selenium do web
11:22 - driver. common Dot and I think actually
11:26 - this might not be common it is common
11:29 - Keys import and we're going to import
11:32 - keys and then what I can do is simply
11:33 - put a plus sign here and say keys Dot
11:37 - and with all capitals enter there's a
11:39 - bunch of other Keys you can access as
11:40 - well like shift key Capital Etc in this
11:43 - case we just want enter so now what will
11:45 - happen if I run my code is we will open
11:48 - up the web browser type Tech with him
11:49 - and hit enter and it will bring us over
11:51 - here to this page sweet so that is the
11:54 - first example of using the web browser
11:56 - if you want to find an element again you
11:57 - can do that by the class name the ID a
11:59 - bunch of other things which we'll look
12:01 - at in a second all right so all of this
12:02 - is great so far however I do want to
12:04 - mention that it is quite common that
12:06 - when you're doing web scraping
12:07 - especially with this technique you're
12:09 - going to run into a lot of issues now
12:11 - that's because you're using a bot and a
12:13 - lot of companies today are pretty smart
12:14 - they can automatically detect Bots and
12:17 - they'll either just straight up ban your
12:18 - IP address boot you off the website
12:21 - redirect you or they'll give you things
12:22 - like captas that you need to solve that
12:24 - you won't be able to solve because well
12:26 - you are indeed a bot when you're
12:28 - interfering or interacting with that
12:29 - website now at the same time if you want
12:31 - to do a task say hundreds of thousands
12:33 - of times it's not going to be feasible
12:35 - to do that on your local computer you're
12:37 - going to want to push that out to the
12:38 - cloud and be able to run multiple
12:40 - instances of your browser all at once
12:43 - now fortunately the sponsor of this
12:45 - video bright data actually has a
12:47 - solution for that and 360° solutions for
12:50 - any type of kind of automation web
12:52 - scraping task Etc now I've been working
12:54 - with bright data for over 2 years and
12:56 - they have something called the scraping
12:58 - browser which which is relatively new
13:00 - now what this is is a headful browser
13:02 - that you can connect to from your local
13:04 - computer that runs in the cloud and has
13:07 - automatic unlocking tools that means
13:09 - that you can browse any website you want
13:11 - it will automatically solve captures for
13:13 - you it'll rotate the IP address so the
13:15 - IP will never get banned and you can
13:17 - browse from any location you want
13:19 - meaning even if you want to access
13:21 - something like a geolock website you're
13:22 - actually able to do that with bright
13:24 - data the nice thing is it's literally a
13:26 - few clicks to get it set up super easy
13:29 - I'm going to show you right now and if
13:31 - you want to start with it or try it out
13:32 - you can actually just get a free trial
13:34 - with bright data and I'll leave a link
13:35 - to that in the description anyways give
13:37 - me a second here to go to my dashboard
13:39 - I'll show you how we spin up the
13:40 - scraping browser and how we can just
13:42 - plug and play it right into our code so
13:44 - we can automatically unlock any websites
13:46 - or solve any problems we might run into
13:49 - all right so I just went to my dashboard
13:51 - here now as I mentioned bright data has
13:52 - a ton of tools and not just the scraping
13:54 - browser if you're trying to do anything
13:56 - at scale when it comes to scraping the
13:59 - web interacting with websites proxies
14:01 - Etc definitely check them out regardless
14:04 - I'm going to go to the view proxy
14:06 - products here you can see I already have
14:08 - a bunch of stuff that I was using
14:10 - previously and I'm going to go to add
14:12 - and I'm going to click on scraping
14:13 - browser which was what we're going to
14:15 - use now this is a headful browser and
14:18 - what that means it will actually work
14:19 - with Puppeteer playwright selenium and
14:22 - it has a few other features that
14:23 - headless browsers don't have so just
14:25 - something to note in this case we can
14:27 - just call this tutorial
14:29 - selenium like that go ahead and spin
14:33 - this up we'll give that one second to
14:35 - run okay and what we can do now is go to
14:40 - configuration and sorry not
14:42 - configuration we can go over here to
14:44 - check out the code integration and
14:46 - examples and we can just click on the
14:48 - language that we're going to use as well
14:50 - as the library and it will tell us
14:51 - exactly the code we need to get this
14:53 - running so I'm going to go here to
14:55 - Python and I'm going to click on
14:57 - selenium and I'm just going to copy all
14:59 - of the uh code that it has here because
15:01 - it already has all my connection
15:02 - parameters and everything and if I
15:03 - wanted to I could even go over here and
15:06 - I can kind of choose some things like
15:07 - taking a screenshot finding elements I
15:09 - can pick the site Etc okay so I've
15:12 - selected that now and I'm going to go
15:14 - over here I'm just going to make a new
15:16 - file Main
15:17 - to.py and paste all of this in now let's
15:20 - just make this full screen what this is
15:22 - going to do is go to let's go google.com
15:26 - Okay so let just change this to
15:28 - google.com and if I go ahead and run
15:30 - this code what it will do is actually
15:32 - spin up a browser for me go to
15:34 - google.com and perform any of the task
15:37 - that I want it'll just work out of the
15:38 - box with selenium so if I wanted to
15:40 - search for Tech with Tim if I wanted to
15:41 - scrape the website doesn't matter it's
15:43 - just going to work and you can see
15:45 - there's some code here that we could
15:46 - uncomment that actually will tell us the
15:48 - status of this automatically solving
15:51 - captas or unlocking the website for us
15:53 - now in this case we don't need it
15:55 - because there's not going to be any
15:56 - captas on the website we're going to but
15:58 - if there were it would just
15:58 - automatically solve them for us and
16:00 - allow us to move forward um kind of with
16:02 - the scraping so what I'll do is go to
16:04 - python demo to.py but before I run this
16:08 - I quickly just want to spin up uh
16:11 - something here so if I go over and back
16:14 - to the next page if you want to see the
16:17 - progress of what's Happening here since
16:18 - this is running in the cloud and not on
16:20 - your local machine you can click on this
16:23 - button which is the Chrome Dev tools
16:24 - debugger and it will actually show you
16:26 - in live time what's happening um kind of
16:29 - with the browser so you'll see if I run
16:31 - the code here so python oops uh what do
16:34 - we call this main to. p. demo to.py and
16:37 - then we click on the Chrome devb tools
16:40 - debugger it will actually show the
16:42 - session and we should be able to see
16:44 - that it's gone to Google uh let's give
16:46 - this a second here yes you can see it
16:48 - went to Google and then obviously if
16:49 - something was happening here it would
16:51 - show us that and then every time we run
16:53 - this we can kind of reconnect to that
16:55 - session hopefully that makes sense but
16:56 - I'm just trying to illustrate that
16:57 - you're not going to get like a big
16:58 - Chrome tab popping up here which you
17:00 - actually don't want a lot of times when
17:02 - you're doing this at scale instead you
17:04 - got to go over to Bright data directly
17:05 - to do this anyways I wanted to show that
17:07 - to you because I know a lot of you will
17:08 - be doing this for kind of more advanced
17:10 - tasks so having a solution that's able
17:13 - to unlock the websites is super super
17:15 - useful now for the rest of the tutorial
17:16 - we don't actually need this because
17:18 - there won't be any captures or anything
17:19 - that we need to solve but if you do any
17:21 - web scraping at scale definitely check
17:23 - out bright data very costeffective
17:25 - solution anyways you guys can see them
17:27 - from the link in the description thanks
17:28 - to them for sponsoring this video okay
17:31 - so now that we know how to get by captas
17:33 - unlocking and all the other issues that
17:35 - could occur what I want to show you is a
17:36 - few other things we can do with selenium
17:39 - and I want to actually automate a
17:40 - website for you and show you an example
17:43 - of how we would start this process from
17:45 - the beginning to the end all right so
17:46 - just to continue this example a little
17:48 - bit before we get into the larger one I
17:50 - want to show you a few things that might
17:51 - be useful so first of all if you have an
17:53 - input element like a text field or a
17:55 - text area you can actually use this do
17:57 - clear method that's useful because
17:59 - sometimes it could have content inside
18:01 - there so you might want to clear it out
18:02 - first and then actually send some keys
18:04 - to it because this will not override
18:07 - what's in there it will just append to
18:09 - the field so you want to clear first and
18:11 - then send the keys other than that a few
18:13 - things we can do are actually wait for
18:15 - the presence of elements so sometimes
18:17 - what's going to happen is it's going to
18:19 - take a few seconds to actually load the
18:21 - website and that means that we'll try to
18:23 - maybe access an element that doesn't yet
18:25 - exist so if we want to wait for an
18:27 - element to exist what we can do is the
18:29 - following syntax and to do that I just
18:32 - need to import something going to say
18:34 - from selenium do web driver do what is
18:39 - this
18:40 - support. UI import web driver weight and
18:46 - then we're going to say the pretty much
18:47 - the exact same thing so copy this from
18:49 - selenium web driver. support we're going
18:52 - to import the expected uncore conditions
18:56 - as EC okay okay now this is going to
18:59 - seem a little bit complex but this will
19:00 - allow us again to wait for the presence
19:02 - of an element before we go forward so we
19:04 - don't run into an issue if what we're
19:06 - looking for doesn't yet exist so what we
19:08 - can do is say web driver weight and then
19:11 - we can pass in our web driver and we can
19:14 - pass in the number of seconds that we
19:15 - want to have as a timeout in this case I
19:18 - could put something like 5 seconds and
19:20 - this means if after 5 Seconds the
19:21 - element doesn't exist go ahead and just
19:23 - crash the program we're not going to
19:25 - wait for it so however long you want to
19:26 - wait you put here in seconds we're going
19:28 - to say dot and this is going to be in
19:32 - and then inside of here we're going to
19:34 - say EC Dot and this is going to be
19:38 - prescore of element okay and this is
19:41 - going to be located and then inside of
19:43 - here we're going to put a tupple and
19:45 - we're going to say by Dot and in this
19:47 - case we could do something like class
19:49 - unor name and then we can put the class
19:52 - that we want to wait for so what this is
19:54 - going to do again is it's going to use
19:56 - our web driver it's going to wait for up
19:57 - to 5 Seconds until we locate an element
20:00 - by its class name that has this ID now
20:03 - notice I do have an extra set of
20:04 - parentheses in here this is needed so
20:07 - what I could do is I could put this
20:08 - right before my input element and now if
20:11 - it was taking a second to load
20:12 - google.com maybe you have a slow
20:13 - internet connection or something you
20:15 - will wait until this element exists once
20:18 - it exists you will then find it access
20:20 - it and you won't get errors saying hey
20:21 - we can't find this element on the page
20:23 - okay so that's great if we run our code
20:25 - that will work but another thing I want
20:27 - to show you is how we navigate based on
20:30 - some text so if we pop open our code
20:33 - here and sorry that's not the one that I
20:35 - wanted to run I want to run
20:38 - main.py you will see that when we search
20:40 - Tech with Tim we have some link text
20:42 - here now I don't necessarily know what
20:44 - the ID of this will be but what I do
20:46 - know is that I want to click on
20:48 - something that says Tech with Tim so
20:50 - what I can do is actually find an
20:51 - element based on its text especially if
20:54 - it's a link so if you want to click on
20:56 - some link that's going to redirect you
20:57 - to another page page you can do what I'm
20:59 - about to show you here so I'm going to
21:01 - say link is equal to
21:04 - driver.
21:06 - findor element and this is going to be
21:09 - buy do partial uncore linkcore text and
21:15 - then for this text I'm going to say Tech
21:17 - with Tim now what this means is that if
21:20 - tech with Tim in this capitalization
21:23 - exists inside of some kind of anchor tag
21:26 - or link tag we're going to go ahead and
21:28 - access it so this is what I'm looking
21:30 - for this link and then I can simply say
21:32 - link. click and what this will do is
21:35 - actually redirect me to whatever the
21:37 - link goes to okay so this allows us to
21:39 - click on a link now if you wanted to
21:41 - find the exact text so maybe you don't
21:44 - want to find something that just has
21:45 - Tech with Tim you want it to only say
21:47 - Tech with Tim you can use Link text like
21:49 - this this finds the exact text this will
21:52 - see if text is contained inside of an
21:54 - anchor Tech now the way that all of
21:56 - these find elements work is will'll find
21:58 - the first thing on the page that adheres
22:00 - to whatever you put here now for some
22:02 - reason you wanted to find all of the
22:04 - links that had Tech with Tim you could
22:06 - actually do find elements what that
22:08 - would then do is return you an array of
22:10 - all of the different elements that you
22:12 - could iterate over so for example you'd
22:14 - have like element one element two Etc
22:18 - then you can access those elements and
22:19 - you can do whatever you want with them
22:20 - so if you're trying to find multiple you
22:22 - can use find elements if you just want
22:24 - one which is most of the time what you
22:25 - want then it's just going to be find
22:27 - element okay so if I do this now it
22:30 - should work however we might again run
22:33 - into that problem where it takes a
22:34 - second to load the element and we get an
22:36 - issue here so what I'm going to do is
22:38 - just copy this I'm going to go here I'm
22:41 - going to take my buy I'm just going to
22:46 - paste that inside of here so now I'm
22:48 - going to wait for this to exist as soon
22:50 - as it exists I'm going to click on it
22:52 - and I'll wait up to 5 seconds so I'm
22:54 - going to run my code give this a second
22:57 - Tech with s and then it should actually
22:59 - click on this link here and notice it
23:01 - does it clicks there and goes to my
23:03 - YouTube channel okay there you are uh
23:06 - that is kind of the first example now
23:08 - that we have this what I actually want
23:09 - to show you how to do is automate the
23:11 - Cookie Clickers website let me set up
23:13 - that demo and we'll be right back all
23:15 - right so I've gone to the famous website
23:17 - of Cookie Clickers which was one of my
23:19 - favorite games when I was younger and in
23:21 - school anyways the point of this game is
23:23 - you click on this cookie it gives you a
23:24 - bunch of cookies here and then you can
23:26 - buy some upgrades which will automate
23:28 - the cookie collection process so you can
23:30 - buy this cursor upgrade for example and
23:32 - it should just automatically click the
23:34 - cookies for you you can buy all these
23:35 - other kind of upgrades that appear very
23:37 - simple though you just collect as many
23:39 - cookies as possible and what I want to
23:40 - show you how to do here is automate this
23:42 - site now to automate the site what we
23:44 - would need to do is navigate to the site
23:46 - we're going to have to click on this
23:47 - cookie infinitely so as many times as we
23:49 - can now once we have enough cookies to
23:52 - buy an upgrade we're going to actually
23:54 - go over and click on that upgrade to
23:56 - purchase it and this way I'll be able to
23:58 - show you how we access the value of
24:00 - different elements and do things
24:01 - dynamically on the website so this will
24:04 - give you a bit of a better idea of how
24:05 - to do a more in-depth automation
24:08 - obviously still pretty simple but I
24:09 - think this will be a good thing to look
24:11 - through so the URL is right here but I
24:13 - will leave this in the description you
24:15 - also can just Google Cookie Clickers and
24:16 - it'll pop up really easily and I've just
24:19 - set up the same kind of boiler plate
24:21 - that we had before so I brought in all
24:23 - my imports I brought in my service and
24:25 - my driver and I'm now going to this
24:28 - website so now what we can do is
24:30 - actually pop up this website so I should
24:33 - have left this open and kind of the
24:35 - first thing we want to do here is we
24:37 - want to start locating the classes that
24:40 - we're going to want access to when we're
24:42 - automating this site so I'm going to
24:44 - right click on this and click on inspect
24:47 - and you'll see here that we have this
24:49 - button and it's called big cookie and
24:51 - this is the ID so what I'm going to do
24:53 - is just copy in this ID and the first
24:55 - thing we'll do is we'll just look for an
24:57 - element that that has this big cookie ID
24:59 - and then we'll start clicking on it okay
25:01 - so we can do that as step one we can say
25:04 - the cookie uncore ID is equal to big
25:07 - cookie and then we can find this so we
25:09 - can say the cookie is equal to driver.
25:13 - findor element this is going to be by
25:16 - the ID and then we're going to say comma
25:19 - cookie ID and for now we can simply say
25:23 - cookie. click now there is going to be
25:26 - an issue here but I want to show this
25:27 - because it's somewhat educational what
25:30 - I'm going to do is run my Cookie
25:31 - Clickers file I created a new python
25:33 - file here so I'm going to go ahead and
25:35 - run that and notice actually that what
25:38 - happens right away is we get an error
25:41 - now the reason we get an error is it
25:42 - says that the element we're trying to
25:44 - click is not clickable at this point and
25:46 - the reason we got that is because you
25:48 - might have noticed that when this popped
25:50 - up we'll see if we can look at it
25:51 - quickly again it actually asked us to
25:53 - pick a language now this is something
25:56 - again that could happen that might not
25:57 - happen in your instance because you
25:59 - might have already selected a language
26:00 - like I did so what we need to do in this
26:02 - instance is actually select a language
26:05 - once we select the language it's then
26:07 - going to load again and then we can
26:09 - start pressing on the cookie so to
26:11 - select the language that's kind of the
26:13 - first thing we'll need to do here so
26:14 - what I'm going to do here is just copy
26:16 - in this line right here because we're
26:17 - going to use this to wait for the
26:19 - presence of an element and what I'm
26:20 - going to show you how to use here is
26:21 - something known as the X path now X path
26:24 - is kind of this fancy syntax that you
26:26 - can use that allows you to search for
26:28 - specific text specific attributes all
26:31 - kinds of stuff I'm just going to copy in
26:34 - the exact line that we need I'll kind of
26:36 - explain it a bit but if you want an X
26:38 - paath piece of code and you don't know
26:40 - how to write it you can just go to chat
26:42 - GPT and say hey here's the HTML element
26:45 - I'm trying to Target or I you know you
26:47 - can kind of describe what it is that you
26:49 - need and it will give you actually the F
26:51 - XPath syntax sorry so again I know it
26:54 - seems a little bit weird we have two
26:55 - slashes and asteris set of square
26:58 - brackets and then we're using a function
26:59 - called contains and what we're looking
27:01 - for is some text so the text inside of
27:04 - an HTML element that contains English
27:07 - because this is the language we're going
27:08 - to select I know that's not super clear
27:11 - but this is X path you can look it up if
27:13 - you want more information kind of a cool
27:15 - way to select HTML elements I'm not an
27:17 - expert so that's going to be the extent
27:19 - of my explanation so we're going to wait
27:20 - for that language to pop up then we're
27:23 - going to say language is equal to
27:26 - driver. find
27:28 - okay and we're going to find by X path
27:31 - this language and we're simply going to
27:33 - click on it now to click on it we can
27:34 - just say language. click okay so we're
27:36 - just going to click on that element and
27:38 - now we're going to wait for the cookie
27:40 - element to appear so we're going to copy
27:42 - this okay and we're going to go by ID
27:46 - cookie ID we're going to paste that
27:48 - inside of here and then we're going to
27:50 - say time. sleep 10 seconds down here so
27:53 - now what should happen is we will wait
27:56 - for the language to appear click on the
27:58 - language wait for the cookie to appear
28:00 - and then click on the cookie okay so
28:02 - we're going to go ahead and run this
28:05 - code give this a second here to load up
28:09 - and we got an issue here it says web
28:10 - driver has no attribute find okay this
28:13 - because needs to be find
28:15 - element sorry about that guys let's fix
28:17 - that up okay give this a
28:20 - second and there you go it went ahead
28:22 - and clicked on the language and then it
28:24 - clicked the cookie one time sweet now
28:27 - notice we have our upgrades down here so
28:29 - what we'll have to do is actually find
28:32 - um what do you call it here the classes
28:34 - of those upgrades so we can look at them
28:36 - we also need to know how many cookies we
28:38 - have so if we open up Cookie Clickers
28:40 - here you can see that first of all if we
28:42 - want to see the number of cookies that
28:43 - we have it is inside of this div so if
28:48 - we open this up we can go inside of here
28:52 - and that's not right
28:54 - inspect um okay for some reason reason
28:57 - it's having trouble telling me where the
28:59 - cookies are I think it might be here ah
29:02 - there you go so we have div ID cookies
29:05 - okay so that's what we want we're going
29:06 - to access the ID cookies to see how many
29:09 - cookies that we have so let's start with
29:11 - that we're going to say
29:14 - our cookies ID is equal to cookies let
29:18 - me just minimize this for now and what
29:21 - we'll do is we will set up a while loop
29:23 - here and we'll say while true and while
29:26 - this is true we're going to click the
29:28 - cookie and we're simply going to print
29:29 - how many cookies we have so that we can
29:31 - see what that number is so we're going
29:33 - to say our cookies count this is going
29:35 - to be equal to driver. findor element
29:41 - we're going to say buy doid again and
29:44 - then this is going to be the cookies ID
29:48 - okay now what we want to do is access
29:50 - the
29:51 - text like that so now what we can do is
29:54 - we can print out the cookies count which
29:57 - is is going to give us the text inside
29:58 - of that element and before we do that we
30:00 - can say cookie doclick so now we should
30:04 - just infinitely click the cookie and be
30:06 - printing out how many times or how many
30:08 - cookies we have so let's run this code
30:10 - and give this a
30:12 - look okay give this a second to go
30:15 - through here and we got an issue and it
30:18 - says what is the problem okay I got a
30:22 - weird issue there but I'm just going to
30:23 - remove this cookie click online 30 which
30:26 - I think will actually be the issue I'm
30:28 - going to go here and run this again and
30:31 - let's hope that it works this
30:33 - time okay give this a second and there
30:35 - you go now it's working and you can see
30:37 - it's printing out how many cookies we
30:39 - actually have now I'm going to stop this
30:41 - and notice it says 123 cookies per
30:44 - second zero okay don't worry about that
30:46 - what we want to do now is just get the
30:48 - number because we need to have just the
30:49 - number not this whole string part so to
30:52 - do that I'm just going to go to here and
30:54 - I'm going to say do split at a space and
30:58 - I'm going to grab the first value here
31:01 - then I am going to say the cookies count
31:06 - is equal to the cookies count do replace
31:11 - and I'm going to replace all the commas
31:12 - with an empty string and convert this
31:15 - into an integer the reason for that is
31:17 - that we might have commas in this number
31:19 - if you have a comma it's going to cause
31:20 - an issue in Python so we're going to
31:22 - remove all of those and convert this
31:24 - into an integer and now if we print out
31:26 - the cookies count will just give us that
31:27 - numeric value now that's fine I think
31:30 - that we understand that's going to work
31:32 - now we want to look at the upgrades so
31:34 - if I click on the upgrade here you can
31:36 - see that the upgrades are within this
31:38 - product zero product one product two and
31:40 - product 3 ID field and what we need to
31:43 - know is actually the price of the
31:45 - upgrade so if we go into content you can
31:48 - see that we have these IDs here and they
31:51 - say product price zero and at the same
31:53 - time they'll say product price one
31:55 - product price two product price three so
31:57 - what we want to do is essentially
31:59 - iterate or look through all of these
32:01 - different IDs see what the price of the
32:03 - upgrades are and if we have enough
32:04 - cookies we want to click on them so I'm
32:06 - going to show you the code to do that
32:09 - what we're going to do here is we're
32:10 - going to write the
32:12 - product
32:14 - price prefix is equal to product price
32:19 - and we're going to say the productor
32:22 - prefix is equal to the product like that
32:26 - okay now what we will do is we're going
32:28 - to say four I in range four because we
32:33 - have four products that we want to
32:34 - iterate through we're going to say the
32:37 - product uncore price is equal to the
32:41 - driver. find element and this is going
32:44 - to be the product price prefix plus the
32:48 - string of I and we're going to do this
32:51 - by do ID because they're all ided okay
32:55 - now what I'm saying is okay I I want to
32:57 - look for product price first zero then
33:00 - product price one then product price two
33:01 - then product price three now just like
33:04 - before I need to do this conversion so
33:06 - I'm going to say product price is equal
33:09 - to product price
33:12 - dot replace and I'm going to replace the
33:15 - commas with an empty string to remove
33:18 - them and I'm going to convert this to an
33:19 - integer and I'm going to say if my
33:22 - cookies count is greater than or equal
33:25 - to the product price
33:27 - then what I'm going to do is actually
33:29 - locate the product now the way I'll do
33:32 - that is the following I'm going to
33:34 - say product is equal to driver. findor
33:39 - element and I'm going to find Again by
33:42 - ID this is going to be the product
33:45 - prefix plus the string of I and I'm
33:48 - simply going to click this now there's a
33:51 - few other things that we need to do but
33:52 - this is kind of the basic idea we're
33:54 - going to iterate through all of the
33:55 - different products if we can afford any
33:57 - of those products we're going to go
33:58 - ahead and click on them once we click on
34:00 - them we'll simply break the for Loop and
34:02 - then we'll continue this process that
34:04 - means anytime we have enough cookies to
34:06 - be able to upgrade we'll automatically
34:07 - do that upgrade and that's all we need
34:09 - to do now a few things to note here
34:12 - first of all I found the price okay so
34:14 - once I find the price if I have enough
34:16 - cookies based on the price what I'm
34:19 - going to do is find the product the
34:21 - reason I need to find the product is
34:22 - because that's the button whereas the
34:24 - price is that little text tag if I try
34:26 - to click on the text tag it's going to
34:27 - give me an error I need to click on that
34:29 - button as a whole so that's why I have
34:31 - two separate finds here um that I'm
34:33 - looking at hopefully that makes a bit of
34:35 - sense now one thing that we need to do
34:37 - is we just need to make sure that this
34:40 - product price is actually a string
34:42 - because it's possible that it won't be
34:45 - so what I can do is simply say this if
34:48 - product
34:49 - price dot is digit so I'll say if not
34:54 - product price. is digigit then we are
34:56 - simply going to continue which just
34:58 - means we'll go to the next product this
35:00 - way we don't get an issue when we try to
35:02 - convert it into a uh integer now I can
35:05 - also actually just throw the do replace
35:08 - up here and this reminds me I also need
35:11 - the text so let's say text. replace okay
35:14 - so I'm going to grab this element I'm
35:16 - going to grab the text inside of it I'm
35:18 - then going to replace the comma with the
35:20 - space so that we get nothing there I'm
35:23 - just going to remove that here cuz we no
35:24 - longer need that okay I'm hoping that's
35:26 - clear but this actually would be the
35:28 - finished code so if we go ahead and run
35:31 - this now we might get an error we might
35:32 - not let's see and figure out if this is
35:36 - working okay brings us over here to
35:38 - Cookie Clicker and we do get an error it
35:41 - says stale element reference okay I'm
35:43 - not sure what that is sometimes I think
35:45 - you just get a weird bug with a caching
35:47 - issue so if I rerun this maybe it will
35:50 - fix itself and there you go it did fix
35:52 - itself and notice it actually will
35:53 - automatically go over here and click on
35:55 - the cursor uh every time we have an
35:57 - upgrade so it'll just keep doing this
35:59 - and eventually once we get to the point
36:01 - that the cursor is more expensive than
36:03 - the grandma upgrade then we would go to
36:05 - the grandma upgrade and vice versa okay
36:07 - now you can see why I needed to remove
36:09 - the commas because we have like one
36:11 - comma 1,000 that's obviously going to be
36:13 - an issue and python is not going to like
36:15 - that so I needed to remove it so we can
36:17 - let this run as long as we want to but
36:18 - that is automating Cookie Clickers and
36:21 - that's pretty much all I had to show you
36:22 - in this video so with that said I think
36:25 - I will wrap it up here this code will be
36:27 - available from the link in the
36:29 - description I hope you enjoyed I look
36:30 - forward to seeing you in another YouTube
36:33 - [Music]
36:40 - video

Cleaned transcript:

in this video I'll teach you everything you need to know about selenium to get up and running as fast as possible even if you're a beginner python programmer you can follow along what I'm going to show you is actually pretty simple yet quite powerful when it comes to creating bots or doing web automation with python I'll show you how to navigate elements click on elements send Keys hit the enter button do a bunch of stuff and I'll even run you through an entire example of automating a website from the start to the finish so you have no doubts how to do that by the time you finish this video with that said let's go ahead and get started so to begin I'm going to assume that you have python installed on your system and you have some kind of editor or IDE in my case I'll be using vs code so please open up your editor if you don't already have one you can download one for free you can simply Google VSS code and download the editor what we'll do is make a python file in my case I'll just call this main.py and now that we have this open up we're going to go ahead and install selenium what I will do is open up my terminal here for this command to work you need to have python installed and you're going to type pip install and then selenium like this if you are Mac or Linux you're going to do pip three install selenium and notice that for me I actually already have this installed so went pretty quickly again you can try pip 3 install selenium and if that doesn't work python hyphen M pip install selenium or Python 3 henm pip install selenium if none of those work I will leave two videos on the screen that show you how to fix your pip command so you can get selenium installed now that you have selenium installed we can import it and start writing a basic script so at the top of our code we're going to write from selenium import web driver don't worry if you get a yellow squiggly line that just means it's not finding the installation but it will work when you run the code we're also going to say from selenium do web driver. Chrome . service import with a capital S service and what we're going to do now is set up our Chrome driver service which I'm going to talk about more and then use that to initialize our web driver now the way that selenium works or at least the way we're going to use it is we actually create something known as a web driver which we need to download and install in just one second which will be an automation tool that controls Google Chrome now you can do this with Firefox and a bunch of other browsers but Chrome is definitely the most popular so what we're going to do is create something known as a service and we're going to say service is equal to service and inside of here we're going to pass our executable uncore path and that's going to be equal to a string we're then going to say our driver is equal to web driver. Chrome and we're simply going to pass inside of here service is equal to service now at this point in time nothing is going to work because we don't yet have the web driver that we need again this is a piece of software which will be able to control Chrome for us and kind of act as a real user as we integrate or as we kind of automate the browser so what we'll need to do now is go to a link let me pull up that link and I will leave it in the description so we can download our Chrome web driver all right so I've copied the link here as a comment and I've also put it right here inside my browser now I'll put this as a link in the description so you can just click on it and this will bring you to the page where we'll be able to actually download our Chrome web driver now we need to make sure that the web driver we download is the same version of the Google Chrome instance that we have so what I'd recommend you do is just update your Google Chrome so it's the most recent version then what you can do is go to this little link here it says at the Chrome for testing availability dashboard so it says latest Chrome driver binaries we're going to click on this and it's going to bring us and show us all of the different versions of the web driver we can download now what we're going to do is click on the stable versions for whatever the most recent version of Chrome is in this case it's 119 when you're you're watching this video it'll probably be higher than that and when I click on that it's going to bring me to the stable links what we'll need to do is look for the Chrome driver installation not Chrome and we want to install the win64 version if we're on Windows if you're on Linux or Mac obviously you're going to install the appropriate version if you are on the um what do you call it M1 M2 M3 chips I believe you need armm and if you're on Intel you do the x64 installation so I'm going to copy this link here for Chrome driver for win64 and I'm going to paste this in my browser when I do that it will just pop up a download window for me what I'm going to do is find the location where I'd like to save this so it's going to be in the selenium folder and it's going to download a zip folder for me so now that I have that downloaded you can see it actually appears here in my vs code I'm just going to open this in my file explorer and I'm going to extract this zip folder on Windows you can do that by right clicking and click on extract all and just extract the files to this location on Mac you should just be able to double click it to open or you might need to use a kind of decompression tool but I'm sure on Mac you're familiar with using a zip file if not you can always ask chat gbt or look up how to uncompress it anyways what we're going to do here is grab this chromedriver.exe file I'm just going to copy this file so contrl C or in my case contrl X cuz I cut it and I'm going to paste it so it's directly in the same directory as my python file so notice I made my python file main.py here and chrome driver is right beside it then I can go ahead and delete these zip folders okay very important that Chrome driers is in the same folder as your python file once you have that exe file uh or whatever the installation file is depending Mac Linux Etc what you're going to do is put the name of it here so we're going to say chromedriver.exe okay so I've placed that here and now I'm specifying the path to this file is well this right which is right beside my python file again if you're on Mac or Linux you're going to have to adjust this so if it says like DMG or some other um kind of extension here you're going to replace exe with whatever the file name is that you have beside your python file I think that is fairly clear okay now that we have that we have the ability to actually grab a website so let's do that we're going to say driver. getet and then inside of here we can just put a URL that we want to go to so I'm going to say google.com just for testing purposes right now I'm going to import the time module okay and I'm just going to say time. sleep and I'm going to sleep for 10 seconds and then I'm going to say driver. quit now the reason I'm doing this is I just want to have a little bit of a delay so you guys can see what's going on you don't need to do this on your computer anyways this is all we need so once we have the Chrome driver we can do driver doget then we can go down here and say Python and then the name of our file which is main.py notice this only works when I am in the same directory where my python file is and if you know how to run your python code you can run it anyway you want this is just how I run it if you're on Mac or Linux you can do Python 3 main.py anyways I'm going to go ahead and hit enter notice it's going to go to google.com it's going to wait about 10 seconds we'll get some logs down here and then it should actually quit the window for us let's give this a few seconds 5 4 okay and it quit and there you go that is the first instance of running selenium so we got Chrome driver set up we're able to navigate to any website we would like we're going to sleep for a few seconds and then we can quit the driver at any point we want by running driver. quit if there is no activity in the driver then it will automatically quit so I like to leave this sleep here just so we can see what's going on and actually visualize the whole process all right so now that we've done that I will quickly show you an example where we can actually search for something on Google and then we'll get into a bunch more interesting things we can do with selenium now that the setup is done so what I'm going to do is go to the top of my program and I'm going to say from selenium do web driver. common. bu import buy with a capital B now what I'm going to do right now is show you how we search for elements in the HTML and then once we have access to an element we're able to interact with it click it change it do whatever we need to do so what I want to do now is I want to actually find the Google search field and then I want to click into it and I want to type something in it and then hit enter so we actually perform a Google search Okay how are we going to do that well to do that we will say the input uncore element is equal to our web driver dot getor element and then we're going to say bu so by which we just imported up here Dot and then we have a bunch of different options here now in my case I think I'm going to go with class uncore name we'll talk about this in one second and then we're going to specify the class name of the input field that we want to access so let me explain this a bit more in depth and how this works let me just bring open google.com here okay so anytime we are scraping a website or interacting with it with a bot what we want to do is access the HTML elements that are on the page so that we can interact with them so the way that we can figure out which elements interact with is we can rightclick if we're in Google Chrome and hit inspect when we do that it will bring up the kind of console or terminal window here whatever you want to call it if I right click on this again it kind of shows me the element in the code now what I'm looking for here is some kind of identifier that I can use to access the element now we can use the ID we can use the class name we can use the tag name there's a bunch of different ways that we can access this but in our case right now we'll go with the class so notice the class here is GF YF has no meaning to me but I'm just going to copy that class and I'm going to paste that here now since I specified that we're searching by class name what we're going to do is look for the first element on the page that has this class and then we'll access it and be able to interact with it now if we wanted to we could search by the ID as well and we can search by a few other things that I'll show you later but for now we're going to do class name now once we have the input element what we can do is actually send keys to it and we can click on it so I'm going to say the input uncore element. send sendor keys and this allows me to just type something into the element so in this case I could type something like Tech with Tim and then you'll see if we go ahead and run our code that what should happen is we actually open up Google Chrome and we type Tech with Tim however it gave me an issue here it says web driver object has no attribute get element uh okay that's weird I believe it's because it is find element not get element so let's fix that up quickly and now you should see that it types Tech with Tim here in the Google search bar okay so there you go we access the element we're able to type in now what we probably want to do here is actually hit enter so we can search so to be able to send a specific key like an up Arrow key down arrow key something that's not something we can actually type what we need to do is another import we're going to say from selenium do web driver. common Dot and I think actually this might not be common it is common Keys import and we're going to import keys and then what I can do is simply put a plus sign here and say keys Dot and with all capitals enter there's a bunch of other Keys you can access as well like shift key Capital Etc in this case we just want enter so now what will happen if I run my code is we will open up the web browser type Tech with him and hit enter and it will bring us over here to this page sweet so that is the first example of using the web browser if you want to find an element again you can do that by the class name the ID a bunch of other things which we'll look at in a second all right so all of this is great so far however I do want to mention that it is quite common that when you're doing web scraping especially with this technique you're going to run into a lot of issues now that's because you're using a bot and a lot of companies today are pretty smart they can automatically detect Bots and they'll either just straight up ban your IP address boot you off the website redirect you or they'll give you things like captas that you need to solve that you won't be able to solve because well you are indeed a bot when you're interfering or interacting with that website now at the same time if you want to do a task say hundreds of thousands of times it's not going to be feasible to do that on your local computer you're going to want to push that out to the cloud and be able to run multiple instances of your browser all at once now fortunately the sponsor of this video bright data actually has a solution for that and 360° solutions for any type of kind of automation web scraping task Etc now I've been working with bright data for over 2 years and they have something called the scraping browser which which is relatively new now what this is is a headful browser that you can connect to from your local computer that runs in the cloud and has automatic unlocking tools that means that you can browse any website you want it will automatically solve captures for you it'll rotate the IP address so the IP will never get banned and you can browse from any location you want meaning even if you want to access something like a geolock website you're actually able to do that with bright data the nice thing is it's literally a few clicks to get it set up super easy I'm going to show you right now and if you want to start with it or try it out you can actually just get a free trial with bright data and I'll leave a link to that in the description anyways give me a second here to go to my dashboard I'll show you how we spin up the scraping browser and how we can just plug and play it right into our code so we can automatically unlock any websites or solve any problems we might run into all right so I just went to my dashboard here now as I mentioned bright data has a ton of tools and not just the scraping browser if you're trying to do anything at scale when it comes to scraping the web interacting with websites proxies Etc definitely check them out regardless I'm going to go to the view proxy products here you can see I already have a bunch of stuff that I was using previously and I'm going to go to add and I'm going to click on scraping browser which was what we're going to use now this is a headful browser and what that means it will actually work with Puppeteer playwright selenium and it has a few other features that headless browsers don't have so just something to note in this case we can just call this tutorial selenium like that go ahead and spin this up we'll give that one second to run okay and what we can do now is go to configuration and sorry not configuration we can go over here to check out the code integration and examples and we can just click on the language that we're going to use as well as the library and it will tell us exactly the code we need to get this running so I'm going to go here to Python and I'm going to click on selenium and I'm just going to copy all of the uh code that it has here because it already has all my connection parameters and everything and if I wanted to I could even go over here and I can kind of choose some things like taking a screenshot finding elements I can pick the site Etc okay so I've selected that now and I'm going to go over here I'm just going to make a new file Main to.py and paste all of this in now let's just make this full screen what this is going to do is go to let's go google.com Okay so let just change this to google.com and if I go ahead and run this code what it will do is actually spin up a browser for me go to google.com and perform any of the task that I want it'll just work out of the box with selenium so if I wanted to search for Tech with Tim if I wanted to scrape the website doesn't matter it's just going to work and you can see there's some code here that we could uncomment that actually will tell us the status of this automatically solving captas or unlocking the website for us now in this case we don't need it because there's not going to be any captas on the website we're going to but if there were it would just automatically solve them for us and allow us to move forward um kind of with the scraping so what I'll do is go to python demo to.py but before I run this I quickly just want to spin up uh something here so if I go over and back to the next page if you want to see the progress of what's Happening here since this is running in the cloud and not on your local machine you can click on this button which is the Chrome Dev tools debugger and it will actually show you in live time what's happening um kind of with the browser so you'll see if I run the code here so python oops uh what do we call this main to. p. demo to.py and then we click on the Chrome devb tools debugger it will actually show the session and we should be able to see that it's gone to Google uh let's give this a second here yes you can see it went to Google and then obviously if something was happening here it would show us that and then every time we run this we can kind of reconnect to that session hopefully that makes sense but I'm just trying to illustrate that you're not going to get like a big Chrome tab popping up here which you actually don't want a lot of times when you're doing this at scale instead you got to go over to Bright data directly to do this anyways I wanted to show that to you because I know a lot of you will be doing this for kind of more advanced tasks so having a solution that's able to unlock the websites is super super useful now for the rest of the tutorial we don't actually need this because there won't be any captures or anything that we need to solve but if you do any web scraping at scale definitely check out bright data very costeffective solution anyways you guys can see them from the link in the description thanks to them for sponsoring this video okay so now that we know how to get by captas unlocking and all the other issues that could occur what I want to show you is a few other things we can do with selenium and I want to actually automate a website for you and show you an example of how we would start this process from the beginning to the end all right so just to continue this example a little bit before we get into the larger one I want to show you a few things that might be useful so first of all if you have an input element like a text field or a text area you can actually use this do clear method that's useful because sometimes it could have content inside there so you might want to clear it out first and then actually send some keys to it because this will not override what's in there it will just append to the field so you want to clear first and then send the keys other than that a few things we can do are actually wait for the presence of elements so sometimes what's going to happen is it's going to take a few seconds to actually load the website and that means that we'll try to maybe access an element that doesn't yet exist so if we want to wait for an element to exist what we can do is the following syntax and to do that I just need to import something going to say from selenium do web driver do what is this support. UI import web driver weight and then we're going to say the pretty much the exact same thing so copy this from selenium web driver. support we're going to import the expected uncore conditions as EC okay okay now this is going to seem a little bit complex but this will allow us again to wait for the presence of an element before we go forward so we don't run into an issue if what we're looking for doesn't yet exist so what we can do is say web driver weight and then we can pass in our web driver and we can pass in the number of seconds that we want to have as a timeout in this case I could put something like 5 seconds and this means if after 5 Seconds the element doesn't exist go ahead and just crash the program we're not going to wait for it so however long you want to wait you put here in seconds we're going to say dot and this is going to be in and then inside of here we're going to say EC Dot and this is going to be prescore of element okay and this is going to be located and then inside of here we're going to put a tupple and we're going to say by Dot and in this case we could do something like class unor name and then we can put the class that we want to wait for so what this is going to do again is it's going to use our web driver it's going to wait for up to 5 Seconds until we locate an element by its class name that has this ID now notice I do have an extra set of parentheses in here this is needed so what I could do is I could put this right before my input element and now if it was taking a second to load google.com maybe you have a slow internet connection or something you will wait until this element exists once it exists you will then find it access it and you won't get errors saying hey we can't find this element on the page okay so that's great if we run our code that will work but another thing I want to show you is how we navigate based on some text so if we pop open our code here and sorry that's not the one that I wanted to run I want to run main.py you will see that when we search Tech with Tim we have some link text here now I don't necessarily know what the ID of this will be but what I do know is that I want to click on something that says Tech with Tim so what I can do is actually find an element based on its text especially if it's a link so if you want to click on some link that's going to redirect you to another page page you can do what I'm about to show you here so I'm going to say link is equal to driver. findor element and this is going to be buy do partial uncore linkcore text and then for this text I'm going to say Tech with Tim now what this means is that if tech with Tim in this capitalization exists inside of some kind of anchor tag or link tag we're going to go ahead and access it so this is what I'm looking for this link and then I can simply say link. click and what this will do is actually redirect me to whatever the link goes to okay so this allows us to click on a link now if you wanted to find the exact text so maybe you don't want to find something that just has Tech with Tim you want it to only say Tech with Tim you can use Link text like this this finds the exact text this will see if text is contained inside of an anchor Tech now the way that all of these find elements work is will'll find the first thing on the page that adheres to whatever you put here now for some reason you wanted to find all of the links that had Tech with Tim you could actually do find elements what that would then do is return you an array of all of the different elements that you could iterate over so for example you'd have like element one element two Etc then you can access those elements and you can do whatever you want with them so if you're trying to find multiple you can use find elements if you just want one which is most of the time what you want then it's just going to be find element okay so if I do this now it should work however we might again run into that problem where it takes a second to load the element and we get an issue here so what I'm going to do is just copy this I'm going to go here I'm going to take my buy I'm just going to paste that inside of here so now I'm going to wait for this to exist as soon as it exists I'm going to click on it and I'll wait up to 5 seconds so I'm going to run my code give this a second Tech with s and then it should actually click on this link here and notice it does it clicks there and goes to my YouTube channel okay there you are uh that is kind of the first example now that we have this what I actually want to show you how to do is automate the Cookie Clickers website let me set up that demo and we'll be right back all right so I've gone to the famous website of Cookie Clickers which was one of my favorite games when I was younger and in school anyways the point of this game is you click on this cookie it gives you a bunch of cookies here and then you can buy some upgrades which will automate the cookie collection process so you can buy this cursor upgrade for example and it should just automatically click the cookies for you you can buy all these other kind of upgrades that appear very simple though you just collect as many cookies as possible and what I want to show you how to do here is automate this site now to automate the site what we would need to do is navigate to the site we're going to have to click on this cookie infinitely so as many times as we can now once we have enough cookies to buy an upgrade we're going to actually go over and click on that upgrade to purchase it and this way I'll be able to show you how we access the value of different elements and do things dynamically on the website so this will give you a bit of a better idea of how to do a more indepth automation obviously still pretty simple but I think this will be a good thing to look through so the URL is right here but I will leave this in the description you also can just Google Cookie Clickers and it'll pop up really easily and I've just set up the same kind of boiler plate that we had before so I brought in all my imports I brought in my service and my driver and I'm now going to this website so now what we can do is actually pop up this website so I should have left this open and kind of the first thing we want to do here is we want to start locating the classes that we're going to want access to when we're automating this site so I'm going to right click on this and click on inspect and you'll see here that we have this button and it's called big cookie and this is the ID so what I'm going to do is just copy in this ID and the first thing we'll do is we'll just look for an element that that has this big cookie ID and then we'll start clicking on it okay so we can do that as step one we can say the cookie uncore ID is equal to big cookie and then we can find this so we can say the cookie is equal to driver. findor element this is going to be by the ID and then we're going to say comma cookie ID and for now we can simply say cookie. click now there is going to be an issue here but I want to show this because it's somewhat educational what I'm going to do is run my Cookie Clickers file I created a new python file here so I'm going to go ahead and run that and notice actually that what happens right away is we get an error now the reason we get an error is it says that the element we're trying to click is not clickable at this point and the reason we got that is because you might have noticed that when this popped up we'll see if we can look at it quickly again it actually asked us to pick a language now this is something again that could happen that might not happen in your instance because you might have already selected a language like I did so what we need to do in this instance is actually select a language once we select the language it's then going to load again and then we can start pressing on the cookie so to select the language that's kind of the first thing we'll need to do here so what I'm going to do here is just copy in this line right here because we're going to use this to wait for the presence of an element and what I'm going to show you how to use here is something known as the X path now X path is kind of this fancy syntax that you can use that allows you to search for specific text specific attributes all kinds of stuff I'm just going to copy in the exact line that we need I'll kind of explain it a bit but if you want an X paath piece of code and you don't know how to write it you can just go to chat GPT and say hey here's the HTML element I'm trying to Target or I you know you can kind of describe what it is that you need and it will give you actually the F XPath syntax sorry so again I know it seems a little bit weird we have two slashes and asteris set of square brackets and then we're using a function called contains and what we're looking for is some text so the text inside of an HTML element that contains English because this is the language we're going to select I know that's not super clear but this is X path you can look it up if you want more information kind of a cool way to select HTML elements I'm not an expert so that's going to be the extent of my explanation so we're going to wait for that language to pop up then we're going to say language is equal to driver. find okay and we're going to find by X path this language and we're simply going to click on it now to click on it we can just say language. click okay so we're just going to click on that element and now we're going to wait for the cookie element to appear so we're going to copy this okay and we're going to go by ID cookie ID we're going to paste that inside of here and then we're going to say time. sleep 10 seconds down here so now what should happen is we will wait for the language to appear click on the language wait for the cookie to appear and then click on the cookie okay so we're going to go ahead and run this code give this a second here to load up and we got an issue here it says web driver has no attribute find okay this because needs to be find element sorry about that guys let's fix that up okay give this a second and there you go it went ahead and clicked on the language and then it clicked the cookie one time sweet now notice we have our upgrades down here so what we'll have to do is actually find um what do you call it here the classes of those upgrades so we can look at them we also need to know how many cookies we have so if we open up Cookie Clickers here you can see that first of all if we want to see the number of cookies that we have it is inside of this div so if we open this up we can go inside of here and that's not right inspect um okay for some reason reason it's having trouble telling me where the cookies are I think it might be here ah there you go so we have div ID cookies okay so that's what we want we're going to access the ID cookies to see how many cookies that we have so let's start with that we're going to say our cookies ID is equal to cookies let me just minimize this for now and what we'll do is we will set up a while loop here and we'll say while true and while this is true we're going to click the cookie and we're simply going to print how many cookies we have so that we can see what that number is so we're going to say our cookies count this is going to be equal to driver. findor element we're going to say buy doid again and then this is going to be the cookies ID okay now what we want to do is access the text like that so now what we can do is we can print out the cookies count which is is going to give us the text inside of that element and before we do that we can say cookie doclick so now we should just infinitely click the cookie and be printing out how many times or how many cookies we have so let's run this code and give this a look okay give this a second to go through here and we got an issue and it says what is the problem okay I got a weird issue there but I'm just going to remove this cookie click online 30 which I think will actually be the issue I'm going to go here and run this again and let's hope that it works this time okay give this a second and there you go now it's working and you can see it's printing out how many cookies we actually have now I'm going to stop this and notice it says 123 cookies per second zero okay don't worry about that what we want to do now is just get the number because we need to have just the number not this whole string part so to do that I'm just going to go to here and I'm going to say do split at a space and I'm going to grab the first value here then I am going to say the cookies count is equal to the cookies count do replace and I'm going to replace all the commas with an empty string and convert this into an integer the reason for that is that we might have commas in this number if you have a comma it's going to cause an issue in Python so we're going to remove all of those and convert this into an integer and now if we print out the cookies count will just give us that numeric value now that's fine I think that we understand that's going to work now we want to look at the upgrades so if I click on the upgrade here you can see that the upgrades are within this product zero product one product two and product 3 ID field and what we need to know is actually the price of the upgrade so if we go into content you can see that we have these IDs here and they say product price zero and at the same time they'll say product price one product price two product price three so what we want to do is essentially iterate or look through all of these different IDs see what the price of the upgrades are and if we have enough cookies we want to click on them so I'm going to show you the code to do that what we're going to do here is we're going to write the product price prefix is equal to product price and we're going to say the productor prefix is equal to the product like that okay now what we will do is we're going to say four I in range four because we have four products that we want to iterate through we're going to say the product uncore price is equal to the driver. find element and this is going to be the product price prefix plus the string of I and we're going to do this by do ID because they're all ided okay now what I'm saying is okay I I want to look for product price first zero then product price one then product price two then product price three now just like before I need to do this conversion so I'm going to say product price is equal to product price dot replace and I'm going to replace the commas with an empty string to remove them and I'm going to convert this to an integer and I'm going to say if my cookies count is greater than or equal to the product price then what I'm going to do is actually locate the product now the way I'll do that is the following I'm going to say product is equal to driver. findor element and I'm going to find Again by ID this is going to be the product prefix plus the string of I and I'm simply going to click this now there's a few other things that we need to do but this is kind of the basic idea we're going to iterate through all of the different products if we can afford any of those products we're going to go ahead and click on them once we click on them we'll simply break the for Loop and then we'll continue this process that means anytime we have enough cookies to be able to upgrade we'll automatically do that upgrade and that's all we need to do now a few things to note here first of all I found the price okay so once I find the price if I have enough cookies based on the price what I'm going to do is find the product the reason I need to find the product is because that's the button whereas the price is that little text tag if I try to click on the text tag it's going to give me an error I need to click on that button as a whole so that's why I have two separate finds here um that I'm looking at hopefully that makes a bit of sense now one thing that we need to do is we just need to make sure that this product price is actually a string because it's possible that it won't be so what I can do is simply say this if product price dot is digit so I'll say if not product price. is digigit then we are simply going to continue which just means we'll go to the next product this way we don't get an issue when we try to convert it into a uh integer now I can also actually just throw the do replace up here and this reminds me I also need the text so let's say text. replace okay so I'm going to grab this element I'm going to grab the text inside of it I'm then going to replace the comma with the space so that we get nothing there I'm just going to remove that here cuz we no longer need that okay I'm hoping that's clear but this actually would be the finished code so if we go ahead and run this now we might get an error we might not let's see and figure out if this is working okay brings us over here to Cookie Clicker and we do get an error it says stale element reference okay I'm not sure what that is sometimes I think you just get a weird bug with a caching issue so if I rerun this maybe it will fix itself and there you go it did fix itself and notice it actually will automatically go over here and click on the cursor uh every time we have an upgrade so it'll just keep doing this and eventually once we get to the point that the cursor is more expensive than the grandma upgrade then we would go to the grandma upgrade and vice versa okay now you can see why I needed to remove the commas because we have like one comma 1,000 that's obviously going to be an issue and python is not going to like that so I needed to remove it so we can let this run as long as we want to but that is automating Cookie Clickers and that's pretty much all I had to show you in this video so with that said I think I will wrap it up here this code will be available from the link in the description I hope you enjoyed I look forward to seeing you in another YouTube video
