With timestamps:

00:01 - hey guys and welcome back to another
00:04 - YouTube video so in today's video I'm
00:06 - going to be doing a tutorial on coding
00:08 - tic-tac-toe in Python now this is going
00:11 - to be a text based game not a graphical
00:13 - based game but it's going to introduce
00:15 - us to AI on a really simple level so
00:18 - this your first time dealing with any
00:19 - type of artificial intelligence it's
00:21 - definitely a good tutorial to follow and
00:23 - even if you just want to make a cool
00:24 - little tic-tac-toe game then definitely
00:26 - stick around for the tutorial and watch
00:28 - so what I'm gonna be doing is I'm gonna
00:30 - be walking through all of the code how
00:32 - everything works and typing it out with
00:35 - you guys step-by-step so I'm just gonna
00:36 - give you an example of what the game is
00:38 - gonna look like because I've already got
00:39 - it coded I'm just gonna retype
00:41 - everything go through everything in
00:42 - detail so it asks you to choose a
00:45 - position that you want to place in X and
00:48 - two pieces so what we're gonna do is
00:49 - we're gonna say the user always goes
00:50 - first and we have a 1 to 9 grid here so
00:54 - 1 2 3 4 5 6 7 8 9
00:57 - choose your position I'm just gonna say
00:58 - to can see our computer picks where they
01:01 - want to go and then we can get to choose
01:03 - our position again in this case I'm
01:05 - gonna go 5 we are blocked where else
01:08 - should we go now 6 like that and then
01:11 - I'm just gonna see if the computer will
01:12 - take the winning move which it should
01:14 - I'll go 9 it says when this time do you
01:16 - want to play again and then we can
01:18 - proceed to play again if we'd like to
01:20 - and that is pretty much what the game is
01:22 - gonna look like once we're done so I
01:24 - don't know if this is going to be
01:25 - multiple tutorials or not it depends on
01:26 - how long it takes me to do this
01:29 - I asked mate it's probably on take close
01:31 - to maybe an hour cuz I coded it in like
01:34 - 40 minutes so if I would need to explain
01:36 - everything it's gonna take a bit longer
01:37 - um so just bear with me if it's multiple
01:39 - tutorials you know what I'm try to break
01:40 - it into maybe two or three videos okay
01:43 - so what I want to do to start is I
01:45 - already have all of my main functions
01:49 - written out and this is what I like to
01:50 - do to start my programs just so I make
01:52 - sure I don't forget anything and so I
01:54 - know what I need each section of code to
01:57 - be doing so insert letter should say
02:00 - space space is free print board is
02:02 - winner player move called can't move
02:04 - computer whatever select random don't
02:07 - need to count moves do I is board full
02:10 - and then
02:11 - main so you guys can take a second to
02:13 - copy these out or you can just write
02:15 - them as I start filling them in so the
02:18 - first thing we need to do when we're
02:19 - coating a tic-tac-toe game is we need a
02:21 - board so this is what's gonna store our
02:23 - X's and O's for the program so I'm just
02:26 - gonna populate this board list with 4x
02:28 - in range 10 now the reason I'm saying 10
02:32 - instead of 9 is because I want to have
02:34 - one leading space in my list so if I
02:37 - have a list like this I want it to look
02:39 - like this
02:39 - and then so on so I want this to always
02:43 - be empty because when I ask the user to
02:45 - input a number or position they're
02:47 - giving me from 1 to 9 they're not giving
02:50 - me from 0 to 8 so I just want to leave
02:52 - this here so that it makes things
02:54 - simpler throw the rest of the program
02:55 - you'll understand what I mean if you
02:57 - don't get it right now so the next thing
02:59 - I want to do is I just want to start
03:00 - filling in some of these functions with
03:02 - really basic code so insert letter this
03:05 - is gonna do exactly what it says it's
03:06 - just gonna insert the letter into our
03:08 - board list so I'm just gonna say board
03:11 - pause equals letter really simple so
03:16 - whenever we want to insert a letter we
03:17 - call this we give it the letter wheel
03:18 - and insert and then the position where
03:20 - we are inserting that letter space is
03:22 - free what this one is gonna do is
03:24 - they're just gonna check if the space
03:26 - that we'd like to insert something into
03:28 - is free or if it's not free so if it
03:31 - already has an X or an already has a no
03:32 - this is really easy I'm just gonna
03:34 - return and then we say board pause
03:40 - equals equals blank space like that now
03:43 - that's just gonna give us a true or
03:45 - false value because that's a boolean
03:46 - condition and now print board so we want
03:49 - to print out our board in like a
03:51 - good-looking way so that the user can
03:53 - actually see what's going on so bear
03:55 - with me for this one it's kind of
03:56 - annoying to print this out just follow
04:00 - along with what I type here I have my
04:01 - other window open so I'm just gonna copy
04:02 - that to make sure I don't mess
04:03 - everything up straight line straight
04:07 - line that needs another space yeah it
04:10 - does and there we go and then I need to
04:14 - go print
04:16 - space plus board 1 plus and this is
04:23 - gonna be embedded like that plus 4 2
04:27 - plus plus 3 oops that is a 3 plus and
04:40 - there is no plus again there you just go
04:42 - stored 3 ok now after that I need to
04:45 - print this again so I'm just gonna copy
04:48 - that should just copy the whole thing
04:50 - that's right going to print 10 dashes
04:53 - like this 1 2 3 4 5 6 7 8 9 10 actually
04:59 - one more I think
05:01 - or yeah 11 I believe that's 11 dashes or
05:05 - maybe I just miscounted I don't know
05:06 - whatever that is that somebody needs to
05:07 - print then I'm gonna reprint this
05:10 - it's about pasting that they're gonna
05:13 - copy this and just change the numbers in
05:16 - here so we're printing the next row so
05:18 - in this case contains up to 4 5 6 like
05:22 - so we're gonna copy what we just wrote
05:25 - here print this afterwards and then we
05:30 - only have two more lines left we're
05:33 - gonna print this again changing the
05:35 - numbers - why don't we start at 7 8 & 9
05:43 - and then we're going to finish off with
05:46 - one more of these like that now I know
05:50 - that's extremely tedious to print but
05:53 - that's the only time we're ever gonna
05:54 - have to do it and that's why we make a
05:56 - function so that we don't have to type
05:57 - this a bunch of times we can just call
05:58 - it so that should work if I notice that
06:01 - I did anything wrong I'll go back in the
06:03 - program and fix it for you guys and make
06:05 - sure I let you know that that looks good
06:07 - to me
06:07 - okay so we have insert letters spaces
06:09 - free and print board now what I want to
06:12 - do is I want to run into our next
06:15 - function here which is is winter now
06:18 - we're just gonna check in this function
06:21 - if this stands for board by the way in
06:23 - the stands for letter if we have a
06:25 - winner based on the current board now
06:28 - this if one again is an
06:30 - another tedious one to do I'm just
06:31 - getting these out of the way at the
06:32 - beginning but pretty much we're just
06:34 - gonna have to check if every single line
06:36 - on the board is populated with the
06:39 - letter so we're gonna say return and
06:43 - we're gonna just do brackets like this
06:44 - and I say Bo I know it's a weird name
06:48 - for that for it which just sense your
06:50 - board equals equals L e & v o8 this
06:56 - equals L U and V o.9
06:59 - because equals le so this we've just
07:01 - officially done our first row I'm going
07:04 - from bottom to top so seven eight nine
07:06 - if that's full we have a row there is
07:08 - indeed a winner let me say or and I'm
07:10 - just gonna go down to the next line just
07:12 - so things are a little bit cleaner you
07:13 - say bo4 equals equals e le and bo5
07:21 - please le and beo6 equals equals le or
07:27 - and then same thing again down here vo 1
07:32 - equals equals le and video to physicals
07:38 - le and not in the brackets there don't
07:42 - know what I did there oops square
07:44 - bracket goes back over here my bad
07:46 - and bo3 equals equals le or and we'll go
07:53 - the next one I suppose I could probably
07:55 - just copy this so we've done three rows
07:56 - now we have seven eight nine four five
07:59 - six and one two three so those are our
08:02 - rows going across now we need to do our
08:04 - rows going down so to go down we're
08:06 - gonna say if Bo one goes equals le and
08:11 - Bo four equals equals L e & v o7o is
08:19 - equals le and now or and again I'm just
08:23 - gonna copy this cuz I think it's gonna
08:24 - save some time if I copy it a few times
08:27 - and just change it so now we need you to
08:31 - say two five and eight I believe five
08:36 - eight and then this one is going to be
08:40 - three six and nine and now all that is
08:45 - left to do is our diagonals so I'll copy
08:48 - this one more time and our diagonals are
08:50 - one five and nine and two one more time
08:55 - we have three five and seven
09:00 - no is it seven yes it is okay and that
09:04 - should be about right now again if I
09:08 - notice that anything's around here I'm
09:10 - gonna change it later but I think I did
09:12 - everything correctly for that so that's
09:15 - the tedious stuff out of the way and now
09:18 - we can move down to our main function so
09:20 - already we've written insert letter
09:22 - spaces free print board and is winner
09:24 - all of these are really simple what this
09:27 - is just gonna do is it's gonna check
09:28 - each position in the grid so it's gonna
09:30 - say four which would be second row first
09:33 - column and then five which would be
09:35 - second row second column second row
09:38 - third column so on and if those are all
09:40 - full then we have a winner and then it's
09:42 - gonna return that as either true or
09:43 - false based on if this condition holds
09:46 - true so now in our main this is where
09:49 - we're actually gonna be executing the
09:51 - functions and the commands so what we
09:54 - want to do in here is I'm just print
09:55 - like a little welcome message
09:57 - welcome to tic-tac-toe exclamation point
10:02 - you can put whatever else you want in
10:03 - there if you want to explain the game
10:04 - I'm not gonna bother just gonna go ahead
10:07 - and say welcome to tic-tac-toe and then
10:09 - after that we're going to print our
10:12 - board up and just show them what the
10:15 - board looks like so they can then see
10:16 - like one two three four five six seven
10:17 - eight nine for example and now I'm gonna
10:20 - start my main loop I'm just gonna say
10:22 - wow true like so and then in here is
10:26 - where we are going to write all of our
10:28 - commands so I'm actually just gonna
10:31 - start filling them in now and then the
10:33 - functions that we haven't yet written
10:34 - we'll go ahead and we'll write those so
10:37 - actually instead of true what I'm gonna
10:39 - say here if if if not is board full and
10:45 - then we're going to pass it board
10:47 - because if our board is full then that
10:50 - means that we tied the game so we don't
10:53 - want to continue with our
10:54 - we want to move to the next command
10:56 - which is gonna be down here we're going
10:58 - to say if bored part if is bored pull
11:04 - like that bored then we're gonna print
11:07 - to the screen tie game
11:12 - like so because there's no more spaces
11:13 - left to move so the game is tied and we
11:16 - can print simply print that out at the
11:19 - bottom there all right now in here so if
11:21 - the board is not full we want to execute
11:24 - our commands where we're going to check
11:26 - we're gonna do a player move and then
11:28 - we're gonna do a computer move and we're
11:30 - gonna check to see whether each of them
11:32 - win so in here I'm going to say if not
11:34 - is winner board with oh and I'll explain
11:43 - us in one second once I've just finished
11:44 - writing it then we're gonna do a play
11:45 - roof like that and then we're gonna
11:52 - print it like so so what this is is
11:57 - gonna be doing right now is we're going
11:59 - to check to see if the computer has one
12:02 - since our computer's gonna be O's and
12:03 - we're gonna be X's we're first gonna
12:05 - check we're gonna say if we check and we
12:08 - say that the board is full we have a
12:09 - straight line of OS well there's no
12:11 - point in doing a player move on because
12:13 - O's already won so in that case we write
12:16 - an else here and we're just gonna print
12:18 - to the screen um I'm gonna say story
12:22 - coma and then I'm shooting a backslash
12:25 - to second Drive is O's one this time
12:28 - like that because that means that the
12:32 - board was full of O's they won there's
12:34 - no point of doing a player move so let's
12:35 - let the player know that and then move
12:38 - on and then from here I'm gonna break
12:40 - and what break is gonna do is it's gonna
12:42 - break us out of this while loop so we
12:43 - can though then go to continue and ask
12:46 - the player do they want to play again
12:47 - because we're not gonna continue going
12:49 - through the loop if we already
12:51 - determined a winner right so now I'm
12:53 - going to write a similar thing for the
12:55 - computer so I'm just going to copy this
12:58 - paste it down here and in this case now
13:02 - I'm gonna check to see if the player won
13:04 - so what happens here is we said if the
13:08 - computer one we're gonna say Cerrillos
13:10 - one this time we're gonna break the
13:11 - program in this case we're going to say
13:12 - if the player won because they just
13:14 - moved up here then we're gonna say story
13:17 - x1 this time or in this case since it's
13:20 - a player we'll say X is X is 1 this time
13:25 - good job because we're rewarding the
13:28 - player for doing good job in winning the
13:30 - game except in here we're gonna change a
13:32 - few things um once we get into like the
13:35 - actual sequence of the computer move but
13:37 - for now just gonna change this to can't
13:41 - move like that
13:41 - and we'll come back to this and and
13:44 - finish that later okay so now we've used
13:48 - this player move function and we've also
13:51 - used this is board full function but we
13:52 - haven't yet finished writing these
13:54 - functions out so the first thing I'm
13:56 - going to do is is board full and again
13:58 - what this is gonna do is just going to
13:59 - return true or false if the board is
14:01 - full so a really easy way to do this is
14:03 - we have our board variable up at the top
14:05 - that has a bunch of blank spaces in it
14:06 - or X's and O's right so if we have more
14:09 - than two or or more than one blank
14:12 - spaces then our board is not full
14:14 - because we started with that blank space
14:16 - that's always gonna be blank at the
14:17 - beginning but if there's another one
14:19 - that means there's one more position
14:20 - that we could move so we're gonna just
14:22 - say if the board dot count blank space
14:26 - like that is greater than 1 return true
14:31 - else and then we return false
14:36 - nice and simple like that now you might
14:39 - say well if it's not easy why don't we
14:41 - just type it in here the whole point is
14:43 - that we never want to repeat code when
14:46 - we're writing so if I'm even think I'm
14:48 - gonna use this two maybe three times it
14:51 - just makes sense to put it in a function
14:52 - it's also easier just to read your code
14:55 - like that so you say well not is board
14:57 - full so if the board is full like you
15:00 - know exactly what it means and for
15:01 - someone else reading it it just makes
15:02 - more sense to do that
15:04 - so now we're gonna go to player moves so
15:06 - we've done this is board full and in
15:09 - player move this is where things get a
15:10 - little bit more calm
15:11 - but not too bad so what we want to do
15:14 - here is we want to just make another
15:16 - loop because we don't want to move
15:18 - through the program unless the player
15:19 - gives us a valid answer so just follow
15:22 - along with me here ball run and now I'm
15:25 - just gonna say move equals input I'm
15:28 - gonna ask the user where they want to
15:30 - move so I'm just going to say please
15:33 - select a position to place and X like so
15:41 - and I'm just gonna put this in quotation
15:42 - marks and you can just get these by
15:45 - doing a little backslash like that and
15:49 - then do like a comma or else put in
15:52 - brackets one to nine so they know what
15:54 - I'm expecting as possible answer now
15:57 - what I want to do is I'm gonna run a try
15:59 - and accept statement I'm just to make
16:01 - sure that they are giving us a number
16:03 - because for example if the user were to
16:05 - type 8 where they typed it like that
16:07 - then I would throw an error and we don't
16:09 - want our program to crash we want to
16:10 - catch that error so that we can then
16:12 - move forward with the program ask the
16:14 - user again type another will and type
16:16 - another one until they give us valid
16:17 - input so say try and then hear me to say
16:20 - move equals in to move because if they
16:25 - try to give us something that's a string
16:26 - for example like hello then obviously
16:28 - you can't into that so it's just gonna
16:30 - crash and it'll go to our except
16:31 - statement which I'm going to write there
16:34 - and get into in a second after that I
16:37 - want to make sure that our the move that
16:40 - they type in is within the range so if
16:42 - for example they typed a move like 28
16:44 - well what the heck does 28 mean to us it
16:47 - means nothing they need to type
16:48 - something between 1 and 9 so to check
16:50 - that we just say if move is greater than
16:54 - 0 and is less than 10 then we're good
16:58 - and we'll go to the next check that we
17:01 - need to do so now that we have valid
17:03 - input so they've given us a number
17:04 - between 1 and 9 it's all good now we
17:07 - need to make sure that where they're
17:08 - moving isn't already occupied and that's
17:10 - where the is space free or space is free
17:13 - function comes in so again in here I'm
17:16 - just gonna say if space oops
17:20 - is free and I'll put move in there then
17:24 - what we'll do is we're gonna say Ron
17:26 - equals false because now in this case we
17:29 - no longer need to keep running this
17:30 - input because they've given us valid
17:32 - input the space is free it's a number
17:33 - between 1 and 9 and we're gonna insert
17:36 - it into our table and remember we did
17:38 - and our will just say insert letter here
17:41 - insert letter function that we do at the
17:43 - beginning our letter is gonna be X cos
17:45 - its player and the position is going to
17:47 - be moved where they wanted to move like
17:50 - that
17:50 - now if these things aren't good what we
17:53 - want to do is we want to tell the user
17:56 - what's wrong with their input
17:57 - so our first else statement is going to
17:59 - be out here and what it's going to check
18:02 - is where it is gonna say if the move was
18:05 - a valid number but it wasn't in between
18:07 - the range let's tell them that let's say
18:09 - print please insert or please type a
18:17 - number within the range like so little
18:22 - exclamation point and then our other
18:24 - else statement was in here and this one
18:26 - says space is free like we're gonna say
18:30 - sorry comma this space is occupied like
18:36 - that now we need to do our final
18:40 - exception here whatever print statement
18:43 - and in this case we're just gonna say
18:46 - please type a number because if we
18:51 - couldn't int it then we're gonna move
18:53 - into the accept and that's because they
18:56 - didn't type a number we couldn't int it
18:57 - and that's pretty much grabbing our
18:59 - player move for us and that's all we
19:01 - really need for the player move function
19:03 - so now that we've finished that let's go
19:06 - through and just kind of summary what
19:08 - we've done so we've created a board we
19:11 - filled it up with a bunch of blank
19:12 - spaces and then we've made our insert
19:15 - letter function which is going to insert
19:16 - a letter into our board we've checked if
19:18 - the space is free by writing space is
19:20 - free function we have another function
19:22 - that's going to print the board so it
19:25 - looks proper on the screen we have a
19:27 - function that checks if one of our
19:29 - players is a winner or not we're at the
19:31 - computer's winner we have a function
19:33 - that grabs our player move
19:34 - sure that they give us valid input and
19:36 - then we have we can see if the board is
19:38 - full and then in here we go through the
19:40 - sequence of do a player move then do a
19:42 - computer move and we're checking if one
19:45 - of them wins throughout though
19:47 - [Music]

Cleaned transcript:

hey guys and welcome back to another YouTube video so in today's video I'm going to be doing a tutorial on coding tictactoe in Python now this is going to be a text based game not a graphical based game but it's going to introduce us to AI on a really simple level so this your first time dealing with any type of artificial intelligence it's definitely a good tutorial to follow and even if you just want to make a cool little tictactoe game then definitely stick around for the tutorial and watch so what I'm gonna be doing is I'm gonna be walking through all of the code how everything works and typing it out with you guys stepbystep so I'm just gonna give you an example of what the game is gonna look like because I've already got it coded I'm just gonna retype everything go through everything in detail so it asks you to choose a position that you want to place in X and two pieces so what we're gonna do is we're gonna say the user always goes first and we have a 1 to 9 grid here so 1 2 3 4 5 6 7 8 9 choose your position I'm just gonna say to can see our computer picks where they want to go and then we can get to choose our position again in this case I'm gonna go 5 we are blocked where else should we go now 6 like that and then I'm just gonna see if the computer will take the winning move which it should I'll go 9 it says when this time do you want to play again and then we can proceed to play again if we'd like to and that is pretty much what the game is gonna look like once we're done so I don't know if this is going to be multiple tutorials or not it depends on how long it takes me to do this I asked mate it's probably on take close to maybe an hour cuz I coded it in like 40 minutes so if I would need to explain everything it's gonna take a bit longer um so just bear with me if it's multiple tutorials you know what I'm try to break it into maybe two or three videos okay so what I want to do to start is I already have all of my main functions written out and this is what I like to do to start my programs just so I make sure I don't forget anything and so I know what I need each section of code to be doing so insert letter should say space space is free print board is winner player move called can't move computer whatever select random don't need to count moves do I is board full and then main so you guys can take a second to copy these out or you can just write them as I start filling them in so the first thing we need to do when we're coating a tictactoe game is we need a board so this is what's gonna store our X's and O's for the program so I'm just gonna populate this board list with 4x in range 10 now the reason I'm saying 10 instead of 9 is because I want to have one leading space in my list so if I have a list like this I want it to look like this and then so on so I want this to always be empty because when I ask the user to input a number or position they're giving me from 1 to 9 they're not giving me from 0 to 8 so I just want to leave this here so that it makes things simpler throw the rest of the program you'll understand what I mean if you don't get it right now so the next thing I want to do is I just want to start filling in some of these functions with really basic code so insert letter this is gonna do exactly what it says it's just gonna insert the letter into our board list so I'm just gonna say board pause equals letter really simple so whenever we want to insert a letter we call this we give it the letter wheel and insert and then the position where we are inserting that letter space is free what this one is gonna do is they're just gonna check if the space that we'd like to insert something into is free or if it's not free so if it already has an X or an already has a no this is really easy I'm just gonna return and then we say board pause equals equals blank space like that now that's just gonna give us a true or false value because that's a boolean condition and now print board so we want to print out our board in like a goodlooking way so that the user can actually see what's going on so bear with me for this one it's kind of annoying to print this out just follow along with what I type here I have my other window open so I'm just gonna copy that to make sure I don't mess everything up straight line straight line that needs another space yeah it does and there we go and then I need to go print space plus board 1 plus and this is gonna be embedded like that plus 4 2 plus plus 3 oops that is a 3 plus and there is no plus again there you just go stored 3 ok now after that I need to print this again so I'm just gonna copy that should just copy the whole thing that's right going to print 10 dashes like this 1 2 3 4 5 6 7 8 9 10 actually one more I think or yeah 11 I believe that's 11 dashes or maybe I just miscounted I don't know whatever that is that somebody needs to print then I'm gonna reprint this it's about pasting that they're gonna copy this and just change the numbers in here so we're printing the next row so in this case contains up to 4 5 6 like so we're gonna copy what we just wrote here print this afterwards and then we only have two more lines left we're gonna print this again changing the numbers why don't we start at 7 8 & 9 and then we're going to finish off with one more of these like that now I know that's extremely tedious to print but that's the only time we're ever gonna have to do it and that's why we make a function so that we don't have to type this a bunch of times we can just call it so that should work if I notice that I did anything wrong I'll go back in the program and fix it for you guys and make sure I let you know that that looks good to me okay so we have insert letters spaces free and print board now what I want to do is I want to run into our next function here which is is winter now we're just gonna check in this function if this stands for board by the way in the stands for letter if we have a winner based on the current board now this if one again is an another tedious one to do I'm just getting these out of the way at the beginning but pretty much we're just gonna have to check if every single line on the board is populated with the letter so we're gonna say return and we're gonna just do brackets like this and I say Bo I know it's a weird name for that for it which just sense your board equals equals L e & v o8 this equals L U and V o.9 because equals le so this we've just officially done our first row I'm going from bottom to top so seven eight nine if that's full we have a row there is indeed a winner let me say or and I'm just gonna go down to the next line just so things are a little bit cleaner you say bo4 equals equals e le and bo5 please le and beo6 equals equals le or and then same thing again down here vo 1 equals equals le and video to physicals le and not in the brackets there don't know what I did there oops square bracket goes back over here my bad and bo3 equals equals le or and we'll go the next one I suppose I could probably just copy this so we've done three rows now we have seven eight nine four five six and one two three so those are our rows going across now we need to do our rows going down so to go down we're gonna say if Bo one goes equals le and Bo four equals equals L e & v o7o is equals le and now or and again I'm just gonna copy this cuz I think it's gonna save some time if I copy it a few times and just change it so now we need you to say two five and eight I believe five eight and then this one is going to be three six and nine and now all that is left to do is our diagonals so I'll copy this one more time and our diagonals are one five and nine and two one more time we have three five and seven no is it seven yes it is okay and that should be about right now again if I notice that anything's around here I'm gonna change it later but I think I did everything correctly for that so that's the tedious stuff out of the way and now we can move down to our main function so already we've written insert letter spaces free print board and is winner all of these are really simple what this is just gonna do is it's gonna check each position in the grid so it's gonna say four which would be second row first column and then five which would be second row second column second row third column so on and if those are all full then we have a winner and then it's gonna return that as either true or false based on if this condition holds true so now in our main this is where we're actually gonna be executing the functions and the commands so what we want to do in here is I'm just print like a little welcome message welcome to tictactoe exclamation point you can put whatever else you want in there if you want to explain the game I'm not gonna bother just gonna go ahead and say welcome to tictactoe and then after that we're going to print our board up and just show them what the board looks like so they can then see like one two three four five six seven eight nine for example and now I'm gonna start my main loop I'm just gonna say wow true like so and then in here is where we are going to write all of our commands so I'm actually just gonna start filling them in now and then the functions that we haven't yet written we'll go ahead and we'll write those so actually instead of true what I'm gonna say here if if if not is board full and then we're going to pass it board because if our board is full then that means that we tied the game so we don't want to continue with our we want to move to the next command which is gonna be down here we're going to say if bored part if is bored pull like that bored then we're gonna print to the screen tie game like so because there's no more spaces left to move so the game is tied and we can print simply print that out at the bottom there all right now in here so if the board is not full we want to execute our commands where we're going to check we're gonna do a player move and then we're gonna do a computer move and we're gonna check to see whether each of them win so in here I'm going to say if not is winner board with oh and I'll explain us in one second once I've just finished writing it then we're gonna do a play roof like that and then we're gonna print it like so so what this is is gonna be doing right now is we're going to check to see if the computer has one since our computer's gonna be O's and we're gonna be X's we're first gonna check we're gonna say if we check and we say that the board is full we have a straight line of OS well there's no point in doing a player move on because O's already won so in that case we write an else here and we're just gonna print to the screen um I'm gonna say story coma and then I'm shooting a backslash to second Drive is O's one this time like that because that means that the board was full of O's they won there's no point of doing a player move so let's let the player know that and then move on and then from here I'm gonna break and what break is gonna do is it's gonna break us out of this while loop so we can though then go to continue and ask the player do they want to play again because we're not gonna continue going through the loop if we already determined a winner right so now I'm going to write a similar thing for the computer so I'm just going to copy this paste it down here and in this case now I'm gonna check to see if the player won so what happens here is we said if the computer one we're gonna say Cerrillos one this time we're gonna break the program in this case we're going to say if the player won because they just moved up here then we're gonna say story x1 this time or in this case since it's a player we'll say X is X is 1 this time good job because we're rewarding the player for doing good job in winning the game except in here we're gonna change a few things um once we get into like the actual sequence of the computer move but for now just gonna change this to can't move like that and we'll come back to this and and finish that later okay so now we've used this player move function and we've also used this is board full function but we haven't yet finished writing these functions out so the first thing I'm going to do is is board full and again what this is gonna do is just going to return true or false if the board is full so a really easy way to do this is we have our board variable up at the top that has a bunch of blank spaces in it or X's and O's right so if we have more than two or or more than one blank spaces then our board is not full because we started with that blank space that's always gonna be blank at the beginning but if there's another one that means there's one more position that we could move so we're gonna just say if the board dot count blank space like that is greater than 1 return true else and then we return false nice and simple like that now you might say well if it's not easy why don't we just type it in here the whole point is that we never want to repeat code when we're writing so if I'm even think I'm gonna use this two maybe three times it just makes sense to put it in a function it's also easier just to read your code like that so you say well not is board full so if the board is full like you know exactly what it means and for someone else reading it it just makes more sense to do that so now we're gonna go to player moves so we've done this is board full and in player move this is where things get a little bit more calm but not too bad so what we want to do here is we want to just make another loop because we don't want to move through the program unless the player gives us a valid answer so just follow along with me here ball run and now I'm just gonna say move equals input I'm gonna ask the user where they want to move so I'm just going to say please select a position to place and X like so and I'm just gonna put this in quotation marks and you can just get these by doing a little backslash like that and then do like a comma or else put in brackets one to nine so they know what I'm expecting as possible answer now what I want to do is I'm gonna run a try and accept statement I'm just to make sure that they are giving us a number because for example if the user were to type 8 where they typed it like that then I would throw an error and we don't want our program to crash we want to catch that error so that we can then move forward with the program ask the user again type another will and type another one until they give us valid input so say try and then hear me to say move equals in to move because if they try to give us something that's a string for example like hello then obviously you can't into that so it's just gonna crash and it'll go to our except statement which I'm going to write there and get into in a second after that I want to make sure that our the move that they type in is within the range so if for example they typed a move like 28 well what the heck does 28 mean to us it means nothing they need to type something between 1 and 9 so to check that we just say if move is greater than 0 and is less than 10 then we're good and we'll go to the next check that we need to do so now that we have valid input so they've given us a number between 1 and 9 it's all good now we need to make sure that where they're moving isn't already occupied and that's where the is space free or space is free function comes in so again in here I'm just gonna say if space oops is free and I'll put move in there then what we'll do is we're gonna say Ron equals false because now in this case we no longer need to keep running this input because they've given us valid input the space is free it's a number between 1 and 9 and we're gonna insert it into our table and remember we did and our will just say insert letter here insert letter function that we do at the beginning our letter is gonna be X cos its player and the position is going to be moved where they wanted to move like that now if these things aren't good what we want to do is we want to tell the user what's wrong with their input so our first else statement is going to be out here and what it's going to check is where it is gonna say if the move was a valid number but it wasn't in between the range let's tell them that let's say print please insert or please type a number within the range like so little exclamation point and then our other else statement was in here and this one says space is free like we're gonna say sorry comma this space is occupied like that now we need to do our final exception here whatever print statement and in this case we're just gonna say please type a number because if we couldn't int it then we're gonna move into the accept and that's because they didn't type a number we couldn't int it and that's pretty much grabbing our player move for us and that's all we really need for the player move function so now that we've finished that let's go through and just kind of summary what we've done so we've created a board we filled it up with a bunch of blank spaces and then we've made our insert letter function which is going to insert a letter into our board we've checked if the space is free by writing space is free function we have another function that's going to print the board so it looks proper on the screen we have a function that checks if one of our players is a winner or not we're at the computer's winner we have a function that grabs our player move sure that they give us valid input and then we have we can see if the board is full and then in here we go through the sequence of do a player move then do a computer move and we're checking if one of them wins throughout though
