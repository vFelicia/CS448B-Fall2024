With timestamps:

00:00 - in this video I'll show you how to build
00:01 - a beginner SL intermediate react project
00:04 - specifically will'll work on a trivia
00:06 - game I'll give you a demo in just a
00:08 - second but this project is great for
00:10 - anyone just getting started with react
00:12 - looking really to improve their skills
00:14 - get more comfortable with the framework
00:16 - and learn about some best practices like
00:17 - how to structure a slightly larger
00:19 - project how to pick the different
00:21 - components you're going to have and how
00:22 - to control components and pass data down
00:25 - throughout them I'm going to show you a
00:27 - ton of stuff here and teach you a lot
00:28 - about react with that said let's get
00:30 - into a quick demo and then we'll start
00:32 - building this project so I have a demo
00:34 - of the project running in front of me
00:36 - now this is a simple trivia game you can
00:38 - have as many questions as you'd like but
00:40 - for this short demo I've just gone with
00:41 - two now we'll keep track of the number
00:43 - of correct and incorrect questions and
00:45 - give feedback to the user when they get
00:47 - one correct or incorrect so here you can
00:49 - see the first question is what is Tim's
00:51 - middle name in this case my name is JN
00:53 - so I'll go ahead and select that and
00:55 - then I can click next now it says what
00:57 - is Tim's favorite food I'll go with the
00:58 - incorrect answer here which is which is
01:00 - Wings you see that is wrong and it shows
01:02 - me the correct answer here which is sake
01:05 - now when I click next tells me my score
01:07 - and I have the option to play again now
01:09 - I know that this seems uh relatively
01:11 - simple it feels like this should be able
01:13 - to be created in a few minutes but this
01:15 - is actually a really good project to
01:16 - demonstrate how you structure the
01:18 - different components involved in this
01:20 - and how you can flow through different
01:21 - states Pages show the correct answer
01:24 - incorrect answer there's actually a lot
01:26 - here so just trust me you're going to
01:27 - get a ton of value from this project now
01:29 - as well as just is teaching you react
01:30 - I'm going to show you a little bit of
01:31 - typescript don't worry if you've never
01:33 - used it before I'll assume that you have
01:35 - no idea what it is and you'll see how
01:37 - simple it can be to actually implement
01:38 - this in your project and how helpful it
01:40 - will be when your project starts to get
01:42 - a little bit larger so let me pop over
01:44 - to my IDE and we'll start getting this
01:46 - project set up so we're going to get
01:48 - into the setup and start writing some
01:49 - code but I need to mention that in this
01:51 - video I'm going to be using a free tool
01:53 - called codex now this is actually a
01:56 - visual IDE for react that works in
01:59 - companionship with vs code or whatever
02:01 - other editor you want to use now what
02:03 - that means is that we're still going to
02:04 - write this react application exactly as
02:07 - you normally would but we'll just have
02:08 - some more powerful ability to view
02:10 - exactly what's going on in our
02:12 - individual components and to edit them
02:14 - create layouts add Styles and do some of
02:17 - the more difficult things when you're
02:19 - just looking at the code rather than
02:21 - looking at the entire component tree or
02:23 - hierarchy so for example you can see
02:25 - that I've actually have the app open
02:26 - that I built beforehand obviously I
02:28 - built this first just to make sure the
02:29 - concept was good and you can see I'm
02:31 - kind of inside of a Stop Bar component
02:33 - we'll walk through this later on but
02:35 - inside of the Stop Bar component on the
02:37 - left hand side I can see all of the
02:39 - different elements that I have which
02:41 - allows me to very easily find an area
02:43 - that I need to add a style to or fix or
02:45 - move around and if I click on one like
02:47 - the stap our container here I can go and
02:50 - actually add styles to it directly from
02:52 - this editor so that means for any of you
02:54 - that hate CSS just like I do you don't
02:57 - actually need to write this CSS manually
02:59 - you can do it in this cool editor while
03:02 - still writing all of the bulk of your
03:03 - code in an IDE and what will happen is
03:06 - when you make a change here in codex it
03:08 - will directly change that inside of your
03:10 - IDE it will actually add or remove or
03:13 - modify the appropriate lines of code so
03:15 - you're not doing this weird syncing
03:17 - process where you have to write your
03:18 - code in a special way and you're
03:20 - exporting and importing and all the
03:21 - stuff you've probably seen in tools that
03:23 - look similar like similar to this story
03:26 - so what we need to start by doing here
03:27 - is just downloading codex again it's
03:29 - free you can do that from the link in
03:31 - the description and I'm going to
03:32 - initialize the project from codex so it
03:35 - sets up the necessary dependencies and
03:37 - then we'll start actually writing code
03:38 - and creating our components so what I
03:40 - did is just close the Codex app and
03:42 - reopen it just so I get a fresh screen
03:44 - here and what I'm going to do is go
03:45 - ahead and click on new project now once
03:48 - I go to new project I'm going to select
03:50 - on vit or Vite now you might not have
03:52 - seen this before if you're complete
03:54 - beginner but this is kind of the new
03:55 - version of create react app where you're
03:58 - using this as like the the template of
04:00 - your project or like the boiler plate
04:02 - now for the app I'm going to go with
04:06 - react trivia uh and we'll go with
04:09 - tutorial like that and I will just save
04:11 - this on my desktop now this is going to
04:13 - set us up with SC CSS CSS modules and V
04:17 - again we'll discuss this in a second
04:19 - once it loads all right so it's created
04:21 - that template for us now this is like
04:23 - the exact same thing as running a
04:24 - terminal command that would have done
04:25 - that for us as well just happening now
04:27 - in codex and you can see it's prompting
04:29 - me to actually install all of the
04:31 - modules that we need so I'm going to go
04:33 - ahead and click on run now this is just
04:35 - installing the node modules pretty much
04:37 - going to go ahead and click close And
04:39 - now we get the app loaded here in codex
04:41 - and you'll see in a second it will
04:42 - actually render for us the preview of
04:44 - the template so this is the template it
04:46 - gives us where we can actually uh I
04:47 - think we can press on one of these
04:48 - buttons or something and it will count
04:50 - up anyways uh hopefully you got the idea
04:53 - but now what we'll do is we'll open the
04:55 - project in our editor or in our IDE so
04:58 - just like before nothing's changed CH
04:59 - I'm going to open this up in vs code now
05:02 - when I did that in codex it created this
05:04 - on my desktop for you it may have
05:05 - created it somewhere else so find the
05:07 - file location where this was created
05:10 - open up the project in your editor and
05:12 - now we are good to go so what I can do
05:15 - is open up Source here and I'll just
05:17 - kind of go through some of the things
05:18 - that are set up for us because you may
05:19 - not have seen this type of template
05:21 - before then we'll start writing some
05:22 - code so first of all this project is
05:25 - using typescript now we don't need to
05:27 - use typescript but in this project it's
05:29 - going to be help will just to have a few
05:30 - very simple types so if you've never
05:32 - used it before don't worry you're going
05:34 - to learn a bit about it in this video
05:36 - anyways that's why we have these TSX
05:38 - files these are similar to jsx files but
05:41 - TSX is the typescript okay so it's like
05:44 - the typescript equivalent inside of here
05:46 - you'll see a few things are slightly
05:47 - different just because we're using
05:49 - typescript and we have a few Imports for
05:52 - example importing like an app module.
05:54 - sccss now if you've never seen this
05:56 - before this is a special type of CSS
05:59 - file that allows us to do things like
06:01 - Define variables inherit classes and
06:03 - just some more advanced CSS properties
06:05 - we won't really use many of those in
06:07 - this video but it's nice to be familiar
06:09 - with these types of files and how you
06:10 - import them utilize them Etc so we have
06:13 - say index.css this just a normal CSS
06:15 - file but then we have an app. module.
06:18 - sccss file which has all of the Styles
06:20 - directly for the app component so we'll
06:23 - create a new one of these CSS files for
06:25 - each one of our individual components
06:28 - now what I like to start by doing is
06:29 - just cleaning everything up a little bit
06:31 - so I'm actually going to delete
06:32 - everything inside of here I'm going to
06:34 - go to index.css same thing I'm going to
06:37 - delete everything inside of there I'm
06:39 - going to go to main. TSX we can keep all
06:41 - of this this is what's going to be the
06:43 - entry point of our application I'm then
06:45 - going to go to app. TSX and I'm going to
06:48 - delete everything except one of the divs
06:51 - that's inside of here now that's going
06:53 - to have a bunch of uh kind of unused
06:55 - Imports now so I'm going to get rid of
06:58 - all of those I will get rid of this
07:00 - state which means I can get rid of this
07:03 - as well and I'm going to remove the
07:04 - class name reference here from Styles
07:07 - but we will use Styles later on so now
07:09 - we should just have an empty application
07:11 - and if we want to verify that I can go
07:13 - back to codex here and open that up and
07:15 - you can see inside of the app it's
07:17 - completely empty now what we're going to
07:19 - be doing is just writing um some new
07:21 - components and kind of creating a bit of
07:23 - structure here and then I'll show you
07:25 - step by step how we view exactly what
07:26 - we're doing in codex now we also can run
07:29 - this from a Dev server so that means I
07:31 - can go here and I can type npm run Dev
07:35 - in my terminal and this will just run
07:36 - the dev server for me where now I can
07:38 - view this from my browser now we can
07:40 - view this from the browser like we
07:41 - normally would but in codex we're going
07:43 - to get a bit more power right with the
07:45 - ability to actually edit and view right
07:47 - into the tree in the hierarchy which
07:49 - will be a little bit more useful so I'm
07:51 - going to close this for now because we
07:53 - don't really need that this second all
07:54 - right so now that we've got our setup
07:56 - done and we're kind of in the app here
07:57 - we can start writing some code so I want
07:59 - to begin by breaking down what it is
08:02 - exactly we need to do and how we're
08:03 - going to accomplish that so we're
08:05 - creating a trivia game right and for
08:07 - that trivia game you saw that we're
08:09 - going to have a few different components
08:11 - we're going to have multiple questions
08:12 - and we're going to progress through the
08:13 - different questions uh and just allow
08:15 - the user to answer them right pretty
08:17 - straightforward we're going to keep
08:18 - track of their score at the end so the
08:20 - first thing we need to consider is where
08:21 - are we going to store our questions and
08:23 - how are we going to load those now I
08:25 - want to do this in a Json file that
08:27 - means that we'll have an individual file
08:29 - that will load all of the questions from
08:31 - and that way we can add more questions
08:33 - quite easily we could download sets of
08:35 - questions we can make this quite
08:36 - flexible so I'm going to begin by making
08:38 - a Json file now after we make a Json
08:41 - file what we'll need to do is load in
08:43 - those questions we can randomize them or
08:45 - Shuffle if we want to do that then we
08:47 - need to display them to the screen and
08:49 - when we're displaying them to the screen
08:50 - we want to keep track of what question
08:52 - we're on how many we got correct and how
08:54 - many we got incorrect so that's going to
08:56 - involve having that kind of stat bar
08:58 - component there so we can build that out
09:00 - then we're going to have an individual
09:02 - question now each question could be
09:04 - represented as a component then within
09:06 - the question we'll have the question
09:08 - itself and we'll have the possible
09:10 - answers each one of those answers
09:12 - logically makes sense to be a component
09:13 - as well so we'll go through this step by
09:16 - step as we actually build the code but I
09:17 - want you to think to yourself if you
09:19 - were making this from scratch how would
09:20 - you figure out what components you're
09:22 - using and what you want to consider is
09:24 - what is going to be reused what am I
09:26 - rendering multiple times to the screen
09:28 - and what makes sense to be its own kind
09:30 - of isolated and discreet object or in
09:32 - this case component now it's relatively
09:34 - simple for this project you'll see how I
09:36 - structure this and how we build it out
09:38 - and make everything nice and simple and
09:40 - easy to read uh each step of the way so
09:42 - let's start with that Json file we're
09:44 - going to go inside of source here and
09:45 - we're going to make a new file called
09:48 - questions. Json now Json is Javascript
09:51 - object notation so what we can write in
09:52 - here looks pretty much like a JavaScript
09:54 - object so we're going to write a set of
09:56 - curly braces we're going to do a key
09:58 - here here now the key is going to be
10:00 - questions colon and then I'm going to
10:02 - put an array now inside the array we're
10:05 - going to have objects that represent
10:06 - each question so we're going to make an
10:08 - object here and for each question we
10:11 - need to think okay what makes up a
10:13 - question well we have the actual
10:14 - question itself or like the text or the
10:16 - content we then have the possible
10:18 - answers in our case we'll go with four
10:20 - but it could be more if we want to and
10:22 - then we'll have what the correct answer
10:24 - is so we're going to say question as a
10:26 - key is equal to a string and then we'll
10:29 - put the question now you can make this
10:30 - whatever question you want in my case
10:32 - I'll just go with what is my name okay
10:36 - then we're going to have the answers
10:38 - like that this is going to be an array
10:41 - and inside here we're going to put the
10:42 - potential answers now we'll have Tim
10:44 - that'll be the correct answer we'll have
10:47 - John we'll have Susan we'll have maybe
10:51 - Bert and then we're going to go with
10:54 - correct answer idx which stands for
10:57 - index and I'm going to make this equal
10:59 - to zero now what I'm saying there is
11:01 - that the index of the correct answer is
11:03 - zero meaning the first option I have in
11:06 - my answers array if I did correct answer
11:08 - index is one that would indicate that JN
11:10 - is the correct answer so I'm just
11:11 - specifying which of the potential
11:13 - answers here is actually correct and
11:15 - rather than answers we could actually go
11:17 - with choices that might make a bit more
11:19 - sense okay so I'm going to copy this and
11:23 - paste and I'm going to say what is my
11:26 - last name and then we'll change this
11:29 - so that is actually my last name uh we
11:31 - can go with I don't know what's a good
11:33 - last name like
11:36 - Smith um
11:39 - an and I don't know Jose I know those
11:42 - aren't really last names but that's fine
11:44 - we'll just put those there okay so now
11:46 - we have two questions we can add some
11:47 - more later on but for now this is fine
11:49 - for doing the test so what we want to do
11:51 - now is we want to actually be able to
11:53 - load those questions into our app and
11:55 - for now what we could do is just maybe
11:56 - log some of them or just see uh or like
11:59 - display like a simple question on the
12:01 - screen okay so to actually take this
12:03 - questions. Json and import this inside
12:06 - of the app we're going to do the
12:08 - following we're going to say import and
12:10 - I'm going to go with questions from and
12:13 - then we're just going to say questions.
12:15 - Json and we actually need to put a do
12:17 - slash here indicating a relative path
12:19 - meaning from this directory load
12:21 - questions. Json so now we're actually
12:23 - going to have that Json object here the
12:26 - issue is we don't really know what's
12:28 - inside of it
12:29 - when we're kind of hovering over top of
12:30 - it right so you can see like I'm
12:32 - hovering questions and I don't know what
12:34 - keys I have in there what values I have
12:37 - it's going to be difficult to work with
12:39 - so this is where something like
12:40 - typescript comes in and what I can
12:42 - actually do is create a type of my Json
12:44 - file and I can type this kind of
12:47 - variable you'll see in a second how that
12:49 - works and that now allows me to actually
12:51 - get autoc completions for this value so
12:54 - what I can do is go to source and create
12:56 - a new file here called types. TS okay so
12:59 - types. typescript is the extension now
13:01 - I'm going to define a few typescript
13:03 - types and I'll explain how they work and
13:04 - then we'll use them to type that Json
13:07 - file so that we understand what what
13:09 - data story we're actually working with
13:10 - so we're going to create a type we're
13:12 - going to say export type and then we're
13:16 - going to give this a name what do I want
13:18 - to call this going to call this
13:19 - questions and this is going to be equal
13:21 - to a set of cly braces now inside of
13:24 - here what I'm going to do is Define the
13:26 - keys or Define the values or what's
13:28 - actually inside of my object so if I go
13:30 - look at questions we have an object and
13:33 - we have one key here called questions
13:35 - which is equal to an array of questions
13:38 - okay so what I would write here is the
13:39 - following I would say questions which is
13:41 - the name of my key colon and then I'm
13:44 - going to do an array and this is going
13:46 - to be an array of questions now the
13:48 - questions themselves are their own type
13:50 - right a question has a question the
13:53 - choices and the correct answer index so
13:55 - I'm going to create a type for that as
13:56 - well I'm going to say export type
13:59 - question an individual question right
14:02 - and inside of here we're going to say
14:04 - question colon string that means that we
14:06 - have a question key which has the value
14:08 - of type string we then have our choices
14:12 - and this is an array of what an array of
14:14 - strings so we're going to say string and
14:15 - then a set of square brackets and then
14:19 - we have the correct answer index which
14:22 - is a number so what I've done is again
14:25 - defined all of the keys and all of their
14:27 - corresponding values for this type now
14:30 - what I can do is take this array here
14:33 - and I can say question and then put an
14:35 - array sign so that now means for
14:37 - questions I have an array of types or of
14:40 - objects that conform to the type
14:41 - question meaning they each have a
14:43 - question choices and correct answer
14:45 - index field hopefully that makes sense
14:47 - but that's your one minute typescript
14:48 - lesson okay so if I go back to app now
14:52 - what I can actually do is make a
14:53 - variable and I can say
14:55 - const all questions is equal to to
14:58 - questions as and then I can actually put
15:01 - the type that we just wrote which is
15:03 - questions now notice if I hover over
15:05 - questions here it's actually inferring
15:07 - that we need to uh what do you call this
15:09 - import this from do/ types so it's going
15:12 - to automatically import that for me
15:14 - otherwise you could just write import
15:16 - set of curly braces questions set of
15:18 - curly braces there you go uh you now
15:21 - have this in here so now if I hover over
15:22 - all questions you see it as the type
15:24 - questions and it will actually give me
15:26 - autoc completion and allow me to use
15:28 - this more easily throughout my program
15:30 - so now that we have our questions loaded
15:31 - in what we need to keep track of from
15:33 - this main app component is what question
15:36 - we're currently on how many we've got
15:38 - correct and how many we've gotten
15:40 - incorrect now to do that we're going to
15:42 - use State now state is a piece of the
15:44 - react component that can change and
15:46 - anytime the state changes it will
15:48 - automatically render the component for
15:50 - us I'm sure many of you are already
15:52 - familiar with that uh as you probably
15:53 - have some experience with react if
15:55 - you're watching this video what I will
15:56 - do is go to the top of my program here
15:58 - and I'll say import use state from react
16:03 - okay now what I'm going to do is set up
16:05 - a few different pieces of state that
16:06 - we're going to need and we're going to
16:07 - use that in a second so I'm going to say
16:09 - cons and inside of a set of square
16:10 - brackets I'm going to say current
16:14 - question
16:15 - idx okay and then Set
16:19 - current question idx is equal to use
16:23 - State and we're going to put a zero here
16:26 - now really what we're doing here is just
16:27 - keeping track of the index of the
16:29 - current question that we're on when we
16:31 - have zero that means we're on the first
16:32 - question one we're on the second
16:34 - question and we'll Advance this to move
16:35 - to the next
16:36 - question next we're going to have const
16:39 - and we're going to say correct answers
16:42 - and then set correct answers like that
16:47 - is equal to use State and for now this
16:49 - will be zero and then we can copy this
16:51 - and we'll just do the same thing for the
16:52 - incorrect so we'll just change that to
16:54 - in and then set incorrect answers like
16:57 - that okay so now we have the three piece
17:00 - of state that we need now what I want to
17:02 - do is set up the stat bar now the stat
17:04 - bar is going to tell us what question
17:06 - we're on and how many correct and
17:07 - incorrect answers we have and we'll pass
17:09 - to that stat bar these pieces of state
17:12 - so to create the stat bar we're actually
17:13 - going to go in our source folder here
17:15 - we're going to make a new folder and
17:18 - we're going to call this components now
17:19 - it's just nice to organize our
17:20 - components that aren't the main kind of
17:22 - root component like the app one is
17:24 - inside of a folder now what I'm going to
17:26 - do is actually just delete this assets
17:28 - folder because we don't need that
17:29 - anymore so let's get rid of that and
17:32 - then inside of components I'm going to
17:33 - make a new file and I'm going to call
17:35 - this my star.
17:38 - TSX okay now we're going to define the
17:40 - St bar component so we're going to say
17:42 - function St bar like that uh and this is
17:46 - equal to a function and this is going to
17:49 - return for right now simply a div now
17:52 - what I like to start with when I write
17:54 - my functions and actually let me just go
17:55 - down here and say export default St bar
18:00 - if you're unfamiliar with that this is
18:01 - making it so St bar is available outside
18:03 - of this individual typescript file but
18:06 - inside of here uh what I want to start
18:07 - by doing is defining the props that we
18:09 - need to pass to this component now the
18:11 - props are pretty much the variables or
18:13 - the input to the component right so in
18:15 - this case we want the kind of current
18:17 - question so yeah we want like what
18:20 - question we're on we need the total
18:21 - number of questions and then the correct
18:23 - and the incorrect questions so what I'm
18:25 - going to do is Define a type here in
18:26 - typescript and I'm going to say type
18:28 - props is equal to this and I'm going to
18:31 - say
18:32 - current question and this is going to be
18:35 - a number I'm going to say total
18:37 - questions and this is going to be a
18:39 - number I'm going to say correct this
18:42 - will be a number and then I'm going to
18:43 - say
18:44 - Incorrect and this will be a number okay
18:47 - and then I'm going to go to stat bar
18:48 - here and I'm going to say props colon
18:51 - and then props like that which now means
18:53 - I can access all three of these values
18:55 - from this props variable now what we'll
18:58 - do uh actually I don't think I need to
19:00 - do anything at the top here is inside
19:02 - the div we'll just render inside of
19:04 - paragraph tags the three pieces of
19:06 - information that we want and then I'll
19:08 - actually show you how inside of uh codex
19:10 - we can go and create the correct styling
19:12 - for this so I'm going to go inside of
19:14 - paragraph tag one and I'm going to put
19:16 - kind of some jsx syntax here where I say
19:19 - question colon then this is going to be
19:22 - the current question so Props current
19:25 - question and then divided by or out of
19:27 - and then I'm going to do another set of
19:29 - braces here and then props do total
19:32 - questions so what I'm kind of displaying
19:33 - here is okay you're on question one out
19:35 - of five or one out of four or whatever
19:38 - right so I'm taking the data past in
19:39 - here and displaying that now down here
19:42 - I'm going to say correct colon and then
19:45 - this is going to be props doc correct
19:48 - and then we're going to do the same down
19:49 - here for
19:50 - incorrect okay
19:52 - incorrect props do incorrect okay so now
19:56 - we have a stat bar now what I can do is
19:58 - go to my app and I can render my St bar
20:00 - inside of here so I'm just going to say
20:02 - St bar like that notice it's going to
20:05 - automatically import that for me and
20:07 - then I can go and write the props now
20:09 - the props for this are the following and
20:11 - if we don't know what they are we can
20:12 - actually hover over top of this it will
20:14 - tell us what we're missing because we're
20:16 - using typescript so I'm going to say the
20:18 - current question is equal to and this is
20:21 - going to be the current if we can get
20:23 - out of this question index + one the
20:27 - reason I'm adding one is I want to be
20:28 - displaying question one when we're on
20:30 - the zeroth index which is the first
20:32 - question so we have zero indexing here
20:34 - so we just have to add one to that so we
20:36 - get the correct uh representation of the
20:38 - question then we're going to say the
20:40 - total questions is equal to and this is
20:42 - going to be all questions do questions
20:45 - because remember that this type here has
20:48 - the field questions which is an array so
20:50 - we're accessing questions getting the
20:52 - length of that array and that's the
20:53 - total number of questions that we have
20:55 - so go back here okay so that's total
20:57 - questions and this is going to be do
20:59 - length we are then going to say correct
21:03 - is equal to the correct answers and
21:07 - incorrect is equal to the incorrect
21:09 - answers okay so that is our stat bar now
21:12 - if we want to view the stat bar we can
21:14 - go here to codex uh let's just reload
21:17 - this here okay and you can actually see
21:19 - that we're getting this information
21:20 - showing up on the screen so it says
21:22 - questions correct and incorrect now one
21:24 - cool thing in codex is that we can view
21:26 - all the individual components that have
21:28 - so that we can directly edit them so if
21:30 - I go down here it says scan for
21:32 - components now if I press that it's
21:34 - going to scan the app and it will
21:35 - actually find that we have this stat bar
21:37 - component now what I can do is create
21:38 - something known as a board now a board
21:41 - is a place that I can test the component
21:43 - and view different values and see how it
21:45 - responds uh and just kind of yeah mess
21:47 - with the component in a sense so if I
21:49 - create a new board here I can call this
21:51 - whatever I want in this case we'll just
21:52 - call it stat bar you'll see that now it
21:55 - will actually give us our component in
21:57 - isolation so notice how we don't have
21:59 - any values being passed to it like we
22:01 - did when we have the app because now
22:02 - we're just viewing this component in
22:04 - isolation so if I want to can zoom in
22:06 - here so let me make this 200% just so
22:08 - it's a little bit larger and if I
22:11 - actually bring up from the bottom of the
22:13 - screen here you can see that we have
22:15 - code and we have star. board. TSX now
22:18 - this is a codex file and notice it's
22:20 - rendering the St bar here without any
22:22 - props now what I can do is I can pass
22:25 - the props that I want to test and view
22:27 - inside of this board now that's not
22:29 - going to affect my source code it's not
22:31 - going to change anything inside of there
22:33 - but it's going to give me a place where
22:34 - I can view certain States or kind of
22:37 - properties or variants of my component
22:40 - I'm hoping that makes a bit of sense but
22:41 - if I go to St bar here and I go to uh
22:44 - and I add a prop sorry so what are the
22:46 - props that we had for St bar we had uh
22:49 - total questions so I can say total
22:51 - questions is equal to let's put this
22:53 - inside of there one uh let's say the
22:56 - current question is equal to two and
22:59 - notice this uh kind of updates in
23:00 - livetime now that doesn't make sense
23:02 - because it's more questions or the
23:05 - current questions greater than the
23:06 - number of questions we have but then I
23:08 - can say correct is equal to one and
23:11 - incorrect is equal to zero okay so now
23:15 - we get a version of this now what I want
23:17 - to do is I want to style this and get
23:19 - this in the correct layout so what I can
23:21 - do is select on this it's going to show
23:23 - my properties but I can go here to the
23:25 - style Tab and I can actually add Styles
23:28 - and selectors to this now it's not
23:30 - happening from the board here I have to
23:32 - go and click on edit component when I do
23:34 - that now it gives me the actual source
23:37 - code for this component so now I'm not
23:39 - editing the board which is where we kind
23:41 - of mess around with it I'm editing the
23:43 - actual code so here if I click on this
23:46 - div right I can go to where it says
23:48 - selectors I can add a style so I'm just
23:51 - going to make a new class here that I
23:52 - want to apply to this I'm going to call
23:54 - this the stat
23:56 - container
23:58 - okay if we can type that correctly and
24:00 - I'm going to click on create class now
24:03 - when I do that with stack container it's
24:04 - going to tell me where it's creating it
24:06 - in this case star. module. sccss this is
24:09 - a new file it will create for me
24:10 - automatically I'm going to go ahead and
24:12 - press create and now we have this class
24:14 - that you can see has automat
24:16 - automatically been applied to our um
24:18 - what do you call it container and if I
24:20 - go here notice inside of St bar that
24:23 - it's actually changed inside of vs code
24:26 - okay so let's go back
24:28 - two codu and now let's start styling
24:31 - this component so first of all I want to
24:34 - have this in a horizontal layout which
24:37 - means I need my Flex to be in the row
24:40 - Direction so how do I do that I got to
24:42 - see all the little buttons that we have
24:44 - here we have block inline block inline
24:46 - Flex so I'm going to press on Flex here
24:48 - for the layout that's going to give me a
24:50 - flex row now you can choose the
24:52 - direction I'm going to keep this as
24:54 - horizontal and we have options like
24:55 - wrapping aligning ET Etc so what I would
24:59 - like to do is I would like to add some
25:01 - gap between my different components here
25:03 - so I can add a gap say of 10 pixels and
25:06 - now they're a little bit more spaced out
25:08 - now what I also want to do is I want to
25:10 - create kind of a container around this
25:13 - with some padding and a background color
25:15 - so I got to find where this is there's
25:17 - some padding so I'm going to go to
25:18 - padding and I'm going to add 10 pixels
25:20 - there okay so it's getting a little bit
25:22 - larger we can manually adjust the size
25:24 - if we want to do that and we can go to
25:27 - things like order Corners background
25:30 - that's what I want so for background I'm
25:32 - going to select kind of like a dark gray
25:33 - here maybe a little bit
25:35 - lighter what do we actually want let's
25:38 - go with like a dark dark gray and then
25:41 - we can go to the text color so I got to
25:43 - find where that is here you go font
25:47 - okay select the color and we'll go with
25:51 - white okay so let's make that more white
25:54 - and if we want we can change the font
25:55 - family let's see how that looks okay
25:57 - actually kind of like that that's nice
25:59 - and if we want we can add some borders
26:01 - so uh if I want to do Corners I can
26:04 - say what is this like 10 pixels and now
26:08 - this will actually add rounded Corners
26:09 - we can't see it the way that we have it
26:11 - displayed right now but we will see that
26:13 - when we have it rendered in the larger
26:15 - uh app okay so you can see that I just
26:16 - styled all of that without actually
26:18 - having to use uh regular CSS I can just
26:21 - press all the buttons on the side which
26:22 - for me is like the most valuable part of
26:24 - this tool now if I go back to home here
26:27 - and we go to app uh this should update
26:29 - in a second you can see this is updated
26:31 - and that's displayed now I'm not sure if
26:32 - the rounded Corners are working uh I
26:34 - might just be using the wrong properties
26:36 - but we can do this manually if we want
26:37 - so if we go to stb bar. module. CSS yeah
26:40 - the Border radius one pixel oh it's cuz
26:42 - I didn't add 10 okay so that's why so
26:44 - border radius 10 pixels and that should
26:46 - make it a little bit larger for me okay
26:48 - so there you go that is our St bar now
26:51 - that we have the St bar we want to start
26:53 - displaying our questions so we're going
26:54 - to create a new component for the
26:56 - questions let's go ahead and do that so
26:59 - new component here and call this
27:02 - question. TSX now let's make another
27:05 - function and we'll call this question
27:08 - okay and we're going to say
27:12 - export default
27:14 - question all right and actually I'm
27:17 - going to call this question comp the
27:19 - reason for that is we have a type called
27:21 - question and it's going to mess up a
27:23 - little bit if we have uh question and
27:25 - question as like duplicated names right
27:27 - so I'm just going to name this question
27:28 - comp for component I'm going to say type
27:31 - props is equal to and then we'll create
27:34 - the props for our question all right so
27:36 - for our question we need to know first
27:38 - of all what the actual question is so
27:40 - I'm going to go here and say question
27:42 - colon question and I'm going to import
27:45 - that from my types because we're going
27:47 - to pass an individual question which
27:48 - contains the question the choices and
27:50 - the correct answer index now what we're
27:52 - also going to need here is a function to
27:55 - call to indicate to the app when we
27:57 - we've Advanced to the next question and
27:59 - if we got the question correct or
28:01 - incorrect you'll see what I mean here in
28:02 - a second but I'm going to say uh on
28:06 - should we go on press I'm going to say
28:07 - on
28:09 - submit okay and this is going to be a
28:11 - function that is parenthesis and then
28:15 - this is going to be equal sign and then
28:17 - what do you call this here the greater
28:18 - than sign and then void this is the type
28:20 - signature for just a function that
28:22 - doesn't return any value and we're going
28:24 - to take in a parameter here called
28:26 - correct which is a Boolean so what I
28:28 - just did is type here the parameter of
28:30 - my function if you haven't seen this in
28:31 - typescript and I'm saying okay we're
28:33 - going to pass a function to onsubmit as
28:36 - a prop and we're going to call this
28:38 - function when we submit the question so
28:39 - that the main app knows to advance us to
28:42 - the next question and to tell us if we
28:44 - got it correct or incorrect you'll see
28:46 - how this works in just a second now I'm
28:48 - going to go to here and I'm going to say
28:50 - props props like that and we're going to
28:52 - start writing the jsx for our question
28:54 - and styling it so what I'm going to do
28:56 - here is simply return a div inside of
29:00 - the div I'm going to have an H3 tag and
29:02 - I'm just going to render what the
29:03 - question is so I'm going to say props do
29:06 - question. question and then we're
29:08 - actually going to render here another
29:09 - component which is going to be the
29:11 - answers now we haven't ridden this
29:13 - component yet but the reason I'm writing
29:14 - this is we're going to handle all of
29:16 - those different answers um from that
29:19 - component not from the question
29:20 - component directly so now I'm going to
29:22 - make another component and I'm going to
29:23 - call this
29:25 - answers. TSX okay we're going to say
29:28 - function answers like that okay we're
29:31 - going to export this so export default
29:35 - answers we're going to create our
29:37 - props so we're going to say type props
29:40 - is equal to this now for the props just
29:42 - to make it simple we can actually just
29:44 - take the question directly so we can say
29:46 - question and then question like that and
29:49 - then we also need to have and on submit
29:54 - like that and this is going to be the
29:55 - same function we're going to say correct
29:58 - Boolean colon equal void like that
30:01 - because this is where we'll actually
30:03 - handle the logic for indicating whether
30:04 - we got a question correct or incorrect
30:06 - there's a few other ways we could set
30:08 - this up but I want to show you how we
30:09 - can pass data down from multiple
30:11 - components and you'll see what I mean as
30:13 - we start going so let's say
30:16 - props like this
30:19 - props okay now inside of here uh what do
30:22 - we need to do well we need to return
30:24 - some information about our answers so
30:26 - we're going to say return div and we're
30:29 - going to Loop through all of the
30:30 - potential answers we have we're going to
30:33 - display those uh and then we're going to
30:35 - set up some kind of on presses so like
30:37 - when you actually press on the answer it
30:39 - will call this function and it will
30:41 - either have correct or incorrect
30:42 - depending on the answer you selected so
30:44 - what we'll do here is we'll actually set
30:46 - up a map and we will say props do
30:50 - question. choices do map Now map is
30:54 - going to iterate over all of our choices
30:56 - for map app I'm going to take in my
30:59 - choice and the index of that choice
31:02 - because having the index will allow us
31:03 - to know if the choice is correct or not
31:05 - and we're going to say colon equal to
31:08 - and then we're going to return actually
31:10 - an answer component this will be another
31:12 - component that we're going to make so
31:14 - let's make that component I know we have
31:16 - a few here but uh we'll go through them
31:17 - in a second so we're going to say
31:18 - answer. TSX now we're going to make the
31:21 - answer component and we almost have all
31:23 - the components now this is done so we're
31:24 - going to say function answer
31:27 - like that now we're going to say
31:30 - export
31:32 - default answer okay from answer we got
31:35 - to Define our props so we're going to
31:37 - say type props like that now for this we
31:42 - are going to have an on press okay and
31:45 - this doesn't actually need to take
31:47 - anything it can just be a void so this
31:49 - is just the function we're going to call
31:51 - when we press this answer because this
31:53 - will be a button that we can select we
31:55 - then are going to have another value
31:58 - here which is going to be the text so
32:01 - this just be the text that we're going
32:02 - to be displaying and then lastly we're
32:04 - also going to have the color and this is
32:06 - going to be question mark equal to a
32:08 - string now when you put a question mark
32:10 - here in typescript that means this is
32:12 - optional now the reason I'm passing
32:14 - color is we need to know if we should be
32:16 - displaying this as like a normal kind of
32:18 - white text where we haven't pressed
32:19 - anything yet or red or green depending
32:22 - on if we've answered this correctly or
32:24 - incorrectly right so like if I answer
32:27 - we're going to display uh what the
32:29 - correct answer is in green and the
32:30 - incorrect answer is in Red so we need to
32:31 - know that in this answer
32:34 - component so we're going to go here and
32:35 - say props props like that and we are
32:39 - going to return our answer so we're
32:41 - going to say return like this and I
32:43 - think all we actually need here is a
32:46 - button so we'll say button and then
32:49 - inside the button we will have the text
32:51 - of props do text and we'll simply have
32:55 - the
32:56 - onclick equal to the props Doon press
33:00 - and that means when we press the button
33:02 - uh it will press this function or call
33:04 - that function and then we'll adjust the
33:06 - color in just one second in fact what we
33:09 - can do for the color is we can say style
33:11 - is equal
33:12 - to and then I'm going to put a set of uh
33:15 - kind of empty braces here and I'm going
33:17 - to
33:18 - say color question mark so actually this
33:23 - is props do color question mark and then
33:26 - we're going to go inside of here we're
33:27 - going to say color colon props docolor
33:30 - else we're just going to have an empty
33:32 - object now it might be a little bit
33:34 - clear if I put this in a variable so
33:36 - let's just say const style is equal to
33:40 - this and then we'll replace this with
33:42 - the style
33:44 - variable now what I'm doing is writing a
33:46 - tary if statement what that means is if
33:49 - we have a color provided to us so if you
33:51 - actually pass some string value here
33:54 - then we are going to create an object
33:56 - that has color colon prop. color which
33:58 - is a style attribute we're going to
34:00 - apply to this button otherwise we're
34:02 - just going to have nothing for the style
34:03 - meaning we're not going to make any
34:05 - changes at all now while I'm at it I'm
34:07 - actually thinking that I need to change
34:09 - this slightly I'm going to take style
34:11 - equals style here and I'm actually going
34:12 - to write a span and apply this to the
34:15 - span tag the reason I need to do this is
34:18 - I just want the color to affect the text
34:20 - I don't want it to affect the color of
34:21 - the button so I need to just wrap the
34:23 - text directly which is inside of the
34:25 - button now I'm also going to add one
34:27 - more prop here that I forgot about which
34:29 - is disabled we should spell that
34:30 - correctly because once we have answered
34:33 - the question we don't want to be able to
34:35 - press the button again so we're going to
34:36 - say disabled question mark colon and
34:39 - then this is going to be a Boolean and
34:41 - I'm going to go here to my button I'm
34:43 - going to say disabled question mark Or
34:46 - Not question mark sorry is equal to
34:48 - props do
34:50 - disabled okay so now we have our answer
34:53 - component this one is actually finished
34:55 - and if we want to view the answer
34:57 - component we can go to codex and just
34:58 - quickly have a look at it so let's just
35:00 - reload this it's just cuz we have some
35:01 - imports that weren't working let's
35:03 - rescan our components here you should
35:05 - see now that we get answer answers Etc
35:07 - if we go to answer we can create a board
35:10 - so let's make a board and call this
35:11 - answer
35:12 - red okay now let's zoom in on this a
35:15 - little bit all right here we go this is
35:18 - our answer notice we have some values we
35:21 - can pass in here so for the text I'm
35:22 - just going to go with Timothy which is
35:25 - actually my full name for the color will
35:27 - go with red notice that now creates red
35:29 - and then if we made it disabled it would
35:31 - actually disable the button so we can't
35:32 - press on it okay so that's one instance
35:35 - of the button that we can have a look at
35:36 - here now if we wanted to we could create
35:39 - another board for this button so I say
35:40 - new board and then answer green for
35:43 - example and now I can do the same thing
35:46 - so zoom in select my button if I can
35:51 - scroll over here okay so select that
35:54 - text Timothy spelled correctly and the
35:58 - color of green now again that doesn't
36:01 - actually affect my component in the code
36:03 - it just gives me a way to be able to
36:04 - view the different states of my button
36:07 - okay so now that we have that uh we can
36:10 - do a little bit of styling and we can
36:12 - actually display those answers so if we
36:14 - go to answers here we have this answer
36:17 - component and you can see that we need
36:18 - to take in the text and a few other
36:21 - things so first of all let's import this
36:23 - so I can go here and import this from
36:25 - slans now we're going to say the text is
36:28 - equal to the choice dot actually just
36:32 - the choice sorry that's all that needs
36:34 - to be then we're going to say the
36:37 - onpress is equal to and this is going to
36:39 - be a function that we're going to write
36:41 - now this is going to be a little bit
36:43 - more complex logic here but notice what
36:46 - I just did is I changed this so now we
36:47 - have these curly braces inside of this
36:49 - map and I'm just going to explicitly
36:52 - return answer now before it was implied
36:54 - that it was return because I didn't have
36:55 - the braces I just had parentheses es now
36:57 - since I have parentheses this is
36:59 - essentially acting as an inline function
37:01 - anyways for this function I'm going to
37:03 - write the on press function that we're
37:05 - going to call when we press on this
37:07 - answer now what's going to happen is
37:10 - whenever we press on the answer we need
37:12 - to take that data and pass that up right
37:15 - we need to give that to the parent
37:16 - component so it knows if we got it
37:18 - correct or if we got it incorrect right
37:20 - so we have answers but then from answers
37:23 - we have question and then from question
37:25 - we have the app component now all of
37:27 - these components need to pass the data
37:29 - up the way we do that is with something
37:31 - known as function callbacks which is
37:32 - what I'm using here in the props I'm
37:35 - hoping that makes sense but what I'll do
37:37 - here on the onpress is I will call this
37:39 - function that function will then be kind
37:41 - of represented here inside of the
37:43 - question and then we'll use that to then
37:45 - call the app uh here and tell us if we
37:48 - got it correct incorrect Etc okay so
37:52 - what does this uh need to do well first
37:54 - of all when we press on an answer we
37:56 - need to make it so that we can't press
37:58 - on any other answers now that means that
38:01 - we need to have a piece of state that
38:02 - tells us whether or not we've already
38:04 - selected an answer so I'm going to go up
38:06 - here and I'm going to say
38:09 - import use state from react okay and I'm
38:13 - going to make a piece of State here that
38:15 - essentially tells me if we've already
38:16 - answered the question or not now the way
38:18 - I can do that is I can just say const we
38:20 - can go with something like show Answer
38:24 - set show
38:27 - answer is equal to use State and we're
38:29 - going to go with false so now I'm going
38:31 - to write the onpress function so I'm
38:33 - going to say const on press is equal to
38:36 - an arrow function this Arrow function is
38:38 - going to take an index which is a number
38:41 - and we're going to do this we're going
38:42 - to say set show
38:44 - Answer equal to true because as soon as
38:46 - you press on any of the answers we want
38:48 - to display what the correct answer
38:50 - actually is and then we're going to say
38:52 - the following we're going to say props
38:54 - do onsubmit but then what we need to do
38:57 - is we need to indicate whether or not we
38:59 - got this question correct now we only
39:01 - got it correct if the index of the
39:02 - answer we pressed on is the same index
39:05 - as the uh what do you call it the
39:07 - correct answer from our question okay so
39:09 - we're going to say if the props do
39:12 - question. correct answer index is equal
39:15 - to this index then we got a correct
39:18 - otherwise it's not correct so this
39:19 - condition will be true or false which
39:21 - will then tell the question that we
39:24 - answered this correctly or we answered
39:25 - it incorrectly hoping that's making a
39:28 - bit of sense but what we'll do now is
39:30 - inside of the onpress we're actually
39:31 - going to write a function and this
39:34 - function is going to call the onpress
39:37 - function and pass the index so what
39:40 - we're doing is we're saying okay well as
39:42 - soon as we press the answer we want it
39:44 - to call some function this function is
39:47 - actually going to call the onpress
39:49 - function that we have written here and
39:50 - it's going to pass the index of whatever
39:52 - the answer is that we clicked on so that
39:54 - way we don't have to keep track of the
39:55 - index inside ins of the answer we just
39:57 - have that inside of this uh what do you
39:59 - call component okay so that Maps out all
40:02 - of our different questions now what
40:04 - we'll do to go a step further here is
40:06 - we'll say okay well if we're displaying
40:08 - the answer then we want to be telling
40:10 - the answer to show us red or green right
40:14 - if we're displaying it so what we can do
40:15 - to do that is we can say let
40:18 - color equal an empty
40:20 - string okay we then can write an if
40:22 - statement and we can say if show answer
40:27 - uh and actually we can do it like this
40:29 - we can say if show
40:30 - answer and props dot question. correct
40:36 - answer index is equal to the index then
40:39 - we're going to say the color is equal to
40:41 - Green okay now otherwise we'll say else
40:45 - if show Answer like this then the color
40:49 - is equal to Red now we'll keep going
40:53 - here in a second but what I'm saying is
40:54 - okay if we're showing the answer right
40:56 - right and the answer is correct so the
40:59 - one that we're displaying here if this
41:00 - is actually the correct answer then
41:02 - we're going to set the color equal to
41:03 - Green because it's right now if we're
41:05 - showing the answer and this wasn't the
41:07 - case so that was false then we're going
41:08 - to make the color red hopefully that's
41:10 - clear so here we can go and say color is
41:13 - equal to and we can just pass color and
41:15 - if none of these are true the color will
41:17 - just be an empty string so nothing will
41:18 - change now we also want to say disabled
41:21 - now disabled is going to be equal to
41:23 - show answer so if we are showing the
41:26 - answer we're going to disable the
41:27 - buttons so you can no longer press them
41:29 - so actually before we go back to codex
41:31 - I'm just going to go to app and I'm just
41:33 - going to render my question component so
41:35 - I'm going to say question comp like that
41:37 - and I'm going to say the question is
41:40 - equal to and this is going to be all
41:41 - questions do questions at the current
41:45 - question index and then we're going to
41:47 - say on submit is equal to and this is
41:50 - just going to be an empty function for
41:52 - right now uh that we'll fill in later so
41:54 - if I save that and I go back to codex
41:56 - here
41:57 - okay you can see let's close that and go
42:00 - to app if we view app here it's saying
42:03 - what is my name now for some reason it's
42:05 - not showing the answers but this is
42:07 - actually where codex can come in handy
42:09 - if I click on this now and I start going
42:11 - into the tree I can view all the
42:14 - different components that I have so I'm
42:16 - inside of the question component I have
42:18 - an expression and I'm just seeing what
42:20 - is my name which is telling me for some
42:22 - reason it's not actually displaying that
42:25 - aners component so let's go back to
42:27 - questions and you can see that's because
42:29 - we don't have answers here so that's why
42:31 - it's not showing up because I didn't
42:32 - render it here so let's render it here
42:35 - by doing answers like that we can go
42:38 - ahead and import that from do/ anwers
42:41 - and if I hover on this we need the
42:42 - question and the on submit so we're
42:43 - going to say question is equal to props
42:47 - do question and the onsubmit is going to
42:51 - be equal to the props do onsubmit like
42:55 - that okay okay so now if we go back to
42:57 - codex we should see that we are getting
42:59 - the different options right here and we
43:01 - are we're getting our four different
43:03 - buttons now we can test out their state
43:05 - in a second but for now let's go back
43:08 - here let's uh I'm not sure why we're
43:10 - getting an error there what's the log
43:13 - each child in list should have a unique
43:14 - key property okay so let's actually fix
43:16 - that first story so go here to answers
43:21 - now whenever we have this map here we
43:23 - have to add a key property to our
43:25 - different objects so I'm just going to
43:26 - say key is equal
43:28 - to idx and that's going to fix that
43:31 - error that we were seeing go back to
43:33 - codex here okay now we're no longer
43:36 - getting that error and what I want to do
43:38 - is I want to style my question component
43:41 - so I can go here go to my question
43:43 - component we can view that inside of
43:45 - here or we can view it directly inside
43:46 - of a board I think viewing it in here is
43:48 - fine for right now let's go into answers
43:51 - uh and let's style each individual
43:52 - answer and then let's lay them out in a
43:54 - 2X two layout all right so I'm going to
43:57 - start by actually styling the container
44:00 - now the container is going to be this
44:02 - div that includes my different answers
44:05 - now I want to make this a flex box so
44:07 - I'm going to go here and I'm going to
44:08 - add a style the style I add will
44:12 - be choices like that we'll create that
44:16 - inside of a new scss module okay and
44:19 - let's make the layout so let's select
44:21 - Flex
44:23 - horizontal and how do we want to align
44:25 - items uh we'll go Center and then
44:28 - justify and I want this to be actually
44:31 - is this correct here so for a line items
44:34 - that's fine Center Place items Center
44:36 - Place content I want to do that space
44:40 - between in this direction so I'm going
44:42 - to click on that one and now you can see
44:43 - it kind of aligns them space between the
44:46 - issue is I actually want these to be in
44:49 - a 2X two configuration now I think the
44:51 - way I need to do that is by adding a
44:53 - flex wrap I don't remember how how to do
44:56 - that exactly here all right so actually
44:59 - it's right here Flex wrap wrap so I'm
45:01 - going to click on wrap now if I go into
45:04 - my individual answer so I go to say the
45:06 - answer component right here and I go to
45:08 - the button I can now add a style on here
45:11 - and set a width and then I should get
45:13 - that 2x two configuration I'm looking
45:14 - for so I'm going to make a new class
45:16 - here create class I'm going to call this
45:20 - answer okay now for this we just want to
45:23 - set the width so we're going to go over
45:25 - to
45:26 - where do we have width right here and
45:28 - we're going to go
45:30 - 45% so I can go to pixel and just select
45:33 - percent there and now notice it brings
45:35 - us in that 2x two configuration uh with
45:37 - actually a
45:38 - 10% uh what do you call this here kind
45:40 - of pad we want it to be a little bit
45:42 - less I can do like
45:43 - 47.5% and then that gets a little bit
45:45 - larger okay so that's good for that
45:47 - sizing now let's actually just make the
45:50 - buttons look a little bit nicer so let's
45:52 - add a bit of padding so where's my
45:54 - padding padd padding padding padding is
45:57 - right here let's add 10 pixels of
45:59 - padding to our buttons let's add some
46:02 - background color so background I want
46:04 - that to be a similar gray color which I
46:06 - think is going to be like this one here
46:10 - okay that's better I want to change my
46:12 - text so let's go to text and color and
46:17 - let's make that
46:18 - white okay we can do that same font
46:21 - family which is this one weight we can
46:25 - actually make this bold I think those
46:28 - look a little bit nicer let's add a
46:31 - border so for the
46:33 - Border we go solid do I want it black
46:37 - let's go with a white pixel border like
46:39 - that for the corners let's go with 10
46:44 - pixels of rounding okay now let's go
46:46 - back to our answers which we can do
46:49 - right here uh let's go to our div and
46:53 - let's add a bit of Gap so in the the
46:56 - column Direction I'm going to add 10 Gap
46:58 - that's a little bit nicer I don't know
47:00 - if we need a background color for that I
47:02 - think we can just add a background color
47:03 - to the whole screen and now our buttons
47:05 - are looking a bit nicer now if I want I
47:07 - can click on one answer here let's edit
47:09 - this component so let's go to the button
47:13 - and I can add actually states to this so
47:16 - you see where it says States I can click
47:17 - on element state I'm going to go to
47:20 - focus and now I'm editing the focus
47:23 - state so if I go to focus I can actually
47:25 - just change the Border color which is
47:27 - what I'm going to do so for the Border
47:29 - I'm going to change the color to be like
47:31 - a blue color just so it's kind of clear
47:35 - that we're hovering on it and then that
47:38 - should be good now I think I can preview
47:39 - this and notice when I hover over it or
47:42 - actually it's cuz it's in the focus
47:43 - state right now let's not no not active
47:47 - just focus uh okay I'm not sure exactly
47:49 - how to preview that state change I might
47:51 - need to do it from a board but I think
47:54 - you guys get the idea right when we
47:55 - hover on it now since I just added that
47:57 - Focus State uh it should actually show
47:59 - us that kind of blue outline all right
48:01 - so last thing here let's adjust this
48:03 - name so if we go back here to the H3 you
48:07 - can see this text is a little wonky so
48:10 - let's go
48:11 - H3 let's go to style let's add a class
48:14 - here let call this
48:17 - question okay create that now for
48:21 - question we'll just go and change the
48:23 - font so that it matches the other one
48:25 - and and we'll make the color be white
48:30 - now you're not going to be able to read
48:31 - it right away but we will set the
48:32 - background color of the entire screen in
48:34 - a second so now we can go back to app
48:38 - okay just go to the div and we'll change
48:40 - the background color now so for the
48:42 - background color We'll add a style press
48:44 - on create class okay go ahead and make
48:46 - that now we will change the background
48:49 - so that is going to be here let's make
48:51 - this like I don't know I don't know what
48:54 - color we want this to be let's go with
48:56 - like a more gray maybe you guys can see
48:59 - I'm struggling here with with selecting
49:01 - the colors you you guys can adjust this
49:02 - if you want but you get the idea that's
49:04 - what we'll go with for now I want to add
49:05 - a bit of padding in here so let's go to
49:10 - padding 10 pixels I did not mean to have
49:13 - a one pixel width so let's just make
49:15 - that back to Auto uh and there you go
49:16 - now we have a nice little container and
49:18 - most of the styling is done okay we're
49:20 - getting close to being finished here
49:22 - guys let's close that we do have some
49:24 - more logic to write though uh before we
49:27 - can wrap this up all right so actually
49:29 - most of the stuff from our answers
49:32 - questions Stop Bar those are done a lot
49:34 - of the logic now is going to happen
49:36 - inside of apps you can see that we're
49:37 - rendering the question component and
49:39 - then inside of question if I go here we
49:41 - have the onsubmit right we're passing
49:43 - that to answers from answers we uh have
49:46 - this onpress call whenever we press one
49:48 - of the answers which then calls the
49:50 - onsubmit which then if we go back calls
49:52 - this onsubmit which then in turn will
49:54 - call whatever function we pass here to
49:56 - onsubmit so that's what I want to write
49:58 - now because what I want to do is once we
50:01 - submit I want to update whether we got
50:03 - correct incorrect Etc and then I want to
50:05 - allow the user to advance to the next
50:08 - question so that's going to involve
50:09 - displaying a button and then that button
50:11 - will say you know move to the next
50:13 - question so what we'll have here is
50:15 - another piece of State we're going to
50:16 - say const waiting to advance we're going
50:20 - to say set waiting to advance is equal
50:25 - to you
50:27 - State and this is going to be false now
50:29 - I'm going to have a const on submit okay
50:32 - this going to be equal to a function and
50:34 - this is going to say correct and this is
50:37 - going to be a
50:38 - Boolean now what we're going to do here
50:41 - is we're going to say
50:43 - if correct then we're going to say set
50:47 - correct answers and this is going to be
50:49 - the correct answer is + one else we're
50:53 - going to say set incorrect answers and
50:57 - this is going to be the incorrect
50:58 - answers plus one we're then going to say
51:01 - set waiting to advance to be true okay
51:04 - so that's going to put us in a mode
51:05 - where now we are well waiting to advance
51:09 - all right now that we are waiting to
51:11 - advance what we need to do is have
51:13 - another button that we will display
51:14 - underneath here that says next so I'm
51:16 - going to say here if waiting to advance
51:19 - so waiting to advance and then we're
51:22 - just going to have a little button we're
51:24 - going to say button like that and this
51:27 - is going to say next question dot dot
51:30 - dot and on this button we're going to
51:32 - have an on click is equal to and we're
51:35 - going to call a function now the
51:37 - function we're going to have here is
51:38 - const
51:40 - Advance okay so we're going to call the
51:42 - advanced function so we'll just write
51:44 - Advance like that and now for the
51:47 - advanced function we're going to say set
51:49 - waiting to
51:50 - advance false because now we're no
51:53 - longer waiting to advance because we're
51:54 - advancing and we're going to increment
51:56 - the current question index so we're
51:58 - going to say set
52:00 - the so Set current question index equal
52:05 - to the current question index + one now
52:07 - we do need to check to see if we are
52:08 - currently at the last question but for
52:10 - now this should allow us to advance
52:12 - through the questions so what we can do
52:14 - is just take this on submit function and
52:16 - pass that
52:17 - here okay and now we should actually be
52:20 - able to run our app uh and see all of
52:22 - this working properly now this next
52:24 - button is going to look a j we can style
52:26 - that in a second but I just want to see
52:27 - if this is working so let's go here and
52:29 - type npm run Dev that's going to run the
52:31 - development server for us let's open
52:34 - this up here in our browser so let me
52:37 - pop that open wrong window it is over
52:40 - here you can see that uh it looks a
52:43 - little bit weird so I got to fix this
52:44 - Let me refresh this here uh I messed
52:47 - something up with the states but anyways
52:48 - says question 102 correct zero incorrect
52:51 - zero if I click on Tim boom it says 102
52:54 - correct one next question brings me next
52:57 - question and then we got to fix this
52:58 - because it's still highlighting when it
53:00 - shouldn't be highlighting okay so a few
53:01 - things to fix here but you can see that
53:03 - this is uh kind of working and we can
53:05 - also adjust the width and the size of
53:07 - this if we wanted to do that okay so
53:08 - we're back here inside of vs code first
53:10 - let's fix that issue where it was still
53:12 - highlighting them when um we moved to
53:15 - the next question the way we can do that
53:16 - is we can go to answers here and we can
53:19 - import a use effect now what we need to
53:22 - do is just reset this state here so show
53:24 - answer anytime we get another question
53:27 - so this is actually really easy to do we
53:29 - can just type use
53:30 - effect pass a function and then inside
53:33 - of this set of parentheses here this is
53:35 - the dependency array this means that use
53:38 - effect this function is going to run
53:39 - anytime whatever we have inside of here
53:41 - changes so we're just going to say props
53:44 - Dot and this is going to be question so
53:46 - anytime we get a new question we're
53:48 - going to say set show
53:50 - Answer equal to false and that will um
53:53 - no longer show the answer for the next
53:56 - set of choices that we display okay so
53:58 - that's that so now if we go back to our
54:01 - Dev server so let's open this up here
54:05 - you'll see that if we go so Tim next
54:08 - question it gets reset okay so that's
54:10 - working we just need to fix our blue
54:11 - Highlight uh and then we need to have
54:13 - that kind of finished screen because
54:14 - here if I click next question you'll see
54:16 - the app crashes so we'll handle that in
54:17 - a second okay all right so let's open up
54:21 - codex let's go here into one of our
54:23 - answers we can go and press press edit
54:25 - component now when I click on this here
54:28 - if I go to this we'll go and look at our
54:31 - border and yes it looks like we have one
54:33 - pixel Border in the non-hover state so
54:36 - let me remove that let's go back here to
54:39 - States let's go hover and now I need to
54:42 - actually press this button which I
54:43 - forgot to do before so I'm going to
54:45 - create that now you can see the selector
54:47 - changed so now if I scroll down I can
54:50 - add a one pixel border and that should
54:53 - be good so if we go back here and we go
54:56 - back to this when I hover it you can see
54:59 - that we add that one pixel border now if
55:02 - we don't want it to move around and kind
55:03 - of jump like this the way we can fix
55:05 - that is we can go here we can get out of
55:07 - the hover state so just go to how do I
55:10 - change this answer and we can just add a
55:13 - one pixel border that is transparent or
55:15 - a different color so if I add that and
55:19 - how do I make this a different color
55:21 - let's make it just black okay so now if
55:24 - we go back
55:26 - you can see that we're not having it
55:27 - jump around because we're not changing
55:29 - the sizes okay so last thing to do is
55:33 - handle what happens when we end so let's
55:35 - write that the way we're going to do
55:38 - that is we're just going to have a
55:39 - component that will kind of be like our
55:40 - reset component so we can go to
55:43 - components and we can say
55:45 - reset.
55:47 - TSX with a capital R we'll say
55:52 - function reset like that
55:56 - okay we'll say
55:58 - export default reset and we'll type our
56:02 - props so let's say type props equal this
56:06 - we're going to say total
56:08 - questions number and then correct
56:11 - questions like that is a
56:14 - number we're going to take these in as
56:16 - props so Props props like that and we're
56:19 - just going to return uh a simple div
56:21 - that will display how we did now we also
56:23 - need to have a button so we're going to
56:25 - say on
56:27 - press okay and this will be a void and
56:29 - this will just call a function that will
56:31 - reset the game for us so we're going to
56:33 - have a div on the div we're going to
56:34 - have an onclick this is going to be the
56:37 - on press from our props we're then going
56:41 - to display an H1 that says you scored
56:46 - and we're going to take our props do
56:49 - correct questions and divide that by the
56:51 - props do total questions put that inside
56:54 - of a set of
56:55 - parenthesis and then multiply that by
56:57 - 100 and then put a percent so that we
57:00 - get the percentage that we scored we are
57:03 - then going to have a button or actually
57:05 - sorry so the on click needs to be on the
57:07 - button not the div and the
57:09 - button we'll say press to try again okay
57:17 - so that is our reset component fairly
57:19 - straightforward so what we'll kind of
57:21 - say here is if we have answered all of
57:23 - the questions already we have none left
57:24 - we're going to display that reset
57:26 - component and then when we press that
57:27 - reset button function it's actually
57:30 - going to reset the current question
57:31 - index to be back to zero and reset all
57:34 - of the different props that we need so
57:36 - what we can do here is say const
57:38 - actually not const we can just say if
57:42 - the current question index is greater
57:45 - than or equal to the all questions.
57:47 - questions.
57:49 - length then we will simply return the
57:52 - reset component now when we uh do this
57:56 - we need to pass our values so we're
57:58 - going to say total questions is equal to
58:00 - all
58:03 - questions do questions. length and
58:06 - notice that I get all of that
58:07 - autocomplete because I'm using
58:08 - typescript and then we're going to say
58:09 - the correct
58:11 - questions is equal to the correct
58:14 - answers so I probably should have named
58:15 - them the same thing but that's fine and
58:17 - then we're going to say onpress is equal
58:19 - to and we're going to write a reset
58:20 - function so we're going to say con reset
58:23 - is equal to this
58:25 - and we'll just pass that reset function
58:28 - and then inside of reset we will reset
58:30 - all of our state okay so we're going to
58:32 - say set the current question index back
58:35 - equal to zero we're going to say set the
58:38 - correct answers equal to zero we're
58:40 - going to say set the incorrect answers
58:43 - equal to zero and I think that's
58:45 - actually all we need if we reset those
58:48 - three we should be good and just for
58:50 - good measure we'll just say set waiting
58:52 - to advance equal to false as well
58:55 - just to make sure that that is not
58:56 - messed up okay let's give this a shot
58:59 - we'll do some final styling after this
59:01 - but if we refresh here okay let's answer
59:05 - Tim next question Smith next question
59:09 - you scored 50% press and try again go
59:13 - ahead and we can run that fantastic okay
59:16 - so last thing I want to do is just set a
59:18 - background color for the entire screen I
59:20 - want to style that next button and then
59:22 - I want to style that reset page and then
59:24 - we'll be done
59:25 - so to set the background color for the
59:27 - entire screen I'm just going to go to my
59:29 - index.css and I'm just going to say body
59:33 - or actually I'm going to say
59:36 - HTML comma body so I'm going to do this
59:38 - for both of them and I'm going to say
59:41 - the background color is equal
59:45 - to just a gray now if I do that let's go
59:50 - here you can see we have two different
59:51 - color Grays that's fine for now but at
59:52 - least the whole thing is gray
59:55 - okay now for the rest of this we can
59:58 - style it with uh codex so to do that we
60:01 - can go over to our app and you'll see
60:05 - that if I click into the app here notice
60:08 - that in this board we're not displaying
60:11 - the um the next button right because we
60:13 - need a certain condition to be true to
60:15 - be able to display that so if I go and
60:16 - view the code down here right app. TSX
60:19 - you'll see that if I kind of expand this
60:21 - we have this condition for the button
60:23 - but we're not seeing it on the screen
60:25 - here because that condition is not true
60:27 - so if I just want to edit the button
60:28 - right now what I can do is go to waiting
60:30 - to advance and I can just change this to
60:33 - say true and that now you'll see this
60:35 - next button appears and now I can style
60:38 - this next button so if I click into the
60:39 - next button here which I'm on I can go
60:41 - ahead to go to Styles here I can add a
60:43 - class so we'll say add style and we'll
60:46 - just call
60:47 - this you know what actually we could
60:49 - what we could do is we could just reuse
60:52 - the answer style so if we do that now it
60:54 - looks just like the answers which I
60:56 - think is actually fine but we will add
60:58 - another selector to this as well so
61:00 - we'll just say add style we'll actually
61:03 - create another class I will'll call this
61:07 - next- BTN and create that and then we'll
61:11 - just add a little bit of margin so if I
61:12 - go here to margin it's going to go like
61:15 - that uh and sorry I don't want these to
61:17 - be on all of them so I'm going to unlock
61:19 - these so zero zero I just want actually
61:23 - 10 pixels of left margin so let's add
61:27 - that or no not left top margin so that
61:30 - we kind of get a bit of spacing here
61:32 - between the other um what do you call it
61:34 - options okay so I think that styled that
61:38 - now in the same light here we have this
61:41 - reset component that we can't see so if
61:43 - we want to view that we could just have
61:45 - to do something like this or true and
61:49 - now it's going to show us the reset
61:50 - component and then we can adjust this
61:52 - however we want so for this button this
61:53 - is the one that I actually wanted to
61:55 - change so I'm going to click on the
61:56 - button click button and let's actually
61:59 - just style this just like the next
62:01 - button and just like our answer press to
62:04 - try again the one thing we will do
62:06 - though is we will add a style so let's
62:10 - go to call this what do we want to call
62:14 - this
62:16 - reset
62:18 - BTN and create that class okay and I
62:23 - just want to set the width so for the
62:25 - width we're going to change that to 100%
62:28 - because I don't want it to be small like
62:29 - the other ones okay you scored 0% we can
62:32 - adjust this text now if we want so we
62:33 - can go to the H1 out of style reset
62:37 - text okay and if we go here to the font
62:42 - family we can adjust that and that is
62:45 - looking a little bit nicer sweet so
62:48 - that's that we can close out of that
62:51 - close that for a second I'm just going
62:53 - to go back to app. TSX here and I'm just
62:55 - going to remove some of these
62:56 - adjustments that we did so we'll go true
62:59 - and waiting to
63:00 - advance okay very nice and now finally
63:05 - we can rerun our Dev server I think it's
63:07 - still running so yeah let's open this up
63:10 - okay and we can test this out Tim next
63:15 - question Jose next question you scored
63:18 - 50% press to try again if we want to put
63:21 - that in the middle of the screen we can
63:22 - you can see that we have a fully
63:24 - implemented quiz very nice now obviously
63:27 - if you want to add more questions to the
63:29 - quiz you can go here to questions. Json
63:31 - and you can just add them in so I think
63:33 - guys that is pretty much it uh we can
63:36 - quickly run through the project just to
63:38 - make sure everyone's clear on the code
63:39 - all of this will of course be available
63:41 - to download from the link in the
63:42 - description so I'll skip the Styles and
63:45 - we'll start with app inside of app we
63:47 - have a few pieces of state right so
63:49 - current question index correct answers
63:51 - incorrect answers waiting to advance we
63:52 - also grab the questions from our Json
63:54 - file we then have some functions on
63:56 - submit this handles what happens when we
63:58 - actually answer a question on Advance
64:00 - this is how we move to the next question
64:02 - and then reset this is is going to reset
64:04 - the game so we can play again we then
64:07 - have this case here which is handling if
64:09 - we've ended the game so if we've
64:10 - actually completed the quiz we display
64:12 - that reset component and then when we
64:14 - press that button it actually resets and
64:16 - brings us back to the previous state so
64:18 - this hopefully kind of shows you how you
64:20 - store the main parent State you need in
64:22 - the app component and then you pass call
64:24 - back functions which can adjust that
64:26 - state from the interior components that
64:28 - you're
64:29 - displaying okay so then down here we
64:31 - simply render our St bar and the
64:33 - question component and then we have this
64:35 - Dynamic render here so if we're waiting
64:36 - to advance we're going to display this
64:38 - button which we could have put in a
64:39 - component as well if we want it to okay
64:41 - now we go down to the let's go with the
64:45 - St bar and the St bar very simple we're
64:48 - just displaying the three piece of
64:49 - information that we need in a separate
64:50 - component we have reset again pretty
64:53 - straightforward we have a button when
64:54 - you press the button it's going to call
64:56 - the function from the prop reset
64:57 - everything we have an H1 tag just
64:59 - displaying how you actually performed
65:02 - question. TSX we display what the actual
65:04 - question is we then render all of the
65:06 - possible choices or answers if we go to
65:08 - answers bit more complicated this just
65:11 - because we need to know if we're
65:12 - displaying them as red or green text so
65:14 - we go here and we do all the dynamic
65:16 - rendering and display each of our
65:18 - individual answers either disabling them
65:20 - or adjusting the color when we need to
65:22 - lastly answer simply displays the answer
65:24 - and then we have kind of this style tag
65:26 - here so that we know if we're doing it
65:27 - red green or whatever color we pass it
65:30 - okay so I think guys that is going to
65:31 - wrap it up I hope you found value in
65:33 - this video and especially with this tool
65:35 - codex is really cool again I know
65:38 - they're the sponsor of this video but I
65:39 - had a really fun time messing around
65:41 - with this and especially once you get
65:42 - into larger projects it's really useful
65:44 - to be able to kind of ab test your
65:46 - components have multiple boards for them
65:49 - see how they look in different states
65:51 - and even kind of inject them and move
65:53 - them around in the project a few
65:55 - features I didn't show you right away
65:57 - was that we can actually add components
65:59 - in here so you see there's this little
66:00 - add button and it there's all these
66:02 - components I could actually just
66:03 - directly add into the editor right so I
66:06 - can actually create the jsx or the
66:08 - structure of my UI using this graphical
66:11 - tool if I decided to do that for me
66:13 - probably not something I'll do because
66:14 - I'd rather cat it out but for anyone
66:16 - who's more of a designer you can make a
66:18 - component make a version of that
66:20 - component as one of the boards and then
66:21 - you can actually move it around so you
66:23 - can see we have our red button our green
66:25 - button we have all the different
66:26 - components here rendered that we could
66:28 - actually just take and kind of drag in
66:30 - and move where we want them to be in a
66:32 - specific board so really useful tool
66:34 - again completely free I hope you guys
66:36 - found value in it and I'd love to hear
66:37 - what you think of it in the comments
66:39 - down below so with that said I'll wrap
66:40 - it up if you enjoyed make sure leave a
66:42 - like subscribe to the channel and I will
66:43 - see you in another
66:46 - [Music]
66:52 - one

Cleaned transcript:

in this video I'll show you how to build a beginner SL intermediate react project specifically will'll work on a trivia game I'll give you a demo in just a second but this project is great for anyone just getting started with react looking really to improve their skills get more comfortable with the framework and learn about some best practices like how to structure a slightly larger project how to pick the different components you're going to have and how to control components and pass data down throughout them I'm going to show you a ton of stuff here and teach you a lot about react with that said let's get into a quick demo and then we'll start building this project so I have a demo of the project running in front of me now this is a simple trivia game you can have as many questions as you'd like but for this short demo I've just gone with two now we'll keep track of the number of correct and incorrect questions and give feedback to the user when they get one correct or incorrect so here you can see the first question is what is Tim's middle name in this case my name is JN so I'll go ahead and select that and then I can click next now it says what is Tim's favorite food I'll go with the incorrect answer here which is which is Wings you see that is wrong and it shows me the correct answer here which is sake now when I click next tells me my score and I have the option to play again now I know that this seems uh relatively simple it feels like this should be able to be created in a few minutes but this is actually a really good project to demonstrate how you structure the different components involved in this and how you can flow through different states Pages show the correct answer incorrect answer there's actually a lot here so just trust me you're going to get a ton of value from this project now as well as just is teaching you react I'm going to show you a little bit of typescript don't worry if you've never used it before I'll assume that you have no idea what it is and you'll see how simple it can be to actually implement this in your project and how helpful it will be when your project starts to get a little bit larger so let me pop over to my IDE and we'll start getting this project set up so we're going to get into the setup and start writing some code but I need to mention that in this video I'm going to be using a free tool called codex now this is actually a visual IDE for react that works in companionship with vs code or whatever other editor you want to use now what that means is that we're still going to write this react application exactly as you normally would but we'll just have some more powerful ability to view exactly what's going on in our individual components and to edit them create layouts add Styles and do some of the more difficult things when you're just looking at the code rather than looking at the entire component tree or hierarchy so for example you can see that I've actually have the app open that I built beforehand obviously I built this first just to make sure the concept was good and you can see I'm kind of inside of a Stop Bar component we'll walk through this later on but inside of the Stop Bar component on the left hand side I can see all of the different elements that I have which allows me to very easily find an area that I need to add a style to or fix or move around and if I click on one like the stap our container here I can go and actually add styles to it directly from this editor so that means for any of you that hate CSS just like I do you don't actually need to write this CSS manually you can do it in this cool editor while still writing all of the bulk of your code in an IDE and what will happen is when you make a change here in codex it will directly change that inside of your IDE it will actually add or remove or modify the appropriate lines of code so you're not doing this weird syncing process where you have to write your code in a special way and you're exporting and importing and all the stuff you've probably seen in tools that look similar like similar to this story so what we need to start by doing here is just downloading codex again it's free you can do that from the link in the description and I'm going to initialize the project from codex so it sets up the necessary dependencies and then we'll start actually writing code and creating our components so what I did is just close the Codex app and reopen it just so I get a fresh screen here and what I'm going to do is go ahead and click on new project now once I go to new project I'm going to select on vit or Vite now you might not have seen this before if you're complete beginner but this is kind of the new version of create react app where you're using this as like the the template of your project or like the boiler plate now for the app I'm going to go with react trivia uh and we'll go with tutorial like that and I will just save this on my desktop now this is going to set us up with SC CSS CSS modules and V again we'll discuss this in a second once it loads all right so it's created that template for us now this is like the exact same thing as running a terminal command that would have done that for us as well just happening now in codex and you can see it's prompting me to actually install all of the modules that we need so I'm going to go ahead and click on run now this is just installing the node modules pretty much going to go ahead and click close And now we get the app loaded here in codex and you'll see in a second it will actually render for us the preview of the template so this is the template it gives us where we can actually uh I think we can press on one of these buttons or something and it will count up anyways uh hopefully you got the idea but now what we'll do is we'll open the project in our editor or in our IDE so just like before nothing's changed CH I'm going to open this up in vs code now when I did that in codex it created this on my desktop for you it may have created it somewhere else so find the file location where this was created open up the project in your editor and now we are good to go so what I can do is open up Source here and I'll just kind of go through some of the things that are set up for us because you may not have seen this type of template before then we'll start writing some code so first of all this project is using typescript now we don't need to use typescript but in this project it's going to be help will just to have a few very simple types so if you've never used it before don't worry you're going to learn a bit about it in this video anyways that's why we have these TSX files these are similar to jsx files but TSX is the typescript okay so it's like the typescript equivalent inside of here you'll see a few things are slightly different just because we're using typescript and we have a few Imports for example importing like an app module. sccss now if you've never seen this before this is a special type of CSS file that allows us to do things like Define variables inherit classes and just some more advanced CSS properties we won't really use many of those in this video but it's nice to be familiar with these types of files and how you import them utilize them Etc so we have say index.css this just a normal CSS file but then we have an app. module. sccss file which has all of the Styles directly for the app component so we'll create a new one of these CSS files for each one of our individual components now what I like to start by doing is just cleaning everything up a little bit so I'm actually going to delete everything inside of here I'm going to go to index.css same thing I'm going to delete everything inside of there I'm going to go to main. TSX we can keep all of this this is what's going to be the entry point of our application I'm then going to go to app. TSX and I'm going to delete everything except one of the divs that's inside of here now that's going to have a bunch of uh kind of unused Imports now so I'm going to get rid of all of those I will get rid of this state which means I can get rid of this as well and I'm going to remove the class name reference here from Styles but we will use Styles later on so now we should just have an empty application and if we want to verify that I can go back to codex here and open that up and you can see inside of the app it's completely empty now what we're going to be doing is just writing um some new components and kind of creating a bit of structure here and then I'll show you step by step how we view exactly what we're doing in codex now we also can run this from a Dev server so that means I can go here and I can type npm run Dev in my terminal and this will just run the dev server for me where now I can view this from my browser now we can view this from the browser like we normally would but in codex we're going to get a bit more power right with the ability to actually edit and view right into the tree in the hierarchy which will be a little bit more useful so I'm going to close this for now because we don't really need that this second all right so now that we've got our setup done and we're kind of in the app here we can start writing some code so I want to begin by breaking down what it is exactly we need to do and how we're going to accomplish that so we're creating a trivia game right and for that trivia game you saw that we're going to have a few different components we're going to have multiple questions and we're going to progress through the different questions uh and just allow the user to answer them right pretty straightforward we're going to keep track of their score at the end so the first thing we need to consider is where are we going to store our questions and how are we going to load those now I want to do this in a Json file that means that we'll have an individual file that will load all of the questions from and that way we can add more questions quite easily we could download sets of questions we can make this quite flexible so I'm going to begin by making a Json file now after we make a Json file what we'll need to do is load in those questions we can randomize them or Shuffle if we want to do that then we need to display them to the screen and when we're displaying them to the screen we want to keep track of what question we're on how many we got correct and how many we got incorrect so that's going to involve having that kind of stat bar component there so we can build that out then we're going to have an individual question now each question could be represented as a component then within the question we'll have the question itself and we'll have the possible answers each one of those answers logically makes sense to be a component as well so we'll go through this step by step as we actually build the code but I want you to think to yourself if you were making this from scratch how would you figure out what components you're using and what you want to consider is what is going to be reused what am I rendering multiple times to the screen and what makes sense to be its own kind of isolated and discreet object or in this case component now it's relatively simple for this project you'll see how I structure this and how we build it out and make everything nice and simple and easy to read uh each step of the way so let's start with that Json file we're going to go inside of source here and we're going to make a new file called questions. Json now Json is Javascript object notation so what we can write in here looks pretty much like a JavaScript object so we're going to write a set of curly braces we're going to do a key here here now the key is going to be questions colon and then I'm going to put an array now inside the array we're going to have objects that represent each question so we're going to make an object here and for each question we need to think okay what makes up a question well we have the actual question itself or like the text or the content we then have the possible answers in our case we'll go with four but it could be more if we want to and then we'll have what the correct answer is so we're going to say question as a key is equal to a string and then we'll put the question now you can make this whatever question you want in my case I'll just go with what is my name okay then we're going to have the answers like that this is going to be an array and inside here we're going to put the potential answers now we'll have Tim that'll be the correct answer we'll have John we'll have Susan we'll have maybe Bert and then we're going to go with correct answer idx which stands for index and I'm going to make this equal to zero now what I'm saying there is that the index of the correct answer is zero meaning the first option I have in my answers array if I did correct answer index is one that would indicate that JN is the correct answer so I'm just specifying which of the potential answers here is actually correct and rather than answers we could actually go with choices that might make a bit more sense okay so I'm going to copy this and paste and I'm going to say what is my last name and then we'll change this so that is actually my last name uh we can go with I don't know what's a good last name like Smith um an and I don't know Jose I know those aren't really last names but that's fine we'll just put those there okay so now we have two questions we can add some more later on but for now this is fine for doing the test so what we want to do now is we want to actually be able to load those questions into our app and for now what we could do is just maybe log some of them or just see uh or like display like a simple question on the screen okay so to actually take this questions. Json and import this inside of the app we're going to do the following we're going to say import and I'm going to go with questions from and then we're just going to say questions. Json and we actually need to put a do slash here indicating a relative path meaning from this directory load questions. Json so now we're actually going to have that Json object here the issue is we don't really know what's inside of it when we're kind of hovering over top of it right so you can see like I'm hovering questions and I don't know what keys I have in there what values I have it's going to be difficult to work with so this is where something like typescript comes in and what I can actually do is create a type of my Json file and I can type this kind of variable you'll see in a second how that works and that now allows me to actually get autoc completions for this value so what I can do is go to source and create a new file here called types. TS okay so types. typescript is the extension now I'm going to define a few typescript types and I'll explain how they work and then we'll use them to type that Json file so that we understand what what data story we're actually working with so we're going to create a type we're going to say export type and then we're going to give this a name what do I want to call this going to call this questions and this is going to be equal to a set of cly braces now inside of here what I'm going to do is Define the keys or Define the values or what's actually inside of my object so if I go look at questions we have an object and we have one key here called questions which is equal to an array of questions okay so what I would write here is the following I would say questions which is the name of my key colon and then I'm going to do an array and this is going to be an array of questions now the questions themselves are their own type right a question has a question the choices and the correct answer index so I'm going to create a type for that as well I'm going to say export type question an individual question right and inside of here we're going to say question colon string that means that we have a question key which has the value of type string we then have our choices and this is an array of what an array of strings so we're going to say string and then a set of square brackets and then we have the correct answer index which is a number so what I've done is again defined all of the keys and all of their corresponding values for this type now what I can do is take this array here and I can say question and then put an array sign so that now means for questions I have an array of types or of objects that conform to the type question meaning they each have a question choices and correct answer index field hopefully that makes sense but that's your one minute typescript lesson okay so if I go back to app now what I can actually do is make a variable and I can say const all questions is equal to to questions as and then I can actually put the type that we just wrote which is questions now notice if I hover over questions here it's actually inferring that we need to uh what do you call this import this from do/ types so it's going to automatically import that for me otherwise you could just write import set of curly braces questions set of curly braces there you go uh you now have this in here so now if I hover over all questions you see it as the type questions and it will actually give me autoc completion and allow me to use this more easily throughout my program so now that we have our questions loaded in what we need to keep track of from this main app component is what question we're currently on how many we've got correct and how many we've gotten incorrect now to do that we're going to use State now state is a piece of the react component that can change and anytime the state changes it will automatically render the component for us I'm sure many of you are already familiar with that uh as you probably have some experience with react if you're watching this video what I will do is go to the top of my program here and I'll say import use state from react okay now what I'm going to do is set up a few different pieces of state that we're going to need and we're going to use that in a second so I'm going to say cons and inside of a set of square brackets I'm going to say current question idx okay and then Set current question idx is equal to use State and we're going to put a zero here now really what we're doing here is just keeping track of the index of the current question that we're on when we have zero that means we're on the first question one we're on the second question and we'll Advance this to move to the next question next we're going to have const and we're going to say correct answers and then set correct answers like that is equal to use State and for now this will be zero and then we can copy this and we'll just do the same thing for the incorrect so we'll just change that to in and then set incorrect answers like that okay so now we have the three piece of state that we need now what I want to do is set up the stat bar now the stat bar is going to tell us what question we're on and how many correct and incorrect answers we have and we'll pass to that stat bar these pieces of state so to create the stat bar we're actually going to go in our source folder here we're going to make a new folder and we're going to call this components now it's just nice to organize our components that aren't the main kind of root component like the app one is inside of a folder now what I'm going to do is actually just delete this assets folder because we don't need that anymore so let's get rid of that and then inside of components I'm going to make a new file and I'm going to call this my star. TSX okay now we're going to define the St bar component so we're going to say function St bar like that uh and this is equal to a function and this is going to return for right now simply a div now what I like to start with when I write my functions and actually let me just go down here and say export default St bar if you're unfamiliar with that this is making it so St bar is available outside of this individual typescript file but inside of here uh what I want to start by doing is defining the props that we need to pass to this component now the props are pretty much the variables or the input to the component right so in this case we want the kind of current question so yeah we want like what question we're on we need the total number of questions and then the correct and the incorrect questions so what I'm going to do is Define a type here in typescript and I'm going to say type props is equal to this and I'm going to say current question and this is going to be a number I'm going to say total questions and this is going to be a number I'm going to say correct this will be a number and then I'm going to say Incorrect and this will be a number okay and then I'm going to go to stat bar here and I'm going to say props colon and then props like that which now means I can access all three of these values from this props variable now what we'll do uh actually I don't think I need to do anything at the top here is inside the div we'll just render inside of paragraph tags the three pieces of information that we want and then I'll actually show you how inside of uh codex we can go and create the correct styling for this so I'm going to go inside of paragraph tag one and I'm going to put kind of some jsx syntax here where I say question colon then this is going to be the current question so Props current question and then divided by or out of and then I'm going to do another set of braces here and then props do total questions so what I'm kind of displaying here is okay you're on question one out of five or one out of four or whatever right so I'm taking the data past in here and displaying that now down here I'm going to say correct colon and then this is going to be props doc correct and then we're going to do the same down here for incorrect okay incorrect props do incorrect okay so now we have a stat bar now what I can do is go to my app and I can render my St bar inside of here so I'm just going to say St bar like that notice it's going to automatically import that for me and then I can go and write the props now the props for this are the following and if we don't know what they are we can actually hover over top of this it will tell us what we're missing because we're using typescript so I'm going to say the current question is equal to and this is going to be the current if we can get out of this question index + one the reason I'm adding one is I want to be displaying question one when we're on the zeroth index which is the first question so we have zero indexing here so we just have to add one to that so we get the correct uh representation of the question then we're going to say the total questions is equal to and this is going to be all questions do questions because remember that this type here has the field questions which is an array so we're accessing questions getting the length of that array and that's the total number of questions that we have so go back here okay so that's total questions and this is going to be do length we are then going to say correct is equal to the correct answers and incorrect is equal to the incorrect answers okay so that is our stat bar now if we want to view the stat bar we can go here to codex uh let's just reload this here okay and you can actually see that we're getting this information showing up on the screen so it says questions correct and incorrect now one cool thing in codex is that we can view all the individual components that have so that we can directly edit them so if I go down here it says scan for components now if I press that it's going to scan the app and it will actually find that we have this stat bar component now what I can do is create something known as a board now a board is a place that I can test the component and view different values and see how it responds uh and just kind of yeah mess with the component in a sense so if I create a new board here I can call this whatever I want in this case we'll just call it stat bar you'll see that now it will actually give us our component in isolation so notice how we don't have any values being passed to it like we did when we have the app because now we're just viewing this component in isolation so if I want to can zoom in here so let me make this 200% just so it's a little bit larger and if I actually bring up from the bottom of the screen here you can see that we have code and we have star. board. TSX now this is a codex file and notice it's rendering the St bar here without any props now what I can do is I can pass the props that I want to test and view inside of this board now that's not going to affect my source code it's not going to change anything inside of there but it's going to give me a place where I can view certain States or kind of properties or variants of my component I'm hoping that makes a bit of sense but if I go to St bar here and I go to uh and I add a prop sorry so what are the props that we had for St bar we had uh total questions so I can say total questions is equal to let's put this inside of there one uh let's say the current question is equal to two and notice this uh kind of updates in livetime now that doesn't make sense because it's more questions or the current questions greater than the number of questions we have but then I can say correct is equal to one and incorrect is equal to zero okay so now we get a version of this now what I want to do is I want to style this and get this in the correct layout so what I can do is select on this it's going to show my properties but I can go here to the style Tab and I can actually add Styles and selectors to this now it's not happening from the board here I have to go and click on edit component when I do that now it gives me the actual source code for this component so now I'm not editing the board which is where we kind of mess around with it I'm editing the actual code so here if I click on this div right I can go to where it says selectors I can add a style so I'm just going to make a new class here that I want to apply to this I'm going to call this the stat container okay if we can type that correctly and I'm going to click on create class now when I do that with stack container it's going to tell me where it's creating it in this case star. module. sccss this is a new file it will create for me automatically I'm going to go ahead and press create and now we have this class that you can see has automat automatically been applied to our um what do you call it container and if I go here notice inside of St bar that it's actually changed inside of vs code okay so let's go back two codu and now let's start styling this component so first of all I want to have this in a horizontal layout which means I need my Flex to be in the row Direction so how do I do that I got to see all the little buttons that we have here we have block inline block inline Flex so I'm going to press on Flex here for the layout that's going to give me a flex row now you can choose the direction I'm going to keep this as horizontal and we have options like wrapping aligning ET Etc so what I would like to do is I would like to add some gap between my different components here so I can add a gap say of 10 pixels and now they're a little bit more spaced out now what I also want to do is I want to create kind of a container around this with some padding and a background color so I got to find where this is there's some padding so I'm going to go to padding and I'm going to add 10 pixels there okay so it's getting a little bit larger we can manually adjust the size if we want to do that and we can go to things like order Corners background that's what I want so for background I'm going to select kind of like a dark gray here maybe a little bit lighter what do we actually want let's go with like a dark dark gray and then we can go to the text color so I got to find where that is here you go font okay select the color and we'll go with white okay so let's make that more white and if we want we can change the font family let's see how that looks okay actually kind of like that that's nice and if we want we can add some borders so uh if I want to do Corners I can say what is this like 10 pixels and now this will actually add rounded Corners we can't see it the way that we have it displayed right now but we will see that when we have it rendered in the larger uh app okay so you can see that I just styled all of that without actually having to use uh regular CSS I can just press all the buttons on the side which for me is like the most valuable part of this tool now if I go back to home here and we go to app uh this should update in a second you can see this is updated and that's displayed now I'm not sure if the rounded Corners are working uh I might just be using the wrong properties but we can do this manually if we want so if we go to stb bar. module. CSS yeah the Border radius one pixel oh it's cuz I didn't add 10 okay so that's why so border radius 10 pixels and that should make it a little bit larger for me okay so there you go that is our St bar now that we have the St bar we want to start displaying our questions so we're going to create a new component for the questions let's go ahead and do that so new component here and call this question. TSX now let's make another function and we'll call this question okay and we're going to say export default question all right and actually I'm going to call this question comp the reason for that is we have a type called question and it's going to mess up a little bit if we have uh question and question as like duplicated names right so I'm just going to name this question comp for component I'm going to say type props is equal to and then we'll create the props for our question all right so for our question we need to know first of all what the actual question is so I'm going to go here and say question colon question and I'm going to import that from my types because we're going to pass an individual question which contains the question the choices and the correct answer index now what we're also going to need here is a function to call to indicate to the app when we we've Advanced to the next question and if we got the question correct or incorrect you'll see what I mean here in a second but I'm going to say uh on should we go on press I'm going to say on submit okay and this is going to be a function that is parenthesis and then this is going to be equal sign and then what do you call this here the greater than sign and then void this is the type signature for just a function that doesn't return any value and we're going to take in a parameter here called correct which is a Boolean so what I just did is type here the parameter of my function if you haven't seen this in typescript and I'm saying okay we're going to pass a function to onsubmit as a prop and we're going to call this function when we submit the question so that the main app knows to advance us to the next question and to tell us if we got it correct or incorrect you'll see how this works in just a second now I'm going to go to here and I'm going to say props props like that and we're going to start writing the jsx for our question and styling it so what I'm going to do here is simply return a div inside of the div I'm going to have an H3 tag and I'm just going to render what the question is so I'm going to say props do question. question and then we're actually going to render here another component which is going to be the answers now we haven't ridden this component yet but the reason I'm writing this is we're going to handle all of those different answers um from that component not from the question component directly so now I'm going to make another component and I'm going to call this answers. TSX okay we're going to say function answers like that okay we're going to export this so export default answers we're going to create our props so we're going to say type props is equal to this now for the props just to make it simple we can actually just take the question directly so we can say question and then question like that and then we also need to have and on submit like that and this is going to be the same function we're going to say correct Boolean colon equal void like that because this is where we'll actually handle the logic for indicating whether we got a question correct or incorrect there's a few other ways we could set this up but I want to show you how we can pass data down from multiple components and you'll see what I mean as we start going so let's say props like this props okay now inside of here uh what do we need to do well we need to return some information about our answers so we're going to say return div and we're going to Loop through all of the potential answers we have we're going to display those uh and then we're going to set up some kind of on presses so like when you actually press on the answer it will call this function and it will either have correct or incorrect depending on the answer you selected so what we'll do here is we'll actually set up a map and we will say props do question. choices do map Now map is going to iterate over all of our choices for map app I'm going to take in my choice and the index of that choice because having the index will allow us to know if the choice is correct or not and we're going to say colon equal to and then we're going to return actually an answer component this will be another component that we're going to make so let's make that component I know we have a few here but uh we'll go through them in a second so we're going to say answer. TSX now we're going to make the answer component and we almost have all the components now this is done so we're going to say function answer like that now we're going to say export default answer okay from answer we got to Define our props so we're going to say type props like that now for this we are going to have an on press okay and this doesn't actually need to take anything it can just be a void so this is just the function we're going to call when we press this answer because this will be a button that we can select we then are going to have another value here which is going to be the text so this just be the text that we're going to be displaying and then lastly we're also going to have the color and this is going to be question mark equal to a string now when you put a question mark here in typescript that means this is optional now the reason I'm passing color is we need to know if we should be displaying this as like a normal kind of white text where we haven't pressed anything yet or red or green depending on if we've answered this correctly or incorrectly right so like if I answer we're going to display uh what the correct answer is in green and the incorrect answer is in Red so we need to know that in this answer component so we're going to go here and say props props like that and we are going to return our answer so we're going to say return like this and I think all we actually need here is a button so we'll say button and then inside the button we will have the text of props do text and we'll simply have the onclick equal to the props Doon press and that means when we press the button uh it will press this function or call that function and then we'll adjust the color in just one second in fact what we can do for the color is we can say style is equal to and then I'm going to put a set of uh kind of empty braces here and I'm going to say color question mark so actually this is props do color question mark and then we're going to go inside of here we're going to say color colon props docolor else we're just going to have an empty object now it might be a little bit clear if I put this in a variable so let's just say const style is equal to this and then we'll replace this with the style variable now what I'm doing is writing a tary if statement what that means is if we have a color provided to us so if you actually pass some string value here then we are going to create an object that has color colon prop. color which is a style attribute we're going to apply to this button otherwise we're just going to have nothing for the style meaning we're not going to make any changes at all now while I'm at it I'm actually thinking that I need to change this slightly I'm going to take style equals style here and I'm actually going to write a span and apply this to the span tag the reason I need to do this is I just want the color to affect the text I don't want it to affect the color of the button so I need to just wrap the text directly which is inside of the button now I'm also going to add one more prop here that I forgot about which is disabled we should spell that correctly because once we have answered the question we don't want to be able to press the button again so we're going to say disabled question mark colon and then this is going to be a Boolean and I'm going to go here to my button I'm going to say disabled question mark Or Not question mark sorry is equal to props do disabled okay so now we have our answer component this one is actually finished and if we want to view the answer component we can go to codex and just quickly have a look at it so let's just reload this it's just cuz we have some imports that weren't working let's rescan our components here you should see now that we get answer answers Etc if we go to answer we can create a board so let's make a board and call this answer red okay now let's zoom in on this a little bit all right here we go this is our answer notice we have some values we can pass in here so for the text I'm just going to go with Timothy which is actually my full name for the color will go with red notice that now creates red and then if we made it disabled it would actually disable the button so we can't press on it okay so that's one instance of the button that we can have a look at here now if we wanted to we could create another board for this button so I say new board and then answer green for example and now I can do the same thing so zoom in select my button if I can scroll over here okay so select that text Timothy spelled correctly and the color of green now again that doesn't actually affect my component in the code it just gives me a way to be able to view the different states of my button okay so now that we have that uh we can do a little bit of styling and we can actually display those answers so if we go to answers here we have this answer component and you can see that we need to take in the text and a few other things so first of all let's import this so I can go here and import this from slans now we're going to say the text is equal to the choice dot actually just the choice sorry that's all that needs to be then we're going to say the onpress is equal to and this is going to be a function that we're going to write now this is going to be a little bit more complex logic here but notice what I just did is I changed this so now we have these curly braces inside of this map and I'm just going to explicitly return answer now before it was implied that it was return because I didn't have the braces I just had parentheses es now since I have parentheses this is essentially acting as an inline function anyways for this function I'm going to write the on press function that we're going to call when we press on this answer now what's going to happen is whenever we press on the answer we need to take that data and pass that up right we need to give that to the parent component so it knows if we got it correct or if we got it incorrect right so we have answers but then from answers we have question and then from question we have the app component now all of these components need to pass the data up the way we do that is with something known as function callbacks which is what I'm using here in the props I'm hoping that makes sense but what I'll do here on the onpress is I will call this function that function will then be kind of represented here inside of the question and then we'll use that to then call the app uh here and tell us if we got it correct incorrect Etc okay so what does this uh need to do well first of all when we press on an answer we need to make it so that we can't press on any other answers now that means that we need to have a piece of state that tells us whether or not we've already selected an answer so I'm going to go up here and I'm going to say import use state from react okay and I'm going to make a piece of State here that essentially tells me if we've already answered the question or not now the way I can do that is I can just say const we can go with something like show Answer set show answer is equal to use State and we're going to go with false so now I'm going to write the onpress function so I'm going to say const on press is equal to an arrow function this Arrow function is going to take an index which is a number and we're going to do this we're going to say set show Answer equal to true because as soon as you press on any of the answers we want to display what the correct answer actually is and then we're going to say the following we're going to say props do onsubmit but then what we need to do is we need to indicate whether or not we got this question correct now we only got it correct if the index of the answer we pressed on is the same index as the uh what do you call it the correct answer from our question okay so we're going to say if the props do question. correct answer index is equal to this index then we got a correct otherwise it's not correct so this condition will be true or false which will then tell the question that we answered this correctly or we answered it incorrectly hoping that's making a bit of sense but what we'll do now is inside of the onpress we're actually going to write a function and this function is going to call the onpress function and pass the index so what we're doing is we're saying okay well as soon as we press the answer we want it to call some function this function is actually going to call the onpress function that we have written here and it's going to pass the index of whatever the answer is that we clicked on so that way we don't have to keep track of the index inside ins of the answer we just have that inside of this uh what do you call component okay so that Maps out all of our different questions now what we'll do to go a step further here is we'll say okay well if we're displaying the answer then we want to be telling the answer to show us red or green right if we're displaying it so what we can do to do that is we can say let color equal an empty string okay we then can write an if statement and we can say if show answer uh and actually we can do it like this we can say if show answer and props dot question. correct answer index is equal to the index then we're going to say the color is equal to Green okay now otherwise we'll say else if show Answer like this then the color is equal to Red now we'll keep going here in a second but what I'm saying is okay if we're showing the answer right right and the answer is correct so the one that we're displaying here if this is actually the correct answer then we're going to set the color equal to Green because it's right now if we're showing the answer and this wasn't the case so that was false then we're going to make the color red hopefully that's clear so here we can go and say color is equal to and we can just pass color and if none of these are true the color will just be an empty string so nothing will change now we also want to say disabled now disabled is going to be equal to show answer so if we are showing the answer we're going to disable the buttons so you can no longer press them so actually before we go back to codex I'm just going to go to app and I'm just going to render my question component so I'm going to say question comp like that and I'm going to say the question is equal to and this is going to be all questions do questions at the current question index and then we're going to say on submit is equal to and this is just going to be an empty function for right now uh that we'll fill in later so if I save that and I go back to codex here okay you can see let's close that and go to app if we view app here it's saying what is my name now for some reason it's not showing the answers but this is actually where codex can come in handy if I click on this now and I start going into the tree I can view all the different components that I have so I'm inside of the question component I have an expression and I'm just seeing what is my name which is telling me for some reason it's not actually displaying that aners component so let's go back to questions and you can see that's because we don't have answers here so that's why it's not showing up because I didn't render it here so let's render it here by doing answers like that we can go ahead and import that from do/ anwers and if I hover on this we need the question and the on submit so we're going to say question is equal to props do question and the onsubmit is going to be equal to the props do onsubmit like that okay okay so now if we go back to codex we should see that we are getting the different options right here and we are we're getting our four different buttons now we can test out their state in a second but for now let's go back here let's uh I'm not sure why we're getting an error there what's the log each child in list should have a unique key property okay so let's actually fix that first story so go here to answers now whenever we have this map here we have to add a key property to our different objects so I'm just going to say key is equal to idx and that's going to fix that error that we were seeing go back to codex here okay now we're no longer getting that error and what I want to do is I want to style my question component so I can go here go to my question component we can view that inside of here or we can view it directly inside of a board I think viewing it in here is fine for right now let's go into answers uh and let's style each individual answer and then let's lay them out in a 2X two layout all right so I'm going to start by actually styling the container now the container is going to be this div that includes my different answers now I want to make this a flex box so I'm going to go here and I'm going to add a style the style I add will be choices like that we'll create that inside of a new scss module okay and let's make the layout so let's select Flex horizontal and how do we want to align items uh we'll go Center and then justify and I want this to be actually is this correct here so for a line items that's fine Center Place items Center Place content I want to do that space between in this direction so I'm going to click on that one and now you can see it kind of aligns them space between the issue is I actually want these to be in a 2X two configuration now I think the way I need to do that is by adding a flex wrap I don't remember how how to do that exactly here all right so actually it's right here Flex wrap wrap so I'm going to click on wrap now if I go into my individual answer so I go to say the answer component right here and I go to the button I can now add a style on here and set a width and then I should get that 2x two configuration I'm looking for so I'm going to make a new class here create class I'm going to call this answer okay now for this we just want to set the width so we're going to go over to where do we have width right here and we're going to go 45% so I can go to pixel and just select percent there and now notice it brings us in that 2x two configuration uh with actually a 10% uh what do you call this here kind of pad we want it to be a little bit less I can do like 47.5% and then that gets a little bit larger okay so that's good for that sizing now let's actually just make the buttons look a little bit nicer so let's add a bit of padding so where's my padding padd padding padding padding is right here let's add 10 pixels of padding to our buttons let's add some background color so background I want that to be a similar gray color which I think is going to be like this one here okay that's better I want to change my text so let's go to text and color and let's make that white okay we can do that same font family which is this one weight we can actually make this bold I think those look a little bit nicer let's add a border so for the Border we go solid do I want it black let's go with a white pixel border like that for the corners let's go with 10 pixels of rounding okay now let's go back to our answers which we can do right here uh let's go to our div and let's add a bit of Gap so in the the column Direction I'm going to add 10 Gap that's a little bit nicer I don't know if we need a background color for that I think we can just add a background color to the whole screen and now our buttons are looking a bit nicer now if I want I can click on one answer here let's edit this component so let's go to the button and I can add actually states to this so you see where it says States I can click on element state I'm going to go to focus and now I'm editing the focus state so if I go to focus I can actually just change the Border color which is what I'm going to do so for the Border I'm going to change the color to be like a blue color just so it's kind of clear that we're hovering on it and then that should be good now I think I can preview this and notice when I hover over it or actually it's cuz it's in the focus state right now let's not no not active just focus uh okay I'm not sure exactly how to preview that state change I might need to do it from a board but I think you guys get the idea right when we hover on it now since I just added that Focus State uh it should actually show us that kind of blue outline all right so last thing here let's adjust this name so if we go back here to the H3 you can see this text is a little wonky so let's go H3 let's go to style let's add a class here let call this question okay create that now for question we'll just go and change the font so that it matches the other one and and we'll make the color be white now you're not going to be able to read it right away but we will set the background color of the entire screen in a second so now we can go back to app okay just go to the div and we'll change the background color now so for the background color We'll add a style press on create class okay go ahead and make that now we will change the background so that is going to be here let's make this like I don't know I don't know what color we want this to be let's go with like a more gray maybe you guys can see I'm struggling here with with selecting the colors you you guys can adjust this if you want but you get the idea that's what we'll go with for now I want to add a bit of padding in here so let's go to padding 10 pixels I did not mean to have a one pixel width so let's just make that back to Auto uh and there you go now we have a nice little container and most of the styling is done okay we're getting close to being finished here guys let's close that we do have some more logic to write though uh before we can wrap this up all right so actually most of the stuff from our answers questions Stop Bar those are done a lot of the logic now is going to happen inside of apps you can see that we're rendering the question component and then inside of question if I go here we have the onsubmit right we're passing that to answers from answers we uh have this onpress call whenever we press one of the answers which then calls the onsubmit which then if we go back calls this onsubmit which then in turn will call whatever function we pass here to onsubmit so that's what I want to write now because what I want to do is once we submit I want to update whether we got correct incorrect Etc and then I want to allow the user to advance to the next question so that's going to involve displaying a button and then that button will say you know move to the next question so what we'll have here is another piece of State we're going to say const waiting to advance we're going to say set waiting to advance is equal to you State and this is going to be false now I'm going to have a const on submit okay this going to be equal to a function and this is going to say correct and this is going to be a Boolean now what we're going to do here is we're going to say if correct then we're going to say set correct answers and this is going to be the correct answer is + one else we're going to say set incorrect answers and this is going to be the incorrect answers plus one we're then going to say set waiting to advance to be true okay so that's going to put us in a mode where now we are well waiting to advance all right now that we are waiting to advance what we need to do is have another button that we will display underneath here that says next so I'm going to say here if waiting to advance so waiting to advance and then we're just going to have a little button we're going to say button like that and this is going to say next question dot dot dot and on this button we're going to have an on click is equal to and we're going to call a function now the function we're going to have here is const Advance okay so we're going to call the advanced function so we'll just write Advance like that and now for the advanced function we're going to say set waiting to advance false because now we're no longer waiting to advance because we're advancing and we're going to increment the current question index so we're going to say set the so Set current question index equal to the current question index + one now we do need to check to see if we are currently at the last question but for now this should allow us to advance through the questions so what we can do is just take this on submit function and pass that here okay and now we should actually be able to run our app uh and see all of this working properly now this next button is going to look a j we can style that in a second but I just want to see if this is working so let's go here and type npm run Dev that's going to run the development server for us let's open this up here in our browser so let me pop that open wrong window it is over here you can see that uh it looks a little bit weird so I got to fix this Let me refresh this here uh I messed something up with the states but anyways says question 102 correct zero incorrect zero if I click on Tim boom it says 102 correct one next question brings me next question and then we got to fix this because it's still highlighting when it shouldn't be highlighting okay so a few things to fix here but you can see that this is uh kind of working and we can also adjust the width and the size of this if we wanted to do that okay so we're back here inside of vs code first let's fix that issue where it was still highlighting them when um we moved to the next question the way we can do that is we can go to answers here and we can import a use effect now what we need to do is just reset this state here so show answer anytime we get another question so this is actually really easy to do we can just type use effect pass a function and then inside of this set of parentheses here this is the dependency array this means that use effect this function is going to run anytime whatever we have inside of here changes so we're just going to say props Dot and this is going to be question so anytime we get a new question we're going to say set show Answer equal to false and that will um no longer show the answer for the next set of choices that we display okay so that's that so now if we go back to our Dev server so let's open this up here you'll see that if we go so Tim next question it gets reset okay so that's working we just need to fix our blue Highlight uh and then we need to have that kind of finished screen because here if I click next question you'll see the app crashes so we'll handle that in a second okay all right so let's open up codex let's go here into one of our answers we can go and press press edit component now when I click on this here if I go to this we'll go and look at our border and yes it looks like we have one pixel Border in the nonhover state so let me remove that let's go back here to States let's go hover and now I need to actually press this button which I forgot to do before so I'm going to create that now you can see the selector changed so now if I scroll down I can add a one pixel border and that should be good so if we go back here and we go back to this when I hover it you can see that we add that one pixel border now if we don't want it to move around and kind of jump like this the way we can fix that is we can go here we can get out of the hover state so just go to how do I change this answer and we can just add a one pixel border that is transparent or a different color so if I add that and how do I make this a different color let's make it just black okay so now if we go back you can see that we're not having it jump around because we're not changing the sizes okay so last thing to do is handle what happens when we end so let's write that the way we're going to do that is we're just going to have a component that will kind of be like our reset component so we can go to components and we can say reset. TSX with a capital R we'll say function reset like that okay we'll say export default reset and we'll type our props so let's say type props equal this we're going to say total questions number and then correct questions like that is a number we're going to take these in as props so Props props like that and we're just going to return uh a simple div that will display how we did now we also need to have a button so we're going to say on press okay and this will be a void and this will just call a function that will reset the game for us so we're going to have a div on the div we're going to have an onclick this is going to be the on press from our props we're then going to display an H1 that says you scored and we're going to take our props do correct questions and divide that by the props do total questions put that inside of a set of parenthesis and then multiply that by 100 and then put a percent so that we get the percentage that we scored we are then going to have a button or actually sorry so the on click needs to be on the button not the div and the button we'll say press to try again okay so that is our reset component fairly straightforward so what we'll kind of say here is if we have answered all of the questions already we have none left we're going to display that reset component and then when we press that reset button function it's actually going to reset the current question index to be back to zero and reset all of the different props that we need so what we can do here is say const actually not const we can just say if the current question index is greater than or equal to the all questions. questions. length then we will simply return the reset component now when we uh do this we need to pass our values so we're going to say total questions is equal to all questions do questions. length and notice that I get all of that autocomplete because I'm using typescript and then we're going to say the correct questions is equal to the correct answers so I probably should have named them the same thing but that's fine and then we're going to say onpress is equal to and we're going to write a reset function so we're going to say con reset is equal to this and we'll just pass that reset function and then inside of reset we will reset all of our state okay so we're going to say set the current question index back equal to zero we're going to say set the correct answers equal to zero we're going to say set the incorrect answers equal to zero and I think that's actually all we need if we reset those three we should be good and just for good measure we'll just say set waiting to advance equal to false as well just to make sure that that is not messed up okay let's give this a shot we'll do some final styling after this but if we refresh here okay let's answer Tim next question Smith next question you scored 50% press and try again go ahead and we can run that fantastic okay so last thing I want to do is just set a background color for the entire screen I want to style that next button and then I want to style that reset page and then we'll be done so to set the background color for the entire screen I'm just going to go to my index.css and I'm just going to say body or actually I'm going to say HTML comma body so I'm going to do this for both of them and I'm going to say the background color is equal to just a gray now if I do that let's go here you can see we have two different color Grays that's fine for now but at least the whole thing is gray okay now for the rest of this we can style it with uh codex so to do that we can go over to our app and you'll see that if I click into the app here notice that in this board we're not displaying the um the next button right because we need a certain condition to be true to be able to display that so if I go and view the code down here right app. TSX you'll see that if I kind of expand this we have this condition for the button but we're not seeing it on the screen here because that condition is not true so if I just want to edit the button right now what I can do is go to waiting to advance and I can just change this to say true and that now you'll see this next button appears and now I can style this next button so if I click into the next button here which I'm on I can go ahead to go to Styles here I can add a class so we'll say add style and we'll just call this you know what actually we could what we could do is we could just reuse the answer style so if we do that now it looks just like the answers which I think is actually fine but we will add another selector to this as well so we'll just say add style we'll actually create another class I will'll call this next BTN and create that and then we'll just add a little bit of margin so if I go here to margin it's going to go like that uh and sorry I don't want these to be on all of them so I'm going to unlock these so zero zero I just want actually 10 pixels of left margin so let's add that or no not left top margin so that we kind of get a bit of spacing here between the other um what do you call it options okay so I think that styled that now in the same light here we have this reset component that we can't see so if we want to view that we could just have to do something like this or true and now it's going to show us the reset component and then we can adjust this however we want so for this button this is the one that I actually wanted to change so I'm going to click on the button click button and let's actually just style this just like the next button and just like our answer press to try again the one thing we will do though is we will add a style so let's go to call this what do we want to call this reset BTN and create that class okay and I just want to set the width so for the width we're going to change that to 100% because I don't want it to be small like the other ones okay you scored 0% we can adjust this text now if we want so we can go to the H1 out of style reset text okay and if we go here to the font family we can adjust that and that is looking a little bit nicer sweet so that's that we can close out of that close that for a second I'm just going to go back to app. TSX here and I'm just going to remove some of these adjustments that we did so we'll go true and waiting to advance okay very nice and now finally we can rerun our Dev server I think it's still running so yeah let's open this up okay and we can test this out Tim next question Jose next question you scored 50% press to try again if we want to put that in the middle of the screen we can you can see that we have a fully implemented quiz very nice now obviously if you want to add more questions to the quiz you can go here to questions. Json and you can just add them in so I think guys that is pretty much it uh we can quickly run through the project just to make sure everyone's clear on the code all of this will of course be available to download from the link in the description so I'll skip the Styles and we'll start with app inside of app we have a few pieces of state right so current question index correct answers incorrect answers waiting to advance we also grab the questions from our Json file we then have some functions on submit this handles what happens when we actually answer a question on Advance this is how we move to the next question and then reset this is is going to reset the game so we can play again we then have this case here which is handling if we've ended the game so if we've actually completed the quiz we display that reset component and then when we press that button it actually resets and brings us back to the previous state so this hopefully kind of shows you how you store the main parent State you need in the app component and then you pass call back functions which can adjust that state from the interior components that you're displaying okay so then down here we simply render our St bar and the question component and then we have this Dynamic render here so if we're waiting to advance we're going to display this button which we could have put in a component as well if we want it to okay now we go down to the let's go with the St bar and the St bar very simple we're just displaying the three piece of information that we need in a separate component we have reset again pretty straightforward we have a button when you press the button it's going to call the function from the prop reset everything we have an H1 tag just displaying how you actually performed question. TSX we display what the actual question is we then render all of the possible choices or answers if we go to answers bit more complicated this just because we need to know if we're displaying them as red or green text so we go here and we do all the dynamic rendering and display each of our individual answers either disabling them or adjusting the color when we need to lastly answer simply displays the answer and then we have kind of this style tag here so that we know if we're doing it red green or whatever color we pass it okay so I think guys that is going to wrap it up I hope you found value in this video and especially with this tool codex is really cool again I know they're the sponsor of this video but I had a really fun time messing around with this and especially once you get into larger projects it's really useful to be able to kind of ab test your components have multiple boards for them see how they look in different states and even kind of inject them and move them around in the project a few features I didn't show you right away was that we can actually add components in here so you see there's this little add button and it there's all these components I could actually just directly add into the editor right so I can actually create the jsx or the structure of my UI using this graphical tool if I decided to do that for me probably not something I'll do because I'd rather cat it out but for anyone who's more of a designer you can make a component make a version of that component as one of the boards and then you can actually move it around so you can see we have our red button our green button we have all the different components here rendered that we could actually just take and kind of drag in and move where we want them to be in a specific board so really useful tool again completely free I hope you guys found value in it and I'd love to hear what you think of it in the comments down below so with that said I'll wrap it up if you enjoyed make sure leave a like subscribe to the channel and I will see you in another one
