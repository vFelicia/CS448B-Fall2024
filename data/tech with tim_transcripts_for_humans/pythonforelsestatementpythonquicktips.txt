With timestamps:

00:00 - hello everyone and welcome back to other
00:01 - Python quick tips video in this video
00:03 - I'm going to be talking about the for
00:05 - else statement now essentially the way
00:07 - if for else works is you have a for loop
00:09 - and then directly underneath that in the
00:11 - same indentation level you have an else
00:12 - statement but what does this else
00:14 - statement do I'm going to illustrate
00:15 - that to basic examples here so
00:17 - essentially the way this else statement
00:19 - works is it checks if you broke out of
00:21 - the loop using the break keyword or if
00:23 - you reach the end of the loop now that's
00:25 - extremely useful because sometimes you
00:27 - exit the loop and you want to know how
00:28 - you exited did you break from finding
00:31 - some kind of statement or seeing that
00:32 - break keyword or did you actually go
00:34 - through the entire loop and you ended
00:37 - because there was no more elements or no
00:38 - more numbers to loop through so there's
00:40 - two way you can two ways you can end the
00:41 - loop by breaking or just by running out
00:43 - of things to look for so essentially the
00:45 - way the sella statement works is if you
00:47 - break out of the loop it will not run
00:49 - but if you run through the entire loop
00:50 - and it does not witness this break
00:52 - statement then it will run whatever is
00:54 - in this else statement so this basic
00:56 - example you here I have a list called my
00:57 - list you can see the elements that are
00:58 - inside of it and we have this look for
01:00 - which is a number that we're gonna be
01:02 - looking for so essentially what my for
01:03 - loop is doing here is looking for this
01:05 - number and if it finds it what it's
01:07 - gonna do is say found whatever the
01:09 - number is and then break so if it finds
01:12 - it is not gonna print did not find but
01:13 - if for some reason we loop through this
01:15 - entire loop we cannot find this number
01:17 - which is 45 then it's gonna print out
01:19 - did not find so let me run this here and
01:21 - you can see that if I scroll up a bit we
01:23 - get did not find 45 as 45 is not in this
01:26 - list now if I put 100 here then you'll
01:28 - see that we got found a hundred and this
01:30 - else statement did not run so only runs
01:33 - when we loop through the list and we
01:35 - exit it without this break keyword so
01:37 - essentially we finish all of the
01:38 - possible things we can loop for and we
01:40 - didn't break all right so now I'm gonna
01:42 - go to example two so let's just delete
01:44 - this for now so example two is a little
01:47 - bit more complicated but shows another
01:49 - way that you can actually use this so
01:51 - what this does is essentially look for
01:52 - duplicate elements in two lists so what
01:54 - we're doing is looping through list 1
01:56 - which is this list here then we're
01:58 - looping through list 2 and then what
02:00 - we're gonna do is check whether or not
02:01 - an element exists in both list one and
02:03 - list two and if it does not we're gonna
02:05 - say it's only in list 1 otherwise we're
02:07 - gonna say it's in both lists so let me
02:09 - just run this and show you what I mean
02:10 - and it'll walk through it slowly so
02:12 - essentially what happens here is we get
02:13 - a bunch of
02:13 - print statements that says one is only
02:15 - in list 1 2 is in both lists and so on
02:17 - you can see how that works
02:19 - and the reason that this works is again
02:20 - because we have this 4 else statement
02:22 - and again this is indented inside of
02:24 - another for loop so every time that this
02:26 - for loop runs if we broke out we'll just
02:29 - print this and we won't do this else
02:31 - statement but if we didn't break which
02:33 - means we didn't find for example 1 or we
02:35 - didn't find 3 or 6 or whatever element
02:37 - in list 2 then we're gonna print X is
02:40 - only in list 1 which is gonna be that
02:41 - element that we were looping through so
02:43 - toe is that is healthy for else
02:44 - statement works pretty straightforward
02:46 - essentially like I've said a hundred
02:47 - times now if you break this else does
02:49 - not run if you get through the loop and
02:51 - you do not break out of it using the
02:53 - break keyword this else statement will
02:54 - run super useful one can definitely save
02:56 - you a lot of time and make you avoid
02:57 - having to use some like exterior lists
02:59 - and stuff like that that you might use
03:00 - before that has been quite Python quick
03:02 - tips for today if you guys enjoyed
03:03 - please make sure you leave a like and
03:05 - let me know what you want to see in
03:06 - future videos

Cleaned transcript:

hello everyone and welcome back to other Python quick tips video in this video I'm going to be talking about the for else statement now essentially the way if for else works is you have a for loop and then directly underneath that in the same indentation level you have an else statement but what does this else statement do I'm going to illustrate that to basic examples here so essentially the way this else statement works is it checks if you broke out of the loop using the break keyword or if you reach the end of the loop now that's extremely useful because sometimes you exit the loop and you want to know how you exited did you break from finding some kind of statement or seeing that break keyword or did you actually go through the entire loop and you ended because there was no more elements or no more numbers to loop through so there's two way you can two ways you can end the loop by breaking or just by running out of things to look for so essentially the way the sella statement works is if you break out of the loop it will not run but if you run through the entire loop and it does not witness this break statement then it will run whatever is in this else statement so this basic example you here I have a list called my list you can see the elements that are inside of it and we have this look for which is a number that we're gonna be looking for so essentially what my for loop is doing here is looking for this number and if it finds it what it's gonna do is say found whatever the number is and then break so if it finds it is not gonna print did not find but if for some reason we loop through this entire loop we cannot find this number which is 45 then it's gonna print out did not find so let me run this here and you can see that if I scroll up a bit we get did not find 45 as 45 is not in this list now if I put 100 here then you'll see that we got found a hundred and this else statement did not run so only runs when we loop through the list and we exit it without this break keyword so essentially we finish all of the possible things we can loop for and we didn't break all right so now I'm gonna go to example two so let's just delete this for now so example two is a little bit more complicated but shows another way that you can actually use this so what this does is essentially look for duplicate elements in two lists so what we're doing is looping through list 1 which is this list here then we're looping through list 2 and then what we're gonna do is check whether or not an element exists in both list one and list two and if it does not we're gonna say it's only in list 1 otherwise we're gonna say it's in both lists so let me just run this and show you what I mean and it'll walk through it slowly so essentially what happens here is we get a bunch of print statements that says one is only in list 1 2 is in both lists and so on you can see how that works and the reason that this works is again because we have this 4 else statement and again this is indented inside of another for loop so every time that this for loop runs if we broke out we'll just print this and we won't do this else statement but if we didn't break which means we didn't find for example 1 or we didn't find 3 or 6 or whatever element in list 2 then we're gonna print X is only in list 1 which is gonna be that element that we were looping through so toe is that is healthy for else statement works pretty straightforward essentially like I've said a hundred times now if you break this else does not run if you get through the loop and you do not break out of it using the break keyword this else statement will run super useful one can definitely save you a lot of time and make you avoid having to use some like exterior lists and stuff like that that you might use before that has been quite Python quick tips for today if you guys enjoyed please make sure you leave a like and let me know what you want to see in future videos
