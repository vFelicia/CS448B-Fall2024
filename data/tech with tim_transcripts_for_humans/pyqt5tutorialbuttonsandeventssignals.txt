With timestamps:

00:00 - hey guys and welcome back to another PI
00:02 - QT tutorials so in today's video we'll
00:04 - be doing is covering buttons button
00:07 - presses and modifying elements that
00:09 - we've already put on to the window now
00:12 - we're gonna actually be changing this
00:14 - code up quite a bit and you guys will
00:15 - see why as we progress through this
00:17 - tutorial but let's get started with
00:19 - buttons now if we want to add a button
00:21 - to our window all we have to do is very
00:24 - similar to what we did with the label
00:25 - and that is simply say let maybe b1 is
00:28 - our variable name will be equal to Qt
00:30 - widgets dot in this case push-button I
00:35 - believe cube push button how could I
00:38 - forget and then same thing here what
00:41 - we're gonna do is put that that's gonna
00:42 - be Unwin and now we're gonna set the
00:44 - text of our button by just doing button
00:46 - dot set text so we go here and we set
00:49 - this to maybe click me or something like
00:51 - that then that's all we need to do to
00:54 - display a button so if I run the program
00:56 - you can see that now we get this button
00:58 - up in the top hand corner but obviously
01:00 - when we click it nothing is happening so
01:03 - what we need to do next is kind of map
01:05 - this button click to an event so
01:09 - something that happens when we click
01:10 - this button now what we need to do to do
01:13 - that is first of all create a function
01:15 - that we will trigger when that button is
01:17 - clicked so in this case I'm going to
01:19 - create a function I'm gonna call this I
01:21 - don't know let's say clicked like that
01:25 - and in here all we're going to do is
01:27 - simply print to the screen click just to
01:30 - make sure that everything is actually
01:31 - working now we want to map the button
01:34 - press to this clicked function what we
01:37 - do is very simple we say button dot
01:39 - clicked
01:40 - connect and in here we just type the
01:43 - name of the function without the
01:45 - brackets so this is simply connecting
01:47 - that button click event which is this
01:49 - here - this clicked function now there's
01:52 - some other events that we can look for
01:54 - as well
01:54 - there are actually called signals in PI
01:58 - cutie but right now we're just gonna
02:00 - deal with click so now if I run the
02:02 - program and I do click me you can see
02:04 - that clicked shows up in the console
02:06 - down there in the bottom left hand
02:08 - corner of my screen now that's great
02:10 - null but that's really not that useful
02:12 - to us
02:13 - just to print something out to the
02:14 - screen in fact something that we might
02:16 - want to do is maybe change the contents
02:19 - of this label but how do we actually go
02:22 - about doing that in the current way that
02:24 - we've written this code well we don't
02:27 - actually know how and the reason I say
02:29 - that is because this needs to be mapped
02:31 - to a function and this function has no
02:34 - access to this label that we've created
02:37 - here so there actually is a way to do
02:40 - this the way you've written it but it's
02:41 - kind of complicated so I'm gonna show
02:42 - you a way to rewrite the code that we
02:44 - have right now into a class which will
02:46 - mean that all of these kind of clicked
02:49 - methods and all that will have access to
02:50 - everything so to do this we're gonna
02:53 - start and we'll just leave this code
02:54 - down below and we'll kind of delete it
02:55 - as we go through we're gonna create a
02:57 - class and we can call whatever we want
02:59 - but in this case I'm gonna call it my
03:01 - window now we are going to actually
03:04 - inherit from cue main window now what
03:09 - this means is we're gonna take all of
03:10 - the properties that cue main window has
03:13 - and we're gonna use them in my window
03:15 - and we're gonna change them slightly and
03:16 - modify some things and add some things
03:18 - to that window so the first method we
03:21 - need to write for this is actually be an
03:23 - it method Tran du underscore underscore
03:25 - knits underscore underscore we're gonna
03:27 - put self as an attribute and then inside
03:29 - if you're gonna call super my window
03:33 - self dot underscore underscore knit I
03:36 - just raw underscore and then here we
03:39 - won't pass anything now let me quickly
03:41 - talk about what we actually just did so
03:44 - any of you that are familiar with
03:45 - object-oriented prop programming
03:47 - probably know what this is if you're not
03:49 - I have a tutorial series on my channel
03:51 - I'll leave a link to that or a card if
03:53 - you want to get more familiar with
03:54 - Python object-oriented programming but
03:56 - essentially what we've done is we've
03:57 - done a little bit of inheritance here
03:59 - we've created a knit method which will
04:00 - run whatever we create an instance of my
04:02 - window and then we need to make sure
04:04 - that we're calling what's known as the
04:06 - parent constructor of this you know my
04:10 - window thing here so cue main window so
04:12 - that everything gets set up properly so
04:13 - that's what this line is doing here now
04:16 - the next method we're gonna call our
04:18 - Creed is actually gonna be an its UI now
04:21 - this some people will choose to omit but
04:24 - I like to do it this way it's gonna take
04:25 - an argument
04:26 - self and inside of here is gonna be
04:28 - where we put all the stuff that we want
04:31 - in our window so L so inside of an it
04:34 - I'm gonna call an its UI by doing self
04:36 - dot a knit UI like that and this way
04:41 - we're just kind of cleaning up our code
04:42 - a little bit so that all the stuff that
04:43 - we're gonna be putting onto our window
04:45 - will go inside of this method here so
04:48 - what goes in our window well that's
04:50 - gonna be all the stuff like the label
04:53 - and the button that we've created here
04:54 - so I'm just gonna copy that and put it
04:56 - inside of a knit UI like that now we are
05:00 - gonna have to change a few things
05:01 - however the first thing that we're going
05:03 - to need to change is win here now this
05:06 - is actually Q with Q main window and we
05:09 - when we create an instance of my window
05:11 - what we're really doing is creating an
05:12 - instance of Q main window so just like
05:15 - here when I said win equals Q main
05:17 - window
05:17 - well what that is actually happening in
05:20 - here when we have these widgets is we're
05:22 - gonna be adding them to the object
05:24 - itself so what we need to do in here is
05:27 - actually write self now if that's
05:29 - confusing I don't really know what to
05:31 - say but essentially we're gonna be
05:33 - creating an instance of my window and
05:35 - that's gonna be holding like this my
05:38 - window thing so we can't just add it to
05:40 - like win or we can't create a new window
05:42 - inside of here we need to add the widget
05:44 - to ourself because we this object is the
05:47 - actual window all right so now we're
05:49 - gonna change those to be self and what
05:52 - we're gonna do is actually add self
05:54 - before all of these so in for self dot
05:56 - label or add self and same thing for B
05:59 - one now the reason I'm doing this is
06:02 - because I want to be able to access
06:04 - label and B one anywhere throughout my
06:07 - object or throughout my class so that
06:10 - when we you know click a button I can
06:12 - actually change this label text from
06:14 - inside of that function or that method
06:16 - because it's a part of the class so the
06:18 - next thing I'm gonna do is actually
06:20 - create a method called clicked so I'm
06:23 - gonna say define clicked it's gonna take
06:25 - self and inside of here this time what
06:28 - we're gonna do is actually change the
06:29 - text that the label shows so I'm gonna
06:32 - say self dot label and we're able to do
06:35 - that again because we're inside this
06:36 - object don't set
06:38 - texts and we're gonna say you pressed
06:42 - the button
06:44 - like that now the next thing we're gonna
06:47 - do is just change this here this connect
06:49 - to be self dot clicked because we need
06:51 - to reference this clicked not this
06:53 - clicked down here and we're gonna remove
06:55 - a few things from our window here and
06:57 - I'm going to show you how this works so
06:59 - we're gonna get rid of this label on
07:01 - this button because we don't need that
07:02 - anymore and we're gonna take this wind
07:04 - dot set geometry and wind up set window
07:06 - title I'm gonna bring that up here into
07:09 - our a knit method so now since what we
07:13 - were doing before is setting the window
07:14 - geometry and setting the window title
07:16 - and that was again an instance of Q main
07:19 - window all we need to do actually just
07:20 - put self here instead of wind and this
07:23 - will do the exact same thing because
07:25 - again this is our window so if we want
07:28 - to change properties of the window we
07:29 - don't reference wind we're gonna wrap
07:31 - from self because you know that is the
07:33 - window awesome so now that we have that
07:36 - what we need to do actually here is just
07:38 - change win which is down here to be an
07:41 - instance of my window rather than Q main
07:44 - window so to do that we're just gonna
07:45 - change this to be my window and now we
07:49 - can actually go ahead and run the
07:50 - application and we'll see our window so
07:52 - let's test this out quickly and we get
07:54 - the exact same window kinda as before
07:56 - except now if we click the button you
07:58 - can actually see that it changes our
08:00 - label to say you pressed the but now
08:02 - notice I didn't add that oh end there
08:05 - and that's because it's actually being
08:07 - cut off and this is where we come to our
08:09 - next issue when we modify some of the
08:12 - attributes that are inside of our window
08:15 - we need to change the size of them as
08:17 - well so right now what was happening is
08:19 - when we initially create a label which
08:20 - we do here all it says is my first label
08:23 - and it has a set width so as soon as you
08:26 - know when I click this button and this
08:28 - width is greater than the width that it
08:30 - has it cuts off it doesn't show the rest
08:32 - of the text so we need to add is a way
08:34 - to update the width of this text and
08:37 - it's pretty straightforward all we're
08:38 - gonna do is create a method called
08:40 - update in here and this will
08:42 - automatically be called anytime there is
08:45 - a change to the window which is really
08:47 - nice so inside of here what I'm gonna do
08:49 - is just do self dot in this
08:52 - he's gonna say the label dot just sighs
08:56 - like that now what this is gonna do is
08:59 - just automatically adjust the size of
09:01 - the label to hold whatever text it is
09:03 - that we've given it and this update
09:05 - method will be called again anytime
09:07 - anything changed all right so small
09:09 - apologies on my part there guys this
09:11 - update method is not actually
09:13 - automatically called I'm thinking of
09:14 - another one what we need to do is every
09:16 - time we click the button what we're
09:18 - gonna do is just call this update method
09:21 - which means that since we know
09:23 - something's changing well we'll update
09:24 - that property accordingly so in here
09:26 - we're gonna say self dot updates like
09:28 - that and now when I run the program and
09:32 - we do click me it says you press the
09:34 - button and adjust that size accordingly
09:36 - so that has kind of been it for this
09:38 - tutorial we've talked about buttons
09:40 - triggering events with those buttons and
09:43 - also how to set up our code in a nice
09:45 - cleaning class that's gonna be a lot
09:47 - easier to work with in the future so
09:49 - hopefully you guys enjoyed the video as
09:51 - always if you have any questions feel
09:52 - free to leave a comment or join my
09:54 - discord server and with that being said
09:56 - I will see you guys in another video

Cleaned transcript:

hey guys and welcome back to another PI QT tutorials so in today's video we'll be doing is covering buttons button presses and modifying elements that we've already put on to the window now we're gonna actually be changing this code up quite a bit and you guys will see why as we progress through this tutorial but let's get started with buttons now if we want to add a button to our window all we have to do is very similar to what we did with the label and that is simply say let maybe b1 is our variable name will be equal to Qt widgets dot in this case pushbutton I believe cube push button how could I forget and then same thing here what we're gonna do is put that that's gonna be Unwin and now we're gonna set the text of our button by just doing button dot set text so we go here and we set this to maybe click me or something like that then that's all we need to do to display a button so if I run the program you can see that now we get this button up in the top hand corner but obviously when we click it nothing is happening so what we need to do next is kind of map this button click to an event so something that happens when we click this button now what we need to do to do that is first of all create a function that we will trigger when that button is clicked so in this case I'm going to create a function I'm gonna call this I don't know let's say clicked like that and in here all we're going to do is simply print to the screen click just to make sure that everything is actually working now we want to map the button press to this clicked function what we do is very simple we say button dot clicked connect and in here we just type the name of the function without the brackets so this is simply connecting that button click event which is this here this clicked function now there's some other events that we can look for as well there are actually called signals in PI cutie but right now we're just gonna deal with click so now if I run the program and I do click me you can see that clicked shows up in the console down there in the bottom left hand corner of my screen now that's great null but that's really not that useful to us just to print something out to the screen in fact something that we might want to do is maybe change the contents of this label but how do we actually go about doing that in the current way that we've written this code well we don't actually know how and the reason I say that is because this needs to be mapped to a function and this function has no access to this label that we've created here so there actually is a way to do this the way you've written it but it's kind of complicated so I'm gonna show you a way to rewrite the code that we have right now into a class which will mean that all of these kind of clicked methods and all that will have access to everything so to do this we're gonna start and we'll just leave this code down below and we'll kind of delete it as we go through we're gonna create a class and we can call whatever we want but in this case I'm gonna call it my window now we are going to actually inherit from cue main window now what this means is we're gonna take all of the properties that cue main window has and we're gonna use them in my window and we're gonna change them slightly and modify some things and add some things to that window so the first method we need to write for this is actually be an it method Tran du underscore underscore knits underscore underscore we're gonna put self as an attribute and then inside if you're gonna call super my window self dot underscore underscore knit I just raw underscore and then here we won't pass anything now let me quickly talk about what we actually just did so any of you that are familiar with objectoriented prop programming probably know what this is if you're not I have a tutorial series on my channel I'll leave a link to that or a card if you want to get more familiar with Python objectoriented programming but essentially what we've done is we've done a little bit of inheritance here we've created a knit method which will run whatever we create an instance of my window and then we need to make sure that we're calling what's known as the parent constructor of this you know my window thing here so cue main window so that everything gets set up properly so that's what this line is doing here now the next method we're gonna call our Creed is actually gonna be an its UI now this some people will choose to omit but I like to do it this way it's gonna take an argument self and inside of here is gonna be where we put all the stuff that we want in our window so L so inside of an it I'm gonna call an its UI by doing self dot a knit UI like that and this way we're just kind of cleaning up our code a little bit so that all the stuff that we're gonna be putting onto our window will go inside of this method here so what goes in our window well that's gonna be all the stuff like the label and the button that we've created here so I'm just gonna copy that and put it inside of a knit UI like that now we are gonna have to change a few things however the first thing that we're going to need to change is win here now this is actually Q with Q main window and we when we create an instance of my window what we're really doing is creating an instance of Q main window so just like here when I said win equals Q main window well what that is actually happening in here when we have these widgets is we're gonna be adding them to the object itself so what we need to do in here is actually write self now if that's confusing I don't really know what to say but essentially we're gonna be creating an instance of my window and that's gonna be holding like this my window thing so we can't just add it to like win or we can't create a new window inside of here we need to add the widget to ourself because we this object is the actual window all right so now we're gonna change those to be self and what we're gonna do is actually add self before all of these so in for self dot label or add self and same thing for B one now the reason I'm doing this is because I want to be able to access label and B one anywhere throughout my object or throughout my class so that when we you know click a button I can actually change this label text from inside of that function or that method because it's a part of the class so the next thing I'm gonna do is actually create a method called clicked so I'm gonna say define clicked it's gonna take self and inside of here this time what we're gonna do is actually change the text that the label shows so I'm gonna say self dot label and we're able to do that again because we're inside this object don't set texts and we're gonna say you pressed the button like that now the next thing we're gonna do is just change this here this connect to be self dot clicked because we need to reference this clicked not this clicked down here and we're gonna remove a few things from our window here and I'm going to show you how this works so we're gonna get rid of this label on this button because we don't need that anymore and we're gonna take this wind dot set geometry and wind up set window title I'm gonna bring that up here into our a knit method so now since what we were doing before is setting the window geometry and setting the window title and that was again an instance of Q main window all we need to do actually just put self here instead of wind and this will do the exact same thing because again this is our window so if we want to change properties of the window we don't reference wind we're gonna wrap from self because you know that is the window awesome so now that we have that what we need to do actually here is just change win which is down here to be an instance of my window rather than Q main window so to do that we're just gonna change this to be my window and now we can actually go ahead and run the application and we'll see our window so let's test this out quickly and we get the exact same window kinda as before except now if we click the button you can actually see that it changes our label to say you pressed the but now notice I didn't add that oh end there and that's because it's actually being cut off and this is where we come to our next issue when we modify some of the attributes that are inside of our window we need to change the size of them as well so right now what was happening is when we initially create a label which we do here all it says is my first label and it has a set width so as soon as you know when I click this button and this width is greater than the width that it has it cuts off it doesn't show the rest of the text so we need to add is a way to update the width of this text and it's pretty straightforward all we're gonna do is create a method called update in here and this will automatically be called anytime there is a change to the window which is really nice so inside of here what I'm gonna do is just do self dot in this he's gonna say the label dot just sighs like that now what this is gonna do is just automatically adjust the size of the label to hold whatever text it is that we've given it and this update method will be called again anytime anything changed all right so small apologies on my part there guys this update method is not actually automatically called I'm thinking of another one what we need to do is every time we click the button what we're gonna do is just call this update method which means that since we know something's changing well we'll update that property accordingly so in here we're gonna say self dot updates like that and now when I run the program and we do click me it says you press the button and adjust that size accordingly so that has kind of been it for this tutorial we've talked about buttons triggering events with those buttons and also how to set up our code in a nice cleaning class that's gonna be a lot easier to work with in the future so hopefully you guys enjoyed the video as always if you have any questions feel free to leave a comment or join my discord server and with that being said I will see you guys in another video
