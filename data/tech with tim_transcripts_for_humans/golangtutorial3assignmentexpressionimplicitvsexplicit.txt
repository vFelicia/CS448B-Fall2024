With timestamps:

00:02 - [Music]
00:06 - hello everybody and welcome back
00:09 - so in this golang tutorial we're gonna
00:10 - talk about explicit versus implicit
00:13 - variable creation slash declaration
00:16 - slash assignment now I know that sounds
00:18 - like a mouthful in a lot of big words I
00:20 - promise you it's not that bad
00:22 - these are just the best ways to really
00:24 - define what I'm trying to say is
00:26 - implicit versus explicit so if we look
00:29 - at this that we've done here in the last
00:30 - video on line six what this would be
00:33 - called or what I would categorize this
00:35 - as an explicit variable declaration now
00:38 - the reason it's explicit is because I
00:40 - have explicitly defined and stated what
00:43 - type this variable should be I've said
00:45 - it should be a you in 16 now we actually
00:48 - don't need to do this when we define
00:50 - variables we can and we should but we
00:53 - don't have to what I can actually do is
00:56 - do this I can say var number equals 260
00:59 - and what this means is tell going to
01:02 - implicitly define what type this
01:05 - variable should be now the reason we
01:07 - call this implicit is because this
01:10 - variable still has a type in fact this
01:12 - will likely be the same type as it was
01:14 - before but we are telling going to take
01:17 - a guess at what the type is based on
01:19 - what we put on the right side of this
01:21 - equal sign so we're pretty much saying
01:24 - whatever we have on this side make this
01:27 - variable that type that's kind of the
01:29 - basics behind it now if I go ahead and
01:30 - do like 260 here well the type that it
01:34 - would guess would be a string right
01:36 - which means I couldn't add 5 to it
01:37 - anymore that wouldn't work but if I put
01:39 - the number 2 then it would guess the
01:41 - type of int right or you int or whatever
01:43 - it would guess something like that now
01:45 - the only issue with doing this is
01:47 - sometimes you don't want it to
01:50 - implicitly guess the type because it's
01:53 - guess might be wrong right so you make
01:55 - the variable here but maybe later in the
01:57 - program you want to add a crazy large
02:00 - number to it or you want to make it
02:02 - negative or you want to do something
02:03 - like that but since you haven't
02:05 - explicitly defined the type you may not
02:08 - know what type of this variable actually
02:09 - is and when you try to do something to
02:11 - it you might run into
02:12 - issue because the type the golang guest
02:14 - is not the correct type that you
02:16 - actually wanted now in 99.9% of
02:20 - scenarios it's fine to not define the
02:22 - type and I'll show you a bunch of
02:24 - reasons and other ways where we can not
02:26 - define the type and make this law faster
02:28 - but just know that sometimes you want to
02:30 - define it and you should try to figure
02:32 - out when those times are right so this
02:34 - is again what's called implicit because
02:36 - golang just guesses the type and in fact
02:38 - to show you the type I'm gonna do
02:39 - something that I haven't talked about
02:40 - yet but I'm gonna say fmt print F this
02:44 - stands for print formatting I believe
02:46 - and I'm actually gonna put percent
02:48 - capital T comma number now what this
02:51 - does is give me the type of the variable
02:53 - so if I actually go here and go go run
02:55 - tutorial let's see what type that golang
02:58 - guest this variable number actually is
03:02 - okay so a guess is that it is type int
03:05 - so it doesn't go ahead and do the like
03:07 - 64 or 32 it just puts int whenever you
03:10 - put some kind of number here right so if
03:11 - I do like 2000 and we run this again
03:14 - this should give us the same value of
03:16 - int let's have a look it gives us int
03:18 - now if I do like 2000 point nine eight
03:21 - and then I run this so let's go I
03:23 - actually have to save that first and
03:25 - then up arrow run what type do we get we
03:28 - get float 64 so that is kind of the
03:31 - basics on how that works it implicitly
03:33 - just guesses what type it should be now
03:36 - that is one of the other ways to write a
03:38 - variable right is to do something like
03:39 - that now another thing that we can do is
03:42 - actually just type the name of the
03:44 - variable and we can use what's known as
03:46 - the expression assignment operator which
03:48 - is also called the walrus operator which
03:51 - is a colon equal sign and then just put
03:54 - the value that we want so what this is
03:56 - saying is do the same thing we did
03:59 - before just omit the VAR keyword so we
04:01 - have this number that's what we want to
04:03 - name our variable and let's assign it
04:05 - equal to in this case let's put 6 like
04:08 - that's the value we're gonna do and let
04:09 - go Leng guess what type this is that's
04:12 - what we're saying so if I save this and
04:14 - I run it again we should see that this
04:16 - is type int let's have a look there we
04:20 - go we get type int and that works so
04:22 - this is the fastest easiest way to
04:24 - declare variables is to type
04:26 - variable name : equal and then whatever
04:28 - variable or whatever data you want to
04:30 - store but just note that I cannot do
04:34 - something like this now right I cannot
04:36 - make number equal to STR of a type
04:39 - string and notice we're even getting the
04:41 - error here because it cannot use string
04:43 - as type int in assignment that's the
04:46 - basics behind this
04:47 - now same goes like this if I do hello
04:50 - now if I save this works fine but if I
04:53 - change number down here to be five this
04:56 - is not okay because again we cannot
04:59 - assign the value 5
05:00 - because this variable type is string in
05:02 - fact this expression here is the exact
05:04 - same as saying var number string equals
05:09 - hello it's just a shortcut and we're
05:12 - getting a squiggly line here just
05:13 - because we cannot define the same
05:15 - variable again so once I make it a
05:18 - string I cannot redefine it and recreate
05:21 - that variable which means doing
05:22 - something like num number colon equals 5
05:25 - here is not allowed because we already
05:28 - instantiated we already created that
05:30 - variable so that is the difference
05:32 - between implicit and explicit that
05:34 - that's the basics behind it now if we
05:36 - look at % T of this let's just have a
05:38 - look like that go run and string so that
05:44 - is pretty much the difference that's
05:46 - what I want to illustrate but to you
05:47 - with those variables so you do num colon
05:50 - equals something like that now an
05:51 - interesting thing to look at is actually
05:53 - what happens when we create a variable
05:55 - but we don't give it a value that's
05:57 - actually interesting so let's go back to
06:00 - fmt to print line so FM t to print Ln
06:03 - like that and actually let's define a
06:07 - few boolean variables and stuff like
06:09 - that and see what they are
06:10 - so number colon equals true this is fine
06:12 - this is a boolean type number colon
06:15 - equals false this is a boolean type
06:17 - notice that if I add a capital F here it
06:20 - doesn't highlight in purple which means
06:21 - this is nothing we don't understand what
06:23 - false with a capital F means and I'm
06:26 - trying to think of anything else I could
06:27 - show you here with some different types
06:29 - so actually let me show you what default
06:31 - types are so if I create a variable and
06:34 - let's call it number and let's make it
06:36 - you ain't 64 okay
06:39 - so type I want to make it now if I print
06:41 - out the value of number what do you
06:43 - think we're gonna get because I haven't
06:44 - assigned it anything right I've just
06:46 - said we have this variable it's this
06:48 - type but I haven't given it a value so
06:50 - what value do I actually get well that's
06:52 - a good question Tim let's look and we
06:55 - get the value zero so actually by
06:58 - default when we do something like this
07:00 - all of these types have a default value
07:02 - and this number will be set to that
07:05 - default value until it changes so now
07:08 - let's look at another example if I say
07:09 - var and I'm gonna call bool is actually
07:14 - a type of boolean like that uh let's
07:17 - call it BL and then cuz that's the type
07:20 - sorry so the type is bool not boolean my
07:23 - apologies so bar BL bool and now I go
07:26 - ahead and I just print out BL what do
07:29 - you think that default type is gonna be
07:31 - now remember boolean is true or false
07:33 - but what do you think the default types
07:35 - gonna be for that is it gonna be
07:36 - something is gonna be undefined well
07:38 - let's look the default type is false so
07:44 - pretty much if you wanted to determine
07:45 - the default type so you just do this
07:47 - print out the value and you'll see it
07:49 - but I just wanted you to realize that
07:50 - all of these types have a default value
07:52 - that will be assigned to the variable if
07:55 - you don't actually give it the value so
07:57 - obviously it now if I go down here and
07:59 - say BL equals true like that then BL
08:02 - will be equal to true so I can I can run
08:04 - this and we'll see that but if I didn't
08:07 - like before then it was equal to false
08:08 - so that's the idea um so that's pretty
08:10 - much been this video there's not much
08:12 - more to talk about I just really wanted
08:13 - to go over implicit versus explicit the
08:15 - difference and then show you some other
08:17 - things with default types and just more
08:19 - nuances with variables if you guys
08:20 - enjoyed make sure you leave a like
08:21 - subscribe and I will see you in the next
08:24 - one

Cleaned transcript:

hello everybody and welcome back so in this golang tutorial we're gonna talk about explicit versus implicit variable creation slash declaration slash assignment now I know that sounds like a mouthful in a lot of big words I promise you it's not that bad these are just the best ways to really define what I'm trying to say is implicit versus explicit so if we look at this that we've done here in the last video on line six what this would be called or what I would categorize this as an explicit variable declaration now the reason it's explicit is because I have explicitly defined and stated what type this variable should be I've said it should be a you in 16 now we actually don't need to do this when we define variables we can and we should but we don't have to what I can actually do is do this I can say var number equals 260 and what this means is tell going to implicitly define what type this variable should be now the reason we call this implicit is because this variable still has a type in fact this will likely be the same type as it was before but we are telling going to take a guess at what the type is based on what we put on the right side of this equal sign so we're pretty much saying whatever we have on this side make this variable that type that's kind of the basics behind it now if I go ahead and do like 260 here well the type that it would guess would be a string right which means I couldn't add 5 to it anymore that wouldn't work but if I put the number 2 then it would guess the type of int right or you int or whatever it would guess something like that now the only issue with doing this is sometimes you don't want it to implicitly guess the type because it's guess might be wrong right so you make the variable here but maybe later in the program you want to add a crazy large number to it or you want to make it negative or you want to do something like that but since you haven't explicitly defined the type you may not know what type of this variable actually is and when you try to do something to it you might run into issue because the type the golang guest is not the correct type that you actually wanted now in 99.9% of scenarios it's fine to not define the type and I'll show you a bunch of reasons and other ways where we can not define the type and make this law faster but just know that sometimes you want to define it and you should try to figure out when those times are right so this is again what's called implicit because golang just guesses the type and in fact to show you the type I'm gonna do something that I haven't talked about yet but I'm gonna say fmt print F this stands for print formatting I believe and I'm actually gonna put percent capital T comma number now what this does is give me the type of the variable so if I actually go here and go go run tutorial let's see what type that golang guest this variable number actually is okay so a guess is that it is type int so it doesn't go ahead and do the like 64 or 32 it just puts int whenever you put some kind of number here right so if I do like 2000 and we run this again this should give us the same value of int let's have a look it gives us int now if I do like 2000 point nine eight and then I run this so let's go I actually have to save that first and then up arrow run what type do we get we get float 64 so that is kind of the basics on how that works it implicitly just guesses what type it should be now that is one of the other ways to write a variable right is to do something like that now another thing that we can do is actually just type the name of the variable and we can use what's known as the expression assignment operator which is also called the walrus operator which is a colon equal sign and then just put the value that we want so what this is saying is do the same thing we did before just omit the VAR keyword so we have this number that's what we want to name our variable and let's assign it equal to in this case let's put 6 like that's the value we're gonna do and let go Leng guess what type this is that's what we're saying so if I save this and I run it again we should see that this is type int let's have a look there we go we get type int and that works so this is the fastest easiest way to declare variables is to type variable name equal and then whatever variable or whatever data you want to store but just note that I cannot do something like this now right I cannot make number equal to STR of a type string and notice we're even getting the error here because it cannot use string as type int in assignment that's the basics behind this now same goes like this if I do hello now if I save this works fine but if I change number down here to be five this is not okay because again we cannot assign the value 5 because this variable type is string in fact this expression here is the exact same as saying var number string equals hello it's just a shortcut and we're getting a squiggly line here just because we cannot define the same variable again so once I make it a string I cannot redefine it and recreate that variable which means doing something like num number colon equals 5 here is not allowed because we already instantiated we already created that variable so that is the difference between implicit and explicit that that's the basics behind it now if we look at % T of this let's just have a look like that go run and string so that is pretty much the difference that's what I want to illustrate but to you with those variables so you do num colon equals something like that now an interesting thing to look at is actually what happens when we create a variable but we don't give it a value that's actually interesting so let's go back to fmt to print line so FM t to print Ln like that and actually let's define a few boolean variables and stuff like that and see what they are so number colon equals true this is fine this is a boolean type number colon equals false this is a boolean type notice that if I add a capital F here it doesn't highlight in purple which means this is nothing we don't understand what false with a capital F means and I'm trying to think of anything else I could show you here with some different types so actually let me show you what default types are so if I create a variable and let's call it number and let's make it you ain't 64 okay so type I want to make it now if I print out the value of number what do you think we're gonna get because I haven't assigned it anything right I've just said we have this variable it's this type but I haven't given it a value so what value do I actually get well that's a good question Tim let's look and we get the value zero so actually by default when we do something like this all of these types have a default value and this number will be set to that default value until it changes so now let's look at another example if I say var and I'm gonna call bool is actually a type of boolean like that uh let's call it BL and then cuz that's the type sorry so the type is bool not boolean my apologies so bar BL bool and now I go ahead and I just print out BL what do you think that default type is gonna be now remember boolean is true or false but what do you think the default types gonna be for that is it gonna be something is gonna be undefined well let's look the default type is false so pretty much if you wanted to determine the default type so you just do this print out the value and you'll see it but I just wanted you to realize that all of these types have a default value that will be assigned to the variable if you don't actually give it the value so obviously it now if I go down here and say BL equals true like that then BL will be equal to true so I can I can run this and we'll see that but if I didn't like before then it was equal to false so that's the idea um so that's pretty much been this video there's not much more to talk about I just really wanted to go over implicit versus explicit the difference and then show you some other things with default types and just more nuances with variables if you guys enjoyed make sure you leave a like subscribe and I will see you in the next one
