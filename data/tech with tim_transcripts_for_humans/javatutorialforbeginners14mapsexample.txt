With timestamps:

00:00 - hello and welcome back so in this video
00:02 - I'm actually not gonna be teaching you
00:04 - guys anything new so if you're more
00:06 - interested in just like speeding through
00:07 - and learning everything I suggest you
00:08 - just move to the next video but what I'm
00:10 - gonna be doing is showing you some
00:12 - common problems that you're gonna want
00:13 - to solve and how you can do that with
00:15 - the information I've showed you so far
00:16 - so kind of bringing everything in now
00:18 - mixing it all together and using all the
00:21 - things and this is a really good way
00:22 - it's kind of like apply all the
00:23 - knowledge that we've just learned into
00:25 - solving like a few common computer
00:28 - problems because a lot of the time you
00:31 - guys learn how to do all this stuff but
00:32 - you don't know how to kind of mix it all
00:34 - together and that's what I'm trying to
00:36 - do in this video so I'm also gonna be
00:37 - showing you sell like useful methods and
00:39 - some things that I may have forgotten to
00:40 - talk about in previous videos so yeah
00:43 - that's what this video is gonna be about
00:44 - so in the last video I mentioned that a
00:47 - good exercise to do would be if you have
00:50 - like I don't know a word and you want to
00:53 - count or like a sentence or string you
00:55 - want to count all the letters and store
00:57 - them in like a hash map and have the
00:58 - letter as the key and the value being
01:00 - how many times they appear so I figured
01:02 - for any of you guys that were brave
01:04 - enough to attempt that on yourself I
01:06 - would show you solution here quickly to
01:08 - doing that and for any of us who didn't
01:10 - see that make sure you pay attention
01:11 - because this is really useful it's gonna
01:13 - help you also to understand kind of how
01:15 - maps work and how you can use them so
01:17 - what I'm gonna do first of all is I'm
01:18 - just gonna create a string let's call
01:20 - STR is equal to and I'll say hello my
01:25 - name is Tim and I hand cool all right
01:30 - very creative string name anyways so
01:35 - we're gonna do that just because we're
01:36 - gonna count all the letters in this
01:38 - string now the human way to count this
01:40 - would be to go through and literally
01:41 - read like each letter and be like okay
01:43 - so I have an L how many times it'll
01:44 - appear but imma show you how we do this
01:46 - with maps and for loops like very
01:48 - efficiently in computing so what I'm
01:50 - gonna do is I'm create a for loop what
01:52 - we're gonna do is we're gonna loop
01:53 - through the string and the way that we
01:56 - can do this is because if I try to do
01:58 - like for char or like X cuz it's gonna
02:01 - be a character right and in STR you see
02:05 - we get this red line and says we can't
02:06 - iterate over a string so the way that we
02:10 - can do this is actually a cool method
02:11 - and a useful method
02:13 - and it is gonna convert this string into
02:15 - a character array for us the way that we
02:17 - can do that is by doing I guess a dot
02:20 - dot - char array and this is if I
02:25 - literally just print this out for you if
02:26 - you want to see what it looks like
02:30 - system.out.println is simply just gonna
02:32 - put every character so including the
02:35 - spaces into a character array for us so
02:37 - let's just run this and you can see it
02:40 - just is literally just printing this
02:41 - entire thing but it's actually in an
02:43 - array and this is gonna allow us to loop
02:45 - through it so you'll see in a second
02:47 - okay so what I'm gonna do now is every
02:52 - character I'm gonna see if that key
02:54 - already exists in the map if it does I'm
02:58 - gonna get the value because that values
03:00 - gonna be how many times it exists so in
03:01 - this case say I'm looking for like m it
03:03 - already exists in the mouth I'm just
03:04 - gonna add one to it and then overwrite
03:06 - that key with a new value and you'll see
03:09 - what I mean here in a second so I'm
03:10 - gonna say if m dot contains key of X
03:15 - then what I'm gonna do is I'm gonna say
03:17 - olds will say int old equals M get and
03:24 - then the key is gonna be X and then what
03:27 - we're gonna do is what's the issue here
03:29 - M add cast and if I need this for
03:35 - getting all my brackets into old equals
03:37 - M gets X and X should be hmm interesting
03:43 - one second saying I have to cast this to
03:45 - an integer okay let's just do this I
03:47 - don't think we actually need to do this
03:49 - but let's just cast it to an int all
03:51 - right anyways and then we'll say M don't
03:54 - put and for the key is gonna be X cuz
03:57 - that's gonna be the character and we're
03:59 - gonna say old plus 1
04:01 - now what this should do for us is just
04:03 - increment the the amount so that's going
04:06 - to go up by 1 now otherwise so if that
04:08 - key does not exist what we're gonna do
04:10 - is we're gonna put into our map a new
04:12 - key and the keys value is gonna be 1
04:14 - because we just found the first
04:15 - occurrence of that letter and the key is
04:17 - gonna be X standing for the letter and
04:19 - that should work now after we do that I
04:23 - want to see the counts of all these
04:25 - letters so to do that
04:26 - let's probably help my spell system
04:28 - correctly we're gonna print the wine and
04:31 - we're just gonna print em okay so
04:33 - quickly I know I did this fast and you
04:35 - might not really understand exactly
04:36 - what's going on but we're just looping
04:37 - through every letter in this string
04:39 - we're gonna check the first check is
04:41 - gonna see if the map contains that
04:45 - letter already so it has a key if it
04:47 - does not what we're gonna do is we're
04:49 - simply gonna add in a key and it's going
04:50 - to be equal to that letter and it's
04:52 - gonna have a value of 1 because we just
04:54 - found it it's occurs one time we already
04:56 - know that now if for some reason or if
04:58 - that key does exist what we're gonna do
05:00 - is we're gonna get that previous count
05:02 - and then we're gonna add 1 to that
05:04 - previous count and override the key so
05:06 - like if the count is 4 it goes up to 5
05:08 - pretty straightforward so if I run this
05:11 - you can see we get space well there's 8
05:14 - spaces we get a there's 3 AC there's 1 D
05:16 - there's one and it goes through and it
05:18 - counts all of the different letters for
05:19 - us and if we wanted to confirm those
05:20 - correct we could go through and count
05:23 - them like that and just by looking at
05:26 - here it does look as though that is
05:27 - correct
05:28 - so yeah that's a really common way to
05:30 - use a map yeah it's really useful and
05:33 - there's a lot of cases in which you want
05:34 - to do something like that ok so the next
05:37 - thing I want to show you guys is
05:39 - something I forgot to do in the last
05:40 - video and this is really just gonna take
05:41 - like 10 seconds but pretty much to
05:43 - remove an element from the map you
05:45 - probably already guessed but it's
05:46 - literally just MDOT remove and then you
05:49 - just type the key so I just felt like I
05:51 - had to shape say this cuz I watched back
05:53 - my other video and I realized I forgot
05:54 - to say it so to remove an element you do
05:57 - MDOT remove and just put the key so if I
05:59 - want to remove like all the spaces which
06:00 - actually wouldn't be a bad idea to
06:02 - remove from our counts then if I do that
06:05 - hmmm interesting why it's not letting me
06:09 - remove that let's try that maybe oh it's
06:12 - because it's off because the character
06:14 - my bad start guys I've been doing string
06:16 - a character with space is different yes
06:18 - then it actually removes the that
06:20 - character the space from our program or
06:22 - from our map whatever okay now the next
06:25 - thing I want to show actually is sorting
06:28 - so sorting is something you typically
06:30 - want to do on arrays so I'm actually
06:32 - going to remove all this and I'm going
06:33 - to create a new array an integer array
06:36 - let's say int X equal
06:38 - this case is do you like three and let's
06:40 - do a bunch of different values and see
06:42 - if we can get this to sort for us let's
06:45 - do negative 99 semicolon there for us
06:49 - and to sort this is actually really easy
06:51 - all we have to do is just type arrays
06:54 - dot sort and then what takes it takes
06:58 - two arguments now the first argument is
07:00 - obviously going to be our array so this
07:04 - case X and then the other two arguments
07:06 - are actually optional and what these do
07:09 - search those three are even saw to what
07:11 - these arguments do is from a certain
07:13 - index so if we want to sort just lets
07:16 - say like this part of the list that's
07:18 - highlighted we can actually do that and
07:20 - the way that we would do that is we
07:22 - would type one because we're gonna start
07:23 - at one and if we were going to seven one
07:25 - two three four five six seven funny
07:29 - enough we could actually type seven now
07:31 - I know this is index six but the thing
07:33 - is it's gonna sort up but not including
07:35 - to that index so if we type seven it's
07:38 - gonna that's seven but it's only gonna
07:40 - sort up to like the actual number seven
07:42 - okay and what this does and I believe is
07:46 - actually just changes the list we don't
07:48 - need to say like x equals arrays dot
07:51 - sort we just say arrays dot sort and
07:54 - then what we can do is we knew
07:58 - system.out.println and we can print X
08:01 - and let's see if it did end up sorting
08:04 - that section of the list for us okay so
08:06 - we actually man of course we can't do
08:08 - that we're gonna have to set up a basic
08:10 - for loop to print these out just because
08:11 - when we try to print arrays I figure out
08:13 - we get that little loop or we get that
08:15 - message because that's the memory
08:16 - address but anyways let's say for int I
08:22 - in X and then we'll simply just print
08:26 - out I it's got to make it complicated
08:29 - for us doesn't it and instead of
08:32 - printing a line we're just gonna print
08:34 - and we'll just add a comma here just to
08:36 - make it separated okay so let's run that
08:39 - so there we go so it actually did sort
08:41 - this middle section of the list for us
08:43 - right so we got one two three four five
08:45 - six seven and you see eight and zero
08:46 - we're not touched and negative 99 was
08:48 - not touched now if you want to sort the
08:50 - entire thing
08:51 - and you don't want to worry about these
08:51 - indexes you can just put X in this case
08:54 - if we do this we're gonna get an 8 and
08:56 - 99 zero all the way up to 8 and yeah so
08:59 - you could sort like from 3 to 5
09:01 - or 3 to 6 or whatever okay and you can
09:04 - see it's only gonna sort like a few of
09:06 - the elements in the list for us or in
09:08 - the array for us so that's a really
09:10 - useful way to sort things at quite
09:12 - quickly actually in quite easily using
09:15 - just a raised dot sort and remember you
09:17 - don't have to do like x equals arrays
09:20 - dot sort because what it's actually
09:22 - gonna do is just sort in-place all the
09:24 - elements of X and swap them around
09:26 - rather than creating like a new version
09:28 - of X that is sorted so anyways I know
09:31 - this has been like a quick video but I
09:32 - just wanted to show you and for some of
09:33 - the guys that might have been struggling
09:35 - how we can kind of incorporate some of
09:37 - these things together and how to create
09:39 - like a basic problem-solving program
09:41 - maybe a way you go about doing that
09:43 - hopefully this was useful to you guys
09:44 - let me know in the comments down below
09:46 - and in the next video we're gonna be
09:48 - getting into object-oriented programming
09:50 - and that's gonna be the rest of the
09:51 - tutorial series it's a bit more complex
09:53 - but it's definitely like the heart of
09:56 - Java and it's something that we have to
09:57 - understand so if you guys enjoyed the
09:58 - video please make sure you leave a like
09:59 - and I will see you in the next one
10:01 - [Music]

Cleaned transcript:

hello and welcome back so in this video I'm actually not gonna be teaching you guys anything new so if you're more interested in just like speeding through and learning everything I suggest you just move to the next video but what I'm gonna be doing is showing you some common problems that you're gonna want to solve and how you can do that with the information I've showed you so far so kind of bringing everything in now mixing it all together and using all the things and this is a really good way it's kind of like apply all the knowledge that we've just learned into solving like a few common computer problems because a lot of the time you guys learn how to do all this stuff but you don't know how to kind of mix it all together and that's what I'm trying to do in this video so I'm also gonna be showing you sell like useful methods and some things that I may have forgotten to talk about in previous videos so yeah that's what this video is gonna be about so in the last video I mentioned that a good exercise to do would be if you have like I don't know a word and you want to count or like a sentence or string you want to count all the letters and store them in like a hash map and have the letter as the key and the value being how many times they appear so I figured for any of you guys that were brave enough to attempt that on yourself I would show you solution here quickly to doing that and for any of us who didn't see that make sure you pay attention because this is really useful it's gonna help you also to understand kind of how maps work and how you can use them so what I'm gonna do first of all is I'm just gonna create a string let's call STR is equal to and I'll say hello my name is Tim and I hand cool all right very creative string name anyways so we're gonna do that just because we're gonna count all the letters in this string now the human way to count this would be to go through and literally read like each letter and be like okay so I have an L how many times it'll appear but imma show you how we do this with maps and for loops like very efficiently in computing so what I'm gonna do is I'm create a for loop what we're gonna do is we're gonna loop through the string and the way that we can do this is because if I try to do like for char or like X cuz it's gonna be a character right and in STR you see we get this red line and says we can't iterate over a string so the way that we can do this is actually a cool method and a useful method and it is gonna convert this string into a character array for us the way that we can do that is by doing I guess a dot dot char array and this is if I literally just print this out for you if you want to see what it looks like system.out.println is simply just gonna put every character so including the spaces into a character array for us so let's just run this and you can see it just is literally just printing this entire thing but it's actually in an array and this is gonna allow us to loop through it so you'll see in a second okay so what I'm gonna do now is every character I'm gonna see if that key already exists in the map if it does I'm gonna get the value because that values gonna be how many times it exists so in this case say I'm looking for like m it already exists in the mouth I'm just gonna add one to it and then overwrite that key with a new value and you'll see what I mean here in a second so I'm gonna say if m dot contains key of X then what I'm gonna do is I'm gonna say olds will say int old equals M get and then the key is gonna be X and then what we're gonna do is what's the issue here M add cast and if I need this for getting all my brackets into old equals M gets X and X should be hmm interesting one second saying I have to cast this to an integer okay let's just do this I don't think we actually need to do this but let's just cast it to an int all right anyways and then we'll say M don't put and for the key is gonna be X cuz that's gonna be the character and we're gonna say old plus 1 now what this should do for us is just increment the the amount so that's going to go up by 1 now otherwise so if that key does not exist what we're gonna do is we're gonna put into our map a new key and the keys value is gonna be 1 because we just found the first occurrence of that letter and the key is gonna be X standing for the letter and that should work now after we do that I want to see the counts of all these letters so to do that let's probably help my spell system correctly we're gonna print the wine and we're just gonna print em okay so quickly I know I did this fast and you might not really understand exactly what's going on but we're just looping through every letter in this string we're gonna check the first check is gonna see if the map contains that letter already so it has a key if it does not what we're gonna do is we're simply gonna add in a key and it's going to be equal to that letter and it's gonna have a value of 1 because we just found it it's occurs one time we already know that now if for some reason or if that key does exist what we're gonna do is we're gonna get that previous count and then we're gonna add 1 to that previous count and override the key so like if the count is 4 it goes up to 5 pretty straightforward so if I run this you can see we get space well there's 8 spaces we get a there's 3 AC there's 1 D there's one and it goes through and it counts all of the different letters for us and if we wanted to confirm those correct we could go through and count them like that and just by looking at here it does look as though that is correct so yeah that's a really common way to use a map yeah it's really useful and there's a lot of cases in which you want to do something like that ok so the next thing I want to show you guys is something I forgot to do in the last video and this is really just gonna take like 10 seconds but pretty much to remove an element from the map you probably already guessed but it's literally just MDOT remove and then you just type the key so I just felt like I had to shape say this cuz I watched back my other video and I realized I forgot to say it so to remove an element you do MDOT remove and just put the key so if I want to remove like all the spaces which actually wouldn't be a bad idea to remove from our counts then if I do that hmmm interesting why it's not letting me remove that let's try that maybe oh it's because it's off because the character my bad start guys I've been doing string a character with space is different yes then it actually removes the that character the space from our program or from our map whatever okay now the next thing I want to show actually is sorting so sorting is something you typically want to do on arrays so I'm actually going to remove all this and I'm going to create a new array an integer array let's say int X equal this case is do you like three and let's do a bunch of different values and see if we can get this to sort for us let's do negative 99 semicolon there for us and to sort this is actually really easy all we have to do is just type arrays dot sort and then what takes it takes two arguments now the first argument is obviously going to be our array so this case X and then the other two arguments are actually optional and what these do search those three are even saw to what these arguments do is from a certain index so if we want to sort just lets say like this part of the list that's highlighted we can actually do that and the way that we would do that is we would type one because we're gonna start at one and if we were going to seven one two three four five six seven funny enough we could actually type seven now I know this is index six but the thing is it's gonna sort up but not including to that index so if we type seven it's gonna that's seven but it's only gonna sort up to like the actual number seven okay and what this does and I believe is actually just changes the list we don't need to say like x equals arrays dot sort we just say arrays dot sort and then what we can do is we knew system.out.println and we can print X and let's see if it did end up sorting that section of the list for us okay so we actually man of course we can't do that we're gonna have to set up a basic for loop to print these out just because when we try to print arrays I figure out we get that little loop or we get that message because that's the memory address but anyways let's say for int I in X and then we'll simply just print out I it's got to make it complicated for us doesn't it and instead of printing a line we're just gonna print and we'll just add a comma here just to make it separated okay so let's run that so there we go so it actually did sort this middle section of the list for us right so we got one two three four five six seven and you see eight and zero we're not touched and negative 99 was not touched now if you want to sort the entire thing and you don't want to worry about these indexes you can just put X in this case if we do this we're gonna get an 8 and 99 zero all the way up to 8 and yeah so you could sort like from 3 to 5 or 3 to 6 or whatever okay and you can see it's only gonna sort like a few of the elements in the list for us or in the array for us so that's a really useful way to sort things at quite quickly actually in quite easily using just a raised dot sort and remember you don't have to do like x equals arrays dot sort because what it's actually gonna do is just sort inplace all the elements of X and swap them around rather than creating like a new version of X that is sorted so anyways I know this has been like a quick video but I just wanted to show you and for some of the guys that might have been struggling how we can kind of incorporate some of these things together and how to create like a basic problemsolving program maybe a way you go about doing that hopefully this was useful to you guys let me know in the comments down below and in the next video we're gonna be getting into objectoriented programming and that's gonna be the rest of the tutorial series it's a bit more complex but it's definitely like the heart of Java and it's something that we have to understand so if you guys enjoyed the video please make sure you leave a like and I will see you in the next one
