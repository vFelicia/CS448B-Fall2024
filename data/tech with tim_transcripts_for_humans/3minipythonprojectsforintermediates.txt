With timestamps:

00:02 - [Music]
00:08 - in this video i'll be sharing with you
00:10 - three mini python projects for
00:12 - intermediate programmers these projects
00:15 - are designed for people that have some
00:16 - experience with python they understand
00:18 - the basics like if statements for loops
00:20 - functions etc and they want to build
00:22 - something a bit more complicated that
00:24 - doesn't take a ton of time each of these
00:26 - projects will take between 20 and 30
00:28 - minutes for us to build out there'll be
00:30 - under 100 lines of code yet they'll
00:32 - still be more advanced than kind of a
00:33 - beginner project and a lot of the other
00:35 - stuff that i have on this channel so
00:37 - with that said let me give you a quick
00:38 - demo of the three projects and explain
00:41 - what you'll learn in them and then we'll
00:42 - get into actually building them out so
00:44 - the first project that we're going to
00:45 - work on is a pathfinder or a maze
00:47 - navigator i'll just run the code and
00:49 - kind of explain how this works so you
00:51 - can see it actually takes over the
00:53 - entire terminal here we have a maze and
00:55 - you can view what's known as the breadth
00:57 - first search algorithm going through
00:59 - here and trying to determine the
01:00 - shortest path between one point and
01:02 - another now you can customize this
01:04 - however you like but i'm going to show
01:05 - you how we can control the terminal like
01:07 - this have different colors and then
01:09 - override what's currently on the screen
01:11 - as opposed to constantly printing stuff
01:13 - out this is really cool it's also really
01:15 - simple to do and then of course i'll
01:16 - walk you through the pathfinding
01:18 - algorithm which is kind of a very famous
01:20 - algorithm that you learn in any computer
01:22 - science class again it's called breadth
01:24 - first search and i'll explain to you how
01:26 - that works so that is the pathfinder or
01:28 - the maze algorithm whatever you want to
01:30 - call it the next thing that i'm going to
01:31 - show you is a little bit simpler but
01:33 - this is how you can get data about nba
01:36 - games so basketball games so the current
01:38 - games that are running what time they
01:40 - start at as well as viewing stats and
01:42 - all kinds of other information about
01:44 - players teams etc i've built this out
01:46 - just to show you how to work with an api
01:49 - and then of course you can customize
01:50 - this and change it how you like but if i
01:52 - run the program right now you can see
01:53 - that what it gives me is a list of the
01:56 - teams ranked by their points per game so
01:58 - we have all of the different teams and
01:59 - they're ranked currently by number of
02:01 - points that they average per game that's
02:03 - one functionality that we can use the
02:05 - other one is to get the current
02:06 - scoreboard of the teams so let me just
02:09 - change the function here
02:11 - and let's run this and what this prints
02:13 - out now is all of the games that are
02:15 - upcoming what time they start at and
02:17 - then if the game was currently running
02:18 - it would show you what period it's in
02:20 - the time on the clock and then whatever
02:22 - the score is in the games
02:24 - now of course none of these are running
02:25 - right now when i'm running this uh but
02:27 - if they were going on then you would see
02:29 - the information and every time you rerun
02:31 - this it'd be updated in live time so
02:33 - kind of a cool project especially if
02:34 - you're into basketball and then the last
02:36 - one here is a currency converter so let
02:39 - me run this project here you can see we
02:41 - get welcome to the currency converter
02:42 - and then we have three commands list
02:44 - convert and rate so i can enter a
02:46 - command let's start with list
02:48 - this lists out all of the currencies
02:50 - then what i could do is maybe convert
02:52 - so let's say i want to convert
02:54 - the currency of usd maybe a hundred
02:56 - dollars in usd to zimbabwean dollar so
02:59 - let's try that said wl okay it gives me
03:02 - 100 usd is 32 199 zwl i could also get
03:07 - the rate between different currencies so
03:09 - enter my currency cad
03:11 - and usd and then notice this is the
03:13 - current exchange rate so that's what you
03:15 - can do with the currency converter all
03:17 - of these projects you can add to and
03:18 - make a lot more advanced this is a
03:20 - really good starting kind of foundation
03:22 - and teaches you how to work with apis
03:24 - and do some more advanced things that
03:26 - you wouldn't learn in a beginner
03:27 - tutorial so hopefully after seeing the
03:29 - demo for these projects you guys are
03:31 - excited for this video if you are make
03:32 - sure you leave a like i will mention all
03:35 - the source code for these projects will
03:36 - be available in the description and
03:38 - we'll get into them after a quick word
03:40 - from our sponsor before we dive in i
03:42 - need to thank ltm designer for
03:44 - sponsoring this video ltm designer is
03:46 - the world's most trusted pcb design
03:48 - system that enables engineers to
03:50 - effortlessly connect with every facet of
03:52 - the electronics design process ltm
03:55 - designer has used 35 years of innovation
03:57 - and development to create a truly
03:59 - unifying design environment that makes
04:01 - it the most used pcb design solution on
04:04 - the market ltm designer provides an
04:06 - intuitive and powerful interface that
04:08 - lets you design pcbs rapidly while
04:10 - interacting and collaborating with your
04:12 - mechanical designers the interface
04:14 - provides a photo realistic 3d
04:16 - environment collaboration and
04:18 - synchronization with tools including
04:20 - solidworks ptc creo and autodesk
04:22 - inventor realistic rigid flex designs
04:26 - multi-board assembly and much more ltm
04:29 - designer is the most popular ecad tool
04:31 - and electronics design software and you
04:33 - can get started with it today for free
04:35 - by pressing the link in the description
04:37 - and registering for a free trial thanks
04:40 - again to ltm designer for sponsoring
04:42 - this video and now let's dive in all
04:44 - right so let's go ahead and dive right
04:46 - in now i'm going to start with the
04:47 - pathfinder or the maze navigator
04:50 - whatever you want to call this and we're
04:52 - going to use a package here called
04:53 - curses which allows us to control the
04:56 - terminal and colored in the way that you
04:58 - saw and actually override what's
05:00 - currently in the terminal so we don't
05:01 - have to keep printing a bunch of
05:03 - separate lines and kind of having a
05:04 - really messy standard output now if
05:06 - you're on mac or linux cursor should be
05:09 - installed by default for you but if you
05:11 - are on windows you need to install this
05:13 - so go to your terminal i'm just in vs
05:15 - code and i've opened up a terminal here
05:17 - you're going to type the following
05:18 - command pip install and then windows
05:20 - hyphen curses like this now again you
05:23 - only need this if you're on windows so
05:25 - hit enter try that command that should
05:27 - install it for you and if for some
05:29 - reason that doesn't work i'm going to
05:30 - give you two or three alternative
05:32 - commands you can try pip 3 install
05:34 - windows cursors if that doesn't work you
05:36 - can try python hyphen m pip install
05:39 - windows cursors and if that doesn't work
05:41 - you can try python 3. now if none of
05:43 - those work i'll leave two videos on the
05:45 - screen that should show you how to fix
05:46 - this pip command one for mac and one for
05:48 - windows although i guess you only really
05:49 - need it for windows because you don't
05:51 - need to install anything if you're on
05:52 - mac or linux all right now what i've
05:54 - done is made a python file here called
05:56 - pathfinder.pi i've opened it in vs code
05:59 - you can work in any editor that you want
06:01 - but i'm going to use vs code i've also
06:03 - pasted in a maze you can find this maze
06:05 - from the link in the description on the
06:06 - github repository or you can just make
06:08 - your own maze i'm treating all of the
06:10 - pound sign here's our number sign here
06:13 - as my obstacles in the maze all of the
06:16 - empty strings are going to be things we
06:17 - can navigate and then the o is going to
06:19 - be our start and the x is going to be
06:22 - the end now i do want to mention here
06:24 - that if you are trying to get better at
06:25 - python you also can check out a product
06:27 - i have called programming expert dot io
06:30 - this a programming course teaches
06:31 - fundamental programming object oriented
06:33 - programming advanced programming
06:35 - software engineering tools all kinds of
06:36 - stuff just wanted to mention that if you
06:38 - guys are interested you can use discount
06:39 - code tim i'll leave that in the
06:41 - description for now though we do want to
06:42 - build out this project so we have our
06:44 - maze here and the first thing i'm going
06:46 - to do is i'm going to import that curses
06:48 - module and quickly walk you through how
06:50 - this works so you can see how we can
06:51 - print colored output i do also have an
06:53 - entire tutorial series on the curses
06:55 - module on my channel in case you are
06:57 - interested i'm also going to say from
07:00 - curses like that import and i'm going to
07:02 - import something called wrapper and then
07:03 - while we're up here we're going to
07:05 - import a queue this is built into python
07:07 - you don't need to install it and we're
07:08 - going to import time just so we can
07:10 - implement a bit of delay here in this
07:12 - program when we start actually trying to
07:13 - visualize things for now though i want
07:15 - to show you how the curses module works
07:17 - so what we need to do here is define a
07:19 - main function and this main function
07:21 - needs to have as one argument std scr
07:24 - now this stands for standard output
07:26 - screen and this is what we're going to
07:28 - use to actually output all this stuff
07:30 - for our program so rather than using the
07:32 - standard print statements here we're
07:34 - going to add stuff to this screen this
07:36 - screen is going to override and kind of
07:38 - take over our terminal and then as soon
07:40 - as the program ends everything on that
07:42 - screen will be cleared and will be
07:43 - brought back to the original terminal
07:45 - you'll see what i mean in a second but
07:47 - for now we're going to type the
07:48 - following std screen dot clear so we're
07:50 - going to clear the entire screen then we
07:52 - are going to not write we're going to
07:55 - add string and when we add a string to
07:57 - the screen here we have to pass the
07:59 - position that we want to enter this
08:01 - string at or that we want to add it to
08:03 - so for now i'm going to go zero zero
08:05 - that represents the top left-hand corner
08:07 - of the screen so i believe we're going
08:09 - row and then column that we want to
08:11 - enter this in i'll experiment in a
08:12 - second then whatever the text is that we
08:15 - want to show on the screen so in this
08:16 - case i can do a hello world exclamation
08:18 - point then we're going to do std screen
08:21 - dot and then this is going to be refresh
08:23 - and what that does is refresh the screen
08:25 - and so we actually see what we wrote and
08:26 - then lastly i'm going to say std screen
08:29 - dot and this is going to be get ch what
08:31 - this stands for is get character and
08:34 - this is similar to an input statement
08:35 - that we would have in python it just
08:37 - makes it so that we're going to wait
08:38 - here until the user hits something
08:40 - before we exit the program if we don't
08:42 - have that it would do this and then just
08:44 - instantly exit and we wouldn't see
08:45 - anything because we weren't waiting long
08:47 - enough to actually view the output all
08:49 - right now that we have that main
08:50 - function we're going to call wrapper
08:52 - which we imported up here
08:54 - and we're going to pass to it the name
08:55 - of this main function but we're going to
08:57 - make sure we don't call the function so
08:58 - i'm not calling like that i'm just
08:59 - passing the name of the function and
09:01 - what this does is it initializes the
09:03 - curses module for us and then it calls
09:06 - the function passes this std screen
09:09 - object and then we can use that in here
09:11 - to control our output all right
09:12 - hopefully that's clear so far let me
09:14 - save and let's run the code and let's
09:16 - see what we get and notice that it kind
09:18 - of brings me to this blank window and it
09:20 - says hello world and then if i hit any
09:23 - key on my keyboard brings me back to the
09:24 - original terminal one more time if i run
09:26 - this notice it shows me hello world hit
09:28 - a key and then i'm out that is the
09:31 - curses module very basic introduction
09:33 - however i want to show you what happens
09:34 - when we change these coordinates and how
09:36 - we can add colors so let's say now we
09:38 - maybe draw this at five so five zero is
09:41 - our position
09:42 - let's run the code and notice we go five
09:44 - rows down and we're at the zeroth column
09:47 - so that's how you can control where
09:48 - you're drawing this you put the row and
09:50 - the column you want to start drawing so
09:52 - if i go maybe 5 5
09:54 - and then let's save and rerun
09:56 - oops save and rerun notice we get hello
10:00 - world kind of more in the center of the
10:01 - screen so very powerful what you can do
10:03 - here and then if we want to add a color
10:06 - this is a little bit more complicated we
10:08 - first need to initialize a color so i
10:10 - just got to look at my cheat sheet over
10:11 - here to remember how to do this so we're
10:13 - going to say curses
10:14 - dot init underscore pair
10:17 - and whenever we create a color pairing
10:19 - here in curses we give it an id so i'm
10:22 - just going to give an id of one and then
10:23 - i put the foreground and the background
10:26 - color that i'd like to have so i can say
10:28 - curses dot and then color underscore and
10:31 - then whatever colors you can see there's
10:32 - a bunch of options here green magenta
10:34 - red whatever so let's go with blue for
10:36 - now and then the foreground color or
10:39 - sorry the background color my bad it's
10:40 - going to be curses
10:41 - underscore color and then black so you
10:44 - put your foreground color and your
10:46 - background color pretty much all the
10:47 - colors you can think of are you know you
10:49 - can access them with color underscore
10:50 - their name
10:52 - and then now that we have the
10:53 - initialization pair if i actually want
10:55 - to use this color what i have to do is
10:57 - the following i'm going to say blue
10:58 - underscore and underscore black
11:01 - is equal to
11:02 - this is going to be curses dot and i
11:04 - believe this is color pair again let me
11:07 - just have a quick look at my cheat sheet
11:08 - here to remember this yes it's colored
11:10 - pair and we're going to put the id of
11:12 - the color pair we want to use so since i
11:15 - reference this with id1 or create it
11:17 - with id1 now i reference id1 and that's
11:19 - going to give me a color of blue and
11:21 - black and the way i apply that now to my
11:23 - text is i just pass another argument to
11:25 - add string
11:26 - with this so blue and black and now when
11:29 - i start displaying this it should be
11:30 - blue and black so let's do this let's
11:32 - run the code and notice i get hello
11:34 - world in blue text and the black is just
11:36 - the default background so it doesn't
11:38 - change the background color but if i
11:39 - wanted to be like a white background
11:41 - and i would say color white and then if
11:43 - i draw this now so let's rerun this
11:45 - notice i get kind of a white background
11:47 - for that text
11:48 - great but let's go back to color block
11:50 - okay so that's the first color pair
11:52 - while we're here let's initialize
11:53 - another color pair because i want blue
11:54 - and black i also want red and black
11:57 - so let's change this to red and let's
11:59 - make that two and then we'll use these
12:01 - later on i don't actually want to write
12:03 - hello world onto the screen so let's
12:05 - actually just comment all of that out
12:06 - for now and let's work on the breadth
12:09 - first search algorithm and then we can
12:11 - actually start displaying stuff on the
12:12 - screen so the first thing i want to
12:14 - handle is printing this maze out so
12:16 - obviously i want to view the maze on the
12:18 - screen so to do that well how am i going
12:20 - to do that i'm going to write a function
12:21 - here i'm just going to call this print
12:23 - maze
12:24 - and to be able to print the maze i need
12:26 - the maze that i'm going to print i need
12:27 - the standard screen or the standard
12:29 - output screen that i'm going to print
12:30 - the maze to and i'm going to take a
12:33 - variable here or an argument called path
12:36 - now path is going to be the path i want
12:38 - to draw on the maze obviously we don't
12:40 - know what the shortest path is yet but i
12:42 - can pass a path here of coordinates and
12:44 - then whatever
12:46 - values are in that path i'll draw them a
12:48 - different color in the maze
12:49 - so you'll see what i mean in a minute so
12:51 - that's print maze uh now inside of here
12:54 - i'm going to grab my two colors that i
12:56 - want to use so i'm just going to say
12:58 - blue is equal to and then this will be
12:59 - curses dot
13:01 - color underscore pair this will be one
13:05 - let's say red is equal to curses.color
13:07 - pair two just so i can use both the blue
13:09 - and the red we'll draw the default maze
13:11 - as blue and then the path as red
13:14 - okay continuing i'm gonna loop through
13:16 - everything in my maze because this is a
13:18 - two-dimensional array so i have kind of
13:19 - all my rows and then the columns would
13:21 - be the individual values in each row so
13:24 - i'm going to say 4 and this is going to
13:25 - be i comma rho
13:27 - in enumerate maze now if you're
13:29 - unfamiliar with enumerate this is going
13:31 - to give me the index as well as the
13:33 - value so i'm going to get every one of
13:35 - these rows as a row or every one of
13:38 - these nested arrays as a row and then i
13:40 - will be what row i'm currently on okay
13:43 - continuing i'm going to say 4j comma
13:46 - value
13:47 - in enumerate and then i'm going to
13:48 - enumerate over the row the reason i can
13:50 - do this is because i have a list or an
13:53 - array whatever you want to call it but
13:54 - list in python so row is my list then
13:57 - i'm going to enumerate over the list
13:59 - that i have i'm going to grab whatever
14:01 - column i'm currently on which is what j
14:03 - is going to represent and then the value
14:04 - is going to be whatever symbol here is
14:06 - in the column okay so that's what i have
14:09 - then what i want to do is i want to
14:11 - simply draw this onto the screen so i'm
14:13 - going to do the following i'm going to
14:14 - say std screen dot and we're going to
14:17 - add string and now we need to determine
14:19 - where we want to add this string well
14:22 - where i want to add it onto the screen
14:24 - is going to be whatever position i'm
14:25 - currently on which is going to be
14:27 - represented by i and j so i is going to
14:29 - tell me the row i'm on j is going to
14:31 - tell me the column so what i can do is
14:33 - simply add whatever i'm drawing here at
14:35 - whatever row and column i'm currently at
14:38 - so i'm going to say i j as the position
14:40 - and then i'm going to say value and
14:42 - value is just going to be either an
14:43 - empty string
14:44 - a numbers sign an o and x whatever it is
14:47 - that i'm currently looking at hopefully
14:49 - that makes sense but that's what we want
14:50 - for print maze and then i'll handle the
14:52 - path in one second for now though let's
14:54 - actually try printing the maze so i'm
14:56 - going to uncomment the clear i'm going
14:58 - to uncomment the refresh and the get ch
15:01 - and now rather than adding my own string
15:03 - i'm going to call printmaze
15:05 - i'm going to pass to it the maze
15:07 - variable which is just a public variable
15:09 - or a global variable that's fine
15:11 - i'm going to pass my std screen
15:13 - and then this is a default argument of
15:15 - empty list so i don't need to pass that
15:17 - okay so let's run this now let me just
15:20 - make the terminal a bit bigger first
15:22 - let's run this and notice my maze is
15:24 - printing out now this looks a little bit
15:26 - squished together like it's too close to
15:28 - me so to spread this out a little bit
15:30 - what i'm going to do is simply multiply
15:32 - the row in the column that i want to
15:35 - draw this at by 2 and actually we can
15:37 - leave the row as just regular eye we can
15:40 - just spread the columns out a little bit
15:41 - more so now we should get kind of two
15:43 - spaces between each of our elements and
15:45 - also let's add a color here so let's add
15:47 - blue and now it should be drawn in blue
15:49 - so let's run this
15:50 - and i guess it needs to run again okay
15:53 - and there we go that looks a lot better
15:54 - the maze is spaced out and we can kind
15:56 - of see it all nice great
15:58 - so let me exit that all right so now
16:00 - that we are printing the maze out and i
16:02 - guess that's pretty much all we're doing
16:04 - i need to talk a bit about how this
16:06 - algorithm works so let me head over to
16:08 - the whiteboard i will explain that to
16:10 - you and then we'll start coding it out
16:11 - so in front of me i have a very simple
16:13 - maze i'm also going to refer to this as
16:14 - a graph and this is what i'll use to
16:16 - demonstrate the breadth first search
16:18 - algorithm so the goal here is to find
16:20 - the shortest path from some starting
16:22 - node to some ending node and i'm going
16:24 - to reference these nodes by their
16:26 - position in the graph so we see these
16:28 - are different rows these are different
16:30 - columns and i'm going to have my
16:32 - positions in row column format which
16:34 - means i would refer to this here as one
16:36 - zero so row one column zero just keep
16:39 - that in mind as i write the positions
16:41 - because uh you might be confused if
16:42 - you're reading it the other way and like
16:44 - here this would be zero three
16:46 - all right so how does the breadth first
16:47 - search algorithm work well the concept
16:49 - behind the breadth first search
16:51 - algorithm is that we're going to
16:52 - continually expand outwards from a point
16:56 - until we find the ending points that
16:58 - we're looking for or the ending node i'm
17:00 - just referring to every single one of
17:01 - these squares as a node okay in kind of
17:03 - graph theory that's what you would call
17:05 - them so we're going to start here at
17:06 - this start point and we're essentially
17:08 - going to slowly expand outward by
17:11 - looking at all of the neighbors of this
17:13 - point so we're going to look at this
17:14 - neighbor and this neighbor and if there
17:15 - was a downwards neighbor or a left
17:17 - neighbor we'd look at those as well but
17:19 - there isn't any left or down neighbors
17:21 - so obviously we're starting here so we
17:23 - expand here and then from both of these
17:24 - points we're going to look at all of
17:26 - their neighbors so maybe we start with
17:27 - this one we would look at this neighbor
17:29 - then we would look at this one then we
17:31 - continue the process and we do this one
17:33 - iteration at a time
17:35 - which means that once i finish
17:36 - considering this neighbor here i go and
17:38 - i do this one then of course we're going
17:40 - to move up to here we're going to move
17:42 - up to here and since we're doing this
17:44 - one step at a time as soon as we hit the
17:46 - ending node we will actually be
17:48 - guaranteed to have found the shortest
17:50 - path because we're only expanding our
17:52 - path from the starting node by one new
17:55 - node at every single iteration now
17:57 - that's a super high level recap of how
18:00 - this works of course i'm going to walk
18:01 - you through the code in a more
18:03 - complicated demo but that's kind of the
18:05 - concept here one step at a time we're
18:07 - slowly expanding outwards from this node
18:09 - and expanding our current path by one
18:12 - until eventually we reach this end node
18:14 - and as soon as we find the end node we
18:16 - know that we have found the shortest
18:18 - path because every other path that we
18:19 - have is either going to be the same
18:21 - length
18:22 - or longer to find this path okay
18:25 - so let's now look at a demo of how we
18:27 - actually do this so first of all we're
18:29 - going to use a data structure called a q
18:31 - now q i believe is spelt like that i'm
18:33 - also just going to refer to it with the
18:35 - letter q and this is what's known as a
18:37 - first in first out data structure or a
18:40 - last in out data structure whatever you
18:42 - prefer to call it essentially what that
18:44 - means is that if i enter some item into
18:46 - the queue just kind of like a phone cue
18:48 - or any other lineup that you would be in
18:50 - if i enter this item first then this is
18:53 - going to be the first item to come out
18:55 - and the second item that i enter into
18:57 - the queue that's going to be the second
18:59 - item to come out now that's important
19:01 - because we're going to process elements
19:02 - in the order in which they're entered
19:04 - into the queue so just keep that in mind
19:06 - so for our cue we can have a back and a
19:08 - front so we can say that this is the
19:11 - front of the cue excuse my messy
19:13 - handwriting and then this is the back
19:16 - just so we're clear on kind of what
19:18 - element we're going to process next so
19:20 - what we're going to start by doing is
19:22 - we're going to place our starting node
19:23 - here inside of the queue now the way i
19:26 - do that is i just place the position of
19:28 - the node that i want to start looking
19:30 - from so i'm going to put a position of 3
19:33 - and then 0 because it's in row 3 and
19:35 - column 0. now every single step in my
19:37 - algorithm what i'm going to do is i'm
19:39 - going to pop an element off of my queue
19:42 - i'm going to take the element that's
19:43 - currently at the front of the queue i'm
19:45 - going to remove it from the queue and
19:47 - i'm going to start processing it now the
19:49 - way i process an element is i
19:51 - essentially just look at all of its
19:52 - neighbors and try to find if we're
19:55 - currently on the end element or not so
19:57 - in this case i take three zero off the
19:59 - queue and i say okay i want to process
20:01 - all of this element's neighbors and kind
20:03 - of expand outwards from this until
20:06 - eventually i get to this node so what
20:08 - i'm going to do is look at the neighbors
20:10 - i'm going to determine i have two of
20:11 - them and i'm going to check if these
20:13 - neighbors are the end node
20:15 - if they are then i'm done the algorithm
20:17 - i found the shortest path but if they're
20:19 - not what i need to do is add them onto
20:21 - the queue so now they can be processed
20:23 - and we can continue expanding until
20:25 - eventually we find this endnote
20:27 - so let's erase this from the queue here
20:29 - so 3 0
20:30 - we've now processed that element i'm
20:32 - going to add this into some set here so
20:35 - let me just create a set
20:36 - this set will be known as our visited
20:38 - set and okay it's kind of hard to draw
20:41 - this the way that i want to so let's
20:42 - just do this 3 0 and the reason i'm
20:46 - putting it in a set is just so i know
20:47 - okay i've processed this element i don't
20:50 - have to look at it another time anyways
20:52 - processing the element again involves
20:53 - looking at all the neighbors so the two
20:55 - neighbors here are 2 0 and what do we
20:58 - have we have 3 1. so i'm going to add
21:00 - those positions into the queue doesn't
21:02 - matter the order that i add them in so
21:04 - i'm going to add 2 and what was this 0
21:08 - and then my other one is 3
21:10 - and 1. okay so these are now the two new
21:13 - elements that i need to process to
21:15 - continue expanding my path so what do i
21:17 - do well i'm going to pop now the first
21:19 - element off of the queue and i'm going
21:20 - to process this one and well repeat
21:22 - everything that i was doing so let's
21:25 - cross it off we'll erase it in a second
21:27 - this is the current one that we're
21:28 - looking at so now we need to consider
21:30 - all of this node's neighbors now it has
21:32 - a neighbor down and a neighbor up it
21:34 - also has one to the right but since the
21:36 - one to the right is an obstacle we don't
21:37 - look at that and for the one that's
21:39 - below us here we see that the one below
21:41 - us is an element that we've already
21:44 - looked at and the reason we know that is
21:45 - because it's in this visited set so i
21:47 - can skip the neighbor below us because
21:49 - we've already looked at it i don't need
21:50 - to process the same element twice and i
21:53 - can just go directly to the element
21:54 - above so i'm going to add a single
21:56 - neighbor here to my queue and this
21:58 - neighbor is going to be
22:00 - in 1
22:02 - and then 0. so now i've processed this
22:05 - element it was not the final node that
22:07 - we were looking for so let me delete it
22:08 - here and now we're going to add this
22:10 - into this visited set now i didn't mean
22:12 - to butcher my
22:14 - element here so let's go here
22:16 - what was that position that was two and
22:18 - zero so let's add this in
22:20 - to zero like that and now we've visited
22:22 - those two notes
22:23 - now we're going to continue so we're
22:25 - going to take the next element off of
22:26 - the queue which is 3 1 so i'll just
22:28 - delete it here we will add it into this
22:31 - set so you might as well just add it
22:32 - right now
22:33 - okay 3
22:34 - and 1 and then from 3 1 that's right
22:36 - here we need to look at all of its
22:38 - neighbors so it has one going to the
22:40 - right and it has one going to the left
22:42 - well of course the one to the left we've
22:44 - already processed so we can just add the
22:46 - one to the right which is right here and
22:48 - that has a position of 3 2. so what i do
22:50 - is i add 3 2
22:52 - to my q
22:53 - if we can that's a really bad three we
22:55 - get the point we add three two and we
22:57 - continue
22:58 - and this process is going to repeat
23:00 - until eventually we hit this endnote and
23:03 - again as soon as we hit this end node we
23:05 - know that we found the shortest path
23:07 - because that's the first time we found
23:09 - it and we would have found it on another
23:11 - path if there was a shorter path to get
23:13 - to it so i mean i could continue this
23:15 - example but hopefully you kind of get
23:17 - the idea we're expanding outwards one
23:19 - node at a time until eventually we find
23:22 - the ending node and then i will show you
23:24 - in the code how we actually kind of keep
23:26 - track of what path we were on because
23:28 - that is a little bit more complicated
23:30 - but this is the basic idea we have a
23:31 - queue we add elements onto the queue we
23:34 - process them one at a time in the order
23:36 - in which they were inserted into the
23:37 - queue this guarantees that every kind of
23:40 - new element that we're looking at is
23:41 - only expanding our current path by at
23:43 - most one node as soon as we find the end
23:46 - node then we can just say okay well we
23:48 - found the shortest path let's end the
23:50 - algorithm let's draw the path out
23:52 - hopefully that gave you a very brief
23:54 - explanation of how this works i don't
23:56 - want to go through the whole thing
23:56 - because it will take too much time now
23:59 - though let's start coding this out and
24:00 - hopefully everything will be cleared up
24:02 - all right so let's code out a function
24:04 - here called find underscore path and
24:07 - we're going to take in here the maze and
24:11 - then this is going to be the standard
24:12 - screen
24:14 - and i think that's all we need for find
24:16 - path now for find path i'm just going to
24:18 - declare a few variables here i'm going
24:19 - to say start is equal to x end is equal
24:22 - to o
24:24 - and actually
24:25 - is this no we're going to say start is
24:27 - equal to o and is equal to x and what
24:30 - else do we want here we want to figure
24:32 - out what the starting position is of our
24:34 - maze now we could just hard code in the
24:37 - position right here but instead i'm
24:39 - going to write a function that will
24:40 - essentially look for this o and tell me
24:42 - where in my maze i'm starting from
24:44 - because we're going to start from this
24:45 - position we need to know the coordinates
24:47 - of this right
24:48 - so in this case it'd be 0 1 2 3 4 5.
24:52 - okay it's in row 0. so it would be 0 5
24:55 - that would be the position here of the
24:56 - start but we want a function that will
24:58 - tell us that so we don't have to
24:59 - manually do that
25:01 - so for now i'm going to say define
25:02 - find underscore start
25:05 - and just because i didn't really explain
25:06 - this i just jumped right in what we're
25:08 - doing here is we're going to start
25:09 - coding out that breadth first search
25:10 - algorithm that you just saw so that's
25:12 - what find path is going to do but first
25:14 - we need to find the starting position
25:15 - so we're going to take in the maze here
25:17 - and we're going to take in whatever the
25:19 - starting symbol is
25:21 - and what i'm going to do in here
25:22 - is simply say 4 and this is going to be
25:24 - i comma rho and enumerate maze and then
25:27 - for j
25:28 - comma value and enumerate row i'm going
25:30 - to say if the value is equal to start
25:34 - then i can simply return i comma j so
25:36 - i'm going to return the row and the
25:38 - column where i found this starting
25:40 - symbol and we're going to assume that we
25:42 - just have one of those symbols
25:44 - okay now otherwise
25:46 - we'll just return none if for some
25:47 - reason we couldn't find the start
25:49 - okay so now in here
25:50 - we're going to say start underscore
25:52 - pause is equal to
25:54 - find start then we're going to call the
25:56 - maze and the starts now we know the
25:57 - starting position
25:58 - now what we want to do is set up our
26:00 - queue and set up those iterations and
26:02 - finding the neighbors and all that stuff
26:04 - i was discussing so for the queue we
26:06 - have this q module and we're going to
26:08 - use it so the way we do that is we're
26:10 - going to say q is equal to
26:12 - and then q dot q and again this is a
26:15 - first in first out data structure so the
26:17 - first element i insert is the first
26:19 - element that comes out that's very
26:21 - important because the order in which we
26:22 - process the nodes really matters when
26:25 - we're doing the breadth first search we
26:26 - don't want to process the most recent
26:28 - node we've added to the queue we want to
26:30 - process the node that's been in the
26:32 - queue the longest just like we would if
26:34 - you were accepting you know a bunch of
26:35 - phone calls or if there was a lineup or
26:36 - something like that that's exactly what
26:38 - a queue is right so we have our queue
26:41 - and we need to insert something into the
26:42 - queue so to insert something we use this
26:44 - put method here and we're going to put
26:47 - a actually
26:49 - a tuple and the tuple is going to
26:51 - contain the starting underscore position
26:55 - and it's going to contain a list that
26:57 - has the start underscore pause in it
27:00 - now the reason why we're adding two
27:02 - elements in here is because in the queue
27:05 - i want to keep track of the current
27:07 - position or the node that i want to
27:09 - process next as well as the path to get
27:12 - to that node now the reason i want the
27:15 - path to that node is because as soon as
27:17 - i find the ending node i'm going to take
27:19 - whatever path i currently have and i'm
27:21 - going to start drawing that onto the
27:22 - screen i'm going to show that on the
27:23 - screen so for now since we haven't found
27:26 - the end node our current path just
27:28 - includes the start position but every
27:30 - time i process a new neighbor or
27:32 - something along those lines i'm going to
27:34 - change the path and the path will
27:36 - continue to grow
27:37 - and i'll be able to see
27:39 - what path we're at for every single note
27:42 - hopefully that makes a bit of sense but
27:43 - that's why i'm starting two pieces of
27:44 - information the position i'm currently
27:46 - on as well as the path and in fact we
27:49 - could even optimize this further and
27:50 - just store the path and grab the last
27:52 - element from it but i'm just going to do
27:54 - two things here just so it's crystal
27:56 - clear when i code this out it's not the
27:57 - most efficient thing in the world but
27:58 - for this tutorial it's fine okay so for
28:00 - now we put that in the queue we also
28:02 - want to make a visited set
28:04 - which is going to contain all of the
28:06 - positions that we've currently visited
28:08 - now that we have all that set up
28:10 - i'm going to say wow we still have any
28:12 - elements in the queue so while not and
28:14 - then q dot and i think this is either is
28:17 - empty or just empty i believe it's just
28:19 - empty so while the queue is not empty
28:22 - what we're going to do is we're going to
28:23 - get the most recent element from the
28:25 - queue the one that's kind of next in
28:27 - queue so i'm going to say current
28:29 - underscore position
28:31 - and path is equal to q dot get
28:35 - now gets just going to give me the
28:36 - element at the front of the queue and
28:38 - since i have two things for every
28:39 - element i have my path as well as the
28:41 - position
28:42 - i'll grab the current position which
28:44 - will just give me the first element and
28:45 - the path which will give me the second
28:47 - okay now that i have the current
28:48 - position i'm going to say the row and
28:51 - column is equal to current position so
28:52 - i'm going to break down the position
28:54 - into its two components the row and the
28:56 - column and i'm going to find all of the
28:58 - neighbors of this position and start
29:01 - processing them if they are not the end
29:03 - node
29:04 - so first i'm going to say if maze and
29:07 - then this is going to be at row call
29:10 - is equal to and this is going to be the
29:13 - end so we're going to say end like that
29:15 - so we're going to look in the maze and
29:16 - see if this position is equal to an x
29:18 - if it is that means we found the end and
29:20 - so what we can do here is simply return
29:24 - the current path because again as soon
29:26 - as we find the end node we know that
29:28 - we've found the shortest path or one of
29:30 - the shortest paths because there could
29:31 - be two paths that are both the shortest
29:33 - we'll find one of them so we can just
29:35 - return the path and then we can draw
29:36 - that if we want
29:38 - okay continuing now what we need to do
29:40 - if we haven't found the end node is we
29:42 - need to continue branching out so we
29:44 - need to find all the neighbors of the
29:45 - current node and then expand towards
29:47 - them so we're going to write another
29:48 - function here called find underscore
29:50 - neighbors
29:52 - now the tricky thing with the neighbors
29:53 - is that we need to make sure that the
29:55 - neighbor that we're finding is not an
29:58 - obstacle and that it's a valid position
29:59 - in the maze so you'll see what i mean
30:01 - here we're going to take an amaze a row
30:02 - and a call
30:04 - and we're going to say our neighbors
30:07 - is equal to an empty list
30:09 - and we're going to determine
30:10 - programmatically what all the neighbors
30:11 - are of this current position so we're
30:13 - going to look up left right and down if
30:15 - you wanted to you could do diagonal but
30:17 - i'm not doing diagonal in this tutorial
30:19 - but adding that is is fairly easy so for
30:21 - now i'm going to say if the row
30:24 - is less than not zero sorry if the row
30:26 - is greater than zero then i'm going to
30:28 - add a neighbor
30:30 - and this neighbor will be the neighbor
30:32 - above i'm going to say neighbors dot
30:34 - append
30:35 - and i'm going to append the row minus
30:37 - one
30:38 - and then the current column so we can
30:40 - add a comment here and say this is gonna
30:42 - go up now the reason i have to check if
30:43 - the row is greater than zero is because
30:45 - if the row currently is zero i have no
30:48 - more rows to look up i'm at the bounds
30:50 - of my maze and so i can't add that but
30:52 - if the row is greater than 0 so it's 1
30:54 - at minimum then i can subtract 1 from it
30:56 - and that's still a valid position
30:58 - next i'm going to say if the row
31:01 - and this will be plus 1 is less than the
31:04 - len of the maze
31:06 - then i can add the row below so i'm
31:07 - going to say neighbors dot append row
31:09 - plus 1 and then call
31:11 - again because if the row plus 1 is equal
31:14 - to the length of the maze then that
31:16 - means if i were to add row plus one i
31:18 - would get an index out of bounds error
31:20 - i'd be too far that means i'm already at
31:22 - the bottom of my maze but if this is
31:24 - true then that means i can add one more
31:26 - without going out of bounds so that's
31:27 - for the rows now we want to do the same
31:29 - thing with the columns for so for left
31:31 - and right so i'm going to say if the
31:32 - column is greater than zero
31:34 - then this is going to be left what i can
31:36 - do is say neighbors dot append and i can
31:39 - append the current row and the column
31:41 - minus one
31:43 - okay and i'm going to say if the column
31:45 - is column plus 1
31:47 - is less than the len of maze 0. now the
31:51 - reason i need to check may 0 is because
31:53 - my maze may not necessarily be square in
31:55 - this case i don't actually think it is
31:57 - square we may have more columns than we
31:58 - have rows so i need to check
32:01 - how many columns we have and i can just
32:02 - do that by grabbing the first row and
32:04 - seeing how many elements are in there
32:06 - so that's what i'm doing here if we
32:08 - don't have a first row this will cause
32:09 - an error but we're always going to have
32:10 - first row so that's fine and then i'm
32:12 - going to say neighbors dot append row
32:15 - and call plus one and then here i'm
32:16 - going to return neighbors and let's just
32:18 - put a comment here for right
32:21 - now in here we did not check if these
32:23 - positions are obstacles we'll do that
32:26 - inside of here for now we've just got
32:28 - all of the valid positions that are
32:30 - neighbors now we're going to check if
32:31 - they're obstacles or not as we loop
32:33 - through them
32:34 - so i'm going to say neighbors
32:36 - is equal to and then this is going to be
32:37 - find neighbors
32:39 - enough find path find
32:40 - neighbors and we are going to pass to it
32:43 - the maze as well as the row and the
32:45 - column of the current position that
32:46 - we're processing right finding all of
32:47 - their neighbors we're going to say for
32:49 - neighbor
32:51 - in neighbors
32:53 - and we are going to check if this is an
32:55 - obstacle or not and if we've already
32:57 - visited it before because if we've
32:59 - already visited it we don't need to
33:00 - process it so i'm going to say if the
33:02 - neighbor is in visited
33:04 - then continue because we don't want to
33:06 - process it and i'm going to say
33:08 - if the neighbor and actually sorry i
33:10 - need to break this down i'm going to say
33:12 - row call
33:14 - is equal to neighbor and actually we'll
33:16 - just go rc so that we don't shadow the
33:18 - variable name up here but i'm going to
33:20 - say rc is equal neighbor standing for
33:22 - row and column i'm going to say if
33:24 - the maze
33:26 - at and this will be rc
33:28 - is equal to a pound sign
33:31 - okay then what we want to do is continue
33:35 - okay
33:36 - now if this is not the case so if the
33:38 - neighbor's not in visited and the
33:39 - neighbor is not a pound sign then that
33:40 - means we need to process this neighbor
33:42 - so i need to add it to my queue
33:44 - so i'm going to say q.put
33:46 - and i'm going to put inside of here my
33:48 - position so i'm going to put the
33:50 - neighbor
33:51 - okay which is going to be a tuple
33:52 - containing the row and column and i also
33:54 - need to put the new path that now
33:55 - contains this neighbor so i'm going to
33:57 - say my new path is equal to and this is
34:00 - going to be whatever the current path is
34:02 - up here okay so where do i have path
34:04 - path is right here and then this is
34:06 - going to be plus
34:08 - and inside of another list because i can
34:10 - add two lists together i'm going to put
34:12 - the
34:13 - what is it the neighbor
34:15 - so all this is doing is kind of tacking
34:17 - the neighbor onto the current path this
34:19 - is not the most efficient possible way
34:21 - to do this you guys can try to optimize
34:23 - this if you want but for now this is
34:24 - fine and for the simplicity of the video
34:26 - i'm going to do it in this way and then
34:28 - i'm going to put new path so i'm adding
34:29 - the neighbor as well as the new path and
34:31 - the new path is just whatever the
34:32 - current path is plus the current
34:34 - neighbor that i'm considering right
34:36 - that's what i have
34:37 - when i'm adding to the queue okay
34:39 - hopefully that makes sense
34:41 - lastly what we need to do is say
34:42 - visited.add and we add the neighbor to
34:45 - that to make sure we don't process it
34:46 - multiple times and that's actually all
34:48 - we need for the breadth first search
34:49 - algorithm again i know this looks pretty
34:51 - complicated but that's all we need
34:54 - now what we want to do is make it so
34:55 - that we draw all of this stuff out so we
34:57 - can kind of see this happening and then
34:59 - i'll walk through the algorithm one more
35:00 - time just to make sure it's crystal
35:01 - clear
35:02 - so where we had this here right where we
35:05 - were printing the maze i'm going to copy
35:07 - that and i'm going to put that
35:10 - inside of this wall because at every
35:12 - step i want to draw out what i'm
35:14 - currently considering so i'm going to go
35:16 - up here and i'm going to paste this
35:18 - before we're checking if we're at the
35:20 - final
35:21 - element or the the final node
35:23 - and i'm going to print the maze except
35:25 - this time i'm going to pass my path
35:28 - and when i pass the path now this will
35:30 - allow me to draw out the path right so
35:32 - i'm going to clear the screen i'm going
35:33 - to print the maze and i'm also going to
35:34 - add something to printmaze so we draw
35:36 - the path and then i'm going to refresh
35:37 - the screen and i'm going to do this
35:38 - every while loop iteration so that i can
35:40 - see the progress going on as i go
35:42 - through this algorithm so now let's go
35:44 - to print maze and let's make it so that
35:46 - we print the path in a different color
35:49 - so here i'm going to say if and this is
35:51 - going to be i
35:52 - comma j
35:54 - is in the path
35:56 - so if it's in the path that we have
35:57 - right here that's valid to check that
35:59 - then what i want to do is draw this in a
36:00 - different color
36:01 - otherwise i'll do this so i'm just going
36:03 - to copy this line
36:05 - i'm going to paste
36:07 - this in here i'm going to change from
36:09 - value to be x because x is going to
36:11 - represent the current path and i'm going
36:13 - to change the color to be red
36:15 - so now rather than drawing an empty
36:17 - string i'm going to draw an x and i'm
36:19 - going to draw it in red and i'll draw it
36:21 - at the same position i would have before
36:23 - but again we're just changing what we're
36:24 - drawing
36:25 - okay so that's pretty much all we need
36:27 - last thing we need to do here is just
36:29 - call this function so this function is
36:31 - find path
36:33 - and it takes in the maze
36:35 - and the sdd screen
36:37 - at least i believe that's correct and i
36:39 - think with that this should all work now
36:41 - there's a chance i made a mistake and
36:42 - we'll have to fix that but for now let's
36:44 - run the code and give this a test so
36:45 - let's make the terminal nice and large
36:48 - let's run this
36:49 - and notice it just instantly found the
36:51 - path and we get that now of course we
36:53 - want to be able to visualize this so we
36:54 - can make it a bit slower and the way we
36:56 - can do that is by using this time module
36:58 - so if i go here
37:00 - where my refresh is pretty much anywhere
37:02 - in here what i can do is time
37:04 - dot sleep
37:06 - and i can sleep for like 0.2 seconds 0.5
37:08 - seconds whatever you want just so that
37:10 - you have some time to kind of process
37:12 - what's going on so let's leave for 0.2
37:14 - let's make this larger and let's run
37:16 - this and notice that now you can watch
37:18 - the breadth first search algorithm in
37:20 - action and see every path that is
37:22 - currently considering
37:23 - and there you go we just found the
37:24 - finished path and the algorithm is done
37:28 - all right so there you go that project
37:29 - is now finished
37:31 - was a bit longer than i was expecting
37:32 - but obviously i wanted to explain this
37:34 - as best as i could let's walk through it
37:36 - step by step to make sure everything is
37:37 - clear and then we'll move on to the next
37:39 - one
37:40 - so we start here with main we've already
37:41 - talked about curses we know how this
37:42 - works and we call find path now we call
37:45 - find path we pass the maze and the
37:46 - standard screen and inside of find path
37:49 - the first thing that we need to do is
37:50 - determine where the start position is in
37:52 - our maze because we're using coordinates
37:54 - right and we're trying to use that so we
37:56 - need to know the starting position so
37:57 - instead of find start we just loop
37:59 - through the maze so we go through all
38:00 - the rows we go through all of the values
38:02 - in each row and if we find a value
38:04 - that's equal to the start symbol which
38:06 - i'm denoting as o then we're just going
38:08 - to return whatever position that's it
38:10 - and that way i can now very easily
38:11 - change the start position put it
38:12 - anywhere in the maze and this will adapt
38:14 - and in fact let's just do that by
38:16 - putting an o up here
38:18 - okay let's save and let's make sure
38:19 - there is a path uh yes that's fine okay
38:23 - continuing we then have our queue so we
38:25 - define our first and first out data
38:27 - structure and we add our starting
38:28 - position and the starting pause now i'll
38:31 - give you guys kind of a challenge here
38:32 - if you want try to do it by just having
38:35 - the path and not having the starting
38:36 - position there's a way to do that again
38:38 - i just haven't done that in this video
38:40 - then i have my visited set keeping track
38:42 - of all the elements i visited i'm saying
38:44 - while the queue is not empty what i'm
38:46 - going to do is get the current position
38:47 - and the path from whatever's at the
38:49 - front of the queue i'm then going to get
38:51 - the row and the column of the current
38:52 - position and i'm going to draw out the
38:54 - maze with whatever current path i'm on
38:56 - whatever one i've got to at this point
38:58 - i'm going to check if i'm at the end if
39:00 - i am at the end then i can return the
39:02 - path because i found that end node if
39:04 - i've not then i need to continue looking
39:06 - for the endnote right so i'm going to
39:07 - say neighbors equal to find neighbors
39:09 - maze row and call i'm going to loop
39:11 - through all of the different valid
39:12 - neighbor positions i'm going to check if
39:14 - they're visited and i'm going to check
39:15 - if they're an obstacle
39:17 - if they are i'll skip them
39:19 - if they're not i need to add them to the
39:21 - path and add them into the queue because
39:24 - we need to check now if they're the end
39:25 - node and if we need to expand from them
39:27 - right that's how this algorithm works
39:29 - then i add them to the visited set
39:31 - and this continues until we either find
39:33 - the path or we visit every single node
39:36 - that we have so every single one of them
39:38 - has been added into visited that's not
39:40 - an obstacle and we can't find a path so
39:43 - this will end if either there's no path
39:44 - or you find the path that's how that
39:46 - works
39:47 - all right find neighbors pretty
39:48 - straightforward forward gives us the
39:49 - valve neighbors
39:50 - and then print maze i won't explain that
39:53 - we walked through that already okay so
39:55 - that is that project let's just run this
39:56 - one more time for a sanity check that
39:57 - it's going to work when we change the
39:59 - starting node and let's see what the
40:01 - shortest path is here
40:03 - okay
40:04 - and there we go we have found the
40:05 - shortest path of course make this maze
40:07 - as large as you would like and you can
40:09 - see you know how that works all right so
40:11 - with that said that is project number
40:13 - one hopefully you guys enjoyed that
40:15 - definitely actually the most complicated
40:16 - one that we have now that i think of it
40:18 - now though let's move on to project
40:20 - number two all right so now we're moving
40:22 - on to project number two which as i said
40:24 - is going to be the nba project where
40:26 - we're grabbing basketball data there's a
40:28 - ton of data you can get if you're into
40:30 - basketball this is going to be really
40:31 - cool for you and even if you're not
40:33 - you'll learn how to work with an api how
40:35 - to process some data external data in an
40:37 - application kind of display that in some
40:39 - format send a request etc so what i'm on
40:42 - right now is a link it's data.nba.net
40:45 - prod v1 today.json this is a free api
40:49 - and what this gives you is links to all
40:51 - of the pieces of data that you have
40:53 - access to for free so it's kind of weird
40:55 - but this link gives you the links that
40:57 - you're going to look at to get specific
40:59 - data so for example if i search for
41:03 - let's zoom in oh that's a lot easier to
41:04 - see so for example we have this calendar
41:07 - okay
41:08 - so this says calendar and it's prod v1
41:11 - calendar.json
41:12 - what that means is i copy what's called
41:14 - the endpoint and i just tack that on
41:16 - oops that's not what i meant to click to
41:18 - the end of this year so i paste that so
41:20 - now i'm going to calendar.json and if i
41:23 - hit that
41:24 - it gives me a calendar that contains i
41:26 - guess some calendar data i don't know
41:28 - exactly what this is doing or what this
41:29 - is showing but the point is that it
41:31 - gives you a bunch of links for all
41:33 - different types of stats that you can
41:34 - get so you can get like all-star roster
41:37 - league config standings league div
41:39 - standings whatever you want you can have
41:41 - a look at and you can grab that data you
41:42 - first go to this link and then it gives
41:44 - you the link to that data that's how
41:47 - that works okay hopefully that makes a
41:49 - bit of sense i'm going to leave that
41:50 - open
41:51 - now though we want to essentially grab
41:53 - the data that that link's providing from
41:55 - code and the way we're going to do that
41:56 - is we're going to send a request to that
41:58 - link it's going to return to us
42:00 - something called json which stands for
42:02 - javascript object notation i have an
42:04 - entire video on json on this channel but
42:06 - pretty much this is a python dictionary
42:08 - that's the way you can think of it and
42:09 - we can access the different key value
42:11 - pairs grab the links for data sources
42:14 - that we want and then send a request to
42:16 - those links and get data from that so
42:19 - it's kind of a two-step process we send
42:21 - a request to that url it gives us some
42:23 - data on the different links we then send
42:25 - a request to one of those links and get
42:26 - the data that we actually want and a
42:28 - request is essentially our computer
42:31 - requesting information from a remote
42:32 - server we're going to send something
42:34 - called a get request which as it says
42:37 - requests information there's other type
42:38 - of requests like post requests put
42:40 - requests patch delete requests that do
42:43 - other types of stuff but that's kind of
42:44 - beyond the scope of this tutorial
42:46 - however before we can do all of that we
42:47 - need to go and install the request
42:50 - module now the way you do that is
42:51 - similar to how we installed curses
42:53 - before go to your terminal and type pip
42:55 - install
42:56 - and then request like that again if that
42:58 - doesn't work try pip three if that
43:00 - doesn't work try python hyphen m pip
43:02 - install otherwise you can watch those
43:03 - two videos that will be linked in the
43:05 - description and it should show you how
43:06 - to fix that but you need the request
43:07 - module installed if you're on windows
43:09 - and mac you do need to install this
43:11 - unlike curses it will not be installed
43:13 - by default and again just reminder try
43:15 - pip 3 in case that doesn't work
43:18 - and then you can try python hyphen m
43:21 - pip or python 3 hyphen anyways i have
43:24 - this installed so that's all working for
43:25 - me
43:26 - and let's now go in here and start
43:28 - writing some code so i'm going to say
43:30 - from requests import and we're going to
43:32 - import get and i'm going to say from and
43:35 - this is going to be print import and
43:38 - we're going to import the pretty printer
43:40 - like that i'll show you the pretty
43:42 - printer kind of a cool thing in python
43:43 - it's built in and it gives us a nice
43:45 - formatted output for json data
43:48 - then what we're going to do is have our
43:50 - base underscore url which is going to be
43:52 - equal to https colon slash slash and
43:55 - this is going to be data dot nba
43:58 - dot and then net okay this is the base
44:00 - url and then the endpoint is going to be
44:03 - the specific data that we want so i'm
44:04 - going to say all json is equal to and
44:06 - this is going to be slash prod slash v1
44:10 - slash today.json
44:13 - and today.json is the original one we're
44:15 - looking at that gives us all those links
44:17 - now though we want to send a request to
44:19 - this link so the way we do that is we
44:21 - say our response because every time you
44:23 - send a request you get a response
44:25 - is equal to and we're going to say get
44:28 - we're going to say base url we're going
44:29 - to append this or we're going to
44:31 - concatenate this to all json so we'll
44:33 - have you know the full url built out and
44:36 - then we're going to have a look at
44:38 - what's known as the json of this so
44:40 - whenever you send a request here you
44:42 - have access to json
44:44 - again think of this as a python
44:45 - dictionary and now we can print all of
44:47 - that out however you're going to see if
44:49 - i print this with a print statement so
44:51 - let's try this here if i print the
44:52 - response then we get kind of this
44:54 - garbage in the terminal that's just
44:56 - impossible to read so instead of
44:58 - printing it using a regular print
45:00 - statement we're going to use a pretty
45:01 - printer
45:02 - really cool thing if you haven't seen
45:03 - this so to do this we're going to say
45:05 - printer is equal to pretty printer make
45:08 - sure you add your parentheses and then
45:09 - we can use the printer by saying printer
45:11 - dot and then p print so pretty print
45:15 - and we're going to print the response
45:16 - and really we should call this data
45:19 - because we're grabbing the data the json
45:21 - associated with so let's say data
45:23 - okay so let's run this
45:25 - and now notice that i get much nicer
45:27 - formatting here
45:29 - everything's kind of separated on
45:30 - different lines that's what we had
45:31 - before
45:32 - this is what we have now when we use the
45:34 - pretty printer
45:35 - so inside of here we can see that we
45:37 - have a bunch of links
45:38 - now these links give us access to all of
45:41 - these different things right so game
45:42 - book lead tracker
45:44 - mini box score whatever data it is that
45:47 - you want you pretty much get all of it
45:48 - so what we want is the current
45:50 - scoreboard because we want to get
45:52 - information about games that are
45:53 - currently going on or that are going to
45:55 - happen today so what i'm going to do is
45:57 - try to grab this current scoreboard key
45:59 - and get the
46:01 - link that's associated with it so the
46:03 - way i do this first of all
46:05 - is i need to access the links key right
46:07 - so that i can start looking at this
46:09 - dictionary
46:10 - then i need to access the let's have a
46:12 - look the current scoreboard so we'll do
46:14 - it step by step
46:15 - let me just close this terminal
46:18 - and let's do this so we have our data
46:20 - now we want to say links is equal to
46:22 - data at
46:23 - and then links and let's print this out
46:25 - so printer dot p print
46:28 - and then links okay
46:30 - so let's have a look at that and now
46:32 - when i print out the links we just get
46:35 - all of the links in here and now the
46:36 - link that i want is the current
46:38 - scoreboard so i'm going to grab the
46:39 - current scoreboard link so i'm going to
46:40 - copy that there and now i'm going to say
46:43 - that my
46:44 - scoreboard is equal to and this is going
46:46 - to be links
46:48 - and then we're going to paste in here
46:50 - the current scoreboard so now let's have
46:52 - a look at the scoreboard
46:53 - okay let's run this
46:55 - and notice here that this is the url so
46:58 - prod v1 2022 whatever scoreboard.json
47:02 - now that i have that as it was saying i
47:04 - need to send a request to this endpoint
47:06 - the endpoint is the slash after the base
47:08 - of the url so that i can get bad
47:10 - information so now that we have that we
47:12 - have the scoreboard url
47:13 - let's make a function here and let's say
47:15 - get underscore scoreboard
47:17 - okay
47:19 - let's put
47:20 - uh
47:21 - let's put this inside of here and we're
47:24 - just going to separate things to make it
47:25 - a bit cleaner i'm going to say define
47:27 - get underscore links
47:29 - okay
47:30 - and inside of here we're just going to
47:32 - return links
47:36 - and now what i'm going to do is rather
47:37 - than links i'm going to say get
47:38 - underscore links like that and then i'm
47:41 - going to access the current scoreboard
47:42 - so i've just made it so i can reuse this
47:44 - function here so it gets
47:46 - gets me all of the links sorry so now i
47:48 - get the links access the specific link
47:50 - that i want and now i'm going to send a
47:52 - request to that link so i'm going to say
47:53 - get
47:54 - and we're going to say base url and this
47:56 - time we're going to say plus scoreboard
47:58 - okay
47:59 - and we'll say that this is response and
48:02 - actually i guess we could just do data
48:03 - is equal to and then we can get the json
48:06 - and then again we can use the printer so
48:08 - printer.pprint
48:10 - and we can print out our data
48:13 - okay so now all we need to do is call
48:15 - the getscoreboard function so let's call
48:16 - that
48:18 - and what's going to happen now is it's
48:19 - first going to send a request to
48:22 - what was it to the old json url
48:25 - it's going to give us the links we're
48:26 - going to access current scoreboard then
48:27 - we're going to send a request to that
48:29 - get the data and print it out so let's
48:30 - clear this
48:31 - and let's run and notice that i get all
48:35 - kinds of data here right and this is
48:37 - kind of hard to read like there's a lot
48:39 - of stuff so it's difficult to look at
48:40 - what the keys are so what i like to do
48:43 - here to actually see how i can kind of
48:44 - traverse this data is i like to print
48:47 - out the keys because remember this is a
48:48 - python dictionary so since it's a
48:51 - dictionary what i can do is just grab
48:52 - all of the keys of the dictionary and
48:54 - then i can see what data i want to grab
48:56 - next so if i run this now and we scroll
48:58 - to the bottom notice that my keys are
49:00 - internal numb games and games so i
49:02 - probably want to access the games so
49:04 - let's clear that and just access the
49:06 - games for now so now i can go json
49:10 - and games and now let's have a look at
49:13 - what
49:14 - this data looks like so let's run this
49:16 - and notice again i get a bunch of stuff
49:18 - so now i probably want to have a look at
49:20 - uh the keys of this so let's say data
49:24 - dot keys okay let's run this
49:27 - and what does it say here a list object
49:29 - has no attribute keys okay so what that
49:31 - means
49:32 - sorry guys is that the games is a list
49:34 - of all of the different games so what i
49:36 - can do instead now is i can say 4
49:38 - game in games because this is a list we
49:40 - just found that out and now i can simply
49:43 - print the game
49:44 - dot keys
49:45 - and just break and what that means is
49:47 - i'm just going to do this one time so
49:48 - i'm just grabbing you know the first
49:50 - game and printing out all of the keys
49:51 - associated with the game so i can view
49:53 - that so now let's run this
49:56 - okay
49:56 - and name games is not defined oh my
49:59 - apologies let's call this games
50:02 - not data
50:03 - okay let's clear the screen let's run
50:07 - and now i get all of these keys okay all
50:10 - of this information i have access to for
50:12 - every individual game and the games are
50:14 - games that are going to be happening
50:15 - today uh that that's what the games are
50:17 - so now i got to pick what information i
50:19 - want to display because i probably want
50:20 - to print out you know who's playing what
50:22 - the score of the game is uh you know
50:24 - what time is it is in the game that's
50:27 - the stuff i had before at least so i'll
50:28 - probably do the same here so we can kind
50:30 - of pick what we want but we have v
50:32 - team and we have h team those stand out
50:34 - to me as the visitor team and the home
50:36 - team we also have period and we should
50:38 - have clock so i think those are the four
50:40 - ones i want for right now so let's grab
50:43 - those so we're going to say home
50:45 - underscore team is equal to and this is
50:47 - going to be game at and then this is
50:49 - going to be h team right
50:51 - because that's the key we want to access
50:53 - and then i'm going to say
50:54 - i guess away team
50:57 - is equal to
50:59 - and not a team but v team
51:01 - and we can print out i guess the clock
51:04 - and the period as well we'll say clock
51:05 - is equal to game clock and we'll say
51:07 - period
51:08 - is equal to game period and now we don't
51:11 - need to use the pretty printer because
51:12 - we're just going to print these uh
51:14 - on one line
51:16 - and we will print
51:17 - an f string
51:19 - and we can say home team
51:22 - versus
51:24 - and then away team and then we might as
51:25 - well just print the clock and the period
51:27 - as well
51:28 - just have a look at what those are and
51:29 - then we'll continue from there okay
51:30 - clock
51:32 - and period so if you're unfamiliar with
51:34 - this in f string allows you to embed
51:36 - expressions directly inside of a string
51:38 - when they're in curly braces so i mean
51:40 - this is pretty intuitive but an f string
51:41 - only works in 3.6 plus so python 3.6
51:44 - plus so i'm just putting the home team
51:46 - versus away team comma clock comma
51:48 - period just so i can see what those look
51:50 - like and i'm going to do that for every
51:52 - single game so just to separate these a
51:54 - bit then
51:55 - let's add a bit bit of a separator
51:58 - just so that we can see uh the
51:59 - difference in games
52:00 - that's clear let's run the code and
52:02 - notice that i get all of this data okay
52:05 - so for each team i have a team id a try
52:08 - code wins losses series wins siri losses
52:11 - i get a bunch of data right and then the
52:12 - score of those teams because i guess
52:14 - some of these games are actually
52:15 - happening right now so what i can do is
52:17 - print out the try code if i want to see
52:21 - you know the actual name of the team and
52:23 - then i could print out this score as
52:24 - well so let's try doing that now
52:26 - so for our home team that's fine
52:30 - now we're going to say home team and
52:31 - inside of here we'll say try code and
52:34 - for the away team
52:36 - same thing we'll say try code
52:38 - just to clean it up a little bit so
52:40 - let's run this now and see what we're
52:42 - getting in terms of the difference so
52:44 - now we notice we actually get the uh
52:46 - abbreviations for the team then we're
52:48 - looking at what was the next thing we're
52:50 - printing the clock okay so 44.1 is
52:52 - what's on the clock for this one and
52:54 - then we have the period
52:56 - and it says what the current period is
52:58 - for the games that are currently going
52:59 - on okay
53:00 - nice so let's get rid of clock and
53:02 - period
53:03 - so those are the teams
53:05 - next thing that i want to print is the
53:06 - score of each team right
53:08 - so i'm going to print
53:10 - f
53:11 - and then this is going to be the home
53:12 - team and not the tri-code but the score
53:15 - this is the score in the current game
53:17 - and then we'll print the away team and
53:18 - the score as well
53:20 - and so now we get the teams that are
53:21 - playing as well as their scores in the
53:23 - game and then we can print the clock and
53:25 - period after that
53:26 - okay so let's clear
53:29 - let's run
53:30 - and notice here that we get
53:33 - i guess what is that chicago i don't
53:35 - know what these teams are but something
53:36 - 17 19 31 22 14 19 etc
53:41 - great and then here we're just getting a
53:42 - hyphen because these teams are not yet
53:44 - playing and zero zero i guess those guys
53:45 - just started
53:46 - okay
53:47 - continuing now we want to print the
53:49 - clock as well as the period
53:53 - so let's say print and we'll print f and
53:56 - i guess we'll go
53:58 - we should probably do should we do clock
54:00 - or period first let's go clock period
54:02 - and then we'll see what keys we have on
54:03 - those so let's run this
54:06 - okay
54:07 - and we get current so that's what we
54:09 - want to access for the period and then
54:11 - it looks like the clock just gives us a
54:12 - value so that's fine we can just grab
54:15 - the clock itself okay so let's go clock
54:17 - and then period and we want to get
54:19 - current
54:20 - like that
54:21 - okay let's run this again and now notice
54:25 - that we get 32.0 and then that's period
54:28 - one and then 142 period one 409 period
54:30 - one you guys can format this better i'm
54:32 - just giving you the basics obviously
54:34 - okay
54:35 - so that's what we wanted for getting the
54:37 - scoreboard now we also can get a bunch
54:39 - of other data and like i showed you we
54:40 - can get stats for the teams so they're
54:43 - points per game i guess their points
54:45 - allowed per game there's all these
54:46 - different stats i'm not a huge
54:48 - basketball guy i just thought this be
54:49 - cool but let's write one now that gives
54:52 - us the teams and we can view their stats
54:54 - and like i had before we will rank them
54:56 - based on points per game
54:58 - so to do this one we're going to want to
55:00 - look at get links again so let's not
55:03 - call get scoreboard let's call get links
55:05 - okay
55:06 - let's clear this and let's run the code
55:09 - and let's see what links we have for
55:11 - stats i didn't print sorry i need to
55:13 - print this let's print get links
55:16 - and actually we should probably use the
55:17 - printer to do this so printer.p print
55:20 - okay so let's have a look here
55:22 - and these are all the ones that we have
55:23 - now let me remember which one i was
55:26 - using i think it was league team stats
55:29 - yeah league team stats leaders okay this
55:32 - is the one that i want to get stats of
55:34 - course there's a lot of other ones so
55:35 - i'm going to copy that key and now we're
55:37 - going to write another function i'm
55:38 - going to call get underscore stats
55:42 - okay that's fine for now and i'm going
55:44 - to say stats is equal to and then this
55:47 - is going to be get underscore links
55:50 - and we're going to reference this right
55:52 - here the league team stats leaders okay
55:55 - then we will send a request so let's
55:57 - just copy this
55:59 - and rather than games i guess this is
56:00 - going to be teams and we'll have the
56:02 - base url plus
56:04 - the stats and then json and then we want
56:07 - to print out all those keys so we see
56:08 - what we have access to so let me
56:11 - take this in here and rather than get
56:13 - links we'll print out
56:15 - should really call this data so let's
56:17 - call this data
56:18 - okay now let's call getstats so get
56:21 - stats like that okay let's run this
56:26 - and let's see what we get and notice we
56:28 - get a lot of information okay
56:31 - i want to print out just the keys that's
56:33 - my bad i meant to do that so let's do
56:35 - dot keys
56:36 - and let's see what we actually get for
56:38 - that
56:39 - okay scroll down and we get league okay
56:42 - so that's the only key so let's access
56:43 - league so let's just put
56:46 - league here
56:47 - there's internal as well but we don't
56:48 - care about that that's some other data
56:50 - let's see what keys are associated with
56:52 - league so let's run that
56:53 - we have standard africa sacramento vegas
56:56 - utah i'm assuming we'd want just the
56:58 - standard league okay so let's grab
57:00 - standard
57:01 - okay
57:02 - let's run that
57:04 - and for the keys we have season year
57:06 - preseason regular season playoffs i'm
57:09 - assuming we probably want regular season
57:11 - but again you can change this if you
57:12 - want so let's now grab regular season
57:15 - let's print that
57:17 - and we only have the key teams okay so
57:19 - now let's grab teams
57:21 - and then this will be called teams let's
57:23 - see if there's any keys for teams so
57:25 - let's run this now
57:27 - and it says oh data is not defined so
57:29 - let's change this to the
57:31 - teams okay
57:33 - and rerun list object has an attribute
57:35 - keys okay so it's a list meaning that if
57:37 - we want to grab the keys for each team
57:38 - we can just do something like teams zero
57:41 - dot keys
57:42 - and if we have a look at this now we get
57:44 - all of these different pieces of
57:45 - information for the stats of each team
57:47 - so i can get the nickname the name the
57:49 - team id team code abbreviation min
57:52 - fgp tpp i don't know what a bunch of
57:54 - these mean but i know ppg is points per
57:56 - game so that's the one that we're going
57:58 - to use because i know what that means
58:00 - anyways those are the different keys we
58:01 - can get for each team so now we can loop
58:03 - through every single team and we can
58:05 - print out information for them so let's
58:07 - do that so let's say for
58:10 - team
58:11 - in teams
58:13 - and then we'll grab the names say name
58:15 - is equal to team name
58:17 - what else do we want i guess we'll get
58:19 - the id we'll say the id
58:21 - actually no i don't need the id we'll
58:22 - just go with name
58:24 - and i suppose we get the nickname as
58:26 - well nickname is equal to team nickname
58:27 - and let's go ppg
58:29 - is equal to team and then ppg
58:32 - okay and then let's just print
58:35 - for now we'll do an f string
58:37 - and we'll print the name
58:40 - the nickname and the points per game
58:43 - okay so let's have a look at this now
58:44 - let's clear and let's run
58:47 - and there we go okay so apparently we
58:48 - have a bunch of teams here
58:50 - that are not in the regular season or
58:53 - don't have a rank or something so we'll
58:54 - have to filter those out we'll do that
58:55 - in a second but for now we have
58:58 - the
58:58 - all the teams right so we have the name
59:00 - we have the nickname
59:01 - we can choose which one we want to use
59:03 - and then we get average and we get rank
59:05 - for points per game so this is where it
59:07 - gets a little bit more complicated i
59:09 - want to display these teams in the order
59:11 - of their rank right so i want rank 1 to
59:13 - be at the top and i guess rank 29 30
59:15 - whatever to be at the very bottom but i
59:17 - also need to filter out these guys
59:19 - because i guess they're a bunch of teams
59:21 - that we don't really need in our data
59:22 - set i don't know why those are being
59:24 - returned to us
59:25 - so the first thing i'm going to do here
59:26 - is i'm going to filter
59:28 - all of the teams that have a name of
59:30 - team
59:31 - so the way i'm going to do that
59:32 - say teams
59:34 - is equal to filter
59:35 - i'm going to say lambda x i'll explain
59:37 - this in a second don't worry
59:38 - and i'm going to say x at team
59:41 - like this
59:42 - does not equal
59:44 - and then we're going to say team because
59:46 - anyone that had the name team was like a
59:48 - blank team that we didn't really need
59:49 - and then we'll do this on teams
59:51 - okay so what the filter function does is
59:53 - it will run a function against every
59:56 - single element in our teams in this case
59:58 - that's what we're passing and if the
60:00 - function returns true it will keep the
60:02 - element if the function returns false it
60:04 - will remove it so this is an anonymous
60:06 - function that's what a lambda function
60:08 - is this is our parameter essentially the
60:10 - function called x so i write lambda x
60:13 - and then i say colon x team does not
60:15 - equal team i'm saying let's grab
60:17 - whatever the team key is of every one of
60:19 - our dictionaries and if it is not equal
60:21 - to team then we will return true so like
60:24 - this expression returns true or false so
60:26 - if the function returns true we keep the
60:28 - element if it turns false we don't keep
60:30 - it hopefully that makes a bit of sense i
60:32 - can't really explain it more than that
60:33 - however when you have a filter function
60:36 - here it returns a filter object
60:38 - not a list so you just need to convert
60:40 - it to a list
60:41 - okay so now that we have that let's just
60:43 - run this again and you should see that
60:45 - all those kind of empty teams will be
60:47 - removed so let's run it
60:49 - and
60:50 - key error team
60:51 - oh sorry not team this needs to be name
60:54 - okay let's fix that let's rerun and
60:57 - there we go so now all the ones that had
60:58 - just team are removed now what we need
61:00 - to do though is sort our teams by their
61:03 - rank in their points per game
61:05 - so to do this
61:07 - we're going to say teams dot sort and
61:10 - we're going to say key is equal to and
61:11 - again we're going to put an anonymous
61:13 - anonymous function we're going to say
61:14 - lambda x and then this is going to be x
61:16 - p per g p g for points per game and then
61:20 - this is going to be rank like that
61:22 - and this is going to be int
61:25 - now this is going to sort in
61:28 - what is it ascending order so we're
61:29 - going to get rank 1 first rank 30th 30th
61:32 - last now the reason i'm doing this is
61:34 - because points per game is a dictionary
61:36 - containing the rank and the average i
61:38 - want the rank so i'm grabbing points per
61:40 - game rank for every team converting that
61:44 - to an int so then we sort it as an
61:46 - integer not as a string because notice
61:47 - these are string values right
61:49 - and that's that's how this works you can
61:50 - pass this key function and that's what
61:52 - you're going to sort every element by
61:54 - when you're sorting
61:55 - now let's run this
61:57 - and notice that we're going to have all
61:59 - the ranks in the correct order now of
62:01 - course i don't want to display you know
62:03 - this weird dictionary i'd prefer to
62:05 - display the following
62:07 - ppg and then
62:09 - avg like that for the average so now if
62:12 - we rerun this we get the average number
62:14 - of points that each team scores per game
62:16 - and we get them ranked from 1 to 30th
62:19 - lastly if one other touch here we could
62:21 - do the following i'm going to say i plus
62:23 - 1
62:24 - dot and i'm going to say 4i comma team
62:28 - in enumerate teams and now it will say
62:30 - the rank beside each team so let's do
62:32 - that now and let's run
62:34 - and notice that now i get
62:36 - my rank and i also could have just done
62:38 - ppg
62:39 - at rank as opposed to doing i plus one
62:42 - but this works as well okay
62:44 - so that is going to wrap up this project
62:46 - let me quickly walk you through it
62:48 - so we start by defining the url that
62:50 - we're going to send our request to we
62:52 - had to import and install the request
62:54 - module we set up our pretty printer we
62:57 - have get links which gives us the link
62:58 - we're going to send our request to to
63:00 - get specific data we then have this
63:02 - function to get the scoreboard that is
63:04 - the games that are currently running uh
63:06 - and so we have current scoreboard we get
63:08 - the json we grab all the games
63:10 - associated with that for every single
63:12 - game because this is now a list
63:14 - we loop through we get the home team uh
63:16 - the visiting team the clock and the
63:17 - period and then we display this data and
63:19 - of course you can display this nicer you
63:20 - can get some more info i thought this
63:22 - was good enough for the tutorial then we
63:24 - have our get stats function inget stats
63:26 - is going to grab the league team stats
63:29 - leaders it's going to do the filtering
63:31 - it's going to do the sorting and it's
63:32 - going to go through and display all of
63:34 - the teams ranked by points per game so i
63:36 - just called get stats to run that you
63:38 - can call get scoreboard to run this you
63:39 - can run both of them you could write a
63:41 - little program that asks the user which
63:42 - one they want to run i'll leave that to
63:44 - you guys now we're going to move on to
63:46 - project number three all right so now
63:48 - we're moving on to project number three
63:50 - which is a currency converter now for
63:52 - this project we need to go to this
63:54 - website free.currencyconverterapi.com
63:57 - to get an api key that we can use with
64:00 - this api now this is a free api as it
64:02 - says in the name you are rate limited
64:04 - which means you have two requests or
64:06 - sorry 100 requests per hour you can do a
64:08 - maximum of two currency pairs when
64:10 - you're getting the exchange rates per
64:12 - request and you're allowed to go back
64:14 - one year in history now you can pay for
64:16 - a premium version of this obviously we
64:18 - don't need to do that for this tutorial
64:19 - though we just want to get the exchange
64:22 - rate data now this data is updated i
64:24 - believe every 60 minutes when you're on
64:26 - the free version i think if you go to
64:28 - the paid version you get it every minute
64:29 - or 60 seconds or something like that
64:31 - again it doesn't really matter for this
64:32 - tutorial anyways go to the website link
64:34 - in the description click on get your
64:36 - free api key enter your email it will
64:38 - send you the api key but make sure you
64:41 - verify your email because if you don't
64:42 - do that then it won't activate your api
64:44 - key anyways i already have my key
64:47 - and you don't want to share this with
64:48 - anyone of course it's the video i don't
64:50 - really care i'm going to have to share
64:52 - it with you but what i'm going to do is
64:53 - make a variable here in a new file
64:55 - called api key and i'm going to paste in
64:57 - my key which i'm just going to grab
65:00 - from my other screen now while we're at
65:02 - it we're going to paste in another
65:03 - variable here called base url now this
65:06 - is going to be equal to a different url
65:08 - than you just saw
65:09 - it is
65:12 - free.kerconv.com so that's the url we
65:14 - want to be sending our requests to for
65:16 - this project to get the
65:19 - up-to-date currencies right
65:20 - okay then what we're going to do is say
65:22 - from
65:24 - request import get now if you were not
65:26 - following along with the previous
65:28 - project which is fine what you need to
65:30 - do is install requests so pip install
65:33 - request like that you can also try pip
65:35 - three install request and if that
65:37 - doesn't work try python hyphen m pip
65:39 - install
65:41 - lastly you can try python 3 hyphen m pip
65:42 - install if that doesn't work there is
65:44 - two videos linked in the description
65:46 - that will show you how to fix that
65:47 - command one for mac and one for windows
65:50 - okay
65:51 - now that we have that we're just going
65:52 - to import the pretty printer as well
65:54 - just so we can use that again we use
65:56 - this in the last videos sorry so from
66:00 - print not last video last project we are
66:02 - going to import the pretty printer
66:06 - okay so this api works a little bit
66:08 - differently than the last one we need to
66:10 - send what's known as some query
66:11 - parameters when we want to get some
66:13 - specific data and the first thing i'm
66:15 - going to do here is show you how we can
66:16 - get a list of all of the currencies and
66:19 - then how we display those currencies
66:20 - then we can get the exchange rates and
66:22 - all of that stuff for now though i'm
66:23 - going to set up a printer so i'm going
66:25 - to say printer is equal to pretty
66:26 - printer again if you weren't following
66:28 - with the last video then what this
66:29 - allows you to do is get some nicely
66:31 - formatted output for your json the json
66:34 - is essentially a python dictionary
66:36 - that's going to be returned to you when
66:38 - you send a request to a url
66:40 - okay so now that we have that let's get
66:43 - the currencies the way that we get the
66:45 - currencies is we say endpoint is equal
66:47 - to and then i need to copy this in so
66:49 - let me just copy this from other screen
66:51 - and this is going to be api
66:53 - v7
66:54 - currencies and then question mark now
66:57 - this starts what's known as a query
66:58 - parameter a query parameter is
67:00 - essentially a parameter some data that
67:02 - you're going to send to the url and in
67:05 - this case what we need to add is our api
67:07 - key so we're using an f string available
67:09 - in python 3.6 and above we're embedding
67:11 - the api key directly in here and that's
67:14 - what's going to allow this to work if
67:15 - you don't have the api key then this
67:17 - won't be validated and you won't be able
67:18 - to send a request now let's actually do
67:20 - this in a function so i'm going to say
67:21 - define
67:22 - get
67:23 - currencies like that
67:25 - and we're going to say this is our
67:26 - endpoint and we're going to say that our
67:28 - url
67:30 - is equal to our base url plus our
67:32 - endpoint and then we're going to say
67:34 - that our data
67:36 - is equal to and this is going to be get
67:38 - we're going to send a get http request
67:40 - to this endpoint so we're going to say
67:43 - get url and then dot json like that and
67:46 - for now we're going to say printer dot p
67:48 - print standing for pretty print and
67:50 - we're going to print out the data and
67:51 - we'll just call the get currencies
67:53 - function
67:55 - okay so that's all we need for now to
67:56 - look at the currencies so let's run this
67:59 - uh and no module name request okay it
68:01 - needs to be request plural my apologies
68:03 - let's run this again
68:05 - and notice that we get all of our
68:07 - different currencies okay
68:09 - so when i have a look at what we're
68:10 - getting returned here we get a key that
68:13 - says results now again this is just a
68:15 - python dictionary that's the way you can
68:16 - think of it really it's json but we it
68:18 - gets read in as python dictionary so i
68:20 - can access this results key which is
68:23 - then going to give me a dictionary that
68:25 - has keys for every single currency and
68:28 - then the value of all those currencies
68:30 - is going to have an id a currency name
68:32 - and optionally a currency symbol so i
68:35 - want to be able to display that data to
68:36 - the screen so what i'm going to do here
68:39 - is from this function i'm going to
68:41 - return
68:42 - the data and then this is going to be at
68:45 - results like that
68:47 - and i'm also going to sort all of the
68:49 - results before i return them so i'm
68:51 - going to say
68:52 - that this is
68:55 - results
68:56 - okay
68:57 - i'm then going to say here
69:00 - data.sort
69:01 - so actually what i'm going to do here on
69:03 - a new line is i'm going to say data is
69:04 - equal to and then this is going to be
69:06 - the list of data dot items
69:09 - the reason i'm doing this is because
69:11 - data right now after i get results is
69:13 - going to be a dictionary as we can see i
69:15 - don't want it to be a dictionary i want
69:17 - it to be a list and the reason i want to
69:18 - be a list is so that i can sort it by
69:21 - the different currency names so i'm
69:23 - going to convert it into a list by
69:24 - getting all of the items the items will
69:26 - give me tuples that contain the key so
69:28 - that be the currency and then the
69:30 - dictionary associated with each currency
69:32 - then i'm going to sort this by default
69:34 - it will sort by the first item in python
69:36 - so i'll sort by the currency name and
69:38 - then i'm going to return my data like
69:40 - that so now i can say down here
69:43 - data is equal to get currencies and i
69:45 - can say printer.pprint
69:48 - and data and hopefully this will look a
69:50 - little bit cleaner now and it should be
69:52 - sorted so let's clear the screen let's
69:54 - run this
69:56 - and then notice we're getting tuples
69:57 - here right where it contains the
69:58 - currency i guess you could call it
70:00 - ticker and then the information
70:02 - associated with that currency and it's
70:03 - in alphabetical order based on i'm going
70:05 - to call it the ticker or the id whatever
70:07 - for the for the currency so now what we
70:09 - want to do is write a function that can
70:11 - display this in a much nicer format so
70:13 - we're going to say define
70:15 - print underscore currencies we're going
70:17 - to take in our currencies and we're
70:19 - going to loop through them and print
70:20 - them out so we have data there that's
70:22 - fine so now we're going to say
70:24 - for
70:26 - currency
70:27 - and then this will be well we should
70:29 - probably spell currency correctly
70:31 - so for currency in currencies
70:35 - uh we are going to grab the name of the
70:37 - currency so if we look here we see we
70:39 - have currency name
70:41 - we want the id and then potentially the
70:43 - currency symbol but not all of them have
70:45 - it so we're gonna have to write some
70:47 - code for that
70:48 - okay
70:49 - so let's say name is equal to and then
70:51 - it's going to be currency
70:54 - and i believe it's currency name and
70:56 - then we want the id so we're just going
70:58 - to say
70:59 - underscore id i don't want to use id
71:01 - because that's a built-in keyword in
71:02 - python and this is going to be currency
71:05 - actually no it's just going to be id
71:07 - okay and then the symbol
71:10 - will be
71:11 - so symbol is going to be equal to
71:13 - currency and then this is going to be
71:15 - dot get
71:17 - and we're going to try to get the
71:19 - currency
71:21 - symbol like that and if it does not
71:23 - return a symbol then we're just going to
71:24 - get an empty string so when you use dot
71:26 - get that will try to find this key in
71:28 - the dictionary if it exists it gives you
71:29 - the value otherwise it gives you the
71:31 - default value which is an empty string
71:33 - which i'm passing right here
71:34 - okay now that we have that we can print
71:36 - this out so we're just going to print
71:39 - an f string again and we'll have the
71:42 - id
71:43 - first because that's going to be the
71:45 - three letter symbol
71:46 - then we will have the name
71:49 - and then optionally we will have the
71:51 - symbol there
71:52 - okay
71:53 - hopefully that makes sense let's now
71:56 - call this so print underscore currencies
71:59 - let's pass our data and let's see what
72:02 - our output looks like here after i clear
72:03 - the screen okay let's run it
72:06 - and tuple indices must be in integers or
72:09 - slices not string
72:10 - my apologies guys so we're going to say
72:12 - for currency
72:14 - uh
72:15 - let's do this for
72:18 - name comma currency and currencies the
72:20 - reason we have to do this is because
72:21 - this is a list of tuples i forgot about
72:23 - that so now if i run this it should be
72:25 - good and there we go now we fix the
72:27 - problem so we can see that we get
72:30 - our little ticker currency if there's a
72:32 - symbol it will display the symbol if
72:33 - there's not a symbol then well we don't
72:35 - show it okay nice
72:37 - so now that we have that we want to
72:39 - write something that can get an exchange
72:41 - rate so i'm going to say define
72:44 - exchange underscore rate i guess like
72:46 - that and for the exchange rate we need
72:49 - two currencies that we want to get the
72:50 - rate for right so we're going to say
72:52 - currency one and currency two
72:56 - now these currencies are going to be the
72:58 - ids of the currencies we listed out so
73:01 - like cad usd whatever like the ids is
73:05 - what we need to pass to this function
73:06 - for this to work
73:07 - now the end point for this i'm just
73:09 - going to copy it in here
73:10 - is going to be the following endpoint is
73:13 - api v7 convert
73:16 - question mark q okay for query right
73:18 - we're going to say is equal to currency
73:20 - one and then notice this is underscore
73:22 - currency two
73:23 - so a little bit weird how this works but
73:25 - for this specific url you pass the first
73:28 - currency underscore the second currency
73:30 - and that's the pairing that you want to
73:32 - get information about now you can pass
73:34 - multiple pairings like i could do usd
73:36 - underscore cad here
73:38 - and it would give me both of the results
73:40 - now we're just going to do one at a time
73:42 - and then you say and compact equals
73:44 - ultra
73:45 - and api key equals api when you do
73:47 - compact ultra it gives you the most
73:50 - compact
73:51 - version where it's just going to give
73:52 - you the
73:53 - exchange rate and then of course you
73:55 - need your api key as well so we're going
73:56 - to embed that in this way
73:58 - hopefully that makes sense now we're
74:00 - going to send a request here so we're
74:01 - going to say url is equal to base url
74:02 - plus endpoint we're going to say
74:04 - response is equal to get
74:06 - url.json and sorry not.json we're going
74:10 - to say data
74:13 - data is equal to response.json and let's
74:17 - now just print this out so let's go
74:19 - printer.pprint
74:21 - and we're going to have to handle
74:23 - potential errors that can occur here if
74:24 - you pass invalid currencies so for now
74:27 - though we can comment this out and we
74:29 - can just call the exchange rate
74:31 - and let's pass this with usd
74:33 - and cad and it will give us the exchange
74:35 - rate between usd and cad not from cad to
74:38 - usd although i guess you could go both
74:39 - ways
74:40 - okay let's run this
74:42 - and notice that we get usd cad and it's
74:44 - 1.259025
74:46 - looks about right and if we pass the
74:48 - second pairing it would have given us
74:49 - this key
74:50 - for whatever the second pairing was and
74:52 - then the value
74:53 - hopefully that is clear but that's what
74:55 - we're getting from that
74:57 - so what we need to do now is essentially
75:00 - check to make sure that this actually
75:02 - worked and the reason i'm saying that is
75:04 - because if i pass something like you
75:06 - know random string here and i run this
75:08 - notice that my data is empty because
75:10 - there was no pairing with that name so
75:12 - what i'm going to do here is i'm going
75:14 - to say if
75:15 - the len of data is equal to 0 then i'm
75:19 - just going to print out
75:21 - invalid
75:22 - currencies
75:24 - i guess we could just do
75:26 - i guess that doesn't really work we'll
75:27 - do invalid currencies and then we'll
75:28 - just return
75:31 - otherwise though we want to get the
75:33 - pairing and we're only going to have one
75:35 - pairing here in here
75:36 - one pairing here and here okay
75:38 - interesting how i said that but we're
75:39 - going to return
75:41 - data and then this is going to be
75:44 - dot items
75:47 - actually not items dot values
75:50 - and we're going to convert this to a
75:51 - list first of all because when you get
75:52 - the values it gives you kind of this
75:53 - special object and then we'll grab the
75:56 - zero with value
75:57 - and we can actually that's already a
75:59 - float so we don't need to convert that
76:00 - okay so let's now say rate
76:03 - is equal to that and then print rate
76:07 - okay and then this will be usd so what
76:10 - i'm doing is i have my endpoint right i
76:12 - have my url i'm getting my response i'm
76:14 - getting the data associated with that
76:16 - i'm saying if the line of data is is
76:18 - zero then print invalid currencies i
76:20 - also realized that we can just clean
76:21 - this up so let's just make this data
76:23 - like that
76:24 - now if the length is 0 that means well
76:26 - we didn't have a valid pairing so we
76:27 - print that out and we return otherwise
76:29 - though we're going to convert all of the
76:30 - values it's just going to be one value
76:32 - really to a list we're going to grab the
76:34 - zeroth element which will just give us
76:36 - whatever the rate is
76:37 - and then we can print that out here okay
76:39 - so let's run this
76:41 - and notice we get 1.259025
76:45 - nice
76:46 - okay so now that we have gotten that uh
76:49 - maybe i want to add some output in here
76:51 - actually that tells me a bit nicer what
76:54 - the rate is so let's do that i'm going
76:55 - to say
76:58 - uh
76:59 - should not print i'll say rate is equal
77:01 - to this
77:02 - and we will return the rates but before
77:04 - i return the rate i'm just going to
77:06 - print out
77:08 - and we'll do an f string here
77:10 - and we will say
77:12 - that
77:14 - what is this going to be currency one
77:16 - okay
77:18 - to currency two
77:22 - is equal to rate i don't know if this is
77:24 - exactly the way that i would write this
77:25 - but i think that's fine like usd2 cad
77:28 - for example is this rate yeah you know
77:30 - what for now we're just going to go this
77:31 - uh we'll say is equal to that that's
77:33 - fine for me okay so let's just run this
77:35 - one more time
77:37 - and notice that i get usd to cad at one
77:39 - two five nine zero two five okay
77:42 - perfect that works for me now that we
77:44 - have that
77:45 - we're going to write one more
77:47 - that is going to take a dollar value
77:50 - and convert that dollar value uh to the
77:52 - other currency so we're going to utilize
77:54 - this function but i'm going to say
77:56 - define and then this is going to be
77:59 - i don't even know what i would call this
78:00 - here i guess convert
78:02 - and convert will take currency 1
78:04 - currency 2 and an amount
78:06 - now in here we're going to say the rate
78:08 - is equal to exchange rate of currency 1
78:10 - currency two i'm going to say if the
78:12 - rate is none so if we're returning from
78:15 - here meaning we had an invalid currency
78:17 - then we're just going to return we don't
78:19 - need to do anything otherwise though
78:21 - we're going to try to convert the amount
78:23 - that was passed here to a float so i'm
78:25 - going to say try
78:27 - and then i'm going to say amount is
78:29 - equal to float amount i'm going to say
78:31 - accept and then what i will do is say
78:34 - print
78:35 - invalid amount so if you pass like a
78:37 - string amount for example here something
78:40 - that i can't convert to a float i say
78:41 - invalid amount and then just return
78:44 - so that that way we don't have any issue
78:46 - when we try to do a multiplication which
78:47 - you're going to see in a second okay so
78:49 - we try that that doesn't work we say
78:51 - invalid amount otherwise we're going to
78:52 - say converted underscore amount is equal
78:57 - to and this is going to be rate
78:58 - multiplied by whatever the amount is
79:00 - right
79:01 - and then what we can do is print
79:03 - with an f string here and we can say
79:06 - uh let's say amount
79:09 - and then currency one
79:12 - and
79:13 - let's just say is
79:15 - equal to
79:16 - and then we'll say converted amount
79:21 - currency too
79:22 - okay and then just because we might as
79:25 - well just return the converted amount
79:27 - okay so now we have four functions get
79:30 - currencies print currencies exchange
79:33 - rate and convert so now what we want to
79:35 - do essentially is just write a program
79:36 - that keeps asking the user for a command
79:39 - and allows them to quit but they can
79:40 - type in a command and do whatever they
79:42 - want with the currency converter so i'm
79:44 - going to say define main inside of here
79:46 - i'm going to say
79:48 - currencies is equal to get currencies
79:51 - okay uh and then i will just print out
79:53 - like a little welcome message so welcome
79:55 - to the currency
79:58 - converter
79:59 - okay exclamation point
80:01 - and then we'll print the different
80:03 - commands so i'll say list lists the
80:06 - different currencies okay
80:09 - we'll say print and then this is going
80:11 - to be convert
80:13 - convert
80:15 - from one currency to another
80:17 - okay and then print
80:19 - we'll just call this rate
80:21 - get the exchange rate
80:25 - of two currencies
80:28 - okay
80:28 - now that we have that let's just do one
80:30 - empty print statement just there's a
80:31 - separator and that will say while true
80:35 - and we're going to ask them to enter a
80:36 - command so we'll say that command is
80:38 - equal to
80:39 - input and we'll say
80:42 - enter a command and we'll just say that
80:44 - they can type q to quit like that
80:47 - okay so now in here we're going to say
80:49 - actually first let's convert this to dot
80:51 - lower
80:52 - just so that we can check um even if
80:54 - they type something uppercase we'll
80:55 - still get the command so first we'll
80:56 - check if they quit so if command is
80:58 - equal to q uh we need two equal signs
81:01 - here then we can just break out of the
81:03 - while loop so let's break we'll say l if
81:06 - the command is equal to list
81:10 - then simple enough we can just print the
81:12 - currencies okay so
81:13 - print currencies like that that's all we
81:15 - need for list
81:16 - we'll say l if the command is equal to
81:19 - and then i guess we can handle convert
81:21 - then we need to ask the user for two
81:23 - currencies as well as an amount so we're
81:25 - going to get
81:26 - currency currency1 which is equal to
81:28 - input uh enter a currency name okay
81:30 - actually let's say id
81:32 - all right but we'll convert that ah
81:34 - actually
81:36 - we're going to convert it to dot upper
81:37 - not lower
81:39 - now let's copy this again so let's say
81:42 - that's currency two
81:44 - actually we'll say enter a base currency
81:46 - id enter a currency
81:50 - to convert to
81:51 - uh maybe we'll just do this i think this
81:53 - reads a bit better enter base currency
81:55 - enter currency to convert to and then we
81:56 - want one for amount so i guess i could
81:58 - have just written this from scratch
81:59 - we'll do this in between i'll say amount
82:02 - is equal to input enter an amount and
82:04 - then we'll say in
82:06 - and this will be in the base currency so
82:08 - we can say in
82:09 - and then currency one
82:11 - okay and well we don't really need to
82:13 - convert that to dot upper because it's
82:14 - going to be at a value once they do all
82:16 - of that then we can call our function
82:18 - which is convert and we can pass our
82:20 - values so we can say convert like that
82:23 - and we pass currency one currency two
82:25 - and amount okay
82:27 - lastly so we say l if the command is
82:30 - equal to rate then we just want to get
82:32 - the two currencies so let's grab
82:33 - currency one
82:34 - and currency two and let us call
82:38 - exchange rate so exchange rate of
82:41 - currency 1 and currency 2
82:44 - and else we'll say print
82:48 - unrecognized command
82:52 - okay
82:53 - i think that is all we need now we need
82:55 - to of course call the main function okay
82:58 - let me zoom out a little bit just you
82:59 - guys can read a bit more so we have our
83:01 - main function we're getting all the
83:03 - currencies we're just printing a little
83:05 - welcome message and then we're running a
83:06 - while loop and we're saying while true
83:08 - we're going to ask them to enter a
83:09 - command
83:10 - cue to quit of course if they enter q we
83:12 - will break so we'll quit if they enter
83:13 - list we'll print the currencies if they
83:15 - enter convert we'll ask them for the
83:17 - information we need then we will convert
83:19 - and convert here
83:21 - we'll do everything we need and print
83:22 - out the output then we have our rate
83:25 - where we get our two currencies and same
83:27 - thing we get the exchange rate and that
83:28 - will handle printing out
83:30 - the output as well so i believe that's
83:32 - it let's run this though and test it out
83:34 - so run
83:36 - and welcome to the currency converter
83:38 - let's zoom in a bit here
83:40 - list convert and rate enter command so
83:42 - let's try list
83:43 - okay there we go list everything out
83:46 - let's try to do the rate and let's do
83:49 - usd and czar
83:52 - okay and gives us 14.944 okay
83:55 - let's now try
83:57 - was it exchange knows convert
84:00 - convert enter a base currency let's go
84:02 - usd uh enter an amount in usd let's go 1
84:05 - 000.
84:06 - let's go xof which is one i just saw up
84:09 - here west african cfa franc okay and
84:12 - there we go gives us the conversion nice
84:14 - now if i hit q i can quit and that is
84:18 - all the program needs to do
84:20 - all right so with that said i think i'm
84:22 - going to start wrapping up the video
84:24 - here that was three mini python projects
84:26 - for intermediate programmers not overly
84:29 - complicated not super simple
84:31 - you know short period of time but also
84:33 - allows you to create something kind of
84:34 - cool i think these programs are somewhat
84:36 - useful and definitely a good kind of
84:38 - introductory project something you can
84:40 - build on to and hopefully a good
84:41 - learning experience for you guys to
84:43 - understand how api works maybe you
84:45 - learned about the pretty printer or
84:46 - maybe you learned about the curses
84:48 - module whatever hopefully i give you
84:49 - guys some value in this video with that
84:52 - said i will give one last plug to
84:53 - programming expert if you guys want to
84:55 - get better at programming that is my
84:57 - programming course you can check it out
84:58 - from the link in the description use
84:59 - discount code tim if you guys enjoyed
85:01 - this video make sure to leave a like
85:03 - subscribe the channel and i will see you
85:05 - in another one
85:08 - [Music]
85:14 - you

Cleaned transcript:

in this video i'll be sharing with you three mini python projects for intermediate programmers these projects are designed for people that have some experience with python they understand the basics like if statements for loops functions etc and they want to build something a bit more complicated that doesn't take a ton of time each of these projects will take between 20 and 30 minutes for us to build out there'll be under 100 lines of code yet they'll still be more advanced than kind of a beginner project and a lot of the other stuff that i have on this channel so with that said let me give you a quick demo of the three projects and explain what you'll learn in them and then we'll get into actually building them out so the first project that we're going to work on is a pathfinder or a maze navigator i'll just run the code and kind of explain how this works so you can see it actually takes over the entire terminal here we have a maze and you can view what's known as the breadth first search algorithm going through here and trying to determine the shortest path between one point and another now you can customize this however you like but i'm going to show you how we can control the terminal like this have different colors and then override what's currently on the screen as opposed to constantly printing stuff out this is really cool it's also really simple to do and then of course i'll walk you through the pathfinding algorithm which is kind of a very famous algorithm that you learn in any computer science class again it's called breadth first search and i'll explain to you how that works so that is the pathfinder or the maze algorithm whatever you want to call it the next thing that i'm going to show you is a little bit simpler but this is how you can get data about nba games so basketball games so the current games that are running what time they start at as well as viewing stats and all kinds of other information about players teams etc i've built this out just to show you how to work with an api and then of course you can customize this and change it how you like but if i run the program right now you can see that what it gives me is a list of the teams ranked by their points per game so we have all of the different teams and they're ranked currently by number of points that they average per game that's one functionality that we can use the other one is to get the current scoreboard of the teams so let me just change the function here and let's run this and what this prints out now is all of the games that are upcoming what time they start at and then if the game was currently running it would show you what period it's in the time on the clock and then whatever the score is in the games now of course none of these are running right now when i'm running this uh but if they were going on then you would see the information and every time you rerun this it'd be updated in live time so kind of a cool project especially if you're into basketball and then the last one here is a currency converter so let me run this project here you can see we get welcome to the currency converter and then we have three commands list convert and rate so i can enter a command let's start with list this lists out all of the currencies then what i could do is maybe convert so let's say i want to convert the currency of usd maybe a hundred dollars in usd to zimbabwean dollar so let's try that said wl okay it gives me 100 usd is 32 199 zwl i could also get the rate between different currencies so enter my currency cad and usd and then notice this is the current exchange rate so that's what you can do with the currency converter all of these projects you can add to and make a lot more advanced this is a really good starting kind of foundation and teaches you how to work with apis and do some more advanced things that you wouldn't learn in a beginner tutorial so hopefully after seeing the demo for these projects you guys are excited for this video if you are make sure you leave a like i will mention all the source code for these projects will be available in the description and we'll get into them after a quick word from our sponsor before we dive in i need to thank ltm designer for sponsoring this video ltm designer is the world's most trusted pcb design system that enables engineers to effortlessly connect with every facet of the electronics design process ltm designer has used 35 years of innovation and development to create a truly unifying design environment that makes it the most used pcb design solution on the market ltm designer provides an intuitive and powerful interface that lets you design pcbs rapidly while interacting and collaborating with your mechanical designers the interface provides a photo realistic 3d environment collaboration and synchronization with tools including solidworks ptc creo and autodesk inventor realistic rigid flex designs multiboard assembly and much more ltm designer is the most popular ecad tool and electronics design software and you can get started with it today for free by pressing the link in the description and registering for a free trial thanks again to ltm designer for sponsoring this video and now let's dive in all right so let's go ahead and dive right in now i'm going to start with the pathfinder or the maze navigator whatever you want to call this and we're going to use a package here called curses which allows us to control the terminal and colored in the way that you saw and actually override what's currently in the terminal so we don't have to keep printing a bunch of separate lines and kind of having a really messy standard output now if you're on mac or linux cursor should be installed by default for you but if you are on windows you need to install this so go to your terminal i'm just in vs code and i've opened up a terminal here you're going to type the following command pip install and then windows hyphen curses like this now again you only need this if you're on windows so hit enter try that command that should install it for you and if for some reason that doesn't work i'm going to give you two or three alternative commands you can try pip 3 install windows cursors if that doesn't work you can try python hyphen m pip install windows cursors and if that doesn't work you can try python 3. now if none of those work i'll leave two videos on the screen that should show you how to fix this pip command one for mac and one for windows although i guess you only really need it for windows because you don't need to install anything if you're on mac or linux all right now what i've done is made a python file here called pathfinder.pi i've opened it in vs code you can work in any editor that you want but i'm going to use vs code i've also pasted in a maze you can find this maze from the link in the description on the github repository or you can just make your own maze i'm treating all of the pound sign here's our number sign here as my obstacles in the maze all of the empty strings are going to be things we can navigate and then the o is going to be our start and the x is going to be the end now i do want to mention here that if you are trying to get better at python you also can check out a product i have called programming expert dot io this a programming course teaches fundamental programming object oriented programming advanced programming software engineering tools all kinds of stuff just wanted to mention that if you guys are interested you can use discount code tim i'll leave that in the description for now though we do want to build out this project so we have our maze here and the first thing i'm going to do is i'm going to import that curses module and quickly walk you through how this works so you can see how we can print colored output i do also have an entire tutorial series on the curses module on my channel in case you are interested i'm also going to say from curses like that import and i'm going to import something called wrapper and then while we're up here we're going to import a queue this is built into python you don't need to install it and we're going to import time just so we can implement a bit of delay here in this program when we start actually trying to visualize things for now though i want to show you how the curses module works so what we need to do here is define a main function and this main function needs to have as one argument std scr now this stands for standard output screen and this is what we're going to use to actually output all this stuff for our program so rather than using the standard print statements here we're going to add stuff to this screen this screen is going to override and kind of take over our terminal and then as soon as the program ends everything on that screen will be cleared and will be brought back to the original terminal you'll see what i mean in a second but for now we're going to type the following std screen dot clear so we're going to clear the entire screen then we are going to not write we're going to add string and when we add a string to the screen here we have to pass the position that we want to enter this string at or that we want to add it to so for now i'm going to go zero zero that represents the top lefthand corner of the screen so i believe we're going row and then column that we want to enter this in i'll experiment in a second then whatever the text is that we want to show on the screen so in this case i can do a hello world exclamation point then we're going to do std screen dot and then this is going to be refresh and what that does is refresh the screen and so we actually see what we wrote and then lastly i'm going to say std screen dot and this is going to be get ch what this stands for is get character and this is similar to an input statement that we would have in python it just makes it so that we're going to wait here until the user hits something before we exit the program if we don't have that it would do this and then just instantly exit and we wouldn't see anything because we weren't waiting long enough to actually view the output all right now that we have that main function we're going to call wrapper which we imported up here and we're going to pass to it the name of this main function but we're going to make sure we don't call the function so i'm not calling like that i'm just passing the name of the function and what this does is it initializes the curses module for us and then it calls the function passes this std screen object and then we can use that in here to control our output all right hopefully that's clear so far let me save and let's run the code and let's see what we get and notice that it kind of brings me to this blank window and it says hello world and then if i hit any key on my keyboard brings me back to the original terminal one more time if i run this notice it shows me hello world hit a key and then i'm out that is the curses module very basic introduction however i want to show you what happens when we change these coordinates and how we can add colors so let's say now we maybe draw this at five so five zero is our position let's run the code and notice we go five rows down and we're at the zeroth column so that's how you can control where you're drawing this you put the row and the column you want to start drawing so if i go maybe 5 5 and then let's save and rerun oops save and rerun notice we get hello world kind of more in the center of the screen so very powerful what you can do here and then if we want to add a color this is a little bit more complicated we first need to initialize a color so i just got to look at my cheat sheet over here to remember how to do this so we're going to say curses dot init underscore pair and whenever we create a color pairing here in curses we give it an id so i'm just going to give an id of one and then i put the foreground and the background color that i'd like to have so i can say curses dot and then color underscore and then whatever colors you can see there's a bunch of options here green magenta red whatever so let's go with blue for now and then the foreground color or sorry the background color my bad it's going to be curses underscore color and then black so you put your foreground color and your background color pretty much all the colors you can think of are you know you can access them with color underscore their name and then now that we have the initialization pair if i actually want to use this color what i have to do is the following i'm going to say blue underscore and underscore black is equal to this is going to be curses dot and i believe this is color pair again let me just have a quick look at my cheat sheet here to remember this yes it's colored pair and we're going to put the id of the color pair we want to use so since i reference this with id1 or create it with id1 now i reference id1 and that's going to give me a color of blue and black and the way i apply that now to my text is i just pass another argument to add string with this so blue and black and now when i start displaying this it should be blue and black so let's do this let's run the code and notice i get hello world in blue text and the black is just the default background so it doesn't change the background color but if i wanted to be like a white background and i would say color white and then if i draw this now so let's rerun this notice i get kind of a white background for that text great but let's go back to color block okay so that's the first color pair while we're here let's initialize another color pair because i want blue and black i also want red and black so let's change this to red and let's make that two and then we'll use these later on i don't actually want to write hello world onto the screen so let's actually just comment all of that out for now and let's work on the breadth first search algorithm and then we can actually start displaying stuff on the screen so the first thing i want to handle is printing this maze out so obviously i want to view the maze on the screen so to do that well how am i going to do that i'm going to write a function here i'm just going to call this print maze and to be able to print the maze i need the maze that i'm going to print i need the standard screen or the standard output screen that i'm going to print the maze to and i'm going to take a variable here or an argument called path now path is going to be the path i want to draw on the maze obviously we don't know what the shortest path is yet but i can pass a path here of coordinates and then whatever values are in that path i'll draw them a different color in the maze so you'll see what i mean in a minute so that's print maze uh now inside of here i'm going to grab my two colors that i want to use so i'm just going to say blue is equal to and then this will be curses dot color underscore pair this will be one let's say red is equal to curses.color pair two just so i can use both the blue and the red we'll draw the default maze as blue and then the path as red okay continuing i'm gonna loop through everything in my maze because this is a twodimensional array so i have kind of all my rows and then the columns would be the individual values in each row so i'm going to say 4 and this is going to be i comma rho in enumerate maze now if you're unfamiliar with enumerate this is going to give me the index as well as the value so i'm going to get every one of these rows as a row or every one of these nested arrays as a row and then i will be what row i'm currently on okay continuing i'm going to say 4j comma value in enumerate and then i'm going to enumerate over the row the reason i can do this is because i have a list or an array whatever you want to call it but list in python so row is my list then i'm going to enumerate over the list that i have i'm going to grab whatever column i'm currently on which is what j is going to represent and then the value is going to be whatever symbol here is in the column okay so that's what i have then what i want to do is i want to simply draw this onto the screen so i'm going to do the following i'm going to say std screen dot and we're going to add string and now we need to determine where we want to add this string well where i want to add it onto the screen is going to be whatever position i'm currently on which is going to be represented by i and j so i is going to tell me the row i'm on j is going to tell me the column so what i can do is simply add whatever i'm drawing here at whatever row and column i'm currently at so i'm going to say i j as the position and then i'm going to say value and value is just going to be either an empty string a numbers sign an o and x whatever it is that i'm currently looking at hopefully that makes sense but that's what we want for print maze and then i'll handle the path in one second for now though let's actually try printing the maze so i'm going to uncomment the clear i'm going to uncomment the refresh and the get ch and now rather than adding my own string i'm going to call printmaze i'm going to pass to it the maze variable which is just a public variable or a global variable that's fine i'm going to pass my std screen and then this is a default argument of empty list so i don't need to pass that okay so let's run this now let me just make the terminal a bit bigger first let's run this and notice my maze is printing out now this looks a little bit squished together like it's too close to me so to spread this out a little bit what i'm going to do is simply multiply the row in the column that i want to draw this at by 2 and actually we can leave the row as just regular eye we can just spread the columns out a little bit more so now we should get kind of two spaces between each of our elements and also let's add a color here so let's add blue and now it should be drawn in blue so let's run this and i guess it needs to run again okay and there we go that looks a lot better the maze is spaced out and we can kind of see it all nice great so let me exit that all right so now that we are printing the maze out and i guess that's pretty much all we're doing i need to talk a bit about how this algorithm works so let me head over to the whiteboard i will explain that to you and then we'll start coding it out so in front of me i have a very simple maze i'm also going to refer to this as a graph and this is what i'll use to demonstrate the breadth first search algorithm so the goal here is to find the shortest path from some starting node to some ending node and i'm going to reference these nodes by their position in the graph so we see these are different rows these are different columns and i'm going to have my positions in row column format which means i would refer to this here as one zero so row one column zero just keep that in mind as i write the positions because uh you might be confused if you're reading it the other way and like here this would be zero three all right so how does the breadth first search algorithm work well the concept behind the breadth first search algorithm is that we're going to continually expand outwards from a point until we find the ending points that we're looking for or the ending node i'm just referring to every single one of these squares as a node okay in kind of graph theory that's what you would call them so we're going to start here at this start point and we're essentially going to slowly expand outward by looking at all of the neighbors of this point so we're going to look at this neighbor and this neighbor and if there was a downwards neighbor or a left neighbor we'd look at those as well but there isn't any left or down neighbors so obviously we're starting here so we expand here and then from both of these points we're going to look at all of their neighbors so maybe we start with this one we would look at this neighbor then we would look at this one then we continue the process and we do this one iteration at a time which means that once i finish considering this neighbor here i go and i do this one then of course we're going to move up to here we're going to move up to here and since we're doing this one step at a time as soon as we hit the ending node we will actually be guaranteed to have found the shortest path because we're only expanding our path from the starting node by one new node at every single iteration now that's a super high level recap of how this works of course i'm going to walk you through the code in a more complicated demo but that's kind of the concept here one step at a time we're slowly expanding outwards from this node and expanding our current path by one until eventually we reach this end node and as soon as we find the end node we know that we have found the shortest path because every other path that we have is either going to be the same length or longer to find this path okay so let's now look at a demo of how we actually do this so first of all we're going to use a data structure called a q now q i believe is spelt like that i'm also just going to refer to it with the letter q and this is what's known as a first in first out data structure or a last in out data structure whatever you prefer to call it essentially what that means is that if i enter some item into the queue just kind of like a phone cue or any other lineup that you would be in if i enter this item first then this is going to be the first item to come out and the second item that i enter into the queue that's going to be the second item to come out now that's important because we're going to process elements in the order in which they're entered into the queue so just keep that in mind so for our cue we can have a back and a front so we can say that this is the front of the cue excuse my messy handwriting and then this is the back just so we're clear on kind of what element we're going to process next so what we're going to start by doing is we're going to place our starting node here inside of the queue now the way i do that is i just place the position of the node that i want to start looking from so i'm going to put a position of 3 and then 0 because it's in row 3 and column 0. now every single step in my algorithm what i'm going to do is i'm going to pop an element off of my queue i'm going to take the element that's currently at the front of the queue i'm going to remove it from the queue and i'm going to start processing it now the way i process an element is i essentially just look at all of its neighbors and try to find if we're currently on the end element or not so in this case i take three zero off the queue and i say okay i want to process all of this element's neighbors and kind of expand outwards from this until eventually i get to this node so what i'm going to do is look at the neighbors i'm going to determine i have two of them and i'm going to check if these neighbors are the end node if they are then i'm done the algorithm i found the shortest path but if they're not what i need to do is add them onto the queue so now they can be processed and we can continue expanding until eventually we find this endnote so let's erase this from the queue here so 3 0 we've now processed that element i'm going to add this into some set here so let me just create a set this set will be known as our visited set and okay it's kind of hard to draw this the way that i want to so let's just do this 3 0 and the reason i'm putting it in a set is just so i know okay i've processed this element i don't have to look at it another time anyways processing the element again involves looking at all the neighbors so the two neighbors here are 2 0 and what do we have we have 3 1. so i'm going to add those positions into the queue doesn't matter the order that i add them in so i'm going to add 2 and what was this 0 and then my other one is 3 and 1. okay so these are now the two new elements that i need to process to continue expanding my path so what do i do well i'm going to pop now the first element off of the queue and i'm going to process this one and well repeat everything that i was doing so let's cross it off we'll erase it in a second this is the current one that we're looking at so now we need to consider all of this node's neighbors now it has a neighbor down and a neighbor up it also has one to the right but since the one to the right is an obstacle we don't look at that and for the one that's below us here we see that the one below us is an element that we've already looked at and the reason we know that is because it's in this visited set so i can skip the neighbor below us because we've already looked at it i don't need to process the same element twice and i can just go directly to the element above so i'm going to add a single neighbor here to my queue and this neighbor is going to be in 1 and then 0. so now i've processed this element it was not the final node that we were looking for so let me delete it here and now we're going to add this into this visited set now i didn't mean to butcher my element here so let's go here what was that position that was two and zero so let's add this in to zero like that and now we've visited those two notes now we're going to continue so we're going to take the next element off of the queue which is 3 1 so i'll just delete it here we will add it into this set so you might as well just add it right now okay 3 and 1 and then from 3 1 that's right here we need to look at all of its neighbors so it has one going to the right and it has one going to the left well of course the one to the left we've already processed so we can just add the one to the right which is right here and that has a position of 3 2. so what i do is i add 3 2 to my q if we can that's a really bad three we get the point we add three two and we continue and this process is going to repeat until eventually we hit this endnote and again as soon as we hit this end node we know that we found the shortest path because that's the first time we found it and we would have found it on another path if there was a shorter path to get to it so i mean i could continue this example but hopefully you kind of get the idea we're expanding outwards one node at a time until eventually we find the ending node and then i will show you in the code how we actually kind of keep track of what path we were on because that is a little bit more complicated but this is the basic idea we have a queue we add elements onto the queue we process them one at a time in the order in which they were inserted into the queue this guarantees that every kind of new element that we're looking at is only expanding our current path by at most one node as soon as we find the end node then we can just say okay well we found the shortest path let's end the algorithm let's draw the path out hopefully that gave you a very brief explanation of how this works i don't want to go through the whole thing because it will take too much time now though let's start coding this out and hopefully everything will be cleared up all right so let's code out a function here called find underscore path and we're going to take in here the maze and then this is going to be the standard screen and i think that's all we need for find path now for find path i'm just going to declare a few variables here i'm going to say start is equal to x end is equal to o and actually is this no we're going to say start is equal to o and is equal to x and what else do we want here we want to figure out what the starting position is of our maze now we could just hard code in the position right here but instead i'm going to write a function that will essentially look for this o and tell me where in my maze i'm starting from because we're going to start from this position we need to know the coordinates of this right so in this case it'd be 0 1 2 3 4 5. okay it's in row 0. so it would be 0 5 that would be the position here of the start but we want a function that will tell us that so we don't have to manually do that so for now i'm going to say define find underscore start and just because i didn't really explain this i just jumped right in what we're doing here is we're going to start coding out that breadth first search algorithm that you just saw so that's what find path is going to do but first we need to find the starting position so we're going to take in the maze here and we're going to take in whatever the starting symbol is and what i'm going to do in here is simply say 4 and this is going to be i comma rho and enumerate maze and then for j comma value and enumerate row i'm going to say if the value is equal to start then i can simply return i comma j so i'm going to return the row and the column where i found this starting symbol and we're going to assume that we just have one of those symbols okay now otherwise we'll just return none if for some reason we couldn't find the start okay so now in here we're going to say start underscore pause is equal to find start then we're going to call the maze and the starts now we know the starting position now what we want to do is set up our queue and set up those iterations and finding the neighbors and all that stuff i was discussing so for the queue we have this q module and we're going to use it so the way we do that is we're going to say q is equal to and then q dot q and again this is a first in first out data structure so the first element i insert is the first element that comes out that's very important because the order in which we process the nodes really matters when we're doing the breadth first search we don't want to process the most recent node we've added to the queue we want to process the node that's been in the queue the longest just like we would if you were accepting you know a bunch of phone calls or if there was a lineup or something like that that's exactly what a queue is right so we have our queue and we need to insert something into the queue so to insert something we use this put method here and we're going to put a actually a tuple and the tuple is going to contain the starting underscore position and it's going to contain a list that has the start underscore pause in it now the reason why we're adding two elements in here is because in the queue i want to keep track of the current position or the node that i want to process next as well as the path to get to that node now the reason i want the path to that node is because as soon as i find the ending node i'm going to take whatever path i currently have and i'm going to start drawing that onto the screen i'm going to show that on the screen so for now since we haven't found the end node our current path just includes the start position but every time i process a new neighbor or something along those lines i'm going to change the path and the path will continue to grow and i'll be able to see what path we're at for every single note hopefully that makes a bit of sense but that's why i'm starting two pieces of information the position i'm currently on as well as the path and in fact we could even optimize this further and just store the path and grab the last element from it but i'm just going to do two things here just so it's crystal clear when i code this out it's not the most efficient thing in the world but for this tutorial it's fine okay so for now we put that in the queue we also want to make a visited set which is going to contain all of the positions that we've currently visited now that we have all that set up i'm going to say wow we still have any elements in the queue so while not and then q dot and i think this is either is empty or just empty i believe it's just empty so while the queue is not empty what we're going to do is we're going to get the most recent element from the queue the one that's kind of next in queue so i'm going to say current underscore position and path is equal to q dot get now gets just going to give me the element at the front of the queue and since i have two things for every element i have my path as well as the position i'll grab the current position which will just give me the first element and the path which will give me the second okay now that i have the current position i'm going to say the row and column is equal to current position so i'm going to break down the position into its two components the row and the column and i'm going to find all of the neighbors of this position and start processing them if they are not the end node so first i'm going to say if maze and then this is going to be at row call is equal to and this is going to be the end so we're going to say end like that so we're going to look in the maze and see if this position is equal to an x if it is that means we found the end and so what we can do here is simply return the current path because again as soon as we find the end node we know that we've found the shortest path or one of the shortest paths because there could be two paths that are both the shortest we'll find one of them so we can just return the path and then we can draw that if we want okay continuing now what we need to do if we haven't found the end node is we need to continue branching out so we need to find all the neighbors of the current node and then expand towards them so we're going to write another function here called find underscore neighbors now the tricky thing with the neighbors is that we need to make sure that the neighbor that we're finding is not an obstacle and that it's a valid position in the maze so you'll see what i mean here we're going to take an amaze a row and a call and we're going to say our neighbors is equal to an empty list and we're going to determine programmatically what all the neighbors are of this current position so we're going to look up left right and down if you wanted to you could do diagonal but i'm not doing diagonal in this tutorial but adding that is is fairly easy so for now i'm going to say if the row is less than not zero sorry if the row is greater than zero then i'm going to add a neighbor and this neighbor will be the neighbor above i'm going to say neighbors dot append and i'm going to append the row minus one and then the current column so we can add a comment here and say this is gonna go up now the reason i have to check if the row is greater than zero is because if the row currently is zero i have no more rows to look up i'm at the bounds of my maze and so i can't add that but if the row is greater than 0 so it's 1 at minimum then i can subtract 1 from it and that's still a valid position next i'm going to say if the row and this will be plus 1 is less than the len of the maze then i can add the row below so i'm going to say neighbors dot append row plus 1 and then call again because if the row plus 1 is equal to the length of the maze then that means if i were to add row plus one i would get an index out of bounds error i'd be too far that means i'm already at the bottom of my maze but if this is true then that means i can add one more without going out of bounds so that's for the rows now we want to do the same thing with the columns for so for left and right so i'm going to say if the column is greater than zero then this is going to be left what i can do is say neighbors dot append and i can append the current row and the column minus one okay and i'm going to say if the column is column plus 1 is less than the len of maze 0. now the reason i need to check may 0 is because my maze may not necessarily be square in this case i don't actually think it is square we may have more columns than we have rows so i need to check how many columns we have and i can just do that by grabbing the first row and seeing how many elements are in there so that's what i'm doing here if we don't have a first row this will cause an error but we're always going to have first row so that's fine and then i'm going to say neighbors dot append row and call plus one and then here i'm going to return neighbors and let's just put a comment here for right now in here we did not check if these positions are obstacles we'll do that inside of here for now we've just got all of the valid positions that are neighbors now we're going to check if they're obstacles or not as we loop through them so i'm going to say neighbors is equal to and then this is going to be find neighbors enough find path find neighbors and we are going to pass to it the maze as well as the row and the column of the current position that we're processing right finding all of their neighbors we're going to say for neighbor in neighbors and we are going to check if this is an obstacle or not and if we've already visited it before because if we've already visited it we don't need to process it so i'm going to say if the neighbor is in visited then continue because we don't want to process it and i'm going to say if the neighbor and actually sorry i need to break this down i'm going to say row call is equal to neighbor and actually we'll just go rc so that we don't shadow the variable name up here but i'm going to say rc is equal neighbor standing for row and column i'm going to say if the maze at and this will be rc is equal to a pound sign okay then what we want to do is continue okay now if this is not the case so if the neighbor's not in visited and the neighbor is not a pound sign then that means we need to process this neighbor so i need to add it to my queue so i'm going to say q.put and i'm going to put inside of here my position so i'm going to put the neighbor okay which is going to be a tuple containing the row and column and i also need to put the new path that now contains this neighbor so i'm going to say my new path is equal to and this is going to be whatever the current path is up here okay so where do i have path path is right here and then this is going to be plus and inside of another list because i can add two lists together i'm going to put the what is it the neighbor so all this is doing is kind of tacking the neighbor onto the current path this is not the most efficient possible way to do this you guys can try to optimize this if you want but for now this is fine and for the simplicity of the video i'm going to do it in this way and then i'm going to put new path so i'm adding the neighbor as well as the new path and the new path is just whatever the current path is plus the current neighbor that i'm considering right that's what i have when i'm adding to the queue okay hopefully that makes sense lastly what we need to do is say visited.add and we add the neighbor to that to make sure we don't process it multiple times and that's actually all we need for the breadth first search algorithm again i know this looks pretty complicated but that's all we need now what we want to do is make it so that we draw all of this stuff out so we can kind of see this happening and then i'll walk through the algorithm one more time just to make sure it's crystal clear so where we had this here right where we were printing the maze i'm going to copy that and i'm going to put that inside of this wall because at every step i want to draw out what i'm currently considering so i'm going to go up here and i'm going to paste this before we're checking if we're at the final element or the the final node and i'm going to print the maze except this time i'm going to pass my path and when i pass the path now this will allow me to draw out the path right so i'm going to clear the screen i'm going to print the maze and i'm also going to add something to printmaze so we draw the path and then i'm going to refresh the screen and i'm going to do this every while loop iteration so that i can see the progress going on as i go through this algorithm so now let's go to print maze and let's make it so that we print the path in a different color so here i'm going to say if and this is going to be i comma j is in the path so if it's in the path that we have right here that's valid to check that then what i want to do is draw this in a different color otherwise i'll do this so i'm just going to copy this line i'm going to paste this in here i'm going to change from value to be x because x is going to represent the current path and i'm going to change the color to be red so now rather than drawing an empty string i'm going to draw an x and i'm going to draw it in red and i'll draw it at the same position i would have before but again we're just changing what we're drawing okay so that's pretty much all we need last thing we need to do here is just call this function so this function is find path and it takes in the maze and the sdd screen at least i believe that's correct and i think with that this should all work now there's a chance i made a mistake and we'll have to fix that but for now let's run the code and give this a test so let's make the terminal nice and large let's run this and notice it just instantly found the path and we get that now of course we want to be able to visualize this so we can make it a bit slower and the way we can do that is by using this time module so if i go here where my refresh is pretty much anywhere in here what i can do is time dot sleep and i can sleep for like 0.2 seconds 0.5 seconds whatever you want just so that you have some time to kind of process what's going on so let's leave for 0.2 let's make this larger and let's run this and notice that now you can watch the breadth first search algorithm in action and see every path that is currently considering and there you go we just found the finished path and the algorithm is done all right so there you go that project is now finished was a bit longer than i was expecting but obviously i wanted to explain this as best as i could let's walk through it step by step to make sure everything is clear and then we'll move on to the next one so we start here with main we've already talked about curses we know how this works and we call find path now we call find path we pass the maze and the standard screen and inside of find path the first thing that we need to do is determine where the start position is in our maze because we're using coordinates right and we're trying to use that so we need to know the starting position so instead of find start we just loop through the maze so we go through all the rows we go through all of the values in each row and if we find a value that's equal to the start symbol which i'm denoting as o then we're just going to return whatever position that's it and that way i can now very easily change the start position put it anywhere in the maze and this will adapt and in fact let's just do that by putting an o up here okay let's save and let's make sure there is a path uh yes that's fine okay continuing we then have our queue so we define our first and first out data structure and we add our starting position and the starting pause now i'll give you guys kind of a challenge here if you want try to do it by just having the path and not having the starting position there's a way to do that again i just haven't done that in this video then i have my visited set keeping track of all the elements i visited i'm saying while the queue is not empty what i'm going to do is get the current position and the path from whatever's at the front of the queue i'm then going to get the row and the column of the current position and i'm going to draw out the maze with whatever current path i'm on whatever one i've got to at this point i'm going to check if i'm at the end if i am at the end then i can return the path because i found that end node if i've not then i need to continue looking for the endnote right so i'm going to say neighbors equal to find neighbors maze row and call i'm going to loop through all of the different valid neighbor positions i'm going to check if they're visited and i'm going to check if they're an obstacle if they are i'll skip them if they're not i need to add them to the path and add them into the queue because we need to check now if they're the end node and if we need to expand from them right that's how this algorithm works then i add them to the visited set and this continues until we either find the path or we visit every single node that we have so every single one of them has been added into visited that's not an obstacle and we can't find a path so this will end if either there's no path or you find the path that's how that works all right find neighbors pretty straightforward forward gives us the valve neighbors and then print maze i won't explain that we walked through that already okay so that is that project let's just run this one more time for a sanity check that it's going to work when we change the starting node and let's see what the shortest path is here okay and there we go we have found the shortest path of course make this maze as large as you would like and you can see you know how that works all right so with that said that is project number one hopefully you guys enjoyed that definitely actually the most complicated one that we have now that i think of it now though let's move on to project number two all right so now we're moving on to project number two which as i said is going to be the nba project where we're grabbing basketball data there's a ton of data you can get if you're into basketball this is going to be really cool for you and even if you're not you'll learn how to work with an api how to process some data external data in an application kind of display that in some format send a request etc so what i'm on right now is a link it's data.nba.net prod v1 today.json this is a free api and what this gives you is links to all of the pieces of data that you have access to for free so it's kind of weird but this link gives you the links that you're going to look at to get specific data so for example if i search for let's zoom in oh that's a lot easier to see so for example we have this calendar okay so this says calendar and it's prod v1 calendar.json what that means is i copy what's called the endpoint and i just tack that on oops that's not what i meant to click to the end of this year so i paste that so now i'm going to calendar.json and if i hit that it gives me a calendar that contains i guess some calendar data i don't know exactly what this is doing or what this is showing but the point is that it gives you a bunch of links for all different types of stats that you can get so you can get like allstar roster league config standings league div standings whatever you want you can have a look at and you can grab that data you first go to this link and then it gives you the link to that data that's how that works okay hopefully that makes a bit of sense i'm going to leave that open now though we want to essentially grab the data that that link's providing from code and the way we're going to do that is we're going to send a request to that link it's going to return to us something called json which stands for javascript object notation i have an entire video on json on this channel but pretty much this is a python dictionary that's the way you can think of it and we can access the different key value pairs grab the links for data sources that we want and then send a request to those links and get data from that so it's kind of a twostep process we send a request to that url it gives us some data on the different links we then send a request to one of those links and get the data that we actually want and a request is essentially our computer requesting information from a remote server we're going to send something called a get request which as it says requests information there's other type of requests like post requests put requests patch delete requests that do other types of stuff but that's kind of beyond the scope of this tutorial however before we can do all of that we need to go and install the request module now the way you do that is similar to how we installed curses before go to your terminal and type pip install and then request like that again if that doesn't work try pip three if that doesn't work try python hyphen m pip install otherwise you can watch those two videos that will be linked in the description and it should show you how to fix that but you need the request module installed if you're on windows and mac you do need to install this unlike curses it will not be installed by default and again just reminder try pip 3 in case that doesn't work and then you can try python hyphen m pip or python 3 hyphen anyways i have this installed so that's all working for me and let's now go in here and start writing some code so i'm going to say from requests import and we're going to import get and i'm going to say from and this is going to be print import and we're going to import the pretty printer like that i'll show you the pretty printer kind of a cool thing in python it's built in and it gives us a nice formatted output for json data then what we're going to do is have our base underscore url which is going to be equal to https colon slash slash and this is going to be data dot nba dot and then net okay this is the base url and then the endpoint is going to be the specific data that we want so i'm going to say all json is equal to and this is going to be slash prod slash v1 slash today.json and today.json is the original one we're looking at that gives us all those links now though we want to send a request to this link so the way we do that is we say our response because every time you send a request you get a response is equal to and we're going to say get we're going to say base url we're going to append this or we're going to concatenate this to all json so we'll have you know the full url built out and then we're going to have a look at what's known as the json of this so whenever you send a request here you have access to json again think of this as a python dictionary and now we can print all of that out however you're going to see if i print this with a print statement so let's try this here if i print the response then we get kind of this garbage in the terminal that's just impossible to read so instead of printing it using a regular print statement we're going to use a pretty printer really cool thing if you haven't seen this so to do this we're going to say printer is equal to pretty printer make sure you add your parentheses and then we can use the printer by saying printer dot and then p print so pretty print and we're going to print the response and really we should call this data because we're grabbing the data the json associated with so let's say data okay so let's run this and now notice that i get much nicer formatting here everything's kind of separated on different lines that's what we had before this is what we have now when we use the pretty printer so inside of here we can see that we have a bunch of links now these links give us access to all of these different things right so game book lead tracker mini box score whatever data it is that you want you pretty much get all of it so what we want is the current scoreboard because we want to get information about games that are currently going on or that are going to happen today so what i'm going to do is try to grab this current scoreboard key and get the link that's associated with it so the way i do this first of all is i need to access the links key right so that i can start looking at this dictionary then i need to access the let's have a look the current scoreboard so we'll do it step by step let me just close this terminal and let's do this so we have our data now we want to say links is equal to data at and then links and let's print this out so printer dot p print and then links okay so let's have a look at that and now when i print out the links we just get all of the links in here and now the link that i want is the current scoreboard so i'm going to grab the current scoreboard link so i'm going to copy that there and now i'm going to say that my scoreboard is equal to and this is going to be links and then we're going to paste in here the current scoreboard so now let's have a look at the scoreboard okay let's run this and notice here that this is the url so prod v1 2022 whatever scoreboard.json now that i have that as it was saying i need to send a request to this endpoint the endpoint is the slash after the base of the url so that i can get bad information so now that we have that we have the scoreboard url let's make a function here and let's say get underscore scoreboard okay let's put uh let's put this inside of here and we're just going to separate things to make it a bit cleaner i'm going to say define get underscore links okay and inside of here we're just going to return links and now what i'm going to do is rather than links i'm going to say get underscore links like that and then i'm going to access the current scoreboard so i've just made it so i can reuse this function here so it gets gets me all of the links sorry so now i get the links access the specific link that i want and now i'm going to send a request to that link so i'm going to say get and we're going to say base url and this time we're going to say plus scoreboard okay and we'll say that this is response and actually i guess we could just do data is equal to and then we can get the json and then again we can use the printer so printer.pprint and we can print out our data okay so now all we need to do is call the getscoreboard function so let's call that and what's going to happen now is it's first going to send a request to what was it to the old json url it's going to give us the links we're going to access current scoreboard then we're going to send a request to that get the data and print it out so let's clear this and let's run and notice that i get all kinds of data here right and this is kind of hard to read like there's a lot of stuff so it's difficult to look at what the keys are so what i like to do here to actually see how i can kind of traverse this data is i like to print out the keys because remember this is a python dictionary so since it's a dictionary what i can do is just grab all of the keys of the dictionary and then i can see what data i want to grab next so if i run this now and we scroll to the bottom notice that my keys are internal numb games and games so i probably want to access the games so let's clear that and just access the games for now so now i can go json and games and now let's have a look at what this data looks like so let's run this and notice again i get a bunch of stuff so now i probably want to have a look at uh the keys of this so let's say data dot keys okay let's run this and what does it say here a list object has no attribute keys okay so what that means sorry guys is that the games is a list of all of the different games so what i can do instead now is i can say 4 game in games because this is a list we just found that out and now i can simply print the game dot keys and just break and what that means is i'm just going to do this one time so i'm just grabbing you know the first game and printing out all of the keys associated with the game so i can view that so now let's run this okay and name games is not defined oh my apologies let's call this games not data okay let's clear the screen let's run and now i get all of these keys okay all of this information i have access to for every individual game and the games are games that are going to be happening today uh that that's what the games are so now i got to pick what information i want to display because i probably want to print out you know who's playing what the score of the game is uh you know what time is it is in the game that's the stuff i had before at least so i'll probably do the same here so we can kind of pick what we want but we have v team and we have h team those stand out to me as the visitor team and the home team we also have period and we should have clock so i think those are the four ones i want for right now so let's grab those so we're going to say home underscore team is equal to and this is going to be game at and then this is going to be h team right because that's the key we want to access and then i'm going to say i guess away team is equal to and not a team but v team and we can print out i guess the clock and the period as well we'll say clock is equal to game clock and we'll say period is equal to game period and now we don't need to use the pretty printer because we're just going to print these uh on one line and we will print an f string and we can say home team versus and then away team and then we might as well just print the clock and the period as well just have a look at what those are and then we'll continue from there okay clock and period so if you're unfamiliar with this in f string allows you to embed expressions directly inside of a string when they're in curly braces so i mean this is pretty intuitive but an f string only works in 3.6 plus so python 3.6 plus so i'm just putting the home team versus away team comma clock comma period just so i can see what those look like and i'm going to do that for every single game so just to separate these a bit then let's add a bit bit of a separator just so that we can see uh the difference in games that's clear let's run the code and notice that i get all of this data okay so for each team i have a team id a try code wins losses series wins siri losses i get a bunch of data right and then the score of those teams because i guess some of these games are actually happening right now so what i can do is print out the try code if i want to see you know the actual name of the team and then i could print out this score as well so let's try doing that now so for our home team that's fine now we're going to say home team and inside of here we'll say try code and for the away team same thing we'll say try code just to clean it up a little bit so let's run this now and see what we're getting in terms of the difference so now we notice we actually get the uh abbreviations for the team then we're looking at what was the next thing we're printing the clock okay so 44.1 is what's on the clock for this one and then we have the period and it says what the current period is for the games that are currently going on okay nice so let's get rid of clock and period so those are the teams next thing that i want to print is the score of each team right so i'm going to print f and then this is going to be the home team and not the tricode but the score this is the score in the current game and then we'll print the away team and the score as well and so now we get the teams that are playing as well as their scores in the game and then we can print the clock and period after that okay so let's clear let's run and notice here that we get i guess what is that chicago i don't know what these teams are but something 17 19 31 22 14 19 etc great and then here we're just getting a hyphen because these teams are not yet playing and zero zero i guess those guys just started okay continuing now we want to print the clock as well as the period so let's say print and we'll print f and i guess we'll go we should probably do should we do clock or period first let's go clock period and then we'll see what keys we have on those so let's run this okay and we get current so that's what we want to access for the period and then it looks like the clock just gives us a value so that's fine we can just grab the clock itself okay so let's go clock and then period and we want to get current like that okay let's run this again and now notice that we get 32.0 and then that's period one and then 142 period one 409 period one you guys can format this better i'm just giving you the basics obviously okay so that's what we wanted for getting the scoreboard now we also can get a bunch of other data and like i showed you we can get stats for the teams so they're points per game i guess their points allowed per game there's all these different stats i'm not a huge basketball guy i just thought this be cool but let's write one now that gives us the teams and we can view their stats and like i had before we will rank them based on points per game so to do this one we're going to want to look at get links again so let's not call get scoreboard let's call get links okay let's clear this and let's run the code and let's see what links we have for stats i didn't print sorry i need to print this let's print get links and actually we should probably use the printer to do this so printer.p print okay so let's have a look here and these are all the ones that we have now let me remember which one i was using i think it was league team stats yeah league team stats leaders okay this is the one that i want to get stats of course there's a lot of other ones so i'm going to copy that key and now we're going to write another function i'm going to call get underscore stats okay that's fine for now and i'm going to say stats is equal to and then this is going to be get underscore links and we're going to reference this right here the league team stats leaders okay then we will send a request so let's just copy this and rather than games i guess this is going to be teams and we'll have the base url plus the stats and then json and then we want to print out all those keys so we see what we have access to so let me take this in here and rather than get links we'll print out should really call this data so let's call this data okay now let's call getstats so get stats like that okay let's run this and let's see what we get and notice we get a lot of information okay i want to print out just the keys that's my bad i meant to do that so let's do dot keys and let's see what we actually get for that okay scroll down and we get league okay so that's the only key so let's access league so let's just put league here there's internal as well but we don't care about that that's some other data let's see what keys are associated with league so let's run that we have standard africa sacramento vegas utah i'm assuming we'd want just the standard league okay so let's grab standard okay let's run that and for the keys we have season year preseason regular season playoffs i'm assuming we probably want regular season but again you can change this if you want so let's now grab regular season let's print that and we only have the key teams okay so now let's grab teams and then this will be called teams let's see if there's any keys for teams so let's run this now and it says oh data is not defined so let's change this to the teams okay and rerun list object has an attribute keys okay so it's a list meaning that if we want to grab the keys for each team we can just do something like teams zero dot keys and if we have a look at this now we get all of these different pieces of information for the stats of each team so i can get the nickname the name the team id team code abbreviation min fgp tpp i don't know what a bunch of these mean but i know ppg is points per game so that's the one that we're going to use because i know what that means anyways those are the different keys we can get for each team so now we can loop through every single team and we can print out information for them so let's do that so let's say for team in teams and then we'll grab the names say name is equal to team name what else do we want i guess we'll get the id we'll say the id actually no i don't need the id we'll just go with name and i suppose we get the nickname as well nickname is equal to team nickname and let's go ppg is equal to team and then ppg okay and then let's just print for now we'll do an f string and we'll print the name the nickname and the points per game okay so let's have a look at this now let's clear and let's run and there we go okay so apparently we have a bunch of teams here that are not in the regular season or don't have a rank or something so we'll have to filter those out we'll do that in a second but for now we have the all the teams right so we have the name we have the nickname we can choose which one we want to use and then we get average and we get rank for points per game so this is where it gets a little bit more complicated i want to display these teams in the order of their rank right so i want rank 1 to be at the top and i guess rank 29 30 whatever to be at the very bottom but i also need to filter out these guys because i guess they're a bunch of teams that we don't really need in our data set i don't know why those are being returned to us so the first thing i'm going to do here is i'm going to filter all of the teams that have a name of team so the way i'm going to do that say teams is equal to filter i'm going to say lambda x i'll explain this in a second don't worry and i'm going to say x at team like this does not equal and then we're going to say team because anyone that had the name team was like a blank team that we didn't really need and then we'll do this on teams okay so what the filter function does is it will run a function against every single element in our teams in this case that's what we're passing and if the function returns true it will keep the element if the function returns false it will remove it so this is an anonymous function that's what a lambda function is this is our parameter essentially the function called x so i write lambda x and then i say colon x team does not equal team i'm saying let's grab whatever the team key is of every one of our dictionaries and if it is not equal to team then we will return true so like this expression returns true or false so if the function returns true we keep the element if it turns false we don't keep it hopefully that makes a bit of sense i can't really explain it more than that however when you have a filter function here it returns a filter object not a list so you just need to convert it to a list okay so now that we have that let's just run this again and you should see that all those kind of empty teams will be removed so let's run it and key error team oh sorry not team this needs to be name okay let's fix that let's rerun and there we go so now all the ones that had just team are removed now what we need to do though is sort our teams by their rank in their points per game so to do this we're going to say teams dot sort and we're going to say key is equal to and again we're going to put an anonymous anonymous function we're going to say lambda x and then this is going to be x p per g p g for points per game and then this is going to be rank like that and this is going to be int now this is going to sort in what is it ascending order so we're going to get rank 1 first rank 30th 30th last now the reason i'm doing this is because points per game is a dictionary containing the rank and the average i want the rank so i'm grabbing points per game rank for every team converting that to an int so then we sort it as an integer not as a string because notice these are string values right and that's that's how this works you can pass this key function and that's what you're going to sort every element by when you're sorting now let's run this and notice that we're going to have all the ranks in the correct order now of course i don't want to display you know this weird dictionary i'd prefer to display the following ppg and then avg like that for the average so now if we rerun this we get the average number of points that each team scores per game and we get them ranked from 1 to 30th lastly if one other touch here we could do the following i'm going to say i plus 1 dot and i'm going to say 4i comma team in enumerate teams and now it will say the rank beside each team so let's do that now and let's run and notice that now i get my rank and i also could have just done ppg at rank as opposed to doing i plus one but this works as well okay so that is going to wrap up this project let me quickly walk you through it so we start by defining the url that we're going to send our request to we had to import and install the request module we set up our pretty printer we have get links which gives us the link we're going to send our request to to get specific data we then have this function to get the scoreboard that is the games that are currently running uh and so we have current scoreboard we get the json we grab all the games associated with that for every single game because this is now a list we loop through we get the home team uh the visiting team the clock and the period and then we display this data and of course you can display this nicer you can get some more info i thought this was good enough for the tutorial then we have our get stats function inget stats is going to grab the league team stats leaders it's going to do the filtering it's going to do the sorting and it's going to go through and display all of the teams ranked by points per game so i just called get stats to run that you can call get scoreboard to run this you can run both of them you could write a little program that asks the user which one they want to run i'll leave that to you guys now we're going to move on to project number three all right so now we're moving on to project number three which is a currency converter now for this project we need to go to this website free.currencyconverterapi.com to get an api key that we can use with this api now this is a free api as it says in the name you are rate limited which means you have two requests or sorry 100 requests per hour you can do a maximum of two currency pairs when you're getting the exchange rates per request and you're allowed to go back one year in history now you can pay for a premium version of this obviously we don't need to do that for this tutorial though we just want to get the exchange rate data now this data is updated i believe every 60 minutes when you're on the free version i think if you go to the paid version you get it every minute or 60 seconds or something like that again it doesn't really matter for this tutorial anyways go to the website link in the description click on get your free api key enter your email it will send you the api key but make sure you verify your email because if you don't do that then it won't activate your api key anyways i already have my key and you don't want to share this with anyone of course it's the video i don't really care i'm going to have to share it with you but what i'm going to do is make a variable here in a new file called api key and i'm going to paste in my key which i'm just going to grab from my other screen now while we're at it we're going to paste in another variable here called base url now this is going to be equal to a different url than you just saw it is free.kerconv.com so that's the url we want to be sending our requests to for this project to get the uptodate currencies right okay then what we're going to do is say from request import get now if you were not following along with the previous project which is fine what you need to do is install requests so pip install request like that you can also try pip three install request and if that doesn't work try python hyphen m pip install lastly you can try python 3 hyphen m pip install if that doesn't work there is two videos linked in the description that will show you how to fix that command one for mac and one for windows okay now that we have that we're just going to import the pretty printer as well just so we can use that again we use this in the last videos sorry so from print not last video last project we are going to import the pretty printer okay so this api works a little bit differently than the last one we need to send what's known as some query parameters when we want to get some specific data and the first thing i'm going to do here is show you how we can get a list of all of the currencies and then how we display those currencies then we can get the exchange rates and all of that stuff for now though i'm going to set up a printer so i'm going to say printer is equal to pretty printer again if you weren't following with the last video then what this allows you to do is get some nicely formatted output for your json the json is essentially a python dictionary that's going to be returned to you when you send a request to a url okay so now that we have that let's get the currencies the way that we get the currencies is we say endpoint is equal to and then i need to copy this in so let me just copy this from other screen and this is going to be api v7 currencies and then question mark now this starts what's known as a query parameter a query parameter is essentially a parameter some data that you're going to send to the url and in this case what we need to add is our api key so we're using an f string available in python 3.6 and above we're embedding the api key directly in here and that's what's going to allow this to work if you don't have the api key then this won't be validated and you won't be able to send a request now let's actually do this in a function so i'm going to say define get currencies like that and we're going to say this is our endpoint and we're going to say that our url is equal to our base url plus our endpoint and then we're going to say that our data is equal to and this is going to be get we're going to send a get http request to this endpoint so we're going to say get url and then dot json like that and for now we're going to say printer dot p print standing for pretty print and we're going to print out the data and we'll just call the get currencies function okay so that's all we need for now to look at the currencies so let's run this uh and no module name request okay it needs to be request plural my apologies let's run this again and notice that we get all of our different currencies okay so when i have a look at what we're getting returned here we get a key that says results now again this is just a python dictionary that's the way you can think of it really it's json but we it gets read in as python dictionary so i can access this results key which is then going to give me a dictionary that has keys for every single currency and then the value of all those currencies is going to have an id a currency name and optionally a currency symbol so i want to be able to display that data to the screen so what i'm going to do here is from this function i'm going to return the data and then this is going to be at results like that and i'm also going to sort all of the results before i return them so i'm going to say that this is results okay i'm then going to say here data.sort so actually what i'm going to do here on a new line is i'm going to say data is equal to and then this is going to be the list of data dot items the reason i'm doing this is because data right now after i get results is going to be a dictionary as we can see i don't want it to be a dictionary i want it to be a list and the reason i want to be a list is so that i can sort it by the different currency names so i'm going to convert it into a list by getting all of the items the items will give me tuples that contain the key so that be the currency and then the dictionary associated with each currency then i'm going to sort this by default it will sort by the first item in python so i'll sort by the currency name and then i'm going to return my data like that so now i can say down here data is equal to get currencies and i can say printer.pprint and data and hopefully this will look a little bit cleaner now and it should be sorted so let's clear the screen let's run this and then notice we're getting tuples here right where it contains the currency i guess you could call it ticker and then the information associated with that currency and it's in alphabetical order based on i'm going to call it the ticker or the id whatever for the for the currency so now what we want to do is write a function that can display this in a much nicer format so we're going to say define print underscore currencies we're going to take in our currencies and we're going to loop through them and print them out so we have data there that's fine so now we're going to say for currency and then this will be well we should probably spell currency correctly so for currency in currencies uh we are going to grab the name of the currency so if we look here we see we have currency name we want the id and then potentially the currency symbol but not all of them have it so we're gonna have to write some code for that okay so let's say name is equal to and then it's going to be currency and i believe it's currency name and then we want the id so we're just going to say underscore id i don't want to use id because that's a builtin keyword in python and this is going to be currency actually no it's just going to be id okay and then the symbol will be so symbol is going to be equal to currency and then this is going to be dot get and we're going to try to get the currency symbol like that and if it does not return a symbol then we're just going to get an empty string so when you use dot get that will try to find this key in the dictionary if it exists it gives you the value otherwise it gives you the default value which is an empty string which i'm passing right here okay now that we have that we can print this out so we're just going to print an f string again and we'll have the id first because that's going to be the three letter symbol then we will have the name and then optionally we will have the symbol there okay hopefully that makes sense let's now call this so print underscore currencies let's pass our data and let's see what our output looks like here after i clear the screen okay let's run it and tuple indices must be in integers or slices not string my apologies guys so we're going to say for currency uh let's do this for name comma currency and currencies the reason we have to do this is because this is a list of tuples i forgot about that so now if i run this it should be good and there we go now we fix the problem so we can see that we get our little ticker currency if there's a symbol it will display the symbol if there's not a symbol then well we don't show it okay nice so now that we have that we want to write something that can get an exchange rate so i'm going to say define exchange underscore rate i guess like that and for the exchange rate we need two currencies that we want to get the rate for right so we're going to say currency one and currency two now these currencies are going to be the ids of the currencies we listed out so like cad usd whatever like the ids is what we need to pass to this function for this to work now the end point for this i'm just going to copy it in here is going to be the following endpoint is api v7 convert question mark q okay for query right we're going to say is equal to currency one and then notice this is underscore currency two so a little bit weird how this works but for this specific url you pass the first currency underscore the second currency and that's the pairing that you want to get information about now you can pass multiple pairings like i could do usd underscore cad here and it would give me both of the results now we're just going to do one at a time and then you say and compact equals ultra and api key equals api when you do compact ultra it gives you the most compact version where it's just going to give you the exchange rate and then of course you need your api key as well so we're going to embed that in this way hopefully that makes sense now we're going to send a request here so we're going to say url is equal to base url plus endpoint we're going to say response is equal to get url.json and sorry not.json we're going to say data data is equal to response.json and let's now just print this out so let's go printer.pprint and we're going to have to handle potential errors that can occur here if you pass invalid currencies so for now though we can comment this out and we can just call the exchange rate and let's pass this with usd and cad and it will give us the exchange rate between usd and cad not from cad to usd although i guess you could go both ways okay let's run this and notice that we get usd cad and it's 1.259025 looks about right and if we pass the second pairing it would have given us this key for whatever the second pairing was and then the value hopefully that is clear but that's what we're getting from that so what we need to do now is essentially check to make sure that this actually worked and the reason i'm saying that is because if i pass something like you know random string here and i run this notice that my data is empty because there was no pairing with that name so what i'm going to do here is i'm going to say if the len of data is equal to 0 then i'm just going to print out invalid currencies i guess we could just do i guess that doesn't really work we'll do invalid currencies and then we'll just return otherwise though we want to get the pairing and we're only going to have one pairing here in here one pairing here and here okay interesting how i said that but we're going to return data and then this is going to be dot items actually not items dot values and we're going to convert this to a list first of all because when you get the values it gives you kind of this special object and then we'll grab the zero with value and we can actually that's already a float so we don't need to convert that okay so let's now say rate is equal to that and then print rate okay and then this will be usd so what i'm doing is i have my endpoint right i have my url i'm getting my response i'm getting the data associated with that i'm saying if the line of data is is zero then print invalid currencies i also realized that we can just clean this up so let's just make this data like that now if the length is 0 that means well we didn't have a valid pairing so we print that out and we return otherwise though we're going to convert all of the values it's just going to be one value really to a list we're going to grab the zeroth element which will just give us whatever the rate is and then we can print that out here okay so let's run this and notice we get 1.259025 nice okay so now that we have gotten that uh maybe i want to add some output in here actually that tells me a bit nicer what the rate is so let's do that i'm going to say uh should not print i'll say rate is equal to this and we will return the rates but before i return the rate i'm just going to print out and we'll do an f string here and we will say that what is this going to be currency one okay to currency two is equal to rate i don't know if this is exactly the way that i would write this but i think that's fine like usd2 cad for example is this rate yeah you know what for now we're just going to go this uh we'll say is equal to that that's fine for me okay so let's just run this one more time and notice that i get usd to cad at one two five nine zero two five okay perfect that works for me now that we have that we're going to write one more that is going to take a dollar value and convert that dollar value uh to the other currency so we're going to utilize this function but i'm going to say define and then this is going to be i don't even know what i would call this here i guess convert and convert will take currency 1 currency 2 and an amount now in here we're going to say the rate is equal to exchange rate of currency 1 currency two i'm going to say if the rate is none so if we're returning from here meaning we had an invalid currency then we're just going to return we don't need to do anything otherwise though we're going to try to convert the amount that was passed here to a float so i'm going to say try and then i'm going to say amount is equal to float amount i'm going to say accept and then what i will do is say print invalid amount so if you pass like a string amount for example here something that i can't convert to a float i say invalid amount and then just return so that that way we don't have any issue when we try to do a multiplication which you're going to see in a second okay so we try that that doesn't work we say invalid amount otherwise we're going to say converted underscore amount is equal to and this is going to be rate multiplied by whatever the amount is right and then what we can do is print with an f string here and we can say uh let's say amount and then currency one and let's just say is equal to and then we'll say converted amount currency too okay and then just because we might as well just return the converted amount okay so now we have four functions get currencies print currencies exchange rate and convert so now what we want to do essentially is just write a program that keeps asking the user for a command and allows them to quit but they can type in a command and do whatever they want with the currency converter so i'm going to say define main inside of here i'm going to say currencies is equal to get currencies okay uh and then i will just print out like a little welcome message so welcome to the currency converter okay exclamation point and then we'll print the different commands so i'll say list lists the different currencies okay we'll say print and then this is going to be convert convert from one currency to another okay and then print we'll just call this rate get the exchange rate of two currencies okay now that we have that let's just do one empty print statement just there's a separator and that will say while true and we're going to ask them to enter a command so we'll say that command is equal to input and we'll say enter a command and we'll just say that they can type q to quit like that okay so now in here we're going to say actually first let's convert this to dot lower just so that we can check um even if they type something uppercase we'll still get the command so first we'll check if they quit so if command is equal to q uh we need two equal signs here then we can just break out of the while loop so let's break we'll say l if the command is equal to list then simple enough we can just print the currencies okay so print currencies like that that's all we need for list we'll say l if the command is equal to and then i guess we can handle convert then we need to ask the user for two currencies as well as an amount so we're going to get currency currency1 which is equal to input uh enter a currency name okay actually let's say id all right but we'll convert that ah actually we're going to convert it to dot upper not lower now let's copy this again so let's say that's currency two actually we'll say enter a base currency id enter a currency to convert to uh maybe we'll just do this i think this reads a bit better enter base currency enter currency to convert to and then we want one for amount so i guess i could have just written this from scratch we'll do this in between i'll say amount is equal to input enter an amount and then we'll say in and this will be in the base currency so we can say in and then currency one okay and well we don't really need to convert that to dot upper because it's going to be at a value once they do all of that then we can call our function which is convert and we can pass our values so we can say convert like that and we pass currency one currency two and amount okay lastly so we say l if the command is equal to rate then we just want to get the two currencies so let's grab currency one and currency two and let us call exchange rate so exchange rate of currency 1 and currency 2 and else we'll say print unrecognized command okay i think that is all we need now we need to of course call the main function okay let me zoom out a little bit just you guys can read a bit more so we have our main function we're getting all the currencies we're just printing a little welcome message and then we're running a while loop and we're saying while true we're going to ask them to enter a command cue to quit of course if they enter q we will break so we'll quit if they enter list we'll print the currencies if they enter convert we'll ask them for the information we need then we will convert and convert here we'll do everything we need and print out the output then we have our rate where we get our two currencies and same thing we get the exchange rate and that will handle printing out the output as well so i believe that's it let's run this though and test it out so run and welcome to the currency converter let's zoom in a bit here list convert and rate enter command so let's try list okay there we go list everything out let's try to do the rate and let's do usd and czar okay and gives us 14.944 okay let's now try was it exchange knows convert convert enter a base currency let's go usd uh enter an amount in usd let's go 1 000. let's go xof which is one i just saw up here west african cfa franc okay and there we go gives us the conversion nice now if i hit q i can quit and that is all the program needs to do all right so with that said i think i'm going to start wrapping up the video here that was three mini python projects for intermediate programmers not overly complicated not super simple you know short period of time but also allows you to create something kind of cool i think these programs are somewhat useful and definitely a good kind of introductory project something you can build on to and hopefully a good learning experience for you guys to understand how api works maybe you learned about the pretty printer or maybe you learned about the curses module whatever hopefully i give you guys some value in this video with that said i will give one last plug to programming expert if you guys want to get better at programming that is my programming course you can check it out from the link in the description use discount code tim if you guys enjoyed this video make sure to leave a like subscribe the channel and i will see you in another one you
