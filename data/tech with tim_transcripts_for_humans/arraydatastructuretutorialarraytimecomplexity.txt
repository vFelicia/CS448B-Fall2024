With timestamps:

00:00 - all right so let's talk about arrays
00:01 - most people are familiar with arrays but
00:03 - they don't actually know how they work
00:05 - on a deeper level and that's something
00:06 - that you really need to understand
00:07 - especially going into computer science
00:09 - background when you're gonna be picking
00:10 - different structures on how you can run
00:13 - something very quickly so we're rays
00:15 - let's talk about arrays well the first
00:17 - thing that most people notice when they
00:19 - look at arrays are the fact that they
00:21 - have a fixed size now typically this is
00:24 - seen as a massive disadvantage and
00:26 - inconvenience but there's a reason they
00:28 - have that and we're gonna talk about
00:29 - that in a second
00:30 - but essentially this fixed size means
00:32 - that when you create an array you need
00:33 - to pick before even starting the problem
00:36 - or using the array how big your array is
00:38 - gonna be now if you don't know this
00:40 - answer and you don't know how big it's
00:42 - gonna be how do you decide well that's
00:44 - typically when you might use a different
00:46 - structure but anyways that's something
00:48 - to note that you have to pick how big
00:49 - it's gonna be before you even you know
00:51 - create the array now the next thing with
00:54 - this fixed size is that if you you know
00:56 - say you create an array that's size 10
00:58 - and you now want to add an 11th item to
01:00 - it well you can't do that because
01:02 - there's no more room in the array so it
01:04 - can be filled up and another thing with
01:06 - this fixed size is that say you create
01:08 - an array and maybe you're like you know
01:10 - what I don't know how big I want this
01:11 - array to be but I'm gonna make it size
01:12 - 10,000 so that it's just massive enough
01:16 - that I don't have to worry about it well
01:18 - if you do that that's another really big
01:20 - disadvantage because what you've
01:22 - actually essentially done here is you've
01:24 - put a little slot of memory here and I'm
01:26 - just drawing like mock computer memory
01:28 - and you've said I'm gonna make sure that
01:30 - I have ten thousand spaces for items in
01:33 - my computer memory which means that
01:35 - you're actually locking up a ton of
01:37 - memory and this is known as a memory
01:38 - leak by creating such a massive array
01:41 - that you're not actually gonna use so
01:43 - when you only have a few items in a
01:44 - really large array that again is another
01:46 - disadvantage of an array because now
01:48 - you're using all of this space in memory
01:50 - that could have been used for something
01:51 - else now in modern day computing with
01:54 - people having sixty and 32 gigabytes of
01:56 - RAM in their machine that's not really a
01:57 - huge issue but still something to think
01:59 - about when using an array alright so now
02:01 - we've talked about a few disadvantages
02:02 - of it what's one of the advantages of an
02:05 - array well one of the advantages is the
02:07 - fact that you can index items now a lot
02:09 - of people take this for granted but we
02:12 - know that we're using a
02:13 - we can use something called indexes and
02:15 - we can look up any item in our array by
02:18 - simply knowing where it is and that
02:20 - position is being held in our computer
02:22 - memory because of this fixed size now
02:25 - when we look up an item this actually
02:28 - happens in what's known as constant time
02:30 - which is very fast as fast as you can do
02:32 - something in computing so because we
02:35 - have this fixed size in our memory let's
02:37 - say we have an array of size 5 so 1 2 3
02:40 - 4 5 5 squares and maybe these are items
02:43 - here like that now we know that the
02:47 - indexes go from 0 all the way up and if
02:50 - I want to look up any item all I have to
02:52 - know is where it is so like index 3 and
02:54 - I can grab that immediately as opposed
02:56 - to using something like a list that
02:58 - takes a lot longer to do that that's
03:00 - something to remember that indexing
03:01 - items in getting any random item takes
03:04 - oh one constant time
03:06 - now what about inserting deleting and
03:08 - removing items well let's look at how
03:10 - that works because it's not quite as
03:12 - fast now because of this fixed size in
03:15 - our memory if we want to insert an item
03:17 - this is actually quite computationally
03:20 - heavy let's say we have this array and
03:22 - we want to insert I don't know item 5 in
03:26 - between 7 & 9
03:27 - well to do this we actually need to
03:29 - shift every single item in our array
03:32 - past this point over and we might even
03:35 - have to remove the last element to make
03:38 - room for this new inserted array so when
03:41 - we do that it looks something like this
03:43 - we have the box
03:44 - 7 which is index 0 we now squish in our
03:47 - new index 5 sorry new item 5 which is
03:51 - index 1 and now all of these indexes
03:53 - need to be incremented by one and
03:55 - shifted over so 9 needs to go where 10
03:58 - is 10 needs to go where 11 is and 11
04:00 - needs to go where 12 is and 12 is well
04:02 - lost in emptiness it's gone forever
04:05 - right and that's what happens when we
04:06 - insert an item at least into a full
04:08 - array so that takes what's known as oh
04:11 - and time which is a long amount of time
04:14 - in computing based on how big the list
04:17 - is or how big the array is it's gonna
04:19 - continually take longer and longer to
04:21 - insert an item especially if that item
04:23 - is at the
04:23 - beginning of our list so once we answer
04:26 - that item that was a horrible box I'll
04:28 - redraw that one we have nine we have ten
04:32 - and we have eleven but these are now
04:34 - moved to new indexes so two three and
04:36 - four now let's look at the example of
04:39 - removing an item and this is the exact
04:41 - same problem we've ran into before let's
04:43 - say we want to remove item 10 we want to
04:45 - just get rid of it
04:46 - well to do that we now need to shift all
04:48 - the items after item 10 down by one so
04:51 - we can rewrite this entire array but we
04:54 - need to now switch forward to be index 3
04:57 - and replace the value of item 10 so now
04:59 - we have an array that ends up looking
05:01 - like this 7 5 9 11 and then an empty
05:07 - squared that has no value in it and what
05:09 - we've done here you've set 0 1 2 3 this
05:12 - is still index 4 but now we could call
05:13 - this null because we've just removed
05:15 - that last item from 11 so that is what
05:18 - happens when you're inserting and
05:20 - removing items so quick recap here of
05:22 - everything I've kind of covered arrays
05:23 - have a fixed size you need to decide how
05:26 - big you want your array to be before you
05:28 - start even creating and working on the
05:29 - problem if you make your array too big
05:31 - then you're gonna have a ton of room in
05:32 - memory that's just being wasted and
05:34 - that's a memory leak if you need to
05:36 - insert remove items that's gonna take
05:39 - you oh and time which is a long time for
05:42 - at least this structure to remove and
05:43 - add items and the only really advantage
05:46 - of using an array and when you should
05:48 - use it is if you're looking to randomly
05:50 - access items because that happens in oh
05:53 - one time which is faster than almost any
05:55 - other time that we can find now arrays
05:58 - do have their use especially if you're
05:59 - just looking for you know like a small
06:01 - quick thing to implement but you should
06:03 - definitely consider using something like
06:05 - a linked list or a doubly linked list if
06:07 - you're gonna be removing and adding
06:08 - items from the front and back of the
06:10 - array quite often even just inserting
06:13 - randomly is gonna be faster in some of
06:15 - those other structures because of the
06:17 - way that they're set up so just
06:18 - something to consider I hope you guys
06:19 - now know how quickly a razor on and kind
06:22 - of how they work in the computer's
06:23 - memory it's definitely an important
06:25 - thing to understand so if you guys
06:26 - learned something please make sure you
06:27 - hit a like and subscribe to the channel
06:29 - and with that being said I will see you
06:30 - guys and

Cleaned transcript:

all right so let's talk about arrays most people are familiar with arrays but they don't actually know how they work on a deeper level and that's something that you really need to understand especially going into computer science background when you're gonna be picking different structures on how you can run something very quickly so we're rays let's talk about arrays well the first thing that most people notice when they look at arrays are the fact that they have a fixed size now typically this is seen as a massive disadvantage and inconvenience but there's a reason they have that and we're gonna talk about that in a second but essentially this fixed size means that when you create an array you need to pick before even starting the problem or using the array how big your array is gonna be now if you don't know this answer and you don't know how big it's gonna be how do you decide well that's typically when you might use a different structure but anyways that's something to note that you have to pick how big it's gonna be before you even you know create the array now the next thing with this fixed size is that if you you know say you create an array that's size 10 and you now want to add an 11th item to it well you can't do that because there's no more room in the array so it can be filled up and another thing with this fixed size is that say you create an array and maybe you're like you know what I don't know how big I want this array to be but I'm gonna make it size 10,000 so that it's just massive enough that I don't have to worry about it well if you do that that's another really big disadvantage because what you've actually essentially done here is you've put a little slot of memory here and I'm just drawing like mock computer memory and you've said I'm gonna make sure that I have ten thousand spaces for items in my computer memory which means that you're actually locking up a ton of memory and this is known as a memory leak by creating such a massive array that you're not actually gonna use so when you only have a few items in a really large array that again is another disadvantage of an array because now you're using all of this space in memory that could have been used for something else now in modern day computing with people having sixty and 32 gigabytes of RAM in their machine that's not really a huge issue but still something to think about when using an array alright so now we've talked about a few disadvantages of it what's one of the advantages of an array well one of the advantages is the fact that you can index items now a lot of people take this for granted but we know that we're using a we can use something called indexes and we can look up any item in our array by simply knowing where it is and that position is being held in our computer memory because of this fixed size now when we look up an item this actually happens in what's known as constant time which is very fast as fast as you can do something in computing so because we have this fixed size in our memory let's say we have an array of size 5 so 1 2 3 4 5 5 squares and maybe these are items here like that now we know that the indexes go from 0 all the way up and if I want to look up any item all I have to know is where it is so like index 3 and I can grab that immediately as opposed to using something like a list that takes a lot longer to do that that's something to remember that indexing items in getting any random item takes oh one constant time now what about inserting deleting and removing items well let's look at how that works because it's not quite as fast now because of this fixed size in our memory if we want to insert an item this is actually quite computationally heavy let's say we have this array and we want to insert I don't know item 5 in between 7 & 9 well to do this we actually need to shift every single item in our array past this point over and we might even have to remove the last element to make room for this new inserted array so when we do that it looks something like this we have the box 7 which is index 0 we now squish in our new index 5 sorry new item 5 which is index 1 and now all of these indexes need to be incremented by one and shifted over so 9 needs to go where 10 is 10 needs to go where 11 is and 11 needs to go where 12 is and 12 is well lost in emptiness it's gone forever right and that's what happens when we insert an item at least into a full array so that takes what's known as oh and time which is a long amount of time in computing based on how big the list is or how big the array is it's gonna continually take longer and longer to insert an item especially if that item is at the beginning of our list so once we answer that item that was a horrible box I'll redraw that one we have nine we have ten and we have eleven but these are now moved to new indexes so two three and four now let's look at the example of removing an item and this is the exact same problem we've ran into before let's say we want to remove item 10 we want to just get rid of it well to do that we now need to shift all the items after item 10 down by one so we can rewrite this entire array but we need to now switch forward to be index 3 and replace the value of item 10 so now we have an array that ends up looking like this 7 5 9 11 and then an empty squared that has no value in it and what we've done here you've set 0 1 2 3 this is still index 4 but now we could call this null because we've just removed that last item from 11 so that is what happens when you're inserting and removing items so quick recap here of everything I've kind of covered arrays have a fixed size you need to decide how big you want your array to be before you start even creating and working on the problem if you make your array too big then you're gonna have a ton of room in memory that's just being wasted and that's a memory leak if you need to insert remove items that's gonna take you oh and time which is a long time for at least this structure to remove and add items and the only really advantage of using an array and when you should use it is if you're looking to randomly access items because that happens in oh one time which is faster than almost any other time that we can find now arrays do have their use especially if you're just looking for you know like a small quick thing to implement but you should definitely consider using something like a linked list or a doubly linked list if you're gonna be removing and adding items from the front and back of the array quite often even just inserting randomly is gonna be faster in some of those other structures because of the way that they're set up so just something to consider I hope you guys now know how quickly a razor on and kind of how they work in the computer's memory it's definitely an important thing to understand so if you guys learned something please make sure you hit a like and subscribe to the channel and with that being said I will see you guys and
