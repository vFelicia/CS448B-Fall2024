With timestamps:

00:00 - if you've ever worked on any AI
00:01 - application then chances are you've
00:03 - dealt with difficult documentation tons
00:05 - of trial and error lots of frustration
00:08 - getting your app to work and then once
00:10 - you actually get it working asking
00:12 - yourself how do I actually put this into
00:14 - production and use this in a way that's
00:16 - going to be scalable and can integrate
00:18 - with my application now in today's video
00:20 - I'm going to show you a platform that
00:21 - solves all of those issues lets you
00:24 - build applications super super quickly
00:26 - but better yet has them really
00:28 - automatically deployed for you and lets
00:30 - you integrate them with your apps
00:32 - seamlessly and that platform is called
00:34 - Vex they are the sponsor of this video
00:36 - but don't worry they are completely free
00:38 - and we're going to dive into building a
00:39 - full rag application with them starting
00:42 - right now so I've left a link in the
00:44 - description to the website that I'm on
00:46 - right now and you can simply go to it
00:47 - and sign up for a free account you don't
00:49 - need credit card details or anything
00:51 - like that now I'm going to show you a
00:52 - quick demo of what will be building in
00:54 - this video and you can see the power of
00:56 - using a platform like this to create
00:58 - your own custom AI app that it's really
01:00 - automatically deployed for you now the
01:02 - app that we're going to be building here
01:03 - is a rag based app that's meant to act
01:06 - as a travel assistant so for me I'm
01:08 - actually traveling all over the place
01:09 - for the next few months I have an
01:11 - itinerary and I have all of these
01:13 - different travel plans but they're kind
01:14 - of all over the place so what I thought
01:16 - is I'd build a simple application where
01:18 - I can give it access to all of my
01:20 - different travel information things like
01:22 - visas where I'm staying different
01:24 - flights Etc and then it would allow me
01:26 - to ask questions relevant to exactly
01:28 - what I'm doing so for for example I'm in
01:30 - Bali right now and I could ask it hey
01:32 - when am I leaving Bali or do I need to
01:34 - be aware of anything in Bali what should
01:36 - I go where should I go for dinner where
01:37 - should I go here Etc and it will know
01:39 - based on all my travel plans my
01:41 - accommodation Etc to give me a really
01:43 - relevant answer so let me show you a
01:45 - little bit about how this works and then
01:46 - we'll build it out so we start with a
01:48 - simple pipeline where we have a query
01:50 - just the user typing something in we
01:52 - then go to an llm for the llm we have a
01:54 - bunch of different options here I'm just
01:56 - using meta llama 3 and you can see that
01:58 - it says turn the question user ask below
02:00 - into a string of keywords that can be
02:02 - searched on Google then what it does is
02:04 - give me that string of keywords I then
02:06 - can go to a tool where actually search
02:08 - using dunk deck go search for
02:10 - information about what the user typed
02:12 - and then we can go to a vector store
02:13 - database where we can actually look up
02:15 - information from our various travel
02:17 - documents so itineraries accommodation
02:19 - flight tickets Etc and then we pass that
02:22 - all to a final llm that llm will have
02:25 - access to all of this information and it
02:27 - will act like a travel assistant and
02:29 - give us really good recommendations or
02:31 - answers based on the data it has access
02:33 - to so now that we've looked at that I'm
02:34 - just going to ask this a quick question
02:36 - so you can see how it works so I said
02:38 - hey can you tell me about my trip to
02:39 - Thailand and give me some
02:40 - recommendations on activities to do next
02:42 - month I'm going to Thailand I'm going to
02:44 - a few different places it's going to be
02:46 - able to see all the places I'm going
02:48 - when I'm flying there where I'm staying
02:50 - and then give me a personalized
02:51 - recommendation so you can see here it
02:53 - was able to find information about my
02:54 - various flights and where I'm staying
02:56 - and then give me personalized
02:58 - recommendations based on that now
02:59 - building out an app like this completely
03:01 - from scratch or using a framework like
03:03 - Lang chain would take a very long amount
03:05 - of time especially if you've never done
03:07 - this before meanwhile I was able to
03:09 - build this out in just a few minutes and
03:11 - I'm going to show you exactly how you
03:12 - can do the same and how to build
03:14 - something that's customized for your use
03:16 - case so with that said let's get into it
03:18 - all right so I'm on the dashboard of the
03:20 - Vex website here and to get to this page
03:22 - you just need to make a new account
03:23 - again it's completely free and the link
03:25 - is in the description now what we're
03:26 - going to do is start by creating a new
03:28 - project then I'll walk you through the
03:30 - platform a little bit show you how we
03:31 - upload our own data and then how we
03:33 - build up that pipeline you saw before
03:35 - which is really just going to take a few
03:36 - minutes so I'm just going to go here to
03:38 - create project and I'm actually going to
03:40 - use a template although we could build
03:42 - one on our own now what we'll do is
03:44 - we'll go to open source prompt with rag
03:47 - that's a template we can start with to
03:49 - use some open source models which are
03:50 - free now we can use closed Source models
03:52 - as well if we want to but in this case
03:54 - we're just going to use the open source
03:55 - ones now you'll see that it starts us
03:57 - off with a pretty simple rag based app
03:59 - rag is retrieval augmented generation
04:01 - and really all that means is that we're
04:03 - retrieving some information from a data
04:05 - set that we have access to and then
04:07 - injecting that into the model so that's
04:09 - where the vector database comes in that
04:11 - implements the rag component where it
04:13 - can actually go it can vectorize all of
04:15 - our data and it can really quickly look
04:16 - up similarities in data and pull that
04:19 - out and feed that to our model I have a
04:21 - bunch of videos on rag I'll link one on
04:23 - the screen right now if you want to
04:24 - learn more about it but for now let's
04:26 - build up this app so you see that we
04:27 - have a query we have a vector database
04:29 - and then we have an llm now what I want
04:31 - to do here is use an additional tool
04:33 - this tool is going to be the internet so
04:35 - we can actually get recommendations
04:37 - based on upto-date information and we
04:39 - can search for specific places that
04:41 - we're staying or going or whatever it
04:43 - may be so the basic pipeline that I want
04:45 - to walk us through is we're going to
04:46 - start with a query I then want to give
04:48 - this query to an llm and I want to tell
04:51 - the llm to create some different
04:52 - keywords that we could use to search on
04:54 - Google or on any search engine that we
04:56 - want this way we can take what could be
04:58 - a long prompt and we can convert it into
05:00 - something that would work well for a
05:01 - search engine we then can get those
05:03 - results back and later on we can pass
05:06 - that to a final llm as well as
05:08 - information relevant from our database
05:10 - of travel information or our itinerary
05:12 - so we have kind of a complete answer so
05:14 - it's going to go like this query llm llm
05:17 - is going to give us some keywords that's
05:19 - going to go and search a search engine
05:21 - we're then going to go to the vector
05:23 - database the vector database is where
05:25 - we're going to have all of our different
05:26 - itinerary flight details Etc we're going
05:28 - to get out whatever is relevant based on
05:30 - the users prompt we're then going to
05:32 - pass that as well as the results from
05:34 - the search engine to a final llm and
05:36 - that's going to give us a result so in
05:38 - order to do that let's just start with
05:39 - the query you can see that in order to
05:41 - send a query we can actually do this
05:43 - using an API endpoint we're going to
05:45 - look at that later on or we can just
05:46 - click on the playground tab here and we
05:48 - can mess with it in this visual editor
05:51 - next we have a vector database now the
05:53 - vector database will take some kind of
05:55 - input in this case it's the payload you
05:57 - can see the different variables down
05:59 - here and then it will return to us
06:01 - different information based on whatever
06:03 - the similar information was from the
06:05 - payload I'm not going to explain exactly
06:07 - how Vector databases work here but the
06:09 - idea is you put in some kind of search
06:10 - text and it will go in the database and
06:12 - find anything relevant to it now what we
06:14 - want to do is add some steps in between
06:16 - here where we're actually going to go to
06:18 - Google or another search engine in this
06:20 - case duck duck goo search and uh get out
06:22 - some results so I'm going to add an llm
06:24 - to start and what we need to do is give
06:26 - this a prompt and tell it hey convert
06:28 - whatever the payload is into some
06:30 - keywords so we can then use that in the
06:32 - next step so what I did here is just
06:33 - pasted in the prompt that I used before
06:36 - and it says turn the question the users
06:37 - ask below into a string of keywords that
06:39 - can be searched on Google to effectively
06:41 - find results about travel
06:43 - recommendations we then are able to use
06:45 - the payload notice that if you just
06:47 - click here so down on the variable it
06:49 - just automatically adds it in and we
06:51 - have access to any variables that have
06:52 - been used before us in the chain that
06:55 - we're writing so at this point we have
06:57 - access to the current date and time the
06:58 - chat history if we're keeping track of
07:00 - that and then the payload which is what
07:02 - the user actually asked or the question
07:04 - or prompt and then I said only provide
07:06 - the keywords nothing else and now we
07:08 - need to select our model now for
07:10 - something like this we can use a simple
07:11 - model the model I'll use will just be
07:13 - meta llama and then we'll go with 70
07:16 - billion but we will use a different
07:18 - model later on and you can see there's a
07:19 - bunch of different options here for the
07:21 - open source models so we're going to do
07:22 - that and also notice you could bring in
07:24 - your own llm if you want to do that
07:25 - again we're not going to do that for
07:27 - this video and now we have our llm next
07:30 - step is to go and actually search on
07:32 - duck. go search for these keywords and
07:34 - get some result back so what I'm going
07:36 - to do here is go to my tools and when I
07:38 - click on tools I have access to a bunch
07:40 - of different ones so I have basic math
07:42 - open Weather Wikipedia Etc we also have
07:45 - duck. go search so I'm going to click on
07:46 - duck. go search and now we're going to
07:48 - give this some input and the input we're
07:50 - going to give this is the action one
07:52 - output now the action one output is the
07:55 - variable from the previous step you can
07:56 - see kind of behind here it's labeled
07:58 - action one so whatever the llm gave us
08:01 - is stored in action one output and
08:02 - that's the kind of string of text or the
08:04 - keywords that we're going to search here
08:06 - and then get some result back so you can
08:07 - see it's quite simple to follow along
08:09 - here and just all of the different
08:10 - results are stored in variables which we
08:12 - can just click on to use okay so now we
08:14 - have our query llm tools and now we have
08:17 - the vector database now for the vector
08:20 - database to work we need to give it some
08:22 - data so let's look at that let's give it
08:24 - a few different pieces of data in this
08:25 - case it'll be our travel plans or
08:27 - itinerary and then we can move on so to
08:29 - do that we're going to click on manage
08:31 - data set here and it's going to bring us
08:33 - to a separate tab where we can upload
08:35 - some different files for our project so
08:37 - let me find a few different files I'll
08:39 - show you what they look like we can
08:40 - upload them here then they'll
08:42 - automatically get added to our data set
08:44 - all right so you can see here I have a
08:45 - notion document open and there's a bunch
08:47 - of different pages in this document that
08:49 - actually represent all of my different
08:50 - travel plans and my full itinerary now
08:53 - I'm not going to leak all of this to you
08:54 - because I don't want to expose
08:55 - everywhere I'm going all my flights Etc
08:58 - you can see here we have one page P Bali
09:00 - Indonesia I'm here from April 22nd to
09:02 - May 20th it shows my flights my
09:04 - accommodation is down below and what I'm
09:06 - going to do is simply go here and just
09:08 - export this as a PDF so if I go to
09:10 - export I can choose a bunch of different
09:12 - formats I'm just going to choose PDF and
09:14 - then I'll save to my downloads and then
09:16 - I can upload that to my Vector store
09:18 - database now this supports a ton of
09:20 - different file types you can use other
09:22 - things like text documents but PDFs are
09:24 - probably going to be the best so if you
09:26 - have different flight tickets if you
09:27 - have itineraries if you have booking
09:28 - confirmation emails whatever you want
09:31 - you can simply download those or export
09:33 - them as some kind of PDF and then upload
09:35 - them to this platform like I'm going to
09:37 - do right now now to add a new source
09:38 - here we'll simply click on ADD Source we
09:41 - go to select data source and notice
09:42 - there's a bunch of different options we
09:44 - have plain text upload a file page
09:46 - crawler this will actually go and scrape
09:48 - the HTML of a page which is pretty cool
09:51 - we have co- fluence Google Drive Etc
09:53 - Confluence are so I'm going to go to
09:55 - upload file and then what I can do is
09:57 - select the file I want to upload so let
09:59 - me find that and upload it all right so
10:01 - I uploaded a few different documents
10:03 - here these are just different notion
10:04 - pages that I had and what's actually
10:06 - going to happen is when we upload them
10:08 - they're automatically going to be parsed
10:09 - out by Vex and it's going to identify
10:12 - anything like tables or more advanced
10:14 - structures within the PDFs so we get a
10:16 - way better Vector search result when we
10:19 - actually start to look for information
10:21 - so in case you're not aware what will
10:22 - typically happen in a rag based app is
10:24 - we're going to take something like a PDF
10:26 - and we're going to chunk that out into a
10:28 - bunch of different text X strings or a
10:30 - bunch of different pieces of information
10:32 - and typically if you use just a normal
10:34 - parser it's not going to be able to
10:36 - identify something like a table or
10:38 - structured data inside of that PDF that
10:40 - you might want to keep together so
10:42 - what's going to happen here is we're
10:43 - going to use a more advanced parser
10:45 - automatically you don't need to enable
10:46 - it or anything it will just happen for
10:48 - you so it's going to keep that data
10:50 - together and just generally give you a
10:51 - much better result again I don't need to
10:53 - get into this a ton it's just kind of a
10:55 - nice perk of this platform that a lot of
10:57 - other platforms don't have regardless
10:59 - what we're going to do now is go back to
11:01 - our project so let's click on AI
11:03 - projects here and let's go into the one
11:05 - that we're working on I have two of them
11:07 - named the same thing so I should
11:08 - probably change the name here so in fact
11:10 - let's do that let's call this travel
11:14 - planner okay perfect and now let's
11:17 - continue with our pipeline so we have
11:19 - our llm our tools and our Vector
11:21 - database and for our Vector database
11:23 - let's just look at what we're passing in
11:25 - here so we're passing in the payload and
11:26 - then notice it has these three different
11:28 - files that it's going to be searching
11:30 - through now we can also pass in maybe
11:31 - the action one output if we wanted to
11:33 - give the keywords from the first llm but
11:35 - in my case I'm just going to stick with
11:37 - the key uh with payload sorry we then
11:39 - have top K now what top K is going to do
11:41 - is determine how many results it should
11:43 - return to us from the vector search so
11:46 - in my case I'm just going to bring this
11:48 - up to three but you can adjust this uh
11:50 - based on what might work best for your
11:52 - application and if you think you're
11:53 - going to have a lot of different results
11:55 - then you could make this be something
11:56 - like 6 7 8 Etc you're just going to take
11:59 - take in this case the three closest
12:01 - answers because we have top k equal to 3
12:05 - okay next thing we'll do here after our
12:07 - Vector database is we're going to go to
12:09 - our final llm and for this llm we need
12:11 - to write a prompt and give it all of the
12:14 - information it needs access to to be
12:16 - able to give us that final
12:17 - recommendation or that final answer so
12:20 - in the name of time I'm just going to
12:21 - paste in a prompt here that I've already
12:23 - written it's pretty basic and we can
12:24 - kind of walk through it and I'm also
12:26 - going to change the model here to be
12:28 - mistal 8 * 7 billion just because this
12:31 - one will perform better for this
12:33 - specific type of query okay so you can
12:35 - see here that it says you are a
12:36 - sophisticated AI travel assistant
12:38 - equipped with access to a vast Vector
12:40 - search database Your Role is to help
12:42 - users plan their Travels by providing
12:44 - personalized recommendations answering
12:46 - queries and assisting with itinerary
12:48 - planning based on their preference and
12:49 - past travel history then what we do is
12:52 - provide some additional information so
12:53 - it said you found the following
12:55 - information that could be helpful and
12:56 - that's action 3 output now that is
12:59 - coming from our Vector store database
13:01 - and we can see that because the vector
13:02 - database is labeled action three we then
13:05 - have here is some uh data from the
13:06 - internet and that's from action 2 output
13:09 - which is from our tool here which went
13:10 - to Duck Duck Go search and got us some
13:12 - results and we can give it additional
13:14 - information like the current date and
13:15 - time the chat history we could give it
13:17 - the original question if we want which
13:19 - is actually what we do down here and you
13:21 - can see that we can make this as advanc
13:23 - as we want and create kind of this
13:25 - prompt template now in our case uh the
13:27 - reason why we're using this I NST and
13:29 - this SLS and stuff is because this is
13:31 - how the prompt needs to be formatted for
13:33 - this mixt tral model but for different
13:36 - models you can use different types of
13:37 - prompt templating and to do that if you
13:39 - click here on the question mark you can
13:41 - see that will actually give you some
13:42 - documentation that explains how to write
13:45 - the prompt template based on the model
13:46 - you're using in our case again we're
13:48 - using mixl 8 * 7 billion okay so I'm
13:51 - going to save this and now what we can
13:53 - do is actually test this model out and
13:55 - see if it's working that's it we've
13:56 - built this entire AI application
13:59 - obviously it took a little bit longer
14:00 - because I was explaining it step by step
14:02 - but you can see in just a few minutes we
14:03 - have a full AI app so what I can do now
14:05 - is test this and I want to see if it's
14:07 - using my Vector search database so I'm
14:09 - going to say something like when am I
14:12 - going to Thailand question mark and it's
14:15 - going to go through this entire Pipeline
14:17 - and it's going to give me an answer and
14:18 - I'm going to show you how we can look at
14:20 - the logs and dive into the details of
14:22 - what's actually happening so here you go
14:24 - it says you're going to Thailand from
14:25 - May 27th to June 6th which is correct at
14:27 - least that's part of the time that I'm
14:28 - in Thailand and what I can do is go to C
14:32 - log and when I click on C log here it's
14:34 - going to bring me to this logs page and
14:36 - we can view all of the logs for this app
14:38 - so we can see that we have the timestamp
14:40 - identifier query output and then if I go
14:42 - into log detail here it will actually
14:45 - give me the thought process and show me
14:47 - what happened at every single step so
14:49 - you can see the first llm says please
14:51 - respond to the following question blah
14:52 - blah blah and that says Thailand travel
14:54 - dates planning okay that makes sense
14:56 - from what I asked here and then we go to
14:58 - our tool duck. go search where we do
15:00 - Thailand travel dates planning okay
15:02 - Thailand offers a diverse array of
15:03 - experiences blah blah blah gives us some
15:05 - information and then we go to the vector
15:07 - store database where it says when am I
15:09 - going to Thailand and it pulls up all of
15:11 - the different information of when I'm
15:12 - actually going to be in Thailand and
15:14 - where I'm going then we give that to the
15:16 - final llm and it gives us the result
15:18 - you're going to Thailand from May 27th
15:20 - to June 6th so there you go we built a
15:23 - full AI application in just a few
15:25 - minutes here obviously we can continue
15:26 - to test this fine-tune it and make it
15:28 - better but what I really want to show
15:30 - you now is how you can take this and
15:32 - actually use this now in a production
15:34 - environment one of the most challenging
15:36 - things is once you built the AI app okay
15:38 - how do you actually utilize it now and
15:40 - how do you allow maybe your website or
15:42 - other services you have to ingest this
15:44 - and actually make requests now this is
15:46 - automatically built into the platform
15:48 - and what you'll see is that if we go to
15:50 - the query here or we go to the output it
15:53 - actually shows us a way where we can
15:54 - send a request to this and get a result
15:57 - back so it's automatically hosted in the
15:59 - cloud as soon as we build a project like
16:01 - this we can enable or disable it using
16:04 - this kind of ticker that I have over
16:05 - here but if we want what we can do now
16:08 - is write some basic python code where we
16:10 - can send request to this app all we need
16:13 - to do is pass an API key which I'm going
16:14 - to show you how to get access to and
16:16 - then it will give us the result back in
16:18 - a way where we can just ingest it in our
16:20 - app so let's actually look at how we do
16:22 - that and the first step here is going to
16:24 - be to create an API key that we can give
16:26 - our code project it could be python
16:28 - JavaScript command line however we want
16:30 - to call this so I'm going to go create
16:32 - API key and I'm just going to go
16:34 - tutorial here and for the project I'm
16:37 - just going to give it access to the
16:38 - travel planner it's going to make that
16:40 - key for me so I can copy that now and
16:42 - now let's open up vs code and let's
16:44 - write a simple script that can actually
16:46 - send a request here and then get the
16:48 - result back in our python code so I just
16:50 - opened a new python file here and the
16:52 - first thing I'm going to do is just load
16:55 - in my API key so I'm going to say API
16:57 - key is equal to and I'm going to paste
16:59 - that right here now in order for this to
17:01 - work we are going to need the request
17:02 - module installed in order to install
17:05 - that you can simply go to your terminal
17:06 - and type pip install requests or pip
17:10 - three install requests and then you
17:11 - should be good to go I imagine most of
17:13 - you already have that installed so I'm
17:15 - going to write this pretty quickly
17:16 - because I'm just trying to demonstrate
17:17 - how this works but we're going to say
17:20 - that we have import requests I'm then
17:23 - going to import my Json let's zoom in a
17:25 - little bit we also want to spell
17:27 - requests correctly now now what we're
17:29 - going to do is have our URL which we'll
17:31 - copy in from the website in 1 second
17:33 - we're then going to create some headers
17:35 - now the headers are what we need to
17:36 - actually put our API key and to say that
17:38 - this is going to be Json Etc so we're
17:40 - going to say content type okay and this
17:44 - can be application SL Json we're then
17:47 - going to have our API key which I
17:50 - believe will be like this and then this
17:52 - is going to be api-key and then we're
17:55 - going to put our key in here using an
17:56 - FST string so I'm just going to say FST
17:58 - string and then API uncore key we're
18:01 - then going to have some data uh and this
18:03 - data is going to be a payload and this
18:06 - is going to be whatever the user types
18:08 - in so we can just say hey where am I
18:11 - going in Thailand and can you give me
18:15 - some
18:18 - recomendations okay so this is just like
18:19 - the prompt that you're going to be
18:21 - giving to the model so now that we have
18:23 - that what we can do is send a request so
18:25 - we're going to say that response is
18:27 - equal to request
18:29 - dopost we're going to send this to the
18:32 - URL again we're going to fill this in in
18:33 - one second we're going to pass our
18:35 - headers equal two headers and we're just
18:38 - going to say that Json is equal to our
18:41 - data and we'll print out what the result
18:43 - of this is in a second but we need to
18:44 - have the URL first so let's go back here
18:49 - and go to our AI projects okay let's go
18:52 - to our travel planner and let's get the
18:55 - information that we need so I'm going to
18:56 - click on query and you see it shows me
18:59 - the URL right here so let's copy that in
19:01 - okay we're going to go here and paste
19:03 - this and notice here that we have this
19:06 - channel token now the channel token is
19:08 - something that we can use to identify
19:09 - ourselves and we're keeping track of
19:11 - something like message history in this
19:13 - case we have an enabled message history
19:15 - so we can just make this whatever we
19:16 - want we can just do something like hello
19:18 - but really we would usually make this
19:20 - unique identifier or something that
19:22 - identifies our specific client user
19:24 - whatever anyways here we go we have the
19:27 - URL as is there anything else that we
19:29 - need let's go back here and have a look
19:31 - we have api-key API key it's kind of
19:34 - showing us a templated request here I
19:37 - believe just checking again that this
19:40 - looks good and what we should do now is
19:42 - just print out the response so what I
19:45 - can do is say print
19:47 - response. text and let's see if this
19:51 - actually works so let's run our code and
19:53 - give this a test all right so we got a
19:55 - result here you can see this a little
19:57 - bit difficult to read but it says hello
19:58 - based on the information I have you're
20:00 - going to puket at this time your flights
20:01 - are booked with this blah blah blah uh
20:04 - and you can see that it's kind of giving
20:05 - me this this whole result and telling me
20:07 - where I can actually go now I'm probably
20:08 - going to blur some of this out because
20:10 - it is a bit of a privacy concern uh but
20:12 - you can see that it is giving me a
20:13 - personalized result based on the
20:15 - information in the vector store database
20:18 - and we can make this better we could
20:19 - improve this code but the point is that
20:21 - we can actually send a request to an API
20:23 - endpoint and now all of a sudden this
20:25 - app we built in just a few minutes is
20:27 - pretty much live and we can use utilize
20:29 - it wherever we want so that's really all
20:31 - I have for you guys here I wanted to
20:32 - show you this really awesome platform
20:34 - that makes it super fast to build out
20:36 - these AI based apps massive thank you to
20:39 - them again for sponsoring this video
20:41 - definitely check them out from the link
20:42 - in the description and if you do end up
20:44 - using this quite a bit obviously you
20:46 - will eventually have a limit in terms of
20:48 - the number of queries that you can send
20:50 - and you can always upgrade your plans
20:51 - you can get access to more queries more
20:53 - tools Etc but even just using the free
20:55 - version is super powerful that's all I
20:57 - was using in this this video with that
20:59 - said I'm going to wrap it up I hope you
21:01 - enjoyed if you did leave a like
21:03 - subscribe and I will see you in the next
21:05 - one
21:07 - [Music]

Cleaned transcript:

if you've ever worked on any AI application then chances are you've dealt with difficult documentation tons of trial and error lots of frustration getting your app to work and then once you actually get it working asking yourself how do I actually put this into production and use this in a way that's going to be scalable and can integrate with my application now in today's video I'm going to show you a platform that solves all of those issues lets you build applications super super quickly but better yet has them really automatically deployed for you and lets you integrate them with your apps seamlessly and that platform is called Vex they are the sponsor of this video but don't worry they are completely free and we're going to dive into building a full rag application with them starting right now so I've left a link in the description to the website that I'm on right now and you can simply go to it and sign up for a free account you don't need credit card details or anything like that now I'm going to show you a quick demo of what will be building in this video and you can see the power of using a platform like this to create your own custom AI app that it's really automatically deployed for you now the app that we're going to be building here is a rag based app that's meant to act as a travel assistant so for me I'm actually traveling all over the place for the next few months I have an itinerary and I have all of these different travel plans but they're kind of all over the place so what I thought is I'd build a simple application where I can give it access to all of my different travel information things like visas where I'm staying different flights Etc and then it would allow me to ask questions relevant to exactly what I'm doing so for for example I'm in Bali right now and I could ask it hey when am I leaving Bali or do I need to be aware of anything in Bali what should I go where should I go for dinner where should I go here Etc and it will know based on all my travel plans my accommodation Etc to give me a really relevant answer so let me show you a little bit about how this works and then we'll build it out so we start with a simple pipeline where we have a query just the user typing something in we then go to an llm for the llm we have a bunch of different options here I'm just using meta llama 3 and you can see that it says turn the question user ask below into a string of keywords that can be searched on Google then what it does is give me that string of keywords I then can go to a tool where actually search using dunk deck go search for information about what the user typed and then we can go to a vector store database where we can actually look up information from our various travel documents so itineraries accommodation flight tickets Etc and then we pass that all to a final llm that llm will have access to all of this information and it will act like a travel assistant and give us really good recommendations or answers based on the data it has access to so now that we've looked at that I'm just going to ask this a quick question so you can see how it works so I said hey can you tell me about my trip to Thailand and give me some recommendations on activities to do next month I'm going to Thailand I'm going to a few different places it's going to be able to see all the places I'm going when I'm flying there where I'm staying and then give me a personalized recommendation so you can see here it was able to find information about my various flights and where I'm staying and then give me personalized recommendations based on that now building out an app like this completely from scratch or using a framework like Lang chain would take a very long amount of time especially if you've never done this before meanwhile I was able to build this out in just a few minutes and I'm going to show you exactly how you can do the same and how to build something that's customized for your use case so with that said let's get into it all right so I'm on the dashboard of the Vex website here and to get to this page you just need to make a new account again it's completely free and the link is in the description now what we're going to do is start by creating a new project then I'll walk you through the platform a little bit show you how we upload our own data and then how we build up that pipeline you saw before which is really just going to take a few minutes so I'm just going to go here to create project and I'm actually going to use a template although we could build one on our own now what we'll do is we'll go to open source prompt with rag that's a template we can start with to use some open source models which are free now we can use closed Source models as well if we want to but in this case we're just going to use the open source ones now you'll see that it starts us off with a pretty simple rag based app rag is retrieval augmented generation and really all that means is that we're retrieving some information from a data set that we have access to and then injecting that into the model so that's where the vector database comes in that implements the rag component where it can actually go it can vectorize all of our data and it can really quickly look up similarities in data and pull that out and feed that to our model I have a bunch of videos on rag I'll link one on the screen right now if you want to learn more about it but for now let's build up this app so you see that we have a query we have a vector database and then we have an llm now what I want to do here is use an additional tool this tool is going to be the internet so we can actually get recommendations based on uptodate information and we can search for specific places that we're staying or going or whatever it may be so the basic pipeline that I want to walk us through is we're going to start with a query I then want to give this query to an llm and I want to tell the llm to create some different keywords that we could use to search on Google or on any search engine that we want this way we can take what could be a long prompt and we can convert it into something that would work well for a search engine we then can get those results back and later on we can pass that to a final llm as well as information relevant from our database of travel information or our itinerary so we have kind of a complete answer so it's going to go like this query llm llm is going to give us some keywords that's going to go and search a search engine we're then going to go to the vector database the vector database is where we're going to have all of our different itinerary flight details Etc we're going to get out whatever is relevant based on the users prompt we're then going to pass that as well as the results from the search engine to a final llm and that's going to give us a result so in order to do that let's just start with the query you can see that in order to send a query we can actually do this using an API endpoint we're going to look at that later on or we can just click on the playground tab here and we can mess with it in this visual editor next we have a vector database now the vector database will take some kind of input in this case it's the payload you can see the different variables down here and then it will return to us different information based on whatever the similar information was from the payload I'm not going to explain exactly how Vector databases work here but the idea is you put in some kind of search text and it will go in the database and find anything relevant to it now what we want to do is add some steps in between here where we're actually going to go to Google or another search engine in this case duck duck goo search and uh get out some results so I'm going to add an llm to start and what we need to do is give this a prompt and tell it hey convert whatever the payload is into some keywords so we can then use that in the next step so what I did here is just pasted in the prompt that I used before and it says turn the question the users ask below into a string of keywords that can be searched on Google to effectively find results about travel recommendations we then are able to use the payload notice that if you just click here so down on the variable it just automatically adds it in and we have access to any variables that have been used before us in the chain that we're writing so at this point we have access to the current date and time the chat history if we're keeping track of that and then the payload which is what the user actually asked or the question or prompt and then I said only provide the keywords nothing else and now we need to select our model now for something like this we can use a simple model the model I'll use will just be meta llama and then we'll go with 70 billion but we will use a different model later on and you can see there's a bunch of different options here for the open source models so we're going to do that and also notice you could bring in your own llm if you want to do that again we're not going to do that for this video and now we have our llm next step is to go and actually search on duck. go search for these keywords and get some result back so what I'm going to do here is go to my tools and when I click on tools I have access to a bunch of different ones so I have basic math open Weather Wikipedia Etc we also have duck. go search so I'm going to click on duck. go search and now we're going to give this some input and the input we're going to give this is the action one output now the action one output is the variable from the previous step you can see kind of behind here it's labeled action one so whatever the llm gave us is stored in action one output and that's the kind of string of text or the keywords that we're going to search here and then get some result back so you can see it's quite simple to follow along here and just all of the different results are stored in variables which we can just click on to use okay so now we have our query llm tools and now we have the vector database now for the vector database to work we need to give it some data so let's look at that let's give it a few different pieces of data in this case it'll be our travel plans or itinerary and then we can move on so to do that we're going to click on manage data set here and it's going to bring us to a separate tab where we can upload some different files for our project so let me find a few different files I'll show you what they look like we can upload them here then they'll automatically get added to our data set all right so you can see here I have a notion document open and there's a bunch of different pages in this document that actually represent all of my different travel plans and my full itinerary now I'm not going to leak all of this to you because I don't want to expose everywhere I'm going all my flights Etc you can see here we have one page P Bali Indonesia I'm here from April 22nd to May 20th it shows my flights my accommodation is down below and what I'm going to do is simply go here and just export this as a PDF so if I go to export I can choose a bunch of different formats I'm just going to choose PDF and then I'll save to my downloads and then I can upload that to my Vector store database now this supports a ton of different file types you can use other things like text documents but PDFs are probably going to be the best so if you have different flight tickets if you have itineraries if you have booking confirmation emails whatever you want you can simply download those or export them as some kind of PDF and then upload them to this platform like I'm going to do right now now to add a new source here we'll simply click on ADD Source we go to select data source and notice there's a bunch of different options we have plain text upload a file page crawler this will actually go and scrape the HTML of a page which is pretty cool we have co fluence Google Drive Etc Confluence are so I'm going to go to upload file and then what I can do is select the file I want to upload so let me find that and upload it all right so I uploaded a few different documents here these are just different notion pages that I had and what's actually going to happen is when we upload them they're automatically going to be parsed out by Vex and it's going to identify anything like tables or more advanced structures within the PDFs so we get a way better Vector search result when we actually start to look for information so in case you're not aware what will typically happen in a rag based app is we're going to take something like a PDF and we're going to chunk that out into a bunch of different text X strings or a bunch of different pieces of information and typically if you use just a normal parser it's not going to be able to identify something like a table or structured data inside of that PDF that you might want to keep together so what's going to happen here is we're going to use a more advanced parser automatically you don't need to enable it or anything it will just happen for you so it's going to keep that data together and just generally give you a much better result again I don't need to get into this a ton it's just kind of a nice perk of this platform that a lot of other platforms don't have regardless what we're going to do now is go back to our project so let's click on AI projects here and let's go into the one that we're working on I have two of them named the same thing so I should probably change the name here so in fact let's do that let's call this travel planner okay perfect and now let's continue with our pipeline so we have our llm our tools and our Vector database and for our Vector database let's just look at what we're passing in here so we're passing in the payload and then notice it has these three different files that it's going to be searching through now we can also pass in maybe the action one output if we wanted to give the keywords from the first llm but in my case I'm just going to stick with the key uh with payload sorry we then have top K now what top K is going to do is determine how many results it should return to us from the vector search so in my case I'm just going to bring this up to three but you can adjust this uh based on what might work best for your application and if you think you're going to have a lot of different results then you could make this be something like 6 7 8 Etc you're just going to take take in this case the three closest answers because we have top k equal to 3 okay next thing we'll do here after our Vector database is we're going to go to our final llm and for this llm we need to write a prompt and give it all of the information it needs access to to be able to give us that final recommendation or that final answer so in the name of time I'm just going to paste in a prompt here that I've already written it's pretty basic and we can kind of walk through it and I'm also going to change the model here to be mistal 8 * 7 billion just because this one will perform better for this specific type of query okay so you can see here that it says you are a sophisticated AI travel assistant equipped with access to a vast Vector search database Your Role is to help users plan their Travels by providing personalized recommendations answering queries and assisting with itinerary planning based on their preference and past travel history then what we do is provide some additional information so it said you found the following information that could be helpful and that's action 3 output now that is coming from our Vector store database and we can see that because the vector database is labeled action three we then have here is some uh data from the internet and that's from action 2 output which is from our tool here which went to Duck Duck Go search and got us some results and we can give it additional information like the current date and time the chat history we could give it the original question if we want which is actually what we do down here and you can see that we can make this as advanc as we want and create kind of this prompt template now in our case uh the reason why we're using this I NST and this SLS and stuff is because this is how the prompt needs to be formatted for this mixt tral model but for different models you can use different types of prompt templating and to do that if you click here on the question mark you can see that will actually give you some documentation that explains how to write the prompt template based on the model you're using in our case again we're using mixl 8 * 7 billion okay so I'm going to save this and now what we can do is actually test this model out and see if it's working that's it we've built this entire AI application obviously it took a little bit longer because I was explaining it step by step but you can see in just a few minutes we have a full AI app so what I can do now is test this and I want to see if it's using my Vector search database so I'm going to say something like when am I going to Thailand question mark and it's going to go through this entire Pipeline and it's going to give me an answer and I'm going to show you how we can look at the logs and dive into the details of what's actually happening so here you go it says you're going to Thailand from May 27th to June 6th which is correct at least that's part of the time that I'm in Thailand and what I can do is go to C log and when I click on C log here it's going to bring me to this logs page and we can view all of the logs for this app so we can see that we have the timestamp identifier query output and then if I go into log detail here it will actually give me the thought process and show me what happened at every single step so you can see the first llm says please respond to the following question blah blah blah and that says Thailand travel dates planning okay that makes sense from what I asked here and then we go to our tool duck. go search where we do Thailand travel dates planning okay Thailand offers a diverse array of experiences blah blah blah gives us some information and then we go to the vector store database where it says when am I going to Thailand and it pulls up all of the different information of when I'm actually going to be in Thailand and where I'm going then we give that to the final llm and it gives us the result you're going to Thailand from May 27th to June 6th so there you go we built a full AI application in just a few minutes here obviously we can continue to test this finetune it and make it better but what I really want to show you now is how you can take this and actually use this now in a production environment one of the most challenging things is once you built the AI app okay how do you actually utilize it now and how do you allow maybe your website or other services you have to ingest this and actually make requests now this is automatically built into the platform and what you'll see is that if we go to the query here or we go to the output it actually shows us a way where we can send a request to this and get a result back so it's automatically hosted in the cloud as soon as we build a project like this we can enable or disable it using this kind of ticker that I have over here but if we want what we can do now is write some basic python code where we can send request to this app all we need to do is pass an API key which I'm going to show you how to get access to and then it will give us the result back in a way where we can just ingest it in our app so let's actually look at how we do that and the first step here is going to be to create an API key that we can give our code project it could be python JavaScript command line however we want to call this so I'm going to go create API key and I'm just going to go tutorial here and for the project I'm just going to give it access to the travel planner it's going to make that key for me so I can copy that now and now let's open up vs code and let's write a simple script that can actually send a request here and then get the result back in our python code so I just opened a new python file here and the first thing I'm going to do is just load in my API key so I'm going to say API key is equal to and I'm going to paste that right here now in order for this to work we are going to need the request module installed in order to install that you can simply go to your terminal and type pip install requests or pip three install requests and then you should be good to go I imagine most of you already have that installed so I'm going to write this pretty quickly because I'm just trying to demonstrate how this works but we're going to say that we have import requests I'm then going to import my Json let's zoom in a little bit we also want to spell requests correctly now now what we're going to do is have our URL which we'll copy in from the website in 1 second we're then going to create some headers now the headers are what we need to actually put our API key and to say that this is going to be Json Etc so we're going to say content type okay and this can be application SL Json we're then going to have our API key which I believe will be like this and then this is going to be apikey and then we're going to put our key in here using an FST string so I'm just going to say FST string and then API uncore key we're then going to have some data uh and this data is going to be a payload and this is going to be whatever the user types in so we can just say hey where am I going in Thailand and can you give me some recomendations okay so this is just like the prompt that you're going to be giving to the model so now that we have that what we can do is send a request so we're going to say that response is equal to request dopost we're going to send this to the URL again we're going to fill this in in one second we're going to pass our headers equal two headers and we're just going to say that Json is equal to our data and we'll print out what the result of this is in a second but we need to have the URL first so let's go back here and go to our AI projects okay let's go to our travel planner and let's get the information that we need so I'm going to click on query and you see it shows me the URL right here so let's copy that in okay we're going to go here and paste this and notice here that we have this channel token now the channel token is something that we can use to identify ourselves and we're keeping track of something like message history in this case we have an enabled message history so we can just make this whatever we want we can just do something like hello but really we would usually make this unique identifier or something that identifies our specific client user whatever anyways here we go we have the URL as is there anything else that we need let's go back here and have a look we have apikey API key it's kind of showing us a templated request here I believe just checking again that this looks good and what we should do now is just print out the response so what I can do is say print response. text and let's see if this actually works so let's run our code and give this a test all right so we got a result here you can see this a little bit difficult to read but it says hello based on the information I have you're going to puket at this time your flights are booked with this blah blah blah uh and you can see that it's kind of giving me this this whole result and telling me where I can actually go now I'm probably going to blur some of this out because it is a bit of a privacy concern uh but you can see that it is giving me a personalized result based on the information in the vector store database and we can make this better we could improve this code but the point is that we can actually send a request to an API endpoint and now all of a sudden this app we built in just a few minutes is pretty much live and we can use utilize it wherever we want so that's really all I have for you guys here I wanted to show you this really awesome platform that makes it super fast to build out these AI based apps massive thank you to them again for sponsoring this video definitely check them out from the link in the description and if you do end up using this quite a bit obviously you will eventually have a limit in terms of the number of queries that you can send and you can always upgrade your plans you can get access to more queries more tools Etc but even just using the free version is super powerful that's all I was using in this this video with that said I'm going to wrap it up I hope you enjoyed if you did leave a like subscribe and I will see you in the next one
