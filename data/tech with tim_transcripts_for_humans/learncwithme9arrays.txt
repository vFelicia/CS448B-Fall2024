With timestamps:

00:00 - hello everybody and welcome to another c
00:02 - plus plus tutorial for beginners
00:04 - now in this video i'm going to be
00:06 - discussing arrays now an array is a way
00:08 - to store multiple elements in the same
00:11 - variable or in the same kind of
00:12 - container or memory location
00:15 - they are extremely important and well
00:16 - you will learn more about them in this
00:18 - video so let's
00:19 - dive in
00:22 - [Music]
00:28 - so the first thing i want to say as we
00:29 - get into this video is that a list is
00:32 - not the same as an array so if you're
00:33 - coming from another programming language
00:35 - and you've used lists before really
00:37 - you've used anything that has the dot
00:39 - append method on it or dot push method
00:41 - or something like that
00:42 - please make sure you are not mixing up
00:44 - what you know previously from other
00:45 - programming languages with what i'm
00:47 - going to show you right here
00:48 - which is an array now they are very
00:50 - similar a list in an array but they also
00:52 - have some very important differences and
00:53 - i just want to make sure that's very
00:55 - clear
00:55 - now if you've never programmed before or
00:57 - you've i guess never gotten this far in
00:59 - programming for this is your first
01:00 - series that you're following along with
01:02 - you've never heard of an array or a list
01:03 - before don't worry i will explain them
01:05 - to you here
01:06 - and you can kind of ignore what i just
01:08 - said but just for anyone coming from
01:09 - another language
01:10 - please make sure you really pay
01:11 - attention here because an array is
01:12 - different
01:13 - from a list so anyways what is an array
01:16 - well an array is really a data structure
01:19 - and that's a really a fancy word of
01:21 - something that allows us to store
01:22 - multiple values that
01:24 - allows us to store multiple values
01:26 - that's what an array does
01:27 - so rather than having to define say five
01:30 - different variables if we wanted to
01:31 - store five numbers
01:32 - we can actually define an array and this
01:34 - array can store all of those five
01:36 - numbers for us
01:37 - so an array kind of looks like this it's
01:39 - squiggly brackets
01:41 - at least in c plus and other programming
01:43 - languages it's square brackets
01:45 - and inside of these squiggly brackets
01:47 - you have a series of elements
01:49 - now an element is really just a value of
01:52 - some data type
01:53 - so it could be an int it could be a
01:54 - float it could be a bool it could be a
01:55 - string it could be a char
01:57 - but in an array all of your elements all
01:59 - of the things inside of them are going
02:00 - to be of the same types they're all
02:02 - going to be int
02:03 - they're all going to be float all going
02:04 - to be bool whatever it may be
02:06 - but here's an example of a really
02:08 - straightforward array we have 1 2 3 as
02:11 - the elements of our array
02:13 - so what this allows us to do is store
02:15 - these three numbers
02:16 - in the order that we have them in so we
02:18 - can maintain that 1 comes before 2
02:20 - 2 comes before 3 and all of that and
02:22 - then what we can actually do here with
02:23 - this array
02:24 - and i'll show you how we do all this
02:25 - obviously is we can access each of these
02:28 - individual values or each of these
02:30 - individual elements
02:31 - so let's say i want to change this value
02:33 - right here i can fully do that that's
02:35 - totally fine
02:36 - i can also change all of the values in
02:37 - the array the one thing that i cannot do
02:40 - though
02:40 - is once i define an array i cannot
02:42 - change the number of elements that are
02:44 - inside of it
02:45 - so i'm going to show you all this i know
02:47 - this is i'm getting a little bit ahead
02:48 - of myself here
02:49 - but whenever you create an array you
02:51 - need to decide
02:52 - the size of the array that you are going
02:54 - to create and once you define that size
02:56 - once you say this array is going to have
02:58 - four elements five elements 27 elements
03:00 - whatever it may be
03:01 - you cannot change that size if you
03:04 - wanted to say increase the size of the
03:06 - array
03:06 - what you would actually need to do is
03:08 - make a new array and you would need to
03:09 - copy the values from your previous array
03:12 - into the new array that then has a
03:14 - larger or smaller size depending on what
03:16 - you're doing
03:16 - anyways hopefully this isn't confusing
03:18 - you too bad i'm just giving you a high
03:19 - level overview before we jump in here
03:21 - i want to show you now how we create an
03:23 - array so the first thing we need to do
03:25 - when we are
03:26 - defining an array is we need to pick
03:28 - what type the array is going to store
03:30 - so this is a little bit confusing
03:32 - because an array itself is a data type
03:34 - like an array
03:35 - is a valid data type but inside of an
03:37 - array
03:38 - we have elements in those elements of
03:39 - our a type so we need to pick what type
03:42 - this array is going to be
03:43 - in this case i'm going to say int so
03:45 - just like you would declare any other
03:46 - variable
03:47 - you just define the type of it so in
03:49 - this case it's going to be int
03:50 - then the name of it and then when you
03:52 - want to make this an array data type
03:54 - you put two square brackets after the
03:57 - name of the variable
03:58 - so in this case i have int arr standing
04:01 - for array
04:02 - and then two square brackets and then i
04:03 - can do an equal sign and i'll kind of
04:05 - code out the rest of this in a second
04:07 - so this is saying we're defining an
04:08 - array this array is going to store
04:10 - ins now if i change this to char what
04:12 - i've done is define
04:13 - a char array this is because i have char
04:15 - here this is an array and so this array
04:17 - is going to store characters
04:19 - if i change this to string same thing
04:21 - this is now a string array
04:23 - so let's make it ins because this is the
04:24 - most straightforward and now what i need
04:26 - to do is inside of these square brackets
04:29 - i need to define the size of my array so
04:32 - i need to pick
04:32 - in one way or another i'll show you the
04:34 - other ways we can do this how large my
04:36 - array is going to be
04:37 - is it going to have 10 elements 5
04:39 - elements 4 elements how many is going to
04:40 - be inside of it
04:41 - so in this case i'll just say five you
04:44 - need to decide for yourself
04:45 - and note that once you decide this you
04:47 - cannot change it later on
04:48 - it's not a huge deal there's ways around
04:50 - this that i'll show you in later videos
04:51 - but just want to be very clear you
04:53 - cannot increase or decrease the size of
04:55 - an array
04:56 - now it's also worth noting that if i had
04:57 - say some value here
04:59 - like in x equals 5 i could fully put x
05:02 - inside of here and that would mean that
05:03 - my array is now going to be size 5
05:05 - because the variable x
05:06 - stores the value 5. that is totally
05:08 - valid to do
05:09 - and you'll notice like if you kind of
05:11 - experiment with stuff like this you can
05:12 - do all kinds of things that you might
05:14 - not expect
05:14 - especially if you've never programmed
05:16 - before i could even do something like
05:18 - array and then you know x plus 1 and
05:20 - this now is going to be size 6.
05:21 - so anyways i'll leave x in there just
05:23 - for example purposes and then after we
05:25 - do this we have two
05:26 - options here we can just declare the
05:28 - array like this we can say okay we're
05:29 - going to initialize what's known as an
05:31 - empty array or an array that just
05:33 - doesn't really have any defined values
05:35 - in it yet
05:36 - that is of a size 5. or what we can do
05:39 - is we can actually pick the elements
05:41 - that we want to go inside of this array
05:43 - so if we decide to not pick then we can
05:44 - just do this and we've now declared an
05:46 - array
05:47 - we've told the compiler hey allocate
05:48 - some room in our computer's memory
05:50 - to store these different elements or we
05:53 - can actually define the elements inside
05:54 - by putting these two scroll
05:56 - squiggly brackets and then defining the
05:58 - different elements that we have
05:59 - so in this case i've created an array of
06:01 - size five and it has the elements one
06:03 - two three
06:04 - four five now if i tried to do something
06:06 - like 6
06:07 - this would be an error the reason this
06:09 - would be an error is because
06:10 - we cannot change the size of this array
06:12 - which we've already defined to be size
06:14 - 5. by adding this element 6 here that
06:16 - just it doesn't make sense we can't have
06:18 - 6 elements
06:19 - in an array that's only supposed to have
06:21 - five so this is how you define an array
06:23 - we've now created an array
06:25 - now it's also worth noting that when you
06:27 - define an array in this way and you
06:28 - actually pick the elements that are
06:29 - going to be inside of it
06:31 - you do not need to explicitly desi
06:33 - defined sorry the size of the array
06:35 - so right here i've kind of gone a little
06:36 - bit overkill i've said all right the
06:38 - size of the array is five
06:40 - and then i've defined an array that has
06:41 - five elements but c plus plus is
06:43 - actually smart enough to know
06:45 - that if you just leave the square
06:46 - brackets like this and you don't
06:47 - actually put a size inside of here
06:50 - but you do actually declare the elements
06:52 - in your array
06:53 - it's able to just count how many
06:55 - elements are here and automatically
06:56 - create an array of that size so now i
06:58 - can do any number of elements that i
07:00 - want
07:00 - and c plus plus will what's called i
07:02 - believe infer
07:04 - the size it's either imply or for i i
07:06 - always forget which the meaning of those
07:07 - are
07:08 - uh but i believe it will infer the size
07:10 - of this array by
07:11 - looking at the size that you've defined
07:13 - right here so we'll just make this array
07:15 - size 6. now there's one more kind of
07:17 - sneaky notation here that c plus plus
07:19 - has
07:19 - you actually don't need the equal sign
07:21 - you can write it just like this
07:23 - i don't know exactly why c plus plus has
07:25 - this but this is the exact same thing as
07:27 - having the equal sign
07:28 - in so just figured i'd show that to you
07:30 - like these are completely equivalent
07:31 - having the equal sign or not having the
07:33 - equal sign
07:33 - now there's a lot of rules here i
07:34 - apologize we'll get into some more
07:36 - interesting stuff
07:36 - in a second but if you decide to not
07:39 - actually uh define the elements in the
07:41 - array
07:41 - then it is required that you add the
07:43 - size of the array i cannot just do this
07:46 - this is invalid
07:47 - i do need to tell c plus and c plus plus
07:49 - in one way or another what the size of
07:50 - the array is going to be
07:52 - so if i say int r a r r and then of size
07:55 - x
07:55 - and we just do this so it makes it equal
07:56 - to 2 3 4 5 and 6.
07:59 - what i can do now is show you how we can
08:01 - actually access elements
08:02 - in this array first of all though let me
08:05 - actually show you what happens when we
08:06 - just print out arr so c
08:08 - out arr let's go here to the compiler
08:11 - let's
08:12 - compile and let's run and notice we get
08:15 - some random gibberish
08:16 - showing right here so why is this the
08:18 - case well this array right here
08:21 - what this really is is this is a
08:23 - location in our computer's memory
08:25 - in our computer's ram right so whenever
08:27 - you run a program
08:28 - like this like c plus plus program your
08:31 - program is loaded into your computer's
08:33 - memory
08:33 - and when you define an array what
08:35 - happens is you're saying okay
08:37 - i want somewhere in my computer's memory
08:39 - these elements to be stored or i want to
08:40 - allocate space
08:42 - for this array so when you just print
08:44 - out arr like this
08:45 - what it's actually giving you here is
08:47 - the memory location
08:49 - of this array now this doesn't really
08:51 - have to mean anything to you
08:52 - but this is kind of where in your
08:54 - computer's memory this array is actually
08:56 - stored
08:57 - so you can't actually just print out
08:59 - like all of the elements in the array as
09:01 - you might expect at least
09:02 - not in this way so if you want to access
09:05 - specific elements from the array i'm
09:06 - going to show you how we can do that
09:08 - so obviously it makes sense that we have
09:09 - these five values here we want to be
09:11 - able to access each of them i want to do
09:13 - something with the elements in this
09:14 - array
09:15 - so there's something called positions or
09:17 - indices of elements in our array
09:20 - now the indices or indexes start as
09:22 - following
09:23 - we have index 0 which is the first
09:25 - element in our array
09:26 - so if i want to access the very first
09:28 - element in my array
09:29 - what i actually do is i write the name
09:31 - of my array i write my square brackets
09:34 - and then i write the position or the
09:36 - index of the element i would like to
09:37 - access
09:38 - in this case element zero what this says
09:40 - is give me the first
09:42 - element that is in the array i know it
09:44 - seems counterintuitive but computers
09:45 - kind of always start counting at zero
09:47 - so we would get element two here when we
09:49 - use index zero
09:51 - then the second element is going to be
09:52 - index one
09:54 - the third element's gonna be index two
09:56 - fourth
09:57 - three fifth four and then i guess
10:00 - six would be five although we cannot use
10:03 - an index five here because
10:04 - we're trying to access an element that
10:06 - does not exist right
10:08 - if i try to access position five that's
10:10 - trying to get the sixth element in this
10:12 - array
10:12 - this array only has five elements in it
10:15 - and so this is gonna lead to some kind
10:16 - of strange behavior
10:18 - which i will show you later on so we
10:19 - will continue in one second but i need
10:21 - to quickly thank the sponsor of this
10:22 - video and this series which is alco
10:24 - expert
10:25 - algo expert is the best platform to use
10:27 - from preparing for your software
10:28 - engineering coding
10:29 - interviews they have the highest quality
10:31 - coding interview practice questions with
10:32 - over 140 of them
10:34 - on the platform with that said check out
10:36 - algo expert from the link in the
10:37 - description and use the code tech with
10:38 - tim for a discount on the platform
10:41 - anyways let me just show you here when i
10:42 - do array and then at index 0
10:44 - this is going to access for me the first
10:47 - element which is 2. so it actually gives
10:49 - me this element 2
10:50 - like that all right so let's uh change
10:53 - this now to just be
10:54 - say position 2 or index 2. now a little
10:57 - quiz for you which
10:58 - element is this going to print out when
11:00 - i run this program
11:02 - give it a guess okay so let's compile
11:05 - let's run and we get four the reason we
11:08 - get four
11:08 - is because we're accessing the second
11:10 - position which really is the third
11:12 - element
11:12 - in the array now a little bit of a trick
11:15 - here if you want to access the last
11:17 - element in the array
11:18 - this is always the size of the array
11:20 - minus one
11:21 - index so if your array has size five
11:24 - the last index in the array is always
11:26 - that size minus one which in this case
11:28 - would be
11:28 - four so that's how you access the
11:30 - different elements that are inside of
11:32 - the array
11:33 - now if you want to change elements in an
11:34 - array you can do this as well
11:36 - so i can access say the very first
11:39 - element
11:39 - and i can change this to be say 10. so
11:42 - now what happens after i add my
11:44 - semicolon here
11:44 - is i say all right array at position 0
11:47 - or at index 0
11:48 - i want to change this to be the value
11:50 - 10. so now if i print out array at
11:52 - index 0 you're going to see as it would
11:54 - make sense
11:55 - that this now is going to be well value
11:58 - 10. so that's how you access and i guess
12:01 - change the elements in
12:02 - an array awesome now let me show you
12:05 - what happens when we define
12:06 - an array but we do not give it the
12:08 - unique elements right so if i just
12:10 - define an array and i say this is of
12:12 - size 5 what happens now when i print out
12:15 - the different indices
12:17 - of this array so if i say c out array 0
12:20 - and then i'm just going to
12:21 - kind of copy this down here this isn't
12:22 - the best way to do this but for now this
12:24 - makes sense
12:25 - let's print out all the different
12:26 - indices and let's do our kind of
12:28 - end l at the end of all these probably
12:31 - should have done that beforehand but
12:34 - it's okay so end l and
12:37 - l okay so what do you think is going to
12:39 - print out just give it a guess you
12:40 - probably will have no idea but let's
12:42 - compile the program and let's see what
12:44 - we get
12:44 - again notice we didn't give the array
12:46 - its elements already we just initialized
12:48 - that we have an array of size
12:49 - five so compile and run and notice we
12:52 - get some completely random values
12:54 - printing out here
12:55 - so this is kind of what happens in c
12:56 - plus plus when you do not define what is
12:58 - being stored in
12:59 - let's just call it a container or in a
13:02 - memory location
13:03 - you're just going to get a bunch of
13:04 - random gibberish you have no idea what's
13:05 - going to be printing out
13:07 - there's no way for me to tell you why
13:09 - exactly we got these values
13:10 - it's just because at this point in time
13:12 - this is what is stored at
13:14 - this location that we're trying to
13:15 - access in our computer's memory
13:17 - you don't really have to understand this
13:18 - the whole point is to realize that if
13:20 - you do not initialize the values of the
13:22 - array
13:22 - you have no idea what is going to be
13:24 - stored in it so just keep that in mind
13:26 - right
13:26 - now even same thing here let's see what
13:28 - happens when i try to access a position
13:30 - in the array
13:31 - that actually doesn't exist so i try to
13:33 - access say position seven
13:34 - obviously our array is only size five so
13:36 - there is no index seven
13:38 - when i try to do this let's see what
13:40 - happens let's compile let's run again we
13:42 - get some random value i can't tell you
13:44 - why we're getting that
13:45 - all i can tell you is that when you try
13:47 - to do this you get something completely
13:48 - unexpected that you cannot predict
13:51 - so hopefully that's somewhat clear that
13:52 - is how you access the elements that is
13:54 - how you change the elements
13:55 - and that is what happens when you kind
13:57 - of create an array but you do not give
13:59 - it the actual values inside of it
14:01 - now of course once we've defined the
14:03 - array like this what i can do is i can
14:05 - say well ar
14:07 - is equal to and then i can set it equal
14:09 - to whatever array that i want
14:10 - that has five elements inside of it so i
14:12 - could say one two
14:14 - oops let's get our commas right two
14:15 - three four five
14:17 - and then if i see out here arr at and
14:20 - let's just go index
14:21 - four let's see what happens so let's
14:23 - compile
14:25 - and oh what is it saying right here uh
14:27 - error assigning to an array from an
14:29 - initializer list
14:31 - okay so it's actually a good error to
14:32 - run into this is something that i didn't
14:34 - see when i was looking at arrays before
14:35 - doing this video
14:36 - so apparently you actually cannot do
14:38 - what i just tried to tell you that you
14:39 - could do
14:40 - what this is saying is that you cannot
14:42 - assign to an array from an initializer
14:44 - list so this is what you call an
14:45 - initializer list
14:47 - don't worry about all the fancy names
14:48 - and it's saying that since we've already
14:50 - declared this array
14:52 - we've said that we have this array i now
14:54 - cannot set the array equal to
14:56 - and then this kind of array right here i
14:59 - cannot do that it's not allowed in c
15:00 - plus plus so if i did this right define
15:03 - the array in this way and then i want to
15:04 - set all of its elements the way that i
15:06 - would have to do it is by looking at
15:07 - each of the specific
15:09 - indexes so if i want to set my array
15:12 - to have say one two three four five as
15:14 - its different elements
15:15 - i would actually have to do the
15:16 - following i would have to say array zero
15:18 - is equal to one and then array one
15:21 - is equal to two and then so on and so
15:23 - forth i'm not gonna do all of them but
15:25 - i'll show you now that we will get
15:27 - element one when i actually kind of
15:29 - declare or set the elements in this way
15:31 - so
15:32 - let's compile let's run and see we do
15:36 - get
15:36 - one now obviously uh this is not this
15:39 - doesn't make too much sense to do it
15:40 - this way right like this is no better
15:42 - than just declaring a bunch of different
15:43 - variables we still have to write all of
15:44 - this code
15:45 - to set all of the elements for our ray
15:48 - now i'm going to show you in the next
15:49 - video kind of some
15:50 - tricks to do this a lot faster right now
15:52 - we just don't have all the tools that we
15:53 - need
15:54 - to really make perfect use of an array
15:56 - but i wanted to show them to you before
15:58 - because then when i go into the next
15:59 - videos you'll see why the things that
16:01 - i'm showing you are like really
16:02 - important if that makes any sense
16:04 - but anyways that's kind of the idea
16:05 - behind an array so there's a few more
16:06 - things i'm going to show you with an
16:08 - array
16:08 - and the first thing that i want to do
16:10 - here is just actually define a new array
16:12 - so let's make this 4
16:13 - 5 4 5 6 7. let's also make an array
16:18 - that's like a string array so let's say
16:19 - string
16:20 - arr2 and then this can be equal to or we
16:24 - can do it in this notation we can say
16:25 - tim
16:27 - and then comma is and then great
16:30 - just to show you that we can have an
16:31 - array like this we also could have an
16:34 - array that has float values
16:35 - so float er 3 equals
16:38 - or we could just do it this way as well
16:40 - 1.1
16:41 - 1.2 maybe negative 0.9
16:44 - whatever it may be you can define arrays
16:46 - in this way okay so sorry for the abrupt
16:48 - cut i forget what i said before i made
16:50 - the cut here so i'm just going to
16:50 - quickly say yes
16:51 - we can define arrays of all different
16:53 - types you can see examples here that
16:55 - i've written
16:56 - anyways what i want to show you now is
16:57 - how you get the size of an array
16:59 - if you're coming from another
17:00 - programming language you may think this
17:02 - is very trivial very easy to do in a lot
17:04 - of programming languages you can use
17:05 - something called dot size
17:07 - or dot length to actually get the size
17:09 - or the length of the array the way that
17:11 - you do this is you would write the name
17:12 - of the array in this case maybe
17:13 - arr or ar2 or air r3 then you just do
17:16 - dot size or dot
17:18 - length or sometimes there's a function
17:20 - say in python you have this function
17:21 - called len
17:22 - that gives you the length of whatever
17:24 - structure you pass to
17:25 - now in c suppose is not so easy c plus
17:27 - plus makes things a little bit more
17:29 - difficult
17:29 - now to get the size of an array is kind
17:33 - of a two-step process
17:34 - there is this function in c plus plus
17:36 - called size up
17:37 - now notice it's kind of highlighting a
17:39 - fancy color when i write it now what
17:41 - sizeof does
17:42 - is give you the size in bytes of an
17:45 - array
17:45 - now bytes when i say bytes this is like
17:48 - how much
17:48 - room on your computer this array is
17:50 - actually taking up it's not the number
17:52 - of elements in the array it is quite
17:54 - literally the size of this array
17:56 - in memory like how many bytes are being
17:58 - used
17:59 - now the only good thing about this
18:00 - though is that if we know the size of
18:02 - the array in total we know the number of
18:04 - bytes that are being used
18:06 - if we're able to figure out how many
18:07 - bytes are being used for
18:09 - one element in the array we can actually
18:11 - figure out how many elements are in the
18:13 - array
18:13 - so typically when you want to get the
18:15 - size or the length of an array
18:16 - you're asking for the number of elements
18:18 - in the array that's what you want to
18:19 - know
18:20 - so in c plus plus if you want to get
18:21 - this what you can do is you can say
18:23 - something like co
18:24 - and then size of and then you can say
18:26 - arr so this is actually the array right
18:29 - the array object
18:30 - and then you can divide this by the size
18:34 - of
18:34 - one of the elements in the array so if
18:36 - you know the array has at least one
18:38 - element
18:39 - you can say all right well the size of
18:40 - array divided by the size of array
18:43 - and then this is going to be at index 0.
18:46 - so this tells you the size of the very
18:48 - first
18:48 - element and the size of the first
18:50 - element is how much
18:52 - all of the other elements take up as
18:53 - well so all of the other elements will
18:55 - have the exact same amount of space or
18:57 - exact same number of bytes that are
18:58 - being used by them
19:00 - so by simply dividing the size of the
19:02 - entire array by one of the elements
19:04 - this tells you how many elements are in
19:06 - the array now there's a few other ways
19:08 - to determine the size as well but
19:09 - they're a little bit beyond the scope of
19:11 - this
19:11 - tutorial right here i don't want to get
19:12 - into anything too confusing so i'm not
19:14 - going to cover them
19:16 - but let's quickly just run this here and
19:18 - see what we get and we get
19:19 - 4 right so the reason we get 4 is
19:21 - because the size of this one element is
19:24 - something the size of this entire array
19:25 - is something we do the division and
19:27 - since the size of all the elements is
19:28 - the exact same
19:29 - we know we have four elements just some
19:31 - basic math now let's just see out
19:33 - actually the size of just the array so
19:36 - we can kind of see what's happening here
19:37 - and let's see out the size of the array
19:39 - at
19:40 - index or position zero so let's go here
19:43 - let's compile let's run and oops i
19:46 - didn't mean to i didn't want to do them
19:48 - beside each other let's do this again
19:49 - okay
19:50 - and l and
19:53 - and l okay let's try this now clear
19:57 - compile run we get 16 4 and then
20:00 - four so this is perfect this is exactly
20:02 - what we wanted this is telling us
20:04 - that the size of our right is 16 number
20:07 - of bytes that it's using
20:08 - the number of bytes that one element is
20:10 - using is four
20:12 - and so we have four elements in the
20:14 - array now let's just see what happens if
20:15 - we add a very large number
20:18 - as the first element in our array let's
20:19 - see if this still works
20:21 - i want to compile and run and notice we
20:25 - still get
20:25 - the exact same thing so it uses four
20:27 - bytes to represent an integer
20:29 - so hopefully that kind of makes sense i
20:30 - can understand this part might be a
20:32 - little bit confusing especially if
20:33 - you've never programmed before
20:34 - again size and bytes you want to figure
20:36 - out the number of elements you take the
20:38 - size
20:38 - in bytes of the array and then divide it
20:40 - by the size in bytes of
20:42 - any number or any element story of the
20:44 - array that tells you the number of
20:45 - elements that are in it
20:47 - so i think that's all i really wanted to
20:49 - show you for
20:50 - arrays again just keep in mind there's
20:52 - many different ways to define and
20:54 - declare them
20:54 - whenever you create an array you cannot
20:56 - change the size of that array i cannot
20:58 - add another element into this array i
21:00 - would need to create a new one
21:02 - um you can change the value of positions
21:05 - in the array
21:06 - and arrays start indexing at zero so the
21:08 - very first element is zero
21:10 - then one then two then three again the
21:12 - trick is the number of elements in the
21:14 - array
21:14 - minus one is the very last index or
21:16 - position that you can access in
21:18 - the array so hopefully this was
21:20 - informative hopefully you guys learned
21:21 - something from this if you did make sure
21:22 - you may like
21:23 - subscribe to the channel and i will see
21:24 - you in another youtube video
21:34 - you

Cleaned transcript:

hello everybody and welcome to another c plus plus tutorial for beginners now in this video i'm going to be discussing arrays now an array is a way to store multiple elements in the same variable or in the same kind of container or memory location they are extremely important and well you will learn more about them in this video so let's dive in so the first thing i want to say as we get into this video is that a list is not the same as an array so if you're coming from another programming language and you've used lists before really you've used anything that has the dot append method on it or dot push method or something like that please make sure you are not mixing up what you know previously from other programming languages with what i'm going to show you right here which is an array now they are very similar a list in an array but they also have some very important differences and i just want to make sure that's very clear now if you've never programmed before or you've i guess never gotten this far in programming for this is your first series that you're following along with you've never heard of an array or a list before don't worry i will explain them to you here and you can kind of ignore what i just said but just for anyone coming from another language please make sure you really pay attention here because an array is different from a list so anyways what is an array well an array is really a data structure and that's a really a fancy word of something that allows us to store multiple values that allows us to store multiple values that's what an array does so rather than having to define say five different variables if we wanted to store five numbers we can actually define an array and this array can store all of those five numbers for us so an array kind of looks like this it's squiggly brackets at least in c plus and other programming languages it's square brackets and inside of these squiggly brackets you have a series of elements now an element is really just a value of some data type so it could be an int it could be a float it could be a bool it could be a string it could be a char but in an array all of your elements all of the things inside of them are going to be of the same types they're all going to be int they're all going to be float all going to be bool whatever it may be but here's an example of a really straightforward array we have 1 2 3 as the elements of our array so what this allows us to do is store these three numbers in the order that we have them in so we can maintain that 1 comes before 2 2 comes before 3 and all of that and then what we can actually do here with this array and i'll show you how we do all this obviously is we can access each of these individual values or each of these individual elements so let's say i want to change this value right here i can fully do that that's totally fine i can also change all of the values in the array the one thing that i cannot do though is once i define an array i cannot change the number of elements that are inside of it so i'm going to show you all this i know this is i'm getting a little bit ahead of myself here but whenever you create an array you need to decide the size of the array that you are going to create and once you define that size once you say this array is going to have four elements five elements 27 elements whatever it may be you cannot change that size if you wanted to say increase the size of the array what you would actually need to do is make a new array and you would need to copy the values from your previous array into the new array that then has a larger or smaller size depending on what you're doing anyways hopefully this isn't confusing you too bad i'm just giving you a high level overview before we jump in here i want to show you now how we create an array so the first thing we need to do when we are defining an array is we need to pick what type the array is going to store so this is a little bit confusing because an array itself is a data type like an array is a valid data type but inside of an array we have elements in those elements of our a type so we need to pick what type this array is going to be in this case i'm going to say int so just like you would declare any other variable you just define the type of it so in this case it's going to be int then the name of it and then when you want to make this an array data type you put two square brackets after the name of the variable so in this case i have int arr standing for array and then two square brackets and then i can do an equal sign and i'll kind of code out the rest of this in a second so this is saying we're defining an array this array is going to store ins now if i change this to char what i've done is define a char array this is because i have char here this is an array and so this array is going to store characters if i change this to string same thing this is now a string array so let's make it ins because this is the most straightforward and now what i need to do is inside of these square brackets i need to define the size of my array so i need to pick in one way or another i'll show you the other ways we can do this how large my array is going to be is it going to have 10 elements 5 elements 4 elements how many is going to be inside of it so in this case i'll just say five you need to decide for yourself and note that once you decide this you cannot change it later on it's not a huge deal there's ways around this that i'll show you in later videos but just want to be very clear you cannot increase or decrease the size of an array now it's also worth noting that if i had say some value here like in x equals 5 i could fully put x inside of here and that would mean that my array is now going to be size 5 because the variable x stores the value 5. that is totally valid to do and you'll notice like if you kind of experiment with stuff like this you can do all kinds of things that you might not expect especially if you've never programmed before i could even do something like array and then you know x plus 1 and this now is going to be size 6. so anyways i'll leave x in there just for example purposes and then after we do this we have two options here we can just declare the array like this we can say okay we're going to initialize what's known as an empty array or an array that just doesn't really have any defined values in it yet that is of a size 5. or what we can do is we can actually pick the elements that we want to go inside of this array so if we decide to not pick then we can just do this and we've now declared an array we've told the compiler hey allocate some room in our computer's memory to store these different elements or we can actually define the elements inside by putting these two scroll squiggly brackets and then defining the different elements that we have so in this case i've created an array of size five and it has the elements one two three four five now if i tried to do something like 6 this would be an error the reason this would be an error is because we cannot change the size of this array which we've already defined to be size 5. by adding this element 6 here that just it doesn't make sense we can't have 6 elements in an array that's only supposed to have five so this is how you define an array we've now created an array now it's also worth noting that when you define an array in this way and you actually pick the elements that are going to be inside of it you do not need to explicitly desi defined sorry the size of the array so right here i've kind of gone a little bit overkill i've said all right the size of the array is five and then i've defined an array that has five elements but c plus plus is actually smart enough to know that if you just leave the square brackets like this and you don't actually put a size inside of here but you do actually declare the elements in your array it's able to just count how many elements are here and automatically create an array of that size so now i can do any number of elements that i want and c plus plus will what's called i believe infer the size it's either imply or for i i always forget which the meaning of those are uh but i believe it will infer the size of this array by looking at the size that you've defined right here so we'll just make this array size 6. now there's one more kind of sneaky notation here that c plus plus has you actually don't need the equal sign you can write it just like this i don't know exactly why c plus plus has this but this is the exact same thing as having the equal sign in so just figured i'd show that to you like these are completely equivalent having the equal sign or not having the equal sign now there's a lot of rules here i apologize we'll get into some more interesting stuff in a second but if you decide to not actually uh define the elements in the array then it is required that you add the size of the array i cannot just do this this is invalid i do need to tell c plus and c plus plus in one way or another what the size of the array is going to be so if i say int r a r r and then of size x and we just do this so it makes it equal to 2 3 4 5 and 6. what i can do now is show you how we can actually access elements in this array first of all though let me actually show you what happens when we just print out arr so c out arr let's go here to the compiler let's compile and let's run and notice we get some random gibberish showing right here so why is this the case well this array right here what this really is is this is a location in our computer's memory in our computer's ram right so whenever you run a program like this like c plus plus program your program is loaded into your computer's memory and when you define an array what happens is you're saying okay i want somewhere in my computer's memory these elements to be stored or i want to allocate space for this array so when you just print out arr like this what it's actually giving you here is the memory location of this array now this doesn't really have to mean anything to you but this is kind of where in your computer's memory this array is actually stored so you can't actually just print out like all of the elements in the array as you might expect at least not in this way so if you want to access specific elements from the array i'm going to show you how we can do that so obviously it makes sense that we have these five values here we want to be able to access each of them i want to do something with the elements in this array so there's something called positions or indices of elements in our array now the indices or indexes start as following we have index 0 which is the first element in our array so if i want to access the very first element in my array what i actually do is i write the name of my array i write my square brackets and then i write the position or the index of the element i would like to access in this case element zero what this says is give me the first element that is in the array i know it seems counterintuitive but computers kind of always start counting at zero so we would get element two here when we use index zero then the second element is going to be index one the third element's gonna be index two fourth three fifth four and then i guess six would be five although we cannot use an index five here because we're trying to access an element that does not exist right if i try to access position five that's trying to get the sixth element in this array this array only has five elements in it and so this is gonna lead to some kind of strange behavior which i will show you later on so we will continue in one second but i need to quickly thank the sponsor of this video and this series which is alco expert algo expert is the best platform to use from preparing for your software engineering coding interviews they have the highest quality coding interview practice questions with over 140 of them on the platform with that said check out algo expert from the link in the description and use the code tech with tim for a discount on the platform anyways let me just show you here when i do array and then at index 0 this is going to access for me the first element which is 2. so it actually gives me this element 2 like that all right so let's uh change this now to just be say position 2 or index 2. now a little quiz for you which element is this going to print out when i run this program give it a guess okay so let's compile let's run and we get four the reason we get four is because we're accessing the second position which really is the third element in the array now a little bit of a trick here if you want to access the last element in the array this is always the size of the array minus one index so if your array has size five the last index in the array is always that size minus one which in this case would be four so that's how you access the different elements that are inside of the array now if you want to change elements in an array you can do this as well so i can access say the very first element and i can change this to be say 10. so now what happens after i add my semicolon here is i say all right array at position 0 or at index 0 i want to change this to be the value 10. so now if i print out array at index 0 you're going to see as it would make sense that this now is going to be well value 10. so that's how you access and i guess change the elements in an array awesome now let me show you what happens when we define an array but we do not give it the unique elements right so if i just define an array and i say this is of size 5 what happens now when i print out the different indices of this array so if i say c out array 0 and then i'm just going to kind of copy this down here this isn't the best way to do this but for now this makes sense let's print out all the different indices and let's do our kind of end l at the end of all these probably should have done that beforehand but it's okay so end l and l okay so what do you think is going to print out just give it a guess you probably will have no idea but let's compile the program and let's see what we get again notice we didn't give the array its elements already we just initialized that we have an array of size five so compile and run and notice we get some completely random values printing out here so this is kind of what happens in c plus plus when you do not define what is being stored in let's just call it a container or in a memory location you're just going to get a bunch of random gibberish you have no idea what's going to be printing out there's no way for me to tell you why exactly we got these values it's just because at this point in time this is what is stored at this location that we're trying to access in our computer's memory you don't really have to understand this the whole point is to realize that if you do not initialize the values of the array you have no idea what is going to be stored in it so just keep that in mind right now even same thing here let's see what happens when i try to access a position in the array that actually doesn't exist so i try to access say position seven obviously our array is only size five so there is no index seven when i try to do this let's see what happens let's compile let's run again we get some random value i can't tell you why we're getting that all i can tell you is that when you try to do this you get something completely unexpected that you cannot predict so hopefully that's somewhat clear that is how you access the elements that is how you change the elements and that is what happens when you kind of create an array but you do not give it the actual values inside of it now of course once we've defined the array like this what i can do is i can say well ar is equal to and then i can set it equal to whatever array that i want that has five elements inside of it so i could say one two oops let's get our commas right two three four five and then if i see out here arr at and let's just go index four let's see what happens so let's compile and oh what is it saying right here uh error assigning to an array from an initializer list okay so it's actually a good error to run into this is something that i didn't see when i was looking at arrays before doing this video so apparently you actually cannot do what i just tried to tell you that you could do what this is saying is that you cannot assign to an array from an initializer list so this is what you call an initializer list don't worry about all the fancy names and it's saying that since we've already declared this array we've said that we have this array i now cannot set the array equal to and then this kind of array right here i cannot do that it's not allowed in c plus plus so if i did this right define the array in this way and then i want to set all of its elements the way that i would have to do it is by looking at each of the specific indexes so if i want to set my array to have say one two three four five as its different elements i would actually have to do the following i would have to say array zero is equal to one and then array one is equal to two and then so on and so forth i'm not gonna do all of them but i'll show you now that we will get element one when i actually kind of declare or set the elements in this way so let's compile let's run and see we do get one now obviously uh this is not this doesn't make too much sense to do it this way right like this is no better than just declaring a bunch of different variables we still have to write all of this code to set all of the elements for our ray now i'm going to show you in the next video kind of some tricks to do this a lot faster right now we just don't have all the tools that we need to really make perfect use of an array but i wanted to show them to you before because then when i go into the next videos you'll see why the things that i'm showing you are like really important if that makes any sense but anyways that's kind of the idea behind an array so there's a few more things i'm going to show you with an array and the first thing that i want to do here is just actually define a new array so let's make this 4 5 4 5 6 7. let's also make an array that's like a string array so let's say string arr2 and then this can be equal to or we can do it in this notation we can say tim and then comma is and then great just to show you that we can have an array like this we also could have an array that has float values so float er 3 equals or we could just do it this way as well 1.1 1.2 maybe negative 0.9 whatever it may be you can define arrays in this way okay so sorry for the abrupt cut i forget what i said before i made the cut here so i'm just going to quickly say yes we can define arrays of all different types you can see examples here that i've written anyways what i want to show you now is how you get the size of an array if you're coming from another programming language you may think this is very trivial very easy to do in a lot of programming languages you can use something called dot size or dot length to actually get the size or the length of the array the way that you do this is you would write the name of the array in this case maybe arr or ar2 or air r3 then you just do dot size or dot length or sometimes there's a function say in python you have this function called len that gives you the length of whatever structure you pass to now in c suppose is not so easy c plus plus makes things a little bit more difficult now to get the size of an array is kind of a twostep process there is this function in c plus plus called size up now notice it's kind of highlighting a fancy color when i write it now what sizeof does is give you the size in bytes of an array now bytes when i say bytes this is like how much room on your computer this array is actually taking up it's not the number of elements in the array it is quite literally the size of this array in memory like how many bytes are being used now the only good thing about this though is that if we know the size of the array in total we know the number of bytes that are being used if we're able to figure out how many bytes are being used for one element in the array we can actually figure out how many elements are in the array so typically when you want to get the size or the length of an array you're asking for the number of elements in the array that's what you want to know so in c plus plus if you want to get this what you can do is you can say something like co and then size of and then you can say arr so this is actually the array right the array object and then you can divide this by the size of one of the elements in the array so if you know the array has at least one element you can say all right well the size of array divided by the size of array and then this is going to be at index 0. so this tells you the size of the very first element and the size of the first element is how much all of the other elements take up as well so all of the other elements will have the exact same amount of space or exact same number of bytes that are being used by them so by simply dividing the size of the entire array by one of the elements this tells you how many elements are in the array now there's a few other ways to determine the size as well but they're a little bit beyond the scope of this tutorial right here i don't want to get into anything too confusing so i'm not going to cover them but let's quickly just run this here and see what we get and we get 4 right so the reason we get 4 is because the size of this one element is something the size of this entire array is something we do the division and since the size of all the elements is the exact same we know we have four elements just some basic math now let's just see out actually the size of just the array so we can kind of see what's happening here and let's see out the size of the array at index or position zero so let's go here let's compile let's run and oops i didn't mean to i didn't want to do them beside each other let's do this again okay and l and and l okay let's try this now clear compile run we get 16 4 and then four so this is perfect this is exactly what we wanted this is telling us that the size of our right is 16 number of bytes that it's using the number of bytes that one element is using is four and so we have four elements in the array now let's just see what happens if we add a very large number as the first element in our array let's see if this still works i want to compile and run and notice we still get the exact same thing so it uses four bytes to represent an integer so hopefully that kind of makes sense i can understand this part might be a little bit confusing especially if you've never programmed before again size and bytes you want to figure out the number of elements you take the size in bytes of the array and then divide it by the size in bytes of any number or any element story of the array that tells you the number of elements that are in it so i think that's all i really wanted to show you for arrays again just keep in mind there's many different ways to define and declare them whenever you create an array you cannot change the size of that array i cannot add another element into this array i would need to create a new one um you can change the value of positions in the array and arrays start indexing at zero so the very first element is zero then one then two then three again the trick is the number of elements in the array minus one is the very last index or position that you can access in the array so hopefully this was informative hopefully you guys learned something from this if you did make sure you may like subscribe to the channel and i will see you in another youtube video you
