With timestamps:

00:00 - hello and welcome back so in this video
00:03 - I'm going to be showing you a different
00:04 - kind of for loop which is known as a for
00:06 - each loop and this is going to allow us
00:08 - to loop through the elements of a list
00:09 - or a collection data type and do
00:13 - something with those elements I'm also
00:15 - going to be showing you ways that we can
00:16 - break out of the loop at certain points
00:18 - so if the condition is not met we're
00:21 - like we just want to get out of the loop
00:22 - the way that we can do that and I will
00:24 - be showing you some common examples of
00:26 - where we use loops so let's go ahead and
00:28 - get started
00:29 - so you can see that I have two arrays
00:32 - here once named names and one is named
00:34 - AR I just added this names one it's just
00:37 - blank blank array for right now okay so
00:40 - what I first want to do is in the last
00:42 - video I looped through this array and
00:44 - the way I did that was by having a
00:45 - variable I we waited until it was what
00:49 - do you call it greater than the length
00:51 - of the list and then once it was we
00:53 - simply broke out of that that loop right
00:57 - okay so a easier way to do this is to do
01:00 - something like this so we're gonna have
01:02 - the same exact syntax except in these
01:04 - brackets something is gonna be different
01:07 - okay what I'm gonna do if I want to loop
01:09 - through every element in this list is I
01:12 - can do something like this I can say for
01:13 - element : ARR now what this is actually
01:18 - gonna do I have to do this I'm sorry
01:21 - string element R I can't say string
01:23 - because that's something a type int
01:25 - element in our array so what I'm doing
01:28 - now is I'm saying that every time we
01:30 - loop through this loop right what we're
01:34 - gonna do is we're going to declare a new
01:35 - variable called element and it is going
01:38 - to be equal to the next element in our
01:41 - array so in this case when we first loop
01:44 - element is going to be equal to 1 and
01:46 - then elements gonna be equal to 5 and
01:47 - then it's gonna be equal to 7 and then 3
01:49 - and then 4 and then 5 and this is a way
01:51 - easier way if I wanted to like print out
01:52 - the element or look at certain elements
01:55 - to do so rather than having to have like
01:57 - a counter variable I and then index all
02:00 - of the different elements especially if
02:02 - we don't know the length of the array or
02:03 - we don't want to do dot length cuz this
02:04 - is automatically gonna go from start to
02:06 - end okay now I'm gonna show you because
02:10 - obviously we need
02:12 - to really understand this but the first
02:15 - example I typically like to do is just
02:17 - printing out all these elements to show
02:19 - you that is indeed working so in this
02:21 - case we'll say element okay and we'll
02:24 - just print this to the screen and see
02:25 - what we get
02:26 - so in this case you see we get one five
02:28 - seven three four five so right starting
02:30 - at the beginning going to the end the
02:31 - way this works with the colon is again
02:33 - we're just grabbing the elements in
02:35 - order and we're using those as a
02:37 - variable element now a lot of times what
02:40 - you want to do with this is you want to
02:44 - be checking the element but you also
02:45 - want the index as well so you want the
02:47 - element and you want the index now we
02:49 - could use what we used in the last video
02:51 - where we just have a counter variable in
02:52 - that way we have the index and the
02:54 - element because we can do like ARR of
02:56 - one like all that okay I but a way that
03:00 - people typically do this is with like an
03:02 - outside counter variable that you
03:04 - increment yourself so I'll show you how
03:06 - this works so what we're going to start
03:08 - off by doing is just creating very
03:09 - little is called into count equals zero
03:11 - and then within this loop we're gonna
03:13 - increment count ourself so now every
03:17 - time that we run the loop we're adding
03:19 - one to count so that count is keeping
03:21 - track of the index of the element so if
03:23 - I print out the element plus we'll just
03:26 - I guess I can't do that plus a space
03:28 - plus our account you can see that this
03:31 - is keeping track of the index so what's
03:33 - happening here says one is that index 0
03:35 - 5 index 1 and it keeps track of all
03:38 - these different indexes for us and
03:39 - that's a really easy way to do that I
03:41 - just want to show it doesn't really make
03:42 - sense for this example case but I just
03:44 - want to show you because there will be
03:45 - situations where you want both the
03:47 - element and the index and it's easier to
03:50 - get the element just by doing this with
03:51 - this : ok so again when you're doing a
03:54 - for each this is what this is known as
03:56 - because it's going through for each
03:58 - elements in the array we are doing
04:01 - something ok alright so the next thing
04:05 - that I want to do is I want to show you
04:06 - how we can populate an array using a for
04:11 - loop so right here for example we have a
04:14 - what he called a new string array that's
04:17 - empty right like all these elements are
04:18 - known and we want to populate them so
04:20 - the way that we would go about doing
04:22 - this and this is a common example of
04:23 - what you want to do this why I'm showing
04:24 - you this
04:25 - is we create a variable and say again
04:27 - int I equals zero we'll say well I is
04:31 - less than and that names dot length
04:35 - right and then we'll do semicolon and
04:38 - we'll simply add one to I so this is the
04:39 - exact same thing as we've done before
04:41 - but I'm just gonna show you how we can
04:42 - actually add the elements because it's a
04:44 - really common use case so what I'm gonna
04:46 - do here is I'm actually gonna use the
04:49 - scanner to get a new variable or to get
04:52 - like a name from the user so I'm just
04:54 - gonna say scanner SC equals new scanner
05:00 - and then we need system dot in okay and
05:04 - I actually think I should probably not
05:06 - declare this every loop but put it up
05:08 - here because we're just gonna use the
05:10 - scanner right so we'll say string of
05:14 - input equals SC dot next line like this
05:21 - and this way every time we run the loop
05:23 - we are going to get input from the user
05:25 - and you know what let's also just print
05:27 - out here system.out.println and just
05:31 - tell the user we want I should we'll
05:33 - just do prints not Ln we'll say input
05:36 - like this so that way they know what to
05:38 - type in okay so input we're getting
05:39 - input and now what I'm going to do is
05:41 - I'm going to add the users input into
05:43 - our array so how can I do this well this
05:46 - is really easy I can just do names I is
05:49 - equal to input right so we're just
05:51 - declaring that whatever index we are in
05:55 - the loop right now so whatever value by
05:56 - well that value in the list or sorry the
06:00 - list I keep calling a list it's an array
06:02 - I'm just used to python it's gonna be
06:03 - equal to whatever we typed in and then
06:05 - if we want to print out the entire right
06:08 - what we can use we'll use another for
06:10 - loop so we'll just say for and then this
06:12 - time it's gonna be a for each loop right
06:13 - so we'll say for and it's just stanford
06:16 - name
06:17 - so you made string and and names okay
06:21 - then we will simply just do system dot
06:24 - out dot println and we will print every
06:29 - value of n okay so that's two good
06:31 - examples let's run this and just make
06:33 - sure everything's working so we run this
06:34 - input i'm skin tight hello
06:36 - I guess I wanted names in
06:38 - Tim Bob Joe bill and then there we go so
06:44 - we ran that five times and we get hello
06:47 - Tim Bob Joe and Bill awesome there we go
06:51 - so that uh gives us all the values that
06:54 - we need ok ok so now what I want to show
06:57 - you guys is how we can break out of the
06:59 - loop so if we're in the loop and we're
07:02 - going through and we're doing operations
07:03 - and we've not yet met the condition
07:05 - where are like so the loop is gonna keep
07:07 - going like eyes not greater than
07:09 - whatever value or whatnot ok then we
07:12 - want to break out of it how can we do
07:15 - that so how can we just get out of it in
07:16 - the middle of looping well there is this
07:18 - magical little keyword called break and
07:22 - what this does is whenever this is
07:24 - encountered inside of a loop it simply
07:26 - breaks out of the loop so in this case
07:29 - what would happen is since I have break
07:31 - at the end we would do these first three
07:34 - lines then we just break and this would
07:36 - only happen one time no matter what no
07:38 - matter what any of this stuff said this
07:40 - loop would only happen at once now I'm
07:43 - gonna show you just down here in this
07:45 - loop how we can break out based on like
07:48 - a certain condition so for example say
07:50 - we encountered the word end or what do
07:54 - you call it the word Tim what am I
07:55 - saying and I was just reading that if we
07:56 - encounter like the word Tim while we
07:58 - were reading through the list of names
07:59 - then we just want to break out like we
08:01 - don't want to print any more names
08:02 - anymore we just want to break out so the
08:03 - way that I can do this is at now I can
08:04 - say well we're gonna we're gonna print
08:06 - Tim but we'll break after Tim ok so what
08:09 - I'm gonna do in a duel if statement and
08:10 - I say if and equals equals or not equal
08:12 - to ghost dot equals okay and in this
08:15 - case we'll just simply put Tim in here
08:18 - then what we are going to do is we're
08:21 - going to break and in this case now
08:23 - whenever we encounter Tim we are simply
08:25 - breaking onto the loop and that means we
08:27 - will not print the rest of the names so
08:29 - if I run this strike this console up
08:31 - here and we run and you're saying hello
08:34 - let me say name and let me say Tim and
08:37 - I'll just show you this Tim and Tim and
08:40 - I run this here you see we get hello
08:42 - name and Tim and these other two Tim's
08:44 - do not print and again that's because
08:47 - once we hit Tim and n is equal to Tim we
08:50 - simply break ok and we get out
08:52 - Loup and that's like a really easy way
08:54 - to just break out of the loop and this
08:56 - is gonna work for Wallops that we do in
08:58 - what do you call it the next video
09:00 - now typically break is not something you
09:02 - want to be using a lot like you only use
09:04 - this if you really have to it's better
09:07 - to just make these conditions work the
09:09 - way they should and have the loop run
09:12 - like as many times as it needs to run
09:14 - you know what I mean so just try not to
09:16 - use this too much but I mean there's
09:17 - nothing really wrong with using it
09:19 - people just start frown upon it in the
09:21 - programming world using the word break
09:22 - okay so anyways that's been it for this
09:25 - video in the next video we're going to
09:26 - talk about while loops which is very
09:27 - similar to for loops but they just work
09:29 - a little bit of a different way again if
09:31 - you enjoyed the video please make sure
09:32 - you leave a like and subscribe and I
09:33 - will see you in the next one
09:35 - [Music]

Cleaned transcript:

hello and welcome back so in this video I'm going to be showing you a different kind of for loop which is known as a for each loop and this is going to allow us to loop through the elements of a list or a collection data type and do something with those elements I'm also going to be showing you ways that we can break out of the loop at certain points so if the condition is not met we're like we just want to get out of the loop the way that we can do that and I will be showing you some common examples of where we use loops so let's go ahead and get started so you can see that I have two arrays here once named names and one is named AR I just added this names one it's just blank blank array for right now okay so what I first want to do is in the last video I looped through this array and the way I did that was by having a variable I we waited until it was what do you call it greater than the length of the list and then once it was we simply broke out of that that loop right okay so a easier way to do this is to do something like this so we're gonna have the same exact syntax except in these brackets something is gonna be different okay what I'm gonna do if I want to loop through every element in this list is I can do something like this I can say for element ARR now what this is actually gonna do I have to do this I'm sorry string element R I can't say string because that's something a type int element in our array so what I'm doing now is I'm saying that every time we loop through this loop right what we're gonna do is we're going to declare a new variable called element and it is going to be equal to the next element in our array so in this case when we first loop element is going to be equal to 1 and then elements gonna be equal to 5 and then it's gonna be equal to 7 and then 3 and then 4 and then 5 and this is a way easier way if I wanted to like print out the element or look at certain elements to do so rather than having to have like a counter variable I and then index all of the different elements especially if we don't know the length of the array or we don't want to do dot length cuz this is automatically gonna go from start to end okay now I'm gonna show you because obviously we need to really understand this but the first example I typically like to do is just printing out all these elements to show you that is indeed working so in this case we'll say element okay and we'll just print this to the screen and see what we get so in this case you see we get one five seven three four five so right starting at the beginning going to the end the way this works with the colon is again we're just grabbing the elements in order and we're using those as a variable element now a lot of times what you want to do with this is you want to be checking the element but you also want the index as well so you want the element and you want the index now we could use what we used in the last video where we just have a counter variable in that way we have the index and the element because we can do like ARR of one like all that okay I but a way that people typically do this is with like an outside counter variable that you increment yourself so I'll show you how this works so what we're going to start off by doing is just creating very little is called into count equals zero and then within this loop we're gonna increment count ourself so now every time that we run the loop we're adding one to count so that count is keeping track of the index of the element so if I print out the element plus we'll just I guess I can't do that plus a space plus our account you can see that this is keeping track of the index so what's happening here says one is that index 0 5 index 1 and it keeps track of all these different indexes for us and that's a really easy way to do that I just want to show it doesn't really make sense for this example case but I just want to show you because there will be situations where you want both the element and the index and it's easier to get the element just by doing this with this ok so again when you're doing a for each this is what this is known as because it's going through for each elements in the array we are doing something ok alright so the next thing that I want to do is I want to show you how we can populate an array using a for loop so right here for example we have a what he called a new string array that's empty right like all these elements are known and we want to populate them so the way that we would go about doing this and this is a common example of what you want to do this why I'm showing you this is we create a variable and say again int I equals zero we'll say well I is less than and that names dot length right and then we'll do semicolon and we'll simply add one to I so this is the exact same thing as we've done before but I'm just gonna show you how we can actually add the elements because it's a really common use case so what I'm gonna do here is I'm actually gonna use the scanner to get a new variable or to get like a name from the user so I'm just gonna say scanner SC equals new scanner and then we need system dot in okay and I actually think I should probably not declare this every loop but put it up here because we're just gonna use the scanner right so we'll say string of input equals SC dot next line like this and this way every time we run the loop we are going to get input from the user and you know what let's also just print out here system.out.println and just tell the user we want I should we'll just do prints not Ln we'll say input like this so that way they know what to type in okay so input we're getting input and now what I'm going to do is I'm going to add the users input into our array so how can I do this well this is really easy I can just do names I is equal to input right so we're just declaring that whatever index we are in the loop right now so whatever value by well that value in the list or sorry the list I keep calling a list it's an array I'm just used to python it's gonna be equal to whatever we typed in and then if we want to print out the entire right what we can use we'll use another for loop so we'll just say for and then this time it's gonna be a for each loop right so we'll say for and it's just stanford name so you made string and and names okay then we will simply just do system dot out dot println and we will print every value of n okay so that's two good examples let's run this and just make sure everything's working so we run this input i'm skin tight hello I guess I wanted names in Tim Bob Joe bill and then there we go so we ran that five times and we get hello Tim Bob Joe and Bill awesome there we go so that uh gives us all the values that we need ok ok so now what I want to show you guys is how we can break out of the loop so if we're in the loop and we're going through and we're doing operations and we've not yet met the condition where are like so the loop is gonna keep going like eyes not greater than whatever value or whatnot ok then we want to break out of it how can we do that so how can we just get out of it in the middle of looping well there is this magical little keyword called break and what this does is whenever this is encountered inside of a loop it simply breaks out of the loop so in this case what would happen is since I have break at the end we would do these first three lines then we just break and this would only happen one time no matter what no matter what any of this stuff said this loop would only happen at once now I'm gonna show you just down here in this loop how we can break out based on like a certain condition so for example say we encountered the word end or what do you call it the word Tim what am I saying and I was just reading that if we encounter like the word Tim while we were reading through the list of names then we just want to break out like we don't want to print any more names anymore we just want to break out so the way that I can do this is at now I can say well we're gonna we're gonna print Tim but we'll break after Tim ok so what I'm gonna do in a duel if statement and I say if and equals equals or not equal to ghost dot equals okay and in this case we'll just simply put Tim in here then what we are going to do is we're going to break and in this case now whenever we encounter Tim we are simply breaking onto the loop and that means we will not print the rest of the names so if I run this strike this console up here and we run and you're saying hello let me say name and let me say Tim and I'll just show you this Tim and Tim and I run this here you see we get hello name and Tim and these other two Tim's do not print and again that's because once we hit Tim and n is equal to Tim we simply break ok and we get out Loup and that's like a really easy way to just break out of the loop and this is gonna work for Wallops that we do in what do you call it the next video now typically break is not something you want to be using a lot like you only use this if you really have to it's better to just make these conditions work the way they should and have the loop run like as many times as it needs to run you know what I mean so just try not to use this too much but I mean there's nothing really wrong with using it people just start frown upon it in the programming world using the word break okay so anyways that's been it for this video in the next video we're going to talk about while loops which is very similar to for loops but they just work a little bit of a different way again if you enjoyed the video please make sure you leave a like and subscribe and I will see you in the next one
