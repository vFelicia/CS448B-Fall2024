With timestamps:

00:00 - hello everybody and welcome back to a
00:01 - JavaScript tutorial so in today's video
00:03 - what we're gonna talk about is functions
00:05 - now we're not gonna get into too much
00:07 - detail with functions as I'm gonna leave
00:08 - that till the next video but what I want
00:10 - to do is illustrate to you how a
00:12 - function works on a very fundamental
00:14 - level using a basic example where we
00:16 - have two buttons a button that says
00:18 - green and a button that says red and
00:20 - when we press the green button this text
00:23 - heater will actually change to be green
00:25 - and when we press the red button and
00:27 - this text here will actually change to
00:29 - be red now how do we do that right so
00:32 - how do we make it when we press a button
00:33 - that we actually can change elements on
00:35 - the page well that's where functions
00:37 - come in now what is a function well you
00:40 - can think of the definition of a
00:42 - function as a kind of piece of code or a
00:44 - block of code that does something it
00:47 - might you know change some piece of
00:49 - information on the screen it might take
00:51 - in a value and return to a some value
00:53 - you can think about in mathematics when
00:55 - we have functions like f of X equals 5x
00:58 - something like that right
00:59 - that function takes a value of X and
01:02 - returns to us a value of y you can think
01:04 - of that is similar idea with programming
01:06 - functions except they're capable of
01:08 - doing much more than just mathematical
01:10 - computations now something to remember
01:11 - when we think about functions is that a
01:13 - function should do one thing and it
01:15 - should do that one thing very well so
01:18 - whenever you're designing functions just
01:20 - try to keep in mind and think about what
01:21 - is your function doing is that doing one
01:23 - thing or is it doing many things and
01:25 - when I say one thing I don't really mean
01:27 - you know one line of code
01:28 - I mean one overall operation one overall
01:31 - function of your code is what it's
01:32 - performing it's not you know messing
01:34 - around and doing a hundred different
01:35 - things inside of it okay so how do we
01:38 - create a function well to do it is
01:40 - actually pretty straightforward we're
01:41 - gonna type the word function we're gonna
01:43 - type a name in this case I'm actually
01:45 - gonna do a basic example before we get
01:48 - into the other one called add and then
01:49 - we're gonna put curly braces to denote
01:51 - where our function actually is so what
01:54 - I've done here is said we're gonna
01:55 - define a function called add and
01:58 - anything that goes inside of these curly
02:01 - braces is what's gonna be inside of our
02:03 - function now to give you a really basic
02:06 - example what I'm gonna do is just
02:07 - console dot log and like this and I'm
02:11 - going to call
02:12 - I function by doing this now I know you
02:14 - guys have no idea what's going on right
02:15 - now if you've never seen functions
02:16 - before but let me break it down for
02:19 - exactly what's happening here this is
02:21 - our function block right so this is the
02:23 - name of our function at this block of
02:25 - code or any blocks of code for that
02:27 - matter that go inside of these curly
02:29 - braces will only happen when the
02:31 - function is run so the function has to
02:34 - be run we have to call the function and
02:36 - then whatever's inside of it will happen
02:38 - so here this is what we call our
02:40 - function call and to call a function is
02:43 - really easy all you do is type the name
02:45 - of it and then put two brackets at the
02:46 - end to say that you're calling it so
02:48 - this is our function call and
02:50 - essentially what's gonna happen is one
02:52 - we're reading through our code as soon
02:53 - as we hit this block we're gonna
02:55 - actually call this add function which
02:57 - means anything inside of here is gonna
02:59 - run so let me illustrate that to you by
03:01 - just simply running and refreshing this
03:03 - page let me go to actually inspect
03:05 - element here and you can see if we go to
03:08 - I gotta find where is this here console
03:11 - we get ad printed out to the screen when
03:13 - I called ad and the great thing about
03:15 - functions that we can call them a bunch
03:18 - of times so let's do this and you can
03:21 - see that now we have four ads popping up
03:23 - on the screen so hopefully this is
03:25 - giving you an idea of why we might use
03:27 - them because say I wanted to print a
03:29 - sequence of I don't know add one two
03:32 - three like that well rather than you
03:36 - know having to do this so I want to do
03:37 - this exact sequence of ads a hundred
03:40 - times rather than having to write 300
03:42 - lines of code what I would do is simply
03:44 - call add as many times that I want that
03:46 - to happen right so if i refresh this now
03:48 - you can see we're getting all these
03:49 - popping up and that is you know the
03:51 - basics of functions and why we use them
03:53 - so that we can reuse our code so if you
03:56 - ever realize that you're writing very
03:57 - similar lines of code multiple times
03:59 - maybe you just want to add them into a
04:01 - function and then you can just call that
04:03 - line of code once with one statement
04:05 - rather than writing it a bunch of times
04:06 - okay so let's go into a little bit more
04:10 - of a more advanced example here with add
04:12 - and I'm gonna show you something called
04:13 - parameters and something called return
04:15 - statements so what I'm gonna do is I'm
04:18 - gonna put two parameters in here I'm
04:19 - gonna call them a and B and these are
04:21 - called parameters now what these kind of
04:23 - stand for is the information that I need
04:25 - to
04:25 - has to my function so this is the
04:27 - information that my function needs to be
04:29 - able to work to be able to perform some
04:31 - computation now in this instance a and B
04:34 - are going to actually be two numbers
04:36 - that I'm going to add together and what
04:38 - my function is going to do is take those
04:40 - two numbers a and the other number B add
04:43 - them together and return the result to
04:46 - wherever my function was being called
04:47 - now this might seem a bit confusing but
04:49 - the examples are hopefully gonna clear
04:51 - this up for you so what I'm actually
04:53 - gonna do in here is write a return
04:55 - statement now a return statement is
04:57 - different from logging something I'm not
04:59 - printing something to the console I'm
05:01 - returning a value and the value I'm
05:03 - gonna return is a plus B now I know
05:06 - everyone's confused well we'll get
05:07 - through this
05:08 - what I'm gonna do is create a variable
05:09 - here I'm gonna call it x and I'm gonna
05:11 - set it equal to add and here I'm going
05:13 - to do five five now we all know what
05:16 - five plus five is we know that values 10
05:18 - so what's actually happening here is
05:20 - when I call add I'm going to pass for
05:24 - the value a the number five I'm gonna
05:26 - pass for the number B or for the
05:29 - parameter B the value five now what
05:32 - these are called our arguments so these
05:34 - are parameters and these are arguments
05:36 - and you can obviously you know I can
05:37 - pass different arguments to them I could
05:39 - say VAR y equals 5 plus 7 right I can do
05:43 - any numbers I want and this is the point
05:45 - of this is that it can take any two
05:47 - numbers and return to me the addition of
05:49 - those numbers so let's simply log out
05:51 - these values I'm going to show you kind
05:53 - of how this works so console dot log we
05:56 - have X and we have Y so what's happening
06:00 - is when we save our x equals add five
06:03 - five what's gonna happen is we're going
06:05 - to pass our values and then we're going
06:07 - to return the addition of those values
06:10 - what this return is gonna do is
06:12 - essentially say this line here that
06:13 - we've said add five five is going to be
06:15 - equal to whatever this return statement
06:17 - returns which in this instance is 10
06:19 - which means that X should be equal to
06:22 - the value 10 I notice might be confusing
06:24 - but let's run this and see what we get
06:25 - we get 10 and we get 12 so what happened
06:28 - was we passed our values
06:30 - you know something happened this gets
06:31 - replaced with whatever was returned from
06:34 - that function so which is 10 this one is
06:36 - getting replaced with 12 and we can
06:38 - print those two values out and say you
06:39 - know
06:39 - this is 10 this is 12 those are answers
06:42 - and we're storing them in variable X and
06:44 - variable Y that being said though I
06:46 - don't need to store them in a variable
06:48 - and sometimes I don't want to store the
06:50 - value I just want to you know use the
06:51 - value so what I can do is actually do
06:54 - something like you know 234 and like
06:56 - negative 98 maybe let's pass that in
06:58 - here and I can log the result of that
07:01 - addition so here you know we get our
07:02 - value 136 I'm not storing it in any
07:05 - value but I can still show it because
07:07 - what happens is when I call this the
07:09 - return statement is gonna whatever it
07:11 - returns will replace this line and then
07:12 - you know we can demonstrate that and
07:14 - show that on the screen okay so I think
07:16 - that is the basics I've shown so far
07:19 - that you know we can have a function
07:21 - that has parameters we can have a
07:23 - function that doesn't have parameters we
07:24 - can have one that has a return and we
07:25 - can have one that doesn't have a return
07:27 - what about a function that has
07:29 - parameters but doesn't have a return
07:32 - statement well that's more than fine I
07:33 - could do something like console dot log
07:36 - a plus B and then if now if I call my
07:39 - add function and I do five five watch
07:43 - what's gonna happen so we're gonna print
07:46 - the value ten why does this work well
07:49 - same thing before we have our parameters
07:50 - and B what we've done is we've called
07:53 - add notice we're not printing anything
07:54 - down here but what happens is inside of
07:57 - the function we print the addition so
07:59 - obviously that's gonna work fine and you
08:01 - know that is how this works
08:02 - okay but now how about some of the more
08:05 - cooler parts of functions and I want to
08:07 - get into and then finish in the rest of
08:09 - the video how do we call a function from
08:11 - our HTML I want to press this button and
08:13 - I want to call a function how do I do
08:15 - that well let me show you so what I'm
08:18 - going to do is actually create a new
08:19 - function and I'm gonna call this
08:20 - function red and all I'm gonna do right
08:23 - now is simply say console dot log red
08:26 - now inside of my button tag what I can
08:29 - actually do is set function that I want
08:32 - to trigger when this button is pressed
08:34 - and to do that I simply say unclick
08:37 - equals and in this case red now what
08:40 - this is defining is essentially when I
08:42 - click the button I want to call the
08:44 - function which is called rent which
08:46 - obviously is right here so let's see
08:48 - this and see if this works
08:50 - give this a refresh when I click red you
08:53 - see that red is printing out to the
08:55 - screen and notice you know obviously
08:56 - it's keeping track of however many times
08:58 - I pressed it just to tell you that same
09:00 - output showing up and that is as easy as
09:02 - that is to do if you want to call a
09:04 - function from your JavaScript you
09:06 - literally just put it in quotation marks
09:07 - whatever the name is inside of HTML
09:09 - sorry and it will call that function now
09:12 - let's do the same thing for blue or
09:15 - green or whatever I had okay
09:16 - so let's call this green and let's do
09:19 - console don't log
09:22 - green and I keep forgetting my
09:25 - semicolons
09:26 - but I guess I don't even need them
09:27 - anyways but I just like to add them so
09:30 - let's do on click equals green okay so
09:33 - let's run this now refresh green red
09:37 - green red green green green green green
09:39 - red red red see and that is exactly how
09:42 - this works and that is I mean pretty
09:45 - cool in my opinion now what you guys can
09:47 - do is have buttons and when you press
09:49 - them you can trigger some JavaScript
09:51 - which is just the start of the really
09:53 - cool things we're gonna be able to do
09:54 - later in this series now what I said
09:57 - though was I don't want to just console
09:59 - that log actually want to change you
10:00 - know this element I want to change hello
10:02 - well we actually we know how to do that
10:05 - right we know how to change maybe not
10:06 - the color right now if you haven't seen
10:08 - that command but we don't have changed
10:10 - the value of our h1 tab
10:11 - so how do we do that well let's do one
10:14 - in here document dot get element if I
10:19 - could type properly by ID don't know
10:22 - what's going on my keyboard here let's
10:24 - do header as our ID and then we're gonna
10:26 - do what is it dot inner HTML equals what
10:31 - should we do let's actually just make
10:33 - this red for now great now let's do the
10:36 - same thing I'm gonna copy this to save
10:38 - us the pain of typing that again and
10:40 - let's put in green so I haven't changed
10:43 - the color yet what I'm actually going to
10:45 - be doing now is changing the value of
10:47 - this header tag to be either red or
10:49 - green when I press one of these buttons
10:50 - so let's see if this works or if I mess
10:52 - something up let's refresh when I click
10:54 - red you see it changes to red and when I
10:56 - hit green it changes to green and that
10:58 - is you know as easy as it is to do this
11:00 - now what if we want to change to
11:02 - becoming I'm gonna give this a shot
11:05 - because I always forget how to do this
11:07 - but I think it's something like thought
11:09 - style dot color and I'm pretty sure this
11:12 - will actually change our color to be
11:13 - either green or red although I don't
11:17 - really know but we'll get a shot okay so
11:20 - let's run this fresh when I press this
11:23 - oh there we go our colors changing from
11:25 - red it's agreed so to do that what I did
11:27 - was dot style dot color and change that
11:30 - to lowercase red and a lowercase green
11:32 - so that is our basics of functions I
11:36 - know I've gone through a lot here I'm
11:37 - gonna continue with functions and we're
11:39 - gonna continue to see them as we go
11:40 - through this series so you guys should
11:41 - continue to understand them but if you
11:44 - have any questions as always leave them
11:45 - down below I think personally this is my
11:47 - favorite part of the series so far in
11:48 - terms we can actually manipulate things
11:50 - on our page and you know we're changing
11:52 - colors we're triggering events from our
11:54 - JavaScript it's just it's cool and we're
11:55 - getting into some much more interesting
11:57 - things so with that being said if he
11:58 - hasn't drew it makes you leave a like
11:59 - subscribe to the channel down below and
12:01 - as always I will see you in another
12:02 - video

Cleaned transcript:

hello everybody and welcome back to a JavaScript tutorial so in today's video what we're gonna talk about is functions now we're not gonna get into too much detail with functions as I'm gonna leave that till the next video but what I want to do is illustrate to you how a function works on a very fundamental level using a basic example where we have two buttons a button that says green and a button that says red and when we press the green button this text heater will actually change to be green and when we press the red button and this text here will actually change to be red now how do we do that right so how do we make it when we press a button that we actually can change elements on the page well that's where functions come in now what is a function well you can think of the definition of a function as a kind of piece of code or a block of code that does something it might you know change some piece of information on the screen it might take in a value and return to a some value you can think about in mathematics when we have functions like f of X equals 5x something like that right that function takes a value of X and returns to us a value of y you can think of that is similar idea with programming functions except they're capable of doing much more than just mathematical computations now something to remember when we think about functions is that a function should do one thing and it should do that one thing very well so whenever you're designing functions just try to keep in mind and think about what is your function doing is that doing one thing or is it doing many things and when I say one thing I don't really mean you know one line of code I mean one overall operation one overall function of your code is what it's performing it's not you know messing around and doing a hundred different things inside of it okay so how do we create a function well to do it is actually pretty straightforward we're gonna type the word function we're gonna type a name in this case I'm actually gonna do a basic example before we get into the other one called add and then we're gonna put curly braces to denote where our function actually is so what I've done here is said we're gonna define a function called add and anything that goes inside of these curly braces is what's gonna be inside of our function now to give you a really basic example what I'm gonna do is just console dot log and like this and I'm going to call I function by doing this now I know you guys have no idea what's going on right now if you've never seen functions before but let me break it down for exactly what's happening here this is our function block right so this is the name of our function at this block of code or any blocks of code for that matter that go inside of these curly braces will only happen when the function is run so the function has to be run we have to call the function and then whatever's inside of it will happen so here this is what we call our function call and to call a function is really easy all you do is type the name of it and then put two brackets at the end to say that you're calling it so this is our function call and essentially what's gonna happen is one we're reading through our code as soon as we hit this block we're gonna actually call this add function which means anything inside of here is gonna run so let me illustrate that to you by just simply running and refreshing this page let me go to actually inspect element here and you can see if we go to I gotta find where is this here console we get ad printed out to the screen when I called ad and the great thing about functions that we can call them a bunch of times so let's do this and you can see that now we have four ads popping up on the screen so hopefully this is giving you an idea of why we might use them because say I wanted to print a sequence of I don't know add one two three like that well rather than you know having to do this so I want to do this exact sequence of ads a hundred times rather than having to write 300 lines of code what I would do is simply call add as many times that I want that to happen right so if i refresh this now you can see we're getting all these popping up and that is you know the basics of functions and why we use them so that we can reuse our code so if you ever realize that you're writing very similar lines of code multiple times maybe you just want to add them into a function and then you can just call that line of code once with one statement rather than writing it a bunch of times okay so let's go into a little bit more of a more advanced example here with add and I'm gonna show you something called parameters and something called return statements so what I'm gonna do is I'm gonna put two parameters in here I'm gonna call them a and B and these are called parameters now what these kind of stand for is the information that I need to has to my function so this is the information that my function needs to be able to work to be able to perform some computation now in this instance a and B are going to actually be two numbers that I'm going to add together and what my function is going to do is take those two numbers a and the other number B add them together and return the result to wherever my function was being called now this might seem a bit confusing but the examples are hopefully gonna clear this up for you so what I'm actually gonna do in here is write a return statement now a return statement is different from logging something I'm not printing something to the console I'm returning a value and the value I'm gonna return is a plus B now I know everyone's confused well we'll get through this what I'm gonna do is create a variable here I'm gonna call it x and I'm gonna set it equal to add and here I'm going to do five five now we all know what five plus five is we know that values 10 so what's actually happening here is when I call add I'm going to pass for the value a the number five I'm gonna pass for the number B or for the parameter B the value five now what these are called our arguments so these are parameters and these are arguments and you can obviously you know I can pass different arguments to them I could say VAR y equals 5 plus 7 right I can do any numbers I want and this is the point of this is that it can take any two numbers and return to me the addition of those numbers so let's simply log out these values I'm going to show you kind of how this works so console dot log we have X and we have Y so what's happening is when we save our x equals add five five what's gonna happen is we're going to pass our values and then we're going to return the addition of those values what this return is gonna do is essentially say this line here that we've said add five five is going to be equal to whatever this return statement returns which in this instance is 10 which means that X should be equal to the value 10 I notice might be confusing but let's run this and see what we get we get 10 and we get 12 so what happened was we passed our values you know something happened this gets replaced with whatever was returned from that function so which is 10 this one is getting replaced with 12 and we can print those two values out and say you know this is 10 this is 12 those are answers and we're storing them in variable X and variable Y that being said though I don't need to store them in a variable and sometimes I don't want to store the value I just want to you know use the value so what I can do is actually do something like you know 234 and like negative 98 maybe let's pass that in here and I can log the result of that addition so here you know we get our value 136 I'm not storing it in any value but I can still show it because what happens is when I call this the return statement is gonna whatever it returns will replace this line and then you know we can demonstrate that and show that on the screen okay so I think that is the basics I've shown so far that you know we can have a function that has parameters we can have a function that doesn't have parameters we can have one that has a return and we can have one that doesn't have a return what about a function that has parameters but doesn't have a return statement well that's more than fine I could do something like console dot log a plus B and then if now if I call my add function and I do five five watch what's gonna happen so we're gonna print the value ten why does this work well same thing before we have our parameters and B what we've done is we've called add notice we're not printing anything down here but what happens is inside of the function we print the addition so obviously that's gonna work fine and you know that is how this works okay but now how about some of the more cooler parts of functions and I want to get into and then finish in the rest of the video how do we call a function from our HTML I want to press this button and I want to call a function how do I do that well let me show you so what I'm going to do is actually create a new function and I'm gonna call this function red and all I'm gonna do right now is simply say console dot log red now inside of my button tag what I can actually do is set function that I want to trigger when this button is pressed and to do that I simply say unclick equals and in this case red now what this is defining is essentially when I click the button I want to call the function which is called rent which obviously is right here so let's see this and see if this works give this a refresh when I click red you see that red is printing out to the screen and notice you know obviously it's keeping track of however many times I pressed it just to tell you that same output showing up and that is as easy as that is to do if you want to call a function from your JavaScript you literally just put it in quotation marks whatever the name is inside of HTML sorry and it will call that function now let's do the same thing for blue or green or whatever I had okay so let's call this green and let's do console don't log green and I keep forgetting my semicolons but I guess I don't even need them anyways but I just like to add them so let's do on click equals green okay so let's run this now refresh green red green red green green green green green red red red see and that is exactly how this works and that is I mean pretty cool in my opinion now what you guys can do is have buttons and when you press them you can trigger some JavaScript which is just the start of the really cool things we're gonna be able to do later in this series now what I said though was I don't want to just console that log actually want to change you know this element I want to change hello well we actually we know how to do that right we know how to change maybe not the color right now if you haven't seen that command but we don't have changed the value of our h1 tab so how do we do that well let's do one in here document dot get element if I could type properly by ID don't know what's going on my keyboard here let's do header as our ID and then we're gonna do what is it dot inner HTML equals what should we do let's actually just make this red for now great now let's do the same thing I'm gonna copy this to save us the pain of typing that again and let's put in green so I haven't changed the color yet what I'm actually going to be doing now is changing the value of this header tag to be either red or green when I press one of these buttons so let's see if this works or if I mess something up let's refresh when I click red you see it changes to red and when I hit green it changes to green and that is you know as easy as it is to do this now what if we want to change to becoming I'm gonna give this a shot because I always forget how to do this but I think it's something like thought style dot color and I'm pretty sure this will actually change our color to be either green or red although I don't really know but we'll get a shot okay so let's run this fresh when I press this oh there we go our colors changing from red it's agreed so to do that what I did was dot style dot color and change that to lowercase red and a lowercase green so that is our basics of functions I know I've gone through a lot here I'm gonna continue with functions and we're gonna continue to see them as we go through this series so you guys should continue to understand them but if you have any questions as always leave them down below I think personally this is my favorite part of the series so far in terms we can actually manipulate things on our page and you know we're changing colors we're triggering events from our JavaScript it's just it's cool and we're getting into some much more interesting things so with that being said if he hasn't drew it makes you leave a like subscribe to the channel down below and as always I will see you in another video
