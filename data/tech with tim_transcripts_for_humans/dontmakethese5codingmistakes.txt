With timestamps:

00:00 - here are five dumb mistakes that wreck
00:02 - your code that unfortunately most of you
00:04 - are making not only will I show them to
00:06 - you but I'll also show you how to fix
00:08 - them in just a few seconds so stick
00:10 - around mistake number one is lack of
00:12 - consistency have a look at this code
00:14 - right here pause the video and take a
00:17 - guess at what I'm going to say is wrong
00:18 - with it some of them are obvious some of
00:20 - them not so much now if you haven't
00:22 - paused the video please go ahead and do
00:23 - that I'm going to run through a lot of
00:25 - the mistakes that you can see that might
00:27 - be a little bit subtle especially to a
00:29 - more beginner program
00:30 - let's start by having a look at the top
00:32 - of our code here where we have these two
00:34 - variables message one and message two
00:36 - now they seem Innocent but notice that
00:38 - we're using double quotation marks and
00:40 - single quotation marks now in a hobby
00:42 - project this is completely fine but when
00:44 - you get into larger code bases and
00:46 - working with other people you want to
00:47 - make sure you're always using the same
00:49 - type of quotation marks or the same type
00:51 - of variable names it doesn't really
00:53 - matter what you decide so long as you're
00:55 - always consistent inconsistency just
00:58 - makes really bad code it makes makes it
01:00 - hard to predict and it's something that
01:01 - we can easily avoid continuing let's
01:04 - look at this variable first of all
01:05 - notice that we have this user profile
01:08 - and we're using camel case now in Python
01:10 - you really should be using snake case
01:12 - like this anyways that's one
01:15 - inconsistency the other is with the
01:16 - different field names that we have
01:18 - inside of our dictionary notice that we
01:20 - have camel case we have snake case and
01:22 - then we have Pascal case we really
01:24 - should be using the same type throughout
01:25 - all of our different field names to make
01:27 - it more predictable on what the field
01:29 - names will be continuing we have a class
01:32 - here now notice in the class we have
01:34 - some inconsistency with our spacing we
01:36 - have no space separating these two
01:38 - methods but we have a space separating
01:39 - this one so what do we want to do simply
01:42 - add a space or add an indentation level
01:45 - quite simple okay let's go down here to
01:47 - our DB manager now this is completely
01:49 - fine we have a DB manager variable we
01:52 - call our connect method and then notice
01:54 - that we actually use the class to invoke
01:57 - this class method or this static method
01:59 - sorry and then we use the instance to
02:01 - invoke the static method again now this
02:04 - doesn't really make a lot of sense and
02:05 - again is an inconsistency we have a
02:07 - static method we can call it from either
02:09 - the class itself or from an instance in
02:12 - this case we're doing both one after
02:14 - another we really should just stick to
02:16 - one way I'd probably prefer to use the
02:18 - actual class itself so database manager
02:21 - but it doesn't matter what you want to
02:22 - do so long as you do it the same each
02:24 - time you do it continuing we have some
02:27 - variables X and Y now notice that we
02:29 - don't have a space between the equal
02:30 - sign we can really easily clean that up
02:32 - by adding it there next we have two
02:35 - constants one of which has a capital one
02:37 - of which is not in capitals so again
02:39 - doesn't matter what you decide to do
02:40 - here just do it the same every single
02:42 - time so the code is more predictable
02:45 - lastly we have a function here inside of
02:47 - the function we're returning two
02:48 - different types here we're returning an
02:50 - object here where we're returning a
02:52 - string this makes it more difficult to
02:54 - work with the return type and again it's
02:55 - not consistent or predictable now we get
02:58 - into mistake number two which is not
03:00 - registering for my free software
03:02 - development course which teaches you
03:04 - everything you need to get a software
03:05 - development job making 80k per year with
03:08 - no degree or experience required
03:10 - seriously this is completely free you
03:12 - can sign up for it from the link in the
03:14 - description it's about an hour long and
03:16 - breaks down everything you need to do
03:18 - completely from the beginning all of the
03:20 - things you need to learn the curriculum
03:21 - you need to follow and how you can break
03:23 - into the tech industry register from the
03:25 - link in the description completely for
03:27 - free seriously though that leads me into
03:29 - mistake number three which is this code
03:32 - here before I reveal take a second pause
03:35 - the video and see if you can tell me
03:37 - what's wrong with this code okay I
03:39 - assume that you've paused the video when
03:40 - we have a look at this code here we can
03:42 - see that we have hardcoded values now
03:44 - notice this is just a simple game if I
03:47 - actually were to run this code let's go
03:49 - here and run it python example 2. piy
03:53 - you can see that we can just move around
03:55 - and it's a little square on the screen
03:57 - okay a simple game in Python however the
04:00 - issue with this is that we have all of
04:02 - the different values in our game
04:03 - hardcoded in for example we are setting
04:06 - the width and the height of the game by
04:07 - just putting in 800 and 600 we're
04:09 - determining the position of the player
04:11 - by dividing the width which is 800 and
04:13 - the height which is 600 notice that we
04:16 - use these values consistently throughout
04:17 - the program 600 here 800 here we now
04:21 - have a value like 50 you might not
04:23 - actually know what that is right away
04:24 - but this is actually the width of the
04:26 - player or the size of the player you can
04:27 - see we use that down here when we're
04:29 - actually drawing the player we have a
04:31 - color this is actually white which we're
04:33 - filling the screen with again you might
04:35 - not know that because we don't have it
04:36 - stored in a variable we have another
04:38 - color which is the color of the player
04:40 - we've got a bunch of hardcoded values
04:42 - even things like five here which is the
04:44 - velocity of the player so notice that
04:46 - it's very difficult for me at first
04:48 - glance to understand what all of these
04:50 - values are and if I want to change
04:52 - anything like the width of the screen
04:53 - the height of the screen the speed of
04:55 - the player I've got to change this in
04:57 - multiple places now this is a very
04:58 - simple example where we can get away
05:00 - with this but imagine we had code that
05:02 - was thousands of lines long and we were
05:04 - consistently using these values well it
05:06 - would be an absolute nightmare to change
05:08 - them to find them and to understand what
05:10 - they're doing so mistake number three
05:12 - here is using hardcoded values let's go
05:15 - to the fixed version of this code and
05:16 - you'll see how much better it looks so
05:18 - here's the fixed version notice at the
05:20 - beginning of the program I Define all of
05:22 - my constant values which previously were
05:25 - hardcoded first of all I now know what
05:27 - all of these values actually are it's
05:29 - very easy for me to change them in one
05:31 - location and as I read through the code
05:33 - it immediately becomes a lot more
05:35 - readable and easier for me to understand
05:37 - I now know what the player color is the
05:39 - background color I know that I have my
05:41 - height minus my player size I know the
05:44 - velocity is this value right here I know
05:45 - I'm dividing the width by two the height
05:47 - by two I know this is the width and the
05:49 - height I have my FPS like my frames per
05:51 - second it's just much clearer easier to
05:54 - understand and obviously something you
05:55 - should do in your code now we move to
05:58 - mistake number four again pause the
06:00 - video see if you can tell me what the
06:02 - mistake is well looking at this code
06:04 - here we can see that we have a bunch of
06:06 - different kind of conditions or criteria
06:08 - right we have income is student has
06:10 - coupon has membership Etc we then have a
06:13 - very complicated if statement which aims
06:15 - to tell us if a student is El eligible
06:17 - sorry or not eligible for a certain
06:19 - offer criteria whatever it may be now I
06:22 - challenge you read this and tell me what
06:25 - the criteria actually is for a student
06:27 - to be eligible now you probably can do
06:29 - that but it's going to take you a minute
06:31 - or two you're going to have to really
06:32 - look through this code it's a bit
06:34 - difficult to actually understand the
06:35 - reason for that is we're using a very
06:37 - complex Boolean expression that has a
06:39 - bunch of ands a bunch of ores a bunch of
06:41 - chain conditionals and it's just very
06:43 - confusing now it's really easy for us to
06:45 - clean this up by simply taking some of
06:47 - these more complex conditions and
06:49 - putting them inside of subconditions or
06:51 - variables that store a part of the
06:53 - condition let me show you what I mean so
06:55 - now have a look at this code it achieves
06:57 - the exact same thing as the previous
06:59 - code except it's much easier to
07:01 - understand now we've been very verbos
07:03 - here just for the purpose of the example
07:05 - but you can see that what I've done is
07:06 - broken all of the different conditions
07:08 - into variables that describe what they
07:10 - are for example are we an adult well
07:12 - that's the age greater than 18 are we
07:14 - High income that's the income being
07:16 - greater than 60,000 are we medium income
07:18 - well that's the income between 40 and
07:20 - 60,000 are we an eligible student you
07:22 - get the idea now some of these seem
07:24 - obvious we're writing them in a way
07:26 - where it's very clear to understand and
07:29 - any anyone reading our code would have
07:30 - no doubt what it's doing now to go a
07:32 - step further we have some more complex
07:34 - conditions right like eligible income
07:36 - well the eligible income is if we have a
07:38 - high income or this specific condition
07:40 - is true so we're kind of taking this
07:42 - condition and breaking it into smaller
07:44 - and smaller pieces so it's really easy
07:46 - to combine it together and understand
07:48 - what it's doing eventually we get down
07:50 - to the eligible offer and we can now
07:52 - read exactly what the eligibility
07:54 - criteria is it's if we're an adult we
07:56 - have eligible income and we have an
07:58 - eligible coupon we can understand that
08:00 - in a matter of seconds versus minutes
08:02 - with the previous code so moral of the
08:04 - story here is always break your complex
08:06 - conditions into smaller subconditions
08:08 - and then combine those with the
08:10 - variables that you have now we move on
08:12 - to the next dumb mistake which is a
08:13 - super simple one and this is unused
08:16 - Imports guys just remove your unused
08:18 - Imports if you're not using something
08:20 - don't have it in the code it makes it
08:22 - very confusing when you have a lot of
08:24 - imports or functions or parts of the
08:26 - code that aren't being used whether it's
08:28 - a variable class function import doesn't
08:31 - matter remove it if it's not being used
08:33 - you can always add it back you can
08:34 - always go and look at the G history you
08:36 - can comment it out if you really need to
08:38 - but preferably just completely remove it
08:41 - in this case you can see we're not using
08:42 - system we're not using radians we're not
08:44 - using random we're not using time if I
08:46 - were reading this code I might think
08:47 - that we're doing some more complex stuff
08:49 - that we're really not doing because we
08:51 - have all these Imports that aren't being
08:52 - used fortunately the IDE is bluring them
08:55 - out just to give you a quick example if
08:57 - we go here and we see what it looks like
08:58 - without the unused Imports a lot cleaner
09:01 - a lot easier to understand and just
09:03 - better code moving on to our last
09:05 - example we have unnecessary nesting have
09:09 - a look at this code here which is
09:10 - something that many of you have probably
09:12 - produced in your life often times we
09:14 - want to write complex conditions or we
09:16 - have a lot of different things to check
09:18 - what we end up doing is getting this
09:20 - huge chain of if statements it could be
09:22 - for Loops it could be many other things
09:23 - it could be functions classes whatever
09:25 - we end up getting really deep levels of
09:27 - nesting now it's very difficult to read
09:30 - this code maintain this code and change
09:32 - anything inside of it and it's really
09:34 - just unnecessary we don't need to write
09:36 - code in this fashion you can see that
09:38 - we're checking if data well if we have
09:40 - if data then we need to check if the
09:41 - name is in the data well if the name is
09:43 - in the data we need to check if we have
09:44 - a name then we need to check if it's
09:46 - Alpha then we need to check if it's in
09:47 - the right length you get the idea many
09:50 - beginner programmers think this is the
09:52 - only way to write code but let me show
09:53 - you an alternative style that removes
09:55 - all of these levels of nesting that make
09:57 - your code really complex and hard to
09:59 - understand let's pop this open and
10:01 - notice that I have the exact same code
10:03 - that achieves the exact same thing
10:05 - except I have no levels of nesting or
10:07 - very few in this instance now the way we
10:10 - can achieve that is by changing the way
10:12 - in which we think about checking
10:13 - conditions rather than checking if
10:15 - everything is true in that kind of
10:17 - chained nested statement we instead
10:19 - check all of the things that could be
10:21 - false or would result in us not reaching
10:23 - the condition or the end goal and then
10:25 - returning or exiting from the function
10:28 - so this case we say if not data then we
10:32 - simply return right we say okay no data
10:34 - was provided return next we get the name
10:37 - if we don't have a name we say the name
10:38 - is empty and we return so notice I'm
10:40 - checking all of the things that could be
10:42 - wrong and then if all these things are
10:44 - not the case that means I actually have
10:46 - the valid condition and I can go ahead
10:48 - and print out the valid name so this is
10:51 - just the opposite way of doing things
10:53 - right so you're checking it in the
10:54 - reverse order this allows you to exit
10:56 - the function early whenever you run into
10:58 - some potential issue and you don't have
11:00 - to have these huge levels of nesting I
11:02 - know this is a simple example obviously
11:04 - there can be more complex cases but I
11:06 - just wanted to show you that there's a
11:07 - different way of writing your code that
11:09 - removes those levels of nesting and
11:11 - whenever you find yourself having two
11:12 - three four five levels of indentation or
11:15 - nesting think about how you're writing
11:17 - it and if you can write it in another
11:18 - way that will make it more clear concise
11:20 - and have less nesting anyways that's
11:22 - going to wrap up this video don't forget
11:24 - to sign up for my free software
11:26 - development introduction course from the
11:28 - link in the description I hope you guys
11:29 - enjoyed if you did leave a like
11:31 - subscribe and I will see you in the next
11:34 - [Music]
11:41 - one

Cleaned transcript:

here are five dumb mistakes that wreck your code that unfortunately most of you are making not only will I show them to you but I'll also show you how to fix them in just a few seconds so stick around mistake number one is lack of consistency have a look at this code right here pause the video and take a guess at what I'm going to say is wrong with it some of them are obvious some of them not so much now if you haven't paused the video please go ahead and do that I'm going to run through a lot of the mistakes that you can see that might be a little bit subtle especially to a more beginner program let's start by having a look at the top of our code here where we have these two variables message one and message two now they seem Innocent but notice that we're using double quotation marks and single quotation marks now in a hobby project this is completely fine but when you get into larger code bases and working with other people you want to make sure you're always using the same type of quotation marks or the same type of variable names it doesn't really matter what you decide so long as you're always consistent inconsistency just makes really bad code it makes makes it hard to predict and it's something that we can easily avoid continuing let's look at this variable first of all notice that we have this user profile and we're using camel case now in Python you really should be using snake case like this anyways that's one inconsistency the other is with the different field names that we have inside of our dictionary notice that we have camel case we have snake case and then we have Pascal case we really should be using the same type throughout all of our different field names to make it more predictable on what the field names will be continuing we have a class here now notice in the class we have some inconsistency with our spacing we have no space separating these two methods but we have a space separating this one so what do we want to do simply add a space or add an indentation level quite simple okay let's go down here to our DB manager now this is completely fine we have a DB manager variable we call our connect method and then notice that we actually use the class to invoke this class method or this static method sorry and then we use the instance to invoke the static method again now this doesn't really make a lot of sense and again is an inconsistency we have a static method we can call it from either the class itself or from an instance in this case we're doing both one after another we really should just stick to one way I'd probably prefer to use the actual class itself so database manager but it doesn't matter what you want to do so long as you do it the same each time you do it continuing we have some variables X and Y now notice that we don't have a space between the equal sign we can really easily clean that up by adding it there next we have two constants one of which has a capital one of which is not in capitals so again doesn't matter what you decide to do here just do it the same every single time so the code is more predictable lastly we have a function here inside of the function we're returning two different types here we're returning an object here where we're returning a string this makes it more difficult to work with the return type and again it's not consistent or predictable now we get into mistake number two which is not registering for my free software development course which teaches you everything you need to get a software development job making 80k per year with no degree or experience required seriously this is completely free you can sign up for it from the link in the description it's about an hour long and breaks down everything you need to do completely from the beginning all of the things you need to learn the curriculum you need to follow and how you can break into the tech industry register from the link in the description completely for free seriously though that leads me into mistake number three which is this code here before I reveal take a second pause the video and see if you can tell me what's wrong with this code okay I assume that you've paused the video when we have a look at this code here we can see that we have hardcoded values now notice this is just a simple game if I actually were to run this code let's go here and run it python example 2. piy you can see that we can just move around and it's a little square on the screen okay a simple game in Python however the issue with this is that we have all of the different values in our game hardcoded in for example we are setting the width and the height of the game by just putting in 800 and 600 we're determining the position of the player by dividing the width which is 800 and the height which is 600 notice that we use these values consistently throughout the program 600 here 800 here we now have a value like 50 you might not actually know what that is right away but this is actually the width of the player or the size of the player you can see we use that down here when we're actually drawing the player we have a color this is actually white which we're filling the screen with again you might not know that because we don't have it stored in a variable we have another color which is the color of the player we've got a bunch of hardcoded values even things like five here which is the velocity of the player so notice that it's very difficult for me at first glance to understand what all of these values are and if I want to change anything like the width of the screen the height of the screen the speed of the player I've got to change this in multiple places now this is a very simple example where we can get away with this but imagine we had code that was thousands of lines long and we were consistently using these values well it would be an absolute nightmare to change them to find them and to understand what they're doing so mistake number three here is using hardcoded values let's go to the fixed version of this code and you'll see how much better it looks so here's the fixed version notice at the beginning of the program I Define all of my constant values which previously were hardcoded first of all I now know what all of these values actually are it's very easy for me to change them in one location and as I read through the code it immediately becomes a lot more readable and easier for me to understand I now know what the player color is the background color I know that I have my height minus my player size I know the velocity is this value right here I know I'm dividing the width by two the height by two I know this is the width and the height I have my FPS like my frames per second it's just much clearer easier to understand and obviously something you should do in your code now we move to mistake number four again pause the video see if you can tell me what the mistake is well looking at this code here we can see that we have a bunch of different kind of conditions or criteria right we have income is student has coupon has membership Etc we then have a very complicated if statement which aims to tell us if a student is El eligible sorry or not eligible for a certain offer criteria whatever it may be now I challenge you read this and tell me what the criteria actually is for a student to be eligible now you probably can do that but it's going to take you a minute or two you're going to have to really look through this code it's a bit difficult to actually understand the reason for that is we're using a very complex Boolean expression that has a bunch of ands a bunch of ores a bunch of chain conditionals and it's just very confusing now it's really easy for us to clean this up by simply taking some of these more complex conditions and putting them inside of subconditions or variables that store a part of the condition let me show you what I mean so now have a look at this code it achieves the exact same thing as the previous code except it's much easier to understand now we've been very verbos here just for the purpose of the example but you can see that what I've done is broken all of the different conditions into variables that describe what they are for example are we an adult well that's the age greater than 18 are we High income that's the income being greater than 60,000 are we medium income well that's the income between 40 and 60,000 are we an eligible student you get the idea now some of these seem obvious we're writing them in a way where it's very clear to understand and any anyone reading our code would have no doubt what it's doing now to go a step further we have some more complex conditions right like eligible income well the eligible income is if we have a high income or this specific condition is true so we're kind of taking this condition and breaking it into smaller and smaller pieces so it's really easy to combine it together and understand what it's doing eventually we get down to the eligible offer and we can now read exactly what the eligibility criteria is it's if we're an adult we have eligible income and we have an eligible coupon we can understand that in a matter of seconds versus minutes with the previous code so moral of the story here is always break your complex conditions into smaller subconditions and then combine those with the variables that you have now we move on to the next dumb mistake which is a super simple one and this is unused Imports guys just remove your unused Imports if you're not using something don't have it in the code it makes it very confusing when you have a lot of imports or functions or parts of the code that aren't being used whether it's a variable class function import doesn't matter remove it if it's not being used you can always add it back you can always go and look at the G history you can comment it out if you really need to but preferably just completely remove it in this case you can see we're not using system we're not using radians we're not using random we're not using time if I were reading this code I might think that we're doing some more complex stuff that we're really not doing because we have all these Imports that aren't being used fortunately the IDE is bluring them out just to give you a quick example if we go here and we see what it looks like without the unused Imports a lot cleaner a lot easier to understand and just better code moving on to our last example we have unnecessary nesting have a look at this code here which is something that many of you have probably produced in your life often times we want to write complex conditions or we have a lot of different things to check what we end up doing is getting this huge chain of if statements it could be for Loops it could be many other things it could be functions classes whatever we end up getting really deep levels of nesting now it's very difficult to read this code maintain this code and change anything inside of it and it's really just unnecessary we don't need to write code in this fashion you can see that we're checking if data well if we have if data then we need to check if the name is in the data well if the name is in the data we need to check if we have a name then we need to check if it's Alpha then we need to check if it's in the right length you get the idea many beginner programmers think this is the only way to write code but let me show you an alternative style that removes all of these levels of nesting that make your code really complex and hard to understand let's pop this open and notice that I have the exact same code that achieves the exact same thing except I have no levels of nesting or very few in this instance now the way we can achieve that is by changing the way in which we think about checking conditions rather than checking if everything is true in that kind of chained nested statement we instead check all of the things that could be false or would result in us not reaching the condition or the end goal and then returning or exiting from the function so this case we say if not data then we simply return right we say okay no data was provided return next we get the name if we don't have a name we say the name is empty and we return so notice I'm checking all of the things that could be wrong and then if all these things are not the case that means I actually have the valid condition and I can go ahead and print out the valid name so this is just the opposite way of doing things right so you're checking it in the reverse order this allows you to exit the function early whenever you run into some potential issue and you don't have to have these huge levels of nesting I know this is a simple example obviously there can be more complex cases but I just wanted to show you that there's a different way of writing your code that removes those levels of nesting and whenever you find yourself having two three four five levels of indentation or nesting think about how you're writing it and if you can write it in another way that will make it more clear concise and have less nesting anyways that's going to wrap up this video don't forget to sign up for my free software development introduction course from the link in the description I hope you guys enjoyed if you did leave a like subscribe and I will see you in the next one
