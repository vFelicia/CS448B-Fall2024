With timestamps:

00:02 - [Music]
00:08 - hello everybody and welcome to another
00:10 - youtube video so in today's video i'm
00:12 - going to be showing you how we can use
00:14 - python to automate excel specifically
00:16 - i'll be showing you how we can load an
00:18 - excel workbook how we can create a new
00:20 - one how we can modify the sheet names
00:22 - and select what sheet we're working on
00:24 - how we can look at the different cell
00:26 - values how we can create new cell values
00:28 - how we can style different cells merge
00:30 - cells and a lot of the just kind of
00:32 - common operations you want to do in
00:34 - excel now there's quite literally
00:35 - thousands of different things you can do
00:37 - with the module i'm going to show you
00:38 - how to use here obviously i won't be
00:40 - covering it all the point of this is
00:42 - just to get you up and running as fast
00:43 - as possible and show you kind of the
00:45 - most common and core operations that you
00:46 - need to know last thing i'll mention
00:48 - here everything that you can do in
00:50 - python in terms of like writing the code
00:52 - to automate excel you can do that
00:54 - manually in excel the reason you would
00:56 - do something like this is so that you
00:57 - can automate the creation of new
01:00 - workbooks or you can kind of search in
01:02 - workbooks for certain values or maybe
01:04 - you have an excel sheet and you want to
01:06 - read in that information into python and
01:08 - do something with that anyways you guys
01:10 - know your own use cases just wanted to
01:11 - tell you that anything you can do here
01:13 - you can do manually inside of excel so
01:16 - with that said let's get started after a
01:18 - quick word from our sponsor thanks to
01:19 - career karma for sponsoring this video
01:22 - career karma is a platform that helps
01:23 - connect learners like you to amazing
01:25 - boot camps and courses that help you get
01:27 - job ready for careers in tech i actually
01:29 - know some of the founders of this
01:31 - platform and have had the privilege of
01:32 - chatting with them about growing the
01:34 - program and community and helping people
01:36 - jumpstart their careers in tech if
01:38 - you're looking to be a web developer
01:39 - data scientist ux or ui designer
01:42 - whatever it is career karma can help you
01:44 - get into some great boot camps boot
01:46 - camps are really a great way to get
01:47 - hands-on experience and a lot of them
01:49 - are actually very flexible and don't
01:51 - charge you anything until you get a job
01:53 - you can join live audio rooms on the
01:55 - career karma app to speak with coaches
01:57 - and mentors who just got their first
01:59 - tech job you can download the career
02:01 - karma mobile app for free or check them
02:03 - out from the link in the description to
02:05 - help you get started the first thousand
02:07 - of my subscribers will get a free career
02:09 - coaching session with a career karma
02:11 - coach thanks again to career karma for
02:13 - sponsoring this video so the first thing
02:15 - we need to do when we want to start
02:16 - working with excel and python is we need
02:18 - to install a python module called open
02:21 - pi xl i'm going to assume you already
02:23 - have python installed on your system if
02:25 - you do then what you need to do is open
02:27 - up terminal or command prompt depending
02:29 - on the operating system you're on and
02:31 - type the following command you're going
02:32 - to type pip
02:34 - install
02:35 - and then open pi xl
02:38 - go ahead and press enter and that should
02:40 - install the module that you need you can
02:41 - see for me it's already installed now
02:43 - for some reason this doesn't work for
02:44 - you specifically if you're on mac try
02:46 - the command pip 3 install open pi excel
02:49 - linux as well try pip3 if pip3 doesn't
02:52 - work then what you can do is try python
02:55 - hyphen m pip install open pi excel and
02:58 - if that doesn't work you can try python
02:59 - 3
03:00 - hyphen m pip install open pi excel if
03:03 - none of those work for you you're
03:04 - getting errors or it's saying this
03:05 - command doesn't exist or something then
03:07 - i'll leave two videos in the description
03:09 - that you can click on one for windows
03:10 - one for mac linux that will show you how
03:13 - to fix this command anyways i'm gonna
03:15 - assume at this point in time that you
03:16 - have now installed open pi excel so now
03:18 - we're just going to make sure our
03:19 - installation is working so open up some
03:21 - text editor doesn't matter what you're
03:22 - using i'm going to use sublime text for
03:24 - this video and try to import open pi xl
03:28 - now before i do this i'll just quickly
03:30 - note my kind of directory structure here
03:32 - so i'm inside of a folder that i've
03:33 - opened up in sublime text this is on my
03:36 - desktop inside of here i have an excel
03:38 - spreadsheet called grades.xlsx
03:41 - i have my tutorial.pi file this kind of
03:43 - a cheat sheet i'm looking at on my right
03:44 - monitor i have my working.pi file which
03:47 - is the one i'm going to work in and then
03:49 - this is kind of a temporary file that's
03:51 - created when i open this spreadsheet
03:53 - inside of excel
03:55 - anyways don't worry about that but just
03:56 - notice that all of my spreadsheets are
03:58 - in the same directory as my python files
04:01 - that's important and i'll discuss why in
04:02 - a second regardless though you need to
04:04 - run this file now once you have
04:06 - import.openpi excel obviously in a dot
04:08 - pi file i'm going to run this and notice
04:11 - that i get finished there was no error
04:12 - that popped up and that means that all
04:14 - was good now if this doesn't work make
04:16 - sure you're using the correct python
04:17 - interpreter
04:18 - and make sure again that you've
04:19 - installed open pi excel so now the pi
04:22 - excel is installed what i'm going to do
04:24 - is import something called workbook
04:25 - which we need to use to open an existing
04:28 - workbook so i'm going to say from
04:30 - and then open pi excel and actually what
04:32 - i'm going to do
04:33 - is import two things the first thing is
04:35 - workbook the second is i got to look at
04:38 - my cheat sheet here load underscore
04:40 - workbook okay so these are two things
04:43 - that we're going to use to either create
04:45 - a new workbook or to load an existing
04:47 - workbook so the first thing you need to
04:49 - do whenever using this module is you
04:50 - need to instantiate a workbook now again
04:52 - that workbook can be a brand new one or
04:54 - it can be one that already exists so
04:56 - what i'm going to do here is say wb
04:58 - standing for workbook is equal to and
05:00 - then i'm going to load an existing
05:02 - workbook so
05:03 - load workbook like that and then i need
05:05 - to put the path to the file of the
05:07 - workbook that i want to load so since
05:10 - this file is in the same directory as my
05:12 - python script i just need to put the
05:13 - name of the file so i can say grades.x
05:16 - lsx now it's worth noting that this
05:19 - module here only works with python or
05:21 - sorry not python excel spreadsheets that
05:23 - are version 10 or above so i believe
05:25 - that's like the 2010 version of excel or
05:27 - above and so the file extension must be
05:29 - this you cannot use the file extension
05:31 - xlsb
05:32 - which i think some people have i'm not
05:35 - quite sure about that but just make sure
05:36 - the extension is xlsx otherwise you will
05:38 - get an error okay so just a quick note
05:40 - here again the reason i can load it just
05:42 - this way is because that's the name of
05:44 - the file it's in the same directory if i
05:46 - created a new folder here so maybe i
05:47 - made a folder uh no i don't want to
05:49 - delete the folder i want to make a new
05:51 - folder make a new folder and just call
05:53 - it test and i put a spreadsheet inside
05:55 - of here then what i would have to do is
05:56 - test slash
05:58 - grades.xlsx you're typing the path from
06:01 - wherever your python script is now if
06:04 - for some reason this script was not in
06:06 - the same directory or any subdirectories
06:08 - within the current directory of the
06:10 - python script you would just type the
06:12 - absolute complete path to it so
06:14 - something on windows like c colon slash
06:17 - and then you know users slash tim slash
06:20 - desktop slash python whatever slash and
06:24 - then wherever the workbook was but here
06:27 - again this is in the same directory so i
06:28 - can access it with grades.xlsx
06:31 - now what i'm going to do is just close
06:33 - this because you cannot open a workbook
06:35 - if it's already open in excel you will
06:37 - get a problem and so now i'm going to
06:39 - run this and you're going to see that i
06:40 - don't get a problem all is good which
06:42 - means we were able to load this workbook
06:45 - now what i'm going to show you is how we
06:46 - can get the sheets from a workbook so
06:49 - this workbook right here only has one
06:51 - sheet
06:52 - but obviously excel workbooks can have
06:54 - multiple sheets and so you need to
06:55 - decide what sheet you're using and
06:57 - modify that sheet so i'm going to say ws
07:00 - standing for worksheet is equal to wb
07:04 - which is our workbook now that we've
07:05 - loaded in dot active
07:07 - now what this gives me is the active
07:09 - worksheet from this workbook so now if i
07:12 - print ws
07:14 - and i run this you're going to see that
07:16 - we get worksheet it's called grades
07:18 - there you go
07:19 - okay so now that we have that what i'm
07:21 - going to do is show you how we can
07:22 - access cell values from this worksheet
07:25 - so let me actually just open up excel
07:27 - again
07:28 - and let's see
07:29 - okay let's open up grades
07:31 - and notice that here uh we have some
07:33 - student names
07:34 - and we have their grades so the first
07:36 - thing i'll show you is kind of how we
07:38 - can access an individual cell value
07:40 - let's start with a1 to do that is really
07:42 - straightforward you can simply print out
07:44 - the worksheet
07:46 - at and then a1 now when you do this it's
07:49 - going to give you a cell and then if you
07:52 - want to actually look at the value of
07:53 - this cell you have to say dot value
07:56 - if you look at this it will give you the
07:58 - value which in this case is name so
08:00 - actually lied sorry when you're opening
08:01 - an existing workbook uh you can open one
08:04 - while it's open in excel what i meant to
08:06 - say is that you cannot modify the
08:08 - existing workbook while it's open in
08:10 - excel at least i'm pretty sure i think
08:12 - you'll probably get an error if you try
08:13 - to do that regardless what you can see
08:15 - here is that it says name obviously the
08:17 - value at a1 is name and so this is
08:19 - working just fine so now if i want to
08:20 - look at the value at a2 of course i
08:22 - could just change this to a2
08:24 - and then you can see we get the value
08:26 - jump so there you go that's as easy as
08:28 - it is to actually look at the value of a
08:31 - cell in a workbook now if you wanted to
08:33 - change the value what you could say is
08:35 - ws at and then something like a2 and
08:38 - then you could say value is equal to and
08:40 - then change it to whatever you want so
08:42 - in this case maybe i'll change this to
08:44 - test
08:45 - so if i do this
08:47 - now when i run this you'll actually see
08:50 - okay it finished that it did not change
08:52 - in excel the reason it didn't change in
08:54 - excel is because i did not save this
08:56 - workbook
08:57 - so if i do make a change here i need to
08:59 - save this workbook manually to a file
09:02 - name before it will actually take effect
09:04 - and so what i can do to save the
09:06 - workbook is
09:07 - dot save and then the name of the file i
09:09 - want to save this to so i can say grades
09:12 - dot xlsx now you'll see what happens
09:15 - here when i try to save this when i run
09:17 - this and i try to save it notice we get
09:19 - an error now i can't see exactly what
09:21 - the error is let's say right here
09:23 - it doesn't quite say but the problem is
09:25 - that this file is already open and so i
09:27 - can't save to a file that's already open
09:28 - so i need to close this
09:30 - so i'm going to close that and then i'm
09:32 - going to try and now you can see it
09:34 - actually does work so now i've saved to
09:36 - grades xlsx
09:37 - if i open up excel
09:39 - and i look at grades we can see that
09:41 - we've changed this name here to be test
09:44 - uh in uh what do you call it a2
09:47 - so there you go that's kind of the
09:48 - basics of opening and loading a workbook
09:51 - okay so now what i'm going to do is show
09:52 - you some operations related to sheets so
09:55 - what i've done is i've created a few new
09:56 - sheets here inside of this excel file so
09:58 - grade sheet 1 sheet 2 and sheet 3. now
10:01 - i'm going to show you how we can get
10:03 - these other sheets because right now i'm
10:04 - just showing you how to get the active
10:06 - sheet and obviously sometimes you want
10:07 - to access different sheets or maybe even
10:09 - create new sheets in a workbook i'll
10:10 - show you how to do all of that first
10:12 - thing to mention here though is that i
10:13 - kind of lied when i said that you had to
10:15 - use dot value to assign a value to a
10:17 - cell you can actually just do ws at a2
10:20 - is equal to the value that will work as
10:22 - well however when you are accessing you
10:24 - do need to use dot value
10:26 - okay so now what i'll show you how to do
10:28 - is get different sheets
10:30 - so the first thing we can do here let me
10:31 - get rid of this save command
10:33 - is we can print all of the sheets in a
10:35 - workbook so i can say wb
10:37 - dot and then sheet
10:39 - names like that and what this will do is
10:42 - show me all of the sheets you can see we
10:43 - have grades sheet 1 sheet 2 and sheet 3.
10:46 - now if i want to access a specific sheet
10:48 - what i can do is say wb and then use
10:50 - this kind of syntax right here and
10:53 - inside put the name of the sheet i want
10:54 - in this case maybe sheet1
10:56 - and when i do that you're going to see
10:58 - it gives me the worksheet named sheet 1.
11:00 - so that's how you access different
11:02 - worksheets i would then say ws is equal
11:04 - to if i didn't want the active sheet
11:07 - say sheet1 and that would mean now i'm
11:08 - doing all of my modifications or
11:10 - accessing with ws on sheet 1. now you
11:14 - can create new sheets as well so to
11:16 - create a new sheet what you can do is
11:18 - use the function which is called create
11:21 - sheet just have to look at my cheat
11:23 - sheet there so i can say wb.create
11:25 - underscore sheet i can say maybe we'll
11:27 - call this test and then what i can do is
11:30 - print out all the sheet names to make
11:31 - sure this worked so wb
11:33 - dot sheet names so let's run this
11:37 - and we can see that now we have another
11:38 - sheet named test now of course that's
11:41 - not going to update in here unless we
11:42 - actually save this workbook which i'm
11:44 - not doing right now i just wanted to
11:45 - show you how you can work with and
11:47 - access the different sheets all right so
11:49 - i've cleared the screen we're now going
11:51 - to create a brand new workbook and then
11:53 - what we're going to do is write in a
11:55 - bunch of cells and some information just
11:56 - so you can see how that works so to
11:58 - create a new workbook what you can do is
11:59 - say wb is equal to workbook
12:02 - this now initialized a new workbook now
12:05 - we need to get the worksheet so we're
12:07 - going to say ws is equal to wb.active
12:10 - this will just give us kind of the
12:11 - default sheet that's created whenever
12:13 - you create a workbook by default there's
12:15 - always one now let's change the title of
12:17 - this sheet so i'm going to say title is
12:19 - equal to data and now what i'm going to
12:22 - do is start writing in some information
12:24 - so of course what i could do is go you
12:26 - know ws at
12:28 - a1 is equal to and then ws at and you
12:31 - know b1 is equal to but that's not very
12:34 - efficient and well i don't really want
12:35 - to do that that's going to take a really
12:36 - long time so instead there's a few
12:38 - useful commands that we can use to
12:40 - insert a lot of data at once
12:41 - specifically rows of data so of course
12:44 - you can assign values like i was showing
12:46 - you there what you can also say is
12:48 - ws.append and you can append a python
12:51 - list of information so in this case i'll
12:52 - just say tim
12:54 - is
12:56 - great
12:57 - and then we'll do an exclamation point
12:58 - like that and we'll just keep the quotes
13:00 - consistent so if i do this now and now i
13:03 - decide to save the workbook so wb.save i
13:06 - need to give it a name let's give it
13:08 - tim.xlsx
13:10 - and i run this you're going to see all
13:13 - is good here and now if i go to open
13:15 - this worksheet or workbook i'm going to
13:17 - keep mixing up those names let's go
13:18 - browse let's open up tim
13:22 - you can see we have tim is great
13:24 - exclamation point
13:26 - in the uh kind of corresponding rows so
13:28 - that's appending meaning adding to the
13:31 - end of the worksheet so if i go here
13:34 - and i append this a few times and we can
13:36 - just kind of change this maybe to be
13:38 - like
13:39 - end just so that we can see the
13:41 - difference here
13:42 - now if i close this
13:45 - and i rerun this
13:47 - so i've just saved the document again
13:48 - let's go file
13:50 - let's open
13:51 - browse let's open tim
13:54 - okay we can see that we've added four
13:56 - rows of data and then the last thing
13:57 - that we added right is end and so that's
13:59 - going to be the last row in our
14:00 - spreadsheet so this is just appending to
14:02 - the end of the workbook now if i were to
14:06 - open this existing workbook and append
14:08 - it would add to the end of the existing
14:09 - data that is there but since we're
14:11 - creating a new workbook every time here
14:13 - kind of that's why what's happening is
14:16 - happening we only have five lines every
14:17 - time because while we're initializing a
14:18 - brand new workbook and then overriding
14:20 - the existing one that's already created
14:22 - okay so now that we know how to append
14:24 - rows of information to our excel
14:26 - spreadsheet what i'm going to do is show
14:28 - you how we can kind of loop through
14:29 - different cells in the spreadsheet so
14:31 - rather than actually just appending a
14:33 - bunch of them i'll show you how we can
14:34 - access and at the same time if we wanted
14:36 - to modify different cell values in a
14:38 - specific range now this example here i'm
14:41 - going to show you how we can loop
14:42 - through different rows and columns this
14:44 - is kind of just general python knowledge
14:46 - you can do this in any way that you want
14:48 - but i just want to show this to you in
14:49 - case you're unaware of how to do this so
14:51 - let's say instead of creating a new
14:52 - workbook i actually want to open the one
14:54 - that i just created so i'm going to have
14:55 - this function now load workbook
14:58 - and i'm going to load in what do we call
15:00 - this tim.x
15:02 - xlsx okay
15:04 - so now we won't bother changing the
15:06 - title what we will do though is we'll
15:08 - loop through this this cell data so to
15:11 - do this i'm going to say 4i in range and
15:13 - actually let's make this better let's
15:14 - say four row in range
15:17 - i'm going to loop in range 1 to 11. now
15:19 - what this really means is i want to look
15:21 - at row 1 through 10 because 11 is the
15:24 - end of the range and so we won't
15:25 - consider row 11. we'll start at row 1
15:27 - we'll go up to 10 and then we'll stop as
15:29 - soon as we're done row 10.
15:31 - then what i want to do is pick what
15:32 - columns i want to loop through so if you
15:34 - go here right all of the rows are
15:35 - numeric all of the columns are letters
15:37 - and so i need to pick how many columns
15:39 - now in this case i'm going to say 4 and
15:41 - we'll say call in range and i just want
15:43 - to loop through 4 columns so i'm going
15:45 - to start at 1 and i'm going to go to 5.
15:48 - okay so now what i want to do is i
15:49 - actually want to get kind of the cell
15:52 - reference for this row and for this
15:54 - column so i have my row in this for loop
15:57 - i have a nested for loop doing the
15:59 - columns but this nested for loop for the
16:01 - columns is giving me an integer 1
16:03 - through 4. it's not giving me a b c or d
16:06 - so how do i get it so that every time i
16:08 - get inside of this for loop here i have
16:09 - something like a2 a3 a4 so on and so
16:13 - forth right and then you know b2 b3 b4
16:16 - because essentially what's going to
16:17 - happen here is for every row we're going
16:19 - to loop through all of the columns that
16:20 - we want and we need to get kind of these
16:22 - unique identifiers so to do that we can
16:24 - actually use a function here which will
16:26 - give us the kind of character that's
16:29 - represented by the column that we have
16:32 - now we can do this manually the manual
16:34 - way would be to say char is equal to and
16:36 - then chr of 65 plus call
16:40 - now what this does is gives us the
16:42 - character represented by an integer now
16:44 - 65 represents the integer uppercase a
16:48 - and so actually we would then have to
16:49 - change this range to be 0 4 because 65
16:53 - plus call 0 would be a 65 plus call 1
16:56 - would be b 65 plus call 2 would be
16:58 - capital c and so on and so forth that's
17:01 - what this function char does it takes
17:02 - some integer and gives us the character
17:04 - representation of it just so happens
17:06 - that 65 is uppercase a and then you can
17:08 - kind of go on from there and you can
17:09 - figure out what the rest of the letters
17:11 - are anyways that's the manual way now if
17:13 - we didn't want to do that manually what
17:14 - we could do is use the function from
17:16 - this open pi excel function which is the
17:18 - following so this function is called get
17:20 - column letter and the way you use it is
17:23 - get underscore column underscore letter
17:25 - you need to import it from open pi xl
17:28 - and actually it's not just from
17:30 - openpixel it's from something else so
17:31 - i'm going to copy this line i'm going to
17:33 - say from open pi excel dot and then this
17:36 - is utils i'm going to import get
17:39 - underscore column underscore letter and
17:41 - then what this function does is take an
17:43 - integer between 1 and 26 and gives you
17:46 - the character representation of it so 1
17:48 - obviously being a
17:49 - and then i mean you guys know the rest
17:51 - so now if i change this range to 1 and 5
17:53 - and i get the column letter of call this
17:55 - will give me the character represented
17:58 - by whatever this column number is so now
18:00 - what i can do is i can print out all the
18:02 - different cell values by doing the
18:03 - following thing i can say print
18:06 - and then i can say ws
18:08 - at and then i need to kind of combined
18:10 - this character with this row and there
18:13 - is a function in open pi excel that does
18:15 - this but i find it's easier just to do
18:16 - it manually so what i'm going to do is
18:18 - say char plus string of row so what this
18:22 - will do is give me whatever the
18:23 - character is so abc blah blah plus and
18:25 - then whatever the row is so 1 2 3 4 all
18:27 - the way up until 10. so this should give
18:30 - me all of the values that are in this
18:32 - excel spreadsheet and i don't want to
18:33 - save this let's run this and let's see
18:36 - what we get so notice we get a bunch of
18:37 - cells
18:38 - so we get a1 b1 c1 d1 a2 b2 c2 so on and
18:42 - so forth but we have not looked at the
18:44 - values so sorry i have to do dot value
18:46 - here and then this will actually give us
18:47 - what the value is
18:49 - so in this case you can see we have tim
18:51 - is great tim is great tim is great and
18:52 - then a bunch of nuns because well
18:54 - obviously nothing is in all those other
18:56 - cells that we looked at now if i change
18:58 - this workbook to be grades
19:01 - and we run this you're going to see we
19:02 - get some different data
19:04 - so
19:05 - what is grades empty i guess we must
19:07 - have accidentally cleared grades for
19:08 - some reason so i guess there's nothing
19:10 - in there uh but anyways you get the idea
19:12 - this does work i guess grades uh we we
19:14 - must have emptied somehow or maybe
19:16 - because it's open oh yeah it is empty uh
19:19 - or are we not looking at the right sheet
19:20 - in grades or something you know i don't
19:22 - know exactly why grades isn't working
19:24 - but for some reason i think we're on the
19:25 - wrong sheet and so was it giving us the
19:26 - wrong information okay so regardless
19:28 - that works that's how you can kind of
19:30 - loop through the different values in an
19:32 - excel worksheet you can loop through the
19:34 - rows and the columns in this kind of
19:36 - fashion here using this nested for loop
19:37 - structure you can get the column letter
19:39 - by importing that from open pi excel and
19:42 - then you can do this kind of combination
19:43 - of combining the character with the row
19:46 - and then that will actually allow you to
19:47 - access all of those different cells and
19:49 - of course we could change these cells as
19:50 - well in fact maybe we should do that
19:52 - let's say ws and then char plus string
19:55 - row is equal to and let's just make this
19:57 - equal to
19:58 - actually we can make it equal to this
20:00 - itself ws or char plus string row just
20:04 - so we can see how this works so let's
20:06 - run this we do need to save this
20:08 - worksheet so our workbook so wb.save
20:11 - and let's save this tim.x
20:14 - xlsx
20:15 - we now need to close tim okay so close
20:18 - that and let's run
20:21 - do we get any problems here no it looks
20:22 - like everything is good and now if i go
20:25 - and open this so file let's open tim you
20:27 - can see that we're getting kind of their
20:29 - corresponding positions in the cells and
20:31 - so that does indeed work okay so next
20:34 - thing i'll show you here is how we can
20:35 - merge cells together and then after that
20:38 - i'm going to show you kind of a in-depth
20:40 - example of how we can write some data
20:42 - into an excel spreadsheet and style the
20:44 - cells and all of that fun stuff okay so
20:45 - merging cells is actually really easy to
20:47 - do all you have to do is say ws dot
20:50 - merge underscore cells and then what you
20:52 - need to do is pass a range of cells that
20:54 - you want to merge so in this case i
20:56 - could pass a 1 2 and then i guess we
20:58 - would do d4 or sorry d1 and this would
21:02 - then merge the cells from a1 to d1 so
21:04 - just like you would do in excel when
21:06 - you're kind of typing out a range it's
21:07 - the exact same thing here when you're
21:09 - merging cells you pick the range of the
21:11 - cells you want to merge
21:12 - and then well it will merge them so let
21:14 - me make sure tim is closed it is so
21:16 - let's run this and let's see if we get
21:17 - any issues looks like everything is good
21:20 - so now if i go file
21:21 - open and we open tim you can see that
21:24 - we've merged these cells together and it
21:26 - kept the data from the first cell got
21:28 - rid of the data from the rest of the
21:30 - cells
21:31 - now let me close this to unmerge cells
21:33 - is kind of the just opposite of what i
21:35 - showed you here we can say ws dot and
21:37 - then on
21:38 - merge underscore cells and then the
21:41 - range of the cells you want to unmerge
21:43 - so a1 to d1 i think that's correct yes
21:46 - it is so let's run this now
21:48 - and
21:50 - all is good if we go here and we go file
21:52 - and we open tim
21:54 - we can see that we have now unmerged
21:55 - those cells but we did lose the data
21:57 - that was in them previously obviously we
21:59 - have no way of getting that back
22:01 - now you could do this to like say d2 and
22:04 - then it would actually merge kind of
22:06 - like a square region rather than just
22:07 - like one row or sorry rectangular region
22:09 - but it would be more than one row so
22:11 - let's just try this merge cells a1 to d2
22:15 - okay now if we go file
22:17 - and open and we open tim you can see
22:20 - that now it merged kind of the first two
22:22 - rows together okay so now what i'm going
22:23 - to do is show you how we can copy and
22:25 - move portions of the worksheet i will
22:28 - also show you how we can insert empty
22:29 - rows and delete rows so let me get rid
22:32 - of this merge cells first thing i'll do
22:34 - is show you how we actually insert an
22:35 - empty row this is really easy you can
22:36 - say ws dot insert then you can insert
22:40 - this at whatever position you want so
22:41 - let's say i want to insert a row at
22:43 - position seven this means we're going to
22:45 - insert an empty row after row seven so
22:48 - we could do this twice and now if i make
22:51 - sure tim is close it is and i run this
22:54 - okay oh what's the problem here ws dot
22:57 - insert uh worksheet object has no
22:59 - attribute insert oh sorry this is insert
23:02 - underscore rows that's my bad insert
23:04 - underscore rows okay so now let's try
23:07 - this
23:08 - and okay that's all good so now we can
23:10 - open so file open tim and notice that we
23:13 - have kind of two blank rows now here
23:15 - because we inserted now in the same way
23:18 - we can delete rows we can say ws dot
23:20 - delete rows and we could delete at row
23:23 - seven
23:24 - so let's see what happens now if we
23:26 - close tim and we try to do this
23:29 - okay no problem let's go file and let's
23:32 - open tim and now you can see we deleted
23:34 - one of those empty rows okay so in the
23:36 - same way that we could insert rows we
23:38 - can also insert columns so i can say ws
23:41 - dot and then insert underscore calls i
23:44 - can pass to this the column at which
23:46 - after i want to insert an empty column
23:47 - so i could say b
23:49 - and then oops do me to do that if i run
23:51 - this we can see we're getting a problem
23:53 - here what is it saying a string object
23:56 - cannot be interpreted as an integer okay
23:57 - so that means that instead of passing b
23:59 - we would need to pass two i wasn't sure
24:01 - if this took any string or it took in
24:03 - the integer and so rather than giving it
24:05 - you know a b c d you would give it one
24:06 - two three so let's give it two
24:09 - when we do this okay all is good so
24:11 - let's go file let's open and let's open
24:15 - tim and then notice that we inserted
24:16 - this empty column here in column b
24:20 - awesome and sorry i guess i was saying
24:21 - after this comment inserts it sorry it
24:24 - inserts at that column that's my bad
24:26 - okay now that we've inserted the call we
24:28 - can do the same thing we can delete it
24:30 - so we could say delete calls and we can
24:32 - delete two so let's close this
24:36 - and let's run this
24:38 - okay now if we go file and we open tim
24:42 - we can see that empty column is now gone
24:43 - and it shifted all of those other
24:45 - columns after
24:46 - now we're sorry back to where they were
24:48 - before okay so now what we can do is we
24:50 - can actually shift a range of cells so
24:52 - let's say we want to take all of these
24:54 - cells in maybe the c and the d column
24:56 - and we want to move those over to be an
24:58 - e and f well to do that is pretty
25:00 - straightforward we can use the function
25:03 - move underscore range now move
25:05 - underscore range takes a range and so i
25:07 - guess the range that we would have here
25:09 - would be c1 to d11 so we're going to say
25:13 - c1 to d11
25:15 - and then we need to
25:16 - pick how many columns over and how many
25:18 - rows we want to move it by so i can say
25:20 - rows
25:21 - equals and then i can move this say up
25:23 - one row to do that i would say negative
25:24 - 1 that means go up 1. if i made this two
25:27 - this would move it down two rows so
25:29 - let's actually leave it at two and then
25:30 - for columns same thing if i wanted to
25:32 - move it to the left i would say you know
25:33 - negative two to move it over two columns
25:35 - if i wanted to move it to the right i
25:37 - would just put a positive number for the
25:38 - number of columns the right
25:40 - i wanted to move it so in this case
25:41 - we'll just do rows two calls two let's
25:43 - save that let's close tim
25:46 - let's rerun
25:48 - uh we don't get any problems that's
25:49 - great let's open this again
25:52 - and then notice that we've kind of
25:53 - shifted this over and moved that range
25:55 - of cells all right so that's all i had
25:57 - to show you for kind of the core
25:58 - operations now we're going to bring all
26:00 - of this stuff together and i'm going to
26:01 - show you how we can write some data into
26:03 - kind of a new excel spreadsheet all
26:05 - right so i've just pasted a bunch of
26:06 - data here you can see it says data i
26:08 - have a bunch of names these are the
26:10 - names i was using in that grades
26:11 - spreadsheet that you saw i'm going to
26:13 - show you how we can create that grade
26:15 - spreadsheet so if you look at this here
26:16 - you can see we have bolded names we have
26:17 - all the names here we have all of the
26:19 - grades and then we computed the averages
26:21 - of all of these grades down here i'm
26:22 - going to show you exactly how we can
26:24 - create this using simply python code and
26:26 - so if you want to take this code i will
26:27 - leave a link to it in the description it
26:29 - should be a github repository and well
26:32 - it's going to have all this data that
26:33 - you can copy and all of the finished
26:35 - code as well so we're going to keep
26:36 - these imports up here however i am going
26:38 - to import one more thing that we're
26:40 - going to use to actually style our cells
26:42 - i'm going to say from open pi xl dot
26:45 - styles
26:46 - import font and i'll show you how we can
26:48 - use this kind of font object to modify
26:50 - and make you know bold and italic cells
26:52 - and change the color and all that okay
26:54 - so we have all of this data and again
26:56 - what i want to do is write it into the
26:57 - spreadsheet so the first thing i need to
26:59 - do is write kind of the headings right
27:00 - so we had name
27:02 - actually i guess i can just show you
27:03 - let's look at it here name math science
27:05 - english gym all of that so if we want to
27:07 - write all of the headings well first we
27:08 - need to actually create a new workbook
27:10 - so i'm going to say w b is equal to
27:13 - workbook i'm going to say ws is equal to
27:17 - wb
27:18 - dot active and then let's change the
27:19 - name so ws.title
27:22 - is equal to grids
27:24 - awesome so now that we have the
27:25 - worksheet let's write in our headings so
27:27 - i'm going to say headings is equal to a
27:29 - list and this is going to be name
27:32 - and then i want to get all of the
27:34 - different subjects here so rather than
27:36 - manually writing out these subjects what
27:38 - i'm going to do is kind of grab them
27:39 - from my data so i'm going to say
27:41 - data
27:42 - and then this is going to be at joe i'm
27:44 - just picking an arbitrary student so i'm
27:46 - picking joe i could pick build tim
27:48 - whatever i want and i'm going to get all
27:49 - of these keys here that are inside of
27:52 - this dictionary store by jump so i'm
27:54 - going to say data add joe dot and then
27:57 - keys now i'm going to convert this to a
27:59 - list so i'm going to say oops no this is
28:02 - not exactly what i wanted to do we're
28:03 - going to do this name and then plus data
28:07 - at joe dot keys we'll see if that works
28:10 - but what this should do is combine this
28:11 - list with the list returned of all of
28:14 - the keys that are inside of joe so that
28:15 - should give us math science english and
28:17 - gym okay so now we have our headings so
28:19 - let's append this into the work
28:21 - worksheet i'm going to say ws.append and
28:24 - i will append headings
28:26 - and now that i have all of my headings i
28:28 - want to start adding all of my students
28:30 - so i want to loop through all of my
28:31 - students here and i want to well add
28:33 - them into the workbook so i want to have
28:34 - their name and i want to have
28:36 - all of the different grades that they
28:38 - have for each subject
28:40 - so to do this i am going to say
28:43 - let's go for
28:45 - person in data
28:48 - and then we're going to say that their
28:50 - grades are equal to and this is going to
28:52 - be data
28:53 - at
28:54 - person
28:56 - now what i'm going to do is get all of
28:57 - the values here so i'm going to say
28:58 - grades is equal to data at person
29:02 - dot values so what this gives me is
29:04 - instead of all of the keys which would
29:06 - be math science english and gym gives me
29:07 - all the values so 65 78 98 and 89. now
29:11 - what i'm going to do is say ws dot
29:14 - append and i'm going to append the name
29:16 - of the person which in this case is
29:17 - going to be person plus and then their
29:20 - grades
29:21 - so what i will end up writing and we can
29:22 - look at this as an example is whatever
29:24 - the person's name is and then all of
29:26 - their grades will come after in all of
29:28 - the subsequent rows okay so let's test
29:30 - this first before we go any further so
29:32 - let's save this workbook wb.save
29:35 - and let's save this as new
29:38 - grades.xlsx okay let me just close tim
29:41 - we don't need that anymore
29:43 - let's run this and let's see if we get
29:45 - any problems and we says we do get a
29:46 - problem concatenate can only concatenate
29:49 - list not keys and so what that
29:51 - means is we need to convert this to a
29:52 - list it's not just my bad
29:55 - i guess this is not a list type by
29:56 - default but we can convert it to a list
29:58 - by doing that and then we're probably
29:59 - going to have the same issue here with
30:00 - values so let's do that again and make
30:03 - this a list okay so now that we've done
30:06 - that let's run
30:08 - and there we go we don't get any issues
30:09 - let's now open this file so file open
30:13 - browse
30:14 - and new grades
30:16 - okay so there you go we can see we have
30:17 - name math science english gym we have
30:19 - all of the names and we have all of the
30:21 - grades in the correct categories
30:23 - awesome and let me make sure this is in
30:25 - the correct category
30:26 - 100 160 okay 30 25 45 100 okay i'm
30:31 - satisfied looks good okay so now that we
30:33 - have that what i want to do is calculate
30:35 - the average of all of these grades so
30:37 - really of all of these columns now the
30:39 - columns that i want to calculate the
30:40 - average for is oops that's the wrong
30:42 - document here is column b c d and e and
30:46 - so what i'm going to do is set up a for
30:47 - loop i'm going to say 4 and we'll say
30:49 - call in range and then this will be in
30:52 - range 2 because we want to start at
30:53 - column b and this will go to and then
30:56 - rather than doing this statically by
30:58 - just typing in the number 6
31:00 - i will actually type in
31:02 - what is it a dynamic thing that gives me
31:04 - the number of subjects that are here so
31:06 - i'm going to say 2 and this is going to
31:08 - be the len of and this will be
31:12 - data joe
31:14 - i'm just picking joe because that's
31:15 - going to give me all of the subjects
31:16 - here and then i will add
31:20 - 2 to this the reason i'm adding 2 to
31:22 - this is since we're starting at column 2
31:24 - i want to go what however many subjects
31:26 - we have more than column 2 and so i add
31:29 - 2 to that at the end and what this will
31:30 - give me is 4 plus 2 it should be 6 so my
31:32 - range will be 2 6 which means we'll do 2
31:35 - 3 4 and 5. and if we look here that's
31:37 - correct 2 3 4 5.
31:40 - awesome
31:41 - so now that i have that what i'm going
31:42 - to do is kind of use what i did
31:44 - previously
31:45 - i'm going to say that the char is equal
31:47 - to and then
31:49 - do we have this imported yes we do get
31:50 - column letter i'm going to get the
31:53 - column letter
31:54 - and this is going to be from call
31:57 - and then i'm going to add that to
31:59 - whatever the row number is now the row
32:02 - number is going to be a static number
32:04 - that row that we're going to be
32:05 - inserting this in is seven
32:08 - and so what i will say is ws at char
32:12 - plus and i guess i don't have to do
32:13 - string i can just do seven so this will
32:15 - give us you know
32:16 - b7 c7 d7 e7 so on is equal to and then i
32:21 - want to put a formula now the formula i
32:23 - want is the sum so i'm going to say this
32:25 - is equal to the sum and then i need to
32:28 - put in the range of the values that i
32:31 - actually want to sum together so this is
32:32 - where it gets a little bit complicated
32:34 - i'm going to use something called an f
32:35 - string which i'll explain in one second
32:37 - but let me just type all this out first
32:39 - and then i will kind of explain what i'm
32:41 - doing so i'm going to say f string of
32:43 - equals sum and then i am going to do
32:46 - what should this be this should be char
32:48 - plus and then in single quotes this
32:51 - would be
32:52 - two and then this is going to be char
32:54 - plus in single quotes 6 and this is
32:57 - going to be divided by and then this
33:00 - would be the number of students that we
33:01 - have and so this would be the length of
33:04 - data okay so i know this is a little bit
33:05 - confusing because i just did a lot here
33:07 - so an f string is something you can use
33:08 - in python version 3.6 and above if you
33:11 - don't have 3.6 or above this won't work
33:13 - what this allows you to do is actually
33:15 - evaluate an expression by putting it
33:17 - inside of curly braces so these curly
33:19 - braces here will be converted
33:20 - automatically to a string so the char
33:23 - which is going to be whatever column i'm
33:24 - in plus 2 so this would be you know b2
33:27 - and then colon to b6 this is a range b2
33:30 - to b6 is an example of something that
33:31 - would be here and then i'm dividing that
33:34 - so whatever the sum of all those values
33:35 - is by the number of students that i have
33:38 - which is represented by the length of my
33:40 - data which in this case is 5. and so
33:42 - what that's going to give me is the
33:44 - equation of you know like b2 to b6
33:47 - divided by 5 and then c2 to c6 divided
33:50 - by 5 and so on and so forth
33:52 - and so anyways i think that's actually
33:54 - good now if i save this and i make sure
33:56 - that new grades is closed and then i run
33:58 - this we should be good i don't think
34:00 - we're getting any problems so now let me
34:02 - open this let me go file open and let's
34:05 - open new grades and now notice that
34:07 - we're getting all of our averages
34:08 - calculated here right so we can see that
34:10 - this is equal to sum of b2 column b6
34:12 - over five right and then we have sum of
34:14 - c2 colon c6 over five sum of d2 colon d6
34:18 - over five so on and so forth now i did
34:20 - this kind of statically by typing 2 and
34:22 - typing 6. i could change this to be more
34:24 - by more dynamic by using the length the
34:26 - data and the number of subjects and all
34:28 - of that but for now i'm just going to
34:29 - keep it simple so that we don't spend
34:30 - too much time
34:31 - anyways there you go we've just added
34:33 - now all of the averages the last thing i
34:36 - want to show you is how we can actually
34:37 - kind of style ourselves now i won't get
34:39 - into this too much but i'll show you uh
34:41 - kind of simply how we can just make our
34:42 - cells bold so if i want to actually make
34:45 - all of my headings bold i need to do the
34:48 - following so i'm going to do a for loop
34:50 - here and what i'm going to do is loop
34:52 - through the very first row in my excel
34:54 - spreadsheet and i'm going to make every
34:56 - single one of those cells pull now
34:58 - unfortunately due to a limitation of the
35:00 - file type of xlsx you cannot modify an
35:04 - entire row or column style from python
35:07 - you need to modify every single
35:09 - individual cell so it'd be a lot easier
35:11 - if i could say you know row one make it
35:12 - all bold i can't do that instead i have
35:14 - to go through every cell in row one and
35:17 - make every cell in row one bold if
35:18 - that's what i wanted to do and so i'll
35:20 - show you how we can do that but we've
35:21 - kind of been doing it already i'm gonna
35:23 - say four
35:24 - and we're actually gonna say call in
35:26 - range then the range is gonna be 1 2 and
35:30 - then i guess how many columns do we have
35:32 - here i'm just going to manually type it
35:33 - in
35:34 - we have one two three four five so we
35:36 - will go up to six so i'm going to say
35:39 - four call and range one six i'm going to
35:41 - say ws at and we're going to say a and
35:44 - then this is going to be or sorry this
35:45 - shouldn't be a this is actually going to
35:47 - be get column letter so i'm going to say
35:49 - get column letter of call and then we're
35:51 - going to add and we'll simply add b
35:54 - string 1. so this is giving us you know
35:56 - a b c d so on and so forth and then
35:58 - we're looking at the first row for every
36:00 - single one of those columns and we're
36:02 - going to say dot style or sorry dot font
36:06 - my bad is equal to and then we're going
36:08 - to say font remember that i imported
36:11 - font up here from open pi excel dot
36:13 - styles
36:14 - and then we're going to say
36:16 - bold is equal to trip now there's a ton
36:19 - of other styles here as well what this
36:21 - is going to do is just change the font
36:22 - style to be equal to a font that is bold
36:24 - now this will use the default font you
36:26 - could change the actual font too
36:28 - i'm just leaving the font default but
36:29 - i'm changing it to be the bold version
36:31 - right and then i can change the color as
36:33 - well
36:34 - and say color is equal to and then
36:36 - there's a whole bunch of different
36:37 - options i'm going to refer you to the
36:38 - documentation if you want to do that
36:40 - in fact i have the documentation open
36:42 - here i'll leave a link to it in the
36:43 - description but if i go to where's
36:46 - styles here and there's something for
36:48 - changing the styles working with styles
36:50 - you can see here that there's like all
36:52 - kinds of colors we can change so let me
36:53 - just copy one of these
36:55 - let's find one that's like a nicer
36:57 - looking make it like a blue or something
36:59 - i'll copy one of these colors here and
37:01 - i'll show you what it looks like if we
37:02 - use this so if i change that to be 0099
37:05 - ccff
37:06 - this should then change the style of our
37:08 - cell so let me make sure that new grade
37:10 - is closed
37:12 - let's run this
37:13 - see if we get any issues looks like
37:14 - we're all good and now i can go to excel
37:17 - and i go and open
37:20 - and let's open new grades and now notice
37:22 - we've changed the color of all of these
37:24 - values here and we've made them bold
37:26 - all right so i think with that that is
37:28 - going to wrap up this video hopefully
37:30 - this gave you a general idea of how to
37:32 - work with excel in python as i mentioned
37:34 - there is this documentation here which
37:36 - just has so much more information that i
37:38 - can provide you in this video i just
37:40 - wanted to give you guys something so you
37:41 - could get started you know how to open
37:42 - something knew how to you know read sell
37:44 - data write cell data and well anyways
37:47 - again i hope you found this useful if
37:48 - you did make sure to leave a like
37:50 - subscribe to the channel i will see you
37:51 - in another youtube video
37:55 - [Music]

Cleaned transcript:

hello everybody and welcome to another youtube video so in today's video i'm going to be showing you how we can use python to automate excel specifically i'll be showing you how we can load an excel workbook how we can create a new one how we can modify the sheet names and select what sheet we're working on how we can look at the different cell values how we can create new cell values how we can style different cells merge cells and a lot of the just kind of common operations you want to do in excel now there's quite literally thousands of different things you can do with the module i'm going to show you how to use here obviously i won't be covering it all the point of this is just to get you up and running as fast as possible and show you kind of the most common and core operations that you need to know last thing i'll mention here everything that you can do in python in terms of like writing the code to automate excel you can do that manually in excel the reason you would do something like this is so that you can automate the creation of new workbooks or you can kind of search in workbooks for certain values or maybe you have an excel sheet and you want to read in that information into python and do something with that anyways you guys know your own use cases just wanted to tell you that anything you can do here you can do manually inside of excel so with that said let's get started after a quick word from our sponsor thanks to career karma for sponsoring this video career karma is a platform that helps connect learners like you to amazing boot camps and courses that help you get job ready for careers in tech i actually know some of the founders of this platform and have had the privilege of chatting with them about growing the program and community and helping people jumpstart their careers in tech if you're looking to be a web developer data scientist ux or ui designer whatever it is career karma can help you get into some great boot camps boot camps are really a great way to get handson experience and a lot of them are actually very flexible and don't charge you anything until you get a job you can join live audio rooms on the career karma app to speak with coaches and mentors who just got their first tech job you can download the career karma mobile app for free or check them out from the link in the description to help you get started the first thousand of my subscribers will get a free career coaching session with a career karma coach thanks again to career karma for sponsoring this video so the first thing we need to do when we want to start working with excel and python is we need to install a python module called open pi xl i'm going to assume you already have python installed on your system if you do then what you need to do is open up terminal or command prompt depending on the operating system you're on and type the following command you're going to type pip install and then open pi xl go ahead and press enter and that should install the module that you need you can see for me it's already installed now for some reason this doesn't work for you specifically if you're on mac try the command pip 3 install open pi excel linux as well try pip3 if pip3 doesn't work then what you can do is try python hyphen m pip install open pi excel and if that doesn't work you can try python 3 hyphen m pip install open pi excel if none of those work for you you're getting errors or it's saying this command doesn't exist or something then i'll leave two videos in the description that you can click on one for windows one for mac linux that will show you how to fix this command anyways i'm gonna assume at this point in time that you have now installed open pi excel so now we're just going to make sure our installation is working so open up some text editor doesn't matter what you're using i'm going to use sublime text for this video and try to import open pi xl now before i do this i'll just quickly note my kind of directory structure here so i'm inside of a folder that i've opened up in sublime text this is on my desktop inside of here i have an excel spreadsheet called grades.xlsx i have my tutorial.pi file this kind of a cheat sheet i'm looking at on my right monitor i have my working.pi file which is the one i'm going to work in and then this is kind of a temporary file that's created when i open this spreadsheet inside of excel anyways don't worry about that but just notice that all of my spreadsheets are in the same directory as my python files that's important and i'll discuss why in a second regardless though you need to run this file now once you have import.openpi excel obviously in a dot pi file i'm going to run this and notice that i get finished there was no error that popped up and that means that all was good now if this doesn't work make sure you're using the correct python interpreter and make sure again that you've installed open pi excel so now the pi excel is installed what i'm going to do is import something called workbook which we need to use to open an existing workbook so i'm going to say from and then open pi excel and actually what i'm going to do is import two things the first thing is workbook the second is i got to look at my cheat sheet here load underscore workbook okay so these are two things that we're going to use to either create a new workbook or to load an existing workbook so the first thing you need to do whenever using this module is you need to instantiate a workbook now again that workbook can be a brand new one or it can be one that already exists so what i'm going to do here is say wb standing for workbook is equal to and then i'm going to load an existing workbook so load workbook like that and then i need to put the path to the file of the workbook that i want to load so since this file is in the same directory as my python script i just need to put the name of the file so i can say grades.x lsx now it's worth noting that this module here only works with python or sorry not python excel spreadsheets that are version 10 or above so i believe that's like the 2010 version of excel or above and so the file extension must be this you cannot use the file extension xlsb which i think some people have i'm not quite sure about that but just make sure the extension is xlsx otherwise you will get an error okay so just a quick note here again the reason i can load it just this way is because that's the name of the file it's in the same directory if i created a new folder here so maybe i made a folder uh no i don't want to delete the folder i want to make a new folder make a new folder and just call it test and i put a spreadsheet inside of here then what i would have to do is test slash grades.xlsx you're typing the path from wherever your python script is now if for some reason this script was not in the same directory or any subdirectories within the current directory of the python script you would just type the absolute complete path to it so something on windows like c colon slash and then you know users slash tim slash desktop slash python whatever slash and then wherever the workbook was but here again this is in the same directory so i can access it with grades.xlsx now what i'm going to do is just close this because you cannot open a workbook if it's already open in excel you will get a problem and so now i'm going to run this and you're going to see that i don't get a problem all is good which means we were able to load this workbook now what i'm going to show you is how we can get the sheets from a workbook so this workbook right here only has one sheet but obviously excel workbooks can have multiple sheets and so you need to decide what sheet you're using and modify that sheet so i'm going to say ws standing for worksheet is equal to wb which is our workbook now that we've loaded in dot active now what this gives me is the active worksheet from this workbook so now if i print ws and i run this you're going to see that we get worksheet it's called grades there you go okay so now that we have that what i'm going to do is show you how we can access cell values from this worksheet so let me actually just open up excel again and let's see okay let's open up grades and notice that here uh we have some student names and we have their grades so the first thing i'll show you is kind of how we can access an individual cell value let's start with a1 to do that is really straightforward you can simply print out the worksheet at and then a1 now when you do this it's going to give you a cell and then if you want to actually look at the value of this cell you have to say dot value if you look at this it will give you the value which in this case is name so actually lied sorry when you're opening an existing workbook uh you can open one while it's open in excel what i meant to say is that you cannot modify the existing workbook while it's open in excel at least i'm pretty sure i think you'll probably get an error if you try to do that regardless what you can see here is that it says name obviously the value at a1 is name and so this is working just fine so now if i want to look at the value at a2 of course i could just change this to a2 and then you can see we get the value jump so there you go that's as easy as it is to actually look at the value of a cell in a workbook now if you wanted to change the value what you could say is ws at and then something like a2 and then you could say value is equal to and then change it to whatever you want so in this case maybe i'll change this to test so if i do this now when i run this you'll actually see okay it finished that it did not change in excel the reason it didn't change in excel is because i did not save this workbook so if i do make a change here i need to save this workbook manually to a file name before it will actually take effect and so what i can do to save the workbook is dot save and then the name of the file i want to save this to so i can say grades dot xlsx now you'll see what happens here when i try to save this when i run this and i try to save it notice we get an error now i can't see exactly what the error is let's say right here it doesn't quite say but the problem is that this file is already open and so i can't save to a file that's already open so i need to close this so i'm going to close that and then i'm going to try and now you can see it actually does work so now i've saved to grades xlsx if i open up excel and i look at grades we can see that we've changed this name here to be test uh in uh what do you call it a2 so there you go that's kind of the basics of opening and loading a workbook okay so now what i'm going to do is show you some operations related to sheets so what i've done is i've created a few new sheets here inside of this excel file so grade sheet 1 sheet 2 and sheet 3. now i'm going to show you how we can get these other sheets because right now i'm just showing you how to get the active sheet and obviously sometimes you want to access different sheets or maybe even create new sheets in a workbook i'll show you how to do all of that first thing to mention here though is that i kind of lied when i said that you had to use dot value to assign a value to a cell you can actually just do ws at a2 is equal to the value that will work as well however when you are accessing you do need to use dot value okay so now what i'll show you how to do is get different sheets so the first thing we can do here let me get rid of this save command is we can print all of the sheets in a workbook so i can say wb dot and then sheet names like that and what this will do is show me all of the sheets you can see we have grades sheet 1 sheet 2 and sheet 3. now if i want to access a specific sheet what i can do is say wb and then use this kind of syntax right here and inside put the name of the sheet i want in this case maybe sheet1 and when i do that you're going to see it gives me the worksheet named sheet 1. so that's how you access different worksheets i would then say ws is equal to if i didn't want the active sheet say sheet1 and that would mean now i'm doing all of my modifications or accessing with ws on sheet 1. now you can create new sheets as well so to create a new sheet what you can do is use the function which is called create sheet just have to look at my cheat sheet there so i can say wb.create underscore sheet i can say maybe we'll call this test and then what i can do is print out all the sheet names to make sure this worked so wb dot sheet names so let's run this and we can see that now we have another sheet named test now of course that's not going to update in here unless we actually save this workbook which i'm not doing right now i just wanted to show you how you can work with and access the different sheets all right so i've cleared the screen we're now going to create a brand new workbook and then what we're going to do is write in a bunch of cells and some information just so you can see how that works so to create a new workbook what you can do is say wb is equal to workbook this now initialized a new workbook now we need to get the worksheet so we're going to say ws is equal to wb.active this will just give us kind of the default sheet that's created whenever you create a workbook by default there's always one now let's change the title of this sheet so i'm going to say title is equal to data and now what i'm going to do is start writing in some information so of course what i could do is go you know ws at a1 is equal to and then ws at and you know b1 is equal to but that's not very efficient and well i don't really want to do that that's going to take a really long time so instead there's a few useful commands that we can use to insert a lot of data at once specifically rows of data so of course you can assign values like i was showing you there what you can also say is ws.append and you can append a python list of information so in this case i'll just say tim is great and then we'll do an exclamation point like that and we'll just keep the quotes consistent so if i do this now and now i decide to save the workbook so wb.save i need to give it a name let's give it tim.xlsx and i run this you're going to see all is good here and now if i go to open this worksheet or workbook i'm going to keep mixing up those names let's go browse let's open up tim you can see we have tim is great exclamation point in the uh kind of corresponding rows so that's appending meaning adding to the end of the worksheet so if i go here and i append this a few times and we can just kind of change this maybe to be like end just so that we can see the difference here now if i close this and i rerun this so i've just saved the document again let's go file let's open browse let's open tim okay we can see that we've added four rows of data and then the last thing that we added right is end and so that's going to be the last row in our spreadsheet so this is just appending to the end of the workbook now if i were to open this existing workbook and append it would add to the end of the existing data that is there but since we're creating a new workbook every time here kind of that's why what's happening is happening we only have five lines every time because while we're initializing a brand new workbook and then overriding the existing one that's already created okay so now that we know how to append rows of information to our excel spreadsheet what i'm going to do is show you how we can kind of loop through different cells in the spreadsheet so rather than actually just appending a bunch of them i'll show you how we can access and at the same time if we wanted to modify different cell values in a specific range now this example here i'm going to show you how we can loop through different rows and columns this is kind of just general python knowledge you can do this in any way that you want but i just want to show this to you in case you're unaware of how to do this so let's say instead of creating a new workbook i actually want to open the one that i just created so i'm going to have this function now load workbook and i'm going to load in what do we call this tim.x xlsx okay so now we won't bother changing the title what we will do though is we'll loop through this this cell data so to do this i'm going to say 4i in range and actually let's make this better let's say four row in range i'm going to loop in range 1 to 11. now what this really means is i want to look at row 1 through 10 because 11 is the end of the range and so we won't consider row 11. we'll start at row 1 we'll go up to 10 and then we'll stop as soon as we're done row 10. then what i want to do is pick what columns i want to loop through so if you go here right all of the rows are numeric all of the columns are letters and so i need to pick how many columns now in this case i'm going to say 4 and we'll say call in range and i just want to loop through 4 columns so i'm going to start at 1 and i'm going to go to 5. okay so now what i want to do is i actually want to get kind of the cell reference for this row and for this column so i have my row in this for loop i have a nested for loop doing the columns but this nested for loop for the columns is giving me an integer 1 through 4. it's not giving me a b c or d so how do i get it so that every time i get inside of this for loop here i have something like a2 a3 a4 so on and so forth right and then you know b2 b3 b4 because essentially what's going to happen here is for every row we're going to loop through all of the columns that we want and we need to get kind of these unique identifiers so to do that we can actually use a function here which will give us the kind of character that's represented by the column that we have now we can do this manually the manual way would be to say char is equal to and then chr of 65 plus call now what this does is gives us the character represented by an integer now 65 represents the integer uppercase a and so actually we would then have to change this range to be 0 4 because 65 plus call 0 would be a 65 plus call 1 would be b 65 plus call 2 would be capital c and so on and so forth that's what this function char does it takes some integer and gives us the character representation of it just so happens that 65 is uppercase a and then you can kind of go on from there and you can figure out what the rest of the letters are anyways that's the manual way now if we didn't want to do that manually what we could do is use the function from this open pi excel function which is the following so this function is called get column letter and the way you use it is get underscore column underscore letter you need to import it from open pi xl and actually it's not just from openpixel it's from something else so i'm going to copy this line i'm going to say from open pi excel dot and then this is utils i'm going to import get underscore column underscore letter and then what this function does is take an integer between 1 and 26 and gives you the character representation of it so 1 obviously being a and then i mean you guys know the rest so now if i change this range to 1 and 5 and i get the column letter of call this will give me the character represented by whatever this column number is so now what i can do is i can print out all the different cell values by doing the following thing i can say print and then i can say ws at and then i need to kind of combined this character with this row and there is a function in open pi excel that does this but i find it's easier just to do it manually so what i'm going to do is say char plus string of row so what this will do is give me whatever the character is so abc blah blah plus and then whatever the row is so 1 2 3 4 all the way up until 10. so this should give me all of the values that are in this excel spreadsheet and i don't want to save this let's run this and let's see what we get so notice we get a bunch of cells so we get a1 b1 c1 d1 a2 b2 c2 so on and so forth but we have not looked at the values so sorry i have to do dot value here and then this will actually give us what the value is so in this case you can see we have tim is great tim is great tim is great and then a bunch of nuns because well obviously nothing is in all those other cells that we looked at now if i change this workbook to be grades and we run this you're going to see we get some different data so what is grades empty i guess we must have accidentally cleared grades for some reason so i guess there's nothing in there uh but anyways you get the idea this does work i guess grades uh we we must have emptied somehow or maybe because it's open oh yeah it is empty uh or are we not looking at the right sheet in grades or something you know i don't know exactly why grades isn't working but for some reason i think we're on the wrong sheet and so was it giving us the wrong information okay so regardless that works that's how you can kind of loop through the different values in an excel worksheet you can loop through the rows and the columns in this kind of fashion here using this nested for loop structure you can get the column letter by importing that from open pi excel and then you can do this kind of combination of combining the character with the row and then that will actually allow you to access all of those different cells and of course we could change these cells as well in fact maybe we should do that let's say ws and then char plus string row is equal to and let's just make this equal to actually we can make it equal to this itself ws or char plus string row just so we can see how this works so let's run this we do need to save this worksheet so our workbook so wb.save and let's save this tim.x xlsx we now need to close tim okay so close that and let's run do we get any problems here no it looks like everything is good and now if i go and open this so file let's open tim you can see that we're getting kind of their corresponding positions in the cells and so that does indeed work okay so next thing i'll show you here is how we can merge cells together and then after that i'm going to show you kind of a indepth example of how we can write some data into an excel spreadsheet and style the cells and all of that fun stuff okay so merging cells is actually really easy to do all you have to do is say ws dot merge underscore cells and then what you need to do is pass a range of cells that you want to merge so in this case i could pass a 1 2 and then i guess we would do d4 or sorry d1 and this would then merge the cells from a1 to d1 so just like you would do in excel when you're kind of typing out a range it's the exact same thing here when you're merging cells you pick the range of the cells you want to merge and then well it will merge them so let me make sure tim is closed it is so let's run this and let's see if we get any issues looks like everything is good so now if i go file open and we open tim you can see that we've merged these cells together and it kept the data from the first cell got rid of the data from the rest of the cells now let me close this to unmerge cells is kind of the just opposite of what i showed you here we can say ws dot and then on merge underscore cells and then the range of the cells you want to unmerge so a1 to d1 i think that's correct yes it is so let's run this now and all is good if we go here and we go file and we open tim we can see that we have now unmerged those cells but we did lose the data that was in them previously obviously we have no way of getting that back now you could do this to like say d2 and then it would actually merge kind of like a square region rather than just like one row or sorry rectangular region but it would be more than one row so let's just try this merge cells a1 to d2 okay now if we go file and open and we open tim you can see that now it merged kind of the first two rows together okay so now what i'm going to do is show you how we can copy and move portions of the worksheet i will also show you how we can insert empty rows and delete rows so let me get rid of this merge cells first thing i'll do is show you how we actually insert an empty row this is really easy you can say ws dot insert then you can insert this at whatever position you want so let's say i want to insert a row at position seven this means we're going to insert an empty row after row seven so we could do this twice and now if i make sure tim is close it is and i run this okay oh what's the problem here ws dot insert uh worksheet object has no attribute insert oh sorry this is insert underscore rows that's my bad insert underscore rows okay so now let's try this and okay that's all good so now we can open so file open tim and notice that we have kind of two blank rows now here because we inserted now in the same way we can delete rows we can say ws dot delete rows and we could delete at row seven so let's see what happens now if we close tim and we try to do this okay no problem let's go file and let's open tim and now you can see we deleted one of those empty rows okay so in the same way that we could insert rows we can also insert columns so i can say ws dot and then insert underscore calls i can pass to this the column at which after i want to insert an empty column so i could say b and then oops do me to do that if i run this we can see we're getting a problem here what is it saying a string object cannot be interpreted as an integer okay so that means that instead of passing b we would need to pass two i wasn't sure if this took any string or it took in the integer and so rather than giving it you know a b c d you would give it one two three so let's give it two when we do this okay all is good so let's go file let's open and let's open tim and then notice that we inserted this empty column here in column b awesome and sorry i guess i was saying after this comment inserts it sorry it inserts at that column that's my bad okay now that we've inserted the call we can do the same thing we can delete it so we could say delete calls and we can delete two so let's close this and let's run this okay now if we go file and we open tim we can see that empty column is now gone and it shifted all of those other columns after now we're sorry back to where they were before okay so now what we can do is we can actually shift a range of cells so let's say we want to take all of these cells in maybe the c and the d column and we want to move those over to be an e and f well to do that is pretty straightforward we can use the function move underscore range now move underscore range takes a range and so i guess the range that we would have here would be c1 to d11 so we're going to say c1 to d11 and then we need to pick how many columns over and how many rows we want to move it by so i can say rows equals and then i can move this say up one row to do that i would say negative 1 that means go up 1. if i made this two this would move it down two rows so let's actually leave it at two and then for columns same thing if i wanted to move it to the left i would say you know negative two to move it over two columns if i wanted to move it to the right i would just put a positive number for the number of columns the right i wanted to move it so in this case we'll just do rows two calls two let's save that let's close tim let's rerun uh we don't get any problems that's great let's open this again and then notice that we've kind of shifted this over and moved that range of cells all right so that's all i had to show you for kind of the core operations now we're going to bring all of this stuff together and i'm going to show you how we can write some data into kind of a new excel spreadsheet all right so i've just pasted a bunch of data here you can see it says data i have a bunch of names these are the names i was using in that grades spreadsheet that you saw i'm going to show you how we can create that grade spreadsheet so if you look at this here you can see we have bolded names we have all the names here we have all of the grades and then we computed the averages of all of these grades down here i'm going to show you exactly how we can create this using simply python code and so if you want to take this code i will leave a link to it in the description it should be a github repository and well it's going to have all this data that you can copy and all of the finished code as well so we're going to keep these imports up here however i am going to import one more thing that we're going to use to actually style our cells i'm going to say from open pi xl dot styles import font and i'll show you how we can use this kind of font object to modify and make you know bold and italic cells and change the color and all that okay so we have all of this data and again what i want to do is write it into the spreadsheet so the first thing i need to do is write kind of the headings right so we had name actually i guess i can just show you let's look at it here name math science english gym all of that so if we want to write all of the headings well first we need to actually create a new workbook so i'm going to say w b is equal to workbook i'm going to say ws is equal to wb dot active and then let's change the name so ws.title is equal to grids awesome so now that we have the worksheet let's write in our headings so i'm going to say headings is equal to a list and this is going to be name and then i want to get all of the different subjects here so rather than manually writing out these subjects what i'm going to do is kind of grab them from my data so i'm going to say data and then this is going to be at joe i'm just picking an arbitrary student so i'm picking joe i could pick build tim whatever i want and i'm going to get all of these keys here that are inside of this dictionary store by jump so i'm going to say data add joe dot and then keys now i'm going to convert this to a list so i'm going to say oops no this is not exactly what i wanted to do we're going to do this name and then plus data at joe dot keys we'll see if that works but what this should do is combine this list with the list returned of all of the keys that are inside of joe so that should give us math science english and gym okay so now we have our headings so let's append this into the work worksheet i'm going to say ws.append and i will append headings and now that i have all of my headings i want to start adding all of my students so i want to loop through all of my students here and i want to well add them into the workbook so i want to have their name and i want to have all of the different grades that they have for each subject so to do this i am going to say let's go for person in data and then we're going to say that their grades are equal to and this is going to be data at person now what i'm going to do is get all of the values here so i'm going to say grades is equal to data at person dot values so what this gives me is instead of all of the keys which would be math science english and gym gives me all the values so 65 78 98 and 89. now what i'm going to do is say ws dot append and i'm going to append the name of the person which in this case is going to be person plus and then their grades so what i will end up writing and we can look at this as an example is whatever the person's name is and then all of their grades will come after in all of the subsequent rows okay so let's test this first before we go any further so let's save this workbook wb.save and let's save this as new grades.xlsx okay let me just close tim we don't need that anymore let's run this and let's see if we get any problems and we says we do get a problem concatenate can only concatenate list not keys and so what that means is we need to convert this to a list it's not just my bad i guess this is not a list type by default but we can convert it to a list by doing that and then we're probably going to have the same issue here with values so let's do that again and make this a list okay so now that we've done that let's run and there we go we don't get any issues let's now open this file so file open browse and new grades okay so there you go we can see we have name math science english gym we have all of the names and we have all of the grades in the correct categories awesome and let me make sure this is in the correct category 100 160 okay 30 25 45 100 okay i'm satisfied looks good okay so now that we have that what i want to do is calculate the average of all of these grades so really of all of these columns now the columns that i want to calculate the average for is oops that's the wrong document here is column b c d and e and so what i'm going to do is set up a for loop i'm going to say 4 and we'll say call in range and then this will be in range 2 because we want to start at column b and this will go to and then rather than doing this statically by just typing in the number 6 i will actually type in what is it a dynamic thing that gives me the number of subjects that are here so i'm going to say 2 and this is going to be the len of and this will be data joe i'm just picking joe because that's going to give me all of the subjects here and then i will add 2 to this the reason i'm adding 2 to this is since we're starting at column 2 i want to go what however many subjects we have more than column 2 and so i add 2 to that at the end and what this will give me is 4 plus 2 it should be 6 so my range will be 2 6 which means we'll do 2 3 4 and 5. and if we look here that's correct 2 3 4 5. awesome so now that i have that what i'm going to do is kind of use what i did previously i'm going to say that the char is equal to and then do we have this imported yes we do get column letter i'm going to get the column letter and this is going to be from call and then i'm going to add that to whatever the row number is now the row number is going to be a static number that row that we're going to be inserting this in is seven and so what i will say is ws at char plus and i guess i don't have to do string i can just do seven so this will give us you know b7 c7 d7 e7 so on is equal to and then i want to put a formula now the formula i want is the sum so i'm going to say this is equal to the sum and then i need to put in the range of the values that i actually want to sum together so this is where it gets a little bit complicated i'm going to use something called an f string which i'll explain in one second but let me just type all this out first and then i will kind of explain what i'm doing so i'm going to say f string of equals sum and then i am going to do what should this be this should be char plus and then in single quotes this would be two and then this is going to be char plus in single quotes 6 and this is going to be divided by and then this would be the number of students that we have and so this would be the length of data okay so i know this is a little bit confusing because i just did a lot here so an f string is something you can use in python version 3.6 and above if you don't have 3.6 or above this won't work what this allows you to do is actually evaluate an expression by putting it inside of curly braces so these curly braces here will be converted automatically to a string so the char which is going to be whatever column i'm in plus 2 so this would be you know b2 and then colon to b6 this is a range b2 to b6 is an example of something that would be here and then i'm dividing that so whatever the sum of all those values is by the number of students that i have which is represented by the length of my data which in this case is 5. and so what that's going to give me is the equation of you know like b2 to b6 divided by 5 and then c2 to c6 divided by 5 and so on and so forth and so anyways i think that's actually good now if i save this and i make sure that new grades is closed and then i run this we should be good i don't think we're getting any problems so now let me open this let me go file open and let's open new grades and now notice that we're getting all of our averages calculated here right so we can see that this is equal to sum of b2 column b6 over five right and then we have sum of c2 colon c6 over five sum of d2 colon d6 over five so on and so forth now i did this kind of statically by typing 2 and typing 6. i could change this to be more by more dynamic by using the length the data and the number of subjects and all of that but for now i'm just going to keep it simple so that we don't spend too much time anyways there you go we've just added now all of the averages the last thing i want to show you is how we can actually kind of style ourselves now i won't get into this too much but i'll show you uh kind of simply how we can just make our cells bold so if i want to actually make all of my headings bold i need to do the following so i'm going to do a for loop here and what i'm going to do is loop through the very first row in my excel spreadsheet and i'm going to make every single one of those cells pull now unfortunately due to a limitation of the file type of xlsx you cannot modify an entire row or column style from python you need to modify every single individual cell so it'd be a lot easier if i could say you know row one make it all bold i can't do that instead i have to go through every cell in row one and make every cell in row one bold if that's what i wanted to do and so i'll show you how we can do that but we've kind of been doing it already i'm gonna say four and we're actually gonna say call in range then the range is gonna be 1 2 and then i guess how many columns do we have here i'm just going to manually type it in we have one two three four five so we will go up to six so i'm going to say four call and range one six i'm going to say ws at and we're going to say a and then this is going to be or sorry this shouldn't be a this is actually going to be get column letter so i'm going to say get column letter of call and then we're going to add and we'll simply add b string 1. so this is giving us you know a b c d so on and so forth and then we're looking at the first row for every single one of those columns and we're going to say dot style or sorry dot font my bad is equal to and then we're going to say font remember that i imported font up here from open pi excel dot styles and then we're going to say bold is equal to trip now there's a ton of other styles here as well what this is going to do is just change the font style to be equal to a font that is bold now this will use the default font you could change the actual font too i'm just leaving the font default but i'm changing it to be the bold version right and then i can change the color as well and say color is equal to and then there's a whole bunch of different options i'm going to refer you to the documentation if you want to do that in fact i have the documentation open here i'll leave a link to it in the description but if i go to where's styles here and there's something for changing the styles working with styles you can see here that there's like all kinds of colors we can change so let me just copy one of these let's find one that's like a nicer looking make it like a blue or something i'll copy one of these colors here and i'll show you what it looks like if we use this so if i change that to be 0099 ccff this should then change the style of our cell so let me make sure that new grade is closed let's run this see if we get any issues looks like we're all good and now i can go to excel and i go and open and let's open new grades and now notice we've changed the color of all of these values here and we've made them bold all right so i think with that that is going to wrap up this video hopefully this gave you a general idea of how to work with excel in python as i mentioned there is this documentation here which just has so much more information that i can provide you in this video i just wanted to give you guys something so you could get started you know how to open something knew how to you know read sell data write cell data and well anyways again i hope you found this useful if you did make sure to leave a like subscribe to the channel i will see you in another youtube video
