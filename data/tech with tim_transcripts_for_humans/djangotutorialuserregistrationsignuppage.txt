With timestamps:

00:00 - hey guys and welcome back so in today's
00:02 - video what we're gonna be doing is
00:04 - talking about user registration and how
00:06 - to create an account on Django now
00:09 - fortunately for us
00:10 - Django actually does quite a bit of the
00:12 - hard work at least for us so all we have
00:14 - to do really is format a form and then
00:17 - just add a few things to our project it
00:19 - is a bit of a tedious process but it's
00:21 - much easier because of Django and
00:23 - another reason why a lot of people love
00:25 - Django because it does stuff like this
00:26 - for you you can see right now I have
00:28 - open the thing we're gonna be creating
00:31 - now this is just in a copy of the
00:33 - project that I'm working on and I just
00:34 - made this to make sure it was gonna work
00:36 - create a count page and we're gonna be
00:38 - making this to start we'll be adding an
00:40 - email field to this as well or like a
00:42 - add name or something like that field to
00:44 - this as well and yeah that's kind of all
00:47 - we're gonna be doing today in the next
00:48 - video we'll talk about how to log in and
00:50 - how to log out and then how to restrict
00:52 - access to certain parts of the website
00:54 - to certain users so for example the
00:57 - admin user can access the admin
00:58 - dashboard and they can see all of the
01:00 - different databases and all that whereas
01:02 - a regular user won't be able to do that
01:04 - so let's get started now the first step
01:07 - and what we're gonna have to do to do
01:09 - this actually is create a new
01:11 - application so what I want to do is
01:13 - right now we already have an application
01:15 - called main but I want to create an
01:17 - application now called like users are
01:19 - called register or something like that
01:21 - that is going to handle the login logout
01:24 - and registration for our website now
01:27 - this is the reason I'm doing this is
01:29 - also so that you can just copy this
01:31 - application and put it into any other
01:33 - Django project and because it just kind
01:35 - of makes sense to separate things out so
01:37 - to do that we're gonna go to our command
01:39 - line and we're gonna create a new app
01:40 - using that Python managed to Python so
01:43 - just a Python managed up pie and when I
01:46 - say start app and in this case I'll just
01:48 - call mine register like this you can
01:51 - name yours whatever you want but I'm
01:53 - sure to say register so there we go it
01:56 - has successfully executed and now if we
01:58 - go to our directory we can see that we
02:00 - have register popping up here now what
02:03 - I'm gonna do to start is I'm just gonna
02:05 - what do you call it modify some URLs so
02:08 - we're gonna add a page that we'll be
02:10 - able to use to register because we need
02:12 - register page so let's open up subline
02:15 - text here let me just open up a new
02:17 - window why is this not working one
02:22 - second guys
02:22 - file open folder here we are okay so
02:27 - Jing go right there okay
02:30 - so there we go now we're in Django and
02:31 - what I'm gonna do is I'm going to modify
02:33 - the URLs from within my main file here
02:36 - so that we're gonna link to a view that
02:38 - we're gonna create inside of our new
02:39 - application called register so if I go
02:41 - to URLs here you can see that right now
02:43 - these are our main URLs that we have
02:45 - inside of our main application but what
02:48 - I want to do is go to the URLs inside of
02:50 - my site so let's do that here
02:52 - and what I want to do is just add a new
02:54 - path that's going to direct to a new
02:56 - page and in this case I'm just gonna
02:57 - call this one slash create I guess or
03:01 - actually not create let's do register so
03:05 - like registering for a new account we'll
03:07 - call it that and what I'm gonna do is
03:09 - I'm going to link this directly to the
03:12 - function that's gonna render this from
03:14 - our register application so what I'm
03:18 - gonna do inside of register now and I'll
03:19 - come back to this in a second is instead
03:21 - of used up hi I'm simply gonna create a
03:23 - function in this case I'm just gonna say
03:24 - define we'll call it register as well
03:28 - it'll take response and then in here all
03:31 - we'll do is just return render and then
03:34 - we will render something in here in a
03:36 - second Bowl just fill that in for right
03:37 - now so we go back to URLs what I'm gonna
03:40 - do now is I'm going to import this file
03:43 - in this function so that we can use it
03:46 - from in here to link directly to that
03:48 - view so to do that I'm gonna say from
03:50 - and in this case we'll do a register
03:52 - because that's the name of our folder
03:55 - register imports in this case views as
03:58 - and I'm just gonna say V now the reason
04:01 - I'm saying views as V is because we
04:04 - could possibly be importing some more
04:06 - views into here and all of them are
04:07 - gonna be called views right like the
04:09 - views for this application is the same
04:11 - as the name of the views for the main
04:13 - application so just by doing it as
04:14 - something that way we're gonna
04:16 - differentiate them so we don't run into
04:18 - any mistakes essentially so now I'm
04:20 - gonna say what we'll go to is we go to V
04:23 - dot in this case
04:25 - actually from register import views will
04:28 - go to V dot register like that and will
04:31 - say name equals in this case register
04:34 - now add that comma and we should be good
04:38 - in terms of linking to that okay so now
04:40 - that we've done that what I want to do
04:42 - first of all is create an actual page
04:44 - that will be our register page which
04:47 - involves creating a template for that so
04:49 - I need to do the same process I did to
04:51 - create templates within my main
04:53 - application and that is starting off by
04:55 - creating a new folder inside of our
04:57 - register application and in this case
04:59 - I'm just gonna call it templates ten
05:02 - plates like that and then inside of
05:05 - templates I'm gonna create another new
05:06 - folder and if we remember we call this
05:09 - register now inside of register I can
05:12 - create my file which will be my register
05:14 - HTML file which will display the form
05:17 - that we're going to see so I'm just
05:19 - gonna start by extending my base
05:21 - template and the way that we do this now
05:23 - because this is in what do you call a
05:25 - different directory is the exact same as
05:27 - before we just have to specify where
05:28 - we're getting it from so we're gonna say
05:30 - main slash based HTML and then what
05:33 - we're gonna do in here is we'll do our
05:35 - blocks so I have the block title and
05:37 - we'll have the block content so block
05:40 - title and in this case we'll just say
05:43 - create and a couch or something like
05:46 - that and then we can end that block and
05:50 - block and then now we'll do our block
05:53 - content and then we will keep going from
05:57 - there so say block content and here
06:02 - we'll say percent percent and block now
06:06 - we'll save this as register dot HTML
06:10 - inside that template file and there we
06:12 - go we have now created the file that we
06:14 - can render and display on the screen now
06:16 - while we're in here I'm just gonna fill
06:18 - this in and populate it and all I'm
06:20 - gonna do essentially to do this is I'll
06:23 - use a little bit of style a little bit
06:25 - of bootstrap styling and then just
06:26 - display the form inside of here using
06:29 - the way that we can just display Django
06:31 - forms and then you guys will see how it
06:33 - works in a second anyways
06:34 - so let's start to create some form
06:35 - tatics will say form in this case we're
06:37 - gonna say method
06:38 - equals post because this is gonna be the
06:41 - forum to create a new account so
06:42 - obviously it's gonna have to be post
06:44 - method because we need to make sure that
06:45 - information is secure when we're sending
06:47 - it to the backend say for method equals
06:49 - post I'm gonna say class is equal to in
06:51 - this case forum - group and then we'll
06:55 - end that form tag and in here we will
06:57 - simply do what he call its form like
07:01 - this now the only other thing we need to
07:03 - add is a button and this button will be
07:06 - the submit button because by default
07:07 - Django doesn't generate that for us so
07:09 - what we can do to do this to just say
07:11 - button we'd say type equals if I didn't
07:15 - hit insert there you type equals submit
07:19 - submit like that and what else do we
07:23 - even need for this we say class equals
07:24 - in this case BTN and on BTN - success I
07:29 - believe that's the class name and I can
07:31 - end that button tag and inside here
07:33 - we'll just say what do you call it joy
07:36 - in' or like register like that and
07:39 - that's what we're gonna do for now we'll
07:41 - make this look a little bit better after
07:42 - but that's all we really need for right
07:44 - now okay so now that we've done that
07:46 - we've said well we're gonna pass a form
07:48 - to this view so that means from inside
07:50 - here we're gonna have to be passing a
07:51 - form now what's really nice is Django
07:55 - actually automates the form for what he
07:57 - call it logging in and creating a new
08:00 - account it makes one for you that you
08:01 - can just use so what I'm gonna do is
08:04 - simply import the built in Django form
08:06 - and then we're just gonna use it inside
08:08 - of here to pass to our register template
08:10 - so the way that we do this is we have to
08:13 - I'm actually just gonna copy these in
08:14 - because they're a bit long and I don't
08:16 - wanna mess up the the spelling where I
08:18 - say from Django contrib off import login
08:22 - import authenticate and then we're also
08:24 - gonna import from Django contrib off
08:27 - forums we're gonna import user creation
08:29 - form now this user creation form is what
08:32 - we're gonna use to create a new user and
08:35 - this in a pre-built form just like when
08:37 - we went into our application and we
08:39 - create our own form using the Django
08:41 - built-in forms this one's just already
08:42 - made for us and we can go ahead and
08:44 - start using it right away
08:45 - so to use this I'm gonna say form equals
08:48 - and in this case user creation form and
08:50 - then when I render my template all pass
08:53 - response will do in this case register
08:56 - and in this case slash register dot HTML
08:59 - and for the context here will pass in
09:02 - form colon form so assuming I spelt
09:06 - everything correctly now if we actually
09:08 - run our server and go to this we should
09:11 - see a form showing up actually one step
09:15 - for that that I should not have
09:17 - forgotten but I almost did we need to
09:19 - add our application in this case which
09:21 - is registered into our settings dot PI
09:23 - file because if you remember when we
09:25 - initially created a new application you
09:28 - can see that we added this main Apps
09:29 - domain config well we need to repeat
09:31 - this process now with our new
09:33 - application which is registers so let's
09:35 - just copy this and paste it down here
09:37 - and instead of having main we're gonna
09:38 - change this to just be register and here
09:42 - register as well remember that capital
09:43 - at the beginning okay so now that we've
09:46 - done that assuming I don't make any
09:48 - mistakes if we run the server we should
09:50 - be all good at we should be able to see
09:52 - all this stuff so let's do this now I
09:54 - will say Python managed dot PI and in
10:00 - this case run server okay no issues so
10:04 - let's grab that let's go actually I'm
10:07 - just gonna refresh this and it should
10:08 - pop up and now you can see that we are
10:10 - actually getting this beautiful register
10:12 - window now I'm saying that sarcastically
10:14 - because obviously this does not look
10:16 - amazing and we're gonna work on styling
10:18 - this and making it look a little bit
10:19 - better in a second but you can see that
10:21 - we actually have a somewhat functional
10:23 - user registration window already created
10:26 - for us and you can see it says required
10:27 - 150 characters this is the thing that
10:30 - you need for passwords and then it asks
10:32 - you for username password and all this
10:34 - stuff and then there's a register button
10:36 - that we created so that's awesome and
10:38 - that works well now all we the thing is
10:41 - though if we actually type anything in
10:44 - here so for example I say Tim and make
10:45 - my password one two it says your pastor
10:48 - cannot be entirely new net new American
10:50 - must be at least 8 characters ok let's
10:51 - just type it's lame a bunch of letters
10:54 - for example and if I type a bunch of
10:56 - other letters and hit register we run
11:00 - into an error that CRS F CSRF token is
11:03 - missing so I'll have to add that
11:05 - but my point here was gonna be that this
11:06 - register button doesn't actually do
11:08 - anything just like when we created a
11:09 - form before we actually need to add the
11:11 - functionality to save the form and
11:13 - create the new user which is what we
11:15 - will do now after we add that token that
11:17 - we need so let's add that token first of
11:19 - all inside of here
11:21 - CS CSRF underscore token and now let's
11:26 - go into view stop hi and let's check how
11:29 - we can validate this form and how we can
11:31 - actually save things using it first of
11:32 - all before we start styling it too much
11:34 - so we're gonna do is what we've done
11:36 - before so we're gonna say if response
11:38 - dot method equals equals and in this
11:40 - case post then that means that we are
11:42 - going to be creating a new user so what
11:45 - we'll do in here is we'll start by
11:46 - saying actually we'll take this form I
11:49 - will put it up here and inside of here
11:52 - will populate this with response dot
11:55 - post now what we'll say say if form dot
11:59 - is and I believe it's underscore valid
12:01 - what we can do to save the form which is
12:04 - very easy is literally just say form dot
12:07 - save and what this is going to do is
12:09 - actually save our new user in the users
12:12 - database for us and I'll show you how
12:14 - this works in just a second but let's
12:16 - add this else here so that we create a
12:18 - blank form if for some reason we're not
12:20 - getting that post request right so this
12:22 - is all we need to do actually to handle
12:25 - and make this form work obviously we're
12:27 - gonna be doing a lot more here but
12:28 - before we're finished but this will
12:30 - actually allow us to have a valid form
12:32 - so let us try to get this working now so
12:36 - let me go back here and let me refresh
12:38 - the page and now let's try to create an
12:40 - account and let's say let's make an
12:42 - account tech with Tim we can just make
12:45 - the password check with Tim 1 2 3 ok and
12:50 - let's hit register all right what was
12:53 - issued the password the to password
12:55 - fields did not match ok so you can see
12:57 - actually as well maybe that was good
12:58 - that I messed this up it even gives you
13:00 - messages when things are wrong with the
13:03 - form so it says the two password fields
13:05 - didn't match so that obviously means I
13:06 - spelled something wrong so let's try
13:07 - that again
13:09 - and hit register password is too similar
13:14 - to the user name oh man see this is this
13:17 - is why we use Django form
13:18 - because they do all this wonderful stuff
13:20 - for us okay let's try this now Tim with
13:23 - tech how about that Tim with tech one
13:27 - two three Tim with tech one two three
13:30 - register the password is two cylinders
13:33 - two username okay I'm just gonna use one
13:34 - of my own passwords and hopefully it
13:36 - doesn't show it anywhere on the screen
13:38 - okay so now we've registered and I
13:41 - actually create an account called tech
13:44 - with Tim and I've I've done that I know
13:46 - it doesn't look like anything happened
13:47 - but that's what we're gonna add as well
13:49 - next when we Korean account will
13:51 - redirect to a new page but let's try
13:53 - going to the admin dashboard here
13:54 - quickly and see if we can see this new
13:56 - user in our database so let me sign in
13:59 - here and if I go to users you can see
14:02 - that now we actually have two users we
14:04 - have Tim which is the admin user which
14:06 - is me and we have tech with Tim which is
14:08 - the new user that was just created so if
14:10 - I go into tech with Tim that's like the
14:12 - password hashing and stuff and then you
14:14 - can see that it has the name and that's
14:16 - all that we have for right now so the
14:19 - next things that I want to add to this
14:21 - now is how we can get like an email or
14:23 - how we can get a first name and a last
14:24 - name for example and how to redirect to
14:26 - a new page once we've created an account
14:29 - so once we've create an account what I'd
14:32 - like to do is redirect to a new page so
14:34 - to do that what I'm going to do is from
14:36 - Jango to shortcuts import render and
14:38 - import redirect and all we'll do in here
14:41 - is just instead of returning this
14:44 - response we'll simply just return a
14:45 - redirect so we'll return redirect and in
14:49 - this case where we go we will just go to
14:51 - slash home so now if I recreate a new
14:54 - user we would go to the home page and
14:57 - the user would be created so that's
14:59 - great for that but what I want to do now
15:01 - is have the ability to add a new field
15:05 - to our form so for right now all we had
15:08 - was those three fields but what if when
15:09 - you create a new user you want to ask a
15:11 - ton of different questions like a phone
15:12 - number you want to get all that kind of
15:13 - stuff how can we do that well to do that
15:16 - what we need to do is inside of our
15:18 - application here I believe we need to
15:21 - create a new file called forms dot PI so
15:24 - what we're gonna do is inside of
15:26 - register we're going to do new file
15:28 - we're going to save this as form stop I
15:31 - and we're just gonna modify our form
15:33 - slightly so save that as their an issue
15:36 - this reason why this isn't working
15:38 - forms dot P why um hit enter okay I'm
15:45 - very confused right now why this is not
15:47 - working
15:48 - forms okay uh anyways let's try this one
15:54 - more time okay so for some reason that
15:57 - was just messing up but anyways forms
15:58 - dot pi and what we're gonna do for this
16:00 - now is actually import these same things
16:02 - that we had before so this login
16:04 - authenticate user creation form so let's
16:06 - copy those and paste those in here and
16:08 - what I'm gonna do now is just create a
16:10 - class that is that inherits from user
16:13 - creation form and add a few new fields
16:15 - to it so to do that I'm going to say
16:16 - class and in this case I'll just do
16:18 - register form and will inherit from user
16:23 - creation form and that means we're gonna
16:25 - get all the same properties as user
16:27 - creation form so we're gonna have that
16:28 - nice layout as well but instead now
16:31 - we'll add a few new attributes so for
16:33 - example if I wanted to add an email here
16:35 - what I could do is I could say email
16:36 - equals and in this case models which I
16:41 - need to import as well so let me import
16:43 - this we're gonna say from Django
16:47 - models I believe import model
16:51 - it's either models or models and anyway
16:54 - so let's do I email equals models dot
16:56 - and in this case we'll say email field
16:58 - like that and it's might be lowercase
17:02 - I'm not sure okay so we'll do email
17:04 - field there and now what we're gonna do
17:06 - is add something that we haven't done
17:08 - before which will allow us to change
17:10 - some of the parent properties of this
17:13 - class so I'm gonna create a new class
17:15 - inside of this class which is called
17:17 - meta now it needs to be named this and
17:20 - what I'm gonna do in here is define the
17:22 - fact that this register form is going to
17:25 - save into the users database so you know
17:29 - how when we did user creation form don't
17:31 - save it saved the form well we need to
17:33 - say that when we're using this form we
17:36 - need to save in the user database so to
17:38 - do that I need to import a few other
17:40 - things so one second here what I'm going
17:43 - to do is just go to
17:45 - I'm gonna say from Jango dot Khan trib
17:50 - dot off dot models and in this case
17:53 - import user and actually I need to
17:56 - change this Jango top models thing up
17:58 - here because this is incorrect I'm gonna
18:00 - say from Jango import forms and instead
18:03 - of models this is gonna be forms by bad
18:05 - on that so say in email eels forms dot
18:08 - email field and then inside of this meta
18:10 - class what I'm gonna do is say model is
18:12 - equal to in this case user so I'm
18:14 - defining that we are going to change the
18:17 - user model whenever we save something in
18:19 - this this form so now I'm also gonna
18:22 - define one more property which is going
18:23 - to be fields now what this fields
18:25 - property is gonna do is pretty much lay
18:28 - out where I want my fields to be so
18:31 - typically when you sign up you asked to
18:34 - do a username and email a password and
18:36 - the other password well right now if I
18:38 - were to actually use this form this
18:39 - email field wouldn't be showing up and
18:41 - that's because inside of the parent
18:44 - class it doesn't know that we have this
18:45 - email field so I have to define that so
18:48 - to do this what I do is I simply type
18:50 - the name of the fields inside of this
18:53 - list in the order that I want them to
18:54 - appear in my form so if I wanted a mail
18:57 - to show up first I would type email if I
18:59 - wanted a username to type up first I
19:01 - would type username so in this case
19:02 - let's do user name email and then we'll
19:06 - do password one and password two
19:10 - now these three field names username
19:12 - password one and password two are
19:14 - already built into the form so this user
19:16 - creation form that's why I'm using them
19:18 - if we were to per say create another
19:21 - field here maybe we created a field that
19:23 - was like your gender or something like
19:24 - that
19:25 - then we would have to put that field in
19:27 - here as well if we wanted to show up on
19:29 - the form and this will specify in what
19:32 - order we want things to show up so
19:33 - that's how you can change that as well
19:34 - so now that we've done that we need to
19:37 - now start using this register form
19:39 - rather than using this user creation
19:41 - form so if I go in my view stop hi file
19:45 - now I can actually remove this what I'm
19:47 - gonna say is from and in this case we
19:50 - can just import it directly from forms
19:52 - so say from forms import and in this
19:56 - case we'll do
19:57 - register register form like that
20:01 - and now rather than using user creation
20:03 - form will use register form like this
20:07 - and this should be working for us
20:09 - assuming I did not make any mistakes so
20:12 - register form so now let's try to reload
20:15 - the page and see what we're getting on
20:17 - what do you call it let me make sure
20:18 - that this actually is running quickly is
20:21 - it seeing that we changed anything one
20:25 - second guys
20:26 - no module named forms interesting I have
20:30 - formed up high right here let's try from
20:32 - dot forms and see if this works there we
20:37 - go so I just need to add that dot before
20:38 - four but four forms okay so let's go now
20:41 - back to what was its register like this
20:45 - and see what we get now okay so now we
20:47 - have user name email password and
20:50 - password confirmation now I know this is
20:52 - still very messy but we have
20:54 - successfully added an email field so now
20:57 - it's time to actually make this look a
20:59 - little bit nicer using a little bit of
21:00 - bootstrap and what's known as crispy
21:03 - forms so crispy forms is a really
21:05 - popular form kind of framework used in
21:08 - Django and you just have to install it
21:10 - using pip so what I'm gonna do is simply
21:12 - go into my command line here and do pip
21:14 - install and we're gonna say Django -
21:17 - crispy - forms like that
21:21 - so not equal sign that needs to be a
21:23 - hyphen and what this does is it has some
21:26 - automatic styling for our forms it's
21:29 - really easy to use so that's what this
21:31 - module is essentially so we're just
21:33 - gonna pip install that same way that we
21:35 - installed Django and just make sure that
21:36 - it's in your virtual environment now you
21:38 - can see I already have it installed but
21:39 - once you have it installed there's a few
21:42 - steps we have to actually use this so to
21:45 - use crispy forms what we need to do
21:46 - first of all is go into our my site
21:49 - settings file so we need to find my site
21:52 - my site and go to settings not pi
21:54 - and we have to add krispies forms into
21:57 - this settings not pi file so to do this
22:00 - what we're gonna do is we're gonna say
22:01 - Krispy I think it's just Krispy
22:04 - underscore forms we get I'm pretty sure
22:07 - that's all we have to do but I will
22:08 - double check here
22:10 - because I'm likely incorrect let's see
22:13 - here no that's actually correct so
22:15 - crispy underscore forms and what we also
22:17 - have to do is go down to the bottom of
22:19 - our settings dot PI file and we have to
22:21 - define what CSS layout or I don't know
22:25 - framework that our crispy forms is
22:27 - actually going to use so to do this I'm
22:30 - gonna say crispy and in this case
22:32 - underscore template underscore PAC and
22:36 - in this case I'm gonna say boot strap
22:39 - for now if you want your crispy forms to
22:42 - use a different kind of framework CSS
22:45 - framework you can just look up how to do
22:47 - that online it's very simple but you
22:49 - just change this the reason I'm setting
22:51 - this to bootstrap for is because by
22:52 - default it uses bootstrap two and on our
22:55 - website we're already using bootstrap
22:56 - four so we might as well just use it now
22:58 - okay so now that we've done that we're
23:01 - actually have to start using these
23:02 - crispy forms that's what they're called
23:04 - so since we've had them imported into
23:07 - the project and we have everything set
23:09 - up all we have to do to use our crispy
23:11 - forms is at the beginning of our what do
23:14 - you call it file here it actually
23:15 - doesn't have to be at the beginning but
23:16 - it has to be before where we use it what
23:18 - we're gonna do is we're gonna use our
23:20 - crispy forms so I believe to do this we
23:23 - have to say include something I have to
23:28 - have a look as I forget how to do it at
23:29 - its not include its load
23:31 - so load crispy underscore forms like
23:37 - this and in this case underscore tags
23:40 - now all we're gonna do to use this
23:42 - crispy form very straightforward is
23:44 - we're just gonna put this little up what
23:47 - is a straight line here bar I don't know
23:49 - what it's actually called someone knows
23:51 - comment down below and recite it we're
23:53 - just gonna do crispy like that
23:55 - now what this does is it's actually a
23:57 - filter and I'm not really going to talk
23:59 - about exactly what filters are but if
24:01 - you know fill what a filter is then
24:03 - that's what this is doing it's just
24:04 - gonna modify our form to make it look a
24:06 - little bit nicer and add a bit of
24:08 - styling too so let's try this now and
24:11 - see if everything is actually working so
24:12 - let me run the server see if we got any
24:14 - issues or not no we don't
24:16 - so now let's refresh this and let's see
24:18 - the drastic change that is about to
24:19 - happen there we go
24:21 - how much nicer does that look that
24:23 - other form right we have user name email
24:25 - password and password confirmation not
24:28 - it's just much better and you can see if
24:30 - I go register it's still doing this so
24:32 - that is essentially how we create a
24:34 - register form for our users to create
24:37 - new users now right now it'd probably be
24:40 - a good idea to add like a bar on the
24:41 - side to do register and I'll whatnot but
24:45 - for now we're just gonna leave it at
24:46 - this in the next video what we'll do is
24:48 - talk about logging in using these users
24:51 - and all that kind of stuff we might add
24:53 - a little bit more to this register page
24:55 - but for now I think that's fine and with
24:58 - that being said that's gonna be the
24:59 - video I hope you guys enjoyed if you did
25:01 - please make sure you leave a like and
25:02 - subscribe and I'll see you again in
25:03 - another one
25:05 - [Music]

Cleaned transcript:

hey guys and welcome back so in today's video what we're gonna be doing is talking about user registration and how to create an account on Django now fortunately for us Django actually does quite a bit of the hard work at least for us so all we have to do really is format a form and then just add a few things to our project it is a bit of a tedious process but it's much easier because of Django and another reason why a lot of people love Django because it does stuff like this for you you can see right now I have open the thing we're gonna be creating now this is just in a copy of the project that I'm working on and I just made this to make sure it was gonna work create a count page and we're gonna be making this to start we'll be adding an email field to this as well or like a add name or something like that field to this as well and yeah that's kind of all we're gonna be doing today in the next video we'll talk about how to log in and how to log out and then how to restrict access to certain parts of the website to certain users so for example the admin user can access the admin dashboard and they can see all of the different databases and all that whereas a regular user won't be able to do that so let's get started now the first step and what we're gonna have to do to do this actually is create a new application so what I want to do is right now we already have an application called main but I want to create an application now called like users are called register or something like that that is going to handle the login logout and registration for our website now this is the reason I'm doing this is also so that you can just copy this application and put it into any other Django project and because it just kind of makes sense to separate things out so to do that we're gonna go to our command line and we're gonna create a new app using that Python managed to Python so just a Python managed up pie and when I say start app and in this case I'll just call mine register like this you can name yours whatever you want but I'm sure to say register so there we go it has successfully executed and now if we go to our directory we can see that we have register popping up here now what I'm gonna do to start is I'm just gonna what do you call it modify some URLs so we're gonna add a page that we'll be able to use to register because we need register page so let's open up subline text here let me just open up a new window why is this not working one second guys file open folder here we are okay so Jing go right there okay so there we go now we're in Django and what I'm gonna do is I'm going to modify the URLs from within my main file here so that we're gonna link to a view that we're gonna create inside of our new application called register so if I go to URLs here you can see that right now these are our main URLs that we have inside of our main application but what I want to do is go to the URLs inside of my site so let's do that here and what I want to do is just add a new path that's going to direct to a new page and in this case I'm just gonna call this one slash create I guess or actually not create let's do register so like registering for a new account we'll call it that and what I'm gonna do is I'm going to link this directly to the function that's gonna render this from our register application so what I'm gonna do inside of register now and I'll come back to this in a second is instead of used up hi I'm simply gonna create a function in this case I'm just gonna say define we'll call it register as well it'll take response and then in here all we'll do is just return render and then we will render something in here in a second Bowl just fill that in for right now so we go back to URLs what I'm gonna do now is I'm going to import this file in this function so that we can use it from in here to link directly to that view so to do that I'm gonna say from and in this case we'll do a register because that's the name of our folder register imports in this case views as and I'm just gonna say V now the reason I'm saying views as V is because we could possibly be importing some more views into here and all of them are gonna be called views right like the views for this application is the same as the name of the views for the main application so just by doing it as something that way we're gonna differentiate them so we don't run into any mistakes essentially so now I'm gonna say what we'll go to is we go to V dot in this case actually from register import views will go to V dot register like that and will say name equals in this case register now add that comma and we should be good in terms of linking to that okay so now that we've done that what I want to do first of all is create an actual page that will be our register page which involves creating a template for that so I need to do the same process I did to create templates within my main application and that is starting off by creating a new folder inside of our register application and in this case I'm just gonna call it templates ten plates like that and then inside of templates I'm gonna create another new folder and if we remember we call this register now inside of register I can create my file which will be my register HTML file which will display the form that we're going to see so I'm just gonna start by extending my base template and the way that we do this now because this is in what do you call a different directory is the exact same as before we just have to specify where we're getting it from so we're gonna say main slash based HTML and then what we're gonna do in here is we'll do our blocks so I have the block title and we'll have the block content so block title and in this case we'll just say create and a couch or something like that and then we can end that block and block and then now we'll do our block content and then we will keep going from there so say block content and here we'll say percent percent and block now we'll save this as register dot HTML inside that template file and there we go we have now created the file that we can render and display on the screen now while we're in here I'm just gonna fill this in and populate it and all I'm gonna do essentially to do this is I'll use a little bit of style a little bit of bootstrap styling and then just display the form inside of here using the way that we can just display Django forms and then you guys will see how it works in a second anyways so let's start to create some form tatics will say form in this case we're gonna say method equals post because this is gonna be the forum to create a new account so obviously it's gonna have to be post method because we need to make sure that information is secure when we're sending it to the backend say for method equals post I'm gonna say class is equal to in this case forum group and then we'll end that form tag and in here we will simply do what he call its form like this now the only other thing we need to add is a button and this button will be the submit button because by default Django doesn't generate that for us so what we can do to do this to just say button we'd say type equals if I didn't hit insert there you type equals submit submit like that and what else do we even need for this we say class equals in this case BTN and on BTN success I believe that's the class name and I can end that button tag and inside here we'll just say what do you call it joy in' or like register like that and that's what we're gonna do for now we'll make this look a little bit better after but that's all we really need for right now okay so now that we've done that we've said well we're gonna pass a form to this view so that means from inside here we're gonna have to be passing a form now what's really nice is Django actually automates the form for what he call it logging in and creating a new account it makes one for you that you can just use so what I'm gonna do is simply import the built in Django form and then we're just gonna use it inside of here to pass to our register template so the way that we do this is we have to I'm actually just gonna copy these in because they're a bit long and I don't wanna mess up the the spelling where I say from Django contrib off import login import authenticate and then we're also gonna import from Django contrib off forums we're gonna import user creation form now this user creation form is what we're gonna use to create a new user and this in a prebuilt form just like when we went into our application and we create our own form using the Django builtin forms this one's just already made for us and we can go ahead and start using it right away so to use this I'm gonna say form equals and in this case user creation form and then when I render my template all pass response will do in this case register and in this case slash register dot HTML and for the context here will pass in form colon form so assuming I spelt everything correctly now if we actually run our server and go to this we should see a form showing up actually one step for that that I should not have forgotten but I almost did we need to add our application in this case which is registered into our settings dot PI file because if you remember when we initially created a new application you can see that we added this main Apps domain config well we need to repeat this process now with our new application which is registers so let's just copy this and paste it down here and instead of having main we're gonna change this to just be register and here register as well remember that capital at the beginning okay so now that we've done that assuming I don't make any mistakes if we run the server we should be all good at we should be able to see all this stuff so let's do this now I will say Python managed dot PI and in this case run server okay no issues so let's grab that let's go actually I'm just gonna refresh this and it should pop up and now you can see that we are actually getting this beautiful register window now I'm saying that sarcastically because obviously this does not look amazing and we're gonna work on styling this and making it look a little bit better in a second but you can see that we actually have a somewhat functional user registration window already created for us and you can see it says required 150 characters this is the thing that you need for passwords and then it asks you for username password and all this stuff and then there's a register button that we created so that's awesome and that works well now all we the thing is though if we actually type anything in here so for example I say Tim and make my password one two it says your pastor cannot be entirely new net new American must be at least 8 characters ok let's just type it's lame a bunch of letters for example and if I type a bunch of other letters and hit register we run into an error that CRS F CSRF token is missing so I'll have to add that but my point here was gonna be that this register button doesn't actually do anything just like when we created a form before we actually need to add the functionality to save the form and create the new user which is what we will do now after we add that token that we need so let's add that token first of all inside of here CS CSRF underscore token and now let's go into view stop hi and let's check how we can validate this form and how we can actually save things using it first of all before we start styling it too much so we're gonna do is what we've done before so we're gonna say if response dot method equals equals and in this case post then that means that we are going to be creating a new user so what we'll do in here is we'll start by saying actually we'll take this form I will put it up here and inside of here will populate this with response dot post now what we'll say say if form dot is and I believe it's underscore valid what we can do to save the form which is very easy is literally just say form dot save and what this is going to do is actually save our new user in the users database for us and I'll show you how this works in just a second but let's add this else here so that we create a blank form if for some reason we're not getting that post request right so this is all we need to do actually to handle and make this form work obviously we're gonna be doing a lot more here but before we're finished but this will actually allow us to have a valid form so let us try to get this working now so let me go back here and let me refresh the page and now let's try to create an account and let's say let's make an account tech with Tim we can just make the password check with Tim 1 2 3 ok and let's hit register all right what was issued the password the to password fields did not match ok so you can see actually as well maybe that was good that I messed this up it even gives you messages when things are wrong with the form so it says the two password fields didn't match so that obviously means I spelled something wrong so let's try that again and hit register password is too similar to the user name oh man see this is this is why we use Django form because they do all this wonderful stuff for us okay let's try this now Tim with tech how about that Tim with tech one two three Tim with tech one two three register the password is two cylinders two username okay I'm just gonna use one of my own passwords and hopefully it doesn't show it anywhere on the screen okay so now we've registered and I actually create an account called tech with Tim and I've I've done that I know it doesn't look like anything happened but that's what we're gonna add as well next when we Korean account will redirect to a new page but let's try going to the admin dashboard here quickly and see if we can see this new user in our database so let me sign in here and if I go to users you can see that now we actually have two users we have Tim which is the admin user which is me and we have tech with Tim which is the new user that was just created so if I go into tech with Tim that's like the password hashing and stuff and then you can see that it has the name and that's all that we have for right now so the next things that I want to add to this now is how we can get like an email or how we can get a first name and a last name for example and how to redirect to a new page once we've created an account so once we've create an account what I'd like to do is redirect to a new page so to do that what I'm going to do is from Jango to shortcuts import render and import redirect and all we'll do in here is just instead of returning this response we'll simply just return a redirect so we'll return redirect and in this case where we go we will just go to slash home so now if I recreate a new user we would go to the home page and the user would be created so that's great for that but what I want to do now is have the ability to add a new field to our form so for right now all we had was those three fields but what if when you create a new user you want to ask a ton of different questions like a phone number you want to get all that kind of stuff how can we do that well to do that what we need to do is inside of our application here I believe we need to create a new file called forms dot PI so what we're gonna do is inside of register we're going to do new file we're going to save this as form stop I and we're just gonna modify our form slightly so save that as their an issue this reason why this isn't working forms dot P why um hit enter okay I'm very confused right now why this is not working forms okay uh anyways let's try this one more time okay so for some reason that was just messing up but anyways forms dot pi and what we're gonna do for this now is actually import these same things that we had before so this login authenticate user creation form so let's copy those and paste those in here and what I'm gonna do now is just create a class that is that inherits from user creation form and add a few new fields to it so to do that I'm going to say class and in this case I'll just do register form and will inherit from user creation form and that means we're gonna get all the same properties as user creation form so we're gonna have that nice layout as well but instead now we'll add a few new attributes so for example if I wanted to add an email here what I could do is I could say email equals and in this case models which I need to import as well so let me import this we're gonna say from Django models I believe import model it's either models or models and anyway so let's do I email equals models dot and in this case we'll say email field like that and it's might be lowercase I'm not sure okay so we'll do email field there and now what we're gonna do is add something that we haven't done before which will allow us to change some of the parent properties of this class so I'm gonna create a new class inside of this class which is called meta now it needs to be named this and what I'm gonna do in here is define the fact that this register form is going to save into the users database so you know how when we did user creation form don't save it saved the form well we need to say that when we're using this form we need to save in the user database so to do that I need to import a few other things so one second here what I'm going to do is just go to I'm gonna say from Jango dot Khan trib dot off dot models and in this case import user and actually I need to change this Jango top models thing up here because this is incorrect I'm gonna say from Jango import forms and instead of models this is gonna be forms by bad on that so say in email eels forms dot email field and then inside of this meta class what I'm gonna do is say model is equal to in this case user so I'm defining that we are going to change the user model whenever we save something in this this form so now I'm also gonna define one more property which is going to be fields now what this fields property is gonna do is pretty much lay out where I want my fields to be so typically when you sign up you asked to do a username and email a password and the other password well right now if I were to actually use this form this email field wouldn't be showing up and that's because inside of the parent class it doesn't know that we have this email field so I have to define that so to do this what I do is I simply type the name of the fields inside of this list in the order that I want them to appear in my form so if I wanted a mail to show up first I would type email if I wanted a username to type up first I would type username so in this case let's do user name email and then we'll do password one and password two now these three field names username password one and password two are already built into the form so this user creation form that's why I'm using them if we were to per say create another field here maybe we created a field that was like your gender or something like that then we would have to put that field in here as well if we wanted to show up on the form and this will specify in what order we want things to show up so that's how you can change that as well so now that we've done that we need to now start using this register form rather than using this user creation form so if I go in my view stop hi file now I can actually remove this what I'm gonna say is from and in this case we can just import it directly from forms so say from forms import and in this case we'll do register register form like that and now rather than using user creation form will use register form like this and this should be working for us assuming I did not make any mistakes so register form so now let's try to reload the page and see what we're getting on what do you call it let me make sure that this actually is running quickly is it seeing that we changed anything one second guys no module named forms interesting I have formed up high right here let's try from dot forms and see if this works there we go so I just need to add that dot before four but four forms okay so let's go now back to what was its register like this and see what we get now okay so now we have user name email password and password confirmation now I know this is still very messy but we have successfully added an email field so now it's time to actually make this look a little bit nicer using a little bit of bootstrap and what's known as crispy forms so crispy forms is a really popular form kind of framework used in Django and you just have to install it using pip so what I'm gonna do is simply go into my command line here and do pip install and we're gonna say Django crispy forms like that so not equal sign that needs to be a hyphen and what this does is it has some automatic styling for our forms it's really easy to use so that's what this module is essentially so we're just gonna pip install that same way that we installed Django and just make sure that it's in your virtual environment now you can see I already have it installed but once you have it installed there's a few steps we have to actually use this so to use crispy forms what we need to do first of all is go into our my site settings file so we need to find my site my site and go to settings not pi and we have to add krispies forms into this settings not pi file so to do this what we're gonna do is we're gonna say Krispy I think it's just Krispy underscore forms we get I'm pretty sure that's all we have to do but I will double check here because I'm likely incorrect let's see here no that's actually correct so crispy underscore forms and what we also have to do is go down to the bottom of our settings dot PI file and we have to define what CSS layout or I don't know framework that our crispy forms is actually going to use so to do this I'm gonna say crispy and in this case underscore template underscore PAC and in this case I'm gonna say boot strap for now if you want your crispy forms to use a different kind of framework CSS framework you can just look up how to do that online it's very simple but you just change this the reason I'm setting this to bootstrap for is because by default it uses bootstrap two and on our website we're already using bootstrap four so we might as well just use it now okay so now that we've done that we're actually have to start using these crispy forms that's what they're called so since we've had them imported into the project and we have everything set up all we have to do to use our crispy forms is at the beginning of our what do you call it file here it actually doesn't have to be at the beginning but it has to be before where we use it what we're gonna do is we're gonna use our crispy forms so I believe to do this we have to say include something I have to have a look as I forget how to do it at its not include its load so load crispy underscore forms like this and in this case underscore tags now all we're gonna do to use this crispy form very straightforward is we're just gonna put this little up what is a straight line here bar I don't know what it's actually called someone knows comment down below and recite it we're just gonna do crispy like that now what this does is it's actually a filter and I'm not really going to talk about exactly what filters are but if you know fill what a filter is then that's what this is doing it's just gonna modify our form to make it look a little bit nicer and add a bit of styling too so let's try this now and see if everything is actually working so let me run the server see if we got any issues or not no we don't so now let's refresh this and let's see the drastic change that is about to happen there we go how much nicer does that look that other form right we have user name email password and password confirmation not it's just much better and you can see if I go register it's still doing this so that is essentially how we create a register form for our users to create new users now right now it'd probably be a good idea to add like a bar on the side to do register and I'll whatnot but for now we're just gonna leave it at this in the next video what we'll do is talk about logging in using these users and all that kind of stuff we might add a little bit more to this register page but for now I think that's fine and with that being said that's gonna be the video I hope you guys enjoyed if you did please make sure you leave a like and subscribe and I'll see you again in another one
