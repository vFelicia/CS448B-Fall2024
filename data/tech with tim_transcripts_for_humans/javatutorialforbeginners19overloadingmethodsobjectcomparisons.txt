With timestamps:

00:00 - hey guys and welcome back to another
00:01 - Java programming tutorial so in today's
00:04 - video we're gonna be going over how we
00:06 - can compare objects and how we can get a
00:09 - string representation of different
00:11 - objects and you'll see what I mean in
00:12 - just a minute but these are really
00:14 - useful and I guarantee you guys will be
00:16 - using this a lot especially if you have
00:17 - objects like maybe like point objects or
00:19 - like some kind of mathematical objects
00:21 - that you'd want to compare without
00:24 - having to I don't know make things too
00:26 - complicated for yourself let's just say
00:27 - that alright so what I'm gonna do here
00:29 - what I've already done I guess is I have
00:31 - this student class setup and this is
00:33 - just what we're gonna work with right
00:34 - now because the other classes I had in
00:36 - previous videos were already like finish
00:38 - and they had other stuff in it so we
00:39 - each have a student and currently the
00:41 - only attribute the student has is a name
00:43 - okay now in my main Java here I've just
00:47 - created a few different students and
00:49 - then I'm just gonna be printing
00:50 - something out to the screen so that's
00:51 - why I have that right now so we can see
00:54 - student class right we just created a
00:55 - name for a student now I just want to
00:57 - show you quickly how we would go about
00:59 - like comparing objects intuitively right
01:02 - so say I want to check if Joe and Bill
01:05 - were the same right like if I want to
01:07 - see if they were equal to each other
01:08 - well we know how to do that already so
01:10 - what I would do is I'd say like Joe is
01:12 - equal to bill now intuitively you
01:15 - probably said well know their names are
01:16 - not the same so they're not gonna be
01:18 - equal to each other and well that would
01:20 - be correct but not for the reason that
01:22 - you think and I'll demonstrate that to
01:24 - you so we have Joe and Bill compared to
01:26 - each other so watch what happens if I
01:28 - try to I make these the same name right
01:30 - so you'd think well these would be the
01:32 - same object or they'd be the same thing
01:33 - right because they have the same name
01:34 - but watch what happens when I run we
01:37 - still get false now why is that exactly
01:40 - well pretty much when we use this double
01:42 - equal sign on two objects right so like
01:45 - Joe and Bill the computer doesn't know
01:48 - how to compare them so by default what
01:51 - it does is it compares the actual object
01:55 - and you see here how we're creating a
01:56 - new student so a new object and here
01:59 - we're creating another new student
02:00 - another new object these are actually
02:02 - two different objects like in memory
02:04 - okay so in your computer's Ram these are
02:07 - two different entities and they're
02:09 - completely unique although yes they have
02:11 - the same name since we can
02:13 - change names and we can do things these
02:15 - need to be dis separate objects so when
02:18 - we compare here it's actually saying
02:20 - well we're gonna look and see if these
02:22 - are the exact same object and well they
02:24 - are not now that's useful in some cases
02:27 - because sometimes we want to see if it's
02:29 - like the exact same object but in other
02:32 - cases we want to see if these objects
02:34 - have like the similar values right so in
02:37 - this case we'd probably want to compare
02:39 - the two names of the students to see if
02:41 - they were the same and in that case we
02:43 - would say well yes these are the same
02:47 - student we're gonna say yes there they
02:48 - are the same right when we do that like
02:50 - double equal sign so what I'm gonna do
02:52 - now is I'll delete this let me show you
02:54 - how we can go about doing that so inside
02:56 - of our student class I'm gonna add a
02:58 - method okay we call this public boolean
03:01 - not boolean boolean I'm gonna say equals
03:05 - and then here we're gonna take a student
03:08 - object known as other okay and then
03:12 - we'll go like that and there we are so
03:15 - what I'm gonna do in here is when we
03:17 - want to compare our student okay we're
03:19 - going to pass another student and we're
03:22 - gonna compare their names right so we're
03:24 - gonna call this dot equals on one of our
03:26 - students that already exists we're gonna
03:27 - give it another student and then we're
03:29 - gonna see if they're the same so how did
03:31 - we say we were gonna check the same well
03:32 - we're gonna look at their names okay so
03:35 - what I'm gonna do is I'm going to say if
03:36 - and then we'll say this dot name and I
03:42 - guess I need a brackets here as well
03:44 - I always forget about those if this dot
03:46 - name equals equals okay and then we'll
03:48 - say other dot name then what we'll do is
03:52 - we'll simply return true okay now
03:55 - otherwise so if these names are not the
03:57 - same what we will do is we will return
04:00 - false like that okay and that's all we
04:03 - need to do for our dot equals so now
04:06 - what's gonna happen right is we'll pass
04:08 - on one student will call this will check
04:10 - name and then we'll check the other
04:11 - student's name see if it's true if it is
04:13 - or if they're the same
04:14 - we'll return true otherwise you'll
04:15 - return false so now we can try this out
04:17 - so these two are the same names so let's
04:19 - say is Joe dot equals and then here I
04:24 - guess we will put ill so let's run this
04:27 - and you can see we get a value of true
04:29 - and then if I change bill back to say
04:32 - bill then we can run this and we can see
04:35 - we get false so now we officially have
04:38 - something checking for equality between
04:40 - the names now we could create more kind
04:43 - of ones like this like equals grade like
04:45 - whatever if you want to do that but this
04:47 - is how we can check for equality between
04:49 - objects and this method is like really
04:50 - easy to add in obviously if you had a
04:53 - student with a bunch more values too
04:54 - maybe you have like grade maybe you had
04:56 - other stuff like that or they could last
04:58 - name you could check to make that sure
04:59 - those are all the same or you can just
05:01 - kind of custom Li do it the way that you
05:03 - want to say two different objects are
05:05 - the same right okay
05:07 - so the next thing I want to be able to
05:09 - do is compare things using like greater
05:11 - than sign or less than sign right so I
05:14 - want to see if like Jo is greater than
05:15 - bill or Bill is greater than Tim and we
05:17 - should intuitively like do that based on
05:19 - alphabetical order right so I can't
05:22 - really show you like a way to do it here
05:23 - cuz I don't think it's don't we're going
05:25 - to show greater than Phil yeah see that
05:28 - just is undefined there's no way to do
05:30 - that so what we're gonna do is we're
05:32 - going to use a method called compare to
05:34 - okay and what we have to do to compare
05:37 - to is we have to woody call it sir we
05:41 - have to implement something into our
05:42 - class so really I say implements at the
05:45 - top of our class I might as well
05:47 - influence correctly and we're going to
05:48 - type comparable and then in here
05:52 - relative student now what we're actually
05:54 - doing here when we bring this in is
05:57 - we're actually implementing something
05:58 - called an interface now in interface I'm
06:01 - gonna talk about in I think like two
06:03 - videos from now but pretty much it's
06:05 - just like a set of methods that we have
06:07 - to use for the class work so when we
06:11 - implement this comparable thing that
06:13 - means we're allowed to bring in a method
06:14 - this is gonna allow us to to compare two
06:17 - objects okay so what we'll do now is we
06:21 - will say public and actually what is the
06:26 - thing for this the return type public
06:29 - int and compare to and then in brackets
06:33 - here again we're going to take student
06:36 - and this will be other
06:39 - we'll put our brackets here like this
06:41 - okay so now again we're gonna have to
06:43 - return some kind of integer and I'll
06:45 - show you how that works I just got to
06:47 - get it up on my other screen so I don't
06:48 - mess this up okay so what I'm gonna do
06:50 - now is I'm gonna return this dot name
06:53 - dot compare to and in this case we're
06:57 - gonna compare it to another string so
06:59 - the other string will be other dot name
07:02 - okay so essentially what this is gonna
07:05 - do is it is going to compare this name
07:07 - to this other name and it's gonna give
07:10 - us an integer value saying kind of how
07:11 - far away they are right so it's it's
07:15 - kind of hard to like explain so I'm just
07:16 - gonna do it from over here and you'll
07:20 - see what I mean so if I go Joe got
07:22 - compared to and then again the Stube
07:25 - bill let's see what we get so we get a
07:30 - value of eight now what this means is
07:32 - Joe is greater than bill by a distance
07:36 - of eight meaning that when we compare
07:38 - these first two letters they are eight
07:40 - away I believe okay so if we wanted to
07:43 - check if Joe was greater than bill what
07:45 - we do is we check if this integer value
07:47 - returned was greater than zero so here
07:49 - greater than zero that's gonna tell us
07:51 - true if Joe is greater than bill and
07:54 - false if he's less so we run this let me
07:57 - get true now let's see if we compare Joe
08:00 - to Tim okay so T obviously is a head of
08:04 - Jay in the alphabet so we get a value of
08:06 - false okay and if we get rid of this
08:08 - greater than zero then we can see
08:11 - exactly what we're actually getting as a
08:12 - value so negative ten
08:13 - right because that's how far away J is
08:16 - from t1 we're comparing them and that's
08:18 - what the compareto does for us okay
08:20 - so if we wanted to check if Joe was less
08:23 - than Tim then we check if this value was
08:25 - less than zero in this case we get true
08:27 - so that's a really easy way that we can
08:29 - compare different objects using that
08:32 - compare to method okay so like this so
08:34 - public in compare to and you just have
08:36 - to remember to implement comparable
08:38 - student and then you can use exactly
08:41 - this return statement here now the last
08:43 - thing I want to show is a string
08:45 - representation of an object so I want to
08:47 - show you first what happens when I just
08:49 - want to print out my object to the
08:50 - screen
08:51 - so I want to print Tim and maybe ideally
08:54 - I'd like to see like Tim's name right
08:56 - come out to the screen well look what we
08:58 - get here we get tutorial one student at
09:00 - and then all these different letters
09:02 - what this is printing is actually the
09:05 - memory location of our object so all of
09:08 - our objects are actually stored in
09:10 - memory in RAM in like really fancy ways
09:12 - that I can't really explain to you guys
09:14 - but anyways this is like the address for
09:16 - it's like when the computer looks it up
09:17 - this is what it's actually using to find
09:20 - Tim and find all its values and
09:22 - obviously it's telling us where it is in
09:24 - the tutorial one like folder file
09:26 - whatever ok so this is no use to us we
09:30 - this does not help us as programmers at
09:32 - all we want to see like something that's
09:33 - a string and gives us some valuable
09:36 - information so what I need to do is I
09:38 - need to implement a another method here
09:40 - that's gonna change this to a string so
09:43 - we've used this dot to string before but
09:46 - this is exactly what I'm going to use
09:48 - ring is a public string and they will
09:51 - say to string like this ok
09:55 - and what we're gonna do in here is we're
09:58 - just going to return a string
09:58 - representation of our object so what we
10:02 - can do essentially is I can just return
10:04 - this dot name and this can be what we're
10:07 - gonna use to represent our object now
10:09 - typically you might see people do
10:11 - something like this ok and just follow
10:12 - me for one second there they do student
10:15 - and they have a bracket and then we're
10:16 - gonna add this dot name and then they
10:19 - add that with another bracket here so
10:22 - this way you'll see when I printed it to
10:24 - the screen what it looks like ok we get
10:25 - student and then Tim and this is just
10:28 - simply telling us that the object we're
10:31 - printing is a type of student and the
10:33 - name value is Tim okay and we can even
10:36 - get more fancy and we could add like
10:38 - double brackets around this dot name if
10:40 - we want to show that this done name was
10:42 - a string type okay now for our purpose
10:45 - I'm just gonna get rid of this student
10:46 - and this bracket here and you can see
10:49 - again when we print this it goes Tim now
10:52 - notice when I'm printing this I'm not
10:54 - actually calling this to string method
10:56 - like I'm not not doing dot to string
10:59 - that's because Java actually knows that
11:02 - when we have this to string method in
11:04 - here
11:04 - this is gonna represent the string right
11:06 - so when we try to print it it's
11:07 - automatically gonna call that dot to
11:09 - string method okay so now what we can do
11:14 - is we can also just call like two
11:16 - strings so I can if I wanted to I could
11:18 - just call dot two string like this and I
11:21 - could convert it to string and this will
11:22 - work the exact same ways before you can
11:24 - see we get Bill okay again in here you
11:27 - can change this up however you'd like
11:29 - in some cases excite your student had
11:30 - some grades maybe you wanted to write
11:32 - their name and then after you have like
11:33 - an array of all their grades or
11:34 - something like that okay so anyways that
11:37 - has been it for this tutorial
11:39 - in the next tutorial we're gonna be
11:40 - talking about inner classes that we're
11:41 - going to be going into interfaces and
11:42 - enums it's some more advanced stuff that
11:44 - I think is pretty cool in Java if you
11:46 - guys enjoyed the video as always please
11:47 - make sure you leave a like and subscribe
11:49 - and I will see you again in another one
11:54 - [Music]

Cleaned transcript:

hey guys and welcome back to another Java programming tutorial so in today's video we're gonna be going over how we can compare objects and how we can get a string representation of different objects and you'll see what I mean in just a minute but these are really useful and I guarantee you guys will be using this a lot especially if you have objects like maybe like point objects or like some kind of mathematical objects that you'd want to compare without having to I don't know make things too complicated for yourself let's just say that alright so what I'm gonna do here what I've already done I guess is I have this student class setup and this is just what we're gonna work with right now because the other classes I had in previous videos were already like finish and they had other stuff in it so we each have a student and currently the only attribute the student has is a name okay now in my main Java here I've just created a few different students and then I'm just gonna be printing something out to the screen so that's why I have that right now so we can see student class right we just created a name for a student now I just want to show you quickly how we would go about like comparing objects intuitively right so say I want to check if Joe and Bill were the same right like if I want to see if they were equal to each other well we know how to do that already so what I would do is I'd say like Joe is equal to bill now intuitively you probably said well know their names are not the same so they're not gonna be equal to each other and well that would be correct but not for the reason that you think and I'll demonstrate that to you so we have Joe and Bill compared to each other so watch what happens if I try to I make these the same name right so you'd think well these would be the same object or they'd be the same thing right because they have the same name but watch what happens when I run we still get false now why is that exactly well pretty much when we use this double equal sign on two objects right so like Joe and Bill the computer doesn't know how to compare them so by default what it does is it compares the actual object and you see here how we're creating a new student so a new object and here we're creating another new student another new object these are actually two different objects like in memory okay so in your computer's Ram these are two different entities and they're completely unique although yes they have the same name since we can change names and we can do things these need to be dis separate objects so when we compare here it's actually saying well we're gonna look and see if these are the exact same object and well they are not now that's useful in some cases because sometimes we want to see if it's like the exact same object but in other cases we want to see if these objects have like the similar values right so in this case we'd probably want to compare the two names of the students to see if they were the same and in that case we would say well yes these are the same student we're gonna say yes there they are the same right when we do that like double equal sign so what I'm gonna do now is I'll delete this let me show you how we can go about doing that so inside of our student class I'm gonna add a method okay we call this public boolean not boolean boolean I'm gonna say equals and then here we're gonna take a student object known as other okay and then we'll go like that and there we are so what I'm gonna do in here is when we want to compare our student okay we're going to pass another student and we're gonna compare their names right so we're gonna call this dot equals on one of our students that already exists we're gonna give it another student and then we're gonna see if they're the same so how did we say we were gonna check the same well we're gonna look at their names okay so what I'm gonna do is I'm going to say if and then we'll say this dot name and I guess I need a brackets here as well I always forget about those if this dot name equals equals okay and then we'll say other dot name then what we'll do is we'll simply return true okay now otherwise so if these names are not the same what we will do is we will return false like that okay and that's all we need to do for our dot equals so now what's gonna happen right is we'll pass on one student will call this will check name and then we'll check the other student's name see if it's true if it is or if they're the same we'll return true otherwise you'll return false so now we can try this out so these two are the same names so let's say is Joe dot equals and then here I guess we will put ill so let's run this and you can see we get a value of true and then if I change bill back to say bill then we can run this and we can see we get false so now we officially have something checking for equality between the names now we could create more kind of ones like this like equals grade like whatever if you want to do that but this is how we can check for equality between objects and this method is like really easy to add in obviously if you had a student with a bunch more values too maybe you have like grade maybe you had other stuff like that or they could last name you could check to make that sure those are all the same or you can just kind of custom Li do it the way that you want to say two different objects are the same right okay so the next thing I want to be able to do is compare things using like greater than sign or less than sign right so I want to see if like Jo is greater than bill or Bill is greater than Tim and we should intuitively like do that based on alphabetical order right so I can't really show you like a way to do it here cuz I don't think it's don't we're going to show greater than Phil yeah see that just is undefined there's no way to do that so what we're gonna do is we're going to use a method called compare to okay and what we have to do to compare to is we have to woody call it sir we have to implement something into our class so really I say implements at the top of our class I might as well influence correctly and we're going to type comparable and then in here relative student now what we're actually doing here when we bring this in is we're actually implementing something called an interface now in interface I'm gonna talk about in I think like two videos from now but pretty much it's just like a set of methods that we have to use for the class work so when we implement this comparable thing that means we're allowed to bring in a method this is gonna allow us to to compare two objects okay so what we'll do now is we will say public and actually what is the thing for this the return type public int and compare to and then in brackets here again we're going to take student and this will be other we'll put our brackets here like this okay so now again we're gonna have to return some kind of integer and I'll show you how that works I just got to get it up on my other screen so I don't mess this up okay so what I'm gonna do now is I'm gonna return this dot name dot compare to and in this case we're gonna compare it to another string so the other string will be other dot name okay so essentially what this is gonna do is it is going to compare this name to this other name and it's gonna give us an integer value saying kind of how far away they are right so it's it's kind of hard to like explain so I'm just gonna do it from over here and you'll see what I mean so if I go Joe got compared to and then again the Stube bill let's see what we get so we get a value of eight now what this means is Joe is greater than bill by a distance of eight meaning that when we compare these first two letters they are eight away I believe okay so if we wanted to check if Joe was greater than bill what we do is we check if this integer value returned was greater than zero so here greater than zero that's gonna tell us true if Joe is greater than bill and false if he's less so we run this let me get true now let's see if we compare Joe to Tim okay so T obviously is a head of Jay in the alphabet so we get a value of false okay and if we get rid of this greater than zero then we can see exactly what we're actually getting as a value so negative ten right because that's how far away J is from t1 we're comparing them and that's what the compareto does for us okay so if we wanted to check if Joe was less than Tim then we check if this value was less than zero in this case we get true so that's a really easy way that we can compare different objects using that compare to method okay so like this so public in compare to and you just have to remember to implement comparable student and then you can use exactly this return statement here now the last thing I want to show is a string representation of an object so I want to show you first what happens when I just want to print out my object to the screen so I want to print Tim and maybe ideally I'd like to see like Tim's name right come out to the screen well look what we get here we get tutorial one student at and then all these different letters what this is printing is actually the memory location of our object so all of our objects are actually stored in memory in RAM in like really fancy ways that I can't really explain to you guys but anyways this is like the address for it's like when the computer looks it up this is what it's actually using to find Tim and find all its values and obviously it's telling us where it is in the tutorial one like folder file whatever ok so this is no use to us we this does not help us as programmers at all we want to see like something that's a string and gives us some valuable information so what I need to do is I need to implement a another method here that's gonna change this to a string so we've used this dot to string before but this is exactly what I'm going to use ring is a public string and they will say to string like this ok and what we're gonna do in here is we're just going to return a string representation of our object so what we can do essentially is I can just return this dot name and this can be what we're gonna use to represent our object now typically you might see people do something like this ok and just follow me for one second there they do student and they have a bracket and then we're gonna add this dot name and then they add that with another bracket here so this way you'll see when I printed it to the screen what it looks like ok we get student and then Tim and this is just simply telling us that the object we're printing is a type of student and the name value is Tim okay and we can even get more fancy and we could add like double brackets around this dot name if we want to show that this done name was a string type okay now for our purpose I'm just gonna get rid of this student and this bracket here and you can see again when we print this it goes Tim now notice when I'm printing this I'm not actually calling this to string method like I'm not not doing dot to string that's because Java actually knows that when we have this to string method in here this is gonna represent the string right so when we try to print it it's automatically gonna call that dot to string method okay so now what we can do is we can also just call like two strings so I can if I wanted to I could just call dot two string like this and I could convert it to string and this will work the exact same ways before you can see we get Bill okay again in here you can change this up however you'd like in some cases excite your student had some grades maybe you wanted to write their name and then after you have like an array of all their grades or something like that okay so anyways that has been it for this tutorial in the next tutorial we're gonna be talking about inner classes that we're going to be going into interfaces and enums it's some more advanced stuff that I think is pretty cool in Java if you guys enjoyed the video as always please make sure you leave a like and subscribe and I will see you again in another one
