With timestamps:

00:00 - hey guys welcome back to another Kibby
00:02 - tutorial so in today's video i'm
00:04 - actually gonna be going into something
00:05 - called the kv design language now i
00:08 - guess you could call it Kibby as well
00:09 - but the file extension for it is dot kv
00:11 - and essentially you can kind of think of
00:13 - this almost as like a CSS because it's a
00:16 - design language which is meant to kind
00:18 - of simplify your code so that you don't
00:20 - have to have like if you remember in the
00:22 - last video we had like don't add widget'
00:24 - and then we were defining the widget and
00:26 - we were giving it like a text color and
00:27 - a font color so this is just a much
00:29 - easier way to be able to style elements
00:32 - so essentially what I'm gonna do is you
00:33 - can see here I've deleted all the code
00:35 - from the last video essentially other
00:36 - than the main stuff and I'm actually
00:38 - gonna recreate exactly what we did in
00:40 - the last video using the Kivi design
00:43 - language to show you the contrast
00:44 - between the two and you guys can pick
00:46 - whether or not you'd like to design
00:48 - things directly from Python without
00:50 - using this Cavey language but it's super
00:52 - simple and it's not like a whole new
00:55 - programming language to learn it's
00:56 - literally like you'll see when I start
00:58 - doing it how easy it really is but
01:00 - essentially the reason we use that is to
01:01 - separate our style from our code and
01:03 - it's typically a good idea the way I
01:05 - kind of like to think of it is
01:06 - separating your HTML from your javis are
01:08 - from your JavaScript from your CSS if
01:11 - you guys ever did any web development
01:12 - stuff you'll probably see why I'm using
01:15 - that as a like to relate to it all right
01:17 - so essentially what we need to do is we
01:19 - need to create a style file right and
01:22 - this file is gonna have all of the the
01:25 - styling code in it for us what we need
01:27 - to do is we have to create a new file so
01:29 - if you're working a PI time you can just
01:30 - go new file otherwise just go new text
01:33 - file I'm sure you guys could probably
01:34 - figure out how to do that if not let me
01:36 - know and what you're gonna have to call
01:38 - this file if you're working with me and
01:40 - you named your main class that has the
01:42 - build method in it my app you're gonna
01:44 - go lower cases my dot kV now to explain
01:48 - why we do this in a second but if you're
01:50 - working with me and you named it the
01:52 - same you do my kV okay and save that
01:54 - file now if you didn't what you have to
01:57 - do is you have to name the kv file the
02:00 - same as this class name except if it
02:04 - ends in a p-- you have to remove the app
02:06 - so in this case we said my app so we
02:09 - just called it my and we moved the app
02:12 - now also note
02:13 - everything is in lower cases so
02:15 - everything you type in this file um
02:17 - sorry not in this file like whatever you
02:19 - name this file is always gonna be lower
02:21 - cases so even if my class name was my
02:23 - app like that with a capital my you
02:25 - would just name it
02:26 - lower case my dot kV okay and you're
02:30 - moving the app so to just show you a
02:32 - contrast here in case anyone's confused
02:33 - if I do like hello dot app I would name
02:36 - this file hello dot kV and Hello would
02:39 - be in all lower cases now if I were to
02:42 - name this file let's just say like CLS
02:44 - then I would just name my file
02:47 - CLS dot K V again in all lower cases if
02:50 - I were to name it CLS dot or CLS app
02:53 - then again it would still be CLS because
02:56 - if you end an app you don't use that in
02:58 - the name I know it's confusing why the
03:00 - heck would they do that don't ask me but
03:02 - that is how you do it if you're having
03:04 - any issues of that please let me know ok
03:06 - so now that we have that file I'm gonna
03:08 - show you how we can actually add widgets
03:10 - to our screen without doing anything in
03:12 - this Python class actually there's one
03:13 - thing we have to do so the first thing
03:14 - I'm gonna do for sorry from Python
03:16 - excuse me I need to give you AI X dot
03:19 - widget so we're gonna import that and
03:21 - then we're gonna import widget now the
03:24 - reason we're doing this is because our
03:25 - class has to inherit from widget just
03:28 - when we're gonna be using it inside this
03:30 - KB file so we just need to import this
03:32 - widget and then just make it inherit
03:33 - from widget as opposed to that grid
03:35 - layout that we had before so now we're
03:37 - gonna go into this KB file now this KB
03:40 - file is really nice and essentially the
03:42 - way it works is you can just type out
03:44 - exactly what you want in here to show up
03:46 - on on the screen so what we have to
03:49 - first do is we have to reference the
03:50 - class that we're gonna be using to well
03:53 - draw things to the screen so like if we
03:55 - had multiple windows week would
03:56 - reference different classes and you'll
03:58 - see the way that we do this so our class
03:59 - is called my grid right and this is
04:01 - what's gonna be returned from my app and
04:03 - it so it's building so so we need to
04:05 - reference first so what we'll do in here
04:07 - is we'll do a little tag and we'll say
04:08 - my grid now this defines that we're
04:11 - gonna be working with the my grid class
04:13 - ok you put in this little tag and
04:14 - everything in here works by indentation
04:17 - not brackets ok so just like python
04:19 - everything needs to be indented properly
04:20 - so we're gonna hit tab and i'm just
04:22 - gonna type something out and we'll talk
04:23 - about exactly what it's doing
04:24 - ok I'm gonna type label
04:26 - : tab again and then say text and we'll
04:29 - just say tech would Tim okay now I'm
04:32 - gonna save this file ctrl s alright and
04:35 - let's just actually let's talk about
04:36 - exactly what I did here so my class name
04:39 - was my grid inherits from widget in here
04:42 - so we're gonna return to my grid right
04:43 - so we have this KB file we haven't done
04:46 - anything in the Python file to reference
04:48 - this okay we just named it appropriately
04:49 - we named it my again because that's the
04:51 - way the naming convention works and
04:53 - we're gonna say here we're gonna put a
04:54 - label and it's gonna have the text tech
04:57 - with tip so let's just run this first
04:59 - and see what's happening I'll explain
05:00 - why after so you can see that we
05:02 - actually get tech with Tim showing up in
05:04 - the bottom left hand corner of the
05:06 - screen so you might have expected it to
05:07 - be in the middle a talk about why that
05:08 - doesn't happen in a second but
05:10 - essentially you can see that we've added
05:11 - a label to our Kibby file and we didn't
05:15 - like type anything to load this file in
05:17 - what actually happens is when you run
05:19 - Gibby it automatically looks for this
05:22 - class it looks for this style file and
05:24 - the way it does that is because it looks
05:26 - at this class name I don't know Kay I
05:28 - don't know what I just did there it
05:29 - looks at this class name right and then
05:31 - it tries to find a kivi file that is
05:33 - that goes with it so in this case my Kb
05:36 - it finds that and then it can parse
05:38 - through this and add those widgets for
05:40 - us so let's just see how exactly this
05:44 - works just add a little label and then I
05:45 - had a text property tech with Tim now
05:48 - the reason that it's like in the bottom
05:49 - left-hand corner is just because we have
05:50 - to kind of move it around which I'm
05:52 - gonna show you in the next video but
05:53 - let's actually start building what we
05:55 - had in the last video using this KB file
05:57 - so what we're gonna do to do this and I
05:59 - said I should go look at my other screen
06:00 - here quickly is we're gonna set up
06:02 - exactly what we did before um I'll just
06:04 - go through it and it's better as an
06:05 - example so I'm gonna make a grid layout
06:07 - okay and the grid layout is gonna have
06:10 - columns to write or actually we need to
06:13 - do columns one because we're gonna have
06:14 - multiple grid layouts okay so we're
06:16 - gonna have a grid layout and it's gonna
06:17 - have one column okay inside of this grid
06:21 - layout we're gonna have another grid
06:23 - layout so notice that because this other
06:25 - grid layout is going to be inside of
06:27 - this I have it indented in inline with
06:30 - this so that means that anything that
06:33 - kind of is like that's why the
06:34 - indentation works anything insides like
06:37 - indented pass is gonna be
06:38 - inside something so if I put this label
06:40 - here now it's gonna be inside this
06:41 - second gridlayout so I'll go through
06:44 - it'll make more sense once I can I get
06:45 - typing but essentially what I'm gonna do
06:47 - is I'm just gonna rebuild what I had
06:49 - before so label will say its name and
06:51 - I'm actually I'm just gonna do one loss
06:53 - this time just to save us some time and
06:54 - what else we had in grid layout we had a
06:56 - text input so let's put that and then
06:59 - what was a property of text input
07:01 - multi-line equals false right okay
07:05 - and then again inside a grid layout we
07:07 - have another label so let's do that
07:08 - and we'll say text equals I'm just gonna
07:11 - do email so last name this time we'll
07:12 - just ignore that and now we'll do text
07:16 - input equals multi-line oh what am I
07:21 - saying
07:22 - okay so actually I already made a
07:24 - mistake here equal signs I'm used to
07:26 - Python they need to be colons just like
07:28 - you might have in CSS right so if you
07:30 - guys are putting equal signs it's not
07:31 - going to work you got to do colons okay
07:33 - okay so text input colon tab and then
07:37 - we'll say multi-line colon false like
07:41 - that I don't think it matters if you
07:42 - have a space or not afterwards I mean
07:44 - you guys can play with that okay so we
07:46 - have that now so we added that grid
07:49 - layout inside of the other grid layout
07:50 - so if you remember what else we had we
07:52 - also added a button so let's add this
07:53 - and the button had text :
07:56 - and we said submit like that okay so
08:00 - this is what we've done we've added a
08:01 - grid layout inside of or we've created a
08:03 - grid layout one-call we've added a grid
08:06 - layout that has label text input label
08:08 - text input the same as we did before
08:09 - inside of the other grid layout we
08:12 - already talked to a why that works and
08:13 - then we have a button that is inside at
08:15 - the main grid layout so let's run this
08:17 - and see what we get okay so we get this
08:20 - and this is actually exactly what we had
08:23 - before it just sits in the bottom corner
08:24 - of the screen right so you can count it
08:25 - you can see why this is how this is
08:27 - similar but why is it in the bottom
08:29 - corner of the screen and how do we get
08:31 - it to like move up and be part of the
08:33 - full screen so I'll show you this
08:34 - quickly and then I'm actually gonna
08:35 - probably end here and we'll go into more
08:37 - stuff in the next video but essentially
08:39 - the way that we get this to go into the
08:42 - like the amount of the big part of the
08:43 - screen is we have to define a few more
08:45 - properties so inside of our my grid here
08:49 - okay
08:50 - actually let's do inside of this grid
08:52 - there's a few more properties that we
08:54 - can use we can use like position we can
08:55 - use size we can do all this now the
08:57 - reason that this is happening in the
08:59 - bottom left-hand corner of the screen is
09:00 - because my grid currently is just a
09:02 - widget and a widget has a default size
09:04 - set by Kibby so we need to override that
09:07 - size so that it goes to the whole size
09:09 - of the entire application so the way we
09:11 - do that you just say sighs :
09:14 - and then we're gonna say a root dot and
09:15 - we'll say it with and then root dot
09:18 - height now why does this work and how
09:21 - does this work well the root widget is
09:23 - gonna be my grid okay and my grid right
09:28 - is gonna be like the size of the entire
09:30 - application that's that's what it's
09:33 - gonna have so it already has those
09:34 - default properties width height whatnot
09:36 - right so when we do root out with and
09:38 - root dot height we're gonna get that
09:40 - root widgets width and height which is
09:42 - gonna be the entire window and we're
09:44 - gonna fill our grid layout in that
09:45 - window so we'll see that how this works
09:47 - in a second so I run this and now you
09:49 - can see that the entire window is filled
09:51 - because we used root dot width and root
09:54 - dot height and I could be saying this
09:56 - wrong but essentially root is just
09:58 - getting your main window okay so the
10:00 - root window it's getting the width and
10:02 - the height and that's what we're
10:03 - expanding to to fill that window so if I
10:06 - wanted to do I could do something like
10:08 - okay if I go here I could do root out
10:10 - with minus 100 I can do roof dealt with
10:13 - minus 100 right and let's run this and
10:15 - see what we get and now you can see that
10:18 - we're going in the bottom because we've
10:19 - not expanded as much right so you can
10:22 - see kind of how that works and if I
10:24 - wanted to change the position I'll show
10:26 - you quickly and then I'm gonna go to the
10:27 - next video probably after this position
10:29 - we can do a hundred one hundred and now
10:30 - watch what's gonna happen we're gonna be
10:32 - padded a hundred on each side
10:34 - there are a 100 hundred width
10:37 - okay so let's we got a minus 200 from
10:39 - this quick math here so let's do that
10:42 - and you can see now we're padded in the
10:44 - middle of the window so we'll let you
10:46 - guys kind of play around with this add
10:47 - some more widgets mess with this
10:49 - language I'm going to talk about it more
10:50 - in the next video just want to give a
10:51 - quick introduction and you can see that
10:53 - we're creating an entire application
10:55 - without having to type any code so we're
10:57 - gonna have all the logic essentially in
10:59 - here and then all of our styling we're
11:01 - gonna do in these Cavey files and it's
11:03 - just nice and you can see that it's
11:05 - pretty easy
11:05 - go and fix things as opposed to looking
11:07 - in one straight line and seeing like
11:09 - self dot add widget' and whatnot okay so
11:11 - anyways if you guys enjoyed the video
11:12 - please make sure you leave a like and
11:14 - subscribe and I'll see you again in the
11:15 - next one
11:16 - [Music]

Cleaned transcript:

hey guys welcome back to another Kibby tutorial so in today's video i'm actually gonna be going into something called the kv design language now i guess you could call it Kibby as well but the file extension for it is dot kv and essentially you can kind of think of this almost as like a CSS because it's a design language which is meant to kind of simplify your code so that you don't have to have like if you remember in the last video we had like don't add widget' and then we were defining the widget and we were giving it like a text color and a font color so this is just a much easier way to be able to style elements so essentially what I'm gonna do is you can see here I've deleted all the code from the last video essentially other than the main stuff and I'm actually gonna recreate exactly what we did in the last video using the Kivi design language to show you the contrast between the two and you guys can pick whether or not you'd like to design things directly from Python without using this Cavey language but it's super simple and it's not like a whole new programming language to learn it's literally like you'll see when I start doing it how easy it really is but essentially the reason we use that is to separate our style from our code and it's typically a good idea the way I kind of like to think of it is separating your HTML from your javis are from your JavaScript from your CSS if you guys ever did any web development stuff you'll probably see why I'm using that as a like to relate to it all right so essentially what we need to do is we need to create a style file right and this file is gonna have all of the the styling code in it for us what we need to do is we have to create a new file so if you're working a PI time you can just go new file otherwise just go new text file I'm sure you guys could probably figure out how to do that if not let me know and what you're gonna have to call this file if you're working with me and you named your main class that has the build method in it my app you're gonna go lower cases my dot kV now to explain why we do this in a second but if you're working with me and you named it the same you do my kV okay and save that file now if you didn't what you have to do is you have to name the kv file the same as this class name except if it ends in a p you have to remove the app so in this case we said my app so we just called it my and we moved the app now also note everything is in lower cases so everything you type in this file um sorry not in this file like whatever you name this file is always gonna be lower cases so even if my class name was my app like that with a capital my you would just name it lower case my dot kV okay and you're moving the app so to just show you a contrast here in case anyone's confused if I do like hello dot app I would name this file hello dot kV and Hello would be in all lower cases now if I were to name this file let's just say like CLS then I would just name my file CLS dot K V again in all lower cases if I were to name it CLS dot or CLS app then again it would still be CLS because if you end an app you don't use that in the name I know it's confusing why the heck would they do that don't ask me but that is how you do it if you're having any issues of that please let me know ok so now that we have that file I'm gonna show you how we can actually add widgets to our screen without doing anything in this Python class actually there's one thing we have to do so the first thing I'm gonna do for sorry from Python excuse me I need to give you AI X dot widget so we're gonna import that and then we're gonna import widget now the reason we're doing this is because our class has to inherit from widget just when we're gonna be using it inside this KB file so we just need to import this widget and then just make it inherit from widget as opposed to that grid layout that we had before so now we're gonna go into this KB file now this KB file is really nice and essentially the way it works is you can just type out exactly what you want in here to show up on on the screen so what we have to first do is we have to reference the class that we're gonna be using to well draw things to the screen so like if we had multiple windows week would reference different classes and you'll see the way that we do this so our class is called my grid right and this is what's gonna be returned from my app and it so it's building so so we need to reference first so what we'll do in here is we'll do a little tag and we'll say my grid now this defines that we're gonna be working with the my grid class ok you put in this little tag and everything in here works by indentation not brackets ok so just like python everything needs to be indented properly so we're gonna hit tab and i'm just gonna type something out and we'll talk about exactly what it's doing ok I'm gonna type label tab again and then say text and we'll just say tech would Tim okay now I'm gonna save this file ctrl s alright and let's just actually let's talk about exactly what I did here so my class name was my grid inherits from widget in here so we're gonna return to my grid right so we have this KB file we haven't done anything in the Python file to reference this okay we just named it appropriately we named it my again because that's the way the naming convention works and we're gonna say here we're gonna put a label and it's gonna have the text tech with tip so let's just run this first and see what's happening I'll explain why after so you can see that we actually get tech with Tim showing up in the bottom left hand corner of the screen so you might have expected it to be in the middle a talk about why that doesn't happen in a second but essentially you can see that we've added a label to our Kibby file and we didn't like type anything to load this file in what actually happens is when you run Gibby it automatically looks for this class it looks for this style file and the way it does that is because it looks at this class name I don't know Kay I don't know what I just did there it looks at this class name right and then it tries to find a kivi file that is that goes with it so in this case my Kb it finds that and then it can parse through this and add those widgets for us so let's just see how exactly this works just add a little label and then I had a text property tech with Tim now the reason that it's like in the bottom lefthand corner is just because we have to kind of move it around which I'm gonna show you in the next video but let's actually start building what we had in the last video using this KB file so what we're gonna do to do this and I said I should go look at my other screen here quickly is we're gonna set up exactly what we did before um I'll just go through it and it's better as an example so I'm gonna make a grid layout okay and the grid layout is gonna have columns to write or actually we need to do columns one because we're gonna have multiple grid layouts okay so we're gonna have a grid layout and it's gonna have one column okay inside of this grid layout we're gonna have another grid layout so notice that because this other grid layout is going to be inside of this I have it indented in inline with this so that means that anything that kind of is like that's why the indentation works anything insides like indented pass is gonna be inside something so if I put this label here now it's gonna be inside this second gridlayout so I'll go through it'll make more sense once I can I get typing but essentially what I'm gonna do is I'm just gonna rebuild what I had before so label will say its name and I'm actually I'm just gonna do one loss this time just to save us some time and what else we had in grid layout we had a text input so let's put that and then what was a property of text input multiline equals false right okay and then again inside a grid layout we have another label so let's do that and we'll say text equals I'm just gonna do email so last name this time we'll just ignore that and now we'll do text input equals multiline oh what am I saying okay so actually I already made a mistake here equal signs I'm used to Python they need to be colons just like you might have in CSS right so if you guys are putting equal signs it's not going to work you got to do colons okay okay so text input colon tab and then we'll say multiline colon false like that I don't think it matters if you have a space or not afterwards I mean you guys can play with that okay so we have that now so we added that grid layout inside of the other grid layout so if you remember what else we had we also added a button so let's add this and the button had text and we said submit like that okay so this is what we've done we've added a grid layout inside of or we've created a grid layout onecall we've added a grid layout that has label text input label text input the same as we did before inside of the other grid layout we already talked to a why that works and then we have a button that is inside at the main grid layout so let's run this and see what we get okay so we get this and this is actually exactly what we had before it just sits in the bottom corner of the screen right so you can count it you can see why this is how this is similar but why is it in the bottom corner of the screen and how do we get it to like move up and be part of the full screen so I'll show you this quickly and then I'm actually gonna probably end here and we'll go into more stuff in the next video but essentially the way that we get this to go into the like the amount of the big part of the screen is we have to define a few more properties so inside of our my grid here okay actually let's do inside of this grid there's a few more properties that we can use we can use like position we can use size we can do all this now the reason that this is happening in the bottom lefthand corner of the screen is because my grid currently is just a widget and a widget has a default size set by Kibby so we need to override that size so that it goes to the whole size of the entire application so the way we do that you just say sighs and then we're gonna say a root dot and we'll say it with and then root dot height now why does this work and how does this work well the root widget is gonna be my grid okay and my grid right is gonna be like the size of the entire application that's that's what it's gonna have so it already has those default properties width height whatnot right so when we do root out with and root dot height we're gonna get that root widgets width and height which is gonna be the entire window and we're gonna fill our grid layout in that window so we'll see that how this works in a second so I run this and now you can see that the entire window is filled because we used root dot width and root dot height and I could be saying this wrong but essentially root is just getting your main window okay so the root window it's getting the width and the height and that's what we're expanding to to fill that window so if I wanted to do I could do something like okay if I go here I could do root out with minus 100 I can do roof dealt with minus 100 right and let's run this and see what we get and now you can see that we're going in the bottom because we've not expanded as much right so you can see kind of how that works and if I wanted to change the position I'll show you quickly and then I'm gonna go to the next video probably after this position we can do a hundred one hundred and now watch what's gonna happen we're gonna be padded a hundred on each side there are a 100 hundred width okay so let's we got a minus 200 from this quick math here so let's do that and you can see now we're padded in the middle of the window so we'll let you guys kind of play around with this add some more widgets mess with this language I'm going to talk about it more in the next video just want to give a quick introduction and you can see that we're creating an entire application without having to type any code so we're gonna have all the logic essentially in here and then all of our styling we're gonna do in these Cavey files and it's just nice and you can see that it's pretty easy go and fix things as opposed to looking in one straight line and seeing like self dot add widget' and whatnot okay so anyways if you guys enjoyed the video please make sure you leave a like and subscribe and I'll see you again in the next one
