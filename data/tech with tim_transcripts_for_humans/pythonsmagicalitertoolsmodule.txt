With timestamps:

00:02 - [Music]
00:08 - in this video i'm going to be
00:09 - introducing you to an awesome module in
00:11 - python called itter tools now this
00:14 - module is indeed magical and the reason
00:16 - for that is it provides a bunch of
00:17 - built-in functionality specifically
00:20 - functions for creating iterators for
00:22 - efficient looping if i'm just quickly
00:24 - scrolling through here you can see we
00:25 - have stuff like count cycle repeat
00:27 - accumulate chain chain from iterable
00:30 - compress pairwise star map product
00:32 - permutations combinations and a ton of
00:35 - stuff that you've probably done by
00:36 - yourself from scratch simply because you
00:39 - did not know the function existed in a
00:41 - built-in module called itter tools so
00:43 - with that said let's head over to the
00:45 - code editor and i'll start walking you
00:46 - through some of the more useful
00:48 - functions from the intertools module so
00:50 - the first thing i'm going to do here is
00:51 - give you a very quick explanation of
00:53 - what an iterator is because all of the
00:55 - intertools functions are going to return
00:57 - an iterator object and we should
00:59 - probably understand how that works now i
01:01 - will mention that if you do have my
01:02 - programming course programming expert
01:04 - then you would already understand
01:06 - iterators you'd understand generators
01:08 - decorators more advanced programming
01:10 - object-oriented programming and all
01:12 - kinds of cool features in python so if
01:14 - you're interested check it out from the
01:15 - link in the description programming
01:17 - expert dot io you can use discount code
01:19 - tim anyways what is an iterator well to
01:22 - demonstrate this to you let's start by
01:24 - having a look at something known as the
01:25 - range function now we've probably seen
01:27 - this before but if i do something like r
01:29 - is equal to range and then let's go with
01:31 - a range of say 1 to 10 when i print this
01:34 - out here let's have a look and notice i
01:36 - simply get range 110 now range itself is
01:40 - not an iterator but it's known as
01:42 - iterable now anything that's iterable
01:44 - simply has an iter method on
01:47 - so iter is this function that you can
01:49 - call and what this does is actually call
01:51 - the corresponding underscore underscore
01:53 - either which is on the class that
01:55 - represents this range function so i know
01:57 - this is a bit complicated but on range
01:59 - there is this underscore underscore
02:01 - either function that you can call when
02:03 - you call that it returns to you an
02:05 - iterator and the iterator is what you
02:07 - iterate over to get all of the values in
02:09 - the range created by this object so for
02:12 - example if i print out the iter of r
02:15 - you're going to see that i get a range
02:17 - iterator object now this range iterator
02:20 - object is something i can iterate over
02:22 - so let's have a look here let's just say
02:24 - i
02:24 - is equal to that and now let's print out
02:27 - for example the list of i
02:29 - when i do this i get one two three four
02:31 - five six seven eight nine because this
02:32 - is iterable so i can use the list
02:34 - function on it and it gives me all of
02:35 - the elements in this iterator however an
02:38 - iterator is an iterator when it has an
02:41 - underscore underscore next underscore
02:43 - underscore method so this method is a
02:45 - special method that returns to the next
02:47 - value in the iterable sequence so when i
02:50 - have a range of 1 to 10 what i can do is
02:52 - the following i can print out the next
02:55 - of my iterator which is i and let's
02:57 - print this out a few times
02:59 - now when i do this notice i get 1 2 and
03:01 - 3 right it's giving me all of the values
03:03 - in my sequence and then to go even
03:05 - further let's have a look at something
03:07 - like this 4x in and then i'm going to
03:09 - say i because i can loop through an
03:11 - iterator right and i have my iterator i
03:13 - and when i start
03:14 - printing x here let's have a look and
03:17 - notice that i don't get any repeated
03:18 - values so i have my one two three from
03:20 - all of the necks up here and then when i
03:22 - continue looping through the iterator i
03:24 - get four five six seven eight nine
03:25 - because since we've called the next
03:27 - method manually we've been moved to the
03:30 - next values in the iterable sequence i
03:32 - know this is a little bit confusing if
03:34 - this is the first time that you're
03:35 - seeing it but essentially when you have
03:37 - an iterator or something that's iterable
03:39 - sorry you can call this iter function on
03:41 - it that returns to you an iterator and
03:44 - then the iterator you can call this next
03:46 - function on and it gives you the next
03:48 - value in the iterator sequence you know
03:50 - that you're finished iterating when a
03:52 - specific exception is raised this
03:54 - exception is known as stop iteration and
03:56 - to show you that let's just print next a
03:58 - bunch of times so we only have nine
04:01 - values in our sequence here so when i
04:03 - print the next of i more than nine times
04:06 - you'll see here that we get a stop
04:08 - iteration exception and that tells us
04:10 - there's no more values in our iterator
04:12 - to be returned so that was a very high
04:14 - level overview of iterators and iterable
04:16 - objects however you may be interested to
04:19 - know that when we have a for loop like
04:21 - this and we're looping through an
04:22 - iterable object what actually happens
04:24 - implicitly is you're going to call the
04:26 - iter function or method on this iterable
04:30 - object that's going to return an
04:32 - iterator and then the for loop is going
04:34 - to continually call the next method on
04:36 - this iterator until eventually the stop
04:39 - iteration exception is raised so once
04:41 - that exception is raised the for loop
04:43 - knows there's no more objects to loop
04:44 - through and it can stop iterating and
04:47 - the value that you're going to look at
04:48 - for i here for our iterator variable is
04:51 - going to be equal to whatever that next
04:53 - method returned at every single step in
04:55 - the iterator hopefully that makes a
04:57 - little bit of sense but again we have
04:58 - the next function we have the inner
05:01 - function and these are really just
05:03 - mapping to the dot underscore underscore
05:07 - next like this
05:09 - and to the
05:11 - dot and then this is going to be
05:12 - underscore underscore iter underscore
05:14 - underscore method so anything that is
05:17 - iterable has this iter method and
05:18 - anything that is an iterator has this
05:20 - next method and when you use the next
05:22 - function and the iter function you're
05:24 - just calling these methods on those
05:26 - objects all right hopefully that is
05:28 - clear now let's have a look at the
05:29 - itertools module so the first type of
05:32 - functions i'm going to show you from the
05:33 - editor tools module are known as
05:35 - infinite iterators and what that means
05:37 - is that they can return an infinite
05:38 - sequence and they actually do this by
05:40 - using something known as the generator
05:42 - syntax i'm not going to explain what a
05:44 - generator is in this video again you
05:46 - could learn that from something like
05:47 - programming expert but for now let's
05:49 - have a look at the first function which
05:51 - is count so this is an infinite iterator
05:53 - and the way this works is you pass a
05:55 - start and an optional step value if you
05:58 - don't pass a step this will by default
06:00 - be one and this will do exactly what it
06:02 - says it will simply count a sequence
06:04 - starting at some value and going up by
06:05 - the step every single time so if i start
06:08 - at 10 which is what i'm passing for the
06:09 - start here and then i have a step of
06:12 - five we're going to count up by five
06:14 - until we decide we no longer want to
06:15 - iterate over this iterator so if i run
06:18 - the code here you can see that we get a
06:19 - sequence where we are starting at 10
06:21 - going up by five and i've just made it
06:23 - so we manually stop here at a hundred if
06:25 - i didn't have this break then this would
06:27 - happen infinitely
06:29 - because again this is an infinite
06:30 - sequence so that is cool that is the
06:33 - count function now let's move on to the
06:35 - next one the next function that i have
06:37 - for you is also an infinite iterator and
06:39 - this is known as repeat now this is
06:41 - pretty straightforward but this is going
06:42 - to take in a element this element could
06:45 - be a list it could be a string it can be
06:46 - really anything you want and then the
06:48 - maximum number of times you'd like to
06:50 - repeat this this is optional if you do
06:52 - not pass this it will repeat
06:54 - indefinitely so for here if i have
06:56 - repeat and i'm repeating hello and i say
06:58 - a maximum of 10 times then i can loop
07:01 - through this repeater iterator that's
07:02 - what's going to be returned here when
07:04 - you call the repeat function
07:06 - up to 10 times and print out the value
07:08 - so if i do this you'll just see that we
07:10 - get 10 hellos showing up on the screen
07:12 - so this is useful if you want to repeat
07:14 - something a certain number of times so
07:16 - the next function that i have for you is
07:18 - known as cycle now this is pretty
07:20 - straightforward this is going to take in
07:21 - some iterable object could be a string
07:24 - could be a tuple could be a list really
07:25 - whatever you want and it's going to
07:27 - allow you to cycle over all of the
07:29 - elements as many times as you would like
07:32 - again these are infinite iterators so
07:33 - you have to decide when you want to stop
07:35 - iterating over them they will continue
07:37 - to generate a sequence forever so let's
07:40 - run the code here and have a look at
07:41 - what this does notice that we just cycle
07:43 - through a b c d e f constantly until i
07:46 - have a manual stop here where we've done
07:48 - this over a hundred times so what i'm
07:50 - actually doing is manually calling the
07:51 - next method here on my cycler which is
07:54 - equal to a cycle iterator and if we want
07:56 - to just have a quick look here at what
07:58 - the iterator object actually looks like
08:00 - we can print out our cycler and notice
08:03 - here that i get an itertools.cycle
08:05 - object which is an iterator and we know
08:06 - it's an iterator because it has this
08:08 - next method which i can manually call
08:11 - using the next function now i also could
08:13 - loop over this using a for loop if i
08:15 - wanted to so i could just do something
08:16 - like 4i in and then this would be cycler
08:20 - however if i did this i would need to
08:21 - implement a manual break condition
08:24 - because again that would go infinitely
08:25 - unless i manually broke it at some point
08:28 - so that is cycle again takes in some
08:29 - iterable and allows you to cycle over it
08:31 - as many times as you would like so the
08:33 - next set of iterators that i'm going to
08:34 - show you are known as terminating
08:36 - iterators they're not infinite they do
08:38 - have a defined number of elements that
08:40 - they will return to you so the first
08:42 - iterator to look at here is known as
08:43 - accumulate and the best example of this
08:46 - is something like a running sum so i can
08:48 - say the running sum is equal to
08:49 - accumulate and then accumulate an
08:51 - iterable object in this case a bunch of
08:53 - integers and what this does is give me
08:54 - the sum of all of the elements at the
08:57 - current position and prior in the list
08:59 - so if i print this out here you see we
09:01 - get 1 3 6 10 so on and so forth so the
09:04 - first element is the sum of just the
09:05 - first element which is one second is the
09:07 - sum of these two elements the third is
09:09 - the sum of these three elements so on
09:11 - until you get to the very end and one
09:13 - thing to note here about this is that
09:15 - you've probably implemented this
09:16 - behavior by yourself in python before
09:19 - this will be much more memory efficient
09:21 - as well as faster than if you were just
09:23 - just to write this story with your own
09:25 - for loop and again the reason for this
09:27 - is it's going to use the generator
09:28 - syntax it's actually only going to give
09:30 - you these values when you request them
09:32 - it's not going to be storing them in
09:34 - memory and taking up unnecessary space
09:36 - one other thing to note here is that
09:38 - whenever you're looking at an iterator
09:39 - so in this case we have accumulate we
09:41 - can call the list function on it
09:43 - directly and that will run the next
09:45 - method on the iterator until there's no
09:47 - more elements left and just collect all
09:49 - those values in a list so rather than
09:50 - manually looping through this using a
09:52 - for loop we're calling the next method
09:54 - ourself we're just using lists now to
09:56 - quickly grab the results of the iterate
09:58 - hopefully that makes sense that is
10:00 - accumulate so the next iterator to show
10:02 - you is known as chain this is very
10:04 - straightforward it simply chains two
10:05 - iterable objects together if i run this
10:08 - code you can see that we get abc and
10:10 - then def where the first iterable was
10:12 - this string and the second iterable was
10:14 - this one again this is going to be more
10:16 - performant and memory efficient than if
10:18 - you were to try to implement this
10:19 - behavior on your own and say concatenate
10:22 - two lists together this is not
10:23 - concatenating two lists it is returning
10:25 - to an iterator that allows you to
10:27 - retrieve one element at a time and
10:29 - process and use that as you need to that
10:31 - is the point of the iterators is that
10:33 - you're not storing everything in memory
10:35 - you're grabbing one individual element
10:37 - at a time and using it as you need to be
10:40 - as opposed to storing everything in
10:42 - memory when you only need the current
10:44 - element in the sequence hopefully that
10:45 - makes a bit of sense let's move on to
10:47 - the next example the next example is
10:49 - very similar to the first one but this
10:51 - is chain from iterable now let's just
10:53 - have a look at what this does when we
10:54 - pass in a nested list so notice here
10:57 - that i actually get this list flattened
10:59 - so this is something that you can do
11:01 - with the chain from interval pass in
11:03 - some type of nested structure it will
11:05 - actually flatten that structure for you
11:07 - by chaining all of the elements that are
11:10 - inside of this iterable object next
11:13 - we'll move on to compress as i was
11:16 - saying the next iterator that we have
11:18 - here is known as compress now what this
11:20 - does is take in some data source as well
11:22 - as some selectors and it simply keeps
11:24 - all of the items that are inside of this
11:26 - data if the corresponding item in the
11:29 - selector is true so in this case i have
11:31 - a nested structure that has three
11:34 - elements so this this
11:36 - and this then i pass in an array here i
11:38 - guess sorry a list that contains
11:40 - booleans now true indicates that we're
11:42 - going to keep an element false means we
11:44 - are not going to keep it so if i run
11:46 - this you'll see that we only keep a b
11:47 - and c because true was here for the
11:50 - first element now if i make this true
11:54 - you'll see that now we get the second
11:55 - element as well and i could
11:56 - alternatively change these to be
11:58 - anything that returns a truthy value so
12:00 - i could put say zero and one and this
12:02 - would work as well moving on we have the
12:05 - pairwise function this one is cool it's
12:06 - simply going to pair all of the adjacent
12:08 - elements in our iterable so let's run
12:10 - this and have a look and notice we get
12:12 - one two two three three four so on and
12:15 - so forth moving on the next set of
12:17 - iterators i'm going to show you are
12:19 - known as combinatronic iterators now the
12:21 - first one to have a look at here is a
12:23 - product now what the product is going to
12:25 - do is return the cartesian product of
12:27 - two iterable objects now this would be
12:29 - equivalent to kind of a nested for loop
12:31 - looping through every single possible
12:33 - pair of the items in iterable one and
12:35 - iterable two so let's have a look here
12:37 - when i print this out notice i get 1a 1b
12:40 - 1c 2a 2b 2c 3a 3b 3c that is what the
12:45 - cartesian product returns moving on we
12:47 - have the permutations iterator or
12:50 - function whatever you'd like to refer to
12:51 - it as and what this does is return all
12:53 - of the permutations of a particular size
12:56 - of an iterable object so let's just have
12:58 - a look at what this returns we get a b a
13:00 - c a d b a b c so on and so forth and
13:04 - notice the order here is important so
13:06 - something like bc and cb are different
13:09 - permutations because the c and the b are
13:11 - in a different order that is not the
13:13 - same as what i'm going to show you next
13:14 - which is combinations so as i promised
13:17 - the next function to look at here is
13:19 - combinations and this is going to give
13:20 - you all of the combinations of a
13:22 - particular size of an iterable object so
13:24 - let's have a look at this and notice
13:26 - these are the combinations note there is
13:29 - a lot less combinations than there is
13:30 - permutations and the reason for that is
13:33 - that the ordering of the elements does
13:35 - not matter in a combination so ac and ca
13:38 - would be the same combination hence why
13:40 - we're getting less pairs here now let's
13:43 - have a look at a size of three
13:45 - notice we're going to have four possible
13:47 - combinations here if we have a look at
13:49 - four we're only going to have one
13:51 - combination because there's only one
13:52 - unique combination of a b c and d so
13:55 - with that said i will start wrapping up
13:56 - the video here i will mention that these
13:58 - can become very powerful when you start
14:00 - combining them together so combining say
14:02 - the combinatronic iterator is with a
14:04 - terminating iterator maybe mixing in a
14:06 - map and filter function somewhere along
14:08 - the line and there's a bunch of other
14:10 - functions here that i did not show you
14:12 - from the intertools module so feel free
14:14 - to have a look at those from the
14:15 - documentation in the description
14:17 - hopefully you guys found some value from
14:19 - this video if you did make sure to leave
14:20 - a like subscribe to the channel and i
14:22 - will see you in another one
14:26 - [Music]
14:32 - you

Cleaned transcript:

in this video i'm going to be introducing you to an awesome module in python called itter tools now this module is indeed magical and the reason for that is it provides a bunch of builtin functionality specifically functions for creating iterators for efficient looping if i'm just quickly scrolling through here you can see we have stuff like count cycle repeat accumulate chain chain from iterable compress pairwise star map product permutations combinations and a ton of stuff that you've probably done by yourself from scratch simply because you did not know the function existed in a builtin module called itter tools so with that said let's head over to the code editor and i'll start walking you through some of the more useful functions from the intertools module so the first thing i'm going to do here is give you a very quick explanation of what an iterator is because all of the intertools functions are going to return an iterator object and we should probably understand how that works now i will mention that if you do have my programming course programming expert then you would already understand iterators you'd understand generators decorators more advanced programming objectoriented programming and all kinds of cool features in python so if you're interested check it out from the link in the description programming expert dot io you can use discount code tim anyways what is an iterator well to demonstrate this to you let's start by having a look at something known as the range function now we've probably seen this before but if i do something like r is equal to range and then let's go with a range of say 1 to 10 when i print this out here let's have a look and notice i simply get range 110 now range itself is not an iterator but it's known as iterable now anything that's iterable simply has an iter method on so iter is this function that you can call and what this does is actually call the corresponding underscore underscore either which is on the class that represents this range function so i know this is a bit complicated but on range there is this underscore underscore either function that you can call when you call that it returns to you an iterator and the iterator is what you iterate over to get all of the values in the range created by this object so for example if i print out the iter of r you're going to see that i get a range iterator object now this range iterator object is something i can iterate over so let's have a look here let's just say i is equal to that and now let's print out for example the list of i when i do this i get one two three four five six seven eight nine because this is iterable so i can use the list function on it and it gives me all of the elements in this iterator however an iterator is an iterator when it has an underscore underscore next underscore underscore method so this method is a special method that returns to the next value in the iterable sequence so when i have a range of 1 to 10 what i can do is the following i can print out the next of my iterator which is i and let's print this out a few times now when i do this notice i get 1 2 and 3 right it's giving me all of the values in my sequence and then to go even further let's have a look at something like this 4x in and then i'm going to say i because i can loop through an iterator right and i have my iterator i and when i start printing x here let's have a look and notice that i don't get any repeated values so i have my one two three from all of the necks up here and then when i continue looping through the iterator i get four five six seven eight nine because since we've called the next method manually we've been moved to the next values in the iterable sequence i know this is a little bit confusing if this is the first time that you're seeing it but essentially when you have an iterator or something that's iterable sorry you can call this iter function on it that returns to you an iterator and then the iterator you can call this next function on and it gives you the next value in the iterator sequence you know that you're finished iterating when a specific exception is raised this exception is known as stop iteration and to show you that let's just print next a bunch of times so we only have nine values in our sequence here so when i print the next of i more than nine times you'll see here that we get a stop iteration exception and that tells us there's no more values in our iterator to be returned so that was a very high level overview of iterators and iterable objects however you may be interested to know that when we have a for loop like this and we're looping through an iterable object what actually happens implicitly is you're going to call the iter function or method on this iterable object that's going to return an iterator and then the for loop is going to continually call the next method on this iterator until eventually the stop iteration exception is raised so once that exception is raised the for loop knows there's no more objects to loop through and it can stop iterating and the value that you're going to look at for i here for our iterator variable is going to be equal to whatever that next method returned at every single step in the iterator hopefully that makes a little bit of sense but again we have the next function we have the inner function and these are really just mapping to the dot underscore underscore next like this and to the dot and then this is going to be underscore underscore iter underscore underscore method so anything that is iterable has this iter method and anything that is an iterator has this next method and when you use the next function and the iter function you're just calling these methods on those objects all right hopefully that is clear now let's have a look at the itertools module so the first type of functions i'm going to show you from the editor tools module are known as infinite iterators and what that means is that they can return an infinite sequence and they actually do this by using something known as the generator syntax i'm not going to explain what a generator is in this video again you could learn that from something like programming expert but for now let's have a look at the first function which is count so this is an infinite iterator and the way this works is you pass a start and an optional step value if you don't pass a step this will by default be one and this will do exactly what it says it will simply count a sequence starting at some value and going up by the step every single time so if i start at 10 which is what i'm passing for the start here and then i have a step of five we're going to count up by five until we decide we no longer want to iterate over this iterator so if i run the code here you can see that we get a sequence where we are starting at 10 going up by five and i've just made it so we manually stop here at a hundred if i didn't have this break then this would happen infinitely because again this is an infinite sequence so that is cool that is the count function now let's move on to the next one the next function that i have for you is also an infinite iterator and this is known as repeat now this is pretty straightforward but this is going to take in a element this element could be a list it could be a string it can be really anything you want and then the maximum number of times you'd like to repeat this this is optional if you do not pass this it will repeat indefinitely so for here if i have repeat and i'm repeating hello and i say a maximum of 10 times then i can loop through this repeater iterator that's what's going to be returned here when you call the repeat function up to 10 times and print out the value so if i do this you'll just see that we get 10 hellos showing up on the screen so this is useful if you want to repeat something a certain number of times so the next function that i have for you is known as cycle now this is pretty straightforward this is going to take in some iterable object could be a string could be a tuple could be a list really whatever you want and it's going to allow you to cycle over all of the elements as many times as you would like again these are infinite iterators so you have to decide when you want to stop iterating over them they will continue to generate a sequence forever so let's run the code here and have a look at what this does notice that we just cycle through a b c d e f constantly until i have a manual stop here where we've done this over a hundred times so what i'm actually doing is manually calling the next method here on my cycler which is equal to a cycle iterator and if we want to just have a quick look here at what the iterator object actually looks like we can print out our cycler and notice here that i get an itertools.cycle object which is an iterator and we know it's an iterator because it has this next method which i can manually call using the next function now i also could loop over this using a for loop if i wanted to so i could just do something like 4i in and then this would be cycler however if i did this i would need to implement a manual break condition because again that would go infinitely unless i manually broke it at some point so that is cycle again takes in some iterable and allows you to cycle over it as many times as you would like so the next set of iterators that i'm going to show you are known as terminating iterators they're not infinite they do have a defined number of elements that they will return to you so the first iterator to look at here is known as accumulate and the best example of this is something like a running sum so i can say the running sum is equal to accumulate and then accumulate an iterable object in this case a bunch of integers and what this does is give me the sum of all of the elements at the current position and prior in the list so if i print this out here you see we get 1 3 6 10 so on and so forth so the first element is the sum of just the first element which is one second is the sum of these two elements the third is the sum of these three elements so on until you get to the very end and one thing to note here about this is that you've probably implemented this behavior by yourself in python before this will be much more memory efficient as well as faster than if you were just just to write this story with your own for loop and again the reason for this is it's going to use the generator syntax it's actually only going to give you these values when you request them it's not going to be storing them in memory and taking up unnecessary space one other thing to note here is that whenever you're looking at an iterator so in this case we have accumulate we can call the list function on it directly and that will run the next method on the iterator until there's no more elements left and just collect all those values in a list so rather than manually looping through this using a for loop we're calling the next method ourself we're just using lists now to quickly grab the results of the iterate hopefully that makes sense that is accumulate so the next iterator to show you is known as chain this is very straightforward it simply chains two iterable objects together if i run this code you can see that we get abc and then def where the first iterable was this string and the second iterable was this one again this is going to be more performant and memory efficient than if you were to try to implement this behavior on your own and say concatenate two lists together this is not concatenating two lists it is returning to an iterator that allows you to retrieve one element at a time and process and use that as you need to that is the point of the iterators is that you're not storing everything in memory you're grabbing one individual element at a time and using it as you need to be as opposed to storing everything in memory when you only need the current element in the sequence hopefully that makes a bit of sense let's move on to the next example the next example is very similar to the first one but this is chain from iterable now let's just have a look at what this does when we pass in a nested list so notice here that i actually get this list flattened so this is something that you can do with the chain from interval pass in some type of nested structure it will actually flatten that structure for you by chaining all of the elements that are inside of this iterable object next we'll move on to compress as i was saying the next iterator that we have here is known as compress now what this does is take in some data source as well as some selectors and it simply keeps all of the items that are inside of this data if the corresponding item in the selector is true so in this case i have a nested structure that has three elements so this this and this then i pass in an array here i guess sorry a list that contains booleans now true indicates that we're going to keep an element false means we are not going to keep it so if i run this you'll see that we only keep a b and c because true was here for the first element now if i make this true you'll see that now we get the second element as well and i could alternatively change these to be anything that returns a truthy value so i could put say zero and one and this would work as well moving on we have the pairwise function this one is cool it's simply going to pair all of the adjacent elements in our iterable so let's run this and have a look and notice we get one two two three three four so on and so forth moving on the next set of iterators i'm going to show you are known as combinatronic iterators now the first one to have a look at here is a product now what the product is going to do is return the cartesian product of two iterable objects now this would be equivalent to kind of a nested for loop looping through every single possible pair of the items in iterable one and iterable two so let's have a look here when i print this out notice i get 1a 1b 1c 2a 2b 2c 3a 3b 3c that is what the cartesian product returns moving on we have the permutations iterator or function whatever you'd like to refer to it as and what this does is return all of the permutations of a particular size of an iterable object so let's just have a look at what this returns we get a b a c a d b a b c so on and so forth and notice the order here is important so something like bc and cb are different permutations because the c and the b are in a different order that is not the same as what i'm going to show you next which is combinations so as i promised the next function to look at here is combinations and this is going to give you all of the combinations of a particular size of an iterable object so let's have a look at this and notice these are the combinations note there is a lot less combinations than there is permutations and the reason for that is that the ordering of the elements does not matter in a combination so ac and ca would be the same combination hence why we're getting less pairs here now let's have a look at a size of three notice we're going to have four possible combinations here if we have a look at four we're only going to have one combination because there's only one unique combination of a b c and d so with that said i will start wrapping up the video here i will mention that these can become very powerful when you start combining them together so combining say the combinatronic iterator is with a terminating iterator maybe mixing in a map and filter function somewhere along the line and there's a bunch of other functions here that i did not show you from the intertools module so feel free to have a look at those from the documentation in the description hopefully you guys found some value from this video if you did make sure to leave a like subscribe to the channel and i will see you in another one you
